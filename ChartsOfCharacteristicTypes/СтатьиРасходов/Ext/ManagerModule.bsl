
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("ХозяйственнаяОперация") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ДоступныеОперации.Ссылка КАК Ссылка
			|ИЗ
			|	ПланВидовХарактеристик.СтатьиРасходов.ДоступныеХозяйственныеОперации КАК ДоступныеОперации
			|ГДЕ
			|	ДоступныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
			|");
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.Отбор.ХозяйственнаяОперация);
			Параметры.Отбор.Вставить("Ссылка", Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Заполняет служебные реквизиты статьи расходов в табличной части
//
// Параметры:
//  ТабличнаяЧасть - табличная часть в которой нужно заполнить служебные реквизиты статей расходов
//
Процедура ЗаполнитьСлужебныеРеквизиты(ТабличнаяЧасть, Реквизиты = "") Экспорт
	
	ДоходыРасходыСервер.ЗаполнитьСлужебныеРеквизитыСтатей(
		ПустаяСсылка().Метаданные(), ТабличнаяЧасть, Реквизиты, РеквизитыПоУмолчанию(), ЗначенияПоУмолчанию());
	
КонецПроцедуры

// Заполняет служебные реквизиты статьи расходов в строке табличной части
//
// Параметры:
//  ТекущаяСтрока - 
//
Процедура ЗаполнитьСлужебныеРеквизитыВСтроке(ТекущаяСтрока, КэшированныеЗначения, Реквизиты = "") Экспорт
	
	ДоходыРасходыСервер.ЗаполнитьСлужебныеРеквизитыВСтроке(
		ТекущаяСтрока, КэшированныеЗначения, Реквизиты, РеквизитыПоУмолчанию(), ЗначенияПоУмолчанию());
	
КонецПроцедуры

// Обрабатывает изменение статьи расходов
//
// Параметры:
//  Объект - 
//  ТекущаяСтрока - 
//
Процедура ОбработатьИзменениеСтатьиРасходов(Объект, ТекущаяСтрока, Реквизиты = "") Экспорт
	
	ДоходыРасходыСервер.ОбработатьИзменениеСтатьи(Объект, ТекущаяСтрока, Реквизиты, РеквизитыПоУмолчанию());
	
КонецПроцедуры

// Процедура заполняет список хозяйственных операций, для которых используется
// ограничение отбора статьей расходов.
//
// Параметры:
//  СписокОпераций - СписокЗначений - Список хозяйственных операций и их представлений
//
Процедура ЗаполнитьСписокХозяйственныхОпераций(СписокОпераций, ВариантРаспределенияРасходов = Неопределено) Экспорт
	
	СписокОпераций.Очистить();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, НСтр("ru = 'Услуги сторонних организаций'"));
	
	Если ВариантРаспределенияРасходов <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, НСтр("ru = 'Внутреннее потребление товаров'"));
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, НСтр("ru = 'Списание недостачи товаров'"));
	КонецЕсли;
	
КонецПроцедуры

// Очищает в списке недоступные хозяйственные операции
//
Процедура ОчиститьНедоступныеХозяйственныеОперации(ВариантРаспределенияРасходов, ДоступныеХозяйственныеОперации, ПредставлениеДоступныхОпераций) Экспорт
	
	УдаляемыеЭлементы = Новый Массив;
	
	СписокОпераций = Новый СписокЗначений;
	СтрокаДоступныеОперации = "";
	ЗаполнитьСписокХозяйственныхОпераций(СписокОпераций, ВариантРаспределенияРасходов);
	Для Каждого СтрокаТаблицы Из ДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = СписокОпераций.НайтиПоЗначению(СтрокаТаблицы.ХозяйственнаяОперация);
		Если ЭлементСписка = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(СтрокаТаблицы);
		Иначе
			СтрокаДоступныеОперации = СтрокаДоступныеОперации + ", " + ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаДоступныеОперации = Сред(СтрокаДоступныеОперации, 3);
	Если ПредставлениеДоступныхОпераций <> СтрокаДоступныеОперации Тогда
		ПредставлениеДоступныхОпераций = СтрокаДоступныеОперации;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из УдаляемыеЭлементы Цикл
		ДоступныеХозяйственныеОперации.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Производит заполнение условного оформления формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - формы объекта
//  Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов и их аналитик для оформления
//              <Строка> Перечисление пар реквизитов в формате "СтатьяРасходов1, АналитикаРасходов1, СтатьяРасходов2, АналитикаРасходов2, ..."
//                       Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
//              <Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
//              <Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
//  ЭтоФормаОбъекта - Булево - Признак формы объекта ИБ
//
Процедура УстановитьУсловноеОформлениеАналитик(Форма, Реквизиты = "") Экспорт
	
	ДоходыРасходыСервер.УстановитьУсловноеОформлениеАналитик(Форма, Реквизиты, РеквизитыПоУмолчанию(), НСтр("ru = 'Не указана статья расходов'"));
	
КонецПроцедуры

// Производит проверку заполнения реквизитов аналитик статей расходов в переданном объекте
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура - Объект ИБ предназначенный для проверки
//  Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов для проверки
//      <Строка> Перечисление пар реквизитов для проверки в формате "СтатьяРасходов1, АналитикаРасходов1, СтатьяРасходов2, АналитикаРасходов2, ..."
//               Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
//      <Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
//      <Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
//  НепроверяемыеРеквизиты - Массив - Массив для накопления не проверяемых реквизитов переданного объекта
//  Отказ - Булево - Признак наличия ошибок заполнения аналитик расходов переданного объекта
//  ДополнительныеПараметры - Структура - При наличии свойства "ПрограммнаяПроверка", ошибки записываются в эту структуру, пользователю не выводятся
//
Процедура ПроверитьЗаполнениеАналитик(Объект, Реквизиты = "", НепроверяемыеРеквизиты = Неопределено, Отказ = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДоходыРасходыСервер.ПроверитьЗаполнениеАналитик(
		Объект, РеквизитыПоУмолчанию(), НСтр("ru='Не заполнена аналитика расходов'"), Реквизиты, НепроверяемыеРеквизиты, Отказ, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция РеквизитыПоУмолчанию()
	
	Возврат "СтатьяРасходов, АналитикаРасходов";
	
КонецФункции

Функция ЗначенияПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ПрочиеРасходы", Ложь);
	ЗначенияПоУмолчанию.Вставить("КонтролироватьЗаполнениеАналитики", Ложь);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы
#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПредопределенныеСтатьиРасходов() Экспорт
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
	
	Для Каждого СтатьяРасходов Из МассивСтатей Цикл
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов.ВариантРаспределенияРасходов) Тогда
			
			СтатьяРасходовОбъект = СтатьяРасходов.ПолучитьОбъект();
			СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять;
			Если СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяРасходовОбъект);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// (см. процедуру ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами)
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВариантРаспределенияРасходов; ПравилоРаспределенияНаСебестоимость");
	Результат.Добавить("ТипАналитики; ТипАналитикиНаСебестоимостьТоваров, ТипАналитикиНеРаспределять, ТипАналитикиНаПрочиеАктивы");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли