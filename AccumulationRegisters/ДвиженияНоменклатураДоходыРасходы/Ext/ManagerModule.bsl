#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК Т1 
	|	ПО Т.АналитикаВидаУчета = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетСебестоимостиТоваров

Функция ХозяйственныеОперацииКорректировки() Экспорт
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоНазначениюВрача);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы);
	
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой);
	
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутриведомственноеПеремещение);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.БезвозмезднаяПередачаМежбюджетная);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.БезвозмезднаяПередачаПрочее);
	
	Возврат Операции;
	
КонецФункции

Процедура СформироватьДвижениеКорректировки(ПараметрыРасчета, Выборка) Экспорт
	
	ИмяРегистра = СоздатьНаборЗаписей().Метаданные().Имя;
	ЗаполняемыеПоля = Новый Структура;
	ЗаполняемыеПоля.Вставить("Период");
	ЗаполняемыеПоля.Вставить("ХозяйственнаяОперация");
	ЗаполняемыеПоля.Вставить("АналитикаВидаУчета");
	ЗаполняемыеПоля.Вставить("АналитикаУчетаНоменклатуры");
	ЗаполняемыеПоля.Вставить("ДокументДвижения");
	ЗаполняемыеПоля = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ЗаполняемыеПоля);
	
	Запись = Документы.РасчетСебестоимостиТоваров.ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, Выборка, ЗаполняемыеПоля);
	Запись.Стоимость = Выборка.СтоимостьКорректировка + Выборка.СуммаДопРасходовКорректировка;
	Запись.СтоимостьБезНДС = Выборка.СтоимостьБезНДСКорректировка + Выборка.СуммаДопРасходовБезНДСКорректировка;
	Запись.СтоимостьРегл = Выборка.СтоимостьРеглКорректировка;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику
	 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой Тогда
		
		ЕстьРасход = Запись.Стоимость > 0 Или Запись.СтоимостьРегл > 0;
		ЕстьДоход = Запись.Стоимость < 0 Или Запись.СтоимостьРегл < 0;
		
		Если ЕстьРасход Тогда
			
			Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РасходыОтПереоценкиТоваров;
			Запись.СтатьяДоходовРасходов = Выборка.СтатьяРасходов;
			Запись.АналитикаРасходов = Выборка.АналитикаРасходов;
			
			Если Запись.Стоимость < 0 Тогда
				Запись.Стоимость = 0;
				Запись.СтоимостьБезНДС = 0;
			ИначеЕсли Запись.СтоимостьРегл < 0 Тогда
				Запись.СтоимостьРегл = 0;
			КонецЕсли;
			
			Если ЕстьДоход Тогда
				Запись = Документы.РасчетСебестоимостиТоваров.ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, Выборка, ЗаполняемыеПоля);
				Запись.Стоимость = Выборка.СтоимостьКорректировка + Выборка.СуммаДопРасходовКорректировка;
				Запись.СтоимостьБезНДС = Выборка.СтоимостьБезНДСКорректировка + Выборка.СуммаДопРасходовБезНДСКорректировка;
				Запись.СтоимостьРегл = Выборка.СтоимостьРеглКорректировка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьДоход Тогда
			Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДоходыОтПереоценкиТоваров;
			Запись.СтатьяДоходовРасходов = Выборка.СтатьяДоходов;
			Запись.АналитикаДоходов = Выборка.АналитикаДоходов;
			Запись.Стоимость = - Запись.Стоимость;
			Запись.СтоимостьБезНДС = - Запись.СтоимостьБезНДС;
			Запись.СтоимостьРегл = - Запись.СтоимостьРегл;
			
			Если Запись.Стоимость < 0 Тогда
				Запись.Стоимость = 0;
				Запись.СтоимостьБезНДС = 0;
			ИначеЕсли Запись.СтоимостьРегл < 0 Тогда
				Запись.СтоимостьРегл = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Запись.СтатьяДоходовРасходов = Выборка.СтатьяРасходов;
		Запись.АналитикаРасходов = Выборка.АналитикаРасходов;
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы Тогда
		Запись.Стоимость       = - Запись.Стоимость;
		Запись.СтоимостьБезНДС = - Запись.СтоимостьБезНДС;
		Запись.СтоимостьРегл   = - Запись.СтоимостьРегл;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РасчетСебестоимостиТоваров

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#КонецЕсли