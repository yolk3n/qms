#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СокращенноеНаименованиеКонфигурации = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
		Элементы.ТипОбъектаИС.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект %1'"), СокращенноеНаименованиеКонфигурации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Параметры.ТипОбъектаИС) Тогда
		Объект.ТипОбъектаИС = Параметры.ТипОбъектаИС;
		Элементы.ТипОбъектаИС.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
		
		ОбъектПотребителя = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаИС);
		Если ОбъектПотребителя <> Неопределено Тогда
			ПредставлениеОбъектаИС = ?(ОбъектПотребителя.Синоним = "",
				ОбъектПотребителя.Имя,
				ОбъектПотребителя.Синоним);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаДО) Тогда
		
		ОбъектДокументооборота = СписокОбъектовДокументооборота(Истина).НайтиПоЗначению(Объект.ТипОбъектаДО);
		Если ОбъектДокументооборота <> Неопределено Тогда
			ПредставлениеОбъектаДО = ОбъектДокументооборота.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.УсловиеПрименимостиПриВыгрузке.Пометка =
		Не ПустаяСтрока(Объект.УсловиеПрименимостиПриВыгрузке);
	Элементы.УсловиеПрименимостиПриЗагрузке.Пометка =
		Не ПустаяСтрока(Объект.УсловиеПрименимостиПриЗагрузке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(ПредставлениеОбъектаИС) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Объект конфигурации'"));
		Сообщение.Поле = "ПредставлениеОбъектаИС";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредставлениеОбъектаДО) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Объект 1С:Документооборота'"));
		Сообщение.Поле = "ПредставлениеОбъектаДО";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		ПроверитьПравилаЗаполненияРеквизитовПриВыгрузке(
			Отказ,
			Строка.ЗначениеРеквизитаДОТип,
			Строка.ЗначениеРеквизитаДОID,
			Строка.ЗначениеРеквизитаДО,
			Строка.ЗаполненВШаблоне);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
		
		// Проверка заполнения реквизитов табличной части
		Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
			
			Если Строка.ОбязательноеЗаполнение И Не ПравилоВыгрузкиЗаполнено(Строка, ПравилаЗаполненияРеквизитовДО) Тогда
				СообщитьОбОшибке(Строка);
				Отказ = Истина;
			КонецЕсли;
			
			Если Строка.ЭтоТаблица И Не Отказ И Не ПравилоВыгрузкиЗаполнено(Строка, ПравилаЗаполненияРеквизитовДО) Тогда
				Для Каждого ПодчиненнаяСтрока Из Строка.ПолучитьЭлементы() Цикл
					Если ПодчиненнаяСтрока.ОбязательноеЗаполнение
							И Не ПравилоВыгрузкиЗаполнено(ПодчиненнаяСтрока, ПравилаЗаполненияРеквизитовДО) Тогда
						
						Если ПодчиненнаяСтрока.ИмяРеквизитаОбъектаДО = "correspondent"
								И ПодчиненнаяСтрока.Таблица = "correspondentRows.rows"
								И ЗаполненРеквизитКонтрагент() Тогда
							// Нужно проверить реквизит Контрагент, возможно сможем взять контрагента от туда.
							Продолжить;
						КонецЕсли;
						
						СообщитьОбОшибке(ПодчиненнаяСтрока);
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполненРеквизитКонтрагент()
	
	Заполнен = Истина;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		Если Строка.ИмяРеквизитаОбъектаДО = "correspondent" И Строка.Таблица = "" Тогда
			Заполнен = ПравилоВыгрузкиЗаполнено(Строка, ПравилаЗаполненияРеквизитовДО);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заполнен;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(Строка)
	
	Элементы.ПравилаЗаполненияРеквизитовДО.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ГруппаСтраницыПравил.ТекущаяСтраница = Элементы.ПриВыгрузке;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПравилаЗаполненияРеквизитов;
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = СтрШаблон(
		НСтр("ru = 'Не установлено правило для обязательного %1 ""%2""'"),
		?(Строка.ЭтоТаблица, НСтр("ru = 'списка'"), НСтр("ru = 'реквизита'")),
		Строка.ПредставлениеРеквизитаОбъектаДО);
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИнтеграцияС1СДокументооборотом_ЗаписаноПравило");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПравилаЗаполненияРеквизитовДО.Очистить();
	Для Каждого Правило Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		Если ПравилоВыгрузкиЗаполнено(Правило, ПравилаЗаполненияРеквизитовДО) Тогда
			НовоеПравило = ТекущийОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПравило, Правило);
			Если Правило.ЭтоТаблица Тогда
				Для Каждого ПодчиненноеПравило Из Правило.ПолучитьЭлементы() Цикл
					Если ПравилоВыгрузкиЗаполнено(ПодчиненноеПравило, ПравилаЗаполненияРеквизитовДО) Тогда
						НовоеПравило = ТекущийОбъект.ПравилаЗаполненияРеквизитовДО.Добавить();
						ЗаполнитьЗначенияСвойств(НовоеПравило, ПодчиненноеПравило);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПрисоединяемыеПечатныеФормы.Очистить();
	Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
		Если Строка.Использовать Тогда
			НоваяСтрока = ТекущийОбъект.ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПравилаЗаполненияРеквизитовИС.Очистить();
	Для Каждого Правило Из ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы() Цикл
		Если ПравилоЗагрузкиЗаполнено(Правило, ПравилаЗаполненияРеквизитовИС) Тогда
			НовоеПравило = ТекущийОбъект.ПравилаЗаполненияРеквизитовИС.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПравило, Правило);
			Если Правило.ЭтоТаблица Тогда
				Для Каждого ПодчиненноеПравило Из Правило.ПолучитьЭлементы() Цикл
					Если ПравилоЗагрузкиЗаполнено(ПодчиненноеПравило, ПравилаЗаполненияРеквизитовИС) Тогда
						НовоеПравило = ТекущийОбъект.ПравилаЗаполненияРеквизитовИС.Добавить();
						ЗаполнитьЗначенияСвойств(НовоеПравило, ПодчиненноеПравило);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если правило выгрузки заполнено. Для таблиц проверяются и подчиненные правила.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПравилоВыгрузкиЗаполнено(Правило, Правила = Неопределено)
	
	Если Правило.ЭтоТаблица Тогда
		Если (Правило.Вариант = ПредопределенноеЗначение(
					"Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке")
				Или Правило.Вариант = ПредопределенноеЗначение(
					"Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта"))
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаИС)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение)) Тогда
			Возврат Истина;
		Иначе
			Для Каждого ПодчиненноеПравило Из Правило.ПолучитьЭлементы() Цикл
				Если ПодчиненноеПравило.Таблица = Правило.ИмяРеквизитаОбъектаДО
						И ПравилоВыгрузкиЗаполнено(ПодчиненноеПравило) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
	Иначе // обычный реквизит
		Возврат ЗначениеЗаполнено(Правило.Вариант)
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаИС)
				Или ЗначениеЗаполнено(Правило.ЗначениеРеквизитаДО)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение)
				Или Правило.ЗаполненВШаблоне);
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если правило загрузки заполнено. Для таблиц проверяются и подчиненные правила.
//
&НаСервере
Функция ПравилоЗагрузкиЗаполнено(Правило, Правила = Неопределено)
	
	Если Правило.ЭтоТаблица Тогда
		Если (Правило.Вариант = ПредопределенноеЗначение(
					"Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке")
				Или Правило.Вариант = ПредопределенноеЗначение(
					"Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта"))
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаДО)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение)) Тогда
			Возврат Истина;
		Иначе
			Для Каждого ПодчиненноеПравило Из Правило.ПолучитьЭлементы() Цикл
				Если ПодчиненноеПравило.Таблица = Правило.ИмяРеквизитаОбъектаИС
						И ПравилоЗагрузкиЗаполнено(ПодчиненноеПравило) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
	Иначе // обычный реквизит
		Возврат ЗначениеЗаполнено(Правило.Вариант)
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаДО)
				Или ЗначениеЗаполнено(Правило.ДополнительныйРеквизитДОID)
				Или ЗначениеЗаполнено(Правило.ЗначениеРеквизитаИС)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" И Источник <> ЭтотОбъект Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаИСНачалоВыбораЗавершение", ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ТипОбъектаИСНачалоВыбора(
		Объект.ТипОбъектаИС,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ТипОбъектаИС = Результат.Имя;
		ПредставлениеОбъектаИС = Результат.Синоним;
		Модифицированность = Истина;
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере(Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданных Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ПредставлениеОбъектаИС = ДанныеВыбора[0].Представление;
		Объект.ТипОбъектаИС = ДанныеВыбора[0].Значение;
		СтандартнаяОбработка = Истина;
		Модифицированность = Истина;
		ЗаполнитьСписокПечатныхФорм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданных Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыбранныйЭлемент = СписокМетаданных.НайтиПоЗначению(ВыбранноеЗначение);
		ПредставлениеОбъектаИС = ВыбранныйЭлемент.Представление;
		Объект.ТипОбъектаИС = ВыбранныйЭлемент.Значение;
		Модифицированность = Истина;
		ЗаполнитьДанныеОбъектаПотребителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачальныйТипОбъектаДО = Объект.ТипОбъектаДО;
	СписокВыбора = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты);
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаДОНачалоВыбораЗавершение", 
		ЭтотОбъект, НачальныйТипОбъектаДО);
	
	ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОНачалоВыбораЗавершение(ВыбранноеЗначение, НачальныйТипОбъектаДО) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТипОбъектаДО = ВыбранноеЗначение.Значение;
	ПредставлениеОбъектаДО = ВыбранноеЗначение.Представление;
	
	Если НачальныйТипОбъектаДО <> Объект.ТипОбъектаДО Тогда
		Объект.ПравилаЗаполненияРеквизитовДО.Очистить();
		ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(Истина);
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	СписокВыбора = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты);
	
	Для Каждого ЭлементВыбора Из СписокВыбора Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	СписокВыбора = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты);
	НачальныйТипОбъектаДО = Объект.ТипОбъектаДО;
	
	Для Каждого ЭлементВыбора Из СписокВыбора Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		
		ВыбранноеЗначение = ДанныеВыбора[0];
		
		Объект.ТипОбъектаДО = ВыбранноеЗначение.Значение;
		ПредставлениеОбъектаДО = ВыбранноеЗначение.Представление;
		
		Если НачальныйТипОбъектаДО <> Объект.ТипОбъектаДО Тогда 
			Объект.ПравилаЗаполненияРеквизитовДО.Очистить();
			ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(Истина);
			Модифицированность = Истина;
		КонецЕсли;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачальныйТипОбъектаДО = Объект.ТипОбъектаДО;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбранныйЭлемент = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты).НайтиПоЗначению(ВыбранноеЗначение);
		Объект.ТипОбъектаДО = ВыбранныйЭлемент.Значение;
		ПредставлениеОбъектаДО = ВыбранныйЭлемент.Представление;
		Если НачальныйТипОбъектаДО <> Объект.ТипОбъектаДО Тогда
			Объект.ПравилаЗаполненияРеквизитовДО.Очистить();
			ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(Истина);
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", Объект.ТипОбъектаДО + "Template");
	Если ЗначениеЗаполнено(Объект.ШаблонID) Тогда
		ПараметрыФормы.Вставить("ВыбранныйЭлемент", Объект.ШаблонID);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ШаблонЗавершениеВыбора", ЭтотОбъект, Неопределено);
	Попытка
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ОбработатьИсключение(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЗавершениеВыбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Шаблон = Результат.РеквизитПредставление;
	Объект.ШаблонТип = Результат.РеквизитТип;
	Объект.ШаблонID = Результат.РеквизитID;
	
	ОбновитьРеквизитыШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Шаблон = "";
	Объект.ШаблонТип = "";
	Объект.ШаблонID = "";
	
	Для Каждого Элемент Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		Если Элемент.Вариант = ВариантШаблон() Тогда
			ОчиститьПравилоЗаполненияПриВыгрузке(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьРеквизитыШаблона();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполненияРеквизитовДО

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Родитель.Вариант = ВариантВыражение() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Таблица заполняется результатом выражения на встроенном языке,
					|поэтому правила для отдельных реквизитов не нужны.'"));
			Возврат;
		КонецЕсли;
		Если Родитель.Вариант = ВариантПустой() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Вначале нужно выбрать вариант заполнения таблицы.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ТипРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("Вариант");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаДО");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаДОID");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаДОТип");
	ПараметрыФормы.Вставить("ВычисляемоеВыражение");
	ПараметрыФормы.Вставить("ЭтоДополнительныйРеквизитИС");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитИС");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДОID");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДОТип");
	ПараметрыФормы.Вставить("Обновлять");
	ПараметрыФормы.Вставить("Ключевой");
	ПараметрыФормы.Вставить("ЗаполненВШаблоне");
	ПараметрыФормы.Вставить("ШаблонЗначение");
	ПараметрыФормы.Вставить("ШаблонID");
	ПараметрыФормы.Вставить("ШаблонТип");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	ПараметрыФормы.Вставить("Зависимый", (Родитель <> Неопределено));
	ПараметрыФормы.Вставить("ОбновлятьРодитель", ?(Родитель <> Неопределено, Родитель.Обновлять, Неопределено));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Таблица) Тогда
		Если Родитель.Вариант = ВариантРеквизит() Тогда
			ПараметрыФормы.Вставить("Таблица", Родитель.ИмяРеквизитаОбъектаИС);
		Иначе
			ПараметрыФормы.Вставить("Таблица", "");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТипОбъектаДО", Объект.ТипОбъектаДО);
	ПараметрыФормы.Вставить("ТипОбъектаИС", Объект.ТипОбъектаИС);
	ПараметрыФормы.Вставить("ШаблонЗапрещаетИзменение", Объект.ШаблонЗапрещаетИзменение);
	ПараметрыФормы.Вставить("ВидДокументаДО", ВидДокументаДО);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовДОПередНачаломИзмененияЗавершение",
		ЭтотОбъект,
		ТекущиеДанные);
	
	Если ТекущиеДанные.ЭтоТаблица Тогда
		ОткрываемаяФорма = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаПравилаВыгрузкиДляТаблицы";
	Иначе
		ОткрываемаяФорма = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаПравилаВыгрузки";
	КонецЕсли;
	
	ОткрытьФорму(ОткрываемаяФорма,
		ПараметрыФормы,
		ЭтотОбъект,
		ПараметрыФормы.ИмяРеквизитаОбъектаДО,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ШаблонЗапрещаетИзменение И ТекущиеДанные.ЗаполненВШаблоне Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный шаблон запрещает изменение реквизитов.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИмяРеквизитаОбъектаДО = "documentType" И ТекущиеДанные.ЗаполненВШаблоне Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вид документа указан в шаблоне и не может быть изменен.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовДОПередУдалениемЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Очистить правило заполнения?'");
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрисоединяемыеПечатныеФормы

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыИспользоватьПриИзменении(Элемент)
	
	ОбновитьЗаголовокПечатныхФорм();
	
	Элементы.ПрисоединяемыеПечатныеФормы.ТекущиеДанные.Обновлять =
		Элементы.ПрисоединяемыеПечатныеФормы.ТекущиеДанные.Использовать
		И ДоступенФункционалСинхронизация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполненияРеквизитовИС

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовИС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Родитель.Вариант = ВариантВыражение() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Таблица заполняется результатом выражения на встроенном языке,
					|поэтому правила для отдельных реквизитов не нужны.'"));
			Возврат;
		КонецЕсли;
		Если Родитель.Вариант = ВариантПустой() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Вначале нужно выбрать вариант заполнения таблицы.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОбъектаДО = Новый Массив;
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
	
		ДанныеРеквизита = Новый Структура("Имя, Тип, Представление",
			Строка.ИмяРеквизитаОбъектаДО,
			Строка.ТипРеквизитаОбъектаДО,
			Строка.ПредставлениеРеквизитаОбъектаДО);
		ДанныеРеквизита.Вставить("ЭтоДополнительныйРеквизитДО", Строка.ЭтоДополнительныйРеквизитДО);
		ДанныеРеквизита.Вставить("ДополнительныйРеквизитДОID", Строка.ДополнительныйРеквизитДОID);
		ДанныеРеквизита.Вставить("ДополнительныйРеквизитДОТип", Строка.ДополнительныйРеквизитДОТип);
		ДанныеРеквизита.Вставить("ЭтоТаблица", Строка.ЭтоТаблица);
		ДанныеРеквизита.Вставить("Таблица", Строка.Таблица);
		РеквизитыОбъектаДО.Добавить(ДанныеРеквизита);
		
		Если Строка.ЭтоТаблица Тогда
			Для Каждого ПодчиненнаяСтрока Из Строка.ПолучитьЭлементы() Цикл
				ДанныеРеквизита = Новый Структура("Имя, Тип, Представление",
					ПодчиненнаяСтрока.ИмяРеквизитаОбъектаДО,
					ПодчиненнаяСтрока.ТипРеквизитаОбъектаДО,
					ПодчиненнаяСтрока.ПредставлениеРеквизитаОбъектаДО);
				ДанныеРеквизита.Вставить("ЭтоДополнительныйРеквизитДО", ПодчиненнаяСтрока.ЭтоДополнительныйРеквизитДО);
				ДанныеРеквизита.Вставить("ДополнительныйРеквизитДОID", ПодчиненнаяСтрока.ДополнительныйРеквизитДОID);
				ДанныеРеквизита.Вставить("ДополнительныйРеквизитДОТип", ПодчиненнаяСтрока.ДополнительныйРеквизитДОТип);
				ДанныеРеквизита.Вставить("ЭтоТаблица", ПодчиненнаяСтрока.ЭтоТаблица);
				ДанныеРеквизита.Вставить("Таблица", ПодчиненнаяСтрока.Таблица);
				РеквизитыОбъектаДО.Добавить(ДанныеРеквизита);
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Вариант");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ТипРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаИС");
	ПараметрыФормы.Вставить("ВычисляемоеВыражение");
	ПараметрыФормы.Вставить("Обновлять");
	ПараметрыФормы.Вставить("ЭтоДополнительныйРеквизитДО");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДОID");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДОТип");
	ПараметрыФормы.Вставить("ЭтоДополнительныйРеквизитИС");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитИС");
	ПараметрыФормы.Вставить("Ключевой");
	ПараметрыФормы.Вставить("ЭтоТаблица");
	ПараметрыФормы.Вставить("Зависимый", Ложь);
	ПараметрыФормы.Вставить("ОбновлятьРодитель");
	ПараметрыФормы.Вставить("РежимИзмененияДанныхПроведенногоДокумента");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ПараметрыФормы.Зависимый = Истина;
		ПараметрыФормы.ОбновлятьРодитель = Родитель.Обновлять;
		ПараметрыФормы.РежимИзмененияДанныхПроведенногоДокумента = Родитель.РежимИзмененияДанныхПроведенногоДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Таблица) Тогда
		Если Родитель.Вариант = ВариантРеквизит() Тогда
			ПараметрыФормы.Вставить("Таблица", Родитель.ИмяРеквизитаОбъектаДО);
		Иначе
			ПараметрыФормы.Вставить("Таблица", "");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РеквизитыОбъектаДО", Новый ФиксированныйМассив(РеквизитыОбъектаДО));
	ПараметрыФормы.Вставить("ТипОбъектаИС", Объект.ТипОбъектаИС);
	ПараметрыФормы.Вставить("ТипОбъектаДО", Объект.ТипОбъектаДО);
	ПараметрыФормы.Вставить("ВидДокументаДО", ВидДокументаДО);
	
	ЗаполняетсяДокумент = СтрНачинаетсяС(Объект.ТипОбъектаИС, "Документ.");
	ПараметрыФормы.Вставить("ЗаполняетсяДокумент", ЗаполняетсяДокумент);
	
	Если ТекущиеДанные.ЭтоТаблица Тогда
		ОткрываемаяФорма = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаПравилаЗагрузкиДляТаблицы"
	Иначе
		ОткрываемаяФорма = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаПравилаЗагрузки"
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПравилаЗаполненияРеквизитовИСПередНачаломИзмененияЗавершение",
		ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму(
		ОткрываемаяФорма,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовИС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовИСПередУдалениемЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Очистить правило заполнения реквизита?'");
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриВыгрузке(Команда)
	
	НужноЗадатьВопрос = Ложь;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Строка.ВычисляемоеВыражение)
				Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаДОID)
				Или ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаИС) Тогда
			НужноЗадатьВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноЗадатьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюПриВыгрузкеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Правила будут заполнены по умолчанию. Заполнить?'");
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриЗагрузке(Команда)
	
	НужноЗадатьВопрос = Ложь;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы() Цикл 
		Если ЗначениеЗаполнено(Строка.ВычисляемоеВыражение) 
			Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаИС) 
			Или ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаДО) Тогда
			НужноЗадатьВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноЗадатьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюПриЗагрузкеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Правила будут заполнены по умолчанию. Заполнить?'");
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриЗагрузке(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВычисляемоеВыражение", Объект.УсловиеПрименимостиПриЗагрузке);
	ПараметрыФормы.Вставить("ТипВыражения", "УсловиеПрименимостиПриЗагрузке");
	ПараметрыФормы.Вставить("ТипОбъектаДО", Объект.ТипОбъектаДО);
	ПараметрыФормы.Вставить("ТипОбъектаИС", Объект.ТипОбъектаИС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УсловиеПрименимостиПриЗагрузкеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ВыражениеНаВстроенномЯзыке",
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриЗагрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда 
		Объект.УсловиеПрименимостиПриЗагрузке = Результат;
		Элементы.УсловиеПрименимостиПриЗагрузке.Пометка = 
			Не ПустаяСтрока(Объект.УсловиеПрименимостиПриЗагрузке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриВыгрузке(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВычисляемоеВыражение", Объект.УсловиеПрименимостиПриВыгрузке);
	ПараметрыФормы.Вставить("ТипВыражения", "УсловиеПрименимостиПриВыгрузке");
	ПараметрыФормы.Вставить("ТипОбъектаДО", Объект.ТипОбъектаДО);
	ПараметрыФормы.Вставить("ТипОбъектаИС", Объект.ТипОбъектаИС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УсловиеПрименимостиПриВыгрузкеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ВыражениеНаВстроенномЯзыке",
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриВыгрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда 
		Объект.УсловиеПрименимостиПриВыгрузке = Результат;
		Элементы.УсловиеПрименимостиПриВыгрузке.Пометка = 
			Не ПустаяСтрока(Объект.УсловиеПрименимостиПриВыгрузке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		УстановитьДоступность();
		ОбновитьЗаголовокПечатныхФорм();
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.1.1") Тогда
			
			Обработки.ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтотОбъект);
			Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
			Элементы.ГруппаТипыОбъектов.Видимость = Ложь;
			Элементы.ГруппаОтступ.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаФункционалНеПоддерживается.Видимость = Ложь;
			Элементы.ГруппаКоманднаяПанель.Видимость = Истина;
			Элементы.ГруппаТипыОбъектов.Видимость = Истина;
			Элементы.ГруппаОтступ.Видимость = Истина;
			
			ДоступенФункционалСинхронизация =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP");
			ДоступенФункционалКонтрагенты =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3", Истина);
			ДоступенФункционалШаблоны =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1", Истина);
			ДоступенФункционалАвтоСозданиеСвязей =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1", Истина);
			
			Если Не ДоступенФункционалСинхронизация Тогда
				Элементы.ПравилаЗаполненияРеквизитовОбновлять.Видимость = Ложь;
				Элементы.ПрисоединяемыеПечатныеФормыОбновлять.Видимость = Ложь;
				Элементы.ПравилаЗаполненияРеквизитовИСОбновлять.Видимость = Ложь;
			КонецЕсли;
			
			Если Не ДоступенФункционалШаблоны Тогда
				Элементы.Шаблон.Видимость = Ложь;
			ИначеЕсли Объект.ТипОбъектаДО = "DMCorrespondent" Тогда
				Элементы.Шаблон.Доступность = Ложь;
			КонецЕсли;
			
			Элементы.НеСоздаватьСвязиПоСсылкам.Видимость = ДоступенФункционалАвтоСозданиеСвязей;
			
			ЗаполнитьСписокВыбораОбъектовКонфигурации();
			ЗаполнитьРеквизитыДокументооборота();
			ЗаполнитьСписокПечатныхФорм();
			ЗаполнитьРеквизитыПотребителя();
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередУдалениемЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПравилоЗаполненияПриВыгрузке(ТекущиеДанные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик оповещения "ПравилаЗаполненияРеквизитовДОПередНачаломИзмененияЗавершение".
//
// Параметры:
//   Результат - Структура:
//     * Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов
//     * ВычисляемоеВыражение - Строка
//     * ДополнительныйРеквизитИС - Неопределено
//     * ЗначениеРеквизитаДО - Неопределено
//     * ЗначениеРеквизитаДОID - Неопределено
//     * ЗначениеРеквизитаДОТип - Неопределено
//     * ИмяРеквизитаОбъектаИС - Неопределено
//     * Картинка - Число
//     * Ключевой - Булево
//     * Обновлять - Булево
//     * ШаблонПредставление - Неопределено
//     * ЭтоДополнительныйРеквизитИС - Булево
//   ТекущиеДанные - ДанныеФормыЭлементДерева:
//     * Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов
//     * ВычисляемоеВыражение - Строка
//     * ДополнительныйРеквизитДОID - Строка
//     * ДополнительныйРеквизитДОТип - Строка
//     * ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//     * ДоступноРедактирование - Булево
//     * ЗаполненВШаблоне - Булево
//     * ЗначениеРеквизитаДО - Неопределено
//     * ЗначениеРеквизитаДОID - Строка
//     * ЗначениеРеквизитаДОТип - Строка
//     * ИмяРеквизитаОбъектаДО - Строка
//     * ИмяРеквизитаОбъектаИС - Строка
//     * Картинка - Число
//     * Ключевой - Булево
//     * Обновлять - Булево
//     * ОбязательноеЗаполнение - Булево
//     * Пояснение - Строка
//     * Представление - Строка
//     * ПредставлениеРеквизитаОбъектаДО - Строка
//     * Таблица - Строка
//     * ТипРеквизитаОбъектаДО - СписокЗначений
//     * ШаблонID - Строка
//     * ШаблонЗначение - Неопределено
//     * ШаблонПредставление - Строка
//     * ШаблонТип - Строка
//     * ЭтоДополнительныйРеквизитДО - Булево
//     * ЭтоДополнительныйРеквизитИС - Булево
//     * ЭтоТаблица - Булево
//
&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередНачаломИзмененияЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Модифицированность = Истина;
		
		Если ТекущиеДанные.ИмяРеквизитаОбъектаДО = "documentType" Тогда
			
			Если (ТекущиеДанные.Вариант = ВариантЗначение()
					И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеРеквизитаДОID))
				Или (ТекущиеДанные.Вариант = ВариантШаблон()
					И ЗначениеЗаполнено(ТекущиеДанные.ШаблонID)) Тогда
				
				ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовДО);
				ЗаполнитьРеквизитыДокументооборота();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоТаблица Тогда // очистим подчиненные, переставшие соответствовать
			ПодчиненныеПравила = ТекущиеДанные.ПолучитьЭлементы();
			
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				
				ПодчиненноеПравило.Обновлять = ТекущиеДанные.Обновлять;
				Если ТекущиеДанные.Вариант = ВариантРеквизит() Тогда
					Если ПодчиненноеПравило.Вариант = ВариантРеквизит()
							И СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаИС, ".") <> 0
							И Не СтрНачинаетсяС(ПодчиненноеПравило.ИмяРеквизитаОбъектаИС,
								ТекущиеДанные.ИмяРеквизитаОбъектаИС) Тогда
						ОчиститьПравилоЗаполненияПриВыгрузке(ПодчиненноеПравило);
						
					ИначеЕсли ПодчиненноеПравило.Вариант = ВариантПустой() Тогда
						ОчиститьПравилоЗаполненияПриВыгрузке(ПодчиненноеПравило);
						
					КонецЕсли;
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантРеквизитТаблицы() Тогда
					Если ПодчиненноеПравило.Вариант = ВариантРеквизит()
							И СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаИС, ".") <> 0 Тогда
						ОчиститьПравилоЗаполненияПриВыгрузке(ПодчиненноеПравило);
						
					ИначеЕсли ПодчиненноеПравило.Вариант = ВариантПустой() Тогда
						ОчиститьПравилоЗаполненияПриВыгрузке(ПодчиненноеПравило);
						
					КонецЕсли;
					
				Иначе
					ОчиститьПравилоЗаполненияПриВыгрузке(ПодчиненноеПравило);
					
				КонецЕсли;
				
				ПодчиненноеПравило.ДоступноРедактирование =
					Не (ТекущиеДанные.Вариант = ВариантВыражение() Или ТекущиеДанные.Вариант = ВариантПустой());
				
			КонецЦикла;
			
			Элементы.ПравилаЗаполненияРеквизитовДО.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ПравилаЗаполненияРеквизитовИСПередНачаломИзмененияЗавершение".
//
// Параметры:
//   Результат - Структура:
//     * Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов
//     * ВычисляемоеВыражение - Строка
//     * ДополнительныйРеквизитДОID - Строка
//     * ДополнительныйРеквизитДОТип - Строка
//     * ЗначениеРеквизитаИС - Неопределено
//     * ИмяРеквизитаОбъектаДО - Неопределено
//     * Картинка - Число
//     * Ключевой - Булево
//     * Обновлять - Булево
//     * ПредставлениеРеквизитаОбъектаДО - Неопределено
//     * РежимИзмененияДанныхПроведенногоДокумента - ПеречислениеСсылка.
//         РежимИзмененияПроведенногоДокументаДанными1СДокументооборота
//     * ЭтоДополнительныйРеквизитДО - Булево
//   ТекущиеДанные - ДанныеФормыЭлементДерева:
//     * Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов
//     * ВычисляемоеВыражение - Строка
//     * ДополнительныйРеквизитДОID - Строка
//     * ДополнительныйРеквизитДОТип - Строка
//     * ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//     * ДоступноРедактирование - Булево
//     * ЗначениеРеквизитаИС - Неопределено
//     * ИмяРеквизитаОбъектаДО - Строка
//     * ИмяРеквизитаОбъектаИС - Строка
//     * Картинка - Число
//     * Ключевой - Булево
//     * Обновлять - Булево
//     * Пояснение - Строка
//     * ПредставлениеРеквизитаОбъектаДО - Строка
//     * ПредставлениеРеквизитаОбъектаИС - Строка
//     * РежимИзмененияДанныхПроведенногоДокумента - ПеречислениеСсылка.
//         РежимИзмененияПроведенногоДокументаДанными1СДокументооборота
//     * Таблица - Строка
//     * ТипРеквизитаОбъектаИС - ОписаниеТипов
//     * ЭтоДополнительныйРеквизитДО - Булево
//     * ЭтоДополнительныйРеквизитИС - Булево
//     * ЭтоТаблица - Булево
//
&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередНачаломИзмененияЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Модифицированность = Истина;
		
		Если ТекущиеДанные.ЭтоТаблица Тогда // очистим подчиненные, переставшие соответствовать
			
			ПодчиненныеПравила = ТекущиеДанные.ПолучитьЭлементы();
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				
				ПодчиненноеПравило.Обновлять = ТекущиеДанные.Обновлять;
				ПодчиненноеПравило.РежимИзмененияДанныхПроведенногоДокумента =
					ТекущиеДанные.РежимИзмененияДанныхПроведенногоДокумента;
				
				Если ТекущиеДанные.Вариант = ВариантРеквизит() И ПодчиненноеПравило.Вариант = ВариантРеквизит() Тогда
					Если СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаДО, ".") <> 0
							И Не СтрНачинаетсяС(ПодчиненноеПравило.ИмяРеквизитаОбъектаДО, ТекущиеДанные.ИмяРеквизитаОбъектаДО) Тогда
						ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					КонецЕсли;
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантРеквизитТаблицы() Тогда
					Если ПодчиненноеПравило.Вариант = ВариантРеквизит()
							И СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаДО, ".") <> 0 Тогда
						ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
						
					ИначеЕсли ПодчиненноеПравило.Вариант = ВариантПустой() Тогда
						ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
						
					КонецЕсли;
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантВыражение() Тогда
					ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантПустой() Тогда
					ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					
				ИначеЕсли ПодчиненноеПравило.Вариант.Пустая() Тогда
					ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					
				КонецЕсли;
				
				ПодчиненноеПравило.ДоступноРедактирование =
					Не (ТекущиеДанные.Вариант = ВариантВыражение() Или ТекущиеДанные.Вариант = ВариантПустой());
				
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ПравилаЗаполненияРеквизитовИС.Развернуть(Элементы.ПравилаЗаполненияРеквизитовИС.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередУдалениемЗавершение(Результат, ТекущиеДанные) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьПравилоЗаполненияПриЗагрузке(ТекущиеДанные);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриВыгрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриЗагрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.ЗаполнитьПоУмолчанию.Доступность =
		ЗначениеЗаполнено(Объект.ТипОбъектаДО);
	Элементы.Шаблон.Доступность = ЗначениеЗаполнено(Объект.ТипОбъектаДО)
		И (Объект.ТипОбъектаДО <> "DMCorrespondent");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПечатныхФорм()
	
	Если Не ЗначениеЗаполнено(Объект.ТипФайловСохраненияПечатныхФорм) Тогда
		Объект.ТипФайловСохраненияПечатныхФорм =
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ТипФайлаСохраняемойПечатнойФормыПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
		
		Элементы.ПрисоединяемыеПечатныеФормы.Доступность = Истина;
		
		ПрисоединяемыеПечатныеФормы.Очистить();
		
		ТаблицаПечатныхФорм =
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.МенеджерыПечати(
				Объект.ТипОбъектаИС);
		
		Для Каждого Стр Из ТаблицаПечатныхФорм Цикл
			СтрППФ = ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрППФ,Стр);
			СтрокиПечатнойФормы = Объект.ПрисоединяемыеПечатныеФормы.НайтиСтроки(
				Новый Структура("ИмяКоманды, МенеджерПечати",СтрППФ.ИмяКоманды,СтрППФ.МенеджерПечати));
			Если СтрокиПечатнойФормы.Количество() > 0 Тогда
				СтрППФ.Использовать = Истина;
				СтрППФ.Обновлять = СтрокиПечатнойФормы[0].Обновлять;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ГруппаПрисоединяемыеПечатныеФормы.Видимость = (ПрисоединяемыеПечатныеФормы.Количество() <> 0);
	Элементы.ГруппаСтраницы.ОтображениеСтраниц =
		?(ПрисоединяемыеПечатныеФормы.Количество() <> 0,
			ОтображениеСтраницФормы.ЗакладкиСверху,
			ОтображениеСтраницФормы.Нет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОбъектовДокументооборота(Контрагенты)
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("DMIncomingDocument", НСтр("ru = 'Входящий документ'"));
	Список.Добавить("DMOutgoingDocument", НСтр("ru = 'Исходящий документ'"));
	Список.Добавить("DMInternalDocument", НСтр("ru = 'Внутренний документ'"));
	Если Контрагенты Тогда
		#Если Клиент Тогда
		ИспользоватьТерминКорреспонденты = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользоватьТерминКорреспонденты();
		#Иначе
		ИспользоватьТерминКорреспонденты = ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты();
		#КонецЕсли
		Если ИспользоватьТерминКорреспонденты Тогда
			Список.Добавить("DMCorrespondent", НСтр("ru = 'Корреспондент'"));
		Иначе
			Список.Добавить("DMCorrespondent", НСтр("ru = 'Контрагент'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДокументооборота(ПриВыбореШаблона = Ложь, ВидДокументаДО = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаДО) Тогда
		ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы().Очистить();
		
	Иначе
		
		Если ВидДокументаДО = Неопределено Тогда
			ВидДокументаДО = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ВидДокументаИзПравила(Объект);
		КонецЕсли;
		
		РеквизитыШаблона = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
			ПолучитьРеквизитыШаблонаДокумента(Объект.ШаблонТип, Объект.ШаблонID, Объект.ШаблонЗапрещаетИзменение);
		Если РеквизитыШаблона = Неопределено Тогда
			Объект.Шаблон = "";
			Объект.ШаблонТип = "";
			Объект.ШаблонID = "";
			
			Для Каждого Элемент Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
				Если Элемент.Вариант = ВариантШаблон() Тогда
					ОчиститьПравилоЗаполненияПриВыгрузке(Элемент);
				КонецЕсли;
			КонецЦикла;
			
			Модифицированность = Истина;
			
		Иначе
			СтрокиВидДокумента = РеквизитыШаблона.НайтиСтроки(Новый Структура("ИмяРеквизитаОбъектаДО", "documentType"));
			Если СтрокиВидДокумента.Количество() = 1 Тогда
				ВидДокументаДО = Новый Структура("ID, type, name",
					СтрокиВидДокумента[0].ШаблонID,
					СтрокиВидДокумента[0].ШаблонТип,
					СтрокиВидДокумента[0].ШаблонЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗаполнения = Неопределено;
		Если ВидДокументаДО <> Неопределено Тогда
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("documentType", ВидДокументаДО);
		КонецЕсли;
		
		Реквизиты = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ПолучитьРеквизитыОбъектаДО(
			Объект.ТипОбъектаДО,
			ПараметрыЗаполнения);
		
		ЭлементыДерева = ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
		
		Для Каждого Строка Из Реквизиты Цикл
			
			Если Строка.ЭтоТаблица Тогда
				НоваяСтрока = ЭлементыДерева.Добавить();
				НоваяСтрока.ЭтоТаблица = Истина;
				УровеньДерева = НоваяСтрока.ПолучитьЭлементы();
			Иначе
				Если Строка.Таблица = "" Тогда
					УровеньДерева = ЭлементыДерева;
				КонецЕсли;
				НоваяСтрока = УровеньДерева.Добавить();
				НоваяСтрока.Таблица = Строка.Таблица;
			КонецЕсли;
			
			Родитель = НоваяСтрока.ПолучитьРодителя();
			Если Родитель <> Неопределено
					И (Родитель.Вариант = ВариантВыражение() Или Родитель.Вариант = ВариантПустой()) Тогда
				НоваяСтрока.ДоступноРедактирование = Ложь;
			Иначе
				НоваяСтрока.ДоступноРедактирование = Истина;
			КонецЕсли;
			
			НоваяСтрока.ИмяРеквизитаОбъектаДО = Строка.Имя;
			НоваяСтрока.ПредставлениеРеквизитаОбъектаДО = Строка.Представление;
			НоваяСтрока.ТипРеквизитаОбъектаДО = Строка.Тип;
			НоваяСтрока.ЭтоДополнительныйРеквизитДО = Строка.ДопРеквизит;
			НоваяСтрока.ДополнительныйРеквизитДОID = Строка.ДопРеквизитID;
			НоваяСтрока.ДополнительныйРеквизитДОТип = Строка.ДопРеквизитТип;
			НоваяСтрока.ОбязательноеЗаполнение = Строка.ОбязательноеЗаполнение;
			
			Если Строка.Имя = "documentType" Тогда
				НоваяСтрока.Ключевой = Истина;
			КонецЕсли;
			
			// Найдем подходящую строку в табличной части.
			СтруктураОтбора = Новый Структура("ЭтоДополнительныйРеквизитДО", Строка.ДопРеквизит);
			Если Строка.ДопРеквизит Тогда
				СтруктураОтбора.Вставить("ДополнительныйРеквизитДОID", Строка.ДопРеквизитID);
			Иначе
				СтруктураОтбора.Вставить("ЭтоТаблица", Строка.ЭтоТаблица);
				СтруктураОтбора.Вставить("Таблица", Строка.Таблица);
				СтруктураОтбора.Вставить("ИмяРеквизитаОбъектаДО", Строка.Имя);
			КонецЕсли;
			НайденныеСтроки = Объект.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
			КонецЕсли;
			
			// Найдем подходящую строку среди заполненных реквизитов шаблона.
			Если РеквизитыШаблона <> Неопределено Тогда
				
				НайденныеСтроки = РеквизитыШаблона.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда // заполнен в шаблоне
					
					НоваяСтрока.ЗаполненВШаблоне = Истина;
					НоваяСтрока.ШаблонЗначение = НайденныеСтроки[0].ШаблонЗначение;
					НоваяСтрока.ШаблонID = НайденныеСтроки[0].ШаблонID;
					НоваяСтрока.ШаблонТип = НайденныеСтроки[0].ШаблонТип;
					НоваяСтрока.ШаблонПредставление = НоваяСтрока.ШаблонЗначение;
					НоваяСтрока.Обновлять = НоваяСтрока.Обновлять И Не Объект.ШаблонЗапрещаетИзменение;
					
					Если ПриВыбореШаблона И НоваяСтрока.Вариант <> ВариантШаблон() Тогда
						
						НоваяСтрока.Вариант = ВариантШаблон();
						НоваяСтрока.Картинка = 5;
						НоваяСтрока.ЗначениеРеквизитаДО = Неопределено;
						НоваяСтрока.ЗначениеРеквизитаДОID = Неопределено;
						НоваяСтрока.ИмяРеквизитаОбъектаИС = Неопределено;
						
					Иначе
						
						Если НоваяСтрока.Вариант = ВариантЗначение() Тогда // предупредим о конфликте
							
							Если (ЗначениеЗаполнено(НоваяСтрока.ЗначениеРеквизитаДОID)
									И (НоваяСтрока.ЗначениеРеквизитаДОID <> НоваяСтрока.ШаблонID))
									Или (Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеРеквизитаДОID)
									И (НоваяСтрока.ЗначениеРеквизитаДО <> НоваяСтрока.ШаблонЗначение)) Тогда
								
								НоваяСтрока.Картинка = 4;
								НоваяСтрока.ШаблонПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'шаблон: %1'"),
									НоваяСтрока.ШаблонЗначение);
								
							Иначе
								
								НоваяСтрока.ШаблонПредставление = "";
								
							КонецЕсли;
							
						ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.Вариант) Тогда
							
							НоваяСтрока.Вариант = ВариантШаблон();
							
						ИначеЕсли НоваяСтрока.Вариант <> ВариантШаблон() Тогда 
							
							НоваяСтрока.ШаблонПредставление = "";
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НоваяСтрока.Вариант = ВариантШаблон() Тогда
					
					НоваяСтрока.Вариант = ВариантПустой();
					НоваяСтрока.ЗаполненВШаблоне = Ложь;
					НоваяСтрока.ШаблонПредставление = "";
					
				КонецЕсли;
				
			ИначеЕсли НоваяСтрока.Вариант = ВариантШаблон() Тогда
				
				НоваяСтрока.Вариант = ВариантПустой();
				НоваяСтрока.ЗаполненВШаблоне = Ложь;
				НоваяСтрока.ШаблонПредставление = "";
				
			КонецЕсли;
			
			Если НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
				НоваяСтрока.Пояснение = НСтр("ru = 'Заполняется по правилам для отдельных реквизитов таблицы'");
			КонецЕсли;
			
			// Установим картинку согласно варианту, если она не была установлена ранее.
			Если Не ЗначениеЗаполнено(НоваяСтрока.Картинка) Тогда
				Если НоваяСтрока.Вариант = ВариантРеквизит() Тогда
					НоваяСтрока.Картинка = 1;
					
				ИначеЕсли НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
					НоваяСтрока.Картинка = 1;
					
				ИначеЕсли НоваяСтрока.Вариант = ВариантЗначение() Тогда
					НоваяСтрока.Картинка = 2;
					
				ИначеЕсли НоваяСтрока.Вариант = ВариантВыражение() Тогда
					НоваяСтрока.Картинка = 3;
					
				ИначеЕсли НоваяСтрока.Вариант = ВариантШаблон() Тогда
					НоваяСтрока.Картинка = 5;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыШаблона()
	
	ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовДО);
	ЗаполнитьРеквизитыДокументооборота(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПотребителя()
	
	ЭлементыДерева = ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда 
		Возврат;
	КонецЕсли;
	
	// Соберем представления реквизитов объекта ДО по дереву их заполнения.
	ПредставленияРеквизитовОбъектаДО = Новый Соответствие;
	Для Каждого Элемент1 Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		Если Элемент1.ЭтоДополнительныйРеквизитДО Тогда
			ПредставленияРеквизитовОбъектаДО[Элемент1.ДополнительныйРеквизитДОID] =
				Элемент1.ПредставлениеРеквизитаОбъектаДО;
		Иначе
			ПредставленияРеквизитовОбъектаДО[Элемент1.ИмяРеквизитаОбъектаДО] =
				Элемент1.ПредставлениеРеквизитаОбъектаДО;
		КонецЕсли;
		Для Каждого Элемент2 Из Элемент1.ПолучитьЭлементы() Цикл
			ПредставленияРеквизитовОбъектаДО[Элемент2.Таблица + "." + Элемент2.ИмяРеквизитаОбъектаДО] =
				Элемент2.ПредставлениеРеквизитаОбъектаДО;
		КонецЦикла;
	КонецЦикла;
	Состояния = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ВозможныеСостоянияОбъектаДокументооборота();
	Для Каждого Состояние Из Состояния Цикл
		ПредставленияРеквизитовОбъектаДО[Состояние.Имя] = Состояние.Представление;
	КонецЦикла;
	
	Реквизиты = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьРеквизитыОбъектаИС(Объект.ТипОбъектаИС);
	
	Для Каждого Строка Из Реквизиты Цикл
		
		Если Строка.ЭтоТаблица Тогда
			НоваяСтрока = ЭлементыДерева.Добавить();
			НоваяСтрока.ЭтоТаблица = Истина;
			УровеньДерева = НоваяСтрока.ПолучитьЭлементы();
		Иначе
			Если Строка.Таблица = "" Тогда
				УровеньДерева = ЭлементыДерева;
			КонецЕсли;
			НоваяСтрока = УровеньДерева.Добавить();
			НоваяСтрока.Таблица = Строка.Таблица;
		КонецЕсли;
		
		Родитель = НоваяСтрока.ПолучитьРодителя();
		Если Родитель <> Неопределено
				И (Родитель.Вариант = ВариантВыражение() Или Родитель.Вариант = ВариантПустой()) Тогда
			НоваяСтрока.ДоступноРедактирование = Ложь;
		Иначе
			НоваяСтрока.ДоступноРедактирование = Истина;
		КонецЕсли;
		
		НоваяСтрока.ИмяРеквизитаОбъектаИС = Строка.Имя;
		НоваяСтрока.ПредставлениеРеквизитаОбъектаИС = Строка.Представление;
		НоваяСтрока.ТипРеквизитаОбъектаИС = Строка.Тип;
		НоваяСтрока.ЭтоДополнительныйРеквизитИС = Строка.ЭтоДополнительныйРеквизитИС;
		НоваяСтрока.ДополнительныйРеквизитИС = Строка.ДополнительныйРеквизитИС;
		
		ПараметрыОтбора = Новый Структура;
		Если Строка.ЭтоДополнительныйРеквизитИС Тогда 
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитИС", Строка.ДополнительныйРеквизитИС);
		Иначе
			ПараметрыОтбора.Вставить("ЭтоТаблица", Строка.ЭтоТаблица);
			ПараметрыОтбора.Вставить("Таблица", Строка.Таблица);
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаИС", Строка.Имя);
		КонецЕсли;
		НайденныеСтроки = Объект.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеРеквизитаОбъектаДО = ПредставленияРеквизитовОбъектаДО[
			?(НоваяСтрока.ЭтоДополнительныйРеквизитДО,
				НоваяСтрока.ДополнительныйРеквизитДОID,
				НоваяСтрока.ИмяРеквизитаОбъектаДО)];
		
		Если НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
			НоваяСтрока.Пояснение = НСтр("ru = 'Заполняется по правилам для отдельных реквизитов таблицы'");
		КонецЕсли;
		
		Если НоваяСтрока.Вариант = ВариантРеквизит() Тогда
			НоваяСтрока.Картинка = 1;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
			НоваяСтрока.Картинка = 1;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантЗначение() Тогда
			НоваяСтрока.Картинка = 2;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантВыражение() Тогда
			НоваяСтрока.Картинка = 3;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовДО)
	
	Объект.ПравилаЗаполненияРеквизитовДО.Очистить();
	ЭлементыДерева = ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ЭтоТаблица Тогда
			НоваяСтрока = Объект.ПравилаЗаполненияРеквизитовДО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
			ПодчиненныеПравила = ЭлементДерева.ПолучитьЭлементы();
			
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				Если ПравилоВыгрузкиЗаполнено(ПодчиненноеПравило) Тогда
					НоваяСтрока = Объект.ПравилаЗаполненияРеквизитовДО.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненноеПравило);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ПравилоВыгрузкиЗаполнено(ЭлементДерева) Тогда
			НоваяСтрока = Объект.ПравилаЗаполненияРеквизитовДО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОбъектовКонфигурации()
	
	Типы = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		СписокМетаданных.Добавить(ОбъектМетаданных.ПолноеИмя(), 
			?(ОбъектМетаданных.Синоним = "", ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним));
	КонецЦикла;
		
	СписокМетаданных.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(НачальноеЗаполнение = Ложь)
	
	// Сбросим шаблон при несоответствии его типа типу объекта
	Если Объект.ШаблонТип <> "" И СтрНайти(Объект.ШаблонТип, Объект.ТипОбъектаДО) = 0 Тогда
		Объект.Шаблон = "";
		Объект.ШаблонID = "";
		Объект.ШаблонТип = "";
		Объект.ШаблонЗапрещаетИзменение = Ложь;
		
		Для Каждого Элемент Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
			Если Элемент.Вариант = ВариантШаблон() Тогда
				ОчиститьПравилоЗаполненияПриВыгрузке(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовДО);
	ВидДокументаДО = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ВидДокументаИзПравила(Объект);
	
	Если ВидДокументаДО = Неопределено
			И (Объект.ТипОбъектаДО = "DMIncomingDocument"
				Или Объект.ТипОбъектаДО = "DMInternalDocument"
				Или Объект.ТипОбъектаДО = "DMOutgoingDocument") Тогда
		// Определим вид документа по умолчанию
		СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
		УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
		
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "name";
		Условие.value = ПредставлениеОбъектаИС;
		УсловияОтбора.Добавить(Условие);
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
			Прокси,
			Объект.ТипОбъектаДО + "Type",
			СписокУсловий);
		
		Если Результат.items.Количество() = 1 Тогда
			ЭлементДляЗаполнения = Результат.items[0].object;
			ВидДокументаДО = Новый Структура("ID, type, name",
				ЭлементДляЗаполнения.objectID.ID,
				ЭлементДляЗаполнения.objectID.type,
				ЭлементДляЗаполнения.name);
			НачальноеЗаполнение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НачальноеЗаполнение Тогда
		ЗаполнитьРеквизитыДокументооборота(,ВидДокументаДО);
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере(НачальноеЗаполнение);
	КонецЕсли;
	
	ДеревоПравилВыгрузки = РеквизитФормыВЗначение("ПравилаЗаполненияРеквизитовДО");
	
	// Заполнение вида документа и реквизитов по умолчанию.
	СтрокиВидаДокумента = ДеревоПравилВыгрузки.Строки.НайтиСтроки(
		Новый Структура("ИмяРеквизитаОбъектаДО", "documentType"));
	Если СтрокиВидаДокумента.Количество() > 0 Тогда
		СтрокаПравил = СтрокиВидаДокумента[0];
		
		Если ВидДокументаДО <> Неопределено
				И Не ЗначениеЗаполнено(СтрокаПравил.ЗначениеРеквизитаДОТип)
				И Не ЗначениеЗаполнено(СтрокаПравил.ШаблонТип) Тогда
			СтрокаПравил.Вариант = ВариантЗначение();
			СтрокаПравил.ЗначениеРеквизитаДО = ВидДокументаДО.name;
			СтрокаПравил.ЗначениеРеквизитаДОID = ВидДокументаДО.ID;
			СтрокаПравил.ЗначениеРеквизитаДОТип = ВидДокументаДО.type;
			СтрокаПравил.Картинка = 2;
		КонецЕсли;
		
		Если ВидДокументаДО <> Неопределено И ДоступенФункционалКонтрагенты Тогда
			
			ЗапросЗначенийРеквизитов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,
				"DMGetDefaultValuesByDocumentTypeRequest");
			ВидXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ВидДокументаДО.ID,
				ВидДокументаДО.type);
			ЗапросЗначенийРеквизитов.documentTypeID = ВидXDTO;
			Результат = Прокси.execute(ЗапросЗначенийРеквизитов);
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
			СвойстваОбъекта = Результат.object.Свойства();
			
			Для Каждого СтрокаПравил Из ДеревоПравилВыгрузки.Строки Цикл
				
				Если ЗначениеЗаполнено(СтрокаПравил.ИмяРеквизитаОбъектаДО)
						И СвойстваОбъекта.Получить(СтрокаПравил.ИмяРеквизитаОбъектаДО) <> Неопределено
						И Не СтрокаПравил.ЗаполненВШаблоне Тогда
					
					ТекущееСвойство = Результат.object[СтрокаПравил.ИмяРеквизитаОбъектаДО];
					Если ТекущееСвойство <> Неопределено Тогда
						СтрокаПравил.Вариант = ВариантЗначение();
						СтрокаПравил.Картинка = 2;
						
						Если ТипЗнч(ТекущееСвойство) = Тип("Строка")
								Или ТипЗнч(ТекущееСвойство) = Тип("Число")
								Или ТипЗнч(ТекущееСвойство) = Тип("Дата")
								Или ТипЗнч(ТекущееСвойство) = Тип("Булево") Тогда
							СтрокаПравил.ЗначениеРеквизитаДО = ТекущееСвойство;
							
						Иначе
							СтрокаПравил.Вариант = ВариантЗначение();
							СтрокаПравил.ЗначениеРеквизитаДО = ТекущееСвойство.name;
							СтрокаПравил.ЗначениеРеквизитаДОID = ТекущееСвойство.objectID.ID;
							СтрокаПравил.ЗначениеРеквизитаДОТип = ТекущееСвойство.objectID.type;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
	// Заполнение правил по умолчанию
	ПравилаЗаполнения = Новый Соответствие;
	
	Если Найти(Объект.ТипОбъектаИС, "Справочник.") <> 0 Тогда
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаИС);
		Если МетаданныеИсточника <> Неопределено Тогда
			Если МетаданныеИсточника.ДлинаНаименования <> 0 Тогда
				ПравилаЗаполнения.Вставить("title", "Наименование");
				ПравилаЗаполнения.Вставить("name", "Наименование");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Найти(Объект.ТипОбъектаИС, "Документ.") <> 0 Тогда
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаИС);
		Если МетаданныеИсточника <> Неопределено Тогда
			ПравилаЗаполнения.Вставить("title", "Представление");
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот.УстановитьПравилаЗаполненияПриВыгрузкеПоУмолчанию(
		ПравилаЗаполнения, Объект.ТипОбъектаДО, Объект.ТипОбъектаИС);
	
	Для Каждого СтрокаПравил Из ДеревоПравилВыгрузки.Строки Цикл
		ЗначениеЗаполнения = ПравилаЗаполнения.Получить(СтрокаПравил.ИмяРеквизитаОбъектаДО);
		Если Не ПустаяСтрока(ЗначениеЗаполнения) И Не СтрокаПравил.ЗаполненВШаблоне Тогда
			ОчиститьПравилоЗаполненияПриВыгрузке(СтрокаПравил);
			СтрокаПравил.Вариант = ВариантРеквизит();
			СтрокаПравил.ИмяРеквизитаОбъектаИС = ЗначениеЗаполнения;
			СтрокаПравил.Обновлять = ДоступенФункционалСинхронизация;
			СтрокаПравил.Картинка = 1;
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение грифа доступа
	СтрокиГрифаДоступа = ДеревоПравилВыгрузки.Строки.НайтиСтроки(
		Новый Структура("ИмяРеквизитаОбъектаДО", "accessLevel"));
	
	Если СтрокиГрифаДоступа.Количество() > 0
			И Не ЗначениеЗаполнено(СтрокиГрифаДоступа[0].ЗначениеРеквизитаДО)
			И Не СтрокиГрифаДоступа[0].ЗаполненВШаблоне Тогда
		СтрокаПравил = СтрокиГрифаДоступа[0];
		
		СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
			Прокси,
			"DMAccessLevel",
			СписокУсловий);
		
		Если Результат.items.Количество() = 1 Тогда
			ЭлементДляЗаполнения = Результат.items[0].object;
			ОчиститьПравилоЗаполненияПриВыгрузке(СтрокаПравил);
			СтрокаПравил.Вариант = ВариантЗначение();
			СтрокаПравил.ЗначениеРеквизитаДО = ЭлементДляЗаполнения.name;
			СтрокаПравил.ЗначениеРеквизитаДОID = ЭлементДляЗаполнения.objectID.ID;
			СтрокаПравил.ЗначениеРеквизитаДОТип = ЭлементДляЗаполнения.objectID.type;
			СтрокаПравил.Картинка = 2;
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПравилВыгрузки, "ПравилаЗаполненияРеквизитовДО");
	ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовДО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере(НачальноеЗаполнение = Ложь)
	
	Если НачальноеЗаполнение Тогда
		ЗаполнитьРеквизитыПотребителя();
		ЗаполнитьСписокПечатныхФорм();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаДО) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение правил по умолчанию
	ПравилаЗаполнения = Новый Соответствие;
	
	Если Найти(Объект.ТипОбъектаИС, "Справочник.") <> 0 Тогда
		ПравилаЗаполнения.Вставить("Наименование","title");
		ПравилаЗаполнения.Вставить("Код","regNumber");
	ИначеЕсли Найти(Объект.ТипОбъектаИС, "Документ.") <> 0 Тогда
		ПравилаЗаполнения.Вставить("Номер","regNumber");
		ПравилаЗаполнения.Вставить("Дата","regDate");
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот.УстановитьПравилаЗаполненияПриЗагрузкеПоУмолчанию(
		ПравилаЗаполнения, Объект.ТипОбъектаИС, Объект.ТипОбъектаДО);
	
	СтруктураСостояний = Новый Структура;
	СтруктураСостояний.Вставить("statusRegistration", НСтр("ru = 'Состояние регистрации'"));
	СтруктураСостояний.Вставить("statusConsideration", НСтр("ru = 'Состояние рассмотрения'"));
	СтруктураСостояний.Вставить("statusApproval", НСтр("ru = 'Состояние согласования'"));
	СтруктураСостояний.Вставить("statusConfirmation", НСтр("ru = 'Состояние утверждения'"));
	СтруктураСостояний.Вставить("statusPerformance", НСтр("ru = 'Состояние исполнения'"));
	
	ДеревоПравилВыгрузки = РеквизитФормыВЗначение("ПравилаЗаполненияРеквизитовДО");
	ДеревоПравилЗагрузки = РеквизитФормыВЗначение("ПравилаЗаполненияРеквизитовИС");
	
	Для Каждого СтрокаПравил Из ДеревоПравилЗагрузки.Строки Цикл
		
		ОчиститьПравилоЗаполненияПриЗагрузке(СтрокаПравил);
		
		ЗначениеЗаполнения = ПравилаЗаполнения.Получить(СтрокаПравил.ИмяРеквизитаОбъектаИС);
		Если Не ПустаяСтрока(ЗначениеЗаполнения) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИмяРеквизитаОбъектаДО", ЗначениеЗаполнения);
			СтрокиРеквизита = ДеревоПравилВыгрузки.Строки.НайтиСтроки(Отбор);
			
			Если СтрокиРеквизита.Количество() > 0
				Или СтруктураСостояний.Свойство(ЗначениеЗаполнения) Тогда
				
				Если СтрокиРеквизита.Количество() > 0 Тогда
					СтрокаПравил.ПредставлениеРеквизитаОбъектаДО =
						СтрокиРеквизита[0].ПредставлениеРеквизитаОбъектаДО;
				Иначе
					СтрокаПравил.ПредставлениеРеквизитаОбъектаДО =
						СтруктураСостояний[ЗначениеЗаполнения];
					КонецЕсли;
					
				СтрокаПравил.Вариант = ВариантРеквизит();
				СтрокаПравил.ИмяРеквизитаОбъектаДО = ЗначениеЗаполнения;
				СтрокаПравил.Картинка = 1;
				СтрокаПравил.Обновлять = Истина;
				
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПравилЗагрузки, "ПравилаЗаполненияРеквизитовИС");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПравилоЗаполненияПриВыгрузке(Правило)
	
	Правило.Картинка = 0;
	Правило.Пояснение = "";
	Правило.Вариант = ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	Правило.ВычисляемоеВыражение = "";
	Правило.ДополнительныйРеквизитДОID = "";
	Правило.ДополнительныйРеквизитДОТип = "";
	Правило.ЗаполненВШаблоне = Ложь;
	Правило.ЗначениеРеквизитаДО = Неопределено;
	Правило.ЗначениеРеквизитаДОID = "";
	Правило.ЗначениеРеквизитаДОТип = "";
	Правило.ИмяРеквизитаОбъектаИС = "";
	Правило.Ключевой = Ложь;
	Правило.Обновлять = Ложь;
	Правило.ШаблонЗначение = Неопределено;
	Правило.ШаблонID = "";
	Правило.ШаблонТип = "";
	Правило.ШаблонПредставление = "";
	Правило.ЭтоДополнительныйРеквизитДО = Ложь;
	
	Родитель = Неопределено;
	Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
		Родитель = Правило.ПолучитьРодителя();
	ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
		Родитель = Правило.Родитель;
	КонецЕсли;
	
	Если Родитель <> Неопределено
			И (Родитель.Вариант = ВариантВыражение() Или Родитель.Вариант = ВариантПустой()) Тогда
		Правило.ДоступноРедактирование = Ложь;
	Иначе
		Правило.ДоступноРедактирование = Истина;
	КонецЕсли;
	
	Если Правило.ЭтоТаблица Тогда
		ПодчиненныеПравила = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			ПодчиненныеПравила = Правило.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			ПодчиненныеПравила = Правило.Строки;
		КонецЕсли;
		
		Если ПодчиненныеПравила <> Неопределено Тогда
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				ОчиститьПравилоЗаполненияПриВыгрузке(ПодчиненноеПравило);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПравилоЗаполненияПриЗагрузке(Правило)
	
	Правило.Картинка = 0;
	Правило.ПредставлениеРеквизитаОбъектаДО = "";
	Правило.Пояснение = "";
	Правило.Вариант = ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	Правило.ВычисляемоеВыражение = "";
	Правило.ДополнительныйРеквизитДОID = "";
	Правило.ДополнительныйРеквизитДОТип = "";
	Правило.ДополнительныйРеквизитИС = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка");
	Правило.ЗначениеРеквизитаИС = Неопределено;
	Правило.ИмяРеквизитаОбъектаДО = "";
	Правило.Ключевой = Ложь;
	Правило.Обновлять = Ложь;
	Правило.РежимИзмененияДанныхПроведенногоДокумента = ПредопределенноеЗначение(
		"Перечисление.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.ПустаяСсылка");
	Правило.ЭтоДополнительныйРеквизитИС = Ложь;
	
	Родитель = Неопределено;
	Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
		Родитель = Правило.ПолучитьРодителя();
	ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
		Родитель = Правило.Родитель;
	КонецЕсли;
	
	Если Родитель <> Неопределено
			И (Родитель.Вариант = ВариантВыражение() Или Родитель.Вариант = ВариантПустой()) Тогда
		Правило.ДоступноРедактирование = Ложь;
	Иначе
		Правило.ДоступноРедактирование = Истина;
	КонецЕсли;
	
	Если Правило.ЭтоТаблица Тогда
		ПодчиненныеПравила = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			ПодчиненныеПравила = Правило.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			ПодчиненныеПравила = Правило.Строки;
		КонецЕсли;
		
		Если ПодчиненныеПравила <> Неопределено Тогда
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбъектаПотребителя()

	ЗаполнитьРеквизитыПотребителя();
	ЗаполнитьСписокПечатныхФорм();

КонецПроцедуры // ЗаполнитьДанныеОбъектаПотребителя()

&НаКлиенте
Процедура ОбновитьЗаголовокПечатныхФорм()
	
	Количество = 0;
	Для Каждого СтрокаФормы Из ПрисоединяемыеПечатныеФормы Цикл
		Количество = Количество + ?(СтрокаФормы.Использовать, 1, 0);
	КонецЦикла;
	
	ЗаголовокЗакладки = НСтр("ru = 'Добавление печатных форм'");
	Если Количество > 0 Тогда
		ЗаголовокЗакладки = СтрШаблон("%1 (%2)", ЗаголовокЗакладки, Количество);
	КонецЕсли;
	Элементы.ГруппаПрисоединяемыеПечатныеФормы.Заголовок = ЗаголовокЗакладки;
	
КонецПроцедуры

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантРеквизит()
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта");
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантРеквизитТаблицы()
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы");
КонецФункции

// Возвращает значение ВариантЗначение().
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантЗначение()
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение");
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантВыражение()
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке");
КонецФункции

// Возвращает значение ВариантШаблон().
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантШаблон()
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона");
КонецФункции

// Возвращает значение ВариантПустой().
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантПустой()
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
КонецФункции

&НаСервере
Процедура ПроверитьПравилаЗаполненияРеквизитовПриВыгрузке(Отказ, ТипЗначенияРеквизита, ИдентификаторЗначенияРеквизита,
	ЗначениеРеквизитаДокументооборота, ЗаполненВШаблоне)
	
	Если Не ЗаполненВШаблоне
			И (ТипЗначенияРеквизита = "DMInternalDocumentType"
				Или ТипЗначенияРеквизита = "DMIncomingDocumentType"
				Или ТипЗначенияРеквизита = "DMOutgoingDocumentType") Тогда
		
		ВидДокумента = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси(),
			ТипЗначенияРеквизита,
			ИдентификаторЗначенияРеквизита);
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ВидДокумента, "templateRequired")
				И ВидДокумента.templateRequired
				И Объект.ШаблонID = "" Тогда
			
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = СтрШаблон(
				НСтр("ru = 'В настройках вида документа ""%1"" установлен запрет на создание документов не по шаблону,
							|но шаблон документа не выбран.'"),
				ЗначениеРеквизитаДокументооборота);
			Сообщение.Поле = "Объект.Шаблон";
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти