
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция определяет значения реквизитов выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
//
// Возвращаемое значение:
//	Структура - реквизиты выбранной организации
//
Функция ПолучитьРеквизитыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Контрагент               КАК Контрагент,
	|	Организации.Наименование             КАК Наименование,
	|	Организации.НаименованиеСокращенное  КАК НаименованиеСокращенное,
	|	Организации.НаименованиеПолное       КАК НаименованиеПолное,
	|	Организации.ИНН                      КАК ИНН,
	|	Организации.КПП                      КАК КПП,
	|	Организации.КодПоОКПО                КАК КодПоОКПО,
	|	Организации.ОГРН                     КАК ОГРН,
	|	Организации.ЮрФизЛицо                КАК ЮрФизЛицо,
	|	Организации.СвидетельствоДатаВыдачи  КАК СвидетельствоДатаВыдачи,
	|	Организации.СвидетельствоСерияНомер  КАК СвидетельствоСерияНомер
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Контрагент         = Выборка.Контрагент;
		Представление      = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		Наименование       = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		НаименованиеПолное = Выборка.НаименованиеПолное;
		ИНН                = Выборка.ИНН;
		КПП                = Выборка.КПП;
		КодПоОКПО          = Выборка.КодПоОКПО;
		ОГРН               = Выборка.ОГРН;
		ЮрФизЛицо          = Выборка.ЮрФизЛицо;
		Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свидетельство %1 от %2'"), Выборка.СвидетельствоСерияНомер, Формат(Выборка.СвидетельствоДатаВыдачи, "ДЛФ=D"));
		Иначе
			Свидетельство = "";
		КонецЕсли;
	Иначе
		Контрагент         = Неопределено;
		Представление      = "";
		Наименование       = "";
		НаименованиеПолное = "";
		ИНН                = "";
		КПП                = "";
		КодПоОКПО          = "";
		ОГРН               = "";
		ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ПустаяСсылка();
		Свидетельство      = "";
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Контрагент"        , Контрагент);
	Реквизиты.Вставить("Представление"     , Представление);
	Реквизиты.Вставить("Наименование"      , Наименование);
	Реквизиты.Вставить("НаименованиеПолное", НаименованиеПолное);
	Реквизиты.Вставить("ИНН"               , ИНН);
	Реквизиты.Вставить("КПП"               , КПП);
	Реквизиты.Вставить("КодПоОКПО"         , КодПоОКПО);
	Реквизиты.Вставить("ОГРН"              , ОГРН);
	Реквизиты.Вставить("ЮрФизЛицо"         , ЮрФизЛицо);
	Реквизиты.Вставить("Свидетельство"     , Свидетельство);
	
	Возврат Реквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Использование нескольких организаций.
#Область ИспользованиеНесколькихОрганизаций

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию.
//
Функция ОрганизацияПоУмолчанию(ТаблицаОбъекта = Неопределено) Экспорт
	
	ДоступныеОрганизации = ПолучитьДоступные(ТаблицаОбъекта);
	Если ДоступныеОрганизации.Количество() = 1 Тогда
		Возврат ДоступныеОрганизации[0];
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций.
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Количество;
	
КонецФункции

// Возвращает доступные организации
//
Функция ПолучитьДоступные(ТаблицаОбъекта = Неопределено) Экспорт
	
	Если ТаблицаОбъекта = Неопределено Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование
		|");
		ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	ЗначенияДоступа КАК ЗначенияДоступа
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|	ПО
		|		ЗначенияДоступа.Ссылка = Организации.Ссылка
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|";
		
		УправлениеДоступомБольничнаяАптека.ЗначенияДоступаРазрешающиеИзменениеОбъекта(ТаблицаОбъекта, Тип("СправочникСсылка.Организации"), Запрос.МенеджерВременныхТаблиц);
		
		ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

#КонецОбласти // ИспользованиеНесколькихОрганизаций

////////////////////////////////////////////////////////////////////////////////
// Обособленные подразделения
#Область ОбособленныеПодразделения

// Проверяет взаимосвязанность организации по организационной структуре.
//
// Параметры:
//  ПерваяОрганизация - СправочникСсылка.Организации - проверяемая организация.
//  ВтораяОрганизация - СправочникСсылка.Организации - организация, с которой выполняется сравнение.
//
// Возвращаемое значение:
//  Булево - признак взаимосвязанности. Если первая организация является обособленным подразделением,
//      либо если вторая организация является обособленным подразделением первой,
//      либо если обе организации являются обособленными подразделениями одной и той же головной организации.
//      В противном случае возвращается Ложь.
//
Функция ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ПерваяОрганизация, ВтораяОрганизация) Экспорт
	
	Если Не (ЗначениеЗаполнено(ПерваяОрганизация) И ЗначениеЗаполнено(ВтораяОрганизация))
	 Или ПерваяОрганизация = ВтораяОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВзаимосвязанныеОрганизации(ПерваяОрганизация).Найти(ВтораяОрганизация) <> Неопределено);
	
КонецФункции

// Проверяет, связана ли организация с другими организациями по организационной структуре.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - проверяемая организация.
//
// Возвращаемое значение:
//  Булево - признак взаимосвязанности. Если организация взаимосвязана с другими,
//     возвращается Истина, в противном случае Ложь.
//
Функция ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация) Экспорт
	
	Возврат (ВзаимосвязанныеОрганизации(Организация).Количество() > 0);
	
КонецФункции

// Возвращает организации, взаимосвязанные по организационной структуре.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, для которой нужно искать связи,
//     если не указана, то возвращаются все взаимосвязанные организации.
//
// Возвращаемое значение:
//  Массив - массив взаимосвязанных организаций.
//
Функция ВзаимосвязанныеОрганизации(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ОбособленныеПодразделения.ГоловнаяОрганизация КАК Ссылка
	|ПОМЕСТИТЬ ГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК ОбособленныеПодразделения
	|ГДЕ
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ОбособленноеПодразделение КАК ЭтоОбособленноеПодразделение,
	|	Организации.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ДанныеОрганизаций
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ГоловныеОрганизации КАК ГоловныеОрганизации
	|		ПО
	|			Организации.Ссылка = ГоловныеОрганизации.Ссылка
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|	ИЛИ НЕ ГоловныеОрганизации.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляФильтрации.Ссылка КАК Организация
	|ИЗ
	|	ДанныеОрганизаций КАК ДанныеДляФильтрации
	|ГДЕ
	|	ДанныеДляФильтрации.Ссылка <> &Организация
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИЛИ ДанныеДляФильтрации.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|");
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ?(ЗначениеЗаполнено(Организация),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"), Справочники.Организации.ПустаяСсылка()));
	
	СвязанныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат СвязанныеОрганизации;
	
КонецФункции

#КонецОбласти // ОбособленныеПодразделения

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Префикс");
	Результат.Добавить("КонтактнаяИнформация.*");
	
	Возврат Результат
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГоловнуюОрганизацию() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
