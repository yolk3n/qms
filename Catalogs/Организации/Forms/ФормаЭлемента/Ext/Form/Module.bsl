
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, Элементы.ГруппаКонтактнаяИнформация.Имя,,, Истина);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ВидОрганизации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
	   И ВидОрганизации <> "ОбособленноеПодразделение" Тогда
		
		ЭлементСписка = Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОрганизации.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
	ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьИнтерфейс = ТекущийОбъект.ЭтоНовый() И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Элементы.ВидОрганизации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	ИННЗаполненКорректно = Истина;
	ЭтоЮрЛицо = (СтрДлина(ПолеПоискаИНН) <> 12);
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ПолеПоискаИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ПолеПоискаИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ПолеПоискаИНН");
		
	КонецЕсли;
	
	Если ИННЗаполненКорректно Тогда
		
		ЗаполняемыеДанные = ПолучитьЗаполняемыеДанные();
		
		Оповестить = Новый ОписаниеОповещения("ЗаполнитьРеквизитыКонтрагентаПоДаннымЕГР", ЭтотОбъект);
		РаботаСКонтрагентамиБольничнаяАптекаКлиент.ЗаполнитьПоДаннымЕГР(ЭтотОбъект, ПолеПоискаИНН, ЗаполняемыеДанные, Оповестить);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	ЭтоЮрЛицо = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Объект.ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН");
		
	КонецЕсли;
	
	Если ИННЗаполненКорректно Тогда
		
		ЗаполняемыеДанные = ПолучитьЗаполняемыеДанные();
		
		Оповестить = Новый ОписаниеОповещения("ЗаполнитьРеквизитыКонтрагентаПоДаннымЕГР", ЭтотОбъект);
		РаботаСКонтрагентамиБольничнаяАптекаКлиент.ЗаполнитьПоДаннымЕГР(ЭтотОбъект, Объект.ИНН, ЗаполняемыеДанные, Оповестить);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеГоловнойОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	ФамилияИнициалыФизЛица = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Объект.ИндивидуальныйПредприниматель));
	
	Объект.НаименованиеСокращенное = НСтр("ru='ИП'") + " " + ФамилияИнициалыФизЛица;
	Объект.НаименованиеПолное= "";
	
	ОбработатьИзменениеСокращенногоНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	ОбработатьИзменениеСокращенногоНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Если СтрДлина(Объект.ИНН) >= 4 
		И ПустаяСтрока(Объект.КПП) Тогда
		
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	
	ОчиститьСообщения();
	
	Если Не ПустаяСтрока(Текст)
	   И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Текст)
	   И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Текст, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.КПП");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	
	ОчиститьСообщения();
	
	Если Не ПустаяСтрока(Текст) 
	   И Не РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.КодПоОКПО");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	
	ОчиститьСообщения();
	
	Если Не ПустаяСтрока(Текст) 
	   И Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ОГРН");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если Найти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПараметрыОрганизацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения Тогда
		ВыполнитьОтложеннуюИнициализациюКонтактнойИнформацииПриНеобходимости();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
	   И Не Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ЮридическоеЛицо";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			И Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе
		ВызватьИсключение НСтр("ru = 'Невозможно определить вид организации. Обратитесь к администратору.'");
	КонецЕсли;
	
	НаименованиеСокращенное = Объект.НаименованиеСокращенное;
	
	ЭтоНоваяОрганизация = Объект.Ссылка.Пустая();
	
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = ЭтоНоваяОрганизация;
	Элементы.ЗаполнитьПоИНН.Видимость = Не ЭтоНоваяОрганизация;
	Элементы.ЗаполнитьПоИННИП.Видимость = Не ЭтоНоваяОрганизация;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ЭтоЮрЛицо = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	
	Если ЭтоЮрЛицо Тогда
		Если Не Объект.ОбособленноеПодразделение Тогда
			Элементы.ГруппаОсновныеКоды.ТекущаяСтраница = Элементы.ГруппаКодыЮрЛица;
			Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Провизор ООО'");
			Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ООО ""Провизор""'");
			Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Общество с ограниченной ответственностью Провизор'");
		Иначе
			Элементы.ГруппаОсновныеКоды.ТекущаяСтраница = Элементы.ГруппаКодыЮрЛица;
			Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Филиал Провизор (Тамбов)'");
			Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, Провизор Филиал (Тамбов)'");
			Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Провизор - обособленное подразделение'");
		КонецЕсли;
	Иначе
		Элементы.ГруппаОсновныеКоды.ТекущаяСтраница = Элементы.ГруппаКодыИП;
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Балабанова Наталья Игнатьевна'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ИП Балабанова Наталья Игнатьевна'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Индивидуальный предприниматель Балабанова Наталья Игнатьевна'");
	КонецЕсли;
	
	Элементы.ИндивидуальныйПредприниматель.Видимость = Не ЭтоЮрЛицо;
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация", "Видимость", Объект.ОбособленноеПодразделение);
	Элементы.ИНН.ТолькоПросмотр = Объект.ОбособленноеПодразделение;
	Элементы.ЗаполнитьПоИНН.Видимость = Не Объект.Ссылка.Пустая() И Не Объект.ОбособленноеПодразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаКонтрагента();
	
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		Объект.ОбособленноеПодразделение = Истина;
		Объект.ГоловнаяОрганизация = Неопределено;
	Иначе
		Объект.ОбособленноеПодразделение = Ложь;
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	Если ЭтоЮрЛицо Тогда
		Объект.ИндивидуальныйПредприниматель = Неопределено;
		Если СтрДлина(Объект.ИНН) > 10 Тогда
			Объект.ИНН = "";
		КонецЕсли;
	Иначе
		Объект.ИНН = "";
		Объект.КПП = "";
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеГоловнойОрганизации()
	
	Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнаяОрганизация, "ИНН");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование наименований
#Область ФормированиеНаименований

&НаКлиенте
Функция СформироватьРабочееНаименование(СтруктураНаименования)
	
	Возврат СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо) Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 ""%2""", СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		НаименованиеПолное= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2", СтруктураНаименования.ОрганизационноПравоваяФорма, Объект.ИндивидуальныйПредприниматель);
	Иначе
		НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 %2", СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат = Новый Структура("Наименование, ОрганизационноПравоваяФорма, ОрганизационноПравоваяФормаСокращенно");
	
	Наименование = СокрЛП(Наименование);
	
	ОрганизационноПравовыеФормы = Новый Соответствие;
	ОрганизационноПравовыеФормы.Вставить(НСтр("ru='ООО'"), НСтр("ru='Общество с ограниченной ответственностью'"));
	ОрганизационноПравовыеФормы.Вставить(НСтр("ru='ОАО'"), НСтр("ru='Открытое акционерное общество'"));
	ОрганизационноПравовыеФормы.Вставить(НСтр("ru='ЗАО'"), НСтр("ru='Закрытое акционерное общество'"));
	ОрганизационноПравовыеФормы.Вставить(НСтр("ru='ИП'") , НСтр("ru='Индивидуальный предприниматель'"));
	ОрганизационноПравовыеФормы.Вставить(НСтр("ru='ФГБУ'") , НСтр("ru='Федеральное государственное бюджетное учреждение'"));
	
	ОрганизационноПравоваяФорма           = "";
	ОрганизационноПравоваяФормаСокращенно = "";
	
	Для Каждого ОрганизационнаяФорма Из ОрганизационноПравовыеФормы Цикл
		Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, ОрганизационнаяФорма.Ключ)
		 Или УбратьИзНаименованияОрганизационнуюФорму(Наименование, ОрганизационнаяФорма.Значение) Тогда
			ОрганизационноПравоваяФорма           = ОрганизационнаяФорма.Значение;
			ОрганизационноПравоваяФормаСокращенно = ОрганизационнаяФорма.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо) Тогда
		
		Если Не ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
			КоличествоКавычек = СтрЧислоВхождений(Наименование, """");
			Если КоличествоКавычек > 1 Тогда
				// Наименование организации внутри внешних кавычек
				ПозицияПервойКавычки = СтрНайти(Наименование, """");
				ПозицияПоследнейКавычки = СтрНайти(Наименование, """",, КоличествоКавычек);
				Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
				Если КоличествоКавычек % 2 <> 0 Тогда
					Наименование = Наименование + """";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Наименование = СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма = ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно = ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)
	
	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования = СтрДлина(Наименование);
	ДлинаОрганизационнойФормы = СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование = СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат = Истина;
	КонецЕсли;
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование = СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ФормированиеНаименований

////////////////////////////////////////////////////////////////////////////////
// Заполнение реквизитов контрагента по данным ЕГР
#Область ЗаполнениеПоДаннымЕГР

&НаКлиенте
Функция ПолучитьЗаполняемыеДанные()
	
	ЗаполняемыеДанные = Новый Структура;
	ЗаполняемыеДанные.Вставить("ИНН");
	ЗаполняемыеДанные.Вставить("КПП");
	ЗаполняемыеДанные.Вставить("Наименование");
	ЗаполняемыеДанные.Вставить("НаименованиеСокращенное", "НаименованиеСокращенное");
	ЗаполняемыеДанные.Вставить("НаименованиеПолное", "НаименованиеПолное");
	ЗаполняемыеДанные.Вставить("РегистрационныйНомер", "ОГРН");
	ЗаполняемыеДанные.Вставить("СвидетельствоОРегистрации", ДанныеСвидетельстваОРегистрации());
	ЗаполняемыеДанные.Вставить("ДатаРегистрации");
	ЗаполняемыеДанные.Вставить("Телефон", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагенты"));
	ЗаполняемыеДанные.Вставить("ЮридическийАдрес", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагенты"));
	
	Возврат ЗаполняемыеДанные;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыКонтрагентаПоДаннымЕГР(РеквизитыКонтрагента, НеИспользуется) Экспорт
	
	ЭтоЮрЛицо = (СтрДлина(РеквизитыКонтрагента.ИНН) = 10);
	Если ЭтоЮрЛицо Тогда
		ВидКонтрагента = "ЮридическоеЛицо";
	Иначе
		ВидКонтрагента = "ИндивидуальныйПредприниматель";
	КонецЕсли;
	
	Если ВидОрганизации <> ВидКонтрагента Тогда
		ВидОрганизации = ВидКонтрагента;
		ОбработатьИзменениеВидаКонтрагента();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН, Наименование, НаименованиеСокращенное, НаименованиеПолное");
	
	Объект.ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	
	Если РеквизитыКонтрагента.ДатаРегистрации <> Неопределено Тогда
		Объект.ДатаРегистрации = РеквизитыКонтрагента.ДатаРегистрации;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		
		Объект.КПП = РеквизитыКонтрагента.КПП;
		
		ВыполнитьОтложеннуюИнициализациюКонтактнойИнформацииПриНеобходимости();
		
		Если РеквизитыКонтрагента.Телефон <> Неопределено Тогда
			ЗаполнитьЭлементКонтактнойИнформации(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"), РеквизитыКонтрагента.Телефон);
		КонецЕсли;
		
		Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			ЗаполнитьЭлементКонтактнойИнформации(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"), РеквизитыКонтрагента.ЮридическийАдрес);
		КонецЕсли;
		
	Иначе
		
		Если РеквизитыКонтрагента.СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = РеквизитыКонтрагента.СвидетельствоОРегистрации.Серия + " " + РеквизитыКонтрагента.СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = РеквизитыКонтрагента.СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСвидетельстваОРегистрации()
	
	НомерСерия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.СвидетельствоСерияНомер, " ");
	
	СвидетельствоОРегистрации = Новый Структура;
	
	Если НомерСерия.Количество() > 0 Тогда
		СвидетельствоОРегистрации.Вставить("Серия", НомерСерия[0]);
	Иначе
		СвидетельствоОРегистрации.Вставить("Серия", "");
	КонецЕсли;
	
	Если НомерСерия.Количество() > 1 Тогда
		СвидетельствоОРегистрации.Вставить("Номер", НомерСерия[1]);
	Иначе
		СвидетельствоОРегистрации.Вставить("Номер", "");
	КонецЕсли;
	
	СвидетельствоОРегистрации.Вставить("Дата", Объект.СвидетельствоДатаВыдачи);
	
	Возврат СвидетельствоОРегистрации;
	
КонецФункции

#КонецОбласти // ЗаполнениеПоДаннымЕГР

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаКлиенте
Процедура ОбработатьИзменениеСокращенногоНаименования()
	
	СтруктураНаименования = РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее = СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное = СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = СформироватьРабочееНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее = СформироватьРабочееНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование = СформироватьРабочееНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеСокращенное = Объект.НаименованиеСокращенное;
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтложеннуюИнициализациюКонтактнойИнформацииПриНеобходимости()
	
	Если Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		ВыполнитьОтложеннуюИнициализациюКонтактнойИнформации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтложеннуюИнициализациюКонтактнойИнформации()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
