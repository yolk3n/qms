
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СохраненныеНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ДополнительныйОтбор").Получить();
			Справочники.ШаблоныСводныхПроводокДляОбменаСБухгалтерией.ЗагрузитьНастройки(ЭтотОбъект, СохраненныеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеВыбораСчета.Добавить("", НСтр("ru = 'Фиксированное значение...'"));
	Для Каждого ЗначениеСчетаУчета Из Метаданные.Перечисления.ЗначенияСчетаУчета.ЗначенияПеречисления Цикл
		ДанныеВыбораСчета.Добавить(Перечисления.ЗначенияСчетаУчета[ЗначениеСчетаУчета.Имя], ЗначениеСчетаУчета.Синоним);
	КонецЦикла;
	
	ПоказатьИспользованиеВНастройкахОтражения();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	Справочники.ШаблоныСводныхПроводокДляОбменаСБухгалтерией.ЗагрузитьНастройки(ЭтотОбъект, ТекущийОбъект.ДополнительныйОтбор.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНастройкиИспользованияВБухгалтерскомУчете"
	   И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПоказатьИспользованиеВНастройкахОтражения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.ШаблоныСводныхПроводокДляОбменаСБухгалтерией.ЗаписатьДополнительныйОтбор(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанШаблонПроводки", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДанныеВыбораСчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ТипЗнч(Объект[Элемент.Имя]) = Тип("Строка") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ВидыСубконто;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипЗначения = Тип("Тип") Тогда
		СтандартнаяОбработка = Ложь;
		ИмяОбъекта = ИмяОбъектаПоТипу(ВыбранноеЗначение);
		ОткрытьФорму(ИмяОбъекта + ".ФормаВыбора",, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
	Объект.УстановленДополнительныйОтбор = Компоновщик.Настройки.Отбор.Элементы.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИспользованияВОбменахОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьИспользованиеВНастройкахОтражения" Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			Если Не Записать() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.ПравилаОтраженияВБухгалтерскомУчете.Форма.НастройкаИспользованияПриОтраженииВБухгалтерскомУчете",
			Новый Структура("ШаблонПроводки", Объект.Ссылка),
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСчетаДебетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	НастроитьСчет(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСчетаКредитаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	НастроитьСчет(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Справочники.ШаблоныСводныхПроводокДляОбменаСБухгалтерией.ИнициализироватьКомпоновщик(ЭтотОбъект, Объект.Операция);
	
	ЗаполнитьВидыСубконто();
	
	ЗаполнитьСписокВыбораАналитическихПоказателей();
	
	ИнициализироватьНастройкиСчетов();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыСубконто()
	
	ВидыСубконто.Очистить();
	
	СоставОбмена = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект.ПланОбмена).Состав;
	
	Для Каждого ПолеВыбора Из Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		ВходитВСоставОбмена = Ложь;
		Для Каждого Тип Из ПолеВыбора.Тип.Типы() Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) И СоставОбмена.Содержит(Метаданные.НайтиПоТипу(Тип)) Тогда
				ВходитВСоставОбмена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВходитВСоставОбмена Тогда
			ВидыСубконто.Добавить(ПолеВыбора.Поле, СтрЗаменить("%1 (вид)", "%1", ПолеВыбора.Заголовок));
		КонецЕсли;
		
	КонецЦикла;
	
	ТипыСубконто = Метаданные.ОпределяемыеТипы.Субконто.Тип.Типы();
	Для Каждого ТипСубконто Из ТипыСубконто Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТипСубконто) И СоставОбмена.Содержит(Метаданные.НайтиПоТипу(ТипСубконто)) Тогда
			ВидыСубконто.Добавить(ТипСубконто, СтрЗаменить("%1 (значение)", "%1", ТипСубконто));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораАналитическихПоказателей()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Показатель
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций.ПоказателиРегистра
	|ГДЕ
	|	Ссылка = &Операция
	|	И Использование
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("Операция", Объект.Операция);
	АналитическиеПоказатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
	Элементы.ИсточникКоличестваДебета.СписокВыбора.ЗагрузитьЗначения(АналитическиеПоказатели);
	Элементы.ИсточникКоличестваКредита.СписокВыбора.ЗагрузитьЗначения(АналитическиеПоказатели);
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(АналитическиеПоказатели, Перечисления.ПоказателиАналитическихРегистров.Количество);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(АналитическиеПоказатели, Перечисления.ПоказателиАналитическихРегистров.КоличествоВОсновныхЕдиницахУчета);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(АналитическиеПоказатели, Перечисления.ПоказателиАналитическихРегистров.КорКоличество);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(АналитическиеПоказатели, Перечисления.ПоказателиАналитическихРегистров.КорКоличествоВОсновныхЕдиницахУчета);
	Элементы.ИсточникБалансовойСуммы.СписокВыбора.ЗагрузитьЗначения(АналитическиеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	// Видимость доступность элементов, зависящих от операции.
	ОперацияЗаполнена = ЗначениеЗаполнено(Объект.Операция);
	
	Элементы.СубконтоСчетаДебета1.Доступность = ОперацияЗаполнена;
	Элементы.СубконтоСчетаДебета2.Доступность = ОперацияЗаполнена;
	Элементы.СубконтоСчетаДебета3.Доступность = ОперацияЗаполнена;
	
	Элементы.СубконтоСчетаКредита1.Доступность = ОперацияЗаполнена;
	Элементы.СубконтоСчетаКредита2.Доступность = ОперацияЗаполнена;
	Элементы.СубконтоСчетаКредита3.Доступность = ОперацияЗаполнена;
	
	Элементы.ИсточникБалансовойСуммы.Доступность = ОперацияЗаполнена;
	
	// Видимость доступность дополнительного отбора.
	Элементы.ГруппаДополнительныйОтбор.Видимость = Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Количество() > 0;
	
	// Видимость доступность элементов, зависящих от настроек бюджетного учета.
	ЭтоБюджетноеУчреждение = ПолучитьФункциональнуюОпцию("БюджетноеУчреждение");
	
	Элементы.СчетДебета.Видимость = Не ЭтоБюджетноеУчреждение;
	Элементы.СчетКредита.Видимость = Не ЭтоБюджетноеУчреждение;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИспользованиеВНастройкахОтражения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВБухгалтерскомУчете.НастройкаОтраженияВБухгалтерскомУчете) КАК КоличествоНастроек
	|ИЗ
	|	РегистрСведений.ПравилаОтраженияВБухгалтерскомУчете КАК ПравилаОтраженияВБухгалтерскомУчете
	|ГДЕ
	|	ПравилаОтраженияВБухгалтерскомУчете.ШаблонПроводки = &ШаблонПроводки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПравилаОтраженияВБухгалтерскомУчете.НастройкаОтраженияВБухгалтерскомУчете) > 0
	|";
	
	Запрос.УстановитьПараметр("ШаблонПроводки", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДоступноИзменениеНастроек = ПравоДоступа("Изменение", Метаданные.Справочники.ШаблоныСводныхПроводокДляОбменаСБухгалтерией);
	
	ЧастиСтроки = Новый Массив;
	Если Выборка.Следующий() Тогда
		ЧастиСтроки.Добавить(СтрЗаменить(НСтр("ru = 'Используется (%1).'"), "%1", Выборка.КоличествоНастроек));
		Если ДоступноИзменениеНастроек Тогда
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru = 'Изменить'"),,,, "НастроитьИспользованиеВНастройкахОтражения"));
		Иначе
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru = 'Посмотреть'"),,,, "НастроитьИспользованиеВНастройкахОтражения"));
		КонецЕсли;
	Иначе
		ЧастиСтроки.Добавить(НСтр("ru = 'Не используется.'"));
		Если ДоступноИзменениеНастроек Тогда
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru = 'Настроить'"),,,, "НастроитьИспользованиеВНастройкахОтражения"));
		КонецЕсли;
	КонецЕсли;
	
	СостояниеИспользованияВОбменах = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоТипу(Тип)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
	Возврат МетаданныеТипа.ПолноеИмя();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки счетов
#Область НастройкиСчетов

&НаСервере
Процедура ИнициализироватьНастройкиСчетов()
	
	ДанныеСчетаДебета = ПолучитьДанныеСчета(Объект, "СчетДебета");
	ПредставлениеСчетаДебета = ПолучитьПредставлениеСчета(ДанныеСчетаДебета, "СчетДебета");
	
	ДанныеСчетаКредита = ПолучитьДанныеСчета(Объект, "СчетКредита");
	ПредставлениеСчетаКредита = ПолучитьПредставлениеСчета(ДанныеСчетаКредита, "СчетКредита");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчет(ТипСчета, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыНастроек = ПолучитьДанныеСчета(Объект, ТипСчета);
	ПараметрыФормыНастроек.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповестить = Новый ОписаниеОповещения("НастроитьСчетЗавершение", ЭтотОбъект, ТипСчета);
	ОткрытьФорму("Справочник.ШаблоныСводныхПроводокДляОбменаСБухгалтерией.Форма.НастройкаСчета", ПараметрыФормыНастроек, ЭтотОбъект,,,, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетЗавершение(ДанныеСчета, ТипСчета) Экспорт
	
	Если ТипЗнч(ДанныеСчета) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипСчета = "СчетДебета" Тогда
		
		Объект.КПССчетаДебета    = ДанныеСчета.КПССчета;
		Объект.ВидКПССчетаДебета = ДанныеСчета.ВидКПС;
		Объект.СчетДебета        = ДанныеСчета.Счет;
		Объект.КЭКСчетаДебета    = ДанныеСчета.КЭКСчета;
		
		ПредставлениеСчетаДебета = ПолучитьПредставлениеСчета(ДанныеСчета, ТипСчета);
		
	ИначеЕсли ТипСчета = "СчетКредита" Тогда
		
		Объект.КПССчетаКредита    = ДанныеСчета.КПССчета;
		Объект.ВидКПССчетаКредита = ДанныеСчета.ВидКПС;
		Объект.СчетКредита        = ДанныеСчета.Счет;
		Объект.КЭКСчетаКредита    = ДанныеСчета.КЭКСчета;
		
		ПредставлениеСчетаКредита = ПолучитьПредставлениеСчета(ДанныеСчета, ТипСчета);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеСчета(Объект, ТипСчета)
	
	ДанныеСчета = Новый Структура;
	
	Если ТипСчета = "СчетДебета" Тогда
		ДанныеСчета.Вставить("КПССчета", Объект.КПССчетаДебета);
		ДанныеСчета.Вставить("ВидКПС"  , Объект.ВидКПССчетаДебета);
		ДанныеСчета.Вставить("Счет"    , Объект.СчетДебета);
		ДанныеСчета.Вставить("КЭКСчета", Объект.КЭКСчетаДебета);
	ИначеЕсли ТипСчета = "СчетКредита" Тогда
		ДанныеСчета.Вставить("КПССчета", Объект.КПССчетаКредита);
		ДанныеСчета.Вставить("ВидКПС"  , Объект.ВидКПССчетаКредита);
		ДанныеСчета.Вставить("Счет"    , Объект.СчетКредита);
		ДанныеСчета.Вставить("КЭКСчета", Объект.КЭКСчетаКредита);
	КонецЕсли;
	
	Возврат ДанныеСчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеСчета(ДанныеСчета, ТипСчета)
	
	КПССчета = ?(ЗначениеЗаполнено(ДанныеСчета.КПССчета), ДанныеСчета.КПССчета, "<...>");
	ВидКПС   = ?(ЗначениеЗаполнено(ДанныеСчета.ВидКПС), "(" + ДанныеСчета.ВидКПС + ")", "");
	Счет     = ?(ЗначениеЗаполнено(ДанныеСчета.Счет), ДанныеСчета.Счет, "<...>");
	КЭКСчета = ?(ЗначениеЗаполнено(ДанныеСчета.КЭКСчета), ДанныеСчета.КЭКСчета, "<...>");
	
	ПредставлениеСчета = СтрШаблон("%1%2.%3.%4", КПССчета, ВидКПС, Счет, КЭКСчета);
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеСчета,,,, ТипСчета);
	
КонецФункции

#КонецОбласти // НастройкиСчетов

#КонецОбласти // СлужебныеПроцедурыИФункции
