#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает характеристики КТРУ.
// 
// Параметры:
//  КТРУ - СправочникСсылка.КТРУ
// 
// Возвращаемое значение:
//  ТаблицаХарактеристик - ТаблицаЗначений - характеристики КТРУ.
//
Функция ПолучитьХарактеристикиКТРУ(КТРУ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Характеристики.Ссылка                КАК ХарактеристикаКТРУ,
	|	Характеристики.Реквизит              КАК Реквизит,
	|	Характеристики.Реквизит.ТипЗначения  КАК ТипРеквизита,
	|	Характеристики.ТипЗначений           КАК ТипЗначений,
	|	Характеристики.ВидХарактеристики     КАК ВидХарактеристики,
	|	Характеристики.ЕдиницаИзмерения      КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ХарактеристикиКТРУ КАК Характеристики
	|ГДЕ
	|	Характеристики.Владелец = &ЭлементКТРУ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Характеристики.Ссылка  КАК ХарактеристикаКТРУ,
	|	ВЫБОР
	|		КОГДА Характеристики.ТипЗначений = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение)
	|			ТОГДА ЗначенияХарактеристик.Значение
	|		ИНАЧЕ ЗначенияХарактеристик.Наименование
	|	КОНЕЦ                  КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиКТРУ КАК Характеристики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ЗначенияХарактеристикКТРУ КАК ЗначенияХарактеристик
	|	ПО
	|		Характеристики.Ссылка = ЗначенияХарактеристик.Владелец
	|ГДЕ
	|	Характеристики.Владелец = &ЭлементКТРУ
	|");
	
	Запрос.УстановитьПараметр("ЭлементКТРУ", КТРУ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаХарактеристик = РезультатЗапроса[0].Выгрузить();
	ТаблицаХарактеристик.Колонки.Добавить("Значение");
	ТаблицаХарактеристик.Колонки.Добавить("ПредставлениеДиапазона"   , Новый ОписаниеТипов("Строка"));
	ТаблицаХарактеристик.Колонки.Добавить("ФиксированноеЗначение"    , Новый ОписаниеТипов("Булево"));
	ТаблицаХарактеристик.Колонки.Добавить("ЗначенияОграниченыСписком", Новый ОписаниеТипов("Булево"));
	ТаблицаХарактеристик.Колонки.Добавить("ДоступныеЗначения"        , Новый ОписаниеТипов("СписокЗначений"));
	
	ТаблицаЗначенийХарактеристик = РезультатЗапроса[1].Выгрузить();
	
	Для Каждого ОписаниеХарактеристики Из ТаблицаХарактеристик Цикл
		
		Отбор = Новый Структура("ХарактеристикаКТРУ", ОписаниеХарактеристики.ХарактеристикаКТРУ);
		ЗначенияХарактеристики = ТаблицаЗначенийХарактеристик.НайтиСтроки(Отбор);
		
		Если ОписаниеХарактеристики.ВидХарактеристики = Перечисления.ВидыХарактеристикКТРУ.Неизменяемая Тогда
			Значение = ?(ЗначенияХарактеристики.Количество() > 0, ЗначенияХарактеристики[0].Значение, Неопределено);
			Если ОписаниеХарактеристики.ТипЗначений = Перечисления.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение Тогда
				ОписаниеХарактеристики.Значение = Значение;
				ОписаниеХарактеристики.ФиксированноеЗначение = Истина;
			Иначе
				ОписаниеХарактеристики.ПредставлениеДиапазона = Значение;
			КонецЕсли;
		Иначе
			ОписаниеХарактеристики.Значение = ОписаниеХарактеристики.ТипРеквизита.ПривестиЗначение();
			ОписаниеХарактеристики.ЗначенияОграниченыСписком = 
				ОписаниеХарактеристики.ТипЗначений = Перечисления.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение;
			ПредставлениеДиапазона = Новый Массив;
			Для Каждого ОписаниеЗначения Из ЗначенияХарактеристики Цикл
				Если ОписаниеХарактеристики.ТипЗначений = Перечисления.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение Тогда
					ОписаниеХарактеристики.ДоступныеЗначения.Добавить(ОписаниеЗначения.Значение);
				Иначе
					ПредставлениеДиапазона.Добавить(ОписаниеЗначения.Значение);
				КонецЕсли;
			КонецЦикла;
			ОписаниеХарактеристики.ПредставлениеДиапазона = СтрСоединить(ПредставлениеДиапазона, ", ");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаХарактеристик;
	
КонецФункции

// Заполняет дерево значений характеристик КТРУ.
// 
// Параметры:
//  КТРУ - СправочникСсылка.КТРУ
//  ДеревоЗначенийКТРУ - ДеревоЗначений - заполняемое дерево.
//
Процедура ЗаполнитьДеревоЗначенийХарактеристик(КТРУ, ДеревоЗначенийКТРУ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Характеристики.Ссылка                  КАК ХарактеристикаКТРУ,
	|	ПРЕДСТАВЛЕНИЕ(Характеристики.Ссылка)   КАК Представление,
	|	Характеристики.Реквизит                КАК Реквизит,
	|	Характеристики.Реквизит.ТипЗначения    КАК ТипРеквизита,
	|	Характеристики.ТипЗначений             КАК ТипЗначений,
	|	Характеристики.ВидХарактеристики       КАК ВидХарактеристики,
	|	Характеристики.ЕдиницаИзмерения        КАК ЕдиницаИзмерения,
	|	Характеристики.ОбязательноКПрименению  КАК ОбязательноКПрименению,
	|	Характеристики.ТипЗначений = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение) КАК ФиксированноеЗначение,
	|	Характеристики.ВидХарактеристики <> ЗНАЧЕНИЕ(Перечисление.ВидыХарактеристикКТРУ.Неизменяемая)            КАК РазрешеноИзменение,
	|	Характеристики.ВидХарактеристики = ЗНАЧЕНИЕ(Перечисление.ВидыХарактеристикКТРУ.ВыборНесколькихЗначений)  КАК РазрешенВыборНескольких
	|ИЗ
	|	Справочник.ХарактеристикиКТРУ КАК Характеристики
	|ГДЕ
	|	Характеристики.Владелец = &ЭлементКТРУ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Характеристики.Ссылка                               КАК ХарактеристикаКТРУ,
	|	ЗначенияХарактеристик.Ссылка                        КАК ЗначениеКТРУ,
	|	ВЫБОР
	|		КОГДА Характеристики.ТипЗначений = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение)
	|			ТОГДА ЗначенияХарактеристик.Значение
	|		ИНАЧЕ ЗначенияХарактеристик.Наименование
	|	КОНЕЦ                                               КАК Представление,
	|	ЗначенияХарактеристик.Значение                      КАК Значение,
	|	ЗначенияХарактеристик.МинимальноеЗначение           КАК МинимальноеЗначение,
	|	ЗначенияХарактеристик.ВключаяМинимальноеЗначение    КАК ВключаяМинимальноеЗначение,
	|	ЗначенияХарактеристик.МаксимальноеЗначение          КАК МаксимальноеЗначение,
	|	ЗначенияХарактеристик.ВключаяМаксимальноеЗначение   КАК ВключаяМаксимальноеЗначение,
	|	ЗначенияХарактеристик.ПометкаУдаления               КАК ЗначениеКТРУПометкаУдаления
	|ИЗ
	|	Справочник.ХарактеристикиКТРУ КАК Характеристики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ЗначенияХарактеристикКТРУ КАК ЗначенияХарактеристик
	|	ПО
	|		Характеристики.Ссылка = ЗначенияХарактеристик.Владелец
	|ГДЕ
	|	Характеристики.Владелец = &ЭлементКТРУ
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаКТРУ,
	|	Значение,
	|	МинимальноеЗначение,
	|	ВключаяМинимальноеЗначение УБЫВ,
	|	МаксимальноеЗначение,
	|	ВключаяМаксимальноеЗначение УБЫВ,
	|	ЗначениеКТРУ
	|");
	
	Запрос.УстановитьПараметр("ЭлементКТРУ", КТРУ);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаХарактеристик         = РезультатЗапроса[0].Выгрузить();
	ТаблицаЗначенийХарактеристик = РезультатЗапроса[1].Выгрузить();
	
	Для Каждого Характеристика Из ТаблицаХарактеристик Цикл
		
		СтрокаХарактеристики = ДеревоЗначенийКТРУ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаХарактеристики, Характеристика);
		Если ЗначениеЗаполнено(Характеристика.ЕдиницаИзмерения) Тогда
			СтрокаХарактеристики.Представление = СтрокаХарактеристики.Представление + ", " + Характеристика.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если Не Характеристика.РазрешеноИзменение Тогда
			СтрокаХарактеристики.Отбор = Истина;
		КонецЕсли;
		
		Значения = ТаблицаЗначенийХарактеристик.НайтиСтроки(Новый Структура("ХарактеристикаКТРУ", Характеристика.ХарактеристикаКТРУ));
		Для Каждого Значение Из Значения Цикл
			СтрокаЗначения = СтрокаХарактеристики.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаХарактеристики);
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, Значение);
		КонецЦикла;
		
		СтрокаХарактеристики.ЭтоХарактеристикаКТРУ = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификатор классификатора в сервисе интернет поддержки.
// 
// Возвращаемое значение:
//  Строка - Идентификатор классификатора в сервисе интернет поддержки.
//
Функция ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Экспорт
	
	Возврат "KTRU";
	
КонецФункции

// Возвращает идентификатор классификатора в сервисе интернет поддержки.
// 
// Параметры:
//  УникальныйИдентификатор - уникальный идентификатор для формирования адреса временного хранилища данных классификатора.
//
// Возвращаемое значение:
//  РезультатПолученияФайла - Структура - результат получения данных классификатора из сервиса интернет поддержки.
//   * АдресДанныхКлассификатора - Строка - адрес полученных данных.
//   * СообщениеОбОшибке - Строка - сообщение об ошибке получения данных.
//
Функция ПолучитьФайлКлассификатораИзСервисаИнтернетПоддержки(УникальныйИдентификатор) Экспорт
	
	РезультатПолученияФайла = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		
		ИдентификаторКлассификатора = ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
		
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		
		РезультатОбработки = МодульРаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКлассификатора));
		Если Не ЗначениеЗаполнено(РезультатОбработки.КодОшибки) Тогда
			
			СтрокаСДанными = РезультатОбработки.ДанныеКлассификаторов.Найти(ИдентификаторКлассификатора, "Идентификатор");
			Если СтрокаСДанными <> Неопределено Тогда
				
				ОписаниеДанныхКлассификатора = Новый Структура;
				ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(СтрокаСДанными.АдресФайла));
				ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", "ZIP");
				
				РезультатПолученияФайла.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
				
				УдалитьИзВременногоХранилища(СтрокаСДанными.АдресФайла);
				
			КонецЕсли;
			
		Иначе
			
			РезультатПолученияФайла.СообщениеОбОшибке = РезультатОбработки.СообщениеОбОшибке;
			
			ИмяСобытия = НСтр("ru = 'КТРУ.Загрузка файлов классификатора из сервиса интернет-поддержки'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.КТРУ,, РезультатОбработки.ИнформацияОбОшибке);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПолученияФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
	
	Описатель = МодульРаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'КТРУ для медицинских организаций'");
	Описатель.Идентификатор          = ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДатыПоследнейЗагрузки = Константы.ДатыПоследнейЗагрузкиКТРУ.Получить().Получить();
	
	// Получение данных КТРУ.
	РезультатПолученияКлассификатора = ПолучитьДанныеКлассификатораИзАрхива(ИсходныеДанные, ДатыПоследнейЗагрузки);
	
	// Фильтр КТРУ. Обрабатываются только ранее загруженные КТРУ. Новые не создаются.
	ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "КТРУ", ВидСравненияКомпоновкиДанных.Заполнено, Неопределено);
	ФиксированныеОтборы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор);
	РезультатПолученияКлассификатора.ДанныеКлассификатора = СопоставитьЗагружаемыеДанные(РезультатПолученияКлассификатора.ДанныеКлассификатора,, ФиксированныеОтборы);
	
	// Загрузка данных КТРУ.
	РезультатЗагрузкиКлассификатора = ЗагрузитьПолученныеДанныеКлассификатора(РезультатПолученияКлассификатора);
	
	Обработан = РезультатЗагрузкиКлассификатора.Ошибки.Количество() = 0;
	
	// Сохранение дат последних загрузок КТРУ.
	Если Обработан Тогда
		Если ДатыПоследнейЗагрузки = Неопределено Тогда
			ДатыПоследнейЗагрузки = Новый Соответствие;
		КонецЕсли;
		Для Каждого Элемент Из РезультатПолученияКлассификатора.ДанныеКлассификатора Цикл
			ДатаПоследнейЗагрузки = ДатыПоследнейЗагрузки.Получить(Элемент.КодОКПД2);
			Если ДатаПоследнейЗагрузки = Неопределено Или ДатаПоследнейЗагрузки < Элемент.ДатаИзменений Тогда
				ДатыПоследнейЗагрузки.Вставить(Элемент.КодОКПД2, Элемент.ДатаИзменений);
			КонецЕсли;
		КонецЦикла;
		Константы.ДатыПоследнейЗагрузкиКТРУ.Установить(Новый ХранилищеЗначения(ДатыПоследнейЗагрузки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Если Параметры.ФорматДанных = "ZIP" Тогда
		РезультатПолученияКлассификатора = ПолучитьДанныеКлассификатораИзАрхива(Параметры.Данные);
		ПоместитьВоВременноеХранилище(РезультатПолученияКлассификатора, АдресРезультата);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный формат файла.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	РезультатЗагрузкиКлассификатора = ЗагрузитьПолученныеДанныеКлассификатора(Параметры);
	ПоместитьВоВременноеХранилище(РезультатЗагрузкиКлассификатора, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных КТРУ из файла

Функция ПолучитьТаблицуКлассификатора() Экспорт
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("ДатаИзменений", Новый ОписаниеТипов("Дата"));
	ДанныеКлассификатора.Колонки.Добавить("КодОКПД2"     , ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ДанныеКлассификатора.Колонки.Добавить("Код"          , ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ДанныеКлассификатора.Колонки.Добавить("Наименование" , ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеКлассификатора.Колонки.Добавить("ПолноеНаименование", Новый ОписаниеТипов("Строка"));
	ДанныеКлассификатора.Колонки.Добавить("Групповой"    , Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("КодРодителя"  , ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ДанныеКлассификатора.Колонки.Добавить("Отменен"      , Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("ПричинаОтмены", Новый ОписаниеТипов("Строка"));
	ДанныеКлассификатора.Колонки.Добавить("ДочерниеКлассификаторы", Новый ОписаниеТипов("ФиксированнаяСтруктура"));
	ДанныеКлассификатора.Колонки.Добавить("Данные"       , Новый ОписаниеТипов("ФиксированнаяСтруктура"));
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьДанныеКлассификатораИзАрхива(ИсходныеДанные, ДатыПоследнейЗагрузки = Неопределено)
	
	Попытка
		
		КаталогФайлов = ФайловаяСистема.СоздатьВременныйКаталог();
		ИзвлечьФайлыИзАрхива(ИсходныеДанные, КаталогФайлов);
		
		ФайлыКлассификатора = ПолучитьФайлыКлассификатора(КаталогФайлов, ДатыПоследнейЗагрузки);
		
		ДанныеКлассификатора             = ПолучитьКТРУИзФайлов(ФайлыКлассификатора);
		ДанныеОКПД2                      = ПолучитьОКПД2ИзФайлов(ФайлыКлассификатора, ДанныеКлассификатора);
		ДанныеРубрикатора                = ПолучитьРубрикаторИзФайлов(ФайлыКлассификатора);
		ДанныеДочернихКлассификаторов    = ПолучитьДанныеДочернихКлассификаторовИзДополнительныхИсточников();
		
		ДополнительныеДанные = Новый Структура;
		ДополнительныеДанные.Вставить("ДанныеОКПД2"                     , ДанныеОКПД2);
		ДополнительныеДанные.Вставить("ДанныеРубрикатора"               , ДанныеРубрикатора);
		ДополнительныеДанные.Вставить("ДанныеДочернихКлассификаторов"   , ДанныеДочернихКлассификаторов);
		
		РезультатПолученияКлассификатора = Новый Структура;
		РезультатПолученияКлассификатора.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
		РезультатПолученияКлассификатора.Вставить("ДополнительныеДанные", ДополнительныеДанные);
		
		ФайловаяСистема.УдалитьВременныйКаталог(КаталогФайлов);
		
		Возврат РезультатПолученияКлассификатора;
		
	Исключение
		
		Если КаталогФайлов <> Неопределено Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогФайлов);
		КонецЕсли;
		
		Текст = НСтр("ru = 'При чтении классификатора ""%1"" произошла ошибка:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПустаяСсылка().Метаданные().Представление());
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение Текст;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьКТРУИзФайлов(ФайлыКлассификатора)
	
	ДанныеКлассификатора = ПолучитьТаблицуКлассификатора();
	
	Для Каждого МетаданныеФайла Из ФайлыКлассификатора Цикл
		
		Если ЭтоФайлКТРУ(МетаданныеФайла.Файл) Тогда
			
			Попытка
				Значение = ПреобразоватьJSONВЗначение(МетаданныеФайла.Файл);
			Исключение
				
				ИмяСобытия = НСтр("ru = 'КТРУ.Преобразование данных файла КТРУ.'");
				
				Текст = НСтр("ru = 'Не удалось преобразовать файл КТРУ ""%1"" по причине:'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеФайла.Файл.Имя);
				
				ТекстЖурналаРегистрации = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.КТРУ,, ТекстЖурналаРегистрации);
				
			КонецПопытки;
			
			Если Значение.Свойство("canceled") Тогда
				ПолучитьОтменыКТРУ(Значение.canceled, МетаданныеФайла.Дата, МетаданныеФайла.КодОКПД2, ДанныеКлассификатора);
			КонецЕсли;
			
			Если Значение.Свойство("templates") Тогда
				ПолучитьЭлементыКТРУ(Значение.templates, МетаданныеФайла.Дата, МетаданныеФайла.КодОКПД2, Истина, ДанныеКлассификатора);
			КонецЕсли;
			
			Если Значение.Свойство("KTRU") Тогда
				ПолучитьЭлементыКТРУ(Значение.KTRU, МетаданныеФайла.Дата, МетаданныеФайла.КодОКПД2, Ложь, ДанныеКлассификатора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКлассификатора.Сортировать("КодОКПД2");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ПолучитьОтменыКТРУ(СписокЭлементовКТРУ, ДатаИзменений, КодОКПД2, ДанныеКлассификатора)
	
	Для Каждого Элемент Из СписокЭлементовКТРУ Цикл
		
		СтрокаТаблицы = ДанныеКлассификатора.Добавить();
		СтрокаТаблицы.ДатаИзменений = ДатаИзменений;
		СтрокаТаблицы.КодОКПД2      = КодОКПД2;
		СтрокаТаблицы.Код           = Элемент.code;
		СтрокаТаблицы.Отменен       = Истина;
		СтрокаТаблицы.ПричинаОтмены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "cancelReason");
		СтрокаТаблицы.Данные        = Новый ФиксированнаяСтруктура(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьЭлементыКТРУ(СписокЭлементовКТРУ, ДатаИзменений, КодОКПД2, Групповой, ДанныеКлассификатора)
	
	Для Каждого Элемент Из СписокЭлементовКТРУ Цикл
		
		КодКТРУ = Элемент.code;
		
		СтрокаТаблицы = ДанныеКлассификатора.Добавить();
		СтрокаТаблицы.ДатаИзменений = ДатаИзменений;
		СтрокаТаблицы.КодОКПД2      = КодОКПД2;
		СтрокаТаблицы.Код           = КодКТРУ;
		СтрокаТаблицы.Наименование  = Элемент.name;
		СтрокаТаблицы.Групповой     = Групповой;
		СтрокаТаблицы.Данные        = Новый ФиксированнаяСтруктура(Элемент);
		
		СтрокаТаблицы.ПолноеНаименование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "full_name");
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПолноеНаименование) Тогда
			СтрокаТаблицы.ПолноеНаименование = СтрокаТаблицы.Наименование;
		КонецЕсли;
		
		Если Не Групповой И Элемент.Свойство("parentCode") Тогда
			СтрокаТаблицы.КодРодителя = Элемент.parentCode;
		ИначеЕсли Не Групповой И Элемент.Свойство("parentPositionInfoCode") Тогда
			// Обратная совместимость.
			СтрокаТаблицы.КодРодителя = Элемент.parentPositionInfoCode;
		Иначе
			// Код родителя не указан.
		КонецЕсли;
		
		СтрокаТаблицы.ДочерниеКлассификаторы = ПолучитьДанныеДочернихКлассификаторовИзЭлементаКТРУ(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОКПД2ИзФайлов(ФайлыКлассификатора, ДанныеКлассификатораКТРУ)
	
	ДанныеОКПД2 = Новый Соответствие;
	Для Каждого МетаданныеФайла Из ФайлыКлассификатора Цикл
		
		Если ЭтоФайлОКПД2(МетаданныеФайла.Файл) Тогда
			
			Попытка
				Значение = ПреобразоватьJSONВЗначение(МетаданныеФайла.Файл);
			Исключение
				
				ИмяСобытия = НСтр("ru = 'КТРУ.Преобразование данных файла ОКПД2.'");
				
				Текст = НСтр("ru = 'Не удалось преобразовать файл ОКПД2 ""%1"" по причине:'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МетаданныеФайла.Файл.Имя);
				
				ТекстЖурналаРегистрации = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстЖурналаРегистрации);
				
			КонецПопытки;
			
			Для Каждого Элемент Из Значение.OKPD2 Цикл
				
				ЭлементДанных = Новый Структура("НаименованиеПолное");
				ЭлементДанных.НаименованиеПолное = Элемент.name;
				
				ДанныеОКПД2.Вставить(Элемент.code, ЭлементДанных);
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьДанныеОКПД2 = ЗначениеЗаполнено(ДанныеОКПД2);
	
	ТипОКПД2 = Метаданные.ОпределяемыеТипы.КлассификаторОКПД2.Тип;
	МенеджерОКПД2 = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ТипОКПД2.ПривестиЗначение());
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("КодОКПД2"          , ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ДанныеКлассификатора.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ДанныеКлассификатора.Колонки.Добавить("ОКПД2"             , ТипОКПД2);
	
	ОКПД2ВсеДанные = ДанныеКлассификатора.Добавить();
	ОКПД2ВсеДанные.КодОКПД2   = "**.**.**.***";
	ОКПД2ВсеДанные.НаименованиеПолное = НСтр("ru = '<Все элементы>'");
	
	ТекущийОКПД2 = Неопределено;
	Для Каждого ЭлементДанныхКТРУ Из ДанныеКлассификатораКТРУ Цикл
		
		Если ТекущийОКПД2 <> ЭлементДанныхКТРУ.КодОКПД2 Тогда
			
			ТекущийОКПД2 = ЭлементДанныхКТРУ.КодОКПД2;
			
			СтрокаКодовОКПД2 = ДанныеКлассификатора.Добавить();
			СтрокаКодовОКПД2.КодОКПД2 = ЭлементДанныхКТРУ.КодОКПД2;
			СтрокаКодовОКПД2.ОКПД2    = МенеджерОКПД2.НайтиПоКоду(ЭлементДанныхКТРУ.КодОКПД2);
			
			Если ЕстьДанныеОКПД2 Тогда
				ЭлементДанныхОКПД2 = ДанныеОКПД2.Получить(ЭлементДанныхКТРУ.КодОКПД2);
				Если ЭлементДанныхОКПД2 <> Неопределено Тогда
					СтрокаКодовОКПД2.НаименованиеПолное = ЭлементДанныхОКПД2.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьРубрикаторИзФайлов(ФайлыКлассификатора)
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("КодРубрики"  , ОбщегоНазначения.ОписаниеТипаСтрока(2), НСтр("ru = 'Код'"));
	ДанныеКлассификатора.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Наименование'"));
	ДанныеКлассификатора.Колонки.Добавить("НаборОКПД2"  , Новый ОписаниеТипов);
	
	РубрикаВсеДанные = ДанныеКлассификатора.Добавить();
	РубрикаВсеДанные.КодРубрики   = "@@";
	РубрикаВсеДанные.Наименование = НСтр("ru = '<Все элементы>'");
	
	Для Каждого МетаданныеФайла Из ФайлыКлассификатора Цикл
		
		Если ЭтоФайлРубрикатор(МетаданныеФайла.Файл) Тогда
			
			Значение = ПреобразоватьJSONВЗначение(МетаданныеФайла.Файл);
			Для Каждого Элемент Из Значение.rubricator Цикл
				
				Если ТипЗнч(Элемент.okpd2) <> Тип("Массив") Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы = ДанныеКлассификатора.Добавить();
				СтрокаТаблицы.КодРубрики   = СокрЛП(Элемент.code);
				СтрокаТаблицы.Наименование = СокрЛП(Элемент.name);
				СтрокаТаблицы.НаборОКПД2   = Новый ФиксированныйМассив(Элемент.okpd2);
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКлассификатора.Сортировать("Наименование");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьДанныеДочернихКлассификаторовИзЭлементаКТРУ(Элемент)
	
	ИсходныеДанныеДочернихКлассификаторов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "cls");
	Если ИсходныеДанныеДочернихКлассификаторов = Неопределено Тогда
		// Обратная совместимость.
		ИсходныеДанныеДочернихКлассификаторов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "classifiers");
	КонецЕсли;
	
	Если ИсходныеДанныеДочернихКлассификаторов <> Неопределено Тогда
		
		КонвертированныеДанныеДочернихКлассификаторов = Новый Структура;
		
		КлассификаторКТРУПереопределяемый.КонвертироватьДанныеДочернихКлассификаторовЭлемента(ИсходныеДанныеДочернихКлассификаторов, КонвертированныеДанныеДочернихКлассификаторов);
		
		Возврат Новый ФиксированнаяСтруктура(КонвертированныеДанныеДочернихКлассификаторов);
		
	Иначе
		
		Возврат Новый ФиксированнаяСтруктура();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДочернихКлассификаторовИзДополнительныхИсточников()
	
	ДанныеДочернихКлассификаторов = Новый Структура;
	
	КлассификаторКТРУПереопределяемый.ПолучитьДанныеДочернихКлассификаторовИзДополнительныхИсточников(ДанныеДочернихКлассификаторов);
	
	Возврат ДанныеДочернихКлассификаторов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление полученных данных

Функция СопоставитьЗагружаемыеДанные(ИсходныеДанные, Настройки = Неопределено, ФиксированныеОтборы = Неопределено) Экспорт
	
	Схема = ПолучитьМакет("СхемаПолученияДанныхИзФайла");
	
	ДополнитьСхемуКомпоновкиДаннымиОКПД2(Схема);
	
	Если ФиксированныеОтборы <> Неопределено Тогда
		
		КомпоновщикЗагрузки = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикЗагрузки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		КомпоновщикЗагрузки.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		
		Для Каждого ФиксированныйОтбор Из ФиксированныеОтборы Цикл
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				КомпоновщикЗагрузки.ФиксированныеНастройки.Отбор,
				ФиксированныйОтбор.ЛевоеЗначение,
				ФиксированныйОтбор.ВидСравнения,
				ФиксированныйОтбор.ПравоеЗначение);
		КонецЦикла;
		
		КомпоновщикЗагрузки.Восстановить();
		Настройки = КомпоновщикЗагрузки.ПолучитьНастройки();
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("Данные", ИсходныеДанные));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
	
	ДанныеКлассификатора = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ДанныеКлассификатора.Колонки.Найти("СистемныеПоляНомерПоПорядку").Имя = "НомерСтроки";
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ДополнитьСхемуКомпоновкиДаннымиОКПД2(Схема) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Классификатор.Код     КАК КодОКПД2,
	|	Классификатор.Ссылка  КАК ОКПД2
	|ИЗ
	|	#КлассификаторОКПД2 КАК Классификатор
	|";
	
	ИмяТаблицыОКПД2 = ОбщегоНазначения.ИмяТаблицыПоСсылке(Метаданные.ОпределяемыеТипы.КлассификаторОКПД2.Тип.ПривестиЗначение());
	Схема.НаборыДанных.ОКПД2.Запрос =  СтрЗаменить(ТекстЗапроса, "#КлассификаторОКПД2", ИмяТаблицыОКПД2);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных КТРУ из файла

Функция ЗагрузитьПолученныеДанныеКлассификатора(Параметры)
	
	ДанныеКлассификатора             = Параметры.ДанныеКлассификатора;
	ДанныеДочернихКлассификаторов    = Параметры.ДополнительныеДанные.ДанныеДочернихКлассификаторов;
	
	РезультатЗагрузкиДочернихКлассификаторов = ЗагрузитьДанныеДочернихКлассификаторовИзДополнительныхИсточников(ДанныеКлассификатора, ДанныеДочернихКлассификаторов);
	
	Обработан = РезультатЗагрузкиДочернихКлассификаторов.Ошибки.Количество() = 0;
	Если Не Обработан Тогда
		РезультатЗагрузкиКлассификатора = Новый Структура("Ошибки", РезультатЗагрузкиДочернихКлассификаторов.Ошибки);
		Возврат РезультатЗагрузкиКлассификатора;
	КонецЕсли;
	
	// Загрузка данных КТРУ.
	РезультатЗагрузкиКлассификатора = ЗагрузитьКТРУ(ДанныеКлассификатора, РезультатЗагрузкиДочернихКлассификаторов.Объекты);
	
	Возврат РезультатЗагрузкиКлассификатора;
	
КонецФункции

Функция ЗагрузитьДанныеДочернихКлассификаторовИзДополнительныхИсточников(ДанныеКлассификатора, ДанныеДочернихКлассификаторов)
	
	РезультатЗагрузкиДочернихКлассификаторов = Новый Структура("Создано, Обновлено, Ошибки, Объекты", 0, 0, Новый Массив, Новый Соответствие);
	
	КлассификаторКТРУПереопределяемый.ЗагрузитьДанныеДочернихКлассификаторовИзДополнительныхИсточников(ДанныеКлассификатора, ДанныеДочернихКлассификаторов, РезультатЗагрузкиДочернихКлассификаторов);
	
	Возврат РезультатЗагрузкиДочернихКлассификаторов;
	
КонецФункции

Функция ЗагрузитьКТРУ(ДанныеКлассификатора, ДанныеЗагруженыхДочернихКлассификаторов)
	
	Результат = Новый Структура("Создано, Обновлено, Отменено, Ошибки, Объекты", 0, 0, 0, Новый Массив, Новый Соответствие);
	
	ЗначенияЛогическогоТипа = Новый Массив;
	ЗначенияЛогическогоТипа.Добавить("да");
	ЗначенияЛогическогоТипа.Добавить("есть");
	ЗначенияЛогическогоТипа.Добавить("нет");
	
	Для Каждого Элемент Из ДанныеКлассификатора Цикл
		
		Если Элемент.Отменен Тогда
			ЗагрузитьОтменуКТРУ(Элемент, Результат);
		Иначе
			ЗагрузитьЭлементКТРУ(Элемент, ДанныеЗагруженыхДочернихКлассификаторов, ЗначенияЛогическогоТипа, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьОтменуКТРУ(ОписаниеОтмены, Результат)
	
	Если ОписаниеОтмены.КТРУ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектКТРУ = ОписаниеОтмены.КТРУ.ПолучитьОбъект();
		КлассификаторКТРУ.ЗаблокироватьОбъект(ОбъектКТРУ);
		ОбъектКТРУ.Отменен       = ОписаниеОтмены.Отменен;
		ОбъектКТРУ.ДатаОтмены    = ОписаниеОтмены.ДатаИзменений;
		ОбъектКТРУ.ПричинаОтмены = ОписаниеОтмены.ПричинаОтмены;
		ОбъектКТРУ.Записать();
		ОбъектКТРУ.Разблокировать();
		
		Результат.Отменено = Результат.Отменено + 1;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'КТРУ.Загрузка отмены КТРУ'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать отмену КТРУ ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ОписаниеОтмены.Код);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстЖурналаРегистрации   = ТекстЖурналаРегистрации + Символы.ПС + ОписаниеОтмены.ДатаИзменений + Символы.ПС + ПреобразоватьЗначениеВJSON(ОписаниеОтмены.Данные);
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.КТРУ,, ТекстЖурналаРегистрации);
		
		Результат.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементКТРУ(ОписаниеЭлемента, ДанныеЗагруженыхДочернихКлассификаторов, ЗначенияЛогическогоТипа, Результат)
	
	НачатьТранзакцию();
	Попытка
		
		РезультатЗаписиКТРУ = НайтиСоздатьОбновитьКТРУ(ОписаниеЭлемента, ДанныеЗагруженыхДочернихКлассификаторов);
		
		ОписанияХарактеристикИзФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента.Данные, "chrs");
		Если ОписанияХарактеристикИзФайла = Неопределено Тогда
			// Обратная совместимость.
			ОписанияХарактеристикИзФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента.Данные, "characteristics");
		КонецЕсли;
		Если ОписанияХарактеристикИзФайла <> Неопределено Тогда
			
			Для Каждого ОписаниеХарактеристикиИзФайла Из ОписанияХарактеристикИзФайла Цикл
				
				ОписаниеХарактеристики = КонвертироватьОписаниеХарактеристики(ОписаниеХарактеристикиИзФайла, ЗначенияЛогическогоТипа);
				
				РезультатЗаписиХарактеристики = НайтиСоздатьОбновитьХарактеристикуКТРУ(ОписаниеХарактеристики, РезультатЗаписиКТРУ);
				
				НайтиСоздатьОбновитьЗначенияХарактеристикиКТРУ(ОписаниеХарактеристики.ОписанияЗначенийХарактеристики, РезультатЗаписиХарактеристики);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если РезультатЗаписиКТРУ.ЭтоНовый Тогда
			Результат.Создано = Результат.Создано + 1;
		Иначе
			Результат.Обновлено = Результат.Обновлено + 1;
		КонецЕсли;
		Результат.Объекты.Вставить(ОписаниеЭлемента.Код, РезультатЗаписиКТРУ.КТРУ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'КТРУ.Загрузка КТРУ'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать КТРУ ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ОписаниеЭлемента.Код);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстЖурналаРегистрации   = ТекстЖурналаРегистрации + Символы.ПС + ОписаниеЭлемента.ДатаИзменений + Символы.ПС + ПреобразоватьЗначениеВJSON(ОписаниеЭлемента.Данные);
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.КТРУ,, ТекстЖурналаРегистрации);
		
		Результат.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиСоздатьОбновитьКТРУ(ОписаниеЭлемента, ДанныеЗагруженыхДочернихКлассификаторов)
	
	ЭтоНовый = ОписаниеЭлемента.КТРУ.Пустая();
	Если ЭтоНовый Тогда
		КТРУОбъект = Справочники.КТРУ.СоздатьЭлемент();
		КТРУОбъект.Код = ОписаниеЭлемента.Код;
	Иначе
		КТРУОбъект = ОписаниеЭлемента.КТРУ.ПолучитьОбъект();
		КлассификаторКТРУ.ЗаблокироватьОбъект(КТРУОбъект);
	КонецЕсли;
	
	КТРУОбъект.Наименование         = ОписаниеЭлемента.Наименование;
	КТРУОбъект.ПолноеНаименование   = ОписаниеЭлемента.ПолноеНаименование;
	КТРУОбъект.ОКПД2                = ОписаниеЭлемента.ОКПД2;
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента.КодРодителя) Тогда
		КТРУОбъект.Родитель = Справочники.КТРУ.НайтиПоКоду(ОписаниеЭлемента.КодРодителя);
	КонецЕсли;
	
	КТРУОбъект.Версия               = ОписаниеЭлемента.Данные.Version;
	КТРУОбъект.Групповой            = ОписаниеЭлемента.Групповой;
	
	ДатаНачалаПрименения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента.Данные, "appStart");
	Если ДатаНачалаПрименения = Неопределено Тогда
		// Обратная совместимость.
		ДатаНачалаПрименения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента.Данные, "applicationDateStart");
	КонецЕсли;
	Если ДатаНачалаПрименения <> Неопределено Тогда
		КТРУОбъект.ДатаНачалаПрименения = ДатаНачалаПрименения;
	КонецЕсли;
	
	Описание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента.Данные, "nsiDesc");
	Если Описание = Неопределено Тогда
		// Обратная совместимость.
		Описание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента.Данные, "nsiDescription");
	КонецЕсли;
	Если Описание <> Неопределено Тогда
		КТРУОбъект.Описание = Описание;
	КонецЕсли;
	
	КлассификаторКТРУПереопределяемый.ЗаполнитьОбъектДаннымиДочернихКлассификаторов(КТРУОбъект, ОписаниеЭлемента.ДочерниеКлассификаторы, ДанныеЗагруженыхДочернихКлассификаторов);
	
	КТРУОбъект.Записать();
	КТРУОбъект.Разблокировать();
	
	Возврат Новый Структура("КТРУ, ЭтоНовый", КТРУОбъект.Ссылка, ЭтоНовый);
	
КонецФункции

Функция НайтиСоздатьОбновитьХарактеристикуКТРУ(ОписаниеХарактеристики, РезультатЗаписиКТРУ)
	
	ЭтоНовый = РезультатЗаписиКТРУ.ЭтоНовый;
	Если Не ЭтоНовый Тогда
		ХарактеристикаСсылка = Справочники.ХарактеристикиКТРУ.НайтиПоРеквизиту("Реквизит", ОписаниеХарактеристики.Реквизит,, РезультатЗаписиКТРУ.КТРУ);
		ЭтоНовый = ХарактеристикаСсылка.Пустая();
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ХарактеристикаОбъект = Справочники.ХарактеристикиКТРУ.СоздатьЭлемент();
		ХарактеристикаОбъект.Владелец     = РезультатЗаписиКТРУ.КТРУ;
		ХарактеристикаОбъект.Реквизит     = ОписаниеХарактеристики.Реквизит;
		ХарактеристикаОбъект.Наименование = ОписаниеХарактеристики.Наименование;
	Иначе
		ХарактеристикаОбъект = ХарактеристикаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ХарактеристикаОбъект.Актуально              = ОписаниеХарактеристики.Актуально;
	ХарактеристикаОбъект.ВидХарактеристики      = ОписаниеХарактеристики.ВидХарактеристики;
	ХарактеристикаОбъект.ОбязательноКПрименению = ОписаниеХарактеристики.ОбязательноКПрименению;
	ХарактеристикаОбъект.ТипЗначений            = ОписаниеХарактеристики.ТипЗначений;
	ХарактеристикаОбъект.ЕдиницаИзмерения       = ОписаниеХарактеристики.ЕдиницаИзмерения;
	
	ХарактеристикаОбъект.Записать();
	
	Возврат Новый Структура("ХарактеристикаКТРУ, ЭтоНовый", ХарактеристикаОбъект.Ссылка, ЭтоНовый);
	
КонецФункции

Процедура НайтиСоздатьОбновитьЗначенияХарактеристикиКТРУ(ОписанияЗначенийХарактеристики, РезультатЗаписиХарактеристики)
	
	Если РезультатЗаписиХарактеристики.ЭтоНовый Тогда
		
		ЗначенияХарактеристики = Новый ТаблицаЗначений;
		ЗначенияХарактеристики.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиКТРУ"));
		ЗначенияХарактеристики.Колонки.Добавить("Ссылка"  , Новый ОписаниеТипов("СправочникСсылка.ЗначенияХарактеристикКТРУ"));
		ЗначенияХарактеристики.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.РеквизитыКТРУ"));
		ЗначенияХарактеристики.Колонки.Добавить("Значение");
		ЗначенияХарактеристики.Колонки.Добавить("МинимальноеЗначение");
		ЗначенияХарактеристики.Колонки.Добавить("МаксимальноеЗначение");
		ЗначенияХарактеристики.Колонки.Добавить("ВключаяМинимальноеЗначение"  , Новый ОписаниеТипов("Булево"));
		ЗначенияХарактеристики.Колонки.Добавить("ВключаяМаксимальноеЗначение" , Новый ОписаниеТипов("Булево"));
		ЗначенияХарактеристики.Колонки.Добавить("ПометкаУдаления"             , Новый ОписаниеТипов("Булево"));
		ЗначенияХарактеристики.Колонки.Добавить("ОтсутствуетВНовыхДанных"     , Новый ОписаниеТипов("Булево"));
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗначенияХарактеристик.Владелец                      КАК Владелец,
		|	ЗначенияХарактеристик.Ссылка                        КАК Ссылка,
		|	ЗначенияХарактеристик.Реквизит                      КАК Реквизит,
		|	ЗначенияХарактеристик.Значение                      КАК Значение,
		|	ЗначенияХарактеристик.МинимальноеЗначение           КАК МинимальноеЗначение,
		|	ЗначенияХарактеристик.МаксимальноеЗначение          КАК МаксимальноеЗначение,
		|	ЗначенияХарактеристик.ВключаяМинимальноеЗначение    КАК ВключаяМинимальноеЗначение,
		|	ЗначенияХарактеристик.ВключаяМаксимальноеЗначение   КАК ВключаяМаксимальноеЗначение,
		|	ЗначенияХарактеристик.ПометкаУдаления               КАК ПометкаУдаления,
		|	ИСТИНА                                              КАК ОтсутствуетВНовыхДанных
		|ИЗ
		|	Справочник.ЗначенияХарактеристикКТРУ КАК ЗначенияХарактеристик
		|ГДЕ
		|	ЗначенияХарактеристик.Владелец = &ХарактеристикаКТРУ
		|");
		Запрос.УстановитьПараметр("ХарактеристикаКТРУ", РезультатЗаписиХарактеристики.ХарактеристикаКТРУ);
		ЗначенияХарактеристики = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого ОписаниеЗначенияХарактеристики Из ОписанияЗначенийХарактеристики Цикл
		
		ЭтоНовый = Истина;
		Для Каждого ЗначениеХарактеристики Из ЗначенияХарактеристики Цикл
			
			ЭтоНовый = Ложь;
			Для Каждого КлючЗначение Из ОписаниеЗначенияХарактеристики Цикл
				Если КлючЗначение.Значение <> ЗначениеХарактеристики[КлючЗначение.Ключ] Тогда
					ЭтоНовый = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЭтоНовый Тогда
				ЗначениеХарактеристики.ОтсутствуетВНовыхДанных = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоНовый Тогда
			
			ЗначениеОбъект = Справочники.ЗначенияХарактеристикКТРУ.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЗначениеОбъект, ОписаниеЗначенияХарактеристики);
			ЗначениеОбъект.Владелец = РезультатЗаписиХарактеристики.ХарактеристикаКТРУ;
			ЗначениеОбъект.Записать();
			
			ЗаполнитьЗначенияСвойств(ЗначенияХарактеристики.Добавить(), ЗначениеОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗначениеХарактеристики Из ЗначенияХарактеристики Цикл
		НоваяПометкаУдаления = ЗначениеХарактеристики.ОтсутствуетВНовыхДанных = Истина;
		Если ЗначениеХарактеристики.ПометкаУдаления <> НоваяПометкаУдаления Тогда
			ЗначениеХарактеристики.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(НоваяПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КонвертироватьОписаниеХарактеристики(ОписаниеХарактеристикиИзФайла, ЗначенияЛогическогоТипа)
	
	ПризнакЧисловойХарактеристики = 2; 
	
	НаименованиеХарактеристики = ОписаниеХарактеристикиИзФайла[0];
	ЧисловаяХарактеристика     = ОписаниеХарактеристикиИзФайла[2] = ПризнакЧисловойХарактеристики;
	
	ОписаниеХарактеристики = Новый Структура;
	ОписаниеХарактеристики.Вставить("Наименование"              , НаименованиеХарактеристики);
	ОписаниеХарактеристики.Вставить("Актуально"                 , ОписаниеХарактеристикиИзФайла[4] = 1);
	ОписаниеХарактеристики.Вставить("ВидХарактеристики"         , Перечисления.ВидыХарактеристикКТРУ[ОписаниеХарактеристикиИзФайла[3] - 1]);
	ОписаниеХарактеристики.Вставить("ОбязательноКПрименению"    , ОписаниеХарактеристикиИзФайла[5] = 1);
	ОписаниеХарактеристики.Вставить("ТипЗначений"               , Неопределено);
	ОписаниеХарактеристики.Вставить("ЕдиницаИзмерения"          , Неопределено);
	ОписаниеХарактеристики.Вставить("Реквизит"                  , Неопределено);
	ОписаниеХарактеристики.Вставить("ОписанияЗначенийХарактеристики", Новый Массив);
	
	Если ЧисловаяХарактеристика Тогда
		
		ОписанияЗначенийХарактеристикиИзФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеХарактеристикиИзФайла[6], "rangeSet");
		Если ОписанияЗначенийХарактеристикиИзФайла <> Неопределено Тогда
			
			ОписаниеРеквизитаКТРУ = Новый Структура;
			ОписаниеРеквизитаКТРУ.Вставить("Наименование", НаименованиеХарактеристики);
			ОписаниеРеквизитаКТРУ.Вставить("ТипЗначения" , ОбщегоНазначения.ОписаниеТипаЧисло(18, 0, ДопустимыйЗнак.Любой));
			
			ОписаниеХарактеристики.Реквизит = НайтиСоздатьРеквизитКТРУ(ОписаниеРеквизитаКТРУ);
			
			ОписаниеХарактеристики.ТипЗначений      = Перечисления.ТипыЗначенийХарактеристикиКТРУ.Диапазон;
			ОписаниеХарактеристики.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмеренияКТРУ(ОписанияЗначенийХарактеристикиИзФайла[0][0]);
			
			Для Каждого ОписаниеЗначенияХарактеристикиИзФайла Из ОписанияЗначенийХарактеристикиИзФайла Цикл
				
				ОписаниеЗначенияХарактеристики = Новый Структура;
				ОписаниеЗначенияХарактеристики.Вставить("Реквизит"                    , ОписаниеХарактеристики.Реквизит);
				ОписаниеЗначенияХарактеристики.Вставить("ВключаяМинимальноеЗначение", ОписаниеЗначенияХарактеристикиИзФайла[1] % 2 = 0);
				ОписаниеЗначенияХарактеристики.Вставить("МинимальноеЗначение"         , ОписаниеЗначенияХарактеристикиИзФайла[2]);
				ОписаниеЗначенияХарактеристики.Вставить("ВключаяМаксимальноеЗначение" , ОписаниеЗначенияХарактеристикиИзФайла[3] % 2 = 0);
				ОписаниеЗначенияХарактеристики.Вставить("МаксимальноеЗначение"        , ОписаниеЗначенияХарактеристикиИзФайла[4]);
				ОписаниеХарактеристики.ОписанияЗначенийХарактеристики.Добавить(ОписаниеЗначенияХарактеристики);
				
			КонецЦикла;
			
		Иначе
			
			ОписанияЗначенийХарактеристикиИзФайла = ОписаниеХарактеристикиИзФайла[6].valueSet;
			
			ОписаниеРеквизитаКТРУ = Новый Структура;
			ОписаниеРеквизитаКТРУ.Вставить("Наименование", НаименованиеХарактеристики);
			ОписаниеРеквизитаКТРУ.Вставить("ТипЗначения" , ОбщегоНазначения.ОписаниеТипаЧисло(18, 0, ДопустимыйЗнак.Любой));
			
			ОписаниеХарактеристики.Реквизит = НайтиСоздатьРеквизитКТРУ(ОписаниеРеквизитаКТРУ);
			
			ОписаниеХарактеристики.ТипЗначений      = Перечисления.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение;
			ОписаниеХарактеристики.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмеренияКТРУ(ОписанияЗначенийХарактеристикиИзФайла[0]);
			
			Для Каждого ОписаниеЗначенияХарактеристикиИзФайла Из ОписанияЗначенийХарактеристикиИзФайла Цикл
				
				ОписаниеЗначенияХарактеристики = Новый Структура;
				ОписаниеЗначенияХарактеристики.Вставить("Реквизит", ОписаниеХарактеристики.Реквизит);
				ОписаниеЗначенияХарактеристики.Вставить("Значение", ОписаниеЗначенияХарактеристикиИзФайла);
				ОписаниеХарактеристики.ОписанияЗначенийХарактеристики.Добавить(ОписаниеЗначенияХарактеристики);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ОписанияЗначенийХарактеристикиИзФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеХарактеристикиИзФайла[6], "qDesc");
		Если ОписанияЗначенийХарактеристикиИзФайла = Неопределено Тогда
			// Обратная совместимость.
			ОписанияЗначенийХарактеристикиИзФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеХарактеристикиИзФайла[6], "qualityDescription");
		КонецЕсли;
		
		ОписаниеРеквизитаКТРУ = Новый Структура;
		ОписаниеРеквизитаКТРУ.Вставить("Наименование", НаименованиеХарактеристики);
		Если ЗначенияЛогическогоТипа.Найти(ОписанияЗначенийХарактеристикиИзФайла[0]) = Неопределено Тогда
			ОписаниеРеквизитаКТРУ.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.ЗначенияРеквизитовКТРУ"));
		Иначе
			ОписаниеРеквизитаКТРУ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		ОписаниеХарактеристики.Реквизит = НайтиСоздатьРеквизитКТРУ(ОписаниеРеквизитаКТРУ);
		
		ОписаниеХарактеристики.ТипЗначений = Перечисления.ТипыЗначенийХарактеристикиКТРУ.ФиксированноеЗначение;
		
		Для Каждого ОписаниеЗначенияХарактеристикиИзФайла Из ОписанияЗначенийХарактеристикиИзФайла Цикл
			
			Значение = СокрЛП(ОписаниеЗначенияХарактеристикиИзФайла);
			Значение = ?(ЗначенияЛогическогоТипа.Найти(Значение) = Неопределено, Значение, Значение <> "нет");
			
			Если ТипЗнч(Значение) <> Тип("Булево") Тогда
				
				ОписаниеЗначенияРеквизитаКТРУ = Новый Структура;
				ОписаниеЗначенияРеквизитаКТРУ.Вставить("Наименование"      , Значение);
				ОписаниеЗначенияРеквизитаКТРУ.Вставить("НаименованиеПолное", Значение);
				ОписаниеЗначенияРеквизитаКТРУ.Вставить("Владелец"          , ОписаниеХарактеристики.Реквизит);
				
				Значение = НайтиСоздатьЗначенияРеквизитаКТРУ(ОписаниеЗначенияРеквизитаКТРУ);
				
			КонецЕсли;
			
			ОписаниеЗначенияХарактеристики = Новый Структура;
			ОписаниеЗначенияХарактеристики.Вставить("Реквизит", ОписаниеХарактеристики.Реквизит);
			ОписаниеЗначенияХарактеристики.Вставить("Значение", Значение);
			ОписаниеХарактеристики.ОписанияЗначенийХарактеристики.Добавить(ОписаниеЗначенияХарактеристики);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеХарактеристики;
	
КонецФункции

Функция НайтиСоздатьРеквизитКТРУ(ОписаниеРеквизитаКТРУ)
	
	РеквизитКТРУ = ПланыВидовХарактеристик.РеквизитыКТРУ.НайтиПоНаименованию(ОписаниеРеквизитаКТРУ.Наименование, Истина);
	Если РеквизитКТРУ.Пустая() Тогда
		
		РеквизитОбъект = ПланыВидовХарактеристик.РеквизитыКТРУ.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(РеквизитОбъект, ОписаниеРеквизитаКТРУ);
		
		РеквизитОбъект.Записать();
		РеквизитКТРУ = РеквизитОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат РеквизитКТРУ;
	
КонецФункции

Функция НайтиСоздатьЗначенияРеквизитаКТРУ(ОписаниеЗначенияРеквизитаКТРУ)
	
	ЗначениеСсылка = Справочники.ЗначенияРеквизитовКТРУ.НайтиПоНаименованию(ОписаниеЗначенияРеквизитаКТРУ.Наименование, Истина,, ОписаниеЗначенияРеквизитаКТРУ.Владелец);
	Если ЗначениеСсылка.Пустая() Тогда
		
		ЗначениеОбъект = Справочники.ЗначенияРеквизитовКТРУ.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ЗначениеОбъект, ОписаниеЗначенияРеквизитаКТРУ);
		
		ЗначениеОбъект.Записать();
		ЗначениеСсылка = ЗначениеОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат ЗначениеСсылка;
	
КонецФункции

Функция НайтиСоздатьЕдиницуИзмеренияКТРУ(КодЕдиницыИзмерения)
	
	Возврат КлассификаторКТРУ.НайтиСоздатьЕдиницуИзмеренияКТРУ(КодЕдиницыИзмерения, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ИзвлечьФайлыИзАрхива(ИсходныеДанные, КаталогИзвлечения)
	
	ПотокZip = ИсходныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(ПотокZip);
	
	ЧтениеZip.ИзвлечьВсе(КаталогИзвлечения, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ЧтениеZip.Закрыть();
	ПотокZip.Закрыть();
	
	НайденныеФайлы = НайтиФайлы(КаталогИзвлечения, "*.zip");
	Если НайденныеФайлы.Количество() > 0 Тогда
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			
			ЧтениеZip = Новый ЧтениеZipФайла(НайденныйФайл.ПолноеИмя);
			ЧтениеZip.ИзвлечьВсе(КаталогИзвлечения, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ЧтениеZip.Закрыть();
			
			ФайловаяСистема.УдалитьВременныйФайл(НайденныйФайл.ПолноеИмя);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФайлыКлассификатора(КаталогФайлов, ДатыПоследнейЗагрузки = Неопределено)
	
	Файлы = Новый ТаблицаЗначений;
	Файлы.Колонки.Добавить("Файл"    , Новый ОписаниеТипов("Файл"));
	Файлы.Колонки.Добавить("КодОКПД2", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Файлы.Колонки.Добавить("Дата"    , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	НайденныеФайлы = НайтиФайлы(КаталогФайлов, "*.json");
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		КодОКПД2      = ПолучитьЗагружаемыйКодОКПД2(НайденныйФайл.ИмяБезРасширения);
		ДатаИзменений = ПолучитьДатуИзмененияКТРУ(НайденныйФайл.ИмяБезРасширения);
		
		Если ДатыПоследнейЗагрузки <> Неопределено Тогда
			ДатаПоследнейЗагрузки = ДатыПоследнейЗагрузки.Получить(КодОКПД2);
			Если ДатаПоследнейЗагрузки <> Неопределено И ДатаПоследнейЗагрузки >= ДатаИзменений Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МетаданныеФайла = Файлы.Добавить();
		МетаданныеФайла.Файл     = НайденныйФайл;
		МетаданныеФайла.КодОКПД2 = КодОКПД2;
		МетаданныеФайла.Дата     = ДатаИзменений;
		
	КонецЦикла;
	
	Если Файлы.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для обработки.'");
	КонецЕсли;
	
	Файлы.Сортировать("Дата");
	
	Возврат Файлы;
	
КонецФункции

Функция ПолучитьЗагружаемыйКодОКПД2(ИмяФайла)
	
	Возврат СтрЗаменить(Лев(ИмяФайла, СтрНайти(ИмяФайла, "_", НаправлениеПоиска.СКонца) - 1), "_", ".");
	
КонецФункции

Функция ПолучитьДатуИзмененияКТРУ(ИмяФайла)
	
	Попытка
		Возврат Дата(Прав(ИмяФайла, 8));
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
КонецФункции

Функция ПреобразоватьJSONВЗначение(Файл)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(Файл.ПолноеИмя);
	
	Значение = ПрочитатьJSON(Чтение, Ложь);
	
	Возврат Значение;
	
КонецФункции

Функция ПреобразоватьЗначениеВJSON(Значение, НастройкиСериализации = Неопределено)
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Значение, НастройкиСериализации);
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ЭтоФайлКТРУ(Файл)
	
	ИмяБезРазделителей = СтрЗаменить(ВРег(Файл.ИмяБезРасширения), "_", "");
	Возврат СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИмяБезРазделителей);
	
КонецФункции

Функция ЭтоФайлОКПД2(Файл)
	
	Возврат СтрНачинаетсяС(ВРег(Файл.ИмяБезРасширения), ВРег("okpd2"));
	
КонецФункции

Функция ЭтоФайлРубрикатор(Файл)
	
	Возврат СтрНачинаетсяС(ВРег(Файл.ИмяБезРасширения), ВРег("rubricator"));
	
КонецФункции

Функция КодОКПД2ВсеЭлементы() Экспорт
	
	Возврат "**.**.**.***";
	
КонецФункции

#КонецОбласти

#КонецЕсли