#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		ИсточникДанных = ИсточникДанных_ФайловаяСистема();
		Элементы.ИсточникДанных.Видимость = Ложь;
	Иначе
		ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки();
	КонецЕсли;
	ПриИзмененииИсточникаДанных();
	
	РазмерПорции = 20;
	
	Схема = Справочники.КТРУ.ПолучитьМакет("СхемаПолученияДанныхИзФайла");
	Справочники.КТРУ.ДополнитьСхемуКомпоновкиДаннымиОКПД2(Схема);
	
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	КлассификаторКТРУПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		ИсточникДанных = ИсточникДанных_ФайловаяСистема();
		Элементы.ИсточникДанных.Видимость = Ложь;
	КонецЕсли;
	ПриИзмененииИсточникаДанных();
	
	Если Классификатор.Количество() > 0 Тогда
		ОтобразитьДанныеПоОтбору();
	КонецЕсли;
	
	КлассификаторКТРУПереопределяемый.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ПриИзмененииИсточникаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКДаннымНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачатьВыборФайлаДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
	Если Классификатор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьДанныеПоОтбору();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерПорцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РазмерПорции = ВыбранноеЗначение Или Классификатор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПорции = ВыбранноеЗначение;
	
	ПодключитьОбработчикОжидания("ОбновитьПорциюДанныхПоРазмеру", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераПорцийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовыйНомерПорции = Число(НавигационнаяСсылкаФорматированнойСтроки);
	Если ТекущийНомерПорции = НовыйНомерПорции Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьПорциюДанных(НовыйНомерПорции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКодыОКПД2

&НаКлиенте
Процедура РубрикаторПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтобразитьДанныеПоРубрикатору", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодыОКПД2ПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтобразитьДанныеПоОКПД2", 0.01, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКлассификатор

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКТРУ(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьКТРУ(Команда)
	
	Если ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки() Тогда
		ПолучитьДанныеКТРУ();
	ИначеЕсли ИсточникДанных = ИсточникДанных_ФайловаяСистема() Тогда
		// Всегда обновляем файл из файловой системы в АдресФайлаНаСервере, т.к. файл может измениться.
		НачатьВыборФайлаДанных(Не ЗначениеЗаполнено(ПутьКДанным));
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКТРУ(Команда)
	
	ВыделенныеСтроки = Элементы.Классификатор.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеКТРУ(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	КлассификаторКТРУКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение файла КТРУ
#Область ПолучениеФайлаКТРУ

&НаКлиенте
Процедура НачатьВыборФайлаДанных(Интерактивно = Истина)
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Интерактивно = Интерактивно;
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = '*.zip|*.zip'");
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Файл классификатора'");
	ПараметрыЗагрузки.Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьВыборФайлаДанных", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповестить, ПараметрыЗагрузки, ПутьКДанным, АдресФайлаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаДанных(ПомещенныйФайл, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайлаНаСервере = ПомещенныйФайл.Хранение;
	ПутьКДанным         = ПомещенныйФайл.Имя;
	
	ПолучитьДанныеКТРУ();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Получение данных КТРУ
#Область ПолучениеДанныхКТРУ

&НаКлиенте
Процедура ПолучитьДанныеКТРУ()
	
	ОчиститьСообщения();
	
	ТекущийКодОКПД2   = Неопределено;
	ТекущийКодРубрики = Неопределено;
	
	ОтобразитьИнформациюПользователю("НачалоРаботыСДанными");
	
	ПодключитьОбработчикОжидания("ПолучитьДанныеКТРУОтложенно", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеКТРУОтложенно()
	
	РезультатПолученияАдреса = ПолучитьАдресДанныхКлассификатораНаСервере();
	АдресДанныхКлассификатора = РезультатПолученияАдреса.АдресДанныхКлассификатора;
	Если Не ЭтоАдресВременногоХранилища(АдресДанныхКлассификатора) Тогда
		ОтобразитьИнформациюПользователю("АдресДанныхКлассификатораНаСервереНеПолучен", РезультатПолученияАдреса.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьДанныеКТРУВФоне(АдресДанныхКлассификатора);
	
	НачатьОжиданиеПолученияКТРУ(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДанныхКлассификатораНаСервере()
	
	Если ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки() Тогда
		
		Возврат Справочники.КТРУ.ПолучитьФайлКлассификатораИзСервисаИнтернетПоддержки(УникальныйИдентификатор);
		
	ИначеЕсли ИсточникДанных = ИсточникДанных_ФайловаяСистема() Тогда
		
		РезультатПолученияАдреса = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
		
		Если Не ЭтоАдресВременногоХранилища(АдресФайлаНаСервере) Тогда
			РезультатПолученияАдреса.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить файл из файловой системы.'");
			Возврат РезультатПолученияАдреса;
		КонецЕсли;
		
		ОписаниеДанныхКлассификатора = Новый Структура;
		ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(АдресФайлаНаСервере));
		ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", ВРег(Сред(ПутьКДанным, СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца) + 1)));
		
		РезультатПолученияАдреса.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
		
		Возврат РезультатПолученияАдреса;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных КТРУ в фоне

&НаСервере
Функция ПолучитьДанныеКТРУВФоне(Знач АдресДанныхКлассификатора)
	
	ПараметрыПроцедуры = ПолучитьИзВременногоХранилища(АдресДанныхКлассификатора);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение классификатора.'");
	
	ИмяПроцедуры = "Справочники.КТРУ.ПолучитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеПолученияКТРУ(ДлительнаяОперация)
	
	ОтобразитьИнформациюПользователю("ОжиданиеПолученияДанныхИзФайла");
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьОжиданиеПолученияКТРУ", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОжиданиеПолученияКТРУ(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗакончитьОжиданиеПолученияКТРУНаСервере(РезультатДлительнойОперации.АдресРезультата);
		ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	Исключение
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОжиданиеПолученияКТРУНаСервере(Знач АдресРезультата)
	
	РезультатПолучения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	АдресИсходныхДанных = ПоместитьВоВременноеХранилище(РезультатПолучения.ДанныеКлассификатора, УникальныйИдентификатор);
	АдресДополнительныхДанных = ПоместитьВоВременноеХранилище(РезультатПолучения.ДополнительныеДанные, УникальныйИдентификатор);
	
	ЗаполнитьТаблицуРубрикатор(РезультатПолучения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРубрикатор(РезультатПолучения)
	
	ДанныеРубрикатора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолучения.ДополнительныеДанные, "ДанныеРубрикатора");
	Если Не ЗначениеЗаполнено(ДанныеРубрикатора) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДанныеРубрикатора, "Рубрикатор");
	
	Элементы.Рубрикатор.ТекущаяСтрока = Рубрикатор[0].ПолучитьИдентификатор(); // Возникает событие РубрикаторПриАктивизацииСтроки.
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных КТРУ
#Область ЗагрузкаДанныхКТРУ

&НаКлиенте
Процедура ЗагрузитьДанныеКТРУ(ИдентификаторыСтрок)
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОКПД2 = Элементы.КодыОКПД2.ТекущиеДанные;
	КоличествоКТРУКЗагрузке = ИдентификаторыСтрок.Количество();
	Если СтрокаОКПД2 = Неопределено
	 Или КоличествоКТРУКЗагрузке = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодыКТРУКЗагрузке = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ОКПД2) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КодыКТРУКЗагрузке.Найти(ДанныеСтроки.Код) = Неопределено Тогда
			КодыКТРУКЗагрузке.Добавить(ДанныеСтроки.Код);
		КонецЕсли;
		
		Если КодыКТРУКЗагрузке.Найти(ДанныеСтроки.КодРодителя) = Неопределено Тогда
			КодыКТРУКЗагрузке.Добавить(ДанныеСтроки.КодРодителя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(КодыКТРУКЗагрузке) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДляОткрытия = ?(КоличествоКТРУКЗагрузке = 1, ИдентификаторСтроки, Неопределено);
	
	ДлительнаяОперация = ЗагрузитьДанныеКТРУВФоне(КодыКТРУКЗагрузке);
	
	НачатьОжиданиеЗагрузкиКТРУ(ДлительнаяОперация, ИдентификаторДляОткрытия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных КТРУ в фоне

&НаСервере
Функция ЗагрузитьДанныеКТРУВФоне(Знач КодыКТРУКЗагрузке)
	
	ДанныеПоОКПД = ПолучитьИзВременногоХранилища(АдресИсходныхДанныхПоОКПД);
	
	ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Код", ВидСравненияКомпоновкиДанных.ВСписке, КодыКТРУКЗагрузке);
	ДанныеКлассификатора = Справочники.КТРУ.СопоставитьЗагружаемыеДанные(ДанныеПоОКПД,, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор));
	
	ДополнительныеДанные = ПолучитьИзВременногоХранилища(АдресДополнительныхДанных);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
	ПараметрыПроцедуры.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка классификатора.'");
	
	ИмяПроцедуры = "Справочники.КТРУ.ЗагрузитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеЗагрузкиКТРУ(ДлительнаяОперация, ИдентификаторДляОткрытия)
	
	ОтобразитьИнформациюПользователю("ОжиданиеЗагрузкиДанныхИзФайла");
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьОжиданиеЗагрузкиКТРУ", ЭтотОбъект, ИдентификаторДляОткрытия);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОжиданиеЗагрузкиКТРУ(РезультатДлительнойОперации, ИдентификаторДляОткрытия) Экспорт
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(РезультатДлительнойОперации.АдресРезультата);
	
	Если РезультатЗагрузки.Ошибки.Количество() > 0 Тогда
		Для Каждого Ошибка Из РезультатЗагрузки.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.КодыОКПД2.ТекущиеДанные;
	Если ТекущиеДанные.КодОКПД2 = ТекущийКодОКПД2 Тогда
		
		ЗакончитьОжиданиеЗагрузкиКТРУНаСервере(РезультатЗагрузки.Объекты);
		
		Если ИдентификаторДляОткрытия <> Неопределено Тогда
			ДанныеСтроки = Классификатор.НайтиПоИдентификатору(ИдентификаторДляОткрытия);
			Если ДанныеСтроки <> Неопределено И ЗначениеЗаполнено(ДанныеСтроки.КТРУ) Тогда
				ПоказатьЗначение(, ДанныеСтроки.КТРУ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Пояснения = Новый Массив;
	Если РезультатЗагрузки.Создано > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Создано: [Создано]'"));
	КонецЕсли;
	
	Если РезультатЗагрузки.Обновлено > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обновлено: [Обновлено]'"));
	КонецЕсли;
	
	Если РезультатЗагрузки.Отменено > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Отменено: [Отменено]'"));
	КонецЕсли;
	
	Если Пояснения.Количество() = 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обработано: 0'"));
	КонецЕсли;
	
	Пояснение = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(СтрСоединить(Пояснения, Символы.ПС), РезультатЗагрузки);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Данные обработаны'"),, Пояснение, БиблиотекаКартинок.Информация32);
	
	ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.КТРУ"));
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗначенияРеквизитовКТРУ"));
	ОповеститьОбИзменении(Тип("СправочникСсылка.ХарактеристикиКТРУ"));
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗначенияХарактеристикКТРУ"));
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОжиданиеЗагрузкиКТРУНаСервере(ЗагруженныеКТРУ)
	
	ОтобранныеДанные = ПолучитьИзВременногоХранилища(АдресОтобранныхДанных);
	Для Каждого Элемент Из ОтобранныеДанные Цикл
		КТРУ = ЗагруженныеКТРУ.Получить(Элемент.Код);
		Если ЗначениеЗаполнено(КТРУ) Тогда
			Элемент.КТРУ = КТРУ;
		КонецЕсли;
	КонецЦикла;
	АдресОтобранныхДанных = ПоместитьВоВременноеХранилище(ОтобранныеДанные, УникальныйИдентификатор);
	
	Для Каждого Элемент Из Классификатор Цикл
		КТРУ = ЗагруженныеКТРУ.Получить(Элемент.Код);
		Если ЗначениеЗаполнено(КТРУ) Тогда
			Элемент.КТРУ = КТРУ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Отображение данных КТРУ по отбору
#Область ОтображениеДанныхКТРУПоОтбору

&НаКлиенте
Процедура ОтобразитьДанныеПоРубрикатору()
	
	ОтобразитьДанныеПоРубрикаторуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеПоРубрикаторуНаСервере()
	
	ТекущаяСтрока = Элементы.Рубрикатор.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Рубрикатор.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные.КодРубрики = ТекущийКодРубрики Тогда
		// Текущие данные могли не поменяться.
		Возврат;
	КонецЕсли;
	
	ТекущийКодРубрики = ТекущиеДанные.КодРубрики;
	
	ИсходныеДополнительныеДанные = ПолучитьИзВременногоХранилища(АдресДополнительныхДанных);
	ДанныеОКПД2 = ИсходныеДополнительныеДанные.ДанныеОКПД2;
	Если Не ЗначениеЗаполнено(ДанныеОКПД2) Тогда
		Возврат;
	КонецЕсли;
	
	НаборОКПД2 = ТекущиеДанные.НаборОКПД2;
	Если ЗначениеЗаполнено(НаборОКПД2) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ДанныеОКПД2
		|ИЗ
		|	&ДанныеОКПД2 КАК ДанныеОКПД2
		|ГДЕ
		|	ДанныеОКПД2.КодОКПД2 В (&КодыОКПД2Рубрикатора)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ДанныеОКПД2
		|");
		
		Запрос.УстановитьПараметр("ДанныеОКПД2", ДанныеОКПД2);
		Запрос.УстановитьПараметр("КодыОКПД2Рубрикатора", НаборОКПД2);
		
		ДанныеОКПД2ПоРубрикатору = Запрос.Выполнить().Выгрузить();
		Если Не ЗначениеЗаполнено(ДанныеОКПД2ПоРубрикатору) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ДанныеОКПД2ПоРубрикатору = ДанныеОКПД2;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДанныеОКПД2ПоРубрикатору, "КодыОКПД2");
	
	Если КодыОКПД2.Количество() > 0 Тогда
		Элементы.КодыОКПД2.ТекущаяСтрока = КодыОКПД2[0].ПолучитьИдентификатор(); // Возникает событие КодыОКПД2ПриАктивизацииСтроки.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеПоОКПД2()
	
	ТекущиеДанные = Элементы.КодыОКПД2.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.КодОКПД2 = ТекущийКодОКПД2 Тогда // Текущие данные могли не поменяться.
		Возврат;
	КонецЕсли;
	
	ТекущийКодОКПД2 = ТекущиеДанные.КодОКПД2;
	
	ОтобразитьДанныеПоОКПД2НаСервере(ТекущиеДанные.КодОКПД2);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеПоОКПД2НаСервере(Знач КодОКПД2)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресИсходныхДанных);
	
	Если КодОКПД2 <> Справочники.КТРУ.КодОКПД2ВсеЭлементы() Тогда
		ДанныеПоОКПД = ИсходныеДанные.Скопировать(Новый Структура("КодОКПД2", КодОКПД2));
	Иначе
		ДанныеПоОКПД = ИсходныеДанные;
	КонецЕсли;
	
	АдресИсходныхДанныхПоОКПД = ПоместитьВоВременноеХранилище(ДанныеПоОКПД, УникальныйИдентификатор);
	
	ОтобразитьДанныеПоОтбору();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеПоОтбору()
	
	ДанныеПоОКПД = ПолучитьИзВременногоХранилища(АдресИсходныхДанныхПоОКПД);
	
	Компоновщик.Восстановить();
	Настройки = Компоновщик.ПолучитьНастройки();
	
	ОтобранныеДанные = Справочники.КТРУ.СопоставитьЗагружаемыеДанные(ДанныеПоОКПД, Настройки);
	АдресОтобранныхДанных = ПоместитьВоВременноеХранилище(ОтобранныеДанные, УникальныйИдентификатор);
	
	ОтобразитьПорциюДанных(1);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вывод порций данных КТРУ
#Область ВыводПорцийДанныхКТРУ

&НаКлиенте
Процедура ОбновитьПорциюДанныхПоРазмеру()
	
	ОтобразитьПорциюДанных(1);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПорциюДанных(Знач НомерПорции)
	
	ОтобранныеДанные = ПолучитьИзВременногоХранилища(АдресОтобранныхДанных);
	КоличествоЭлементов = ОтобранныеДанные.Количество();
	
	НомераПорций = ПредставлениеНомеровПорций(КоличествоЭлементов, РазмерПорции, НомерПорции, 4);
	
	ПорцияДанных = ПолучитьПорциюДанных(ОтобранныеДанные, РазмерПорции, НомерПорции);
	
	ЗначениеВРеквизитФормы(ПорцияДанных, "Классификатор");
	
	ТекущийНомерПорции = НомерПорции;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНомеровПорций(КоличествоЭлементов, РазмерПорции, НомерПорции, КоличествоВидимыхПорцийСнизуСверху)
	
	КоэффициентОкругленияВБольшуюСторону = 0.5;
	КоэффициентРасчетаВидимыхПорций = 2;
	
	ВсегоПорций = Макс(Окр(КоличествоЭлементов / РазмерПорции + КоэффициентОкругленияВБольшуюСторону, 0, РежимОкругления.Окр15как10), 1);
	
	НижнийПредел  = Макс(Мин(НомерПорции + КоличествоВидимыхПорцийСнизуСверху, ВсегоПорций) - КоличествоВидимыхПорцийСнизуСверху * КоэффициентРасчетаВидимыхПорций, 1);
	ВерхнийПредел = Мин(Макс(НомерПорции - КоличествоВидимыхПорцийСнизуСверху, 1) + КоличествоВидимыхПорцийСнизуСверху * КоэффициентРасчетаВидимыхПорций, ВсегоПорций);
	
	СписокНомеровПорций = Новый Массив;
	Для Счетчик = 1 По ВсегоПорций Цикл
		
		Если Счетчик >= НижнийПредел И Счетчик <= ВерхнийПредел Тогда
			Шрифт = ?(Счетчик = НомерПорции, ШрифтыСтиля.ШрифтПолужирный12КТРУ, Неопределено);
			Содержимое = Новый ФорматированнаяСтрока(Строка(Счетчик) + " ", Шрифт,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = 1 Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В начало'"),,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = ВсегоПорций Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В конец'"),,,, Строка(Счетчик));
		Иначе
			Продолжить;
		КонецЕсли;
		
		СписокНомеровПорций.Добавить(Содержимое);
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(СписокНомеровПорций);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПорциюДанных(Таблица, РазмерПорции, НомерПорции)
	
	КоличествоЭлементов = Таблица.Количество();
	
	НижнийПредел  = Мин(РазмерПорции, КоличествоЭлементов) * (НомерПорции - 1);
	ВерхнийПредел = Мин(Мин(РазмерПорции, КоличествоЭлементов) * НомерПорции, КоличествоЭлементов);
	
	ПорцияДанных = Таблица.СкопироватьКолонки();
	Для Счетчик = НижнийПредел По ВерхнийПредел - 1 Цикл
		ЗаполнитьЗначенияСвойств(ПорцияДанных.Добавить(), Таблица[Счетчик]);
	КонецЦикла;
	
	Возврат ПорцияДанных;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Шрифт строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.КТРУ", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ШрифтПолужирныйКТРУ);
	
	// Цвет текста строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.Отменен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Цвет текста строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.ОКПД2", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Цвет текста строк таблицы КодыОКПД2.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КодыОКПД2.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"КодыОКПД2.ОКПД2", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнформациюПользователю(Вариант, Уточнение = "")
	
	Если Вариант = "НачалоРаботыСДанными" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		
	ИначеЕсли Вариант = "АдресДанныхКлассификатораНаСервереНеПолучен" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		Текст = НСтр("ru = 'Не удалось получить файл классификатора по причине:'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст + Символы.ПС + Уточнение);
		
	ИначеЕсли Вариант = "ДинамическаяОшибка" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Уточнение);
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	ИначеЕсли Вариант = "ОжиданиеПолученияДанныхИзФайла" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииПолучениеДанныхИхФайла;
		Элементы.ОсновнаяПанель.Доступность = Ложь;
		
	ИначеЕсли Вариант = "ВыборКлассификатора" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборКлассификатора;
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	ИначеЕсли Вариант = "ОжиданиеЗагрузкиДанныхИзФайла" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииЗагрузкиДанныхИхФайла;
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Некорректно указан вариант отображения информации пользователю.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсточникаДанных()
	
	ИсточникДанных_СервисИнтернетПоддержки = ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ПутьКДанным.Имя, "ТолькоПросмотр", ИсточникДанных_СервисИнтернетПоддержки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанных_СервисИнтернетПоддержки()
	
	Возврат "СервисИнтернетПоддержки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанных_ФайловаяСистема()
	
	Возврат "ФайловаяСистема";
	
КонецФункции

#КонецОбласти

#КонецОбласти
