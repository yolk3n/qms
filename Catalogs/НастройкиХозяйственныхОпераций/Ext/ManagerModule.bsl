#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает схему, по которой будут получаться данные, зависящие от хозяйственной операции.
//
// Параметры:
//  ХозяйственнаяОперация - СправочникСсылка.НастройкиХозяйственныхОпераций - настройки хозяйственной операции,
//                                                                            по которым определяется схема получения данных
//
// Возвращаемое значение:
//  СхемаПолученияДанных - СхемаКомпоновкиДанных
//
Функция СхемаПолученияДанных(ХозяйственнаяОперация) Экспорт
	
	СхемаПолученияДанных = Неопределено;
	ИмяИсточникаДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХозяйственнаяОперация, "ИсточникДанных");
	МакетыИсточниковПолученияДанных = Метаданные.Справочники.НастройкиХозяйственныхОпераций.Макеты;
	МакетИсточникаПолученияДанных = МакетыИсточниковПолученияДанных.Найти(ИмяИсточникаДанных);
	Если МакетИсточникаПолученияДанных <> Неопределено Тогда
		ИмяСхемы = МакетИсточникаПолученияДанных.Имя;
		СхемаПолученияДанных = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет(ИмяСхемы);
	КонецЕсли;
	
	Возврат СхемаПолученияДанных;
	
КонецФункции

// Возвращает доступные по функциональным опциям хозяйственные операции.
//
// Параметры:
//  ИдентификаторДокумента - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор документа,
//                           по которому выполняется отбор хозяйственных операций.
//  ИсключаемыеОперации    - Массив - хозяйственные операции типа ПеречислениеСсылка.ХозяйственныеОперации,
//                           которые не нужно включать в результат.
//
// Возвращаемое значение:
//  ДоступныеОперации - Массив - состоящий из ссылок на доступные хозяйственные операции
//                               типа ПеречислениеСсылка.ХозяйственныеОперации.
//
Функция ДоступныеХозяйственныеОперации(ИдентификаторДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоступныеОперации = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ФункциональныеОпцииХозопераций.ИмяФункциональнойОпции, """")  КАК ИмяФункциональнойОпции
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.НастройкиХозяйственныхОпераций.ФункциональныеОпции КАК ФункциональныеОпцииХозопераций
	|		ПО
	|			ФункциональныеОпцииХозопераций.Ссылка = НастройкиХозяйственныхОпераций.Ссылка
	|ГДЕ
	|	НЕ НастройкиХозяйственныхОпераций.ЭтоГруппа
	|УПОРЯДОЧИТЬ ПО
	|	ХозяйственнаяОперация
	|");
	
	Если ИдентификаторДокумента <> Неопределено Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Отбор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		
		Отбор.Добавить("НастройкиХозяйственныхОпераций.Документы.Документ = &Документ");
		Запрос.УстановитьПараметр("Документ", ИдентификаторДокумента);
		
		ИсключаемыеОперации = ИсключаемыеХозяйственныеОперацииДокумента(ИдентификаторДокумента);
		Если ИсключаемыеОперации.Количество() > 0 Тогда
			Отбор.Добавить("НастройкиХозяйственныхОпераций.ХозяйственнаяОперация НЕ В (&ИсключаемыеОперации)");
			Запрос.УстановитьПараметр("ИсключаемыеОперации", ИсключаемыеОперации);
		КонецЕсли;
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	ТекущаяОперация  = Неопределено;
	ОперацияДоступна = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяОперация = Выборка.ХозяйственнаяОперация И ОперацияДоступна Тогда
			Продолжить;
		КонецЕсли;
		
		ОперацияДоступна = ПустаяСтрока(Выборка.ИмяФункциональнойОпции) Или ПолучитьФункциональнуюОпцию(Выборка.ИмяФункциональнойОпции);
		Если Не ОперацияДоступна Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОперация = Выборка.ХозяйственнаяОперация;
		ДоступныеОперации.Добавить(ТекущаяОперация);
		
	КонецЦикла;
	
	Возврат ДоступныеОперации;
	
КонецФункции

// Добавляет отбор доступных по функциональным опциям хозяйственных операций
// в контейнер элементов компоновки.
//
// Параметры:
//  Отбор - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                     например, Список.Отбор или группа в отборе.
//
Процедура ДобавитьОтборКомпоновкиПоДоступнымОперациям(Отбор) Экспорт
	
	ДоступныеОперации = ДоступныеХозяйственныеОперации();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
		"ХозяйственнаяОперация", ВидСравненияКомпоновкиДанных.ВСписке, ДоступныеОперации);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// Возвращает аналитические показатели регистра накопления
//
// Параметры:
//  ИмяИсточникаДанных - Строка - имя регистра накопления, у которого проверяются показатели
//
// Возвращаемое значение:
//  Показатели - Массив - состоящий из значений перечисления ПоказателиАналитическихРегистров
//
Функция ПоказателиРегистра(ИмяИсточникаДанных) Экспорт
	
	Если ПустаяСтрока(ИмяИсточникаДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоступныеПоказатели = Новый Структура;
	Для Каждого Показатель Из Метаданные.Перечисления.ПоказателиАналитическихРегистров.ЗначенияПеречисления Цикл
		ДоступныеПоказатели.Вставить(Показатель.Имя, Перечисления.ПоказателиАналитическихРегистров[Показатель.Имя]);
	КонецЦикла;
	
	Показатели = Новый Массив;
	
	Регистр = Метаданные.РегистрыНакопления[ИмяИсточникаДанных];
	Для Каждого Ресурс Из Регистр.Ресурсы Цикл
		Показатель = Неопределено;
		Если ДоступныеПоказатели.Свойство(Ресурс.Имя, Показатель) Тогда
			Показатели.Добавить(Показатель);
			Если Показатель = Перечисления.ПоказателиАналитическихРегистров.Количество Тогда
				Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.КоличествоВОсновныхЕдиницахУчета);
			КонецЕсли;
			Если Показатель = Перечисления.ПоказателиАналитическихРегистров.КорКоличество Тогда
				Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.КорКоличествоВОсновныхЕдиницахУчета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает хозяйственные операции,
// которые не нужно включать в доступные для документа операции.
//
// Параметры:
//  ИдентификаторДокумента - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//                           ссылка идентификатора документа, для проверки.
//
// Возвращаемое значение:
//  ИсключаемыеОперации - Массив - ссылки исключаемых хозяйственных операций,
//                        типа ПеречислениеСсылка.ХозяйственныеОперации.
//
Функция ИсключаемыеХозяйственныеОперацииДокумента(ИдентификаторДокумента)
	
	ПустаяСсылкаОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИдентификаторДокумента, "ЗначениеПустойСсылки");
	
	ИсключаемыеОперации = Новый Массив;
	Если ТипЗнч(ПустаяСсылкаОбъекта) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ИсключаемыеОперации.Добавить(Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров);
	КонецЕсли;
	
	Возврат ИсключаемыеОперации;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

// Обработчик первого запуска.
// Заполняет предопределенные элементы справочника "НастройкиХозяйственныхОпераций".
//
Процедура ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций() Экспорт
	
	РеквизитыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("НастройкиПредопределенныхЭлементов").ПолучитьТекст();
	РеквизитыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(РеквизитыXML).Данные;
	
	Для Каждого СтрокаРеквизитов Из РеквизитыТаблица Цикл
		ID = СтрокаРеквизитов.ID;
		Объект = Справочники.НастройкиХозяйственныхОпераций[ID].ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, СтрокаРеквизитов);
		
		Приход = СтрокаРеквизитов.Приход;
		Если ЗначениеЗаполнено(Приход) Тогда
			Объект.Приход = Перечисления.ТипыДанныхУчета[Приход];
		КонецЕсли;
		
		Расход = СтрокаРеквизитов.Расход;
		Если ЗначениеЗаполнено(Расход) Тогда
			Объект.Расход = Перечисления.ТипыДанныхУчета[Расход];
		КонецЕсли;
		
		ХозяйственнаяОперация = СтрокаРеквизитов.ХозяйственнаяОперация;
		Если ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации[ХозяйственнаяОперация];
		КонецЕсли;
		
		Объект.Документы.Очистить();
		СвязанныеДокументы = СтрокаРеквизитов.СвязанныеДокументы;
		Если ЗначениеЗаполнено(СвязанныеДокументы) Тогда
			СписокДокументов = СтрРазделить(СвязанныеДокументы, ",", Истина);
			Для Каждого ИмяДокумента Из СписокДокументов Цикл
				СтрокаДокумента = Объект.Документы.Добавить();
				СтрокаДокумента.Документ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы[ИмяДокумента]);
			КонецЦикла;
		КонецЕсли;
		
		ПоказателиРегистра = ПоказателиРегистра(Объект.ИсточникДанных);
		Если ЗначениеЗаполнено(ПоказателиРегистра) Тогда
			Объект.ПоказателиРегистра.Очистить();
			Для каждого Показатель Из ПоказателиРегистра Цикл
				НоваяСтрока = Объект.ПоказателиРегистра.Добавить();
				НоваяСтрока.Показатель = Показатель;
				НоваяСтрока.Использование = Истина;
			КонецЦикла;
		КонецЕсли;
		
		Объект.ФункциональныеОпции.Очистить();
		ФункциональныеОпции = СтрокаРеквизитов.ФункциональныеОпции;
		Если ЗначениеЗаполнено(ФункциональныеОпции) Тогда
			СписокОпций = СтрРазделить(ФункциональныеОпции, ",", Истина);
			Для Каждого ИмяФункциональнойОпции Из СписокОпций Цикл
				СтрокаОпции = Объект.ФункциональныеОпции.Добавить();
				СтрокаОпции.ИмяФункциональнойОпции = ИмяФункциональнойОпции;
			КонецЦикла;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецЕсли