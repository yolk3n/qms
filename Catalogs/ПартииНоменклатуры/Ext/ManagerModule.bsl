#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию,
// необходимые для формирования партии номенклатуры
//
Функция ПараметрыЗаполненияПартийПоУмолчанию() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПартияВШапке"           , Ложь);
	Параметры.Вставить("ИмяТабличнойЧасти"      , "Товары");
	Параметры.Вставить("Суффикс"                , "");
	Параметры.Вставить("ЗаменятьВыбраннуюПартию", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Формирует ключи аналитики учета партий, и заполняет поля Партия передаваемого объекта сформированными ключами.
// Если ключи аналитики уже существуют, - используются существующие ключи.
//
// Параметры:
//  Объект              - ДокументОбъект - документ, по которому будет формироваться партия
//  Поставщик           - СправочникСсылка.Контрагенты - поставщик по которому будет формироваться партия
//  ПараметрыЗаполнения - Структура - параметры отличные от параметров по умолчанию
//
Процедура ЗаполнитьПартиюВКоллекции(Знач Объект, Знач Поставщик, Знач ПараметрыЗаполнения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПараметрыЗаполненияПартийПоУмолчанию();
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если Параметры.ПартияВШапке Тогда
		Товары = Новый Массив;
		Товары.Добавить(Объект);
	Иначе
		Товары = Объект[Параметры.ИмяТабличнойЧасти];
	КонецЕсли;
	
	СтатусыУказанияПартий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияПартий();
	
	Партия = Неопределено;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Если ТекущаяСтрока["СтатусУказанияПартий" + Параметры.Суффикс] <> СтатусыУказанияПартий.СтатусПартииНеУказываются Тогда
			ТекущаяПартия = ТекущаяСтрока["Партия" + Параметры.Суффикс];
			Если ЗначениеЗаполнено(ТекущаяПартия) И Не Параметры.ЗаменятьВыбраннуюПартию Тогда
				Продолжить;
			КонецЕсли;
			
			Если Партия = Неопределено Тогда
				Партия = ПолучитьПартиюДокумента(Объект, Поставщик, Истина);
			КонецЕсли;
			
			Если ТекущаяПартия <> Партия Тогда
				ТекущаяСтрока["Партия" + Параметры.Суффикс] = Партия;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Партия = Неопределено Тогда
		// Обновить аналитику существующей партии при необходимости.
		ПолучитьПартиюДокумента(Объект, Поставщик, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает партию с обновлением существующей
//
// Параметры:
//  Объект               - ДокументОбъект - документ, по которому будет формироваться партия
//  Поставщик            - СправочникСсылка.Контрагенты - поставщик по которому будет формироваться партия
//  СоздаватьНовуюПартию - Булево - 
//
// Возвращаемое значение:
//  СправочникСсылка.ПартииНоменклатуры, Неопределено
//
Функция ПолучитьПартиюДокумента(Объект, Поставщик, СоздаватьНовуюПартию = Истина) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не СоздаватьНовуюПартию Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СсылкаНового = Объект.ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Номер) Тогда
			Объект.УстановитьНовыйНомер();
		КонецЕсли;
		ДокументОприходования = СсылкаНового;
	Иначе
		ДокументОприходования = Объект.Ссылка;
	КонецЕсли;
	
	ПараметрыПолученияПартии = Новый Структура;
	ПараметрыПолученияПартии.Вставить("ДокументОприходования", ДокументОприходования);
	ПараметрыПолученияПартии.Вставить("Поставщик", Поставщик);
	ПараметрыПолученияПартии.Вставить("Номер", Объект.Номер);
	ПараметрыПолученияПартии.Вставить("Дата", Объект.Дата);
	Если Не СоздаватьНовуюПартию Тогда
		ПараметрыПолученияПартии.Вставить("ТолькоОбновитьКлючАналитики", Истина);
	КонецЕсли;
	
	Партия = ЗначениеКлючаАналитики(ПараметрыПолученияПартии);
	
	Возврат Партия;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Механизм расширенных ключей аналитики

// Формирует наименование ключа аналитики
//
// Параметры:
//  ПараметрыАналитики - значения полей создаваемого ключа аналитики
//
Функция ПолучитьНаименованиеКлючаАналитики(ПараметрыАналитики) Экспорт
	
	ОжидаемыеПоля = Новый Структура;
	ОжидаемыеПоля.Вставить("Поставщик");
	ОжидаемыеПоля.Вставить("ДокументОприходования");
	ОжидаемыеПоля.Вставить("Номер");
	ОжидаемыеПоля.Вставить("Дата");
	
	ЗаполнитьЗначенияСвойств(ОжидаемыеПоля, ПараметрыАналитики);
	
	Наименование = "";
	Если ЗначениеЗаполнено(ОжидаемыеПоля.Поставщик) Тогда
		Наименование = Наименование + ?(ПустаяСтрока(Наименование), "", "; ") + "Поставщик: " + СокрЛП(ОжидаемыеПоля.Поставщик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОжидаемыеПоля.ДокументОприходования) Тогда
		ПредставлениеДокумента = ОбщегоНазначенияБольничнаяАптека.ПредставлениеОбъекта(ОжидаемыеПоля.ДокументОприходования.Метаданные());
		Если Не ЗначениеЗаполнено(ОжидаемыеПоля.Номер) Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОжидаемыеПоля.ДокументОприходования, "Номер, Дата");
			ЗаполнитьЗначенияСвойств(ОжидаемыеПоля, Реквизиты);
		КонецЕсли;
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2 от %3'"),
			ПредставлениеДокумента,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СокрЛП(ОжидаемыеПоля.Номер)),
			Формат(ОжидаемыеПоля.Дата, "ДЛФ=D"));
		Наименование = Наименование + ?(ПустаяСтрока(Наименование), "", "; ") + ПредставлениеДокумента;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Заполняет наименование ключа аналитики
//
// Параметры:
//  КлючАналитики      - ссылка ключа аналитики, у которого заполняется наименование
//  ПараметрыАналитики - значения полей создаваемого ключа аналитики
//
Процедура ЗаполнитьНаименованиеКлючаАналитики(КлючАналитики, ПараметрыАналитики) Экспорт
	
	КлючАналитики.Наименование = ПолучитьНаименованиеКлючаАналитики(ПараметрыАналитики)
	
КонецПроцедуры

// Возвращает существующий или новый ключ аналитики
//
// Параметры:
//  ПараметрыАналитики - значения полей создаваемого ключа аналитики
//
Функция ЗначениеКлючаАналитики(ПараметрыАналитики) Экспорт
	
	Возврат РасширеннаяАналитикаУчета.ЗначениеКлючаАналитики(Справочники.ПартииНоменклатуры, ПараметрыАналитики);
	
КонецФункции

// Возвращает новый ключ аналитики
//
// Параметры:
//  ПараметрыАналитики - значения полей создаваемого ключа аналитики
//
Функция СоздатьКлючАналитики(ПараметрыАналитики) Экспорт
	
	КлючАналитики = Неопределено;
	
	НаборПолейАналитики = РегистрыСведений[ИмяРегистраАналитики()].СоздатьНаборЗаписей();
	НаборПолейАналитики.Отбор.ДокументОприходования.Установить(ПараметрыАналитики.ДокументОприходования);
	НаборПолейАналитики.Прочитать();
	Если НаборПолейАналитики.Количество() > 0 Тогда
		КлючАналитики = НаборПолейАналитики[0].КлючАналитики;
		
		НаборПолейАналитики.Очистить();
		
		ИменаПолейАналитики = СтрСоединить(ИменаПолейАналитики(), ",");
		ПоляАналитики = НаборПолейАналитики.Добавить();
		ЗаполнитьЗначенияСвойств(ПоляАналитики, ПараметрыАналитики, ИменаПолейАналитики);
		
		КлючАналитикиОбъект = КлючАналитики.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(КлючАналитикиОбъект, ПараметрыАналитики, ИменаПолейАналитики);
		ЗаполнитьДополнительныеПоляКлючаАналитики(КлючАналитикиОбъект, ПараметрыАналитики);
		ЗаполнитьНаименованиеКлючаАналитики(КлючАналитикиОбъект, ПараметрыАналитики);
		
		ПометкаУдаления = Ложь;
		Для Каждого ИмяПоля Из ИменаПолейАналитики() Цикл
			ЗначениеПоля = ПоляАналитики[ИмяПоля];
			Если ЗначениеЗаполнено(ЗначениеПоля) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеПоля)) И Не ОбщегоНазначения.ЭтоПеречисление(ЗначениеПоля.Метаданные()) Тогда
				ПометкаУдаления = ПометкаУдаления Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеПоля, "ПометкаУдаления");
			КонецЕсли;
		КонецЦикла;
		Если КлючАналитикиОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
			КлючАналитикиОбъект.ПометкаУдаления = ПометкаУдаления;
		КонецЕсли;
		
		КлючАналитикиОбъект.Записать();
		
		ПоляАналитики.КлючАналитики = КлючАналитики;
		
		НаборПолейАналитики.Записать(Истина);
		
	ИначеЕсли Не ПараметрыАналитики.Свойство("ТолькоОбновитьКлючАналитики") Тогда
		КлючАналитики = РасширеннаяАналитикаУчета.СоздатьКлючАналитики(Справочники.ПартииНоменклатуры, ПараметрыАналитики);
	КонецЕсли;
	
	Возврат КлючАналитики;
	
КонецФункции

// Заполняет дополнительные поля ключа аналитики при необходимости
//
// Параметры:
//  КлючАналитики      - ссылка ключа аналитики, у которого заполняются дополнительные поля
//  ПараметрыАналитики - значения полей создаваемого ключа аналитики
//
Процедура ЗаполнитьДополнительныеПоляКлючаАналитики(КлючАналитики, ПараметрыАналитики) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет наличие необходимых ключей аналитики и если не находит их, то создает новые
//
// Параметры:
//  МенеджерВременныхТаблиц - должен содержать временную таблицу "втТаблицаАналитики" со
//                            значениями полей аналитики.
Процедура ИнициализироватьКлючиАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналитики.ДокументОприходования КАК ДокументОприходования,
	|	ТаблицаАналитики.Поставщик КАК Поставщик,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК КлючАналитики,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Аналитика.Поставщик, НЕОПРЕДЕЛЕНО) = ТаблицаАналитики.Поставщик
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КлючАналитикиИзменен
	|ИЗ
	|	втТаблицаАналитики КАК ТаблицаАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.АналитикаУчетаПартий КАК Аналитика
	|			ПО
	|				ТаблицаАналитики.ДокументОприходования = Аналитика.ДокументОприходования
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КлючАналитики = Неопределено Тогда
			РасширеннаяАналитикаУчета.СоздатьКлючАналитики(Справочники.ПартииНоменклатуры, Выборка);
		ИначеЕсли Выборка.КлючАналитикиИзменен Тогда
			
			ИменаПолейАналитики = СтрСоединить(ИменаПолейАналитики(), ",");
			НаборПолейАналитики = РегистрыСведений[ИмяРегистраАналитики()].СоздатьНаборЗаписей();
			НаборПолейАналитики.Отбор.ДокументОприходования.Установить(Выборка.ДокументОприходования);
			
			ПоляАналитики = НаборПолейАналитики.Добавить();
			ЗаполнитьЗначенияСвойств(ПоляАналитики, Выборка, ИменаПолейАналитики);
			
			КлючАналитики = Выборка.КлючАналитики.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(КлючАналитики, Выборка, ИменаПолейАналитики);
			ЗаполнитьДополнительныеПоляКлючаАналитики(КлючАналитики, Выборка);
			ЗаполнитьНаименованиеКлючаАналитики(КлючАналитики, Выборка);
			КлючАналитики.Записать();
			
			ПоляАналитики.КлючАналитики = КлючАналитики.Ссылка;
			
			НаборПолейАналитики.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив имен полей соответствующие ключу аналитики
//
Функция ИменаПолейАналитики() Экспорт
	
	Возврат ОбщегоНазначенияБольничнаяАптека.ИменаИзмеренийРегистраСведений(ИмяРегистраАналитики());
	
КонецФункции

// Возвращает имя регистра сведений ключа аналитики
//
Функция ИмяРегистраАналитики() Экспорт
	
	Возврат "АналитикаУчетаПартий";
	
КонецФункции

// Устанавливает пометку удаления у ключей, соответствующих отбору
//
Процедура УстановитьПометкуУдаления(Отбор, ПометкаУдаления) Экспорт
	
	РасширеннаяАналитикаУчета.УстановитьПометкуУдаленияКлючейАналитики(Справочники.ПартииНоменклатуры, Отбор, ПометкаУдаления);
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#КонецЕсли