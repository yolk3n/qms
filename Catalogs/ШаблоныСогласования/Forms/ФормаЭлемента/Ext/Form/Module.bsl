
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			Объект.Ответственный = Пользователи.ТекущийПользователь();
			Объект.ПерсональныйШаблон = Истина;
			
			Элементы.Ответственный.Доступность = Ложь;
			Элементы.ПерсональныйШаблон.Доступность = Ложь;
		Иначе
			Если Не Объект.ПерсональныйШаблон Тогда
				ТолькоПросмотр = Истина;
			Иначе
				Элементы.Ответственный.Доступность = Ложь;
				Элементы.ПерсональныйШаблон.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.Часов.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	
	ВариантСогласованияПараллельно = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	ВариантСогласованияПоследовательно = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
	ВариантСогласованияСмешанно = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно;
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	ПорядокСогласованияВместеСПредыдущим = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
	ПорядокСогласованияПослеПредыдущего = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтотОбъект, Ложь, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1);
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = Объект.Исполнители.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1);
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУсловия(Команда)
	
	Объект.ИспользоватьУсловия = Не Объект.ИспользоватьУсловия;
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = Объект.ИспользоватьУсловия;
	Элементы.ИсполнителиУсловие.Видимость = Объект.ИспользоватьУсловия;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ВыбратьИсполнителя(
		Элемент,
		Элементы.Исполнители.ТекущиеДанные.Исполнитель,
		Ложь, // ТолькоПростыеРоли
		Истина, // БезВнешнихРолей
		Истина); // ПоказыватьФункции
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		
		Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда
			ТекущаяСтрока = Объект.Исполнители.НайтиПоИдентификатору(Элементы.Исполнители.ТекущаяСтрока);
			ИндексСтроки = Объект.Исполнители.Индекс(ТекущаяСтрока);
			Если ИндексСтроки > 0 Тогда
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = Объект.Исполнители[ИндексСтроки - 1].ПорядокСогласования;
			Иначе
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьШаг(Объект.Исполнители);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Исполнители.ТекущиеДанные;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПриИзмененииУчастника(
		ТекущаяСтрока,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ВариантСогласованияПриИзменении(Элемент)
	
	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если ПредыдущийВариантСогласования = ВариантСогласованияПоследовательно Тогда
				Строка.ПорядокСогласования = ПорядокСогласованияПослеПредыдущего;
			ИначеЕсли ПредыдущийВариантСогласования = ВариантСогласованияПараллельно Тогда
				Строка.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьШаг(Объект.Исполнители);
	КонецЕсли;
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСогласованияПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры


&НаКлиенте
Процедура ПерсональныйШаблонПриИзменении(Элемент)
	
	Если Объект.ПерсональныйШаблон Тогда
		Объект.Ответственный = ПользователиКлиент.ТекущийПользователь();
	Иначе
		Объект.Ответственный = Неопределено;
	КонецЕсли;
	НадписьПерсональногоШаблона = ПолучитьНадписьПерсональногоШаблона(Объект.ПерсональныйШаблон, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	НадписьПерсональногоШаблона = ПолучитьНадписьПерсональногоШаблона(Объект.ПерсональныйШаблон, Объект.Ответственный);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	УстановитьДоступность();
	
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = Объект.ИспользоватьУсловия;
	Элементы.ИсполнителиУсловие.Видимость = Объект.ИспользоватьУсловия;
	
	НадписьПерсональногоШаблона = ПолучитьНадписьПерсональногоШаблона(Объект.ПерсональныйШаблон, Объект.Ответственный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		Элементы.ПорядокСогласования.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	Иначе
		Элементы.ПорядокСогласования.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	Объект.Исполнители.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаг(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Шаг = 0;
	КонецЦикла;	
	
	КоличествоСтрок = Таблица.Количество();
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		
		Строка = Таблица[Инд];
		Если Не ЗначениеЗаполнено(Строка.ПорядокСогласования) Тогда 
			Прервать;
		КонецЕсли;
		
		Если Инд = 0 Тогда 
			Строка.Шаг = 1;
			Продолжить;
		КонецЕсли;
		
		ПредыдущаяСтрока = Таблица[Инд-1];
		Если Строка.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим Тогда 
			Строка.Шаг = ПредыдущаяСтрока.Шаг;
		ИначеЕсли Строка.ПорядокСогласования = ПорядокСогласованияПослеПредыдущего Тогда 
			Строка.Шаг = ПредыдущаяСтрока.Шаг + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНадписьПерсональногоШаблона(ПерсональныйШаблон, Ответственный)
	
	Если ПерсональныйШаблон Тогда
		НадписьПерсональногоШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользоваться шаблоном может только %1'"), Строка(Ответственный));
	Иначе
		НадписьПерсональногоШаблона = НСтр("ru = 'Пользоваться шаблоном могут все пользователи'");
	КонецЕсли;
	
	Возврат НадписьПерсональногоШаблона;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
