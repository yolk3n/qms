
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.Контролер = Неопределено Тогда
			Объект.Контролер = ПользователиПустаяСсылка;
		КонецЕсли;
		Если Объект.Проверяющий = Неопределено Тогда
			Объект.Проверяющий = ПользователиПустаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			Объект.Ответственный = Пользователи.ТекущийПользователь();
			Объект.ПерсональныйШаблон = Истина;
			
			Элементы.Ответственный.Доступность = Ложь;
			Элементы.ПерсональныйШаблон.Доступность = Ложь;
		Иначе
			Если Не Объект.ПерсональныйШаблон Тогда
				ТолькоПросмотр = Истина;
			Иначе
				Элементы.Ответственный.Доступность = Ложь;
				Элементы.ПерсональныйШаблон.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.Часов.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ИсполнителиСрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтотОбъект, Ложь, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Строка.НомерСтроки = ТекущиеДанные.НомерСтроки Тогда 
			Строка.Ответственный = Не Строка.Ответственный;
		ИначеЕсли Строка.Ответственный Тогда
			Строка.Ответственный = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУсловия(Команда)
	
	Объект.ИспользоватьУсловия = Не Объект.ИспользоватьУсловия;
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = Объект.ИспользоватьУсловия;
	Элементы.ИсполнителиУсловие.Видимость = Объект.ИспользоватьУсловия;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ВыбратьИсполнителя(
		Элемент,
		Элементы.Исполнители.ТекущиеДанные.Исполнитель,
		Ложь, // ТолькоПростыеРоли
		Истина, // БезВнешнихРолей
		Истина); // ПоказыватьФункции
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Исполнители.ТекущиеДанные;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПриИзмененииУчастника(
		ТекущаяСтрока,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ВыбратьИсполнителя(
		Элемент,
		Объект.Контролер,
		Ложь, // ТолькоПростыеРоли
		Истина, // БезВнешнихРолей
		Истина); // ПоказыватьФункции
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Объект.Контролер = ВыбранноеЗначение.РольИсполнителя;
		Объект.ОсновнойОбъектАдресацииКонтролера = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресацииКонтролера = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПриИзмененииУчастника(
		Объект,
		"Контролер",
		"ОсновнойОбъектАдресацииКонтролера",
		"ДополнительныйОбъектАдресацииКонтролера",
		ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ВыбратьИсполнителя(
		Элемент,
		Объект.Проверяющий,
		Ложь, // ТолькоПростыеРоли
		Истина, // БезВнешнихРолей
		Истина); // ПоказыватьФункции
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Объект.Проверяющий = ВыбранноеЗначение.РольИсполнителя;
		Объект.ОсновнойОбъектАдресацииПроверяющего = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресацииПроверяющего = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ШаблоныБизнесПроцессовВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиент.ПриИзмененииУчастника(
		Объект,
		"Проверяющий",
		"ОсновнойОбъектАдресацииПроверяющего",
		"ДополнительныйОбъектАдресацииПроверяющего",
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональныйШаблонПриИзменении(Элемент)
	
	Если Объект.ПерсональныйШаблон Тогда
		Объект.Ответственный = ПользователиКлиент.ТекущийПользователь();
	Иначе
		Объект.Ответственный = Неопределено;
	КонецЕсли;
	НадписьПерсональногоШаблона = ПолучитьНадписьПерсональногоШаблона(Объект.ПерсональныйШаблон, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	НадписьПерсональногоШаблона = ПолучитьНадписьПерсональногоШаблона(Объект.ПерсональныйШаблон, Объект.Ответственный);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.Исполнители.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = Объект.ИспользоватьУсловия;
	Элементы.ИсполнителиУсловие.Видимость = Объект.ИспользоватьУсловия;
	
	НадписьПерсональногоШаблона = ПолучитьНадписьПерсональногоШаблона(Объект.ПерсональныйШаблон, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если Объект.Исполнители.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	Исполнители = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// добавление появившихся строк
	Для Каждого Строка Из Исполнители Цикл
		
		ПараметрыОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
			Строка.Исполнитель, 
			Строка.ОсновнойОбъектАдресации, 
			Строка.ДополнительныйОбъектАдресации);
		
		Если Объект.Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	// удаление пропавших строк
	КоличествоСтрок = Объект.Исполнители.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = Объект.Исполнители[КоличествоСтрок - Инд];
		
		ПараметрыОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
			Строка.Исполнитель, 
			Строка.ОсновнойОбъектАдресации, 
			Строка.ДополнительныйОбъектАдресации);
		
		Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.Исполнители.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНадписьПерсональногоШаблона(ПерсональныйШаблон, Ответственный)
	
	Если ПерсональныйШаблон Тогда
		НадписьПерсональногоШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользоваться шаблоном может только %1'"), Строка(Ответственный));
	Иначе
		НадписьПерсональногоШаблона = НСтр("ru = 'Пользоваться шаблоном могут все пользователи'");
	КонецЕсли;
	
	Возврат НадписьПерсональногоШаблона;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
