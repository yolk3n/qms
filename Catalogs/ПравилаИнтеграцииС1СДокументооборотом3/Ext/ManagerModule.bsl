#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список выражений на встроенном языке, которые требуется предварительно выполнить на стороне ДО,
// для последующего заполнения объектов на стороне ИС.
//
// Параметры:
//   ПравилаДляАнализа - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правила интеграции.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3
//     * id - Строка
//     * ВычисляемоеВыражение - Строка
//     * Таблица - Строка
//     * ЭтоТаблица - Булево
//     * ИмяТаблицыИсточника - Строка
//
Функция ВыраженияДляВыполненияНаСторонеДО(ПравилаДляАнализа) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаЗаполненияРеквизитовИС.Ссылка КАК Ссылка,
		|	ПравилаЗаполненияРеквизитовИС.id КАК id,
		|	ПравилаЗаполненияРеквизитовИС.ВычисляемоеВыражение КАК ВычисляемоеВыражение,
		|	ПравилаЗаполненияРеквизитовИС.Таблица КАК Таблица,
		|	ПравилаЗаполненияРеквизитовИС.ЭтоТаблица КАК ЭтоТаблица,
		|	ЕСТЬNULL(ПравилаЗаполненияРеквизитовИСРодитель.ИмяРеквизитаОбъектаДО, """") КАК ИмяТаблицыИсточника
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом3.ПравилаЗаполненияРеквизитовИС КАК ПравилаЗаполненияРеквизитовИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом3.ПравилаЗаполненияРеквизитовИС КАК ПравилаЗаполненияРеквизитовИСРодитель
		|		ПО ПравилаЗаполненияРеквизитовИС.Ссылка = ПравилаЗаполненияРеквизитовИСРодитель.Ссылка
		|			И ПравилаЗаполненияРеквизитовИС.Таблица = ПравилаЗаполненияРеквизитовИСРодитель.ИмяРеквизитаОбъектаИС
		|			И (ПравилаЗаполненияРеквизитовИСРодитель.ЭтоТаблица)
		|ГДЕ
		|	ПравилаЗаполненияРеквизитовИС.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
		|	И ПравилаЗаполненияРеквизитовИС.МестоВыполненияВыражения = ЗНАЧЕНИЕ(Перечисление.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО)
		|	И ПравилаЗаполненияРеквизитовИС.Ссылка В(&ПравилаДляАнализа)");
	Запрос.УстановитьПараметр("ПравилаДляАнализа", ПравилаДляАнализа);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет объект ИС по объекту XDTO.
//
// Параметры:
//   ОбъектИС - Произвольный - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект ДО, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правила заполнения.
//   Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//   ТребуетсяПерепроведение - Булево - Истина, если изменение требует перепроведения.
//
// Возвращаемое значение:
//   Булево - Истина, если объект был изменен, и Ложь в противном случае.
//
Функция ЗаполнитьОбъектИСПоОбъектуXDTO(ОбъектИС, ОбъектXDTO, Правило, Обновление = Ложь,
		ТребуетсяПерепроведение = Ложь) Экспорт
	
	ОбъектИзменен = Ложь;
	ОбновленныеТабличныеЧасти = Новый Соответствие;
	
	МетаданныеОбъекта = ОбъектИС.Метаданные();
	ПолноеИмяОбъектаИС = МетаданныеОбъекта.ПолноеИмя();
	РеквизитыОбъектаИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьРеквизитыОбъектаИС(
		ПолноеИмяОбъектаИС);
	
	ПроверятьПерепроведение = Обновление
		И ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
		И МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
		И ОбъектИС.Проведен;
	
	РазрешеноБезПерепроведения =
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения;
	РазрешеноСПерепроведением =
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением;
	
	ЯвляетсяЗаявкойНаОплату = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "documentType")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ОбъектXDTO.documentType, "isAPaymentRequest")
			И ОбъектXDTO.documentType.isAPaymentRequest = Истина Тогда
		ЯвляетсяЗаявкойНаОплату = Истина;
	КонецЕсли;
	
	// Переопределяемый модуль может перекрыть настройки правил, разрешив изменение без перепроведения.
	ОбновляемыеРеквизиты = Новый Массив;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(
		ПолноеИмяОбъектаИС,
		ОбновляемыеРеквизиты);
	
	ДанныеДляЗаполненияПоПравилу = ДанныеДляЗаполненияПоПравилу();
	ДанныеДляЗаполненияПоПравилу.ПравилоИнтеграции = Правило;
	ДанныеДляЗаполненияПоПравилу.ОбъектИС = ОбъектИС;
	ДанныеДляЗаполненияПоПравилу.РеквизитыОбъектаИС = РеквизитыОбъектаИС;
	ДанныеДляЗаполненияПоПравилу.ОбъектXDTO = ОбъектXDTO;
	ДанныеДляЗаполненияПоПравилу.ЯвляетсяЗаявкойНаОплату = ЯвляетсяЗаявкойНаОплату;
	
	Для Каждого РеквизитИСМетаданные Из РеквизитыОбъектаИС Цикл
		// Метод ПолучитьРеквизитыОбъектаИС() сортирует реквизиты объекта ИС в порядке,
		// необходимом для загрузки данных. Объекты, имеющие владельца, должны грузиться после
		// того, как загружен их владелец. Например, к загрузке контактного лица и договора можно
		// приступать только после того, как загружен контрагент.
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаИС", РеквизитИСМетаданные.Имя);
		ПараметрыОтбора.Вставить("ЭтоТаблица", РеквизитИСМетаданные.ЭтоТаблица);
		ПараметрыОтбора.Вставить("Таблица", ""); // Реквизиты табличной части грузим в ЗаполнитьТаблицуПоПравилу()
		Если Обновление Тогда
			ПараметрыОтбора.Вставить("Обновлять", Истина);
		КонецЕсли;
		
		НайденныеПравилаРеквизитов = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеПравилаРеквизитов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПравилоРеквизита = НайденныеПравилаРеквизитов[0];
		
		Если ПроверятьПерепроведение Тогда
			Если ПравилоРеквизита.РежимИзмененияДанныхПроведенногоДокумента = РазрешеноСПерепроведением Тогда
				РежимИзменения = РазрешеноСПерепроведением;
				
			ИначеЕсли ПравилоРеквизита.РежимИзмененияДанныхПроведенногоДокумента = РазрешеноБезПерепроведения
					Или ОбновляемыеРеквизиты.Найти(ПравилоРеквизита.ИмяРеквизитаОбъектаИС) <> Неопределено Тогда
				РежимИзменения = РазрешеноБезПерепроведения;
				
			Иначе
				// Изменение запрещено.
				Продолжить;
				
			КонецЕсли;
		Иначе
			РежимИзменения = РазрешеноБезПерепроведения;
		КонецЕсли;
		
		Если ПравилоРеквизита.ЭтоТаблица Тогда
			// Заполняем табличную часть объекта ИС.
			ТаблицаОбъектаИС = ОбъектИС[ПравилоРеквизита.ИмяРеквизитаОбъектаИС];
			ОбновленныеТабличныеЧасти.Вставить(ПравилоРеквизита.ИмяРеквизитаОбъектаИС, ТаблицаОбъектаИС.Выгрузить());
			ЗаполнитьТаблицуПоПравилу(ДанныеДляЗаполненияПоПравилу, ТаблицаОбъектаИС, ПравилоРеквизита);
			
		ИначеЕсли ПравилоРеквизита.ЭтоДополнительныйРеквизитИС Тогда
			// Заполняем дополнительный реквизит объекта ИС.
			СтруктураПоиска = Новый Структура("Свойство", ПравилоРеквизита.ДополнительныйРеквизитИС);
			СтрокиРеквизита = ОбъектИС.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
			Если СтрокиРеквизита.Количество() = 0 Тогда
				ОбъектИзменен = Истина;
				СтрокаРеквизита = ОбъектИС.ДополнительныеРеквизиты.Добавить();
				СтрокаРеквизита.Свойство = ПравилоРеквизита.ДополнительныйРеквизитИС;
			Иначе
				СтрокаРеквизита = СтрокиРеквизита[0];
			КонецЕсли;
			
			ПредыдущееЗначение = СтрокаРеквизита.Значение;
			
			ЗаполнитьРеквизитПоПравилу(
				ДанныеДляЗаполненияПоПравилу,
				СтрокаРеквизита.Значение,
				ПравилоРеквизита,
				РеквизитИСМетаданные);
			
			Если СтрокаРеквизита.Значение <> ПредыдущееЗначение Тогда
				Если РежимИзменения = РазрешеноБезПерепроведения Тогда
					ОбъектИзменен = Истина;
				ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
					ОбъектИзменен = Истина;
					ТребуетсяПерепроведение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПравилоРеквизита.Таблица = "" Тогда
			// Заполняем реквизит объекта ИС.
			ПредыдущееЗначение = ОбъектИС[ПравилоРеквизита.ИмяРеквизитаОбъектаИС];
			
			ЗаполнитьРеквизитПоПравилу(
				ДанныеДляЗаполненияПоПравилу,
				ОбъектИС[ПравилоРеквизита.ИмяРеквизитаОбъектаИС],
				ПравилоРеквизита,
				РеквизитИСМетаданные);
			
			Если ОбъектИС[ПравилоРеквизита.ИмяРеквизитаОбъектаИС] <> ПредыдущееЗначение Тогда
				Если РежимИзменения = РазрешеноБезПерепроведения Тогда
					ОбъектИзменен = Истина;
				ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
					ОбъектИзменен = Истина;
					ТребуетсяПерепроведение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбновленныеТабличныеЧасти Цикл
		ОбъектИзменен = (ОбъектИзменен
			Или (ЗначениеВСтрокуВнутр(ТабличнаяЧасть.Значение) <>
				ЗначениеВСтрокуВнутр(ОбъектИС[ТабличнаяЧасть.Ключ].Выгрузить())));
	КонецЦикла;
	
	Если ОбъектXDTO.Свойства().Получить("deletionMark") <> Неопределено И ОбъектXDTO.Установлено("deletionMark") Тогда
		ОбъектИзменен = (ОбъектИзменен Или (ОбъектXDTO.deletionMark <> ОбъектИС.ПометкаУдаления));
		ОбъектИС.ПометкаУдаления = ОбъектXDTO.deletionMark;
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции

// Возвращает реквизиты объекта ДО указанного типа, возможно, с уточнением до вида документа.
//
// Параметры:
//   ТипОбъектаДО - Строка - имя типа объекта XDTO Документооборота.
//   ВидДокументаДОID - Строка - идентификатор вида документа. Заполняется, если тип объекта ДО равен DMDocument.
//   ПолучитьВсе - Булево - позволяет вернуть все возможные реквизиты, вне зависимости от
//     вида объекта Документооборота.
//   НастройкиВида - ОбъектXDTO - неявно возвращаемое значение, содержащее настройки вида документа.
//   ДопЗапрос - ОбъектXDTO - дополнительный запрос, который в целях оптимизации требуется выполнить в пакете
//     с прочими запросами к 1С:Документообороту.
//   ОтветНаДопЗапрос - ОбъектXDTO - неявно возвращаемое значение, ответ на дополнительный запрос.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Имя - Строка
//     * Представление - Строка
//     * Тип - СписокЗначений
//     * ДопРеквизит - Булево
//     * ДопРеквизитID - Строка
//     * ДопРеквизитТип - Строка
//     * ОбязательноеЗаполнение - Булево
//     * ЭтоТаблица - Булево
//     * Таблица - Строка
//
Функция ПолучитьРеквизитыОбъектаДО(ТипОбъектаДО, ВидДокументаДОID, ПолучитьВсе, НастройкиВида = Неопределено,
		ДопЗапрос = Неопределено, ОтветНаДопЗапрос = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ЗапросыПакета = Новый Массив;
	
	НачальныйНомерЗапроса = 0;
	Если ДопЗапрос <> Неопределено Тогда
		ЗапросыПакета.Добавить(ДопЗапрос);
		НачальныйНомерЗапроса = НачальныйНомерЗапроса + 1;
	КонецЕсли;
	
	// Общие настройки.
	ПолучаемыеПоля = Новый Массив;
	ПолучаемыеПоля.Добавить("additionalProperties");
	ПолучаемыеПоля.Добавить("accessLevelEnabled");
	ПолучаемыеПоля.Добавить("activityMatterEnabled");
	ПолучаемыеПоля.Добавить("foldersEnabled");
	ПолучаемыеПоля.Добавить("organizationEnabled");
	ПолучаемыеПоля.Добавить("statusEnabled");
	ПолучаемыеПоля.Добавить("projectsEnabled");
	ЗапросыПакета.Добавить(
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНовыйОбъектЗапрос(
			Прокси,
			ТипОбъектаДО,
			ПолучаемыеПоля,
			ВидДокументаДОID));
	
	Если ТипОбъектаДО = "DMDocument" Тогда
		Если ВидДокументаДОID = Неопределено Тогда
			ЗапросыПакета.Добавить(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНовыйОбъектЗапрос(
					Прокси,
					"DMDocumentType"));
		Иначе
			// Вместе с настройками типа получим настройки по виду документа.
			ВидДокументаДО = Новый Структура("ID, Тип", ВидДокументаДОID, "DMDocumentType");
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъектыЗапрос(
				Прокси,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидДокументаДО));
			ЗапросыПакета.Добавить(Запрос);
		КонецЕсли;
		
		ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
			Прокси,
			ЗапросыПакета,
			Истина);
		
		НастройкиТипа = ОтветНаЗапросыПакета.responses[НачальныйНомерЗапроса];
		
		РезультатНастройкиВида = ОтветНаЗапросыПакета.responses[НачальныйНомерЗапроса + 1];
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
				Прокси, РезультатНастройкиВида, "DMDocumentType") Тогда
			НастройкиВида = РезультатНастройкиВида;
		Иначе
			НастройкиВида = РезультатНастройкиВида.objects[0];
		КонецЕсли;
	Иначе
		// Будем получать только настройки типа.
		ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
			Прокси,
			ЗапросыПакета,
			Истина);
		
		НастройкиТипа = ОтветНаЗапросыПакета.responses[НачальныйНомерЗапроса];
	КонецЕсли;
	
	Если ДопЗапрос <> Неопределено Тогда
		ОтветНаДопЗапрос = ОтветНаЗапросыПакета.responses[0];
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			НастройкиТипа, "additionalProperties") Тогда
		ДопРеквизиты = НастройкиТипа.additionalProperties;
	Иначе
		ДопРеквизиты = Новый Массив;
	КонецЕсли;
	
	Реквизиты = СтруктураТаблицыРеквизитовДО();
	
	// Документ
	Если ТипОбъектаДО = "DMDocument" Тогда
		
		ИспользуютсяКонтрагентыИлиСтороны = (НастройкиВида.correspondentEnabled = Истина
			Или (НастройкиВида.partiesEnabled = Истина И НастройкиВида.isAPaymentRequest <> Истина));
		ЭтоНеКорреспонденция = (НастройкиВида.isIncoming <> Истина И НастройкиВида.isOutgoing <> Истина);
		
		ТипСторона = Новый СписокЗначений;
		ТипСторона.Добавить("DMEmployee", НСтр("ru = 'Сотрудники'"));
		ТипСторона.Добавить("DMCorrespondent", НСтр("ru = 'Контрагенты'"));
		ТипСторона.Добавить("DMOrganization", НСтр("ru = 'Организации'"));
		
		ТипКонтактноеЛицоСтороны = Новый СписокЗначений;
		ТипКонтактноеЛицоСтороны.Добавить("DMEmployee", НСтр("ru = 'Сотрудники'"));
		ТипКонтактноеЛицоСтороны.Добавить("DMContactPerson", НСтр("ru = 'Контактные лица'"));
		ТипКонтактноеЛицоСтороны.Добавить("Строка", НСтр("ru = 'Строка'"));
		
		// Вид документа.
		ДобавитьРеквизит(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMDocumentType", Истина, "ВидДокумента");
		
		// Общие реквизиты.
		ДобавитьРеквизит(Реквизиты, "title", НСтр("ru = 'Заголовок'"), "Строка", Истина, "Заголовок");
		ДобавитьРеквизит(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка",, "Содержание");
		ДобавитьРеквизит(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка",, "РегистрационныйНомер");
		ДобавитьРеквизит(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата",, "ДатаРегистрации");
		ДобавитьРеквизит(Реквизиты, "author", НСтр("ru = 'Подготовил'"), "DMEmployee",, "Подготовил");
		ДобавитьРеквизит(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision",, "Подразделение");
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка",, "Комментарий");
		ДобавитьРеквизит(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMEmployee",, "Ответственный");
		
		// Прочие реквизиты.
		Если ПолучитьВсе Или НастройкиВида.performanceDateEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата",, "СрокИсполнения");
		КонецЕсли;
		Если ПолучитьВсе Или НастройкиТипа.accessLevelEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина, "ГрифДоступа");
		КонецЕсли;
		Если ПолучитьВсе Или НастройкиТипа.activityMatterEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина, "ВопросДеятельности");
		КонецЕсли;
		Если ПолучитьВсе Или НастройкиТипа.projectsEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject",, "Проект");
		КонецЕсли;
		Если ПолучитьВсе Или НастройкиТипа.foldersEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "folder", НСтр("ru = 'Папка'"), "DMDocumentFolder", Истина, "Папка");
		КонецЕсли;
		
		// Состояния.
		Если ПолучитьВсе Или НастройкиТипа.statusEnabled = Истина Тогда
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(НастройкиВида, "actionTypes") Тогда
				Для Каждого ВидДействияXDTO Из НастройкиВида.actionTypes Цикл
					ДобавитьРеквизит(
						Реквизиты,
						СтрШаблон("status_%1", ВидДействияXDTO.objectID.id),
						СтрШаблон(НСтр("ru = 'Состояние действия ""%1""'"), ВидДействияXDTO.name),
						"DMDocumentStatus");
				КонецЦикла;
			Иначе
				ДобавитьРеквизит(Реквизиты, "statusApproval", НСтр("ru = 'Состояние согласования'"), "DMDocumentStatus");
				ДобавитьРеквизит(Реквизиты, "statusConfirmation", НСтр("ru = 'Состояние утверждения'"), "DMDocumentStatus");
				ДобавитьРеквизит(Реквизиты, "statusAcquaintance", НСтр("ru = 'Состояние ознакомления'"), "DMDocumentStatus");
				ДобавитьРеквизит(Реквизиты, "statusPerformance", НСтр("ru = 'Состояние исполнения'"), "DMDocumentStatus");
				ДобавитьРеквизит(Реквизиты, "statusRegistration", НСтр("ru = 'Состояние регистрации'"), "DMDocumentStatus");
				ДобавитьРеквизит(Реквизиты, "statusSigning", НСтр("ru = 'Состояние подписания'"), "DMDocumentStatus");
			КонецЕсли;
		КонецЕсли;
		
		// Контрагент.
		Если ПолучитьВсе Или ИспользуютсяКонтрагентыИлиСтороны Тогда
			Заголовок = НСтр("ru = 'Контрагент'");
			Обязателен = Ложь; // Обязательным будет заполнение контрагента в табличной части
			
			Если НастройкиВида.isIncoming = Истина Тогда
				Заголовок = НСтр("ru = 'Отправитель'");
				Обязателен = Истина;
			ИначеЕсли НастройкиВида.isOutgoing = Истина Тогда
				Заголовок = НСтр("ru = 'Получатель'");
				Обязателен = Истина;
			КонецЕсли;
			
			ДобавитьРеквизит(Реквизиты, "correspondent", Заголовок, "DMCorrespondent", Обязателен, "Контрагент");
		КонецЕсли;
		
		// Контактное лицо
		Если ПолучитьВсе Или (ИспользуютсяКонтрагентыИлиСтороны И ЭтоНеКорреспонденция) Тогда
			ДобавитьРеквизит(Реквизиты, "contactPerson", НСтр("ru = 'Контактное лицо'"), "DMContactPerson",, "КонтактноеЛицо");
		КонецЕсли;
		
		// Получатель.
		Если ПолучитьВсе Или НастройкиВида.isAPaymentRequest = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "recipient", НСтр("ru = 'Получатель'"), ТипСторона, Истина);
		КонецЕсли;
		
		// Табличная часть Контрагенты.
		Если ПолучитьВсе
				Или (НастройкиВида.correspondentEnabled = Истина И ЭтоНеКорреспонденция) Тогда
			ДобавитьТаблицу(Реквизиты, "correspondentRows.rows", НСтр("ru = 'Контрагенты'"));
			ДобавитьРеквизитТаблицы(Реквизиты,
				"correspondentRows.rows", "correspondent", НСтр("ru = 'Контрагент'"), "DMCorrespondent", Истина);
			ДобавитьРеквизитТаблицы(Реквизиты,
				"correspondentRows.rows", "contact", НСтр("ru = 'Контактное лицо'"), "DMContactPerson");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"correspondentRows.rows",
				"signedFromTheCorrespondent", НСтр("ru = 'Подписал от контрагента'"), "DMContactPerson");
		КонецЕсли;
		
		// Организация.
		Если ПолучитьВсе Или НастройкиВида.organizationEnabled = Истина Тогда
			Если НастройкиВида.isAPaymentRequest = Истина Тогда
				Заголовок = НСтр("ru = 'Плательщик'");
			Иначе
				Заголовок = НСтр("ru = 'Организация'");
			КонецЕсли;
			
			ДобавитьРеквизит(Реквизиты, "organization", Заголовок, "DMOrganization", Истина, "Организация");
		КонецЕсли;
		
		// Внешний номер и дата.
		Если ПолучитьВсе Или НастройкиВида.externalNumberEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "externalNumber", НСтр("ru = '№ получателя'"), "Строка");
			ДобавитьРеквизит(Реквизиты, "externalDate", НСтр("ru = 'Дата получателя'"), "Дата");
		КонецЕсли;
		
		// Сумма.
		Если ПолучитьВсе Или НастройкиВида.sumEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число",, "Сумма");
			ДобавитьРеквизит(Реквизиты, "VAT", НСтр("ru = 'В т.ч. НДС'"), "Число",, "СуммаНДС");
			ДобавитьРеквизит(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency",, "Валюта");
		КонецЕсли;
		
		// Подписал от контрагента.
		Если ПолучитьВсе Или НастройкиВида.isIncoming = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "signerFromTheCorrespondent", НСтр("ru = 'Подписал'"), "DMContactPerson",, "ПодписалОтКонтрагента");
		КонецЕсли;
		
		// Адресат.
		Показывать = ПолучитьВсе;
		ТипЗначения = "DMEmployee";
		Если НастройкиВида.isIncoming = Истина Тогда
			Показывать = Истина;
			ТипЗначения = "DMEmployee";
			Обязательный = Ложь;
		ИначеЕсли НастройкиВида.isOutgoing = Истина Тогда
			Показывать = Истина;
			ТипЗначения = "DMContactPerson";
			Обязательный = Ложь;
		ИначеЕсли НастройкиВида.addresseeEnabled = Истина Тогда
			Показывать = Истина;
			ТипЗначения = "DMEmployee";
			Обязательный = Истина;
		КонецЕсли;
		Если Показывать Тогда
			ДобавитьРеквизит(Реквизиты, "addressee", НСтр("ru = 'Адресат'"), ТипЗначения, Обязательный, "Адресат");
		КонецЕсли;
		
		// Доставка.
		Показывать = ПолучитьВсе;
		Если НастройкиВида.isIncoming = Истина Тогда
			Показывать = Истина;
			Заголовок = НСтр("ru = 'Способ получения'");
		ИначеЕсли НастройкиВида.isOutgoing = Истина Тогда
			Показывать = Истина;
			Заголовок = НСтр("ru = 'Способ отправки'");
		КонецЕсли;
		Если Показывать Тогда
			ДобавитьРеквизит(Реквизиты, "deliveryMethod", Заголовок, "DMDeliveryMethod");
		КонецЕсли;
		
		// Отправка.
		Если ПолучитьВсе Или НастройкиВида.isOutgoing = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "sent", НСтр("ru = 'Отправлен'"), "Булево");
			ДобавитьРеквизит(Реквизиты, "sendDate", НСтр("ru = 'Дата отправки'"), "Дата");
		КонецЕсли;
		
		// Срок действия.
		Если ПолучитьВсе Или НастройкиВида.durationEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты,
				"beginDate", НСтр("ru = 'Дата начала действия'"), "Дата",, "ДатаНачалаДействия");
			ДобавитьРеквизит(Реквизиты,
				"endDate", НСтр("ru = 'Дата окончания действия'"), "Дата",, "ДатаОкончанияДействия");
			ДобавитьРеквизит(Реквизиты,
				"openEnded", НСтр("ru = 'Бессрочный'"), "Булево",, "Бессрочный");
			ДобавитьРеквизит(Реквизиты,
				"prolongationProcedure", НСтр("ru = 'Порядок продления'"), "DMProlongationProcedure",, "ПорядокПродления");
		КонецЕсли;
		
		// Суммы по статьям ДДС.
		Если ПолучитьВсе Или НастройкиВида.cashFlowDetailsEnabled = Истина Тогда
			ДобавитьТаблицу(Реквизиты, "cashFlowRows.rows", НСтр("ru = 'Статьи движения денежных средств'"));
			ДобавитьРеквизитТаблицы(Реквизиты, "cashFlowRows.rows", "item", НСтр("ru = 'Статья'"), "DMCashFlowItem", Истина);
			ДобавитьРеквизитТаблицы(Реквизиты, "cashFlowRows.rows", "total", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты, "cashFlowRows.rows", "VAT", НСтр("ru = 'Сумма НДС'"), "Число");
		КонецЕсли;
		
		// Табличная часть Товары.
		Если ПолучитьВсе Или НастройкиВида.productRowsEnabled = Истина Тогда
			ДобавитьТаблицу(Реквизиты, "productRows.rows", НСтр("ru = 'Товары и услуги'"));
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "product", НСтр("ru = 'Товар, услуга'"), "DMProduct");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "price", НСтр("ru = 'Цена'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "quantity", НСтр("ru = 'Количество'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "measurementUnit", НСтр("ru = 'Единица измерения'"), "DMMeasurementUnit");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "VATRate", НСтр("ru = 'Ставка НДС'"), "DMVATRate");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "VAT", НСтр("ru = 'Сумма НДС'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "total", НСтр("ru = 'Сумма'"), "Число");
		КонецЕсли;
		
		// Табличная часть Стороны.
		Если ПолучитьВсе Или (НастройкиВида.partiesEnabled = Истина И НастройкиВида.isAPaymentRequest <> Истина) Тогда
			ДобавитьТаблицу(Реквизиты, "partyRows.rows", НСтр("ru = 'Стороны'"));
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "comment", НСтр("ru = 'Комментарий'"), "Строка");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "contact", НСтр("ru = 'Контактное лицо'"), ТипКонтактноеЛицоСтороны);
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "description", НСтр("ru = 'Наименование стороны'"), "DMPartyName");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "party", НСтр("ru = 'Сторона'"), ТипСторона, Истина);
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "setBy", НСтр("ru = 'Установил'"), "DMEmployee");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "signatureDate", НСтр("ru = 'Дата подписи'"), "Дата");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "signed", НСтр("ru = 'Подписан'"), "Булево");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"partyRows.rows", "signedBy", НСтр("ru = 'Подписал'"), ТипКонтактноеЛицоСтороны);
		КонецЕсли;
		
	// Контрагент.
	ИначеЕсли ТипОбъектаДО = "DMCorrespondent" Тогда
		
		ДобавитьРеквизит(Реквизиты, "name", НСтр("ru = 'Наименование'"), "Строка", Истина, "Наименование");
		ДобавитьРеквизит(Реквизиты, "legalPrivatePerson", НСтр("ru = 'Вид контрагента'"), "DMLegalPrivatePerson", Истина, "ЮрФизЛицо");
		ДобавитьРеквизит(Реквизиты, "inn", НСтр("ru = 'ИНН'"), "Строка",, "ИНН");
		ДобавитьРеквизит(Реквизиты, "kpp", НСтр("ru = 'КПП'"), "Строка",, "КПП");
		ДобавитьРеквизит(Реквизиты, "okpo", НСтр("ru = 'Код по ОКПО'"), "Строка",, "КодПоОКПО");
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка",, "Комментарий");
		ДобавитьРеквизит(Реквизиты, "fullName", НСтр("ru = 'Полное наименование'"), "Строка",, "НаименованиеПолное");
		ДобавитьРеквизит(Реквизиты, "privatePerson", НСтр("ru = 'Физическое лицо'"), "DMPrivatePerson",, "ФизЛицо");
		ДобавитьРеквизит(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMEmployee",, "Ответственный");
		
	// Мероприятие.
	ИначеЕсли ТипОбъектаДО = "DMMeeting" Тогда
		
		ДобавитьРеквизит(Реквизиты, "name", НСтр("ru = 'Наименование'"), "Строка", Истина, "Наименование");
		ДобавитьРеквизит(Реквизиты, "type", НСтр("ru = 'Вид мероприятия'"), "DMMeetingType", Истина, "ВидМероприятия");
		
		Если ПолучитьВсе Или НастройкиТипа.accessLevelEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина, "ГрифДоступа");
		КонецЕсли;
		
		Если ПолучитьВсе Или НастройкиТипа.foldersEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "folder", НСтр("ru = 'Папка'"), "DMMeetingFolder", Истина, "Папка");
		КонецЕсли;
		
		ТипОрганизатор = Новый СписокЗначений;
		ТипОрганизатор.Добавить("DMEmployee", НСтр("ru = 'Сотрудники'"));
		ТипОрганизатор.Добавить("DMCorrespondent", НСтр("ru = 'Контрагенты'"));
		ДобавитьРеквизит(Реквизиты, "calledBy", НСтр("ru = 'Организатор'"), ТипОрганизатор, Истина, "Организатор");
		
		ТипПредседатель = Новый СписокЗначений;
		ТипПредседатель.Добавить("DMEmployee", НСтр("ru = 'Сотрудники'"));
		ТипПредседатель.Добавить("DMCorrespondent", НСтр("ru = 'Контрагенты'"));
		ТипПредседатель.Добавить("DMContactPerson", НСтр("ru = 'Контактные лица'"));
		ДобавитьРеквизит(Реквизиты, "chairPerson", НСтр("ru = 'Председатель'"), ТипПредседатель,, "Председатель");
		
		ТипСекретарь = Новый СписокЗначений;
		ТипСекретарь.Добавить("DMEmployee", НСтр("ru = 'Сотрудники'"));
		ТипСекретарь.Добавить("DMCorrespondent", НСтр("ru = 'Контрагенты'"));
		ТипСекретарь.Добавить("DMContactPerson", НСтр("ru = 'Контактные лица'"));
		ДобавитьРеквизит(Реквизиты, "secretary", НСтр("ru = 'Секретарь'"), ТипСекретарь,, "Секретарь");
		
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка",, "Комментарий");
		ДобавитьРеквизит(Реквизиты, "description", НСтр("ru = 'Описание мероприятия'"), "Строка",, "Описание");
		
		ДобавитьРеквизит(Реквизиты, "startDate", НСтр("ru = 'Дата и время начала'"), "Дата",, "ДатаНачала");
		ДобавитьРеквизит(Реквизиты, "endDate", НСтр("ru = 'Дата и время окончания'"), "Дата",, "ДатаОкончания");
		
		ДобавитьРеквизит(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization",, "Организация");
		ДобавитьРеквизит(Реквизиты, "place", НСтр("ru = 'Место проведения'"), "Строка",, "МестоПроведения");
		ДобавитьРеквизит(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject",, "Проект");
		
		// Табличная часть Программа
		ДобавитьТаблицу(Реквизиты, "agenda", НСтр("ru = 'Программа'"));
		ДобавитьРеквизитТаблицы(Реквизиты, "agenda", "employee", НСтр("ru = 'Исполнитель'"), "DMEmployee");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "role", НСтр("ru = 'Роль исполнителя'"), "DMBusinessProcessExecutorRole");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "mainAddressingItem", НСтр("ru = 'Основной объект адресации исполнителя'"), "DMMainAddressingObject");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "secondaryAddressingItem", НСтр("ru = 'Дополнительный объект адресации исполнителя'"), "DMSecondaryAddressingObject");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "number", НСтр("ru = 'Номер пункта'"), "Число");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "description", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "decisionIsNecessary", НСтр("ru = 'Требует принятия решения'"), "Булево");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "estimatedDuration", НСтр("ru = 'Время план (секунд)'"), "Число");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "duration", НСтр("ru = 'Время факт (секунд)'"), "Число");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "startDate", НСтр("ru = 'Дата и время начала'"), "Дата");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"agenda", "endDate", НСтр("ru = 'Дата и время окончания'"), "Дата");
		
		// Табличная часть Участники
		ДобавитьТаблицу(Реквизиты, "attendees", НСтр("ru = 'Участники'"));
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "absent", НСтр("ru = 'Отсутствовал'"), "Булево");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "invitationStatus", НСтр("ru = 'Состояние приглашения'"), "DMInvitationStatus");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "mainAddressingObject", НСтр("ru = 'Основной объект адресации участника'"), "DMMainAddressingObject");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "obligatory", НСтр("ru = 'Явка обязательна'"), "Булево");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "role", НСтр("ru = 'Роль исполнителя'"), "DMBusinessProcessExecutorRole");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "secondaryAddressingObject", НСтр("ru = 'Дополнительный объект адресации участника'"), "DMSecondaryAddressingObject");
		ДобавитьРеквизитТаблицы(Реквизиты,
			"attendees", "employee", НСтр("ru = 'Пользователь'"), "DMEmployee");
		
		// Табличная часть Состояния
		ДобавитьТаблицу(Реквизиты, "statuses", НСтр("ru = 'Состояния'"));
		ДобавитьРеквизитТаблицы(Реквизиты,
			"statuses", "objectID.ID", НСтр("ru = 'Состояние'"), "Строка");
		
	КонецЕсли;
	
	// Дополнительные свойства.
	Для Каждого ДопСвойство Из ДопРеквизиты Цикл
		
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ДопСвойство, "propertyValueTypes") Тогда
			Продолжить;
		КонецЕсли;
		
		Типы = Новый СписокЗначений;
		Для Каждого ОписаниеТипа Из ДопСвойство.propertyValueTypes Цикл
			Если ОписаниеТипа.xdtoClassName = "integer" Тогда
				ТипЗначения = "Число";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "boolean" Тогда
				ТипЗначения = "Булево";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "string" Тогда
				ТипЗначения = "Строка";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "date" Тогда
				ТипЗначения = "Дата";
			Иначе
				ТипЗначения = ОписаниеТипа.xdtoClassName;
			КонецЕсли;
			Типы.Добавить(ТипЗначения, ОписаниеТипа.presentation);
		КонецЦикла;
		
		ДобавитьДополнительныйРеквизит(Реквизиты,
			ДопСвойство.name,
			Типы,
			ДопСвойство.objectID.ID,
			ДопСвойство.objectID.type);
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Проверяет выражение на встроенном языке, используемое для заполнения реквизита при получении данных из ДО.
//
// Параметры:
//   ВычисляемоеВыражение - Строка - выражение на встроенном языке.
//   МестоВыполненияВыражения - ПеречислениеСсылка.МестаВыполненияВыраженийНаВстроенномЯзыке - указывает где
//     именно нужно выполнять выражение на встроенном языке, на стороне ДО или на стороне ИС.
//   ТипОбъектаДО - Строка - тип объекта 1С:Документооборот.
//   ТипОбъектаИС - Строка - тип объекта интегрированной системы.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   ОбъектИС - Произвольный - приемник данных.
//   ТаблицаИсточник - Строка - имя таблицы, из которой будет выполняться загрузка данных.
//
Процедура ПроверитьВыражениеПравилаЗагрузки(ВычисляемоеВыражение, МестоВыполненияВыражения, ТипОбъектаДО,
		ТипОбъектаИС, ОбъектXDTO = Неопределено, ОбъектИС = Неопределено, ТаблицаИсточник = "") Экспорт
	
	Если СокрЛП(ВычисляемоеВыражение) = "" Или Не ЗначениеЗаполнено(МестоВыполненияВыражения) Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если МестоВыполненияВыражения = Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС Тогда
		
		Если ОбъектXDTO = Неопределено Тогда
			ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНовыйОбъект(Прокси, ТипОбъектаДО);
		КонецЕсли;
		
		Если ОбъектИС = Неопределено Тогда
			МенеджерОбъектаИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипОбъектаИС);
			МетаданныеОбъектаИС = Метаданные.НайтиПоПолномуИмени(ТипОбъектаИС);
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъектаИС)
					Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеОбъектаИС) Тогда
				ОбъектИС = МенеджерОбъектаИС.СоздатьЭлемент();
			ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъектаИС) Тогда
				ОбъектИС = МенеджерОбъектаИС.СоздатьДокумент();
			КонецЕсли;
			ОбъектИС.Заполнить(Неопределено);
		КонецЕсли;
		
		ТекущаяСтрока = Неопределено;
		Если ТаблицаИсточник <> "" Тогда
			ЧастиСтроки = СтрРазделить(ТаблицаИсточник, ".");
			URIПространстваИменВебСервисаДокументооборота =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.URIПространстваИменВебСервисаДокументооборота();
			ТипОбъектаXDTO = Прокси.ФабрикаXDTO.Пакеты.Получить(
				URIПространстваИменВебСервисаДокументооборота).Получить(ТипОбъектаДО);
			
			Если ЧастиСтроки.Количество() = 1 Тогда
				ТипСтроки = ТипОбъектаXDTO.Свойства.Получить(ЧастиСтроки[0]).Тип.Имя;
				
			ИначеЕсли ЧастиСтроки.Количество() = 2 Тогда
				ТипСтроки = ТипОбъектаXDTO.Свойства.Получить(ЧастиСтроки[0]).Тип.Свойства.Получить(ЧастиСтроки[1]).Тип.Имя;
				
			Иначе
				ТипСтроки = "";
				
			КонецЕсли;
			
			Если ТипСтроки <> "" Тогда
				ТекущаяСтрока = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ТипСтроки);
			КонецЕсли;
		КонецЕсли;
		
		ИнтеграцияС1СДокументооборот3.РезультатВыраженияНаВстроенномЯзыке(
			ВычисляемоеВыражение,
			ОбъектXDTO,
			ОбъектИС,
			ТекущаяСтрока);
		
	ИначеЕсли МестоВыполненияВыражения = Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО Тогда
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси, "DMCheckExpressionOnBuiltInLanguageRequest");
		Запрос.tabularSectionName = ТаблицаИсточник;
		Запрос.expressionOnBuiltInLanguage = ВычисляемоеВыражение;
		
		Запрос.objectType = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMType");
		Запрос.objectType.xdtoClassName = ТипОбъектаДО;
		Запрос.objectType.presentation = ТипОбъектаДО;
		
		РезультатПроверкиВыражения = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, РезультатПроверкиВыражения);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку правила интеграции.
//
// Параметры:
//   ПравилоИнтеграции - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом3
//
Процедура ПроверитьПравило(ПравилоИнтеграции) Экспорт
	
	Если Не ЗначениеЗаполнено(ПравилоИнтеграции.ТипОбъектаДО) Тогда
		ВызватьИсключение НСтр("ru = 'Не задан тип объекта 1С:Документооборот'");
	КонецЕсли;
	
	РеквизитыТекущегоВидаДокументаДО = ПолучитьРеквизитыОбъектаДО(
		ПравилоИнтеграции.ТипОбъектаДО,
		ПравилоИнтеграции.ВидДокументаДОID,
		Ложь);
	
	ВсеРеквизитыОбъектаДО = ПолучитьРеквизитыОбъектаДО(
		ПравилоИнтеграции.ТипОбъектаДО,
		ПравилоИнтеграции.ВидДокументаДОID,
		Истина);
	
	РеквизитыОбъектаИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьРеквизитыОбъектаИС(
		ПравилоИнтеграции.ТипОбъектаИС);
	
	МенеджерОбъектаИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПравилоИнтеграции.ТипОбъектаИС);
	МетаданныеОбъектаИС = Метаданные.НайтиПоПолномуИмени(ПравилоИнтеграции.ТипОбъектаИС);
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъектаИС)
			Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьЭлемент();
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъектаИС) Тогда
		ОбъектИС = МенеджерОбъектаИС.СоздатьДокумент();
	КонецЕсли;
	ОбъектИС.Заполнить(Неопределено);
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНовыйОбъект(
		Прокси,
		ПравилоИнтеграции.ТипОбъектаДО);
	
	СписокОшибок = Новый Массив;
	
	ПроверитьПравилаЗаполненияРеквизитовИС(
		ПравилоИнтеграции,
		ОбъектИС,
		ОбъектXDTO,
		РеквизитыОбъектаИС,
		РеквизитыТекущегоВидаДокументаДО,
		ВсеРеквизитыОбъектаДО,
		СписокОшибок);
	
	Если СписокОшибок.Количество() > 0 Тогда
		ВызватьИсключение СтрСоединить(СписокОшибок, Символы.ПС + Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

// По ссылке на правило загрузки данных в ДО ищет в ИС связанные правила интеграции. Возвращает Истина в случае
// наличия, и Ложь, если связанных правил интеграции нет.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILRelatedIntegrationRulesExistenceRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILRelatedIntegrationRulesExistenceResponse или DMError.
//
Функция СвязанныеПравилаИнтеграцииСуществуют(Сообщение) Экспорт
	
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПравилаИнтеграцииС1СДокументооборотом3.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПравилаИнтеграцииС1СДокументооборотом3 КАК ПравилаИнтеграцииС1СДокументооборотом3
			|ГДЕ
			|	ПравилаИнтеграцииС1СДокументооборотом3.ПравилоЗагрузкиДанныхВДО = &ПравилоЗагрузкиДанныхВДО
			|	И НЕ ПравилаИнтеграцииС1СДокументооборотом3.ПометкаУдаления");
		Запрос.УстановитьПараметр("ПравилоЗагрузкиДанныхВДО", Сообщение.relatedDataLoadingRule);
		
		Ответ = ИнтеграцияС1СДокументооборот3.СоздатьОбъектБИД("DMILRelatedIntegrationRulesExistenceResponse");
		Ответ.exist = Не Запрос.Выполнить().Пустой();
		
	Исключение
		
		Ответ = ИнтеграцияС1СДокументооборот3.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при поиске связанных правил интеграции'"),
			ИнтеграцияС1СДокументооборот3.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Создает для правила загрузки данных в ДО связанное с ним правило интеграции.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILCreateRelatedIntegrationRuleExistenceRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMOK или DMError.
//
Функция СоздатьСвязанноеПравилоИнтеграции(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ИнтеграцияС1СДокументооборот3.СоздатьОбъектБИД("DMILOK");
		
		ПравилоОбъект = СоздатьЭлемент();
		ПравилоОбъект.Заполнить(Неопределено);
		
		ПравилоОбъект.ПравилоЗагрузкиДанныхВДО = Сообщение.relatedDataLoadingRule;
		ПравилоОбъект.ВидДокументаДО = Сообщение.documentTypeDM;
		ПравилоОбъект.ВидДокументаДОID = Сообщение.documentTypeDMID;
		ПравилоОбъект.ТипОбъектаДО = Сообщение.objectTypeDM;
		ПравилоОбъект.ПредставлениеОбъектаДО = Сообщение.objectNameDM;
		
		ПравилоОбъект.ТипОбъектаИС = Сообщение.objectTypeIS;
		ПравилоОбъект.ПредставлениеОбъектаИС = Метаданные.НайтиПоПолномуИмени(ПравилоОбъект.ТипОбъектаИС).Представление();
		
		Если ПравилоОбъект.ТипОбъектаДО = "DMDocument" И ЗначениеЗаполнено(ПравилоОбъект.ВидДокументаДОID) Тогда
			НоваяСтрока = ПравилоОбъект.КлючевыеРеквизитыДО.Добавить();
			НоваяСтрока.Имя = "documentType";
			НоваяСтрока.ЗначениеРеквизита = ПравилоОбъект.ВидДокументаДО;
			НоваяСтрока.ЗначениеРеквизитаID = ПравилоОбъект.ВидДокументаДОID;
			НоваяСтрока.ЗначениеРеквизитаТип = "DMDocumentType";
		КонецЕсли;
		
		ПравилоОбъект.Записать();
		
	Исключение
		
		Ответ = ИнтеграцияС1СДокументооборот3.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при создании правила интеграции'"),
			ИнтеграцияС1СДокументооборот3.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает структуру таблицы реквизитов объекта ДО.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Имя - Строка
//     * Представление - Строка
//     * Тип - СписокЗначений
//     * ДопРеквизит - Булево
//     * ДопРеквизитID - Строка
//     * ДопРеквизитТип - Строка
//     * ОбязательноеЗаполнение - Булево
//     * ЭтоТаблица - Булево
//     * Таблица - Строка
//
Функция СтруктураТаблицыРеквизитовДО() Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("СписокЗначений"));
	Реквизиты.Колонки.Добавить("ДопРеквизит", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДопРеквизитID", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ДопРеквизитТип", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ТаблицаДляСортировки", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ИмяРеквизитаВДО", Новый ОписаниеТипов("Строка"));
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеОбъектовИС

Функция ДанныеДляЗаполненияПоПравилу()
	
	Данные = Новый Структура;
	Данные.Вставить("ПравилоИнтеграции", Неопределено);
	Данные.Вставить("ОбъектИС", Неопределено);
	Данные.Вставить("РеквизитыОбъектаИС", Неопределено);
	Данные.Вставить("ОбъектXDTO", Неопределено);
	Данные.Вставить("ЯвляетсяЗаявкойНаОплату", Неопределено);
	
	Возврат Данные;
	
КонецФункции

// В случае, когда выражение на встроенном языке возвращает имя или синоним значения
// перечисления - процедура заполняет реквизит объекта соответствующим значением.
// Если тип реквизита не является перечислением - реквизит будет заполнен переданным результатом.
//
// Параметры:
//   Реквизит - Произвольный - реквизит, который требуется заполнить.
//   Результат - Произвольный - результат выполнения выражения на встроенном языке.
//
Процедура ЗаполнитьПоРезультатуВыраженияНаВстроенномЯзыке(Реквизит, Результат)
	
	Если ТипЗнч(Результат) = Тип("Строка") И Результат <> "" И ЭтоПеречисление(Реквизит) Тогда
		ИмяЗначения = СокрЛП(Результат);
		МенеджерПеречисления = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Реквизит);
		МетаданныеРеквизита = Реквизит.Метаданные();
		Если МетаданныеРеквизита.ЗначенияПеречисления.Найти(ИмяЗначения) = Неопределено Тогда
			// Заполним перечисление по переданному синониму
			Реквизит = МенеджерПеречисления.ПустаяСсылка();
			Для Каждого ЗначениеПеречисления Из МетаданныеРеквизита.ЗначенияПеречисления Цикл
				Если ВРег(СокрЛП(ЗначениеПеречисления.Синоним)) = ВРег(ИмяЗначения) Тогда
					Реквизит = МенеджерПеречисления[ЗначениеПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Заполним перечисление по переданному имени
			Реквизит = МенеджерПеречисления[ИмяЗначения];
		КонецЕсли;
	Иначе
		Реквизит = Результат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(Реквизит, ЗначениеСвойстваXDTO, РеквизитМетаданные, ОбъектИС,
		ТипОбъектаИсточника = Неопределено, ИмяРеквизитаОбъектаИсточника = Неопределено, НомерСтроки = Неопределено)
	
	Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда
		
		ТипРеквизита = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПодходящийТип(
			ЗначениеСвойстваXDTO.objectID.type,
			РеквизитМетаданные.Тип.Типы());
		
		ПараметрыВыбора = Новый Соответствие;
		Для Каждого СвязьПараметровВыбора Из РеквизитМетаданные.СвязиПараметровВыбора Цикл
			РазделенныйПуть = СтрРазделить(СвязьПараметровВыбора.ПутьКДанным, ".");
			Если РазделенныйПуть.Количество() = 2 И РазделенныйПуть[0] = РеквизитМетаданные.Таблица Тогда
				Пока ОбъектИС[РеквизитМетаданные.Таблица].Количество() - 1 < НомерСтроки Цикл
					ОбъектИС[РеквизитМетаданные.Таблица].Добавить();
				КонецЦикла;
				Строка = ОбъектИС[РеквизитМетаданные.Таблица][НомерСтроки];
				ПараметрыВыбора[СвязьПараметровВыбора.Имя] = Строка[РазделенныйПуть[1]];
			ИначеЕсли РазделенныйПуть.Количество() = 1 Тогда
				ПараметрыВыбора[СвязьПараметровВыбора.Имя] = ОбъектИС[РазделенныйПуть[0]];
			Иначе
				Продолжить; // прочие варианты пути к данным не поддерживаются
			КонецЕсли;
		КонецЦикла;
		
		Реквизит = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
			ЗначениеСвойстваXDTO,
			ТипРеквизита,
			РеквизитМетаданные.Имя,
			ТипЗнч(ОбъектИС),
			ОбъектИС,,,
			ПараметрыВыбора);
		
	Иначе
		
		ТипРеквизита = РеквизитМетаданные.Тип.Типы()[0];
		МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
		Если МетаданныеТипаРеквизита = Неопределено Тогда
			ПолноеИмяТипаРеквизита = "";
		Иначе
			ПолноеИмяТипаРеквизита = МетаданныеТипаРеквизита.ПолноеИмя();
		КонецЕсли;
		
		ПереопределяемыйРезультат = Неопределено;
		ЗначениеЗаполнения = Новый Структура("ТипXDTOОбъекта, ИмяСвойства, ЗначениеСвойства",
			ТипОбъектаИсточника,
			ИмяРеквизитаОбъектаИсточника,
			ЗначениеСвойстваXDTO);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
			ПереопределяемыйРезультат,
			ЗначениеЗаполнения,
			ТипРеквизита,
			РеквизитМетаданные.Имя,
			ТипЗнч(ОбъектИС),
			ОбъектИС,,,
			ПараметрыВыбора);
		
		Если ПереопределяемыйРезультат <> Неопределено Тогда
			
			Реквизит = ПереопределяемыйРезультат;
			
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипРеквизита)
				И ТипЗнч(ЗначениеСвойстваXDTO) = Тип("Строка")
				И СтрНайти(ПолноеИмяТипаРеквизита, "Справочник.") > 0 Тогда
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяТипаРеквизита);
			Ссылка = Менеджер.НайтиПоНаименованию(ЗначениеСвойстваXDTO, Истина);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Реквизит = Ссылка;
			КонецЕсли;
			
		Иначе
			
			Реквизит = ЗначениеСвойстваXDTO;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПоПравилу(ДанныеДляЗаполненияПоПравилу, Реквизит, ПравилоРеквизита, РеквизитИСМетаданные,
		НомерСтроки = Неопределено, ТекущаяСтрока = Неопределено)
	
	ОбъектXDTO = ДанныеДляЗаполненияПоПравилу.ОбъектXDTO;
	
	Если ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
		// Из указанного значения.
		Реквизит = ПравилоРеквизита.ЗначениеРеквизитаИС;
		
	ИначеЕсли ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда
		// Из реквизита объекта ДО.
		
		ЗначениеСвойства = Неопределено;
		
		Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
			
			Если НомерСтроки = Неопределено Тогда
				// Заполняем реквизит объекта ДО.
				ЗначениеСвойства = ЗначениеСвойстваИзРеквизитаОбъектаXDTO(
					ОбъектXDTO,
					ПравилоРеквизита,
					ДанныеДляЗаполненияПоПравилу.ЯвляетсяЗаявкойНаОплату);
				
			Иначе
				// Заполняем реквизит табличной части объекта ДО.
				РазделеннаяСтрока = СтрРазделить(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, ".", Ложь);
				
				Если РазделеннаяСтрока.Количество() = 1 Тогда // "свойство"
					ЗначениеСвойства = ЗначениеСвойстваИзРеквизитаОбъектаXDTO(
						ОбъектXDTO,
						ПравилоРеквизита,
						ДанныеДляЗаполненияПоПравилу.ЯвляетсяЗаявкойНаОплату);
					
				ИначеЕсли РазделеннаяСтрока.Количество() = 2 Тогда // "список.свойство"
					СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]];
					ЗначениеСвойства = СписокXDTO[НомерСтроки][РазделеннаяСтрока[1]];
					
				ИначеЕсли РазделеннаяСтрока.Количество() = 3 Тогда // "список.список.свойство"
					СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]][РазделеннаяСтрока[1]];
					ЗначениеСвойства = СписокXDTO[НомерСтроки][РазделеннаяСтрока[2]];
					
				Иначе
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'В правилах интеграции указано недопустимое имя реквизита-источника данных заполнения: %1'"), 
						ПравилоРеквизита.ИмяРеквизитаОбъектаДО);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// это дополнительный реквизит ДО
			
			Для Каждого Строка Из ОбъектXDTO.additionalProperties Цикл
				Если Строка.objectID.ID = ПравилоРеквизита.ДополнительныйРеквизитДОID
						И Строка.objectID.type = ПравилоРеквизита.ДополнительныйРеквизитДОТип Тогда
					Если Строка.propertySimpleValue <> Неопределено Тогда
						ЗначениеСвойства = Строка.propertySimpleValue;
					ИначеЕсли Строка.propertyObjectValue <> Неопределено Тогда
						ЗначениеСвойства = Строка.propertyObjectValue;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
			Реквизит,
			ЗначениеСвойства,
			РеквизитИСМетаданные,
			ДанныеДляЗаполненияПоПравилу.ОбъектИС,
			ОбъектXDTO.Тип().Имя,
			ПравилоРеквизита.ИмяРеквизитаОбъектаДО,
			НомерСтроки);
		
	// Из выражения на встроенном языке.
	ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
		
		Если ПравилоРеквизита.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО Тогда
			
			// Выражение уже было выполнено на стороне ДО, его результат находится во входящих данных.
			Если НомерСтроки = Неопределено Тогда
				// Заполняем реквизит объекта ДО.
				ЗначениеXDTO = ЗначениеИзВходящихДанных(
					ОбъектXDTO.expressionResultsForAttributes, ПравилоРеквизита.id);
			Иначе
				// Заполняем реквизит табличной части объекта ДО.
				ТаблицаXDTO = ЗначениеИзВходящихДанных(
					ОбъектXDTO.expressionResultsForTabularSections, ПравилоРеквизита.id);
				ЗначениеXDTO = ТаблицаXDTO.rows[НомерСтроки].attributes[0];
			КонецЕсли;
			
			Если ЗначениеXDTO = Неопределено Тогда
				Возврат;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеXDTO, "error") Тогда
				ВызватьИсключение ЗначениеXDTO.error;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеXDTO, "value") Тогда
				ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
					Реквизит,
					ЗначениеXDTO.value,
					РеквизитИСМетаданные,
					ДанныеДляЗаполненияПоПравилу.ОбъектИС,
					ОбъектXDTO.Тип().Имя,
					ПравилоРеквизита.ИмяРеквизитаОбъектаДО,
					НомерСтроки);
				
			КонецЕсли;
			
		ИначеЕсли ПравилоРеквизита.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС Тогда
			
			// Требуется выполнить выражение на встроенном языке.
			РезультатВыражения = ИнтеграцияС1СДокументооборот3.РезультатВыраженияНаВстроенномЯзыке(
				ПравилоРеквизита.ВычисляемоеВыражение,
				ОбъектXDTO,
				ДанныеДляЗаполненияПоПравилу.ОбъектИС,
				ТекущаяСтрока);
			Если РезультатВыражения <> Неопределено Тогда
				ЗаполнитьПоРезультатуВыраженияНаВстроенномЯзыке(
					Реквизит,
					РезультатВыражения);
				КонецЕсли;
				
		Иначе
			ВызватьИсключение НСтр("ru = 'Не задано место выполнения выражения на встроенном языке.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиТаблицыПоПравилу(ДанныеДляЗаполненияПоПравилу, Таблица, ПравилаЗаполненияСтрок, КолВоСтрок,
		ТаблицаИсточника = Неопределено)
	
	Для НомерСтроки = 0 По КолВоСтрок - 1 Цикл
		НоваяСтрока = Таблица.Добавить();
		Для Каждого ПравилоРеквизита Из ПравилаЗаполненияСтрок Цикл
			РеквизитИСМетаданные = РеквизитМетаданные(
				ДанныеДляЗаполненияПоПравилу.ОбъектИС,
				ДанныеДляЗаполненияПоПравилу.РеквизитыОбъектаИС,
				ПравилоРеквизита.ИмяРеквизитаОбъектаИС,
				ПравилоРеквизита.Таблица);
			ЗаполнитьРеквизитПоПравилу(
				ДанныеДляЗаполненияПоПравилу,
				НоваяСтрока[ПравилоРеквизита.ИмяРеквизитаОбъектаИС],
				ПравилоРеквизита,
				РеквизитИСМетаданные,
				НомерСтроки,
				?(ТаблицаИсточника = Неопределено, Неопределено, ТаблицаИсточника[НомерСтроки]));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоПравилу(ДанныеДляЗаполненияПоПравилу, Таблица, ПравилоРеквизита)
	
	Таблица.Очистить();
	
	ОбъектXDTO = ДанныеДляЗаполненияПоПравилу.ОбъектXDTO;
	ОбъектИС = ДанныеДляЗаполненияПоПравилу.ОбъектИС;
	РеквизитыОбъектаИС = ДанныеДляЗаполненияПоПравилу.РеквизитыОбъектаИС;
	
	Если ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
		
		Если ПравилоРеквизита.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО Тогда
			// Выражение уже было выполнено на стороне ДО, его результат находится во входящих данных.
			ТаблицаXDTO = ЗначениеИзВходящихДанных(
				ОбъектXDTO.expressionResultsForTabularSections,
				ПравилоРеквизита.id);
			Для НомерСтроки = 0 По ТаблицаXDTO.rows.Количество() - 1 Цикл
				СтрокаXDTO = ТаблицаXDTO.rows[НомерСтроки];
				НоваяСтрока = Таблица.Добавить();
				
				ОтборРеквизитыТаблицы = Новый Структура("Таблица", ПравилоРеквизита.ИмяРеквизитаОбъектаИС);
				Для Каждого Реквизит Из РеквизитыОбъектаИС.НайтиСтроки(ОтборРеквизитыТаблицы) Цикл
					ЗначениеXDTO = ЗначениеИзВходящихДанных(СтрокаXDTO.attributes, Реквизит.Имя);
					Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеXDTO, "error") Тогда
						ВызватьИсключение ЗначениеXDTO.error;
						
					ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеXDTO, "value") Тогда
						ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
							НоваяСтрока[Реквизит.Имя],
							ЗначениеXDTO.value,
							РеквизитМетаданные(ОбъектИС, РеквизитыОбъектаИС, ЗначениеXDTO.name, ПравилоРеквизита.ИмяРеквизитаОбъектаИС),
							ОбъектИС,,,
							НомерСтроки);
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ПравилоРеквизита.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС Тогда
			// Требуется выполнить выражение на встроенном языке.
			РезультатВыражения = ИнтеграцияС1СДокументооборот3.РезультатВыраженияНаВстроенномЯзыке(
				ПравилоРеквизита.ВычисляемоеВыражение,
				ОбъектXDTO,
				ОбъектИС);
			Для Каждого Строка Из РезультатВыражения Цикл
				НоваяСтрока = Таблица.Добавить();
				Для Каждого Колонка Из РезультатВыражения.Колонки Цикл
					Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
						ЗаполнитьПоРезультатуВыраженияНаВстроенномЯзыке(
							НоваяСтрока[Колонка.Имя],
							Строка[Колонка.Имя]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Не задано место выполнения выражения на встроенном языке.'");
			
		КонецЕсли;
		
	Иначе
		
		ПравилаЗаполненияСтрок = Новый Массив;
		
		ОтборРеквизитыТаблицы = Новый Структура("Таблица", ПравилоРеквизита.ИмяРеквизитаОбъектаИС);
		Для Каждого Реквизит Из РеквизитыОбъектаИС.НайтиСтроки(ОтборРеквизитыТаблицы) Цикл
			// ПравилаЗаполненияСтрок должны быть отсортированы таким образом, чтобы
			// объекты, имеющие владельца, грузились после того, как загружен их владелец.
			// Например, единица измерения с владельцем номенклатура должна грузиться после
			// загрузки самой номенклатуры.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаИС", Реквизит.Имя);
			ПараметрыОтбора.Вставить("ЭтоТаблица", Ложь);
			ПараметрыОтбора.Вставить("Таблица", ПравилоРеквизита.ИмяРеквизитаОбъектаИС);
			
			НайденныеПравилаРеквизитов =
				ДанныеДляЗаполненияПоПравилу.ПравилоИнтеграции.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеПравилаРеквизитов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПравилаЗаполненияСтрок.Добавить(НайденныеПравилаРеквизитов[0]);
		КонецЦикла;
		
		СписокXDTO = Неопределено;
		Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда
			РазделеннаяСтрока = СтрРазделить(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, ".", Ложь);
			Если РазделеннаяСтрока.Количество() = 1 Тогда
				СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]];
			Иначе
				СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]][РазделеннаяСтрока[1]];
			КонецЕсли;
			КолВоСтрок = СписокXDTO.Количество();
			
		ИначеЕсли ПравилоРеквизита.Вариант = ВариантРеквизитТаблицы() Тогда
			КолВоСтрок = 1;
			
		Иначе
			Возврат;
			
		КонецЕсли;
		
		ЗаполнитьСтрокиТаблицыПоПравилу(
			ДанныеДляЗаполненияПоПравилу,
			Таблица,
			ПравилаЗаполненияСтрок,
			КолВоСтрок,
			СписокXDTO);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеИзВходящихДанных(Список, ИдентификаторЗначения)
	
	Для Каждого Элемент Из Список Цикл
		Если Элемент.name = ИдентификаторЗначения Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЗначениеСвойстваИзРеквизитаОбъектаXDTO(ОбъектXDTO, ПравилоРеквизита, ЯвляетсяЗаявкойНаОплату)
	
	Если ЯвляетсяЗаявкойНаОплату И ПравилоРеквизита.ИмяРеквизитаОбъектаДО = "recipient" Тогда
		ЗначениеСвойства = СторонаЗаявкиНаОплатуXDTO(ОбъектXDTO, "recipient");
		
	ИначеЕсли СтрНайти(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, "status_") = 1 Тогда
		ЗначениеСвойства = Неопределено;
		ВидДействияID = Прав(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, 36);
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "statusByActionTypeRows") Тогда
			Для Каждого СтрокаСтатус Из ОбъектXDTO.statusByActionTypeRows.rows Цикл
				Если СтрокаСтатус.actionType.objectID.id = ВидДействияID Тогда
					ЗначениеСвойства = СтрокаСтатус.status;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ЗначениеСвойства = ОбъектXDTO[ПравилоРеквизита.ИмяРеквизитаОбъектаДО];
		
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

Функция РеквизитМетаданные(ОбъектИС, РеквизитыОбъектаИС, ИмяРеквизита, ИмяТаблицы)
	
	РеквизитМетаданныеСтроки = РеквизитыОбъектаИС.НайтиСтроки(
		Новый Структура("Имя, Таблица", ИмяРеквизита, ИмяТаблицы));
	Если РеквизитМетаданныеСтроки.Количество() = 1 Тогда
		РеквизитМетаданные = РеквизитМетаданныеСтроки[0];
	Иначе
		Если ИмяТаблицы = "" Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'В метаданных объекта ""%1"" не удалось найти реквизит с именем ""%2""'"),
				ОбъектИС,
				ИмяРеквизита);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'В метаданных объекта ""%1"" не удалось найти реквизит таблицы ""%2"" с именем ""%3""'"),
				ОбъектИС,
				ИмяТаблицы,
				ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитМетаданные;
	
КонецФункции

Функция СторонаЗаявкиНаОплатуXDTO(ОбъектXDTO, ПредопределенноеИмяСтороны)
	
	Результат = Неопределено;
	
	УстановленаТЧСтороны = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "partyRows");
	
	Если УстановленаТЧСтороны Тогда
		Для Каждого СторонаXDTO Из ОбъектXDTO.partyRows.rows Цикл
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СторонаXDTO, "paymentRequestParty")
					И НРег(СторонаXDTO.paymentRequestParty) = НРег(ПредопределенноеИмяСтороны) Тогда
				Результат = СторонаXDTO.party;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке.
//
Функция ВариантВыражение()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение.
//
Функция ВариантЗначение()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта.
//
Функция ВариантРеквизит()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта.
//
Функция ВариантРеквизитТаблицы()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы;
	
КонецФункции

// Добавляет дополнительный реквизит в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьДополнительныйРеквизит(Реквизиты, Представление, Тип, ДопРеквизитID, ДопРеквизитТип)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ДопРеквизит = Истина;
	НоваяСтрока.ДопРеквизитID = ДопРеквизитID;
	НоваяСтрока.ДопРеквизитТип = ДопРеквизитТип;
	
КонецПроцедуры

// Добавляет реквизит в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьРеквизит(Реквизиты, Имя, Представление, Тип, ОбязательноеЗаполнение = Ложь, ИмяРеквизитаВДО = "")
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ИмяРеквизитаВДО = ИмяРеквизитаВДО;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	
КонецПроцедуры

// Добавляет реквизит в подчиненную строку таблицы, с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьРеквизитТаблицы(Реквизиты, ИмяТаблицы, Имя, Представление, Тип, ОбязательноеЗаполнение = Ложь)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Таблица = ИмяТаблицы;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	
КонецПроцедуры

// Добавляет таблицу в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьТаблицу(Реквизиты, Имя, Представление)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.ЭтоТаблица = Истина;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Процедура ПроверитьПравилаЗаполненияРеквизитовИС(ПравилоИнтеграции, ОбъектИС, ОбъектXDTO, РеквизитыОбъектаИС,
		РеквизитыТекущегоВидаДокументаДО, ВсеРеквизитыОбъектаДО, СписокОшибок)
	
	Для Каждого Правило Из ПравилоИнтеграции.ПравилаЗаполненияРеквизитовИС Цикл
		
		РеквизитИС = РеквизитыОбъектаИС.Найти(Правило.ИмяРеквизитаОбъектаИС, "Имя");
		ТаблицаИС = РеквизитыОбъектаИС.Найти(Правило.Таблица, "Имя");
		ПредставлениеРеквизитаИС = "";
		ПредставлениеТипаРеквизитаИС = "";
		
		Если Правило.ЭтоТаблица Тогда
			ПредставлениеТипаРеквизитаИС = НСтр("ru = 'таблицы ИС'");
			
		ИначеЕсли Правило.ЭтоДополнительныйРеквизитИС Тогда
			ПредставлениеТипаРеквизитаИС = НСтр("ru = 'доп. реквизита ИС'");
			
		ИначеЕсли Не ЗначениеЗаполнено(Правило.Таблица) Тогда
			ПредставлениеТипаРеквизитаИС = НСтр("ru = 'реквизита ИС'");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Правило.Таблица) Тогда
			ПредставлениеРеквизитаИС = СтрШаблон(НСтр("ru = 'реквизита ""%1"" таблицы ИС ""%2""'"),
				?(РеквизитИС = Неопределено, Правило.ИмяРеквизитаОбъектаИС, РеквизитИС.Представление),
				?(ТаблицаИС = Неопределено, Правило.Таблица, ТаблицаИС.Представление));
			
		Иначе
			ПредставлениеРеквизитаИС = СтрШаблон("%1 ""%2""",
				ПредставлениеТипаРеквизитаИС,
				?(РеквизитИС = Неопределено, Правило.ИмяРеквизитаОбъектаИС, РеквизитИС.Представление));
			
		КонецЕсли;
		
		Если Правило.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда
			
			Если Не Правило.ЭтоДополнительныйРеквизитДО Тогда
				
				РазделеннаяСтрока = СтрРазделить(Правило.ИмяРеквизитаОбъектаДО, ".", Ложь);
				Если РазделеннаяСтрока.Количество() = 1 Тогда // "свойство"
					Таблица = "";
					ИмяРеквизита = Правило.ИмяРеквизитаОбъектаДО;
					
				ИначеЕсли РазделеннаяСтрока.Количество() = 2 Тогда // "список.свойство"
					Таблица = "";
					ИмяРеквизита = СтрШаблон("%1.%2", РазделеннаяСтрока[0], РазделеннаяСтрока[1]);
					
				ИначеЕсли РазделеннаяСтрока.Количество() = 3 Тогда // "список.список.свойство"
					Таблица = СтрШаблон("%1.%2", РазделеннаяСтрока[0], РазделеннаяСтрока[1]);
					ИмяРеквизита = РазделеннаяСтрока[2];
					
				Иначе
					СписокОшибок.Добавить(
						СтрШаблон(
							НСтр("ru = 'Ошибка в правиле заполнения %1 (Закладка ""Получение из 1С:Документооборота""):
								|Указано недопустимое имя реквизита-источника данных заполнения: %2'"),
									ПредставлениеРеквизитаИС,
									Правило.ИмяРеквизитаОбъектаДО));
					Продолжить;
					
				КонецЕсли;
				
				Отбор = Новый Структура("Имя, Таблица", ИмяРеквизита, Таблица);
				
				НайденныеСтроки = РеквизитыТекущегоВидаДокументаДО.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					ВсеРеквизитыДОРеквизит = ВсеРеквизитыОбъектаДО.НайтиСтроки(Отбор);
					ВсеРеквизитыДОТаблица = ВсеРеквизитыОбъектаДО.НайтиСтроки(Новый Структура("Имя", Таблица));
					
					Если Правило.ЭтоТаблица Тогда
						СписокОшибок.Добавить(
							СтрШаблон(
								НСтр("ru = 'Ошибка в правиле заполнения %1 (Закладка ""Получение из 1С:Документооборота""):
									|выбран вариант заполнения из несуществующей таблицы ""%2""'"),
										ПредставлениеРеквизитаИС,
										?(ВсеРеквизитыДОРеквизит.Количество() = 0,
											Правило.ИмяРеквизитаОбъектаДО,
											ВсеРеквизитыДОРеквизит[0].Представление)));
					Иначе
						Если ЗначениеЗаполнено(Таблица) Тогда
							СписокОшибок.Добавить(
								СтрШаблон(
									НСтр("ru = 'Ошибка в правиле заполнения %1 (Закладка ""Получение из 1С:Документооборота""):
										|выбран вариант заполнения из реквизита ""%2"" несуществующей таблицы ""%3""'"),
											ПредставлениеРеквизитаИС,
											?(ВсеРеквизитыДОРеквизит.Количество() = 0,
												Правило.ИмяРеквизитаОбъектаДО,
												ВсеРеквизитыДОРеквизит[0].Представление),
											?(ВсеРеквизитыДОТаблица.Количество() = 0,
												Таблица,
												ВсеРеквизитыДОТаблица[0].Представление)));
						Иначе
							СписокОшибок.Добавить(
								СтрШаблон(
									НСтр("ru = 'Ошибка в правиле заполнения %1 (Закладка ""Получение из 1С:Документооборота""):
										|выбран вариант заполнения из несуществующего реквизита ""%2""'"),
											ПредставлениеРеквизитаИС,
											?(ВсеРеквизитыДОРеквизит.Количество() = 0,
												Правило.ИмяРеквизитаОбъектаДО,
												ВсеРеквизитыДОРеквизит[0].Представление)));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе // дополнительный реквизит ДО
				
				Отбор = Новый Структура("ДопРеквизитID, ДопРеквизитТип",
					Правило.ДополнительныйРеквизитДОID,
					Правило.ДополнительныйРеквизитДОТип);
				НайденныеСтроки = РеквизитыТекущегоВидаДокументаДО.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					СписокОшибок.Добавить(
						СтрШаблон(
							НСтр("ru = 'Ошибка в правиле заполнения %1 (Закладка ""Получение из 1С:Документооборота""):
								|выбран вариант заполнения из несуществующего доп. реквизита ""%2""'"),
									ПредставлениеРеквизитаИС,
									Правило.ДополнительныйРеквизитДОID));
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Правило.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
			
			ТаблицаИсточник = "";
			Если ЗначениеЗаполнено(Правило.Таблица) Тогда
				ВышестоящееПравилоСтроки = ПравилоИнтеграции.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(
					Новый Структура("ИмяРеквизитаОбъектаИС, ЭтоТаблица", Правило.Таблица, Истина));
				Если ВышестоящееПравилоСтроки.Количество() = 1 Тогда
					ТаблицаИсточник = ВышестоящееПравилоСтроки[0].ИмяРеквизитаОбъектаДО;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ПроверитьВыражениеПравилаЗагрузки(
					Правило.ВычисляемоеВыражение,
					Правило.МестоВыполненияВыражения,
					ПравилоИнтеграции.ТипОбъектаДО,
					ПравилоИнтеграции.ТипОбъектаИС,
					ОбъектXDTO,
					ОбъектИС,
					ТаблицаИсточник);
			Исключение
				ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				СписокОшибок.Добавить(
					СтрШаблон(
						НСтр("ru = 'Ошибка в правиле заполнения %1 (Закладка ""Получение из 1С:Документооборота""):
							|Не удалось выполнить выражение на встроенном языке по причине:
							|""%2""'"),
								ПредставлениеРеквизитаИС,
								ТекстИсключения));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если переданное значение является перечислением.
//
Функция ЭтоПеречисление(Значение)
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение));
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗарегистрироватьПравилаИнтеграцииКОбработкеДляПереходаНаНовуюВерсию(
		Параметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ОбработатьПравилаИнтеграцииДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли