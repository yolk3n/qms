#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВопросЗадан = Ложь;
	
	СокращенноеНаименованиеКонфигурации =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
		Элементы.ТипОбъектаИС.Заголовок = СтрШаблон(НСтр("ru = 'Объект %1'"), СокращенноеНаименованиеКонфигурации);
		Элементы.ГруппаПолучениеИзДО.Заголовок = СтрШаблон(НСтр("ru = 'Заполнение реквизитов объекта %1'"),
			СокращенноеНаименованиеКонфигурации);
		Элементы.КлючевыеРеквизитыИСПредставление.Заголовок = СтрШаблон(НСтр("ru = 'Реквизит объекта %1'"),
			СокращенноеНаименованиеКонфигурации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Параметры.ТипОбъектаИС) Тогда
		Объект.ТипОбъектаИС = Параметры.ТипОбъектаИС;
		Элементы.ТипОбъектаИС.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
		
		ОбъектПотребителя = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаИС);
		Если ОбъектПотребителя <> Неопределено Тогда
			Объект.ПредставлениеОбъектаИС = ?(ОбъектПотребителя.Синоним = "",
				ОбъектПотребителя.Имя,
				ОбъектПотребителя.Синоним);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Объект.ПредставлениеОбъектаИС) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Элементы.ТипОбъектаИС.Заголовок);
		Сообщение.Поле = "Объект.ПредставлениеОбъектаИС";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПредставлениеОбъектаДО) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Элементы.ТипОбъектаДО.Заголовок);
		Сообщение.Поле = "Объект.ПредставлениеОбъектаДО";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИнтеграцияС1СДокументооборотом3_ЗаписаноПравило");
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПравилаЗаполненияРеквизитовИС.Очистить();
	Для Каждого Правило Из ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы() Цикл
		Если ПравилоЗагрузкиЗаполнено(Правило, ПравилаЗаполненияРеквизитовИС) Тогда
			НовоеПравило = ТекущийОбъект.ПравилаЗаполненияРеквизитовИС.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПравило, Правило);
			Если Правило.ЭтоТаблица Тогда
				Для Каждого ПодчиненноеПравило Из Правило.ПолучитьЭлементы() Цикл
					Если ПравилоЗагрузкиЗаполнено(ПодчиненноеПравило, ПравилаЗаполненияРеквизитовИС) Тогда
						НовоеПравило = ТекущийОбъект.ПравилаЗаполненияРеквизитовИС.Добавить();
						ЗаполнитьЗначенияСвойств(НовоеПравило, ПодчиненноеПравило);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.КлючевыеРеквизитыДО.Очистить();
	Для Каждого Строка Из КлючевыеРеквизитыДО Цикл
		Если Строка.Ключевой И ЗначениеЗаполнено(Строка.Имя) Тогда
			ЗаполнитьЗначенияСвойств(ТекущийОбъект.КлючевыеРеквизитыДО.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.КлючевыеРеквизитыИС.Очистить();
	Для Каждого Строка Из КлючевыеРеквизитыИС Цикл
		Если Строка.Ключевой И ЗначениеЗаполнено(Строка.Имя) Тогда
			ЗаполнитьЗначенияСвойств(ТекущийОбъект.КлючевыеРеквизитыИС.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ПроверитьПравило(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" И Источник <> ЭтотОбъект Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииОбъектаИС("", "")
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаИСНачалоВыбораЗавершение", ЭтотОбъект);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ТипОбъектаИСНачалоВыбора(
		Объект.ТипОбъектаИС,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПриИзмененииОбъектаИС(Результат.Имя, Результат.Синоним);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыбранныйЭлемент = СписокМетаданных.НайтиПоЗначению(ВыбранноеЗначение);
		ПриИзмененииОбъектаИС(ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданных Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданных Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ПриИзмененииОбъектаИС(ДанныеВыбора[0].Значение, ДанныеВыбора[0].Представление);
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НайденныеПравила = ПодходящиеПравилаЗагрузкиВДО.НайтиСтроки(
		Новый Структура("ПравилоЗагрузкиВДОID", Объект.ПравилоЗагрузкиДанныхВДО));
	
	Если НайденныеПравила.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьОбъектДО(НайденныеПравила[0].НавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииОбъектаДО(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаДОНачалоВыбораЗавершение", ЭтотОбъект);
	
	Если ПодходящиеПравилаЗагрузкиВДО.Количество() = 0 Тогда
		ЗаполнитьПодходящиеПравилаЗагрузкиВДО();
	КонецЕсли;
	
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("ТекущаяСтрока", Объект.ПравилоЗагрузкиДанныхВДО);
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ВыборПравилаЗагрузкиДанныхВДО",
		ПараметрФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПриИзмененииОбъектаДО(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ПодходящиеПравилаЗагрузкиВДО.Количество() = 0 Тогда
			ЗаполнитьПодходящиеПравилаЗагрузкиВДО();
		КонецЕсли;
		
		Строки = ПодходящиеПравилаЗагрузкиВДО.НайтиСтроки(Новый Структура("ПравилоЗагрузкиВДОID", ВыбранноеЗначение));
		Если Строки.Количество() = 1 Тогда
			ПриИзмененииОбъектаДО(Строки[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ПодходящиеПравилаЗагрузкиВДО.Количество() = 0 Тогда
		ЗаполнитьПодходящиеПравилаЗагрузкиВДО();
	КонецЕсли;
	
	Для Каждого ЭлементВыбора Из ПодходящиеПравилаЗагрузкиВДО Цикл
		Если Найти(ВРег(ЭлементВыбора.ПравилоЗагрузкиВДО), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.ПравилоЗагрузкиВДОID, ЭлементВыбора.ПравилоЗагрузкиВДО);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ПодходящиеПравилаЗагрузкиВДО.Количество() = 0 Тогда
		ЗаполнитьПодходящиеПравилаЗагрузкиВДО();
	КонецЕсли;
	
	Для Каждого ЭлементВыбора Из ПодходящиеПравилаЗагрузкиВДО Цикл
		Если Найти(ВРег(ЭлементВыбора.ПравилоЗагрузкиВДО), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.ПравилоЗагрузкиВДОID, ЭлементВыбора.ПравилоЗагрузкиВДО);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		Строки = ПодходящиеПравилаЗагрузкиВДО.НайтиСтроки(
			Новый Структура("ПравилоЗагрузкиВДОID", ДанныеВыбора[0].Значение));
		Если Строки.Количество() = 1 Тогда
			ПриИзмененииОбъектаДО(Строки[0]);
		КонецЕсли;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКлючевыеРеквизитыДО

&НаКлиенте
Процедура КлючевыеРеквизитыДОКлючевойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыДО.ТекущиеДанные;
	НомерТекущейСтроки = КлючевыеРеквизитыДО.Индекс(ТекущиеДанные);
	КлючевыеРеквизитыДО.Сортировать("Ключевой УБЫВ, Представление");
	Элементы.КлючевыеРеквизитыДО.ТекущаяСтрока = КлючевыеРеквизитыДО[НомерТекущейСтроки].ПолучитьИдентификатор();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыДО.ТекущиеДанные;
	
	// Настроим поле ввода для примитивных типов.
	Если ТекущиеДанные.Тип.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ЗначениеРеквизита = "";
		Возврат;
	Иначе
		ПервыйТип = ТекущиеДанные.Тип[0].Значение;
		Элементы.КлючевыеРеквизитыДОЗначениеРеквизита.КнопкаРегулирования =
			(ПервыйТип = "Число" Или ПервыйТип = "Дата");
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЗначениеРеквизита) = Тип("Число")
			Или ТипЗнч(ТекущиеДанные.ЗначениеРеквизита) = Тип("Дата")
			Или ТипЗнч(ТекущиеДанные.ЗначениеРеквизита) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеРеквизитаДОЗавершениеВводаЗначения", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыбратьЗначениеРеквизитаДО(
		ЭтотОбъект,
		Элементы.КлючевыеРеквизитыДОЗначениеРеквизита,
		ТекущиеДанные.Тип,
		ТекущиеДанные.Представление,
		ТекущиеДанные.ЗначениеРеквизита,
		ТекущиеДанные.ЗначениеРеквизитаID,
		ТекущиеДанные.ЗначениеРеквизитаТип,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеРеквизитаДОЗавершениеВводаЗначения(Результат, ПараметрыОповещения) Экспорт
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыДО.ТекущиеДанные;
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ТекущиеДанные.ЗначениеРеквизита = Результат.РеквизитПредставление;
			ТекущиеДанные.ЗначениеРеквизитаID = Результат.РеквизитID;
			ТекущиеДанные.ЗначениеРеквизитаТип = Результат.РеквизитТип;
		Иначе
			ТекущиеДанные.ЗначениеРеквизита = Результат;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОЗначениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыДО.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные.ЗначениеРеквизита = ВыбранноеЗначение.name;
		ТекущиеДанные.ЗначениеРеквизитаID = ВыбранноеЗначение.ID;
		ТекущиеДанные.ЗначениеРеквизитаТип = ВыбранноеЗначение.type;
	Иначе
		ТекущиеДанные.ЗначениеРеквизита = ВыбранноеЗначение;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОЗначениеРеквизитаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыДО.ТекущиеДанные;
	
	// Настроим поле ввода для примитивных типов.
	Если ТекущиеДанные.Тип.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ЗначениеРеквизита = "";
		Текст = "";
	Иначе
		ПервыйТип = ТекущиеДанные.Тип[0].Значение;
		Элементы.КлючевыеРеквизитыДОЗначениеРеквизита.КнопкаРегулирования =
			(ПервыйТип = "Число" Или ПервыйТип = "Дата");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Если ПервыйТип = "Строка"
				Или ПервыйТип = "Булево"
				Или ПервыйТип = "Дата"
				Или ПервыйТип = "Число" Тогда
			Возврат;
		КонецЕсли;
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			ТекущиеДанные.Тип, ДанныеВыбора, Текст, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОЗначениеРеквизитаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыДО.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ПервыйТип = ТекущиеДанные.Тип[0].Значение;
		Если ПервыйТип = "Строка"
				Или ПервыйТип = "Булево"
				Или ПервыйТип = "Дата"
				Или ПервыйТип = "Число" Тогда
			Возврат;
		КонецЕсли;
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			ТекущиеДанные.Тип, ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			КлючевыеРеквизитыДОЗначениеРеквизитаОбработкаВыбора(
				Элементы.КлючевыеРеквизитыДОЗначениеРеквизита,
				ДанныеВыбора[0].Значение,
				СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыДОЗначениеРеквизитаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКлючевыеРеквизитыИС

&НаКлиенте
Процедура КлючевыеРеквизитыИСКлючевойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыИС.ТекущиеДанные;
	НомерТекущейСтроки = КлючевыеРеквизитыИС.Индекс(ТекущиеДанные);
	КлючевыеРеквизитыИС.Сортировать("Ключевой УБЫВ, Представление");
	Элементы.КлючевыеРеквизитыИС.ТекущаяСтрока = КлючевыеРеквизитыИС[НомерТекущейСтроки].ПолучитьИдентификатор();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыИСЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыИС.ТекущиеДанные;
	
	// Настроим поле ввода для примитивных типов.
	ПервыйТип = ТекущиеДанные.Тип.Типы()[0];
	Элементы.КлючевыеРеквизитыИСЗначениеРеквизита.КнопкаРегулирования =
		(ПервыйТип = Тип("Число") Или ПервыйТип = Тип("Дата"));
	
	Если ТипЗнч(ТекущиеДанные.ЗначениеРеквизита) = Тип("Число")
			Или ТипЗнч(ТекущиеДанные.ЗначениеРеквизита) = Тип("Дата")
			Или ТипЗнч(ТекущиеДанные.ЗначениеРеквизита) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеРеквизитаИСЗавершениеВводаЗначения", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыбратьЗначениеРеквизитаИС(
		ЭтотОбъект,
		Элементы.КлючевыеРеквизитыИСЗначениеРеквизита,
		ТекущиеДанные.Тип,
		ТекущиеДанные.Представление,
		ТекущиеДанные.ЗначениеРеквизита,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначениеРеквизитаИСЗавершениеВводаЗначения(Результат, ПараметрыОповещения) Экспорт
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыИС.ТекущиеДанные;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные.ЗначениеРеквизита = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыИСЗначениеРеквизитаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КлючевыеРеквизитыИС.ТекущиеДанные;
	
	// Настроим поле ввода для примитивных типов.
	ПервыйТип = ТекущиеДанные.Тип.Типы()[0];
	Элементы.КлючевыеРеквизитыИСЗначениеРеквизита.КнопкаРегулирования =
		(ПервыйТип = Тип("Число") Или ПервыйТип = Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыИСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыИСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеРеквизитыИСЗначениеРеквизитаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполненияРеквизитовИС

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовИС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Родитель.Вариант = ВариантВыражение() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Таблица заполняется результатом выражения на встроенном языке,
					|поэтому правила для отдельных реквизитов не нужны.'"));
			Возврат;
		КонецЕсли;
		Если Родитель.Вариант = ВариантПустой() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Вначале нужно выбрать вариант заполнения таблицы.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Вариант");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ТипРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаИС");
	ПараметрыФормы.Вставить("ВычисляемоеВыражение");
	ПараметрыФормы.Вставить("МестоВыполненияВыражения");
	ПараметрыФормы.Вставить("Обновлять");
	ПараметрыФормы.Вставить("ЭтоДополнительныйРеквизитДО");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДОID");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДОТип");
	ПараметрыФормы.Вставить("ЭтоДополнительныйРеквизитИС");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитИС");
	ПараметрыФормы.Вставить("Ключевой");
	ПараметрыФормы.Вставить("ЭтоТаблица");
	ПараметрыФормы.Вставить("Зависимый", Ложь);
	ПараметрыФормы.Вставить("ОбновлятьРодитель");
	ПараметрыФормы.Вставить("РежимИзмененияДанныхПроведенногоДокумента");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ПараметрыФормы.Зависимый = Истина;
		ПараметрыФормы.ОбновлятьРодитель = Родитель.Обновлять;
		ПараметрыФормы.РежимИзмененияДанныхПроведенногоДокумента = Родитель.РежимИзмененияДанныхПроведенногоДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Таблица) Тогда
		Если Родитель.Вариант = ВариантРеквизит() Тогда
			ПараметрыФормы.Вставить("Таблица", Родитель.ИмяРеквизитаОбъектаДО);
		Иначе
			ПараметрыФормы.Вставить("Таблица", "");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РеквизитыОбъектаДО", РеквизитыОбъектаДО);
	ПараметрыФормы.Вставить("ТипОбъектаИС", Объект.ТипОбъектаИС);
	ПараметрыФормы.Вставить("ТипОбъектаДО", Объект.ТипОбъектаДО);
	ПараметрыФормы.Вставить("ВидДокументаДО", Объект.ВидДокументаДОID);
	
	ЗаполняетсяДокумент = СтрНачинаетсяС(Объект.ТипОбъектаИС, "Документ.");
	ПараметрыФормы.Вставить("ЗаполняетсяДокумент", ЗаполняетсяДокумент);
	
	Если ТекущиеДанные.ЭтоТаблица Тогда
		ОткрываемаяФорма = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаПравилаЗагрузкиДляТаблицы"
	Иначе
		ОткрываемаяФорма = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаПравилаЗагрузки"
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПравилаЗаполненияРеквизитовИСПередНачаломИзмененияЗавершение",
		ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму(
		ОткрываемаяФорма,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовИС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовИСПередУдалениемЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Очистить правило заполнения реквизита?'");
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Кнопки = Новый СписокЗначений;
	
	Если Модифицированность Тогда
		Если Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Для снятия пометки на удаление необходимо записать внесенные изменения'");
			Кнопки.Добавить("Записать", НСтр("ru = 'Записать и снять пометку'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для пометки на удаление необходимо записать внесенные изменения'");
			Кнопки.Добавить("Записать", НСтр("ru = 'Записать и пометить'"));
		КонецЕсли;
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	Иначе
		Если Объект.ПометкаУдаления Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				Строка(Объект.Ссылка));
		Иначе
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				Строка(Объект.Ссылка));
		КонецЕсли;
		Кнопки.Добавить("Записать", НСтр("ru = 'Да'"));
		Кнопки.Добавить("Отмена", НСтр("ru = 'Нет'"));
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПометитьНаУдалениеСнятьПометкуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , "Записать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеСнятьПометкуЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да И Ответ <> "Записать" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПометкаУдаления = Не Объект.ПометкаУдаления;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	НужноЗадатьВопрос = Ложь;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Строка.ВычисляемоеВыражение)
				Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаИС)
				Или ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаДО) Тогда
			НужноЗадатьВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноЗадатьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Правила будут заполнены по умолчанию. Заполнить?'");
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
			Оповещение,
			ТекстВопроса,,,
			КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		УстановитьДоступность();
		Если Не ВопросЗадан
				И ЗначениеЗаполнено(Объект.ТипОбъектаДО)
				И ЗначениеЗаполнено(Объект.ТипОбъектаИС)
				И Объект.ПравилаЗаполненияРеквизитовИС.Количество() = 0
				И ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы().Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Заполнить правила интеграции по умолчанию?'");
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
				Оповещение,
				ТекстВопроса,,,
				КодВозвратаДиалога.Нет);
			ВопросЗадан = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектаИС(Имя, Синоним)
	
	Если Объект.ТипОбъектаИС = Имя Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТипОбъектаИС = Имя;
	Объект.ПредставлениеОбъектаИС = Синоним;
	Объект.ПравилоЗагрузкиДанныхВДО = "";
	Объект.ТипОбъектаДО = "";
	Объект.ПредставлениеОбъектаДО = "";
	Модифицированность = Истина;
	ЗаполнитьПоУмолчаниюНаСервере(Истина);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектаДО(СтрокаПодходящиеПравилаЗагрузкиВДО)
	
	Объект.ПравилоЗагрузкиДанныхВДО = "";
	Объект.ПредставлениеОбъектаДО = "";
	Объект.ТипОбъектаДО = "";
	Объект.ВидДокументаДО = "";
	Объект.ВидДокументаДОID = "";
	
	Если СтрокаПодходящиеПравилаЗагрузкиВДО <> Неопределено Тогда
		Объект.ПравилоЗагрузкиДанныхВДО = СтрокаПодходящиеПравилаЗагрузкиВДО.ПравилоЗагрузкиВДОID;
		Объект.ПредставлениеОбъектаДО = СтрокаПодходящиеПравилаЗагрузкиВДО.ПравилоЗагрузкиВДО;
		Объект.ТипОбъектаДО = СтрокаПодходящиеПравилаЗагрузкиВДО.ТипОбъектаДО;
		Объект.ВидДокументаДО = СтрокаПодходящиеПравилаЗагрузкиВДО.ВидДокументаДО;
		Объект.ВидДокументаДОID = СтрокаПодходящиеПравилаЗагрузкиВДО.ВидДокументаДОID;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьРеквизитыДокументооборота();
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаДО) И ЗначениеЗаполнено(Объект.ПредставлениеОбъектаДО) Тогда
		Оповещение = Новый ОписаниеОповещения("ПриИзмененииОбъектаДОЗавершение", ЭтотОбъект);
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Установить заполнение реквизитов из объекта ""%1""?'"),
			Объект.ПредставлениеОбъектаДО);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
			Оповещение,
			ТекстВопроса,,,
			КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоУмолчаниюНаСервере(, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектаДОЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюНаСервере();
	Иначе
		ЗаполнитьПоУмолчаниюНаСервере(, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ПравилаЗаполненияРеквизитовИСПередНачаломИзмененияЗавершение".
//
// Параметры:
//   Результат - Структура:
//     * Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов
//     * ВычисляемоеВыражение - Строка
//     * ДополнительныйРеквизитДОID - Строка
//     * ДополнительныйРеквизитДОТип - Строка
//     * ЗначениеРеквизитаИС - Неопределено
//     * ИмяРеквизитаОбъектаДО - Неопределено
//     * Картинка - Число
//     * Ключевой - Булево
//     * Обновлять - Булево
//     * ПредставлениеРеквизитаОбъектаДО - Неопределено
//     * РежимИзмененияДанныхПроведенногоДокумента - ПеречислениеСсылка.
//         РежимИзмененияПроведенногоДокументаДанными1СДокументооборота
//     * ЭтоДополнительныйРеквизитДО - Булево
//   ТекущиеДанные - ДанныеФормыЭлементДерева:
//     * Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов
//     * ВычисляемоеВыражение - Строка
//     * ДополнительныйРеквизитДОID - Строка
//     * ДополнительныйРеквизитДОТип - Строка
//     * ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//     * ДоступноРедактирование - Булево
//     * ЗначениеРеквизитаИС - Неопределено
//     * ИмяРеквизитаОбъектаДО - Строка
//     * ИмяРеквизитаОбъектаИС - Строка
//     * Картинка - Число
//     * Ключевой - Булево
//     * Обновлять - Булево
//     * Пояснение - Строка
//     * ПредставлениеРеквизитаОбъектаДО - Строка
//     * ПредставлениеРеквизитаОбъектаИС - Строка
//     * РежимИзмененияДанныхПроведенногоДокумента - ПеречислениеСсылка.
//         РежимИзмененияПроведенногоДокументаДанными1СДокументооборота
//     * Таблица - Строка
//     * ТипРеквизитаОбъектаИС - ОписаниеТипов
//     * ЭтоДополнительныйРеквизитДО - Булево
//     * ЭтоДополнительныйРеквизитИС - Булево
//     * ЭтоТаблица - Булево
//
&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередНачаломИзмененияЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Модифицированность = Истина;
		
		Если ТекущиеДанные.ЭтоТаблица Тогда // очистим подчиненные, переставшие соответствовать
			
			ПодчиненныеПравила = ТекущиеДанные.ПолучитьЭлементы();
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				
				ПодчиненноеПравило.Обновлять = ТекущиеДанные.Обновлять;
				ПодчиненноеПравило.РежимИзмененияДанныхПроведенногоДокумента =
					ТекущиеДанные.РежимИзмененияДанныхПроведенногоДокумента;
				
				Если ТекущиеДанные.Вариант = ВариантРеквизит() И ПодчиненноеПравило.Вариант = ВариантРеквизит() Тогда
					Если СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаДО, ".") <> 0
							И Не СтрНачинаетсяС(ПодчиненноеПравило.ИмяРеквизитаОбъектаДО, ТекущиеДанные.ИмяРеквизитаОбъектаДО) Тогда
						ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					КонецЕсли;
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантРеквизитТаблицы() Тогда
					Если ПодчиненноеПравило.Вариант = ВариантРеквизит()
							И СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаДО, ".") <> 0 Тогда
						ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
						
					ИначеЕсли ПодчиненноеПравило.Вариант = ВариантПустой() Тогда
						ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
						
					КонецЕсли;
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантВыражение() Тогда
					ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантПустой() Тогда
					ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					
				ИначеЕсли ПодчиненноеПравило.Вариант.Пустая() Тогда
					ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
					
				КонецЕсли;
				
				ПодчиненноеПравило.ДоступноРедактирование =
					Не (ТекущиеДанные.Вариант = ВариантВыражение() Или ТекущиеДанные.Вариант = ВариантПустой());
				
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ПравилаЗаполненияРеквизитовИС.Развернуть(Элементы.ПравилаЗаполненияРеквизитовИС.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовИСПередУдалениемЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПравилоЗаполненияПриЗагрузке(ТекущиеДанные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.ТипОбъектаДО.Доступность = ЗначениеЗаполнено(Объект.ТипОбъектаИС);
	Элементы.ФормаПометитьНаУдаление.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область КлиентСервер

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантРеквизит()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта");
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантРеквизитТаблицы()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы");
	
КонецФункции

// Возвращает значение ВариантЗначение().
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантЗначение()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение");
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантВыражение()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке");
	
КонецФункции

// Возвращает значение ВариантПустой().
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантПустой()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПравилоЗаполненияПриЗагрузке(Правило)
	
	Правило.id = "";
	Правило.Картинка = 0;
	Правило.ПредставлениеРеквизитаОбъектаДО = "";
	Правило.Пояснение = "";
	Правило.Вариант = ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	Правило.ВычисляемоеВыражение = "";
	Правило.МестоВыполненияВыражения = ПредопределенноеЗначение(
		"Перечисление.МестаВыполненияВыраженийНаВстроенномЯзыке.ПустаяСсылка");
	Правило.ДополнительныйРеквизитДОID = "";
	Правило.ДополнительныйРеквизитДОТип = "";
	Правило.ДополнительныйРеквизитИС = ПредопределенноеЗначение(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка");
	Правило.ЗначениеРеквизитаИС = Неопределено;
	Правило.ИмяРеквизитаОбъектаДО = "";
	Правило.ЭтоДополнительныйРеквизитДО = Ложь;
	Правило.Обновлять = Ложь;
	Правило.РежимИзмененияДанныхПроведенногоДокумента = ПредопределенноеЗначение(
		"Перечисление.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.ПустаяСсылка");
	
	Родитель = Неопределено;
	Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
		Родитель = Правило.ПолучитьРодителя();
	ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
		Родитель = Правило.Родитель;
	КонецЕсли;
	
	Если Родитель <> Неопределено
			И (Родитель.Вариант = ВариантВыражение() Или Родитель.Вариант = ВариантПустой()) Тогда
		Правило.ДоступноРедактирование = Ложь;
	Иначе
		Правило.ДоступноРедактирование = Истина;
	КонецЕсли;
	
	Если Правило.ЭтоТаблица Тогда
		ПодчиненныеПравила = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			ПодчиненныеПравила = Правило.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			ПодчиненныеПравила = Правило.Строки;
		КонецЕсли;
		
		Если ПодчиненныеПравила <> Неопределено Тогда
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				ОчиститьПравилоЗаполненияПриЗагрузке(ПодчиненноеПравило);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервере
Процедура ДополнитьПравилаЗаполнения(ПравилаЗаполнения, ИмяРеквизитаИС, ИмяРеквизитаДО)
	
	Если ПравилаЗаполнения.Получить(ИмяРеквизитаИС) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиРеквизитДО = КлючевыеРеквизитыДО.НайтиСтроки(Новый Структура("Имя", ИмяРеквизитаДО));
	
	Если СтрокиРеквизитДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаЗаполнения.Вставить(ИмяРеквизитаИС,
		Новый Структура("Имя, Представление",
			ИмяРеквизитаДО,
			СтрокиРеквизитДО[0].Представление));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументооборота(ДопЗапрос = Неопределено, ОтветНаДопЗапрос = Неопределено)
	
	МассивРеквизитов = Новый Массив;
	КлючевыеРеквизитыДО.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаДО) Тогда
		РеквизитыXDTO = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ПолучитьРеквизитыОбъектаДО(
			Объект.ТипОбъектаДО,
			Объект.ВидДокументаДОID,
			Ложь,,
			ДопЗапрос,
			ОтветНаДопЗапрос);
		
		Для Каждого Строка Из РеквизитыXDTO Цикл
			
			ДанныеРеквизита = Новый Структура("Имя, Тип, Представление",
				Строка.Имя,
				Строка.Тип,
				Строка.Представление);
			ДанныеРеквизита.Вставить("ЭтоДополнительныйРеквизитДО", Строка.ДопРеквизит);
			ДанныеРеквизита.Вставить("ДополнительныйРеквизитДОID", Строка.ДопРеквизитID);
			ДанныеРеквизита.Вставить("ДополнительныйРеквизитДОТип", Строка.ДопРеквизитТип);
			ДанныеРеквизита.Вставить("ЭтоТаблица", Строка.ЭтоТаблица);
			ДанныеРеквизита.Вставить("Таблица", Строка.Таблица);
			МассивРеквизитов.Добавить(ДанныеРеквизита);
			
			Если Не Строка.ЭтоТаблица И Строка.Таблица = "" Тогда
				
				СтрокаКлючевыеРеквизитыДО = КлючевыеРеквизитыДО.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКлючевыеРеквизитыДО, Строка);
				
				Если Строка.ДопРеквизит Тогда
					СтрокаКлючевыеРеквизитыДО.Имя = Строка.ДопРеквизитID;
					СтрокаКлючевыеРеквизитыДО.ЭтоДополнительныйРеквизитДО = Истина;
					
					КлючевыеРеквизитыОбъекта = Объект.КлючевыеРеквизитыДО.НайтиСтроки(
						Новый Структура("Имя, ЭтоДополнительныйРеквизитДО", Строка.ДопРеквизитID, Истина));
					Если КлючевыеРеквизитыОбъекта.Количество() > 0 Тогда
						СтрокаКлючевыеРеквизитыДО.Ключевой = Истина;
						ЗаполнитьЗначенияСвойств(СтрокаКлючевыеРеквизитыДО, КлючевыеРеквизитыОбъекта[0],,"Представление");
					КонецЕсли;
					
				ИначеЕсли Строка.Имя = "documentType" Тогда
					СтрокаКлючевыеРеквизитыДО.Ключевой = Истина;
					СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизита = Объект.ВидДокументаДО;
					СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизитаID = Объект.ВидДокументаДОID;
					СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизитаТип = "DMDocumentType";
					
				Иначе
					КлючевыеРеквизитыОбъекта = Объект.КлючевыеРеквизитыДО.НайтиСтроки(
						Новый Структура("Имя", Строка.Имя));
					Если КлючевыеРеквизитыОбъекта.Количество() > 0 Тогда
						СтрокаКлючевыеРеквизитыДО.Ключевой = Истина;
						ЗаполнитьЗначенияСвойств(СтрокаКлючевыеРеквизитыДО, КлючевыеРеквизитыОбъекта[0],,"Представление");
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизита)
						И СтрокаКлючевыеРеквизитыДО.Тип.Количество() > 0 Тогда
					ПервыйТип = СтрокаКлючевыеРеквизитыДО.Тип[0].Значение;
					Если ПервыйТип = "Число" Тогда
						СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизита = 0;
						
					ИначеЕсли ПервыйТип = "Дата" Тогда
						СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизита = Дата(1, 1, 1);
						
					ИначеЕсли ПервыйТип = "Булево" Тогда
						СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизита = Ложь;
						
					Иначе // строка или ссылочный тип ДО
						СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизита = "";
						СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизитаID = "";
						СтрокаКлючевыеРеквизитыДО.ЗначениеРеквизитаТип = "";
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = КлючевыеРеквизитыДО.Добавить();
		НоваяСтрока.Представление = НСтр("ru = 'Тип объекта'");
		НоваяСтрока.ЗначениеРеквизита = ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(
			Объект.ТипОбъектаДО, "ЕдинственноеЧисло");
		НоваяСтрока.Ключевой = Истина;
	КонецЕсли;
	
	РеквизитыОбъектаДО = Новый ФиксированныйМассив(МассивРеквизитов);
	КлючевыеРеквизитыДО.Сортировать("Ключевой УБЫВ, Представление");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПотребителя()
	
	ЭлементыДерева = ПравилаЗаполненияРеквизитовИС.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	КлючевыеРеквизитыИС.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
		Возврат;
	КонецЕсли;
	
	// Соберем представления реквизитов объекта ДО по дереву их заполнения.
	ПредставленияРеквизитовОбъектаДО = Новый Соответствие;
	Для Каждого Элемент Из РеквизитыОбъектаДО Цикл
		Если Элемент.ЭтоДополнительныйРеквизитДО Тогда
			ПредставленияРеквизитовОбъектаДО[Элемент.ДополнительныйРеквизитДОID] = Элемент.Представление;
		Иначе
			Если ЗначениеЗаполнено(Элемент.Таблица) Тогда
				ПредставленияРеквизитовОбъектаДО[СтрШаблон("%1.%2", Элемент.Таблица, Элемент.Имя)] =
					Элемент.Представление;
			Иначе
				ПредставленияРеквизитовОбъектаДО[Элемент.Имя] = Элемент.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьРеквизитыОбъектаИС(Объект.ТипОбъектаИС);
	Реквизиты.Сортировать("ТаблицаДляСортировки, ЭтоТаблица УБЫВ, Представление");
	
	Для Каждого Строка Из Реквизиты Цикл
		
		Если Строка.ЭтоТаблица Тогда
			НоваяСтрока = ЭлементыДерева.Добавить();
			НоваяСтрока.ЭтоТаблица = Истина;
			УровеньДерева = НоваяСтрока.ПолучитьЭлементы();
		Иначе
			Если Строка.Таблица = "" Тогда
				УровеньДерева = ЭлементыДерева;
			КонецЕсли;
			НоваяСтрока = УровеньДерева.Добавить();
			НоваяСтрока.Таблица = Строка.Таблица;
		КонецЕсли;
		
		Родитель = НоваяСтрока.ПолучитьРодителя();
		Если Родитель <> Неопределено
				И (Родитель.Вариант = ВариантВыражение() Или Родитель.Вариант = ВариантПустой()) Тогда
			НоваяСтрока.ДоступноРедактирование = Ложь;
		Иначе
			НоваяСтрока.ДоступноРедактирование = Истина;
		КонецЕсли;
		
		НоваяСтрока.ИмяРеквизитаОбъектаИС = Строка.Имя;
		НоваяСтрока.ПредставлениеРеквизитаОбъектаИС = Строка.Представление;
		НоваяСтрока.ТипРеквизитаОбъектаИС = Строка.Тип;
		НоваяСтрока.ЭтоДополнительныйРеквизитИС = Строка.ЭтоДополнительныйРеквизитИС;
		НоваяСтрока.ДополнительныйРеквизитИС = Строка.ДополнительныйРеквизитИС;
		
		ПараметрыОтбора = Новый Структура;
		Если Строка.ЭтоДополнительныйРеквизитИС Тогда
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитИС", Строка.ДополнительныйРеквизитИС);
		Иначе
			ПараметрыОтбора.Вставить("ЭтоТаблица", Строка.ЭтоТаблица);
			ПараметрыОтбора.Вставить("Таблица", Строка.Таблица);
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаИС", Строка.Имя);
		КонецЕсли;
		НайденныеСтроки = Объект.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеРеквизитаОбъектаДО = ПредставленияРеквизитовОбъектаДО[
			?(НоваяСтрока.ЭтоДополнительныйРеквизитДО,
				НоваяСтрока.ДополнительныйРеквизитДОID,
				НоваяСтрока.ИмяРеквизитаОбъектаДО)];
		
		Если НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
			НоваяСтрока.Пояснение = НСтр("ru = 'Заполняется по правилам для отдельных реквизитов таблицы'");
		КонецЕсли;
		
		Если НоваяСтрока.Вариант = ВариантРеквизит() Тогда
			НоваяСтрока.Картинка = 1;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
			НоваяСтрока.Картинка = 1;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантЗначение() Тогда
			НоваяСтрока.Картинка = 2;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантВыражение() Тогда
			НоваяСтрока.Картинка = 3;
			
		КонецЕсли;
		
		Если Не Строка.ЭтоТаблица И Строка.Таблица = "" Тогда
			СтрокаКлючевыеРеквизитыИС = КлючевыеРеквизитыИС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКлючевыеРеквизитыИС, Строка);
			
			КлючевыеРеквизитыОбъекта = Объект.КлючевыеРеквизитыИС.НайтиСтроки(
				Новый Структура("Имя", Строка.Имя));
			Если КлючевыеРеквизитыОбъекта.Количество() > 0 Тогда
				СтрокаКлючевыеРеквизитыИС.Ключевой = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаКлючевыеРеквизитыИС, КлючевыеРеквизитыОбъекта[0],,"Представление");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаКлючевыеРеквизитыИС.ЗначениеРеквизита) Тогда
				СтрокаКлючевыеРеквизитыИС.ЗначениеРеквизита = СтрокаКлючевыеРеквизитыИС.Тип.ПривестиЗначение(
					СтрокаКлючевыеРеквизитыИС.ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока = КлючевыеРеквизитыИС.Добавить();
	НоваяСтрока.Представление = НСтр("ru = 'Тип объекта'");
	НоваяСтрока.ЗначениеРеквизита = СтрШаблон("%1, %2",
		Лев(Объект.ТипОбъектаИС, СтрНайти(Объект.ТипОбъектаИС, ".") - 1),
		Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаИС).Синоним);
	НоваяСтрока.Ключевой = Истина;
	
	КлючевыеРеквизитыИС.Сортировать("Ключевой УБЫВ, Представление");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюНаСервере(НачальноеЗаполнение = Ложь, ЗаполнятьИзОбъектаДО = Истина)
	
	Если НачальноеЗаполнение Тогда
		ЗаполнитьРеквизитыПотребителя();
		ЗаполнитьПодходящиеПравилаЗагрузкиВДО();
		ЗаполнитьРеквизитыДокументооборота();
	КонецЕсли;
	
	ДеревоПравил = РеквизитФормыВЗначение("ПравилаЗаполненияРеквизитовИС");
	Для Каждого СтрокаПравил Из ДеревоПравил.Строки Цикл
		ОчиститьПравилоЗаполненияПриЗагрузке(СтрокаПравил);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоПравил, "ПравилаЗаполненияРеквизитовИС");
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаДО) Или Не ЗаполнятьИзОбъектаДО Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриУстановкеПравилаЗаполненияПриЗагрузкеПоУмолчанию(
		ПравилаЗаполнения,
		Объект.ТипОбъектаИС,
		Объект.ТипОбъектаДО,
		СтандартнаяОбработка);
	
	ЭтоСправочник = (Найти(Объект.ТипОбъектаИС, "Справочник.") <> 0);
	ЭтоДокумент = (Найти(Объект.ТипОбъектаИС, "Документ.") <> 0);
	
	Если СтандартнаяОбработка Тогда
		
		Для Каждого РеквизитДО Из КлючевыеРеквизитыДО Цикл
			Если РеквизитДО.Имя = "" Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого РеквизитИС Из КлючевыеРеквизитыИС Цикл
				Если РеквизитИС.Имя = "" Тогда
					Продолжить;
				КонецЕсли;
				
				Если РеквизитДО.Представление = РеквизитИС.Представление Тогда
					ПравилаЗаполнения.Вставить(РеквизитИС.Имя,
						Новый Структура("Имя, Представление",
							РеквизитДО.Имя,
							РеквизитДО.Представление));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Объект.ТипОбъектаДО = "DMDocument" Тогда
			
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Состояние", "statusApproval");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Статус", "statusApproval");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Согласован", "statusApproval");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Контрагент", "correspondent");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Контрагент", "recipient");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ПодразделениеОрганизации", "subdivision");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Подразделение", "subdivision");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Сумма", "sum");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "СуммаДокумента", "sum");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Валюта", "currency");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ВалютаВзаиморасчетов", "currency");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ВалютаРасчетов", "currency");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ВалютаДокумента", "currency");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Подготовил", "author");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Автор", "author");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "СрокИсполнения", "performanceDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Комментарий", "comment");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ДатаНачала", "beginDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ДатаОкончания", "endDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Организация", "organization");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Содержание", "summary");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "РегистрационныйНомер", "regNumber");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ДатаРегистрации", "regDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "КонтактноеЛицо", "contactPerson");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Ответственный", "responsible");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Наименование", "title");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ДатаВходящегоДокумента", "externalDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "НомерВходящегоДокумента", "externalNumber");
			
		ИначеЕсли Объект.ТипОбъектаДО = "DMMeeting" Тогда
			
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Наименование", "name");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Организация", "organization");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Описание", "description");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "МестоПроведения", "place");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ДатаНачала", "startDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ДатаОкончания", "endDate");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Организатор", "calledBy");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Секретарь", "secretary");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Председатель", "chairPerson");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Комментарий", "comment");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Проект", "project");
			
		ИначеЕсли Объект.ТипОбъектаДО = "DMCorrespondent" Тогда
			
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ЮрФизЛицо", "legalPrivatePerson");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Комментарий", "comment");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Наименование", "name");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Ответственный", "responsible");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ИНН", "inn");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "КПП", "kpp");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "КодПоОКПО", "okpo");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ПолноеНаименование", "fullName");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "НаименованиеПолное", "fullName");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ФизическоеЛицо", "privatePerson");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "ФизЛицо", "privatePerson");
			
		КонецЕсли;
		
		Если ЭтоСправочник Тогда
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Наименование", "title");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Код", "regNumber");
			
		ИначеЕсли ЭтоДокумент Тогда
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Номер", "regNumber");
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, "Дата", "regDate");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПравил = РеквизитФормыВЗначение("ПравилаЗаполненияРеквизитовИС");
	Для Каждого СтрокаПравил Из ДеревоПравил.Строки Цикл
		ЗначениеЗаполнения = ПравилаЗаполнения.Получить(СтрокаПравил.ИмяРеквизитаОбъектаИС);
		Если ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
			
			СтрокаПравил.Вариант = ВариантРеквизит();
			СтрокаПравил.ИмяРеквизитаОбъектаДО = ЗначениеЗаполнения.Имя;
			СтрокаПравил.ПредставлениеРеквизитаОбъектаДО = ЗначениеЗаполнения.Представление;
			СтрокаПравил.Картинка = 1;
			СтрокаПравил.Обновлять = Истина;
			Если ЭтоДокумент Тогда
				СтрокаПравил.РежимИзмененияДанныхПроведенногоДокумента =
					Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением;
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоПравил, "ПравилаЗаполненияРеквизитовИС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодходящиеПравилаЗагрузкиВДО(Знач ПравилаЗагрузкиXDTO = Неопределено)
	
	ПодходящиеПравилаЗагрузкиВДО.Очистить();
	
	МассивПравил = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаЗагрузкиВДО(
		Объект.ТипОбъектаИС,
		ПравилаЗагрузкиXDTO);
	Для Каждого Правило Из МассивПравил Цикл
		НоваяСтрока = ПодходящиеПравилаЗагрузкиВДО.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Правило);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОбъектовКонфигурации()
	
	Типы = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		СписокМетаданных.Добавить(ОбъектМетаданных.ПолноеИмя(),
			?(ОбъектМетаданных.Синоним = "", ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним));
	КонецЦикла;
	
	СписокМетаданных.СортироватьПоПредставлению();
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.7.1") Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			ЗапросПравилЗагрузкиВДО = Неопределено;
			ПравилаЗагрузкиВДО = Неопределено;
			
			Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
				Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
				
				ЗапросПравилЗагрузкиВДО = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMGetDataLoadingRulesRequest");
				ЗапросПравилЗагрузкиВДО.externalObjectType = Объект.ТипОбъектаИС;
			КонецЕсли;
			
			ЗаполнитьСписокВыбораОбъектовКонфигурации();
			Попытка
				ЗаполнитьРеквизитыДокументооборота(ЗапросПравилЗагрузкиВДО, ПравилаЗагрузкиВДО);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'Не удалось получить реквизиты объекта 1С:Документооборот по причине:
						|%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				КлючевыеРеквизитыДО.Очистить();
				РеквизитыОбъектаДО = Новый ФиксированныйМассив(Новый Массив);
			КонецПопытки;
			ЗаполнитьРеквизитыПотребителя();
			
			Если ПравилаЗагрузкиВДО <> Неопределено Тогда
				ЗаполнитьПодходящиеПравилаЗагрузкиВДО(ПравилаЗагрузкиВДО.dataLoadingRules);
			КонецЕсли;
			
			Строки = ПодходящиеПравилаЗагрузкиВДО.НайтиСтроки(
				Новый Структура("ПравилоЗагрузкиВДОID", Объект.ПравилоЗагрузкиДанныхВДО));
			Если Строки.Количество() = 1 Тогда
				Объект.ПредставлениеОбъектаДО = Строки[0].ПравилоЗагрузкиВДО;
				
				Если Объект.ТипОбъектаДО <> Строки[0].ТипОбъектаДО
						Или Объект.ВидДокументаДО <> Строки[0].ВидДокументаДО
						Или Объект.ВидДокументаДОID <> Строки[0].ВидДокументаДОID Тогда
					Объект.ТипОбъектаДО = Строки[0].ТипОбъектаДО;
					Объект.ВидДокументаДО = Строки[0].ВидДокументаДО;
					Объект.ВидДокументаДОID = Строки[0].ВидДокументаДОID;
					Модифицированность = Истина;
					ЗаполнитьРеквизитыДокументооборота();
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

// Возвращает Истина, если правило загрузки заполнено. Для таблиц проверяются и подчиненные правила.
//
&НаСервере
Функция ПравилоЗагрузкиЗаполнено(Правило, Правила = Неопределено)
	
	Если Правило.ЭтоТаблица Тогда
		
		Если (Правило.Вариант = ВариантВыражение() Или Правило.Вариант = ВариантРеквизит())
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаДО)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение)) Тогда
			Возврат Истина;
			
		Иначе
			Для Каждого ПодчиненноеПравило Из Правило.ПолучитьЭлементы() Цикл
				Если ПодчиненноеПравило.Таблица = Правило.ИмяРеквизитаОбъектаИС
						И ПравилоЗагрузкиЗаполнено(ПодчиненноеПравило) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		// обычный реквизит
		Возврат ЗначениеЗаполнено(Правило.Вариант)
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаДО)
				Или ЗначениеЗаполнено(Правило.ДополнительныйРеквизитДОID)
				Или ЗначениеЗаполнено(Правило.ЗначениеРеквизитаИС)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение));
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти