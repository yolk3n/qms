
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++бит_шэ Калашников; РЛС {{
	бит_ПриСозданииНаСервере(Отказ,СтандартнаяОбработка);
	//}}
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ФормаГруппаГлобальныеКомандыФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	ДополнительныеПараметры = Новый Структура("ОтображатьХарактеристики", Ложь);
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаНоменклатуры(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаРаботаСНоменклатурой, ДополнительныеПараметры);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	НастроитьОтображениеВидаНоменклатуры();
	НастроитьВозможностьДобавленияУпаковок();
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииНовогоПриЧтенииНаСервере();
		ЕстьПравоРедактирования = Истина;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") И Объект.ВидНоменклатуры.Пустая() Тогда
			Объект.ВидНоменклатуры = Элементы.ВидНоменклатурыПереключатель.СписокВыбора[0].Значение;
			ОбработатьИзменениеВидаНоменклатуры();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ФайлКартинки");
			Если ЗначениеЗаполнено(ФайлКартинки) Тогда
				СкопироватьПрисоединенныйФайлКартинки(ФайлКартинки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ЕстьПравоРедактирования               = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
		ЭтотОбъект.ТолькоПросмотр             = Не ЕстьПравоРедактирования;
		Элементы.АдресКартинки.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		Элементы.ПредставлениеШтрихкодов.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ТекущийОбъект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.ФайлКартинки, УникальныйИдентификатор)
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
     //бит_шэ Калашников; РЛС; {{
	Если Параметры.Ключ.Пустая() 
		И РЛС_Служебный.ИспользуетсяОбменСРЛС() 
		И Объект.ЭтоЛекарственноеСредство Тогда  
		ОписаниеОповещения = Новый ОписаниеОповещения("бит_ЗаполнитьПоДаннымИзРЛС",ЭтаФорма);
		ОткрытьФорму("Справочник.Номенклатура.Форма.РЛС_ФормаВводаШК",,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	//}}

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ДанныеШтрихкода = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1);
			ОбработатьШтрихкоды(ДанныеШтрихкода);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_Файл" И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "ВладелецФайла") = Объект.Ссылка Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = Параметр.Файл;
		
		Если ВыборИзображения Тогда
		
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
			НастроитьДоступностьРедактированияКартинки(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_УпаковкаНоменклатуры" И Параметр.Номенклатура = Объект.Ссылка И Параметр.ЭтоНовый Тогда
		
		ОбработатьИзменениеУпаковокНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаВидаНоменклатурыОтработана");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
		
		СсылкаНового = ТекущийОбъект.ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = Справочники.Номенклатура.ПолучитьСсылку();
			ТекущийОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		
		ПараметрыФайлаКартинки = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайлаКартинки.Автор                       = Пользователи.АвторизованныйПользователь();
		ПараметрыФайлаКартинки.ВладелецФайлов              = СсылкаНового;
		ПараметрыФайлаКартинки.ИмяБезРасширения            = ДанныеФайлаКартинки.ИмяБезРасширения;
		ПараметрыФайлаКартинки.РасширениеБезТочки          = ДанныеФайлаКартинки.Расширение;
		ПараметрыФайлаКартинки.ВремяИзмененияУниверсальное = ДанныеФайлаКартинки.УниверсальноеВремяИзменения;
		
		//бит_шэ; Калашников; 
		//Не дает добавлять присоединенные файлы для новый элементов, хотя с правами все ок.
		//Далее выполняем с полными правами {{
		//	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайлаКартинки, АдресКартинки, "", "");
		УстановитьПривилегированныйРежим(Истина);
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайлаКартинки, АдресКартинки, "", "");
		УстановитьПривилегированныйРежим(Ложь);
		//}}
		ТекущийОбъект.ФайлКартинки = ПрисоединенныйФайл;
		
		ДанныеФайлаКартинки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УстановитьСписокВыбораМинимальнойЕдиницыИзмерения();
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	
	НастроитьВозможностьДобавленияУпаковок();
	НастроитьДоступностьРедактированияКартинки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	Оповестить("Запись_Номенклатура", ПараметрыЗаписи, Объект.Ссылка);
	
	ЗарегистрироватьШтрихкод(Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПередЗакрытиемФормыНоменклатуры(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПерейтиНоменклатураСАналогичнымиСвойствами(Команда)
	
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(Команда.Имя, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиПоШаблону(Команда)
	
	Объект.НаименованиеПолное = ПолучитьНаименованияПоШаблонуНаСервере("ДляПечати");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеПоШаблону(Команда)
	
	Объект.Наименование = ПолучитьНаименованияПоШаблонуНаСервере("Рабочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	ПараметрыВыбораФайла = Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыВыбораФайла, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		Объект.ФайлКартинки = ЗначениеВыбора;
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		НастроитьДоступностьРедактированияКартинки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	НастроитьДоступностьРедактированияКартинки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаНоменклатуры();
	//бит_шэ Калашников; РЛС; {{
	Если Параметры.Ключ.Пустая() 
		И РЛС_Служебный.ИспользуетсяОбменСРЛС() 
		И Объект.ЭтоЛекарственноеСредство Тогда  
		ОписаниеОповещения = Новый ОписаниеОповещения("бит_ЗаполнитьПоДаннымИзРЛС",ЭтаФорма);
		ОткрытьФорму("Справочник.Номенклатура.Форма.РЛС_ФормаВводаШК",,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	//}}
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ЭтоЛекарственноеСредство Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если МерныеТипыЕдиницИзмерения.Найти(ТипБазовойЕдиницыКАТ) = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(БазоваяЕдиницаКАТ);
		Иначе
			
			Отбор = Новый Структура;
			ТипыЕдиницИзмеренияВыбора = Новый Массив();
			ТипыЕдиницИзмеренияВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЕдиницИзмерения.Вес"));
			ТипыЕдиницИзмеренияВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЕдиницИзмерения.Объем"));
			Отбор.Вставить("ТипЕдиницы", ТипыЕдиницИзмеренияВыбора);
			
			Упаковки = Новый Массив;
			Для Каждого ЭлементСписка Из Элементы.Упаковка.СписокВыбора Цикл
				Упаковки.Добавить(ЭлементСписка.Значение.Значение);
			КонецЦикла;
			Отбор.Вставить("Ссылка", Упаковки);
			
			ПараметрыВыбораЕдиницы = Новый Структура;
			ПараметрыВыбораЕдиницы.Вставить("Отбор", Отбор);
			ПараметрыВыбораЕдиницы.Вставить("ТекущаяСтрока", Объект.ЕдиницаИзмерения);
			
			ОткрытьФорму("Справочник.ЕдиницыИзмерения.ФормаВыбора", ПараметрыВыбораЕдиницы, Элемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ОбработатьИзменениеБазовойЕдиницыИзмерения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяЕдиницаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяЕдиницаУчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПоискПоТекстуЕдиницыИзмерения(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяЕдиницаУчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбработатьПоискПоТекстуЕдиницыИзмерения(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МераИспользоватьПриИзменении(Элемент)
	ОбработатьИзменениеИспользованияМеры(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияМерыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Мера = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("ЕдиницаИзмерения"));
	ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыЕдиницИзмерения." + Мера);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЕдиницаИзмеренияМерыНажатиеЗавершение", ЭтотОбъект, Мера);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипЕдиницы", ТипИзмеряемойВеличины);
	
	ОткрытьФорму(
		"Справочник.ЕдиницыИзмерения.ФормаВыбора",
		Новый Структура("Отбор", Отбор),
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияМерыНажатиеЗавершение(Результат, Мера) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Объект[Мера + "ЕдиницаИзмерения"] = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
	ТекстПредставленияЗначения = НСтр("ru = 'Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения, "%ЕдиницаИзмеренияМеры%", Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура МераМожноУказыватьВДокументахПриИзменении(Элемент)
	
	Мера = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("МожноУказыватьВДокументах"));
	Если ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах" Тогда
		Объект[Мера + "МожноУказыватьВДокументах"] = Истина;
	Иначе
		Объект[Мера + "МожноУказыватьВДокументах"] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбработатьИзменениеНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКАТПриИзменении(Элемент)
	
	ОбработатьИзменениеЭлементаКАТ();
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяЕдиницаОтпускаИзАптекиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяЕдиницаОтпускаИзАптекиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПоискПоТекстуЕдиницыИзмерения(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяЕдиницаОтпускаИзАптекиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбработатьПоискПоТекстуЕдиницыИзмерения(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяЕдиницаОтпускаИзАптекиПриИзменении(Элемент)
	
	ОбработатьИзменениеМинимальнойЕдиницыИзмерения();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Описание",  НСтр("ru = 'Дополнительная информация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДЛОЦеныНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("КАТ", Объект.ЭлементКАТ));
	
	ОткрытьФорму("РегистрСведений.ЦеныЛекарственныхСредствДЛО.ФормаСписка", ПараметрыФормы, ЭтотОбъект,, ЭтотОбъект.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЖНВЛПЦеныНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("КАТ", Объект.ЭлементКАТ));
	
	ОткрытьФорму("РегистрСведений.ЦеныЛекарственныхСредствЖНВЛП.ФормаСписка", ПараметрыФормы, ЭтотОбъект,, ЭтотОбъект.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПоискПоТекстуЕдиницыИзмерения(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбработатьПоискПоТекстуЕдиницыИзмерения(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.ЭтоЛекарственноеСредство И ЗначениеЗаполнено(Объект.ЭлементКАТ) Тогда
		ЗапрашиваемыеДанные = Новый Структура;
		ЗапрашиваемыеДанные.Вставить("БазоваяЕдиницаКАТ"        , "БазоваяЕдиницаИзмеренияКАТ");
		ЗапрашиваемыеДанные.Вставить("ТипБазовойЕдиницыКАТ"     , "БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы");
		ЗапрашиваемыеДанные.Вставить("УпаковкаКАТ"              , "Упаковка");
		ЗапрашиваемыеДанные.Вставить("ДействующиеВеществаМННКАТ", "ДействующиеВеществаМНН");
		ЗапрашиваемыеДанные.Вставить("ФормаВыпускаКАТ"          , "ФормаВыпуска");
		ДанныеКАТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭлементКАТ, ЗапрашиваемыеДанные);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеКАТ);
	КонецЕсли;
	
	УстановитьСписокВыбораМинимальнойЕдиницыИзмерения();
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	
	ПолучитьПараметрыЗаполненияПоВидуНоменклатуры();
	
	МерныеТипыЕдиницИзмерения = Новый ФиксированныйМассив(Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	УстановитьВидимостьДоступностьНаСервере();
	
	НастроитьДоступностьРедактированияКартинки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмеренияСрокаГодности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СрокГодности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЕдиницаИзмеренияСрокаГодности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыЗаполненияПоВидуНоменклатуры()
	
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("ШаблонНаименованияДляПечатиНоменклатуры");
	ЗапрашиваемыеПоля.Вставить("ШаблонРабочегоНаименованияНоменклатуры");
	ЗапрашиваемыеПоля.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры");
	ЗапрашиваемыеПоля.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры");
	ЗапрашиваемыеПоля.Вставить("ИспользоватьПартии");
	
	ПараметрыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ЗапрашиваемыеПоля);
	
	ШаблонНаименованияДляПечати = ПараметрыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры;
	ШаблонРабочегоНаименования = ПараметрыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры;
	ЗапретРедактированияНаименованияДляПечати = ПараметрыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры;
	ЗапретРедактированияРабочегоНаименования = ПараметрыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры;
	
	Если ПараметрыВидаНоменклатуры.ИспользоватьПартии = Истина Тогда
		НастройкаИспользованияПартий = НСтр("ru = 'По документам оприходования'");
	Иначе
		НастройкаИспользованияПартий = НСтр("ru = 'Не используются'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьНаСервере()
	
	УстановитьВидимостьПоВидуНоменклатуры();
	НастроитьМерныеЕдиницы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоВидуНоменклатуры()
	
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	ЗаполненВидНоменклатуры = ЗначениеЗаполнено(Объект.ВидНоменклатуры);
	
	Элементы.ВестиУчетПоГТД.Видимость = Не ЭтоУслуга;
	Элементы.НастройкаИспользованияСерий.Видимость = Не ЭтоУслуга;
	Элементы.НастройкаИспользованияПартий.Видимость = Не ЭтоУслуга;
	
	Если ЭтоУслуга Тогда
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Единица измерения'");
	Иначе
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Единица хранения'");
	КонецЕсли;
	Элементы.ЕдиницаИзмерения.Заголовок = ЗаголовокЕдиницыИзмерения;
	
	Элементы.МинимальнаяЕдиницаОтпускаИзАптеки.Видимость = Не ЭтоУслуга;
	Элементы.ОсновнаяЕдиницаУчета.Видимость = Не ЭтоУслуга;
	Элементы.Упаковка.Видимость = Не ЭтоУслуга;
	
	Элементы.VENКлассификация.Видимость = Не ЭтоУслуга;
	Элементы.ГруппаПКУ.Видимость = Не ЭтоУслуга;
	
	Элементы.ГруппаКлассификация.Видимость = Не ЭтоУслуга;
	
	Элементы.Производитель.ТолькоПросмотр = Объект.ЭтоЛекарственноеСредство;
	Элементы.ЭлементКАТФормаВыпуска1.Видимость = Объект.ЭтоЛекарственноеСредство;
	Элементы.СтраницаДанныеПрепарата.Видимость = Объект.ЭтоЛекарственноеСредство;
	
	ЭтоТовар = Не ЭтоУслуга И Не Объект.ЭтоЛекарственноеСредство;
	Элементы.КлассификацияМедицинскихИзделийПоВидам.Видимость = ЭтоТовар;
	Элементы.ГруппаДанныеМедИзделия.Видимость = ЭтоТовар;
	
	ПараметрыСерий = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПараметрыСерийНоменклатуры(Объект.ВидНоменклатуры);
	
	Элементы.ГруппаСрокГодности.Видимость = ЗаполненВидНоменклатуры И Не ЭтоУслуга И ПараметрыСерий.ИспользоватьСрокГодностиСерии;
	Элементы.ГруппаСрокГодности.ТолькоПросмотр = Объект.ЭтоЛекарственноеСредство;
	НастройкаИспользованияСерий = Справочники.ВидыНоменклатуры.ПредставлениеНастройкиИспользованияСерий(ПараметрыСерий);
	
	Если Объект.ЭтоЛекарственноеСредство Тогда
		УстановитьВидимостьПринадлежностиКСпискам();
	КонецЕсли;
	
	УстановитьДоступностьПотребительскойУпаковки();
	
	Элементы.ЗаполнитьНаименованиеДляПечатиПоШаблону.Доступность = ЗаполненВидНоменклатуры И ЗначениеЗаполнено(ШаблонНаименованияДляПечати);
	Элементы.ЗаполнитьРабочееНаименованиеПоШаблону.Доступность = ЗаполненВидНоменклатуры И ЗначениеЗаполнено(ШаблонРабочегоНаименования);
	Элементы.Наименование.ТолькоПросмотр = ЗаполненВидНоменклатуры И ЗапретРедактированияРабочегоНаименования;
	Элементы.НаименованиеПолное.ТолькоПросмотр = ЗаполненВидНоменклатуры И ЗапретРедактированияНаименованияДляПечати;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПринадлежностиКСпискам()
	
	ПринадлежностьКСпискам = АптечныеТовары.ПолучитьПринадлежностьКСпискам(Объект.ЭлементКАТ);
	
	Элементы.Группа7ВЗН.Видимость = ПринадлежностьКСпискам.ПринадлежностьК7ВЗН;
	
	Элементы.ГруппаБезРецепта.Видимость = ПринадлежностьКСпискам.БезрецептурныйОтпуск;
	
	Элементы.ГруппаДЛО.Видимость = ПринадлежностьКСпискам.ДЛО;
	
	Элементы.ГруппаЖНВЛП.Видимость = (ПринадлежностьКСпискам.ЖНВЛП = Перечисления.СпискиЖНВЛП.НеВключеноВКонтрольЦен);
	Элементы.ГруппаЖНВЛПКонтрольЦен.Видимость = (ПринадлежностьКСпискам.ЖНВЛП = Перечисления.СпискиЖНВЛП.ВключеноВКонтрольЦен);
	
	Наркотическое = ЗначениеЗаполнено(ПринадлежностьКСпискам.Наркотические);
	Элементы.ГруппаНаркотические.Видимость = Наркотическое;
	Если Наркотическое Тогда
		Элементы.НадписьНаркотические.Заголовок = ПринадлежностьКСпискам.Наркотические;
	КонецЕсли;
	
	СильнодействующиеИЯды = ЗначениеЗаполнено(ПринадлежностьКСпискам.СильнодействующиеИЯды);
	Элементы.ГруппаСильнодействующиеИЯды.Видимость = СильнодействующиеИЯды;
	Если СильнодействующиеИЯды Тогда
		Элементы.НадписьСильнодействующиеИЯды.Заголовок = ПринадлежностьКСпискам.СильнодействующиеИЯды;
	КонецЕсли;
	
	СпискиАиБ = ЗначениеЗаполнено(ПринадлежностьКСпискам.СпискиАиБ);
	Элементы.ГруппаСпискиАиБ.Видимость = СпискиАиБ;
	Если СпискиАиБ Тогда
		Элементы.НадписьСпискиАиБ.Заголовок = ПринадлежностьКСпискам.СпискиАиБ;
	КонецЕсли;
	
	Элементы.ГруппаВНациональномКалендареПрививок.Видимость              = ПринадлежностьКСпискам.ВНациональномКалендареПрививок;
	Элементы.ГруппаВКалендареПрививокПоЭпидемическимПоказаниям.Видимость = ПринадлежностьКСпискам.ВКалендареПрививокПоЭпидемическимПоказаниям;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеВидаНоменклатуры()
	
	ИспользоватьНесколькоВидовНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	Если Не ИспользоватьНесколькоВидовНоменклатуры Тогда
		СписокВидов = Справочники.ВидыНоменклатуры.ПолучитьПредустановленныеВидыНоменклатуры();
		Элементы.ВидНоменклатурыПереключатель.СписокВыбора.ЗагрузитьЗначения(СписокВидов);
	КонецЕсли;
	
	Элементы.ВидНоменклатуры.Видимость = ИспользоватьНесколькоВидовНоменклатуры;
	Элементы.ТипНоменклатурыРасширенный.Видимость = ИспользоватьНесколькоВидовНоменклатуры;
	Элементы.ВидНоменклатурыПереключатель.Видимость = Не ИспользоватьНесколькоВидовНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьМерныеЕдиницы()
	
	ТипЕдиницыХранения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЕдиницаИзмерения, "ТипЕдиницы");
	ВидимостьЭлементов = Новый Структура;
	ЗаголовкиЭлементов = Новый Структура;
	
	Для Каждого ТипИзмеряемойВеличины Из МерныеТипыЕдиницИзмерения Цикл
		НастроитьЭлементыМеры(ТипИзмеряемойВеличины, ТипЕдиницыХранения, ВидимостьЭлементов, ЗаголовкиЭлементов);
	КонецЦикла;
	
	УстановитьСвойствоЭлементовФормы(Элементы, "Видимость", ВидимостьЭлементов);
	УстановитьСвойствоЭлементовФормы(Элементы, "Заголовок", ЗаголовкиЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыМеры(ТипИзмеряемойВеличины, ТипЕдиницыХранения, ВидимостьЭлементов, ЗаголовкиЭлементов)
	
	Мера = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипИзмеряемойВеличины);
	ВидимостьЭлементов.Вставить(Мера + "Использовать", (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар));
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		ВидимостьМеры = Объект[Мера + "Использовать"];
		Элементы[Мера + "Использовать"].Доступность = Истина;
	Иначе
		Если ТипЕдиницыХранения = ТипИзмеряемойВеличины Тогда
			Элементы[Мера + "Использовать"].Доступность = Ложь;
			ВидимостьМеры = Ложь;
		Иначе
			Элементы[Мера + "Использовать"].Доступность = Истина;
			ВидимостьМеры = Объект[Мера + "Использовать"];
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьМеры = ВидимостьМеры И ВидимостьЭлементов[Мера + "Использовать"];
	
	ВидимостьЭлементов.Вставить(Мера + "Отступ"                   , ВидимостьМеры);
	ВидимостьЭлементов.Вставить(Мера + "Знаменатель"              , ВидимостьМеры);
	ВидимостьЭлементов.Вставить(Мера + "Надпись"                  , ВидимостьМеры);
	ВидимостьЭлементов.Вставить(Мера + "Числитель"                , ВидимостьМеры);
	ВидимостьЭлементов.Вставить(Мера + "ЕдиницаИзмерения"         , ВидимостьМеры);
	ВидимостьЭлементов.Вставить(Мера + "МожноУказыватьВДокументах", ВидимостьМеры);
	
	Если ТипИзмеряемойВеличины = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%1 весит'");
	ИначеЕсли ТипИзмеряемойВеличины = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%1 занимает объем'");
	ИначеЕсли ТипИзмеряемойВеличины = Перечисления.ТипыЕдиницИзмерения.Площадь Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%1 имеет площадь'");
	ИначеЕсли ТипИзмеряемойВеличины = Перечисления.ТипыЕдиницИзмерения.Длина Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%1 имеет длину'");
	КонецЕсли;
	
	ТекстЗаголовкаНадписи = СтрЗаменить(ТекстЗаголовкаНадписи, "%1", Строка(Объект.ЕдиницаИзмерения));
	ЗаголовкиЭлементов.Вставить(Мера + "Надпись", ТекстЗаголовкаНадписи);
	
	ТекстПредставленияЗначения = НСтр("ru = 'Можно указывать количество в %1 в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения, "%1", Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	Если Объект[Мера + "МожноУказыватьВДокументах"] Тогда
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах";
	Иначе
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "Справочно";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИмяСвойства, ЗначенияСвойстваЭлементов)
	
	Для Каждого Значение Из ЗначенияСвойстваЭлементов Цикл
		
		Если ЭлементыФормы.Найти(Значение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыФормы[Значение.Ключ][ИмяСвойства] = Значение.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка гиперссылок
#Область ОбработкаГиперссылок

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ИмяГиперссылки, ПринудительнаяЗапись = Ложь)
	
	Если Объект.Ссылка.Пустая() Или ПринудительнаяЗапись Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информации возможен только после записи элемента.
		|Записать элемент?'");
		
		Оповещение = Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ИмяГиперссылки);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ГиперссылкаПерейти(ИмяГиперссылки);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ИмяГиперссылки) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ГиперссылкаПерейти(ИмяГиперссылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ИмяГиперссылки)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылки);
	
	ОткрытьФорму(
		ПараметрыПереходаПоГиперссылке.ИмяФормы,
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы,
		,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "КомандаПерейтиНоменклатураСАналогичнымиСвойствами" Тогда
		
		ПараметрыФормы = Новый Структура("НоменклатураФильтраПоСвойствам", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ПараметрыПереходаПоГиперссылке;
	
КонецФункции

#КонецОбласти // ОбработкаГиперссылок

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененийРеквизитов

&НаКлиенте
Процедура ОбработатьИзменениеНаименования()

	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеБазовойЕдиницыИзмерения()
	
	Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		РеквизитыЕдиницы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЕдиницаИзмерения, "ТипЕдиницы, Коэффициент");
		ТипЕдиницы = РеквизитыЕдиницы.ТипЕдиницы;
		Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ТипЕдиницы, ТипЕдиницы);
		Если ЗначениеЗаполнено(Объект.ЭлементКАТ) И ТипБазовойЕдиницыКАТ <> ТипЕдиницы Тогда
			Если ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
				Мера = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипБазовойЕдиницыКАТ);
				Объект[Мера + "Использовать"] = Истина;
				Объект[Мера + "Знаменатель"]  = 1;
				Объект[Мера + "Числитель"]    = РеквизитыЕдиницы.Коэффициент;
				Объект[Мера + "МожноУказыватьВДокументах"] = Истина;
				Объект[Мера + "ЕдиницаИзмерения"] = БазоваяЕдиницаКАТ;
			КонецЕсли;
			Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ТипЕдиницы, ТипБазовойЕдиницыКАТ);
		КонецЕсли;
	КонецЕсли;
	НастроитьМерныеЕдиницы();
	
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	Если ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаУчета) Тогда
		ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИспользованияМеры(Знач МераИспользовать)
	
	Мера = Лев(МераИспользовать, СтрДлина(МераИспользовать) - СтрДлина("Использовать"));
	Если Объект[Мера + "Использовать"] Тогда
		Если Объект[Мера + "Знаменатель"] = 0 Тогда
			Объект[Мера + "Знаменатель"] = 1;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект[Мера + "ЕдиницаИзмерения"]) Тогда
			Объект[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаМерыПоУмолчанию(Перечисления.ТипыЕдиницИзмерения[Мера]);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	Если ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаУчета) Тогда
		ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета();
	КонецЕсли;
	
	НастроитьМерныеЕдиницы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЭлементаКАТ()
	
	Если ЗначениеЗаполнено(Объект.ЭлементКАТ) Тогда
		
		АптечныеТовары.ЗаполнитьПоляНоменклатурыПоАптечномуТовару(Объект, Объект.ЭлементКАТ);
		
		Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			ТипБазовойЕдиницыКАТ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЕдиницаИзмерения, "ТипЕдиницы");
			БазоваяЕдиницаКАТ = Объект.ЕдиницаИзмерения;
			УпаковкаКАТ = Объект.Упаковка;
		Иначе
			ТипБазовойЕдиницыКАТ = Неопределено;
			БазоваяЕдиницаКАТ = Неопределено;
			УпаковкаКАТ = Неопределено;
		КонецЕсли;
		
		РеквизитыКАТ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЭлементКАТ, "ДействующиеВеществаМНН, ФормаВыпуска");
		ДействующиеВеществаМННКАТ = РеквизитыКАТ.ДействующиеВеществаМНН;
		ФормаВыпускаКАТ = РеквизитыКАТ.ФормаВыпуска;
		
		Если Не ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = СокрЛП(Объект.ЭлементКАТ);
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
			Объект.НаименованиеПолное = СокрЛП(Объект.ЭлементКАТ);
		КонецЕсли;
		
	Иначе
		
		Объект.МинимальнаяЕдиницаОтпускаИзАптеки = Неопределено;
		Если Объект.ОсновнаяЕдиницаУчета.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка И Не ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаУчета.Номенклатура) Тогда
			Объект.ОсновнаяЕдиницаУчета = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(УпаковкаКАТ) И Объект.Упаковка = УпаковкаКАТ Тогда
			Объект.Упаковка = Неопределено;
		КонецЕсли;
		
		БазоваяЕдиницаКАТ = Неопределено;
		ТипБазовойЕдиницыКАТ = Неопределено;
		УпаковкаКАТ = Неопределено;
		
		ДействующиеВеществаМННКАТ = Неопределено;
		ФормаВыпускаКАТ = Неопределено;
		
	КонецЕсли;
	
	УстановитьСписокВыбораМинимальнойЕдиницыИзмерения();
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	
	УстановитьВидимостьПринадлежностиКСпискам();
	УстановитьДоступностьПотребительскойУпаковки();
	НастроитьМерныеЕдиницы();
	
	бит_РЛС_ОбновитьИнформациюОКомпонентномСоставе();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМинимальнойЕдиницыИзмерения()
	
	Если ЗначениеЗаполнено(Объект.МинимальнаяЕдиницаОтпускаИзАптеки) Тогда
		ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета();
	КонецЕсли;
	
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПоискПоТекстуЕдиницыИзмерения (Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДоступныеЕдиницы = Новый Массив;
		Для Каждого Элемент Из Элемент.СписокВыбора Цикл
			ДоступныеЕдиницы.Добавить(Элемент.Значение.Значение);
		КонецЦикла;
		
		ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", ДоступныеЕдиницы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаНоменклатуры()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	ТекущийТипНоменклатуры = Объект.ТипНоменклатурыРасширенный;
	ТекущиеДанныеПрепарата = Объект.ЭлементКАТ;
	
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Объект);
	
	Если Объект.ТипНоменклатурыРасширенный = ТекущийТипНоменклатуры Тогда
		Объект.ЭлементКАТ = ТекущиеДанныеПрепарата;
	КонецЕсли;
	
	ПолучитьПараметрыЗаполненияПоВидуНоменклатуры();
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		Если ЗначениеЗаполнено(ШаблонРабочегоНаименования) Тогда
			Объект.Наименование = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШаблонНаименованияДляПечати) Тогда
			Объект.НаименованиеПолное = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьПоВидуНоменклатуры();
	
	ОбработатьИзменениеЭлементаКАТ();
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененийРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкода)
	
	Если Элементы.ПредставлениеШтрихкодов.ТолькоПросмотр
	 Или Не Элементы.ПредставлениеШтрихкодов.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьДанныеИзШтрихкода(ДанныеШтрихкода.Штрихкод);
	УстанавливаемыйШтрихкод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Данные, "GTIN", Данные.Штрихкод);
	
	Номенклатура = ПолучитьНоменклатуруПоШтрихкоду(Данные);
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Штрихкоды = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УстанавливаемыйШтрихкод));
		ПредставлениеШтрихкодов = УстанавливаемыйШтрихкод;
		
		ПодключитьОбработчикОжидания("ОбработатьШтрихкодСоСканера", 0.1, Истина);
		
		Модифицированность = Истина;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Номенклатура со штрихкодом %1 уже существует.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УстанавливаемыйШтрихкод);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруПоШтрихкоду(Знач ДанныеШтрихкода)
	
	Возврат НоменклатураСервер.ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкодСоСканера()
	
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элементы.ПредставлениеШтрихкодов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьШтрихкод(Номенклатура)
	
	Если Не ЗначениеЗаполнено(Штрихкоды) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодов = Новый Соответствие;
	Для Каждого Штрихкод Из Штрихкоды Цикл
		ДанныеШтрихкодов.Вставить(Штрихкод, Новый Структура("Номенклатура", Номенклатура));
	КонецЦикла;
	
	НоменклатураКлиент.ЗарегистрироватьШтрихкоды(ДанныеШтрихкодов);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Присоединенные файлы
#Область ПрисоединенныеФайлы

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьРедактированияКартинки(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ИзменитьИзображение.Видимость = Не Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ФайлКартинки);
	Элементы.ПросмотретьИзображение.Видимость = Не Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ФайлКартинки);
	Элементы.ВыбратьКартинкуИзПрисоединенныхФайлов.Видимость = Не Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(Знач ФайлКартинки, Знач ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторФормы;
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ПараметрыДанныхФайла).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Оповестить = Новый ОписаниеОповещения("ПолучитьДанныеПослеУстановкиРасширенияРаботыСФайлами", ЭтотОбъект);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповестить,, Ложь);
		
	Иначе
		ВыборИзображения = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, ФильтрФайловИзображений());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПослеУстановкиРасширенияРаботыСФайлами(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если Не РасширениеПодключено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Расширение для работы с файлами не подключено'"));
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = ФильтрФайловИзображений();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеФайлаДиалогЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	Файл = Новый Файл(ИмяФайла);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПроверкаСуществования",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ДанныеФайлаКартинки =
		Новый Структура("ИмяБезРасширения, Расширение, УниверсальноеВремяИзменения");
	
	ЗаполнитьЗначенияСвойств(ДанныеФайлаКартинки, ДополнительныеПараметры.Файл);
	
	ДанныеФайлаКартинки.Расширение =
		СтрЗаменить(ДанныеФайлаКартинки.Расширение, ".", "");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ДанныеФайлаКартинки.УниверсальноеВремяИзменения = ВремяИзменения;
	
	Оповестить = Новый ОписаниеОповещения("ЧтениеДанныхФайлаПродолжение", ЭтотОбъект, УникальныйИдентификатор);
	
	НачатьСозданиеДвоичныхДанныхИзФайла(Оповестить, ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеДанныхФайлаПродолжение(ДвоичныеДанные, УникальныйИдентификатор) Экспорт
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	АдресКартинки = АдресФайлаВХранилище;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ЭтотОбъект.Объект.ФайлКартинки, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ФильтрФайловИзображений()
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

&НаСервере
Процедура СкопироватьПрисоединенныйФайлКартинки(ФайлКартинки)
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ПараметрыДанныхФайла);
	
	ДанныеФайлаКартинки = Новый Структура;
	ДанныеФайлаКартинки.Вставить("Расширение", ДанныеПрисоединенногоФайла.Расширение);
	ДанныеФайлаКартинки.Вставить("ИмяБезРасширения", СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла, "." + ДанныеПрисоединенногоФайла.Расширение, ""));
	ДанныеФайлаКартинки.Вставить("УниверсальноеВремяИзменения", ДанныеПрисоединенногоФайла.ДатаМодификацииУниверсальная);
	
	ДвоичныеДанныеФайла  = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
		ДанныеФайлаКартинки = Неопределено;
	КонецЕсли;
	
	АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор)
	
КонецПроцедуры

#КонецОбласти // ПрисоединенныеФайлы

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаСервере
Процедура ОбработатьИзменениеУпаковокНоменклатуры()
	
	УстановитьСписокВыбораМинимальнойЕдиницыИзмерения();
	УстановитьСписокВыбораОсновнойЕдиницыИзмерения();
	ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораМинимальнойЕдиницыИзмерения()
	
	ЗаполнитьСписокВыбораУпаковкамиНоменклатуры(Элементы.МинимальнаяЕдиницаОтпускаИзАптеки.СписокВыбора);
	ЗаполнитьСписокВыбораУпаковкамиНоменклатуры(Элементы.Упаковка.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораОсновнойЕдиницыИзмерения()
	
	СписокВыбора = Элементы.ОсновнаяЕдиницаУчета.СписокВыбора;
	Если ЗначениеЗаполнено(Объект.МинимальнаяЕдиницаОтпускаИзАптеки) Тогда
		
		ЗаполнитьСписокВыбораУпаковкамиНоменклатуры(СписокВыбора);
		Для Каждого Упаковка Из СписокВыбора Цикл
			Если Упаковка.Значение.Значение = Объект.МинимальнаяЕдиницаОтпускаИзАптеки Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Индекс = СписокВыбора.Индекс(Упаковка) + 1;
		Пока Индекс < СписокВыбора.Количество() Цикл
			СписокВыбора.Удалить(Индекс);
		КонецЦикла;
		
	Иначе
		ЗаполнитьСписокВыбораЕдиницамиНоменклатуры(СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораУпаковкамиНоменклатуры(СписокВыбора)
	
	Упаковки = НоменклатураСервер.ПолучитьУпаковкиНоменклатуры(Объект.Ссылка, УпаковкаКАТ);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.номенклатура.ПустаяСсылка)
	|			ТОГДА 10
	|		ИНАЧЕ 20
	|	КОНЕЦ                                КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Ссылка В (&Упаковки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	30                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Ссылка = &ЕдиницаИзмерения
	|	И ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.КоличествоШтук)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Коэффициент Убыв,
	|	НаименованиеПолное УБЫВ
	|");
	Запрос.УстановитьПараметр("Упаковки", Упаковки);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Объект.ЕдиницаИзмерения);
	
	СписокВыбора.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Новый Структура("Значение, ПометкаУдаления, Предупреждение", Выборка.Ссылка, Выборка.ПометкаУдаления), Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЕдиницамиНоменклатуры(СписокВыбора)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("Препарат", ?(Объект.ЭтоЛекарственноеСредство, Объект.ЭлементКАТ, Неопределено));
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Объект.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ИспользоватьВес", Объект.ВесИспользовать);
	Запрос.УстановитьПараметр("ИспользоватьОбъем", объект.ОбъемИспользовать);
	Запрос.УстановитьПараметр("ИспользоватьПлощадь", Объект.ПлощадьИспользовать);
	Запрос.УстановитьПараметр("ИспользоватьДлину", объект.ДлинаИспользовать);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	10                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Номенклатура = &Номенклатура
	|	И ЕдиницыИзмерения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	20 - УпаковкиПрепарата.НомерУпаковки  КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка               КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления      КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование         КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное   КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент          КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК УпаковкиПрепарата
	|		ПО
	|			УпаковкиПрепарата.Упаковка = ЕдиницыИзмерения.Ссылка
	|			И УпаковкиПрепарата.КАТ = &Препарат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	30                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Ссылка = &ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	40                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|	И &ИспользоватьВес
	|	И ЕдиницыИзмерения.Ссылка <> &ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	50                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|	И &ИспользоватьОбъем
	|	И ЕдиницыИзмерения.Ссылка <> &ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	60                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Площадь)
	|	И &ИспользоватьПлощадь
	|	И ЕдиницыИзмерения.Ссылка <> &ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	70                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления     КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Длина)
	|	И &ИспользоватьДлину
	|	И ЕдиницыИзмерения.Ссылка <> &ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Коэффициент Убыв,
	|	НаименованиеПолное УБЫВ
	|";
	
	СписокВыбора.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Новый Структура("Значение, ПометкаУдаления, Предупреждение", Выборка.Ссылка, Выборка.ПометкаУдаления), Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованияПоШаблонуНаСервере(Знач ВариантФормирования)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, Объект);
	
	Если ВариантФормирования = "ДляПечати" Тогда
		Шаблон = ШаблонНаименованияДляПечати;
	Иначе
		Шаблон = ШаблонРабочегоНаименования;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	Возврат КонструкторФормулБольничнаяАптека.НаименованиеПоШаблону(Шаблон, СправочникОбъект);
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета()
	
	Если Не Справочники.Номенклатура.ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета(Объект) Тогда
		Объект.ОсновнаяЕдиницаУчета = ?(ЗначениеЗаполнено(Объект.МинимальнаяЕдиницаОтпускаИзАптеки), Объект.МинимальнаяЕдиницаОтпускаИзАптеки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Прочее

&НаСервере
Процедура УстановитьДоступностьПотребительскойУпаковки()
	
	Элементы.Упаковка.ТолькоПросмотр = Объект.ЭтоЛекарственноеСредство И ЗначениеЗаполнено(УпаковкаКАТ);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВозможностьДобавленияУпаковок()
	
	СозданиеДоступно = Не Объект.Ссылка.Пустая();
	Элементы.МинимальнаяЕдиницаОтпускаИзАптеки.КнопкаСоздания = СозданиеДоступно;
	Элементы.ОсновнаяЕдиницаУчета.КнопкаСоздания = СозданиеДоступно;
	Элементы.Упаковка.КнопкаСоздания = СозданиеДоступно;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовБольничнаяАптекаКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура);
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка, Ложь, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьНоменклатуру(ЭтотОбъект);
	
	Штрихкоды               = Неопределено;
	ПредставлениеШтрихкодов = Неопределено;
	Элементы.ПредставлениеШтрихкодов.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытьКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой(Элемент)
	
	АдресДанныхФормы = ПодготовитьДанныеДляИнтерактивногоЗаполнения();
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект);
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, АдресДанныхФормы, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеТекстаРедактированияРаботаСНоменклатурой(Элемент, Текст, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИзменениеТекстаСобратьСтрокуПоиска(ЭтотОбъект, Текст, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРаботаСНоменклатурой(Элемент)
	
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗаписиРаботаСНоменклатурой()
	
	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатурыПродолжение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыВыбораОбъектаСервиса(ДанныеОбъекта, ДополнительныеПараметры) Экспорт
	
	АдресДанныхФормы = ПодготовитьДанныеДляИнтерактивногоЗаполнения();
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект);
	
	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбора(ДанныеОбъекта, ДополнительныеПараметры, АдресДанныхФормы, Оповестить);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляИнтерактивногоЗаполнения()
	
	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеФормыЗаполненияОбъекта(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы)
	
	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	Элементы.ПредставлениеШтрихкодов.ТолькоПросмотр = ЗначениеЗаполнено(ПредставлениеШтрихкодов);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти // СтандартныеПодсистемы

&НаКлиенте
Процедура бит_ЗаполнитьПоДаннымИзРЛС(Данные,Параметры) Экспорт

	Если ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда 	
		ОбновитьФормуСуществующегоЭлемента(Данные);
		ОбработатьИзменениеЭлементаКАТ();
	ИначеЕсли типЗнч(Данные) = Тип("Структура") Тогда
		Объект.ВидНоменклатуры = Данные.ВидНоменклатуры;
		ОбработатьИзменениеВидаНоменклатуры();
		ЗаполнитьЗначенияСвойств(Объект,Данные); 
		Элементы.СтраницаДанныеПрепарата.Показать();
		ОбработатьИзменениеЭлементаКАТ();
		
		Если Данные.Свойство("ДопРеквизиты") Тогда
			Для Каждого КлючЗначение из Данные.ДопРеквизиты Цикл
				бит_ЗаполнитьДополнительныеРеквизиты(КлючЗначение.Ключ,КлючЗначение.Значение);	
			КонецЦикла;
		КонецЕсли;
		
		Если Данные.Свойство("АдресКартинки") Тогда
			Элементы.СтраницаОписание.Показать();
			АдресКартинки = Данные.АдресКартинки;
			ДанныеФайлаКартинки = Данные.ДанныеФайлаКартинки;		
		КонецЕсли;
		
		Штрихкоды = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.ДанныеШтрихкода));
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьФормуСуществующегоЭлемента(Ссылка)
	ЗначениеВреквизитФормы(Ссылка.ПолучитьОбъект(),"Объект");
Конецпроцедуры  

&НаСервере
Процедура бит_ЗаполнитьДополнительныеРеквизиты(Ключ,Значение)
	
	РЛС_Служебный.УстановитьЗначениеДополнительногоРеквизитаНаФорме(ЭтаФорма,Ключ,Значение);
	
КонецПроцедуры

&НаСервере
Процедура бит_РЛС_ОбновитьИнформациюОКомпонентномСоставе()  
	
	ЭтотОбъект.РЛС_КомпонентныйСостав = "";
	Если ЗначениеЗаполнено(Объект.ЭлементКАТ)  Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.ЭлементКАТ,"КомпонентныйСостав") Тогда
		Для каждого Строка Из Объект.ЭлементКАТ.КомпонентныйСостав Цикл		
			ЭтотОбъект.РЛС_КомпонентныйСостав  = ЭтотОбъект.РЛС_КомпонентныйСостав + Строка.ДействующееВещество + " " +Строка.Доза + Символы.ПС;; 
		КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
		 
 КонецПроцедуры 
 
&НаСервере
Процедура бит_ПриСозданииНаСервере(Отказ,СтандартнаяОбработка)
	
	//Бит Кирилин 09.23 
	//Добавлен на форму реквизит для отображения инструкций препарата
	ГруппаСтраницы = Элементы.Добавить("ГруппаСтраницы",Тип("ГруппаФормы"));
    ГруппаСтраницы.Вид = ВидГруппыФормы.Страницы;
    
	Страница1 = Элементы.Добавить("Реквизиты",Тип("ГруппаФормы"),Элементы.ГруппаСтраницы);
    Страница1.Вид = ВидГруппыФормы.Страница;
    Страница1.Заголовок = "Реквизиты";
	
	Страница2 = Элементы.Добавить("Инструкции",Тип("ГруппаФормы"),Элементы.ГруппаСтраницы);
    Страница2.Вид = ВидГруппыФормы.Страница;
    Страница2.Заголовок = "Инструкции";
	
	Элементы.Переместить(Элементы.ГруппаРеквизиты, Страница1, ГруппаСтраницы);
	
	ПолеОписание = Элементы.Добавить("Инструкция", Тип("ПолеФормы"), Страница2);
	ПолеОписание.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	ПолеОписание.Заголовок = "Инструкция"; 
	ПолеОписание.ПутьКДанным = "Объект.РЛС_Инструкции";
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РЛС_КомпонентныйСостав",Новый ОписаниеТипов("Строка"),,"Компонентный состав"));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Элемент = Элементы.Добавить("РЛС_КомпонентныйСостав",Тип("ПолеФормы"),Элементы.СтраницаДанныеПрепарата);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.Доступность = Ложь;
	Элемент.ПутьКДанным = "РЛС_КомпонентныйСостав"; 
	Элемент.МногострочныйРежим = Истина;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры