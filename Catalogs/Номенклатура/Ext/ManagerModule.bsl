
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		ВыборГруппИЭлементов = Неопределено;
		Если Параметры.Свойство("ВыборГруппИЭлементов", ВыборГруппИЭлементов) Тогда
			Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Процедура заполняет реквизиты номенклатуры при создании из шаблона
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(Номенклатура, Отказ = Ложь, ПрерыватьЗаполнениеПриОшибкеПроверки = Ложь) Экспорт
	
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		СтарыйВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.Ссылка, "ВидНоменклатуры");
		Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
			ПроверитьКорректностьСменыВидаНоменклатуры(Номенклатура, СтарыйВидНоменклатуры, Отказ);
		КонецЕсли;
		Если Отказ И ПрерыватьЗаполнениеПриОшибкеПроверки Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СтарыйВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Номенклатура.ЭлементКАТ = Неопределено;
	Номенклатура.Упаковка = Неопределено;
	Номенклатура.ОсновнаяЕдиницаУчета = Неопределено;
	Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки = Неопределено;
	
	СтрогоБерутсяИзВида = Новый Структура;
	СтрогоБерутсяИзВида.Вставить("ТипНоменклатуры");
	СтрогоБерутсяИзВида.Вставить("ТипНоменклатурыРасширенный");
	СтрогоБерутсяИзВида.Вставить("ГруппаДоступа");
	СтрогоБерутсяИзВида.Вставить("ГруппаПКУ");
	ОчиститьЗначенияСвойств(Номенклатура, СтрогоБерутсяИзВида);
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры = Новый Структура;
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Вставить("Родитель", "ГруппаНоменклатуры");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Вставить("СтавкаНДС");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Вставить("ЦеноваяГруппа");
	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию = Новый Структура;
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Вставить("КодТНВЭД");
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Вставить("ОКПД2");
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Вставить("ЕдиницаИзмерения");
	
	ЗапрашиваемыеПоля = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗапрашиваемыеПоля, СтрогоБерутсяИзВида);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗапрашиваемыеПоля, ЗаполняютсяТолькоПриСозданииНоменклатуры);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗапрашиваемыеПоля, ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию);
	
	РеквизитыНовогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура.ВидНоменклатуры, ЗапрашиваемыеПоля);
	
	Если Не ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		Для Каждого Свойство Из ЗаполняютсяТолькоПриСозданииНоменклатуры Цикл
			Если ЗначениеЗаполнено(РеквизитыНовогоВида[Свойство.Ключ]) Тогда
				Номенклатура[Свойство.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		РеквизитыСтарогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию);
		Для Каждого КлючЗначение Из РеквизитыСтарогоВида Цикл
			Если Номенклатура[КлючЗначение.Ключ] = КлючЗначение.Значение
			   И ЗначениеЗаполнено(РеквизитыНовогоВида[КлючЗначение.Ключ]) Тогда
				Номенклатура[КлючЗначение.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияПустыхСвойств(Номенклатура, РеквизитыНовогоВида);
	
	ОтработатьЛогикуСвязиРеквизитов(Номенклатура);
	
КонецПроцедуры

// Проверяет корректность смены вида номенклатуры и в случае проблем выставляет отказ в Истина
//
// Параметры:
//  Номенклатура            - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура
//  СтарыйВидНоменклатуры   - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры до смены
//  Отказ                   - Булево
//
Процедура ПроверитьКорректностьСменыВидаНоменклатуры(Номенклатура, СтарыйВидНоменклатуры, Отказ) Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	// ПоляОшибок
	|	НовыйВидНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК НовыйВидНоменклатуры
	|ГДЕ
	|	НовыйВидНоменклатуры.Ссылка = &НовыйВидНоменклатуры
	|";
	
	ПоляОшибок = "";
	
	УсловияВыбораНовогоВидаНоменклатуры = УсловияВыбораНовогоВидаНоменклатуры();
	Для Каждого КлючЗначение Из УсловияВыбораНовогоВидаНоменклатуры Цикл
		ПоляОшибок = ПоляОшибок + СтрШаблон("%1 КАК %2,", КлючЗначение.Значение, КлючЗначение.Ключ) + Символы.ПС;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "// ПоляОшибок", ПоляОшибок);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НовыйВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	ИменаРеквизитов = Новый Массив;
	
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Параметр.Имя = "НовыйВидНоменклатуры" Тогда
			Продолжить;
		КонецЕсли;
		ИменаРеквизитов.Добавить(Параметр.Имя);
	КонецЦикла;
	
	Если ИменаРеквизитов.Количество() > 0 Тогда
		СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ИменаРеквизитов);
		Для Каждого Параметр Из СтарыеРеквизиты Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗначениеОшибки = Результат[0];
	
	Для Каждого Ошибка Из Результат.Колонки Цикл
		Если Ошибка.Имя = "Ссылка"
		 Или Не ЗначениеОшибки[Ошибка.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ошибка.Имя = "ЕстьПроблемаТипНоменклатуры" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида другой тип номенклатуры.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользоватьСерии" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения серий.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользоватьПартии" Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения партий.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТекстИсключения = НСтр("ru = 'Неизвестный код ошибки.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения основной единицы учета
//
// Параметры
//	Объект - СправочникОбъект.Номенклатура
//
// Возвращаемое значение
//	Булево - Истина, если основная единица заполнена корректно или не заполнена
//
Функция ПроверитьКорректностьЗаполненияОсновнойЕдиницыУчета(Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаУчета) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.МинимальнаяЕдиницаОтпускаИзАптеки) Тогда
		
		Если Объект.ОсновнаяЕдиницаУчета = Объект.МинимальнаяЕдиницаОтпускаИзАптеки Тогда
			Возврат Истина;
		КонецЕсли;
		
		УпаковкиНоменклатуры = НоменклатураСервер.ПолучитьУпаковкиНоменклатуры(
			Объект.Ссылка,
			?(Объект.ЭтоЛекарственноеСредство, Объект.Упаковка, Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
		Если УпаковкиНоменклатуры.Найти(Объект.ОсновнаяЕдиницаУчета) = Неопределено Тогда
			Возврат Ложь
		КонецЕсли;
		
		Для Каждого Упаковка Из УпаковкиНоменклатуры Цикл
			Если Упаковка = Объект.ОсновнаяЕдиницаУчета Тогда
				Возврат Истина;
			КонецЕсли;
			Если Упаковка = Объект.МинимальнаяЕдиницаОтпускаИзАптеки Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ТипОсновнойЕдиницыУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОсновнаяЕдиницаУчета, "ТипЕдиницы");
		Если Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений().Найти(ТипОсновнойЕдиницыУчета) <> Неопределено Тогда
			Мера = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипОсновнойЕдиницыУчета);
			Возврат Объект[Мера + "Использовать"] И Объект[Мера + "МожноУказыватьВДокументах"];
		КонецЕсли;
		
		Если ТипОсновнойЕдиницыУчета = Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Объект.ЕдиницаИзмерения = Объект.ОсновнаяЕдиницаУчета;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает все реквизиты элемента справочника Номенклатура
//
// Параметры
//	Номенклатура - СправочникСсылка.Номенклатура или СправочникОбъект.Номенклатура
//
// Возвращаемое значение
//	Структура
//
Функция ПолучитьРеквизитыНоменклатуры(Номенклатура) Экспорт
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРеквизитов.Колонки;
	
	СтруктураРеквизитов = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Имя);
		Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Имя);
		Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		
	КонецЦикла;
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);
	Иначе
		Реквизиты = Номенклатура;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаРеквизитов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Реквизиты);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, СтрокаТаблицы);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает параметры учета номенклатуры
//
// Параметры
//	Номенклатура - СправочникСсылка.Номенклатура
//
// Возвращаемое значение
//	Структура
//
Функция ПараметрыУчета(Номенклатура) Экспорт
	
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("ИспользоватьСерии", "ВидНоменклатуры.ИспользоватьСерии");
	ЗапрашиваемыеПоля.Вставить("ИспользоватьПартии", "ВидНоменклатуры.ИспользоватьПартии");
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, ЗапрашиваемыеПоля);
	
КонецФункции

// Заполняет служебные реквизиты по номенклатуре в объекте
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект, ЗаполняемыеПараметры) Экспорт
	
	ЗапросПараметровУчета = ПолучитьПараметрыЗаполненияРеквизитовПоНоменклатуре(ЗаполняемыеПараметры);
	Если ЗапросПараметровУчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияДанных = Новый ТаблицаЗначений;
	КоллекцияДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КоллекцияДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ЗаполнитьЗначенияСвойств(КоллекцияДанных.Добавить(), Объект);
	
	Запрос = Новый Запрос(ТекстЗапросаПолученияСлужебныхРеквизитов(ЗапросПараметровУчета));
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных);
	
	ЗаполняемыеПоля = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ЗапросПараметровУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка, ЗаполняемыеПоля);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, ЗаполняемыеПараметры, СтрокиЗаполнения = Неопределено) Экспорт
	
	ЗапросПараметровУчета = ПолучитьПараметрыЗаполненияРеквизитовПоНоменклатуре(ЗаполняемыеПараметры);
	Если ЗапросПараметровУчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиЗаполнения <> Неопределено И СтрокиЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияДанных) = Тип("ТаблицаЗначений") Тогда
		ПараметрКоллекция = КоллекцияДанных.Скопировать(, "НомерСтроки, Номенклатура");
	Иначе
		ПараметрКоллекция = КоллекцияДанных.Выгрузить(, "НомерСтроки, Номенклатура");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаПолученияСлужебныхРеквизитов(ЗапросПараметровУчета));
	Запрос.УстановитьПараметр("КоллекцияДанных", ПараметрКоллекция);
	
	ЗаполняемыеПоля = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ЗапросПараметровУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Выборка.НомерСтроки - 1], Выборка, ЗаполняемыеПоля);
	КонецЦикла;
	
КонецПроцедуры

// Условия выбора нового вида номенклатуры. Используются как для ограничения списка выбора, так и для проверки смены вида.
// Возвращаемое значение:
//  Структура - структура условий. Ключ - имя условия, значения - текст запроса условия
//
Функция УсловияВыбораНовогоВидаНоменклатуры() Экспорт
	
	УсловияВыбораНовогоВидаНоменклатуры = Новый Структура;
	
	ЕстьПроблемаТипНоменклатуры = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ТипНоменклатурыРасширенный <> НовыйВидНоменклатуры.ТипНоменклатурыРасширенный
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаТипНоменклатуры", ЕстьПроблемаТипНоменклатуры);
	
	ЕстьПроблемаИспользоватьСерии = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ИспользоватьСерии <> НовыйВидНоменклатуры.ИспользоватьСерии
	|			ТОГДА ИСТИНА
	|		КОГДА &ПолитикаУчетаСерий <> НовыйВидНоменклатуры.ПолитикаУчетаСерий
	|				ИЛИ &ПолитикаУчетаСерийВОтделениях <> НовыйВидНоменклатуры.ПолитикаУчетаСерийВОтделениях
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользоватьСерии", ЕстьПроблемаИспользоватьСерии);
	
	ЕстьПроблемаИспользоватьПартии = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ИспользоватьПартии <> НовыйВидНоменклатуры.ИспользоватьПартии
	|			ТОГДА ИСТИНА
	|		КОГДА &ПолитикаУчетаПартий <> НовыйВидНоменклатуры.ПолитикаУчетаПартий
	|				ИЛИ &ПолитикаУчетаПартийВОтделениях <> НовыйВидНоменклатуры.ПолитикаУчетаПартийВОтделениях
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользоватьПартии", ЕстьПроблемаИспользоватьПартии);
	
	Возврат УсловияВыбораНовогоВидаНоменклатуры;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ ИСТИНА
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

#Область Поиск

////////////////////////////////////////////////////////////////////////////////
// Расширенный поиск в списках

Функция ОбластиПоиска(ПолнотекстовыйПоиск) Экспорт
	
	ОбластиПоиска = Новый Массив;
	ОбластиПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	ОбластиПоиска.Добавить(Метаданные.Справочники.РегистрЛекарственныхСредств);
	ОбластиПоиска.Добавить(Метаданные.Справочники.КЛП);
	ОбластиПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	Если Не ПолнотекстовыйПоиск Тогда
		ОбластиПоиска.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
	КонецЕсли;
	
	Возврат ОбластиПоиска;
	
КонецФункции

Функция ТекстЗапросаПоискаПоОбласти(ОбластьПоиска) Экспорт
	
	Если ОбластьПоиска = Метаданные.Справочники.Номенклатура Тогда
		Возврат "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксимальноеКоличество%
		|	Номенклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ Номенклатура.НаименованиеПолное %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ Номенклатура.КодДляПоиска %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ Номенклатура.Артикул %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|";
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.РегистрЛекарственныхСредств Тогда
		Возврат "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксимальноеКоличество%
		|	Номенклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.РегистрЛекарственныхСредств КАК АптечныеТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ПО
		|		АптечныеТовары.Ссылка = Номенклатура.ЭлементКАТ
		|ГДЕ
		|	АптечныеТовары.Наименование %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ АптечныеТовары.НаименованиеПолное %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ АптечныеТовары.Штрихкоды.Штрихкод = &ИсходнаяСтрокаПоиска
		|";
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.КЛП Тогда
		Возврат "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксимальноеКоличество%
		|	Номенклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.КЛП КАК КЛП
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ПО
		|		КЛП.Ссылка = Номенклатура.ЭлементКАТ
		|ГДЕ
		|	КЛП.Наименование %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ КЛП.НаименованиеПолное %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|";
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
		Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %МаксимальноеКоличество%
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &ИсходнаяСтрокаПоиска
		|";
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения Тогда
		Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ %МаксимальноеКоличество%
		|	ДополнительныеРеквизиты.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Значение %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|	ИЛИ ДополнительныеРеквизиты.ТекстоваяСтрока %ВидСравнения% &СтрокаПоиска %Спецсимвол%
		|";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОбработатьНайденныеДанные(НайденныеДанные) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	РезультатПоиска.Вставить("Штрихкоды", Новый Массив);
	РезультатПоиска.Вставить("АптечныеТовары", Новый Массив);
	РезультатПоиска.Вставить("КЛП", Новый Массив);
	
	Для Каждого Элемент Из НайденныеДанные Цикл
		Если ТипЗнч(Элемент.Метаданные) = Тип("ОбъектМетаданных") Тогда
			
			Если Элемент.Метаданные = Метаданные.Справочники.Номенклатура Тогда
				РезультатПоиска.Номенклатура.Добавить(Элемент.Значение);
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.РегистрЛекарственныхСредств Тогда
				РезультатПоиска.АптечныеТовары.Добавить(Элемент.Значение);
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.КЛП Тогда
				РезультатПоиска.КЛП.Добавить(Элемент.Значение);
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
				РезультатПоиска.Штрихкоды.Добавить(Элемент.Значение.Штрихкод);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
			КонецЕсли;
			
		Иначе
			
			Если Элемент.Метаданные = "Номенклатура" Тогда
				РезультатПоиска.Номенклатура.Добавить(Элемент.Значение);
			ИначеЕсли Элемент.Метаданные = "РегистрЛекарственныхСредств" Тогда
				РезультатПоиска.АптечныеТовары.Добавить(Элемент.Значение);
			ИначеЕсли Элемент.Метаданные = "КЛП" Тогда
				РезультатПоиска.КЛП.Добавить(Элемент.Значение);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если РезультатПоиска.АптечныеТовары.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + "
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭлементКАТ В(&СписокАптечныхТоваров)
		|";
		Запрос.УстановитьПараметр("СписокАптечныхТоваров", РезультатПоиска.АптечныеТовары);
	КонецЕсли;
	Если РезультатПоиска.КЛП.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + "
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭлементКАТ В(&СписокКЛП)
		|";
		Запрос.УстановитьПараметр("СписокКЛП", РезультатПоиска.КЛП);
	КонецЕсли;
	Если РезультатПоиска.Штрихкоды.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + "
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В (&СписокШтрихкодов)
		|";
		Запрос.УстановитьПараметр("СписокШтрихкодов", РезультатПоиска.Штрихкоды);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если РезультатПоиска.Номенклатура.Найти(Выборка.Номенклатура) = Неопределено Тогда
					РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПоиска.Номенклатура;
	
КонецФункции

#КонецОбласти // Поиск

#Область ПанельОтборовНоменклатуры

// Возвращает доступные реквизиты для панели отборов подсистемы ОтборПоФильтрам.ОтборНоменклатурыПоВидуИСвойствам.
//
// Параметры
//	ТипНоменклатуры - СправочникСсылка.ТипНоменклатуры
//	НаборСвойств - набор дополнительных сведений номенклатуры
//
// Возвращаемое значение
//	ТаблицаЗначений - описание доступных реквизитов для отбора
//
Функция ДоступныеРеквизитыДляПанелиОтборов(ТипНоменклатурыРасширенный, ТипНоменклатуры, НаборСвойств) Экспорт
	
	ДоступныеРеквизиты = Новый ТаблицаЗначений();
	ДоступныеРеквизиты.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДоступныеРеквизиты.Колонки.Добавить("ПредставлениеРеквизита", Новый ОписаниеТипов("Строка"));
	ДоступныеРеквизиты.Колонки.Добавить("ЭтоДопРеквизит", Новый ОписаниеТипов("Булево"));
	ДоступныеРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	ДоступныеРеквизитыПоТипам = ПолучитьДоступныеРеквизитыНоменклатурыДляПанелиОтборов();
	ОбщиеРеквизиты = ДоступныеРеквизитыПоТипам.Получить(Справочники.ТипыНоменклатурыРасширенные.ПустаяСсылка());
	РеквизитыПоТипу = ДоступныеРеквизитыПоТипам.Получить(ТипНоменклатурыРасширенный);
	
	НеиспользуемыеТипыДляОтборов = НеиспользуемыеДляОтборовТипы();
	
	Для Каждого РеквизитНоменклатуры Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		ПредставлениеРеквизита = Неопределено;
		Если (РеквизитыПоТипу.Свойство(РеквизитНоменклатуры.Имя, ПредставлениеРеквизита)
		      Или ОбщиеРеквизиты.Свойство(РеквизитНоменклатуры.Имя, ПредставлениеРеквизита))
		   И НеиспользуемыеТипыДляОтборов.Найти(РеквизитНоменклатуры.Тип) = Неопределено Тогда
			Реквизит = ДоступныеРеквизиты.Добавить();
			Реквизит.ИмяРеквизита = РеквизитНоменклатуры.Имя;
			Реквизит.ПредставлениеРеквизита = ?(
				ЗначениеЗаполнено(ПредставлениеРеквизита),
				ПредставлениеРеквизита,
				РеквизитНоменклатуры.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	НаборыСвойств= Новый Массив;
	НаборыСвойств.Добавить(НаборСвойств);
	НаборыСвойств.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Если ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство Тогда
		НаборыСвойств.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_ЛекарственныеСредства"));
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		НаборыСвойств.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Прочая"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", НаборыСвойств);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование     КАК ИмяДопРеквизита,
	|	ДополнительныеРеквизитыИСведения.Представление    КАК ПредставлениеДопРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения      КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка           КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	(НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение)
	|	И НаборыДополнительныхРеквизитов.Ссылка В (&НаборСвойств)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НеиспользуемыеТипыДляОтборов.Найти(Выборка.ТипЗначения) = Неопределено Тогда
			Реквизит = ДоступныеРеквизиты.Добавить();
			Реквизит.ИмяРеквизита = Выборка.ИмяДопРеквизита;
			Реквизит.ПредставлениеРеквизита = Выборка.ПредставлениеДопРеквизита;
			Реквизит.ЭтоДопРеквизит = Истина;
			Реквизит.Свойство = Выборка.Свойство;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеРеквизиты;
	
КонецФункции

// Возвращает доступные поля отбора номенклатуры.
//
// Параметры
//	ТипНоменклатуры - СправочникСсылка.ТипыНоменклатуры - тип номенклатуры, для которого
//		определяются доступные поля отбора
//
// Возвращаемое значение
//	Структура - Ключ - имя реквизита
//				Значение - Представление реквизита
//
Функция ПолучитьДоступныеРеквизитыНоменклатурыДляПанелиОтборов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, ТипНоменклатуры ИЗ Справочник.ТипыНоменклатурыРасширенные");
	Выборка = Запрос.Выполнить().Выбрать();
	
	НеиспользуемыеРеквизиты = НеиспользуемыеДляОтборовРеквизиты();
	
	ДоступныеРеквизитыПоТипам = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДоступныеРеквизиты = Новый Структура;
		Если Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ДоступныеРеквизиты.Вставить("ЕдиницаИзмерения");
		ИначеЕсли Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ДоступныеРеквизиты.Вставить("ЕдиницаИзмерения", НСтр("ru='Единица измерения'"));
		КонецЕсли;
		ДоступныеРеквизитыПоТипам.Вставить(Выборка.Ссылка, ДоступныеРеквизиты);
	КонецЦикла;
	
	ОбщиеРеквизиты = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		
		Если НеиспользуемыеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьВНеобщих = Ложь;
		Для Каждого ДоступныеРеквизиты Из ДоступныеРеквизитыПоТипам Цикл
			Если ДоступныеРеквизиты.Значение.Свойство(Реквизит.Имя) Тогда
				ЕстьВНеобщих = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьВНеобщих Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщиеРеквизиты.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	
	ДоступныеРеквизитыПоТипам.Вставить(Справочники.ТипыНоменклатурыРасширенные.ПустаяСсылка(), ОбщиеРеквизиты);
	
	Возврат ДоступныеРеквизитыПоТипам;
	
КонецФункции

// Возвращает имена реквизитов, которые не могут использоваться для панели отборов по свойствам.
//
// Возвращаемое значение
//  Массив - список имен
//
Функция НеиспользуемыеДляОтборовРеквизиты() Экспорт
	
	НеиспользуемыеРеквизиты = Новый Массив;
	
	НеиспользуемыеРеквизиты.Добавить("НаименованиеПолное");
	НеиспользуемыеРеквизиты.Добавить("ТипНоменклатуры");
	НеиспользуемыеРеквизиты.Добавить("ТипНоменклатурыРасширенный");
	НеиспользуемыеРеквизиты.Добавить("ФайлКартинки");
	НеиспользуемыеРеквизиты.Добавить("ГруппаДоступа");
	НеиспользуемыеРеквизиты.Добавить("ВидНоменклатуры");
	НеиспользуемыеРеквизиты.Добавить("ЭтоЛекарственноеСредство");
	НеиспользуемыеРеквизиты.Добавить("СрокГодности");
	НеиспользуемыеРеквизиты.Добавить("ЕдиницаИзмеренияСрокаГодности");
	НеиспользуемыеРеквизиты.Добавить("Описание");
	НеиспользуемыеРеквизиты.Добавить("КодДляПоиска");
	НеиспользуемыеРеквизиты.Добавить("ЭлементКАТ");
	НеиспользуемыеРеквизиты.Добавить("Упаковка");
	
	Возврат НеиспользуемыеРеквизиты;
	
КонецФункции

// Возвращает типы объектов, которые не могут использоваться для панели отборов по свойствам
//
// Возвращаемое значение
//  Массив - список типов
//
Функция НеиспользуемыеДляОтборовТипы() Экспорт
	
	НеиспользуемыеТипы = Новый Массив;
	
	НеиспользуемыеТипы.Добавить(Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	НеиспользуемыеТипы.Добавить(Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	НеиспользуемыеТипы.Добавить(Новый ОписаниеТипов("ХранилищеЗначения"));
	НеиспользуемыеТипы.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	
	Возврат НеиспользуемыеТипы;
	
КонецФункции

#КонецОбласти // ПанельОтборовНоменклатуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыЗаполненияРеквизитовПоНоменклатуре(ЗаполняемыеПараметры)
	Перем ПараметрыДействия;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ЗапросПараметровУчета = Новый Структура;
	
	Если ЗаполняемыеПараметры.Свойство(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД(), ПараметрыДействия) Тогда
		Если Не ЗначениеЗаполнено(ПараметрыДействия) Тогда
			ПараметрыДействия = "ВестиУчетПоГТД";
		КонецЕсли;
		ЗапросПараметровУчета.Вставить(ПараметрыДействия, "ВестиУчетПоГТД");
	КонецЕсли;
	
	Если ЗаполняемыеПараметры.Свойство(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), ПараметрыДействия) Тогда
		
		Если ТипЗнч(ПараметрыДействия) = Тип("Строка") Тогда
			ПараметрыДействия = Новый Структура(ПараметрыДействия);
		ИначеЕсли ТипЗнч(ПараметрыДействия) = Тип("Массив") Тогда
			ПараметрыДействия = Новый Структура(СтрСоединить(ПараметрыДействия, ","));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗапросПараметровУчета, ПараметрыДействия);
		
	КонецЕсли;
	
	Возврат ЗапросПараметровУчета;
	
КонецФункции

Функция ТекстЗапросаПолученияСлужебныхРеквизитов(ЗапросПараметровУчета)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки   КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура  КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&КоллекцияДанных КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка  КАК Ссылка
	|	%1
	|ПОМЕСТИТЬ СлужебныеРеквизитыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	Ссылка В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаТовары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|	%2
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СлужебныеРеквизитыНоменклатуры КАК СлужебныеРеквизитыНоменклатуры
	|	ПО
	|		ТаблицаТовары.Номенклатура = СлужебныеРеквизитыНоменклатуры.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстПолей = "";
	ТекстПолейИтог = "";
	Для Каждого КлючИЗначение Из ЗапросПараметровУчета Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ",
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
		ТекстПолейИтог = ТекстПолейИтог + ",
		|	СлужебныеРеквизитыНоменклатуры." + Псевдоним + " КАК " + Псевдоним;
	КонецЦикла;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ТекстПолей, ТекстПолейИтог);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
	Номенклатура.ЭтоЛекарственноеСредство = 
		(Номенклатура.ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство);
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Номенклатура.ВестиУчетПоГТД = Ложь;
		Номенклатура.ОКПД2 = Справочники.КлассификаторОКПД2.ПустаяСсылка();
		Номенклатура.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
		Номенклатура.СрокГодности = 0;
		Номенклатура.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
		Номенклатура.КлассификацияМедицинскихИзделийПоВидам = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ПустаяСсылка();
		
	КонецЕсли;
	
	ТипЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ЕдиницаИзмерения, "ТипЕдиницы");
	Для Каждого ТипИзмеряемойВеличины Из Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений() Цикл
		ОтработатьЛогикуЗаполненияМеры(Номенклатура, ТипЕдиницы, ТипИзмеряемойВеличины);
	КонецЦикла;
	
	Если Не Номенклатура.ЭтоЛекарственноеСредство Тогда
		Если ЗначениеЗаполнено(Номенклатура.ЭлементКАТ) Тогда
			Номенклатура.ЭлементКАТ = Неопределено;
		КонецЕсли;
	Иначе
		Номенклатура.КлассификацияМедицинскихИзделийПоВидам = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ПустаяСсылка();
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Если ЗначениеЗаполнено(Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки) Тогда
			Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки = Неопределено;
		КонецЕсли;
		Если Номенклатура.ОсновнаяЕдиницаУчета <> Номенклатура.ЕдиницаИзмерения Тогда
			Номенклатура.ОсновнаяЕдиницаУчета = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура.Упаковка) Тогда
			Номенклатура.Упаковка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ОсновнаяЕдиницаУчета) Тогда
		Если ЗначениеЗаполнено(Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки) Тогда
			Номенклатура.ОсновнаяЕдиницаУчета = Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки;
		ИначеЕсли ЗначениеЗаполнено(Номенклатура.Упаковка) Тогда
			Номенклатура.ОсновнаяЕдиницаУчета = Номенклатура.Упаковка;
		Иначе
			Номенклатура.ОсновнаяЕдиницаУчета = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтработатьЛогикуЗаполненияМеры(Номенклатура, ТипЕдиницы, ТипИзмеряемойВеличины) Экспорт
	
	Если Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений().Найти(ТипИзмеряемойВеличины) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Мера = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипИзмеряемойВеличины);
	Если ТипЕдиницы = ТипИзмеряемойВеличины И Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		
		Номенклатура[Мера + "Использовать"] = Истина;
		Номенклатура[Мера + "Знаменатель"]  = 1;
		Номенклатура[Мера + "Числитель"]    = 1;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Истина;
		Номенклатура[Мера + "ЕдиницаИзмерения"] = Номенклатура.ЕдиницаИзмерения;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
	 Или Номенклатура[Мера + "Знаменатель"] = 0
	 Или Номенклатура[Мера + "Числитель"] = 0
	 Или Не Номенклатура[Мера + "Использовать"] Тогда
		Номенклатура[Мера + "ЕдиницаИзмерения"]          = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Номенклатура[Мера + "Знаменатель"]               = 0;
		Номенклатура[Мера + "Числитель"]                 = 0;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Ложь;
		Номенклатура[Мера + "Использовать"]              = Ложь;
	Иначе
		Если Не ЗначениеЗаполнено(Номенклатура[Мера + "ЕдиницаИзмерения"]) Тогда
			Номенклатура[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаМерыПоУмолчанию(ТипИзмеряемойВеличины);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Возврат ПечатныеФормы;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

Процедура ЗаполнитьЗначенияПустыхСвойств(Приемник, Источник)
	
	Для Каждого КлючЗначение Из Источник Цикл
		Если (ТипЗнч(Приемник[КлючЗначение.Ключ]) = Тип("Булево") И Не Приемник[КлючЗначение.Ключ])
		 Или Не ЗначениеЗаполнено(Приемник[КлючЗначение.Ключ]) Тогда
			Приемник[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЗначенияСвойств(Объект, Свойства)
	
	Для Каждого Свойство Из Свойства Цикл
		Объект[Свойство.Ключ] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМ
#Область СтандартныеПодсистемы

// Возвращает описание блокируемых реквизитов
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов
//   Элемент массива - Строка в формате:
//     ИмяРеквизита[;ИмяЭлементаФормы,...]
//      где
//       ИмяРеквизита     - имя реквизита объекта
//       ИмяЭлементаФормы - имя элемента формы, связанного с реквизитом
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("ВидНоменклатуры");
	БлокируемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	БлокируемыеРеквизиты.Добавить("ЭлементКАТ");
	БлокируемыеРеквизиты.Добавить("ГруппаПКУ");
	БлокируемыеРеквизиты.Добавить("ВестиУчетПоГТД");
	БлокируемыеРеквизиты.Добавить("ЦеноваяГруппа");
	БлокируемыеРеквизиты.Добавить("СтавкаНДС");
	БлокируемыеРеквизиты.Добавить("КлассификацияМедицинскихИзделийПоВидам");
	БлокируемыеРеквизиты.Добавить("ТипНоменклатурыРасширенный");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Получает массив не редактируемых интерактивно реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("КодДляПоиска");
	НеРедактируемыеРеквизиты.Добавить("Наименование");
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	НеРедактируемыеРеквизиты.Добавить("ВидНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ЭлементКАТ");
	НеРедактируемыеРеквизиты.Добавить("Упаковка");
	НеРедактируемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	НеРедактируемыеРеквизиты.Добавить("МинимальнаяЕдиницаОтпускаИзАптеки");
	НеРедактируемыеРеквизиты.Добавить("ОсновнаяЕдиницаУчета");
	НеРедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ТипНоменклатурыРасширенный");
	НеРедактируемыеРеквизиты.Добавить("ЭтоЛекарственноеСредство");
	НеРедактируемыеРеквизиты.Добавить("КлассификацияМедицинскихИзделийПоВидам");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ПоискИУдалениеДублей

// Вызывается для определения прикладных параметров поиска дублей.
//
// Параметры:
//
//     ПараметрыПоиска - Структура - Предлагаемые параметры поиска. Содержит поля:
//
//         *  ПравилаПоиска - ТаблицаЗначений - Предлагаемые правила сравнения для объектов.
//                            Может быть изменена для установки новых вариантов. Содержит колонки.
//               ** Реквизит - Строка - Имя реквизита для сравнения.
//               ** Правило  - Строка - Правило сравнения: "Равно" - сравнение по равенству, "Подобно" -подобие строк,
//                                     "" - пустая строка - не сравнивать.
//
//         * КомпоновщикОтбора - КомпоновщикНастроекКомпоновкиДанных - Инициализированный компоновщик для 
//                               предварительного отбора. Может быть изменен, например, для 
//                               усиления отборов.
// 
//         * ОграниченияСравнения - Массив - Предназначен для заполнения описания прикладных правил-ограничений.
//                                  Должен быть дополнен структурами с полями:
//               ** Представление      - Строка - Описание правила-ограничения для пользователя.
//               ** ДополнительныеПоля - Строка - Список дополнительных реквизитов запятую, необходимых для
//                                                дополнительного анализа.
// 
//         * КоличествоЭлементовДляСравнения - Число - Количество кандидатов в дубли, передаваемых одним вызовом
//                                                     обработчику.
//
//     ДополнительныеПараметры - Произвольный - Значение, переданное при вызове программного интерфейса
//                                              ОбщегоНазначения.НайтиДублиЭлементов.
//                               При вызове пользователем из обработки "ПоискИЗаменаДублей" равно Неопределено.
//
Процедура ПараметрыПоискаДублей(ПараметрыПоиска, ДополнительныеПараметры = Неопределено) Экспорт
	
	Режим = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Режим");
	Если Режим = "КонтрольПоНаименованию" Тогда
		
		ПравилаПоиска = ПараметрыПоиска.ПравилаПоиска;
		ПравилаПоиска.Очистить();
		ЗаполнитьЗначенияСвойств(ПравилаПоиска.Добавить(), Новый Структура("Реквизит, Правило", "НаименованиеПолное", "Равно"));
		
		Отбор = ПараметрыПоиска.КомпоновщикОтбора.Настройки.Отбор;
		Отбор.Элементы.Очистить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ЭтоГруппа", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается для определения дублей по прикладным правилам.
//
// Параметры:
//
//     ТаблицаКандидатов - ТаблицаЗначений - Описывает кандидатов в дубли. Содержит колонки:
//         - Ссылка1  - ЛюбаяСсылка - Ссылка на элемент первого кандидата.
//         - Ссылка2  - ЛюбаяСсылка - Ссылка на элемент второго кандидата.
//         - ЭтоДубли - Булево      - Флаг того, что кандидаты действительно являются дублями. По умолчанию содержит 
//                                    значение Ложь, может быть изменено на Истина, если кандидаты - действительно
//                                    дубли.
//         - Поля1    - Структура   - Содержит поля Код, Наименование и дополнительные поля первого кандидата,
//         указанные в ПараметрыПоискаДублей.
//         - Поля2    - Структура   - Содержит поля Код, Наименование и дополнительные поля второго кандидата,
//         указанные в ПараметрыПоискаДублей.
//
//     ДополнительныеПараметры - Произвольный - Значение, переданное при вызове программного интерфейса
//                                              ОбщегоНазначения.НайтиДублиЭлементов.
//                               При вызове пользователем из обработки "ПоискИЗаменаДублей" равно Неопределено.
//
Процедура ПриПоискеДублей(ТаблицаКандидатов, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Для всех интерфейсов, из которых вызывается метод, обработка дублей одинакова - стандартная.
	ТаблицаКандидатов.ЗаполнитьЗначения(Истина, "ЭтоДубли");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПоискИУдалениеДублей

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли