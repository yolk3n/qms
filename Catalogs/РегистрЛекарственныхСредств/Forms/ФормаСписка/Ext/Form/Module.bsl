
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЕстьПравоСозданияНоменклатуры = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
	Элементы.ФормаСоздатьНоменклатуру.Видимость = ЕстьПравоСозданияНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НоменклатураПоКлассификатору" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОткрытьНоменклатуру(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Или ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		Номенклатура = ДанныеСтроки.Номенклатура;
	Иначе
		Номенклатура = ПолучитьНоменклатуруПоАптечномуТовару(ДанныеСтроки.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ПараметрыФормы.Вставить("Ключ", Номенклатура);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли ЕстьПравоСозданияНоменклатуры Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНовогоЭлементаНоменклатурыПоКлассификатору", АптечныеТоварыКлиент, ДанныеСтроки);
		ТекстВопроса = НСтр("ru='Для текущей позиции АТ номенклатура не определена. Создать новый элемент справочника ""Номенклатура""?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для текущей позиции АТ номенклатура не определена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	СписокЛекарственныхСредств = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокЛекарственныхСредств.Добавить(ВыделеннаяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	Если СписокЛекарственныхСредств.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для обработки.'"));
		Возврат;
	КонецЕсли;
	
	Оповестить = Новый ОписаниеОповещения("СоздатьНоменклатуруПоКлассификатору", АптечныеТоварыКлиент, СписокЛекарственныхСредств);
	
	Тип = ПредопределенноеЗначение("Справочник.ТипыНоменклатурыРасширенные.ЛекарственноеСредство");
	ВидНоменклатуры = НоменклатураВызовСервера.ВидНоменклатурыПоУмолчанию(Тип);
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВыполнитьОбработкуОповещения(Оповестить, ВидНоменклатуры);
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("ТипНоменклатурыРасширенный", Тип);
		
		ОткрытьФорму(
			"Справочник.ВидыНоменклатуры.ФормаВыбора",
			Новый Структура("Отбор", Отбор),
			ЭтотОбъект,
			,
			,
			,
			Оповестить,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформлениеСписка = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьУсловноеОформлениеДинамическогоСписка(
		Список, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
	// Цвет фона в строках списка Список
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Элементы, не связанные с диском ИТС'");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"НомерРЛС", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Цвет фона в строках списка Список
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Регистрация не действует'");
	
	Статусы = Новый СписокЗначений;
	Статусы.Добавить(2);
	Статусы.Добавить(3);
	Статусы.Добавить(4);
	Статусы.Добавить(10);
	Статусы.Добавить(99);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"СтатусДействия", ВидСравненияКомпоновкиДанных.ВСписке, Статусы);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
	УсловноеОформлениеСписка = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьУсловноеОформлениеДинамическогоСписка(Список);
	СтатусыДействия = АптечныеТовары.ВозможныеСтатусыДействияПрепарата();
	Для Каждого Статус Из СтатусыДействия Цикл
		Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
		
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусДействия.Имя);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
			"СтатусДействия", ВидСравненияКомпоновкиДанных.Равно, Статус.Ключ);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Статус.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруПоАптечномуТовару(Знач АптечныйТовар)
	
	Возврат АптечныеТовары.ПолучитьНоменклатуруПоЭлементуКАТ(АптечныйТовар);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
