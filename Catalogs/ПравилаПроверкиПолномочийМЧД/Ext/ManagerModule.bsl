// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолныеИменаОбъектов = Новый Массив;
	
	МетаданныеОбъекта = Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ПолныеИменаОбъектов, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПравилаПроверкиПолномочийМЧД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиПолномочийМЧД КАК ПравилаПроверкиПолномочийМЧД
	|ГДЕ
	|	ПравилаПроверкиПолномочийМЧД.Код = """"
	|	И ПравилаПроверкиПолномочийМЧД.Ссылка > &ПравилоПроверки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ОтработаныВсеПравила = Ложь;
	ПравилоПроверки = ПустаяСсылка();
	
	Пока НЕ ОтработаныВсеПравила Цикл
		
		Запрос.УстановитьПараметр("ПравилоПроверки", ПравилоПроверки);
		МассивПравилПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); // Массив из СправочникСсылка.ПравилаПроверкиПолномочийМЧД
		КоличествоПравилПроверки = МассивПравилПроверки.Количество();
		ОтработаныВсеПравила = КоличествоПравилПроверки < 1000;
		
		Если МассивПравилПроверки.Количество() > 0 Тогда
			ПравилоПроверки = МассивПравилПроверки[КоличествоПравилПроверки - 1];
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивПравилПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИменаМетаданных = Новый Массив;
	ИменаМетаданных.Добавить("Справочник.ПравилаПроверкиПолномочийМЧД");
	
	ИменаБлокированныхМетаданных = Новый Массив();
	ИменаБлокированныхМетаданных.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
	ИменаБлокированныхМетаданных.Добавить("Справочник.МашиночитаемыеДоверенностиКонтрагентов");
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
		Параметры.Очередь, ИменаБлокированныхМетаданных) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаОбъект);
			ПравилоОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			
			Если ПравилоОбъект <> Неопределено Тогда
				
				Записать = Ложь;
				ОбработатьДанные_УстановкаКода(ПравилоОбъект, Записать);
				
				Если Записать Тогда
					ПравилоОбъект.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать правило проверки полномочий МЧД: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые правила проверки полномочий МЧД (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция правил проверки полномочий МЧД: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
		
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ИменаМетаданных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает коды элементов
// 
// Параметры:
//  ПравилоОбъект - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  Записать - Булево
Процедура ОбработатьДанные_УстановкаКода(ПравилоОбъект, Записать)
	
	Если НЕ ЗначениеЗаполнено(ПравилоОбъект.Код) Тогда
		
		ПравилоОбъект.УстановитьНовыйКод();
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты правила проверки по данным формы.
// 
// Параметры:
//  ПравилоОбъект - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  Форма - ФормаКлиентскогоПриложения
//  ПравилоНастроено - Булево
//  
Процедура ЗаполнитьПравило(ПравилоОбъект, Форма, ПравилоНастроено) Экспорт
	
	ПравилоОбъект.Скрипт = "";
	ПравилоОбъект.НастройкиПроверки.Очистить();
	
	Если ПравилоНастроено Тогда
		
		Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
		
		Если Форма.ВариантПроверки = Варианты.Скрипт Тогда
			
			ПравилоОбъект.Скрипт = Форма.Скрипт;
			Возврат;
			
		ИначеЕсли Форма.ВариантПроверки = Варианты.Настройка Тогда
			
			СтрокиДерева = Форма.ДеревоОтбора.ПолучитьЭлементы();
			
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				
				Если СтрокаДерева.ДоступенСписок Тогда
					
					ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
					
					Если ЭлементыДерева.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Список = Новый СписокЗначений();
					
					Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
						Если ЗначениеЗаполнено(ЭлементДерева.Данные)
							И Список.НайтиПоЗначению(ЭлементДерева.Данные) = Неопределено Тогда
							Список.Добавить(ЭлементДерева.Данные);
						КонецЕсли;
					КонецЦикла;
					
					Если Список.Количество() > 0 Тогда
						СтрокаТЧ = ПравилоОбъект.НастройкиПроверки.Добавить();
						СтрокаТЧ.ИмяПоляДанных = СтрокаДерева.ИмяПоляДанных;
						СтрокаТЧ.Список = Новый ХранилищеЗначения(Список, Новый СжатиеДанных(9));
					КонецЕсли;
					
				Иначе
					
					Если (СтрокаДерева.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево()
						И СтрокаДерева.НачальноеЗначение = СтрокаДерева.КонечноеЗначение)
						ИЛИ (СтрокаДерева.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15()
						И СтрокаДерева.НачальноеЗначение + СтрокаДерева.КонечноеЗначение > 0) Тогда
						
						СтрокаТЧ = ПравилоОбъект.НастройкиПроверки.Добавить();
						СтрокаТЧ.ИмяПоляДанных = СтрокаДерева.ИмяПоляДанных;
						СтрокаТЧ.НачальноеЗначение = СтрокаДерева.НачальноеЗначение;
						СтрокаТЧ.КонечноеЗначение = СтрокаДерева.КонечноеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает правило для конкретной МЧД
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  Форма - ФормаКлиентскогоПриложения
// 
Процедура ЗаписатьПравило(Доверенность, Форма) Экспорт
	
	Если НЕ МашиночитаемыеДоверенности.ЕстьПравоНастройкиПравилПроверкиПолномочий(Доверенность.Метаданные())
		ИЛИ НЕ Доверенность.ПолномочияОграничены Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
	
		ПравилоНастроено = МашиночитаемыеДоверенностиКлиентСервер.ПравилоНастроено(Форма);
		
		Если ПравилоНастроено ИЛИ ЗначениеЗаполнено(Форма.Правило) Тогда
			
			ПравилоОбъект = Неопределено;
			
			Если ЗначениеЗаполнено(Форма.Правило) Тогда
				ПравилоОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(Форма.Правило);
			Иначе
				Если ПравилоНастроено Тогда
					ПравилоОбъект = СоздатьЭлемент();
				КонецЕсли;
			КонецЕсли;
			
			Если ПравилоОбъект <> Неопределено Тогда
				
				ЗаполнитьПравило(ПравилоОбъект, Форма, ПравилоНастроено);
				ПравилоОбъект.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Доверенность = Доверенность;
				МенеджерЗаписи.ПравилоПроверки = ПравилоОбъект.Ссылка;
				МенеджерЗаписи.Записать();
				
				Форма.Правило = ПравилоОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Операция = НСтр("ru = 'Запись правила проверки полномочий МЧД'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось записать правило проверки полномочий. Подробности в журнале регистрации'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстСообщения, Доверенность);
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// При создании на сервере вкладки настроек правил проверки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПриСозданииНаСервереФормыНастроек(Форма) Экспорт
	
	МетаданныеМЧД = Форма.РеквизитФормыВЗначение("Объект").Метаданные();
	Форма.Элементы.ГруппаПроверкаПолномочий.ТолькоПросмотр =
		НЕ МашиночитаемыеДоверенности.ЕстьПравоНастройкиПравилПроверкиПолномочий(МетаданныеМЧД);
	Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
	
	Для Каждого КлючИЗначение Из Варианты Цикл
		Форма.Элементы.ВариантПроверки.СписокВыбора.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Форма.Элементы.ДекорацияОписаниеСкрипта.Заголовок =
		МашиночитаемыеДоверенности.ТекстПодсказкиСкриптаПроверкиПолномочий();
	
КонецПроцедуры

// При чтении настроек формы конструктора
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  			  - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//  			  - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  Форма - ФормаКлиентскогоПриложения
Процедура ПриЧтенииНастроек(ТекущийОбъект, Форма) Экспорт
	
	Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
	Форма.ВариантПроверки = Варианты.Настройка;
	
	СсылкаНаПравило = ПустаяСсылка();
	
	Если ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.ПравилаПроверкиПолномочийМЧД") Тогда
		
		СсылкаНаПравило = ТекущийОбъект.Ссылка;
		
	Иначе
		
		СсылкаНаПравило = Форма.Правило;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаПравило) Тогда
			
			МЧД = ТекущийОбъект.Ссылка;
			
			Если ЗначениеЗаполнено(МЧД) Тогда
				
				СсылкаНаПравило = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(ТекущийОбъект.Ссылка);
				Форма.Правило = СсылкаНаПравило;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДеревоНастроек(Форма);
	
	Если ЗначениеЗаполнено(СсылкаНаПравило) Тогда
		Форма.Скрипт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПравило, "Скрипт");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПравило) Тогда
		
		Если ЗначениеЗаполнено(Форма.Скрипт) Тогда
			Форма.ВариантПроверки = Варианты.Скрипт;
		ИначеЕсли МашиночитаемыеДоверенностиКлиентСервер.ДеревоСодержитНастройки(Форма.ДеревоОтбора) Тогда
			Форма.ВариантПроверки = Варианты.Настройка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные отбора поля для упрощенной настройки.
// 
// Возвращаемое значение:
//  Структура - Новые данные отбора:
// * ИмяПоляДанных - Строка
// * ЗаголовокПоля - Строка
// * Тип - ОписаниеТипов
// * ДоступенСписок - Булево
// * НачальноеЗначение - Булево, Число -
// * КонечноеЗначение - Булево, Число -
// * Картинка - Число
// * Список - Массив из СправочникСсылка.ВидыДокументовЭДО, ОпределяемыйТип.КонтрагентБЭД
// 
Функция НовыеДанныеОтбора()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяПоляДанных", "");
	Результат.Вставить("ЗаголовокПоля", "");
	Результат.Вставить("Тип", Новый ОписаниеТипов());
	Результат.Вставить("ДоступенСписок", Ложь);
	Результат.Вставить("НачальноеЗначение", 0);
	Результат.Вставить("КонечноеЗначение", 0);
	Результат.Вставить("Картинка", 0);
	Результат.Вставить("Список", Новый Массив());
	Возврат Результат;
	
КонецФункции

// Инициализирует поля настроек для дерева правил проверки.
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеОтбора
Функция ПоляНастроек()
	
	Картинки = МашиночитаемыеДоверенностиКлиентСервер.НаборКартинок();
	Результат = Новый Массив();
	
	ДанныеОтбора = НовыеДанныеОтбора();
	ДанныеОтбора.ИмяПоляДанных = "СуммаДокумента";
	ДанныеОтбора.ЗаголовокПоля = НСтр("ru = 'Сумма документа'");
	ДанныеОтбора.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15();
	ДанныеОтбора.Картинка = Картинки.Ресурс;
	ДанныеОтбора.НачальноеЗначение = 0;
	ДанныеОтбора.КонечноеЗначение = 0;
	Результат.Добавить(ДанныеОтбора);
	
	ДанныеОтбора = НовыеДанныеОтбора();
	ДанныеОтбора.ИмяПоляДанных = "ВидДокумента";
	ДанныеОтбора.ЗаголовокПоля = НСтр("ru = 'Виды документов'");
	ДанныеОтбора.Тип = Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО");
	ДанныеОтбора.ДоступенСписок = Истина;
	ДанныеОтбора.Картинка = Картинки.Документ;
	Результат.Добавить(ДанныеОтбора);
	
	ДанныеОтбора = НовыеДанныеОтбора();
	ДанныеОтбора.ИмяПоляДанных = "Контрагент";
	ДанныеОтбора.ЗаголовокПоля = НСтр("ru = 'Контрагенты'");
	ДанныеОтбора.Тип = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
	ДанныеОтбора.ДоступенСписок = Истина;
	ДанныеОтбора.Картинка = Картинки.Справочник;
	Результат.Добавить(ДанныеОтбора);
	
	Возврат Результат;
	
КонецФункции

// Читает таблицу упрощенных настроек правила проверки полномочий.
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ТаблицаНастроекОтбора(Правило) Экспорт
	
	Результат = Новый ТаблицаЗначений();
	
	Если ЗначениеЗаполнено(Правило) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.ИмяПоляДанных,
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.НачальноеЗначение,
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.КонечноеЗначение,
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.Список
			|ИЗ
			|	Справочник.ПравилаПроверкиПолномочийМЧД.НастройкиПроверки КАК ПравилаПроверкиПолномочийМЧДНастройкиПроверки
			|ГДЕ
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Правило);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет дерево упрощенных настроек.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ЗаполнитьДеревоНастроек(Форма)
	
	КореньДерева = Форма.ДеревоОтбора.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	ПоляНастроек = ПоляНастроек();
	ТаблицаНастроек = ТаблицаНастроекОтбора(Форма.Правило);
	ЕстьНастройки = ТаблицаНастроек.Количество() > 0;
	
	Для Каждого Поле Из ПоляНастроек Цикл
		
		Элемент = КореньДерева.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, Поле,
			"Картинка, Тип, ЗаголовокПоля, НачальноеЗначение, КонечноеЗначение, ДоступенСписок, ИмяПоляДанных");
		
		Если ЕстьНастройки Тогда
			
			СтрокаТЗ = ТаблицаНастроек.Найти(Элемент.ИмяПоляДанных, "ИмяПоляДанных");
			Если СтрокаТЗ <> Неопределено Тогда
				
				Если Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево()
					ИЛИ Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15() Тогда
					ЗаполнитьЗначенияСвойств(Элемент, СтрокаТЗ, "НачальноеЗначение, КонечноеЗначение");
				Иначе
					
					Список = СтрокаТЗ.Список.Получить();
					КартинкаСтрок = МашиночитаемыеДоверенностиКлиентСервер.НаборКартинок().Реквизит;
					
					Если ЗначениеЗаполнено(Список) Тогда
						
						СтрокиДерева = Элемент.ПолучитьЭлементы();
						
						Для Каждого ЭлементСписка Из Список Цикл
							
							Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
								
								СсылкаНаЭлемент =
									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСписка.Значение, "Ссылка");
								
								Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
									
									НоваяСтрока = СтрокиДерева.Добавить();
									НоваяСтрока.Тип = Элемент.Тип;
									НоваяСтрока.Данные = СсылкаНаЭлемент;
									НоваяСтрока.Картинка = КартинкаСтрок;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.Данные = ПредставлениеДанных(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует текст представления пустого значения в дереве настроек
// 
// Возвращаемое значение:
//  Строка - Значение не указано
Функция ЗначениеНеУказано()
	Возврат НСтр("ru = 'Нет ограничений'");
КонецФункции

// Формирует представление данных строки дерева
// 
// Параметры:
//  Элемент - ДанныеФормыЭлементДерева
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДанных(Элемент) Экспорт
	
	ТекстЗначениеНеУказано = ": " + ЗначениеНеУказано();
	
	Если Элемент.ДоступенСписок Тогда
		
		КоличествоЭлементов = Элемент.ПолучитьЭлементы().Количество();
		Возврат Элемент.ЗаголовокПоля +
			?(КоличествоЭлементов = 0, ТекстЗначениеНеУказано, СтрШаблон(" (%1)", КоличествоЭлементов));
		
	КонецЕсли;
	
	Если Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15() Тогда
	
		ТекстСуммы = "";
		
		Если ЗначениеЗаполнено(Элемент.НачальноеЗначение) Тогда
			ТекстСуммы = "от " + Формат(Элемент.НачальноеЗначение, "ЧРГ=' '");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.КонечноеЗначение) Тогда
			ТекстСуммы = ТекстСуммы + ?(ЗначениеЗаполнено(ТекстСуммы), " ", "") +
				"до " + Формат(Элемент.КонечноеЗначение, "ЧРГ=' '");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстСуммы) Тогда
			ТекстСуммы = ЗначениеНеУказано();
		КонецЕсли;
		
		Возврат Элемент.ЗаголовокПоля + ": " + ТекстСуммы;
	
	ИначеЕсли Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево() Тогда
	
		Если Элемент.НачальноеЗначение = Элемент.КонечноеЗначение Тогда
			Возврат Элемент.ЗаголовокПоля + ": " + Элемент.НачальноеЗначение;
		КонецЕсли;
		
		Возврат Элемент.ЗаголовокПоля + ТекстЗначениеНеУказано;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли