
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОтборНепривязанные = Параметры.Свойство("ОтборНеПривязанныеКНоменклатуре") И Параметры.ОтборНеПривязанныеКНоменклатуре;
	Если ОтборНепривязанные Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КЛП.Ссылка КАК ССылка
		|ИЗ
		|	Справочник.КЛП КАК КЛП
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.Номенклатура КАК Номенклатура
		|		ПО
		|			КЛП.Ссылка = Номенклатура.ЭлементКАТ
		|ГДЕ
		|	Номенклатура.Ссылка ЕСТЬ NULL
		|	ИЛИ Номенклатура.Ссылка = &Номенклатура
		|");
		Запрос.УстановитьПараметр("Номенклатура", ?(Параметры.Свойство("Номенклатура"), Параметры.Номенклатура, Справочники.Номенклатура.ПустаяСсылка()));
		
		Параметры.Отбор.Вставить("Ссылка", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

Функция РеквизитыНаследуемыеИзСМНН() Экспорт
	
	РеквизитыСМНН = Метаданные.Справочники.СМНН.Реквизиты;
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ДействующиеВеществаМНН.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ФормаВыпуска.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ФармакоТерапевтическаяГруппа.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.БезрецептурныйОтпуск.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.СильнодействующиеИЯды.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.КодМКБ10.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ГруппировочноеНаименованиеМИБПНаАнглийскомЯзыке.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ЗаболеваниеИлиГруппаЗаболеванийМИБП.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ВНациональномКалендареПрививок.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ВКалендареПрививокПоЭпидемическимПоказаниям.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ПризнакЖивойВакцины.Имя);
	ИменаРеквизитов.Добавить(РеквизитыСМНН.ПризнакАссоциированнойВакцины.Имя);
	
	Возврат ИменаРеквизитов;
	
КонецФункции

Процедура ОбновитьЛекарственныеПрепараты(Отбор, ДанныеОбновления) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеКЛП.Ссылка  КАК КЛП
	|ИЗ
	|	Справочник.КЛП КАК ДанныеКЛП
	|");
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого КлючИЗначение Из Отбор Цикл
		
		ВыражениеОтбора = СтрШаблон("ДанныеКЛП.%1 = &%1", КлючИЗначение.Ключ);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(ВыражениеОтбора);
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	ЧастиВыраженияПроверки = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеОбновления Цикл
		ЧастиВыраженияПроверки.Добавить(СтрШаблон("ДанныеКЛП.%1 = &%1", КлючИЗначение.Ключ));
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ЧастиВыраженияПроверки.Количество() > 0 Тогда
		ВыражениеПроверки = СтрШаблон("НЕ (%1)", СтрСоединить(ЧастиВыраженияПроверки, Символы.ПС + "И "));
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(ВыражениеПроверки);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТранзакцияАктивна = ТранзакцияАктивна();
	Если Не ТранзакцияАктивна Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.КЛП");
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "КЛП");
		БлокировкаДанных.Заблокировать();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КЛПОбъект = Выборка.КЛП.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(КЛПОбъект, ДанныеОбновления);
			КЛПОбъект.Записать();
			
		КонецЦикла;
		
		Если Не ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Текст = НСтр("ru = 'Не удалось обновить лекарственные препараты по причине:'");
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение Текст;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет описание препарата в регистре ОписанияЛекарственныхСредств
//
// Параметры
//  Препарат - СправочникСсылка.РегистрЛекарственныхСредств
//
Процедура ЗаполнитьУпаковкиПрепарата(Препарат) Экспорт
	
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("Ссылка");
	ЗапрашиваемыеПоля.Вставить("Упаковка");
	
	ОписаниеПрепарата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Препарат, ЗапрашиваемыеПоля);
	
	Набор = РегистрыСведений.УпаковкиЛекарственныхСредств.СоздатьНаборЗаписей();
	Набор.Отбор.КАТ.Установить(ОписаниеПрепарата.Ссылка);
	
	ЗаполнитьУпаковкиПрепаратаРекурсивно(Набор, ОписаниеПрепарата, ОписаниеПрепарата.Упаковка);
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьУпаковкиПрепаратаРекурсивно(Набор, ОписаниеПрепарата, Упаковка, НомерУпаковки = 1)
	
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Родитель");
	ЗаполнитьУпаковкиПрепаратаРекурсивно(Набор, ОписаниеПрепарата, Родитель, НомерУпаковки);
	
	СтрокаНабора = Набор.Добавить();
	СтрокаНабора.Упаковка       = Упаковка;
	СтрокаНабора.КАТ            = ОписаниеПрепарата.Ссылка;
	СтрокаНабора.НомерУпаковки  = НомерУпаковки;
	
	НомерУпаковки = НомерУпаковки + 1;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Возвращает описание блокируемых реквизитов
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов
//   Элемент массива - Строка в формате:
//     ИмяРеквизита[;ИмяЭлементаФормы,...]
//      где
//       ИмяРеквизита     - имя реквизита объекта
//       ИмяЭлементаФормы - имя элемента формы, связанного с реквизитом
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("СМНН");
	БлокируемыеРеквизиты.Добавить("ДействующиеВеществаМНН");
	БлокируемыеРеквизиты.Добавить("ТорговоеНаименование");
	БлокируемыеРеквизиты.Добавить("ФормаВыпуска");
	БлокируемыеРеквизиты.Добавить("БазоваяЕдиницаИзмеренияКАТ");
	БлокируемыеРеквизиты.Добавить("Упаковка");
	
	БлокируемыеРеквизиты.Добавить("ГруппаПКУ");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Получает массив не редактируемых интерактивно реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("КодЕСКЛП");
	НеРедактируемыеРеквизиты.Добавить("УникальныйИдентификаторЕСКЛП");
	НеРедактируемыеРеквизиты.Добавить("КонтрольноеЗначениеДанныхСервиса");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли