
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуЕдиниц();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЕдиницыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Единицы.ТекущиеДанные;
	Если ТекущиеДанные.Выбран = 2 Тогда
		ТекущиеДанные.Выбран = 0
	КонецЕсли;
	
	УстановитьПометкиРодителей(ТекущиеДанные);
	УстановитьПометкиПодчиненных(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ОчиститьСообщения();
	БезОшибок = ОбработатьРезультатыПодбораНаСервере();
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	Если БезОшибок Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Отображение полей ЕдиницыКодовоеБуквенноеОбозначениеНациональное, ЕдиницыКодовоеБуквенноеОбозначениеМеждународное, ЕдиницыУсловноеОбозначениеНациональное, ЕдиницыУсловноеОбозначениеМеждународное, ЕдиницыКодЧисловой
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницыКодовоеБуквенноеОбозначениеНациональное.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницыКодовоеБуквенноеОбозначениеМеждународное.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницыУсловноеОбозначениеНациональное.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницыУсловноеОбозначениеМеждународное.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницыКодЧисловой.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Единицы.КодЧисловой", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Шрифт строк таблицы Единицы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Единицы.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Единицы.КодЧисловой", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
	// Цвет текста строк таблицы Единицы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Единицы.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Единицы.Существует", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноГрифельноСиний);
	
КонецПроцедуры

// Заполняет список валют из макета ОКВ
//
&НаСервере
Процедура ЗаполнитьТаблицуЕдиниц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.КодОКЕИ КАК Код,
	|	ЕдиницыИзмерения.Наименование КАК Наименование,
	|	ЕдиницыИзмерения.ТипЕдиницы КАК ТипЕдиницыИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";
	СуществующиеЕдиницы = Запрос.Выполнить().Выгрузить();
	
	КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	ДеревоЕдиниц = РеквизитФормыВЗначение("Единицы");
	
	Классификаторы = ДеревоЕдиниц.Строки;
	ТипыЕдиниц = Неопределено;
	ЕдиницыИзмерения = Неопределено;
	
	Для каждого ЗаписьОКЕИ Из КлассификаторТаблица Цикл
		Если ЗаписьОКЕИ.Level = "0" Тогда
			ТипыЕдиниц = Классификаторы.Добавить();
			НоваяСтрока = ТипыЕдиниц;
		ИначеЕсли ЗаписьОКЕИ.Level = "1" Тогда
			ЕдиницыИзмерения = ТипыЕдиниц.Строки.Добавить();
			НоваяСтрока = ЕдиницыИзмерения;
		Иначе
			
			НоваяСтрока = ЕдиницыИзмерения.Строки.Добавить();
			НоваяСтрока.КодЧисловой = ЗаписьОКЕИ.Code;
			НоваяСтрока.УсловноеОбозначениеНациональное = ЗаписьОКЕИ.SymbolNational;
			НоваяСтрока.УсловноеОбозначениеМеждународное = ЗаписьОКЕИ.SymbolInternational;
			НоваяСтрока.КодовоеБуквенноеОбозначениеНациональное = ЗаписьОКЕИ.CodeNameNational;
			НоваяСтрока.КодовоеБуквенноеОбозначениеМеждународное = ЗаписьОКЕИ.CodeNameInternational;
			Если ЗначениеЗаполнено(ЗаписьОКЕИ.Type) Тогда
				НоваяСтрока.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения[ЗаписьОКЕИ.Type];
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Наименование = ЗаписьОКЕИ.Name;
		
		Если ЗаписьОКЕИ.level = "2" Тогда
			СуществующаяЕдиница = СуществующиеЕдиницы.НайтиСтроки(Новый Структура(
				"Код, Наименование, ТипЕдиницыИзмерения",
				НоваяСтрока.КодЧисловой,
				НазваниеЕдиницыИзКлассификатора(НоваяСтрока),
				НоваяСтрока.ТипЕдиницы));
			Если СуществующаяЕдиница.Количество() Тогда
				НоваяСтрока.Существует = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЕдиниц, "Единицы");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекущиеДанные)

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда // Верхний уровень
		
		ДочерниеСтроки = Родитель.ПолучитьЭлементы();
		КоличествоВыбранных = 0;
		ОбщееКоличество = 0;
		Для каждого Элемент Из ДочерниеСтроки Цикл
			ОбщееКоличество = ОбщееКоличество + 1;
			Если Элемент.Выбран = 2 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 0.5;
				Прервать;
			ИначеЕсли Элемент.Выбран = 1 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбщееКоличество = КоличествоВыбранных Тогда
			Родитель.Выбран = 1;
		ИначеЕсли КоличествоВыбранных = 0 Тогда
			Родитель.Выбран = 0;
		Иначе
			Родитель.Выбран = 2;
		КонецЕсли;
		
		УстановитьПометкиРодителей(Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекущиеДанные)
	
	ДочерниеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	Для каждого Элемент Из ДочерниеСтроки Цикл
		Элемент.Выбран = ТекущиеДанные.Выбран;
		УстановитьПометкиПодчиненных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатыПодбораНаСервере()
	
	ВыбранныеЕдиницы = Новый Массив;
	Коды = Новый Массив;
	
	Дерево = РеквизитФормыВЗначение("Единицы");
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Если СтрокаУровень1.Выбран Тогда
			Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
				Если СтрокаУровень2.Выбран Тогда
					Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
						Если СтрокаУровень3.Выбран Тогда
						
							ВыбранныеЕдиницы.Добавить(СтрокаУровень3);
							Коды.Добавить(СтрокаУровень3.КодЧисловой);
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		СозданныеЕдиницы = Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(Коды);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	БезОшибок = Ложь;
	Для Каждого Единица Из СозданныеЕдиницы Цикл
		Если ЗначениеЗаполнено(Единица) Тогда
			БезОшибок = Единица.ПолучитьОбъект().ПроверитьЗаполнение() И БезОшибок;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БезОшибок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НазваниеЕдиницыИзКлассификатора(Единица)
	
	Если ЗначениеЗаполнено(Единица.УсловноеОбозначениеНациональное) Тогда
		Наименование = Единица.УсловноеОбозначениеНациональное;
	ИначеЕсли ЗначениеЗаполнено(Единица.УсловноеОбозначениеМеждународное) Тогда
		Наименование = Единица.УсловноеОбозначениеМеждународное;
	ИначеЕсли ЗначениеЗаполнено(Единица.КодовоеБуквенноеОбозначениеНациональное) Тогда
		Наименование = Единица.КодовоеБуквенноеОбозначениеНациональное;
	ИначеЕсли ЗначениеЗаполнено(Единица.КодовоеБуквенноеОбозначениеМеждународное) Тогда
		Наименование = Единица.КодовоеБуквенноеОбозначениеМеждународное;
	Иначе
		Наименование = Единица.Наименование;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
