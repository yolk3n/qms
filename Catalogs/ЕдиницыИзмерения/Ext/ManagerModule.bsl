
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		ТипЕдиницы = Неопределено;
		Если Параметры.Свойство("Ключ") И Не Параметры.Ключ.Пустая() Тогда
			ТипЕдиницы = Параметры.Ключ.ТипЕдиницы;
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("Номенклатура") Тогда
				ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка;
				Параметры.ЗначенияЗаполнения.Вставить("ТипЕдиницы", ТипЕдиницы);
			Иначе
				Параметры.ЗначенияЗаполнения.Свойство("ТипЕдиницы", ТипЕдиницы);
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
			ТипЕдиницы = Параметры.ЗначениеКопирования.ТипЕдиницы;
		КонецЕсли;
		
		Если ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаУпаковкиНоменклатуры";
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		Если Параметры.Свойство("ВыборУпаковкиНоменклатуры") Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораУпаковокНоменклатуры";
		ИначеЕсли Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Номенклатура") Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораЕдиницИзмеренияНоменклатуры";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Номенклатура = Неопределено;
	Если Параметры.Отбор.Свойство("Номенклатура", Номенклатура) Тогда
		
		Параметры.Отбор.Удалить("Номенклатура");
		ПараметрыОтбора = Новый Структура("Номенклатура", Номенклатура);
		
		ТорговоеНаименование = Неопределено;
		Если Параметры.Отбор.Свойство("ТорговоеНаименование", ТорговоеНаименование) Тогда
			Если Не ЗначениеЗаполнено(ТорговоеНаименование) Тогда
				ТорговоеНаименование = Неопределено;
			КонецЕсли;
			Параметры.Отбор.Удалить("ТорговоеНаименование");
		КонецЕсли;
		ПараметрыОтбора.Вставить("ТорговоеНаименование", ТорговоеНаименование);
		
		ДействующиеВеществаМНН = Неопределено;
		Если Параметры.Отбор.Свойство("ДействующиеВеществаМНН", ДействующиеВеществаМНН) Тогда
			Если Не ЗначениеЗаполнено(ДействующиеВеществаМНН) Тогда
				ДействующиеВеществаМНН = Неопределено;
			КонецЕсли;
			Параметры.Отбор.Удалить("ДействующиеВеществаМНН");
		КонецЕсли;
		ПараметрыОтбора.Вставить("ДействующиеВеществаМНН", ДействующиеВеществаМНН);
		
		ФормаВыпуска = Неопределено;
		Если Параметры.Отбор.Свойство("ФормаВыпуска", ФормаВыпуска) Тогда
			Параметры.Отбор.Удалить("ФормаВыпуска");
		КонецЕсли;
		ПараметрыОтбора.Вставить("ФормаВыпуска", ФормаВыпуска);
		
		СписокЕдиниц = НоменклатураВызовСервера.ЕдиницыИзмеренияПоОтбору(ПараметрыОтбора);
		
		Параметры.Отбор.Вставить("Ссылка", Новый ФиксированныйМассив(СписокЕдиниц));
	
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборБазовыхЕдиницИзмеренияПрепаратов") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения
		|ГДЕ
		|	ТипЕдиницы В (ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес), ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ &ЕдиницаШтук
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ &ЕдиницаДоз
		|");
		Запрос.УстановитьПараметр("ЕдиницаШтук", НоменклатураВызовСервера.ЕдиницаИзмеренияШтук());
		Запрос.УстановитьПараметр("ЕдиницаДоз", НоменклатураВызовСервера.ЕдиницаИзмеренияДоз());
		
		СписокЕдиниц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Параметры.Отбор.Вставить("Ссылка", Новый ФиксированныйМассив(СписокЕдиниц));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Добавляет в справочник единиц измерения единицы из классификатора.
//
// Параметры:
//   Коды - Массив - цифровые коды добавляемых единиц.
//
// Возвращаемое значение:
//   Массив, СправочникСсылка.ЕдиницыИзмерения - ссылки созданных единиц.
//
Функция ДобавитьЕдиницыИзмеренияПоКоду(Знач Коды, РежимОбновления = Ложь, ИскатьТолькоПоКоду = Ложь) Экспорт
	
	КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка        КАК ЕдиницаИзмерения,
	|	КодОКЕИ       КАК КодОКЕИ,
	|	Наименование  КАК Наименование,
	|	ТипЕдиницы    КАК ТипЕдиницы
	|ИЗ
	|	Справочник.ЕдиницыИзмерения
	|ГДЕ
	|	КодОКЕИ В (&Коды)
	|	И ТипЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|");
	Запрос.УстановитьПараметр("Коды", Коды);
	СуществующиеЕдиницы = Запрос.Выполнить().Выгрузить();
	
	Для Индекс = 0 По Коды.ВГраница() Цикл
		Код = Коды[Индекс];
		ЗаписьОКЕИ = КлассификаторТаблица.Найти(Код, "Code");
		Если ЗаписьОКЕИ = Неопределено Тогда
			Результат.Добавить(Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("КодОКЕИ", Код);
		Если Не ИскатьТолькоПоКоду Тогда
			Отбор.Вставить("Наименование", НазваниеЕдиницыИзКлассификатора(ЗаписьОКЕИ));
			Если ЗначениеЗаполнено(ЗаписьОКЕИ.Type) Тогда
				Отбор.Вставить("ТипЕдиницы", Перечисления.ТипыЕдиницИзмерения[ЗаписьОКЕИ.Type]);
			Иначе
				Отбор.Вставить("ТипЕдиницы", Перечисления.ТипыЕдиницИзмерения.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
		НайденныеЕдиницы = СуществующиеЕдиницы.НайтиСтроки(Отбор);
		Если НайденныеЕдиницы.Количество() = 0 Тогда
			Элемент = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			Элемент.КодОКЕИ = ЗаписьОКЕИ.Code;
			Элемент.Наименование = НазваниеЕдиницыИзКлассификатора(ЗаписьОКЕИ);
			Элемент.НаименованиеПолное = ЗаписьОКЕИ.Name;
			Элемент.МеждународноеСокращение = ЗаписьОКЕИ.SymbolInternational;
			Если ЗначениеЗаполнено(ЗаписьОКЕИ.Type) Тогда
				Элемент.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения[ЗаписьОКЕИ.Type];
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗаписьОКЕИ.Denominator) Тогда
				Множитель = 1;
				Если Элемент.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
					Множитель = 1000;
				ИначеЕсли Элемент.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
					Множитель = 1000;
				КонецЕсли;
				Элемент.Коэффициент = Множитель * ЗаписьОКЕИ.Numerator / ЗаписьОКЕИ.Denominator;
			КонецЕсли;
			Если РежимОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
			Иначе
				Элемент.Записать();
			КонецЕсли;
			Результат.Добавить(Элемент.Ссылка);
			ЗаполнитьЗначенияСвойств(СуществующиеЕдиницы.Добавить(), Элемент);
		Иначе
			Результат.Добавить(НайденныеЕдиницы[0].ЕдиницаИзмерения);
		КонецЕсли
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Возвращает мерные типы единиц измеряемых величин
// 
// Возвращаемое значение:
//  Массив - массив типов
//
Функция МерныеТипыЕдиницИзмерений() Экспорт
	
	МерныеТипы = Новый Массив;
	МерныеТипы.Добавить(Перечисления.ТипыЕдиницИзмерения.Вес);
	МерныеТипы.Добавить(Перечисления.ТипыЕдиницИзмерения.Объем);
	МерныеТипы.Добавить(Перечисления.ТипыЕдиницИзмерения.Длина);
	МерныеТипы.Добавить(Перечисления.ТипыЕдиницИзмерения.Площадь);
	
	Возврат МерныеТипы;
	
КонецФункции

// Возвращает текст запроса получения коэффициента перерасчета в константную мерную единицу,
// по указанному типу.
//
// Параметры:
//  ТипЕдиницы           - ПеречислениеСсылка.ТипыЕдиницИзмерения - тип мерной единицы,
//                         в котором необходимо получить коэффициент.
//  ИсточникНоменклатуры - Строка - таблица с номенклатурой.
//                         Например, "ТаблицаТовары.Номенклатура".
//
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет коэффициент мерной единицы.
//
Функция ТекстЗапросаКоличествоВМерныхЕдиницах(ТипЕдиницы, ИсточникНоменклатуры = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБОР
	|	КОГДА ТаблицаТовары.Номенклатура.%Мера%Использовать
	|		И ТаблицаТовары.Номенклатура.%Мера%Числитель <> 0
	|		И ТаблицаТовары.Номенклатура.%Мера%Знаменатель <> 0 ТОГДА
	|		ВЫРАЗИТЬ(
	|			ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.%Мера%Числитель / ТаблицаТовары.Номенклатура.%Мера%Знаменатель * ТаблицаТовары.Номенклатура.%Мера%ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 7))
	|			/ ВЫРАЗИТЬ(&КоличествоВЕдиницеИзмеренияМеры КАК ЧИСЛО(15, 7)) КАК ЧИСЛО(15, 7))
	|	ИНАЧЕ
	|		0
	|КОНЕЦ
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Мера%", ОбщегоНазначения.ИмяЗначенияПеречисления(ТипЕдиницы));
	Если ИсточникНоменклатуры <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
	КонецЕсли;
	
	ЕдиницаИзмеренияМеры = НоменклатураСервер.ЕдиницаМерыПоУмолчанию(ТипЕдиницы);
	Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияМеры) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не задано значение константы ""Единица измерения (%1)"". Обратитесь к администратору.'"), ТипЕдиницы);
	КонецЕсли;
	
	КоличествоВЕдиницеИзмеренияМеры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмеренияМеры, "Коэффициент");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоВЕдиницеИзмеренияМеры", Формат(КоличествоВЕдиницеИзмеренияМеры, "ЧРД=.; ЧГ=0"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ОтработатьЛогикуСвязиРеквизитов(Объект) Экспорт
	
	Если Объект.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
		
		Если Объект.СостоитИзДругихУпаковок Тогда
			Если ЗначениеЗаполнено(Объект.Родитель) Тогда
				ДанныеВложеннойУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Родитель, "Коэффициент, БазоваяЕдиницаИзмерения, КоличествоВПотребительскойУпаковке");
				Объект.БазоваяЕдиницаИзмерения = ДанныеВложеннойУпаковки.БазоваяЕдиницаИзмерения;
				Объект.Коэффициент = ДанныеВложеннойУпаковки.Коэффициент * Объект.КоличествоВУпаковке;
				Объект.КоличествоВПотребительскойУпаковке = ДанныеВложеннойУпаковки.КоличествоВПотребительскойУпаковке * Объект.КоличествоВУпаковке;
			КонецЕсли;
		Иначе
			Объект.КоличествоВУпаковке = 0;
			Объект.Родитель = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
				Объект.БазоваяЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ЕдиницаИзмерения");
			КонецЕсли;
			Если МерныеТипыЕдиницИзмерений().Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БазоваяЕдиницаИзмерения, "ТипЕдиницы")) = Неопределено Тогда
				Объект.КоличествоВПотребительскойУпаковке = Объект.Коэффициент;
			Иначе
				Объект.КоличествоВПотребительскойУпаковке = 1;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоУпаковкаЛекарственногоСредства = Не ЗначениеЗаполнено(Объект.Номенклатура) Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ЭтоЛекарственноеСредство");
		Если ЭтоУпаковкаЛекарственногоСредства Или ПустаяСтрока(Объект.Наименование) Тогда
			УстановитьНаименованиеУпаковки(Объект);
		КонецЕсли;
		
	Иначе
		
		Объект.Родитель = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		Объект.СостоитИзДругихУпаковок = Ложь;
		
		Если Объект.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Концентрация
		   И Не ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) Тогда
			Объект.Коэффициент = 0;
		ИначеЕсли МерныеТипыЕдиницИзмерений().Найти(Объект.ТипЕдиницы) <> Неопределено Тогда
			Объект.БазоваяЕдиницаИзмерения = Неопределено;
		Иначе
			Объект.Коэффициент = 0;
			Объект.БазоваяЕдиницаИзмерения = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНаименованиеУпаковки(Упаковка) Экспорт
	
	Если Упаковка.СостоитИзДругихУпаковок Тогда
		Упаковка.Наименование = НаименованиеУпаковки(Упаковка.Упаковка, Упаковка.КоличествоВПотребительскойУпаковке, "");
		Упаковка.НаименованиеПолное = НаименованиеПолноеУпаковки(Упаковка.Упаковка, Упаковка.КоличествоВУпаковке, Упаковка.Родитель);
	Иначе
		Упаковка.Наименование = НаименованиеУпаковки(Упаковка.Упаковка, Упаковка.Коэффициент, Упаковка.БазоваяЕдиницаИзмерения);
		Упаковка.НаименованиеПолное = НаименованиеУпаковки(Упаковка.Упаковка, Упаковка.Коэффициент, Упаковка.БазоваяЕдиницаИзмерения);
	КонецЕсли;
	
	Упаковка.НаименованиеСокращенное = СокращенноеНаименованиеУпаковки(Упаковка);
	
КонецПроцедуры

// Возвращает наименование упаковки номенклатуры,
// состоящее из наименования единицы измерения упаковки,
// и количества единиц формирующих данную упаковку.
//
// Параметры:
//  Упаковка                  - СправочникСсылка.ЕдиницыИзмерения - единица измерения упаковки
//  КоличествоВУпаковке       - Число - количество номенклатурных единиц, составляющие упаковку,
//                                      которые измеряются в единицах, передаваемых в параметре ВложеннаяЕдиницаИзмерения.
//  ВложеннаяЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения - единица измерения, в которой измеряется номенклатура, составляющая упаковку.
//
Функция НаименованиеУпаковки(Упаковка, КоличествоВУпаковке, ВложеннаяЕдиницаИзмерения) Экспорт
	
	Наименование = СокрЛП(Упаковка) + " " + Формат(КоличествоВУпаковке, "ЧРД=.");
	Если Не ЗначениеЗаполнено(ВложеннаяЕдиницаИзмерения)
	 Или МерныеТипыЕдиницИзмерений().Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВложеннаяЕдиницаИзмерения, "ТипЕдиницы")) = Неопределено Тогда
		Возврат Наименование;
	КонецЕсли;
	
	Возврат Наименование + " " + ПредставлениеВложеннойЕдиницы(ВложеннаяЕдиницаИзмерения);
	
КонецФункции

// Возвращает полное наименование упаковки номенклатуры,
// состоящее из иерархии единиц, формирующих данную упаковку.
//
// Параметры:
//  Упаковка                  - СправочникСсылка.ЕдиницыИзмерения - единица измерения упаковки
//  КоличествоВУпаковке       - Число - количество номенклатурных единиц, составляющие упаковку,
//                                      которые измеряются в единицах, передаваемых в параметре ВложеннаяЕдиницаИзмерения.
//  ВложеннаяЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения - единица измерения, в которой измеряется номенклатура, составляющая упаковку.
//
Функция НаименованиеПолноеУпаковки(Упаковка, КоличествоВУпаковке, ВложеннаяУпаковка) Экспорт
	
	НаименованиеВложеннойЕдиницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВложеннаяУпаковка, "НаименованиеПолное");
	Возврат СокрЛП(НаименованиеВложеннойЕдиницы) + ", " + СокрЛП(Упаковка) + " " + Формат(КоличествоВУпаковке, "ЧРД=.");
	
КонецФункции

Функция СокращенноеНаименованиеУпаковки(Объект) Экспорт
	
	КоличествоВПотребительскойУпаковке = Объект.КоличествоВПотребительскойУпаковке;
	БазоваяЕдиницаИзмерения = Объект.БазоваяЕдиницаИзмерения;
	Если МерныеТипыЕдиницИзмерений().Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазоваяЕдиницаИзмерения, "ТипЕдиницы")) <> Неопределено Тогда
		Если Объект.СостоитИзДругихУпаковок Тогда
			ПервичнаяУпаковка = ПолучитьПервичнуюУпаковку(Объект.Родитель);
			КоличествоВПервичнойУпаковке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичнаяУпаковка, "Коэффициент");
		Иначе
			КоличествоВПервичнойУпаковке = Объект.Коэффициент
		КонецЕсли;
		
		НаименованиеСокращенное = "" + КоличествоВПервичнойУпаковке + " " + ПредставлениеВложеннойЕдиницы(БазоваяЕдиницаИзмерения) + ", N " + КоличествоВПотребительскойУпаковке;
	Иначе
		НаименованиеСокращенное = "N " + КоличествоВПотребительскойУпаковке;
	КонецЕсли;
	
	Возврат НаименованиеСокращенное;
	
КонецФункции

Функция ПолучитьПервичнуюУпаковку(Упаковка)
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Родитель");
	Если ЗначениеЗаполнено(Родитель) Тогда
		Возврат ПолучитьПервичнуюУпаковку(Родитель);
	КонецЕсли;
	
	Возврат Упаковка;
	
КонецФункции

Функция НазваниеЕдиницыИзКлассификатора(ЗаписьОКЕИ)
	
	Если ЗначениеЗаполнено(ЗаписьОКЕИ.SymbolNational) Тогда
		Наименование = ЗаписьОКЕИ.SymbolNational;
	ИначеЕсли ЗначениеЗаполнено(ЗаписьОКЕИ.SymbolInternational) Тогда
		Наименование = ЗаписьОКЕИ.SymbolInternational;
	ИначеЕсли ЗначениеЗаполнено(ЗаписьОКЕИ.CodeNameNational) Тогда
		Наименование = ЗаписьОКЕИ.CodeNameNational;
	ИначеЕсли ЗначениеЗаполнено(ЗаписьОКЕИ.CodeNameInternational) Тогда
		Наименование = ЗаписьОКЕИ.CodeNameInternational;
	Иначе
		Наименование = ЗаписьОКЕИ.Name;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция ПредставлениеВложеннойЕдиницы(ВложеннаяЕдиницаИзмерения)
	
	Представление = СокрЛП(ВложеннаяЕдиницаИзмерения);
	ПозицияСкобки = СтрНайти(Представление, "(");
	Если ПозицияСкобки > 0 Тогда
		ДанныеЕдиницы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВложеннаяЕдиницаИзмерения, "ТипЕдиницы, КодОКЕИ");
		Если ДанныеЕдиницы.ТипЕдиницы <> Перечисления.ТипыЕдиницИзмерения.Упаковка
		   И Не ПустаяСтрока(ДанныеЕдиницы.КодОКЕИ) Тогда
			Представление = СокрЛП(Лев(Представление, ПозицияСкобки - 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	ОбновитьЕдиницыИзКлассификатора();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПервичныеУпаковки.Ссылка КАК Ссылка,
	|	КоличествоВУпаковке > 0 ИЛИ НаименованиеСокращенное = """" КАК НужноОбработать
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ПервичныеУпаковки
	|ГДЕ
	|	ПервичныеУпаковки.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|	И НЕ ПервичныеУпаковки.СостоитИзДругихУпаковок
	|	И ПервичныеУпаковки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|");
	
	УпаковкиПрепаратов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УпаковкиПрепаратов.Добавить(Выборка.Ссылка);
		Если Выборка.НужноОбработать Тогда
			УпаковкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если УпаковкаОбъект.КоличествоВУпаковке > 0 Тогда
				УпаковкаОбъект.Коэффициент = УпаковкаОбъект.КоличествоВУпаковке;
				УпаковкаОбъект.КоличествоВУпаковке = 0;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(УпаковкаОбъект.НаименованиеСокращенное) Тогда
				УпаковкаОбъект.НаименованиеСокращенное = СокращенноеНаименованиеУпаковки(УпаковкаОбъект);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(УпаковкаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВторичныеУпаковки.Ссылка КАК Ссылка,
	|	Родитель.Коэффициент КАК КоэффициентРодителя,
	|	Родитель.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	Коэффициент <> КоличествоВУпаковке * Родитель.Коэффициент > 0
	|		ИЛИ НаименованиеСокращенное = """"
	|		ИЛИ БазоваяЕдиницаИзмерения <> Родитель.БазоваяЕдиницаИзмерения
	|		ИЛИ НЕ СостоитИзДругихУпаковок КАК НужноОбработать
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ВторичныеУпаковки
	|ГДЕ
	|	ВторичныеУпаковки.Родитель В (&ВложенныеУпаковки)
	|";
	
	Пока УпаковкиПрепаратов.Количество() > 0 Цикл
		Запрос.УстановитьПараметр("ВложенныеУпаковки", УпаковкиПрепаратов);
		УпаковкиПрепаратов = Новый Массив;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УпаковкиПрепаратов.Добавить(Выборка.Ссылка);
			Если Выборка.НужноОбработать Тогда
				УпаковкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если УпаковкаОбъект.ТипЕдиницы <> Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
					УпаковкаОбъект.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка;
				КонецЕсли;
				Если Не УпаковкаОбъект.СостоитИзДругихУпаковок Тогда
					УпаковкаОбъект.СостоитИзДругихУпаковок = Истина;
					Если ЗначениеЗаполнено(УпаковкаОбъект.Номенклатура) Тогда
						УпаковкаОбъект.КоличествоВУпаковке = УпаковкаОбъект.Коэффициент;
					КонецЕсли;
				КонецЕсли;
				Если УпаковкаОбъект.Коэффициент <> УпаковкаОбъект.КоличествоВУпаковке * Выборка.КоэффициентРодителя Тогда
					УпаковкаОбъект.Коэффициент = УпаковкаОбъект.КоличествоВУпаковке * Выборка.КоэффициентРодителя;
				КонецЕсли;
				Если УпаковкаОбъект.БазоваяЕдиницаИзмерения <> ВЫборка.БазоваяЕдиницаИзмерения Тогда
					УпаковкаОбъект.БазоваяЕдиницаИзмерения = ВЫборка.БазоваяЕдиницаИзмерения;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(УпаковкаОбъект.НаименованиеСокращенное) Тогда
					УпаковкаОбъект.НаименованиеСокращенное = СокращенноеНаименованиеУпаковки(УпаковкаОбъект);
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(УпаковкаОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Упаковки.Ссылка КАК Ссылка,
	|	Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК Упаковки
	|ГДЕ
	|	Упаковки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (НаименованиеСокращенное = """"
	|		ИЛИ БазоваяЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|		ИЛИ ТипЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка))
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УпаковкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если УпаковкаОбъект.ТипЕдиницы <> Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
			УпаковкаОбъект.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(УпаковкаОбъект.БазоваяЕдиницаИзмерения) Тогда
			УпаковкаОбъект.БазоваяЕдиницаИзмерения = Выборка.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(УпаковкаОбъект.НаименованиеСокращенное) Тогда
			УпаковкаОбъект.НаименованиеСокращенное = СокращенноеНаименованиеУпаковки(УпаковкаОбъект);
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(УпаковкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЕдиницыИзКлассификатора()
	
	КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка        КАК ЕдиницаИзмерения,
	|	КодОКЕИ       КАК КодОКЕИ,
	|	Наименование  КАК Наименование,
	|	ТипЕдиницы    КАК ТипЕдиницы
	|ИЗ
	|	Справочник.ЕдиницыИзмерения
	|ГДЕ
	|	КодОКЕИ В (&Коды)
	|	И ТипЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|");
	Коды = Новый Массив;
	Коды.Добавить("111");
	Коды.Добавить("112");
	Запрос.УстановитьПараметр("Коды", Коды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьОКЕИ = КлассификаторТаблица.Найти(Выборка.КодОКЕИ, "Code");
		Если Выборка.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения[ЗаписьОКЕИ.Type] И Выборка.Наименование = ПредставлениеВложеннойЕдиницы(Выборка.ЕдиницаИзмерения) Тогда
			Элемент = Выборка.ЕдиницаИзмерения.ПолучитьОбъект();
			Элемент.Наименование = НазваниеЕдиницыИзКлассификатора(ЗаписьОКЕИ);
			Элемент.НаименованиеПолное = ЗаписьОКЕИ.Name;
			Элемент.МеждународноеСокращение = ЗаписьОКЕИ.SymbolInternational;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеЕдиницИзмеренияИзКлассификатора() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка        КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.КодОКЕИ       КАК КодОКЕИ,
	|	ЕдиницыИзмерения.Наименование  КАК Наименование,
	|	ЕдиницыИзмерения.ТипЕдиницы    КАК ТипЕдиницы,
	|	ЕдиницыИзмерения.Коэффициент   КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.КодОКЕИ <> """"
	|	И ЕдиницыИзмерения.ТипЕдиницы НЕ В (ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка), ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Концентрация), ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.ЕдиницаДействия))
	|");
	
	КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьОКЕИ = КлассификаторТаблица.Найти(Выборка.КодОКЕИ, "Code");
		Если ЗаписьОКЕИ <> Неопределено Тогда
			ДанныеКлассификатора = Новый Структура("ТипЕдиницы, Коэффициент");
			Если ЗначениеЗаполнено(ЗаписьОКЕИ.Type) Тогда
				ДанныеКлассификатора.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения[ЗаписьОКЕИ.Type];
			Иначе
				ДанныеКлассификатора.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.ПустаяСсылка();
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗаписьОКЕИ.Denominator) Тогда
				Множитель = 1;
				Если ДанныеКлассификатора.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
					Множитель = 1000;
				ИначеЕсли ДанныеКлассификатора.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
					Множитель = 1000;
				КонецЕсли;
				ДанныеКлассификатора.Коэффициент = Множитель * ЗаписьОКЕИ.Numerator / ЗаписьОКЕИ.Denominator;
			Иначе
				ДанныеКлассификатора.Коэффициент = 0;
			КонецЕсли;
			
			Если Выборка.ТипЕдиницы <> ДанныеКлассификатора.ТипЕдиницы Или Выборка.Коэффициент <> ДанныеКлассификатора.Коэффициент Тогда
				Элемент = Выборка.ЕдиницаИзмерения.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(Элемент, ДанныеКлассификатора);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Возвращает описание блокируемых реквизитов
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов
//   Элемент массива - Строка в формате:
//     ИмяРеквизита[;ИмяЭлементаФормы,...]
//      где
//       ИмяРеквизита     - имя реквизита объекта
//       ИмяЭлементаФормы - имя элемента формы, связанного с реквизитом
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("КодОКЕИ");
	БлокируемыеРеквизиты.Добавить("ТипЕдиницы");
	БлокируемыеРеквизиты.Добавить("Родитель");
	БлокируемыеРеквизиты.Добавить("Коэффициент");
	БлокируемыеРеквизиты.Добавить("Упаковка");
	БлокируемыеРеквизиты.Добавить("БазоваяЕдиницаИзмерения");
	БлокируемыеРеквизиты.Добавить("КоличествоВУпаковке");
	БлокируемыеРеквизиты.Добавить("СостоитИзДругихУпаковок;СостоитИзДругихУпаковокПереключатель");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли