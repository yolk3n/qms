#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// У отчета <ОтчетИсточникДанных> есть макет <ИмяМакетаСписков> (например: Списки2012Кв1),
	// в макете <ИмяМакетаСписков> в области <ОбластьИсточникДанных>
	// содержатся коды и наименования элементов классификатора,
	// реквизиты ОтчетИсточникДанных и ОбластьИсточникДанных получаем из параметров
	// ИмяМакетаСписков - берем по умолчанию последний макет.
	
	ИмяСправочника = Параметры.ИмяСправочника;
	ПараметрыКлассификатора = ПолучитьРасположениеКлассификатораСтатистикиИСписокВерсий();
	
	ОбластьИсточникДанных = ПараметрыКлассификатора.ОбластьИсточникДанных;
	ИсточникДанных        = ПараметрыКлассификатора.ИсточникДанных; 
	ВидОбъекта            = ПараметрыКлассификатора.ВидОбъекта;
	СписокВерсий          = ПолучитьВерсииСписковОтчета(ВидОбъекта + "." + ИсточникДанных);
	Заголовок             = Метаданные.Справочники[ИмяСправочника].Синоним;
	Подбор                = Параметры.Подбор;
	ВыборГрупп            = Параметры.ВыборГрупп;
	
	Элементы.Классификатор.МножественныйВыбор = Подбор;
	ЗакрыватьПриВыборе = Не Подбор;
	
	Если СписокВерсий.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Невозможно выполнить подбор.
		|Классификатор не найден'");
		
	Иначе
		
		СписокВыбора = Элементы.ИмяМакетаСписков.СписокВыбора;
		
		Для Каждого Версия Из СписокВерсий Цикл
			
			СписокВыбора.Добавить(Версия.Значение, Версия.Представление);
			
		КонецЦикла;
		
		ИмяМакетаСписков = СписокВерсий[СписокВерсий.Количество() - 1].Значение;
		
	КонецЕсли;
	
	Элементы.ИмяМакетаСписков.Видимость = СписокВерсий.Количество() > 1;
	Элементы.Год.Видимость = СписокВерсий.Количество() > 1;
	Элементы.Назначение.Видимость = ЗначениеЗаполнено(Параметры.Назначение);
	
	ЗаполнитьКлассификатор();
	
	Если Параметры.ДанныеКлассификатора Тогда
		
		ПолеНазначение = Элементы.Назначение;
		ПолеНазначение.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеНазначение.ЦветТекста = ЦветаСтиля.ЗаблокированныйРеквизитЦвет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяМакетаСписковПриИзменении(Элемент)
	
	ЗаполнитьКлассификатор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыКлассификатораФормы

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавленыНовыеЭлементыКлассификатора = Ложь;
	ВыбранныйЭлемент = КлассификаторВыборНаСервере(ВыбраннаяСтрока, ДобавленыНовыеЭлементыКлассификатора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавленыНовыеЭлементыКлассификатора = Ложь;
	ВыбранныйЭлемент = КлассификаторВыборНаСервере(Значение, ДобавленыНовыеЭлементыКлассификатора);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КлассификаторВыборНаСервере(Знач ВыбранныеСтроки, ДобавленыНовыеЭлементыКлассификатора = Ложь)
	
	СсылкаНаЭлемент = Неопределено;
	
	МассивСсылок = Новый Массив();
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("Массив") Тогда
		
		Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
			
			Элемент = Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если Не ЗначениеЗаполнено(Элемент.Ссылка) И (ВыборГрупп Или Элемент.ПолучитьЭлементы().Количество() = 0) Тогда
				
				ДобавитьЭлементКлассификатора(Элемент);
				ДобавленыНовыеЭлементыКлассификатора = Истина;
				
			КонецЕсли;
			
			МассивСсылок.Добавить(Элемент.Ссылка);
			СсылкаНаЭлемент = Элемент.Ссылка;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = Тип("Число") Тогда
		
		Элемент = Классификатор.НайтиПоИдентификатору(ВыбранныеСтроки);
		
		Если Не ЗначениеЗаполнено(Элемент.Ссылка) И (ВыборГрупп Или Элемент.ПолучитьЭлементы().Количество() = 0) Тогда
			
			ДобавитьЭлементКлассификатора(Элемент);
			ДобавленыНовыеЭлементыКлассификатора = Истина;
			
		КонецЕсли;
		
		МассивСсылок.Добавить(Элемент.Ссылка);
		СсылкаНаЭлемент = Элемент.Ссылка;
		
	КонецЕсли;
	
	Если Подбор Тогда
		Возврат МассивСсылок;
	Иначе
		Возврат СсылкаНаЭлемент;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Классификатор.Ссылка", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРанееДобавленныеЭлементы(ИмяСправочника)
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "
	|ВЫБРАТЬ
	|	СуществующиеЭлементы.Код,
	|	СуществующиеЭлементы.Ссылка
	|ИЗ
	|	Справочник.%1 КАК СуществующиеЭлементы
	|";
	
	Запрос.Текст = СтрЗаменить(ЗапросТекст, "%1", ИмяСправочника);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКлассификатор(ИспользоватьТаблицуОтбора = Ложь)
	
	Классификатор.ПолучитьЭлементы().Очистить();
	
	// Получаем полную таблицу элементов классификатора
	// в таблице содержатся Код и Наименование, элементов классификатора.
	ЭлементыКлассификатораИзМакета = Справочники[ИмяСправочника].ТаблицаКлассификатора(ИмяМакетаСписков);
	
	Если ТипЗнч(ЭлементыКлассификатораИзМакета) = Тип("ТаблицаЗначений") Тогда
		ЗаполнитьКлассификаторИзТаблицыЗначений(ЭлементыКлассификатораИзМакета);
	ИначеЕсли ТипЗнч(ЭлементыКлассификатораИзМакета) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьКлассификаторИзДереваЗначений(ЭлементыКлассификатораИзМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлассификаторИзТаблицыЗначений(ЭлементыКлассификатора)
	
	Если ЭлементыКлассификатора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем таблицу элементов классификатора уже имеющихся в справочнике.
	РанееДобавленныеЭлементыКлассификатора = ПолучитьРанееДобавленныеЭлементы(ИмяСправочника);
	РанееДобавленныеЭлементыКлассификатора.Индексы.Добавить("Код");
	
	// Инициализируем структуру которую будем использовать для поиска существующих элементов.
	СтруктураПоискаРанееСозданных = Новый Структура("Код");
	
	ОбластьДобавления = Классификатор.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыКлассификатора Цикл
		
		НоваяСтрока = ОбластьДобавления.Добавить();
		НоваяСтрока.Код = Элемент.Код;
		НоваяСтрока.Наименование = Элемент.Наименование;
		
		СтруктураПоискаРанееСозданных.Код = Элемент.Код;
		НайденныйЭлемент = РанееДобавленныеЭлементыКлассификатора.НайтиСтроки(СтруктураПоискаРанееСозданных);
		
		Если НайденныйЭлемент.Количество() > 0 Тогда
			
			НоваяСтрока.Ссылка = НайденныйЭлемент[0].Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлассификаторИзДереваЗначений(ЭлементыКлассификатора)
	
	Если ЭлементыКлассификатора.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем таблицу элементов классификатора уже имеющихся в справочнике.
	РанееДобавленныеЭлементыКлассификатора = ПолучитьРанееДобавленныеЭлементы(ИмяСправочника);
	РанееДобавленныеЭлементыКлассификатора.Индексы.Добавить("Код");
	
	ОбластьДобавления = Классификатор.ПолучитьЭлементы();
	ЗаполнитьКлассификаторРекурсивно(ОбластьДобавления, ЭлементыКлассификатора, РанееДобавленныеЭлементыКлассификатора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлассификаторРекурсивно(ОбластьДобавления, ЭлементыКлассификатора, РанееДобавленныеЭлементыКлассификатора)
	
	Если ЭлементыКлассификатора.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем структуру которую будем использовать для поиска существующих элементов.
	СтруктураПоискаРанееСозданных = Новый Структура("Код");
	
	Для Каждого Элемент Из ЭлементыКлассификатора.Строки Цикл
		
		НоваяСтрока = ОбластьДобавления.Добавить();
		НоваяСтрока.Код = Элемент.Код;
		НоваяСтрока.Наименование = Элемент.Наименование;
		
		СтруктураПоискаРанееСозданных.Код = Элемент.Код;
		НайденныйЭлемент = РанееДобавленныеЭлементыКлассификатора.НайтиСтроки(СтруктураПоискаРанееСозданных);
		
		Если НайденныйЭлемент.Количество() > 0 Тогда
			
			НоваяСтрока.Ссылка = НайденныйЭлемент[0].Ссылка;
			
		КонецЕсли;
		
		ЗаполнитьКлассификаторРекурсивно(НоваяСтрока.ПолучитьЭлементы(), Элемент, РанееДобавленныеЭлементыКлассификатора)
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементКлассификатора(ВыбраннаяСтрока)
	
	ЭлементКлассификатора = Справочники[ИмяСправочника].СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, ВыбраннаяСтрока);
	ЭлементКлассификатора.НаименованиеПолное = ВыбраннаяСтрока.Наименование;
	Родитель = ВыбраннаяСтрока.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		ЭлементКлассификатора.НаименованиеПолное = Родитель.Наименование + Символы.ПС + ЭлементКлассификатора.НаименованиеПолное;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	ЭлементКлассификатора.Записать();
	ВыбраннаяСтрока.Ссылка = ЭлементКлассификатора.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормуИПользователяИЗакрыть(ВыбранныйЭлемент, ДобавленыНовыеЭлементыКлассификатора = Ложь)
	
	Если ДобавленыНовыеЭлементыКлассификатора Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка." + ИмяСправочника));
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Сохранение'"),
			,
			Заголовок,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ОповеститьОВыборе(ВыбранныйЭлемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасположениеКлассификатораСтатистикиИСписокВерсий()
	
	ИмяКлассификатора = ИмяСправочника;
	
	СтруктураПараметров = Новый Структура("ВидОбъекта, ИсточникДанных, ОбластьИсточникДанных");
	
	Если ИмяКлассификатора = "КлассификаторВидовЭкономическойДеятельности" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Справочник");
		СтруктураПараметров.Вставить("ИсточникДанных", "Организации");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "Классификатор");
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторПродукцииПоВидамДеятельности" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Отчет");
		СтруктураПараметров.Вставить("ИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okp");
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторУслугНаселению" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Отчет");
		СтруктураПараметров.Вставить("ИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП5М");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okun");
		
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторТНВЭД" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Справочник");
		СтруктураПараметров.Вставить("ИсточникДанных", "КлассификаторТНВЭД");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "Строки");
		
	ИначеЕсли ИмяКлассификатора = "ОбщероссийскийКлассификаторПродукции" Тогда
		
		СтруктураПараметров.Вставить("ВидОбъекта", "Справочник");
		СтруктураПараметров.Вставить("ИсточникДанных", "ОбщероссийскийКлассификаторПродукции");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "ОбщероссийскийКлассификаторПродукции");
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьВерсииСписковОтчета(ПолноеИмяОбъекта)
	
	СписокВерсий = Новый СписокЗначений;
	
	// Ищем переданный отчет.
	ОбъектМетаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Если ОбъектМетаданные = Неопределено Тогда 
		Возврат СписокВерсий;
	КонецЕсли;
		
	Для Каждого Макет Из ОбъектМетаданные.Макеты Цикл
		
		Если Лев(Макет.Имя, 6) = "Списки" Тогда
			
			СписокВерсий.Добавить(Макет.Имя, Лев(СтрЗаменить(Макет.Имя, "Списки", ""), 4));
			
		ИначеЕсли Лев(Макет.Имя, 20) = "ДанныеКлассификатора" Тогда
			
			СписокВерсий.Добавить(Макет.Имя, Лев(СтрЗаменить(Макет.Имя, "ДанныеКлассификатора", НСтр("ru = 'Данные классификатора'")), 25));
			
		Иначе
			
			Если СписокВерсий.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокВерсий;
	
КонецФункции

#КонецОбласти
