#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает или обновляет карточку классификатора.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - 
//   паспорт справочника из ФНСИ.
//  МенеджерСправочника - СправочникМенеджер - 
//   менеджер справочника в который осуществляется загрузка.
//  ПараметрыЗагрузки - Структура - 
//   дополнительные параметры загрузки.
//
Процедура СоздатьОбновитьКарточкуСправочникаФНСИ(ОбъектXDTO, Знач МенеджерСправочника, ПараметрыЗагрузки = Неопределено) Экспорт
	
	Если ПараметрыЗагрузки <> Неопределено И
		ПараметрыЗагрузки.Свойство("ИмяОбъектаМетаданныхДляКарточки") И
		Метаданные.Справочники.Найти(ПараметрыЗагрузки.ИмяОбъектаМетаданныхДляКарточки) <> Неопределено
	Тогда
		МенеджерСправочника = Справочники[ПараметрыЗагрузки.ИмяОбъектаМетаданныхДляКарточки];;
	КонецЕсли;
	
	Метаданные_ = МенеджерСправочника.ПустаяСсылка().Метаданные();
	
	КарточкаСсылка_ = НайтиПоРеквизиту("Синоним", ОбъектXDTO.identifier);
	Если ЗначениеЗаполнено(КарточкаСсылка_) Тогда
		КарточкаОбъект_ = КарточкаСсылка_.ПолучитьОбъект();
	Иначе
		КарточкаОбъект_ = СоздатьЭлемент();
	КонецЕсли;
	
	Тип_ = Новый ОписаниеТипов("Дата");
	ДатаПубликации_ = Тип_.ПривестиЗначение(ОбъектXDTO.publishDate + ":00");
	
	Если
		КарточкаОбъект_.ВерсияКлассификатора <> ОбъектXDTO.version И
		КарточкаОбъект_.ДатаПубликации < ДатаПубликации_
	Тогда
		КарточкаОбъект_.Наименование = Метаданные_.Синоним;
		КарточкаОбъект_.ИмяОбъектаМетаданных = Метаданные_.Имя;
		КарточкаОбъект_.НаименоваениеКлассификатора = ОбъектXDTO.shortName;
		КарточкаОбъект_.НаименоваениеКлассификатораПолное = ОбъектXDTO.fullName;
		КарточкаОбъект_.Синоним = ОбъектXDTO.identifier;
		КарточкаОбъект_.ОсновнойОИД = ОбъектXDTO.oid;
		КарточкаОбъект_.ВерсияКлассификатора = ОбъектXDTO.version;
		КарточкаОбъект_.ДатаПубликации = ДатаПубликации_;
		КарточкаОбъект_.Актуальность = Истина;
		КарточкаОбъект_.ДатаПоследнейПроверки = ТекущаяДатаСеанса();
		
		Если ТипЗнч(ОбъектXDTO.codes.codes) = Тип("ОбъектXDTO") Тогда
			СписокВерсий_ = Новый Массив;
			СписокВерсий_.Добавить(ОбъектXDTO.codes.codes)
		Иначе
			СписокВерсий_ = ОбъектXDTO.codes.codes;
		КонецЕсли;
		
		Для Каждого Версия_ Из СписокВерсий_ Цикл
			Если
				Версия_.type = "TYPE_PRIMARY" И
				КарточкаОбъект_.Версии.НайтиСтроки(
					Новый Структура("ВерсияКлассификатора, ОИД", ОбъектXDTO.version, ОбъектXDTO.oid)
				).Количество() = 0
			Тогда
				НоваяСтрока_ = КарточкаОбъект_.Версии.Добавить();
				НоваяСтрока_.ОИД = Версия_.value;
				НоваяСтрока_.ВерсияКлассификатора = ОбъектXDTO.version;
			ИначеЕсли КарточкаОбъект_.Версии.Найти(Версия_.value,"ОИД") = Неопределено Тогда
				НоваяСтрока_ = КарточкаОбъект_.Версии.Добавить();
				НоваяСтрока_.ОИД = Версия_.value;
			КонецЕсли;
		КонецЦикла;
		
		КарточкаОбъект_.Версии.Сортировать("ВерсияКлассификатора Убыв, ОИД Убыв");
		
		КарточкаОбъект_.Записать();
		
	Иначе
		КарточкаОбъект_.Актуальность = Истина;
		КарточкаОбъект_.ДатаПоследнейПроверки = ТекущаяДатаСеанса();
		КарточкаОбъект_.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Получает паспортные данные классификатора в виде структуры.
//
// Параметры:
//  Синоним - Строка - Например "MKB308".
// Возвращаемое значение:
// Структура - Структура с кодируемыми полями и массивом доступных ОИД классификатора.
//
Функция ПолучитьСтруктуруКодированныхПолейПоСинониму(Синоним) Экспорт
	Возврат СтруктураКодированныхПолейСЗаполнением(Синоним);
КонецФункции

// Возвращает данные по ФНСИ по ссылке на объект метаданных.
//
// Параметры:
//  СсылкаНаОбъектМетаданных - СправочникСсылка, ПеречислениеСсылка	 - Ссылка
// 
// Возвращаемое значение:
//  Структура - Структура с полями: code, displayName, codeSystem, codeSystemName, codeSystemVersion.
//
Функция СтруктураКодированныхПолейПоСсылкеНаОбъектМетаданных(СсылкаНаОбъектМетаданных, Синоним = Неопределено) Экспорт
	Результат_ = Новый Структура("code, displayName, codeSystem, codeSystemName, codeSystemVersion, МассивОИД, ОшибкаЗаполнения");
	
	МетаданныеСсылки_ = Неопределено;
	Если НЕ ЗначениеЗаполнено(Синоним) Тогда 
		МетаданныеСсылки_ = СсылкаНаОбъектМетаданных.Метаданные();
		Если СтрНачинаетсяС(МетаданныеСсылки_.ПолноеИмя(), "Справочник") Тогда 
			Синоним = ПолучитьСинонимПоМетаданным(МетаданныеСсылки_);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Синоним) Тогда 
		КодыКлассификатора_ = ПолучитьСтруктуруКодированныхПолейПоСинониму(Синоним);
		ЗаполнитьЗначенияСвойств(Результат_, КодыКлассификатора_);
	Иначе
		// Синоним не определен, попробуем вычислить нужные параметры самостоятельно.
		// По идее нужно стремиться, чтобы все справочники перечисления, ВидыПоказателейЗдоровья, ЗначенияПоказателейЗдоровья
		// были зарегистрированы в СправочникиФНСИ и сюда нам вообще не надо заходить.
		Если МетаданныеСсылки_ = Неопределено Тогда 
			МетаданныеСсылки_ = СсылкаНаОбъектМетаданных.Метаданные();
		КонецЕсли;
		Если СтрНачинаетсяС(МетаданныеСсылки_.ПолноеИмя(), "Справочник") Тогда
			Если МетаданныеСсылки_.Имя = "ЗначенияПоказателейЗдоровья" Тогда 
				РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СсылкаНаОбъектМетаданных, 
					"Владелец.codeSystem, Владелец.Наименование, Владелец.НаименованиеПолное, Владелец.ВерсияКлассификатора"
				);
				Результат_.codeSystem = РеквизитыОбъекта_.ВладелецcodeSystem;
				Результат_.codeSystemName = ?(ЗначениеЗаполнено(РеквизитыОбъекта_.ВладелецНаименованиеПолное), РеквизитыОбъекта_.ВладелецНаименованиеПолное, РеквизитыОбъекта_.ВладелецНаименование);
				Результат_.codeSystemVersion = РеквизитыОбъекта_.ВладелецВерсияКлассификатора;
			Иначе
				МодульМенеджера_ = Справочники[МетаданныеСсылки_.Имя];
				Результат_.codeSystem = МодульМенеджера_.ПолучитьПараметрыЗапроса().OID;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(МетаданныеСсылки_.ПолноеИмя(), "Перечисление") Тогда 
			МодульМенеджера_ = Перечисления[МетаданныеСсылки_.Имя];
			Коды_ = МодульМенеджера_.ПолучитьОписаниеЭлементаCodeПоСсылке(СсылкаНаОбъектМетаданных);
			Если Коды_ <> Неопределено Тогда 
				ЗаполнитьЗначенияСвойств(Результат_, Коды_);
			КонецЕсли;
		ИначеЕсли МетаданныеСсылки_.Имя = "ВидыПоказателейЗдоровья" Тогда 
			РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СсылкаНаОбъектМетаданных, 
				"codeSystem, ВерсияКлассификатора, codeSystemName, Родитель.codeSystem, Родитель.НаименованиеПолное, Родитель.ВерсияКлассификатора, Родитель.Наименование"
			);
			Если ЗначениеЗаполнено(РеквизитыОбъекта_.РодительcodeSystem) Тогда 
				Результат_.codeSystem = РеквизитыОбъекта_.РодительcodeSystem;
				Результат_.codeSystemName = ?(
					ЗначениеЗаполнено(РеквизитыОбъекта_.РодительНаименованиеПолное),
					РеквизитыОбъекта_.РодительНаименованиеПолное, 
					РеквизитыОбъекта_.РодительНаименование
				);
				Результат_.codeSystemVersion = РеквизитыОбъекта_.РодительВерсияКлассификатора;
			Иначе
				Результат_.codeSystem = РеквизитыОбъекта_.codeSystem;
				Результат_.codeSystemName = РеквизитыОбъекта_.codeSystemName;
				Результат_.codeSystemVersion = РеквизитыОбъекта_.ВерсияКлассификатора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Для должностей 2 справочника НСИ.
	Если Синоним = "7PJSAM6GJM" Тогда 
		РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "ФедеральныйКод, Наименование1002");
		Результат_.code = РеквизитыОбъекта_.ФедеральныйКод;
		Результат_.displayName = РеквизитыОбъекта_.Наименование1002;
	ИначеЕсли Синоним = "IQ1CPDEHRK" Тогда 
		РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "ФедеральныйКод, НаименованиеФРМСС");
		Результат_.code = РеквизитыОбъекта_.ФедеральныйКод;
		Результат_.displayName = РеквизитыОбъекта_.НаименованиеФРМСС;
	КонецЕсли;
	
	// Для МКБ code надо брать из Код
	Если Синоним = "MKB308" Тогда 
		РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "Код, Наименование");
		Результат_.code = СокрЛП(РеквизитыОбъекта_.Код);
		Результат_.displayName = РеквизитыОбъекта_.Наименование;
	КонецЕсли;
	
	// Для справочника КатегорииЛьгот 2 классификатора НСИ.
	Если Синоним = "6LE4NGIG4C" Тогда
		РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "КодПоФорме, НаименованиеПоФорме");
		Результат_.code = СокрЛП(РеквизитыОбъекта_.КодПоФорме);
		Результат_.displayName = РеквизитыОбъекта_.НаименованиеПоФорме;
	КонецЕсли;
	
	// Для справочника СтруктураСекцийМД код нужно брать из реквизита АтрибутCode.
	Если Синоним = "3QO26R99FR" Тогда
		РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "АтрибутCode, Наименование");
		Результат_.code = СокрЛП(РеквизитыОбъекта_.АтрибутCode);
		Результат_.displayName = РеквизитыОбъекта_.Наименование;
	КонецЕсли;
	
	// Для справочника РолиПриПодписанииРЭМД код нужно брать из реквизита Роль.
	Если Синоним = "RL682" Тогда
		РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "Роль, Наименование");
		Результат_.code = СокрЛП(РеквизитыОбъекта_.Роль);
		Результат_.displayName = РеквизитыОбъекта_.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат_.code) Тогда 
		Если МетаданныеСсылки_ = Неопределено Тогда 
			МетаданныеСсылки_ = СсылкаНаОбъектМетаданных.Метаданные();
		КонецЕсли;
		Если  МетаданныеСсылки_.Имя = "ЗначенияПоказателейЗдоровья" Тогда 
			РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "АтрибутCode, НаименованиеПолное, Наименование");
			Результат_.code = РеквизитыОбъекта_.АтрибутCode;
			Результат_.displayName = ?(ЗначениеЗаполнено(РеквизитыОбъекта_.НаименованиеПолное),
				РеквизитыОбъекта_.НаименованиеПолное, РеквизитыОбъекта_.Наименование);
		ИначеЕсли СтрНачинаетсяС(МетаданныеСсылки_.ПолноеИмя(), "Справочник") Тогда 
			Реквизиты_ = МетаданныеСсылки_.Реквизиты;
			РеквизитыНаименование_ = Новый Массив;
			Если Не Реквизиты_.Найти("НаименованиеПолное") = Неопределено Тогда
				РеквизитыНаименование_.Добавить("НаименованиеПолное");
			ИначеЕсли Не Реквизиты_.Найти("ПолноеНаименование")= Неопределено Тогда
				РеквизитыНаименование_.Добавить("ПолноеНаименование");
			КонецЕсли;
			РеквизитыНаименование_.Добавить("Наименование");
			РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, СтрШаблон("КодМинздрава, %1", СтрСоединить(РеквизитыНаименование_,", ")));
			Результат_.code = РеквизитыОбъекта_.КодМинздрава;
			Для Каждого РеквизитНаименование_ Из РеквизитыНаименование_ Цикл
				Если ЗначениеЗаполнено(РеквизитыОбъекта_[РеквизитНаименование_]) Тогда
					Результат_.displayName = РеквизитыОбъекта_[РеквизитНаименование_];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрНачинаетсяС(МетаданныеСсылки_.ПолноеИмя(), "Перечисление") Тогда 
			// Ничего не делаем, все уже сделано выше.
			// Для перечисления, возможно, просто получаем codeSystem, поэтому code может быть не заполнен.
		ИначеЕсли МетаданныеСсылки_.Имя = "ВидыПоказателейЗдоровья" Тогда 
			РеквизитыОбъекта_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъектМетаданных, "АтрибутCode, НаименованиеПолное, Наименование");
			Результат_.code = РеквизитыОбъекта_.АтрибутCode;
			Результат_.displayName = ?(ЗначениеЗаполнено(РеквизитыОбъекта_.НаименованиеПолное),
				РеквизитыОбъекта_.НаименованиеПолное, РеквизитыОбъекта_.Наименование);
		Иначе
			ВызватьИсключение(
				СтрШаблон(
					"Попытка получения СтруктурыКодированныхПолей для '%1': не реализовано получение для типа '%2'.",
					МетаданныеСсылки_,
					ТипЗнч(МетаданныеСсылки_)
				)
			);
		КонецЕсли;
	КонецЕсли;
	
	Результат_.displayName = СокрЛП(Результат_.displayName);
	
	НезаполненныеПоля_ = НезаполненныеПоляСтруктурыКодированныхПолей(Результат_);
	Если НезаполненныеПоля_.Количество() > 0 Тогда 
		Результат_.ОшибкаЗаполнения = СтрШаблон(
			"Для %1 не удалось получить кодируемые поля: %2.", 
			СсылкаНаОбъектМетаданных, 
			СтрСоединить(НезаполненныеПоля_, ", ")
		);
	КонецЕсли;
	
	Результат_.displayName = ОбщиеМеханизмы.ЭкранироватьЗначение(Результат_.displayName);
	Результат_.codeSystemName = ОбщиеМеханизмы.ЭкранироватьЗначение(Результат_.codeSystemName);
	
	Возврат Результат_;
КонецФункции

// Функция, обратная СтруктураКодированныхПолейПоСсылкеНаОбъектМетаданных.
//  Возвращает по данным ФНСИ ссылку на объект метаданных.
//
// Параметры:
//  СтруктураКодированныхПолей - Структура - Структура с полями: code, codeSystem, codeSystemVersion
//  ВызыватьИсключение				 - Булево					 - Вызывать исключение или возвращать Неопределено
// 
// Возвращаемое значение:
//  СправочникСсылка, ПеречислениеСсылка, Неопределено - Ссылка
//
Функция СсылкаНаОбъектМетаданныхПоСтруктуреКодированныхПолей(СтруктураКодированныхПолей, ВызыватьИсключение = Истина) Экспорт
	codeSystem_ = СтруктураКодированныхПолей.codeSystem;
	КлючевыеПараметры_ = СтрШаблон(
		"code='%1',codeSystem='%2'", 
		СтруктураКодированныхПолей.code, 
		СтруктураКодированныхПолей.codeSystem
	);
	
	Попытка
		МодульФормированиеСЭМД_ = ОбщегоНазначения.ОбщийМодуль("ФормированиеСЭМД");
	Исключение
	КонецПопытки;
	
	Если МодульФормированиеСЭМД_ <> Неопределено Тогда
		ИмяПеречисления_ = МодульФормированиеСЭМД_.СоответствиеПеречисленийCodeSystem().Получить(codeSystem_);

		Если ЗначениеЗаполнено(ИмяПеречисления_) Тогда 
			Попытка
				Возврат Перечисления[ИмяПеречисления_].ПолучитьСсылкуПоЭлементуCode(СтруктураКодированныхПолей);
			Исключение
				СтрокаОшибки_ = СтрШаблон(
					"В перечислении '%1' ошибка при реализации функции ПолучитьСсылкуПоЭлементуCode (%2):
					|%3",
					ИмяПеречисления_,
					КлючевыеПараметры_,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				Если Истина = ВызыватьИсключение Тогда 
					ВызватьИсключение(СтрокаОшибки_);
				Иначе
					ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(СтрокаОшибки_);
					Возврат Неопределено;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника_ = ПолучитьДанныеСправочникаПоОИД(codeSystem_);
	Если Неопределено = ДанныеСправочника_ Тогда 
		СтрокаОшибки_ = СтрШаблон(
			"Не удалось установить объект метаданных для хранения справочника с OID = '%1' (%2)",
			codeSystem_,
			КлючевыеПараметры_
		);
		Если Истина = ВызыватьИсключение Тогда 
			ВызватьИсключение(СтрокаОшибки_);
		Иначе
			ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(СтрокаОшибки_);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСправочника_.ИмяОбъектаМетаданных = "ВидыПоказателейЗдоровья" Тогда 
		СтруктураПолейКлассификатора_ = ПолучитьСтруктуруКодированныхПолейПоСинониму(ДанныеСправочника_.Синоним);
		Если ЗначениеЗаполнено(СтруктураПолейКлассификатора_) Тогда
			СтруктураКодированныхПолей.Вставить("МассивОИД", СтруктураПолейКлассификатора_.МассивОИД);
		КонецЕсли;
		Попытка
			Возврат ВидыПоказателейЗдоровьяСсылкаПоДаннымСправочникаФНСИ(ДанныеСправочника_, СтруктураКодированныхПолей);
		Исключение
			СтрокаОшибки_ = СтрШаблон(
				"Ошибка получения %1 (%2):
				|%3",
				"ВидыПоказателейЗдоровья",
				КлючевыеПараметры_,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			Если Истина = ВызыватьИсключение Тогда 
				ВызватьИсключение(СтрокаОшибки_);
			Иначе
				ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(СтрокаОшибки_);
				Возврат Неопределено;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ДанныеСправочника_.ИмяОбъектаМетаданных = "ЗначенияПоказателейЗдоровья" Тогда 
		СтруктураПолейКлассификатора_ = ПолучитьСтруктуруКодированныхПолейПоСинониму(ДанныеСправочника_.Синоним);
		Если ЗначениеЗаполнено(СтруктураПолейКлассификатора_) Тогда
			СтруктураКодированныхПолей.Вставить("МассивОИД", СтруктураПолейКлассификатора_.МассивОИД);
		КонецЕсли;
		Попытка
			Возврат ЗначенияПоказателейЗдоровьяСсылкаПоДаннымСправочникаФНСИ(ДанныеСправочника_, СтруктураКодированныхПолей);
		Исключение
			СтрокаОшибки_ = СтрШаблон(
				"Ошибка получения %1 (%2):
				|%3",
				"ЗначенияПоказателейЗдоровья",
				КлючевыеПараметры_,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			Если Истина = ВызыватьИсключение Тогда 
				ВызватьИсключение(СтрокаОшибки_);
			Иначе
				ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(СтрокаОшибки_);
				Возврат Неопределено;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Возврат СправочникСсылкаПоДаннымСправочникаФНСИ(ДанныеСправочника_, СтруктураКодированныхПолей);
	Исключение
		СтрокаОшибки_ = СтрШаблон(
			"При выполнении запроса (%2) получения по КодуМинздрава к справочнику '%1' произошла ошибка:
			|%3",
			ДанныеСправочника_.ИмяОбъектаМетаданных,
			КлючевыеПараметры_,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Если Истина = ВызыватьИсключение Тогда 
			ВызватьИсключение(СтрокаОшибки_);
		Иначе
			ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(СтрокаОшибки_);
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
КонецФункции

// Функция - Получить данные справочника по ОИД
//
// Параметры:
//  ОИД - Строка - ОИД справочника.
// 
// Возвращаемое значение:
//  Структура - Структура с полями: Синоним, ИмяОбъектаМетаданных.
//
Функция ПолучитьДанныеСправочникаПоОИД(ОИД) Экспорт
	Результат_ = Новый Структура("Синоним, ИмяОбъектаМетаданных");
	
	Запрос_ = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СправочникиФНСИ.Синоним КАК Синоним,
		|	СправочникиФНСИ.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных
		|ИЗ
		|	Справочник.СправочникиФНСИ КАК СправочникиФНСИ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправочникиФНСИ.Версии КАК СправочникиФНСИВерсии
		|		ПО (СправочникиФНСИВерсии.Ссылка = СправочникиФНСИ.Ссылка)
		|ГДЕ
		|	СправочникиФНСИВерсии.ОИД = &ОИД
		|	И НЕ СправочникиФНСИ.ПометкаУдаления"
	);
	Запрос_.УстановитьПараметр("ОИД", ОИД);
	РезультатЗапроса_ = Запрос_.Выполнить();
	Если РезультатЗапроса_.Пустой() Тогда 
		ЕстьВМакете_ = ЕстьОИДВМакетеПервоначальногоЗаполнения(ОИД);
		Если Истина = ЕстьВМакете_ Тогда 
			ПервоначальноеЗаполнение();
			РезультатЗапроса_ = Запрос_.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	Выборка_ = РезультатЗапроса_.Выбрать();
	Если НЕ Выборка_.Следующий() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выборка_.Количество() > 1 Тогда 
		ВызватьИсключение(СтрШаблон("Неоднозначость в справочнике СправочникиФНСИ для ОИД = '%1'", ОИД));
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат_, Выборка_);
	Возврат Результат_;
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Первоначальное заполнение данных, подробнее см. ФункциональныеПодсистемы.ПервыйЗапуск.
//
// Параметры:
//  ИзменятьСуществующие  - Булево - Признак необходимости обновления
//                 существующих в базе данных.
//  ТребуетсяПерезапуск  - Булево - Признак необходимости перезапуска
//                 приложения, после выполнения обработчика(если вызов не из обработчика обновления).
//
Процедура ПервоначальноеЗаполнение(Знач ИзменятьСуществующие = Ложь, ТребуетсяПерезапуск = Ложь) Экспорт
	
	Попытка
		
		Менеджер_ = Справочники.СправочникиФНСИ;
		ЭтоБольница_ = ФедеральныеВебСервисыПереопределяемый.ИспользуютсяСтационарныеУсловия();
		
		МакетТаблица_ = ТаблицаПервоначальногоЗаполнения();
		ТипДата_ = Новый ОписаниеТипов("Дата");
		ТекущаяДата_ = ТекущаяДатаСеанса();
		
		Для Каждого СтрокаМакета_ Из МакетТаблица_ Цикл
			Если ЗначениеЗаполнено(СтрокаМакета_.ЭтоБольница) И Не ЭтоБольница_ Тогда
				Продолжить;
			КонецЕсли;
			СпрСсылка_ = Менеджер_.НайтиПоРеквизиту("Синоним", СтрокаМакета_.Синоним);
			ДатаПубликации_ = ТипДата_.ПривестиЗначение(СтрокаМакета_.ДатаПубликации);
			Если ЗначениеЗаполнено(СпрСсылка_) Тогда
				Объект_ = СпрСсылка_.ПолучитьОбъект();
				Если ИзменятьСуществующие И Объект_.ДатаПубликации < ДатаПубликации_ Тогда
					ЗаполнитьЗначенияСвойств(Объект_, СтрокаМакета_,,"ДатаПубликации");
					Объект_.ДатаПубликации = ДатаПубликации_;
					Объект_.Актуальность = Истина;
					Объект_.ДатаПоследнейПроверки = ДатаПубликации_;
					
					Объект_.Версии.Очистить();
					МассивОИД_ = МассивОИДСтрокиТаблицыМакета(СтрокаМакета_);
					Для Индекс_ = 0 По МассивОИД_.Количество() - 1 Цикл 
						Строка_ = Объект_.Версии.Добавить();
						Строка_.ОИД = МассивОИД_[Индекс_];
						Если Индекс_ = 0 Тогда 
							Строка_.ВерсияКлассификатора = Объект_.ВерсияКлассификатора;
						КонецЕсли;
					КонецЦикла;
					
					Объект_.Записать();
				КонецЕсли;
			Иначе
				Объект_ = Менеджер_.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(Объект_, СтрокаМакета_,,"ДатаПубликации");
				Объект_.ДатаПубликации = ДатаПубликации_;
				Объект_.Актуальность = Истина;
				Объект_.ДатаПоследнейПроверки = ДатаПубликации_;
				
				МассивОИД_ = МассивОИДСтрокиТаблицыМакета(СтрокаМакета_);
				Для Индекс_ = 0 По МассивОИД_.Количество() - 1 Цикл 
					Строка_ = Объект_.Версии.Добавить();
					Строка_.ОИД = МассивОИД_[Индекс_];
					Если Индекс_ = 0 Тогда 
						Строка_.ВерсияКлассификатора = Объект_.ВерсияКлассификатора;
					КонецЕсли;
				КонецЦикла;
				
				Объект_.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		Ошибка_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		__ПРОВЕРКА__(Ложь, НСтр("ru='ПервоначальноеЗаполнение: Непредвиденная ошибка:'") + Ошибка_);
		ВызватьИсключение;
		
	КонецПопытки;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСинонимПоМетаданным(МетаданныеСсылки)
	Запрос_ = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СправочникиФНСИ.Синоним КАК Синоним
		|ИЗ
		|	Справочник.СправочникиФНСИ КАК СправочникиФНСИ
		|ГДЕ
		|	СправочникиФНСИ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
		|	И НЕ СправочникиФНСИ.ПометкаУдаления"
	);
	Запрос_.УстановитьПараметр("ИмяОбъектаМетаданных", МетаданныеСсылки.Имя);
	РезультатЗапроса_ = Запрос_.Выполнить();
	Если РезультатЗапроса_.Пустой() Тогда 
		ЕстьВМакете_ = ЕстьВМакетеПервоначальногоЗаполнения(
			Новый Структура("ИмяОбъектаМетаданных", МетаданныеСсылки.Имя)
		);
		Если Истина = ЕстьВМакете_ Тогда 
			ПервоначальноеЗаполнение();
			РезультатЗапроса_ = Запрос_.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	Выборка_ = РезультатЗапроса_.Выбрать();
	Если НЕ Выборка_.Следующий() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выборка_.Количество() > 1 Тогда 
		Возврат Неопределено;
	КонецЕсли;

	Возврат Выборка_.Синоним;
КонецФункции

Функция ТаблицаПервоначальногоЗаполнения()
	МакетXML_ = Справочники.СправочникиФНСИ.ПолучитьМакет("ПервоначальноеЗаполнение").ПолучитьТекст();
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML_).Данные;
КонецФункции

Функция ЕстьВМакетеПервоначальногоЗаполнения(ПараметрыОтбора)
	МакетТаблица_ = ТаблицаПервоначальногоЗаполнения();
	Возврат (МакетТаблица_.НайтиСтроки(ПараметрыОтбора).Количество() > 0);
КонецФункции

Функция ЕстьОИДВМакетеПервоначальногоЗаполнения(ОИД)
	МакетТаблица_ = ТаблицаПервоначальногоЗаполнения();
	Для Каждого СтрокаТаблицы_ Из МакетТаблица_ Цикл 
		Если МассивОИДСтрокиТаблицыМакета(СтрокаТаблицы_).Найти(ОИД) <> Неопределено Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция МассивОИДСтрокиТаблицыМакета(СтрокаТаблицыМакета)
	Результат_ = Новый Массив();
	Для Индекс_ = 1 По 10 Цикл 
		ИмяКолонки_ = СтрШаблон("СтрокаОИД%1", Индекс_);
		Если НЕ Истина = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыМакета, ИмяКолонки_) Тогда 
			Прервать;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыМакета[ИмяКолонки_]) Тогда 
			Результат_.Добавить(СтрокаТаблицыМакета[ИмяКолонки_]);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат_;
КонецФункции

Функция СтруктураКодированныхПолейСЗаполнением(Синоним, ТребуетсяЗаполнение = Истина)
	Если Не ЗначениеЗаполнено(Синоним) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат_ = Новый Структура("codeSystem, codeSystemName, codeSystemVersion, МассивОИД");
	
	Запрос_ = Новый Запрос(
		"ВЫБРАТЬ
		|	СправочникиФНСИ.НаименоваениеКлассификатораПолное КАК codeSystemName,
		|	СправочникиФНСИ.ОсновнойОИД КАК codeSystem,
		|	СправочникиФНСИ.ВерсияКлассификатора КАК codeSystemVersion
		|ИЗ
		|	Справочник.СправочникиФНСИ КАК СправочникиФНСИ
		|ГДЕ
		|	СправочникиФНСИ.Синоним = &Синоним
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникиФНСИВерсии.ОИД КАК ОИД
		|ИЗ
		|	Справочник.СправочникиФНСИ.Версии КАК СправочникиФНСИВерсии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СправочникиФНСИ КАК СправочникиФНСИ
		|		ПО СправочникиФНСИВерсии.Ссылка = СправочникиФНСИ.Ссылка
		|ГДЕ
		|	СправочникиФНСИ.Синоним = &Синоним"
	);
	
	Запрос_.УстановитьПараметр("Синоним", Синоним);
	
	МассивРезультатовЗапроса_ = Запрос_.ВыполнитьПакет();
	
	АктуальнаяВерсия_ = МассивРезультатовЗапроса_[0].Выбрать();
	
	Если АктуальнаяВерсия_.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат_, АктуальнаяВерсия_);
		МассивОИД = МассивРезультатовЗапроса_[1].Выгрузить().ВыгрузитьКолонку("ОИД");
		Результат_.Вставить("МассивОИД", МассивОИД);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат_.codeSystem) И Истина = ТребуетсяЗаполнение Тогда 
		ЕстьВМакете_ = ЕстьВМакетеПервоначальногоЗаполнения(Новый Структура("Синоним", Синоним));
		Если Истина = ЕстьВМакете_ Тогда 
			ПервоначальноеЗаполнение();
			Возврат СтруктураКодированныхПолейСЗаполнением(Синоним, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат_;
	
КонецФункции

Функция СправочникСсылкаПоДаннымСправочникаФНСИ(ДанныеСправочника, СтруктураКодированныхПолей)
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(Метаданные.Справочники[ДанныеСправочника.ИмяОбъектаМетаданных]);
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);

	Запрос_ = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДолжностиОрганизаций КАК Т
		|ГДЕ
		|	Т.КодМинздрава = &code
		|	И Т.Актуальность = &ЗначениеДоступности
		|	И НЕ Т.ПометкаУдаления"
	);
	Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "ДолжностиОрганизаций", ДанныеСправочника.ИмяОбъектаМетаданных);
	Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "Актуальность", ИмяРеквизитаАрхивности_);
	
	Если ДанныеСправочника.Синоним = "7PJSAM6GJM" 
			ИЛИ ДанныеСправочника.Синоним = "IQ1CPDEHRK"
	Тогда 
		// Для должностей 2 справочника НСИ
		Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "КодМинздрава", "ФедеральныйКод");
	ИначеЕсли ДанныеСправочника.Синоним = "MKB308" Тогда 
		// Для МКБ code из Код
		Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "КодМинздрава", "Код");
	ИначеЕсли ДанныеСправочника.Синоним = "3QO26R99FR" Тогда
		// Для СтруктураСекцийМД code из АтрибутCode
		Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "КодМинздрава", "АтрибутCode");
	ИначеЕсли  ДанныеСправочника.Синоним = "RL682" Тогда
		// Для РолиПриПодписанииМД code из Роль
		Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "КодМинздрава", "Роль");
	ИначеЕсли ДанныеСправочника.Синоним = "6LE4NGIG4C" Тогда
		// Для справочника Категории льгот 2 классификатора НСИ
		Запрос_.Текст = СтрЗаменить(Запрос_.Текст, "КодМинздрава", "КодПоФорме");
		СтруктураКодированныхПолей.code = Число(СтруктураКодированныхПолей.code);
	ИначеЕсли ДанныеСправочника.Синоним = "D7NUFL5QDB" Тогда
		// Для справочника СтраныМираНСИ код минздрава -- число.
		СтруктураКодированныхПолей.code = Число(СтруктураКодированныхПолей.code);
	КонецЕсли;
	
	Запрос_.УстановитьПараметр("code", СтруктураКодированныхПолей.code);
	Запрос_.УстановитьПараметр("ЗначениеДоступности", НЕ ЗначениеНедоступности_);
	
	Выборка_ = Запрос_.Выполнить().Выбрать();
	Если Выборка_.Следующий() Тогда 
		Возврат Выборка_.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ВидыПоказателейЗдоровьяСсылкаПоДаннымСправочникаФНСИ(ДанныеСправочника, СтруктураКодированныхПолей)
	CodeSystem_ = СтруктураКодированныхПолей.codeSystem;
	СтруктураКодированныхПолей.Свойство("МассивОИД", CodeSystem_);
	Возврат ПланыВидовХарактеристик.ВидыПоказателейЗдоровья.СсылкаПоCodeCodeSystem(
		СтруктураКодированныхПолей.code, 
		CodeSystem_
	);
КонецФункции

Функция ЗначенияПоказателейЗдоровьяСсылкаПоДаннымСправочникаФНСИ(ДанныеСправочника, СтруктураКодированныхПолей)
	CodeSystem_ = СтруктураКодированныхПолей.codeSystem;
	СтруктураКодированныхПолей.Свойство("МассивОИД", CodeSystem_);
	Возврат Справочники.ЗначенияПоказателейЗдоровья.СсылкаПоCodeCodeSystem(
		СтруктураКодированныхПолей.code, 
		CodeSystem_
	);
КонецФункции

Функция НезаполненныеПоляСтруктурыКодированныхПолей(СтруктураКодированныхПолей, ОбязательныеПоля = Неопределено)
	Результат_ = Новый Массив();
	Если ОбязательныеПоля = Неопределено Тогда 
		ОбязательныеПоля = АлгоритмыДляКоллекций.СоздатьМассив("code", "displayName", "codeSystem", "codeSystemName", "codeSystemVersion");
	КонецЕсли;
	Для Каждого ИмяПоля_ Из ОбязательныеПоля Цикл 
		Если НЕ ЗначениеЗаполнено(СтруктураКодированныхПолей[ИмяПоля_]) Тогда 
			Результат_.Добавить(ИмяПоля_);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат_;
КонецФункции

#КонецОбласти

#КонецЕсли