
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект,,,, Истина);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад",Объект.Ссылка));
	
	Если Объект.Ссылка.Пустая() Тогда
		СкладСсылка = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьПоФункциональнымОпциям();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СкладСсылка = Объект.Ссылка;
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьЗаполнениеМОЛ(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗапроситьРежимИзмененияМОЛ(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(СкладСсылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСведенияОбОтветственныхЛицах();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад",Объект.Ссылка));
	
	ЗаполнитьДанныеМатериальноОтветственногоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Склады", ПараметрыЗаписи, Объект.Ссылка);
	
	НеобходимоОбновлятьИнтерфейс = Ложь;
	
	Для Каждого ЭлементКэша Из КэшРеквизитов Цикл
		Если Объект[ЭлементКэша.Ключ] <> ЭлементКэша.Значение Тогда
			НеобходимоОбновлятьИнтерфейс = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимоОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс();
		
		КэшРеквизитов = Новый Структура;
		КэшРеквизитов.Вставить("ИспользоватьМестаХранения", Объект.ИспользоватьМестаХранения);
		КэшРеквизитов = Новый ФиксированнаяСтруктура(КэшРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсторияОтветственныхЛиц(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Склад", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.МатериальноОтветственныеЛица.ФормаСписка", ПараметрыФормы, ЭтотОбъект, Истина, ЭтотОбъект.Окно);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = Элементы.ГруппаДополнительныеРеквизиты.Имя
	   И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения
	   И Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		КонтактнаяИнформацияПриСменеСтраницы();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСкладаПриИзменении(Элемент)
	
	ОбработатьИзменениеТипаСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура МОЛОтветственныйПриИзменении(Элемент)
	
	УстановитьДолжностьФизЛицаПоФРМРНаСервере();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	КэшРеквизитов = Новый Структура;
	Если Объект.Ссылка.Пустая() Тогда
		КэшРеквизитов.Вставить("ИспользоватьМестаХранения", Ложь);
	Иначе
		КэшРеквизитов.Вставить("ИспользоватьМестаХранения", Объект.ИспользоватьМестаХранения);
	КонецЕсли;
	КэшРеквизитов = Новый ФиксированнаяСтруктура(КэшРеквизитов);
	
	УстановитьВидимостьДоступностьПоТипуСклада();
	ЗаполнитьДанныеМатериальноОтветственногоЛица();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПоТипуСклада()
	
	Если Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		Элементы.ГруппаПараметрыСклада.ТекущаяСтраница = Элементы.СтраницаРозничныйМагазин;
	ИначеЕсли Объект.ТипСклада = Перечисления.ТипыСкладов.Отделение Тогда
		Элементы.ГруппаПараметрыСклада.ТекущаяСтраница = Элементы.СтраницаОтделение;
	Иначе
		Элементы.ГруппаПараметрыСклада.ТекущаяСтраница = Элементы.СтраницаОбщегоНазначения;
	КонецЕсли;
		
	Элементы.ИспользоватьМестаХранения.Доступность = ДоступноИспользованиеМестХранения();
	
КонецПроцедуры

&НаСервере
Функция ДоступноИспользованиеМестХранения()
	
	Возврат Объект.ТипСклада = Перечисления.ТипыСкладов.БольничнаяАптека
		Или Объект.ТипСклада = Перечисления.ТипыСкладов.Отделение И ПолучитьФункциональнуюОпцию("ВестиСкладскойУчетВОтделениях");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоФункциональнымОпциям()
	
	Элементы.ТипСкладаРозничныйМагазин.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	Элементы.ГруппаПараметрыРозничногоСклада.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	
	Элементы.ГруппаРозничныйМагазинИсточникФинансирования.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТипаСклада()
	
	Если Не ДоступноИспользованиеМестХранения() Тогда
		Объект.ИспользоватьМестаХранения = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПоТипуСклада();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеМатериальноОтветственногоЛица()
	
	Запись = РегистрыСведений.МатериальноОтветственныеЛица.СоздатьМенеджерЗаписи();
	Запись.Склад = СкладСсылка;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.МатериальноОтветственныеЛица;
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Период
		|ИЗ
		|	РегистрСведений.МатериальноОтветственныеЛица
		|ГДЕ
		|	ИСТИНА
		|";
		
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|И " + Измерение.Имя + " = &" + Измерение.Имя;
			Запрос.УстановитьПараметр(Измерение.Имя, Запись[Измерение.Имя]);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|";
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запись.Период = Выборка.Период;
			Запись.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Запись, "МОЛ");
	ЗначенияЗаписи = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Запись, МетаданныеРегистра);
	МОЛПрежняяЗапись = Новый ФиксированнаяСтруктура(ЗначенияЗаписи);
	МОЛСоздатьНовуюЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСведенияОбОтветственныхЛицах()
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.МатериальноОтветственныеЛица;
	Если Не ПравоДоступа("Изменение", МетаданныеРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилисьДанные = ДанныеМОЛИзменились();
	Если ИзменилисьДанные Тогда
		
		// пишем новое состояние записи
		МенеджерЗаписи = РеквизитФормыВЗначение("МОЛ");
		
		// если нужно сохранить старую запись, то создадим новые менеджер записи
		Если МОЛСоздатьНовуюЗапись Тогда
			
			НоваяЗапись = РегистрыСведений.МатериальноОтветственныеЛица.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, МенеджерЗаписи);
			НоваяЗапись.Записать();
			
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеМОЛ(Отказ)
	
	Если ДанныеМОЛИзменились() Тогда
		
		МенеджерЗаписи = РеквизитФормыВЗначение("МОЛ");
		
		МетаданныеРегистра = Метаданные.РегистрыСведений.МатериальноОтветственныеЛица;
		
		Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, СтандартныйРеквизит, Отказ);
		КонецЦикла;
		
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, Измерение, Отказ);
		КонецЦикла;
		
		Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, Ресурс, Отказ);
		КонецЦикла;
		
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, Реквизит, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ОписаниеПоля, Отказ)
	
	Если ОписаниеПоля.ПроверкаЗаполнения  = ПроверкаЗаполнения.ВыдаватьОшибку
	   И Не ЗначениеЗаполнено(МенеджерЗаписи[ОписаниеПоля.Имя]) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поле ""%1"" не заполнено.'"), ОписаниеПоля.Представление());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "МОЛ." + ОписаниеПоля.Имя,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеМОЛИзменились()
	
	Если МОЛ.Период <> МОЛПрежняяЗапись.Период Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.МатериальноОтветственныеЛица;
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если МОЛ[Измерение.Имя] <> МОЛПрежняяЗапись[Измерение.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
		Если МОЛ[Поле.Имя] <> МОЛПрежняяЗапись[Поле.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
		Если МОЛ[Поле.Имя] <> МОЛПрежняяЗапись[Поле.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьРежимИзмененияМОЛ(Отказ)
	
	Если ВыполняетсяЗаписьМОЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МОЛ.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МОЛПрежняяЗапись.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилсяПериод = (МОЛ.Период <> МОЛПрежняяЗапись.Период);
	
	ИзменилисьДанные = Ложь;
	Для Каждого Поле Из МОЛПрежняяЗапись Цикл
		Если Поле.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		ИзменилисьДанные = МОЛ[Поле.Ключ] <> Поле.Значение;
		Если ИзменилисьДанные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменилисьДанные И ИзменилсяПериод Тогда
		МОЛСоздатьНовуюЗапись = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДолжностьФизЛицаПоФРМРНаСервере()
	
	МОЛ.Должность = Справочники.ФизическиеЛица.ДолжностьФизЛицаПоФРМР(МОЛ.Ответственный);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовБольничнаяАптекаКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти // СтандартныеПодсистемы
