
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВышестоящееПодразделениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ВышестоящееПодразделение) Тогда
		Объект.Родитель = Неопределено;
		Объект.ПодразделениеОрганизации = Неопределено;
	ИначеЕсли ТипЗнч(ВышестоящееПодразделение) = ТипЗнч(Объект.Ссылка) Тогда
		Объект.Родитель = ВышестоящееПодразделение;
		Объект.ПодразделениеОрганизации = Неопределено;
	Иначе
		Объект.Родитель = Неопределено;
		Объект.ПодразделениеОрганизации = ВышестоящееПодразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиСкладскойУчетПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаВестиСкладскойУчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВеденияСкладскогоУчетаПриИзменении(Элемент)
	
	Элементы.ДатаНачалаВеденияСкладскогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийРуководительОтделенияПриИзменении(Элемент)
	
	УстановитьДолжностьФизЛицаПоФРМРНаСервере();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Не Объект.Ссылка.Пустая() И Объект.ВестиСкладскойУчет Тогда
		Элементы.ДатаНачалаВеденияСкладскогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элементы.ДатаНачалаВеденияСкладскогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		ВышестоящееПодразделение = Объект.Родитель;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ВышестоящееПодразделение = Объект.ПодразделениеОрганизации;
	Иначе
		ВышестоящееПодразделение = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьПолей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаНачалаВеденияСкладскогоУчета",
		"Доступность",
		Объект.ВестиСкладскойУчет);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеФлагаВестиСкладскойУчет()
	
	УстановитьДоступностьПолей();
	Если Не Объект.ВестиСкладскойУчет Тогда
		Объект.ДатаНачалаВеденияСкладскогоУчета = Дата(1, 1, 1);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаНачалаВеденияСкладскогоУчета = ТекущаяДатаСеанса();
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ВестиСкладскойУчет, ДатаНачалаВеденияСкладскогоУчета");
	Если Реквизиты.ВестиСкладскойУчет Тогда
		Объект.ДатаНачалаВеденияСкладскогоУчета = Реквизиты.ДатаНачалаВеденияСкладскогоУчета;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Отделение", Объект.Ссылка);
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаРекомендуемойДатыВключенияВеденияСкладскогоУчета();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		РекомендуемаяДата = Выборка.Дата + 60 * 60 * 24;
	Иначе
		РекомендуемаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Объект.ДатаНачалаВеденияСкладскогоУчета = Макс(ТекущаяДатаСеанса(), РекомендуемаяДата);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаРасчетаРекомендуемойДатыВключенияВеденияСкладскогоУчета()
	
	ОписаниеДокументов = ОписаниеДокументовЗависящихОтВеденияСкладскогоУчета();
	
	ЭтоПервыйЗапрос = Истина;
	ТекстЗапроса = "";
	Для Каждого СтруктураРеквизитов Из ОписаниеДокументов Цикл
		
		Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Документ." + СтруктураРеквизитов.ИмяРеквизитаДата + ") КАК Дата
		|ИЗ
		|	Документ." + СтруктураРеквизитов.ИмяОбъекта + " КАК Документ
		|ГДЕ
		|	Документ.Проведен
		|	И Документ." + СтруктураРеквизитов.ИмяРеквизитаОтделение + " = &Отделение";
		
		Если ЭтоПервыйЗапрос Тогда
			ТекстЗапроса = Текст;
			ЭтоПервыйЗапрос = Ложь;
		Иначе
			ТекстЗапроса = Текст + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстЗапроса;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО ДАТА УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ОписаниеДокументовЗависящихОтВеденияСкладскогоУчета()
	
	ОписаниеДокументов = Новый Массив;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ИмяОбъекта", "ОтпускТоваровВОтделение");
	СтруктураРеквизитов.Вставить("ИмяРеквизитаДата", "Дата");
	СтруктураРеквизитов.Вставить("ИмяРеквизитаОтделение", "Отделение");
	ОписаниеДокументов.Добавить(СтруктураРеквизитов);
	
	Возврат ОписаниеДокументов;
	
КонецФункции

&НаСервере
Процедура УстановитьДолжностьФизЛицаПоФРМРНаСервере()
	
	Объект.ТекущаяДолжностьРуководителя = Справочники.ФизическиеЛица.ДолжностьФизЛицаПоФРМР(Объект.ТекущийРуководитель);
	
КонецПроцедуры


#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовБольничнаяАптекаКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы
