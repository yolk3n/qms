
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ЗагрузитьШаблон();
		Иначе
			
			ИмяМакета = Параметры.ИмяМакета;
			Если ЗначениеЗаполнено(Параметры.Назначение) Тогда
				Объект.Назначение = Параметры.Назначение;
			КонецЕсли;
			Если Параметры.Высота > 0 Тогда
				Объект.Высота = Параметры.Высота;
			КонецЕсли;
			Если Параметры.Ширина > 0 Тогда
				Объект.Ширина = Параметры.Ширина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметры.Наименование) Тогда
				Объект.Наименование = Параметры.Наименование;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
				УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
			Иначе
				УстановитьШаблонПоУмолчанию(ИмяМакета);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьДоступныеПоля();
		
	КонецЕсли;
	
	РазмерСтраницы = ТекущийРазмерСтраницы(ЭтотОбъект);
	
	НазначениеПриИзмененииСервер();
	
	Коды = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьОбразцыШтрихкодов();
	Для Каждого Код Из Коды Цикл
		СписокТипыКодов.Добавить(Код.ТипКода, Код.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДоступныеПоля();
	ЗагрузитьШаблон();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьРазмещение", 1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыбораШаблона" Тогда
		УстановитьШаблонПоУмолчанию(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
	Если Не ПроверитьУмещение() Тогда
		Отказ = Истина;
	Иначе
		ТекущийОбъект.Шаблон = Новый ХранилищеЗначения(ПодготовитьСтруктуруМакетаШаблона());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ШаблоныЭтикетокИЦенников", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьШаблон(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьШаблонПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Редактируемый шаблон будет заменен на шаблон по умолчанию, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Открывает форму выбора шаблона этикеток и ценников
// Продолжение процедуры ВыбратьШаблон
//
// Параметры:
//  Ответ                   - КодВозвратаДиалога
//  ДополнительныеПараметры - (не используется)
//
&НаКлиенте
Процедура ВыбратьШаблонПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму(
			"Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыбораШаблона",
			Новый Структура("Назначение", Объект.Назначение),
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОбразец(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДляЧего) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Для чего""'"),, "Объект.ДляЧего");
		Возврат;
	КонецЕсли;
	
	ОбъектыПечати = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ДляЧего);
	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЦенникТовары",
			ОбъектыПечати,
			Неопределено,
			ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара());
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаТовары",
			ОбъектыПечати,
			Неопределено,
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара());
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.СтеллажнаяКарточкаДляТовара") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"СтеллажнаяКарточкаТовары",
			ОбъектыПечати,
			Неопределено,
			ПолучитьПараметрыДляПечатиОбразцаСтеллажнойКарточкиТовара());
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назначить(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДляЧего) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Для чего"" не заполнено'"),, "Объект.ДляЧего");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед выполнением операции элемент необходимо записать. Выполнить запись элемента и продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("НазначитьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	НазначитьШаблон();
	
КонецПроцедуры

&НаКлиенте
Процедура Объединить(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
	   И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента")
	   И ОбластьВходитВОбластьПечати(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректная область.'"),, "ПолеТабличногоДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разъединить(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
	   И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента")
	   И ОбластьВходитВОбластьПечати(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		РазъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректная область.'"),, "ПолеТабличногоДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущаяСтрока = Элементы.ДоступныеПоляКомпоновкиДанных.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВыборДоступногоПоля(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеПоВерхнемуКраю(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа.'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	
	УстановитьОтметкуВыравниванияПоВертикали();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеПоНижнемуКраю(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа.'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	
	УстановитьОтметкуВыравниванияПоВертикали();

КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеПоЦентру(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа.'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	УстановитьОтметкуВыравниванияПоВертикали();
		
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ОбновитьЗаголовок(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	НазначениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДляЧегоПриИзменении(Элемент)
	
	ЗаполнитьДоступныеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура РазмерЯчейкиПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Список "Доступные поля"

&НаКлиенте
Процедура ДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ВыборДоступногоПоля(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элементы.ДоступныеПоляКомпоновкиДанных.ТекущаяСтрока;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	Если Элементы.ПолеТабличногоДокумента.ТолькоПросмотр Тогда
		Элементы.ПолеТабличногоДокумента.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поле табличного документа

&НаКлиенте
Процедура ПолеТабличногоДокументаПриАктивизации(Элемент)
	
	КорректнаяОбласть = ОбластьВходитВОбластьПечати(ПолеТабличногоДокумента.ТекущаяОбласть);
	Для Каждого Элемент Из Элементы.ГруппаРедактирование.ПодчиненныеЭлементы Цикл
		Элемент.Доступность = КорректнаяОбласть;
	КонецЦикла;
	Элементы.КонтекстноеМенюПолеТабличногоДокументаОбъединить.Доступность = КорректнаяОбласть;
	Элементы.КонтекстноеМенюПолеТабличногоДокументаРазбить.Доступность    = КорректнаяОбласть;
	
	Элементы.ПолеТабличногоДокумента.ТолькоПросмотр = Не КорректнаяОбласть;
	
	ПодключитьОбработчикОжидания("ЗаполнитьТаблицуСвойств", 0.1, Истина);
	
	УстановитьОтметкуВыравниванияПоВертикали();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПодключитьОбработчикОжидания("ЗаполнитьТаблицуСвойств", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(Значение) = Тип("ДанныеФормыЭлементДерева") И ОбластьВходитВОбластьПечати(Область) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Не ОбластьВключаетВСебяОбласть(Элементы.ПолеТабличногоДокумента.ТекущаяОбласть, Область) Тогда
			Элементы.ПолеТабличногоДокумента.ТекущаяОбласть = ПолеТабличногоДокумента.Область(Область.Верх, Область.Лево);
		КонецЕсли;
		ВыборДоступногоПоля(Значение.ПолучитьИдентификатор());
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Список "Свойства"

&НаКлиенте
Процедура СвойстваЯчеекПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СвойстваЯчеекЗначение.СписокВыбора.Очистить();
	
	ЭтоСтрокаСТипомКода = Найти(ТекущиеДанные.ИмяСвойства, "ТипКода") > 0;
	ЭтоСтрокаГраница = Найти(ТекущиеДанные.ИмяСвойства, "Граница") > 0;
	ЭтоСтрокаЛиния = Найти(ТекущиеДанные.ИмяСвойства, "Линия") > 0;
	ЭтоСтрокаЗаполнение = Найти(ТекущиеДанные.ИмяСвойства, "Заполнение") > 0;
	
	Если ЭтоСтрокаСТипомКода Тогда
		
		Для Каждого ЭлементСписка Из СписокТипыКодов Цикл
			Элементы.СвойстваЯчеекЗначение.СписокВыбора.Добавить(ЭлементСписка.Представление);
		КонецЦикла;
		
		Элементы.СвойстваЯчеекЗначение.РежимВыбораИзСписка = Истина;
		Элементы.СвойстваЯчеекЗначение.КнопкаСпискаВыбора = Ложь;
		
	Иначе
		
		Элементы.СвойстваЯчеекЗначение.РежимВыбораИзСписка = Ложь;
		Элементы.СвойстваЯчеекЗначение.КнопкаСпискаВыбора = Ложь;
		
	КонецЕсли;
	
	Элементы.СвойстваЯчеекЗначение.РедактированиеТекста =  Не (ЭтоСтрокаГраница Или ЭтоСтрокаСТипомКода Или ЭтоСтрокаЛиния Или ЭтоСтрокаЗаполнение);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеПриИзменении(Элемент)
	
	ВыделеннаяОбласть = Элементы.ПолеТабличногоДокумента.ТекущаяОбласть;
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если ТекущиеДанные.ИмяСвойства = "ТипКода" Тогда
			
			Для Каждого КлючИЗначение Из СписокТипыКодов Цикл
				Представление = КлючИЗначение.Представление;
				Если ТекущиеДанные.Значение = Представление Тогда
					ТипКода = КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ИмяСвойства = "РазмерШрифта" Тогда
			РазмерШрифта = ТекущиеДанные.Значение;
		ИначеЕсли ТекущиеДанные.ИмяСвойства = "ОтображатьТекст" Тогда
			ОтображатьТекст = ТекущиеДанные.Значение;
		Иначе
			ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
		КонецЕсли;
		
		Имя = ВыделеннаяОбласть.Имя;
		Индекс = ЗаменитьРисунокШтрихкода(Имя);
		ПолеТабличногоДокумента.Рисунки[Индекс].Имя = Имя;
		
		Элементы.ПолеТабличногоДокумента.ТекущаяОбласть = ПолеТабличногоДокумента.Рисунки[Индекс];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		Если Найти(ТекущиеДанные.ИмяСвойства, "Граница") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные);
			
		ИначеЕсли Найти(ТекущиеДанные.ИмяСвойства, "Формат") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			Конструктор = Новый КонструкторФорматнойСтроки;
			Конструктор.Текст = ТекущиеДанные.Значение;
			ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьФорматЗавершение", ЭтотОбъект, Новый Структура("ВыделеннаяОбласть, ТекущиеДанные", ВыделеннаяОбласть, ТекущиеДанные));
			Конструктор.Показать(ОписаниеОповещения);
			
		ИначеЕсли Найти(ТекущиеДанные.ИмяСвойства, "Заполнение") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Параметр);
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Текст);
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Шаблон);
			ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьЗаполнениеЗавершение", ЭтотОбъект, Новый Структура("ВыделеннаяОбласть, ТекущиеДанные", ВыделеннаяОбласть, ТекущиеДанные));
			ПоказатьВыборИзСписка(ОписаниеОповещения, СписокЗначений, Элементы.СвойстваЯчеекЗначение, СписокЗначений.НайтиПоЗначению(ТекущиеДанные.Значение));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если Найти(ТекущиеДанные.ИмяСвойства, "Линия") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	ЭтоСтрокаЗаполнение = Найти(ТекущиеДанные.ИмяСвойства, "Заполнение") > 0;
	ЭтоСтрокаСТипомКода = Найти(ТекущиеДанные.ИмяСвойства, "ТипКода") > 0;
	ЭтоСтрокаГраница = Найти(ТекущиеДанные.ИмяСвойства, "Граница") > 0;
	ЭтоСтрокаЛиния = Найти(ТекущиеДанные.ИмяСвойства, "Линия") > 0;
	ЭтоСтрокаЦвета = Найти(ТекущиеДанные.ИмяСвойства, "Цвет") > 0;
	
	Если ЭтоСтрокаГраница Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыделеннаяОбласть = Элементы.ПолеТабличногоДокумента.ТекущаяОбласть;
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
		ТекущиеДанные.Значение = ПредставлениеЛинии(ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства]);
		
	ИначеЕсли ЭтоСтрокаЛиния Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыделеннаяОбласть = Элементы.ПолеТабличногоДокумента.ТекущаяОбласть;
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
		ТекущиеДанные.Значение = ПредставлениеЛинии(ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства]);
		
	ИначеЕсли ЭтоСтрокаЗаполнение Или ЭтоСтрокаСТипомКода Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ЭтоСтрокаЦвета Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.Значение = Новый Цвет();
		
		ВыделеннаяОбласть = Элементы.ПолеТабличногоДокумента.ТекущаяОбласть;
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Цвет фона поля СвойстваЯчеек
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвойстваЯчеек.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"СвойстваЯчеек.Значение", ВидСравненияКомпоновкиДанных.Равно, "Разделитель");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиОтчета);
	
	// Видимость поля СвойстваЯчеекЗначение
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СвойстваЯчеекЗначение.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"СвойстваЯчеек.Значение", ВидСравненияКомпоновкиДанных.Равно, "Разделитель");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруМакетаШаблона()
	
	СтруктураМакетаШаблона = Справочники.ШаблоныЭтикетокИЦенников.ПодготовитьСтруктуруМакетаШаблона(ПолеТабличногоДокумента, Объект.Назначение);
	СтруктураМакетаШаблона.ТипКода          = ТипКода;
	СтруктураМакетаШаблона.РазмерШрифта     = РазмерШрифта;
	СтруктураМакетаШаблона.ОтображатьТекст  = ОтображатьТекст;
	
	Возврат СтруктураМакетаШаблона;
	
КонецФункции

&НаСервере
Функция ПроверитьУмещение()
	
	Ошибка = Ложь;
	
	МаксимальноеКоличество = МаксимальноеКоличествоНаСтранице();
	
	Если МаксимальноеКоличество.ПоГоризонтали > 0
		И КоличествоПоГоризонтали > МаксимальноеКоличество.ПоГоризонтали Тогда
		
		ТекстСообщения = НСтр("ru = 'Максимальное количество по горизонтали: %Количество%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", МаксимальноеКоличество.ПоГоризонтали);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "КоличествоПоГоризонтали",, Ошибка);
		
	КонецЕсли;
	
	Если МаксимальноеКоличество.ПоВертикали > 0
		И КоличествоПоВертикали > МаксимальноеКоличество.ПоВертикали Тогда
		
		ТекстСообщения = НСтр("ru = 'Максимальное количество по вертикали: %Количество%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", МаксимальноеКоличество.ПоВертикали);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "КоличествоПоВертикали",, Ошибка);
		
	КонецЕсли;
	
	Возврат Не Ошибка;
	
КонецФункции

&НаСервере
Функция  МаксимальноеКоличествоНаСтранице()
	
	Возврат Справочники.ШаблоныЭтикетокИЦенников.МаксимальноеКоличествоНаСтранице(ПолеТабличногоДокумента, Объект.Назначение);
	
КонецФункции

&НаСервере
Процедура УстановитьОбластьПечатиНаСервере(ИмяОбласти)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.Область(ИмяОбласти);
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
	
	Если ПолеТабличногоДокумента.ОбластьПечати <> Неопределено Тогда
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(НетЛинии, НетЛинии, НетЛинии, НетЛинии);
	КонецЕсли;
	
	ПолеТабличногоДокумента.ОбластьПечати = ВыделеннаяОбласть;
	ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир, РедкийПунктир, РедкийПунктир, РедкийПунктир);
	
	ПолеТабличногоДокумента.ОбластьПечати.АвтоВысотаСтроки = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПараметраВалютаЦены()
	
	Возврат "ВидЦены.ВалютаЦены";
	
КонецФункции

&НаСервере
Процедура ОбъединитьОбласть(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Объединить();
	
КонецПроцедуры

&НаСервере
Процедура РазъединитьОбласть(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Разъединить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоступногоПоля(ВыбраннаяСтрока)
	
	// Перед началом добавления необходимо выделить область в табличном документе.
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для переноса поля шаблона нужно выделить ячейку или область ячеек.'"));
		Возврат;
	ИначеЕсли Не ОбластьВходитВОбластьПечати(ПолеТабличногоДокумента.ТекущаяОбласть) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для переноса поля шаблона нужно выделить ячейку или область ячеек, входящих в область печати.'"));
		Возврат;
	Иначе
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
	КонецЕсли;
	
	// Подготовка данных.
	ИмяПоляВШаблоне = Строка(ДоступныеПоляКомпоновкиДанных.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолеКомпоновкиДанных);
	
	// Размещение поля в шаблоне.
	Если ИмяПоляВШаблоне = ИмяПараметраШтрихкод() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяОбласть", ТекущаяОбласть);
		ДополнительныеПараметры.Вставить("ИмяПоляВШаблоне", ИмяПоляВШаблоне);
		Оповещение = Новый ОписаниеОповещения("ВыборДоступногоПоляЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Добавить штрихкод, как картинку?'"), РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяПоляВШаблоне = ИмяПараметраВалютаЦены() Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Знак валюты'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Текст'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяОбласть", ТекущаяОбласть);
		ДополнительныеПараметры.Вставить("ИмяПоляВШаблоне", ИмяПоляВШаблоне);
		Оповещение = Новый ОписаниеОповещения("ВыборДоступногоПоляЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Добавить валюту как...'"), Кнопки);
		
	Иначе
		
		ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоступногоПоляЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяПоляВШаблоне = ДополнительныеПараметры.ИмяПоляВШаблоне;
	ТекущаяОбласть = ДополнительныеПараметры.ТекущаяОбласть;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ИмяПоляВШаблоне = ИмяПараметраШтрихкод() Тогда
			ВставитьРисунокШтрихкода(ТекущаяОбласть.Имя);
		ИначеЕсли ИмяПоляВШаблоне = ИмяПараметраВалютаЦены() Тогда
			ВставитьРисунокЗнакВалюты(ТекущаяОбласть.Имя);
		КонецЕсли;
	Иначе
		ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбластьВходитВОбластьПечати(Область)
	
	Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат ОбластьВключаетВСебяОбласть(ПолеТабличногоДокумента.ОбластьПечати, Область);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбластьВключаетВСебяОбласть(Область, ПроверяемаяОбласть)
	
	Возврат (Область.Лево <= ПроверяемаяОбласть.Лево И ПроверяемаяОбласть.Право <= Область.Право
			И Область.Верх <= ПроверяемаяОбласть.Верх И ПроверяемаяОбласть.Низ <= Область.Низ);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСвойств()
	
	СвойстваЯчеек.Очистить();
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		Если Не ОбластьВходитВОбластьПечати(ВыделеннаяОбласть) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru = 'Оформление'");
		НоваяСтрока.Значение = "Разделитель";
		
		// Шрифт и цвет
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Шрифт";
		НоваяСтрока.Представление = НСтр("ru = 'Шрифт'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Шрифт;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ЦветФона";
		НоваяСтрока.Представление = НСтр("ru = 'Цвет фона'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.ЦветФона;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ЦветТекста";
		НоваяСтрока.Представление = НСтр("ru = 'Цвет текста'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.ЦветТекста;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ОриентацияТекста";
		НоваяСтрока.Представление = НСтр("ru = 'Ориентация текста'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.ОриентацияТекста;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru = 'Границы'");
		НоваяСтрока.Значение = "Разделитель";
		
		// Границы
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСлева";
		НоваяСтрока.Представление = НСтр("ru = 'Граница слева'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСлева);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСверху";
		НоваяСтрока.Представление = НСтр("ru = 'Граница сверху'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСверху);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСправа";
		НоваяСтрока.Представление = НСтр("ru = 'Граница справа'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСправа);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСнизу";
		НоваяСтрока.Представление = НСтр("ru = 'Граница снизу'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСнизу);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru = 'Заполнение'");
		НоваяСтрока.Значение = "Разделитель";
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Формат";
		НоваяСтрока.Представление = НСтр("ru = 'Формат'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Формат;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Заполнение";
		НоваяСтрока.Представление = НСтр("ru = 'Заполнение'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Заполнение;
		
		Если ВыделеннаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "Параметр";
			НоваяСтрока.Представление = НСтр("ru = 'Параметр'");
			НоваяСтрока.Значение = ВыделеннаяОбласть.Параметр;
			Если НоваяСтрока.Значение = Неопределено Тогда
				НоваяСтрока.Значение = "";
			КонецЕсли;
		Иначе
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "Текст";
			НоваяСтрока.Представление = НСтр("ru = 'Текст'");
			НоваяСтрока.Значение = ВыделеннаяОбласть.Текст;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = НСтр("ru = 'Параметры штрихкода'");
		НоваяСтрока.Значение = "Разделитель";
		
		Если Найти(ВыделеннаяОбласть.Имя, "Штрихкод") > 0 Тогда
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "ТипКода";
			НоваяСтрока.Представление = НСтр("ru = 'Тип кода'");
			
			ЭлементСписка = СписокТипыКодов.НайтиПоЗначению(ТипКода);
			НоваяСтрока.Значение = ЭлементСписка.Представление;
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "РазмерШрифта";
			НоваяСтрока.Представление = НСтр("ru = 'Размер шрифта'");
			НоваяСтрока.Значение = РазмерШрифта;
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "ОтображатьТекст";
			НоваяСтрока.Представление = НСтр("ru = 'Отображать текст'");
			НоваяСтрока.Значение = ОтображатьТекст;
			
		КонецЕсли;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Имя";
		НоваяСтрока.Представление = НСтр("ru = 'Имя'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Имя;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Высота";
		НоваяСтрока.Представление = НСтр("ru = 'Высота'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Высота;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Ширина";
		НоваяСтрока.Представление = НСтр("ru = 'Ширина'");
		НоваяСтрока.Значение = ВыделеннаяОбласть.Ширина;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Линия";
		НоваяСтрока.Представление = НСтр("ru = 'Линия'");
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.Линия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуВыравниванияПоВертикали()
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		Если ОбластьВходитВОбластьПечати(ВыделеннаяОбласть) Тогда
			Положение = ВыделеннаяОбласть.ВертикальноеПоложение;
		Иначе
			Положение = Неопределено;
		КонецЕсли;
		
		ПоложениеВерх = (Положение = ВертикальноеПоложение.Верх);
		ПоложениеЦентр = (Положение = ВертикальноеПоложение.Центр);
		ПоложениеНих = (Положение = ВертикальноеПоложение.Низ);
		
		Элементы.ВыравниваниеВертикальноеПоВерхнемуКраю.Пометка = ПоложениеВерх;
		Элементы.ВыравниваниеВертикальноеПоЦентру.Пометка = ПоложениеЦентр;
		Элементы.ВыравниваниеВертикальноеПоНижнемуКраю.Пометка = ПоложениеНих;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеЛинии(Линия)
	
	Если Линия = Неопределено Тогда
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
		Толщина = 0;
	Иначе
		ТипЛинии = Линия.ТипЛинии;
		Толщина = Линия.Толщина;
	КонецЕсли;
	
	Представление = Строка(ТипЛинии);
	Если Толщина <> 0 Тогда
		Представление = Представление + ", " + Строка(Толщина);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные)
	
	Линия = ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства];
	Если Линия = Неопределено Тогда
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
		Толщина = 0;
	Иначе
		ТипЛинии = Линия.ТипЛинии;
		Толщина = Линия.Толщина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипЛинии", ТипЛинии);
	ПараметрыФормы.Вставить("Толщина", Толщина);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьЛиниюЗавершение", ЭтотОбъект, Новый Структура("ВыделеннаяОбласть, ТекущиеДанные", ВыделеннаяОбласть, ТекущиеДанные));
	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыборЛинии", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

// Устанавливает линию заданного типа и толщины выделенной области
// Продолжение процедуры НастроитьЛинию
//
// Параметры:
//  ОписаниеЛинии           - Структура - содержит параметры линии
//    Элементы структуры:
//      ТипЛинии - ТипЛинииЯчейкиТабличногоДокумента,
//                 ТипЛинииРисункаТабличногоДокумента - содержит тип линии
//      Толщина  - Число                             - содержит толщину линии (в логических единицах)
//  ДополнительныеПараметры - Структура - параметры отображения пользователю
//    Элементы структуры:
//      ВыделеннаяОбласть - ОбластьЯчеекТабличногоДокумента
//                          РисунокТабличногоДокумента  - область настройки линии
//      ТекущиеДанные     - ДанныеФормыЭлементКоллекции - отображаемое пользователю описание типа и толщины линии
//
&НаКлиенте
Процедура НастроитьЛиниюЗавершение(ОписаниеЛинии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ОписаниеЛинии) = Тип("Структура") Тогда
		
		ВыделеннаяОбласть = ДополнительныеПараметры.ВыделеннаяОбласть;
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = Новый Линия(ОписаниеЛинии.ТипЛинии, ОписаниеЛинии.Толщина);
		ТекущиеДанные.Значение = ПредставлениеЛинии(ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства]);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает форматную строку выделенной области
// Продолжение процедуры СвойстваЯчеекЗначениеНачалоВыбора
//
// Параметры:
//  Текст                   - Строка, Неопределено - содержит форматную строку в виде текста
//  ДополнительныеПараметры - Структура            - параметры отображения пользователю
//    Элементы структуры:
//      ВыделеннаяОбласть - ОбластьЯчеекТабличногоДокумента
//                          РисунокТабличногоДокумента  - область настройки форматной строки
//      ТекущиеДанные     - ДанныеФормыЭлементКоллекции - отображаемое пользователю описание форматной строки
//
&НаКлиенте
Процедура НастроитьФорматЗавершение(Текст, ДополнительныеПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		
		ВыделеннаяОбласть = ДополнительныеПараметры.ВыделеннаяОбласть;
		ТекущиеДанные     = ДополнительныеПараметры.ТекущиеДанные;
		
		ТекущиеДанные.Значение   = Текст;
		ВыделеннаяОбласть.Формат = Текст;
		Модифицированность       = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает тип заполнения области табличного документа
// Продолжение процедуры СвойстваЯчеекЗначениеНачалоВыбора
//
// Параметры:
//  ЭлементСписка           - ЭлементСпискаЗначений - тип заполнения области табличного документа
//  ДополнительныеПараметры - Структура             - параметры отображения пользователю
//    Элементы структуры:
//      ВыделеннаяОбласть - ОбластьЯчеекТабличногоДокумента
//                          РисунокТабличногоДокумента  - область настройки типа заполнения области табличного документа
//      ТекущиеДанные     - ДанныеФормыЭлементКоллекции - отображаемое пользователю описание
//                                                        типа заполнения области табличного документа
//
&НаКлиенте
Процедура НастроитьЗаполнениеЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка <> Неопределено Тогда
		
		ВыделеннаяОбласть = ДополнительныеПараметры.ВыделеннаяОбласть;
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ТекущиеДанные.Значение = Строка(ЭлементСписка.Значение);
		ВыделеннаяОбласть.Заполнение = ЭлементСписка.Значение;
		Модифицированность = Истина;
		ЗаполнитьТаблицуСвойств();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПриИзмененииСервер()
	
	ОбновитьЗаголовок(ЭтотОбъект);
	
	ЭтоЭтикетка = Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров");
	Элементы.ОписаниеРазмещенияДляЦенников.Видимость = Не ЭтоЭтикетка;
	
	ЗаполнитьДоступныеПоля();
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьМаксимальноеКоличествоНаСтранице()
	
	МаксимальноеКоличество = МаксимальноеКоличествоНаСтранице();
	
	КоличествоПоВертикали   = МаксимальноеКоличество.ПоВертикали;
	КоличествоПоГоризонтали = МаксимальноеКоличество.ПоГоризонтали;
	
	ОписаниеРазмещенияДляЦенников = МаксимальноеКоличество.Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазмещение()
	
	ТекущийРазмер = ТекущийРазмерСтраницы(ЭтотОбъект);
	
	Если ТекущийРазмер <> РазмерСтраницы Тогда
		РазмерСтраницы = ТекущийРазмер;
		РассчитатьМаксимальноеКоличествоНаСтранице();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРазмерСтраницы(Форма)
	
	ТекущийРазмер = 
	  "ПолеСверху:" + Форма.ПолеТабличногоДокумента.ПолеСверху
	+ "ПолеСнизу:" + Форма.ПолеТабличногоДокумента.ПолеСнизу
	+ "ПолеСлева:" + Форма.ПолеТабличногоДокумента.ПолеСлева
	+ "ПолеСправа:" + Форма.ПолеТабличногоДокумента.ПолеСправа
	+ "Размер:" + РазмерСтраницы(Форма.ПолеТабличногоДокумента);
	
	Возврат ТекущийРазмер;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазмерСтраницы(ПолеТабличногоДокумента)
	
	ВысотаСтраницы = ПолеТабличногоДокумента.ВысотаСтраницы;
	ШиринаСтраницы = ПолеТабличногоДокумента.ШиринаСтраницы;
	
	Наименование = Строка(ШиринаСтраницы)+"х"+Строка(ВысотаСтраницы);
	
	Если ШиринаСтраницы = 210 И ВысотаСтраницы = 297 Тогда
		Наименование = "A4";
	ИначеЕсли ШиринаСтраницы = 148 И ВысотаСтраницы = 210 Тогда
		Наименование = "A5";
	ИначеЕсли ШиринаСтраницы = 105 И ВысотаСтраницы = 148 Тогда
		Наименование = "A6";
	ИначеЕсли ШиринаСтраницы = 74 И ВысотаСтраницы = 105 Тогда
		Наименование = "A7";
	ИначеЕсли ШиринаСтраницы = 52 И ВысотаСтраницы = 74 Тогда
		Наименование = "A8";
	ИначеЕсли ШиринаСтраницы = 37 И ВысотаСтраницы = 52 Тогда
		Наименование = "A9";
	ИначеЕсли ШиринаСтраницы = 26 И ВысотаСтраницы = 37 Тогда
		Наименование = "A10";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовок(Форма)
	
	Наименование = Форма.Объект.Наименование;
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Наименование = НСтр("ru = '(Создание)'");
	КонецЕсли;
	
	Форма.Автозаголовок = Ложь;
	Если Форма.Объект.Назначение      = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров") Тогда
		Форма.Заголовок = НСтр("ru = 'Шаблон этикетки:'") + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров") Тогда
		Форма.Заголовок = НСтр("ru = 'Шаблон ценника:'") + " "+ Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.СтеллажнаяКарточкаДляТовара") Тогда
		Форма.Заголовок = НСтр("ru = 'Шаблон стеллажной карточки:'") + " " + Наименование;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьШаблонПоУмолчанию(ИмяШаблона)
	
	ПолеТабличногоДокумента = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет(ИмяШаблона);
	
	ТипКода = 1; // EAN13
	ОтображатьТекст = Истина;
	РазмерШрифта = 12;
	
	ОпределитьПараметрыШаблона();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазмер(ШиринаОбластиВМиллиметрах, ВысотаОбластиВМиллиметрах, РазмерЯчейкиВМиллиметрах)
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	ПолеТабличногоДокумента.Очистить();
	
	КоличествоЯчеекПоШирине = Цел(ШиринаОбластиВМиллиметрах / РазмерЯчейкиВМиллиметрах);
	КоличествоЯчеекПоВысоте = Цел(ВысотаОбластиВМиллиметрах / РазмерЯчейкиВМиллиметрах);
	
	ШиринаДокумента = 1 + КоличествоЯчеекПоШирине;
	ВысотаДокумента = 1 + КоличествоЯчеекПоВысоте;
	
	Для НомерКолонки = 2 По ШиринаДокумента Цикл
		// Минимальный шаг установки ширины = 0.125
		// 1 ячейка при ширине 0.5 занимает 0,97 мм
		ИмяОбласти = "C" + НомерКолонки;
		ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = 0.5 * РазмерЯчейкиВМиллиметрах;
	КонецЦикла;
	
	Для НомерСтроки = 2 По ВысотаДокумента Цикл
		// Минимальный шаг установки высоты = 0.25
		// 1 ячейка при ширине 2.75 занимает 0,97 мм
		ИмяОбласти = "R" + НомерСтроки;
		ПолеТабличногоДокумента.Область(ИмяОбласти).АвтоВысотаСтроки = Ложь;
		ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = 2.75 * РазмерЯчейкиВМиллиметрах;
	КонецЦикла;
	
	ИмяОбластиПечати = "R2C2"+":"+"R"+Формат(ВысотаДокумента,"ЧГ=0")+"C"+Формат(ШиринаДокумента,"ЧГ=0");
	ПолеТабличногоДокумента.Область("R1C1:"+"R"+200+"C"+200).ЦветФона = WebЦвета.Серый;
	ПолеТабличногоДокумента.Область(ИмяОбластиПечати).ЦветФона = Новый Цвет;
	УстановитьОбластьПечатиНаСервере(ИмяОбластиПечати);
	
	ИндексКартинки = ВставитьРисунокШтрихкода(ИмяОбластиПечати);
	ФактическаяШиринаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина;
	ФактическаяВысотаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота;
	
	// Выполним подгонку для более точного соответствия реальным значениям.
	НедостающаяШиринаВМиллиметрах = ШиринаОбластиВМиллиметрах - ФактическаяШиринаВМиллиметрах;
	КоличествоЯчеекДляИзмененияШирины = Цел(НедостающаяШиринаВМиллиметрах / ((ФактическаяШиринаВМиллиметрах/ШиринаОбластиВМиллиметрах) / (0.5 / 0.125)));
	
	Дельта = 0.125;
	Коэффициент = 1;
	КоличествоИзмененныхЯчеек = 0;
	Пока КоличествоЯчеекДляИзмененияШирины > 0 Цикл // -1 для того что бы не превысить реальные требуемые значения
		
		НомерКолонки = ГенераторСлучайныхЧисел.СлучайноеЧисло(2, ШиринаДокумента);
		ИмяОбласти = "C" + НомерКолонки;
		Если ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = 0.5 * РазмерЯчейкиВМиллиметрах + Дельта * (Коэффициент - 1) Тогда
			ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = 0.5 * РазмерЯчейкиВМиллиметрах + Дельта * Коэффициент;
			КоличествоЯчеекДляИзмененияШирины = КоличествоЯчеекДляИзмененияШирины - 1;
			
			КоличествоИзмененныхЯчеек = КоличествоИзмененныхЯчеек + 1;
		КонецЕсли;
		
		Если КоличествоИзмененныхЯчеек = КоличествоЯчеекПоШирине Тогда
			КоличествоИзмененныхЯчеек = 0;
			Коэффициент = Коэффициент + 1;
		КонецЕсли;
		
		Если КоличествоЯчеекДляИзмененияШирины = 0 Тогда
			ФактическаяШиринаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина;
			НедостающаяШиринаВМиллиметрах = ШиринаОбластиВМиллиметрах - ФактическаяШиринаВМиллиметрах;
			КоличествоЯчеекДляИзмененияШирины = Цел(НедостающаяШиринаВМиллиметрах / ((ФактическаяШиринаВМиллиметрах/ШиринаОбластиВМиллиметрах) / (0.5 / 0.125)));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполним подгонку для более точного соответствия реальным значениям.
	НедостающаяВысотаВМиллиметрах = ВысотаОбластиВМиллиметрах - ФактическаяВысотаВМиллиметрах;
	КоличествоЯчеекДляИзмененияВысоты = Цел(НедостающаяВысотаВМиллиметрах / ((ФактическаяВысотаВМиллиметрах/ВысотаОбластиВМиллиметрах) / (2.75 / 0.25)));
	
	Дельта = 0.25;
	Коэффициент = 1;
	КоличествоИзмененныхЯчеек = 0;
	Пока КоличествоЯчеекДляИзмененияВысоты > 0 Цикл // -1 для того что бы не превысить реальные требуемые значения
		
		НомерСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(2, ВысотаДокумента);
		ИмяОбласти = "R" + НомерСтроки;
		Если ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = 2.75 * РазмерЯчейкиВМиллиметрах + Дельта * (Коэффициент - 1) Тогда
			ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = 2.75 * РазмерЯчейкиВМиллиметрах + Дельта * Коэффициент;
			КоличествоЯчеекДляИзмененияВысоты = КоличествоЯчеекДляИзмененияВысоты - 1;
			
			КоличествоИзмененныхЯчеек = КоличествоИзмененныхЯчеек + 1;
		КонецЕсли;
		
		Если КоличествоИзмененныхЯчеек = КоличествоЯчеекПоВысоте Тогда
			КоличествоИзмененныхЯчеек = 0;
			Коэффициент = Коэффициент + 1;
		КонецЕсли;
		
		Если КоличествоЯчеекДляИзмененияВысоты = 0 Тогда
			ФактическаяВысотаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота;
			НедостающаяВысотаВМиллиметрах = ВысотаОбластиВМиллиметрах - ФактическаяВысотаВМиллиметрах;
			КоличествоЯчеекДляИзмененияВысоты = Цел(НедостающаяВысотаВМиллиметрах / ((ФактическаяВысотаВМиллиметрах/ВысотаОбластиВМиллиметрах) / (2.75 / 0.25)));
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеТабличногоДокумента.Рисунки.Удалить(ПолеТабличногоДокумента.Рисунки[ИндексКартинки]);
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
КонецПроцедуры

&НаСервере
Функция ВставитьРисунокШтрихкода(ИмяТекущейОбласти)
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	РисунокШтрихкода.Расположить(ПолеТабличногоДокумента.Область(ИмяТекущейОбласти));
	РисунокШтрихкода.Имя = ИмяПараметраШтрихкод() + СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	
	УстановитьКартинкуШтрихкода(ПолеТабличногоДокумента.Рисунки[Индекс]);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Функция ЗаменитьРисунокШтрихкода(ИмяРисунка)
	
	РисунокШтрихкодаИсточник = Неопределено;
	Для Каждого Рисунок Из ПолеТабличногоДокумента.Рисунки Цикл
		Если Рисунок.Имя <> ИмяРисунка Тогда
			Продолжить;
		КонецЕсли;
		РисунокШтрихкодаИсточник = Рисунок;
		Прервать;
	КонецЦикла;
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	РисунокШтрихкода.Верх   = РисунокШтрихкодаИсточник.Верх;
	РисунокШтрихкода.Лево   = РисунокШтрихкодаИсточник.Лево;
	РисунокШтрихкода.Высота = РисунокШтрихкодаИсточник.Высота;
	РисунокШтрихкода.Ширина = РисунокШтрихкодаИсточник.Ширина;
	РисунокШтрихкода.Имя    = РисунокШтрихкодаИсточник.Имя;
	
	ПолеТабличногоДокумента.Рисунки.Удалить(РисунокШтрихкодаИсточник);
	
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	УстановитьКартинкуШтрихкода(ПолеТабличногоДокумента.Рисунки[Индекс]);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Процедура УстановитьКартинкуШтрихкода(РисунокШтрихкода)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПримерШтрихкода = Неопределено;
	Коды = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьОбразцыШтрихкодов();
	Для Каждого СтрокаТЧ Из Коды Цикл
		Если СтрокаТЧ.ТипКода = ТипКода Тогда
			ПримерШтрихкода = СтрокаТЧ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина          = Окр(РисунокШтрихкода.Ширина / КоличествоМиллиметровВПикселе);
	ПараметрыШтрихкода.Высота          = Окр(РисунокШтрихкода.Высота / КоличествоМиллиметровВПикселе);
	ПараметрыШтрихкода.Штрихкод        = СокрЛП(ПримерШтрихкода.Пример);
	ПараметрыШтрихкода.ТипКода         = ПримерШтрихкода.ТипКода;
	ПараметрыШтрихкода.ОтображатьТекст = ОтображатьТекст;
	ПараметрыШтрихкода.РазмерШрифта    = РазмерШрифта;
	
	РисунокШтрихкода.Картинка = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода).Картинка;
	
КонецПроцедуры

&НаСервере
Функция ВставитьРисунокЗнакВалюты(ИмяТекущейОбласти)
	
	Рисунок = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(Рисунок);
	Рисунок.Расположить(ПолеТабличногоДокумента.Область(ИмяТекущейОбласти));
	Рисунок.Имя = "ЗнакВалюты" + СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	
	Рисунок.ЦветФона = Новый Цвет;
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты643"), Истина);
	
	Возврат Индекс;
	
КонецФункции


&НаСервере
Процедура ЗагрузитьШаблон()
	
	СтруктураШаблона = СтруктураШаблона();
	Если СтруктураШаблона <> Неопределено Тогда
		СтруктураШаблона.Свойство("РедакторТабличныйДокумент", ПолеТабличногоДокумента);
		СтруктураШаблона.Свойство("КоличествоПоВертикали"    , КоличествоПоВертикали);
		СтруктураШаблона.Свойство("КоличествоПоГоризонтали"  , КоличествоПоГоризонтали);
		СтруктураШаблона.Свойство("ТипКода"                  , ТипКода);
		СтруктураШаблона.Свойство("РазмерШрифта"             , РазмерШрифта);
		СтруктураШаблона.Свойство("ОтображатьТекст"          , ОтображатьТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураШаблона()
	
	СтруктураШаблона = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураШаблона = Объект.Ссылка.Шаблон.Получить();
	Иначе
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		Если ЗначениеКопирования <> Неопределено Тогда
			СтруктураШаблона = ЗначениеКопирования.Шаблон.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШаблона;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеПоля()
	
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.СтеллажнаяКарточкаДляТовара Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаСтеллажныеКарточки");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблона");
	КонецЕсли;
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище));
	
	ИменаПолей = Новый Массив;
	
	ИменаПолей.Добавить("Штрихкод");
	
	ИменаПолей.Добавить("ВидЦены");
	ИменаПолей.Добавить("ВидЦены.ВалютаЦены");
	ИменаПолей.Добавить("ВидЦены.Наименование");
	ИменаПолей.Добавить("ВидЦены.ЦенаВключаетНДС");
	ИменаПолей.Добавить("Цена");
	ИменаПолей.Добавить("ДатаПоследнегоИзмененияЦены");
	
	ИменаПолей.Добавить("Номенклатура.Артикул");
	ИменаПолей.Добавить("Номенклатура.Вес");
	ИменаПолей.Добавить("Номенклатура.ВестиУчетПоГТД");
	ИменаПолей.Добавить("Номенклатура.ВидНоменклатуры");
	ИменаПолей.Добавить("Номенклатура.Родитель");
	ИменаПолей.Добавить("Номенклатура.ЕдиницаИзмерения");
	ИменаПолей.Добавить("Номенклатура.Упаковка");
	ИменаПолей.Добавить("Номенклатура.ОсновнаяЕдиницаУчета");
	ИменаПолей.Добавить("Номенклатура.Код");
	ИменаПолей.Добавить("Номенклатура.КодДляПоиска");
	ИменаПолей.Добавить("Номенклатура.Наименование");
	ИменаПолей.Добавить("Номенклатура.НаименованиеПолное");
	ИменаПолей.Добавить("Номенклатура.Объем");
	ИменаПолей.Добавить("Номенклатура.Производитель");
	ИменаПолей.Добавить("Номенклатура.СтавкаНДС");
	ИменаПолей.Добавить("Номенклатура.Описание");
	ИменаПолей.Добавить("Номенклатура.ТипНоменклатуры");
	ИменаПолей.Добавить("Номенклатура.ТипНоменклатурыРасширенный");
	ИменаПолей.Добавить("Номенклатура.СрокГодности");
	ИменаПолей.Добавить("Номенклатура.ЕдиницаИзмеренияСрокаГодности");
	ИменаПолей.Добавить("Номенклатура.ЭлементКАТ.*");
	ИменаПолей.Добавить("Номенклатура,Свойства");
	
	ИменаПолей.Добавить("СерияНоменклатуры.Наименование");
	ИменаПолей.Добавить("СерияНоменклатуры.Номер");
	ИменаПолей.Добавить("СерияНоменклатуры.ГоденДо");
	ИменаПолей.Добавить("СерияНоменклатуры,Свойства");
	
	ИменаПолей.Добавить("Партия.Наименование");
	ИменаПолей.Добавить("Партия.Поставщик");
	ИменаПолей.Добавить("Партия.ДокументОприходования");
	
	ИменаПолей.Добавить("Организация.*");
	
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.СтеллажнаяКарточкаДляТовара Тогда
		ИменаПолей.Добавить("Склад.*");
		ИменаПолей.Добавить("МестоХранения.*");
		ИменаПолей.Добавить("ИсточникФинансирования.*");
		ИменаПолей.Добавить("Поставщик.*");
		ИменаПолей.Добавить("ДатаДокумента");
	КонецЕсли;
	
	ИменаПолей.Добавить("ТекущееВремя");
	ИменаПолей.Добавить("ТекущийПользователь");
	ИменаПолей.Добавить("Упаковка");
	
	Дерево = РеквизитФормыВЗначение("ДоступныеПоляКомпоновкиДанных");
	Дерево.Строки.Очистить();
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ДобавитьПоле(КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы, ИмяПоля, Дерево);
	КонецЦикла;
	Дерево.Строки.Сортировать("Описание", Истина);
	ЗначениеВРеквизитФормы(Дерево, "ДоступныеПоляКомпоновкиДанных");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоле(Коллекция, СтруктураПоля, Дерево)
	
	Результат = СтрРазделить(СтруктураПоля, ",");
	ИмяПоля = Результат[0];
	Иерархия = СтрРазделить(ИмяПоля, ".");
	
	Если Результат.Количество() = 2 Тогда
		Действия = СтрРазделить(Результат[1], ";");
	Иначе
		Действия = Новый Массив;
	КонецЕсли;
	
	СлужебныеПоля = Новый Массив;
	СлужебныеПоля.Добавить("ВерсияДанных");
	СлужебныеПоля.Добавить("DataVersion");
	СлужебныеПоля.Добавить("Предопределенный");
	СлужебныеПоля.Добавить("Predefined");
	СлужебныеПоля.Добавить("ИмяПредопределенныхДанных");
	СлужебныеПоля.Добавить("PredefinedDataName");
	СлужебныеПоля.Добавить("ПометкаУдаления");
	СлужебныеПоля.Добавить("DeletionMark");
	
	КоллекцияСтрокДерева = Дерево.Строки;
	КоллекцияПолейКомпоновки = Коллекция;
	НайденныйЭлементПолеКомпоновки = Неопределено;
	НайденныйЭлементДерева = Неопределено;
	ИмяЭлемента = "";
	ИмяЭлементаОписание = "";
	ИмяРодителя = "";
	ИмяРодителяОписание = "";
	Для Каждого ЭлементИерархии Из Иерархия Цикл
		
		ИмяРодителя = ?(ЗначениеЗаполнено(ИмяЭлемента), ИмяЭлемента + ".", "");
		Если ЭлементИерархии = "*" Тогда
			
			Для Каждого Элемент Из КоллекцияПолейКомпоновки Цикл
				
				ИмяЭлемента = Сред(Строка(Элемент.Поле), СтрДлина(ИмяРодителя) + 1);
				Если Элемент.Папка Или СлужебныеПоля.Найти(ИмяЭлемента) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяРодителяОписание = ?(ЗначениеЗаполнено(ИмяЭлементаОписание), ИмяЭлементаОписание + ".", "");
				
				НайденныйЭлементДерева = КоллекцияСтрокДерева.Найти(ИмяЭлемента, "ИмяПоля");
				Если НайденныйЭлементДерева = Неопределено Тогда
					
					НайденныйЭлементДерева = КоллекцияСтрокДерева.Добавить();
					Если КоллекцияСтрокДерева.Родитель <> Неопределено Тогда
						КоллекцияСтрокДерева.Родитель.ИндексКартинки = 0;
					КонецЕсли;
					
					НайденныйЭлементДерева.ИндексКартинки = 7;
					НайденныйЭлементДерева.ИмяПоля = ИмяЭлемента;
					НайденныйЭлементДерева.Описание = СтрЗаменить(Элемент.Заголовок, ИмяРодителяОписание, "");
					НайденныйЭлементДерева.ПолеКомпоновкиДанных = Элемент.Поле;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат;
			
		Иначе
			
			ИмяЭлемента = ИмяРодителя + ЭлементИерархии;
			
			НайденныйЭлементПолеКомпоновки = КоллекцияПолейКомпоновки.Найти(ИмяЭлемента);
			Если НайденныйЭлементПолеКомпоновки = Неопределено Тогда
				Возврат;
			КонецЕсли;
			КоллекцияПолейКомпоновки = НайденныйЭлементПолеКомпоновки.Элементы;
			
			ИмяРодителяОписание = ?(ЗначениеЗаполнено(ИмяЭлементаОписание), ИмяЭлементаОписание + ".", "");
			ИмяЭлементаОписание = ИмяРодителяОписание + НайденныйЭлементПолеКомпоновки.Заголовок;
			
			НайденныйЭлементДерева = КоллекцияСтрокДерева.Найти(ЭлементИерархии, "ИмяПоля");
			Если НайденныйЭлементДерева = Неопределено Тогда
				
				НайденныйЭлементДерева = КоллекцияСтрокДерева.Добавить();
				Если КоллекцияСтрокДерева.Родитель <> Неопределено Тогда
					КоллекцияСтрокДерева.Родитель.ИндексКартинки = 0;
				КонецЕсли;
				
				НайденныйЭлементДерева.ИндексКартинки = 7;
				НайденныйЭлементДерева.ИмяПоля = ЭлементИерархии;
				НайденныйЭлементДерева.Описание = СтрЗаменить(НайденныйЭлементПолеКомпоновки.Заголовок, ИмяРодителяОписание, "");
				НайденныйЭлементДерева.ПолеКомпоновкиДанных = НайденныйЭлементПолеКомпоновки.Поле;
				
			КонецЕсли;
			КоллекцияСтрокДерева = НайденныйЭлементДерева.Строки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Действия.Найти("Свойства") <> Неопределено Тогда
		
		НаборыРеквизитовИСведений = Новый Массив;
		
		Если ЗначениеЗаполнено(Объект.ДляЧего) Тогда
			
			Если НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Номенклатура") Тогда
				
				НаборыРеквизитовИСведений.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
				Если ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойств) Тогда
					НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойств);
				КонецЕсли;
				Если Объект.ДляЧего.ЭтоЛекарственноеСредство Тогда
					НаборыРеквизитовИСведений.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_ЛекарственныеСредства"));
				Иначе
					НаборыРеквизитовИСведений.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Прочая"));
				КонецЕсли;
				
			ИначеЕсли НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("СерияНоменклатуры") Тогда
				
				НаборыРеквизитовИСведений.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_СерииНоменклатуры_Общие"));
				Если ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствСерий) Тогда
					НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствСерий);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Для Каждого Тип Из НайденныйЭлементПолеКомпоновки.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				
				Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
					Если ЗначениеЗаполнено(Характеристика.ЗначениеОтбораВидов) Тогда
						НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени(Характеристика.ЗначениеОтбораВидов);
						Если НаборСвойств <> Неопределено И НаборыРеквизитовИСведений.Найти(НаборСвойств) = Неопределено Тогда
							НаборыРеквизитовИСведений.Добавить(НаборСвойств);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла
				
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого НаборСсылка Из НаборыРеквизитовИСведений Цикл
			
			ТабличныеЧасти = НаборСсылка.Метаданные().ТабличныеЧасти;
			Если ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено
			 Или ТабличныеЧасти.Найти("ДополнительныеСведения") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Набор = НаборСсылка.ПолучитьОбъект();
			Для Каждого ДополнительныйРеквизит Из Набор.ДополнительныеРеквизиты Цикл
				НоваяСтрока = НайденныйЭлементДерева.Строки.Добавить();
				НоваяСтрока.ИндексКартинки = 1;
				НоваяСтрока.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля + ".[" + ДополнительныйРеквизит.Свойство+"]");
				НоваяСтрока.Описание = ДополнительныйРеквизит.Свойство.Наименование;
			КонецЦикла;
			Для Каждого ДополнительноеСведение Из Набор.ДополнительныеСведения Цикл
				НоваяСтрока = НайденныйЭлементДерева.Строки.Добавить();
				НоваяСтрока.ИндексКартинки = 2;
				НоваяСтрока.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля + ".[" + ДополнительноеСведение.Свойство+"]");
				НоваяСтрока.Описание = ДополнительноеСведение.Свойство.Наименование;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыШаблона()
	
	ОбластьПечати = ПолеТабличногоДокумента.ОбластьПечати;
	
	ИндексКартинки = ВставитьРисунокШтрихкода(ОбластьПечати.Имя);
	Объект.Ширина = Окр(ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина);
	Объект.Высота = Окр(ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота);
	Объект.РазмерЯчейки = Окр(Объект.Высота / (ОбластьПечати.Низ - ОбластьПечати.Верх + 1));
	
	ПолеТабличногоДокумента.Рисунки.Удалить(ПолеТабличногоДокумента.Рисунки[ИндексКартинки]);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	НазначитьШаблон();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьШаблон()
	
	ПараметрыНазначенияШаблона = Новый Структура;
	ПараметрыНазначенияШаблона.Вставить("Назначение", Объект.Назначение);
	ПараметрыНазначенияШаблона.Вставить("ДляЧего", Объект.ДляЧего);
	ПараметрыНазначенияШаблона.Вставить("Шаблон", Объект.Ссылка);
	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаНазначенияШаблонов", ПараметрыНазначенияШаблона, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Печать образца

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаСтеллажнойКарточкиТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаСтеллажнойКарточкиТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати)
	
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", ПодготовитьСтруктуруМакетаШаблона());
	Возврат ПараметрыПечати;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
