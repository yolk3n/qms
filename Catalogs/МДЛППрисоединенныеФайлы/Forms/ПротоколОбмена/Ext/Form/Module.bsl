
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Документ) Тогда
		ВызватьИсключение НСтр("ru = 'Протокол обмена может быть открыт только в контексте документа.'");
	КонецЕсли;
	
	Документ = Параметры.Документ;
	
	Действия = Новый Структура;
	Действия.Вставить("Передать", Новый Массив);
	Действия.Передать.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Действия.Вставить("Подтвердить", Новый Массив);
	Действия.Подтвердить.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
	Действия.Вставить("Отменить", Новый Массив);
	Действия.Отменить.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтменитеПередачуДанных);
	Действия.Отменить.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеОперацию);
	
	ЗаполнитьДеревоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И (Параметр.Ссылка = Документ Или Параметр.Свойство("Основание") И Параметр.Основание = Документ) Тогда
		
		ЗаполнитьДеревоФайлов();
		РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		
		ЗаполнитьДеревоФайлов();
		РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			"Справочник.МДЛППрисоединенныеФайлы.Форма.ФормаЗапросОтвет",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДанныеСтроки.ПолучитьЭлементы().Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ДанныеСтроки.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноПередача = Ложь;
	Для Каждого ДальнейшееДействие Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Действия.Передать.Найти(ДальнейшееДействие.Значение) <> Неопределено Тогда
			ДоступноПередача = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КомандыПередать = Новый Массив;
	КомандыПередать.Добавить(Элементы.ДеревоФайловПередатьДанные);
	КомандыПередать.Добавить(Элементы.ДеревоФайловКонтекстноеМенюПередатьДанные);
	
	Для Каждого Команда Из КомандыПередать Цикл
		Команда.Доступность = ДоступноПередача;
	КонецЦикла;
	
	ДоступноПодтверждение = Ложь;
	Для Каждого ДальнейшееДействие Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Действия.Подтвердить.Найти(ДальнейшееДействие.Значение) <> Неопределено Тогда
			ДоступноПодтверждение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КомандыПодтвердить = Новый Массив;
	КомандыПодтвердить.Добавить(Элементы.ДеревоФайловПодтвердитьПолучение);
	КомандыПодтвердить.Добавить(Элементы.ДеревоФайловКонтекстноеМенюПодтвердитьПолучение);
	Для Каждого Команда Из КомандыПодтвердить Цикл
		Команда.Доступность = ДоступноПодтверждение;
	КонецЦикла;
	
	ДоступноОтмена = Ложь;
	Для Каждого ДальнейшееДействие Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Действия.Отменить.Найти(ДальнейшееДействие.Значение) <> Неопределено Тогда
			ДоступноОтмена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КомандыОтменить = Новый Массив;
	КомандыОтменить.Добавить(Элементы.ДеревоФайловОтменитьОперацию);
	КомандыОтменить.Добавить(Элементы.ДеревоФайловКонтекстноеМенюОтменитьОперацию);
	Для Каждого Команда Из КомандыОтменить Цикл
		Команда.Доступность = ДоступноОтмена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияМДЛПКлиент.ВыполнитьКомандуГиперссылки(Документ, НавигационнаяСсылкаФорматированнойСтроки, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДеревоФайлов();
	
	РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	СтрокиДерева = ДеревоФайлов.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет данных для обработки'"));
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = СтрокиДерева[0];
	
	ПараметрыВыполненияОбмена = ИнтеграцияМДЛПКлиентСервер.ПараметрыВыполненияОбмена();
	ПараметрыВыполненияОбмена.СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	
	ИнтеграцияМДЛПКлиент.ВыполнитьОбмен(СтрокаДерева.Организация, СтрокаДерева.МестоДеятельности, ПараметрыВыполненияОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщенияXML(Команда)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			"Справочник.МДЛППрисоединенныеФайлы.Форма.ФормаЗапросОтвет",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'По данной операции еще не создано сообщений'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанные(Команда)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Действия.Передать.Найти(ДанныеСтроки.ДальнейшееДействие) = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛПКлиент.ПодготовитьСообщениеКПередаче(
		ДанныеСтроки.Документ,
		ДанныеСтроки.ДальнейшееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПолучение(Команда)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Действия.Подтвердить.Найти(ДанныеСтроки.ДальнейшееДействие) = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛПКлиент.ПодготовитьСообщениеКПередаче(
		ДанныеСтроки.Документ,
		ДанныеСтроки.ДальнейшееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперацию(Команда)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтзовитеОперацию = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеОперацию");
	Если ДанныеСтроки.ДальнейшиеДействия.НайтиПоЗначению(ОтзовитеОперацию) <> Неопределено Тогда
		ПараметрыОтзыва = Новый Структура("Сообщение", ДанныеСтроки.Файл);
		Оповестить = Новый ОписаниеОповещения("ОтозватьОперациюПослеУказанияПричины", ЭтотОбъект, ПараметрыОтзыва);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Укажите причину отмены операции ""%1""'"),
			ДанныеСтроки.Операция);
		ПоказатьВводСтроки(Оповестить, "", Подсказка, 500, Ложь);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьОперациюПослеУказанияПричины(ПричинаОтзыва, ПараметрыОтзыва) Экспорт
	
	Если ПричинаОтзыва = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛПКлиент.ПодготовитьСообщениеКПередаче(
		ПараметрыОтзыва.Сообщение,
		ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеОперацию"),
		ПричинаОтзыва);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ДеревоЗачеркнутый
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЗачеркнутый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
#КонецОбласти

#Область ДеревоСерый
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеСерый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
#КонецОбласти

#Область ДеревоЖирный
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЖирный";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
#КонецОбласти

#Область ДеревоОтказ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеОшибка";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
#КонецОбласти
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ДеревоФайлов.Дата", "ДеревоФайловДата");
	
	// Представление даты "<не передано>"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловДата.Имя);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты ""<не передано>""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор,
		"ДеревоФайлов.Дата", '00010101');
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор,
		"ДеревоФайлов.ТипСообщения", Перечисления.ТипыСообщенийМДЛП.Исходящее);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не передано>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	// Представление даты "<не получено>"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловДата.Имя);
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты ""<не получено>""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор,
		"ДеревоФайлов.Дата", '00010101');
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор,
		"ДеревоФайлов.ТипСообщения", Перечисления.ТипыСообщенийМДЛП.Входящее);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не получено>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОперации(СтрокаПоследовательности, ДокументСсылка, ВыборкаПоФайлам = Неопределено)
	
	Если СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Исходящее Тогда
		
		Если ВыборкаПоФайлам = Неопределено Или ВыборкаПоФайлам.Ссылка.Пустая() Тогда
			Возврат Строка(СтрокаПоследовательности.Операция);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, Версия %2'"), Строка(СтрокаПоследовательности.Операция), ВыборкаПоФайлам.Версия);
		КонецЕсли;
		
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Входящее Тогда
		
		Возврат Строка(СтрокаПоследовательности.Операция);
		
	Иначе
		
		Возврат Строка(СтрокаПоследовательности.Операция);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТаблицаДокументы(Документ = Неопределено)
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка"             , Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип);
	ТаблицаДокументы.Колонки.Добавить("Организация"        , Новый ОписаниеТипов("СправочникСсылка.ОрганизацииМДЛП"));
	ТаблицаДокументы.Колонки.Добавить("МестоДеятельности"  , Новый ОписаниеТипов("СправочникСсылка.МестаДеятельностиМДЛП"));
	ТаблицаДокументы.Колонки.Добавить("Статус"             , Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыИнформированияМДЛП"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие1", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие2", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие3", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие4", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП"));
	
	Если Документ <> Неопределено Тогда
		
		МетаданныеДокументаМДЛП = Документ.Метаданные();
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка             КАК Ссылка,
		|	ТаблицаДокумента.Организация        КАК Организация,
		|	ТаблицаДокумента.МестоДеятельности  КАК МестоДеятельности,
		|	Статусы.Статус                      КАК Статус,
		|	Статусы.ДальнейшееДействие1         КАК ДальнейшееДействие1,
		|	Статусы.ДальнейшееДействие2         КАК ДальнейшееДействие2,
		|	Статусы.ДальнейшееДействие3         КАК ДальнейшееДействие3,
		|	Статусы.ДальнейшееДействие4         КАК ДальнейшееДействие4
		|ИЗ
		|	#ДокументМДЛП КАК ТаблицаДокумента
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
		|	ПО
		|		Статусы.Документ = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументСсылка
		|";
		
		Если МетаданныеДокументаМДЛП.Реквизиты.Найти("МестоДеятельности") = Неопределено Тогда
			УбратьМестоДеятельностиИзЗапроса(ТекстЗапроса);
		КонецЕсли;
		
		Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "#ДокументМДЛП", МетаданныеДокументаМДЛП.ПолноеИмя()));
		Запрос.УстановитьПараметр("ДокументСсылка", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОснованию(Основание, МетаданныеДокументаМДЛП)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка             КАК Ссылка,
	|	ТаблицаДокумента.Организация        КАК Организация,
	|	ТаблицаДокумента.МестоДеятельности  КАК МестоДеятельности,
	|	Статусы.Статус                      КАК Статус,
	|	Статусы.ДальнейшееДействие1         КАК ДальнейшееДействие1,
	|	Статусы.ДальнейшееДействие2         КАК ДальнейшееДействие2,
	|	Статусы.ДальнейшееДействие3         КАК ДальнейшееДействие3,
	|	Статусы.ДальнейшееДействие4         КАК ДальнейшееДействие4
	|ИЗ
	|	#ДокументМДЛП КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Основание = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата
	|";
	
	Если МетаданныеДокументаМДЛП.Реквизиты.Найти("МестоДеятельности") = Неопределено Тогда
		УбратьМестоДеятельностиИзЗапроса(ТекстЗапроса);
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "#ДокументМДЛП", МетаданныеДокументаМДЛП.ПолноеИмя()));
	Запрос.УстановитьПараметр("Основание", Основание);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	ЗаполнитьПоДокументу(ТаблицаДокументы);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатусыОформления.СтатусОформления КАК СтатусОформления
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовМДЛП КАК СтатусыОформления
	|ГДЕ
	|	СтатусыОформления.Основание = &Основание
	|	И СтатусыОформления.Документ = &Уведомление
	|");
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокументаМДЛП.ПолноеИмя());
	
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Уведомление", МенеджерДокумента.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ДанныеПоСтатусу = РезультатЗапроса.Выбрать();
		ДанныеПоСтатусу.Следующий();
		
		Если ДанныеПоСтатусу.СтатусОформления <> Перечисления.СтатусыОформленияДокументовМДЛП.Оформлено Тогда
			
			ФорматированныеСтроки = Новый Массив;
			
			Представления =  МенеджерДокумента.ПредставлениеДокумента();
			ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокументаМДЛП);
			Если ПравоДобавления Тогда
				Если ЗначениеЗаполнено(Представления.КомандаСоздать)
				   И ИнтеграцияМДЛППереопределяемый.НужноСоздатьУведомленияПоОснованию(МетаданныеДокументаМДЛП, Основание) <> Ложь Тогда
					ТекстНадписи = Представления.КомандаСоздать;
					ИмяКоманды   = Представления.ИмяКомандыСоздать;
					ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
				КонецЕсли;
				Если ЗначениеЗаполнено(Представления.КомандаСвязать) Тогда
					Уведомления = ИнтеграцияМДЛППереопределяемый.ВозможныеУведомленияПоОснованию(МетаданныеДокументаМДЛП, Основание);
					Если ЗначениеЗаполнено(Уведомления) Тогда
						Если ФорматированныеСтроки.Количество() > 0 Тогда
							ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
						КонецЕсли;
						ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представления.КомандаСвязать, Уведомления.Количество());
						ИмяКоманды   = Представления.ИмяКомандыСвязать;
						ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ФорматированныеСтроки.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ТекстУведомленияМДЛП) Тогда
					ФорматированныеСтроки.Вставить(0, ", ");
					ФорматированныеСтроки.Вставить(0, ТекстУведомленияМДЛП);
				КонецЕсли;
				
				ТекстУведомленияМДЛП = Новый ФорматированнаяСтрока(ФорматированныеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ТаблицаДокументы)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка               КАК Ссылка,
	|	ВременнаяТаблицаДокументы.Организация          КАК Организация,
	|	ВременнаяТаблицаДокументы.МестоДеятельности    КАК МестоДеятельности,
	|	ВременнаяТаблицаДокументы.Статус               КАК Статус,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие1  КАК ДальнейшееДействие1,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие2  КАК ДальнейшееДействие2,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие3  КАК ДальнейшееДействие3,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие4  КАК ДальнейшееДействие4
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
	|ИЗ
	|	&ТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сообщения.ВладелецФайла                     КАК Документ,
	|	Сообщения.Ссылка                            КАК Ссылка,
	|	Сообщения.ТипСообщения                      КАК ТипСообщения,
	|	Сообщения.Операция                          КАК Операция,
	|	Сообщения.ОперацияКвитанции                 КАК ОперацияКвитанции,
	|	Сообщения.СообщениеОснование                КАК СообщениеОснование,
	|	Сообщения.СтатусОбработки                   КАК СтатусОбработки,
	|	Сообщения.ДатаСоздания                      КАК ДатаСоздания,
	|	Сообщения.Версия                            КАК Версия,
	|	Сообщения.ИдентификаторЗапроса              КАК ИдентификаторЗапроса
	|ПОМЕСТИТЬ втСообщения
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ПО
	|			Сообщения.ВладелецФайла = ВременнаяТаблицаДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сообщения.Документ                          КАК Документ,
	|	Сообщения.Ссылка                            КАК Ссылка,
	|	Сообщения.ТипСообщения                      КАК ТипСообщения,
	|	Сообщения.Операция                          КАК Операция,
	|	Сообщения.ОперацияКвитанции                 КАК ОперацияКвитанции,
	|	Сообщения.СообщениеОснование                КАК СообщениеОснование,
	|	Сообщения.СтатусОбработки                   КАК СтатусОбработки,
	|	Сообщения.ДатаСоздания                      КАК ДатаСоздания,
	|	Сообщения.Версия                            КАК Версия,
	|	Сообщения.ИдентификаторЗапроса              КАК ИдентификаторЗапроса
	|ПОМЕСТИТЬ Сообщения
	|ИЗ
	|	втСообщения КАК Сообщения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втСообщения КАК ОтветНаПередачуДанных
	|	ПО
	|		Сообщения.Ссылка = ОтветНаПередачуДанных.СообщениеОснование
	|		И Сообщения.ИдентификаторЗапроса = ОтветНаПередачуДанных.ИдентификаторЗапроса
	|		И ОтветНаПередачуДанных.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаМДЛП.Получение_КвитанцияОПринятии)
	|		И ОтветНаПередачуДанных.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Квитанция)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втСообщения КАК КвитанцияПроведен
	|	ПО
	|		Сообщения.Ссылка = КвитанцияПроведен.СообщениеОснование
	|		И Сообщения.ИдентификаторЗапроса = КвитанцияПроведен.ИдентификаторЗапроса
	|		И КвитанцияПроведен.Операция <> ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаМДЛП.Получение_КвитанцияОПринятии)
	|		И КвитанцияПроведен.ТипСообщения В (ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Квитанция), ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Входящее))
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОчередьПередачиДанныхМДЛП КАК ОчередьПередачиДанных
	|	ПО
	|		ОчередьПередачиДанных.Сообщение = Сообщения.Ссылка
	|ГДЕ
	|	Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Исходящее)
	|	И (НЕ ОчередьПередачиДанных.Сообщение ЕСТЬ NULL
	|		ИЛИ НЕ ОтветНаПередачуДанных.Ссылка ЕСТЬ NULL
	|		ИЛИ НЕ КвитанцияПроведен.Ссылка ЕСТЬ NULL)
	|	ИЛИ
	|	Сообщения.ТипСообщения В (ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Входящее), ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Квитанция))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сообщения.Документ              КАК Документ,
	|	Сообщения.Ссылка                КАК Ссылка,
	|	Сообщения.ДатаСоздания          КАК ДатаСоздания,
	|	Сообщения.Операция              КАК Операция,
	|	Сообщения.СообщениеОснование    КАК СообщениеОснование,
	|	Сообщения.ИдентификаторЗапроса  КАК ИдентификаторЗапроса,
	|	Сообщения.Версия                КАК Версия
	|ПОМЕСТИТЬ ИсходящиеСообщения
	|ИЗ
	|	Сообщения КАК Сообщения
	|ГДЕ
	|	Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Исходящее)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаДанных.Документ КАК Документ,
	|	ПередачаДанных.Документ.Организация.ВерсияСхемОбмена КАК ВерсияСхемОбмена,
	|
	|	ПередачаДанных.Ссылка                                           КАК Ссылка,
	|	ПередачаДанных.Ссылка                                           КАК Запрос,
	|	ПередачаДанных.ДатаСоздания                                     КАК ЗапросДатаСоздания,
	|	ПередачаДанных.СообщениеОснование                               КАК СообщениеОснование,
	|	ПередачаДанных.Операция                                         КАК Операция,
	|	ПередачаДанных.Версия                                           КАК Версия,
	|
	|	ЕСТЬNULL(ОтветНаПередачуДанных.Ссылка, &ПустаяСсылка)           КАК КвитанцияПринят,
	|	ЕСТЬNULL(ОтветНаПередачуДанных.ДатаСоздания, ДатаВремя(1,1,1))  КАК КвитанцияПринятДатаСоздания,
	|	ЕСТЬNULL(ОтветНаПередачуДанных.СтатусОбработки, Неопределено)   КАК КвитанцияПринятСостояниеОбработки,
	|
	|	ЕСТЬNULL(КвитанцияПроведен.Ссылка, &ПустаяСсылка)               КАК КвитанцияПроведен,
	|	ЕСТЬNULL(КвитанцияПроведен.ДатаСоздания, &ПустаяСсылка)         КАК КвитанцияПроведенДатаСоздания,
	|	ЕСТЬNULL(КвитанцияПроведен.СтатусОбработки, Неопределено)       КАК КвитанцияПроведенСостояниеОбработки
	|
	|ИЗ
	|	ИсходящиеСообщения КАК ПередачаДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Сообщения КАК ОтветНаПередачуДанных
	|	ПО
	|		ПередачаДанных.Ссылка = ОтветНаПередачуДанных.СообщениеОснование
	|		И ПередачаДанных.ИдентификаторЗапроса = ОтветНаПередачуДанных.ИдентификаторЗапроса
	|		И ОтветНаПередачуДанных.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаМДЛП.Получение_КвитанцияОПринятии)
	|		И ОтветНаПередачуДанных.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Квитанция)
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Сообщения КАК КвитанцияПроведен
	|	ПО
	|		ПередачаДанных.Ссылка = КвитанцияПроведен.СообщениеОснование
	|		И ПередачаДанных.ИдентификаторЗапроса = КвитанцияПроведен.ИдентификаторЗапроса
	|		И КвитанцияПроведен.Операция <> ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаМДЛП.Получение_КвитанцияОПринятии)
	|		И КвитанцияПроведен.ТипСообщения В (ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Квитанция), ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Входящее))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаДанных.ДатаСоздания ВОЗР,
	|	ЕСТЬNULL(ОтветНаПередачуДанных.ДатаСоздания, ДатаВремя(1,1,1)) УБЫВ,
	|	ЕСТЬNULL(КвитанцияПроведен.ДатаСоздания, ДатаВремя(1,1,1))     УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка                 КАК Документ,
	|	ВременнаяТаблицаДокументы.Организация            КАК Организация,
	|	ВременнаяТаблицаДокументы.МестоДеятельности      КАК МестоДеятельности,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие1    КАК ДальнейшееДействие1,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие2    КАК ДальнейшееДействие2,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие3    КАК ДальнейшееДействие3,
	|	ВременнаяТаблицаДокументы.ДальнейшееДействие4    КАК ДальнейшееДействие4,
	|	ЕСТЬNULL(Запрос.Ссылка, &ПустаяСсылка)           КАК Ссылка,
	|	ЕСТЬNULL(Запрос.Операция, Неопределено)          КАК Операция,
	|	ЕСТЬNULL(Запрос.ТипСообщения, Неопределено)      КАК ТипСообщения,
	|	ЕСТЬNULL(Запрос.ДатаСоздания, ДатаВремя(1,1,1))  КАК ДатаСоздания,
	|	ЕСТЬNULL(Запрос.Версия, 1)                       КАК Версия
	|ИЗ
	|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Сообщения КАК Запрос
	|		ПО
	|			Запрос.Документ = ВременнаяТаблицаДокументы.Ссылка
	|			И Запрос.СообщениеОснование = &ПустаяСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания
	|ИТОГИ
	|	МАКСИМУМ(ДатаСоздания)
	|ПО
	|	Документ
	|");
	
	Запрос.УстановитьПараметр("ТаблицаДокументы", ТаблицаДокументы);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.МДЛППрисоединенныеФайлы.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаПоДокументам = Результат[Результат.ВГраница()    ].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеКвитанций     = Результат[Результат.ВГраница() - 1].Выгрузить();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВыборкаПоДокументам.Документ);
		ПоследовательностьОпераций = МенеджерОбъекта.ПоследовательностьОпераций(ВыборкаПоДокументам.Документ);
		СтрокаПоследовательности = Неопределено;
		
		Если ПротоколДляДокументаОснования Тогда
			СтрокаПервогоУровня = ДеревоФайлов.ПолучитьЭлементы().Добавить();
			СтрокаПервогоУровня.Документ          = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.Организация       = ВыборкаПоДокументам.Организация;
			СтрокаПервогоУровня.МестоДеятельности = ВыборкаПоДокументам.МестоДеятельности;
			СтрокаПервогоУровня.Представление     = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.ИндексКартинки    = 5;
		Иначе
			СтрокаПервогоУровня = ДеревоФайлов;
		КонецЕсли;
		
		Операция = Неопределено;
		ЕстьОшибка        = Ложь;
		ТребуетсяОжидание = Ложь;
		СтрокаВторогоУровня = Неопределено;
		
		ОсновнаяОперация = Неопределено;
		
		ВыборкаПоФайлам = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПоФайлам.Ссылка) Тогда
				// Если по документу еще не создано файлов
				Если ПоследовательностьОпераций[0].Индекс <> 0 Тогда
					Прервать;
				КонецЕсли;
				Операция = ПоследовательностьОпераций[0].Операция;
			Иначе
				Операция = ВыборкаПоФайлам.Операция;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Операция", Операция);
			НайденныеСтроки = ПоследовательностьОпераций.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаПоследовательности = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(
					ПоследовательностьОпераций, 99, ВыборкаПоФайлам.ТипСообщения, ВыборкаПоФайлам.Операция);
			Иначе
				СтрокаПоследовательности = НайденныеСтроки[НайденныеСтроки.ВГраница()];
				Если СтрокаПоследовательности.Индекс = 0 Тогда
					ОсновнаяОперация = СтрокаПоследовательности;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
			СтрокаВторогоУровня.Документ          = ВыборкаПоФайлам.Документ;
			СтрокаВторогоУровня.Организация       = ВыборкаПоФайлам.Организация;
			СтрокаВторогоУровня.МестоДеятельности = ВыборкаПоФайлам.МестоДеятельности;
			СтрокаВторогоУровня.Файл              = ВыборкаПоФайлам.Ссылка;
			СтрокаВторогоУровня.Операция          = ВыборкаПоФайлам.Операция;
			СтрокаВторогоУровня.Дата              = ВыборкаПоФайлам.ДатаСоздания;
			СтрокаВторогоУровня.Представление     = ПредставлениеОперации(СтрокаПоследовательности, ВыборкаПоФайлам.Документ, ВыборкаПоФайлам);
			СтрокаВторогоУровня.ИндексКартинки    = ИндексКартинки(СтрокаПоследовательности);
			СтрокаВторогоУровня.ТипСообщения      = СтрокаПоследовательности.ТипСообщения;
			
			Если СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Исходящее Тогда
				
				ДанныеКвитанцийСообщения = ДанныеКвитанций.Найти(ВыборкаПоФайлам.Ссылка, "Запрос");
				ДанныеОтмены = ДанныеКвитанций.НайтиСтроки(Новый Структура("СообщениеОснование, Операция", ВыборкаПоФайлам.Ссылка, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтРанееСовершеннойОперации));
				ВозвращаемоеЗначение = ОбработатьПередачуДанных(
					ДанныеКвитанцийСообщения,
					ДанныеОтмены,
					СтрокаВторогоУровня,
					СтрокаПоследовательности);
				
				Если СтрокаПоследовательности.Индекс = 0 Тогда
					ЕстьОшибка = ВозвращаемоеЗначение.Ошибка;
				КонецЕсли;
				ТребуетсяОжидание = ВозвращаемоеЗначение.Ожидание;
				
			Иначе
				
				Если СтрокаПоследовательности.Индекс = 0 Тогда
					ЕстьОшибка        = Ложь;
				КонецЕсли;
				ТребуетсяОжидание = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибка Тогда
			ОсновнаяОперация = ПредыдущаяОперация(ПоследовательностьОпераций, ОсновнаяОперация);
		КонецЕсли;
		
		Если ОсновнаяОперация = Неопределено Тогда
			Индекс = 0;
		Иначе
			Индекс = ПоследовательностьОпераций.Индекс(ОсновнаяОперация) + 1;
		КонецЕсли;
		
		Для Итератор = Индекс По ПоследовательностьОпераций.Количество() - 1 Цикл
			
			СтрокаСледующаяОперация = ПоследовательностьОпераций.Получить(Итератор);
			Если СтрокаСледующаяОперация.Индекс = 0 Тогда
				
				СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
				СтрокаВторогоУровня.Документ           = ВыборкаПоДокументам.Документ;
				СтрокаВторогоУровня.Организация        = ВыборкаПоФайлам.Организация;
				СтрокаВторогоУровня.МестоДеятельности  = ВыборкаПоФайлам.МестоДеятельности;
				СтрокаВторогоУровня.Операция           = СтрокаСледующаяОперация.Операция;
				СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
				СтрокаВторогоУровня.Представление      = ПредставлениеОперации(СтрокаСледующаяОперация, СтрокаВторогоУровня.Документ);
				СтрокаВторогоУровня.ИндексКартинки     = ИндексКартинки(СтрокаСледующаяОперация, Истина);
				СтрокаВторогоУровня.ТипСообщения       = СтрокаСледующаяОперация.ТипСообщения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПередачуДанных(ДанныеЗапроса, ДанныеОтмены, СтрокаВторогоУровня, Последовательность)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ошибка"         , Ложь);
	ВозвращаемоеЗначение.Вставить("Ожидание"       , Ложь);
	
	ЕстьОтмена = Ложь;
	Если ДанныеЗапроса <> Неопределено Тогда
		Если (Последовательность.КвитанцияПринят И ЗначениеЗаполнено(ДанныеЗапроса.КвитанцияПринят))
		 Или ЗначениеЗаполнено(ДанныеЗапроса.КвитанцияПроведен) Тогда
			
			Если ДанныеЗапроса.КвитанцияПринятСостояниеОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
				
				ВозвращаемоеЗначение.Ошибка = Истина;
				СтрокаВторогоУровня.ИндексКартинки = 4; // Ошибка передачи
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗапроса.КвитанцияПроведен) Тогда
				Если ДанныеЗапроса.КвитанцияПроведенСостояниеОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
					ВозвращаемоеЗначение.Ошибка = Истина;
					СтрокаВторогоУровня.ИндексКартинки = 4; // Отклонено ГИСМ
				Иначе
					
					Если ДанныеЗапроса.КвитанцияПроведенСостояниеОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
						ВозвращаемоеЗначение.Ошибка = Истина;
						СтрокаВторогоУровня.ИндексКартинки = 6; // Принято частично
					КонецЕсли;
					
					РезультатПоДаннымОтмены = Ложь;
					Если ДанныеОтмены.Количество() > 0 Тогда
						Для Каждого ОтменаОперации Из ДанныеОтмены Цикл
							СтрокаПоследовательности = Новый Структура;
							СтрокаПоследовательности.Вставить("ТипСообщения", Перечисления.ТипыСообщенийМДЛП.Исходящее);
							СтрокаПоследовательности.Вставить("Операция", ОтменаОперации.Операция);
							СтрокаПоследовательности.Вставить("КвитанцияПринят", Истина);
							СтрокаПоследовательности.Вставить("КвитанцияПроведен", Истина);
							СтрокаОтмены = СтрокаВторогоУровня.ПолучитьЭлементы().Добавить();
							СтрокаОтмены.Документ       = ОтменаОперации.Документ;
							СтрокаОтмены.Файл           = ОтменаОперации.Ссылка;
							СтрокаОтмены.Операция       = ОтменаОперации.Операция;
							СтрокаОтмены.Дата           = ОтменаОперации.ЗапросДатаСоздания;
							СтрокаОтмены.Представление  = ПредставлениеОперации(СтрокаПоследовательности, ОтменаОперации.Документ, ОтменаОперации);
							СтрокаОтмены.ИндексКартинки = ИндексКартинки(СтрокаПоследовательности);
							СтрокаОтмены.ТипСообщения   = СтрокаПоследовательности.ТипСообщения;
							РезультатОтмены = ОбработатьПередачуДанных(ОтменаОперации, Новый Массив, СтрокаОтмены, СтрокаПоследовательности)
						КонецЦикла;
						Если Не РезультатОтмены.Ошибка Тогда
							ЕстьОтмена = Истина;
							Если Не РезультатОтмены.Ожидание Тогда
								СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеЗачеркнутый";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ВозвращаемоеЗначение.Ошибка Тогда
				
				Если ПустаяСтрока(СтрокаВторогоУровня.УсловноеОформление) Тогда
					СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеОшибка";
				КонецЕсли;
				
			Иначе
				
				Если    (Не ЗначениеЗаполнено(ДанныеЗапроса.КвитанцияПринят) И Последовательность.КвитанцияПринят)
					Или (Не ЗначениеЗаполнено(ДанныеЗапроса.КвитанцияПроведен) И Последовательность.КвитанцияПроведен) Тогда
					
					СтрокаВторогоУровня.ИндексКартинки = 3; // Ожидание
					ВозвращаемоеЗначение.Ожидание = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЗапроса.КвитанцияПроведен) И ДанныеЗапроса.КвитанцияПроведенСостояниеОбработки <> Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
				Если Не ЕстьОтмена И Перечисления.ОперацииОбменаМДЛП.ВозможнаОтменаОперации(ДанныеЗапроса.Операция, ДанныеЗапроса.ВерсияСхемОбмена) Тогда
					СтрокаВторогоУровня.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеОперацию);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеЗапроса.Запрос) Тогда
			
			СтрокаВторогоУровня.ИндексКартинки = 3; // Ожидание передачи
			ВозвращаемоеЗначение.Ожидание = Истина;
			СтрокаВторогоУровня.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтменитеПередачуДанных);
			
		КонецЕсли;
	Иначе
		
		СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
		СтрокаВторогоУровня.ИндексКартинки = 7;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПредыдущаяОперация(ПоследовательностьОпераций, ТекущаяОперация)
	
	ИндексСтроки = ПоследовательностьОпераций.Индекс(ТекущаяОперация);
	Если ИндексСтроки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредыдущаяОперация = ПоследовательностьОпераций.Получить(ИндексСтроки - 1);
	
	Возврат ПредыдущаяОперация;
	
КонецФункции

&НаСервере
Функция ИндексКартинки(СтрокаПоследовательности, Серый = Ложь)
	
	ИндексКартинки = 0;
	
	Смещение = 0;
	Если Серый Тогда
		Смещение = 6;
	КонецЕсли;
	
	Если СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Исходящее Тогда
		ИндексКартинки = 1 + Смещение;
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Входящее Тогда
		ИндексКартинки = 2 + Смещение;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоФайлов()
	
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	ТекстУведомленияМДЛП = "";
	ТипДокумента = ТипЗнч(Документ);
	ПротоколДляДокументаОснования = Ложь;
	
	ТаблицаДокументы = ИнтеграцияМДЛП.ДокументыПанелиМаркировки();
	Для Каждого ОписаниеДокумента Из ТаблицаДокументы Цикл
		
		МетаданныеДокумента = ОписаниеДокумента.Метаданные;
		Если МетаданныеДокумента = Документ.Метаданные() Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Основание.Тип.СодержитТип(ТипДокумента) Тогда
			ПротоколДляДокументаОснования = Истина;
			ЗаполнитьПоОснованию(Документ, МетаданныеДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Строки = Новый Массив;
	Если Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.СодержитТип(ТипДокумента) Тогда
		Строки.Добавить(НСтр("ru = 'Документ'"));
		ЗаполнитьПоДокументу(ТаблицаДокументы(Документ));
	Иначе
		Строки.Добавить(НСтр("ru = 'Основание'"));
	КонецЕсли;
	
	Строки.Добавить(": ");
	Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Документ),,,, ПолучитьНавигационнуюСсылку(Документ)));
	ТекстДокумент = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьМестоДеятельностиИзЗапроса(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для Каждого ЗапросОбъект Из СхемаЗапроса.ПакетЗапросов Цикл
		Колонки = ЗапросОбъект.Колонки;
		Для Индекс = 0 По Колонки.Количество() - 1 Цикл
			Колонка = Колонки[Индекс];
			Если Колонка.Псевдоним = "МестоДеятельности" Тогда
				Колонки.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти
