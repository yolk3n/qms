/////////////////////////////////////////////////////////////////////////////
// Вывод QR-кода

    
Функция КомпонентаФормированияQRКода()
    
    ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");
    
    QRCodeGenerator = ПодключитьКомпонентуИзМакета("QRCodeExtension", "ОбщийМакет.КомпонентаПечатиQRКода");
    Если QRCodeGenerator = Неопределено Тогда
        #Если Клиент Тогда
            Сообщить(ТекстОшибки);
        #КонецЕсли
    КонецЕсли;
    
    Возврат QRCodeGenerator;
    
КонецФункции

Функция ПодключитьКомпонентуИзМакета(Идентификатор, ПолноеИмяМакета) Экспорт
    
    ПодключаемыйМодуль = Неопределено;
    
    Местоположение = ПолноеИмяМакета;
    СимволическоеИмя = Идентификатор + "SymbolicName";
    
    Если ПодключитьВнешнююКомпоненту(Местоположение, СимволическоеИмя) Тогда
        
        Попытка
            ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
            Если ПодключаемыйМодуль = Неопределено Тогда
                ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
            КонецЕсли;
        Исключение
            ПодключаемыйМодуль = Неопределено;
            ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        КонецПопытки;
        
        Если ПодключаемыйМодуль = Неопределено Тогда
            
            ТекстОшибки = НСтр("ru = 'Не удалось создать объект внешней компоненты ""%1"", подключенной на сервере
            |из макета ""%2"",
            |по причине:
            |%3'");
            
            ЗаписьЖурналаРегистрации(
            НСтр("ru = 'Подключение внешней компоненты на сервере'",
            КодОсновногоЯзыка()),
            УровеньЖурналаРегистрации.Ошибка,,,
            ТекстОшибки);
            
        КонецЕсли;
        
    Иначе
        
        ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на сервере
        |из макета ""%2""
        |по причине:
        |Метод ПодключитьВнешнююКомпоненту вернул Ложь.'");
        
        ЗаписьЖурналаРегистрации(
        НСтр("ru = 'Подключение внешней компоненты на сервере'",
        КодОсновногоЯзыка()),
        УровеньЖурналаРегистрации.Ошибка,,,
        ТекстОшибки);
        
    КонецЕсли;
    
    Возврат ПодключаемыйМодуль;
    
КонецФункции

Функция КодОсновногоЯзыка() Экспорт
    
    Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
    
КонецФункции

// Возвращает двоичные данные для формирования QR-кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения, при котором данный QR-код все еще возможно 100 %
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0 (7 % погрешности), 1 (15 % погрешности), 2(25 % погрешности), 3(35 % погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
//
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
    
    //УстановитьОтключениеБезопасногоРежима(Истина);
    ГенераторQRКода = КомпонентаФормированияQRКода();
    Если ГенераторQRКода = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Попытка
        ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
    Исключение
        ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", КодОсновногоЯзыка()),
        УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
    Возврат ДвоичныеДанныеКартинки;
    
КонецФункции

Процедура ВывестиQRКод(ДанныеПечати, ОбластьМакета)
        
        QRСтрока = ДанныеПечати;
        
        Если Не ПустаяСтрока(QRСтрока) Тогда
            
            ДанныеQRКода = ДанныеQRКода(QRСтрока, 0, 190);
            
            Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
                КартинкаQRКода = Новый Картинка(ДанныеQRКода);
                ОбластьМакета.Рисунки["QRКод"].Картинка = КартинкаQRКода;
            Иначе
                ТекстСообщения = "Не удалось сформировать QR-код для документа";
                #Если Клиент Тогда
                    Сообщить(ТекстСообщения);
                #КонецЕсли
            КонецЕсли;
            
        КонецЕсли;
        
    КонецПроцедуры
    

// Вывод QR-кода
/////////////////////////////////////////////////////////////////////////////
Функция КнопкаПечатьНажатие() Экспорт
    
    ТабДок = Новый ТабличныйДокумент;
    Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВыводQR");
    


    ОблQRКод = Макет.ПолучитьОбласть("ОбластьQRКод");
    
    ТекстСсылки = Объект.ПутьКОписанию;
    ВывестиQRКод(ТекстСсылки ,ОблQRКод);
    ТабДок.Вывести(ОблQRКод);
    
    Возврат ТабДок;
    
КонецФункции

&НаКлиенте
Процедура QR(Команда)
	КнопкаПечатьНажатие().Показать();
КонецПроцедуры
