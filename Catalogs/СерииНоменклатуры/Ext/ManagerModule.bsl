#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает статус забраковки серии
//
// Параметры:
//  Серия - СправочникСсылка.СерияНоменклатуры
//
// Возвращаемое значение:
//  Булево - Истина, если серия забракована
//
Функция СерияЗабракована(Серия) Экспорт
	
	Если Не ЗначениеЗаполнено(Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РаботаСИнформациейОбОбъектах.ОбъектЗабракован(Серия);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// Формирует представление серии
//
// Параметры:
//  ПараметрыСерии - 
//  ЗначенияРеквизитов - 
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСерии(ПараметрыСерий, ЗначенияРеквизитов) Экспорт
	
	Представление = "";
	Если ЗначениеЗаполнено(ПараметрыСерий.ШаблонРабочегоНаименованияСерии) Тогда
		
		Представление = КонструкторФормулБольничнаяАптека.НаименованиеПоШаблону(ПараметрыСерий.ШаблонРабочегоНаименованияСерии, ЗначенияРеквизитов);
		
	Иначе
		
		Если ПараметрыСерий.ИспользоватьНомерСерии = Истина Тогда
			Представление = ЗначенияРеквизитов.Номер;
		КонецЕсли;
		
		Если ПараметрыСерий.ИспользоватьСрокГодностиСерии = Истина Тогда
			
			СтрокаСтрокаГодности = НСтр("ru = 'до %ГоденДо%'");
			СтрокаСтрокаГодности = СтрЗаменить(СтрокаСтрокаГодности, "%ГоденДо%", Формат(ЗначенияРеквизитов.ГоденДо, ПараметрыСерий.ФорматнаяСтрокаСрокаГодности));
			
			Представление = Представление + " " + СтрокаСтрокаГодности;
			Представление = СокрЛП(Представление);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Возвращает описание блокируемых реквизитов
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов
//   Элемент массива - Строка в формате:
//     ИмяРеквизита[;ИмяЭлементаФормы,...]
//      где
//       ИмяРеквизита     - имя реквизита объекта
//       ИмяЭлементаФормы - имя элемента формы, связанного с реквизитом
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("Номер");
	БлокируемыеРеквизиты.Добавить("ГоденДо");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("Номер");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// СтандартныеПодсистемы.ПоискИУдалениеДублей

// Вызывается для определения прикладных параметров поиска дублей.
//
// Параметры:
//
//     ПараметрыПоиска - Структура - Предлагаемые параметры поиска. Содержит поля:
//
//         *  ПравилаПоиска - ТаблицаЗначений - Предлагаемые правила сравнения для объектов.
//                            Может быть изменена для установки новых вариантов. Содержит колонки.
//               ** Реквизит - Строка - Имя реквизита для сравнения.
//               ** Правило  - Строка - Правило сравнения: "Равно" - сравнение по равенству, "Подобно" -подобие строк,
//                                     "" - пустая строка - не сравнивать.
//
//         * КомпоновщикОтбора - КомпоновщикНастроекКомпоновкиДанных - Инициализированный компоновщик для 
//                               предварительного отбора. Может быть изменен, например, для 
//                               усиления отборов.
// 
//         * ОграниченияСравнения - Массив - Предназначен для заполнения описания прикладных правил-ограничений.
//                                  Должен быть дополнен структурами с полями:
//               ** Представление      - Строка - Описание правила-ограничения для пользователя.
//               ** ДополнительныеПоля - Строка - Список дополнительных реквизитов запятую, необходимых для
//                                                дополнительного анализа.
// 
//         * КоличествоЭлементовДляСравнения - Число - Количество кандидатов в дубли, передаваемых одним вызовом
//                                                     обработчику.
//
//     ДополнительныеПараметры - Произвольный - Значение, переданное при вызове программного интерфейса
//                                              ОбщегоНазначения.НайтиДублиЭлементов.
//                               При вызове пользователем из обработки "ПоискИЗаменаДублей" равно Неопределено.
//
Процедура ПараметрыПоискаДублей(ПараметрыПоиска, ДополнительныеПараметры = Неопределено) Экспорт
	
	Режим = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Режим");
	Если Режим = "КонтрольПоНаименованию" Тогда
		
		ПравилаПоиска = ПараметрыПоиска.ПравилаПоиска;
		ПравилаПоиска.Очистить();
		ЗаполнитьЗначенияСвойств(ПравилаПоиска.Добавить(), Новый Структура("Реквизит, Правило", "Наименование", "Равно"));
		ЗаполнитьЗначенияСвойств(ПравилаПоиска.Добавить(), Новый Структура("Реквизит, Правило", "Владелец", "Равно"));
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
			ЗаполнитьЗначенияСвойств(ПравилаПоиска.Добавить(), Новый Структура("Реквизит, Правило", "СерияПромаркированаДляЦелейМДЛП", "Равно"));
		КонецЕсли;
		
		Отбор = ПараметрыПоиска.КомпоновщикОтбора.Настройки.Отбор;
		Отбор.Элементы.Очистить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается для определения дублей по прикладным правилам.
//
// Параметры:
//
//     ТаблицаКандидатов - ТаблицаЗначений - Описывает кандидатов в дубли. Содержит колонки:
//         - Ссылка1  - ЛюбаяСсылка - Ссылка на элемент первого кандидата.
//         - Ссылка2  - ЛюбаяСсылка - Ссылка на элемент второго кандидата.
//         - ЭтоДубли - Булево      - Флаг того, что кандидаты действительно являются дублями. По умолчанию содержит 
//                                    значение Ложь, может быть изменено на Истина, если кандидаты - действительно
//                                    дубли.
//         - Поля1    - Структура   - Содержит поля Код, Наименование и дополнительные поля первого кандидата,
//         указанные в ПараметрыПоискаДублей.
//         - Поля2    - Структура   - Содержит поля Код, Наименование и дополнительные поля второго кандидата,
//         указанные в ПараметрыПоискаДублей.
//
//     ДополнительныеПараметры - Произвольный - Значение, переданное при вызове программного интерфейса
//                                              ОбщегоНазначения.НайтиДублиЭлементов.
//                               При вызове пользователем из обработки "ПоискИЗаменаДублей" равно Неопределено.
//
Процедура ПриПоискеДублей(ТаблицаКандидатов, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Для всех интерфейсов, из которых вызывается метод, обработка дублей одинакова - стандартная.
	ТаблицаКандидатов.ЗаполнитьЗначения(Истина, "ЭтоДубли");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПоискИУдалениеДублей

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли