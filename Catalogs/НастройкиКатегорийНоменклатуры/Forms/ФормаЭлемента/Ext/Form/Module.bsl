
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	Иначе
		ЕстьПравоРедактирования = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
		ЭтотОбъект.ТолькоПросмотр = Не ЕстьПравоРедактирования;
	КонецЕсли;
	
	АдресСхемыДанныхРабочегоНаименованияНоменклатуры = ПоместитьВоВременноеХранилище(Справочники.ВидыНоменклатуры.ПолучитьМакет("ШаблонНоменклатуры"), УникальныйИдентификатор);
	АдресСхемыДанныхНаименованияДляПечатиНоменклатуры = АдресСхемыДанныхРабочегоНаименованияНоменклатуры;
	АдресСхемыДанныхРабочегоНаименованияСерии = ПоместитьВоВременноеХранилище(Справочники.ВидыНоменклатуры.ПолучитьМакет("ШаблонСерии"), УникальныйИдентификатор);
	
	ЗаполнитьДеревоОператоров();
	
	ИменаРеквизитовДляОткрытияФормыНастройкаИспользованияСерий = Справочники.ВидыНоменклатуры.ИменаРеквизитовДляФормыНастройкаИспользованияСерий();
	
	УстановитьДоступныеТипыНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастроитьФормуПоТипуНоменклатуры();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияНоменклатуры(Команда)
	
	РедактироватьШаблонНаименования("РабочегоНаименованияНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиНоменклатуры(Команда)
	
	РедактироватьШаблонНаименования("НаименованияДляПечатиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияСерии(Команда)
	
	РедактироватьШаблонНаименования("РабочегоНаименованияСерии");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименования(ЗначащаяЧастьИмениШаблона)
	
	ПараметрыКонструктора = Новый Структура;
	ПараметрыКонструктора.Вставить("Формула", Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]);
	ПараметрыКонструктора.Вставить("ОперандыЗаголовок", НСтр("ru = 'Доступные реквизиты'"));
	ПараметрыКонструктора.Вставить("УбиратьИмяТаблицы", Истина);
	ПараметрыКонструктора.Вставить("Операнды", ЭтотОбъект["АдресСхемыДанных" + ЗначащаяЧастьИмениШаблона]);
	
	ЭтоШаблонНоменклатуры = СтрНайти(ЗначащаяЧастьИмениШаблона, "Номенклатуры") > 0;
	
	ПараметрыДанных = Новый Структура;
	Если ЭтоШаблонНоменклатуры Тогда
		
		ЭтоЛекарственнаяФорма =
			(Объект.ТипНоменклатурыРасширенный = ПредопределенноеЗначение("Справочник.ТипыНоменклатурыРасширенные.ЛекарственноеСредство"));
		
		ПараметрыДанных.Вставить("НаборСвойств", Объект.НаборСвойств);
		ПараметрыДанных.Вставить("ЭтоЛекарственноеСредство", ЭтоЛекарственнаяФорма);
		ПараметрыДанных.Вставить("ТипНоменклатурыРасширенный", Объект.ТипНоменклатурыРасширенный);
		ПараметрыДанных.Вставить("ТипНоменклатуры", Объект.ТипНоменклатуры);
		
		ПараметрыКонструктора.Вставить("Операторы", АдресХранилищаДереваОператоров);
		
	Иначе
		
		ПараметрыДанных.Вставить("НаборСвойств", Объект.НаборСвойствСерий);
		
	КонецЕсли;
	
	ДополнитьПараметрыДанныхНаборамиСвойств(ПараметрыДанных, ЭтоШаблонНоменклатуры);
	
	ПараметрыКонструктора.Вставить("ПараметрыДанных", ПараметрыДанных);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗначащаяЧастьИмениШаблона", ЗначащаяЧастьИмениШаблона);
	Оповестить = Новый ОписаниеОповещения("РедактироватьШаблонНаименованияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыКонструктора, ЭтотОбъект,,,, Оповестить);
	
КонецПроцедуры

// Процедура устанавливает значение шаблона наименования
// соответствующему реквизиту
//
// Продолжение процедуры РедактироватьШаблонНаименования
//
&НаКлиенте
Процедура РедактироватьШаблонНаименованияЗавершение(Шаблон, ДополнительныеПараметры) Экспорт
	
	ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
	
	Если Шаблон <> Неопределено
	   И Объект[ИмяШаблона] <> Шаблон Тогда
		
		Модифицированность = Истина;
		Объект[ИмяШаблона] = Шаблон;
		
		НастроитьПоШаблонуНаименования(ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	ОбработатьИзменениеТипаНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииПриИзменении(Элемент)
	
	ОбработатьИзменениеПризнакаИспользоватьСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаданияНастроекСерийПриИзменении(Элемент)
	
	Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры = (ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругихНастройкахКатегорийНоменклатуры");
	Если Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры Тогда
		ВыбратьНастройкуВладелец("Серий");
	Иначе
		ОчиститьВладельца("Серий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиНадписиПоНастройкеВладельцу(НавигационнаяСсылка, "Серий", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкаИспользованияСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьНастройкуИспользованияСерий" Тогда
		
		ТекущиеРеквизиты = Новый Структура(ИменаРеквизитовДляОткрытияФормыНастройкаИспользованияСерий);
		ЗаполнитьЗначенияСвойств(ТекущиеРеквизиты, Объект);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзменении", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.НастройкаИспользованияСерий",
					ТекущиеРеквизиты,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаСерийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(НоменклатураКлиентСервер.ПолучитьДопустимыеТипыПолитикУчетаСерий(Объект));
	
	ЭлементНеУчитывать = ДанныеВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаСерий.НеУчитывать"));
	Если ЭлементНеУчитывать <> Неопределено Тогда
		ДанныеВыбора.Удалить(ЭлементНеУчитывать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаСерийВОтделенияхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(НоменклатураКлиентСервер.ПолучитьДопустимыеТипыПолитикУчетаСерий(Объект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПартииПриИзменении(Элемент)
	
	ОбработатьИзменениеПризнакаИспользоватьПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаданияНастроекПартийПриИзменении(Элемент)
	
	Объект.НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры = (ВариантЗаданияНастроекПартий = "ИспользуютсяТакжеКакВДругихНастройкахКатегорийНоменклатуры");
	Если Объект.НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры Тогда
		ВыбратьНастройкуВладелец("Партий");
	Иначе
		ОчиститьВладельца("Партий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиНадписиПоНастройкеВладельцу(НавигационнаяСсылка, "Партий", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаПартийПриИзменении(Элемент)
	
	ОбработатьИзменениеПолитикиУчетаПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаПартийВОтделенияхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.НеУчитывать"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий"));
	Если Объект.ПолитикаУчетаПартий = ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.ИспользоватьСерии Тогда
		Если Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры Тогда
			ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругихНастройкахКатегорийНоменклатуры";
		Иначе
			ВариантЗаданияНастроекСерий = "НастроеныДляЭтихНастроек";
		КонецЕсли;
	Иначе
		ВариантЗаданияНастроекСерий = "";
	КонецЕсли;
	
	Если Объект.ИспользоватьПартии Тогда
		Если Объект.НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры Тогда
			ВариантЗаданияНастроекПартий = "ИспользуютсяТакжеКакВДругихНастройкахКатегорийНоменклатуры";
		Иначе
			ВариантЗаданияНастроекПартий = "НастроеныДляЭтихНастроек";
		КонецЕсли;
	Иначе
		ВариантЗаданияНастроекПартий = "";
	КонецЕсли;
	
	ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем("Серий");
	ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем("Партий");
	
	НастроитьФормуПоТипуНоменклатуры();
	
	НастроитьПоШаблонуНаименования("РабочегоНаименованияНоменклатуры");
	НастроитьПоШаблонуНаименования("НаименованияДляПечатиНоменклатуры");
	НастроитьПоШаблонуНаименования("РабочегоНаименованияСерии");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоШаблонуНаименования(ЗначащаяЧастьИмениШаблона)
	
	Если Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]) Тогда
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок  = Объект["Шаблон" + ЗначащаяЧастьИмениШаблона];
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Иначе
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок = НСтр("ru = '<шаблон не задан>'");
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет; 
	КонецЕсли;
	
	Если Найти(ЗначащаяЧастьИмениШаблона, "Серии") = 0 Тогда
		Элементы["ЗапретРедактирования" + ЗначащаяЧастьИмениШаблона].Доступность = Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПризнакаИспользоватьСерии()
	
	Если Объект.ИспользоватьСерии Тогда
		
		ВариантЗаданияНастроекСерий = "НастроеныДляЭтихНастроек";
		Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры = Ложь;
		
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров;
		Если Объект.ПолитикаУчетаСерий = Перечисления.ТипыПолитикУчетаСерий.НеУчитывать Тогда
			Объект.ПолитикаУчетаСерий = Перечисления.ТипыПолитикУчетаСерий.УправлениеОстаткамиСерий;
		КонецЕсли;
		Объект.ИспользоватьНомерСерии = Истина;
		Объект.ИспользоватьСрокГодностиСерии = Истина;
		Объект.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней;
		
	Иначе
		
		ВариантЗаданияНастроекСерий = "";
		Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры = Ложь;
		Объект.ВладелецСерий = Неопределено;
		ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем("Серий");
		
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.НеИспользовать;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекСерий();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПризнакаИспользоватьПартии()
	
	Если Объект.ИспользоватьПартии Тогда
		ВариантЗаданияНастроекПартий = "НастроеныДляЭтихНастроек";
		Объект.ПолитикаУчетаПартий = Перечисления.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий;
		ОбработатьИзменениеПолитикиУчетаПартий();
	Иначе
		ВариантЗаданияНастроекПартий = "";
		Объект.НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры = Ложь;
		Объект.ВладелецПартий = Неопределено;
		ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем("Партий");
		
		Объект.ПолитикаУчетаПартий = Перечисления.ТипыПолитикУчетаПартий.НеУчитывать;
		Объект.ПолитикаУчетаПартийВОтделениях = Перечисления.ТипыПолитикУчетаПартий.НеУчитывать;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекПартий();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПолитикиУчетаПартий()
	
	Если Не ЗначениеЗаполнено(Объект.ПолитикаУчетаПартийВОтделениях) Тогда
		
		Объект.ПолитикаУчетаПартийВОтделениях = Перечисления.ТипыПолитикУчетаПартий.НеУчитывать;
		
	ИначеЕсли Объект.ПолитикаУчетаПартийВОтделениях <> Перечисления.ТипыПолитикУчетаПартий.НеУчитывать Тогда
		
		Если Перечисления.ТипыПолитикУчетаПартий.Индекс(Объект.ПолитикаУчетаПартийВОтделениях) > Перечисления.ТипыПолитикУчетаПартий.Индекс(Объект.ПолитикаУчетаПартий) Тогда
			Объект.ПолитикаУчетаПартийВОтделениях = Объект.ПолитикаУчетаПартий;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуНоменклатуры()
	
	Элементы.ТипНоменклатуры.Подсказка = Справочники.ТипыНоменклатурыРасширенные.ПодсказкаПоТипуНоменклатуры(Объект.ТипНоменклатурыРасширенный);
	
	ЭтоЛекарственнаяФорма =
		(Объект.ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство);
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	Элементы.ЕдиницаИзмерения.Видимость = Не ЭтоЛекарственнаяФорма;
	Если ЭтоУслуга Тогда
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Измерения'");
	Иначе
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Хранения'");
	КонецЕсли;
	Элементы.ЕдиницаИзмерения.Заголовок = ЗаголовокЕдиницыИзмерения;
	Элементы.ЕдиницыИзмеренияПоУмолчаниюЛекарственныхФорм.Видимость = ЭтоЛекарственнаяФорма;
	Элементы.ГруппаПКУ.Видимость = ЭтоТовар И Не ЭтоЛекарственнаяФорма;
	Элементы.ШаблоныЭтикетокИЦенников.Видимость = ЭтоТовар;
	
	Элементы.КодТНВЭД.Видимость = ЭтоТовар;
	Элементы.КодТНВЭДНаименование.Видимость = Элементы.КодТНВЭД.Видимость;
	Элементы.ОКПД2.Видимость = ЭтоТовар;
	Элементы.ОКПД2НаименованиеПолное.Видимость = Элементы.ОКПД2.Видимость;
	
	Если ЭтоТовар Тогда
		Элементы.СтраницыПравилаВеденияУчета.ТекущаяСтраница = Элементы.СтраницаПравилаВеденияУчетаТовар;
	Иначе
		Элементы.СтраницыПравилаВеденияУчета.ТекущаяСтраница = Элементы.СтраницаПравилаВеденияУчетаУслуга;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекСерий();
	УстановитьВидимостьДоступностьНастроекПартий();
	
КонецПроцедуры

&НаСервере
Функция УстановитьВидимостьДоступностьНастроекСерий()
	
	Элементы.ВариантЗаданияНастроекСерий.Доступность = Объект.ИспользоватьСерии;
	
	Элементы.НадписьНастройкаИспользованияСерий.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры;
	
	Элементы.ВладелецСерий.Видимость = Объект.ИспользоватьСерии;
	Элементы.ПолитикаУчетаСерий.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры;
	Элементы.ПолитикаУчетаСерийВОтделениях.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры;
	
	Элементы.НадписьДляЭкземпляровТолькоСправочноеУказание.Видимость =
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара
		И Объект.ИспользоватьСерии
		И Не Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры;
	
	Элементы.ГруппаШаблоныНаименованийСерий.Видимость = Объект.ИспользоватьСерии;
	
	СформироватьНадписьПоВидуВладельцу("Серий");
	
	Если Элементы.НадписьНастройкаИспользованияСерий.Видимость Тогда
		СформироватьНадписьНастройкаИспользованияСерий();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьНадписьНастройкаИспользованияСерий()
	
	ЧастиНадписи = Новый Массив;
	ЧастиНадписи.Добавить(НСтр("ru = 'Серия идентифицирует'"));
	ЧастиНадписи.Добавить(": ");
	ЧастиНадписи.Добавить(Справочники.ВидыНоменклатуры.ПредставлениеНастройкиИспользованияСерий(Объект));
	
	Если Не Элементы.ИспользоватьСерии.ТолькоПросмотр Тогда
		ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,, "ИзменитьНастройкуИспользованияСерий"));
	КонецЕсли;
	
	Элементы.НадписьНастройкаИспользованияСерий.Заголовок = Новый ФорматированнаяСтрока(ЧастиНадписи);
	
КонецПроцедуры

&НаСервере
Функция УстановитьВидимостьДоступностьНастроекПартий()
	
	Элементы.ВариантЗаданияНастроекПартий.Доступность = Объект.ИспользоватьПартии;
	Элементы.ВладелецПартий.Видимость = Объект.ИспользоватьПартии;
	
	Элементы.ГруппаПолитикиУчетаПартий.Видимость = Объект.ИспользоватьПартии И Не Объект.НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры;
	
	СформироватьНадписьПоВидуВладельцу("Партий");
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеТипаНоменклатуры()
	
	ПараметрыТипаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТипНоменклатурыРасширенный, "ТипНоменклатуры");
	Объект.ТипНоменклатуры = ПараметрыТипаНоменклатуры.ТипНоменклатуры;
	
	Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Объект.ИспользоватьСерии = Ложь;
		Объект.ИспользоватьПартии = Ложь;
	КонецЕсли;
	
	НастроитьФормуПоТипуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
	   И Объект.НастройкаИспользованияСерий <> Результат.НастройкаИспользованияСерий Тогда
		ТекстВопроса = НСтр("ru = 'Для серий, которые используются для учета экземпляров товаров, на складах могут быть назначены
			|только политики учета серий с типом ""%1"". Политики с другими типами будут заменены. Продолжить?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстВопроса, ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаСерий.СправочноеУказаниеСерий"));
		
		Оповестить = Новый ОписаниеОповещения("ОтветитьНаВопросОбОчисткеНекорректныхПолитикУчетаСерий", ЭтотОбъект, Результат);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НастройкаИспользованияСерийПриИзмененииСервер(Результат, Ложь);
	
КонецПроцедуры

// Продолжение процедуры НастройкиИспользованияСерийПриИзменении
//
&НаКлиенте
Процедура ОтветитьНаВопросОбОчисткеНекорректныхПолитикУчетаСерий(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НастройкаИспользованияСерийПриИзмененииСервер(ДополнительныеПараметры, Истина);
		ОчиститьНекорректныеПолитикиУчетаСерий();
		УстановитьВидимостьДоступностьНастроекСерий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИспользованияСерийПриИзмененииСервер(Знач Результат, Знач УдалятьПолитики)
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат, Справочники.ВидыНоменклатуры.ИменаРеквизитовДляФормыНастройкаИспользованияСерий());
	
	Если УдалятьПолитики Тогда
		ОчиститьНекорректныеПолитикиУчетаСерий();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекСерий();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНекорректныеПолитикиУчетаСерий()
	
	ДопустимыеТипыПолитик = НоменклатураКлиентСервер.ПолучитьДопустимыеТипыПолитикУчетаСерий(Объект);
	
	Если ДопустимыеТипыПолитик.Найти(Объект.ПолитикаУчетаСерий) = Неопределено Тогда
		Объект.ПолитикаУчетаСерий = Неопределено;
	КонецЕсли;
	
	Если ДопустимыеТипыПолитик.Найти(Объект.ПолитикаУчетаСерийВОтделениях) = Неопределено Тогда
		Объект.ПолитикаУчетаСерийВОтделениях = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОператоров()
	
	Операторы = КонструкторФормулБольничнаяАптека.ПолучитьСтандартноеДеревоОператоров();
	
	ГруппаОператоров = КонструкторФормулБольничнаяАптека.ДобавитьГруппуОператоров(Операторы, НСтр("ru='Наименования лекарственных средств'"));
	КонструкторФормулБольничнаяАптека.ДобавитьОператор(Операторы, ГруппаОператоров, НСтр("ru='Рабочее наименование'"), ШаблонРабочегоНаименованияНоменклатуры());
	КонструкторФормулБольничнаяАптека.ДобавитьОператор(Операторы, ГруппаОператоров, НСтр("ru='Рабочее наименование (ГРЛС)'"), ШаблонРабочегоНаименованияНоменклатурыГРЛС());
	КонструкторФормулБольничнаяАптека.ДобавитьОператор(Операторы, ГруппаОператоров, НСтр("ru='Наименование для печати'"), ШаблонНаименованияДляПечатиНоменклатуры());
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Операторы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ШаблонРабочегоНаименованияНоменклатуры()
	
	Шаблон = НСтр("ru = '?(ЗначениеЗаполнено([ЭлементКАТ.ТорговоеНаименование]), [ЭлементКАТ.ТорговоеНаименование], [ЭлементКАТ.ДействующиеВеществаМНН])
	|+ "", "" + [ЭлементКАТ.ФормаВыпуска]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.ВКомплекте]), "", "" + [ЭлементКАТ.ВКомплекте], """")
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.КоличествоДозВУпаковке]), "", "" + [ЭлементКАТ.КоличествоДозВУпаковке] + "" доз(а)"", """")
	|+ "", "" + [ЭлементКАТ.Упаковка.НаименованиеСокращенное]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.ФирмаПроизводитель]), "" "" + [ЭлементКАТ.ФирмаПроизводитель], """")'");
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Функция ШаблонРабочегоНаименованияНоменклатурыГРЛС()
	
	Шаблон = НСтр("ru = '[ЭлементКАТ.ТорговоеНаименование]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.НаименованиеЛекарственнойФормыГРЛС]) И ЗначениеЗаполнено([ЭлементКАТ.ОписаниеДозировкиГРЛС]), "", "" + [ЭлементКАТ.НаименованиеЛекарственнойФормыГРЛС] + "" "" + [ЭлементКАТ.ОписаниеДозировкиГРЛС], """")
	|+ "", "" + [ЭлементКАТ.Упаковка.НаименованиеСокращенное]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.ФирмаПроизводитель]), "" "" + [ЭлементКАТ.ФирмаПроизводитель], """")'");
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Функция ШаблонНаименованияДляПечатиНоменклатуры()
	
	Шаблон = НСтр("ru = '[ЭлементКАТ.НаименованиеПолное]+ "", "" + [ЭлементКАТ.ФирмаПроизводитель]'");
	
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Процедура ОчиститьВладельца(ЗначащаяЧастьИмениНадписи)
	
	Объект["Владелец" + ЗначащаяЧастьИмениНадписи] = Неопределено;
	ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи);
	Результат = Вычислить("УстановитьВидимостьДоступностьНастроек" + ЗначащаяЧастьИмениНадписи + "()");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкуВладелец(ЗначащаяЧастьИмениНадписи)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекущаяНастройка", Объект.Ссылка);
	ОтборФормыВыбора = Новый Структура;
	ОтборФормыВыбора.Вставить("ТипНоменклатуры", Объект.ТипНоменклатуры);
	
	Если ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		ОтборФормыВыбора.Вставить("НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры", Ложь);
		ОтборФормыВыбора.Вставить("ИспользоватьСерии"                             , Истина);
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Партий" Тогда
		ОтборФормыВыбора.Вставить("ИспользоватьПартии"                             , Истина);
		ОтборФормыВыбора.Вставить("НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры", Ложь);
	КонецЕсли;
	
	ПараметрыФормыВыбора.Вставить("Отбор", ОтборФормыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначащаяЧастьИмениНадписи", ЗначащаяЧастьИмениНадписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНастройкуВладелецЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Справочник.НастройкиКатегорийНоменклатуры.Форма.ФормаВыбора",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ВыбратьНастройкуВладелец
//
&НаКлиенте
Процедура ВыбратьНастройкуВладелецЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект["Владелец" + ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи] = Результат;
		ВыбратьНастройкуВладелецСервер(ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьНастройкуВладелецСервер(ЗначащаяЧастьИмениНадписи)
	
	ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи);
	
	Если ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		УстановитьВидимостьДоступностьНастроекСерий();
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Партий" Тогда
		УстановитьВидимостьДоступностьНастроекПартий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНастроекКатегорийНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи)
	
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	СписокВидов = ЭтотОбъект["НастройкиКатегорийНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи];
	НастройкаВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
	
	Если Не Особенности.ЭтаНастройкаСамаЯвляетсяВладельцем
	   И Не ЗначениеЗаполнено(НастройкаВладелец)
	 Или Не Особенности.НуженТекстВНадписи Тогда
		СписокВидов.Очистить();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиКатегорийНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиКатегорийНоменклатуры КАК НастройкиКатегорийНоменклатуры
	|ГДЕ
	|	&РеквизитВладелец = &НастройкаВладелец
	|	И &НастройкаВладелец <> ЗНАЧЕНИЕ(Справочник.НастройкиКатегорийНоменклатуры.ПустаяСсылка)
	|	И НастройкиКатегорийНоменклатуры.Ссылка <> &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелец", "НастройкиКатегорийНоменклатуры.Владелец" + ЗначащаяЧастьИмениНадписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если Особенности.ЭтаНастройкаСамаЯвляетсяВладельцем Тогда
		Запрос.УстановитьПараметр("НастройкаВладелец", Объект.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("НастройкаВладелец", НастройкаВладелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СписокВидов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Функция ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи)
	
	Особенности = Новый Структура;
	
	Особенности.Вставить("ЭтаНастройкаСамаЯвляетсяВладельцем", Ложь);
	Особенности.Вставить("НуженТекстВНадписи"          , Ложь);
	Особенности.Вставить("МожноРедактироватьВладельца" , Ложь);
	
	Если ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		
		Если Не Объект.НастройкиСерийБерутсяИзДругихНастроекКатегорийНоменклатуры Тогда
			Особенности.ЭтаНастройкаСамаЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = Объект.ИспользоватьСерии;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ВариантЗаданияНастроекСерий.ТолькоПросмотр;
		
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Партий" Тогда
		
		Если Не Объект.НастройкиПартийБерутсяИзДругихНастроекКатегорийНоменклатуры Тогда
			Особенности.ЭтаНастройкаСамаЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = Объект.ИспользоватьПартии;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ВариантЗаданияНастроекПартий.ТолькоПросмотр;
		
	КонецЕсли;
	
	Возврат Особенности;
КонецФункции

&НаСервере
Процедура СформироватьНадписьПоВидуВладельцу(ЗначащаяЧастьИмениНадписи);
	
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	МассивСтрок = Новый Массив;
	Если Особенности.НуженТекстВНадписи Тогда
		
		СписокНастроек = ЭтотОбъект["НастройкиКатегорийНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи];
		ПредставлениеКоличестваНастроек = "";
		
		Если Особенности.ЭтаНастройкаСамаЯвляетсяВладельцем Тогда
			
			Если СписокНастроек.Количество() > 0 Тогда
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'и еще'"));
				МассивСтрок.Добавить(" ");
				ПредставлениеКоличестваНастроек = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1-й настройки;;%1-х настроек;%1-и настроек;%1 настроек'"), СписокНастроек.Количество());
			КонецЕсли;
			
		Иначе
			
			НастройкаВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
			
			Если Не ЗначениеЗаполнено(НастройкаВладелец) Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<настройка не выбрана>'"),,ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выбрать'"),,,, "ИзменитьВладельца" + ЗначащаяЧастьИмениНадписи));
			Иначе
				
				ПредставлениеВида = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПредставлениеСтрокиСДлинойНеБолее(Строка(НастройкаВладелец), 40);
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВида,,,, "ОткрытьВладельца" + ЗначащаяЧастьИмениНадписи));
				
				Если Особенности.МожноРедактироватьВладельца Тогда
					МассивСтрок.Добавить(" (");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,, "ИзменитьВладельца" + ЗначащаяЧастьИмениНадписи));
					МассивСтрок.Добавить(")");
				КонецЕсли;
				
				Если СписокНастроек.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru = 'и еще с'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваНастроек = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1-й настройкой;;%1-я настройками;%1-и настройками;%1 настройками'"), СписокНастроек.Количество());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеКоличестваНастроек) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ПредставлениеКоличестваНастроек,
				,
				,
				,
				"ОткрытьСписокНастроекСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи));
		КонецЕсли;
	КонецЕсли;
	
	Элементы["Владелец" + ЗначащаяЧастьИмениНадписи].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиНадписиПоНастройкеВладельцу(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылкаПриведенная = СтрЗаменить(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, "");
	
	Если НавигационнаяСсылкаПриведенная = "ОткрытьВладельца" Тогда
		ПоказатьЗначение(, Объект["Владелец" + ЗначащаяЧастьИмениНадписи]);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ИзменитьВладельца" Тогда
		ВыбратьНастройкуВладелец(ЗначащаяЧастьИмениНадписи);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ОткрытьСписокНастроекСТемЖеВладельцем" Тогда
		ПоказатьЗначение(, ЭтотОбъект["НастройкиКатегорийНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи]);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестная навигационная ссылка.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеТипыНоменклатуры()
	
	Если Не ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ТипыНоменклатурыРасширенные
	|ГДЕ
	|	ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|");
	
	Элементы.ТипНоменклатуры.РежимВыбораИзСписка = Истина;
	Элементы.ТипНоменклатуры.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если Не Объект.Ссылка.Пустая()
	   И ЗначениеЗаполнено(Объект.ТипНоменклатурыРасширенный)
	   И Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатурыРасширенный) = Неопределено Тогда
		Элементы.ТипНоменклатуры.СписокВыбора.Добавить(Объект.ТипНоменклатурыРасширенный);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыДанныхНаборамиСвойств(ПараметрыДанных, ЭтоШаблонНоменклатуры)
	
	Если ЭтоШаблонНоменклатуры Тогда
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_Номенклатура_Общие"                , НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_Номенклатура_ЛекарственныеСредства", НаборСвойствПоИмени("Справочник_Номенклатура_ЛекарственныеСредства"));
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_Номенклатура_Прочая"               , НаборСвойствПоИмени("Справочник_Номенклатура_Прочая"));
	Иначе
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_СерииНоменклатуры_Общие", НаборСвойствПоИмени("Справочник_СерииНоменклатуры_Общие"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НаборСвойствПоИмени(ИмяНабора)
	
	Возврат УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
