////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Код");
	Поля.Добавить("Описание");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Не Данные.Ссылка.Пустая() Тогда
		Представление = Данные.Код + ", " + Данные.Описание;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

Функция ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Экспорт
	
	Возврат "medProducts";
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных из файла

Функция ПолучитьТаблицуКлассификатора()
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("Код"         , ОбщегоНазначения.ОписаниеТипаСтрока(8));
	ДанныеКлассификатора.Колонки.Добавить("КодСлужебный", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	ДанныеКлассификатора.Колонки.Добавить("Описание"    , Новый ОписаниеТипов("Строка"));
	ДанныеКлассификатора.Колонки.Добавить("Отменен"     , Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("КодМинздрава", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьРазделыМедицинскихИзделийИзФайлов(ФайлыКлассификатора) Экспорт
	
	ДанныеКлассификатора = ПолучитьТаблицуКлассификатора();
	
	Для Каждого МетаданныеФайла Из ФайлыКлассификатора Цикл
		
		Если ЭтоФайлНоменклатурыМедИзделий(МетаданныеФайла.Файл) Тогда
			
			Значение = ПреобразоватьJSONВЗначение(МетаданныеФайла.Файл);
			
			Если Значение.Свойство("GRP") Тогда
				ПолучитьЭлементыРазделовМедицинскихИзделий(Значение.GRP, ДанныеКлассификатора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКлассификатора.Сортировать("КодСлужебный");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ПолучитьЭлементыРазделовМедицинскихИзделий(СписокЭлементовКТРУ, ДанныеКлассификатора)
	
	Для Каждого Элемент Из СписокЭлементовКТРУ Цикл
		
		ОписаниеРаздела = ДанныеКлассификатора.Добавить();
		ОписаниеРаздела.Код          = Элемент.code;
		ОписаниеРаздела.Описание     = Элемент.description;
		ОписаниеРаздела.КодМинздрава = Формат(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "frmo_id", 0), "ЧГ=0");
		
		КодСлужебный = "";
		Для Каждого ЧастьКода Из СтрРазделить(ОписаниеРаздела.Код, ".") Цикл
			КодСлужебный = КодСлужебный + ?(ПустаяСтрока(КодСлужебный), "", "_") + Прав("00" + ЧастьКода, 2);
		КонецЦикла;
		
		ОписаниеРаздела.КодСлужебный = КодСлужебный;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Сопоставление полученных данных

Функция СопоставитьЗагружаемыеДанные(ИсходныеДанные, Настройки = Неопределено, ФиксированныеОтборы = Неопределено) Экспорт
	
	// Формируем сгруппированные объединенные данные классификатора и справочника ИБ.
	Схема = ПолучитьМакет("СхемаОбъединенияДанныхПриЗагрузке");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.НастройкиПоУмолчанию,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("Данные", ИсходныеДанные));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
	
	ДанныеКлассификатора = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ДанныеКлассификатора.Колонки.Найти("СистемныеПоляНомерПоПорядку").Имя = "НомерСтроки";
	
	// Устанавливаем фильтры на сгруппированные данные.
	Если ФиксированныеОтборы <> Неопределено Или Настройки <> Неопределено Тогда
		
		Схема = ПолучитьМакет("СхемаФильтрацииДанныхПриЗагрузке");
		
		Если ФиксированныеОтборы <> Неопределено Тогда
			
			КомпоновщикЗагрузки = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикЗагрузки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
			КомпоновщикЗагрузки.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
			
			Для Каждого ФиксированныйОтбор Из ФиксированныеОтборы Цикл
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					КомпоновщикЗагрузки.ФиксированныеНастройки.Отбор,
					ФиксированныйОтбор.ЛевоеЗначение,
					ФиксированныйОтбор.ВидСравнения,
					ФиксированныйОтбор.ПравоеЗначение);
			КонецЦикла;
			
			КомпоновщикЗагрузки.Восстановить();
			Настройки = КомпоновщикЗагрузки.ПолучитьНастройки();
			
		ИначеЕсли Настройки = Неопределено Тогда
			Настройки = Схема.НастройкиПоУмолчанию;
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("Данные", ДанныеКлассификатора));
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
		
		ДанныеКлассификатора = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		ДанныеКлассификатора.Колонки.Найти("СистемныеПоляНомерПоПорядку").Имя = "НомерСтроки";
		
	КонецЕсли;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Загрузка данных из файла

Функция ЗагрузитьРазделыМедицинскихИзделий(ДанныеКлассификатора) Экспорт
	
	Результат = Новый Структура("Создано, Обновлено, Ошибки, Объекты", 0, 0, Новый Массив, Новый Соответствие);
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		Результат.Объекты.Вставить(ЭлементДанных.Код, ЭлементДанных.РазделМедицинскихИзделий);
		
		ЭтоНовый = Не ЗначениеЗаполнено(ЭлементДанных.РазделМедицинскихИзделий);
		
		НачатьТранзакцию();
		Попытка
			
			Если ЭтоНовый Тогда
				ЗагрузитьНовыйРазделМедицинскихИзделий(ЭлементДанных, Результат);
			Иначе
				ОбновитьСуществующийРазделМедицинскихИзделий(ЭлементДанных, Результат);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = НСтр("ru = 'Загрузка данных справочника Разделы номенклатурной классификации медицинских изделий по видам'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			Текст = НСтр("ru = 'Не удалось записать Раздел ""%1"" по причине:'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ЭлементДанных.Код);
			
			ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам,, ТекстЖурналаРегистрации);
			
			Результат.Ошибки.Добавить(ТестСообщенияПользователю);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьНовыйРазделМедицинскихИзделий(ЭлементДанных, Результат)
	
	РазделОбъект = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(РазделОбъект, ЭлементДанных);
	
	КодРодителя = Лев(РазделОбъект.Код, СтрНайти(РазделОбъект.Код, ".", НаправлениеПоиска.СКонца) - 1);
	Если ЗначениеЗаполнено(КодРодителя) Тогда
		Родитель = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.НайтиПоКоду(КодРодителя);
		Если Родитель.Пустая() Тогда
			КодРодителя = Лев(КодРодителя, СтрНайти(КодРодителя, ".", НаправлениеПоиска.СКонца) - 1);
			Если ЗначениеЗаполнено(КодРодителя) Тогда
				Родитель = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.НайтиПоКоду(КодРодителя);
			КонецЕсли;
		КонецЕсли;
		РазделОбъект.Родитель = Родитель;
	КонецЕсли;
	
	РазделОбъект.Записать();
	
	Результат.Создано = Результат.Создано + 1;
	Результат.Объекты.Вставить(ЭлементДанных.Код, РазделОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьСуществующийРазделМедицинскихИзделий(ЭлементДанных, Результат)
	
	РазделОбъект = ЭлементДанных.РазделМедицинскихИзделий.ПолучитьОбъект();
	ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(РазделОбъект);
	
	Если Не ЭлементДанных.Отменен Тогда
		
		Если ЭлементДанных.Описание <> РазделОбъект.Описание
		 Или ЭлементДанных.Отменен <> РазделОбъект.Отменен
		 Или ЭлементДанных.КодМинздрава <> РазделОбъект.КодМинздрава Тогда
			ЗаполнитьЗначенияСвойств(РазделОбъект, ЭлементДанных);
		КонецЕсли;
		
	ИначеЕсли РазделОбъект.Отменен <> ЭлементДанных.Отменен Тогда
		РазделОбъект.Отменен = ЭлементДанных.Отменен;
	КонецЕсли;
	
	Если РазделОбъект.Модифицированность() Тогда
		РазделОбъект.Записать();
		Результат.Обновлено = Результат.Обновлено + 1;
	КонецЕсли;
	РазделОбъект.Разблокировать();
	
	Результат.Объекты.Вставить(ЭлементДанных.Код, РазделОбъект.Ссылка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ПреобразоватьJSONВЗначение(Файл)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(Файл.ПолноеИмя);
	
	Значение = ПрочитатьJSON(Чтение, Ложь);
	
	Возврат Значение;
	
КонецФункции

Функция ЭтоФайлНоменклатурыМедИзделий(Файл)
	
	Возврат СтрНачинаетсяС(ВРег(Файл.ИмяБезРасширения), ВРег(ИдентификаторКлассификатораВСервисеИнтернетПоддержки()));
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
