
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИдентификаторКлассификатораВСервисеИнтернетПоддержки = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
	
	ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки();
	
	ПриИзмененииИсточникаДанных();
	
	ТекущийКодРаздела = "0";
	РазмерПорции = 20;
	
	Схема = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ПолучитьМакет("СхемаФильтрацииДанныхПриЗагрузке");
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	КлассификацияМИПоВидамПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПриИзмененииИсточникаДанных();
	
	КлассификацияМИПоВидамПереопределяемый.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ПриИзмененииИсточникаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКДаннымНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачатьВыборФайлаДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
	ОтобразитьДанныеПоОтбору();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерПорцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РазмерПорции = ВыбранноеЗначение Или Классификатор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПорции = ВыбранноеЗначение;
	
	ПодключитьОбработчикОжидания("ОбновитьПорциюДанныхПоРазмеру", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераПорцийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовыйНомерПорции = Число(НавигационнаяСсылкаФорматированнойСтроки);
	Если ТекущийНомерПорции = НовыйНомерПорции Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьПорциюДанных(НовыйНомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтобразитьДанныеПоРазделу", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеКлассификатора(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьКлассификатор(Команда)
	
	Если ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки() Тогда
		ПолучитьДанныеКлассификатора();
	ИначеЕсли ИсточникДанных = ИсточникДанных_ФайловаяСистема() Тогда
		// Всегда обновляем файл из файловой системы в АдресФайлаНаСервере, т.к. файл может измениться.
		НачатьВыборФайлаДанных(Не ЗначениеЗаполнено(ПутьКДанным));
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификатор(Команда)
	
	ВыделенныеСтроки = Элементы.Классификатор.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеКлассификатора(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	КлассификацияМИПоВидамКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// Получение файла классификатора
#Область ПолучениеФайлаКлассификатора

&НаКлиенте
Процедура НачатьВыборФайлаДанных(Интерактивно = Истина)
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Интерактивно = Интерактивно;
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = '*.zip|*.zip|*.json|*.json'");
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Файл классификатора'");
	ПараметрыЗагрузки.Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьВыборФайлаДанных", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповестить, ПараметрыЗагрузки, ПутьКДанным, АдресФайлаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаДанных(ПомещенныйФайл, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайлаНаСервере = ПомещенныйФайл.Хранение;
	ПутьКДанным         = ПомещенныйФайл.Имя;
	
	ПолучитьДанныеКлассификатора();
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Получение данных классификатора
#Область ПолучениеДанныхКлассификатора

&НаКлиенте
Процедура ПолучитьДанныеКлассификатора()
	
	ОчиститьСообщения();
	
	ОтобразитьИнформациюПользователю("НачалоРаботыСДанными");
	
	ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатораОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеКлассификатораОтложенно()
	
	РезультатПолученияАдреса = ПолучитьАдресДанныхКлассификатораНаСервере();
	АдресДанныхКлассификатора = РезультатПолученияАдреса.АдресДанныхКлассификатора;
	Если Не ЭтоАдресВременногоХранилища(АдресДанныхКлассификатора) Тогда
		ОтобразитьИнформациюПользователю("АдресДанныхКлассификатораНаСервереНеПолучен", РезультатПолученияАдреса.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьДанныеКлассификатораВФоне(АдресДанныхКлассификатора);
	
	НачатьОжиданиеПолученияКлассификатора(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДанныхКлассификатораНаСервере()
	
	Если ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки() Тогда
		
		РезультатПолученияАдреса = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
		
		РезультатОбработки = РаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКлассификатораВСервисеИнтернетПоддержки));
		Если Не ЗначениеЗаполнено(РезультатОбработки.КодОшибки) Тогда
			
			СтрокаСДанными = РезультатОбработки.ДанныеКлассификаторов.Найти(ИдентификаторКлассификатораВСервисеИнтернетПоддержки, "Идентификатор");
			Если СтрокаСДанными <> Неопределено Тогда
				
				ОписаниеДанныхКлассификатора = Новый Структура;
				ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(СтрокаСДанными.АдресФайла));
				ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", "ZIP");
				
				РезультатПолученияАдреса.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
				
				УдалитьИзВременногоХранилища(СтрокаСДанными.АдресФайла);
				
			КонецЕсли;
			
		Иначе
			
			РезультатПолученияАдреса.СообщениеОбОшибке = РезультатОбработки.СообщениеОбОшибке;
			
			ИмяСобытия = НСтр("ru = 'Загрузка файлов классификатора из сервиса интернет-поддержки'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам,, РезультатОбработки.ИнформацияОбОшибке);
			
		КонецЕсли;
		
		Возврат РезультатПолученияАдреса;
		
	ИначеЕсли ИсточникДанных = ИсточникДанных_ФайловаяСистема() Тогда
		
		РезультатПолученияАдреса = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
		
		Если Не ЭтоАдресВременногоХранилища(АдресФайлаНаСервере) Тогда
			РезультатПолученияАдреса.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить файл из файловой системы.'");
			Возврат РезультатПолученияАдреса;
		КонецЕсли;
		
		ОписаниеДанныхКлассификатора = Новый Структура;
		ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(АдресФайлаНаСервере));
		ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", ВРег(Сред(ПутьКДанным, СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца) + 1)));
		
		РезультатПолученияАдреса.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
		
		Возврат РезультатПолученияАдреса;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Получение данных Классификатора в фоне

&НаСервере
Функция ПолучитьДанныеКлассификатораВФоне(Знач АдресДанныхКлассификатора)
	
	ПараметрыПроцедуры = ПолучитьИзВременногоХранилища(АдресДанныхКлассификатора);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение классификатора.'");
	
	ИмяПроцедуры = "Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ПолучитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеПолученияКлассификатора(ДлительнаяОперация)
	
	ОтобразитьИнформациюПользователю("ОжиданиеПолученияДанныхИзФайла");
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьОжиданиеПолученияКлассификатора", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОжиданиеПолученияКлассификатора(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗакончитьОжиданиеПолученияКлассификатораНаСервере(РезультатДлительнойОперации.АдресРезультата);
		ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	Исключение
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОжиданиеПолученияКлассификатораНаСервере(Знач АдресРезультата)
	
	РезультатПолучения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	АдресИсходныхДанных         = ПоместитьВоВременноеХранилище(РезультатПолучения.ДанныеКлассификатора, УникальныйИдентификатор);
	АдресИсходныхДанныхРазделов = ПоместитьВоВременноеХранилище(РезультатПолучения.ДанныеРазделовМедицинскихИзделий, УникальныйИдентификатор);
	
	Если Не ЗначениеЗаполнено(РезультатПолучения.ДанныеРазделовМедицинскихИзделий) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.СопоставитьЗагружаемыеДанные(РезультатПолучения.ДанныеРазделовМедицинскихИзделий);
	
	ЭлементыРаздела = Разделы.ПолучитьЭлементы();
	ЭлементыРаздела.Очистить();
	
	ДеревоРазделов = РеквизитФормыВЗначение("Разделы");
	СтрокаВсеРазделы = ДеревоРазделов.Строки.Добавить();
	СтрокаВсеРазделы.Описание = НСтр("ru = 'Все разделы'");
	
	СтрокаРодителя = СтрокаВсеРазделы;
	Для Каждого СтрокаДанных Из ДанныеРазделовМедицинскихИзделий Цикл
		
		КодРодителя = Лев(СтрокаДанных.Код, СтрНайти(СтрокаДанных.Код, ".", НаправлениеПоиска.СКонца) - 1);
		Если СтрокаРодителя.Код <> КодРодителя Тогда
			
			СтрокаРодителя = Неопределено;
			Пока СтрокаРодителя = Неопределено И ЗначениеЗаполнено(КодРодителя) Цикл
				СтрокаРодителя = СтрокаВсеРазделы.Строки.Найти(КодРодителя, "Код", Истина);
				КодРодителя = Лев(КодРодителя, СтрНайти(КодРодителя, ".", НаправлениеПоиска.СКонца) - 1);
			КонецЦикла;
			
			Если СтрокаРодителя = Неопределено Тогда
				СтрокаРодителя = СтрокаВсеРазделы;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЭлемента = СтрокаРодителя.Строки.Добавить();
		СтрокаЭлемента.Код          = СтрокаДанных.Код;
		СтрокаЭлемента.КодСлужебный = СтрокаДанных.КодСлужебный;
		СтрокаЭлемента.Описание     = СтрокаДанных.Описание;
		СтрокаЭлемента.Раздел       = СтрокаДанных.РазделМедицинскихИзделий;
		СтрокаЭлемента.Отменен      = СтрокаДанных.Отменен;
		СтрокаЭлемента.КодМинздрава = СтрокаДанных.КодМинздрава;
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоРазделов, "Разделы");
	
	ЭлементыРаздела = Разделы.ПолучитьЭлементы();
	Если ЭлементыРаздела.Количество() > 0 Тогда
		Элементы.Разделы.ТекущаяСтрока = ЭлементыРаздела[0].ПолучитьИдентификатор(); // Возникает событие РазделыПриАктивизацииСтроки.
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти // ПолучениеДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Загрузка данных Классификатора
#Область ЗагрузкаДанныхКлассификатора

&НаКлиенте
Процедура ЗагрузитьДанныеКлассификатора(ИдентификаторыСтрок)
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодыКлассификатораКЗагрузке = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если КодыКлассификатораКЗагрузке.Найти(ДанныеСтроки.Код) = Неопределено Тогда
			КодыКлассификатораКЗагрузке.Добавить(ДанныеСтроки.Код);
		КонецЕсли;
		
	КонецЦикла;
	
	ДлительнаяОперация = ЗагрузитьДанныеКлассификатораВФоне(КодыКлассификатораКЗагрузке);
	
	НачатьОжиданиеЗагрузкиКлассификатора(ДлительнаяОперация, ИдентификаторыСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных Классификатора в фоне

&НаСервере
Функция ЗагрузитьДанныеКлассификатораВФоне(Знач КодыКлассификатораКЗагрузке)
	
	ДанныеПоРазделу = ПолучитьИзВременногоХранилища(АдресИсходныхДанных);
	
	ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Код", ВидСравненияКомпоновкиДанных.ВСписке, КодыКлассификатораКЗагрузке);
	ДанныеКлассификатора = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.СопоставитьЗагружаемыеДанные(ДанныеПоРазделу,, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор));
	ДанныеРазделовМедицинскихИзделий = ПолучитьИзВременногоХранилища(АдресИсходныхДанныхРазделов);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
	ПараметрыПроцедуры.Вставить("ДанныеРазделовМедицинскихИзделий", ДанныеРазделовМедицинскихИзделий);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка классификатора.'");
	
	ИмяПроцедуры = "Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ЗагрузитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеЗагрузкиКлассификатора(ДлительнаяОперация, ИдентификаторыСтрок)
	
	ОтобразитьИнформациюПользователю("ОжиданиеЗагрузкиДанныхИзФайла");
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьОжиданиеЗагрузкиКлассификатора", ЭтотОбъект, ИдентификаторыСтрок);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОжиданиеЗагрузкиКлассификатора(РезультатДлительнойОперации, ИдентификаторыСтрок) Экспорт
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(РезультатДлительнойОперации.АдресРезультата);
	
	Если РезультатЗагрузки.Ошибки.Количество() > 0 Тогда
		Для Каждого Ошибка Из РезультатЗагрузки.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	Если ТекущиеДанные.Код = ТекущийКодРаздела Тогда
		
		ЗакончитьОжиданиеЗагрузкиКлассификатораНаСервере(РезультатЗагрузки.Объекты);
		
		Если ИдентификаторыСтрок.Количество() = 1 Тогда
			ДанныеСтроки = Классификатор.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
			Если ДанныеСтроки <> Неопределено И ЗначениеЗаполнено(ДанныеСтроки.МедицинскоеИзделие) Тогда
				ПоказатьЗначение(, ДанныеСтроки.МедицинскоеИзделие);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Пояснения = Новый Массив;
	Если РезультатЗагрузки.Создано > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Создано: [Создано]'"));
	КонецЕсли;
	
	Если РезультатЗагрузки.Обновлено > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обновлено: [Обновлено]'"));
	КонецЕсли;
	
	Если Пояснения.Количество() = 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обработано: 0'"));
	КонецЕсли;
	
	Пояснение = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(СтрСоединить(Пояснения, Символы.ПС), РезультатЗагрузки);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Данные обработаны'"),, Пояснение, БиблиотекаКартинок.Информация32);
	
	ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОжиданиеЗагрузкиКлассификатораНаСервере(ЗагруженныеКлассификаторы)
	
	ОтобранныеДанные = ПолучитьИзВременногоХранилища(АдресОтобранныхДанных);
	Для Каждого Элемент Из ОтобранныеДанные Цикл
		МедицинскоеИзделие = ЗагруженныеКлассификаторы.Получить(Элемент.Код);
		Если ЗначениеЗаполнено(МедицинскоеИзделие) Тогда
			Элемент.МедицинскоеИзделие = МедицинскоеИзделие;
		КонецЕсли;
	КонецЦикла;
	АдресОтобранныхДанных = ПоместитьВоВременноеХранилище(ОтобранныеДанные, УникальныйИдентификатор);
	
	Для Каждого Элемент Из Классификатор Цикл
		МедицинскоеИзделие = ЗагруженныеКлассификаторы.Получить(Элемент.Код);
		Если ЗначениеЗаполнено(МедицинскоеИзделие) Тогда
			Элемент.МедицинскоеИзделие = МедицинскоеИзделие;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Отображение данных Классификатора по отбору
#Область ОтображениеДанныхКлассификатораПоОтбору

&НаКлиенте
Процедура ОтобразитьДанныеПоРазделу()
	
	ТекущиеДанные = Элементы.Разделы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.Код = ТекущийКодРаздела Тогда // Текущие данные могли не поменяться.
		Возврат;
	КонецЕсли;
	
	ТекущийКодРаздела = ТекущиеДанные.Код;
	
	ОтобразитьДанныеПоОтбору();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеПоОтбору()
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресИсходныхДанных);
	
	Компоновщик.Восстановить();
	Настройки = Компоновщик.ПолучитьНастройки();
	
	ОтобранныеДанные = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.СопоставитьЗагружаемыеДанные(ИсходныеДанные, Настройки);
	
	ОтфильтроватьОтобранныеДанныеПоРазделу(ОтобранныеДанные);
	
	АдресОтобранныхДанных = ПоместитьВоВременноеХранилище(ОтобранныеДанные, УникальныйИдентификатор);
	
	ОтобразитьПорциюДанных(1);
	
КонецПроцедуры

&НаСервере
Процедура ОтфильтроватьОтобранныеДанныеПоРазделу(ОтобранныеДанные)
	
	Если ЗначениеЗаполнено(ТекущийКодРаздела) Тогда
		
		// Фильтрация данных.
		Граница = ОтобранныеДанные.Количество() - 1;
		Для Индекс = 0 По Граница Цикл
			
			СтрокаДанных = ОтобранныеДанные[Граница - Индекс];
			
			СтрокаДанныхТекущегоРаздела = ЗначениеЗаполнено(СтрокаДанных.Разделы) И СтрокаДанных.Разделы.Найти(ТекущийКодРаздела) <> Неопределено
				Или ЗначениеЗаполнено(СтрокаДанных.РазделыИБ) И СтрокаДанных.РазделыИБ.Найти(ТекущийКодРаздела) <> Неопределено;
			
			Если Не СтрокаДанныхТекущегоРаздела Тогда
				ОтобранныеДанные.Удалить(СтрокаДанных);
			КонецЕсли;
			
		КонецЦикла;
		
		// Перенумерация данных.
		Для Индекс = 0 По ОтобранныеДанные.Количество() - 1 Цикл
			СтрокаДанных = ОтобранныеДанные[Индекс];
			СтрокаДанных.НомерСтроки = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОтображениеДанныхКлассификатораПоОтбору


////////////////////////////////////////////////////////////////////////////////
// Вывод порций данных Классификатора
#Область ВыводПорцийДанныхКлассификатора

&НаКлиенте
Процедура ОбновитьПорциюДанныхПоРазмеру()
	
	ОтобразитьПорциюДанных(1);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПорциюДанных(Знач НомерПорции)
	
	ОтобранныеДанные = ПолучитьИзВременногоХранилища(АдресОтобранныхДанных);
	КоличествоЭлементов = ОтобранныеДанные.Количество();
	
	НомераПорций = ПредставлениеНомеровПорций(КоличествоЭлементов, РазмерПорции, НомерПорции, 4);
	
	ПорцияДанных = ПолучитьПорциюДанных(ОтобранныеДанные, РазмерПорции, НомерПорции);
	
	ЗначениеВРеквизитФормы(ПорцияДанных, "Классификатор");
	
	ТекущийНомерПорции = НомерПорции;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНомеровПорций(КоличествоЭлементов, РазмерПорции, НомерПорции, КоличествоВидимыхПорцийСнизуСверху)
	
	ВсегоПорций = Макс(Окр(КоличествоЭлементов / РазмерПорции + 0.5, 0, РежимОкругления.Окр15как10), 1);
	
	НижнийПредел  = Макс(Мин(НомерПорции + КоличествоВидимыхПорцийСнизуСверху, ВсегоПорций) - КоличествоВидимыхПорцийСнизуСверху * 2, 1);
	ВерхнийПредел = Мин(Макс(НомерПорции - КоличествоВидимыхПорцийСнизуСверху, 1) + КоличествоВидимыхПорцийСнизуСверху * 2, ВсегоПорций);
	
	СписокНомеровПорций = Новый Массив;
	Для Счетчик = 1 По ВсегоПорций Цикл
		
		Если Счетчик >= НижнийПредел И Счетчик <= ВерхнийПредел Тогда
			Шрифт = ?(Счетчик = НомерПорции, Новый Шрифт(, 12, Истина), Неопределено);
			Содержимое = Новый ФорматированнаяСтрока(Строка(Счетчик) + " ", Шрифт,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = 1 Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В начало'"),,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = ВсегоПорций Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В конец'"),,,, Строка(Счетчик));
		Иначе
			Продолжить;
		КонецЕсли;
		
		СписокНомеровПорций.Добавить(Содержимое);
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(СписокНомеровПорций);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПорциюДанных(Таблица, РазмерПорции, НомерПорции)
	
	КоличествоЭлементов = Таблица.Количество();
	
	НижнийПредел  = Мин(РазмерПорции, КоличествоЭлементов) * (НомерПорции - 1);
	ВерхнийПредел = Мин(Мин(РазмерПорции, КоличествоЭлементов) * НомерПорции, КоличествоЭлементов);
	
	ПорцияДанных = Таблица.СкопироватьКолонки();
	Для Счетчик = НижнийПредел По ВерхнийПредел - 1 Цикл
		ЗаполнитьЗначенияСвойств(ПорцияДанных.Добавить(), Таблица[Счетчик]);
	КонецЦикла;
	
	Возврат ПорцияДанных;
	
КонецФункции

#КонецОбласти // ВыводПорцийДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Шрифт строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.МедицинскоеИзделие", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
	// Цвет текста строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.Отменен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Цвет текста строк таблицы Разделы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Разделы.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Разделы.Отменен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнформациюПользователю(Вариант, Уточнение = "")
	
	Если Вариант = "НачалоРаботыСДанными" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		
	ИначеЕсли Вариант = "АдресДанныхКлассификатораНаСервереНеПолучен" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		Текст = НСтр("ru = 'Не удалось получить файл классификатора по причине:'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст + Символы.ПС + Уточнение);
		
	ИначеЕсли Вариант = "ДинамическаяОшибка" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Уточнение);
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	ИначеЕсли Вариант = "ОжиданиеПолученияДанныхИзФайла" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииПолучениеДанныхИхФайла;
		Элементы.ОсновнаяПанель.Доступность = Ложь;
		
	ИначеЕсли Вариант = "ВыборКлассификатора" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборКлассификатора;
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	ИначеЕсли Вариант = "ОжиданиеЗагрузкиДанныхИзФайла" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииЗагрузкиДанныхИхФайла;
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Некорректно указан вариант отображения информации пользователю.'");
		
	КонецЕсли;
	
	Элементы.ПутьКДанным.ТолькоПросмотр = ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсточникаДанных()
	
	ИсточникДанных_СервисИнтернетПоддержки = ИсточникДанных = ИсточникДанных_СервисИнтернетПоддержки();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ПутьКДанным.Имя, "ТолькоПросмотр", ИсточникДанных_СервисИнтернетПоддержки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанных_СервисИнтернетПоддержки()
	
	Возврат "СервисИнтернетПоддержки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанных_ФайловаяСистема()
	
	Возврат "ФайловаяСистема";
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
