#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает идентификатор классификатора в сервисе интернет поддержки.
// 
// Возвращаемое значение:
//  Строка - Идентификатор классификатора в сервисе интернет поддержки.
//
Функция ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Экспорт
	
	Возврат "medProducts";
	
КонецФункции

Функция ПолучитьФайлКлассификатораИзСервисаИнтернетПоддержки(УникальныйИдентификатор) Экспорт
	
	ИдентификаторКлассификатора = ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
	
	РезультатПолученияФайла = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
	
	РезультатОбработки = РаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКлассификатора));
	Если Не ЗначениеЗаполнено(РезультатОбработки.КодОшибки) Тогда
		
		СтрокаСДанными = РезультатОбработки.ДанныеКлассификаторов.Найти(ИдентификаторКлассификатора, "Идентификатор");
		Если СтрокаСДанными <> Неопределено Тогда
			
			ОписаниеДанныхКлассификатора = Новый Структура;
			ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(СтрокаСДанными.АдресФайла));
			ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", "ZIP");
			
			РезультатПолученияФайла.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
			
			УдалитьИзВременногоХранилища(СтрокаСДанными.АдресФайла);
			
		КонецЕсли;
		
	Иначе
		
		РезультатПолученияФайла.СообщениеОбОшибке = РезультатОбработки.СообщениеОбОшибке;
		
		ИмяСобытия = НСтр("ru = 'Загрузка файлов классификатора из сервиса интернет-поддержки'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам,, РезультатОбработки.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	Возврат РезультатПолученияФайла;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
	
	Описатель = МодульРаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'Номенклатурная классификация медицинских изделий по видам'");
	Описатель.Идентификатор          = ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	// Получение данных Классификатора.
	РезультатПолученияКлассификатора = ПолучитьДанныеКлассификатораИзАрхива(ИсходныеДанные);
	
	ЗагружатьПолностью = Ложь;
	КлассификацияМИПоВидамПереопределяемый.ЗагружатьКлассификаторПолностью(ЗагружатьПолностью);
	Если ЗагружатьПолностью Тогда
		РезультатПолученияКлассификатора.ДанныеКлассификатора = СопоставитьЗагружаемыеДанные(РезультатПолученияКлассификатора.ДанныеКлассификатора);
	Иначе
		// Фильтр Классификатора. Обрабатываются только ранее загруженные данные. Новые не создаются.
		ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "МедицинскоеИзделие", ВидСравненияКомпоновкиДанных.Заполнено, Неопределено);
		ФиксированныеОтборы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор);
		РезультатПолученияКлассификатора.ДанныеКлассификатора = СопоставитьЗагружаемыеДанные(РезультатПолученияКлассификатора.ДанныеКлассификатора,, ФиксированныеОтборы);
	КонецЕсли;
	
	// Загрузка данных Классификатора.
	РезультатЗагрузкиКлассификатора = ЗагрузитьПолученныеДанныеКлассификатора(РезультатПолученияКлассификатора);
	
	Обработан = РезультатЗагрузкиКлассификатора.Ошибки.Количество() = 0;
	
КонецПроцедуры

Процедура ПолучитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Если Параметры.ФорматДанных = "ZIP" Тогда
		РезультатПолученияКлассификатора = ПолучитьДанныеКлассификатораИзАрхива(Параметры.Данные);
		ПоместитьВоВременноеХранилище(РезультатПолученияКлассификатора, АдресРезультата);
	ИначеЕсли Параметры.ФорматДанных = "JSON" Тогда
		РезультатПолученияКлассификатора = ПолучитьДанныеКлассификатораИзДвоичныхДанных(Параметры.Данные, Параметры.ФорматДанных);
		ПоместитьВоВременноеХранилище(РезультатПолученияКлассификатора, АдресРезультата);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный формат файла.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	РезультатЗагрузкиКлассификатора = ЗагрузитьПолученныеДанныеКлассификатора(Параметры);
	ПоместитьВоВременноеХранилище(РезультатЗагрузкиКлассификатора, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных из файла

Функция ПолучитьТаблицуКлассификатора()
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("Код"                               , ОбщегоНазначения.ОписаниеТипаСтрока(6));
	ДанныеКлассификатора.Колонки.Добавить("Наименование"                      , ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеКлассификатора.Колонки.Добавить("КодВидаНоменклатурнойКлассификации", ОбщегоНазначения.ОписаниеТипаСтрока(13));
	ДанныеКлассификатора.Колонки.Добавить("Описание"                          , Новый ОписаниеТипов("Строка"));
	ДанныеКлассификатора.Колонки.Добавить("Разделы"                           , Новый ОписаниеТипов("Массив"));
	ДанныеКлассификатора.Колонки.Добавить("Отменен"                           , Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("КодМинздрава"                      , ОбщегоНазначения.ОписаниеТипаСтрока(9));
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьДанныеКлассификатораИзАрхива(ИсходныеДанные)
	
	Попытка
		
		КаталогФайлов = ФайловаяСистема.СоздатьВременныйКаталог();
		ИзвлечьФайлыИзАрхива(ИсходныеДанные, КаталогФайлов);
		
		ФайлыКлассификатора = ПолучитьФайлыКлассификатора(КаталогФайлов);
		
		ДанныеКлассификатора             = ПолучитьМедицинскиеИзделияИзФайлов(ФайлыКлассификатора);
		ДанныеРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.ПолучитьРазделыМедицинскихИзделийИзФайлов(ФайлыКлассификатора);
		
		РезультатПолученияКлассификатора = Новый Структура;
		РезультатПолученияКлассификатора.Вставить("ДанныеКлассификатора"            , ДанныеКлассификатора);
		РезультатПолученияКлассификатора.Вставить("ДанныеРазделовМедицинскихИзделий", ДанныеРазделовМедицинскихИзделий);
		
		ФайловаяСистема.УдалитьВременныйКаталог(КаталогФайлов);
		
		Возврат РезультатПолученияКлассификатора;
		
	Исключение
		
		Если КаталогФайлов <> Неопределено Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогФайлов);
		КонецЕсли;
		
		Текст = НСтр("ru = 'При чтении классификатора из архива ""%1"" произошла ошибка:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПустаяСсылка().Метаданные().Представление());
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение Текст;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьДанныеКлассификатораИзДвоичныхДанных(ДвоичныеДанные, ФорматДанных)
	
	Попытка
		
		КаталогФайлов = ФайловаяСистема.СоздатьВременныйКаталог();
		
		ДвоичныеДанные.Записать(КаталогФайлов + ИдентификаторКлассификатораВСервисеИнтернетПоддержки() + "." + ФорматДанных);
		
		ФайлыКлассификатора = ПолучитьФайлыКлассификатора(КаталогФайлов);
		
		ДанныеКлассификатора             = ПолучитьМедицинскиеИзделияИзФайлов(ФайлыКлассификатора);
		ДанныеРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.ПолучитьРазделыМедицинскихИзделийИзФайлов(ФайлыКлассификатора);
		
		РезультатПолученияКлассификатора = Новый Структура;
		РезультатПолученияКлассификатора.Вставить("ДанныеКлассификатора"            , ДанныеКлассификатора);
		РезультатПолученияКлассификатора.Вставить("ДанныеРазделовМедицинскихИзделий", ДанныеРазделовМедицинскихИзделий);
		
		ФайловаяСистема.УдалитьВременныйКаталог(КаталогФайлов);
		
		Возврат РезультатПолученияКлассификатора;
		
	Исключение
		
		Если КаталогФайлов <> Неопределено Тогда
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогФайлов);
		КонецЕсли;
		
		Текст = НСтр("ru = 'При чтении классификатора из файла ""%1"" произошла ошибка:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПустаяСсылка().Метаданные().Представление());
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение Текст;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьМедицинскиеИзделияИзФайлов(ФайлыКлассификатора) Экспорт
	
	ДанныеКлассификатора = ПолучитьТаблицуКлассификатора();
	
	Для Каждого МетаданныеФайла Из ФайлыКлассификатора Цикл
		
		Если ЭтоФайлНоменклатурыМедИзделий(МетаданныеФайла.Файл) Тогда
			
			Значение = ПреобразоватьJSONВЗначение(МетаданныеФайла.Файл);
			
			Если Значение.Свойство("classifierMedProducts") Тогда
				ПолучитьЭлементыМедицинскихИзделий(Значение.classifierMedProducts, ДанныеКлассификатора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКлассификатора.Сортировать("Код");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ПолучитьЭлементыМедицинскихИзделий(СписокЭлементовКТРУ, ДанныеКлассификатора)
	
	Для Каждого Элемент Из СписокЭлементовКТРУ Цикл
		
		ЭлементДанных = ДанныеКлассификатора.Добавить();
		ЭлементДанных.Код                                = Формат(Элемент.code, "ЧГ=0");
		ЭлементДанных.Наименование                       = Элемент.name;
		ЭлементДанных.КодВидаНоменклатурнойКлассификации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "marking521");
		ЭлементДанных.Описание                           = Элемент.description;
		ЭлементДанных.КодМинздрава                       = Формат(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент, "frmo_id", 0), "ЧГ=0");
		
		Если Элемент.Свойство("GRP") Тогда
			Для Каждого КодРаздела Из Элемент.GRP Цикл
				ЭлементДанных.Разделы.Добавить(КодРаздела);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление полученных данных

Функция СопоставитьЗагружаемыеДанные(ИсходныеДанные, Настройки = Неопределено, ФиксированныеОтборы = Неопределено) Экспорт
	
	// Формируем сгруппированные объединенные данные классификатора и справочника ИБ.
	Схема = ПолучитьМакет("СхемаОбъединенияДанныхПриЗагрузке");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.НастройкиПоУмолчанию,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("Данные", ИсходныеДанные));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
	
	ДанныеКлассификатора = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ДанныеКлассификатора.Колонки.Найти("СистемныеПоляНомерПоПорядку").Имя = "НомерСтроки";
	
	// Устанавливаем фильтры на сгруппированные данные.
	Если ФиксированныеОтборы <> Неопределено Или Настройки <> Неопределено Тогда
		
		Схема = ПолучитьМакет("СхемаФильтрацииДанныхПриЗагрузке");
		
		Если ФиксированныеОтборы <> Неопределено Тогда
			
			КомпоновщикЗагрузки = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикЗагрузки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
			КомпоновщикЗагрузки.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
			
			Для Каждого ФиксированныйОтбор Из ФиксированныеОтборы Цикл
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					КомпоновщикЗагрузки.ФиксированныеНастройки.Отбор,
					ФиксированныйОтбор.ЛевоеЗначение,
					ФиксированныйОтбор.ВидСравнения,
					ФиксированныйОтбор.ПравоеЗначение);
			КонецЦикла;
			
			КомпоновщикЗагрузки.Восстановить();
			Настройки = КомпоновщикЗагрузки.ПолучитьНастройки();
			
		ИначеЕсли Настройки = Неопределено Тогда
			Настройки = Схема.НастройкиПоУмолчанию;
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, Новый Структура("Данные", ДанныеКлассификатора));
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
		
		ДанныеКлассификатора = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		ДанныеКлассификатора.Колонки.Найти("СистемныеПоляНомерПоПорядку").Имя = "НомерСтроки";
		
	КонецЕсли;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных из файла

Функция ЗагрузитьПолученныеДанныеКлассификатора(Параметры)
	
	ДанныеКлассификатора             = Параметры.ДанныеКлассификатора;
	ДанныеРазделовМедицинскихИзделий = Параметры.ДанныеРазделовМедицинскихИзделий;
	
	// Получение только необходимых данных разделов номенклатуры медицинских изделий.
	КодыРазделовМедицинскихИзделий = Новый Массив;
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.Разделы) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КодыРазделовМедицинскихИзделий, ЭлементДанных.Разделы, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Код", ВидСравненияКомпоновкиДанных.ВСписке, КодыРазделовМедицинскихИзделий);
	ФиксированныеОтборы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор);
	ДанныеРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.СопоставитьЗагружаемыеДанные(ДанныеРазделовМедицинскихИзделий,, ФиксированныеОтборы);
	
	// Загрузка отобранных разделов номенклатуры медицинских изделий.
	РезультатЗагрузкиРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.ЗагрузитьРазделыМедицинскихИзделий(ДанныеРазделовМедицинскихИзделий);
	
	Обработан = РезультатЗагрузкиРазделовМедицинскихИзделий.Ошибки.Количество() = 0;
	Если Не Обработан Тогда
		РезультатЗагрузкиКлассификатора = Новый Структура("Ошибки", РезультатЗагрузкиРазделовМедицинскихИзделий.Ошибки);
		Возврат РезультатЗагрузкиКлассификатора;
	КонецЕсли;
	
	// Загрузка данных Классификатора.
	РезультатЗагрузкиКлассификатора = ЗагрузитьМедицинскиеИзделия(ДанныеКлассификатора, РезультатЗагрузкиРазделовМедицинскихИзделий.Объекты);
	
	Возврат РезультатЗагрузкиКлассификатора;
	
КонецФункции

Функция ЗагрузитьМедицинскиеИзделия(ДанныеКлассификатора, ЗагруженныеРазделыМедицинскихИзделий) Экспорт
	
	Результат = Новый Структура("Создано, Обновлено, Ошибки, Объекты", 0, 0, Новый Массив, Новый Соответствие);
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		Результат.Объекты.Вставить(ЭлементДанных.Код, ЭлементДанных.МедицинскоеИзделие);
		
		ЭтоНовый = Не ЗначениеЗаполнено(ЭлементДанных.МедицинскоеИзделие);
		
		НачатьТранзакцию();
		Попытка
			
			Если ЭтоНовый Тогда
				ЗагрузитьНовоеМедицинскоеИзделие(ЭлементДанных, ЗагруженныеРазделыМедицинскихИзделий, Результат);
			Иначе
				ОбновитьСуществующееМедицинскоеИзделие(ЭлементДанных, ЗагруженныеРазделыМедицинскихИзделий, Результат);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИмяСобытия = НСтр("ru = 'Загрузка данных справочника Номенклатурная классификация медицинских изделий по видам'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			Текст = НСтр("ru = 'Не удалось записать Номенклатуру медицинского изделия ""%1"" по причине:'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ЭлементДанных.Код);
			
			ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам,, ТекстЖурналаРегистрации);
			
			Результат.Ошибки.Добавить(ТестСообщенияПользователю);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьНовоеМедицинскоеИзделие(ЭлементДанных, ЗагруженныеРазделыМедицинскихИзделий, Результат)
	
	МедицинскоеИзделиеОбъект = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(МедицинскоеИзделиеОбъект, ЭлементДанных);
	
	Если ЗначениеЗаполнено(ЭлементДанных.Разделы) Тогда
		Для Каждого КодРаздела Из ЭлементДанных.Разделы Цикл
			Раздел = ЗагруженныеРазделыМедицинскихИзделий.Получить(КодРаздела);
			Если ЗначениеЗаполнено(Раздел) Тогда
				СтрокаРаздела = МедицинскоеИзделиеОбъект.Разделы.Добавить();
				СтрокаРаздела.Раздел = Раздел;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МедицинскоеИзделиеОбъект.Записать();
	
	Результат.Создано = Результат.Создано + 1;
	Результат.Объекты.Вставить(ЭлементДанных.Код, МедицинскоеИзделиеОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьСуществующееМедицинскоеИзделие(ЭлементДанных, ЗагруженныеРазделыМедицинскихИзделий, Результат)
	
	МедицинскоеИзделиеОбъект = ЭлементДанных.МедицинскоеИзделие.ПолучитьОбъект();
	ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(МедицинскоеИзделиеОбъект);
	
	Если Не ЭлементДанных.Отменен Тогда
		
		Если ЭлементДанных.Наименование <> МедицинскоеИзделиеОбъект.Наименование
		 Или ЭлементДанных.КодВидаНоменклатурнойКлассификации <> МедицинскоеИзделиеОбъект.КодВидаНоменклатурнойКлассификации
		 Или ЭлементДанных.Описание <> МедицинскоеИзделиеОбъект.Описание
		 Или ЭлементДанных.Отменен <> МедицинскоеИзделиеОбъект.Отменен
		 Или ЭлементДанных.КодМинздрава <> МедицинскоеИзделиеОбъект.КодМинздрава Тогда
			ЗаполнитьЗначенияСвойств(МедицинскоеИзделиеОбъект, ЭлементДанных);
		КонецЕсли;
		
		Если МедицинскоеИзделиеОбъект.Модифицированность() Тогда
			ЗагрузитьРазделыМедицинскогоИзделия(МедицинскоеИзделиеОбъект, ЗагруженныеРазделыМедицинскихИзделий, ЭлементДанных);
		Иначе
			ОбновитьРазделыМедицинскогоИзделия(МедицинскоеИзделиеОбъект, ЗагруженныеРазделыМедицинскихИзделий, ЭлементДанных);
		КонецЕсли;
		
	ИначеЕсли МедицинскоеИзделиеОбъект.Отменен <> ЭлементДанных.Отменен Тогда
		МедицинскоеИзделиеОбъект.Отменен = ЭлементДанных.Отменен;
	КонецЕсли;
	
	Если МедицинскоеИзделиеОбъект.Модифицированность() Тогда
		МедицинскоеИзделиеОбъект.Записать();
		Результат.Обновлено = Результат.Обновлено + 1;
	КонецЕсли;
	МедицинскоеИзделиеОбъект.Разблокировать();
	
	Результат.Объекты.Вставить(ЭлементДанных.Код, МедицинскоеИзделиеОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗагрузитьРазделыМедицинскогоИзделия(МедицинскоеИзделиеОбъект, ЗагруженныеРазделыМедицинскихИзделий, ЭлементДанных)
	
	МедицинскоеИзделиеОбъект.Разделы.Очистить();
	
	Если ЗначениеЗаполнено(ЭлементДанных.Разделы) Тогда
		Для Каждого КодРаздела Из ЭлементДанных.Разделы Цикл
			Раздел = ЗагруженныеРазделыМедицинскихИзделий.Получить(КодРаздела);
			Если ЗначениеЗаполнено(Раздел) Тогда
				СтрокаРаздела = МедицинскоеИзделиеОбъект.Разделы.Добавить();
				СтрокаРаздела.Раздел = Раздел;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРазделыМедицинскогоИзделия(МедицинскоеИзделиеОбъект, ЗагруженныеРазделыМедицинскихИзделий, ЭлементДанных)
	
	Разделы = Новый Массив;
	Если ЗначениеЗаполнено(ЭлементДанных.Разделы) Тогда
		Для Каждого КодРаздела Из ЭлементДанных.Разделы Цикл
			
			Раздел = ЗагруженныеРазделыМедицинскихИзделий.Получить(КодРаздела);
			Если ЗначениеЗаполнено(Раздел) Тогда
				НайденныйРаздел = МедицинскоеИзделиеОбъект.Разделы.Найти(Раздел, "Раздел");
				Если НайденныйРаздел = Неопределено Тогда
					СтрокаРаздела = МедицинскоеИзделиеОбъект.Разделы.Добавить();
					СтрокаРаздела.Раздел = Раздел;
					Разделы.Добавить(Раздел);
				Иначе
					Разделы.Добавить(НайденныйРаздел.Раздел);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	КоличествоСуществующихРазделов = МедицинскоеИзделиеОбъект.Разделы.Количество() - 1;
	Для Счетчик = 0 По КоличествоСуществующихРазделов Цикл
		
		СтрокаРаздела = МедицинскоеИзделиеОбъект.Разделы[КоличествоСуществующихРазделов - Счетчик];
		Если Разделы.Найти(СтрокаРаздела.Раздел) = Неопределено Тогда
			МедицинскоеИзделиеОбъект.Разделы.Удалить(СтрокаРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ИзвлечьФайлыИзАрхива(ИсходныеДанные, КаталогИзвлечения)
	
	ПотокZip = ИсходныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(ПотокZip);
	
	ЧтениеZip.ИзвлечьВсе(КаталогИзвлечения, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ЧтениеZip.Закрыть();
	ПотокZip.Закрыть();
	
	НайденныеФайлы = НайтиФайлы(КаталогИзвлечения, "*.zip");
	Если НайденныеФайлы.Количество() > 0 Тогда
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			
			ЧтениеZip = Новый ЧтениеZipФайла(НайденныйФайл.ПолноеИмя);
			ЧтениеZip.ИзвлечьВсе(КаталогИзвлечения, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ЧтениеZip.Закрыть();
			
			ФайловаяСистема.УдалитьВременныйФайл(НайденныйФайл.ПолноеИмя);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьФайлыКлассификатора(КаталогФайлов)
	
	Файлы = Новый ТаблицаЗначений;
	Файлы.Колонки.Добавить("Файл", Новый ОписаниеТипов("Файл"));
	
	НайденныеФайлы = НайтиФайлы(КаталогФайлов, "*.json");
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		МетаданныеФайла = Файлы.Добавить();
		МетаданныеФайла.Файл = НайденныйФайл;
		
	КонецЦикла;
	
	Если Файлы.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для обработки.'");
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

Функция ПреобразоватьJSONВЗначение(Файл)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(Файл.ПолноеИмя);
	
	Значение = ПрочитатьJSON(Чтение, Ложь);
	
	Возврат Значение;
	
КонецФункции

Функция ЭтоФайлНоменклатурыМедИзделий(Файл)
	
	Возврат СтрНачинаетсяС(ВРег(Файл.ИмяБезРасширения), ВРег(ИдентификаторКлассификатораВСервисеИнтернетПоддержки()));
	
КонецФункции

#КонецОбласти

#КонецЕсли
