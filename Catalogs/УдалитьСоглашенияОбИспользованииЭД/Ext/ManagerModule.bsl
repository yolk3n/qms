#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обработчик обновления БЭД 1.2.2.2
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ОбновитьВерсиюФорматаИсходящихЭД207_208() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
	|ГДЕ
	|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		Для каждого ВидДокумента Из ИскомоеСоглашение.ИсходящиеДокументы Цикл
			Если ЗначениеЗаполнено(ВидДокумента.ВерсияФормата)
				И (ВидДокумента.ВерсияФормата = "CML 2.06"
					Или ВидДокумента.ВерсияФормата = "CML 2.07") Тогда
				ВидДокумента.ВерсияФормата = "CML 2.08";
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомоеСоглашение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обработчик обновления БЭД 1.2.7.1
// Производит заполнение версии формата в табличной части ИсходящиеДокументы.
//
Процедура ОбновитьВерсиюФорматаИсходящихЭД501_502() Экспорт
	
	ИсходящиеДокументы = Новый Массив;
	ИсходящиеДокументы.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	ИсходящиеДокументы.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	ВерсияФормата = "ФНС 5.01";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка КАК Профиль
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент В(&ИсходящиеДокументы)
	|	И ПрофилиНастроекЭДОИсходящиеДокументы.ВерсияФормата = &ВерсияФормата";
	Запрос.УстановитьПараметр("ИсходящиеДокументы", ИсходящиеДокументы);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФормата);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПрофильОбъект = Выборка.Профиль.ПолучитьОбъект();
			Для Каждого ТекСтрока Из ПрофильОбъект.ИсходящиеДокументы Цикл
				Если ТекСтрока.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.СчетФактура
					Или ТекСтрока.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
					ТекСтрока.ВерсияФормата = НСтр("ru = 'ФНС 5.02'");
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент В(&ИсходящиеДокументы)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата = &ВерсияФормата";
	
	Запрос.УстановитьПараметр("ИсходящиеДокументы", ИсходящиеДокументы);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФормата);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкаОбъект = Выборка.Соглашение.ПолучитьОбъект();
		Для Каждого ТекСтрока Из НастройкаОбъект.ИсходящиеДокументы Цикл
			Если ТекСтрока.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.СчетФактура
				Или ТекСтрока.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
				ТекСтрока.ВерсияФормата = НСтр("ru = 'ФНС 5.02'");
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.2.4
// Из табличной части Исходящие документы настроек и профилей ЭДО удаляются ответные титулы.
//
Процедура УдалитьОтветныеТитулы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка КАК Профиль
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	|ГДЕ
	|	ПрофилиНастроекЭДОИсходящиеДокументы.ИсходящийДокумент В(&ОтветныеТитулы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент В(&ОтветныеТитулы)";
	
	ОтветныеТитулы = Новый Массив;
	ОтветныеТитулы.Добавить(Перечисления.ТипыДокументовЭДО.УдалитьАктЗаказчик);
	ОтветныеТитулы.Добавить(Перечисления.ТипыДокументовЭДО.УдалитьСоглашениеОбИзмененииСтоимостиПолучатель);
	ОтветныеТитулы.Добавить(Перечисления.ТипыДокументовЭДО.УдалитьТОРГ12Покупатель);
	
	Запрос.УстановитьПараметр("ОтветныеТитулы", ОтветныеТитулы);
	Результаты = Запрос.ВыполнитьПакет();
	
	Профили = Результаты[0].Выгрузить();
	Для Каждого ТекСтрока Из Профили Цикл
		УдалитьИсходящиеЭД(ТекСтрока.Профиль, ОтветныеТитулы);
	КонецЦикла;
	
	Настройки = Результаты[1].Выгрузить();
	Для Каждого ТекСтрока Из Настройки Цикл
		УдалитьИсходящиеЭД(ТекСтрока.Настройка, ОтветныеТитулы);
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МассивСсылок = Новый Массив;
	
	ПустойМаршрут    = Справочники.МаршрутыПодписания.ПустаяСсылка();
	СоответствиеИспользуемыхТипов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	ИспользуемыеТипы = Новый Массив;
	Для Каждого ИспользуемыйТип Из СоответствиеИспользуемыхТипов Цикл
		ИспользуемыеТипы.Добавить(ИспользуемыйТип.Ключ);
	КонецЦикла;
	ПрикладныеТипы   = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов();
	ИспользуемыеТипыВНастройках = Новый Массив;
	ПрикладныеТипыВНастройках   = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ДокументУчета КАК ДокументУчета,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВходящийДокумент,
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	СоглашенияОбИспользованииЭДВходящиеДокументы.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления
		|
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК НастройкиЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД КАК НастройкиЭДОПометкаУдаления
		|		ПО НастройкиЭДО.Организация = НастройкиЭДОПометкаУдаления.Организация
		|			И НастройкиЭДО.Контрагент = НастройкиЭДОПометкаУдаления.Контрагент
		|			И НастройкиЭДО.ДоговорКонтрагента = НастройкиЭДОПометкаУдаления.ДоговорКонтрагента
		|			И НастройкиЭДО.Ссылка <> НастройкиЭДОПометкаУдаления.Ссылка
		|ГДЕ
		|	НастройкиЭДО.ПометкаУдаления
		|	И НастройкиЭДО.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТипыДокументов = Новый Массив;
	ПрикладныеТипыДокументов = Новый Массив;
	ВыборкаНастроек = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНастроек.Следующий() Цикл
		ВыборкаИсходящиеДокументы = ВыборкаНастроек.Выбрать();
		Пока ВыборкаИсходящиеДокументы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаИсходящиеДокументы.ПрикладнойВидЭД) Тогда
				ТипДокумента = ВыборкаИсходящиеДокументы.ПрикладнойВидЭД;
				МассивТипов = ПрикладныеТипыДокументов;
			Иначе 
				ТипДокумента = ВыборкаИсходящиеДокументы.ИсходящийДокумент;
				МассивТипов = ТипыДокументов;
			КонецЕсли;
			
			Если МассивТипов.Найти(ТипДокумента) = Неопределено И ЗначениеЗаполнено(ТипДокумента) Тогда
				МассивТипов.Добавить(ТипДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаНастроекПолучения = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНастроекПолучения.Следующий() Цикл
		ВыборкаВходящиеДокументы = ВыборкаНастроекПолучения.Выбрать();
		Пока ВыборкаВходящиеДокументы.Следующий() Цикл
			Если ВыборкаВходящиеДокументы.ВходящийДокумент = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
				ТипДокумента = ВыборкаВходящиеДокументы.ПрикладнойВидЭД;
				МассивТипов = ПрикладныеТипыДокументов;
			Иначе
				ТипДокумента = ВыборкаВходящиеДокументы.ВходящийДокумент;
				МассивТипов = ТипыДокументов;
			КонецЕсли;
			Если МассивТипов.Найти(ТипДокумента) = Неопределено И ЗначениеЗаполнено(ТипДокумента) Тогда
				МассивТипов.Добавить(ТипДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВидыДокументов = ЭлектронныеДокументыЭДО.ВидыДокументовПоСтандартнымТипам(ТипыДокументов);
	ВидыПрикладныхДокументов = ЭлектронныеДокументыЭДО.ВидыДокументовПоПрикладнымТипам(ПрикладныеТипыДокументов);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВидыДокументов, ВидыПрикладныхДокументов);
	
	ПредставленияОснований = ИнтеграцияЭДО.ПредставленияОснованийПоТипамДокументов();
	
	ВыборкаНастроек.Сбросить();
	ВыборкаНастроекПолучения.Сбросить();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		ИспользуемыеТипыВНастройках.Очистить();
		ПрикладныеТипыВНастройках.Очистить();
		
		ОтмеченКОбработке = Ложь;
		
		ВыборкаИсходящиеДокументы = ВыборкаНастроек.Выбрать();
		Пока ВыборкаИсходящиеДокументы.Следующий() Цикл
			
			Если ВыборкаИсходящиеДокументы.ИспользоватьЭП 
				И ВыборкаИсходящиеДокументы.МаршрутПодписания = ПустойМаршрут Тогда
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаИсходящиеДокументы.ЗаполнениеКодаТовара)
				И ЗначениеЗаполнено(ЭлектронныеДокументыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов(
					ВидыДокументов[ВыборкаИсходящиеДокументы.ИсходящийДокумент], ВыборкаИсходящиеДокументы.ВерсияФормата)) Тогда
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
			Если ВыборкаИсходящиеДокументы.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
				ПредставлениеОснования = ПредставленияОснований[ВыборкаИсходящиеДокументы.ПрикладнойВидЭД];
				ПрикладныеТипыВНастройках.Добавить(ВыборкаИсходящиеДокументы.ПрикладнойВидЭД);
			Иначе
				ПредставлениеОснования = ПредставленияОснований[ВыборкаИсходящиеДокументы.ИсходящийДокумент];
				ИспользуемыеТипыВНастройках.Добавить(ВыборкаИсходящиеДокументы.ИсходящийДокумент);
			КонецЕсли;
			
			Если ПредставлениеОснования <> ВыборкаИсходящиеДокументы.ДокументУчета Тогда
				ОтмеченКОбработке = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОтмеченКОбработке Тогда
			МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
			Продолжить;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИспользуемыеТипы, ИспользуемыеТипыВНастройках).Количество()
			ИЛИ   ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрикладныеТипы, ПрикладныеТипыВНастройках).Количество() Тогда
			МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаНастроекПолучения.Следующий() Цикл
		
		Если МассивСсылок.Найти(ВыборкаНастроекПолучения.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВходящиеДокументы = ВыборкаНастроекПолучения.Выбрать();
		Пока ВыборкаВходящиеДокументы.Следующий() Цикл
			
			Если ВыборкаВходящиеДокументы.ВходящийДокумент = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
				ТипЭлектронногоДокумента = ВыборкаВходящиеДокументы.ПрикладнойВидЭД;
			Иначе
				ТипЭлектронногоДокумента = ВыборкаВходящиеДокументы.ВходящийДокумент;
			КонецЕсли;
			
			ВидЭлектронногоДокумента = ВидыДокументов[ТипЭлектронногоДокумента];
			СписокОпераций = ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента(ВидЭлектронногоДокумента, Истина);
			
			Если СписокОпераций.НайтиПоЗначению(ВыборкаВходящиеДокументы.СпособОбработки) = Неопределено Тогда
				МассивСсылок.Добавить(ВыборкаНастроекПолучения.Ссылка);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыборкаНастроек = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаНастроек.Ссылка);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСсылок);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
	Данные_НоваяАрхитектураНастроекЭДО = ДанныеКОбработке_НоваяАрхитектураНастроекЭДО();
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные_НоваяАрхитектураНастроекЭДО, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.Справочники.УдалитьСоглашенияОбИспользованииЭД;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	// Обрабатывать настройки можно только после обновления предопределенных маршрутов.
	Если Не ОбновлениеИнформационнойБазы.ОбъектОбработан("Справочник.МаршрутыПодписания").Обработан Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, ПараметрыВыборки);
	
	НаборСсылок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НаборСсылок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Реквизиты = РеквизитыНастроекЭДО(НаборСсылок);
	СвойстваПрофилейЭДО = СвойстваПрофилейНастроекЭДО();
	СоответствиеФорматов = НастройкиЭДО.СоответствиеСтарыхФорматовНовым();
	НастройкиДляОтправки = НастройкиДляОтправкиЭД();
	НастройкиПолученияВручную = НастройкиПолученияВручную();
	ПредставленияОснований = ИнтеграцияЭДО.ПредставленияОснованийПоТипамДокументов();
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				ОбработатьДанные_Основной(Объект, НастройкиДляОтправки, ПредставленияОснований, Записать);
				ОбработатьДанные_ЗаполнитьКонтрагентаПоРеквизитам(Объект, Записать);
				ОбработатьДанные_НоваяАрхитектураНастроекЭДО(Объект, Реквизиты, СвойстваПрофилейЭДО, СоответствиеФорматов, НастройкиПолученияВручную, Записать);
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать настройку ЭДО: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые настройки ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция настроек ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = Параметры.ПрогрессВыполнения.ОбработаноОбъектов  + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Обработчик обновления для добавления из вне библиотеки.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюВнешнийВызов(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Если МетаданныеИОтбор.ПолноеИмя = "Справочник.УдалитьСоглашенияОбИспользованииЭД" Тогда
		МетаданныеИОтборНастройки = МетаданныеИОтбор;
	ИначеЕсли МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументИсходящий" 
		ИЛИ МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументВходящий" Тогда
		Настройка = МетаданныеИОтбор.Отбор.УдалитьНастройкаЭДО;
		МетаданныеИОтборНастройки = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(Настройка);
	КонецЕсли;
	
	Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтборНастройки);
	
КонецФункции

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьИсходящиеЭД(СправочникСсылка, ВидыЭД)
	
	СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
	ИсходящиеДокументы = СправочникОбъект.ИсходящиеДокументы;
	Счетчик = 0;
	Пока Счетчик < ИсходящиеДокументы.Количество() Цикл
		СтрокаТЗ = ИсходящиеДокументы[Счетчик];
		ИсходящийЭД = СтрокаТЗ.ИсходящийДокумент;
		Если ВидыЭД.Найти(ИсходящийЭД) = Неопределено Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		Иначе
			ИсходящиеДокументы.Удалить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

Процедура ОбновитьНастройкуИсходящихДокументов(Объект, ПредставленияОснований, Записать)
	
	ИспользуемыеВиды = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИсходящие();
	ОписанияВидовДокументов = ЭлектронныеДокументыЭДО.ОписанияВидовДокументов(ИспользуемыеВиды);
	
	ИспользуемыеТипы = Новый Массив;
	Для Каждого ОписаниеВидаДокумента Из ОписанияВидовДокументов Цикл
		Если ЗначениеЗаполнено(ОписаниеВидаДокумента.Значение.ПрикладнойТипДокумента) Тогда
			ИспользуемыеТипы.Добавить(ОписаниеВидаДокумента.Значение.ПрикладнойТипДокумента);
		Иначе
			ИспользуемыеТипы.Добавить(ОписаниеВидаДокумента.Значение.ТипДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ПрикладныеТипы   = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов();
	
	ВидыДокументовПоТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоСтандартнымТипам(ИспользуемыеТипы);
	ВидыДокументовПоПрикладнымТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоПрикладнымТипам(ПрикладныеТипы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВидыДокументовПоТипам, ВидыДокументовПоПрикладнымТипам);
	
	ВидыДокументов = Новый Массив;
	Для Каждого ВидДокументаПоТипу Из ВидыДокументовПоТипам Цикл
		ВидыДокументов.Добавить(ВидДокументаПоТипу.Значение);
	КонецЦикла;
	
	УдаляемыеСтроки  = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		НеиспользуемыйТип = Ложь;
		
		Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
			ТипЭлектронногоДокумента = СтрокаТаблицы.ПрикладнойВидЭД;
			Индекс = ПрикладныеТипы.Найти(ТипЭлектронногоДокумента);
			Если Индекс = Неопределено Тогда
				НеиспользуемыйТип = Истина;
			Иначе
				ПрикладныеТипы.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ТипЭлектронногоДокумента = СтрокаТаблицы.ИсходящийДокумент;
			Индекс = ИспользуемыеТипы.Найти(ТипЭлектронногоДокумента);
			Если Индекс = Неопределено Тогда
				НеиспользуемыйТип = Истина;
			Иначе
				ИспользуемыеТипы.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
		
		Если НеиспользуемыйТип Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		ПредставлениеОснования = ПредставленияОснований[ТипЭлектронногоДокумента];
		Если ПредставлениеОснования <> СтрокаТаблицы.ДокументУчета Тогда
			СтрокаТаблицы.ДокументУчета = ПредставлениеОснования;
			Записать = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаполнениеКодаТовара) Тогда
			ВариантЗаполнения = ЭлектронныеДокументыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов(
				ВидыДокументовПоТипам[ТипЭлектронногоДокумента], СтрокаТаблицы.ВерсияФормата);
			
			ЗначениеСвойства = Неопределено;
			Если ВариантЗаполнения.Свойство("ТоварКод", ЗначениеСвойства) Тогда
				СтрокаТаблицы.ЗаполнениеКодаТовара = ЗначениеСвойства[0].Значение;
				Записать = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() Тогда
		Записать = Истина;
		Для Каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
			Объект.ИсходящиеДокументы.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользуемыеТипы.Количество() Тогда
		Записать = Истина;
		ШаблоныНастроекПоВидам = ЭлектронныеДокументыЭДО.ШаблоныНастроекОтправкиВидовДокументов(ВидыДокументов);
		Для Каждого ТипЭлектронногоДокумента Из ИспользуемыеТипы Цикл
			ВидДокумента = ВидыДокументовПоТипам[ТипЭлектронногоДокумента];
			ШаблонНастройки = ШаблоныНастроекПоВидам.Найти(ВидДокумента, "ВидДокумента");
			ДобавитьНастройкуВидаЭлектронногоДокумента(Объект, ШаблонНастройки, ТипЭлектронногоДокумента, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	Если Записать Тогда
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНастройкуВходящихДокументов(Объект, Записать)
	
	ИспользуемыеВиды = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовВходящие();
	ОписанияВидовДокументов = ЭлектронныеДокументыЭДО.ОписанияВидовДокументов(ИспользуемыеВиды);
	
	ИспользуемыеТипы = Новый Массив;
	Для Каждого ОписаниеВидаДокумента Из ОписанияВидовДокументов Цикл
		Если ЗначениеЗаполнено(ОписаниеВидаДокумента.Значение.ПрикладнойТипДокумента) Тогда
			ИспользуемыеТипы.Добавить(ОписаниеВидаДокумента.Значение.ПрикладнойТипДокумента);
		Иначе
			ИспользуемыеТипы.Добавить(ОписаниеВидаДокумента.Значение.ТипДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ПрикладныеТипы   = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов();
	
	ВидыДокументовПоТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоСтандартнымТипам(ИспользуемыеТипы);
	ВидыДокументовПоПрикладнымТипам = ЭлектронныеДокументыЭДО.ВидыДокументовПоПрикладнымТипам(ПрикладныеТипы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВидыДокументовПоТипам, ВидыДокументовПоПрикладнымТипам);
	
	УдаляемыеСтроки  = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ВходящиеДокументы Цикл
		
		НеиспользуемыйВид = Ложь;
		
		Если СтрокаТаблицы.ВходящийДокумент = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
			ТипЭлектронногоДокумента = СтрокаТаблицы.ПрикладнойВидЭД;
			Индекс = ПрикладныеТипы.Найти(ТипЭлектронногоДокумента);
			Если Индекс = Неопределено Тогда
				НеиспользуемыйВид = Истина;
			Иначе
				ПрикладныеТипы.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ТипЭлектронногоДокумента = СтрокаТаблицы.ВходящийДокумент;
			Индекс = ИспользуемыеТипы.Найти(ТипЭлектронногоДокумента);
			Если Индекс = Неопределено Тогда
				НеиспользуемыйВид = Истина;
			Иначе
				ИспользуемыеТипы.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
		
		Если НеиспользуемыйВид Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		СписокОпераций = ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента(
			ВидыДокументовПоТипам[ТипЭлектронногоДокумента], Истина);
		Если СписокОпераций.НайтиПоЗначению(СтрокаТаблицы.СпособОбработки) = Неопределено Тогда
			Записать = Истина;
			
			СпособОбработки = "";
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТаблицы.СпособОбработки = СпособОбработки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() Тогда
		Записать = Истина;
		Для Каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
			Объект.ВходящиеДокументы.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ВходящиеДокументы = Неопределено;
	
	Если ИспользуемыеТипы.Количество() Тогда
		ВходящиеДокументы = Объект.ВходящиеДокументы.Выгрузить();
		ВходящиеДокументы.Колонки.Добавить("ВидЭДДляСортировки");
		ВходящиеДокументы.ЗагрузитьКолонку(ВходящиеДокументы.ВыгрузитьКолонку("ВходящийДокумент"), "ВидЭДДляСортировки");
		
		Для Каждого ТипЭлектронногоДокумента Из ИспользуемыеТипы Цикл
			ДобавитьСпособОбработкиВходящегоДокумента(ВходящиеДокументы, ТипЭлектронногоДокумента,
				ВидыДокументовПоТипам[ТипЭлектронногоДокумента], Ложь);
		КонецЦикла;
	КонецЕсли;
	
	Если ПрикладныеТипы.Количество() Тогда
		Если ВходящиеДокументы = Неопределено Тогда
			ВходящиеДокументы = Объект.ВходящиеДокументы.Выгрузить();
			ВходящиеДокументы.Колонки.Добавить("ВидЭДДляСортировки");
			ВходящиеДокументы.ЗагрузитьКолонку(ВходящиеДокументы.ВыгрузитьКолонку("ВходящийДокумент"), "ВидЭДДляСортировки");
		КонецЕсли;
		
		Для Каждого ТипЭлектронногоДокумента Из ПрикладныеТипы Цикл
			ДобавитьСпособОбработкиВходящегоДокумента(ВходящиеДокументы, ТипЭлектронногоДокумента,
				ВидыДокументовПоТипам[ТипЭлектронногоДокумента], Истина)
		КонецЦикла;
	КонецЕсли;
	
	Если ВходящиеДокументы <> Неопределено Тогда
		Записать = Истина;
		ВходящиеДокументы.Сортировать("ВидЭДДляСортировки");
		ВходящиеДокументы.Колонки.Удалить("ВидЭДДляСортировки");
		Объект.ВходящиеДокументы.Загрузить(ВходящиеДокументы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНастройкуВидаЭлектронногоДокумента(Объект, ШаблонНастройки, ТипЭлектронногоДокумента, ЭтоПрикладнойВид)
	
	НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
	
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		НоваяСтрока.ПрофильНастроекЭДО = Объект.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
		НоваяСтрока.СпособОбменаЭД = Объект.ИсходящиеДокументы[0].СпособОбменаЭД;
		НоваяСтрока.ИдентификаторОрганизации = Объект.ИсходящиеДокументы[0].ИдентификаторОрганизации;
		НоваяСтрока.ИдентификаторКонтрагента = Объект.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
	Иначе
		НоваяСтрока.ПрофильНастроекЭДО = Объект.ПрофильНастроекЭДО;
		НоваяСтрока.СпособОбменаЭД = Объект.СпособОбменаЭД;
		НоваяСтрока.ИдентификаторОрганизации = Объект.ИдентификаторОрганизации;
		НоваяСтрока.ИдентификаторКонтрагента = Объект.ИдентификаторКонтрагента;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИспользоватьЭП", Истина);
	ИспользоватьЭП = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()
		И (НЕ СинхронизацияЭДО.ЭтоПрямойОбмен(НоваяСтрока.СпособОбменаЭД)
			ИЛИ ЗначениеЗаполнено(Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора)));
	
	Если ЭтоПрикладнойВид Тогда
		Справочники.УдалитьПрофилиНастроекЭДО.ЗаполнитьНастройкуВидаЭлектронногоДокумента(
			НоваяСтрока, ШаблонНастройки, ТипЭлектронногоДокумента, НоваяСтрока.СпособОбменаЭД, ИспользоватьЭП);
	Иначе
		Справочники.УдалитьПрофилиНастроекЭДО.ЗаполнитьНастройкуВидаЭлектронногоДокумента(
			НоваяСтрока, ШаблонНастройки, ТипЭлектронногоДокумента, НоваяСтрока.СпособОбменаЭД, ИспользоватьЭП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСпособОбработкиВходящегоДокумента(ВходящиеДокументы, ТипЭлектронногоДокумента,
	ВидЭлектронногоДокумента, ЭтоПрикладнойВид)
	
	СписокОпераций = ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента(ВидЭлектронногоДокумента, Истина);
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СпособОбработки = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = ВходящиеДокументы.Добавить();
	НоваяСтрока.СпособОбработки = СпособОбработки;
	НоваяСтрока.ВидЭДДляСортировки = ТипЭлектронногоДокумента;
	Если ЭтоПрикладнойВид Тогда
		НоваяСтрока.ВходящийДокумент = Перечисления.ТипыДокументовЭДО.Прикладной;
		НоваяСтрока.ПрикладнойВидЭД  = ТипЭлектронногоДокумента;
	Иначе
		НоваяСтрока.ВходящийДокумент = ТипЭлектронногоДокумента;
	КонецЕсли;
	
КонецПроцедуры

#Область Обновление

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.УдалитьСоглашенияОбИспользованииЭД", ПараметрыВыборки);
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКОбработке_НоваяАрхитектураНастроекЭДО()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Соглашения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО Соглашения.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправки
	|		ПО Соглашения.Ссылка.Организация = НастройкиОтправки.Отправитель
	|			И Соглашения.Ссылка.Контрагент = НастройкиОтправки.Получатель
	|			И Соглашения.Ссылка.ДоговорКонтрагента = НастройкиОтправки.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиПоВидам
	|		ПО Соглашения.Ссылка.Организация = НастройкиОтправкиПоВидам.Отправитель
	|			И Соглашения.Ссылка.Контрагент = НастройкиОтправкиПоВидам.Получатель
	|			И Соглашения.Ссылка.ДоговорКонтрагента = НастройкиОтправкиПоВидам.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолучения
	|		ПО Соглашения.Ссылка.Организация = НастройкиПолучения.Отправитель
	|			И Соглашения.Ссылка.Контрагент = НастройкиПолучения.Получатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК Приглашения
	|		ПО Соглашения.ИдентификаторОрганизации = Приглашения.ИдентификаторОрганизации
	|			И Соглашения.ИдентификаторКонтрагента = Приглашения.ИдентификаторКонтрагента
	|ГДЕ
	|	(УчетныеЗаписиЭДО.ИдентификаторЭДО ЕСТЬ NULL
	|			ИЛИ НастройкиОтправки.Отправитель ЕСТЬ NULL
	|			ИЛИ НастройкиОтправкиПоВидам.Отправитель ЕСТЬ NULL
	|			ИЛИ НастройкиПолучения.Отправитель ЕСТЬ NULL
	|			ИЛИ Приглашения.ИдентификаторОрганизации ЕСТЬ NULL)
	|	И Соглашения.Ссылка.СтатусПодключения <> ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено)
	|	И (Соглашения.СпособОбменаЭД В (&СпособыОбменаНовойАрхитектуры)
	|			ИЛИ Соглашения.Ссылка.ЭтоИнтеркампани)";
	СпособыОбменаНовойАрхитектуры = Новый Массив;
	СпособыОбменаНовойАрхитектуры.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаНовойАрхитектуры.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	Если НастройкиЭДО.ПрямойОбменДоступен() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СпособыОбменаНовойАрхитектуры,
			СинхронизацияЭДО.СпособыПрямогоОбмена());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпособыОбменаНовойАрхитектуры", СпособыОбменаНовойАрхитектуры);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанные_Основной(Объект, НастройкиДляОтправки, ПредставленияОснований, Записать)
	
	ПараметрыОтбора = Новый Структура("МаршрутПодписания, ИспользоватьЭП", 
		Справочники.МаршрутыПодписания.ПустаяСсылка(), Истина);
	СтрокиСПустымМаршрутом = Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиСПустымМаршрутом.Количество() Тогда
		Записать = Истина;
		
		Для Каждого СтрокаНастройки Из СтрокиСПустымМаршрутом Цикл
			СтрокаНастройки.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьНастройкуИсходящихДокументов(Объект, ПредставленияОснований, Записать);
	
	ОбновитьНастройкуВходящихДокументов(Объект, Записать);
	
	Если Объект.ПометкаУдаления
		И Объект.СтатусПодключения = Перечисления.СтатусыПриглашений.Принято Тогда
		Записать = Истина;
		Объект.СтатусПодключения    = Перечисления.СтатусыПриглашений.Отклонено;
		Объект.СтатусСоглашения     = Перечисления.СтатусыСоглашенийЭД.Закрыто;
		Объект.СостояниеСоглашения  = Перечисления.СостоянияСоглашенийЭД.Закрыто;
		Объект.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Проверка наличия настройки для отправки.
	Если Объект.СтатусПодключения <> Перечисления.СтатусыПриглашений.Отклонено Тогда
		ОтборСтрок = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Объект);
		НайденныеСтроки = НастройкиДляОтправки.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Объект.ИспользуетсяДляОтправки = Истина;
			Записать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанные_ЗаполнитьКонтрагентаПоРеквизитам(Объект, Записать)
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
		ИЛИ Не ЗначениеЗаполнено(Объект.ИННКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", Объект.ИННКонтрагента, Объект.КППКонтрагента);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Объект.Контрагент = Контрагент;
		Записать = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("ИНН", Объект.ИННКонтрагента);
	РеквизитыКонтрагента.Вставить("КПП", Объект.КППКонтрагента);
	РеквизитыКонтрагента.Вставить("Наименование", Объект.НаименованиеКонтрагента);
	
	Контрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Контрагент = Контрагент;
	Записать = Истина;
	
КонецПроцедуры

Процедура ОбработатьДанные_НоваяАрхитектураНастроекЭДО(Объект, Реквизиты, СвойстваПрофилейЭДО, СоответствиеФорматов, НастройкиПолученияВручную, Записать)
	
	Если Объект.СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено Тогда
		Возврат;
	КонецЕсли;
	СпособыОбменаНовойАрхитектуры = Новый Массив;
	СпособыОбменаНовойАрхитектуры.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СпособыОбменаНовойАрхитектуры.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Если НастройкиЭДО.ПрямойОбменДоступен() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СпособыОбменаНовойАрхитектуры,
			СинхронизацияЭДО.СпособыПрямогоОбмена());
	КонецЕсли;
	Если Не ((СпособыОбменаНовойАрхитектуры.Найти(Объект.СпособОбменаЭД) <> Неопределено
		ИЛИ Объект.ЭтоИнтеркампани)) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитов = Реквизиты.Найти(Объект.Ссылка, "НастройкаЭДО");
	
	ЭтоПрямойОбмен = СинхронизацияЭДО.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	
	// Учетные записи ЭДО.
	Если Не Объект.ЭтоИнтеркампани Тогда
		Настройки = Объект.ИсходящиеДокументы.Выгрузить(, "ИдентификаторОрганизации, СпособОбменаЭД,ПрофильНастроекЭДО");
		Настройки.Свернуть("ИдентификаторОрганизации, СпособОбменаЭД, ПрофильНастроекЭДО");
		Для каждого СтрокаНастроек Из Настройки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторОрганизации) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваПрофиляЭДО = СвойстваПрофилейЭДО.Найти(СтрокаНастроек.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УчетныеЗаписиЭДО");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторЭДО", СтрокаНастроек.ИдентификаторОрганизации);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.УчетныеЗаписиЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторЭДО.Установить(СтрокаНастроек.ИдентификаторОрганизации);
			Набор.Прочитать();
			
			Если Не ЗначениеЗаполнено(Набор) Тогда
				
				Запись = Набор.Добавить();
				Запись.ИдентификаторЭДО = СтрокаНастроек.ИдентификаторОрганизации;
				Запись.Организация = Объект.Организация;
				Запись.СпособОбменаЭД = СтрокаНастроек.СпособОбменаЭД;
				
				Если СвойстваПрофиляЭДО <> Неопределено Тогда
					Запись.ОператорЭДО                    = СвойстваПрофиляЭДО.ИдентификаторОператора;
					Запись.НаименованиеУчетнойЗаписи      = СвойстваПрофиляЭДО.НаименованиеПрофиляЭДО;
					Запись.НазначениеУчетнойЗаписи        = СвойстваПрофиляЭДО.НазначениеУчетнойЗаписи;
					Запись.ПодробноеОписаниеУчетнойЗаписи = СвойстваПрофиляЭДО.ПодробноеОписаниеУчетнойЗаписи;
					Запись.ПринятыУсловияИспользования    = СвойстваПрофиляЭДО.ПринятыУсловияИспользования;
					
					Если СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
						Запись.КаталогОбмена = СвойстваПрофиляЭДО.РесурсВходящихДокументов;
					ИначеЕсли СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
						Запись.УчетнаяЗаписьЭлектроннойПочты = СвойстваПрофиляЭДО.РесурсВходящихДокументов;
					ИначеЕсли СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						Запись.ПутьFTP = СвойстваПрофиляЭДО.АдресСервера;
						Если ЗначениеЗаполнено(СвойстваПрофиляЭДО.РесурсВходящихДокументов) Тогда
							ЕстьРазделитель = СтрЗаканчиваетсяНа(Запись.ПутьFTP, "/")
								ИЛИ СтрНачинаетсяС(СвойстваПрофиляЭДО.РесурсВходящихДокументов, "/");
							Запись.ПутьFTP = Запись.ПутьFTP + ?(ЕстьРазделитель,"","/") + СвойстваПрофиляЭДО.РесурсВходящихДокументов;
						КонецЕсли;
						Запись.ПортFTP = СвойстваПрофиляЭДО.Порт;
						Запись.ПассивноеСоединениеFTP = СвойстваПрофиляЭДО.ПассивноеСоединение;
						Если ЗначениеЗаполнено(СвойстваПрофиляЭДО.Логин) Тогда
							ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Запись.ИдентификаторЭДО, СвойстваПрофиляЭДО.Логин, "ЛогинFTP");
						КонецЕсли;
						Если ЗначениеЗаполнено(СвойстваПрофиляЭДО.Пароль) Тогда
							ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Запись.ИдентификаторЭДО, СвойстваПрофиляЭДО.Пароль, "ПарольFTP");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					Запись.ОбновитьНастройкиУведомлений = Истина;
				КонецЕсли;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				
				Если ЭтоПрямойОбмен Тогда
					МенеджерКонстанты = Константы.ИспользоватьПрямойОбменЭлектроннымиДокументами.СоздатьМенеджерЗначения();
					МенеджерКонстанты.Прочитать();
					Если Не МенеджерКонстанты.Значение Тогда
						МенеджерКонстанты.Значение = Истина;
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Настройки отправки электронных документов.
	Если Объект.ИспользуетсяДляОтправки 
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов");
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Объект.Организация);
		ЭлементБлокировки.УстановитьЗначение("Получатель", Объект.Контрагент);
		ЭлементБлокировки.УстановитьЗначение("Договор", Объект.ДоговорКонтрагента);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.СоздатьНаборЗаписей();
		Набор.Отбор.Отправитель.Установить(Объект.Организация);
		Набор.Отбор.Получатель.Установить(Объект.Контрагент);
		Набор.Отбор.Договор.Установить(Объект.ДоговорКонтрагента);
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) 
			И ЗначениеЗаполнено(Объект.ИдентификаторОрганизации)
			И ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента) Тогда
			
			Запись = Набор.Добавить();
			Запись.Отправитель = Объект.Организация;
			Запись.Получатель = Объект.Контрагент;
			Запись.Договор = Объект.ДоговорКонтрагента;
			Запись.ИспользоватьУПД = Объект.ИспользоватьУПД;
			Запись.ИспользоватьУКД = Объект.ИспользоватьУКД;
			Если СтрокаРеквизитов = Неопределено Тогда
				Запись.ДатаНачалаДействия = Дата(1900, 1, 1);
			Иначе
				Запись.ДатаНачалаДействия = СтрокаРеквизитов.ДатаНачалаДействия;
			КонецЕсли;
			Запись.ЭтоИнтеркампани = Объект.ЭтоИнтеркампани;
			Запись.ЭтоПрямойОбмен = ЭтоПрямойОбмен;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
		КонецЕсли;
	КонецЕсли;
	
	// Настройки отправки электронных документов по видам.
	Если Объект.ИспользуетсяДляОтправки
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Объект.Организация);
		ЭлементБлокировки.УстановитьЗначение("Получатель", Объект.Контрагент);
		ЭлементБлокировки.УстановитьЗначение("Договор", Объект.ДоговорКонтрагента);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		Набор.Отбор.Отправитель.Установить(Объект.Организация);
		Набор.Отбор.Получатель.Установить(Объект.Контрагент);
		Набор.Отбор.Договор.Установить(Объект.ДоговорКонтрагента);
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			
			Для каждого СтрокаНастроек Из Объект.ИсходящиеДокументы Цикл
				
				// Новые виды ЭД (УПД, УКД) пропускаем, т.к. их не было в старой архитектуре настроек
				// и они заполнены настройками по умолчанию.
				Если СтрокаНастроек.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.УПД
					ИЛИ СтрокаНастроек.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.УКД Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоПрямойОбмен
					И (СтрокаНастроек.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.СчетФактура
						ИЛИ СтрокаНастроек.ИсходящийДокумент = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойстваПрофиляЭДО = СвойстваПрофилейЭДО.Найти(СтрокаНастроек.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
				ИдентификаторОрганизации = ?(ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторОрганизации),
					СтрокаНастроек.ИдентификаторОрганизации, Объект.ИдентификаторОрганизации);
				ИдентификаторКонтрагента = ?(ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторКонтрагента),
					СтрокаНастроек.ИдентификаторКонтрагента, Объект.ИдентификаторКонтрагента);
					
				Если Не ЗначениеЗаполнено(ИдентификаторОрганизации)
					Или Не ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = Набор.Добавить();
				Запись.Отправитель = Объект.Организация;
				Запись.Получатель = Объект.Контрагент;
				Запись.Договор = Объект.ДоговорКонтрагента;
				Если ЗначениеЗаполнено(СтрокаНастроек.ПрикладнойВидЭД) Тогда
					Запись.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(СтрокаНастроек.ПрикладнойВидЭД);
				Иначе
					Если Объект.ИспользоватьУПД И СтрокаНастроек.ИсходящийДокумент
						= Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
						Запись.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УПД);
					ИначеЕсли Объект.ИспользоватьУКД И СтрокаНастроек.ИсходящийДокумент
						= Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
						Запись.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УКД);
					Иначе
						Запись.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(СтрокаНастроек.ИсходящийДокумент);
					КонецЕсли;
				КонецЕсли;
				
				ТипЭД = СтрокаНастроек.ИсходящийДокумент;
				ВерсияФормата = СтрокаНастроек.ВерсияФормата;
				Если ТипЭД = Перечисления.ТипыДокументовЭДО.УПД И Объект.ИспользоватьУПД Тогда
					ТипЭД = Перечисления.ТипыДокументовЭДО.СчетФактура;
					СтрокаСФ = Объект.ИсходящиеДокументы.Найти(ТипЭД, "ИсходящийДокумент");
					Если СтрокаСФ <> Неопределено Тогда
						ВерсияФормата = СтрокаСФ.ВерсияФормата;
					КонецЕсли;
				ИначеЕсли ТипЭД = Перечисления.ТипыДокументовЭДО.УКД И Объект.ИспользоватьУКД Тогда
					ТипЭД = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
					СтрокаКСФ = Объект.ИсходящиеДокументы.Найти(ТипЭД, "ИсходящийДокумент");
					Если СтрокаКСФ <> Неопределено Тогда
						ВерсияФормата = СтрокаКСФ.ВерсияФормата;
					КонецЕсли;
				КонецЕсли;
				КлючФормата = Строка(ТипЭД) + "_" + ВерсияФормата;
				НовыйФормат = СоответствиеФорматов[КлючФормата];
				Если Не ЗначениеЗаполнено(НовыйФормат) Тогда
					НовыйФормат = СтрокаНастроек.ВерсияФормата;
				КонецЕсли;
				Запись.ВерсияФормата = НовыйФормат;
				
				Запись.СпособОбменаЭД = СтрокаНастроек.СпособОбменаЭД;
				Если Объект.ЭтоИнтеркампани Тогда
					Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.Внутренний;
				КонецЕсли;
				Запись.ИдентификаторОтправителя = ИдентификаторОрганизации;
				Запись.ИдентификаторПолучателя = ИдентификаторКонтрагента;
				Запись.МаршрутПодписания = СтрокаНастроек.МаршрутПодписания;
				Запись.ЗаполнениеКодаТовара = СтрокаНастроек.ЗаполнениеКодаТовара;
				Запись.ТребуетсяОтветнаяПодпись = СтрокаНастроек.ТребуетсяОтветнаяПодпись;
				Запись.ТребуетсяИзвещениеОПолучении = СтрокаНастроек.ТребуетсяИзвещениеОПолучении;
				Если СвойстваПрофиляЭДО <> Неопределено Тогда
					Запись.ВыгружатьДополнительныеСведения = СвойстваПрофиляЭДО.ВыгружатьДополнительныеСведения;
				КонецЕсли;
				Запись.Формировать = СтрокаНастроек.Формировать;
				Запись.ВерсияФорматаУстановленаВручную = Ложь;
				
				Если ЭтоПрямойОбмен Тогда
					Запись.ОбменБезПодписи = Не СтрокаНастроек.ИспользоватьЭП;
					Если СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
						Запись.АдресОтправителя = Объект.КаталогВходящихДокументов;
						Запись.АдресПолучателя  = Объект.КаталогИсходящихДокументов;
					ИначеЕсли СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						Запись.АдресОтправителя = Объект.КаталогВходящихДокументовFTP;
						Запись.АдресПолучателя  = Объект.КаталогИсходящихДокументовFTP;
					ИначеЕсли СтрокаНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
						Запись.АдресПолучателя  = Объект.ЭлектроннаяПочтаКонтрагента;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаНабора = Набор.Выгрузить();
			
			ВидДокументаУПД = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УПД);
			ВидДокументаУКД = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УКД);
			ВидДокументаСчетФактура = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.СчетФактура);
			ВидДокументаКорректировочныйСчетФактура = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
			НастройкиКопирования = Новый Соответствие;
			НастройкиКопирования.Вставить(ВидДокументаУПД,
				ВидДокументаСчетФактура);
			НастройкиКопирования.Вставить(ВидДокументаУКД,
				ВидДокументаКорректировочныйСчетФактура);
			НастройкиКопирования.Вставить(ВидДокументаУКД,
				ВидДокументаУПД);
			НастройкиКопирования.Вставить(ВидДокументаКорректировочныйСчетФактура,
				ВидДокументаУКД);
			Для каждого Элемент Из НастройкиКопирования Цикл
				СтрокаИсточника = ТаблицаНабора.Найти(Элемент.Ключ, "ВидДокумента");
				СтрокаПриемника = ТаблицаНабора.Найти(Элемент.Значение, "ВидДокумента");
				Если СтрокаИсточника = Неопределено ИЛИ СтрокаПриемника <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПриемника = ТаблицаНабора.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
				СтрокаПриемника.ВидДокумента = Элемент.Значение;
				Если СтрокаПриемника.ВидДокумента = ВидДокументаСчетФактура
					ИЛИ СтрокаПриемника.ВидДокумента = ВидДокументаКорректировочныйСчетФактура Тогда
					СтрокаПриемника.ТребуетсяОтветнаяПодпись = Ложь;
					СтрокаПриемника.ТребуетсяИзвещениеОПолучении = Ложь;
				ИначеЕсли СтрокаПриемника.ВидДокумента = ВидДокументаУПД
					ИЛИ СтрокаПриемника.ВидДокумента = ВидДокументаУКД Тогда
					СтрокаПриемника.ТребуетсяОтветнаяПодпись = Истина;
					СтрокаПриемника.ТребуетсяИзвещениеОПолучении = Истина;
				КонецЕсли;
			КонецЦикла;
			Набор.Загрузить(ТаблицаНабора);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
		КонецЕсли;
	КонецЕсли;
	
	// Настройки получения электронных документов.
	Если Не Объект.ЭтоИнтеркампани
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировки.УстановитьЗначение("Получатель", Объект.Организация);
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Объект.Контрагент);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Общие настройки получения.
		Набор = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
		Набор.Отбор.Получатель.Установить(Объект.Организация);
		Набор.Отбор.Отправитель.Установить(Объект.Контрагент);
		Набор.Отбор.ИдентификаторОтправителя.Установить("");
		Набор.Отбор.ИдентификаторПолучателя.Установить("");
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			
			ТаблицаНастроекПолучения = Набор.Выгрузить();
			
			ТекущаяТаблица = ИнтеграцияЭДО.ТаблицаПредопределенногоПрофиля(
				ИнтеграцияЭДО.ПрофилиНастроекОтраженияВходящихДокументов().ПервоначальноеЗаполнение);
			ТекущаяТаблица.Колонки.Добавить("Отправитель"              , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
			ТекущаяТаблица.Колонки.Добавить("Получатель"               , Метаданные.ОпределяемыеТипы.Организация.Тип);
			ТекущаяТаблица.Колонки.Добавить("ИдентификаторОтправителя" , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
			ТекущаяТаблица.Колонки.Добавить("ИдентификаторПолучателя"  , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
			
			ТекущаяТаблица.ЗаполнитьЗначения(Объект.Контрагент  , "Отправитель");
			ТекущаяТаблица.ЗаполнитьЗначения(Объект.Организация , "Получатель");
			ТекущаяТаблица.ЗаполнитьЗначения(""                 , "ИдентификаторОтправителя");
			ТекущаяТаблица.ЗаполнитьЗначения(""                 , "ИдентификаторПолучателя");
			ТекущаяТаблица.Колонки.ТипДокумента.Имя = "УдалитьВидДокумента";
			ТекущаяТаблица.Колонки.ПрикладнойТипДокумента.Имя = "УдалитьПрикладнойВидЭД";
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущаяТаблица, ТаблицаНастроекПолучения);
			Для Каждого СтрокаТаблицы Из ТаблицаНастроекПолучения Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.УдалитьПрикладнойВидЭД) Тогда
					СтрокаТаблицы.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(СтрокаТаблицы.УдалитьПрикладнойВидЭД);
				Иначе
					СтрокаТаблицы.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(СтрокаТаблицы.УдалитьВидДокумента);
				КонецЕсли;
			КонецЦикла;
			Для каждого СтрокаНастроек Из ТаблицаНастроекПолучения Цикл
				ОтборСтрок = Новый Структура("Организация,Контрагент,ВходящийДокумент",
					СтрокаНастроек.Получатель, СтрокаНастроек.Отправитель, СтрокаНастроек.ВидДокумента);
				НайденныеСтроки = НастройкиПолученияВручную.НайтиСтроки(ОтборСтрок);
				Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
					СтрокаНастроек.СпособОбработки = "Вручную";
				КонецЕсли;
			КонецЦикла;
			
			Набор.Загрузить(ТаблицаНастроекПолучения);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		
		КонецЕсли;
		
	КонецЕсли;
	
		// Состояния контрагентов БЭД.
	Если Не Объект.ЭтоИнтеркампани И Не ЭтоПрямойОбмен И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияКонтрагентовБЭД");
		ЭлементБлокировки.УстановитьЗначение("Контрагент", Объект.Контрагент);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		Набор.Отбор.Контрагент.Установить(Объект.Контрагент);
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор)
			ИЛИ Набор[0].Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО Тогда 
			
			Набор.Очистить();
			Состояние = Набор.Добавить();
			Состояние.Контрагент = Объект.Контрагент;
			Состояние.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		КонецЕсли;
	КонецЕсли;
	
	// Приглашения к обмену электронными документами.
	Если Не Объект.ЭтоИнтеркампани И Не ЭтоПрямойОбмен Тогда
		КлючПриглашения = Строка(Объект.Ссылка.УникальныйИдентификатор());
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами");
		ЭлементБлокировки.УстановитьЗначение("Ключ", КлючПриглашения);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьНаборЗаписей();
		Набор.Отбор.Ключ.Установить(КлючПриглашения);
		Набор.Отбор.ИдентификаторОрганизации.Установить(Объект.ИдентификаторОрганизации);
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			
			Запись = Набор.Добавить();
			Запись.Ключ = КлючПриглашения;
			Запись.ИдентификаторОрганизации = Объект.ИдентификаторОрганизации;
			Запись.ИдентификаторКонтрагента = Объект.ИдентификаторКонтрагента;
			Запись.Контрагент = Объект.Контрагент;
			Запись.Статус = Объект.СтатусПодключения;
			Запись.ТекстПриглашения = Объект.ТекстПриглашения;
			Запись.ИНН = Объект.ИННКонтрагента;
			Запись.КПП = Объект.КППКонтрагента;
			Запись.Наименование = Объект.НаименованиеКонтрагента;
			
			Если Не ЗначениеЗаполнено(Запись.Контрагент)
				И Запись.Статус = Перечисления.СтатусыПриглашений.Принято Тогда
				Запись.Статус = Перечисления.СтатусыПриглашений.ТребуетсяСогласие;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыНастроекЭДО(Знач НаборНастроекЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийЭДО.УдалитьНастройкаЭДО КАК НастройкаЭДО,
	|	МИНИМУМ(ЭлектронныйДокументИсходящийЭДО.Дата) КАК ДатаНачалаДействия
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументИсходящийЭДО.УдалитьНастройкаЭДО В(&НаборНастроекЭДО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронныйДокументИсходящийЭДО.УдалитьНастройкаЭДО";
	Запрос.УстановитьПараметр("НаборНастроекЭДО", НаборНастроекЭДО);
	
	Реквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты.Индексы.Добавить("НастройкаЭДО");
	
	Возврат Реквизиты;
	
КонецФункции

Функция СвойстваПрофилейНастроекЭДО()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	ЕСТЬNULL(ОператорыЭДО.ОтправлятьДополнительныеСведения, ЛОЖЬ) КАК ВыгружатьДополнительныеСведения,
	|	ЕСТЬNULL(ОператорыЭДО.ИдентификаторОператора, """") КАК ИдентификаторОператора,
	|	УдалитьПрофилиНастроекЭДО.Наименование КАК НаименованиеПрофиляЭДО,
	|	УдалитьПрофилиНастроекЭДО.НазначениеУчетнойЗаписи КАК НазначениеУчетнойЗаписи,
	|	УдалитьПрофилиНастроекЭДО.ПодробноеОписаниеУчетнойЗаписи КАК ПодробноеОписаниеУчетнойЗаписи,
	|	УдалитьПрофилиНастроекЭДО.ПринятыУсловияИспользования КАК ПринятыУсловияИспользования,
	|	УдалитьПрофилиНастроекЭДО.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	УдалитьПрофилиНастроекЭДО.АдресСервера КАК АдресСервера,
	|	УдалитьПрофилиНастроекЭДО.Порт КАК Порт,
	|	УдалитьПрофилиНастроекЭДО.ПассивноеСоединение КАК ПассивноеСоединение,
	|	УдалитьПрофилиНастроекЭДО.Логин КАК Логин,
	|	УдалитьПрофилиНастроекЭДО.Пароль КАК Пароль
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
	|		ПО ((ВЫРАЗИТЬ(УдалитьПрофилиНастроекЭДО.ОператорЭДОИд КАК СТРОКА(10))) = ОператорыЭДО.ИдентификаторОператора
	|				ИЛИ УдалитьПрофилиНастроекЭДО.СпособОбменаЭД = &ЧерезТакском
	|					И ОператорыЭДО.СпособОбменаЭД = &ЧерезТакском)";
	Запрос.УстановитьПараметр("ЧерезТакском", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	
	СвойстваПрофилейЭДО = Запрос.Выполнить().Выгрузить();
	СвойстваПрофилейЭДО.Индексы.Добавить("ПрофильНастроекЭДО");
	
	Возврат СвойстваПрофилейЭДО;
	
КонецФункции

Функция НастройкиДляОтправкиЭД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
	|	СоглашенияОбИспользованииЭД.Организация КАК Организация,
	|	СоглашенияОбИспользованииЭД.Контрагент КАК Контрагент,
	|	СоглашенияОбИспользованииЭД.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.ИспользуетсяДляОтправки
	|	И СоглашенияОбИспользованииЭД.СтатусПодключения <> ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено)";
	
	Настройки = Запрос.Выполнить().Выгрузить();
	Настройки.Индексы.Добавить("Организация,Контрагент,ДоговорКонтрагента");
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиПолученияВручную()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтарыеНастройкиПолучения.Ссылка.Организация КАК Организация,
	|	СтарыеНастройкиПолучения.Ссылка.Контрагент КАК Контрагент,
	|	СтарыеНастройкиПолучения.ВходящийДокумент КАК ВходящийДокумент
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СтарыеНастройкиПолучения
	|ГДЕ
	|	СтарыеНастройкиПолучения.СпособОбработки = ""Вручную""
	|	И СтарыеНастройкиПолучения.Ссылка.СтатусПодключения <> ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено)";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Организация,Контрагент,ВходящийДокумент");
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#КонецЕсли