
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДоступныеНастройки = ТранспортМДЛП.ДоступныеТранспортныеМодули();
	Для Каждого Настройка Из ДоступныеНастройки Цикл
		Если Настройка.ИдентификаторСубъектаОбращения = Настройка.ПараметрыПодключения.ИдентификаторОрганизации Тогда
			ДоступныеПодключения.Добавить(Настройка.ПараметрыПодключения, Настройка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеПодключения.Количество() = 0 Тогда
		ВызватьИсключение НСтр(
			"ru = 'Нет настроенных подключений через API.
			|
			|Проверьте, что заведена собственная организация
			|и есть хотя бы одно место деятельности
			|с установленным флагом ""Вести учет в этой ИБ"".
			|'");
	КонецЕсли;
	
	Идентификатор = Параметры.Идентификатор;
	ОГРН = Параметры.ОГРН;
	ИНН = Параметры.ИНН;
	ТипУчастника = Параметры.ТипУчастника;
	
	Если Не ЗначениеЗаполнено(ТипУчастника) Тогда
		ТипУчастника = 1;
	КонецЕсли;
	УстановитьВидимостьПоТипуУчастника();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипУчастникаПриИзменении(Элемент)
	
	УстановитьВидимостьПоТипуУчастника();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыНайденныеСубъектыОбращения

&НаКлиенте
Процедура НайденныеСубъектыОбращенияПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НайденныеСубъектыОбращения.ТекущиеДанные;
	Если ТекущаяСтрока.Пометка Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Идентификатор) Тогда
			СтрокаОрганизации = НайденныеСубъектыОбращения.НайтиСтроки(
				Новый Структура("РегистрационныйНомерУчастника, Идентификатор", ТекущаяСтрока.РегистрационныйНомерУчастника, ""))[0];
			СтрокаОрганизации.Пометка = Истина;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Идентификатор) Тогда
			СубъектыОрганизации = НайденныеСубъектыОбращения.НайтиСтроки(
				Новый Структура("РегистрационныйНомерУчастника", ТекущаяСтрока.РегистрационныйНомерУчастника));
			Для Каждого Субъект Из СубъектыОрганизации Цикл
				Субъект.Пометка = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ЗапроситьДанныеКонтрагента(Команда)
	
	Если Не ЗначениеЗаполнено(Идентификатор) И Не ЗначениеЗаполнено(ИНН) И Не ЗначениеЗаполнено(ОГРН) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нужно указать одно из значений ""Идентификатор"", ""ОГРН"" или ""ИНН""'"),, "Идентификатор");
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Если Не КорректныйИдентификатор(Идентификатор) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Идентификатор'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Идентификатор");
		Иначе
			Отбор.Вставить("Идентификатор", Идентификатор);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ОГРН) Тогда
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ОГРН, СтрДлина(СокрЛП(ОГРН)) <> 15, ТекстОшибки) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'ОГРН'"),,, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ОГРН");
		Иначе
			Отбор.Вставить("ОГРН", СокрЛП(ОГРН));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, СтрДлина(СокрЛП(ИНН)) <> 12, ТекстОшибки) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'ИНН'"),,, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ИНН");
		Иначе
			Отбор.Вставить("ИНН", СокрЛП(ИНН));
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нужно указать одно из значений ""Идентификатор"", ""ОГРН"" или ""ИНН""'"),, "Идентификатор");
	КонецЕсли;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипУчастника) Тогда
		Отбор.Вставить("ТипУчастника", ТипУчастника);
	КонецЕсли;
	
	Если ДоступныеПодключения.Количество() > 1 Тогда
		Обработчик = Новый ОписаниеОповещения("ЗапроситьДанныеКонтрагента_ПослеВыбораПодключения", ЭтотОбъект, Новый Структура("Отбор", Отбор));
		ДоступныеПодключения.ПоказатьВыборЭлемента(Обработчик, НСтр("ru = 'Выберите подключение'"));
	Иначе
		ЗапроситьДанныеКонтрагентаЧерезПодключение(ДоступныеПодключения[0].Значение, Отбор);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеКонтрагента(Команда)
	
	Если НайденныеСубъектыОбращения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныеСубъектыОбращения.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны данные для сохранения.'"));
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеКонтрагентаНаСервере();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ОрганизацииМДЛП"));
	ОповеститьОбИзменении(Тип("СправочникСсылка.МестаДеятельностиМДЛП"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Команда)
	
	ИзменитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометку(Команда)
	
	ИзменитьПометку(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапроситьДанныеКонтрагента_ПослеВыбораПодключения(ВыбранныеЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеЭлемент <> Неопределено Тогда
		ЗапроситьДанныеКонтрагентаЧерезПодключение(ВыбранныеЭлемент.Значение, ДополнительныеПараметры.Отбор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеКонтрагентаЧерезПодключение(ПараметрыПодключения, Отбор)
	
	Обработчик = Новый ОписаниеОповещения("ЗапроситьДанныеКонтрагента_ОбработатьПолученияДанных", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.ПолучитьИнформациюОСубъектахОбращения(ПараметрыПодключения, Отбор, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеКонтрагента_ОбработатьПолученияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если Результат.СубъектыОбращения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'По указанным данным информация отсутствует.'"));
	Иначе
		ОбработатьДанныеКонтрагента(Результат.СубъектыОбращения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеКонтрагента(СубъектыОбращения)
	
	НайденныеСубъектыОбращения.Очистить();
	Для Каждого Субъект Из СубъектыОбращения Цикл
		ДанныеОрганизации = НайденныеСубъектыОбращения.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Субъект);
		Для Каждого МестоДеятельности Из Субъект.МестаДеятельности Цикл
			ДанныеМестаДеятельности = НайденныеСубъектыОбращения.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеМестаДеятельности, МестоДеятельности);
			ДанныеМестаДеятельности.РегистрационныйНомерУчастника = ДанныеОрганизации.РегистрационныйНомерУчастника;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КорректныйИдентификатор(Знач Идентификатор)
	
	Возврат ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Идентификатор, "system_subject_type");
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеКонтрагентаНаСервере()
	
	РегистрационныеНомераУчастников = Новый Массив;
	Идентификаторы = Новый Массив;
	ОтмеченныеСубъекты = НайденныеСубъектыОбращения.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для Каждого Субъект Из ОтмеченныеСубъекты Цикл
		Если ЗначениеЗаполнено(Субъект.Идентификатор) Тогда
			Идентификаторы.Добавить(Субъект.Идентификатор);
		Иначе
			РегистрационныеНомераУчастников.Добавить(Субъект.РегистрационныйНомерУчастника);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Организации.РегистрационныйНомерУчастника КАК РегистрационныйНомерУчастника,
	|	Организации.Ссылка        КАК Ссылка,
	|	Организации.ОГРН          КАК ОГРН,
	|	Организации.ИНН           КАК ИНН,
	|	Организации.КПП           КАК КПП,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.ОрганизацииМДЛП КАК Организации
	|ГДЕ
	|	Организации.РегистрационныйНомерУчастника В(&РегистрационныеНомераУчастников)
	|	И НЕ Организации.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаДеятельности.Идентификатор         КАК Идентификатор,
	|	МестаДеятельности.Ссылка                КАК Ссылка,
	|	МестаДеятельности.Организация           КАК Организация,
	|	МестаДеятельности.Адрес                 КАК Адрес,
	|	МестаДеятельности.ТипМестаДеятельности  КАК ТипМестаДеятельности
	|ИЗ
	|	Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|ГДЕ
	|	МестаДеятельности.Идентификатор В (&Идентификаторы)
	|	И НЕ МестаДеятельности.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("РегистрационныеНомераУчастников", РегистрационныеНомераУчастников);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Организации = Новый Соответствие;
	ВыборкаОрганизации = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		ДанныеОрганизации = Новый Структура("Ссылка, РегистрационныйНомерУчастника, ОГРН, ИНН, КПП, Наименование");
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ВыборкаОрганизации);
		Организации.Вставить(НРег(ВыборкаОрганизации.РегистрационныйНомерУчастника), ДанныеОрганизации);
	КонецЦикла;
	
	МестаДеятельности = Новый Соответствие;
	ВыборкаМестаДеятельности = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаМестаДеятельности.Следующий() Цикл
		ДанныеМестаДеятельности = Новый Структура("Ссылка, Идентификатор, Организация, Адрес, ТипМестаДеятельности");
		ЗаполнитьЗначенияСвойств(ДанныеМестаДеятельности, ВыборкаМестаДеятельности);
		МестаДеятельности.Вставить(ВыборкаМестаДеятельности.Идентификатор, ДанныеМестаДеятельности);
	КонецЦикла;
	
	Для Каждого Субъект Из ОтмеченныеСубъекты Цикл
		
		Организация = Организации.Получить(Субъект.РегистрационныйНомерУчастника);
		Если Организация = Неопределено Тогда
			
			ОрганизацияОбъект = Справочники.ОрганизацииМДЛП.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, Субъект);
			ОрганизацияОбъект.Записать();
			
			ДанныеОрганизации = Новый Структура("Ссылка, РегистрационныйНомерУчастника, ОГРН, ИНН, КПП, Наименование");
			ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Субъект);
			ДанныеОрганизации.Ссылка = ОрганизацияОбъект.Ссылка;
			Организации.Вставить(Субъект.РегистрационныйНомерУчастника, ДанныеОрганизации);
			
		ИначеЕсли Не ЗначениеЗаполнено(Субъект.Идентификатор) Тогда
			
			НужноОбновить = Ложь;
			Для Каждого Реквизит Из Организация Цикл
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Субъект, Реквизит.Ключ)
				   И Реквизит.Значение <> Субъект[Реквизит.Ключ] Тогда
					НужноОбновить = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НужноОбновить Тогда
				ОрганизацияОбъект = Организация.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, Субъект);
				ОрганизацияОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Субъект.Идентификатор) Тогда
			МестоДеятельности = МестаДеятельности.Получить(Субъект.Идентификатор);
			Если МестоДеятельности = Неопределено Тогда
				
				МестоДеятельностиОбъект = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(МестоДеятельностиОбъект, Субъект);
				МестоДеятельностиОбъект.Организация = Организация.Ссылка;
				ИнтеграцияМДЛП.ЗаполнитьЗначенияПолейКИПоПредставлению(МестоДеятельностиОбъект, МестоДеятельностиОбъект.Адрес, "Адрес");
				МестоДеятельностиОбъект.Наименование = МестоДеятельностиОбъект.Идентификатор;
				МестоДеятельностиОбъект.Записать();
				
			Иначе
				
				НужноОбновить = Ложь;
				Для Каждого Реквизит Из МестоДеятельности Цикл
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Субъект, Реквизит.Ключ)
					   И Реквизит.Значение <> Субъект[Реквизит.Ключ] И Реквизит.Ключ <> "Наименование" Тогда
						НужноОбновить = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				НужноОбновить = НужноОбновить Или Не ЗначениеЗаполнено(МестоДеятельности.Организация);
				Если НужноОбновить Тогда
					МестоДеятельностиОбъект = МестоДеятельности.Ссылка.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(МестоДеятельностиОбъект, Субъект);
					МестоДеятельностиОбъект.Организация = Организация.Ссылка;
					ИнтеграцияМДЛП.ЗаполнитьЗначенияПолейКИПоПредставлению(МестоДеятельностиОбъект, МестоДеятельностиОбъект.Адрес, "Адрес");
					Если Не ЗначениеЗаполнено(МестоДеятельностиОбъект.Наименование) Тогда
						МестоДеятельностиОбъект.Наименование = МестоДеятельностиОбъект.Идентификатор;
					КонецЕсли;
					МестоДеятельностиОбъект.Записать();
				КонецЕсли;
				
				НужноЗаменитьОрганизацию = ЗначениеЗаполнено(МестоДеятельности.Организация) И МестоДеятельности.Организация <> Организация.Ссылка;
				Если НужноЗаменитьОрганизацию Тогда
					Замены = Новый Соответствие;
					Замены.Вставить(МестоДеятельности.Организация, Организация.Ссылка);
					ПараметрыЗамены = ОбщегоНазначения.ПараметрыЗаменыСсылок();
					ПараметрыЗамены.СпособУдаления       = "Пометка";
					ПараметрыЗамены.ВключатьБизнесЛогику = Ложь;
					ОбщегоНазначения.ЗаменитьСсылки(Замены, ПараметрыЗамены);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоТипуУчастника()
	
	Если ТипУчастника = ТранспортМДЛПАПИКлиентСервер.ТипУчастника_ИностранныйКонтрагент() Тогда
		Элементы.ОГРН.Видимость = Ложь;
		Элементы.ИНН.Видимость = Ложь;
	Иначе
		Элементы.ОГРН.Видимость = Истина;
		Элементы.ИНН.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометку(Пометка)
	
	Элемент = Элементы.НайденныеСубъектыОбращения;
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элемент.ДанныеСтроки(ИдентификаторСтроки);
		ТекущиеДанные.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
