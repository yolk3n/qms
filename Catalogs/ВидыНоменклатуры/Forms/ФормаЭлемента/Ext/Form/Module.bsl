
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	ДополнительныеПараметры = Новый Структура("ОтображатьХарактеристики", Ложь);
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаВидаНоменклатуры(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаРаботаСНоменклатурой, ДополнительныеПараметры);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	Иначе
		ЕстьПравоРедактирования = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
		ЭтотОбъект.ТолькоПросмотр = Не ЕстьПравоРедактирования;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Элементы.СтраницаНастройкиДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
	АдресСхемыДанныхРабочегоНаименованияНоменклатуры = ПоместитьВоВременноеХранилище(Справочники.ВидыНоменклатуры.ПолучитьМакет("ШаблонНоменклатуры"), УникальныйИдентификатор);
	АдресСхемыДанныхНаименованияДляПечатиНоменклатуры = АдресСхемыДанныхРабочегоНаименованияНоменклатуры;
	АдресСхемыДанныхРабочегоНаименованияСерии = ПоместитьВоВременноеХранилище(Справочники.ВидыНоменклатуры.ПолучитьМакет("ШаблонСерии"), УникальныйИдентификатор);
	
	ЗаполнитьДеревоОператоров();
	
	ИменаРеквизитовДляОткрытияФормыНастройкаИспользованияСерий = Справочники.ВидыНоменклатуры.ИменаРеквизитовДляФормыНастройкаИспользованияСерий();
	
	УстановитьДоступныеТипыНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЭтоЧтениеПриСозданииФормы() Тогда
		// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ИмяСобытия = РаботаСНоменклатуройКлиент.ОписаниеОповещенийПодсистемы().ЗагрузкаКатегорий Тогда
		Если Не Модифицированность Тогда
			ПерезаполнитьИдентификаторыКатегорий();
		КонецЕсли;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаВидаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	НастроитьФормуПоТипуНоменклатуры();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьОбщийНаборСвойствНоменклатуры(Команда)
	
	ОткрытьНаборСвойств(НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщийНаборСвойствСерийНоменклатуры(Команда)
	
	ОткрытьНаборСвойств(НаборСвойствПоИмени("Справочник_СерииНоменклатуры_Общие"));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияНоменклатуры(Команда)
	
	РедактироватьШаблонНаименования("РабочегоНаименованияНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиНоменклатуры(Команда)
	
	РедактироватьШаблонНаименования("НаименованияДляПечатиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияСерии(Команда)
	
	РедактироватьШаблонНаименования("РабочегоНаименованияСерии");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименования(ЗначащаяЧастьИмениШаблона)
	
	ПараметрыКонструктора = Новый Структура;
	ПараметрыКонструктора.Вставить("Формула", Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]);
	ПараметрыКонструктора.Вставить("ОперандыЗаголовок", НСтр("ru = 'Доступные реквизиты'"));
	ПараметрыКонструктора.Вставить("УбиратьИмяТаблицы", Истина);
	ПараметрыКонструктора.Вставить("Операнды", ЭтотОбъект["АдресСхемыДанных" + ЗначащаяЧастьИмениШаблона]);
	
	ЭтоШаблонНоменклатуры = СтрНайти(ЗначащаяЧастьИмениШаблона, "Номенклатуры") > 0;
	
	ПараметрыДанных = Новый Структура;
	Если ЭтоШаблонНоменклатуры Тогда
		
		ЭтоЛекарственнаяФорма =
			(Объект.ТипНоменклатурыРасширенный = ПредопределенноеЗначение("Справочник.ТипыНоменклатурыРасширенные.ЛекарственноеСредство"));
		
		ПараметрыДанных.Вставить("НаборСвойств", Объект.НаборСвойств);
		ПараметрыДанных.Вставить("ЭтоЛекарственноеСредство", ЭтоЛекарственнаяФорма);
		ПараметрыДанных.Вставить("ТипНоменклатурыРасширенный", Объект.ТипНоменклатурыРасширенный);
		ПараметрыДанных.Вставить("ТипНоменклатуры", Объект.ТипНоменклатуры);
		
		ПараметрыКонструктора.Вставить("Операторы", АдресХранилищаДереваОператоров);
		
	Иначе
		
		ПараметрыДанных.Вставить("НаборСвойств", Объект.НаборСвойствСерий);
		
	КонецЕсли;
	
	ДополнитьПараметрыДанныхНаборамиСвойств(ПараметрыДанных, ЭтоШаблонНоменклатуры);
	
	ПараметрыКонструктора.Вставить("ПараметрыДанных", ПараметрыДанных);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗначащаяЧастьИмениШаблона", ЗначащаяЧастьИмениШаблона);
	Оповестить = Новый ОписаниеОповещения("РедактироватьШаблонНаименованияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыКонструктора, ЭтотОбъект,,,, Оповестить);
	
КонецПроцедуры

// Процедура устанавливает значение шаблона наименования
// соответствующему реквизиту
//
// Продолжение процедуры РедактироватьШаблонНаименования
//
&НаКлиенте
Процедура РедактироватьШаблонНаименованияЗавершение(Шаблон, ДополнительныеПараметры) Экспорт
	
	ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
	
	Если Шаблон <> Неопределено
	   И Объект[ИмяШаблона] <> Шаблон Тогда
		
		Модифицированность = Истина;
		Объект[ИмяШаблона] = Шаблон;
		
		НастроитьПоШаблонуНаименования(ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	ОбработатьИзменениеТипаНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииПриИзменении(Элемент)
	
	ОбработатьИзменениеПризнакаИспользоватьСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаданияНастроекСерийПриИзменении(Элемент)
	
	Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = (ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры");
	Если Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
		ВыбратьВидВладелец("Серий");
	Иначе
		ОчиститьВладельца("Серий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "Серий", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкаИспользованияСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьНастройкуИспользованияСерий" Тогда
		
		ТекущиеРеквизиты = Новый Структура(ИменаРеквизитовДляОткрытияФормыНастройкаИспользованияСерий);
		ЗаполнитьЗначенияСвойств(ТекущиеРеквизиты, Объект);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзменении", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.НастройкаИспользованияСерий",
					ТекущиеРеквизиты,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаСерийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(НоменклатураКлиентСервер.ПолучитьДопустимыеТипыПолитикУчетаСерий(Объект));
	
	ЭлементНеУчитывать = ДанныеВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаСерий.НеУчитывать"));
	Если ЭлементНеУчитывать <> Неопределено Тогда
		ДанныеВыбора.Удалить(ЭлементНеУчитывать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаСерийВОтделенияхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(НоменклатураКлиентСервер.ПолучитьДопустимыеТипыПолитикУчетаСерий(Объект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПартииПриИзменении(Элемент)
	
	ОбработатьИзменениеПризнакаИспользоватьПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаданияНастроекПартийПриИзменении(Элемент)
	
	Объект.НастройкиПартийБерутсяИзДругогоВидаНоменклатуры = (ВариантЗаданияНастроекПартий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры");
	Если Объект.НастройкиПартийБерутсяИзДругогоВидаНоменклатуры Тогда
		ВыбратьВидВладелец("Партий");
	Иначе
		ОчиститьВладельца("Партий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "Партий", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаПартийПриИзменении(Элемент)
	
	ОбработатьИзменениеПолитикиУчетаПартий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаПартийВОтделенияхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.НеУчитывать"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий"));
	Если Объект.ПолитикаУчетаПартий = ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаборСвойствНоменклатурыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНаборСвойств(Объект.НаборСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборСвойствСерийНоменклатурыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНаборСвойств(Объект.НаборСвойствСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПодключитьОбработчикОжидания("ОткрытьФормуРедактированияСоставаРеквизитов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
	Для Каждого ПараметрыСтроки Из ВыбранноеЗначение Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ПараметрыСтроки);
		
		РеквизитНеНайден = (Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор).Количество() = 0);
		Если РеквизитНеНайден Тогда
			
			НоваяСтрока = Объект.РеквизитыБыстрогоОтбораНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.ИспользоватьСерии Тогда
		Если Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
		Иначе
			ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
		КонецЕсли;
	Иначе
		ВариантЗаданияНастроекСерий = "";
	КонецЕсли;
	
	Если Объект.ИспользоватьПартии Тогда
		Если Объект.НастройкиПартийБерутсяИзДругогоВидаНоменклатуры Тогда
			ВариантЗаданияНастроекПартий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
		Иначе
			ВариантЗаданияНастроекПартий = "НастроеныДляВидаНоменклатуры";
		КонецЕсли;
	Иначе
		ВариантЗаданияНастроекПартий = "";
	КонецЕсли;
	
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Серий");
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Партий");
	
	НастроитьФормуПоТипуНоменклатуры();
	
	НастроитьПоШаблонуНаименования("РабочегоНаименованияНоменклатуры");
	НастроитьПоШаблонуНаименования("НаименованияДляПечатиНоменклатуры");
	НастроитьПоШаблонуНаименования("РабочегоНаименованияСерии");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоШаблонуНаименования(ЗначащаяЧастьИмениШаблона)
	
	Если Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]) Тогда
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок  = Объект["Шаблон" + ЗначащаяЧастьИмениШаблона];
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Иначе
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок = НСтр("ru = '<шаблон не задан>'");
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет; 
	КонецЕсли;
	
	Если Найти(ЗначащаяЧастьИмениШаблона, "Серии") = 0 Тогда
		Элементы["ЗапретРедактирования" + ЗначащаяЧастьИмениШаблона].Доступность = Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПризнакаИспользоватьСерии()
	
	Если Объект.ИспользоватьСерии Тогда
		
		ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
		Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
		
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров;
		Если Объект.ПолитикаУчетаСерий = Перечисления.ТипыПолитикУчетаСерий.НеУчитывать Тогда
			Объект.ПолитикаУчетаСерий = Перечисления.ТипыПолитикУчетаСерий.УправлениеОстаткамиСерий;
		КонецЕсли;
		Объект.ИспользоватьНомерСерии = Истина;
		Объект.ИспользоватьСрокГодностиСерии = Истина;
		Объект.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней;
		
	Иначе
		
		ВариантЗаданияНастроекСерий = "";
		Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
		Объект.ВладелецСерий = Неопределено;
		ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Серий");
		
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.НеИспользовать;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекСерий();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПризнакаИспользоватьПартии()
	
	Если Объект.ИспользоватьПартии Тогда
		ВариантЗаданияНастроекПартий = "НастроеныДляВидаНоменклатуры";
		Объект.ПолитикаУчетаПартий = Перечисления.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий;
		ОбработатьИзменениеПолитикиУчетаПартий();
	Иначе
		ВариантЗаданияНастроекПартий = "";
		Объект.НастройкиПартийБерутсяИзДругогоВидаНоменклатуры = Ложь;
		Объект.ВладелецПартий = Неопределено;
		ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Партий");
		
		Объект.ПолитикаУчетаПартий = Перечисления.ТипыПолитикУчетаПартий.НеУчитывать;
		Объект.ПолитикаУчетаПартийВОтделениях = Перечисления.ТипыПолитикУчетаПартий.НеУчитывать;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекПартий();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПолитикиУчетаПартий()
	
	Если Не ЗначениеЗаполнено(Объект.ПолитикаУчетаПартийВОтделениях) Тогда
		
		Объект.ПолитикаУчетаПартийВОтделениях = Перечисления.ТипыПолитикУчетаПартий.НеУчитывать;
		
	ИначеЕсли Объект.ПолитикаУчетаПартийВОтделениях <> Перечисления.ТипыПолитикУчетаПартий.НеУчитывать Тогда
		
		Если Перечисления.ТипыПолитикУчетаПартий.Индекс(Объект.ПолитикаУчетаПартийВОтделениях) > Перечисления.ТипыПолитикУчетаПартий.Индекс(Объект.ПолитикаУчетаПартий) Тогда
			Объект.ПолитикаУчетаПартийВОтделениях = Объект.ПолитикаУчетаПартий;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТипуНоменклатуры()
	
	Элементы.ТипНоменклатуры.Подсказка = Справочники.ТипыНоменклатурыРасширенные.ПодсказкаПоТипуНоменклатуры(Объект.ТипНоменклатурыРасширенный);
	
	ЭтоЛекарственнаяФорма =
		(Объект.ТипНоменклатурыРасширенный = Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство);
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	Элементы.ЕдиницаИзмерения.Видимость = Не ЭтоЛекарственнаяФорма;
	Если ЭтоУслуга Тогда
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Измерения'");
	Иначе
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Хранения'");
	КонецЕсли;
	Элементы.ЕдиницаИзмерения.Заголовок = ЗаголовокЕдиницыИзмерения;
	Элементы.ЕдиницыИзмеренияПоУмолчаниюЛекарственныхФорм.Видимость = ЭтоЛекарственнаяФорма;
	Элементы.ГруппаПКУ.Видимость = ЭтоТовар И Не ЭтоЛекарственнаяФорма;
	Элементы.ШаблоныЭтикетокИЦенников.Видимость = ЭтоТовар;
	
	Элементы.КодТНВЭД.Видимость = ЭтоТовар;
	Элементы.КодТНВЭДНаименование.Видимость = Элементы.КодТНВЭД.Видимость;
	Элементы.ОКПД2.Видимость = ЭтоТовар;
	Элементы.ОКПД2НаименованиеПолное.Видимость = Элементы.ОКПД2.Видимость;
	
	Если ЭтоТовар Тогда
		Элементы.СтраницыПравилаВеденияУчета.ТекущаяСтраница = Элементы.СтраницаПравилаВеденияУчетаТовар;
	Иначе
		Элементы.СтраницыПравилаВеденияУчета.ТекущаяСтраница = Элементы.СтраницаПравилаВеденияУчетаУслуга;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекСерий();
	УстановитьВидимостьДоступностьНастроекПартий();
	
КонецПроцедуры

&НаСервере
Функция УстановитьВидимостьДоступностьНастроекСерий()
	
	Элементы.ВариантЗаданияНастроекСерий.Доступность = Объект.ИспользоватьСерии;
	
	Элементы.НадписьНастройкаИспользованияСерий.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ВладелецСерий.Видимость = Объект.ИспользоватьСерии;
	Элементы.ПолитикаУчетаСерий.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.ПолитикаУчетаСерийВОтделениях.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.НадписьДляЭкземпляровТолькоСправочноеУказание.Видимость =
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара
		И Объект.ИспользоватьСерии
		И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ГруппаНаборСвойствСерийНоменклатуры.Видимость = Объект.ИспользоватьСерии;
	
	Элементы.ГруппаШаблоныНаименованийСерий.Видимость = Объект.ИспользоватьСерии;
	
	СформироватьНадписьПоВидуВладельцу("Серий");
	
	Если Элементы.НадписьНастройкаИспользованияСерий.Видимость Тогда
		СформироватьНадписьНастройкаИспользованияСерий();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьНадписьНастройкаИспользованияСерий()
	
	ЧастиНадписи = Новый Массив;
	ЧастиНадписи.Добавить(НСтр("ru = 'Серия идентифицирует'"));
	ЧастиНадписи.Добавить(": ");
	ЧастиНадписи.Добавить(Справочники.ВидыНоменклатуры.ПредставлениеНастройкиИспользованияСерий(Объект));
	
	Если Не Элементы.ИспользоватьСерии.ТолькоПросмотр Тогда
		ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,, "ИзменитьНастройкуИспользованияСерий"));
	КонецЕсли;
	
	Элементы.НадписьНастройкаИспользованияСерий.Заголовок = Новый ФорматированнаяСтрока(ЧастиНадписи);
	
КонецПроцедуры

&НаСервере
Функция УстановитьВидимостьДоступностьНастроекПартий()
	
	Элементы.ВариантЗаданияНастроекПартий.Доступность = Объект.ИспользоватьПартии;
	Элементы.ВладелецПартий.Видимость = Объект.ИспользоватьПартии;
	
	Элементы.ГруппаПолитикиУчетаПартий.Видимость = Объект.ИспользоватьПартии И Не Объект.НастройкиПартийБерутсяИзДругогоВидаНоменклатуры;
	
	СформироватьНадписьПоВидуВладельцу("Партий");
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеТипаНоменклатуры()
	
	ПараметрыТипаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТипНоменклатурыРасширенный, "ТипНоменклатуры");
	Объект.ТипНоменклатуры = ПараметрыТипаНоменклатуры.ТипНоменклатуры;
	
	Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Объект.ИспользоватьСерии = Ложь;
		Объект.ИспользоватьПартии = Ложь;
	КонецЕсли;
	
	НастроитьФормуПоТипуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаборСвойств(Набор)
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка");
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("Набор"                    , Набор);
	ПараметрыПерехода.Вставить("Свойство"                 , Неопределено);
	ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
	   И Объект.НастройкаИспользованияСерий <> Результат.НастройкаИспользованияСерий Тогда
		ТекстВопроса = НСтр("ru = 'Для серий, которые используются для учета экземпляров товаров, на складах могут быть назначены
			|только политики учета серий с типом ""%1"". Политики с другими типами будут заменены. Продолжить?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстВопроса, ПредопределенноеЗначение("Перечисление.ТипыПолитикУчетаСерий.СправочноеУказаниеСерий"));
		
		Оповестить = Новый ОписаниеОповещения("ОтветитьНаВопросОбОчисткеНекорректныхПолитикУчетаСерий", ЭтотОбъект, Результат);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НастройкаИспользованияСерийПриИзмененииСервер(Результат, Ложь);
	
КонецПроцедуры

// Продолжение процедуры НастройкиИспользованияСерийПриИзменении
//
&НаКлиенте
Процедура ОтветитьНаВопросОбОчисткеНекорректныхПолитикУчетаСерий(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НастройкаИспользованияСерийПриИзмененииСервер(ДополнительныеПараметры, Истина);
		ОчиститьНекорректныеПолитикиУчетаСерий();
		УстановитьВидимостьДоступностьНастроекСерий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИспользованияСерийПриИзмененииСервер(Знач Результат, Знач УдалятьПолитики)
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат, Справочники.ВидыНоменклатуры.ИменаРеквизитовДляФормыНастройкаИспользованияСерий());
	
	Если УдалятьПолитики Тогда
		ОчиститьНекорректныеПолитикиУчетаСерий();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНастроекСерий();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНекорректныеПолитикиУчетаСерий()
	
	ДопустимыеТипыПолитик = НоменклатураКлиентСервер.ПолучитьДопустимыеТипыПолитикУчетаСерий(Объект);
	
	Если ДопустимыеТипыПолитик.Найти(Объект.ПолитикаУчетаСерий) = Неопределено Тогда
		Объект.ПолитикаУчетаСерий = Неопределено;
	КонецЕсли;
	
	Если ДопустимыеТипыПолитик.Найти(Объект.ПолитикаУчетаСерийВОтделениях) = Неопределено Тогда
		Объект.ПолитикаУчетаСерийВОтделениях = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеРеквизитыПанелиОтборовНоменклатуры()
	
	ДоступныеРеквизиты = Справочники.Номенклатура.ДоступныеРеквизитыДляПанелиОтборов(
		Объект.ТипНоменклатурыРасширенный,
		Объект.ТипНоменклатуры,
		Объект.НаборСвойств);
	ДоступныеРеквизиты.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	
	ПараметрыПоиска = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
	Для Каждого Реквизит Из ДоступныеРеквизиты Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Реквизит);
		НайденныеРеквизиты = Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеРеквизиты.Количество() Тогда
			Реквизит.Используется = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДоступныеРеквизиты);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОператоров()
	
	Операторы = КонструкторФормулБольничнаяАптека.ПолучитьСтандартноеДеревоОператоров();
	
	ГруппаОператоров = КонструкторФормулБольничнаяАптека.ДобавитьГруппуОператоров(Операторы, НСтр("ru='Наименования лекарственных средств'"));
	КонструкторФормулБольничнаяАптека.ДобавитьОператор(Операторы, ГруппаОператоров, НСтр("ru='Рабочее наименование'"), ШаблонРабочегоНаименованияНоменклатуры());
	КонструкторФормулБольничнаяАптека.ДобавитьОператор(Операторы, ГруппаОператоров, НСтр("ru='Рабочее наименование (ГРЛС)'"), ШаблонРабочегоНаименованияНоменклатурыГРЛС());
	КонструкторФормулБольничнаяАптека.ДобавитьОператор(Операторы, ГруппаОператоров, НСтр("ru='Наименование для печати'"), ШаблонНаименованияДляПечатиНоменклатуры());
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Операторы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ШаблонРабочегоНаименованияНоменклатуры()
	
	Шаблон = НСтр("ru = '?(ЗначениеЗаполнено([ЭлементКАТ.ТорговоеНаименование]), [ЭлементКАТ.ТорговоеНаименование], [ЭлементКАТ.ДействующиеВеществаМНН])
	|+ "", "" + [ЭлементКАТ.ФормаВыпуска]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.ВКомплекте]), "", "" + [ЭлементКАТ.ВКомплекте], """")
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.КоличествоДозВУпаковке]), "", "" + [ЭлементКАТ.КоличествоДозВУпаковке] + "" доз(а)"", """")
	|+ "", "" + [ЭлементКАТ.Упаковка.НаименованиеСокращенное]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.ФирмаПроизводитель]), "" "" + [ЭлементКАТ.ФирмаПроизводитель], """")'");
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Функция ШаблонРабочегоНаименованияНоменклатурыГРЛС()
	
	Шаблон = НСтр("ru = '[ЭлементКАТ.ТорговоеНаименование]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.НаименованиеЛекарственнойФормыГРЛС]) И ЗначениеЗаполнено([ЭлементКАТ.ОписаниеДозировкиГРЛС]), "", "" + [ЭлементКАТ.НаименованиеЛекарственнойФормыГРЛС] + "" "" + [ЭлементКАТ.ОписаниеДозировкиГРЛС], """")
	|+ "", "" + [ЭлементКАТ.Упаковка.НаименованиеСокращенное]
	|+ ?(ЗначениеЗаполнено([ЭлементКАТ.ФирмаПроизводитель]), "" "" + [ЭлементКАТ.ФирмаПроизводитель], """")'");
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Функция ШаблонНаименованияДляПечатиНоменклатуры()
	
	Шаблон = НСтр("ru = '[ЭлементКАТ.НаименованиеПолное]+ "", "" + [ЭлементКАТ.ФирмаПроизводитель]'");
	
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Процедура ОчиститьВладельца(ЗначащаяЧастьИмениНадписи)
	
	Объект["Владелец" + ЗначащаяЧастьИмениНадписи] = Неопределено;
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи);
	Результат = Вычислить("УстановитьВидимостьДоступностьНастроек" + ЗначащаяЧастьИмениНадписи + "()");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидВладелец(ЗначащаяЧастьИмениНадписи)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекущийВид"          , Объект.Ссылка);
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОтборФормыВыбора = Новый Структура;
	ОтборФормыВыбора.Вставить("ТипНоменклатуры", Объект.ТипНоменклатуры);
	
	Если ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		ОтборФормыВыбора.Вставить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры", Ложь);
		ОтборФормыВыбора.Вставить("ИспользоватьСерии"                             , Истина);
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Партий" Тогда
		ОтборФормыВыбора.Вставить("ИспользоватьПартии"                             , Истина);
		ОтборФормыВыбора.Вставить("НастройкиПартийБерутсяИзДругогоВидаНоменклатуры", Ложь);
	КонецЕсли;
	
	ПараметрыФормыВыбора.Вставить("Отбор", ОтборФормыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначащаяЧастьИмениНадписи", ЗначащаяЧастьИмениНадписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВидВладелецЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Справочник.ВидыНоменклатуры.Форма.ФормаВыбора",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ВыбратьВидВладелец
//
&НаКлиенте
Процедура ВыбратьВидВладелецЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект["Владелец" + ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи] = Результат;
		ВыбратьВидВладелецСервер(ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВидВладелецСервер(ЗначащаяЧастьИмениНадписи)
	
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи);
	
	Если ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		УстановитьВидимостьДоступностьНастроекСерий();
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Партий" Тогда
		УстановитьВидимостьДоступностьНастроекПартий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи)
	
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	СписокВидов = ЭтотОбъект["ВидыНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи];
	ВидВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
	
	Если Не Особенности.ЭтотВидСамЯвляетсяВладельцем
	   И Не ЗначениеЗаполнено(ВидВладелец)
	 Или Не Особенности.НуженТекстВНадписи Тогда
		СписокВидов.Очистить();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	&РеквизитВладелец = &ВидВладелец
	|	И &ВидВладелец <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	И ВидыНоменклатуры.Ссылка <> &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелец", "ВидыНоменклатуры.Владелец" + ЗначащаяЧастьИмениНадписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если Особенности.ЭтотВидСамЯвляетсяВладельцем Тогда
		Запрос.УстановитьПараметр("ВидВладелец", Объект.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("ВидВладелец", ВидВладелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СписокВидов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Функция ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи)
	
	Особенности = Новый Структура;
	
	Особенности.Вставить("ЭтотВидСамЯвляетсяВладельцем", Ложь);
	Особенности.Вставить("НуженТекстВНадписи"          , Ложь);
	Особенности.Вставить("МожноРедактироватьВладельца" , Ложь);
	
	Если ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		
		Если Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = Объект.ИспользоватьСерии;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ВариантЗаданияНастроекСерий.ТолькоПросмотр;
		
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Партий" Тогда
		
		Если Не Объект.НастройкиПартийБерутсяИзДругогоВидаНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = Объект.ИспользоватьПартии;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ВариантЗаданияНастроекПартий.ТолькоПросмотр;
		
	КонецЕсли;
	
	Возврат Особенности;
КонецФункции

&НаСервере
Процедура СформироватьНадписьПоВидуВладельцу(ЗначащаяЧастьИмениНадписи);
	
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	МассивСтрок = Новый Массив;
	Если Особенности.НуженТекстВНадписи Тогда
		
		СписокВидов = ЭтотОбъект["ВидыНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи];
		ПредставлениеКоличестваВидов = "";
		
		Если Особенности.ЭтотВидСамЯвляетсяВладельцем Тогда
			
			Если СписокВидов.Количество() > 0 Тогда
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'и еще'"));
				МассивСтрок.Добавить(" ");
				ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1-го вида;;%1-х видов;%1-и видов;%1 видов'"), СписокВидов.Количество());
			КонецЕсли;
			
		Иначе
			
			ВидВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
			
			Если Не ЗначениеЗаполнено(ВидВладелец) Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<вид не выбран>'"),,ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выбрать'"),,,, "ИзменитьВладельца" + ЗначащаяЧастьИмениНадписи));
			Иначе
				
				ПредставлениеВида = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПредставлениеСтрокиСДлинойНеБолее(Строка(ВидВладелец), 40);
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВида,,,, "ОткрытьВладельца" + ЗначащаяЧастьИмениНадписи));
				
				Если Особенности.МожноРедактироватьВладельца Тогда
					МассивСтрок.Добавить(" (");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,, "ИзменитьВладельца" + ЗначащаяЧастьИмениНадписи));
					МассивСтрок.Добавить(")");
				КонецЕсли;
				
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru = 'и еще с'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1-м видом;;%1-я видами;%1-и видами;%1 видами'"), СписокВидов.Количество());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеКоличестваВидов) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ПредставлениеКоличестваВидов,
				,
				,
				,
				"ОткрытьСписокВидовСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи));
		КонецЕсли;
	КонецЕсли;
	
	Элементы["Владелец" + ЗначащаяЧастьИмениНадписи].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылкаПриведенная = СтрЗаменить(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, "");
	
	Если НавигационнаяСсылкаПриведенная = "ОткрытьВладельца" Тогда
		ПоказатьЗначение(, Объект["Владелец" + ЗначащаяЧастьИмениНадписи]);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ИзменитьВладельца" Тогда
		ВыбратьВидВладелец(ЗначащаяЧастьИмениНадписи);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ОткрытьСписокВидовСТемЖеВладельцем" Тогда
		ПоказатьЗначение(, ЭтотОбъект["ВидыНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи]);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестная навигационная ссылка.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоЧтениеПриСозданииФормы()
	
	Возврат Параметры.Свойство("ТолькоПросмотр");
	
КонецФункции

&НаСервере
Процедура УстановитьДоступныеТипыНоменклатуры()
	
	Если Не ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ТипыНоменклатурыРасширенные
	|ГДЕ
	|	ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|");
	
	Элементы.ТипНоменклатуры.РежимВыбораИзСписка = Истина;
	Элементы.ТипНоменклатуры.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если Не Объект.Ссылка.Пустая()
	   И ЗначениеЗаполнено(Объект.ТипНоменклатурыРасширенный)
	   И Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатурыРасширенный) = Неопределено Тогда
		Элементы.ТипНоменклатуры.СписокВыбора.Добавить(Объект.ТипНоменклатурыРасширенный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоставаРеквизитов()
	
	ПараметрыФормы = Новый Структура("АдресВХранилище", ПолучитьДоступныеРеквизитыПанелиОтборовНоменклатуры());
	ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", ПараметрыФормы, Элементы.РеквизитыБыстрогоОтбораНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыДанныхНаборамиСвойств(ПараметрыДанных, ЭтоШаблонНоменклатуры)
	
	Если ЭтоШаблонНоменклатуры Тогда
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_Номенклатура_Общие"                , НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_Номенклатура_ЛекарственныеСредства", НаборСвойствПоИмени("Справочник_Номенклатура_ЛекарственныеСредства"));
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_Номенклатура_Прочая"               , НаборСвойствПоИмени("Справочник_Номенклатура_Прочая"));
	Иначе
		ПараметрыДанных.Вставить("НаборСвойств_Справочник_СерииНоменклатуры_Общие", НаборСвойствПоИмени("Справочник_СерииНоменклатуры_Общие"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НаборСвойствПоИмени(ИмяНабора)
	
	Возврат УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ЗапретРедактированияРеквизитовОбъектовБольничнаяАптекаКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект,, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта
//
&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		НастроитьФормуПоТипуНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура);
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка, Ложь, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьКатегорию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытьКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой(Элемент)
	
	АдресДанныхФормы = ПодготовитьДанныеДляИнтерактивногоЗаполнения();
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект);
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, АдресДанныхФормы, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыВыбораОбъектаСервиса(ДанныеОбъекта, ДополнительныеПараметры) Экспорт
	
	АдресДанныхФормы = ПодготовитьДанныеДляИнтерактивногоЗаполнения();
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект);
	
	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбора(ДанныеОбъекта, ДополнительныеПараметры, АдресДанныхФормы, Оповестить);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляИнтерактивногоЗаполнения()
	
	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеФормыЗаполненияОбъекта(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы)
	
	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	НастроитьФормуПоТипуНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИдентификаторыКатегорий()
	
	РаботаСНоменклатурой.ПерезаполнитьВстроенныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти // СтандартныеПодсистемы
