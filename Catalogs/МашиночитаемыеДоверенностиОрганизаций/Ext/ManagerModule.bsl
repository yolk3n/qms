#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//
Функция СведенияМЧД(МЧД) Экспорт

	Реквизиты = "ДатаВыдачи, ДатаОкончания, ДоверительЮЛ_ИНН,
				|ДоверительФЛ_ИНН, ПредставительФЛ_ИНН, ДатаОбновленияСтатуса, СтатусВРеестреФНС,
				|Подписана, Верна, Отозвана, ДатаОтзыва, ПолномочияОграничены,
				|СовместныеПолномочия, НесколькоПредставителей,
				|ИННДоверителяРодительскойДоверенности, НомерРодительскойДоверенности";
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
	СведенияМЧД = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	СведенияМЧД.Ссылка = МЧД;
	СведенияМЧД.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(МЧД);
	ЗаполнитьЗначенияСвойств(СведенияМЧД, РеквизитыМЧД,
		"ДатаВыдачи, ДатаОкончания, СтатусВРеестреФНС, Подписана, Верна, Отозвана,
		|ДатаОтзыва, ПолномочияОграничены, СовместныеПолномочия, НесколькоПредставителей,
		|ИННДоверителяРодительскойДоверенности, НомерРодительскойДоверенности");
	СведенияМЧД.ДатаПолученияСведений = РеквизитыМЧД.ДатаОбновленияСтатуса;
	СведенияМЧД.ИННПредставителя = РеквизитыМЧД.ПредставительФЛ_ИНН;
	СведенияМЧД.ИННДоверителя = ?(ПустаяСтрока(РеквизитыМЧД.ДоверительЮЛ_ИНН), РеквизитыМЧД.ДоверительФЛ_ИНН,
		РеквизитыМЧД.ДоверительЮЛ_ИНН);

	Возврат СведенияМЧД;

КонецФункции

// Получает данные МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//
Функция ПолучитьДанныеМЧД(МЧД) Экспорт

	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД,
		"НомерДоверенности, ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН");
	ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
	ДанныеМЧД.ИННДоверителя = ?(ПустаяСтрока(РеквизитыМЧД.ДоверительЮЛ_ИНН), РеквизитыМЧД.ДоверительФЛ_ИНН,
		РеквизитыМЧД.ДоверительЮЛ_ИНН);

	Возврат ДанныеМЧД;

КонецФункции

// Заполняет элемент справочника МЧД сведениями.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  Сведения - См. МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД
//
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД
//
Функция ЗаполнитьМЧД(МЧД, Сведения) Экспорт

	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	Результат = МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД();
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = Сведения.ПолныеДанные.ДанныеВыгрузки;
	ДанныеДляЗагрузки.ДанныеПодписи = Сведения.ПолныеДанные.ДанныеПодписи;
	ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = Сведения.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
	
	ДополнительныеСведения = Новый Структура;
	СтатусДоверенности = МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(Сведения.ЧастичныеДанные.СтатусДоверенности);
	ДополнительныеСведения.Вставить("СтатусВРеестреФНС", СтатусДоверенности);
	ДополнительныеСведения.Вставить("ДатаОбновленияСтатуса", Сведения.ДатаЗагрузкиИзРеестра);
	
	РезультатЗагрузки = 
		ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки,
			ТребуетсяПроверкаМЧДНаКлиенте, Истина, ДополнительныеСведения);
	
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	
	МЧД = РезультатЗагрузки.Ссылка;
	
	Если НЕ ПустаяСтрока(РезультатЗагрузки.Ошибка) ИЛИ НЕ ЗначениеЗаполнено(МЧД) Тогда

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = РезультатЗагрузки.Ошибка;
		Возврат Результат;
			
	КонецЕсли;
	
	Реквизиты = "ДатаВыдачи, ДатаОкончания, ДоверительЮЛ_ИНН,
		|ДоверительФЛ_ИНН, ПредставительФЛ_ИНН, ДатаОбновленияСтатуса, СтатусВРеестреФНС,
		|Подписана, Верна, Отозвана, ДатаОтзыва, ПолномочияОграничены,
		|СовместныеПолномочия, НесколькоПредставителей, НомерРодительскойДоверенности,
		|ИННДоверителяРодительскойДоверенности, Полномочия, ВозможноПередоверие";
	
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
	Полномочия = РеквизитыМЧД.Полномочия.Выгрузить().Скопировать(, "Код, Описание, Пояснение, Содержание");
	
	СведенияМЧД = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	СведенияМЧД.Ссылка = МЧД;
	СведенияМЧД.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(МЧД);
	СведенияМЧД.ТипПередоверия = ?(РеквизитыМЧД.ВозможноПередоверие, "1", "2");
	
	ЗаполнитьЗначенияСвойств(СведенияМЧД, РеквизитыМЧД,
		"ДатаВыдачи, ДатаОкончания, СтатусВРеестреФНС, Подписана, Верна,
		|Отозвана, ДатаОтзыва, ПолномочияОграничены,
		|СовместныеПолномочия, НесколькоПредставителей, НомерРодительскойДоверенности,
		|ИННДоверителяРодительскойДоверенности");
	
	СведенияМЧД.ДатаПолученияСведений = РеквизитыМЧД.ДатаОбновленияСтатуса;
	СведенияМЧД.ИННПредставителя = РеквизитыМЧД.ПредставительФЛ_ИНН;
	СведенияМЧД.ИННДоверителя =
		?(ПустаяСтрока(РеквизитыМЧД.ДоверительФЛ_ИНН), РеквизитыМЧД.ДоверительЮЛ_ИНН, РеквизитыМЧД.ДоверительФЛ_ИНН);
	СведенияМЧД.Полномочия = ОбщегоНазначения.ТаблицаЗначенийВМассив(Полномочия);
	Результат.Сведения = СведенияМЧД;
	
	Возврат Результат;
	
КонецФункции

// Ищет МЧД контрагента, а в случае неудачного поиска создает новую МЧД
// 
// Параметры:
//  ДанныеДоверенности - см. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * Ошибка - Булево
//  * ОписаниеОшибки - Строка
//  
Функция НайтиСоздатьМЧД(ДанныеДоверенности) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Ссылка", ПустаяСсылка());
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	МЧД = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);

	Если ЗначениеЗаполнено(МЧД) Тогда
		Результат.Ссылка = МЧД;
	Иначе

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
			ЭлементБлокировки.УстановитьЗначение("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();

			МЧД = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);

			Если ЗначениеЗаполнено(МЧД) Тогда
				Результат.Ссылка = МЧД;
			Иначе

				МЧД = СоздатьЭлемент();
				МЧД.НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
				Если СтрДлина(ДанныеДоверенности.ИННДоверителя) < 12 Тогда
					МЧД.ДоверительЮЛ_ИНН = ДанныеДоверенности.ИННДоверителя;
				Иначе
					МЧД.ДоверительФЛ_ИНН = ДанныеДоверенности.ИННДоверителя;
				КонецЕсли;
				МЧД.Записать();
				Результат.Ссылка = МЧД.Ссылка;

			КонецЕсли;

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		КонецПопытки;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает идентификатор машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - Идентификатор машиночитаемой доверенности.
//
Функция ПолучитьИдентификаторМЧД(Ссылка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
КонецФункции

// Возвращает имя файла машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - Имя файла машиночитаемой доверенности.
//
Функция ПолучитьИмяФайлаМЧД(Ссылка) Экспорт

	Реквизиты = "ДатаОтправки, НомерДоверенности";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФорматыЭДО_ФНС.ПространствоИмен_МЧД());
	ДатаФайла = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОтправки), ЗначенияРеквизитов.ДатаОтправки,
		ТекущаяДатаСеанса());
	ЭлементыИмениФайла.Добавить(Формат(ДатаФайла, "ДФ=ггггММдд;"));
	ЭлементыИмениФайла.Добавить(ЗначенияРеквизитов.НомерДоверенности);

	Возврат СтрСоединить(ЭлементыИмениФайла, "_");

КонецФункции

// Возвращает двоичные данные машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеМЧД(Ссылка) Экспорт

	СтатусВРеестреФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СтатусВРеестреФНС");
	
	Если ЗначениеЗаполнено(СтатусВРеестреФНС) Тогда
		НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
		РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, "Отзыв");
		СтрокаXML = РезультатВыгрузки.Содержимое;
		Возврат ПолучитьДвоичныеДанныеИзСтроки(СтрокаXML, "windows-1251");
	Иначе
		Возврат СформироватьДвоичныеДанныеXML(Ссылка);
	КонецЕсли;

КонецФункции

// Загружает в элемент справочника данные из архива с файлом МЧД и подписью.
// Если доверенности с таким номером нет, то создает новую, иначе перезаполняет существующую.
//
// Параметры:
//  ДанныеФайла - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище.
//  МЧД			- Неопределено
//  			- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  Структура:
//  * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций.
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - Неопределено, См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ТекстОшибки - Строка
//
Функция ЗагрузитьМЧДИзФайла(ДанныеФайла, МЧД = Неопределено) Экспорт

	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;

	Результат = Новый Структура;
	Результат.Вставить("МЧД", ПустаяСсылка());
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);
	Результат.Вставить("ДанныеДляПроверки", Неопределено);
	Результат.Вставить("ТекстОшибки", "");

	ДанныеАрхива = МашиночитаемыеДоверенности.ПрочитатьАрхивСДоверенностьюИПодписью(ДанныеФайла);
	Если ДанныеАрхива = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеАрхива.ДанныеМЧД;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;

	Результат.ДанныеДляПроверки = ДанныеДляПроверки;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ДанныеАрхива.ДанныеМЧД;
	ДанныеДляЗагрузки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;
	
	ВидОперации = НСтр("ru = 'Загрузка машиночитаемой доверенности из файла.'");

	Попытка
		
		РезультатЧтения = МашиночитаемыеДоверенности.ПрочитатьДанныеXML(ДанныеДляЗагрузки.ДанныеДоверенности);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка при чтении файла доверенности: файл не соответствует формату ФНС.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
		
	КонецПопытки;

	ДополнительныеСведения = Новый Структура;
	ДополнительныеСведения.Вставить("ДатаЗагрузки", ТекущаяДатаСеанса());
	ДополнительныеСведения.Вставить(
		"СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());

	РезультатЗагрузки = ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, Истина,
		ДополнительныеСведения, МЧД);
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;

	Если Не РезультатЗагрузки.Выполнено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при заполнении доверенности из файла:'") + Символы.ПС
			+ РезультатЗагрузки.Ошибка;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Результат.МЧД = РезультатЗагрузки.Ссылка;

	Возврат Результат;

КонецФункции


// Возвращает преобразованные данные доверенности в строку xml.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДанныеОсновнойДоверенности - см. МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена
// 
// Возвращаемое значение:
//  Строка - доверенность в формате xml.
Функция СформироватьXML(Ссылка, ДанныеОсновнойДоверенности = Неопределено) Экспорт

	ДанныеДоверенности = ДанныеИзИнформационнойБазы(Ссылка);
	
	ВерсияФормата = "";
	ДвоичныеДанныеМЧД = Ссылка.XMLфайлМЧД.Получить();
	Если ДвоичныеДанныеМЧД <> Неопределено Тогда
		ВерсияФормата = МашиночитаемыеДоверенности.ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
	КонецЕсли;
	
	РазрешитьСозданиеМЧДВерсии002 = МашиночитаемыеДоверенности.РазрешитьСозданиеМЧДВерсии002();
	
	Если РазрешитьСозданиеМЧДВерсии002 
		И (ПустаяСтрока(ВерсияФормата) Или ВерсияФормата = МашиночитаемыеДоверенности.ФорматМЧД_2022_Версия_002()) Тогда 

		Если ДанныеОсновнойДоверенности <> Неопределено Тогда
			ДоверенностьXML = ДанныеПередоверияВСтрокуXMLВерсия002(ДанныеДоверенности, ДанныеОсновнойДоверенности);
			Возврат ДоверенностьXML;
		КонецЕсли;
		
		ДоверенностьXML = ДанныеДоверенностиВСтрокуXMLВерсия002(ДанныеДоверенности);
		Возврат ДоверенностьXML;
		
	КонецЕсли;
	
	ДоверенностьXML = ДанныеДоверенностиВСтрокуXML(ДанныеДоверенности);

	Возврат ДоверенностьXML;

КонецФункции


// Возвращает двоичные данные xml в кодировке windows-1251.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  ДвоичныеДанные
Функция СформироватьДвоичныеДанныеXML(Ссылка) Экспорт

	ДоверенностьXML = СформироватьXML(Ссылка);

	ДвоичныеДанныеXML = ПолучитьДвоичныеДанныеИзСтроки(ДоверенностьXML, "windows-1251");

	Возврат ДвоичныеДанныеXML;

КонецФункции

// Определяет наличие у пользователя прав на изменение машиночитаемых доверенностей организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);

КонецФункции

// Получает статус МЧД из реестра ФНС.
// 
// Параметры:
//  ДанныеДоверенности - Структура:
//  * НомерДоверенности - Строка
//  * СтатусВРеестреФНС - Строка
//  * ИдентификаторТранзакции - Строка
//  * ДоверительЮЛ_ИНН - Строка
//  * ДоверительФЛ_ИНН - Строка
//  * ДатаОтзыва - Дата
// 
// Возвращаемое значение:
// - Неопределено,
// - Структура:
//    * СтраницаНеНайдена - Булево - Не удалось найти страницу ошибка 404
//    * СостояниеИзменено - Булево - Состояние изменено
//    * СтатусВРеестреФНС - Строка - Статус в реестре ФНС
//    * НомерДоверенности - Строка - Номер доверенности
//    * ДатаВыдачи - Неопределено, Дата - Дата выдачи доверенности
//    * ДатаОкончания - Неопределено, Дата - Дата окончания доверенности
//    * ДатаПроверки - Дата - Дата получения статуса 
//    * ДатаОтзыва - Дата - Дата отзыва доверенности
//    
Функция ОбновитьСтатусМЧДИзРеестраФНС(ДанныеДоверенности) Экспорт
	
	Если ДанныеДоверенности.СтатусВРеестреФНС =
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СтраницаНеНайдена", 	Ложь);
	Результат.Вставить("СостояниеИзменено", 	Ложь);
	Результат.Вставить("СтатусВРеестреФНС", 	"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ДатаПроверки", 			Дата(1, 1, 1));
	Результат.Вставить("ДатаОтзыва", 			Дата(1, 1, 1));
	
	ТокенДоступа = "";
	СтраницаНеНайдена = Ложь;
	
	Если ДанныеДоверенности.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено Тогда
		
		СведенияСтатусаТранзакции = МашиночитаемыеДоверенностиВызовСервера.ПолучитьСтатусТранзакцииМЧД(
			ДанныеДоверенности.ИдентификаторТранзакции,
			ТокенДоступа,
			ДанныеДоверенности.НомерДоверенности);
		
		Если СведенияСтатусаТранзакции.СтатусТранзакции = "SUCCESS" Тогда
			
			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано;	
			
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = "FAILURE" Тогда
			
			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации;
				
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = 404 ИЛИ СведенияСтатусаТранзакции.СтатусТранзакции = 500 Тогда
			СтраницаНеНайдена = Истина;
			Результат.СтраницаНеНайдена = СтраницаНеНайдена;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено
		И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации)
		ИЛИ СтраницаНеНайдена Тогда
		
		СведенияСтатусаДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
			ДанныеДоверенности.НомерДоверенности,
			ТокенДоступа);
		
		Если СведенияСтатусаДоверенности.СтатусДоверенности = "CREATED"
			И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила Тогда
			
			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила;
			Результат.СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "ACTIVE"
			И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано
			И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв
			И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва Тогда
			
			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано;
			Результат.СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "EXPIRED"
			И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия Тогда
			
			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия;
			Результат.СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "DECLINED"
			Или СведенияСтатусаДоверенности.СтатусДоверенности = "REVOKED" Тогда
			ДатаОтзыва = ДатаОтзываДоверенности(ДанныеДоверенности.НомерДоверенности,
				ДанныеДоверенности.ДоверительЮЛ_ИНН, ДанныеДоверенности.ДоверительФЛ_ИНН, ТокенДоступа);
			Если Не ЗначениеЗаполнено(ДатаОтзыва) Тогда
				ДатаОтзыва = ТекущаяДатаСеанса();
			КонецЕсли;
			Если ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано
				Или (ДанныеДоверенности.ДатаОтзыва <> ДатаОтзыва И ЗначениеЗаполнено(ДатаОтзыва)) Тогда 
				Результат.ДатаОтзыва = ДатаОтзыва;
				Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано;
				Результат.СостояниеИзменено = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ДатаПроверки = ТекущаяДатаСеанса();
	
	Возврат Результат;
		
КонецФункции

#Область ЗагрузкаЭлементаСправочника


// Загружает элемент справочника из файла обмена.
// 
// Параметры:
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ОбновлятьСуществующий - Булево - Если Истина, то будет обновлен существующий элемент, если он найден.
//  ДополнительныеСведения - Неопределено, Структура - Если переданы, то будут заполнены в элементе справочника.
//  МЧД			- Неопределено
//  			- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура - Результат загрузки:
//   * Выполнено - Булево - Признак успешности выполнения загрузки.
//   * Ссылка - Неопределено, СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на элемент справочника.
//   * Ошибка - Строка - Текст ошибки, если не удалось загрузить элемент.
//   * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, ОбновлятьСуществующий = Ложь,
	ДополнительныеСведения = Неопределено, МЧД = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);

	Попытка
		
		РезультатЧтения = МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена(ДанныеДляЗагрузки.ДанныеДоверенности, Истина);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.Ошибка = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		ДанныеДоверенности = РезультатЧтения.ДанныеМЧД;
		
	Исключение
		
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
		
	КонецПопытки;

	РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьКлючевыеРеквизитыДанныхФайлаДоверенности(
		ДанныеДоверенности, Истина);
	Если РезультатПроверки.ЕстьОшибки Тогда
		Результат.Ошибка = РезультатПроверки.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДополнительныеСведения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеДоверенности, ДополнительныеСведения, Истина);
	КонецЕсли;
		
	ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
		ТребуетсяПроверкаМЧДНаКлиенте, МЧД);
	Результат.Ссылка = ТекущийЭлемент;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
		Результат.Выполнено = Истина;
	Иначе
		Результат.Ошибка = НСтр("ru = 'Не удалось записать элемент справочника. Подробности в журнале регистрации.'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ") Тогда
		ДоверенностьПодписана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Подписана");
		Если ДоверенностьПодписана Тогда
			ВыбраннаяФорма = "Справочник.МашиночитаемыеДоверенностиОрганизаций.Форма.ФормаПросмотра";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаЭлементаСправочника

// Заполняет и записывает элемент справочника.
//
// Параметры:
//  ДанныеДоверенности - см. МашиночитаемыеДоверенности.НовыеДанныеМЧД
//  ОбновлятьСуществующий - Булево - Обновлять существующий
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  МЧД			- Неопределено
//  			- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
//  Возвращаемое значение:
//   СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов - Ссылка на элемент справочника.
//
Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
	ТребуетсяПроверкаМЧДНаКлиенте, МЧД = Неопределено)
	
	Результат = ПустаяСсылка();
	НашлиЭлемент = Неопределено;
	
	Если ЗначениеЗаполнено(МЧД) Тогда
		НашлиЭлемент = МЧД;
	КонецЕсли;
	
	Если ОбновлятьСуществующий И Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		НашлиЭлемент = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеДляЗагрузки.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеДляЗагрузки.ДанныеПодписи;
	
	Если МашиночитаемыеДоверенности.ТребуетсяПерезаполнениеМЧД(ОбъектСправочника, ДанныеДляЗагрузки) Тогда
			
		ПрефиксыРеквизитовДляОчистки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"Доверитель, ЛицоБезДов, Представитель");
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			Для каждого ПрефиксРеквизитаДляОчистки Из ПрефиксыРеквизитовДляОчистки Цикл
				Если СтрНачинаетсяС(СтрокаРеквизита.Имя, ПрефиксРеквизитаДляОчистки) Тогда
					ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// здесь переносим значения реквизитов
		ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеДоверенности);
		
		МашиночитаемыеДоверенности.ЗаполнитьРеквизитыОтзыва(ОбъектСправочника, ДанныеДляЗагрузки);
		
		ТабличныеЧасти = Новый Структура;
		ТабличныеЧасти.Вставить("ФИО", ДанныеДоверенности.ФИО);
		ТабличныеЧасти.Вставить("Полномочия", ДанныеДоверенности.Полномочия);
		ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеДоверенности.УдостоверенияЛичности);
		
		Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
			ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
			ТекущаяТЧ.Очистить();
			Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
				ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Если (ДанныеДоверенности.Свойство("СтатусВРеестреФНС")
			И ДанныеДоверенности.СтатусВРеестреФНС <> ОбъектСправочника.СтатусВРеестреФНС) Тогда
			ОбъектСправочника.СтатусВРеестреФНС = ДанныеДоверенности.СтатусВРеестреФНС;
		КонецЕсли;
	КонецЕсли;
	
	МашиночитаемыеДоверенности.ЗаполнитьПодписанаВерна(ОбъектСправочника, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте);
	
	ОтсутствуетВозможностьПроверитьНаСервере = Не ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере();
	ЭтоПровереннаяРеестроваяМЧД =
		МашиночитаемыеДоверенности.ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности);
	
	Если ЭтоПровереннаяРеестроваяМЧД И ОтсутствуетВозможностьПроверитьНаСервере Тогда
		ОбъектСправочника.Верна = Истина;
	КонецЕсли;
	
	ОбъектСправочника.ПолномочияОграничены = МашиночитаемыеДоверенности.ПолномочияОграничены(ДанныеДоверенности);
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
		Если Не ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;
	
		Удачно = Истина;
	
		НачатьТранзакцию();
	
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИмяСобытия = НСтр("ru = 'Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
	
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

// Возвращает данные доверенности из информационной базы.
// 
// Параметры:
//  СправочникСсылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура:
// * ОКУД - Строка
// * ИдентификаторФайла - Строка
// * СведенияОбИнформационнойСистеме - Строка
// * Номер - Строка
// * ДатаВыдачи - Дата
// * ДатаОкончания - Дата
// * СрокДействия - Дата
// * ВозможноПередоверие - Булево
// * ПредыдущийНомер - Строка
// * ИностраннаяОрганизация - Булево
// * ДоверительЮЛ_ИНН - Строка
// * ДоверительЮЛ_КПП - Строка
// * ДоверительЮЛ_ОГРН - Строка
// * ДоверительЮЛ_СтрРег - СправочникСсылка.СтраныМира
// * ДоверительЮЛ_НаимРегОрг - Строка
// * ДоверительЮЛ_РегНомер - Строка
// * ДоверительЮЛ_Адр - Строка
// * ДоверительФЛ_ИНН - Строка
// * ДоверительФЛ_ОГРН - Строка
// * ДоверительФЛ_СНИЛС - Строка
// * ДоверительФЛ_Гражданство - СправочникСсылка.СтраныМира
// * ДоверительФЛ_Пол - Строка
// * ДоверительФЛ_ДатаРождения - Дата
// * ДоверительФЛ_МестоРожд - Строка
// * ДоверительЮЛ_НаимОрг - Строка
// * ДоверительЮЛ_ТипОрганизации - Строка
// * ЛицоБезДовЮЛ_НаимОрг - Строка
// * ЛицоБезДовЮЛ_ИНН - Строка
// * ЛицоБезДовЮЛ_КПП - Строка
// * ЛицоБезДовЮЛ_ОГРН - Строка
// * ЛицоБезДовФЛ_ИНН - Строка
// * ЛицоБезДовФЛ_СНИЛС - Строка
// * ЛицоБезДовФЛ_Гражданство - СправочникСсылка.СтраныМира
// * ЛицоБезДовФЛ_ДатаРождения - Дата
// * ЛицоБезДовФЛ_Должность - Строка
// * ЛицоБезДовФЛ_ОснованиеПолномочий - Строка
// * ЛицоБезДовФЛ_Имя - Строка
// * ЛицоБезДовФЛ_Отчество - Строка
// * ЛицоБезДовФЛ_Фамилия - Строка
// * ЛицоБезДовФЛ_ВидДок - Строка
// * ЛицоБезДовФЛ_СерДок - Строка
// * ЛицоБезДовФЛ_НомДок - Строка
// * ЛицоБезДовФЛ_ДатаДок - Строка
// * ЛицоБезДовФЛ_ВыдДок - Строка
// * ЛицоБезДовФЛ_КодВыдДок - Строка
// * ПредставительЮЛ_НаимОрг - Строка
// * ПредставительЮЛ_ИНН - Строка
// * ПредставительЮЛ_КПП - Строка
// * ПредставительЮЛ_ОГРН - Строка
// * ПредставительФЛ_ИНН - Строка
// * ПредставительФЛ_ОГРН - Строка
// * ПредставительФЛ_СНИЛС - Строка
// * ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
// * ПредставительФЛ_ДатаРождения - Дата
// * ПредставительЮЛ_Полномочия - Массив из Строка
// * ПредставительФЛ_Имя - Строка
// * ПредставительФЛ_Отчество - Строка
// * ПредставительФЛ_Фамилия - Строка
// * ПредставительФЛ_ВидДок - Строка
// * ПредставительФЛ_СерДок - Строка
// * ПредставительФЛ_НомДок - Строка
// * ПредставительФЛ_ДатаДок - Строка
// * ПредставительФЛ_ВыдДок - Строка
// * ПредставительФЛ_КодВыдДок - Строка
// * ИныеСведения - Строка
Функция ДанныеИзИнформационнойБазы(СправочникСсылка)

	Результат = Новый Структура;
	Результат.Вставить("ОКУД", "0251222");

	ИдентификаторФайла = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(СправочникСсылка);
	Результат.Вставить("ИдентификаторФайла", ИдентификаторФайла);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиПолномочия.НомерСтроки КАК НомерСтроки,
	|	МашиночитаемыеДоверенностиПолномочия.Ссылка КАК Доверенность,
	|	МашиночитаемыеДоверенностиПолномочия.Код КАК Код,
	|	МашиночитаемыеДоверенностиПолномочия.Описание КАК Описание,
	|	МашиночитаемыеДоверенностиПолномочия.Содержание КАК Содержание,
	|	МашиночитаемыеДоверенностиПолномочия.Пояснение КАК Пояснение
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.Полномочия КАК МашиночитаемыеДоверенностиПолномочия
	|ГДЕ
	|	МашиночитаемыеДоверенностиПолномочия.Ссылка = &СправочникСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиФИО.Владелец КАК Владелец,
	|	МашиночитаемыеДоверенностиФИО.Фамилия КАК Фамилия,
	|	МашиночитаемыеДоверенностиФИО.Имя КАК Имя,
	|	МашиночитаемыеДоверенностиФИО.Отчество КАК Отчество
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.ФИО КАК МашиночитаемыеДоверенностиФИО
	|ГДЕ
	|	МашиночитаемыеДоверенностиФИО.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенности.Организация КАК ОрганизацияМЧД,
	|	МашиночитаемыеДоверенности.НомерДоверенности КАК НомерДоверенности,
	|	МашиночитаемыеДоверенности.ДатаВыдачи КАК ДатаВыдачи,
	|	МашиночитаемыеДоверенности.ДатаОкончания КАК ДатаОкончания,
	|	МашиночитаемыеДоверенности.СрокДействия КАК СрокДействия,
	|	МашиночитаемыеДоверенности.ВозможноПередоверие КАК ВозможноПередоверие,
	|	МашиночитаемыеДоверенности.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_СтрРег КАК ДоверительЮЛ_СтрРег,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_Адр КАК ДоверительЮЛ_Адр,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_Пол КАК ДоверительФЛ_Пол,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_МестоРожд КАК ДоверительФЛ_МестоРожд,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_НаимОрг КАК ЛицоБезДовЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_ИНН КАК ЛицоБезДовЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_КПП КАК ЛицоБезДовЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_ОГРН КАК ЛицоБезДовЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ОснованиеПолномочий КАК ЛицоБезДовФЛ_ОснованиеПолномочий,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_НаимОрг КАК ПредставительЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_ИНН КАК ПредставительЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_КПП КАК ПредставительЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ПредставительЮЛ_ОГРН КАК ПредставительЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_ИНН КАК ПредставительФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_ОГРН КАК ПредставительФЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_СНИЛС КАК ПредставительФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_Гражданство КАК ПредставительФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ПредставительФЛ_ДатаРождения КАК ПредставительФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенности
	|ГДЕ
	|	МашиночитаемыеДоверенности.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.Владелец КАК Владелец,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ВидДок КАК ВидДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.СерДок КАК СерДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.НомДок КАК НомДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ДатаДок КАК ДатаДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ВыдДок КАК ВыдДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.УдостоверенияЛичности КАК
	|		МашиночитаемыеДоверенностиУдостоверенияЛичности
	|ГДЕ
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.Ссылка = &СправочникСсылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);

	УстановитьПривилегированныйРежим(Истина);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	ВыборкаПолномочий = ПакетЗапросов[0].Выбрать();

	Полномочия = Новый Массив;
	Пока ВыборкаПолномочий.Следующий() Цикл
		СтруктураПолномочий = МашиночитаемыеДоверенности.НовыеПолномочияПредставителя();
		ЗаполнитьЗначенияСвойств(СтруктураПолномочий, ВыборкаПолномочий);
		Полномочия.Добавить(СтруктураПолномочий);
	КонецЦикла;
	
	ВыборкаПодписантов = ПакетЗапросов[1].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[3].Выгрузить();

	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");

	ПустойДокумент = Новый Структура;
	ПустойДокумент.Вставить("ВидДок", "");
	ПустойДокумент.Вставить("СерДок", "");
	ПустойДокумент.Вставить("НомДок", "");
	ПустойДокумент.Вставить("ДатаДок", "");
	ПустойДокумент.Вставить("ВыдДок", "");
	ПустойДокумент.Вставить("КодВыдДок", "");

	ВыборкаИнформации = ПакетЗапросов[2].Выбрать();

	Если ВыборкаИнформации.Следующий() Тогда

		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);

		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("ДатаОкончания", ВыборкаИнформации.ДатаОкончания);
		Результат.Вставить("СрокДействия", ВыборкаИнформации.СрокДействия);
		Результат.Вставить("ВозможноПередоверие", ВыборкаИнформации.ВозможноПередоверие);
		Результат.Вставить("ПредыдущийНомер", ВыборкаИнформации.НомерРодительскойДоверенности);		
		
		// информация об доверителе
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительЮЛ_СтрРег", ВыборкаИнформации.ДоверительЮЛ_СтрРег);
		Результат.Вставить("ДоверительЮЛ_НаимРегОрг", ВыборкаИнформации.ДоверительЮЛ_НаимРегОрг);
		Результат.Вставить("ДоверительЮЛ_РегНомер", ВыборкаИнформации.ДоверительЮЛ_РегНомер);
		Результат.Вставить("ДоверительЮЛ_Адр", ВыборкаИнформации.ДоверительЮЛ_Адр);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительФЛ_Пол", ВыборкаИнформации.ДоверительФЛ_Пол);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительФЛ_МестоРожд", ВыборкаИнформации.ДоверительФЛ_МестоРожд);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);

		ТипОрганизации = "";			
		Если Результат.ИностраннаяОрганизация Тогда
			ТипОрганизации = "ИО";
		Иначе				
			Если ИнтеграцияЭДО.ЭтоФизЛицо(ВыборкаИнформации.ОрганизацияМЧД) Тогда
				Если ПустаяСтрока(ВыборкаИнформации.ДоверительФЛ_ОГРН) Тогда
					ТипОрганизации = "ФЛ";
				Иначе	
					ТипОрганизации = "ИП";
				КонецЕсли;
			Иначе
				ТипОрганизации = "ЮЛ";
			КонецЕсли;
		КонецЕсли;
		Результат.Вставить("ДоверительЮЛ_ТипОрганизации", ТипОрганизации);			
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовЮЛ_НаимОрг", ВыборкаИнформации.ЛицоБезДовЮЛ_НаимОрг);
		Результат.Вставить("ЛицоБезДовЮЛ_ИНН", ВыборкаИнформации.ЛицоБезДовЮЛ_ИНН);
		Результат.Вставить("ЛицоБезДовЮЛ_КПП", ВыборкаИнформации.ЛицоБезДовЮЛ_КПП);
		Результат.Вставить("ЛицоБезДовЮЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовЮЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_ИНН", ВыборкаИнформации.ЛицоБезДовФЛ_ИНН);
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_Гражданство", ВыборкаИнформации.ЛицоБезДовФЛ_Гражданство);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаРождения", ВыборкаИнформации.ЛицоБезДовФЛ_ДатаРождения);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);
		Результат.Вставить("ЛицоБезДовФЛ_ОснованиеПолномочий", ВыборкаИнформации.ЛицоБезДовФЛ_ОснованиеПолномочий);

		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" ИЛИ Результат.ДоверительЮЛ_ТипОрганизации = "ИП" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец",
				Перечисления.СубъектыДоверенности.ДоверительФЛ));
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец",
				Перечисления.СубъектыДоверенности.ДоверительРук));
		КонецЕсли;

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);

		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец",
			Перечисления.СубъектыДоверенности.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
		// информация о представителе
		Результат.Вставить("ПредставительЮЛ_НаимОрг", ВыборкаИнформации.ПредставительЮЛ_НаимОрг);
		Результат.Вставить("ПредставительЮЛ_ИНН", ВыборкаИнформации.ПредставительЮЛ_ИНН);
		Результат.Вставить("ПредставительЮЛ_КПП", ВыборкаИнформации.ПредставительЮЛ_КПП);
		Результат.Вставить("ПредставительЮЛ_ОГРН", ВыборкаИнформации.ПредставительЮЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_ИНН", ВыборкаИнформации.ПредставительФЛ_ИНН);
		Результат.Вставить("ПредставительФЛ_ОГРН", ВыборкаИнформации.ПредставительФЛ_ОГРН);
		Результат.Вставить("ПредставительФЛ_СНИЛС", ВыборкаИнформации.ПредставительФЛ_СНИЛС);
		Результат.Вставить("ПредставительФЛ_Гражданство", ВыборкаИнформации.ПредставительФЛ_Гражданство);
		Результат.Вставить("ПредставительФЛ_ДатаРождения", ВыборкаИнформации.ПредставительФЛ_ДатаРождения);
		
		Результат.Вставить("Полномочия", Полномочия);

		ТипВладельца = Перечисления.СубъектыДоверенности.ПредставительФЛ;
		НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ПредставительФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ПредставительФЛ_Фамилия", НашлиФИО.Фамилия);

		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", ТипВладельца));

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ПредставительФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ПредставительФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ПредставительФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ПредставительФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ПредставительФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ПредставительФЛ_КодВыдДок", НашлиДок.КодВыдДок);

		ТипПредставителя = "ФЛ";
		Если Не ПустаяСтрока(Результат.ПредставительЮЛ_ИНН) Тогда
			СведенияЮрЛица = Новый Структура;
			СведенияЮрЛица.Вставить("ИНН", Результат.ПредставительЮЛ_ИНН);
			СведенияЮрЛица.Вставить("КПП", Результат.ПредставительЮЛ_КПП);
			СведенияЮрЛица.Вставить("ОГРН", Результат.ПредставительЮЛ_ОГРН);
			ПредставительОрганизация = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьОрганизациюМЧД(
				СведенияЮрЛица);				
			Если ИнтеграцияЭДО.ЭтоФизЛицо(ПредставительОрганизация) Тогда
				Если ПустаяСтрока(Результат.ПредставительЮЛ_ОГРН) Тогда
					ТипПредставителя = "ФЛ";
				Иначе	
					ТипПредставителя = "ИП";
				КонецЕсли;	
			Иначе
				ТипПредставителя = "ЮЛ";
			КонецЕсли;			
		КонецЕсли;
		Результат.Вставить("ТипПредставителя", ТипПредставителя);

	КонецЕсли;

	Результат.Вставить("ИныеСведения", "");

	Возврат Результат;

КонецФункции

// Возвращает сконвертированные данные доверенности в строку XML.
// 
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД
// 
// Возвращаемое значение:
//  Строка - строка XML из данных XML
Функция ДанныеДоверенностиВСтрокуXML(ДанныеДоверенности)

	Ошибки = Неопределено;
	ПространствоИмен = МашиночитаемыеДоверенности.ФорматМЧД_2022();	

	Доверенность = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ВерсФорм", "001", Истина, Ошибки);

	Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОКУД", ДанныеДоверенности.ОКУД, Истина, Ошибки);
	
	// формирование раздела Сведения о доверенности
	СвДов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДов", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "НомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаВыдДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаКонДовер", ДанныеДоверенности.ДатаОкончания, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ПрПередов", ?(ДанныеДоверенности.ВозможноПередоверие, "1", "2"),
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ПрСовмПолн", "1", Истина, Ошибки); // полномочия совместные	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ВнНомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаВнРегДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);

	Безотзыв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДов.Безотзыв", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "ПрБезотзыв", "1", Истина, Ошибки); // отзыв возможен
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "УслОтзыва", "1", Истина, Ошибки); // по истечению срока действия
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "Безотзыв", Безотзыв, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "СведСистОтм", ДанныеДоверенности.СведенияОбИнформационнойСистеме,
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвДов", СвДов, Ложь, Ошибки);
	
	// формирование раздела Сведения о доверителе
	СвДоверит = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ТипДовер", ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации,
		Истина, Ошибки);

	ЛицоБезДовФЛ_Фамилия = ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия;
	ЛицоБезДовФЛ_Имя = ДанныеДоверенности.ЛицоБезДовФЛ_Имя;
	ЛицоБезДовФЛ_Отчество = ДанныеДоверенности.ЛицоБезДовФЛ_Отчество;

	Если ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда

		ИнОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.ИнОргДовер", 
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимИО", ДанныеДоверенности.ДоверительЮЛ_НаимОрг, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СтрРег", ДанныеДоверенности.ДоверительЮЛ_СтрРег, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимРегОрг", ДанныеДоверенности.ДоверительЮЛ_НаимРегОрг,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "РегНомер", ДанныеДоверенности.ДоверительЮЛ_РегНомер,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "АдрСтрРег", ДанныеДоверенности.ДоверительЮЛ_Адр, 
			Истина, Ошибки);

		СвРукОП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.ИнОргДовер.СвРукОП",
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "НаимДокПолн", "_", Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
			Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СвРукОП", СвРукОП, Истина, Ошибки);
		СвДоверит.ИнОргДовер.Добавить(ИнОргДовер);

	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда

		РосОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.РосОргДовер", 
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "АдрРФ", ДанныеДоверенности.ДоверительЮЛ_Адр, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "АдрМНФакт", "_", 
			Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "НаимУчрДок", "_", 
			Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "Тлф", "_", 
			Истина, Ошибки);

		ЛицоБезДов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.РосОргДовер.ЛицоБезДов",
			ПространствоИмен);

		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", ДанныеДоверенности.ЛицоБезДовЮЛ_НаимОрг, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", ДанныеДоверенности.ЛицоБезДовЮЛ_КПП, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", ДанныеДоверенности.ЛицоБезДовЮЛ_ОГРН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЛицоБезДов, "СвОрг", СвОрг, Истина, Ошибки);
		КонецЕсли;

		СвФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.РосОргДовер.ЛицоБезДов.СвФЛ",
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеДоверенности.ЛицоБезДовФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "СНИЛС", ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "Должность", ДанныеДоверенности.ЛицоБезДовФЛ_Должность, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "НаимДокПолн",
			ДанныеДоверенности.ЛицоБезДовФЛ_ОснованиеПолномочий, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ЛицоБезДовФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ЛицоБезДовФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство) Тогда
			ЛицоБезДовФЛ_Гражданство = ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ЛицоБезДовФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЛицоБезДов, "СвФЛ", СвФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ЛицоБезДов", ЛицоБезДов, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "РосОргДовер", РосОргДовер, Истина, Ошибки);

	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИП" Тогда

		ИПДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.ИПДовер", ПространствоИмен);
		ЧастиФИО = Новый Массив;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Имя) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Имя);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество);
		КонецЕсли;
		НаименованиеИП = СтрСоединить(ЧастиФИО, " ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "НаимИП", НаименованиеИП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, 
			Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		Если Не ПустаяСтрока(ДанныеДоверенности.ДоверительФЛ_МестоРожд) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
				Истина, Ошибки);
		КонецЕсли;

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ИПДовер", ИПДовер, Истина, Ошибки);

	Иначе

		ФЛДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвДоверит.ФЛДовер", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ПрДеесп", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ФЛДовер", ФЛДовер, Истина, Ошибки);

	КонецЕсли;

	Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ЛицоБезДовФЛ_Фамилия, Истина, Ошибки);
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Имя) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ЛицоБезДовФЛ_Имя, Ложь, Ошибки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Отчество) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ЛицоБезДовФЛ_Отчество, Ложь, Ошибки);
	КонецЕсли;
	СвДоверит.Подписант.Добавить(Подписант);

	Документ.СвДоверит.Добавить(СвДоверит);
	
	// формирование раздела Сведения об уполномоченном представителе
	СвУпПред = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвУпПред", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "ТипПред", ДанныеДоверенности.ТипПредставителя, Истина, Ошибки);

	СвПред = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвУпПред.СвПред", ПространствоИмен);

	Если Не ПустаяСтрока(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда

		Если ДанныеДоверенности.ТипПредставителя = "ИП" Тогда

			СведИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвУпПред.СвПред.СведИП", 
				ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "НаимИП", ДанныеДоверенности.ПредставительЮЛ_НаимОрг,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ИННФЛ", ДанныеДоверенности.ПредставительЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ОГРНИП", ДанныеДоверенности.ПредставительЮЛ_ОГРН, 
				Истина, Ошибки);

			ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
			ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
			ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИО", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
			Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ФИО", ФИО, Истина, Ошибки);

			СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);

			Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
			КонецЕсли;

			ПредставительФЛ_Гражданство = "";
			Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "СведФЛ", СведФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПред, "СведИП", СведИП, Истина, Ошибки);

		Иначе

			СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", ДанныеДоверенности.ПредставительЮЛ_НаимОрг,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", ДанныеДоверенности.ПредставительЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", ДанныеДоверенности.ПредставительЮЛ_КПП, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", ДанныеДоверенности.ПредставительЮЛ_ОГРН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПред, "СвОрг", СвОрг, Истина, Ошибки);

		КонецЕсли;

	КонецЕсли;

	Если Не ПустаяСтрока(ДанныеДоверенности.ПредставительФЛ_ИНН) Тогда

		СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвУпПред.СвПред.СведФизЛ", 
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", ДанныеДоверенности.ПредставительФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", ДанныеДоверенности.ПредставительФЛ_СНИЛС, 
			Истина, Ошибки);

		ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
		ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
		ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;

		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИО", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
		Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ПредставительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
			ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);

		УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", ДанныеДоверенности.ПредставительФЛ_ВидДок,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(ДанныеДоверенности.ПредставительФЛ_СерДок
			+ " " + ДанныеДоверенности.ПредставительФЛ_НомДок), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", ДанныеДоверенности.ПредставительФЛ_ДатаДок,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", ДанныеДоверенности.ПредставительФЛ_ВыдДок, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", ДанныеДоверенности.ПредставительФЛ_КодВыдДок,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПред, "СведФизЛ", СведФизЛ, Истина, Ошибки);

	КонецЕсли;

	СвУпПред.СвПред.Добавить(СвПред);
	Документ.СвУпПред.Добавить(СвУпПред);	
	
	// формирование раздела Сведения о полномочиях представителя (представителей)
	
	Если ДанныеДоверенности.Полномочия.Количество() = 0 Тогда
		
		СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвПолн", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн",
			МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий(), Истина, Ошибки);
		Документ.СвПолн.Добавить(СвПолн);
	
	Иначе
		
		Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
			
			СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвПолн", ПространствоИмен);
			
			Если НЕ ПустаяСтрока(Полномочие.Код) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "КодПолн", Полномочие.Код, Истина, Ошибки);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Полномочие.Описание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн", Полномочие.Описание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Содержание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "СодержПолн", Полномочие.Содержание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Пояснение) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ДопТекстПолн", Полномочие.Пояснение, Истина, Ошибки);
			КонецЕсли;
			
			Документ.СвПолн.Добавить(СвПолн);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "Документ", Документ, Истина, Ошибки);
	
	// Иные сведения по соглашению участников электронного взаимодействия
	// и по требованиям федеральных органов исполнительной власти.
	Если Не ПустаяСтрока(ДанныеДоверенности.ИныеСведения) Тогда
		ИнСвед = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.ИнСвед", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнСвед, "ИнСвед", ДанныеДоверенности.ИныеСведения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИнСвед", ИнСвед, Истина, Ошибки);
	КонецЕсли;

	СтрокаXML = "";

	Попытка

		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ДвоичныеДанныеXML = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Доверенность, Ложь);
		ДвоичныеДанныеXML = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанныеXML, ПространствоИмен);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, "windows-1251");

	Исключение

		ВидОперации = НСтр("ru = 'Формирование xml по данным МЧД.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Ошибка формата МЧД. Проверьте введенные данные.'");

	КонецПопытки;

	Возврат СтрокаXML;

КонецФункции

// Возвращает сконвертированные данные доверенности в строку XML.
// 
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД
// 
// Возвращаемое значение:
//  Строка - строка XML из данных XML
Функция ДанныеДоверенностиВСтрокуXMLВерсия002(ДанныеДоверенности)

	Ошибки = Неопределено;
	ПространствоИмен = МашиночитаемыеДоверенности.ФорматМЧД_2022_Версия_002();

	Доверенность = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ВерсФорм", "002", Истина, Ошибки); 
	
	ИдФайл = СтрШаблон("ON_DOVBB_%1_%2",
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"),
		ДанныеДоверенности.Номер);	
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИдФайл", ИдФайл, Истина, Ошибки);

	Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОКУД", ДанныеДоверенности.ОКУД, Истина, Ошибки);
	
	Довер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер", ПространствоИмен);
		
	// формирование раздела Сведения о доверенности
	СвДов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДов", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "НомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаВыдДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаКонДовер", ДанныеДоверенности.ДатаОкончания, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ПрПередов", ?(ДанныеДоверенности.ВозможноПередоверие, "1", "2"),
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ПрСовмПолн", "1", Истина, Ошибки); // полномочия совместные	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ВнНомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаВнРегДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);

	Безотзыв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДов.Безотзыв", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "ПрБезотзыв", "1", Истина, Ошибки); // отзыв возможен
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "УслОтзыва", "1", Истина, Ошибки); // по истечению срока действия
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "Безотзыв", Безотзыв, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "СведСистОтм", ДанныеДоверенности.СведенияОбИнформационнойСистеме,
		Истина, Ошибки);
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Довер, "СвДов", СвДов, Ложь, Ошибки);
	
	// формирование раздела Сведения о доверителе
	СвДоверит = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ТипДовер", ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации,
		Истина, Ошибки);

	ЛицоБезДовФЛ_Фамилия = ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия;
	ЛицоБезДовФЛ_Имя = ДанныеДоверенности.ЛицоБезДовФЛ_Имя;
	ЛицоБезДовФЛ_Отчество = ДанныеДоверенности.ЛицоБезДовФЛ_Отчество;

	Если ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда

		ИнОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ИнОргДовер", 
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимИО", ДанныеДоверенности.ДоверительЮЛ_НаимОрг, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СтрРег", ДанныеДоверенности.ДоверительЮЛ_СтрРег, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимРегОрг", ДанныеДоверенности.ДоверительЮЛ_НаимРегОрг,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "РегНомер", ДанныеДоверенности.ДоверительЮЛ_РегНомер,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "АдрСтрРег", ДанныеДоверенности.ДоверительЮЛ_Адр, 
			Истина, Ошибки);

		СвРукОП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ИнОргДовер.СвРукОП",
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "НаимДокПолн", "_", Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
			Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СвРукОП", СвРукОП, Истина, Ошибки);
		СвДоверит.ИнОргДовер.Добавить(ИнОргДовер);

	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда

		РосОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер", 
			ПространствоИмен);
			
		СвРосОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер.СвРосОрг", 
			ПространствоИмен);	
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "АдрРФ", ДанныеДоверенности.ДоверительЮЛ_Адр, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "АдрМНФакт", "_", 
			Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "НаимУчрДок", "_", 
			Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "Тлф", "_", 
			Истина, Ошибки);

		ЛицоБезДов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер.ЛицоБезДов",
			ПространствоИмен);

		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", ДанныеДоверенности.ЛицоБезДовЮЛ_НаимОрг, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", ДанныеДоверенности.ЛицоБезДовЮЛ_КПП, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", ДанныеДоверенности.ЛицоБезДовЮЛ_ОГРН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЛицоБезДов, "СвОрг", СвОрг, Истина, Ошибки);
		КонецЕсли;

		СвФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер.ЛицоБезДов.СвФЛ",
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеДоверенности.ЛицоБезДовФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "СНИЛС", ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "Должность", ДанныеДоверенности.ЛицоБезДовФЛ_Должность, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "НаимДокПолн",
			ДанныеДоверенности.ЛицоБезДовФЛ_ОснованиеПолномочий, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ЛицоБезДовФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ЛицоБезДовФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство) Тогда
			ЛицоБезДовФЛ_Гражданство = ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ЛицоБезДовФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЛицоБезДов, "СвФЛ", СвФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "СвРосОрг", СвРосОрг, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ЛицоБезДов", ЛицоБезДов, Истина, Ошибки); 
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "РосОргДовер", РосОргДовер, Истина, Ошибки);

	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИП" Тогда

		ИПДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ИПДовер", ПространствоИмен);
		ЧастиФИО = Новый Массив;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Имя) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Имя);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество);
		КонецЕсли;
		НаименованиеИП = СтрСоединить(ЧастиФИО, " ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "НаимИП", НаименованиеИП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, 
			Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		Если Не ПустаяСтрока(ДанныеДоверенности.ДоверительФЛ_МестоРожд) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
				Истина, Ошибки);
		КонецЕсли;

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ИПДовер", ИПДовер, Истина, Ошибки);

	Иначе

		ФЛДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ФЛДовер", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ПрДеесп", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ФЛДовер", ФЛДовер, Истина, Ошибки);

	КонецЕсли;

	Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ЛицоБезДовФЛ_Фамилия, Истина, Ошибки);
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Имя) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ЛицоБезДовФЛ_Имя, Ложь, Ошибки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Отчество) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ЛицоБезДовФЛ_Отчество, Ложь, Ошибки);
	КонецЕсли; 
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "Подписант", Подписант, Истина, Ошибки);
	Довер.СвДоверит.Добавить(СвДоверит);
	
	// формирование раздела Сведения об уполномоченном представителе
	СвУпПред = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "ТипПред", ДанныеДоверенности.ТипПредставителя, Истина, Ошибки);

	Если Не ПустаяСтрока(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда

		Если ДанныеДоверенности.ТипПредставителя = "ИП" Тогда

			СведИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СведИП", 
				ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "НаимИП", ДанныеДоверенности.ПредставительЮЛ_НаимОрг,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ИННФЛ", ДанныеДоверенности.ПредставительЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ОГРНИП", ДанныеДоверенности.ПредставительЮЛ_ОГРН, 
				Истина, Ошибки);

			ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
			ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
			ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
			Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ФИО", ФИО, Истина, Ошибки);

			СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
			Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
			КонецЕсли;

			ПредставительФЛ_Гражданство = "";
			Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "СведФЛ", СведФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "СведИП", СведИП, Истина, Ошибки);

		Иначе

			УзелСвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СвОрг", ПространствоИмен);
			СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", ДанныеДоверенности.ПредставительЮЛ_НаимОрг,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", ДанныеДоверенности.ПредставительЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", ДанныеДоверенности.ПредставительЮЛ_КПП, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", ДанныеДоверенности.ПредставительЮЛ_ОГРН, 
				Истина, Ошибки);
				
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
	
			СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФизЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", ДанныеДоверенности.ПредставительФЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", ДанныеДоверенности.ПредставительФЛ_СНИЛС, 
				Истина, Ошибки);
			
			ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
			ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
			ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;
			
			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
			Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);
			
			СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
			
			Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
			КонецЕсли;
			
			ПредставительФЛ_Гражданство = "";
			Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
			
			УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", ДанныеДоверенности.ПредставительФЛ_ВидДок,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(ДанныеДоверенности.ПредставительФЛ_СерДок
				+ " " + ДанныеДоверенности.ПредставительФЛ_НомДок), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", ДанныеДоверенности.ПредставительФЛ_ДатаДок,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", ДанныеДоверенности.ПредставительФЛ_ВыдДок, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", ДанныеДоверенности.ПредставительФЛ_КодВыдДок,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УзелСвОрг, "СвОрг", СвОрг, Истина, Ошибки);
			УзелСвОрг.СвФЛ.Добавить(СведФизЛ);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "СвОрг", УзелСвОрг, Истина, Ошибки);

		КонецЕсли;

	КонецЕсли;

	Если Не ПустаяСтрока(ДанныеДоверенности.ПредставительФЛ_ИНН) И ДанныеДоверенности.ТипПредставителя = "ФЛ" Тогда

		СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СведФизЛ", 
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", ДанныеДоверенности.ПредставительФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", ДанныеДоверенности.ПредставительФЛ_СНИЛС, 
			Истина, Ошибки);

		ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
		ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
		ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;

		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
		Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ПредставительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
			ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);

		УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", ДанныеДоверенности.ПредставительФЛ_ВидДок,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(ДанныеДоверенности.ПредставительФЛ_СерДок
			+ " " + ДанныеДоверенности.ПредставительФЛ_НомДок), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", ДанныеДоверенности.ПредставительФЛ_ДатаДок,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", ДанныеДоверенности.ПредставительФЛ_ВыдДок, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", ДанныеДоверенности.ПредставительФЛ_КодВыдДок,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "СведФизЛ", СведФизЛ, Истина, Ошибки);

	КонецЕсли;

	Довер.СвУпПред.Добавить(СвУпПред);	
	
	// формирование раздела Сведения о полномочиях представителя (представителей)
	
	Если ДанныеДоверенности.Полномочия.Количество() = 0 Тогда
		
		СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвПолн", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн",
			МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий(), Истина, Ошибки);
		Документ.СвПолн.Добавить(СвПолн);
	
	Иначе
		
		Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
			
			СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвПолн", ПространствоИмен);
			
			Если НЕ ПустаяСтрока(Полномочие.Код) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "КодПолн", Полномочие.Код, Истина, Ошибки);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Полномочие.Описание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн", Полномочие.Описание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Содержание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "СодержПолн", Полномочие.Содержание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Пояснение) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ДопТекстПолн", Полномочие.Пояснение, Истина, Ошибки);
			КонецЕсли;
			
			Довер.СвПолн.Добавить(СвПолн);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Довер", Довер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "Документ", Документ, Истина, Ошибки);
	
	// Иные сведения по соглашению участников электронного взаимодействия
	// и по требованиям федеральных органов исполнительной власти.
	Если Не ПустаяСтрока(ДанныеДоверенности.ИныеСведения) Тогда
		ИнСвед = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.ИнСвед", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнСвед, "ИнСвед", ДанныеДоверенности.ИныеСведения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИнСвед", ИнСвед, Истина, Ошибки);
	КонецЕсли;

	СтрокаXML = "";

	Попытка

		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ДвоичныеДанныеXML = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Доверенность, Ложь);
		ДвоичныеДанныеXML = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанныеXML, ПространствоИмен);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, "windows-1251");

	Исключение

		ВидОперации = НСтр("ru = 'Формирование xml по данным МЧД.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Ошибка формата МЧД. Проверьте введенные данные.'");

	КонецПопытки;

	Возврат СтрокаXML;

КонецФункции	

// Возвращает сконвертированные данные доверенности в строку XML.
// 
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД
//  ДанныеОсновнойДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД 
// 
// Возвращаемое значение:
//  Строка - строка XML из данных XML
Функция ДанныеПередоверияВСтрокуXMLВерсия002(ДанныеДоверенности, ДанныеОсновнойДоверенности)

	Ошибки = Неопределено;
	ПространствоИмен = МашиночитаемыеДоверенности.ФорматМЧД_2022_Версия_002();

	Доверенность = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ВерсФорм", "002", Истина, Ошибки); 
	
	ИдФайл = СтрШаблон("ON_DOVBB_%1_%2",
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"),
		ДанныеДоверенности.Номер);	
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИдФайл", ИдФайл, Истина, Ошибки);

	Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОКУД", ДанныеДоверенности.ОКУД, Истина, Ошибки);
	
	Передов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов", ПространствоИмен);
	СвДовПер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвДовПер", ПространствоИмен);	
		
	// Формирование раздела сведения о доверенности, выданной в порядке передоверия.
	
	СвПереДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвДовПер.СвПереДовер", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "НомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ДатаВыдДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ДатаКонДовер", ДанныеДоверенности.ДатаОкончания, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ПрПередов", ?(ДанныеДоверенности.ВозможноПередоверие, "1", "2"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ПрСовмПолн", "1", Истина, Ошибки); // полномочия совместные
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ВнНомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ДатаВнРегДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);
	
	Если ДанныеДоверенности.ВозможноПередоверие Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "ПрУтрПолн", "1", Ложь, Ошибки);
	КонецЕсли;	
	
	Безотзыв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвДовПер.СвПереДовер.Безотзыв", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "ПрБезотзыв", "1", Истина, Ошибки); // отзыв возможен
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "УслОтзыва", "1", Истина, Ошибки); // по истечению срока действия
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "Безотзыв", Безотзыв, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПереДовер, "СведСистОтм", ДанныеДоверенности.СведенияОбИнформационнойСистеме, Истина, Ошибки);
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовПер, "СвПереДовер", СвПереДовер, Ложь, Ошибки);
	
	// Формирование раздела Сведения о доверенности выданной в порядке передоверия и основной доверенности
	
	СвОснДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвДовПер.СвОснДовер", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОснДовер, "НомДовер0", ДанныеОсновнойДоверенности.НомерДоверенности, Истина, Ошибки);

	СвДовер0 = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвДовПер.СвОснДовер.СвДовер0", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер0, "ТипДовер", ДанныеОсновнойДоверенности.ТипОрганизации, Истина, Ошибки);
	
	Если ДанныеОсновнойДоверенности.ТипОрганизации = "ИО" Тогда

		ИнОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвИнОргТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимИО", ДанныеОсновнойДоверенности.ДоверительЮЛ_НаимОрг, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "ИННЮЛ", ДанныеОсновнойДоверенности.ДоверительЮЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "КПП", ДанныеОсновнойДоверенности.ДоверительЮЛ_КПП, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СтрРег", ДанныеОсновнойДоверенности.ДоверительЮЛ_СтрРег, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимРегОрг", ДанныеОсновнойДоверенности.ДоверительЮЛ_НаимРегОрг,Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "РегНомер", ДанныеОсновнойДоверенности.ДоверительЮЛ_РегНомер,Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "АдрСтрРег", ДанныеОсновнойДоверенности.ДоверительЮЛ_Адр, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер0, "ИнОргДовер", ИнОргДовер, Истина, Ошибки);
		
		СвОснДовер.СвДовер0.Добавить(СвДовер0);	

	ИначеЕсли ДанныеОсновнойДоверенности.ТипОрганизации = "ЮЛ" Тогда

		РосОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвРосОргТип", ПространствоИмен);		
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "НаимОрг", ДанныеОсновнойДоверенности.ДоверительЮЛ_НаимОрг, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ОГРН", ДанныеОсновнойДоверенности.ДоверительЮЛ_ОГРН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ИННЮЛ", ДанныеОсновнойДоверенности.ДоверительЮЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "КПП", ДанныеОсновнойДоверенности.ДоверительЮЛ_КПП, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "АдрРФ", ДанныеОсновнойДоверенности.ДоверительЮЛ_Адр, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "АдрМНФакт", "_", Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "НаимУчрДок", "_", Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "Тлф", "_", Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер0, "РосОргДовер", РосОргДовер, Истина, Ошибки);
		
		СвОснДовер.СвДовер0.Добавить(СвДовер0);

	ИначеЕсли ДанныеОсновнойДоверенности.ТипОрганизации = "ИП" Тогда

		ИПДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвИПТип", ПространствоИмен);
		ЧастиФИО = Новый Массив;
		Если Не ПустаяСтрока(ДанныеОсновнойДоверенности.ЛицоБезДовФЛ_Фамилия) Тогда
			ЧастиФИО.Добавить(ДанныеОсновнойДоверенности.ЛицоБезДовФЛ_Фамилия);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеОсновнойДоверенности.ЛицоБезДовФЛ_Имя) Тогда
			ЧастиФИО.Добавить(ДанныеОсновнойДоверенности.ЛицоБезДовФЛ_Имя);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеОсновнойДоверенности.ЛицоБезДовФЛ_Отчество) Тогда
			ЧастиФИО.Добавить(ДанныеОсновнойДоверенности.ЛицоБезДовФЛ_Отчество);
		КонецЕсли;
		НаименованиеИП = СтрСоединить(ЧастиФИО, " ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "НаимИП", НаименованиеИП, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ИННФЛ", ДанныеОсновнойДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ОГРНИП", ДанныеОсновнойДоверенности.ДоверительФЛ_ОГРН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СНИЛС", ДанныеОсновнойДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеОсновнойДоверенности.ДоверительФЛ_ДатаРождения, Истина, Ошибки);
		Если Не ПустаяСтрока(ДанныеОсновнойДоверенности.ДоверительФЛ_МестоРожд) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеОсновнойДоверенности.ДоверительФЛ_МестоРожд, Истина, Ошибки);
		КонецЕсли;

		Если ДанныеОсновнойДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеОсновнойДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеОсновнойДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер0, "ИПДовер", ИПДовер, Истина, Ошибки);
		
		СвОснДовер.СвДовер0.Добавить(СвДовер0);	

	Иначе

		ФЛДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФЛДоверТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ПрДеесп", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ИННФЛ", ДанныеОсновнойДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СНИЛС", ДанныеОсновнойДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеОсновнойДоверенности.ДоверительФЛ_ДатаРождения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеОсновнойДоверенности.ДоверительФЛ_МестоРожд, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеОсновнойДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеОсновнойДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеОсновнойДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		
		Для Каждого ДанныеФИО Из ДанныеОсновнойДоверенности.ФИО Цикл
			Если ДанныеФИО.Владелец = Перечисления.СубъектыДоверенности.ДоверительРук Тогда
				ОснДовЛицоБезДовФЛ_Фамилия = ДанныеФИО.Фамилия;
				ОснДовЛицоБезДовФЛ_Имя = ДанныеФИО.Имя;
				ОснДовЛицоБезДовФЛ_Отчество = ДанныеФИО.Отчество;
			КонецЕсли;
		КонецЦикла;
		
		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ОснДовЛицоБезДовФЛ_Фамилия, Истина, Ошибки);
		Если НЕ ПустаяСтрока(ОснДовЛицоБезДовФЛ_Имя) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ОснДовЛицоБезДовФЛ_Имя, Ложь, Ошибки);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ОснДовЛицоБезДовФЛ_Отчество) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОснДовЛицоБезДовФЛ_Отчество, Ложь, Ошибки);
		КонецЕсли; 
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ФИО", ФИО, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовер0, "ФЛДовер", ФЛДовер, Истина, Ошибки);

	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовПер, "НомДоверN", ДанныеОсновнойДоверенности.НомерДоверенности, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДовПер, "СвОснДовер", СвОснДовер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Передов, "СвДовПер", СвДовПер, Истина, Ошибки);
	
	// формирование раздела Сведения о доверителе
	
	СвЛицПередПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвЛицПередПолн", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПередПолн, "ТипЛицПрдПолн", ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации, Истина, Ошибки);

	ЛицоБезДовФЛ_Фамилия = ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия;
	ЛицоБезДовФЛ_Имя = ДанныеДоверенности.ЛицоБезДовФЛ_Имя;
	ЛицоБезДовФЛ_Отчество = ДанныеДоверенности.ЛицоБезДовФЛ_Отчество;
	
	Если ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда

		РосОргПрдПолн = 
			РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
						
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргПрдПолн, "НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргПрдПолн, "ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргПрдПолн, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргПрдПолн, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргПрдПолн, "НаимУчрДок", "_", Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргПрдПолн, "КонтактТлф", "_", Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПередПолн, "РосОргПрдПолн", РосОргПрдПолн, Истина, Ошибки);
		
	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИП" Тогда

		ИППрдПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведИПТип", ПространствоИмен);
		ЧастиФИО = Новый Массив;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Имя) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Имя);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество);
		КонецЕсли; 
		
		НаименованиеИП = СтрСоединить(ЧастиФИО, " ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИППрдПолн, "НаимИП", НаименованиеИП, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИППрдПолн, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИППрдПолн, "ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИППрдПолн, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения, Истина, Ошибки);
		Если Не ПустаяСтрока(ДанныеДоверенности.ДоверительФЛ_МестоРожд) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, Истина, Ошибки);
		КонецЕсли;

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИППрдПолн, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПередПолн, "ИППрдПолн", ИППрдПолн, Истина, Ошибки);

	Иначе

		ФЛДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвЛицПередПолн.ФЛПрдПолн", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПередПолн, "ФЛДовер", ФЛДовер, Истина, Ошибки);

	КонецЕсли;

	Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ЛицоБезДовФЛ_Фамилия, Истина, Ошибки);
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Имя) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ЛицоБезДовФЛ_Имя, Ложь, Ошибки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Отчество) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ЛицоБезДовФЛ_Отчество, Ложь, Ошибки);
	КонецЕсли; 
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПередПолн, "Подписант", Подписант, Истина, Ошибки);
	Передов.СвЛицПередПолн.Добавить(СвЛицПередПолн);
	
	// формирование раздела Сведения об уполномоченном представителе
	СвЛицПолучПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвЛицПолучПолн", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПолучПолн, "ТипПред", ДанныеДоверенности.ТипПредставителя, Истина, Ошибки);

	Если Не ПустаяСтрока(ДанныеДоверенности.ПредставительЮЛ_ИНН) Тогда

		Если ДанныеДоверенности.ТипПредставителя = "ИП" Тогда

			СведИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвУпПред.СведИП", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "НаимИП", ДанныеДоверенности.ПредставительЮЛ_НаимОрг, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ИННФЛ", ДанныеДоверенности.ПредставительЮЛ_ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ОГРНИП", ДанныеДоверенности.ПредставительЮЛ_ОГРН, Истина, Ошибки);

			ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
			ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
			ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;

			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
			Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ФИО", ФИО, Истина, Ошибки);

			СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
			
			Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
			КонецЕсли;

			ПредставительФЛ_Гражданство = "";
			Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "СведФЛ", СведФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПолучПолн, "СведИП", СведИП, Истина, Ошибки);

		Иначе

			УзелСвОрг = 
				РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СвОрг", ПространствоИмен);
			
			СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", ДанныеДоверенности.ПредставительЮЛ_НаимОрг, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", ДанныеДоверенности.ПредставительЮЛ_ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", ДанныеДоверенности.ПредставительЮЛ_КПП, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", ДанныеДоверенности.ПредставительЮЛ_ОГРН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
				
			СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФизЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", ДанныеДоверенности.ПредставительФЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", ДанныеДоверенности.ПредставительФЛ_СНИЛС, 
				Истина, Ошибки);
			
			ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
			ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
			ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;
			
			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
			Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);
			
			СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
			
			Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
			КонецЕсли;
			
			ПредставительФЛ_Гражданство = "";
			Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
				ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
			
			УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", ДанныеДоверенности.ПредставительФЛ_ВидДок,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(ДанныеДоверенности.ПредставительФЛ_СерДок
				+ " " + ДанныеДоверенности.ПредставительФЛ_НомДок), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", ДанныеДоверенности.ПредставительФЛ_ДатаДок,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", ДанныеДоверенности.ПредставительФЛ_ВыдДок, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", ДанныеДоверенности.ПредставительФЛ_КодВыдДок,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УзелСвОрг, "СвОрг", СвОрг, Истина, Ошибки);
			УзелСвОрг.СвФЛ.Добавить(СведФизЛ);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПолучПолн, "СвОрг", УзелСвОрг, Истина, Ошибки);

		КонецЕсли;
	КонецЕсли;

	Если Не ПустаяСтрока(ДанныеДоверенности.ПредставительФЛ_ИНН) И ДанныеДоверенности.ТипПредставителя = "ФЛ" Тогда

		СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвЛицПолучПолн.СведФизЛ", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", ДанныеДоверенности.ПредставительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", ДанныеДоверенности.ПредставительФЛ_СНИЛС, Истина, Ошибки);

		ПредставительФЛ_Фамилия = ДанныеДоверенности.ПредставительФЛ_Фамилия;
		ПредставительФЛ_Имя = ДанныеДоверенности.ПредставительФЛ_Имя;
		ПредставительФЛ_Отчество = ДанныеДоверенности.ПредставительФЛ_Отчество;

		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
		Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ПредставительФЛ_ДатаРождения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
	
		Если ДанныеДоверенности.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ПредставительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ПредставительФЛ_Гражданство) Тогда
			ПредставительФЛ_Гражданство = ДанныеДоверенности.ПредставительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);

		УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", ДанныеДоверенности.ПредставительФЛ_ВидДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(ДанныеДоверенности.ПредставительФЛ_СерДок + " " + ДанныеДоверенности.ПредставительФЛ_НомДок), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", ДанныеДоверенности.ПредставительФЛ_ДатаДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", ДанныеДоверенности.ПредставительФЛ_ВыдДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", ДанныеДоверенности.ПредставительФЛ_КодВыдДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПолучПолн, "СведФизЛ", СведФизЛ, Истина, Ошибки);

	КонецЕсли;

	Передов.СвЛицПолучПолн.Добавить(СвЛицПолучПолн);	
	
	// формирование раздела Сведения о полномочиях представителя (представителей)
	
	Если ДанныеДоверенности.Полномочия.Количество() = 0 Тогда
		
		СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвПолн", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн",
			МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий(), Истина, Ошибки);
		Документ.СвПолн.Добавить(СвПолн);
	
	Иначе
		
		Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
			
			СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Передов.СвПолн", ПространствоИмен);
			
			Если НЕ ПустаяСтрока(Полномочие.Код) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "КодПолн", Полномочие.Код, Истина, Ошибки);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Полномочие.Описание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн", Полномочие.Описание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Содержание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "СодержПолн", Полномочие.Содержание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Пояснение) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ДопТекстПолн", Полномочие.Пояснение, Истина, Ошибки);
			КонецЕсли;
			
			Передов.СвПолн.Добавить(СвПолн);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Передов", Передов, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "Документ", Документ, Истина, Ошибки);
	
	// Иные сведения по соглашению участников электронного взаимодействия
	// и по требованиям федеральных органов исполнительной власти.
	Если Не ПустаяСтрока(ДанныеДоверенности.ИныеСведения) Тогда
		ИнСвед = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.ИнСвед", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнСвед, "ИнСвед", ДанныеДоверенности.ИныеСведения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИнСвед", ИнСвед, Истина, Ошибки);
	КонецЕсли;

	СтрокаXML = "";

	Попытка

		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ДвоичныеДанныеXML = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Доверенность, Ложь);
		ДвоичныеДанныеXML = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанныеXML, ПространствоИмен);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, "windows-1251");

	Исключение

		ВидОперации = НСтр("ru = 'Формирование xml по данным МЧД.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Ошибка формата МЧД. Проверьте введенные данные.'");

	КонецПопытки;

	Возврат СтрокаXML;
	
КонецФункции

#КонецОбласти

// Возвращает дату отзыва доверенности.
// 
// Параметры:
//  НомерДоверенности - Строка
//  ДоверительЮЛ_ИНН - Строка
//  ДоверительФЛ_ИНН - Строка
//  ТокенДоступа - Строка
// 
// Возвращаемое значение:
//  Дата
Функция ДатаОтзываДоверенности(НомерДоверенности, ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН, ТокенДоступа) Экспорт
	
	ДатаОтзыва = Дата(1, 1, 1);
	
	ДоверительИНН = ?(ЗначениеЗаполнено(ДоверительЮЛ_ИНН), ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН);
			
	СведенияОДоверенности = МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД(НомерДоверенности, ДоверительИНН, ТокенДоступа); 
	
	Если СведенияОДоверенности.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену <> Неопределено Тогда
		ДатаОтзыва = ЭлектроннаяПодпись.ДатаПодписания(СведенияОДоверенности.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтзыва) Тогда
		ДатаОтзыва = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат ДатаОтзыва;
	
КонецФункции

#КонецОбласти

#КонецЕсли