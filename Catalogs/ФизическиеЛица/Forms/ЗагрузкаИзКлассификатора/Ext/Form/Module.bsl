
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ОрганизацияДоИзменения = Организация;
	
	РазмерПорции = 20;
	ТекущийНомерПорции = 1;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОрганизацияДоИзменения = Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	
	Элементы.ПолучатьДанныеПриОткрытииФормы.Пометка = ПолучатьДанныеПриОткрытииФормы;
	
	ПолучитьДанныеПриОткрытииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОчиститьСообщения();
	
	Если ИмяСобытия = "Запись_ПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров"
			Или ИмяСобытия = "Запись_ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ" Тогда
		ПолучитьДанныеПриОткрытииФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодOID");
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Текст = НСтр("ru = 'Поле ""Код OID"" организации не заполнено.'");
		ОбщегоНазначения.СообщитьПользователю(Текст, Организация, "КодOID",, Отказ);
	КонецЕсли;
	
	Отказ_ФедеральныеРегистры = Ложь;
	ПроверитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров(Отказ_ФедеральныеРегистры);
	Если Отказ_ФедеральныеРегистры Тогда
		Текст = НСтр("ru = 'Не заполнены настройки загрузки данных из федеральных регистров. Обратитесь к администратору.'");
		ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
	КонецЕсли;
	
	Отказ_СервисМинздраваРФ = Ложь;
	ПроверитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ(Отказ_СервисМинздраваРФ);
	Если Отказ_СервисМинздраваРФ Тогда
		Текст = НСтр("ru = 'Не заполнены настройки загрузки данных с сайта Минздрава РФ. Обратитесь к администратору.'");
		ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПолученныеДанные(Команда)
	
	ТекущийНомерПорции = 1;
	
	ОчиститьСообщения();
	
	ОчиститьКэшированныеДанные();
	ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеКлассификатора(Команда)
	
	ВыделенныеСтроки = Элементы.Классификатор.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеКлассификатораНаКлиенте(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьДанныеПриОткрытииФормы(Команда)
	
	Элементы.ПолучатьДанныеПриОткрытииФормы.Пометка = Не Элементы.ПолучатьДанныеПриОткрытииФормы.Пометка;
	ПолучатьДанныеПриОткрытииФормы = Элементы.ПолучатьДанныеПриОткрытииФормы.Пометка;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ОрганизацияДоИзменения = Организация Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияДоИзменения = Организация;
	
	ТекущийНомерПорции = 1;
	
	ОчиститьСообщения();
	
	ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерПорцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РазмерПорции = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПорции = ВыбранноеЗначение;
	ТекущийНомерПорции = 1;
	
	ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераПорцийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовыйНомерПорции = Число(НавигационнаяСсылкаФорматированнойСтроки);
	Если ТекущийНомерПорции = НовыйНомерПорции Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерПорции = НовыйНомерПорции;
	
	ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗагрузитьДанныеКлассификатораНаКлиенте(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных классификатора ФРМР
#Область ПолучениеДанныхКлассификатора

&НаКлиенте
Процедура ПолучитьДанныеКлассификатора()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НужноПолучитьДанныеИзСервиса = ОбработатьКэшированныеДанныеКлассификатора();
	Если НужноПолучитьДанныеИзСервиса Тогда
		
		ОтобразитьИнформациюПользователю("ОжиданиеПолученияДанных");
		
		ДлительнаяОперация = ПолучитьДанныеКлассификатораВФоне();
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Оповестить = Новый ОписаниеОповещения("ЗавершитьПолучениеДанныхКлассификатора", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКлассификатораВФоне()
	
	ДолжностиМинЗдрава = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресКлассификатораДолжностейМинЗдрава) Тогда
		ДолжностиМинЗдрава = ПолучитьИзВременногоХранилища(АдресКлассификатораДолжностейМинЗдрава).ДанныеКлассификатора;
	КонецЕсли;
	
	Должности1002МинЗдрава = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресКлассификатораДолжностей1002МинЗдрава) Тогда
		Должности1002МинЗдрава = ПолучитьИзВременногоХранилища(АдресКлассификатораДолжностей1002МинЗдрава).ДанныеКлассификатора;
	КонецЕсли;
	
	ТипКлассификатора = ОбменССервисомФедеральныхРегистров.ТипКлассификатора_ФизическиеЛица();
	ПараметрыМетода = ОбменССервисомФедеральныхРегистров.ПараметрыПолучения_ДанныеКлассификатора(ТипКлассификатора, Организация, ДолжностиМинЗдрава, Должности1002МинЗдрава);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных классификатора.'");
	
	ИмяПроцедуры = "ОбменССервисомФедеральныхРегистров.ПолучитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПолучениеДанныхКлассификатора(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗавершитьПолучениеДанныхКлассификатораНаСервере(РезультатДлительнойОперации.АдресРезультата);
	
	ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПолучениеДанныхКлассификатораНаСервере(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ОбработатьНовыеДанныеКлассификатора(Результат);
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора

////////////////////////////////////////////////////////////////////////////////
// Получение данных классификатора должностей ФРМР Минздрава
#Область ПолучениеДанныхКлассификатораДолжностейФРМР

&НаКлиенте
Процедура ПолучитьКлассификаторДолжностей()

	ДлительнаяОперация = ПолучитьДанныеКлассификатораДолжностейВФоне();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗавершитьПолучениеДанныхКлассификатораДолжностей", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКлассификатораДолжностейВФоне()
	
	ТипКлассификатора = ОбменССервисомМинздраваРФ.ТипКлассификатора_Должности();
	
	ПараметрыПолученияВерсий = ОбменССервисомМинздраваРФ.ПараметрыЗагрузки_ВерсииКлассификатора(ТипКлассификатора, 1, 10);
	СписокДоступныхВерсий = ОбменССервисомМинздраваРФ.ПолучитьДоступныеВерсииКлассификатора(ПараметрыПолученияВерсий);
	
	Версия = ?(ЗначениеЗаполнено(СписокДоступныхВерсий), СписокДоступныхВерсий[0].Значение, "");
	
	ПараметрыМетода = ОбменССервисомМинздраваРФ.ПараметрыПолучения_ДанныеКлассификатора(ТипКлассификатора, Версия);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных классификатора.'");
	
	ИмяПроцедуры = "ОбменССервисомМинздраваРФ.ПолучитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПолучениеДанныхКлассификатораДолжностей(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	АдресКлассификатораДолжностейМинЗдрава = РезультатДлительнойОперации.АдресРезультата;
	
	Если ПолучатьДанныеПриОткрытииФормы Тогда
		ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатора", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатораДолжностейФРМР

////////////////////////////////////////////////////////////////////////////////
// Получение данных классификатора должностей 1002 Минздрава
#Область ПолучениеДанныхКлассификатораДолжностей1002

&НаКлиенте
Процедура ПолучитьКлассификаторДолжностей1002()
	
	ДлительнаяОперация = ПолучитьДанныеКлассификатораДолжностейВФоне1002();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗавершитьПолучениеДанныхКлассификатораДолжностей1002", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКлассификатораДолжностейВФоне1002()
	
	ТипКлассификатора = ОбменССервисомМинздраваРФ.ТипКлассификатора_Должности1002();
	
	ПараметрыПолученияВерсий = ОбменССервисомМинздраваРФ.ПараметрыЗагрузки_ВерсииКлассификатора(ТипКлассификатора, 1, 10);
	СписокДоступныхВерсий = ОбменССервисомМинздраваРФ.ПолучитьДоступныеВерсииКлассификатора(ПараметрыПолученияВерсий);
	
	Версия = ?(ЗначениеЗаполнено(СписокДоступныхВерсий), СписокДоступныхВерсий[0].Значение, "");
	
	ПараметрыМетода = ОбменССервисомМинздраваРФ.ПараметрыПолучения_ДанныеКлассификатора(ТипКлассификатора, Версия);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных классификатора.'");
	
	ИмяПроцедуры = "ОбменССервисомМинздраваРФ.ПолучитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПолучениеДанныхКлассификатораДолжностей1002(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	АдресКлассификатораДолжностей1002МинЗдрава = РезультатДлительнойОперации.АдресРезультата;
	
	Если ПолучатьДанныеПриОткрытииФормы Тогда
		ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатора", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатораДолжностей1002

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных классификатора
#Область ЗагрузкаДанныхКлассификатора

&НаКлиенте
Процедура ЗагрузитьДанныеКлассификатораНаКлиенте(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		ТекущиеДанные = Классификатор.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		КлючТекущейСтроки = ТекущиеДанные.КлючСтроки;
	Иначе
		КлючТекущейСтроки = Неопределено;
	КонецЕсли;
	
	ОтобразитьИнформациюПользователю("ОжиданиеЗагрузкиДанных");
	
	ДлительнаяОперация = ЗагрузитьДанныеКлассификатораВФоне(ИдентификаторыСтрок);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗавершитьЗагрузкуДанныхКлассификатора", ЭтотОбъект, КлючТекущейСтроки);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеКлассификатораВФоне(ИдентификаторыСтрок)
	
	ДанныеКлассификатора = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ТекущиеДанные = Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЗагрузкаДоступна Тогда
			ЭлементДанных = ОбменССервисомФедеральныхРегистров.СтруктураДанныхКлассификатора_ФизическиеЛица();
			ЗаполнитьЗначенияСвойств(ЭлементДанных, ТекущиеДанные);
			ДанныеКлассификатора.Добавить(ЭлементДанных);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыМетода = ОбменССервисомФедеральныхРегистров.ПараметрыЗагрузки_ДанныеКлассификатора(ОбменССервисомФедеральныхРегистров.ТипКлассификатора_ФизическиеЛица(), ДанныеКлассификатора);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка данных классификатора.'");
	
	ИмяПроцедуры = "ОбменССервисомФедеральныхРегистров.ЗагрузитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗагрузкуДанныхКлассификатора(РезультатДлительнойОперации, КлючТекущейСтроки) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Пояснение = ЗавершитьЗагрузкуДанныхКлассификатораНаСервере(РезультатДлительнойОперации.АдресРезультата, КлючТекущейСтроки);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Данные обработаны'"),, Пояснение, БиблиотекаКартинок.Информация32);
	
	Если КлючТекущейСтроки <> Неопределено Тогда
		НайденныеСтроки = Классификатор.НайтиСтроки(Новый Структура("КлючСтроки", КлючТекущейСтроки));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Если ЗначениеЗаполнено(НайденныеСтроки[0].Ссылка) Тогда
				ПоказатьЗначение(, НайденныеСтроки[0].Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьЗагрузкуДанныхКлассификатораНаСервере(АдресРезультата, КлючТекущейСтроки)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Статусы = Результат.Статусы;
	
	Если Статусы.Ошибки.Количество() > 0 Тогда
		Для Каждого Ошибка Из Статусы.Ошибки Цикл
			ОбщегоНазначения.СообщитьПользователю(Ошибка);
		КонецЦикла;
		Возврат НСтр("ru = 'Обработано: 0'");
	КонецЕсли;
	
	ОбработатьНовыеДанныеКлассификатора(Результат, Истина);
	
	Если КлючТекущейСтроки <> Неопределено Тогда
		НайденныеСтроки = Классификатор.НайтиСтроки(Новый Структура("КлючСтроки", КлючТекущейСтроки));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Элементы.Классификатор.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Пояснения = Новый Массив;
	Если Статусы.Создано > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Создано: [Создано]'"));
	КонецЕсли;
	
	Если Статусы.Обновлено > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обновлено: [Обновлено]'"));
	КонецЕсли;
	
	Если Статусы.ПомеченоНаУдаление > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Помечено на удаление: [ПомеченоНаУдаление]'"));
	КонецЕсли;
	
	Если Пояснения.Количество() = 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обработано: 0'"));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(СтрСоединить(Пояснения, Символы.ПС), Статусы);
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Обработка данных классификатора
#Область ОбработкаДанныхКлассификатора

&НаСервере
Функция ОбработатьКэшированныеДанныеКлассификатора()
	
	Если Не ЭтоАдресВременногоХранилища(КэшЗагруженныхДанных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(КэшЗагруженныхДанных);
	Если ЗагруженныеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодOID");
	ЗагруженныеДанныеОрганизации = ЗагруженныеДанные.Получить(ИдентификаторОрганизации);
	Если ЗагруженныеДанныеОрганизации = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщееКоличествоДанных = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗагруженныеДанныеОрганизации, "ОбщееКоличествоДанных", 0);
	Если ОбщееКоличествоДанных = 0 Тогда
		Возврат Ложь; // Нет данных в базе сервиса.
	КонецЕсли;
	
	ДанныеКлассификатора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗагруженныеДанныеОрганизации, "ДанныеКлассификатора");
	Если ДанныеКлассификатора = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Смещение = РазмерПорции * (ТекущийНомерПорции - 1);
	Граница  = Мин(РазмерПорции, ОбщееКоличествоДанных - Смещение) - 1;
	
	Для Индекс = 0 По Граница Цикл
		
		НайденныйЭлемент = ДанныеКлассификатора.Найти(Индекс + Смещение, "КлючСтроки");
		Если НайденныйЭлемент = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтобразитьПорциюДанных(ЗагруженныеДанныеОрганизации);
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОчиститьКэшированныеДанные()
	
	Если Не ЭтоАдресВременногоХранилища(КэшЗагруженныхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(КэшЗагруженныхДанных);
	Если ЗагруженныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодOID");
	ЗагруженныеДанныеОрганизации = ЗагруженныеДанные.Получить(ИдентификаторОрганизации);
	Если ЗагруженныеДанныеОрганизации = Неопределено Тогда
		Возврат;
	Иначе
		ЗагруженныеДанныеОрганизации = Неопределено;
	КонецЕсли;
	
	ЗагруженныеДанные.Вставить(ИдентификаторОрганизации, ЗагруженныеДанныеОрганизации);
	ПоместитьВоВременноеХранилище(ЗагруженныеДанные, КэшЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНовыеДанныеКлассификатора(Результат, ЗаменятьСуществующиеДанные = Ложь)
	
	Если Не ЭтоАдресВременногоХранилища(КэшЗагруженныхДанных) Тогда
		КэшЗагруженныхДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(КэшЗагруженныхДанных);
	Если ЗагруженныеДанные = Неопределено Тогда
		ЗагруженныеДанные = Новый Соответствие;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодOID");
	ЗагруженныеДанныеОрганизации = ЗагруженныеДанные.Получить(ИдентификаторОрганизации);
	Если ЗагруженныеДанныеОрганизации = Неопределено Тогда
		ЗагруженныеДанныеОрганизации = Новый Структура("ОбщееКоличествоДанных, ДанныеКлассификатора");
		ЗагруженныеДанныеОрганизации.ОбщееКоличествоДанных = Результат.ОбщееКоличествоДанных;
		ЗагруженныеДанныеОрганизации.ДанныеКлассификатора  = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ДанныеКлассификатора);
	Иначе
		ДанныеКлассификатора = ЗагруженныеДанныеОрганизации.ДанныеКлассификатора;
		Для Каждого ЭлементДанных Из Результат.ДанныеКлассификатора Цикл
			НайденныйЭлемент = ДанныеКлассификатора.Найти(ЭлементДанных.КлючСтроки, "КлючСтроки");
			Если НайденныйЭлемент = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеКлассификатора.Добавить(), ЭлементДанных);
			ИначеЕсли ЗаменятьСуществующиеДанные Тогда
				ЗаполнитьЗначенияСвойств(НайденныйЭлемент, ЭлементДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗагруженныеДанные.Вставить(ИдентификаторОрганизации, ЗагруженныеДанныеОрганизации);
	ПоместитьВоВременноеХранилище(ЗагруженныеДанные, КэшЗагруженныхДанных);
	
	ОтобразитьПорциюДанных(ЗагруженныеДанныеОрганизации);
	
КонецПроцедуры

#КонецОбласти // ОбработкаДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Вывод порций данных
#Область ВыводПорцийДанных

&НаСервере
Процедура ОтобразитьПорциюДанных(ДанныеВерсииКлассификатора)
	
	ОбщееКоличествоДанных = ДанныеВерсииКлассификатора.ОбщееКоличествоДанных;
	ДанныеКлассификатора  = ДанныеВерсииКлассификатора.ДанныеКлассификатора;
	
	НомераПорций = ПредставлениеНомеровПорций(ОбщееКоличествоДанных, РазмерПорции, ТекущийНомерПорции, 4);
	
	Классификатор.Очистить();
	
	НижнийПредел  = Мин(РазмерПорции, ОбщееКоличествоДанных) * (ТекущийНомерПорции - 1);
	ВерхнийПредел = Мин(Мин(РазмерПорции, ОбщееКоличествоДанных) * ТекущийНомерПорции, ОбщееКоличествоДанных);
	
	Для Счетчик = НижнийПредел По ВерхнийПредел - 1 Цикл
		НайденныйЭлемент = ДанныеКлассификатора.Найти(Счетчик, "КлючСтроки");
		Если НайденныйЭлемент <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Классификатор.Добавить(), НайденныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеНомеровПорций(КоличествоЭлементов, РазмерПорции, НомерПорции, КоличествоВидимыхПорцийСнизуСверху)
	
	ВсегоПорций = Макс(Окр(КоличествоЭлементов / РазмерПорции + 0.5, 0, РежимОкругления.Окр15как10), 1);
	
	НижнийПредел  = Макс(Мин(НомерПорции + КоличествоВидимыхПорцийСнизуСверху, ВсегоПорций) - КоличествоВидимыхПорцийСнизуСверху * 2, 1);
	ВерхнийПредел = Мин(Макс(НомерПорции - КоличествоВидимыхПорцийСнизуСверху, 1) + КоличествоВидимыхПорцийСнизуСверху * 2, ВсегоПорций);
	
	СписокНомеровПорций = Новый Массив;
	Для Счетчик = 1 По ВсегоПорций Цикл
		
		Если Счетчик >= НижнийПредел И Счетчик <= ВерхнийПредел Тогда
			Шрифт = ?(Счетчик = НомерПорции, Новый Шрифт(, 12, Истина), Неопределено);
			Содержимое = Новый ФорматированнаяСтрока(Строка(Счетчик) + " ", Шрифт,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = 1 Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В начало'"),,,, Строка(Счетчик));
			Содержимое = Новый ФорматированнаяСтрока(Содержимое, " ");
		ИначеЕсли Счетчик = ВсегоПорций Тогда
			Содержимое = Новый ФорматированнаяСтрока(НСтр("ru = 'В конец'"),,,, Строка(Счетчик));
		Иначе
			Продолжить;
		КонецЕсли;
		
		СписокНомеровПорций.Добавить(Содержимое);
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(СписокНомеровПорций);
	
КонецФункции

#КонецОбласти // ВыводПорцийДанных


////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Шрифт строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ГруппаОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Элемент.Отбор.Элементы, "Шрифт", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Классификатор.Ссылка", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Классификатор.НаличиеДублей", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
	// Цвет текста строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.ЗагрузкаДоступна", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	// Цвет текста строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПриОткрытииФормы()
	
	Отказ = Ложь;
	ПроверитьПараметрыЗагрузкиДанных(Отказ);
	
	Если Не Отказ Тогда
		ПолучитьКлассификаторДолжностей();
		ПолучитьКлассификаторДолжностей1002();
	ИначеЕсли ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров Тогда
		ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров();
	ИначеЕсли ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ Тогда
		ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыЗагрузкиДанных(Отказ)
	
	ПроверитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров(Отказ);
	ПроверитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ(Отказ);
	
КонецПроцедуры

#Область ПроверкаПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров

&НаСервере
Процедура ПроверитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров(Отказ)
	
	Константа = Константы.ПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров;
	ПараметрыЗагрузки = Константа.Получить().Получить();
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("ФиксированнаяСтруктура") Тогда
		
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			Отказ = Истина;
			ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров = Истина;
		Иначе
			Текст = НСтр("ru = 'Не заполнены настройки загрузки данных из федеральных регистров. Обратитесь к администратору.'");
			ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
		КонецЕсли;
		
	Иначе
		
		Менеджер = Константа.СоздатьМенеджерЗначения();
		ПараметрыЗагрузкиПоУмолчанию = Менеджер.ЗначениеПоУмолчанию().Получить();
		Для Каждого КлючИЗначение Из ПараметрыЗагрузкиПоУмолчанию Цикл
			Значение = Неопределено;
			Значение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, КлючИЗначение.Ключ);
			Если Не ЗначениеЗаполнено(Значение) И КлючИЗначение.Ключ <> "Пароль" Тогда
				Если Пользователи.ЭтоПолноправныйПользователь() Тогда
					Отказ = Истина;
					ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров = Истина;
				Иначе
					Текст = НСтр("ru = 'Не заполнены настройки загрузки данных из федеральных регистров. Обратитесь к администратору.'");
					ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров()
	
	ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров = Ложь;
	
	ЗаголовокВопроса = НСтр("ru = 'Настройки загрузки данных'");
	Текст = НСтр("ru = 'Не заполнены настройки загрузки данных. Открыть форму настроек?'");
	
	Оповестить = Новый ОписаниеОповещения("ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистровЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповестить, Текст, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистровЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров",, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ПроверкаПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров

#Область ПроверкаПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ

&НаСервере
Процедура ПроверитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ(Отказ)
	
	Константа = Константы.ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ;
	ПараметрыЗагрузки = Константа.Получить().Получить();
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("ФиксированнаяСтруктура") Тогда
		
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			Отказ = Истина;
			ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров = Истина;
		Иначе
			Текст = НСтр("ru = 'Не заполнены настройки загрузки данных с сайта Минздрава РФ. Обратитесь к администратору.'");
			ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
		КонецЕсли;
		
	Иначе
		
		Менеджер = Константа.СоздатьМенеджерЗначения();
		ПараметрыЗагрузкиПоУмолчанию = Менеджер.ЗначениеПоУмолчанию().Получить();
		Для Каждого КлючИЗначение Из ПараметрыЗагрузкиПоУмолчанию Цикл
			Значение = Неопределено;
			Значение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, КлючИЗначение.Ключ);
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Если Пользователи.ЭтоПолноправныйПользователь() Тогда
					Отказ = Истина;
					ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ = Истина;
				Иначе
					Текст = НСтр("ru = 'Не заполнены настройки загрузки данных с сайта Минздрава РФ. Обратитесь к администратору.'");
					ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ()
	
	ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ = Ложь;
	
	ЗаголовокВопроса = НСтр("ru = 'Настройки загрузки данных с сайта Минздрава РФ'");
	Текст = НСтр("ru = 'Не заполнены настройки загрузки данных с сайта Минздрава РФ. Открыть форму настроек?'");
	
	Оповестить = Новый ОписаниеОповещения("ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповестить, Текст, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаполнитьПараметрыЗагрузкиДанныхИзСервисаМинздраваРФЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ",, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ПроверкаПараметрыЗагрузкиДанныхИзСервисаМинздраваРФ

&НаКлиенте
Процедура ОтобразитьИнформациюПользователю(Вариант, Уточнение = "")
	
	Если Вариант = "ВыборКлассификатора" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборКлассификатора;
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	ИначеЕсли Вариант = "ОжиданиеПолученияДанных" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииПолучениеДанных;
		
	ИначеЕсли Вариант = "ОжиданиеЗагрузкиДанных" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииЗагрузкиДанных;
		Элементы.ОсновнаяПанель.Доступность = Ложь;
		
	ИначеЕсли Вариант = "ДинамическаяОшибка" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборКлассификатора;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Уточнение);
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
