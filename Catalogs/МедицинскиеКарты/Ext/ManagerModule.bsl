
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Пациент");
	Поля.Добавить("НомерКарты");
	Поля.Добавить("ДатаОткрытия");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомерКарты = ?(ЗначениеЗаполнено(Данные.НомерКарты), "#" + Данные.НомерКарты, НСтр("ru ='Б/Н'"));
	ДатаОткрытия = ?(ЗначениеЗаполнено(Данные.ДатаОткрытия), " " + НСтр("ru ='от'") + " " + Формат(Данные.ДатаОткрытия, "ДЛФ=D"), "");
	
	Представление = СокрЛП(Данные.Пациент) + " " + НомерКарты + ДатаОткрытия;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 5
	|	МедицинскиеКарты.Ссылка КАК Ссылка,
	|	МедицинскиеКарты.ДатаОткрытия КАК ДатаОткрытия
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	НомерКарты ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И НЕ ВАрхиве
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 5
	|	МедицинскиеКарты.Ссылка КАК Ссылка,
	|	МедицинскиеКарты.ДатаОткрытия КАК ДатаОткрытия
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ФизическиеЛица КАК Пациенты
	|	ПО
	|		МедицинскиеКарты.Пациент = Пациенты.Ссылка
	|ГДЕ
	|	Пациенты.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И НЕ ВАрхиве
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОткрытия УБЫВ
	|");
	
	СтрокаПоиска = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЭкранироватьСлужебныеСимволыШаблона(Параметры.СтрокаПоиска, "~");
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДлинаВхождения = СтрДлина(Параметры.СтрокаПоиска);
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Представление = СокрЛП(Выборка.Ссылка);
			Позиция = СтрНайти(ВРег(Представление), ВРег(Параметры.СтрокаПоиска));
			
			ДанныеПредставления = Новый Массив;
			Начало = Лев(Представление, Позиция - 1);
			ПредставлениеПоиска = Новый ФорматированнаяСтрока(Сред(Представление, Позиция, ДлинаВхождения),, WebЦвета.Красный);
			Окончание = Сред(Представление, Позиция + ДлинаВхождения);
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, Новый ФорматированнаяСтрока(Начало, ПредставлениеПоиска, Окончание));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Возвращает описание блокируемых реквизитов
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов
//   Элемент массива - Строка в формате:
//     ИмяРеквизита[;ИмяЭлементаФормы,...]
//      где
//       ИмяРеквизита     - имя реквизита объекта
//       ИмяЭлементаФормы - имя элемента формы, связанного с реквизитом
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("НомерКарты");
	БлокируемыеРеквизиты.Добавить("ПериодДействия;ДатаОткрытия,ДатаЗакрытия,УстановитьИнтервал");
	БлокируемыеРеквизиты.Добавить("Пациент");
	БлокируемыеРеквизиты.Добавить("МестаХранения;МестоХраненияОрганизация,МестоХраненияОтделение,МестоХраненияПериод");
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли