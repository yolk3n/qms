
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РежимОтображенияМедКарт = Элементы.РежимОтображенияМедКарт.СписокВыбора[0].Значение;
	
	НастроитьОтборПриСоздании();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборПоРежимуОтображения();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВАрхиве", Ложь,,, Не ПоказыватьАрхивныеМедКарты);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзвлечьИзАрхива(Команда)
	
	УстановитьСтатусВАрхиве(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВАрхив(Команда)
	
	УстановитьСтатусВАрхиве(Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборПоРежимуОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтделениеПриИзменении(Элемент)
	
	УстановитьОтборПоРежимуОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияМедКартПриИзменении(Элемент)
	
	УстановитьОтборПоРежимуОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьАрхивныеМедКарты(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВАрхиве", Ложь,,, Не ПоказыватьАрхивныеМедКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	Элемент = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделять архивные медицинские карты'");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВАрхиве");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборПриСоздании()
	
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Неопределено, Организация);
	
	УстановитьОтборПоРежимуОтображения();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВАрхиве", Ложь,,, Не ПоказыватьАрхивныеМедКарты);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстЗапросаПоРежимуОтображения()
	
	Если РежимОтображенияМедКарт = "ПоТекущемуИБывшимМестамХранения"
	   И (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Отделение)) Тогда
		
		Список.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МедицинскиеКарты.Ссылка                    КАК Ссылка,
		|	МедицинскиеКарты.Пациент                   КАК Пациент,
		|	МедицинскиеКарты.НомерКарты                КАК НомерКарты,
		|	ДвиженияПациентовСрезПоследних.Организация КАК Организация,
		|	ДвиженияПациентовСрезПоследних.Отделение   КАК Отделение,
		|	МедицинскиеКарты.ДатаОткрытия              КАК ДатаОткрытия,
		|	МедицинскиеКарты.ДатаЗакрытия              КАК ДатаЗакрытия,
		|	МедицинскиеКарты.ВАрхиве                   КАК ВАрхиве
		|ИЗ
		|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ДвиженияПациентов КАК ДвиженияПациентов
		|		ПО
		|			МедицинскиеКарты.Ссылка = ДвиженияПациентов.КартаПациента
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ДвиженияПациентов.СрезПоследних КАК ДвиженияПациентовСрезПоследних
		|		ПО
		|			МедицинскиеКарты.Ссылка = ДвиженияПациентовСрезПоследних.КартаПациента
		|{ГДЕ
		|	ДвиженияПациентов.Организация.*,
		|	ДвиженияПациентов.Отделение.*}
		|";
		
	Иначе
		
		Список.ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МедицинскиеКарты.Ссылка                    КАК Ссылка,
		|	МедицинскиеКарты.НомерКарты                КАК НомерКарты,
		|	МедицинскиеКарты.Пациент                   КАК Пациент,
		|	ДвиженияПациентовСрезПоследних.Организация КАК Организация,
		|	ДвиженияПациентовСрезПоследних.Отделение   КАК Отделение,
		|	МедицинскиеКарты.ДатаОткрытия              КАК ДатаОткрытия,
		|	МедицинскиеКарты.ДатаЗакрытия              КАК ДатаЗакрытия,
		|	МедицинскиеКарты.ВАрхиве                   КАК ВАрхиве
		|ИЗ
		|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ДвиженияПациентов.СрезПоследних КАК ДвиженияПациентовСрезПоследних
		|		ПО
		|			ДвиженияПациентовСрезПоследних.КартаПациента = МедицинскиеКарты.Ссылка
		|";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРежимуОтображения()
	
	ИзменитьТекстЗапросаПоРежимуОтображения();
	
	УстанавливатьОтбор = (РежимОтображенияМедКарт <> "ПоВсемМестамХранения");
	
	Элементы.ОтборОрганизация.Доступность = УстанавливатьОтбор;
	Элементы.ОтборОтделение.Доступность = УстанавливатьОтбор;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация,,, УстанавливатьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Отделение", Отделение,,, УстанавливатьОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВАрхиве(Значение)
	
	ВыделенныеСтроки = ВзаимодействиеСПользователемКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	КоличествоОбработано = УстановитьСтатусВАрхивеСервер(ВыделенныеСтроки, Значение);
	
	Если КоличествоОбработано = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет элементов для обработки.'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
	Иначе
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.МедицинскиеКарты"));
		Если Значение Тогда
			ТекстСообщения = НСтр("ru = 'Выделенные элементы помещены в архив.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Выделенные элементы извлечены из архива.'");
		КонецЕсли;
		Пояснение = НСтр("ru='Обработано элементов: %1 из %2.'");
		Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Пояснение, КоличествоОбработано, ВыделенныеСтроки.Количество());
		Состояние(ТекстСообщения,, Пояснение, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусВАрхивеСервер(Знач Ссылки, Знач ВАрхив)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МедицинскиеКарты.Ссылка
	|ИЗ
	|	Справочник.МедицинскиеКарты КАК МедицинскиеКарты
	|ГДЕ
	|	МедицинскиеКарты.ВАрхиве = &ВАрхиве
	|	И МедицинскиеКарты.Ссылка В(&Ссылки)
	|";
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("ВАрхиве", Не ВАрхив);
	
	КоличествоОбработано = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(НСтр("ru='Не удалось заблокировать %Объект%. %ОписаниеОшибки%'"), "%Объект%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВАрхиве = ВАрхив;
		
		Попытка
			Объект.Записать();
			КоличествоОбработано = КоличествоОбработано + 1;
		Исключение
			ТекстОшибки = СтрЗаменить(НСтр("ru='Не удалось записать %Объект%. %ОписаниеОшибки%'"), "%Объект%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат КоличествоОбработано;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
