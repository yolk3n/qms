
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если Объект.Ссылка.Пустая() Тогда
		КартаПациентаСсылка = Справочники.МедицинскиеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ПриСозданииНовогоПриЧтенииНаСервере();
		
		ЗаполнитьЗначенияСвойств(МестоХранения, Параметры.ЗначенияЗаполнения);
		ЗаполнитьМестоХраненияЗначениямиПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КартаПациентаСсылка = Объект.Ссылка;
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДвиженияПациентов" И Источник = КартаПациентаСсылка Тогда
		ЗаполнитьМестоХраненияМедКарты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗапроситьРежимИзмененияМестаХраненияМедКарты(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(КартаПациентаСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеМестаХраненияМедКарты(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьМестоХраненияМедКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗаполнитьМестоХраненияМедКарты();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсторияДвиженийПациентов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("КартаПациента", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ДвиженияПациентов.ФормаСписка", ПараметрыФормы, ЭтотОбъект, Истина, ЭтотОбъект.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаОткрытия;
	Диалог.Период.ДатаОкончания = Объект.ДатаЗакрытия;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Продолжение процедуры УстановитьИнтервал
//
&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		
		Объект.ДатаОткрытия = Период.ДатаНачала;
		Объект.ДатаЗакрытия = Период.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Элементы.ГруппаВАрхиве.Видимость = Объект.ВАрхиве;
	
	ЗаполнитьМестоХраненияМедКарты();
	
КонецПроцедуры

#Область МестоХранения

&НаСервере
Процедура ЗаполнитьМестоХраненияМедКарты()
	
	Запись = РегистрыСведений.ДвиженияПациентов.СоздатьМенеджерЗаписи();
	Запись.КартаПациента = КартаПациентаСсылка;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ДвиженияПациентов;
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Период
		|ИЗ
		|	РегистрСведений.ДвиженияПациентов
		|ГДЕ
		|	ИСТИНА
		|";
		
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|И " + Измерение.Имя + " = &" + Измерение.Имя;
			Запрос.УстановитьПараметр(Измерение.Имя, Запись[Измерение.Имя]);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|";
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запись.Период = Выборка.Период;
			Запись.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Запись, "МестоХранения");
	ЗначенияЗаписи = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Запись, МетаданныеРегистра);
	МестоХраненияПрежняяЗапись = Новый ФиксированнаяСтруктура(ЗначенияЗаписи);
	МестоХраненияСоздатьНовуюЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьМестоХраненияМедКарты()
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ДвиженияПациентов;
	Если Не ПравоДоступа("Изменение", МетаданныеРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилисьДанные = МестоХраненияМедКартыИзменилось();
	Если ИзменилисьДанные Тогда
		
		// пишем новое состояние записи
		МенеджерЗаписи = РеквизитФормыВЗначение("МестоХранения");
		
		// если нужно сохранить старую запись, то создадим новые менеджер записи
		Если МестоХраненияСоздатьНовуюЗапись Тогда
			
			НоваяЗапись = РегистрыСведений.ДвиженияПациентов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, МенеджерЗаписи);
			НоваяЗапись.Записать();
			
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеМестаХраненияМедКарты(Отказ)
	
	Если МестоХраненияМедКартыИзменилось() Тогда
		
		МенеджерЗаписи = РеквизитФормыВЗначение("МестоХранения");
		
		МетаданныеРегистра = Метаданные.РегистрыСведений.ДвиженияПациентов;
		
		Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, СтандартныйРеквизит, Отказ);
		КонецЦикла;
		
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, Измерение, Отказ);
		КонецЦикла;
		
		Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, Ресурс, Отказ);
		КонецЦикла;
		
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, Реквизит, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПоляЗаписиРегистраВФорме(МенеджерЗаписи, ОписаниеПоля, Отказ)
	
	Если ОписаниеПоля.ПроверкаЗаполнения  = ПроверкаЗаполнения.ВыдаватьОшибку
	   И Не ЗначениеЗаполнено(МенеджерЗаписи[ОписаниеПоля.Имя]) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поле ""%1"" не заполнено.'"), ОписаниеПоля.Представление());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "МестоХранения." + ОписаниеПоля.Имя,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МестоХраненияМедКартыИзменилось()
	
	Если МестоХранения.Период <> МестоХраненияПрежняяЗапись.Период Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ДвиженияПациентов;
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если МестоХранения[Измерение.Имя] <> МестоХраненияПрежняяЗапись[Измерение.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
		Если МестоХранения[Поле.Имя] <> МестоХраненияПрежняяЗапись[Поле.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
		Если МестоХранения[Поле.Имя] <> МестоХраненияПрежняяЗапись[Поле.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьРежимИзмененияМестаХраненияМедКарты(Отказ)
	
	Если Не ЗначениеЗаполнено(МестоХранения.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МестоХраненияПрежняяЗапись.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилсяПериод = (МестоХранения.Период <> МестоХраненияПрежняяЗапись.Период);
	
	ИзменилисьДанные = Ложь;
	Для Каждого Поле Из МестоХраненияПрежняяЗапись Цикл
		Если Поле.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		ИзменилисьДанные = МестоХранения[Поле.Ключ] <> Поле.Значение;
		Если ИзменилисьДанные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменилисьДанные И ИзменилсяПериод Тогда
		МестоХраненияСоздатьНовуюЗапись = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМестоХраненияЗначениямиПоУмолчанию()
	
	ТаблицаОбъекта = МестоХранения.ИсходныйКлючЗаписи.Метаданные().ПолноеИмя();
	МестоХранения.Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(МестоХранения.Организация, ТаблицаОбъекта);
	МестоХранения.Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(МестоХранения.Отделение,МестоХранения.Организация, ТаблицаОбъекта);
	
КонецПроцедуры

#КонецОбласти // МестоХранения

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовБольничнаяАптекаКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
