
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьИсточникиДанных();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	
	СпособЗагрузки = ИсточникиДанных.Сайт;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если СпособЗагрузки = ИсточникиДанных.Файл Тогда 
		Если ПроверяемыеРеквизиты.Найти("Организация") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Организация"));
		КонецЕсли;
		Если ПроверяемыеРеквизиты.Найти("ПутьКФайлу") = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ПутьКФайлу");
		КонецЕсли;
	ИначеЕсли СпособЗагрузки = ИсточникиДанных.Сайт Тогда
		Если ПроверяемыеРеквизиты.Найти("ПутьКФайлу") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПутьКФайлу"));
		КонецЕсли;
		Если ПроверяемыеРеквизиты.Найти("Организация") = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("Организация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьРешенияОПриостановкеМДЛП(Команда)
	
	Если СпособЗагрузки = ИсточникиДанных.Сайт Тогда
		ПолучитьДанныеМДЛП();
	ИначеЕсли СпособЗагрузки = ИсточникиДанных.Файл Тогда
		// Всегда обновляем файл из файловой системы в АдресФайлаНаСервере, т.к. файл может измениться.
		НачатьВыборФайлаДанных(Не ЗначениеЗаполнено(ПутьКФайлу));
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	ОтобразитьИнформациюПользователю("ОжиданиеЗагрузкиДанных");
	
	ПодключитьОбработчикОжидания("ЗагрузитьДанныеМДЛП", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФильтрСтатусЗагрузкаПриИзменении(Элемент)
	
	УстановитьФильтрПоСтатусуЗагрузки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМДЛПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОтобразитьИнформациюПользователю("ОжиданиеЗагрузкиДанных");
	
	ПодключитьОбработчикОжидания("ЗагрузитьДанныеМДЛП", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМДЛППередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМДЛППередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗагрузкиПриИзменении(Элемент)
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачатьВыборФайлаДанных(Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ПолучениеФайлаДанныхМДЛП

&НаКлиенте
Процедура НачатьВыборФайлаДанных(Интерактивно = Истина)
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Интерактивно = Интерактивно;
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы забракованных серий МДЛП(mdlp_rejects.*)|mdlp_rejects.*'");
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Файл забракованных серий МДЛП'");
	ПараметрыЗагрузки.Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьВыборФайлаДанных", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповестить, ПараметрыЗагрузки, ПутьКФайлу, АдресФайлаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаДанных(ПомещенныйФайл, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайлаНаСервере = ПомещенныйФайл.Хранение;
	ПутьКФайлу          = ПомещенныйФайл.Имя;
	
	ПолучитьДанныеМДЛП();
	
КонецПроцедуры

#КонецОбласти // ПолучениеФайлаДанныхМДЛП

#Область ПолучениеДанныхМДЛП

&НаКлиенте
Процедура ПолучитьДанныеМДЛП()
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьИнформациюПользователю("ОжиданиеПолученияДанных");
	
	Если СпособЗагрузки = ИсточникиДанных.Сайт Тогда 
		ПодключитьОбработчикОжидания("НачатьПолучениеДанныхМДЛПИзСервисаОтложенно", 0.1, Истина);
	ИначеЕсли СпособЗагрузки = ИсточникиДанных.Файл Тогда
		ПодключитьОбработчикОжидания("НачатьПолучениеДанныхМДЛПИзФайлаОтложенно", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ПолучениеДанныхМДЛПИзСервиса

&НаКлиенте
Процедура НачатьПолучениеДанныхМДЛПИзСервисаОтложенно()
	
	ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Организация);
	
	Если ПараметрыПодключения = Неопределено Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", НСтр("ru = 'У организации-резидента не указано ни одного места деятельности для текущей ИБ'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Неопределено);
	ПараметрыМетода.Добавить(0);
	ПараметрыМетода.Добавить(Неопределено);
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхМДЛПИзСервиса", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.ВыполнитьАвторизованныйЗапрос(ПараметрыПодключения, Оповестить, "ПолучитьРешенияОПриостановкеКИЗ", ПараметрыМетода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеДанныхМДЛПИзСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбработатьРезультатРешенийОПриостановке(Результат.Список);
		
		Пояснение = ?(ДанныеМДЛП.Количество() > 0, НСтр("ru = 'Данные получены'"), НСтр("ru = 'Не обнаружено серий номенклатуры, которые соответствуют существующим решениям о приостановке/отмене приостановки'"));
		ПоказатьОповещениеПользователя(НСтр("ru = 'Получение данных'"),, Пояснение, БиблиотекаКартинок.Информация32);
		ОтобразитьИнформациюПользователю("ВыборЭлементов");
		
	Исключение
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхМДЛПИзСервиса

#Область ПолучениеДанныхМДЛПИзФайла

&НаКлиенте
Процедура НачатьПолучениеДанныхМДЛПИзФайлаОтложенно()
	
	Если Не ЭтоАдресВременногоХранилища(АдресФайлаНаСервере) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось получить файл из файловой системы.'");
		ОтобразитьИнформациюПользователю("АдресДанныхКлассификатораНаСервереНеПолучен", СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбработатьПолучениеДанныхМДЛПИзФайла();
		
		Пояснение = ?(ДанныеМДЛП.Количество() > 0, НСтр("ru = 'Данные получены'"), НСтр("ru = 'Не обнаружено серий номенклатуры, которые соответствуют существующим решениям о приостановке/отмене приостановки'"));
		ПоказатьОповещениеПользователя(НСтр("ru = 'Получение данных'"),, Пояснение, БиблиотекаКартинок.Информация32);
		ОтобразитьИнформациюПользователю("ВыборЭлементов");
		
	Исключение
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолучениеДанныхМДЛПИзФайла()
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаНаСервере);
	
	КаталогНазначения  = ФайловаяСистема.СоздатьВременныйКаталог();
	ФайлЗабраковкиМДЛП = ФайловыеФункцииБольничнаяАптекаКлиентСервер.ПолучитьПолныйПутьКФайлу(КаталогНазначения, "mdlp_rejects.json");
	
	Если СтрЗаканчиваетсяНа(НРег(ПутьКФайлу), "zip") Тогда
		ПотокZIP  = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		
		ЧтениеZIP = Новый ЧтениеZipФайла(ПотокZIP);
		ЧтениеZIP.ИзвлечьВсе(КаталогНазначения);
		ЧтениеZIP.Закрыть();
		
		ПотокZIP.Закрыть();
	Иначе
		ДвоичныеДанные.Записать(ФайлЗабраковкиМДЛП);
	КонецЕсли;
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ФайлЗабраковкиМДЛП);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина, Неопределено);
	Исключение
		ВызватьИсключение(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ДанныеJSON.Получить("total") <> Неопределено Тогда
		Результат.Вставить("Список", ДанныеJSON.Получить("entries"));
		Результат.Вставить("Всего", Результат.Список.Количество());
		Результат.Вставить("ДополнительныеПоля", Новый Соответствие);
	Иначе
		Результат.Вставить("Список", ДанныеJSON);
		Результат.Вставить("Всего", ДанныеJSON.Количество());
		Результат.Вставить("ДополнительныеПоля", Новый Соответствие);
	КонецЕсли;
	
	ОбработатьРезультатРешенийОПриостановке(Результат.Список);
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхМДЛПИзФайла

&НаСервере
Процедура ОбработатьРезультатРешенийОПриостановке(ДанныеРешенийОПриостановке)
	
	ЗагружаемыеДанные = ЗаполнитьДанныеМДЛП(ДанныеРешенийОПриостановке);
	
	Справочники.ЗабракованныеСерии.СопоставитьДанныеМДЛП(ЗагружаемыеДанные, Истина);
	
	ОбновитьСтатусЗагружаемыхДанныхМДЛП(ЗагружаемыеДанные);
	
	ДанныеМДЛП.Загрузить(ЗагружаемыеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусЗагружаемыхДанныхМДЛП(ЗагружаемыеДанные)
	
	// Добавляем колонки результата анализа.
	Если ЗагружаемыеДанные.Колонки.Найти("Статус") = Неопределено Тогда
		ЗагружаемыеДанные.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КонецЕсли;
	
	Если ЗагружаемыеДанные.Колонки.Найти("Информация") = Неопределено Тогда
		ЗагружаемыеДанные.Колонки.Добавить("Информация", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	
	Для Каждого СтрокаРешения Из ЗагружаемыеДанные Цикл
		
		КритичныеОшибки   = Новый Массив;
		НекритичныеОшибки = Новый Массив;
		
		Если Не ЗначениеЗаполнено(СтрокаРешения.Номенклатура) Тогда
			КритичныеОшибки.Добавить(НСтр("ru = '- не удалось найти номенклатуру'"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаРешения.Серия) Тогда
			КритичныеОшибки.Добавить(НСтр("ru = '- не удалось найти серию'"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаРешения.ДатаРешенияОПриостановке) 
		 Или Не ЗначениеЗаполнено(СтрокаРешения.НомерРешенияОПриостановке) Тогда
			КритичныеОшибки.Добавить(НСтр("ru = '- неполные сведения о решении о приостановке'"));
		КонецЕсли;
		
		Если СтрокаРешения.КоличествоПодходящейНоменклатуры > 1 Тогда
			НекритичныеОшибки.Добавить(НСтр("ru = '- обнаружено несколько элементов справочника номенклатура с указанным GTIN'"));
		КонецЕсли;
		
		Если СтрокаРешения.КоличествоПодходящихСерий > 1 Тогда
			НекритичныеОшибки.Добавить(НСтр("ru = '- обнаружено несколько серий с указанным номером'"));
		КонецЕсли;
		
		Если СтрокаРешения.КоличествоРешенийОПриостановке > 1 Тогда
			НекритичныеОшибки.Добавить(НСтр("ru = '- обнаружено несколько забраковок для одной серии'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРешения.Серия)
		   И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРешения.Серия, "СерияПромаркированаДляЦелейМДЛП") Тогда
			НекритичныеОшибки.Добавить(НСтр("ru = '- для найденной серии не установлен признак ""Серия промаркирована для целей МДЛП""'"));
		КонецЕсли;
		
		Если КритичныеОшибки.Количество() > 0 Тогда
			
			СтрокаРешения.Статус     = Статус_ЗагрузкаНедоступна();
			СтрокаРешения.Информация = НСтр("ru = 'Загрузка выполнена не будет по причине:'") + Символы.ПС + Символы.Таб + СтрСоединить(КритичныеОшибки, Символы.ПС + Символы.Таб);
			
		ИначеЕсли НекритичныеОшибки.Количество() > 0 Тогда
			
			СтрокаРешения.Статус     = Статус_ЗагрузкаНеРекомендуется();
			СтрокаРешения.Информация = НСтр("ru = 'Загрузка не рекомендуется по причине:'") + Символы.ПС + Символы.Таб + СтрСоединить(НекритичныеОшибки, Символы.ПС + Символы.Таб);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРешения.РешениеОПриостановке) И Не СтрокаРешения.РешениеНужноОбновить Тогда
			
			СтрокаРешения.Статус = Статус_ЗагрузкаНеТребуется();
			СтрокаРешения.Информация = НСтр("ru = 'Загрузка данных не требуется.'");
			Если СтрокаРешения.ОтменаЗабраковки Тогда
				СтрокаРешения.Информация = СтрокаРешения.Информация + Символы.ПС + НСтр("ru = 'Решение об отмене приостановке было загружено ранее или загружено более актуальное решение о приостановке/отмене приостановки.'");
			Иначе
				СтрокаРешения.Информация = СтрокаРешения.Информация + Символы.ПС + НСтр("ru = 'Решение о приостановке было загружено ранее или загружено более актуальное решение о приостановке/отмене приостановки.'");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРешения.РешениеОПриостановке) И СтрокаРешения.РешениеНужноОбновить Тогда
			
			СтрокаРешения.Статус = Статус_ЗагрузкаНеВыполнялась();
			Если СтрокаРешения.ОтменаЗабраковки Тогда
				СтрокаРешения.Информация = НСтр("ru = 'Необходимо обновить ранее загруженное решение об отмене приостановки'");
			Иначе
				СтрокаРешения.Информация = НСтр("ru = 'Необходимо обновить ранее загруженное решение о приостановке'");
			КонецЕсли;
			
		Иначе
			
			СтрокаРешения.Статус = Статус_ЗагрузкаНеВыполнялась();
			СтрокаРешения.Информация = НСтр("ru = 'Загрузка доступна'");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеМДЛП(ДанныеРешенийОПриостановке)
	
	ДанныеМДЛП.Очистить();
	ЗагружаемыеДанные = РеквизитФормыВЗначение("ДанныеМДЛП");
	
	Для Каждого ЭлементДанных Из ДанныеРешенийОПриостановке Цикл
		СтрокаРешения = ЗагружаемыеДанные.Добавить();
		СтрокаРешения.GTIN                       = ЭлементДанных["gtin"];
		СтрокаРешения.НомерСерии                 = ЭлементДанных["batch"];
		СтрокаРешения.НомерРешенияОПриостановке  = ЭлементДанных["halt_doc_num"];
		СтрокаРешения.ТипРешенияОПриостановке    = ЭлементДанных["halt_type"];
		
		ДатаРешенияОПриостановке = Лев(ЭлементДанных["op_date"], СтрНайти(ЭлементДанных["op_date"], "."));
		СтрокаРешения.ДатаРешенияОПриостановке   = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДатаРешенияОПриостановке);
	КонецЦикла;
	
	Возврат ЗагружаемыеДанные;
	
КонецФункции

#КонецОбласти // ПолучениеДанныхМДЛП

#Область ЗагрузкаДанныхМДЛП

&НаКлиенте
Процедура ЗагрузитьДанныеМДЛП()
	
	ВыделенныеСтроки = Элементы.ДанныеМДЛП.ВыделенныеСтроки;
	Если Не ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		ОтобразитьИнформациюПользователю("ВыборЭлементов");
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура"             , Элементы.ДанныеМДЛП.ТекущиеДанные.Номенклатура);
		Отбор.Вставить("Серия"                    , Элементы.ДанныеМДЛП.ТекущиеДанные.Серия);
		Отбор.Вставить("ДатаРешенияОПриостановке" , Элементы.ДанныеМДЛП.ТекущиеДанные.ДатаРешенияОПриостановке);
		Отбор.Вставить("НомерРешенияОПриостановке", Элементы.ДанныеМДЛП.ТекущиеДанные.НомерРешенияОПриостановке);
		Отбор.Вставить("ТипРешенияОПриостановке"  , Элементы.ДанныеМДЛП.ТекущиеДанные.ТипРешенияОПриостановке);
	КонецЕсли;
	
	Попытка
		РезультатЗагрузки = ЗагрузитьДанныеМДЛПНаСервере(ВыделенныеСтроки);
	Исключение
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если РезультатЗагрузки.Ошибки.Количество() > 0 Тогда
		Для Каждого Ошибка Из РезультатЗагрузки.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗагрузки.Вставить("Выбрано", ВыделенныеСтроки.Количество());
	Пояснения = Новый Массив;
	Если РезультатЗагрузки.Обработано > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обработано [Обработано] из [Выбрано] элементов.'"));
	КонецЕсли;
	
	Если Пояснения.Количество() = 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обработано 0 из [Выбрано] элементов.'"));
	КонецЕсли;
	
	Пояснение = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(СтрСоединить(Пояснения, Символы.ПС), РезультатЗагрузки);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Данные обработаны'"),, Пояснение, БиблиотекаКартинок.Информация32);
	
	// Т.к. таблица изменилась, ранее выбранную строку нужно искать заново.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		НайденныеСтроки = ДанныеМДЛП.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			РешениеОПриостановке = НайденныеСтроки[0].РешениеОПриостановке;
			Если ЗначениеЗаполнено(РешениеОПриостановке) Тогда
				ПоказатьЗначение(, РешениеОПриостановке);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьИнформациюПользователю("ВыборЭлементов");
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеМДЛПНаСервере(ВыделенныеСтроки)
	
	ОбрабатываемыеДанные = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ДанныеМДЛП.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные.Статус = Статус_ЗагрузкаНеТребуется()
		 Или ТекущиеДанные.Статус = Статус_ЗагрузкаНедоступна() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбрабатываемыеДанные.Добавить(ТекущиеДанные);
		
	КонецЦикла;
	
	РезультатЗагрузки = Справочники.ЗабракованныеСерии.ЗагрузитьДанныеМДЛП(ОбрабатываемыеДанные);
	
	Если РезультатЗагрузки.Обработано > 0 Тогда
		
		Колонки = "GTIN, НомерСерии, ДатаРешенияОПриостановке, НомерРешенияОПриостановке, ТипРешенияОПриостановке";
		ОбновляемыеДанные = ДанныеМДЛП.Выгрузить(, Колонки);
		ОбновляемыеДанные.Свернуть(Колонки);
		
		Справочники.ЗабракованныеСерии.СопоставитьДанныеМДЛП(ОбновляемыеДанные);
		
		ОбновитьСтатусЗагружаемыхДанныхМДЛП(ОбновляемыеДанные);
		
		ДанныеМДЛП.Загрузить(ОбновляемыеДанные);
		
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхМДЛП

#Область СтатусыОбработкиРешений

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ЗагрузкаНеТребуется()
	
	Возврат "ЗагрузкаНеТребуется";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ЗагрузкаНедоступна()
	
	Возврат "ЗагрузкаНедоступна";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ЗагрузкаНеРекомендуется()
	
	Возврат "ЗагрузкаНеРекомендуется";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Статус_ЗагрузкаНеВыполнялась()
	
	Возврат "ЗагрузкаНеВыполнялась";
	
КонецФункции

#КонецОбласти // СтатусыОбработкиРешений

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Цвет строки со статусом "ЗагрузкаНеРекомендуется".
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Строка, загрузка которой не рекомендуется'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеМДЛП.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДанныеМДЛП.Статус", ВидСравненияКомпоновкиДанных.Равно, Статус_ЗагрузкаНеРекомендуется());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	// Шрифт строки решения, присутствующего в базе.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Решение о приостановке есть в базе'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеМДЛП.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДанныеМДЛП.РешениеОПриостановке", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.ЗабракованныеСерии.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДанныеМДЛП.Статус", ВидСравненияКомпоновкиДанных.Равно, Статус_ЗагрузкаНеТребуется());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,,Истина));
	
	// Шрифт строки со статусом "ЗагрузкаНедоступна".
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Строка, загрузка которой недоступна'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеМДЛП.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДанныеМДЛП.Статус", ВидСравненияКомпоновкиДанных.Равно, Статус_ЗагрузкаНедоступна());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Текст поля ДанныеМДЛПТипРешенияОПриостановке.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Тип решения о приостановке - приостановка'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеМДЛПТипРешенияОПриостановке.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДанныеМДЛП.ТипРешенияОПриостановке", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Приостановка'"));
	
	// Текст поля ДанныеМДЛПТипРешенияОПриостановке.
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Тип решения о приостановке - отмена приостановки'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеМДЛПТипРешенияОПриостановке.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДанныеМДЛП.ТипРешенияОПриостановке", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отмена приостановки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрПоСтатусуЗагрузки(Элемент)
	
	СтруктураЗначенийОтбораПоСтатусу = СтруктураЗначенийОтбораПоСтатусу();
	
	УстановитьОтбор = ЭтотОбъект[Элемент.Имя];
	
	Если УстановитьОтбор Тогда
		
		Для Каждого КлючИЗначение Из СтруктураЗначенийОтбораПоСтатусу Цикл
			Если Элемент.Имя = КлючИЗначение.Ключ Тогда
				ЗначениеСтатуса      = КлючИЗначение.Значение.Статус;
				ТекстЗаголовкаСтатус = КлючИЗначение.Значение.Заголовок;
			Иначе
				ЭтотОбъект[КлючИЗначение.Ключ] = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Отбор = Новый Структура("Статус", ЗначениеСтатуса);
		Элементы.ДанныеМДЛП.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
		Элементы.ГруппаФильтрЗагрузка.Заголовок     = ТекстЗаголовкаСтатус;
		Элементы.ГруппаДинамическиеОтборы.Заголовок = НСтр("ru = 'Фильтр'") + Символы.НПП + ТекстЗаголовкаСтатус;
		
	Иначе
		Элементы.ДанныеМДЛП.ОтборСтрок = Неопределено;
		Элементы.ГруппаФильтрЗагрузка.Заголовок     = НСтр("ru = 'Загрузка'");
		Элементы.ГруппаДинамическиеОтборы.Заголовок = НСтр("ru = 'Фильтр'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураЗначенийОтбораПоСтатусу()
	
	СтруктураЗначенийОтбора = Новый Структура;
	
	СтруктураЗначенийОтбора.Вставить("ФильтрСтатусЗагрузкаНеВыполнялась"  , Новый Структура("Статус, Заголовок",
		Статус_ЗагрузкаНеВыполнялась(),
		НСтр("ru = 'Загрузка (не выполнялась)'")));
	
	СтруктураЗначенийОтбора.Вставить("ФильтрСтатусЗагрузкаНеТребуется"    , Новый Структура("Статус, Заголовок",
		Статус_ЗагрузкаНеТребуется(),
		НСтр("ru = 'Загрузка (не требуется)'")));
	
	СтруктураЗначенийОтбора.Вставить("ФильтрСтатусЗагрузкаНеРекомендуется", Новый Структура("Статус, Заголовок",
		Статус_ЗагрузкаНеРекомендуется(),
		НСтр("ru = 'Загрузка (не рекомендуется)'")));
	
	СтруктураЗначенийОтбора.Вставить("ФильтрСтатусЗагрузкаНедоступна"     , Новый Структура("Статус, Заголовок",
		Статус_ЗагрузкаНедоступна(),
		НСтр("ru = 'Загрузка (недоступна)'")));
	
	Возврат СтруктураЗначенийОтбора;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьИнформациюПользователю(Вариант, Уточнение = "")
	
	Если Вариант = "ВыборЭлементов" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборЭлементов;
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	ИначеЕсли Вариант = "АдресДанныхКлассификатораНаСервереНеПолучен" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		Текст = НСтр("ru = 'Не удалось получить файл классификатора по причине:'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст + Символы.ПС + Уточнение);
		
	ИначеЕсли Вариант = "ОжиданиеПолученияДанных" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииПолучениеДанных;
		
	ИначеЕсли Вариант = "ОжиданиеЗагрузкиДанных" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииЗагрузкиДанных;
		Элементы.ОсновнаяПанель.Доступность = Ложь;
		
	ИначеЕсли Вариант = "ДинамическаяОшибка" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборЭлементов;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Уточнение);
		Элементы.ОсновнаяПанель.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИзмененияВИнтерфейсе()
	
	Элементы.Организация.Видимость = (СпособЗагрузки = ИсточникиДанных.Сайт);
	Элементы.ПутьКФайлу.Видимость = (СпособЗагрузки = ИсточникиДанных.Файл);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсточникиДанных()
	
	ИсточникиДанныхИзменяемая = Новый Структура;
	Для Каждого Элемент Из Элементы.СпособЗагрузки.СписокВыбора Цикл
		ИсточникиДанныхИзменяемая.Вставить(Элемент.Значение, Элемент.Значение);
	КонецЦикла;
	
	ИсточникиДанных = Новый ФиксированнаяСтруктура(ИсточникиДанныхИзменяемая);
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции