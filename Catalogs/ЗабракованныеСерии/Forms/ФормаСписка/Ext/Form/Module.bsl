
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ФормаЗагрузитьЗабракованныеСерииМДЛП.Видимость = ПравоДоступа("Изменение", Метаданные.Справочники.ЗабракованныеСерии);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Обработан",
		Ложь,
		,
		,
		ОтборНеОбработан);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДатаПоследнегоПриказа",
		ОтборДатаПриказа,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		ЗначениеЗаполнено(ОтборДатаПриказа));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Приказы.НомерДокумента",
		ОтборНомерПриказа,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		ЗначениеЗаполнено(ОтборНомерПриказа));
	
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьЗабракованныеСерииМДЛП(Команда)
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ЗабракованныеСерии.Форма.ЗагрузкаМДЛП", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗабракованныеСерииЕСКЛП(Команда)
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ЗабракованныеСерии.Форма.ЗагрузкаЗабракованныхСерийЕСКЛП", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенныеНепрочтенные(Команда)
	
	ВыделенныеЗабраковки = ВзаимодействиеСПользователемКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеЗабраковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработанные = Новый Массив;
	Необработанные = Новый Массив;
	
	Для каждого Забраковка Из ВыделенныеЗабраковки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Забраковка);
		Если ДанныеСтроки <> Неопределено Тогда
			
			Если ДанныеСтроки.Обработан Тогда
				Обработанные.Добавить(Забраковка);
			Иначе
				Необработанные.Добавить(Забраковка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Необработанные.Количество() > 0 Тогда
		
		Если Необработанные.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Объекты помечаются как обработанные. Пожалуйста подождите...'");
			Состояние(ТекстСостояния);
		КонецЕсли;
		
		ПометитьКакОбработанныеСервер(Необработанные, Истина);
		
	Иначе
		
		Если Обработанные.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Снимается пометка обработки. Пожалуйста подождите...'");
		КонецЕсли;
		
		ПометитьКакОбработанныеСервер(Обработанные, Ложь);
		
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	Если Необработанные.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объекты помечены как обработанные (%1)'"),
			Необработанные.Количество()));
		
	ИначеЕсли Обработанные.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сняты пометки обработки объектов (%1)'"),
			Обработанные.Количество()));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗабракованныхСерий(Команда)
	
	ВыделенныеСтроки = ВзаимодействиеСПользователемКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	ПараметрыФормы = Новый Структура;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ОтборЗабракованныхСерий", ВыделенныеСтроки);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПоискЗабракованныхСерий.Форма.ФормаПоискаОтЗабраковки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗабракованныеСерии(Команда)
	
	ВыделенныеСтроки = ВзаимодействиеСПользователемКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", ВыделенныеСтроки));
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Укажите элемент, который будет объединяющим для выбранной группы'"));
	
	Оповещение = Новый ОписаниеОповещения("ОбъединитьЗабракованныеСерииЗавершение", ЭтотОбъект, ВыделенныеСтроки);
	ОткрытьФорму("Справочник.ЗабракованныеСерии.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры ОбъединитьЗабракованныеСерии
//
&НаКлиенте
Процедура ОбъединитьЗабракованныеСерииЗавершение(РезультатВыбора, ВыделенныеСтроки) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		Если ОбъединитьЗабракованныеСерииНаСервере(РезультатВыбора, ВыделенныеСтроки) Тогда
			
			ТекстСообщения = НСтр("ru='Объединение элементов закончено'");
			ПоказатьОповещениеПользователя(ТекстСообщения,,, БиблиотекаКартинок.Информация32);
			
			ОповеститьОбИзменении(Тип("СправочникСсылка.ЗабракованныеСерии"));
		Иначе
			ТекстСообщения = НСтр("ru='Не удалось объединить элементы'");
			ПоказатьОповещениеПользователя(ТекстСообщения,,, БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийПодборСерий(Команда)
	
	ТекстВопроса = НСтр("ru='Произвести автоматическую забраковку серий, 
	|совпадающих по серийному номеру и элементу классификатора аптечных товаров,
	|и пока еще не включенных в забраковку?'");

	Оповещение = Новый ОписаниеОповещения("АвтоматическийПодборСерийЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборНеобработанПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Обработан",
		Ложь,
		,
		,
		ОтборНеОбработан);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПриказаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ДатаПоследнегоПриказа",
		ОтборДатаПриказа,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		ЗначениеЗаполнено(ОтборДатаПриказа));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерПриказаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Приказы.НомерДокумента",
		ОтборНомерПриказа,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		ЗначениеЗаполнено(ОтборНомерПриказа));
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	Элемент = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделять непрочтенные приказы жирным шрифтом'");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Обработан");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Список.Шрифт,,, Истина));
	
	Элемент = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделять отмененные забраковки'");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.СтатусыЗабраковкиСерий.Отменена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометитьКакОбработанныеСервер(Знач Объекты, Знач Обработан = Истина)
	
	Возврат РаботаСИнформациейОбОбъектах.УстановитьСвойствоОбработан(Объекты, Обработан);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъединитьЗабракованныеСерииНаСервере(Знач СсылкаПриемник, Знач МассивВыбранныхСсылок)
	
	Результат = Справочники.ЗабракованныеСерии.ОбъединитьЗабракованныеСерии(СсылкаПриемник, МассивВыбранныхСсылок, Истина);
	
	Возврат Результат;
	
КонецФункции

// Продолжение процедуры АвтоматическийПодборСерий
//
&НаКлиенте
Процедура АвтоматическийПодборСерийЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КоличествоЗабракованныхСерий = АвтоматическийПодборСерийНаСервере();
		ТекстСообщения = НСтр("ru='Забраковка серий завершена.'");
		РезультатВыполнения = НСтр("ru='Забраковано серий:'") + " " + КоличествоЗабракованныхСерий;
		ПоказатьОповещениеПользователя(ТекстСообщения,, РезультатВыполнения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АвтоматическийПодборСерийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗабраковкаСерий.Ссылка,
	|	ЗабраковкаСерий.НомерРЛС,
	|	ЗабраковкаСерий.КодЕСКЛП,
	|	ЗабраковкаСерий.ВсеСерии,
	|	ЗабраковкаСерий.Наименование,
	|	ЗабраковкаСерий.Препарат КАК Препарат,
	|	ЗабраковкаСерий.Номенклатура
	|ПОМЕСТИТЬ ЗабраковкаСерий
	|ИЗ
	|	Справочник.ЗабракованныеСерии КАК ЗабраковкаСерий
	|ГДЕ
	|	(ЗабраковкаСерий.НомерРЛС > 0 ИЛИ ЗабраковкаСерий.КодЕСКЛП <> """")
	|	И НЕ ЗабраковкаСерий.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗабраковкаСерий.Ссылка КАК ЗабраковкаСерии,
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗабраковкаСерий КАК ЗабраковкаСерий 
	|		ПО
	|			ВЫБОР
	|				КОГДА ЗабраковкаСерий.НомерРЛС > 0 И ЗабраковкаСерий.КодЕСКЛП = """"
	|					ТОГДА ЗабраковкаСерий.НомерРЛС = СерииНоменклатуры.Владелец.ЭлементКАТ.НомерРЛС
	|				КОГДА ЗабраковкаСерий.КодЕСКЛП <> """"
	|					ТОГДА ЗабраковкаСерий.КодЕСКЛП = СерииНоменклатуры.Владелец.ЭлементКАТ.КодЕСКЛП
	|				КОГДА ЗабраковкаСерий.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА ЗабраковкаСерий.Номенклатура = СерииНоменклатуры.Владелец
	|				КОГДА ЗабраковкаСерий.Препарат <> """"
	|					ТОГДА ЕСТЬNULL(СерииНоменклатуры.Владелец.ЭлементКАТ.Наименование, СерииНоменклатуры.Владелец.Наименование) = ЗабраковкаСерий.Препарат
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			И (ЗабраковкаСерий.ВсеСерии ИЛИ ЗабраковкаСерий.Наименование = СерииНоменклатуры.Номер)
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЗабракованныеСерии КАК ЗабракованныеСерии
	|		ПО
	|			ЗабраковкаСерий.Ссылка = ЗабракованныеСерии.ЗабраковкаСерии
	|			И СерииНоменклатуры.Ссылка = ЗабракованныеСерии.Серия
	|ГДЕ
	|	ЗабракованныеСерии.Серия ЕСТЬ NULL
	|";
	
	КоличествоЗабракованныхСерий = 0;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ЗабракованныеСерии.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ЗабраковкаСерии = Выборка.ЗабраковкаСерии;
			МенеджерЗаписи.Серия = Выборка.Серия;
			МенеджерЗаписи.Записать();
			КоличествоЗабракованныхСерий = КоличествоЗабракованныхСерий + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоЗабракованныхСерий;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
