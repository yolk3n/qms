#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция объединяет забракованные серии в одну
//
// Параметры
//	СсылкаПриемник - ссылка ЗабракованныеСерии, результат объединения
//	МассивСсылокИсточник - массив ссылок ЗабракованныеСерии, источник объединения
//	НеОбъединятьЗагружаемыеСИТС - булево, не включать в объединение загружаемые с итс (номер > 0)
//
// Возвращает
//	Булево
Функция ОбъединитьЗабракованныеСерии(Знач СсылкаПриемник, Знач МассивСсылокИсточник, Знач НеОбъединятьЗагружаемыеСИТС = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаПриемник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗабракованныеСерии.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗабракованныеСерии КАК ЗабракованныеСерии
	|ГДЕ
	|	ЗабракованныеСерии.Ссылка В(&МассивСсылокИсточник)
	|	И НЕ ЗабракованныеСерии.Ссылка = &СсылкаПриемник
	|	И ВЫБОР
	|			КОГДА (ЗабракованныеСерии.НомерРЛС > 0 ИЛИ ЗабракованныеСерии.КодЕСКЛП <> """")
	|					И &НеОбъединятьЗагружаемыеСИТС
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|";
	
	Запрос.УстановитьПараметр("СсылкаПриемник", СсылкаПриемник);
	Запрос.УстановитьПараметр("МассивСсылокИсточник", МассивСсылокИсточник);
	Запрос.УстановитьПараметр("НеОбъединятьЗагружаемыеСИТС", НеОбъединятьЗагружаемыеСИТС);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСсылокКУдалению = Новый Массив;
	
	ОбъектПриемник = СсылкаПриемник.ПолучитьОбъект();
	ТаблицаПриказов = ОбъектПриемник.Приказы.Выгрузить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектИсточник = Выборка.Ссылка.ПолучитьОбъект();
			
			// переносим только приказы
			Для Каждого СтрокаПриказа Из ОбъектИсточник.Приказы Цикл
				стрНовая = ТаблицаПриказов.Добавить();
				ЗаполнитьЗначенияСвойств(стрНовая, СтрокаПриказа);
			КонецЦикла;
			
			ОбъектИсточник.УстановитьПометкуУдаления(Истина);
			МассивСсылокКУдалению.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
		Если МассивСсылокКУдалению.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// записываем приказы
		ТаблицаПриказов.Свернуть("ДатаДокумента, НомерДокумента, ОтменаЗабраковки, Лаборатория, Примечание");
		ОбъектПриемник.Приказы.Загрузить(ТаблицаПриказов);
		
		ОбъектПриемник.Записать();
		
		// переключаем забраковки на новый элемент
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗабракованныеСерии.ЗабраковкаСерии КАК ЗабраковкаСерии,
		|	ЗабракованныеСерии.Серия,
		|	ЗабракованныеСерии.ИсключитьИзАвтоматическогоПоиска
		|ИЗ
		|	РегистрСведений.ЗабракованныеСерии КАК ЗабракованныеСерии
		|ГДЕ
		|	ЗабракованныеСерии.ЗабраковкаСерии В(&МассивСсылокИсточник)
		|ИТОГИ ПО
		|	ЗабраковкаСерии
		|";
		
		Запрос.УстановитьПараметр("МассивСсылокИсточник", МассивСсылокКУдалению);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			НаборПриемник = РегистрыСведений.ЗабракованныеСерии.СоздатьНаборЗаписей();
			НаборПриемник.Отбор.ЗабраковкаСерии.Установить(СсылкаПриемник, Истина);
			НаборПриемник.Прочитать();
			
			ТаблицаПриемника = НаборПриемник.Выгрузить();
			ЕстьИзменения = Ложь;
			
			ВыборкаИсточник = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаИсточник.Следующий() Цикл
				Выборка = ВыборкаИсточник.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ТаблицаПриемника.Найти(Выборка.Серия, "Серия") = Неопределено Тогда
						стрНовая = ТаблицаПриемника.Добавить();
						стрНовая.ЗабраковкаСерии = СсылкаПриемник;
						стрНовая.Серия = Выборка.Серия;
						стрНовая.ИсключитьИзАвтоматическогоПоиска = Выборка.ИсключитьИзАвтоматическогоПоиска;
						ЕстьИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				НаборИсточник = РегистрыСведений.ЗабракованныеСерии.СоздатьНаборЗаписей();
				НаборИсточник.Отбор.ЗабраковкаСерии.Установить(ВыборкаИсточник.ЗабраковкаСерии, Истина);
				НаборИсточник.Записать();
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				НаборПриемник.Загрузить(ТаблицаПриемника);
				НаборПриемник.УстановитьАктивность(Истина);
				НаборПриемник.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обновляет информацию о забраковке серий.
//
// Параметры:
//  Забраковка - СправочникСсылка.ЗабракованныеСерии - забраковка, данные которой обновляются.
//
Процедура ОбновитьИнформациюОЗабраковкеСерий(Забраковка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Забраковка", Забраковка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Серия
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	РегистрСведений.ЗабракованныеСерии КАК ЗабракованныеСерии
	|ГДЕ
	|	ЗабракованныеСерии.ЗабраковкаСерии = &Забраковка
	|	И НЕ ЗабракованныеСерии.ИсключитьИзАвтоматическогоПоиска
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серия,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ЗабракованныеСерии КАК ЗабракованныеСерии
	|				ГДЕ
	|					ЗабракованныеСерии.Серия = Серии.Серия
	|					И (НЕ ЗабракованныеСерии.ИсключитьИзАвтоматическогоПоиска)
	|					И ЗабракованныеСерии.ЗабраковкаСерии.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗабраковкиСерий.Действует)
	|					И (НЕ ЗабракованныеСерии.ЗабраковкаСерии.ПометкаУдаления))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Забракована
	|ИЗ
	|	Серии КАК Серии
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РаботаСИнформациейОбОбъектах.УстановитьСвойствоЗабракован(Выборка.Серия, Выборка.Забракована);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗабраковатьСерию(Знач Серия, Знач ЗабраковкаСерии) Экспорт
	
	Запись = РегистрыСведений.ЗабракованныеСерии.СоздатьМенеджерЗаписи();
	Запись.Серия = Серия;
	Запись.ЗабраковкаСерии = ЗабраковкаСерии;
	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура ОтменитьЗабраковкуСерии(Знач Серия) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЗабракованныеСерии.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Серия.Установить(Серия);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#Область ДанныеМДЛП

Процедура СопоставитьДанныеМДЛП(ЗагружаемыеДанные, ИсключитьОтсутствующиеВБазе = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеМДЛП.GTIN                       КАК GTIN,
	|	ДанныеМДЛП.НомерСерии                 КАК НомерСерии,
	|	ДанныеМДЛП.ДатаРешенияОПриостановке   КАК ДатаРешенияОПриостановке,
	|	ДанныеМДЛП.НомерРешенияОПриостановке  КАК НомерРешенияОПриостановке,
	|	ДанныеМДЛП.ТипРешенияОПриостановке    КАК ТипРешенияОПриостановке,
	|	ВЫБОР ДанныеМДЛП.ТипРешенияОПриостановке
	|		КОГДА 1
	|			ТОГДА ИСТИНА
	|		КОГДА 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                 КАК ОтменаЗабраковки
	|ПОМЕСТИТЬ ДанныеМДЛП
	|ИЗ
	|	&ДанныеМДЛП КАК ДанныеМДЛП
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ИсключитьОтсутствующиеВБазе = ИСТИНА
	|			ТОГДА ДанныеМДЛП.GTIN <> &ПустойGTIN И ДанныеМДЛП.НомерСерии <> """"
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМДЛП.GTIN                                    КАК GTIN,
	|	ДанныеМДЛП.НомерСерии                              КАК НомерСерии,
	|	ДанныеМДЛП.ДатаРешенияОПриостановке                КАК ДатаРешенияОПриостановке,
	|	ДанныеМДЛП.НомерРешенияОПриостановке               КАК НомерРешенияОПриостановке,
	|	ДанныеМДЛП.ТипРешенияОПриостановке                 КАК ТипРешенияОПриостановке,
	|	ДанныеМДЛП.ОтменаЗабраковки                        КАК ОтменаЗабраковки,
	|	ШтрихкодыНоменклатуры.Номенклатура                 КАК Номенклатура,
	|	СерииНоменклатуры.Ссылка                           КАК Серия,
	|	СерииНоменклатуры.СерияПромаркированаДляЦелейМДЛП  КАК СерияПромаркированаДляЦелейМДЛП,
	|	ЗабракованныеСерии.Ссылка                          КАК РешениеОПриостановке
	|ПОМЕСТИТЬ СопоставленныеДанныеБезРаспределения
	|ИЗ
	|	ДанныеМДЛП КАК ДанныеМДЛП
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО
	|			ШтрихкодыНоменклатуры.Штрихкод = ДанныеМДЛП.GTIN
	|			И ДанныеМДЛП.GTIN <> &ПустойGTIN
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО
	|			СерииНоменклатуры.Номер = ДанныеМДЛП.НомерСерии
	|			И СерииНоменклатуры.Владелец = ШтрихкодыНоменклатуры.Номенклатура
	|			И ДанныеМДЛП.НомерСерии <> """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ЗабракованныеСерии КАК ЗабракованныеСерии
	|		ПО
	|			ЗабракованныеСерии.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ЗабракованныеСерии.Наименование = ДанныеМДЛП.НомерСерии
	|			И НЕ ЗабракованныеСерии.ПометкаУдаления
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ИсключитьОтсутствующиеВБазе = ИСТИНА
	|			ТОГДА НЕ ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ NULL И НЕ СерииНоменклатуры.Ссылка ЕСТЬ NULL
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	РешениеОПриостановке,
	|	ДатаРешенияОПриостановке,
	|	НомерРешенияОПриостановке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СопоставленныеДанные.GTIN                                         КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                                   КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке                     КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке                    КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке                      КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                             КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                                 КАК Номенклатура,
	|	СопоставленныеДанные.Серия                                        КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП              КАК СерияПромаркированаДляЦелейМДЛП,
	|	ЕСТЬNULL(ЗабракованныеСерииПриказы.Ссылка, &РешениеПустаяСсылка)  КАК РешениеОПриостановке
	|ПОМЕСТИТЬ СопоставленныеДанныеТочноеСоответствие
	|ИЗ
	|	СопоставленныеДанныеБезРаспределения КАК СопоставленныеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ЗабракованныеСерии.Приказы КАК ЗабракованныеСерииПриказы
	|		ПО
	|			ЗабракованныеСерииПриказы.Ссылка             = СопоставленныеДанные.РешениеОПриостановке
	|			И ЗабракованныеСерииПриказы.ДатаДокумента    = СопоставленныеДанные.ДатаРешенияОПриостановке
	|			И ЗабракованныеСерииПриказы.НомерДокумента   = СопоставленныеДанные.НомерРешенияОПриостановке
	|			И ЗабракованныеСерииПриказы.ОтменаЗабраковки = СопоставленныеДанные.ОтменаЗабраковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                                  КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                            КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке              КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке             КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке               КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                      КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                          КАК Номенклатура,
	|	СопоставленныеДанные.Серия                                 КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП       КАК СерияПромаркированаДляЦелейМДЛП,
	|	ЕСТЬNULL(ЗабракованныеСерии.Ссылка, &РешениеПустаяСсылка)  КАК РешениеОПриостановке
	|ПОМЕСТИТЬ СопоставленныеДанныеНужноОбновить
	|ИЗ
	|	СопоставленныеДанныеБезРаспределения КАК СопоставленныеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			СопоставленныеДанныеТочноеСоответствие КАК СопоставленныеДанныеТочноеСоответствие
	|		ПО
	|			СопоставленныеДанныеТочноеСоответствие.РешениеОПриостановке        = СопоставленныеДанные.РешениеОПриостановке
	|			И СопоставленныеДанныеТочноеСоответствие.ДатаРешенияОПриостановке  = СопоставленныеДанные.ДатаРешенияОПриостановке
	|			И СопоставленныеДанныеТочноеСоответствие.НомерРешенияОПриостановке = СопоставленныеДанные.НомерРешенияОПриостановке
	|			И СопоставленныеДанныеТочноеСоответствие.ОтменаЗабраковки          = СопоставленныеДанные.ОтменаЗабраковки
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ЗабракованныеСерии КАК ЗабракованныеСерии
	|		ПО
	|			ЗабракованныеСерии.Ссылка = СопоставленныеДанные.РешениеОПриостановке
	|			И ЗабракованныеСерии.ДатаПоследнегоПриказа <= СопоставленныеДанные.ДатаРешенияОПриостановке
	|ГДЕ
	|	СопоставленныеДанныеТочноеСоответствие.РешениеОПриостановке ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                                  КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                            КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке              КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке             КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке               КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                      КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                          КАК Номенклатура,
	|	СопоставленныеДанные.Серия                                 КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП       КАК СерияПромаркированаДляЦелейМДЛП,
	|	ЕСТЬNULL(ЗабракованныеСерии.Ссылка, &РешениеПустаяСсылка)  КАК РешениеОПриостановке
	|ПОМЕСТИТЬ СопоставленныеДанныеОбновлятьНеНужно
	|ИЗ
	|	СопоставленныеДанныеБезРаспределения КАК СопоставленныеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			СопоставленныеДанныеТочноеСоответствие КАК СопоставленныеДанныеТочноеСоответствие
	|		ПО
	|			СопоставленныеДанныеТочноеСоответствие.РешениеОПриостановке        = СопоставленныеДанные.РешениеОПриостановке
	|			И СопоставленныеДанныеТочноеСоответствие.ДатаРешенияОПриостановке  = СопоставленныеДанные.ДатаРешенияОПриостановке
	|			И СопоставленныеДанныеТочноеСоответствие.НомерРешенияОПриостановке = СопоставленныеДанные.НомерРешенияОПриостановке
	|			И СопоставленныеДанныеТочноеСоответствие.ОтменаЗабраковки          = СопоставленныеДанные.ОтменаЗабраковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			СопоставленныеДанныеНужноОбновить КАК СопоставленныеДанныеНужноОбновить
	|		ПО
	|			СопоставленныеДанныеНужноОбновить.РешениеОПриостановке       = СопоставленныеДанные.РешениеОПриостановке
	|			И СопоставленныеДанныеНужноОбновить.ДатаРешенияОПриостановке = СопоставленныеДанные.ДатаРешенияОПриостановке
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ЗабракованныеСерии КАК ЗабракованныеСерии
	|		ПО
	|			ЗабракованныеСерии.Ссылка = СопоставленныеДанные.РешениеОПриостановке
	|			И ЗабракованныеСерии.ДатаПоследнегоПриказа > СопоставленныеДанные.ДатаРешенияОПриостановке
	|ГДЕ
	|	СопоставленныеДанныеТочноеСоответствие.РешениеОПриостановке ЕСТЬ NULL
	|	И СопоставленныеДанныеНужноОбновить.РешениеОПриостановке ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                             КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                       КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке         КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке        КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке          КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                 КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                     КАК Номенклатура,
	|	СопоставленныеДанные.Серия                            КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП  КАК СерияПромаркированаДляЦелейМДЛП,
	|	&РешениеПустаяСсылка                                  КАК РешениеОПриостановке,
	|	ИСТИНА                                                КАК РешениеНужноОбновить
	|ПОМЕСТИТЬ СопоставленныеДанные
	|ИЗ
	|	СопоставленныеДанныеБезРаспределения КАК СопоставленныеДанные
	|ГДЕ
	|	СопоставленныеДанные.РешениеОПриостановке ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                             КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                       КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке         КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке        КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке          КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                 КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                     КАК Номенклатура,
	|	СопоставленныеДанные.Серия                            КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП  КАК СерияПромаркированаДляЦелейМДЛП,
	|	СопоставленныеДанные.РешениеОПриостановке             КАК РешениеОПриостановке,
	|	ЛОЖЬ                                                  КАК РешениеНужноОбновить
	|ИЗ
	|	СопоставленныеДанныеТочноеСоответствие КАК СопоставленныеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                             КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                       КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке         КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке        КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке          КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                 КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                     КАК Номенклатура,
	|	СопоставленныеДанные.Серия                            КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП  КАК СерияПромаркированаДляЦелейМДЛП,
	|	СопоставленныеДанные.РешениеОПриостановке             КАК РешениеОПриостановке,
	|	ИСТИНА                                                КАК РешениеНужноОбновить
	|ИЗ
	|	СопоставленныеДанныеНужноОбновить КАК СопоставленныеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                             КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                       КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке         КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке        КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке          КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                 КАК ОтменаЗабраковки,
	|	СопоставленныеДанные.Номенклатура                     КАК Номенклатура,
	|	СопоставленныеДанные.Серия                            КАК Серия,
	|	СопоставленныеДанные.СерияПромаркированаДляЦелейМДЛП  КАК СерияПромаркированаДляЦелейМДЛП,
	|	СопоставленныеДанные.РешениеОПриостановке             КАК РешениеОПриостановке,
	|	ЛОЖЬ                                                  КАК РешениеНужноОбновить
	|ИЗ
	|	СопоставленныеДанныеОбновлятьНеНужно КАК СопоставленныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                                        КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                                  КАК НомерСерии,
	|	СопоставленныеДанные.ОтменаЗабраковки                            КАК ОтменаЗабраковки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СопоставленныеДанные.Номенклатура)          КАК КоличествоПодходящейНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СопоставленныеДанные.Серия)                 КАК КоличествоПодходящихСерий,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СопоставленныеДанные.РешениеОПриостановке)  КАК КоличествоРешенийОПриостановке
	|ПОМЕСТИТЬ РасчетСопоставленныхДанных
	|ИЗ
	|	СопоставленныеДанные КАК СопоставленныеДанные
	|СГРУППИРОВАТЬ ПО
	|	СопоставленныеДанные.GTIN,
	|	СопоставленныеДанные.НомерСерии,
	|	СопоставленныеДанные.ОтменаЗабраковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанные.GTIN                                                 КАК GTIN,
	|	СопоставленныеДанные.НомерСерии                                           КАК НомерСерии,
	|	СопоставленныеДанные.ДатаРешенияОПриостановке                             КАК ДатаРешенияОПриостановке,
	|	СопоставленныеДанные.НомерРешенияОПриостановке                            КАК НомерРешенияОПриостановке,
	|	СопоставленныеДанные.ТипРешенияОПриостановке                              КАК ТипРешенияОПриостановке,
	|	СопоставленныеДанные.ОтменаЗабраковки                                     КАК ОтменаЗабраковки,
	|	ЕСТЬNULL(СопоставленныеДанные.Номенклатура, &НоменклатураПустаяСсылка)    КАК Номенклатура,
	|	ЕСТЬNULL(СопоставленныеДанные.Серия, &СерияПустаяСсылка)                  КАК Серия,
	|	СопоставленныеДанные.РешениеОПриостановке                                 КАК РешениеОПриостановке,
	|	СопоставленныеДанные.РешениеНужноОбновить                                 КАК РешениеНужноОбновить,
	|	ЕСТЬNULL(РасчетСопоставленныхДанных.КоличествоПодходящейНоменклатуры, 0)  КАК КоличествоПодходящейНоменклатуры,
	|	ЕСТЬNULL(РасчетСопоставленныхДанных.КоличествоПодходящихСерий, 0)         КАК КоличествоПодходящихСерий,
	|	ЕСТЬNULL(РасчетСопоставленныхДанных.КоличествоРешенийОПриостановке, 0)    КАК КоличествоРешенийОПриостановке
	|ИЗ
	|	СопоставленныеДанные КАК СопоставленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РасчетСопоставленныхДанных КАК РасчетСопоставленныхДанных
	|		ПО
	|			РасчетСопоставленныхДанных.GTIN = СопоставленныеДанные.GTIN
	|			И РасчетСопоставленныхДанных.НомерСерии = СопоставленныеДанные.НомерСерии
	|			И РасчетСопоставленныхДанных.ОтменаЗабраковки = СопоставленныеДанные.ОтменаЗабраковки
	|УПОРЯДОЧИТЬ ПО
	|	GTIN,
	|	НомерСерии,
	|	ДатаРешенияОПриостановке ВОЗР
	|");
	
	Запрос.УстановитьПараметр("ДанныеМДЛП"                  , ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ПустойGTIN"                  , Метаданные.ОпределяемыеТипы.GTIN.Тип.ПривестиЗначение(Неопределено));
	Запрос.УстановитьПараметр("СерияПустаяСсылка"           , Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка"    , Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("РешениеПустаяСсылка"         , Справочники.ЗабракованныеСерии.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИсключитьОтсутствующиеВБазе" , ИсключитьОтсутствующиеВБазе);
	
	ЗагружаемыеДанные = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ЗагрузитьДанныеМДЛП(ОбрабатываемыеДанные) Экспорт
	
	Результат = Новый Структура("Обработано, Ошибки", 0, Новый Массив);
	
	Для Каждого ТекущиеДанные Из ОбрабатываемыеДанные Цикл
		
		Попытка
			
			Если ТекущиеДанные.ТипРешенияОПриостановке <> 0
			   И ТекущиеДанные.ТипРешенияОПриостановке <> 1 Тогда
				ВызватьИсключение НСтр("ru = 'Некорректный тип решения о приостановке.'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.РешениеОПриостановке) Тогда
				РешениеОПриостановке = ТекущиеДанные.РешениеОПриостановке.ПолучитьОбъект();
				ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(РешениеОПриостановке);
			Иначе
				РешениеОПриостановке = СоздатьЭлемент();
				РешениеОПриостановке.Статус        = Перечисления.СтатусыЗабраковкиСерий.Действует;
				РешениеОПриостановке.Наименование  = ТекущиеДанные.НомерСерии;
				РешениеОПриостановке.Номенклатура  = ТекущиеДанные.Номенклатура;
				РешениеОПриостановке.Препарат      = ТекущиеДанные.Номенклатура;
			КонецЕсли;
			
			ДанныеСтрокиПриказа = Новый Структура;
			ДанныеСтрокиПриказа.Вставить("ДатаДокумента"   , ТекущиеДанные.ДатаРешенияОПриостановке);
			ДанныеСтрокиПриказа.Вставить("НомерДокумента"  , ТекущиеДанные.НомерРешенияОПриостановке);
			ДанныеСтрокиПриказа.Вставить("ОтменаЗабраковки", ТекущиеДанные.ТипРешенияОПриостановке = 1);
			
			Если РешениеОПриостановке.Приказы.НайтиСтроки(ДанныеСтрокиПриказа).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(РешениеОПриостановке.Приказы.Добавить(), ДанныеСтрокиПриказа);
			КонецЕсли;
			
			Если РешениеОПриостановке.Модифицированность() Тогда
				РешениеОПриостановке.Записать();
				РешениеОПриостановке.Разблокировать();
			КонецЕсли;
			
			ТекущиеДанные.РешениеОПриостановке = РешениеОПриостановке.Ссылка;
			
			Если ТекущиеДанные.ТипРешенияОПриостановке = 0 Тогда
				ЗабраковатьСерию(ТекущиеДанные.Серия, ТекущиеДанные.РешениеОПриостановке);
			ИначеЕсли ТекущиеДанные.ТипРешенияОПриостановке = 1 Тогда
				ОтменитьЗабраковкуСерии(ТекущиеДанные.Серия);
			КонецЕсли;
			
			Результат.Обработано = Результат.Обработано + 1;
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Загрузка данных о забраковке серии'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			Текст = НСтр("ru = 'Не удалось обработать решение о приостановке серии:'");
			
			ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ПустаяСсылка().Метаданные(),, ТекстЖурналаРегистрации);
			Результат.Ошибки.Добавить(ТестСообщенияПользователю);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ДанныеМДЛП

#Область ДанныеЕСКЛП

Процедура ПолучитьФайлСЗабраковкойЕСКЛПССайтаИТС(Параметры, АдресРезультата, АдресХраненияФайла) Экспорт
	
	Аутентификация = Параметры.Аутентификация;

	ЗапрашиваемыйФайл = "esklp_rejects";
	ПутьКДанным = ПолучитьИмяВременногоФайла();
	Результат = ИТСМедицинаКлиентСервер.ЗагрузитьФайлСВебСервера(Аутентификация, ЗапрашиваемыйФайл, ПутьКДанным);
	
	РезультатВыполнения = Новый Структура("Статус, КодСостояния, СообщениеОбОшибке, ОписаниеФайла");
	Если Не Результат.Статус Тогда
		РезультатВыполнения.Статус = "Ошибка";
		ЗаполнитьЗначенияСвойств(РезультатВыполнения, Результат, "КодСостояния, СообщениеОбОшибке");
	Иначе
		РезультатВыполнения.Статус = "Выполнено";
		ОписаниеФайла = Новый Структура("Имя, Хранение");
		ОписаниеФайла.Имя = ЗапрашиваемыйФайл + ".xml";
		Данные = Новый ДвоичныеДанные(ПутьКДанным);
		ОписаниеФайла.Хранение = ПоместитьВоВременноеХранилище(Данные, АдресХраненияФайла);
		РезультатВыполнения.ОписаниеФайла = ОписаниеФайла;
	КонецЕсли;
	
	УдалитьФайлы(ПутьКДанным);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
	
КонецПроцедуры

// Процедура сохраняет данные загруженного файла забракованных серий в базу
// и помещает результат во временное хранилище
//	Результат : структура
//		Ключ - "СохранениеДанныхВБазу"
//		Значение - структура
//			ТекстОшибки - строка,
//			ВсегоСтрок, ОшибокЗаписи, ДобавленоСерий, ДобавленоПриказов, ИзмененоПриказов - число
//			МассивИзмененныхСерий - ссылки на измененные и добавленные забракованные серии
//
// Параметры
//	АдресХранилища - адрес для будущего хранилища
Процедура ЗагрузитьЗабраковкиСерииЕСКЛПВБазу(Параметры, АдресРезультатаЗагрузки) Экспорт
	
	ДвоичныеДанные = Параметры.ДанныеФайла;
	
	Если ДвоичныеДанные.Размер() < 20 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Файл %1 не содержит данных'"), "%1", Параметры.ИмяФайла);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Попытка
		ДанныеЗабраковки = РазобратьФайлЗабраковкиЕСКЛП(ИмяФайла);
	Исключение
		УдалитьФайлы(ИмяФайла);
		ВызватьИсключение;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайла);
	
	Если ДанныеЗабраковки.ТипСообщения <> "ЗабракованныеСерии" Тогда
		ВызватьИсключение НСтр("ru='Некорректный тип файла забраковки.'");
	КонецЕсли;
	
	Результат = СохранитьЗабраковкиСерииЕСКЛПВБазу(ДанныеЗабраковки.ЗабраковкиСерий, ДанныеЗабраковки.ДатаОбновления);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультатаЗагрузки);
	
КонецПроцедуры

#КонецОбласти // ДанныеЕСКЛП

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция СохранитьЗабраковкиСерииЕСКЛПВБазу(ТаблицаЗабраковок, ДатаОбновления)
	
	Таблица = Новый ТаблицаЗначений;
	
	МетаданныеСправочника = Метаданные.Справочники.ЗабракованныеСерии;
	Таблица.Колонки.Добавить("НомерСерии",	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(МетаданныеСправочника.ДлинаНаименования)));
	Таблица.Колонки.Добавить("КодЕСКЛП", МетаданныеСправочника.Реквизиты.КодЕСКЛП.Тип);
	Таблица.Колонки.Добавить("Препарат", МетаданныеСправочника.Реквизиты.Препарат.Тип);
	Таблица.Колонки.Добавить("Производитель", МетаданныеСправочника.Реквизиты.Производитель.Тип);
	Таблица.Колонки.Добавить("ВсеСерии", МетаданныеСправочника.Реквизиты.ВсеСерии.Тип);
	
	МетаданныеТабличнойЧасти = МетаданныеСправочника.ТабличныеЧасти.Приказы;
	Таблица.Колонки.Добавить("Примечание", МетаданныеТабличнойЧасти.Реквизиты.Примечание.Тип);
	Таблица.Колонки.Добавить("Отмена", МетаданныеТабличнойЧасти.Реквизиты.ОтменаЗабраковки.Тип);
	Таблица.Колонки.Добавить("НомерЗапрещающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.НомерДокумента.Тип);
	Таблица.Колонки.Добавить("НомерРазрешающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.НомерДокумента.Тип);
	Таблица.Колонки.Добавить("ДатаЗапрещающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.ДатаДокумента.Тип);
	Таблица.Колонки.Добавить("ДатаРазрешающегоДокумента", МетаданныеТабличнойЧасти.Реквизиты.ДатаДокумента.Тип);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТаблицаЗабраковок, Таблица); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗабраковок", Таблица);
	Запрос.УстановитьПараметр("ДатаОбновления", ДатаОбновления);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗабраковок.КодЕСКЛП      КАК КодЕСКЛП,
	|	ТаблицаЗабраковок.НомерСерии    КАК НомерСерии,
	|	ТаблицаЗабраковок.ВсеСерии      КАК ВсеСерии,
	|	ТаблицаЗабраковок.Препарат      КАК Препарат,
	|	ТаблицаЗабраковок.Производитель КАК Производитель,
	|	ВЫБОР
	|		КОГДА ТаблицаЗабраковок.Отмена
	|			ТОГДА ТаблицаЗабраковок.НомерРазрешающегоДокумента
	|		ИНАЧЕ ТаблицаЗабраковок.НомерЗапрещающегоДокумента
	|	КОНЕЦ                           КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаЗабраковок.Отмена
	|			ТОГДА ТаблицаЗабраковок.ДатаРазрешающегоДокумента
	|		ИНАЧЕ ТаблицаЗабраковок.ДатаЗапрещающегоДокумента
	|	КОНЕЦ                           КАК ДатаДокумента,
	|	ТаблицаЗабраковок.Примечание    КАК Примечание,
	|	ТаблицаЗабраковок.Отмена        КАК ОтменаЗабраковки
	|ПОМЕСТИТЬ ТаблицаЗабраковок
	|ИЗ
	|	&ТаблицаЗабраковок КАК ТаблицаЗабраковок
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗабраковок.КодЕСКЛП            КАК КодЕСКЛП,
	|	ТаблицаЗабраковок.НомерСерии          КАК НомерСерии,
	|	ТаблицаЗабраковок.ВсеСерии            КАК ВсеСерии,
	|	ТаблицаЗабраковок.Препарат            КАК Препарат,
	|	ТаблицаЗабраковок.Производитель       КАК Производитель,
	|	ТаблицаЗабраковок.НомерДокумента      КАК НомерДокумента,
	|	ТаблицаЗабраковок.ДатаДокумента       КАК ДатаДокумента,
	|	ТаблицаЗабраковок.Примечание          КАК Примечание,
	|	ТаблицаЗабраковок.ОтменаЗабраковки    КАК ОтменаЗабраковки,
	|	СправочникНоменклатура.Ссылка         КАК Номенклатура,
	|	ЗабраковкиСерий.Ссылка                КАК Забраковка,
	|	ВЫБОР
	|		КОГДА ЗабраковкиСерий.КодЕСКЛП = ТаблицаЗабраковок.КодЕСКЛП
	|				И (ЗабраковкиСерий.Номенклатура <> ЕстьNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|				ИЛИ ЕстьNULL(ЗабраковкиСерий.ДатаОбновления, ДАТАВРЕМЯ(1,1,1,0,0,0)) < &ДатаОбновления
	|				ИЛИ ЕстьNULL(ЗабраковкиСерий.ПометкаУдаления, ЛОЖЬ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                 КАК НужноЗаписать
	|ПОМЕСТИТЬ Приказы
	|ИЗ
	|	ТаблицаЗабраковок КАК ТаблицаЗабраковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КЛП КАК КЛП
	|		ПО
	|			КЛП.КодЕСКЛП = ТаблицаЗабраковок.КодЕСКЛП
	|			И НЕ КЛП.КодЕСКЛП = """"
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО
	|			КЛП.Ссылка = СправочникНоменклатура.ЭлементКАТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ЗабракованныеСерии КАК ЗабраковкиСерий
	|		ПО
	|			(ЗабраковкиСерий.КодЕСКЛП = ТаблицаЗабраковок.КодЕСКЛП
	|			ИЛИ ЗабраковкиСерий.Номенклатура = СправочникНоменклатура.Ссылка)
	|			И ЗабраковкиСерий.Наименование = ТаблицаЗабраковок.НомерСерии
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаОбновления           КАК ДатаОбновления,
	|	Приказы.КодЕСКЛП          КАК КодЕСКЛП,
	|	Приказы.НомерСерии        КАК НомерСерии,
	|	Приказы.ВсеСерии          КАК ВсеСерии,
	|	Приказы.Препарат          КАК Препарат,
	|	Приказы.Производитель     КАК Производитель,
	|	Приказы.НомерДокумента    КАК НомерДокумента,
	|	Приказы.ДатаДокумента     КАК ДатаДокумента,
	|	Приказы.Примечание        КАК Примечание,
	|	Приказы.ОтменаЗабраковки  КАК ОтменаЗабраковки,
	|	Приказы.Номенклатура      КАК Номенклатура,
	|	Приказы.Забраковка        КАК Забраковка,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(СуществующиеПриказы.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                     КАК ПриказУжеЗаписан
	|ИЗ
	|	Приказы КАК Приказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗабракованныеСерии.Приказы КАК СуществующиеПриказы
	|		ПО
	|			СуществующиеПриказы.Ссылка = Приказы.Забраковка
	|			И СуществующиеПриказы.НомерДокумента = Приказы.НомерДокумента
	|			И СуществующиеПриказы.ДатаДокумента = Приказы.ДатаДокумента
	|ГДЕ
	|	СуществующиеПриказы.Ссылка ЕСТЬ NULL
	|	ИЛИ Приказы.НужноЗаписать
	|
	|ИТОГИ ПО
	|	КодЕСКЛП,
	|	НомерСерии
	|";
	
	КоличествоПриказов = 0;
	
	ВыборкаКодЕСКЛП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КодЕСКЛП");
	Пока ВыборкаКодЕСКЛП.Следующий() Цикл
		ВыборкаНомерСерии = ВыборкаКодЕСКЛП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСерии");
		Пока ВыборкаНомерСерии.Следующий() Цикл
			
			ЗабраковкаСерий = Неопределено;
			Выборка = ВыборкаНомерСерии.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗабраковкаСерий = Неопределено Тогда
					
					Если ЗначениеЗаполнено(Выборка.Забраковка) Тогда
						ЗабраковкаСерий = Выборка.Забраковка.ПолучитьОбъект();
						Если ЗабраковкаСерий.ПометкаУдаления Тогда
							ЗабраковкаСерий.УстановитьПометкуУдаления(Ложь);
						КонецЕсли;
					Иначе
						ЗабраковкаСерий = Справочники.ЗабракованныеСерии.СоздатьЭлемент();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ЗабраковкаСерий, Выборка);
					ЗабраковкаСерий.Наименование = Выборка.НомерСерии;
					
				КонецЕсли;
					
				Если Выборка.ПриказУжеЗаписан Тогда
					Продолжить;
				КонецЕсли;
					
				ЗаполнитьЗначенияСвойств(ЗабраковкаСерий.Приказы.Добавить(), Выборка);
				КоличествоПриказов = КоличествоПриказов + 1;
				
			КонецЦикла;
			
			ЗабраковкаСерий.Записать();
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат КоличествоПриказов;
	
КонецФункции

#Область ДанныеЕСКЛП

// Функция разбирает файл, полученный с диска ИТС в формате РЛС
//
// Параметры:
//  ИмяФайлаАдресВХранилище - Строка - имя файла на диске или адрес файла во временном хранилище
//
// Возвращаемое значение:
//  Структура - разобранные данные
//
Функция РазобратьФайлЗабраковкиЕСКЛП(ИмяФайла)
	
	ЧтениеСообщения = Новый ЧтениеXML;
	ЧтениеСообщения.ОткрытьФайл(ИмяФайла);
	
	РезультатРазбора = РазобратьСообщениеЗабраковкиЕСКЛП(ЧтениеСообщения);
	
	ЧтениеСообщения.Закрыть();
	
	Возврат РезультатРазбора;
	
КонецФункции

Функция РазобратьСообщениеЗабраковкиЕСКЛП(ЧтениеСообщения)
	
	Если Не ЧтениеСообщения.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru='Пустой XML'"));
	КонецЕсли;
	
	Возврат РазобратьОписаниеЗабракованныхСерий(ЧтениеСообщения);
	
	ВызватьИсключение(НСтр("ru='Ошибка в структуре XML: неизвестный тип сообщения'"));
	
КонецФункции

Функция РазобратьОписаниеЗабракованныхСерий(ЧтениеЗабраковки)
	
	// Структура файла забракованных серий
	// <?xml version="1.0" ?> 
	// <esklprejected updatedate="20120815" computername="rlsnet.ru" username="ITS">
	// <rec>
	//      <code>21.20.10.180-000008-1-00014-2000000521981</code> 
	//      <sernum>1ВВКА68В01</sernum> 
	//      <lnum>04И-143/12</lnum> 
	//      <ldate>2012-03-05</ldate> 
	//      <prep>Дипроспан® сусп. д/ин. 7 мг/мл (2 мг+5 мг/мл) мг/мл, амп., 1 мл, уп. контурн. яч. 5 пач. картон. 1</prep> 
	//      <producer>Schering-Plough Labo N.V. (Бельгия)</producer> 
	//      <note>Поставщики: ИП Приображенская, ОГУП "Магаданфармация", Магаданская обл.</note> 
	//      <back>1</back> 
	//      <backlnum>04-20265/12</backlnum> 
	//      <backdate>2012-12-07</backdate> 
	// </rec>
	// <rec>
	//      <code>21.20.10.180-000008-1-00014-2000000521981</code> 
	//      <sernum>1ВВКА68В01</sernum> 
	//      <lnum>04И-143/12</lnum> 
	//      <ldate>2012-03-05</ldate> 
	//      <prep>Дипроспан® сусп. д/ин. 7 мг/мл (2 мг+5 мг/мл), амп., 1 мл, уп. контурн. яч. 5 пач. картон. 1</prep> 
	//      <producer>Schering-Plough Labo N.V. (Бельгия)</producer> 
	//      <note>Поставщики: ИП Приображенская, ОГУП "Магаданфармация", Магаданская обл.</note> 
	//      <back>1</back> 
	//      <backlnum>04-20265/12</backlnum> 
	//      <backdate>2012-12-07</backdate> 
	// </rec>
	// </esklprejected>
	
	ЗабракованныеСерии = Новый Структура;
	ЗабракованныеСерии.Вставить("ТипСообщения", "ЗабракованныеСерии");
	ЗабракованныеСерии.Вставить("ДатаОбновления", ПривестиКВнутреннемуТипу(ЧтениеЗабраковки.ПолучитьАтрибут("updatedate"), Тип("Дата")));
	
	ОписаниеПолей = ПолучитьОписаниеПолейЗабракованныхСерий();
	СписокЗабраковок = ПодготовитьТаблицуПоОписаниюПолей(ОписаниеПолей);
	
	Пока ЧтениеЗабраковки.Прочитать() Цикл
		
		Если ЧтениеЗабраковки.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ЧтениеЗабраковки.ЛокальноеИмя = "rec" Тогда
				ДанныеЗабраковки = СписокЗабраковок.Добавить();
			Иначе
				
				ИмяПоля = ЧтениеЗабраковки.ЛокальноеИмя;
				ОписаниеПоля = Неопределено;
				Если ОписаниеПолей.Свойство(ИмяПоля, ОписаниеПоля) Тогда
					ИмяПоля = ОписаниеПоля.Имя;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеЗабраковки.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ОписаниеПоля <> Неопределено Тогда
				ДанныеЗабраковки[ИмяПоля] = ПривестиКВнутреннемуТипу(СокрЛП(ЧтениеЗабраковки.Значение), ОписаниеПоля.Тип);
			КонецЕсли;
			
		ИначеЕсли ЧтениеЗабраковки.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ЧтениеЗабраковки.ЛокальноеИмя = "rec" Тогда
				ДанныеЗабраковки.ВсеСерии = (ВРег(ДанныеЗабраковки.НомерСерии) = "ВСЕ СЕРИИ");
			ИначеЕсли ЧтениеЗабраковки.ЛокальноеИмя = "esklprejected" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗабракованныеСерии.Вставить("ЗабраковкиСерий", СписокЗабраковок);
	
	Возврат ЗабракованныеСерии;
	
КонецФункции

Функция ПривестиКВнутреннемуТипу(ТекстЗначения, ТипЗначения)
	
	Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения);
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ТекстЗначения);
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Попытка
			Значение = Булево(ТекстЗначения);
		Исключение
			Значение = ЗначениеЗаполнено(ТекстЗначения);
		КонецПопытки;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) И ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗначения) = "Перечисление" Тогда
		Значение = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОписаниеТипа.ПривестиЗначение()).Получить(Число(ТекстЗначения) - 1);
	Иначе
		Значение = ОписаниеТипа.ПривестиЗначение(ТекстЗначения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьОписаниеПолейЗабракованныхСерий()
	
	ТипЧисло  = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипБулево = Тип("Булево");
	ТипДата   = Тип("Дата");
	
	ПоляЗабраковки = Новый Структура;
	
	// Данные серии и препарата
	ПоляЗабраковки.Вставить("sernum",     ОписаниеРеквизита("НомерСерии",                 ТипСтрока));
	ПоляЗабраковки.Вставить("code",       ОписаниеРеквизита("КодЕСКЛП",                   ТипСтрока));
	ПоляЗабраковки.Вставить("prep",       ОписаниеРеквизита("Препарат",                   ТипСтрока));
	ПоляЗабраковки.Вставить("producer",   ОписаниеРеквизита("Производитель",              ТипСтрока));
	// Документ забраковки
	ПоляЗабраковки.Вставить("lnum",       ОписаниеРеквизита("НомерЗапрещающегоДокумента", ТипСтрока));
	ПоляЗабраковки.Вставить("ldate",      ОписаниеРеквизита("ДатаЗапрещающегоДокумента",  ТипДата));
	ПоляЗабраковки.Вставить("note",       ОписаниеРеквизита("Примечание",                 ТипСтрока));
	// Документ отмены забраковки
	ПоляЗабраковки.Вставить("back",       ОписаниеРеквизита("Отмена",                     ТипБулево));
	ПоляЗабраковки.Вставить("backlnum",   ОписаниеРеквизита("НомерРазрешающегоДокумента", ТипСтрока));
	ПоляЗабраковки.Вставить("backdate",   ОписаниеРеквизита("ДатаРазрешающегоДокумента",  ТипДата));
	
	// Дополнительные поля, отсутствующие в файле
	ПоляЗабраковки.Вставить("allser",     ОписаниеРеквизита("ВсеСерии",                   ТипБулево));
	
	Возврат ПоляЗабраковки;
	
КонецФункции

Функция ОписаниеРеквизита(Имя, Тип)
	Возврат Новый Структура("Имя, Тип", Имя, Тип);
КонецФункции

Функция ПодготовитьТаблицуПоОписаниюПолей(ОписаниеПолей)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		СписокТипов = Новый Массив;
		СписокТипов.Добавить(ОписаниеПоля.Значение.Тип);
		ОписаниеТипов = Новый ОписаниеТипов(СписокТипов);
		ТаблицаЗначений.Колонки.Добавить(ОписаниеПоля.Значение.Имя, ОписаниеТипов);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти // ДанныеЕСКЛП

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли