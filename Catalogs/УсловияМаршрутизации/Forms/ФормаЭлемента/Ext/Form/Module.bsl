
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ДоступныеОбъектыМаршрутизации = ШаблоныБизнесПроцессов.ПоддерживаемыеТипыПредметов();
	Для Каждого ОбъектМаршрутизации Из ДоступныеОбъектыМаршрутизации Цикл
		Элементы.ИдентификаторОбъекта.СписокВыбора.Добавить(
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМаршрутизации.ПолноеИмя()));
	КонецЦикла;
	
	НастроитьФормуПриСоздании();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// проверка на уникальность имени условия
	Если Не УсловиеМаршрутизацииУникально() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Данное Наименование уже указано для другого условия'"),, "Объект.Наименование",, Отказ);
	КонецЕсли;
	
	Если Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		
		Если КомпоновщикУсловий.Настройки.Отбор.Элементы.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указано ни одного условия'"),, "КомпоновщикУсловий.Настройки.Отбор",, Отказ);
		ИначеЕсли ПроверитьНаличиеУсловияВОтборе(КомпоновщикУсловий.Настройки.Отбор, Неопределено) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Заполнены не все значения в комбинации условий'"),, "КомпоновщикУсловий.Настройки.Отбор",, Отказ);
		КонецЕсли;
			
	ИначеЕсли Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
		
		Если Компоновщик.Настройки.Отбор.Элементы.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указано ни одного правила'"),, "Компоновщик.Настройки.Отбор",, Отказ);
		ИначеЕсли ЕстьПустыеСтрокиОтбора(Компоновщик.Настройки.Отбор) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Среди правил есть некорректно заполненные'"),, "Компоновщик.Настройки.Отбор",, Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ВыражениеУсловия) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не задано выражение'"),, "Объект.ВыражениеУсловия",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкаУсловия = Новый ХранилищеЗначения(Компоновщик.ПолучитьНастройки());
	ТекущийОбъект.НастройкаКомбинацииУсловий = Новый ХранилищеЗначения(КомпоновщикУсловий.ПолучитьНастройки());
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьВыражение(Команда)
	
	ПараметрыФормы = Новый Структура("ИдентификаторОбъекта, Выражение", Объект.ИдентификаторОбъекта, Объект.ВыражениеУсловия);
	ОткрытьФорму("Справочник.УсловияМаршрутизации.Форма.ПроверкаВыражения", ПараметрыФормы, Элементы.ВыражениеУсловия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьРеквизитИзДерева(Команда)
	
	Если Элементы.ДеревоРеквизитовОбъекта.ТекущиеДанные <> Неопределено Тогда
		Объект.ВыражениеУсловия = Объект.ВыражениеУсловия + Элементы.ДеревоРеквизитовОбъекта.ТекущиеДанные.ПолныйПуть;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИдентификаторОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = (ВыбранноеЗначение <> Объект.ИдентификаторОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЗначениеЗаполнено(Объект.ИдентификаторОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОбъектаПриИзменении(Элемент)
	
	Элементы.Страницы.Доступность = ЗначениеЗаполнено(Объект.ИдентификаторОбъекта) И ЗначениеЗаполнено(Объект.СпособЗаданияУсловия);
	ОбработатьИзменениеИдентификатораОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИдентификатораОбъекта()
	
	НастроитьКомпоновщикИДеревоРеквизитов();
	НастроитьКомпоновщикКомбинацииУсловий();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаданияУсловияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СпособЗаданияУсловия) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + СтрЗаменить(Строка(Объект.СпособЗаданияУсловия), " ", "")];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовОбъектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Объект.ВыражениеУсловия = Объект.ВыражениеУсловия + Элемент.ТекущиеДанные.ПолныйПуть;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикУсловийНастройкиОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		КомпоновщикУсловий.Настройки.Отбор,
		"Результат_проверки_условия",
		ВидСравненияКомпоновкиДанных.Равно,
		,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикУсловийНастройкиОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		ЭлементОтбора = КомпоновщикУсловий.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
			
			ДобавленноеУсловие = ЭлементОтбора.ПравоеЗначение;
			Если ЗначениеЗаполнено(ДобавленноеУсловие) И ЕстьОшибкиОтбораКомпоновщикаУсловий() Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя добавить условие ""%1"". Произошло зацикливание условий.'"),
					ДобавленноеУсловие);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				ЭлементОтбора.ПравоеЗначение = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФормуПриСоздании()
	
	Элементы.КомпоновщикНастройкиОтборСгруппироватьЭлементыОтбора.Заголовок = НСтр("ru = 'Сгруппировать правила'");
	Элементы.КомпоновщикНастройкиОтборКонтекстноеМенюСгруппироватьЭлементыОтбора.Заголовок = НСтр("ru = 'Сгруппировать правила'");
	Элементы.КомпоновщикНастройкиОтборДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить правило'");
	Элементы.КомпоновщикНастройкиОтборКонтекстноеМенюДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить правило'");
	
	// Скрываем кнопку "Очистить" у колонки "Поле" в компоновщике отбора, который используется в режиме "Конструктор".
	Элементы.КомпоновщикНастройкиОтборЛевоеЗначение.КнопкаОчистки = Ложь;
	
	// Настройка действия при изменении вида сравнения.
	Элементы.КомпоновщикНастройкиОтборВидСравнения.УстановитьДействие("ПриИзменении", "Подключаемый_ВидСравненияПриИзменении");
	
	// Настройка действия при начале изменения правого значения сравнения.
	Элементы.КомпоновщикНастройкиОтборПравоеЗначение.УстановитьДействие("НачалоВыбора", "Подключаемый_ПравоеЗначениеНачалоВыбора");
	
	НастроитьКомпоновщикКомбинацииУсловий();
	Элементы.КомпоновщикУсловийНастройкиОтборДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить условие'");
	Элементы.КомпоновщикУсловийНастройкиОтборКонтекстноеМенюДобавитьЭлементОтбора.Заголовок = НСтр("ru = 'Добавить условие'");
	
	// Скрываем поле сравнения - в него будет ставиться всегда "Равно".
	Элементы.КомпоновщикУсловийНастройкиОтборВидСравнения.Видимость = Ложь;
	// Делаем недоступным для редактирования поле "Левое значение".
	Элементы.КомпоновщикУсловийНастройкиОтборЛевоеЗначение.ТолькоПросмотр = Истина;
	Элементы.КомпоновщикУсловийНастройкиОтбор.Шапка = Ложь;
	
	СвязиВыбора = Новый Массив;
	СвязиВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ИдентификаторОбъекта", "Объект.ИдентификаторОбъекта"));
	
	Элементы.КомпоновщикУсловийНастройкиОтборПравоеЗначение.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + СтрЗаменить(Строка(Объект.СпособЗаданияУсловия), " ", "")];
	
	УсловияМаршрутизации = РеквизитФормыВЗначение("Объект");
	
	НастройкиКомбинацийУсловий = УсловияМаршрутизации.НастройкаКомбинацииУсловий.Получить();
	Если НастройкиКомбинацийУсловий <> Неопределено Тогда
		КомпоновщикУсловий.ЗагрузитьНастройки(НастройкиКомбинацийУсловий);
	КонецЕсли;
	НастроитьКомпоновщикИДеревоРеквизитов(УсловияМаршрутизации.НастройкаУсловия.Получить());
	
	Элементы.Страницы.Доступность = ЗначениеЗаполнено(Объект.ИдентификаторОбъекта) И ЗначениеЗаполнено(Объект.СпособЗаданияУсловия);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомпоновщикКомбинацииУсловий()
	
	СхемаКомпоновкиДанных = Справочники.УсловияМаршрутизации.ПолучитьМакет("Условия");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикУсловий.Инициализировать(ИсточникНастроек);
	КомпоновщикУсловий.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомпоновщикИДеревоРеквизитов(Настройки = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторОбъекта) Тогда
		ОчиститьДеревоРеквизитовОбъекта();
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Справочники.УсловияМаршрутизации.СхемаКомпоновкиДанныхПоПредмету(Объект.ИдентификаторОбъекта);
	
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	ЗаполнитьДеревоРеквизитовОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРеквизитовОбъекта()
	
	Дерево = РеквизитФормыВЗначение("ДеревоРеквизитовОбъекта");
	Дерево.Строки.Очистить();
	
	МетаданныеОбъекта = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект.ИдентификаторОбъекта);
	
	ПолныйПуть = "Предмет";
	НоваяСтрокаПредмет = Дерево.Строки.Добавить();
	НоваяСтрокаПредмет.НаименованиеРеквизита = "Предмет";
	НоваяСтрокаПредмет.ТипРеквизита = МетаданныеОбъекта.Имя;
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Элементы.ДеревоРеквизитовОбъекта.Заголовок = НСтр("ru = 'Реквизиты документа'");
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
		Элементы.ДеревоРеквизитовОбъекта.Заголовок = НСтр("ru = 'Реквизиты справочника'");
	Иначе
		Элементы.ДеревоРеквизитовОбъекта.Заголовок = НСтр("ru = 'Реквизиты объекта'");
	КонецЕсли;
	НоваяСтрокаПредмет.ПолныйПуть = ПолныйПуть;
	
	Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Строка = НоваяСтрокаПредмет.Строки.Добавить();
		Строка.НаименованиеРеквизита = СтандартныйРеквизит.Имя;
		Строка.ТипРеквизита = СтандартныйРеквизит.Тип;
		Строка.ПолныйПуть = ПолныйПуть + "." + СтандартныйРеквизит.Имя;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Строка = НоваяСтрокаПредмет.Строки.Добавить();
		Строка.НаименованиеРеквизита = Реквизит.Имя;
		Строка.ТипРеквизита = Реквизит.Тип;
		Строка.ПолныйПуть = ПолныйПуть + "." + Реквизит.Имя;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		СтрокаТабличнаяЧасть = НоваяСтрокаПредмет.Строки.Добавить();
		СтрокаТабличнаяЧасть.НаименованиеРеквизита = ТабличнаяЧасть.Имя;
		СтрокаТабличнаяЧасть.ТипРеквизита = "ТабличнаяЧасть";
		СтрокаТабличнаяЧасть.ПолныйПуть = ПолныйПуть + "." + ТабличнаяЧасть.Имя;
		Для Каждого СтандартныйРеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			СтрокаРеквизитТЧ = СтрокаТабличнаяЧасть.Строки.Добавить();
			СтрокаРеквизитТЧ.НаименованиеРеквизита = СтандартныйРеквизитТЧ.Имя;
			СтрокаРеквизитТЧ.ТипРеквизита = СтандартныйРеквизитТЧ.Тип;
			СтрокаРеквизитТЧ.ПолныйПуть = ПолныйПуть + "." + ТабличнаяЧасть.Имя + "." + СтандартныйРеквизитТЧ.Имя; 
		КонецЦикла;
		Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
			СтрокаРеквизитТЧ = СтрокаТабличнаяЧасть.Строки.Добавить();
			СтрокаРеквизитТЧ.НаименованиеРеквизита = РеквизитТЧ.Имя;
			СтрокаРеквизитТЧ.ТипРеквизита = РеквизитТЧ.Тип;
			СтрокаРеквизитТЧ.ПолныйПуть = ПолныйПуть + "." + ТабличнаяЧасть.Имя + "." + РеквизитТЧ.Имя;
		КонецЦикла; 
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРеквизитовОбъекта");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоРеквизитовОбъекта()
	
	Дерево = РеквизитФормыВЗначение("ДеревоРеквизитовОбъекта");
	Дерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(Дерево,"ДеревоРеквизитовОбъекта");
	Элементы.ДеревоРеквизитовОбъекта.Заголовок = НСтр("ru = 'Реквизиты объекта'");
	
КонецПроцедуры

&НаСервере
Функция УсловиеМаршрутизацииУникально()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Условия.Ссылка
	|ИЗ
	|	Справочник.УсловияМаршрутизации КАК Условия
	|ГДЕ
	|	Условия.Наименование = &Наименование
	|	И Условия.Ссылка <> &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеУсловияВОтборе(Знач ОбластьПоиска, Знач ИскомоеЗначение)
	
	ЭлементыОтбора = Новый Массив;
	НайтиРекурсивно(ОбластьПоиска.Элементы, ЭлементыОтбора, ИскомоеЗначение);
	Возврат (ЭлементыОтбора.Количество() > 0);
	
КонецФункции

&НаСервере
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначениеПоиска)
	
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ПравоеЗначение = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			ИначеЕсли ЗначениеПоиска = Неопределено И Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			ИначеЕсли ТипЗнч(ЗначениеПоиска) = Тип("СправочникСсылка.УсловияМаршрутизации")
					И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.УсловияМаршрутизации") Тогда
				
				РеквизитыУсловий = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОтбора.ПравоеЗначение, "СпособЗаданияУсловия, НастройкаКомбинацииУсловий");
				Если РеквизитыУсловий.СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
					
					ЭлементыОтбора = Новый Массив;
					НайтиРекурсивно(РеквизитыУсловий.НастройкаКомбинацииУсловий.Получить().Отбор.Элементы, ЭлементыОтбора, ЗначениеПоиска);
					Если ЭлементыОтбора.Количество() Тогда
						МассивЭлементов.Добавить(ЭлементОтбора);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, ЗначениеПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкиОтбораКомпоновщикаУсловий()
	
	Возврат ПроверитьНаличиеУсловияВОтборе(КомпоновщикУсловий.Настройки.Отбор, Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция ЕстьПустыеСтрокиОтбора(ОбластьПоиска)
	
	Возврат ЕстьПустыеСтрокиОтбораПроверитьРекурсивно(ОбластьПоиска.Элементы)
	
КонецФункции

&НаСервере
Функция ЕстьПустыеСтрокиОтбораПроверитьРекурсивно(Элементы)
	
	Для Каждого ЭлементОтбора Из Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Не ЗначениеЗаполнено(Строка(ЭлементОтбора.ЛевоеЗначение)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат ЕстьПустыеСтрокиОтбораПроверитьРекурсивно(ЭлементОтбора.Элементы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиСобытийОтбораСКД

&НаКлиенте
Процедура Подключаемый_ВидСравненияПриИзменении(Элемент)
	
	ЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Пользователи")
	 ИЛИ ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементОтбора.ПравоеЗначение.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
		 ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПравоеЗначениеНачалоВыбораПродолжение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбора", ПараметрыФормы, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
	      Или ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")Тогда
		
		СтандартнаяОбработка = Ложь;
		ИмяДопРеквизита = Строка(ЭлементОтбора.ЛевоеЗначение);
		ИмяДопРеквизита = Сред(ИмяДопРеквизита, Найти(ИмяДопРеквизита, "["));
		ИмяДопРеквизита = Сред(ИмяДопРеквизита, 2, СтрДлина(ИмяДопРеквизита) - 2);
		ВладелецЗначения = ПолучитьВладельцаЗначенияДопРеквизита(ИмяДопРеквизита);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ВладелецЗначения));
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы, Элемент);
		Иначе
			ОткрытьФорму("Справочник.ЗначенияСвойствОбъектовИерархия.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершает обработку выбора правого значения отбора
// Продолжение процедуры Подключаемый_ПравоеЗначениеНачалоВыбора
//
// Параметры:
//  Результат - значение, переданное при вызове метода Закрыть открываемой формы
//  Параметры - значение, которое было указано при создании объекта ОписаниеОповещения
//
&НаКлиенте
Процедура ПравоеЗначениеНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	ВыбранноеПравоеЗначение = Результат;
	
	ПодключитьОбработчикОжидания("УстановитьПравоеЗначениеЭлементаОтбора", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПравоеЗначениеЭлементаОтбора()
	
	ЭлементОтбора = Компоновщик.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастройкиОтбор.ТекущаяСтрока);
	ЭлементОтбора.ПравоеЗначение = ВыбранноеПравоеЗначение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаЗначенияДопРеквизита(ИмяДопРеквизита)
	
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита);
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
