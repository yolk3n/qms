#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция ищет по коду элементы в справочнике Классификатор ОКПД2.
//  Если их нет, то создает элементы справочника.
//
// Параметры:
//  Код - Строка(10) - Строка с кодом ОКПД2,
//  РежимОбновления - Булево, Истина - признак записи объекта через метод ОбновлениеИнформационнойБазы.ЗаписатьОбъект().
// 
// Возвращаемое значение:
//  Ссылка - ссылка на элемент классификатора или Неопределено, если такого кода нет в ОКПД2.
//
Функция НайтиСоздатьЭлементКлассификатора(Код, РежимОбновления = Ложь) Экспорт
	
	СуществующийЭлемент = Справочники.КлассификаторОКПД2.НайтиПоКоду(Код);
	Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
		
		СправочникОбъект = Справочники.КлассификаторОКПД2.СоздатьЭлемент();
		СправочникОбъект.Код = Код;
		
		Если РежимОбновления Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		Иначе
			СправочникОбъект.Записать();
		КонецЕсли;
		
		Возврат СправочникОбъект.Ссылка;
		
	Иначе
		Возврат СуществующийЭлемент;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	ИсходныеДанные = Параметры.Данные;
	ФорматДанных   = Параметры.ФорматДанных;
	
	Попытка
		
		ДанныеКлассификатора = Новый ТаблицаЗначений;
		Если ФорматДанных = "ZIP" Тогда
			
			КаталогНазначения = ФайловаяСистема.СоздатьВременныйКаталог();
			
			Файл = ПолучитьФайлИзАрхива(ИсходныеДанные, "DBF", КаталогНазначения);
			Если Файл = Неопределено Тогда
				Файл = ПолучитьФайлИзАрхива(ИсходныеДанные, "XML", КаталогНазначения);
				Если Файл = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Извлечение файлов из архива. Файл классификатора в указанном архиве не обнаружен.'");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрЗаканчиваетсяНа(ВРег(Файл.Расширение), "DBF") Тогда
				ДанныеКлассификатора = ПолучитьДанныеКлассификатораИзDBF(Файл.ПолноеИмя);
			ИначеЕсли СтрЗаканчиваетсяНа(ВРег(Файл.Расширение), "XML") Тогда
				ДанныеКлассификатора = ПолучитьДанныеКлассификатораИзXML(Новый ДвоичныеДанные(Файл.ПолноеИмя));
			КонецЕсли;
			
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогНазначения);
			
		ИначеЕсли ФорматДанных = "DBF" Тогда
			
			КаталогНазначения = ФайловаяСистема.СоздатьВременныйКаталог();
			ПутьКДанным = ФайловыеФункцииБольничнаяАптекаКлиентСервер.ПолучитьПолныйПутьКФайлу(КаталогНазначения, "OKPD2.DBF");
			ИсходныеДанные.Записать(ПутьКДанным);
			
			ДанныеКлассификатора = ПолучитьДанныеКлассификатораИзDBF(ПутьКДанным);
			
			ФайловаяСистема.УдалитьВременныйКаталог(КаталогНазначения);
			
		ИначеЕсли ФорматДанных = "XML" Тогда
			
			ДанныеКлассификатора = ПолучитьДанныеКлассификатораИзXML(ИсходныеДанные);
			
		КонецЕсли;
		
		СопоставитьДанныеКлассификатора(ДанныеКлассификатора);
		
		Результат = Новый Структура("ДанныеКлассификатора", ДанныеКлассификатора);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
	Исключение
		Текст = НСтр("ru = 'При чтении классификатора ""%1"" произошла ошибка:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПустаяСсылка().Метаданные().Представление());
		Текст = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение Текст;
	КонецПопытки;
	
КонецПроцедуры

Функция ЗагрузитьДанныеКлассификатора(ДанныеКлассификатора) Экспорт
	
	Результат = Новый Структура("Выбрано, Создано, Обновлено, ПомеченоНаУдаление, Ошибки", ДанныеКлассификатора.Количество(), 0, 0, 0, Новый Массив);
	
	Для Каждого СтрокаКлассификатора Из ДанныеКлассификатора Цикл
		
		Попытка
			
			ЭлементЗагружен = Не СтрокаКлассификатора.Ссылка.Пустая();
			
			Если Не ЭлементЗагружен И СтрокаКлассификатора.Исключено Или Не ЗначениеЗаполнено(СтрокаКлассификатора.Код) Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьПометкуУдаления = ЭлементЗагружен И СтрокаКлассификатора.Исключено;
			
			Если ЭлементЗагружен Тогда
				
				ЭлементКлассификатораОбъект = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
				ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ЭлементКлассификатораОбъект);
				Если ЭлементКлассификатораОбъект.ПометкаУдаления = УстановитьПометкуУдаления
				   И (Не ЗначениеЗаполнено(СтрокаКлассификатора.НаименованиеПолное) Или ЭлементКлассификатораОбъект.НаименованиеПолное = СтрокаКлассификатора.НаименованиеПолное)
				   И (Не ЗначениеЗаполнено(СтрокаКлассификатора.Описание) Или ЭлементКлассификатораОбъект.Описание = СтрокаКлассификатора.Описание) Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				ЭлементКлассификатораОбъект = СоздатьЭлемент();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементКлассификатораОбъект, СтрокаКлассификатора);
			
			ЭлементКлассификатораОбъект.ПометкаУдаления = УстановитьПометкуУдаления;
			ЭлементКлассификатораОбъект.Записать();
			ЭлементКлассификатораОбъект.Разблокировать();
			
			Если Не ЭлементЗагружен Тогда
				Результат.Создано = Результат.Создано + 1;
			ИначеЕсли УстановитьПометкуУдаления Тогда
				Результат.ПомеченоНаУдаление = Результат.ПомеченоНаУдаление + 1;
			Иначе
				Результат.Обновлено = Результат.Обновлено + 1;
			КонецЕсли;
			
			СтрокаКлассификатора.Ссылка = ЭлементКлассификатораОбъект.Ссылка;
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Загрузка классификатора ОКПД2'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			Текст = НСтр("ru = 'Не удалось записать ОКПД2 ""%1"" по причине:'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаКлассификатора.Код);
			
			ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ПустаяСсылка().Метаданные(),, ТекстЖурналаРегистрации);
			Результат.Ошибки.Добавить(ТестСообщенияПользователю);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Экспорт
	
	Возврат "ProductsByEconomicActivities";
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеКлассификатораИзDBF(ПутьКДанным)
	
	// Структура файла ОКПД2
	//  Идентификатор    Тип    Размер (байт)    Расшифровка
	//  Razdel           C           1           Раздел
	//  Kod              C          12           Код позиции
	//    XX           - класс
	//    XX.X         - подкласс
	//    XX.XX        - группа
	//    XX.XX.X      - подгруппа
	//    XX.XX.XX     - вид
	//    XX.XX.XX.XX0 - категория
	//    XX.XX.XX.XXX - подкатегория
	//  Name (полей: 2)  C         250           Наименование (500 символов).
	//  NomDescr         С         250           Описание (8000 символов).
	//  NomAkt           N           3           Номер последнего изменения.
	//  Status           N           1           Тип последнего изменения (фактически - 1 символ перед запятой), где
	//    1 - аннулировать;
	//    2 - изменить реквизит, кроме кода;
	//    3 - включить;
	//    0 - начальная загрузка
	//  DateUtv          D          10           Дата принятия последнего изменения.
	//  DateVved         D          10           Дата введения последнего изменения.
	
	ДанныеФайла = Новый XBase(ПутьКДанным,, Истина);
	ДанныеФайла.Кодировка = КодировкаXBase.OEM;
	
	ОписаниеПолейФайла = Новый Структура;
	ОписаниеПолейФайла.Вставить("RAZDEL"  , Новый Структура("Тип, Длина, Точность", "S", 1, 0));
	ОписаниеПолейФайла.Вставить("KOD"     , Новый Структура("Тип, Длина, Точность", "S", 12, 0));
	ОписаниеПолейФайла.Вставить("NAME11"  , Новый Структура("Тип, Длина, Точность", "S", 250, 0));
	ОписаниеПолейФайла.Вставить("NAME12"  , Новый Структура("Тип, Длина, Точность", "S", 250, 0));
	
	ОписаниеОшибки = "";
	ОписаниеПолейИсключения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("PRAZDEL");
	Если Не ОбщегоНазначенияБольничнаяАптека.ПроверитьСтруктуруDBFФайла(ДанныеФайла, ОписаниеПолейФайла, ОписаниеОшибки, ОписаниеПолейИсключения) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректная структура файла: %1'"), ОписаниеОшибки);
	КонецЕсли;
	
	ЕстьNOMDESCR = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеФайла, "NOMDESCR");
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ДанныеКлассификатора.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));
	ДанныеКлассификатора.Колонки.Добавить("Описание"          , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
	ДанныеКлассификатора.Колонки.Добавить("Исключено"         , Новый ОписаниеТипов("Булево"));
	
	ТекущаяСтрока = Неопределено;
	Пока Не ДанныеФайла.ВКонце() Цикл
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Код"               , СокрЛП(ДанныеФайла.KOD));
		ДанныеСтроки.Вставить("НаименованиеПолное", СокрЛП(ДанныеФайла.NAME11) + СокрЛП(ДанныеФайла.NAME12));
		ДанныеСтроки.Вставить("Описание"          , ?(ЕстьNOMDESCR, СокрЛП(ДанныеФайла.NOMDESCR), ""));
		
		Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Код = ДанныеСтроки.Код Тогда
			ТекущаяСтрока.Описание = ТекущаяСтрока.Описание + ДанныеСтроки.Описание;
		Иначе
			ТекущаяСтрока = ДанныеКлассификатора.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтроки);
		КонецЕсли;
		
		ДанныеФайла.Следующая();
		
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьДанныеКлассификатораИзXML(ИсходныеДанные)
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ДанныеКлассификатора.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));
	ДанныеКлассификатора.Колонки.Добавить("Описание"          , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
	ДанныеКлассификатора.Колонки.Добавить("Исключено"         , Новый ОписаниеТипов("Булево"));
	
	URIПространстваИменКлассификатора = "urn:uuid:be515360-d4a7-11dc-8abf-0002a5d5c51b";
	IDТипаКлассификатора              = "#ОКПД";
	ЛокальноеИмяТипаКлассификатора    = "classifier";
	
	ПотокXML = ИсходныеДанные.ОткрытьПотокДляЧтения();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ПотокXML);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.URIПространстваИмен = URIПространстваИменКлассификатора
	   И ЧтениеXML.ЛокальноеИмя = ЛокальноеИмяТипаКлассификатора
	   И ЧтениеXML.ЗначениеАтрибута("classifier-type-id") = IDТипаКлассификатора Тогда
		
		ФабрикаКлассификатора = ИнициализироватьФабрикуКлассификатора();
		
		ОбъектXDTO = ФабрикаКлассификатора.ПрочитатьXML(ЧтениеXML, ФабрикаКлассификатора.Тип(URIПространстваИменКлассификатора, "ClassifierType"));
		
		ПараметрыОбхода = ОбщегоНазначенияБольничнаяАптека.ПараметрыОбходаДерева(ОбъектXDTO.Данные, "ВГлубину");
		
		Исключено = Ложь;
		Пока Истина Цикл
			
			ЭлементДанных = ОбщегоНазначенияБольничнаяАптека.ПолучитьОчереднойЭлементДерева(ПараметрыОбхода);
			Если ЭлементДанных = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТаблицы = ДанныеКлассификатора.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементДанных);
			
			Если СтрНайти(СтрокаТаблицы.Код, "РАЗДЕЛ") <> 0 Или СтрНайти(СтрокаТаблицы.Код, "Исключено") <> 0 Тогда
				Исключено = СтрНайти(СтрокаТаблицы.Код, "Исключено") <> 0;
				СтрокаТаблицы.Код = "";
			КонецЕсли;
			
			СтрокаТаблицы.Исключено = Исключено;
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная структура файла.'");
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	ПотокXML.Закрыть();
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ИнициализироватьФабрикуКлассификатора()
	
	МакетМодели  = ПолучитьМакет("МодельКлассификатораСервиса");
	ДанныеМодели = ПолучитьДвоичныеДанныеИзСтроки(МакетМодели.ПолучитьТекст());
	ПотокМодели  = ДанныеМодели.ОткрытьПотокДляЧтения();
	
	ЧтениеXMLМодели = Новый ЧтениеXML;
	ЧтениеXMLМодели.ОткрытьПоток(ПотокМодели);
	
	Модель = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLМодели);
	
	ЧтениеXMLМодели.Закрыть();
	ПотокМодели.Закрыть();
	
	Возврат Новый ФабрикаXDTO(Модель);
	
КонецФункции

Функция ПолучитьФайлИзАрхива(ИсходныеДанные, ФорматДанных, КаталогИзвлечения)
	
	ПотокZip = ИсходныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(ПотокZip);
	
	Файл = Неопределено;
	Для Каждого ЭлементАрхива Из ЧтениеZip.Элементы Цикл
		Если ВРег(ЭлементАрхива.Расширение) = ФорматДанных Тогда
			ЧтениеZip.Извлечь(ЭлементАрхива, КаталогИзвлечения, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			Файл = Новый Файл(ФайловыеФункцииБольничнаяАптекаКлиентСервер.ПолучитьПолныйПутьКФайлу(КаталогИзвлечения, ЭлементАрхива.ПолноеИмя));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеZip.Закрыть();
	ПотокZip.Закрыть();
	
	Возврат Файл;
	
КонецФункции

Процедура СопоставитьДанныеКлассификатора(ДанныеКлассификатора, ОставлятьНесопоставленные = Истина)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеКлассификатора.Код                 КАК Код,
	|	ДанныеКлассификатора.НаименованиеПолное  КАК НаименованиеПолное,
	|	ДанныеКлассификатора.Описание            КАК Описание,
	|	ДанныеКлассификатора.Исключено           КАК Исключено
	|ПОМЕСТИТЬ ДанныеКлассификатора
	|ИЗ
	|	&ДанныеКлассификатора КАК ДанныеКлассификатора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКлассификатора.Код                                   КАК Код,
	|	ДанныеКлассификатора.НаименованиеПолное                    КАК НаименованиеПолное,
	|	ДанныеКлассификатора.Описание                              КАК Описание,
	|	ДанныеКлассификатора.Исключено                             КАК Исключено,
	|	ЕСТЬNULL(СуществующиеДанные.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ДанныеКлассификатора КАК ДанныеКлассификатора
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.КлассификаторОКПД2 КАК СуществующиеДанные
	|		ПО
	|			СуществующиеДанные.Код = ДанныеКлассификатора.Код
	|";
	
	Если Не ОставлятьНесопоставленные Тогда
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(ТекстЗапроса);
		Отбор = Схема.ПакетЗапросов[1].Операторы[0].Отбор;
		Отбор.Добавить("НЕ СуществующиеДанные.Ссылка ЕСТЬ NULL");
		ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеКлассификатора", ДанныеКлассификатора);
	ДанныеКлассификатора = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМ
#Область СтандартныеПодсистемы

Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'Общероссийский классификатор продукции по видам экономической деятельности'");
	Описатель.Идентификатор          = ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторКлассификатораВСервисеИнтернетПоддержки() Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеКлассификатора = ПолучитьДанныеКлассификатораИзXML(ИсходныеДанные);
	
	СопоставитьДанныеКлассификатора(ДанныеКлассификатора, Ложь);
	
	Результат = ЗагрузитьДанныеКлассификатора(ДанныеКлассификатора);
	
	Обработан = Результат.Ошибки.Количество() = 0;
	
КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли
