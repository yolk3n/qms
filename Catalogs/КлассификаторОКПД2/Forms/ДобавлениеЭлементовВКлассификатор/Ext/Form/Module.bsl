
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьИсточникиДанных();
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникДанных = ИсточникиДанных.СервисИнтернетПоддержки;
	ПриИзмененииИсточникаДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПриИзмененииИсточникаДанных();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ПриИзмененииИсточникаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКДаннымНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачатьВыборФайлаДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборКлассификатора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	УстановитьОтборКлассификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Классификатор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		Если ТекущиеДанные.ИдентификаторРаздела <> Элементы.Разделы.ТекущаяСтрока Тогда
			Элементы.Разделы.ТекущаяСтрока = ТекущиеДанные.ИдентификаторРаздела; // Возникает событие РазделыПриАктивизацииСтроки.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеКлассификатора(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьКлассификатор(Команда)
	
	Если ИсточникДанных = ИсточникиДанных.СервисИнтернетПоддержки Тогда
		ПолучитьДанныеКлассификатора();
	ИначеЕсли ИсточникДанных = ИсточникиДанных.ФайловаяСистема Тогда
		// Всегда обновляем файл из файловой системы в АдресФайлаНаСервере, т.к. файл может измениться.
		НачатьВыборФайлаДанных(Не ЗначениеЗаполнено(ПутьКДанным));
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЭлементы(Команда)
	
	ВыделенныеСтроки = Элементы.Классификатор.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеКлассификатора(ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// Получение файла классификатора
#Область ПолучениеФайлаКлассификатора

&НаКлиенте
Процедура НачатьВыборФайлаДанных(Интерактивно = Истина)
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Интерактивно = Интерактивно;
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*|*.dbf|*.dbf|*.xml|*.xml|*.zip|*.zip'");
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Файл классификатора'");
	ПараметрыЗагрузки.Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьВыборФайлаДанных", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповестить, ПараметрыЗагрузки, ПутьКДанным, АдресФайлаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаДанных(ПомещенныйФайл, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайлаНаСервере = ПомещенныйФайл.Хранение;
	ПутьКДанным         = ПомещенныйФайл.Имя;
	
	ПолучитьДанныеКлассификатора();
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Получение данных классификатора
#Область ПолучениеДанныхКлассификатора

&НаКлиенте
Процедура ПолучитьДанныеКлассификатора()
	
	ОчиститьСообщения();
	
	ОтобразитьИнформациюПользователю("НачалоРаботыСДанными");
	
	ПодключитьОбработчикОжидания("ПолучитьДанныеКлассификатораОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеКлассификатораОтложенно()
	
	РезультатПолученияАдреса = ПолучитьАдресДанныхКлассификатораНаСервере();
	АдресДанныхКлассификатора = РезультатПолученияАдреса.АдресДанныхКлассификатора;
	Если Не ЭтоАдресВременногоХранилища(АдресДанныхКлассификатора) Тогда
		ОтобразитьИнформациюПользователю("АдресДанныхКлассификатораНаСервереНеПолучен", РезультатПолученияАдреса.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьДанныеКлассификатораВФоне(АдресДанныхКлассификатора);
	
	НачатьОжиданиеПолученияКлассификатора(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДанныхКлассификатораНаСервере()
	
	Если ИсточникДанных = ИсточникиДанных.СервисИнтернетПоддержки Тогда
		
		РезультатПолученияАдреса = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
		
		ИдентификаторКлассификатора = Справочники.КлассификаторОКПД2.ИдентификаторКлассификатораВСервисеИнтернетПоддержки();
		
		РезультатОбработки = РаботаСКлассификаторами.ПолучитьФайлыКлассификаторов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКлассификатора));
		Если Не ЗначениеЗаполнено(РезультатОбработки.КодОшибки) Тогда
			
			СтрокаСДанными = РезультатОбработки.ДанныеКлассификаторов.Найти(ИдентификаторКлассификатора, "Идентификатор");
			Если СтрокаСДанными <> Неопределено Тогда
				
				ОписаниеДанныхКлассификатора = Новый Структура;
				ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(СтрокаСДанными.АдресФайла));
				ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", "XML");
				
				РезультатПолученияАдреса.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
				
				УдалитьИзВременногоХранилища(СтрокаСДанными.АдресФайла);
				
			КонецЕсли;
			
		Иначе
			
			РезультатПолученияАдреса.СообщениеОбОшибке = РезультатОбработки.СообщениеОбОшибке;
			
			ИмяСобытия = НСтр("ru = 'Загрузка файлов классификатора из сервиса интернет-поддержки'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.КлассификаторОКПД2,, РезультатОбработки.ИнформацияОбОшибке);
			
		КонецЕсли;
		
		Возврат РезультатПолученияАдреса;
	
	ИначеЕсли ИсточникДанных = ИсточникиДанных.ФайловаяСистема Тогда
		
		РезультатПолученияАдреса = Новый Структура("АдресДанныхКлассификатора, СообщениеОбОшибке");
		
		Если Не ЭтоАдресВременногоХранилища(АдресФайлаНаСервере) Тогда
			РезультатПолученияАдреса.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить файл из файловой системы.'");
			Возврат РезультатПолученияАдреса;
		КонецЕсли;
		
		ОписаниеДанныхКлассификатора = Новый Структура;
		ОписаниеДанныхКлассификатора.Вставить("Данные"      , ПолучитьИзВременногоХранилища(АдресФайлаНаСервере));
		ОписаниеДанныхКлассификатора.Вставить("ФорматДанных", ВРег(Сред(ПутьКДанным, СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца) + 1)));
		
		РезультатПолученияАдреса.АдресДанныхКлассификатора = ПоместитьВоВременноеХранилище(ОписаниеДанныхКлассификатора, УникальныйИдентификатор);
		
		Возврат РезультатПолученияАдреса;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Получение данных Классификатора в фоне

&НаСервере
Функция ПолучитьДанныеКлассификатораВФоне(Знач АдресДанныхКлассификатора)
	
	ПараметрыПроцедуры = ПолучитьИзВременногоХранилища(АдресДанныхКлассификатора);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение классификатора.'");
	
	ИмяПроцедуры = "Справочники.КлассификаторОКПД2.ПолучитьДанныеКлассификатора";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеПолученияКлассификатора(ДлительнаяОперация)
	
	ОтобразитьИнформациюПользователю("ОжиданиеПолученияДанныхИзФайла");
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьОжиданиеПолученияКлассификатора", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОжиданиеПолученияКлассификатора(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗакончитьОжиданиеПолученияКлассификатораНаСервере(РезультатДлительнойОперации.АдресРезультата);
		ОтобразитьИнформациюПользователю("ВыборКлассификатора");
	Исключение
		ОтобразитьИнформациюПользователю("ДинамическаяОшибка", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОжиданиеПолученияКлассификатораНаСервере(АдресРезультата)
	
	Разделы.Очистить();
	Классификатор.Очистить();
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Для Каждого ЗагружаемаяСтрока Из РезультатЗагрузки.ДанныеКлассификатора Цикл
		
		Если Не ЗначениеЗаполнено(ЗагружаемаяСтрока.Код) Тогда
			СтрокаРаздела = Разделы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаздела, ЗагружаемаяСтрока);
		ИначеЕсли СтрокаРаздела <> Неопределено Тогда
			СтрокаКлассификатора = Классификатор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКлассификатора, ЗагружаемаяСтрока);
			СтрокаКлассификатора.ИдентификаторРаздела = СтрокаРаздела.ПолучитьИдентификатор();
			СтрокаКлассификатора.СтрокаПоиска = СтрокаКлассификатора.Код + " " + СтрокаКлассификатора.НаименованиеПолное;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Разделы.Количество() > 0 Тогда
		Элементы.Разделы.ТекущаяСтрока = Разделы[0].ПолучитьИдентификатор(); // Возникает событие РазделыПриАктивизацииСтроки.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Загрузка данных классификатора
#Область ЗагрузкаДанныхКлассификатора

&НаКлиенте
Процедура ЗагрузитьДанныеКлассификатора(ИдентификаторыСтрок)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыСтрок) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ЗагрузитьДанныеКлассификатораНаСервере(ИдентификаторыСтрок);
	
	Если РезультатЗагрузки.Ошибки.Количество() > 0 Тогда
		Для Каждого Ошибка Из РезультатЗагрузки.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗагрузки.Выбрано = 1 И ЗначениеЗаполнено(Элементы.Классификатор.ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(, Элементы.Классификатор.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Пояснения = Новый Массив;
	Если РезультатЗагрузки.Создано > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Создано [Создано] из [Выбрано] элементов.'"));
	КонецЕсли;
	
	Если РезультатЗагрузки.Обновлено > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обновлено [Обновлено] из [Выбрано] элементов.'"));
	КонецЕсли;
	
	Если РезультатЗагрузки.ПомеченоНаУдаление > 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Помечено на удаление [ПомеченоНаУдаление] из [Выбрано] элементов.'"));
	КонецЕсли;
	
	Если Пояснения.Количество() = 0 Тогда
		Пояснения.Добавить(НСтр("ru = 'Обработано 0 из [Выбрано] элементов.'"));
	КонецЕсли;
	
	Пояснение = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(СтрСоединить(Пояснения, Символы.ПС), РезультатЗагрузки);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Данные обработаны'"),, Пояснение, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДанныеКлассификатораНаСервере(Знач ИдентификаторыСтрок)
	
	ДанныеКлассификатора = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ДанныеКлассификатора.Добавить(Классификатор.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	Возврат Справочники.КлассификаторОКПД2.ЗагрузитьДанныеКлассификатора(ДанныеКлассификатора);
	
КонецФункции

#КонецОбласти // ЗагрузкаДанныхКлассификатора


////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Шрифт строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.Ссылка", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтТекста,,, Истина));
	
	
	// Цвет текста строк таблицы Классификатор.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Классификатор.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Классификатор.Исключено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКлассификатора()
	
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		Элементы.Классификатор.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("СтрокаПоиска", СтрокаПоиска)); // Возникает событие КлассификаторПриАктивизацииСтроки.
	Иначе
		Элементы.Классификатор.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ИдентификаторРаздела", Элементы.Разделы.ТекущаяСтрока)); // Возникает событие КлассификаторПриАктивизацииСтроки.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнформациюПользователю(Вариант, Уточнение = "")
	
	Если Вариант = "НачалоРаботыСДанными" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		
	ИначеЕсли Вариант = "АдресДанныхКлассификатораНаСервереНеПолучен" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		Текст = НСтр("ru = 'Не удалось получить файл классификатора по причине:'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст + Символы.ПС + Уточнение);
		
	ИначеЕсли Вариант = "ДинамическаяОшибка" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборИсточникаДанных;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Уточнение);
		
	ИначеЕсли Вариант = "ОжиданиеПолученияДанныхИзФайла" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииПолучениеДанныхИхФайла;
		
	ИначеЕсли Вариант = "ВыборКлассификатора" Тогда
		
		Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаИнформацииВыборКлассификатора;
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Некорректно указан вариант отображения информации пользователю.'");
		
	КонецЕсли;
	
	Элементы.ПутьКДанным.ТолькоПросмотр = ИсточникДанных = ИсточникиДанных.СервисИнтернетПоддержки;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсточникиДанных()
	
	ИсточникиДанныхИзменяемая = Новый Структура;
	Для Каждого Элемент Из Элементы.ИсточникДанных.СписокВыбора Цикл
		ИсточникиДанныхИзменяемая.Вставить(Элемент.Значение, Элемент.Значение);
	КонецЦикла;
	ИсточникиДанных = Новый ФиксированнаяСтруктура(ИсточникиДанныхИзменяемая);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсточникаДанных()
	
	ИсточникДанных_СервисИнтернетПоддержки = ИсточникДанных = ИсточникиДанных.СервисИнтернетПоддержки;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ПутьКДанным.Имя, "ТолькоПросмотр", ИсточникДанных_СервисИнтернетПоддержки);
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
