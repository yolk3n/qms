///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СпособОповещенияОтключено;

&НаКлиенте
Перем СправочникНовостиПустаяСсылка;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() <> Истина Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если включено разделение данных, и мы зашли в неразделенном сеансе,
		//  то нельзя устанавливать пользовательские свойства новости.
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ЭтотОбъект.ТолькоПросмотр = Истина;
			// Некоторые элементы надо блокировать вручную
			Элементы.НовостиКонтекстноеМенюУдалить.Доступность = Ложь;
			Элементы.Новости.ИзменятьСоставСтрок = Ложь;
			ПолучитьТекущегоПользователя = Ложь;
		Иначе
			ПолучитьТекущегоПользователя = Истина;
		КонецЕсли;
	Иначе
		ПолучитьТекущегоПользователя = Истина;
	КонецЕсли;

	Если ПолучитьТекущегоПользователя = Истина Тогда
		ЭтотОбъект.ПараметрыСеанса_ТекущийПользователь = Пользователи.ТекущийПользователь();
	Иначе
		ЭтотОбъект.ПараметрыСеанса_ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	// Заголовок формы можно заменить с помощью передаваемых параметров.
	Если НЕ ПустаяСтрока(Параметры.ЗаголовокФормы) Тогда
		ЭтотОбъект.Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;

	// Сохраняемые системные настройки.
	ЭтотОбъект.КлючСохраненияПоложенияОкна = "ОсновнойРежим";

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей",
		"");

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекПоказаНовостей);

	СтруктураНастроекПоказаНовостейНастроенныеАдминистратором = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором",
		"");

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекПоказаНовостейНастроенныеАдминистратором);

	// Сброс указателя текущей новости.
	ЭтотОбъект.ТекущаяНовость = Справочники.Новости.ПустаяСсылка();
	// Установить пустой текст текущей новости.
	ЭтотОбъект.ТекстНовостиХТМЛ = "
		|<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<html>
		|	<body bgcolor=""#FCFAEB"" />
		|</html>
		|";

	ОбновитьСписокПапокОтбора();

	ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = Параметры.АктивироватьПапку_ВариантОтбора;
	ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = Параметры.АктивироватьПапку_ЗначениеОтбора;
	Если ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 0 Тогда // Все новости. Надо выбрать ленту новостей.
		ЭтотОбъект.СписокРаскрытыхПапок.ЗагрузитьЗначения(СтруктураНастроекПоказаНовостей.СписокРаскрытыхПапок.ВыгрузитьЗначения());
		// Загрузка новостей в табличную часть из справочника.
		ИнтерактивныеДействия = ОбновитьСписокНовостейСервер( // Здесь получается список новостей.
			Новый Структура("ВариантОтбора",
				ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)); // Здесь же вызовется ОбновитьИнформационныеСтрокиСервер();
		Элементы.Папки.ТекущаяСтрока = 0; // Явно указывать идентификатор можно только в ПриСозданииНаСервере, пока список строк не обновился.
	ИначеЕсли ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 1 Тогда // По ленте новостей, должна быть передана Лента новостей.
		ЭтотОбъект.СписокРаскрытыхПапок.ЗагрузитьЗначения(СтруктураНастроекПоказаНовостей.СписокРаскрытыхПапок.ВыгрузитьЗначения());
		// Т.к. ленту новостей необходимо показывать всегда, то список открытых папок должен содержать папку "Все новости".
		НайденаРаскрытаяПапкаВсеНовости = Ложь;
		Для Каждого ТекущийЭлементСтруктуры Из ЭтотОбъект.СписокРаскрытыхПапок Цикл
			Если ТекущийЭлементСтруктуры.Значение.ВариантОтбора = 0 Тогда
				НайденаРаскрытаяПапкаВсеНовости = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденаРаскрытаяПапкаВсеНовости = Ложь Тогда
			ЭтотОбъект.СписокРаскрытыхПапок.Добавить(
				Новый Структура("ВариантОтбора, ЗначениеОтбора",
					0,
					Неопределено));
		КонецЕсли;
		// Найти идентификатор строки текущей ленты новостей.
		ПапкаЛентыНовостейНайдена = Ложь;
		Для каждого ТекущаяПапка Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
			Если ТекущаяПапка.ВариантОтбора = 0 Тогда
				Для каждого ТекущаяПапкаЛентыНовостей Из ТекущаяПапка.ПолучитьЭлементы() Цикл
					Если (ТекущаяПапкаЛентыНовостей.ВариантОтбора = 1)
							И (ТекущаяПапкаЛентыНовостей.ЗначениеОтбора = ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора) Тогда
						ПапкаЛентыНовостейНайдена = Истина;
						Элементы.Папки.ТекущаяСтрока = ТекущаяПапкаЛентыНовостей.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ПапкаЛентыНовостейНайдена = Истина Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПапкаЛентыНовостейНайдена <> Истина Тогда
			ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 0;
			ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = Неопределено;
			Элементы.Папки.ТекущаяСтрока = 0; // Явно указывать идентификатор можно только в ПриСозданииНаСервере, пока список строк не обновился.
			// Загрузка новостей в табличную часть из справочника.
			ИнтерактивныеДействия = ОбновитьСписокНовостейСервер( // Здесь получается список новостей.
				Новый Структура("ВариантОтбора",
					ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)); // Здесь же вызовется ОбновитьИнформационныеСтрокиСервер();
		Иначе
			// Загрузка новостей в табличную часть из справочника.
			ИнтерактивныеДействия = ОбновитьСписокНовостейСервер( // Здесь получается список новостей.
				Новый Структура("ВариантОтбора, ЛентаНовостей",
					ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора,
					ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора)); // Здесь же вызовется ОбновитьИнформационныеСтрокиСервер();
		КонецЕсли;
	ИначеЕсли ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 4 Тогда // Помеченные новости.
		ЭтотОбъект.СписокРаскрытыхПапок.ЗагрузитьЗначения(СтруктураНастроекПоказаНовостей.СписокРаскрытыхПапок.ВыгрузитьЗначения());
		Элементы.Папки.ТекущаяСтрока = 0;
		ПапкаНайдена = Ложь;
		Для каждого ТекущаяПапка Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
			Если ТекущаяПапка.ВариантОтбора = ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора Тогда
				Элементы.Папки.ТекущаяСтрока = ТекущаяПапка.ПолучитьИдентификатор();
				ПапкаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПапкаНайдена = Истина Тогда
			ИнтерактивныеДействия = ОбновитьСписокНовостейСервер( // Здесь получается список новостей.
				Новый Структура("ВариантОтбора",
					ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)); // Здесь же вызовется ОбновитьИнформационныеСтрокиСервер();
		КонецЕсли;
	ИначеЕсли ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 5 Тогда // Важные новости.
		ЭтотОбъект.СписокРаскрытыхПапок.ЗагрузитьЗначения(СтруктураНастроекПоказаНовостей.СписокРаскрытыхПапок.ВыгрузитьЗначения());
		Элементы.Папки.ТекущаяСтрока = 0;
		ПапкаНайдена = Ложь;
		Для каждого ТекущаяПапка Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
			Если ТекущаяПапка.ВариантОтбора = ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора Тогда
				Элементы.Папки.ТекущаяСтрока = ТекущаяПапка.ПолучитьИдентификатор();
				ПапкаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПапкаНайдена = Истина Тогда
			ИнтерактивныеДействия = ОбновитьСписокНовостейСервер( // Здесь получается список новостей.
				Новый Структура("ВариантОтбора",
					ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)); // Здесь же вызовется ОбновитьИнформационныеСтрокиСервер();
		КонецЕсли;
	ИначеЕсли (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 8) Тогда // Корзина.
		// Ничего не делать.
	ИначеЕсли (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 9) Тогда // Вспомогательный список лент новостей (элементы), на которые можно подписаться.
		// Ничего не делать.
	Иначе // Все остальные варианты не обрабатываются.
		ЭтотОбъект.СписокРаскрытыхПапок.ЗагрузитьЗначения(СтруктураНастроекПоказаНовостей.СписокРаскрытыхПапок.ВыгрузитьЗначения());
		ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 0;
		ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = "";
		Элементы.Папки.ТекущаяСтрока = 0; // Явно указывать идентификатор можно только в ПриСозданииНаСервере, пока список строк не обновился.
		// Загрузка новостей в табличную часть из справочника.
		ИнтерактивныеДействия = ОбновитьСписокНовостейСервер( // Здесь получается список новостей.
			Новый Структура("ВариантОтбора",
				ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)); // Здесь же вызовется ОбновитьИнформационныеСтрокиСервер();
	КонецЕсли;

	// ОбработкаНовостейКлиент.ВыполнитьИнтерактивныеДействия(ИнтерактивныеДействия); // На сервере вызвать нельзя, передадим на клиента через реквизиты формы.
	ЭтотОбъект.ИнтерактивныеДействияПриОткрытии.ЗагрузитьЗначения(ИнтерактивныеДействия);

	ЭтотОбъект.ШрифтСтиляОбычный = ШрифтыСтиля.ОбычныйШрифтТекста;

	УправлениеФормой(ЭтотОбъект);

	УстановитьУсловноеОформление();

	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере(
		ЭтотОбъект,
		Отказ,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СпособОповещенияОтключено     = ПредопределенноеЗначение("Перечисление.СпособыОповещенияПользователяОНовостях.Отключено");
	СправочникНовостиПустаяСсылка = ПредопределенноеЗначение("Справочник.Новости.ПустаяСсылка");

	ВосстановитьТекущееСостояниеПапокОтбораНовостей(); // Список раскрытых папок уже был загружен, необходимо развернуть папки из сохраненного списка.

	Если (ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления < 1)
			ИЛИ (ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления > 999999) Тогда
		ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления = 60; // В минутах
	КонецЕсли;
	ЭтотОбъект.ПодключитьОбработчикОжидания(
		"Подключаемый_АвтообновлениеСпискаНовостей",
		ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления * 60,
		Ложь);

	// При создании на сервере были обнаружены интерактивные действия для клиента?
	Если ЭтотОбъект.ИнтерактивныеДействияПриОткрытии.Количество() > 0 Тогда
		ИнтерактивныеДействия = ЭтотОбъект.ИнтерактивныеДействияПриОткрытии.ВыгрузитьЗначения();
		ОбработкаНовостейКлиент.ВыполнитьИнтерактивныеДействия(ИнтерактивныеДействия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ЭтотОбъект.ЭтоПовторноеОткрытие = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ИмяСобытия = "Новости. Новость прочтена" Тогда
		ОбновитьИнформационныеСтрокиКлиент();
		// Если новостей > 20, то это может привести к неявному вызову сервера.
		НайденныеСтроки = ЭтотОбъект.Новости.НайтиСтроки(Новый Структура("Ссылка", Источник)); // Источник = Новость
		Для каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ТекущаяСтрока.Прочтена = Параметр; // Параметр = Прочтена
		КонецЦикла;

	ИначеЕсли ИмяСобытия = "Новости. Показать оповещение пользователю из списка новостей" Тогда // ////? Кто создает это событие?
		Если ТипЗнч(Параметр) = ТипСписокЗначений Тогда
			Для каждого ТекущийПараметр Из Параметр Цикл
				ПоказатьОповещениеПользователя(ТекущийПараметр.Значение);
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Новости. Изменена пометка списка новостей" Тогда
		// Источник - массив новостей с измененной пометкой, необходимо в списке новостей изменить поле Пометка.
		Для каждого ТекущийЭлементСпискаНовостей Из ЭтотОбъект.Новости Цикл
			Если Источник.Найти(ТекущийЭлементСпискаНовостей.Ссылка) <> Неопределено Тогда
				ТекущийЭлементСпискаНовостей.Пометка = Параметр;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ИмяСобытия = "Новости. Изменена прочтенность списка новостей" Тогда
		// Источник - массив новостей с измененной пометкой прочтенности, необходимо в списке новостей изменить поле Прочтена.
		Для каждого ТекущийЭлементСпискаНовостей Из ЭтотОбъект.Новости Цикл
			Если Источник.Найти(ТекущийЭлементСпискаНовостей.Ссылка) <> Неопределено Тогда
				ТекущийЭлементСпискаНовостей.Прочтена = Параметр;
			КонецЕсли;
		КонецЦикла;
		// После изменения признака прочтенности необходимо пересчитать количество не прочтенных новостей,
		//  чтобы потом отобразить его в таблице Папки.
		// Чтобы не выполнять каждый раз перерисовку таблицы Папки, можно пересчитать количество непрочтенных новостей
		//  только для текущей строки.
		// Причем если это строка ЛентаНовостей, то надо также обновить папку-родитель ("Все"),
		//  а если это папка-родитель (Все), то необходимо пересчитать все подчиненные папки.
		ОбновитьКоличествоНепрочтенныхНовостей();

	ИначеЕсли ИмяСобытия = "Новости. Активизировать папку отбора" Тогда
		Если ТипЗнч(Параметр) = ТипСтруктура Тогда
			Если Параметр.Свойство("ВариантОтбора") И Параметр.Свойство("ЗначениеОтбора") Тогда
				Параметр.Свойство("ВариантОтбора", ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора);
				Параметр.Свойство("ЗначениеОтбора", ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора);
				Элементы.Папки.ТекущаяСтрока = ВосстановитьТекущуюСтрокуПапокНовостей(ЭтотОбъект.Папки.ПолучитьЭлементы());
				ЭтотОбъект.ТекущаяСтрокаПапки_ПринудительноеОбновление = Истина;
				ЭтотОбъект.ПодключитьОбработчикОжидания("Подключаемый_ПапкиПриАктивизацииСтрокиОтложенно", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Новости. Загружены новости" Тогда
		Если Источник <> ЭтотОбъект.УникальныйИдентификатор Тогда
			КомандаОбновитьСписокНовостей(Неопределено);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Новости: Изменено состояние подписки на ленту новостей" Тогда
		Если Источник = ЭтотОбъект.УникальныйИдентификатор Тогда // Инициировано в этой же форме, т.е. уже обработано.
			Возврат;
		КонецЕсли;
		Если (ТипЗнч(Параметр) = ТипСтруктура)
				И (Параметр.Свойство("ЛентаНовостей"))
				И (Параметр.Свойство("Значение"))
				И (Параметр.Свойство("СохранятьВБазе")) Тогда
			ИзменитьПодпискуНаКлиенте(Параметр.ЛентаНовостей, Параметр.Значение, Параметр.СохранятьВБазе);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Новости: Изменено состояние оповещений ленты новостей" Тогда
		Если Источник = ЭтотОбъект.УникальныйИдентификатор Тогда // Инициировано в этой же форме, т.е. уже обработано.
			Возврат;
		КонецЕсли;
		Если (ТипЗнч(Параметр) = ТипСтруктура)
				И (Параметр.Свойство("ЛентаНовостей"))
				И (Параметр.Свойство("Значение"))
				И (Параметр.Свойство("СохранятьВБазе")) Тогда
			ИзменитьСпособОповещенияНаКлиенте(Параметр.ЛентаНовостей, Параметр.Значение, Параметр.СохранятьВБазе);
		КонецЕсли;

	КонецЕсли;

	ОбработкаНовостейКлиент.ПросмотрНовости_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы = Истина Тогда
		// Запрещены серверные вызовы и открытие форм.
		// В таком исключительном случае, когда выходят из программы,
		//  можно проигнорировать установку признака прочтенности у новостей.
	Иначе
		// Сохранить развернутость папок, чтобы при открытии восстанавливалось состояние.
		СохранитьТекущееСостояниеПапокОтбораНовостей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы = Истина Тогда
		// Запрещены серверные вызовы и открытие форм.
		// В таком исключительном случае, когда выходят из программы,
		//  можно проигнорировать установку признака прочтенности у новостей.
	Иначе
		СохранитьНастройкиПоказаНовостейСервер();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработка нажатия на навигационную ссылку.
//
&НаКлиенте
Процедура ТекстНовостиХТМЛПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	лкОбъект = ЭтотОбъект.ТекущаяНовость; // При открытии из формы элемента справочника / документа.

	ОбработкаНовостейКлиент.ОбработкаНажатияВТекстеНовости(лкОбъект, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	КомандаПоиск(Неопределено);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Папки

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)

	// Убрать лишние элементы контекстного меню.
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если (ТекущиеДанные.ВариантОтбора = 0) ИЛИ (ТекущиеДанные.ВариантОтбора = 1) Тогда // "Все новости" или "Лента новостей"
		Элементы.ПапкиКонтекстноеМенюГруппаПрочтенность.Видимость = Истина;
	Иначе
		Элементы.ПапкиКонтекстноеМенюГруппаПрочтенность.Видимость = Ложь;
	КонецЕсли;

	Если ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда // Неразделенный режим - нельзя установить никакие настройки
		Элементы.ПапкиКонтекстноеМенюГруппаОповещения.Видимость  = Ложь;
		Элементы.ПапкиКонтекстноеМенюКомандаОтписаться.Видимость = Ложь;
	Иначе
		// Команды выводить даже для обязательного канала. При попытке отключить оповещения будет выдано сообщение.
		Если (ТекущиеДанные.ВариантОтбора = 1) Тогда // 2-й уровень и это "ЛентаНовостей"
			Элементы.ПапкиКонтекстноеМенюГруппаОповещения.Видимость  = Истина;
			Элементы.ПапкиКонтекстноеМенюКомандаОтписаться.Видимость = Истина;
		Иначе
			Элементы.ПапкиКонтекстноеМенюГруппаОповещения.Видимость  = Ложь;
			Элементы.ПапкиКонтекстноеМенюКомандаОтписаться.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если (ТекущиеДанные.ПолучитьРодителя() <> Неопределено)
			И (ТекущиеДанные.ВариантОтбора = 9) Тогда // 2-й уровень и это доступная "ЛентаНовостей"
		Если ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда // Неразделенный режим - нельзя установить никакие настройки
			Элементы.ПапкиКонтекстноеМенюКомандаПодписаться.Видимость = Ложь;
		Иначе
			Элементы.ПапкиКонтекстноеМенюКомандаПодписаться.Видимость = Истина;
		КонецЕсли;
		Элементы.ПапкиКонтекстноеМенюКомандаОбновитьСписокНовостей.Видимость = Ложь;
	Иначе
		Элементы.ПапкиКонтекстноеМенюКомандаПодписаться.Видимость = Ложь;
		Элементы.ПапкиКонтекстноеМенюКомандаОбновитьСписокНовостей.Видимость = Истина;
	КонецЕсли;

	// Обновление списка новостей
	ЭтотОбъект.ПодключитьОбработчикОжидания("Подключаемый_ПапкиПриАктивизацииСтрокиОтложенно", 0.2, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Новости

// Двойной клик на новости в списке новостей.
//
&НаКлиенте
Процедура НовостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если (Поле = Элементы.НовостиПометка) Тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.Новости.ТекущиеДанные <> Неопределено Тогда
			НайденнаяНовость = ЭтотОбъект.Новости.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если НайденнаяНовость <> Неопределено Тогда
				МассивНовостей = Новый Массив;
				МассивНовостей.Добавить(НайденнаяНовость.Ссылка);
				Если Элементы.Новости.ТекущиеДанные.Пометка = 1 Тогда
					ОбработкаНовостейКлиент.ИзменитьПометкуНовостей(МассивНовостей, 0);
				Иначе
					ОбработкаНовостейКлиент.ИзменитьПометкуНовостей(МассивНовостей, 1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открыть новость в новом окне.
		СтандартнаяОбработка = Ложь;
		Если (ВыбраннаяСтрока <> Неопределено) Тогда
			НайденнаяСтрока = ЭтотОбъект.Новости.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если НайденнаяСтрока <> Неопределено Тогда
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", "ФормаПросмотраНовостей"); // Идентификатор.
				ПараметрыОткрытияФормы.Вставить("НовостьНаименование", НайденнаяСтрока.Наименование); // Заголовок новости.
				ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", НайденнаяСтрока.КодЛентыНовостей); // Код ленты новостей.
				ОбработкаНовостейКлиент.ПоказатьНовость(
					НайденнаяСтрока.Ссылка, // НовостьСсылка
					ПараметрыОткрытияФормы, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно,
					       // т.к. неизвестно что будет за владелец и блокировать первое попавшееся окно неправильно.
					ЭтотОбъект, // Форма-владелец.
					Ложь); // Уникальность по-умолчанию (по ссылке)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Отобразить полный текст новости снизу.
//
&НаКлиенте
Процедура НовостиПриАктивизацииСтроки(Элемент)

	// Отобразить полный текст новости, с гиперссылками.
	Если Элемент.ТекущиеДанные <> Неопределено Тогда // Элемент = ТаблицаФормы
		// Обновлять только если изменилась текущая новость.
		Если Элемент.ТекущиеДанные.Ссылка <> ЭтотОбъект.ТекущаяНовость Тогда
			// Вызывать отложенно, но только для настройки ЭтотОбъект.ОтображаетсяТекстНовости = Истина.
			Если ЭтотОбъект.ОтображаетсяТекстНовости = Истина Тогда
				ЭтотОбъект.ПодключитьОбработчикОжидания("Подключаемый_НовостиПриАктивизацииСтрокиОтложенно", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НовостиПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура НовостиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура НовостиПередУдалением(Элемент, Отказ)

	// Если мы находимся в разделенной конфигурации в неразделенном сеансе, то не давать удалять.
	// Для простоты проверки будем проверять доступность элемента НовостиКонтекстноеМенюУдалить.
	Если Элементы.НовостиКонтекстноеМенюУдалить.Доступность = Ложь Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// Пометить выделенные новости как удаленные из списка.
	// Если Текущая папка - Корзина (8), то восстановить,
	// Иначе (Все новости (0), Лента новостей (1), Папка поиска (2), Новости по теме (3),
	//    Помеченные новости (избранное) (4), Важные и очень важные новости (5),
	//    Популярные темы (6), Пользовательские отборы (7)) - удалить.
	Если (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 0) // Все новости
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 1) // Новости по ленте новостей;
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 2) // Результат поиска;
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 3) // Новости по теме;
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 4) // Помеченные новости (избранное);
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 5) // Важные и очень важные новости;
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 6) // Популярные темы;
			ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 7) Тогда // Пользовательские отборы;
		КомандаУдалитьВосстановитьНовость(Новый Структура("Имя", "КомандаУдалитьИзСпискаНовостей"));
	ИначеЕсли (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 8) Тогда // Корзина;
		КомандаУдалитьВосстановитьНовость(Новый Структура("Имя", "КомандаВосстановитьВСпискеНовостей"));
	ИначеЕсли (ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора = 9) Тогда // Отключенные ленты новостей;
		// Ничего не делать.
		Отказ = Истина;
	Иначе
		// Ничего не делать.
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьСписокНовостей(Команда)

	СохранитьТекущееСостояниеПапокОтбораНовостей();

	ОбновитьСписокПапокОтбора(); // В списке папок отбора обновить количество важных и очень важных новостей.

	ВосстановитьТекущееСостояниеПапокОтбораНовостей();

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиПоказаНовостей(Команда)

	// Настройки сохраняются в самой форме настроек, но также передаются в виде структуры,
	//  чтобы повторно не считывать значения из базы данных.

	// Открыть форму настройки показа новостей.
	ПараметрыФормы = Неопределено;

	ОписаниеОповещенияНастройкиПоказаНовостей = Новый ОписаниеОповещения(
		"ПослеНастройкиПоказаНовостей",
		ЭтотОбъект,
		Неопределено);

	ОткрытьФорму(
		"ХранилищеНастроек.НастройкиНовостей.Форма.ФормаНастройкиПоказаНовостей", // ИмяФормы
		ПараметрыФормы, // Параметры
		ЭтотОбъект, // Владелец
		"", // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		ОписаниеОповещенияНастройкиПоказаНовостей, // ОписаниеОповещенияОЗакрытии
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНовость(Команда)

	НовостиВыбор(Элементы.Новости, Элементы.Новости.ТекущаяСтрока, Элементы.НовостиНаименование, Истина);

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПоиск(Команда)

	ТипМассив = Тип("Массив");

	Если ПустаяСтрока(ЭтотОбъект.СтрокаПоиска) Тогда
		МассивНайденныхНовостей = Новый Массив;
	Иначе
		МассивНайденныхНовостей = ОбработкаНовостейКлиент.НайтиНовости(
			Новый Структура("СтрокаПоиска", ЭтотОбъект.СтрокаПоиска));
		Если ТипЗнч(МассивНайденныхНовостей) = ТипМассив Тогда
			Если МассивНайденныхНовостей.Количество() = 0 Тогда
				ЭтотОбъект.СписокНайденныхНовостей.Очистить();
			Иначе
				ЭтотОбъект.СписокНайденныхНовостей.ЗагрузитьЗначения(МассивНайденныхНовостей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Перейти к папке поиска.
	Для каждого ТекущаяПапка Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
		// Найти нужную папку, если в "Папки" будет выводиться несколько результатов поисков.
		Если ТекущаяПапка.ВариантОтбора = 2 Тогда // Результаты поиска
			// Изменить название в строке.
			Если ПустаяСтрока(ЭтотОбъект.СтрокаПоиска) Тогда
				ТекущаяПапка.Представление = НСтр("ru='Результаты поиска'");
			Иначе
				ТекущаяПапка.Представление = НСтр("ru='Результаты поиска'") + " (" + СокрЛП(ЭтотОбъект.СтрокаПоиска) + ")";
			КонецЕсли;
			// Должно сработать событие "ПриАктивизацииСтроки" для элемента "Папки", где и произойдет отбор.
			// Но вначале необходимо "сбросить" значение последней активной строки.
			ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора  = 0;
			ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = Неопределено;
			Элементы.Папки.ТекущаяСтрока = ТекущаяПапка.ПолучитьИдентификатор();
			ПапкиПриАктивизацииСтроки(Элементы.Папки);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаРасширенныйПоиск(Команда)

	лкСтрокаПоиска = Неопределено;
	Для каждого ТекущаяНастройкаПоиска Из ЭтотОбъект.НастройкиПоиска Цикл
		Если ТекущаяНастройкаПоиска.Представление = "СтрокаПоиска" Тогда
			лкСтрокаПоиска = ТекущаяНастройкаПоиска;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если лкСтрокаПоиска = Неопределено Тогда
		ЭтотОбъект.НастройкиПоиска.Добавить(ЭтотОбъект.СтрокаПоиска, "СтрокаПоиска");
	Иначе
		лкСтрокаПоиска.Значение = ЭтотОбъект.СтрокаПоиска;
	КонецЕсли;

	// Найти новости.
	ПараметрыФормы = Новый Структура("НастройкиПоиска",
			ЭтотОбъект.НастройкиПоиска);

	ОписаниеОповещенияПоискНовостей = Новый ОписаниеОповещения(
		"ПослеПоиска",
		ЭтотОбъект,
		Неопределено);

	ОткрытьФорму(
		"Справочник.Новости.Форма.ФормаРасширенныйПоиск", // ИмяФормы
		ПараметрыФормы, // Параметры
		ЭтотОбъект, // Владелец
		"", // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		ОписаниеОповещенияПоискНовостей, // ОписаниеОповещенияОЗакрытии
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); // РежимОткрытияОкна

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПометку(Команда)

	Если Элементы.Новости.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивНовостей = Новый Массив;
		Для каждого ТекущаяВыделеннаяСтрока Из Элементы.Новости.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = ЭтотОбъект.Новости.НайтиПоИдентификатору(ТекущаяВыделеннаяСтрока);
			Если ТекущиеДанныеСтроки <> Неопределено Тогда
				МассивНовостей.Добавить(ТекущиеДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если МассивНовостей.Количество() > 0 Тогда
			Если Команда.Имя = "КомандаУстановитьПометку0" Тогда
				ОбработкаНовостейКлиент.ИзменитьПометкуНовостей(МассивНовостей, 0);
			ИначеЕсли Команда.Имя = "КомандаУстановитьПометку1" Тогда
				ОбработкаНовостейКлиент.ИзменитьПометкуНовостей(МассивНовостей, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПризнакПрочтенности(Команда)

	Если ЭтотОбъект.ТекущийЭлемент.Имя = "Папки" Тогда
		МассивНовостей = Новый Массив;
		// Необходимо отметить все выведенные в данный момент на экран новости.
		// Этот список хранится в ЭтотОбъект.Новости.
		Для каждого ТекущаяСтрокаНовости Из ЭтотОбъект.Новости Цикл
			МассивНовостей.Добавить(ТекущаяСтрокаНовости.Ссылка);
		КонецЦикла;
		Если Команда.Имя = "КомандаОтметитьКакПрочтенные" Тогда
			ОбработкаНовостейКлиент.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, Истина);
		Иначе // "КомандаОтметитьКакНепрочтенные"
			ОбработкаНовостейКлиент.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, Ложь);
		КонецЕсли;
	ИначеЕсли ЭтотОбъект.ТекущийЭлемент.Имя = "Новости" Тогда
		Если Элементы.Новости.ВыделенныеСтроки.Количество() > 0 Тогда
			МассивНовостей = Новый Массив;
			Для каждого ТекущаяВыделеннаяСтрока Из Элементы.Новости.ВыделенныеСтроки Цикл
				ТекущиеДанныеСтроки = ЭтотОбъект.Новости.НайтиПоИдентификатору(ТекущаяВыделеннаяСтрока);
				Если ТекущиеДанныеСтроки <> Неопределено Тогда
					МассивНовостей.Добавить(ТекущиеДанныеСтроки.Ссылка);
				КонецЕсли;
			КонецЦикла;
			Если Команда.Имя = "КомандаОтметитьКакПрочтенные" Тогда
				ОбработкаНовостейКлиент.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, Истина);
			Иначе // "КомандаОтметитьКакНепрочтенные"
				ОбработкаНовостейКлиент.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВосстановитьНовость(Команда)

	Если Элементы.Новости.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивНовостей = Новый Массив;
		Для каждого ТекущаяВыделеннаяСтрока Из Элементы.Новости.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = ЭтотОбъект.Новости.НайтиПоИдентификатору(ТекущаяВыделеннаяСтрока);
			Если ТекущиеДанныеСтроки <> Неопределено Тогда
				МассивНовостей.Добавить(ТекущиеДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если МассивНовостей.Количество() > 0 Тогда
			Если Команда.Имя = "КомандаУдалитьИзСпискаНовостей" Тогда
				ОбработкаНовостейКлиент.ИзменитьПризнакУдаленияИзСпискаНовостей(МассивНовостей, Истина);
			ИначеЕсли Команда.Имя = "КомандаВосстановитьВСпискеНовостей" Тогда
				ОбработкаНовостейКлиент.ИзменитьПризнакУдаленияИзСпискаНовостей(МассивНовостей, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьОповещения(Команда)

#Область Проверки

	// Неразделенный режим - нельзя установить никакие настройки
	Если ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ОбязательныйКанал = Истина Тогда
		ТекстСообщения = Новый Массив;
			ТекстСообщения.Добавить(НСтр("ru='Лента новостей'"));
			ТекстСообщения.Добавить(" ");
			ТекстСообщения.Добавить(
				Новый ФорматированнаяСтрока(ТекущиеДанные.Наименование, Новый Шрифт(ЭтотОбъект.ШрифтСтиляОбычный, , , Истина)));
			ТекстСообщения.Добавить(" ");
			ТекстСообщения.Добавить(НСтр("ru='является обязательной.
				|Нельзя изменить оповещения.'"));
		ПоказатьПредупреждение(
			,
			Новый ФорматированнаяСтрока(ТекстСообщения),
			10,
			НСтр("ru='Обязательная лента новостей'"));
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	// {При добавлении способов оповещения исправлять здесь}.
	БылиИзменения = Ложь;
	ЛентаНовостей = ТекущиеДанные.ЗначениеОтбора;
	Если (Команда.Имя = "КомандаОповещенияВкл")
			И (ТекущиеДанные.СпособОповещения <> "ПоУмолчанию") Тогда // Идентификатор.
		ИзменитьСпособОповещенияНаКлиенте(ЛентаНовостей, "ПоУмолчанию", Истина); // Идентификатор.
	ИначеЕсли (Команда.Имя = "КомандаОповещенияОткл")
			И (ТекущиеДанные.СпособОповещения <> "Отключено") Тогда // Идентификатор.
		ИзменитьСпособОповещенияНаКлиенте(ЛентаНовостей, "Отключено", Истина); // Идентификатор.
	КонецЕсли;

#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура КомандаУправлениеПодпиской(Команда)

	// Неразделенный режим - нельзя установить никакие настройки
	Если ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Команда.Имя = "КомандаПодписаться" Тогда
		ИзменитьПодпискуНаКлиенте(Неопределено, Истина, Истина); // Текущая строка
	ИначеЕсли Команда.Имя = "КомандаОтписаться" Тогда
		ИзменитьПодпискуНаКлиенте(Неопределено, Ложь, Истина); // Текущая строка
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура обновляет все информационные надписи на клиенте.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьИнформационныеСтрокиКлиент()

	// Установить значения переменных.
	лкТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();

	// 1. Актуальность информации.
	ЭтотОбъект.ИнфоАктуальностьИнформации = "" + Формат(лкТекущаяДата, "ДЛФ=DT"); // Текст

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Последнее обновление списка новостей было
			|%1
			|Следующее обновление списка новостей произойдет
			|%2
			|%3'"),
		ЭтотОбъект.ИнфоАктуальностьИнформации,
		Формат(лкТекущаяДата + (ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления * 60), "ДЛФ=DT"),
		ЭтотОбъект.ДатыПоследнихЗагрузокНовостей);
	Элементы.ИнфоАктуальностьИнформации.Подсказка = ТекстСообщения;

КонецПроцедуры

&НаСервере
// Процедура обновляет все информационные надписи.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьИнформационныеСтрокиСервер()

	// Установить значения переменных.
	лкТекущаяДата = ТекущаяДатаСеанса();

	// 1. Залогинен к веб-ИТС?
	ОтобразитьИнформациюОДоступеКВебИТС();

	// 2. Даты последних полученных новостей (по каждой ленте - отдельно).
	ЭтотОбъект.ДатыПоследнихЗагрузокНовостей = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	МАКСИМУМ(Спр.ДатаПубликации) КАК ДатаПоследнейНовости,
		|	Спр.ЛентаНовостей            КАК ЛентаНовостей
		|ПОМЕСТИТЬ
		|	ВТ_ПоследняяНовость
		|ИЗ
		|	Справочник.Новости КАК Спр
		|
		|СГРУППИРОВАТЬ ПО
		|	Спр.ЛентаНовостей
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_ПоследняяНовость.ЛентаНовостей.Наименование           КАК ЛентаНовостейНаименование,
		|	ВТ_ПоследняяНовость.ДатаПоследнейНовости                 КАК ДатаПоследнейНовости,
		|	ЕСТЬNULL(Рег.ДатаЗагрузкиПоследнихНовостей, &ПустаяДата) КАК ДатаПоследнейЗагрузки
		|ИЗ
		|	ВТ_ПоследняяНовость
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
		|		ПО ВТ_ПоследняяНовость.ЛентаНовостей = Рег.ЛентаНовостей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛентаНовостейНаименование
		|";

	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');

	РезультатЗапроса = Запрос.Выполнить(); // ОбновитьИнформационныеСтрокиСервер()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1, последняя новость от %2, последняя загрузка %3'"),
				Выборка.ЛентаНовостейНаименование,
				Формат(МестноеВремя(Выборка.ДатаПоследнейНовости), "ДЛФ=DT"),
				Формат(МестноеВремя(Выборка.ДатаПоследнейЗагрузки), "ДЛФ=DT"));
			ЭтотОбъект.ДатыПоследнихЗагрузокНовостей = ЭтотОбъект.ДатыПоследнихЗагрузокНовостей + Символы.ПС + ТекстСообщения;
		КонецЦикла;
	КонецЕсли;

	Если СтрДлина(ЭтотОбъект.ДатыПоследнихЗагрузокНовостей) > 0 Тогда
		ЭтотОбъект.ДатыПоследнихЗагрузокНовостей =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Символы.ПС
					+ НСтр("ru='Состояние загрузки новостей: %1'"),
				ЭтотОбъект.ДатыПоследнихЗагрузокНовостей);
	КонецЕсли;

	// 3. Актуальность информации.
	ЭтотОбъект.ИнфоАктуальностьИнформации = "" + Формат(лкТекущаяДата, "ДЛФ=DT"); // Текст

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Последнее обновление списка новостей было
			|%1
			|Следующее обновление списка новостей произойдет
			|%2
			|%3'"),
		ЭтотОбъект.ИнфоАктуальностьИнформации,
		Формат(лкТекущаяДата + (ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления * 60), "ДЛФ=DT"),
		ЭтотОбъект.ДатыПоследнихЗагрузокНовостей);
	Элементы.ИнфоАктуальностьИнформации.Подсказка = ТекстСообщения;

КонецПроцедуры

// Функция заполняет табличную часть "Новости" из справочника "Новости".
// Возвращается массив интерактивных действий (если нужно): оповещения пользователю и т.п.
//
// Параметры:
//  ПараметрыПолученияНовостей - Структура - Структура с параметрами. Описание см. Справочник.Новости.ПолучитьСписокНовостей().
//
// Возвращаемое значение:
//  Массив структур.
//
&НаСервере
Функция ОбновитьСписокНовостейСервер(Знач ПараметрыПолученияНовостей)

	ИнтерактивныеДействия = Новый Массив;

	Справочники.Новости.ПолучитьСписокНовостей(
		ЭтотОбъект.Новости,
		ЭтотОбъект.ПараметрыСеанса_ТекущийПользователь,
		ПараметрыПолученияНовостей,
		ИнтерактивныеДействия);

	// После загрузки новостей обновить отображение быстрых фильтров.
	ОбновитьИнформационныеСтрокиСервер();

	// Перейти на ранее активную строку.
	НайденныеСтроки = ЭтотОбъект.Новости.НайтиСтроки(Новый Структура("Ссылка", ЭтотОбъект.ТекущаяНовость));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Новости.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

	Возврат ИнтерактивныеДействия;

КонецФункции

// Функция для отображения информации для элемента "ИнфоДоступКВебИТС".
//
&НаСервере
Процедура ОтобразитьИнформациюОДоступеКВебИТС()

	// ////? Вместо реквизита формы "ВходВВебИТСВыполнен" использовать реальные данные.
	Если ЭтотОбъект.ВходВВебИТСВыполнен Тогда // ////? Синим или красным, если не залогинен.
		ЭтотОбъект.ИнфоДоступКВебИТС = "";
	Иначе
		ЭтотОбъект.ИнфоДоступКВебИТС = "";
	КонецЕсли;

КонецПроцедуры

// Загрузить параметры из формы настроек, если там нажали ОК.
//
&НаСервере
Функция ЗагрузитьПараметрыИзФормыНастроекПоказаНовостей(Знач СтруктураНастроекПоказаНовостей)

	// Настройки видимости (НастройкиПоказаНовостей).
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекПоказаНовостей.НастройкиПоказаНовостей);

	// Отборы (ОтборыПоЛентамНовостейПользовательские).
	// Список лент новостей (ОтключенныеЛентыНовостей).
	// Способы оповещений (СпособыОповещений).

	// Возможно, обновился список лент новостей - обновить список новостей.
	// Сохранение и восстановление текущей строки должно происходить на клиенте.
	// Способы оповещений - картинка. Обновится в "ОбновитьСписокПапокОтбора()".
	ОбновитьСписокПапокОтбора();

	// Со списком папок могли обновиться и сами новости, особенно если курсор стоял на строке "Все новости".
	ДанныеТекущейСтроки = Новый Структура("ВариантОтбора, ЗначениеОтбора",
		ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора,
		ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора);
	ПапкиПриАктивизацииСтрокиСервер(ДанныеТекущейСтроки); // Здесь получается список новостей.

	УправлениеФормой(ЭтотОбъект);

	// После загрузки параметров можно выполнить какие-либо интерактивные действия,
	//  список которых можно посмотреть в ОбработкаНовостейКлиент.ВыполнитьИнтерактивныеДействия.
	ИнтерактивныеДействия = Неопределено;

	Возврат ИнтерактивныеДействия;

КонецФункции

// Отобразить полный текст новости снизу.
//
&НаКлиенте
Процедура Подключаемый_НовостиПриАктивизацииСтрокиОтложенно()

	ЭтотОбъект.ТекущаяНовость = СправочникНовостиПустаяСсылка;

	// Отобразить полный текст новости, с гиперссылками.
	Если Элементы.Новости.ТекущиеДанные <> Неопределено Тогда // Элемент = ТаблицаФормы
		ЭтотОбъект.ТекущаяНовость = Элементы.Новости.ТекущиеДанные.Ссылка;
		// Вызывать отложенно, но только для настройки ЭтотОбъект.ОтображаетсяТекстНовости = Истина.
		Если ЭтотОбъект.ОтображаетсяТекстНовости = Истина Тогда
			Если ЭтотОбъект.ТекущаяНовость.Пустая() Тогда
				ЭтотОбъект.ТекстНовостиХТМЛ = "";
			Иначе
				ЭтотОбъект.ТекстНовостиХТМЛ = ОбработкаНовостейКлиентПовтИсп.ПолучитьХТМЛТекстНовостей(
					ЭтотОбъект.ТекущаяНовость,
					Новый Структура("ОтображатьЗаголовок", Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПапкиПриАктивизацииСтрокиОтложенно()

	// Т.к. таблица Папки часто перезаполняется, то нельзя запоминать позицию по идентификатору строки (он каждый раз получается новый).
	// Проверка уникальности осуществляется по ВариантОтбора + ЗначениеОтбора.

	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если (ТекущиеДанные.ВариантОтбора <> ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)
				ИЛИ (ТекущиеДанные.ЗначениеОтбора <> ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора)
				ИЛИ (ЭтотОбъект.ТекущаяСтрокаПапки_ПринудительноеОбновление = Истина) Тогда

			ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора  = ТекущиеДанные.ВариантОтбора;
			ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = ТекущиеДанные.ЗначениеОтбора;
			ЭтотОбъект.ТекущаяСтрокаПапки_ПринудительноеОбновление = Ложь;

			ТекущиеДанныеСтруктура = Новый Структура(
				"ВариантОтбора, ЗначениеОтбора",
				ТекущиеДанные.ВариантОтбора,
				ТекущиеДанные.ЗначениеОтбора);
			ПапкиПриАктивизацииСтрокиСервер(ТекущиеДанныеСтруктура); // Здесь получается список новостей.

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура для автоматического запуска обработкой ожидания - обновляет список новостей.
// В интерфейсе не видна.
// 
&НаКлиенте
Процедура Подключаемый_АвтообновлениеСпискаНовостей()

	СохранитьТекущееСостояниеПапокОтбораНовостей();

	ОбновитьСписокПапокОтбора(); // В списке папок отбора обновить количество важных и очень важных новостей.

	ВосстановитьТекущееСостояниеПапокОтбораНовостей();

КонецПроцедуры

// Управление видимостью и доступностью элементов формы.
//
&НаСервереБезКонтекста
Процедура УправлениеФормой(Знач Форма)

	Элементы = Форма.Элементы;

	ТекстПодсказки = "";
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		ТекстПодсказки = НСтр("ru='Полнотекстовый поиск включен.'");
	Иначе
		ТекстПодсказки = НСтр("ru='Полнотекстовый поиск отключен.'");
	КонецЕсли;
	ТекстПодсказки = ТекстПодсказки + Символы.ПС + Символы.ПС
		+ НСтр("ru='Доступно использование подстановочных знаков:
			|% - любая последовательность символов;
			|_ (подчерк) - любой символ;
			|[а-я] - символы от а до я;
			|[^а-я] - символы, исключая от а до я;
			|\ - спецсимвол, преобразующий подстановочный знак в простой символ поиска.'");
	Элементы.СтрокаПоиска.Подсказка = ТекстПодсказки;

	Если ВРег(Форма.Форма_РазмещениеПанелей) = ВРег("Текст новости справа от списка новостей") Тогда
		Элементы.БлокНовости.Видимость = Истина;
		Элементы.БлокСписокНовостейИНовость.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.НовостиПодзаголовок.Видимость = Ложь;
		Форма.ОтображаетсяТекстНовости = Истина;
	ИначеЕсли ВРег(Форма.Форма_РазмещениеПанелей) = ВРег("Текст новости под списком новостей") Тогда
		Элементы.БлокНовости.Видимость = Истина;
		Элементы.БлокСписокНовостейИНовость.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.НовостиПодзаголовок.Видимость = Ложь;
		Форма.ОтображаетсяТекстНовости = Истина;
	ИначеЕсли ВРег(Форма.Форма_РазмещениеПанелей) = ВРег("Текст новости не отображается") Тогда
		Элементы.БлокНовости.Видимость = Ложь;
		Элементы.НовостиПодзаголовок.Видимость = Ложь;
		Форма.ОтображаетсяТекстНовости = Ложь;
	ИначеЕсли ВРег(Форма.Форма_РазмещениеПанелей) = ВРег("Текст новости не отображается, есть предпросмотр") Тогда
		Элементы.БлокНовости.Видимость = Ложь;
		Элементы.НовостиПодзаголовок.Видимость = Истина;
		Форма.ОтображаетсяТекстНовости = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура заполняет папки отбора. Данные для заполнения предоставляются функцией ПолучитьСписокПапокОтбора.
// Для модели сервиса должно вызываться в разделенном сеансе, в противном случае неправильно сработают отборы по области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьСписокПапокОтбора()

	ТипЧисло     = Тип("Число");
	ТипСтруктура = Тип("Структура");

	ЭтотОбъект.Папки.ПолучитьЭлементы().Очистить();

	// Папки отбора состоят из следующих блоков:
	// - 0 - все новости;
	// - 1 - по ленте новостей, должен быть ключ ЛентаНовостей.
	//       Если ключа "ЛентаНовостей" нет, или он пустой, или неправильного типа, то будут отобраны все новости;
	// - 2 - результаты поиска.
	//       Также должен быть передан ключ "СписокНайденныхНовостей" типа СписокЗначений;
	// - 3 - контекстные новости.
	//       Также должны быть переданы ключи "Метаданные" и "Форма";
	// - 4 - Помеченные новости.
	//       Также должен быть передан ключ "Тег" типа Строка.
	//       Избранные новости отбираются этим же вариантом отбора, только тег = "Пометка1";
	// - 5 - Важные новости, у которых важность = "важно" или "очень важно";
	// - 6 - Популярная тема.
	//       Также должен быть передан ключ "ИмяТемы" типа Строка;
	// - 7 - Пользовательский отбор.
	//       Также должен быть передан ключ "ИмяОтбора" типа Строка (это имя фильтра из ХранилищаНастроек.НастройкиНовостей);
	// - 8 - Корзина;
	// - 9 - Вспомогательный список лент новостей (элементы), на которые можно подписаться.

	КорневойУровень = ЭтотОбъект.Папки.ПолучитьЭлементы();

	// 0. Все.
	НоваяСтрока = КорневойУровень.Добавить();
		НоваяСтрока.ВариантОтбора          = 0;
		НоваяСтрока.ЗначениеОтбора         = Неопределено;
		НоваяСтрока.Наименование           = НСтр("ru='Все новости'");
		НоваяСтрока.КоличествоНепрочтенных = 0;
		НоваяСтрока.ВыделеннаяСтрока       = Истина;
		НоваяСтрока.Иконка                 = БиблиотекаКартинок.Новости;
	СтрокаВсе = НоваяСтрока;

	// 1. Список лент новостей.
	МассивОтключенныхЛентНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ОтключенныеЛентыНовостей", // КлючОбъекта
		""); // КлючНастроек, пока не обрабатывается

	ТаблицаВидимостиЛентНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ВидимостьЛентНовостей", // КлючОбъекта
		""); // КлючНастроек, для этого ключа объекта не заполняется

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей", // КлючОбъекта
		""); // КлючНастроек. Настройки показа новостей - единые для пользователя

	// 1.1. Получить настройки показа новостей.
	ОтображаемыеНовости_Вариант     = "Все";
	ОтображаемыеНовости_Количество  = 10;
	ОтображаемыеНовости_ПериодЧасов = 720;
	ОтборНовостей_ТолькоАктивные    = Истина;

	// Общие настройки.
	Если ТипЗнч(СтруктураНастроекПоказаНовостей) = ТипСтруктура Тогда
		СтруктураНастроекПоказаНовостей.Свойство("ОтображаемыеНовости_Вариант", ОтображаемыеНовости_Вариант);
		СтруктураНастроекПоказаНовостей.Свойство("ОтображаемыеНовости_Количество", ОтображаемыеНовости_Количество);
		СтруктураНастроекПоказаНовостей.Свойство("ОтображаемыеНовости_ПериодЧасов", ОтображаемыеНовости_ПериодЧасов);
		СтруктураНастроекПоказаНовостей.Свойство("ОтборНовостей_ТолькоАктивные", ОтборНовостей_ТолькоАктивные);
	Иначе
		// Настройки по-умолчанию.
	КонецЕсли;

	// Дополнительные проверки настроек показа новостей.
	Если (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Все"))
			И (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Количество"))
			И (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Период")) Тогда
		ОтображаемыеНовости_Вариант = "Все";
	КонецЕсли;

	Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество")) Тогда
		Если ОтображаемыеНовости_Количество <= 0 Тогда
			ОтображаемыеНовости_Количество = 10;
		КонецЕсли;
	ИначеЕсли (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Период")) Тогда
		Если ТипЗнч(ОтображаемыеНовости_ПериодЧасов) <> ТипЧисло Тогда
			ОтображаемыеНовости_ПериодЧасов = 720;
		КонецЕсли;
	КонецЕсли;

	Если ОтборНовостей_ТолькоАктивные <> Истина Тогда
		ОтборНовостей_ТолькоАктивные = Ложь;
	КонецЕсли;

	// ////? Добавить в запрос проверку на количество показываемых последних новостей,
	//  чтобы количество непрочтенных новостей считалось точнее.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|// {Блок запроса новостей-исключений. Начало
		|// Временная таблица с новостями-исключениями, которые не проходят по отборам
		|// Фильтр по редко меняющимся отборам (версия платформы, версия продукта, продукт, пометка удаления, дата завершения, ...)
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость
		|ПОМЕСТИТЬ ВТ_НовостиИсключения
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК Рег
		|ГДЕ
		|	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список
		|
		|// Фильтр по общим отборам
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК Рег
		|//ГДЕ // В регистре и так хранятся только исключения
		|//	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список.
		|
		|// Фильтр по общим для области данных отборам.
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_ДляОбластиДанных КАК Рег
		|//ГДЕ // В регистре и так хранятся только исключения.
		|//	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список
		|
		|// Фильтр по пользовательским отборам
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &ТекущийПользователь
		|	// И Рег.РезультатОтбора = ЛОЖЬ // В регистре и так хранятся только исключения
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список
		|
		|// Фильтр по только что полученным новостям, по которым еще не рассчитаны отборы.
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.СвойстваНовостей КАК Рег
		|ГДЕ
		|	Рег.ТребуетсяПересчетОтборов = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Новость
		|
		|// Блок запроса новостей-исключений. Конец}
		|;
		|
		|// Непрочтенные новости по текущему пользователю. Проверка, что новости вообще нет в регистре сведений будут дальше
		|ВЫБРАТЬ
		|	Рег.Новость                 КАК Новость,
		|	Рег.Прочтена                КАК Прочтена,
		|	Рег.УдаленаИзСпискаНовостей КАК УдаленаИзСпискаНовостей
		|ПОМЕСТИТЬ ВТ_СостояниеНовостей
		|ИЗ
		|	РегистрСведений.СостоянияНовостей КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &ТекущийПользователь
		|ИНДЕКСИРОВАТЬ ПО
		|	Новость
		|;
		|
		|// Количество непрочтенных новостей
		|ВЫБРАТЬ
		|	Спр.ЛентаНовостей                        КАК ЛентаНовостей,
		|	КОЛИЧЕСТВО(ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)) КАК КоличествоНепрочтенных
		|ПОМЕСТИТЬ ВТ_НепрочтенныеНовости
		|ИЗ
		|	Справочник.Новости КАК Спр
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_СостояниеНовостей КАК Рег
		|	ПО
		|		Спр.Ссылка = Рег.Новость
		|
		|ГДЕ
		|	ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ) = ЛОЖЬ
		|	И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ
		|	И (НЕ Спр.ЛентаНовостей В (&МассивОтключенныхЛентНовостей))
		|	И (Спр.ЛентаНовостей.ПометкаУдаления = ЛОЖЬ)
		|	И (Спр.СкрыватьВОбщемСпискеНовостей = ЛОЖЬ)
		|	И (Спр.ПометкаУдаления = ЛОЖЬ)
		|	И ( // Актуальность
		|		Спр.ДатаЗавершения > &ТекущаяУниверсальнаяДата
		|		ИЛИ Спр.ДатаЗавершения = &ПустаяДата
		|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
		|	)
		|
		|	// {Фильтры по категориям, версиям}
		|	И НЕ Спр.Ссылка В (
		|		ВЫБРАТЬ
		|			ВТ_НовостиИсключения.Новость
		|		ИЗ
		|			ВТ_НовостиИсключения
		|	)
		|
		|СГРУППИРОВАТЬ ПО
		|	Спр.ЛентаНовостей
		|ИНДЕКСИРОВАТЬ ПО
		|	ЛентаНовостей
		|;
		|
		|// Список лент новостей
		|ВЫБРАТЬ
		|	Спр.Ссылка                                                 КАК ЗначениеОтбора,
		|	Спр.Наименование                                           КАК ЛентаНовостейНаименование,
		|	Спр.ОбязательныйКанал                                      КАК ОбязательныйКанал,
		|	ЕСТЬNULL(ВТ_НепрочтенныеНовости.КоличествоНепрочтенных, 0) КАК КоличествоНепрочтенных,
		|	ВЫБОР // {Получение способа оповещения}
		|		КОГДА Спр.ПометкаУдаления ТОГДА
		|			&СпособОповещенияОтключеноСсылка
		|		КОГДА Спр.ОбязательныйКанал ТОГДА
		|			&СпособОповещенияПоУмолчаниюСсылка
		|		ИНАЧЕ
		|			ЕСТЬNULL(РегОповещения.СпособОповещенияПользователяОНовостях, &СпособОповещенияПоУмолчаниюСсылка)
		|	КОНЕЦ                                                    КАК СпособОповещенияСсылка
		|ИЗ
		|	Справочник.ЛентыНовостей КАК Спр
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_НепрочтенныеНовости
		|	ПО
		|		Спр.Ссылка = ВТ_НепрочтенныеНовости.ЛентаНовостей
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НастройкиЛентНовостейПользовательские КАК РегОповещения
		|	ПО
		|		РегОповещения.Пользователь = &ТекущийПользователь
		|		И Спр.Ссылка = РегОповещения.ЛентаНовостей
		|
		|ГДЕ
		|	(НЕ Спр.Ссылка В (&МассивОтключенныхЛентНовостей)) // Лент новостей не более десятка.
		|	И (НЕ Спр.Ссылка В (&МассивНевидимыхЛентНовостей))
		|	И Спр.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Спр.Наименование
		|";
	Запрос.УстановитьПараметр("ПустаяДата"                            , '00010101000000');
	Запрос.УстановитьПараметр("ТекущийПользователь"                   , ЭтотОбъект.ПараметрыСеанса_ТекущийПользователь);
	Запрос.УстановитьПараметр("МассивОтключенныхЛентНовостей"         , МассивОтключенныхЛентНовостей);
	Запрос.УстановитьПараметр("МассивНевидимыхЛентНовостей"           ,
		ТаблицаВидимостиЛентНовостей.Скопировать(
			Новый Структура("Видимость", Ложь)).ВыгрузитьКолонку("ЛентаНовостей"));
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата"              , ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные"          , ОтборНовостей_ТолькоАктивные);
	Запрос.УстановитьПараметр("СпособОповещенияОтключеноСсылка"       , Перечисления.СпособыОповещенияПользователяОНовостях.Отключено);
	Запрос.УстановитьПараметр("СпособОповещенияПоУмолчаниюСсылка"     , Перечисления.СпособыОповещенияПользователяОНовостях.ПоУмолчанию);

	РезультатЗапроса = Запрос.Выполнить(); // ОбновитьСписокПапокОтбора()/ЗаполнениеПодключенныхЛентНовостей
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СтрокаВсе.ПолучитьЭлементы().Добавить();
				НоваяСтрока.ВариантОтбора          = 1;
				НоваяСтрока.ЗначениеОтбора         = Выборка.ЗначениеОтбора;
				НоваяСтрока.Наименование           = Выборка.ЛентаНовостейНаименование;
				НоваяСтрока.КоличествоНепрочтенных = Выборка.КоличествоНепрочтенных;
				НоваяСтрока.ВыделеннаяСтрока       = (Выборка.КоличествоНепрочтенных > 0);
				НоваяСтрока.ОбязательныйКанал      = Выборка.ОбязательныйКанал;
				Если Выборка.ОбязательныйКанал = Истина Тогда
					НоваяСтрока.СпособОповещения = "ПоУмолчанию"; // Идентификатор.
					НоваяСтрока.Иконка           = БиблиотекаКартинок.НовостиОповещенияВключеныВсегда;
				Иначе
					// {При добавлении способов оповещения исправлять здесь}.
					Если Выборка.СпособОповещенияСсылка = Перечисления.СпособыОповещенияПользователяОНовостях.Отключено Тогда
						НоваяСтрока.СпособОповещения = "Отключено"; // Идентификатор.
						НоваяСтрока.Иконка           = БиблиотекаКартинок.НовостиОповещенияОтключены;
					Иначе
						НоваяСтрока.СпособОповещения = "ПоУмолчанию"; // Идентификатор.
						НоваяСтрока.Иконка           = БиблиотекаКартинок.НовостиОповещенияВключены;
					КонецЕсли;
				КонецЕсли;
			СтрокаВсе.КоличествоНепрочтенных   = СтрокаВсе.КоличествоНепрочтенных + Выборка.КоличествоНепрочтенных;
		КонецЦикла;
	КонецЕсли;

	// 2. Результаты поиска.
	НоваяСтрока = КорневойУровень.Добавить();
		НоваяСтрока.ВариантОтбора          = 2;
		НоваяСтрока.ЗначениеОтбора         = Неопределено;
		Если ПустаяСтрока(ЭтотОбъект.СтрокаПоиска) Тогда
			НоваяСтрока.Наименование = НСтр("ru='Результаты поиска'");
		Иначе
			НоваяСтрока.Наименование =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Результаты поиска (%1)'"),
					СокрЛП(ЭтотОбъект.СтрокаПоиска));
		КонецЕсли;
		НоваяСтрока.КоличествоНепрочтенных = 0; //// ... Всегда = 0, т.к. расчет количества непрочтенных для этой ситуации будет ресурсоемким
		НоваяСтрока.ВыделеннаяСтрока       = Ложь;
		НоваяСтрока.Иконка                 = БиблиотекаКартинок.Найти;

	// 3. Контекстные новости.
	//// ...

	// 4. Помеченные новости (избранное).
	НоваяСтрока = КорневойУровень.Добавить();
		НоваяСтрока.ВариантОтбора          = 4;
		НоваяСтрока.ЗначениеОтбора         = Неопределено;
		НоваяСтрока.Наименование           = НСтр("ru='Помеченные новости'");
		НоваяСтрока.КоличествоНепрочтенных = 0; //// ... Всегда = 0, т.к. расчет количества непрочтенных для этой ситуации будет ресурсоемким
		НоваяСтрока.ВыделеннаяСтрока       = Ложь;
		НоваяСтрока.Иконка                 = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;

	// 5. Важные и очень важные новости.
	НоваяСтрока = КорневойУровень.Добавить();
		НоваяСтрока.ВариантОтбора          = 5;
		НоваяСтрока.ЗначениеОтбора         = Неопределено;
		НоваяСтрока.Наименование           = НСтр("ru='Все важные и очень важные новости'");
		НоваяСтрока.КоличествоНепрочтенных = 0; //// ... Всегда = 0, т.к. расчет количества непрочтенных для этой ситуации будет ресурсоемким
		НоваяСтрока.ВыделеннаяСтрока       = Ложь;
		НоваяСтрока.Иконка                 = БиблиотекаКартинок.ВажностьНовостиВажная;

	// 6. Популярные темы.
	//// ...

	// 7. Пользовательские отборы.
	//// ...

	// 8. Корзина.
	НоваяСтрока = КорневойУровень.Добавить();
		НоваяСтрока.ВариантОтбора          = 8;
		НоваяСтрока.ЗначениеОтбора         = Неопределено;
		НоваяСтрока.Наименование           = НСтр("ru='Корзина'");
		НоваяСтрока.КоличествоНепрочтенных = 0; //// ... Всегда = 0, т.к. расчет количества непрочтенных для этой ситуации будет бессмысленным
		НоваяСтрока.ВыделеннаяСтрока       = Ложь;
		НоваяСтрока.Иконка                 = БиблиотекаКартинок.НовостиКорзина;

	// Привести в порядок представления строк.
	Для каждого ТекущаяСтрока Из КорневойУровень Цикл
		Если ТекущаяСтрока.КоличествоНепрочтенных > 0 Тогда
			// ////? {Количество непрочтенных новостей} // ТекущаяСтрока.Представление = ТекущаяСтрока.Наименование + " (" + ТекущаяСтрока.КоличествоНепрочтенных + ")"; // Оптимизация быстродействия.
			ТекущаяСтрока.Представление = ТекущаяСтрока.Наименование;
			ТекущаяСтрока.ВыделеннаяСтрока = Истина;
		Иначе
			ТекущаяСтрока.Представление = ТекущаяСтрока.Наименование;
			ТекущаяСтрока.ВыделеннаяСтрока = Ложь;
		КонецЕсли;
		Для каждого ТекущаяПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			Если ТекущаяПодчиненнаяСтрока.КоличествоНепрочтенных > 0 Тогда
				// ////? {Количество непрочтенных новостей} // ТекущаяПодчиненнаяСтрока.Представление = ТекущаяПодчиненнаяСтрока.Наименование + " (" + ТекущаяПодчиненнаяСтрока.КоличествоНепрочтенных + ")"; // Оптимизация быстродействия.
				ТекущаяПодчиненнаяСтрока.Представление = ТекущаяПодчиненнаяСтрока.Наименование;
				ТекущаяПодчиненнаяСтрока.ВыделеннаяСтрока = Истина;
			Иначе
				ТекущаяПодчиненнаяСтрока.Представление = ТекущаяПодчиненнаяСтрока.Наименование;
				ТекущаяПодчиненнаяСтрока.ВыделеннаяСтрока = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// 9. Вспомогательный список лент новостей (элементы), на которые можно подписаться.
	Если НЕ ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда // Неразделенный режим - нельзя прочитать никакие настройки
		ЛентыНовостейПодпискаОтключенаПользователем = ХранилищаНастроек.НастройкиНовостей.Загрузить("ЛентыНовостейПодпискаОтключенаПользователем");
		Если ЛентыНовостейПодпискаОтключенаПользователем.Количество() > 0 Тогда
			НоваяСтрока = КорневойУровень.Добавить();
				НоваяСтрока.ВариантОтбора          = 9;
				НоваяСтрока.ЗначениеОтбора         = Неопределено;
				НоваяСтрока.Наименование           = НСтр("ru='Отключенные ленты новостей'");
				НоваяСтрока.Представление          = НоваяСтрока.Наименование;
				НоваяСтрока.КоличествоНепрочтенных = 0;
				НоваяСтрока.ВыделеннаяСтрока       = Ложь; // Истина = жирный шрифт.
				НоваяСтрока.Иконка                 = БиблиотекаКартинок.Новости;
			СтрокаВсе = НоваяСтрока;

			Запрос = Новый Запрос;
			Запрос.Текст = "
				|// Список лент новостей
				|ВЫБРАТЬ
				|	Спр.Ссылка                                     КАК ЗначениеОтбора,
				|	Спр.Наименование                               КАК Наименование,
				|	Спр.ОбязательныйКанал                          КАК ОбязательныйКанал,
				|	0                                              КАК КоличествоНепрочтенных,
				|	ВЫБОР // {Получение способа оповещения}
				|		КОГДА Спр.ПометкаУдаления ТОГДА
				|			&СпособОповещенияОтключеноСсылка
				|		КОГДА Спр.ОбязательныйКанал ТОГДА
				|			&СпособОповещенияПоУмолчаниюСсылка
				|		ИНАЧЕ
				|			ЕСТЬNULL(РегОповещения.СпособОповещенияПользователяОНовостях, &СпособОповещенияПоУмолчаниюСсылка)
				|	КОНЕЦ                                          КАК СпособОповещенияСсылка
				|ИЗ
				|	Справочник.ЛентыНовостей КАК Спр
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.НастройкиЛентНовостейПользовательские КАК РегОповещения
				|	ПО
				|		РегОповещения.Пользователь = &ТекущийПользователь
				|		И Спр.Ссылка = РегОповещения.ЛентаНовостей
				|
				|ГДЕ
				|	Спр.Ссылка В (&ЛентыНовостейПодпискаОтключенаПользователем)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Спр.Наименование
				|";

			Запрос.УстановитьПараметр("ЛентыНовостейПодпискаОтключенаПользователем", ЛентыНовостейПодпискаОтключенаПользователем);
			Запрос.УстановитьПараметр("ТекущийПользователь"                        , ЭтотОбъект.ПараметрыСеанса_ТекущийПользователь);
			Запрос.УстановитьПараметр("СпособОповещенияОтключеноСсылка"            , Перечисления.СпособыОповещенияПользователяОНовостях.Отключено);
			Запрос.УстановитьПараметр("СпособОповещенияПоУмолчаниюСсылка"          , Перечисления.СпособыОповещенияПользователяОНовостях.ПоУмолчанию);

			РезультатЗапроса = Запрос.Выполнить(); // ОбновитьСписокПапокОтбора()/ЗаполнениеПодключенныхЛентНовостей
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = СтрокаВсе.ПолучитьЭлементы().Добавить();
						НоваяСтрока.ВариантОтбора          = 9;
						НоваяСтрока.ЗначениеОтбора         = Выборка.ЗначениеОтбора;
						НоваяСтрока.Наименование           = Выборка.Наименование;
						НоваяСтрока.Представление          = Выборка.Наименование;
						НоваяСтрока.КоличествоНепрочтенных = Выборка.КоличествоНепрочтенных;
						НоваяСтрока.ВыделеннаяСтрока       = Ложь; // Истина = жирный шрифт.
						НоваяСтрока.Иконка                 = БиблиотекаКартинок.НовостиСостояниеПодпискиОтключена;
						НоваяСтрока.ОбязательныйКанал      = Выборка.ОбязательныйКанал; // Считаем, если лента новостей была отключена, то она точно не обязательная.
						// {При добавлении способов оповещения исправлять здесь}.
						Если Выборка.СпособОповещенияСсылка = Перечисления.СпособыОповещенияПользователяОНовостях.Отключено Тогда // Идентификатор.
							НоваяСтрока.СпособОповещения = "Отключено"; // Идентификатор.
						Иначе // "ПоУмолчанию"; // Идентификатор.
							НоваяСтрока.СпособОповещения = "ПоУмолчанию"; // Идентификатор.
						КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Принудительно обновлять список новостей для текущей папки не нужно,
	//  т.к. после вызова ОбновитьСписокПапокОтбора всегда идет вызов других процедур, обновляющих список новостей.

	ОбновитьИнформационныеСтрокиСервер();

КонецПроцедуры

//@skip-warning
&НаСервере
// Функция обновляет количество непрочтенных писем с сервера.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьКоличествоНепрочтенныхНовостей()

	//// ...
	// Количество непрочтенных новостей обновляется только при полной перерисовке папок в ОбновитьСписокПапокОтбора(),
	//   т.к. правильный расчет по всем лентам новостей (с учетом фильтров, видимостей и т.п. достаточно ресурсоемкий),
	//   а его надо вызывать после прочтения каждой новости.

КонецПроцедуры

&НаСервере
// Процедура обновления списка новостей при активизации папки.
//
// Параметры:
//  ТекущиеДанные - структура (получена из "данные формы структура"), необходимые поля:
//                   ВариантОтбора, ЗначениеОтбора.
//
Процедура ПапкиПриАктивизацииСтрокиСервер(Знач ТекущиеДанные)

	Если ТекущиеДанные.ВариантОтбора = 0 Тогда // Все
		ОбновитьСписокНовостейСервер(
			Новый Структура("ВариантОтбора",
				ТекущиеДанные.ВариантОтбора));
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 1 Тогда // Лента новостей
		ОбновитьСписокНовостейСервер(
			Новый Структура("ВариантОтбора, ЛентаНовостей",
				ТекущиеДанные.ВариантОтбора,
				ТекущиеДанные.ЗначениеОтбора));
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 2 Тогда // Результаты поиска
		// Отбор по списку новостей "ЭтотОбъект.СписокНайденныхНовостей".
		Если ЭтотОбъект.СписокНайденныхНовостей.Количество() = 0 Тогда
			ЭтотОбъект.Новости.Очистить();
		Иначе
			ОбновитьСписокНовостейСервер(
				Новый Структура("ВариантОтбора, СписокНайденныхНовостей",
					ТекущиеДанные.ВариантОтбора,
					ЭтотОбъект.СписокНайденныхНовостей));
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 3 Тогда // Новости по теме (контекстные новости из документов, справочников, ...)
		// //// ...
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 4 Тогда // Помеченные новости
		ОбновитьСписокНовостейСервер(
			Новый Структура("ВариантОтбора, Тег",
				ТекущиеДанные.ВариантОтбора,
				"Пометка1"));
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 5 Тогда // Важные новости
		ОбновитьСписокНовостейСервер(
			Новый Структура("ВариантОтбора",
				ТекущиеДанные.ВариантОтбора));
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 6 Тогда // Популярная тема
		// //// ...
		ЭтотОбъект.Новости.Очистить();
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 7 Тогда // Мой отбор
		////// ...
		ЭтотОбъект.Новости.Очистить();
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 8 Тогда // Корзина
		ОбновитьСписокНовостейСервер(
			Новый Структура("ВариантОтбора",
				ТекущиеДанные.ВариантОтбора));
	ИначеЕсли ТекущиеДанные.ВариантОтбора = 9 Тогда // Отключенные ленты новостей
		ЭтотОбъект.Новости.Очистить();
	Иначе
		ЭтотОбъект.Новости.Очистить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура сохраняет текущую строку и список раскрытых папок отбора (на клиенте).
//
// Параметры:
//  Нет.
//
Процедура СохранитьТекущееСостояниеПапокОтбораНовостей()

	// Текущая строка (комбинация Варианта отбора и Значения отбора).
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если (ТекущиеДанные.ВариантОтбора <> ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)
				ИЛИ (ТекущиеДанные.ЗначениеОтбора <> ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора) Тогда
			ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора  = ТекущиеДанные.ВариантОтбора;
			ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = ТекущиеДанные.ЗначениеОтбора;
		КонецЕсли;
	КонецЕсли;
	// Развернутость папок.
	ЭтотОбъект.СписокРаскрытыхПапок.Очистить();
	Для каждого ТекущаяСтрока Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
		Если Элементы.Папки.Развернут(ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
			ЭтотОбъект.СписокРаскрытыхПапок.Добавить(
				Новый Структура("ВариантОтбора, ЗначениеОтбора",
					ТекущаяСтрока.ВариантОтбора,
					ТекущаяСтрока.ЗначениеОтбора));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Процедура восстанавливает текущую строку и список раскрытых папок отбора (на клиенте).
//
// Параметры:
//  Нет.
//
Процедура ВосстановитьТекущееСостояниеПапокОтбораНовостей()

	ТипСтруктура = Тип("Структура");

	// Восстановить список раскрытых папок.
	Для каждого ТекущийЭлементСписка Из ЭтотОбъект.СписокРаскрытыхПапок Цикл
		лкВариантОтбора = Неопределено;
		лкЗначениеОтбора = Неопределено;
		Если ТипЗнч(ТекущийЭлементСписка.Значение) = ТипСтруктура Тогда
			ТекущийЭлементСписка.Значение.Свойство("ВариантОтбора", лкВариантОтбора);
			ТекущийЭлементСписка.Значение.Свойство("ЗначениеОтбора", лкЗначениеОтбора);
			// Найти строку с такими параметрами.
			ВсеПапкиВерхнегоУровня = ЭтотОбъект.Папки.ПолучитьЭлементы();
			Для каждого ТекущаяПапка Из ВсеПапкиВерхнегоУровня Цикл
				Если (ТекущаяПапка.ВариантОтбора = лкВариантОтбора) И (ТекущаяПапка.ЗначениеОтбора = лкЗначениеОтбора) Тогда
					Элементы.Папки.Развернуть(ТекущаяПапка.ПолучитьИдентификатор(), Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	// Восстановить текущую строку.
	Элементы.Папки.ТекущаяСтрока = ВосстановитьТекущуюСтрокуПапокНовостей(ЭтотОбъект.Папки.ПолучитьЭлементы());
	ЭтотОбъект.ТекущаяСтрокаПапки_ПринудительноеОбновление = Истина;
	ЭтотОбъект.ПодключитьОбработчикОжидания("Подключаемый_ПапкиПриАктивизацииСтрокиОтложенно", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
// Функция возвращает текущую строку папок отбора по реквизитам
//  ТекущаяСтрокаПапки_ВариантОтбора и ТекущаяСтрокаПапки_ЗначениеОтбора (на клиенте).
//
// Параметры:
//  КоллекцияЭлементов - ДанныеФормыКоллекцияЭлементовДерева - откуда начать искать.
//
Функция ВосстановитьТекущуюСтрокуПапокНовостей(КоллекцияЭлементов)

	Результат = Неопределено;

	// Восстановить список раскрытых папок.
	Для каждого ТекущийЭлементСписка Из КоллекцияЭлементов Цикл
		Если (ТекущийЭлементСписка.ВариантОтбора = ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора)
				И (ТекущийЭлементСписка.ЗначениеОтбора = ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора) Тогда
			Возврат ТекущийЭлементСписка.ПолучитьИдентификатор();
		КонецЕсли;
		// Есть подчиненные?
		Если ТекущийЭлементСписка.ПолучитьЭлементы().Количество() > 0 Тогда
			Результат = ВосстановитьТекущуюСтрокуПапокНовостей(ТекущийЭлементСписка.ПолучитьЭлементы());
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
// Процедура сохраняет настройки развернутости папок.
//
// Параметры:
//  Нет.
//
Процедура СохранитьНастройкиПоказаНовостейСервер()

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей",
		"");

	СтруктураНастроекПоказаНовостей.Вставить("СписокРаскрытыхПапок", ЭтотОбъект.СписокРаскрытыхПапок);

	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиПоказаНовостей",
		"",
		СтруктураНастроекПоказаНовостей);

КонецПроцедуры

// Процедура устанавливает условное оформление в форме.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// 1. Непрочтенные новости (Дата и Заголовок) - жирным.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиНаименование.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.Прочтена");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтНовостей, , , Истина)); // Жирный

		// Использование
		Элемент.Использование = Истина;

	// 2. Непрочтенные новости (Подзаголовок) - жирным.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиПодзаголовок.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.Прочтена");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтМикротекста, , , Истина)); // Жирный

		// Использование
		Элемент.Использование = Истина;

	// 3. Неактуальные новости - серым.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиНаименование.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиПодзаголовок.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.Актуальность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста); 

		// Использование
		Элемент.Использование = Истина;

	// 4. Невидимые новости - скрыть строку целиком.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиНаименование.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиПодзаголовок.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.Видимость");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь); 

		// Использование
		Элемент.Использование = Истина;

	// 5. Представление даты: сегодня.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.ПредставлениеДатыПубликации");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Сегодня"; // Идентификатор.

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Сегодня'"));

		// Использование
		Элемент.Использование = Истина;

	// 6. Представление даты: вчера.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.ПредставлениеДатыПубликации");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Вчера"; // Идентификатор.

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Вчера'"));

		// Использование
		Элемент.Использование = Истина;

	// 7. Представление даты: этот год.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.ПредставлениеДатыПубликации");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Этот год"; // Идентификатор.

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D"); // Не отличается от "Полная дата".

		// Использование
		Элемент.Использование = Истина;

	// 8. Представление даты: полная дата.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НовостиДатаПубликации.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Новости.ПредставлениеДатыПубликации");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Полная дата"; // Идентификатор.

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D"); // Не отличается от "Этот год".

		// Использование
		Элемент.Использование = Истина;

	// 9. Выделенная строка - жирным.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПапкиИконка.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПапкиПредставление.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Папки.ВыделеннаяСтрока");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтНовостей, , , Истина)); // Жирный

		// Использование
		Элемент.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиПоказаНовостей(Результат, ДополнительныеПараметры) Экспорт

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(Результат) = ТипСтруктура Тогда // Нажали ОК, в противном случае вернется или Неопределено (нажали Esc), или КодВозвратаДиалога.Отмена.
		// Сразу с загрузкой настроек обновляется список новостей, возможно обновится и список папок,
		//  поэтому надо сохранить и восстановить текущую строку.
		СохранитьТекущееСостояниеПапокОтбораНовостей();
			ИнтерактивныеДействия = ЗагрузитьПараметрыИзФормыНастроекПоказаНовостей(Результат); // Здесь же вызовется УправлениеФормой()
		ВосстановитьТекущееСостояниеПапокОтбораНовостей();
		ОбработкаНовостейКлиент.ВыполнитьИнтерактивныеДействия(ИнтерактивныеДействия);
		ОбработкаНовостейКлиент.ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях(); // Возможно, изменилось время автообновления
		ЭтотОбъект.ОтключитьОбработчикОжидания("Подключаемый_АвтообновлениеСпискаНовостей");

		// Обновить галочки / иконки СпособОповещения и состояние подписки.
		Для Каждого ТекущаяЛентаНовостей Из Результат.СпособыОповещений Цикл
			ИзменитьСпособОповещенияНаКлиенте(
				ТекущаяЛентаНовостей.Ключ, // Лента новостей.
				ТекущаяЛентаНовостей.Значение, // ПеречислениеСсылка.СпособыОповещенияПользователяОНовостях.
				Ложь); // Данные уже сохранены в базе.
		КонецЦикла;
		Для Каждого ТекущаяЛентаНовостей Из Результат.СостояниеПодписки Цикл
			ИзменитьПодпискуНаКлиенте(
				ТекущаяЛентаНовостей.Ключ, // Лента новостей.
				ТекущаяЛентаНовостей.Значение, // Булево.
				Ложь); // Данные уже сохранены в базе.
		КонецЦикла;

		ЭтотОбъект.ПодключитьОбработчикОжидания("Подключаемый_АвтообновлениеСпискаНовостей", ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления * 60, Ложь);
		Оповестить(
			"Новости. Обновлены настройки чтения новостей",
			Результат,
			ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПоиска(Результат, ДополнительныеПараметры) Экспорт

	ТипМассив         = Тип("Массив");
	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(Результат) = ТипСтруктура Тогда
		лкНастройкиПоиска = Неопределено;
		лкМассивНайденныхНовостей = Неопределено;
		Результат.Свойство("НастройкиПоиска", лкНастройкиПоиска);
		Результат.Свойство("МассивНайденныхНовостей", лкМассивНайденныхНовостей);
		Если ТипЗнч(лкНастройкиПоиска) = ТипСписокЗначений Тогда
			ЭтотОбъект.НастройкиПоиска = лкНастройкиПоиска;
			Для каждого ТекущийЭлементСписка Из ЭтотОбъект.НастройкиПоиска Цикл
				Если ТекущийЭлементСписка.Представление = "СтрокаПоиска" Тогда
					ЭтотОбъект.СтрокаПоиска = ТекущийЭлементСписка.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(лкМассивНайденныхНовостей) = ТипМассив Тогда
			ЭтотОбъект.СписокНайденныхНовостей.ЗагрузитьЗначения(лкМассивНайденныхНовостей);
		КонецЕсли;

		// Перейти к папке поиска.
		Для каждого ТекущаяПапка Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
			// Найти нужную папку, если в "Папки" будет выводиться несколько результатов поисков.
			Если ТекущаяПапка.ВариантОтбора = 2 Тогда // Результаты поиска
				// Изменить название в строке.
				ТекущаяПапка.Представление =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Результаты поиска (%1)'"),
						СокрЛП(ЭтотОбъект.СтрокаПоиска));
				// Должно сработать событие "ПриАктивизацииСтроки" для элемента "Папки", где и произойдет отбор.
				// Но вначале необходимо "сбросить" значение последней активной строки.
				ЭтотОбъект.ТекущаяСтрокаПапки_ВариантОтбора  = 0;
				ЭтотОбъект.ТекущаяСтрокаПапки_ЗначениеОтбора = Неопределено;
				Элементы.Папки.ТекущаяСтрока = ТекущаяПапка.ПолучитьИдентификатор();
				ПапкиПриАктивизацииСтроки(Элементы.Папки);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура ищет папку по значениям отбора и позиционируется на этой папке.
//
// Параметры:
//  ЗначениеОтбора - Структура - структура отбора с ключами:
//   * ВариантОтбора - Число - значение Варианта отбора;
//   * ЗначениеОтбора - Произвольный - значение ЗначениеОтбора;
//
&НаКлиенте
Функция НайтиИАктивизироватьПапку(ЗначениеОтбора) Экспорт // АПК:78 Вызывается извне.

	ТипСтруктура = Тип("Структура");
	Результат = Ложь;

	Если (ТипЗнч(ЗначениеОтбора) = ТипСтруктура)
			И ЗначениеОтбора.Свойство("ВариантОтбора")
			И ЗначениеОтбора.Свойство("ЗначениеОтбора") Тогда
		// Найти идентификатор строки по значениям отбора.
		Для каждого ТекущаяПапка Из ЭтотОбъект.Папки.ПолучитьЭлементы() Цикл
			Если (ТекущаяПапка.ВариантОтбора = ЗначениеОтбора.ВариантОтбора)
					И (ТекущаяПапка.ВариантОтбора = ЗначениеОтбора.ЗначениеОтбора) Тогда
				Элементы.Папки.ТекущаяСтрока = ТекущаяПапка.ПолучитьИдентификатор();
				Результат = Истина;
				Прервать;
			Иначе
				// Эта папка может содержать вложенные строки.
				Для каждого ТекущаяПодПапка Из ТекущаяПапка.ПолучитьЭлементы() Цикл
					Если (ТекущаяПодПапка.ВариантОтбора = ЗначениеОтбора.ВариантОтбора)
							И (ТекущаяПодПапка.ЗначениеОтбора = ЗначениеОтбора.ЗначениеОтбора) Тогда
						Элементы.Папки.ТекущаяСтрока = ТекущаяПодПапка.ПолучитьИдентификатор();
						Результат = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если Результат = Истина Тогда // Если было найдено в подпапках, то прервать и этот цикл.
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Результат = Истина Тогда
			ПапкиПриАктивизацииСтроки(Элементы.Папки);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Изменяет состояние подписки на ленту новостей.
//
// Параметры:
//  ЛентаНовостей     - СправочникСсылка.ЛентыНовостей, Неопределено - если Неопределено, то анализируется текущая строка;
//  СостояниеПодписки - Булево - Истина = включить подписку (удалить из регистра сведений "ОтключенныеЛентыНовостей");
//  СохранятьВБазе    - Булево - Истина = сохранять в базе. Если надо только обновить отображение на форме (например,
//                        данные уже были обновлены в другой форме настроек), то надо установить в Ложь.
//
&НаКлиенте
Процедура ИзменитьПодпискуНаКлиенте(Знач ЛентаНовостей, СостояниеПодписки, СохранятьВБазе)

	// Неразделенный режим - нельзя установить никакие настройки
	Если ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда
		Возврат;
	КонецЕсли;

	// 1. Подготовительные данные - нужные папки (Подписанные, Отписанные).
	ПапкаВсеПодписанные = Неопределено;
	ПапкаВсеОтписанные  = Неопределено;
	КорневойУровень = ЭтотОбъект.Папки.ПолучитьЭлементы();
	Для Каждого ТекущаяПапка Из КорневойУровень Цикл
		Если ТекущаяПапка.ВариантОтбора = 0 Тогда
			ПапкаВсеПодписанные = ТекущаяПапка.ПолучитьЭлементы();
		КонецЕсли;
		Если ТекущаяПапка.ВариантОтбора = 9 Тогда
			ПапкаВсеОтписанные = ТекущаяПапка.ПолучитьЭлементы();
		КонецЕсли;
	КонецЦикла;

	Если ПапкаВсеПодписанные = Неопределено Тогда
		// Такое невозможно. Прервать выполнение.
		ТекстСообщения = НСтр("ru='Не найдена папка со списком всех лент новостей'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ПапкаВсеОтписанные = Неопределено Тогда
		// Такое возможно, если до этого не было ни одной ленты новостей, от которой отписались. Просто создадим папку.
		НоваяСтрока = КорневойУровень.Добавить();
			НоваяСтрока.ВариантОтбора          = 9;
			НоваяСтрока.ЗначениеОтбора         = Неопределено;
			НоваяСтрока.Наименование           = НСтр("ru='Отключенные ленты новостей'");
			НоваяСтрока.Представление          = НоваяСтрока.Наименование;
			НоваяСтрока.КоличествоНепрочтенных = 0;
			НоваяСтрока.ВыделеннаяСтрока       = Ложь; // Истина = жирный шрифт.
			НоваяСтрока.Иконка                 = БиблиотекаКартинок.Новости;
		ПапкаВсеОтписанные = НоваяСтрока.ПолучитьЭлементы();
	КонецЕсли;

	Если ЛентаНовостей = Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Иначе
		// Найти ленту новостей в подписанных или в отписанных.
		НайденнаяСтрока = Неопределено;
		Для Каждого ТекущиеДанные Из ПапкаВсеПодписанные Цикл
			Если ТекущиеДанные.ЗначениеОтбора = ЛентаНовостей Тогда
				НайденнаяСтрока = ТекущиеДанные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденнаяСтрока = Неопределено Тогда
			Для Каждого ТекущиеДанные Из ПапкаВсеОтписанные Цикл
				Если ТекущиеДанные.ЗначениеОтбора = ЛентаНовостей Тогда
					НайденнаяСтрока = ТекущиеДанные;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТекущиеДанные = НайденнаяСтрока; // Если не нашли, то Неопределено.
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// 2. Сохранить данные о текущей папке.
	СохраненнаяСтрока = Новый Структура;
		СохраненнаяСтрока.Вставить("ВариантОтбора"         , ТекущиеДанные.ВариантОтбора);
		СохраненнаяСтрока.Вставить("Наименование"          , ТекущиеДанные.Наименование);
		СохраненнаяСтрока.Вставить("Иконка"                , ТекущиеДанные.Иконка);
		СохраненнаяСтрока.Вставить("ВыделеннаяСтрока"      , ТекущиеДанные.ВыделеннаяСтрока);
		СохраненнаяСтрока.Вставить("Отображать"            , ТекущиеДанные.Отображать);
		СохраненнаяСтрока.Вставить("КоличествоНепрочтенных", ТекущиеДанные.КоличествоНепрочтенных);
		СохраненнаяСтрока.Вставить("Представление"         , ТекущиеДанные.Представление);
		СохраненнаяСтрока.Вставить("ЗначениеОтбора"        , ТекущиеДанные.ЗначениеОтбора);
		СохраненнаяСтрока.Вставить("ОбязательныйКанал"     , ТекущиеДанные.ОбязательныйКанал);
		СохраненнаяСтрока.Вставить("СпособОповещения"      , ТекущиеДанные.СпособОповещения);

	ВидимостьЛентыНовостей = Неопределено;

	// {При добавлении способов оповещения исправлять здесь}.
	ЛентаНовостей = ТекущиеДанные.ЗначениеОтбора;
	Если СостояниеПодписки = Истина Тогда
		// Проверим, что это строка 2 уровня в папке с ВариантОтбора = 9.
		Если (ТекущиеДанные.ПолучитьРодителя() <> Неопределено)
				И (ТекущиеДанные.ВариантОтбора = 9) Тогда // 2-й уровень и это отключенная "ЛентаНовостей".
			ВидимостьЛентыНовостей = Истина;
			СохраненнаяСтрока.ВариантОтбора    = 1;
			Если СохраненнаяСтрока.ОбязательныйКанал = Истина Тогда
				СохраненнаяСтрока.СпособОповещения = "ПоУмолчанию"; // Идентификатор.
				СохраненнаяСтрока.Иконка           = БиблиотекаКартинок.НовостиОповещенияВключеныВсегда;
			Иначе
				// {При добавлении способов оповещения исправлять здесь}.
				Если СохраненнаяСтрока.СпособОповещения = "Отключено" Тогда // Идентификатор.
					СохраненнаяСтрока.Иконка = БиблиотекаКартинок.НовостиОповещенияОтключены;
				Иначе // "ПоУмолчанию"; // Идентификатор.
					СохраненнаяСтрока.Иконка = БиблиотекаКартинок.НовостиОповещенияВключены;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ПапкаВсеПодписанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СохраненнаяСтрока);
			ПапкаВсеОтписанные.Удалить(ТекущиеДанные);
		КонецЕсли;
	Иначе // Отписаться
		Если ТекущиеДанные.ОбязательныйКанал = Истина Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Лента новостей %1 является обязательной.
					|От нее нельзя отписаться.'"),
				ТекущиеДанные.Наименование);
			ПоказатьПредупреждение(
				,
				ТекстСообщения,
				10,
				НСтр("ru='Обязательная лента новостей'"));
		Иначе
			// Проверим, что это строка 2 уровня в папке с ВариантОтбора = 1.
			Если (ТекущиеДанные.ПолучитьРодителя() <> Неопределено)
					И (ТекущиеДанные.ВариантОтбора = 1) Тогда // 2-й уровень и это подключенная "ЛентаНовостей".
				ВидимостьЛентыНовостей = Ложь;
				СохраненнаяСтрока.ВариантОтбора    = 9;
				СохраненнаяСтрока.Иконка           = БиблиотекаКартинок.НовостиСостояниеПодпискиОтключена;
				НоваяСтрока = ПапкаВсеОтписанные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СохраненнаяСтрока);
				ПапкаВсеПодписанные.Удалить(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если (СохранятьВБазе = Истина)
			И (ТипЗнч(ВидимостьЛентыНовостей) = Тип("Булево")) Тогда
		Параметр = Новый Структура;
			Параметр.Вставить("Значение"      , ВидимостьЛентыНовостей);
			Параметр.Вставить("ЛентаНовостей" , ЛентаНовостей);
			Параметр.Вставить("Источник"      , "Справочник.Новости.Форма.ФормаПросмотраНовостей");
			Параметр.Вставить("ИсточникУИН"   , ЭтотОбъект.УникальныйИдентификатор);
			Параметр.Вставить("СохранятьВБазе", Ложь);
		ОбработкаНовостейВызовСервера.ИзменитьПользовательскуюВидимостьЛентНовостей(
			ЛентаНовостей,
			ВидимостьЛентыНовостей,
			ПараметрыСеанса_ТекущийПользователь);
		Оповестить("Новости: Изменено состояние подписки на ленту новостей", Параметр, ЭтотОбъект.УникальныйИдентификатор); // Идентификатор.
	КонецЕсли;

КонецПроцедуры

// Изменяет состояние оповещения ленты новостей.
//
// Параметры:
//  ЛентаНовостей    - СправочникСсылка.ЛентыНовостей, Неопределено - если Неопределено, то анализируется текущая строка;
//  СпособОповещения - Строка, ПеречислениеСсылка.СпособыОповещенияПользователяОНовостях - новый способ оповещения;
//  СохранятьВБазе   - Булево - Истина = сохранять в базе. Если надо только обновить отображение на форме (например,
//                       данные уже были обновлены в другой форме настроек), то надо установить в Ложь.
//
&НаКлиенте
Процедура ИзменитьСпособОповещенияНаКлиенте(Знач ЛентаНовостей, СпособОповещения, СохранятьВБазе)

	ТипСпособыОповещенияПользователяОНовостях = Тип("ПеречислениеСсылка.СпособыОповещенияПользователяОНовостях");

	// Неразделенный режим - нельзя установить никакие настройки
	Если ПараметрыСеанса_ТекущийПользователь.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ПапкаВсеПодписанные = Неопределено;
	КорневойУровень = ЭтотОбъект.Папки.ПолучитьЭлементы();
	Для Каждого ТекущаяПапка Из КорневойУровень Цикл
		Если ТекущаяПапка.ВариантОтбора = 0 Тогда
			ПапкаВсеПодписанные = ТекущаяПапка.ПолучитьЭлементы();
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПапкаВсеПодписанные = Неопределено Тогда
		// Такое невозможно. Прервать выполнение.
		ТекстСообщения = НСтр("ru='Не найдена папка со списком всех лент новостей'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если ЛентаНовостей = Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Иначе
		// Найти ленту новостей в подписанных или в отписанных.
		НайденнаяСтрока = Неопределено;
		Для Каждого ТекущиеДанные Из ПапкаВсеПодписанные Цикл
			Если ТекущиеДанные.ЗначениеОтбора = ЛентаНовостей Тогда
				НайденнаяСтрока = ТекущиеДанные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекущиеДанные = НайденнаяСтрока; // Если не нашли, то Неопределено.
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// {При добавлении способов оповещения исправлять здесь}.
	БылиИзменения = Ложь;
	ЛентаНовостей = ТекущиеДанные.ЗначениеОтбора;
	Если ТипЗнч(СпособОповещения) = ТипСпособыОповещенияПользователяОНовостях Тогда
		// {При добавлении способов оповещения исправлять здесь}.
		Если СпособОповещения = СпособОповещенияОтключено Тогда
			СпособОповещенияСтрока = "Отключено";
		Иначе
			СпособОповещенияСтрока = "ПоУмолчанию";
		КонецЕсли;
	Иначе // Строка
		СпособОповещенияСтрока = СпособОповещения;
	КонецЕсли;
	Если (СпособОповещенияСтрока = "ПоУмолчанию")
			И (ТекущиеДанные.СпособОповещения <> "ПоУмолчанию") Тогда // Идентификатор.
		// По-умолчанию.
		ТекущиеДанные.СпособОповещения = "ПоУмолчанию"; // Идентификатор.
		ТекущиеДанные.Иконка           = БиблиотекаКартинок.НовостиОповещенияВключены;
		БылиИзменения = Истина;
	ИначеЕсли (СпособОповещенияСтрока = "Отключено")
			И (ТекущиеДанные.СпособОповещения <> "Отключено") Тогда // Идентификатор.
		// Проверка, что канал обязательный - выше.
		ТекущиеДанные.СпособОповещения = "Отключено"; // Идентификатор.
		ТекущиеДанные.Иконка           = БиблиотекаКартинок.НовостиОповещенияОтключены;
		БылиИзменения = Истина;
	КонецЕсли;

	Если (СохранятьВБазе = Истина)
			И (БылиИзменения = Истина) Тогда
		// {При добавлении способов оповещения исправлять здесь}.
		Параметр = Новый Структура;
			Параметр.Вставить("Значение"      , ТекущиеДанные.СпособОповещения);
			Параметр.Вставить("ЛентаНовостей" , ЛентаНовостей);
			Параметр.Вставить("Источник"      , "Справочник.Новости.Форма.ФормаПросмотраНовостей");
			Параметр.Вставить("ИсточникУИН"   , ЭтотОбъект.УникальныйИдентификатор);
			Параметр.Вставить("СохранятьВБазе", Ложь);
		НастройкиОповещения = Новый Структура;
			НастройкиОповещения.Вставить("КодЛентыНовостей", "");
			НастройкиОповещения.Вставить("ЛентаНовостей"   , ЛентаНовостей);
			НастройкиОповещения.Вставить("СпособОповещения", ТекущиеДанные.СпособОповещения);
		ОбработкаНовостейВызовСервера.ИзменитьПользовательскиеСпособыОповещенияЛентНовостей(
			ЛентаНовостей,
			НастройкиОповещения,
			ПараметрыСеанса_ТекущийПользователь);
		Оповестить("Новости: Изменено состояние оповещений ленты новостей", Параметр, ЭтотОбъект.УникальныйИдентификатор); // Идентификатор.
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
