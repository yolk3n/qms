
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("НаименованиеПолное");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = Данные.НаименованиеПолное;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьКлассификатор(Классификатор) Экспорт
	
	Реквизиты = ПустаяСсылка().Метаданные().Реквизиты;
	ТипКода = Реквизиты.КодРЛС.Тип;
	ТипНаименования = Реквизиты.НаименованиеПолное.Тип;
	
	Классификатор.Колонки.Код.Имя = "Код1";
	Классификатор.Колонки.КодРодителя.Имя = "КодРодителя1";
	Классификатор.Колонки.Наименование.Имя = "Наименование1";
	
	Классификатор.Колонки.Добавить("Код", ТипКода);
	Классификатор.Колонки.Добавить("Наименование", ТипНаименования);
	
	Классификатор.ЗагрузитьКолонку(Классификатор.ВыгрузитьКолонку("Код1"), "Код");
	Классификатор.ЗагрузитьКолонку(Классификатор.ВыгрузитьКолонку("Наименование1"), "Наименование");
	
	Классификатор.Колонки.Удалить("Код1");
	Классификатор.Колонки.Удалить("КодРодителя1");
	Классификатор.Колонки.Удалить("Наименование1");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Классификатор.Код           КАК Код,
	|	Классификатор.Наименование  КАК Наименование
	|ПОМЕСТИТЬ
	|	Классификатор
	|ИЗ
	|	&Классификатор КАК Классификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Классификатор.Код              КАК Код,
	|	Классификатор.Наименование     КАК Наименование,
	|	Справочник.Ссылка              КАК Ссылка,
	|	Справочник.ПометкаУдаления     КАК ПометкаУдаления,
	|	Справочник.НаименованиеПолное  КАК НаименованиеСтарое
	|ИЗ
	|	Классификатор КАК Классификатор
	|	ПОЛНОЕ СОЕДИНЕНИЕ
	|		Справочник.ФармакоТерапевтическиеГруппы КАК Справочник
	|	ПО
	|		Классификатор.Код = Справочник.КодРЛС
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Если Не ЗначениеЗаполнено(Выборка.Код) Тогда
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.УстановитьПометкуУдаления(Истина, Истина);
			ИначеЕсли Выборка.ПометкаУдаления Или Выборка.Наименование <> Выборка.НаименованиеСтарое Тогда
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Ложь;
				Объект.НаименованиеПолное = Выборка.Наименование;
				Объект.Записать();
			КонецЕсли;
		Иначе
			Объект = Справочники.ФармакоТерапевтическиеГруппы.СоздатьЭлемент();
			Объект.КодРЛС = Выборка.Код;
			Объект.НаименованиеПолное = Выборка.Наименование;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли