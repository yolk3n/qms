
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	ИнициализироватьПравилаРасчета();
	
	// Формирование списка выбора для поля ТочностьОкругленияУпрощенно
	Элементы.ТочностьОкругления.СписокВыбора.Очистить();
	ЗначениеОкругления             = 0.01;
	ЧетноеПриращение               = Ложь;
	МаксимальноеЗначениеОкругления = 1000;
	ГраницаДиапазонаЦен            = -1;
	
	Пока ЗначениеОкругления <= МаксимальноеЗначениеОкругления 
		И (ЗначениеОкругления <= ГраницаДиапазонаЦен Или ГраницаДиапазонаЦен < 0) Цикл
		
		Элементы.ТочностьОкругления.СписокВыбора.Добавить(ЗначениеОкругления);
		ЗначениеОкругления = ЗначениеОкругления * ?(ЧетноеПриращение, 2, 5);
		ЧетноеПриращение   = Не ЧетноеПриращение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Перем СообщениеОбОшибке;
	
	Если Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
		
		БазовыеВидыЦен = Новый Массив();
		Для Каждого ВидЦены Из ДоступныеБазовыеВидыЦен Цикл
			БазовыеВидыЦен.Добавить(ВидЦены.Идентификатор);
		КонецЦикла;
		
		Если Не КонструкторФормулБольничнаяАптекаКлиентСервер.ПроверитьФормулу(Объект.Формула, БазовыеВидыЦен, СообщениеОбОшибке) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке,, "Объект.Формула",, Отказ);
		КонецЕсли;
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			Если Объект.ЦеновыеГруппы.Количество() > 0 Тогда
				
				ОбработкаТабличнойЧастиСервер.ПроверитьНаличиеДублейСтрок(РеквизитФормыВЗначение("Объект"), "ЦеновыеГруппы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ЦеноваяГруппа"), Отказ);
				
				ТекущийИндекс = 0;
				Для Каждого Формула Из Объект.ЦеновыеГруппы Цикл
					
					ТекстОшибки = НСтр("ru='В формуле для ценовой группы ""%ЦеноваяГруппа%"" обнаружены ошибки'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Формула.ЦеноваяГруппа);
					
					Если Не КонструкторФормулБольничнаяАптекаКлиентСервер.ПроверитьФормулу(Формула.Формула, БазовыеВидыЦен, СообщениеОбОшибке) Тогда
						ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке,, "Объект.Формулы[" + ТекущийИндекс + "].Формула",, Отказ);
					КонецЕсли;
					ТекущийИндекс = ТекущийИндекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИспользоватьРасширенныеВозможностиЦенообразования Тогда
		Если ТекущийОбъект.ПравилаОкругленияЦены.Количество() > 0 Тогда
			Округлять = Истина;
		Иначе
			Округлять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Округлять И ТекущийОбъект.ПравилаОкругленияЦены.Количество() = 1
		И ТекущийОбъект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И ТекущийОбъект.ПравилаОкругленияЦены[0].ВычитатьИзРезультата = 0 Тогда
		ТочностьОкругления = ТекущийОбъект.ПравилаОкругленияЦены[0].ТочностьОкругления;
	КонецЕсли;
	
	Если Не Округлять И ТекущийОбъект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		ТекущийОбъект.ПравилаОкругленияЦены.Очистить();
		ТочностьОкругления = 0;
	КонецЕсли;
	
	ТекущийОбъект.ВлияющиеВидыЦен.Очистить();
	
	Если ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			Для Каждого СтрокаТЧ Из ТекущийОбъект.ЦеновыеГруппы Цикл
				ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, СтрокаТЧ.Формула);
			КонецЦикла;
			
		КонецЕсли;
		
		ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, ТекущийОбъект.Формула);
		
	ИначеЕсли ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			Для Каждого СтрокаТЧ Из ТекущийОбъект.ЦеновыеГруппы Цикл
				ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, "["+СтрокаТЧ.БазовыйВидЦены.Идентификатор+"]");
			КонецЦикла;
			
		КонецЕсли;
		
		ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, "["+ТекущийОбъект.БазовыйВидЦены.Идентификатор+"]");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьРасширенныйРежим(Команда)
	
	ИспользоватьРасширенныеВозможностиЦенообразования = Истина;
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРасширенныйРежим(Команда)
	
	Если ИспользуютсяРасширенныеВозможности(ЭтотОбъект) Тогда
		ТекстВопроса = НСтр("ru = 'Расширенные настройки будут удалены, продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыключитьРасширенныйРежимЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыключитьРасширенныйРежимФрагмент();
	
КонецПроцедуры

// Продолжение процедуры ВыключитьРасширенныйРежим
//
&НаКлиенте
Процедура ВыключитьРасширенныйРежимЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыключитьРасширенныйРежимФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРасширенныйРежимФрагмент()
	
	ЗаполнитьПравилаОкругленияПриУпрощенномРежиме(ЭтотОбъект);
	
	Объект.ПравилаОкругленияЦены.Очистить();
	ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте();
	
	Если Объект.ЦеновыеГруппы.Количество() > 0 Тогда
		Объект.ЦеновыеГруппы.Очистить();
	КонецЕсли;
	
	ИспользоватьРасширенныеВозможностиЦенообразования = Ложь;
	
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулы(Команда)
	Перем СообщениеОбОшибке;
	
	ОчиститьСообщения();
	
	БазовыеВидыЦен = Новый Массив();
	Для Каждого ВидЦены Из ДоступныеБазовыеВидыЦен Цикл
		БазовыеВидыЦен.Добавить(ВидЦены.Идентификатор);
	КонецЦикла;
	
	ОбнаруженыОшибки = Ложь;
	Если ЗначениеЗаполнено(Объект.Формула) Тогда
		Если Не КонструкторФормулБольничнаяАптекаКлиентСервер.ПроверитьФормулу(Объект.Формула, БазовыеВидыЦен, СообщениеОбОшибке) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "Объект.Формула",, ОбнаруженыОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Формула Из Объект.ЦеновыеГруппы Цикл
		Если Не КонструкторФормулБольничнаяАптекаКлиентСервер.ПроверитьФормулу(Формула.Формула, БазовыеВидыЦен, СообщениеОбОшибке) Тогда
			ИндексЭлемента = Объект.ЦеновыеГруппы.Индекс(Объект.ЦеновыеГруппы.НайтиПоИдентификатору(Элементы.Формулы.ТекущиеДанные.ПолучитьИдентификатор()));
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "Объект.ЦеновыеГруппы[" + ИндексЭлемента + "].Формула",, ОбнаруженыОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбнаруженыОшибки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'В формулах ошибок не обнаружено'"),
			,
			,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьПредлагаемоеЗначениеИдентификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаЦеныПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаЗаданияЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыйВидЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьБазовыйВидЦены(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыРедактирования = ПолучитьПараметрыФормыРедактированияЦены(Объект.Формула);
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыРедактирования, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьОкругленияУпрощенноПриИзменении(Элемент)
	
	ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьПриИзменении(Элемент)
	
	ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте();
	НастроитьДоступностьЭлементовНастройкиОкругления(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "ПравилаОкругленияЦены"
#Область ПравилаОкругленияЦены

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПравилаОкругленияЦеныТочностьОкругления Тогда
		
		Элементы.ПравилаОкругленияЦеныТочностьОкругления.СписокВыбора.Очистить();
		ЗначениеОкругления             = 0.01;
		ЧетноеПриращение               = Ложь;
		МаксимальноеЗначениеОкругления = 1000;
		ГраницаДиапазонаЦен            = ВерхняяГраницаДиапазонаЦен(Элементы.ПравилаОкругленияЦены.ТекущиеДанные);
		
		Пока ЗначениеОкругления <= МаксимальноеЗначениеОкругления 
		   И (ЗначениеОкругления <= ГраницаДиапазонаЦен Или ГраницаДиапазонаЦен < 0) Цикл
			
			Элементы.ПравилаОкругленияЦеныТочностьОкругления.СписокВыбора.Добавить(ЗначениеОкругления);
			ЗначениеОкругления = ЗначениеОкругления * ?(ЧетноеПриращение, 2, 5);
			ЧетноеПриращение   = Не ЧетноеПриращение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен = СледующаяГраницаДиапазоновЦены();
		НастроитьТаблицуПравилОкругления(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОчиститьСообщения();
	Если Не ОтменаРедактирования Тогда
		ПроверитьЗаполнениеДиапазонаЦены(Элемент.ТекущиеДанные, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПослеУдаления(Элемент)
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныНижняяГраницаДиапазонаЦенПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОкругленияПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ПравилаОкругленияЦены

////////////////////////////////////////////////////////////////////////////////
// Список "Формулы"
#Область Формулы

&НаКлиенте
Процедура ФормулыФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыРедактирования = ПолучитьПараметрыФормыРедактированияЦены(Элемент.Родитель.ТекущиеДанные.Формула);
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыРедактирования, Элемент);
	
КонецПроцедуры

#КонецОбласти // Формулы

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	ИспользоватьРасширенныеВозможностиЦенообразования = ИспользуютсяРасширенныеВозможности(ЭтотОбъект);
	Если Не ИспользоватьРасширенныеВозможностиЦенообразования Тогда
		ЗаполнитьПравилаОкругленияПриУпрощенномРежиме(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ИспользоватьРасширенныеВозможности = Форма.ИспользоватьРасширенныеВозможностиЦенообразования;
	
	Элементы.ГруппаУточнениеПоЦеновымГруппам.Видимость = ИспользоватьРасширенныеВозможности;
	Элементы.ГруппаПравилаОкругленияЦены.Видимость = ИспользоватьРасширенныеВозможности;
	
	НастроитьДоступностьЭлементовНастройкиОкругления(Форма);
	
	Элементы.ВключитьРасширенныйРежим.Видимость = Не ИспользоватьРасширенныеВозможности;
	Элементы.ВыключитьРасширенныйРежим.Видимость = ИспользоватьРасширенныеВозможности;
	
	СпособЗаданияНаценкаНаДругойВидЦены = (Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен"));
	Элементы.ГруппаНаценкаНаБазовыйВидЦены.Видимость = СпособЗаданияНаценкаНаДругойВидЦены;
	Элементы.ФормулыБазовыйВидЦены.Видимость = СпособЗаданияНаценкаНаДругойВидЦены;
	Элементы.ФормулыНаценка.Видимость = СпособЗаданияНаценкаНаДругойВидЦены;
	
	СпособЗаданияФормула = (Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен"));
	Элементы.ГруппаОсновнаяФормулаРасчета.Видимость = СпособЗаданияФормула;
	Элементы.ФормулыФормула.Видимость = СпособЗаданияФормула;
	
	Если Не Элементы.ГруппаУточнениеПоЦеновымГруппам.Видимость
	   И Не Элементы.ГруппаПравилаОкругленияЦены.Видимость Тогда
		Форма.Элементы.ГруппаПараметрыРасчетаЦены.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Форма.Элементы.ГруппаПараметрыРасчетаЦены.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСпособаЗаданияЦены()
	
	ИнициализироватьПравилаРасчета();
	
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПравилаРасчета()
	
	Если Не ПравилаРасчетаИнициализированы
	   И (Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
			Или Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен) Тогда
		
		ЗаполнитьТаблицуБазовыхЦен();
		ПостроитьДеревоОператоров();
		
		ПравилаРасчетаИнициализированы = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуБазовыхЦен()
	
	РазрешенныеВидыЦен = Справочники.ВидыЦен.ДоступныеВидыЦен();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка           КАК Ссылка,
	|	ВидыЦен.Наименование     КАК Представление,
	|	ВидыЦен.Идентификатор    КАК Идентификатор,
	|	ВидыЦен.ПометкаУдаления  КАК ПометкаУдаления,
	|	ВЫБОР КОГДА ВидыЦен.Ссылка НЕ В (&РазрешенныеВидыЦен) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ  КАК ЗапрещенныйВидЦены,
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВидЦены  КАК ВидЦены
	|	)
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка <> &ТекущаяЦена
	|");
	
	Запрос.УстановитьПараметр("ТекущаяЦена", Объект.Ссылка);
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", РазрешенныеВидыЦен);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	НедоступныеВидыЦен = Новый Массив();
	НедоступныеВидыЦен.Добавить(Объект.Ссылка);
	
	Пока НедоступныеВидыЦен.Количество() > 0 Цикл
		
		УдаляемыеСтроки = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из ТаблицаВидовЦен Цикл
			Для Каждого ВидЦены Из НедоступныеВидыЦен Цикл
				
				Если СтрокаТаблицы.ВлияющиеВидыЦен.Найти(ВидЦены, "ВидЦены") <> Неопределено Или СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
					УдаляемыеСтроки.Добавить(СтрокаТаблицы);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		НедоступныеВидыЦен.Очистить();
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			
			НедоступныеВидыЦен.Добавить(УдаляемаяСтрока.Ссылка);
			ТаблицаВидовЦен.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВидовЦен.Колонки.Удалить(ТаблицаВидовЦен.Колонки.ВлияющиеВидыЦен);
	ЗначениеВРеквизитФормы(ТаблицаВидовЦен, "ДоступныеБазовыеВидыЦен");
	
	АдресХранилищаБазовыхВидовЦен = ПоместитьВоВременноеХранилище(ТаблицаВидовЦен, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	ПараметрыОператоров = Новый Структура;
	ПараметрыОператоров.Вставить("СтандартныеОператоры", Истина);
	ПараметрыОператоров.Вставить("ЛогическиеОператоры", Истина);
	ПараметрыОператоров.Вставить("Функции", Истина);
	
	АдресХранилищаДереваОператоров = КонструкторФормулБольничнаяАптека.ПостроитьДеревоОператоров(ПараметрыОператоров, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредлагаемоеЗначениеИдентификатора()
	
	Если Не Элементы.Идентификатор.ТолькоПросмотр Или ПустаяСтрока(Объект.Идентификатор) Тогда
		Объект.Идентификатор = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьИдентификатор(Объект.Наименование);
	КонецЕсли;
	
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора()
	
	Идентификатор = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьИдентификатор(Объект.Наименование);
	
	Элементы.Идентификатор.СписокВыбора[0].Значение = Идентификатор;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеВозможности(Форма)
	
	Если ИспользуютсяРасширенныеНастройкиОкругления(Форма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.Объект.ЦеновыеГруппы.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, Формула)
	
	Операнды = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьОперандыФормулы(Формула);
	Для Каждого Операнд Из Операнды Цикл
		
		БазовыеЦены = ДоступныеБазовыеВидыЦен.НайтиСтроки(Новый Структура("Идентификатор", Операнд));
		Если БазовыеЦены.Количество() > 0 Тогда
			
			Если ТекущийОбъект.ВлияющиеВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", БазовыеЦены[0])).Количество() = 0 Тогда
				ТекущийОбъект.ВлияющиеВидыЦен.Добавить().ВидЦены = БазовыеЦены[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыРедактированияЦены(Формула)
	
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("Формула", Формула);
	ПараметрыРедактирования.Вставить("Операнды", АдресХранилищаБазовыхВидовЦен);
	ПараметрыРедактирования.Вставить("ОперандыЗаголовок", НСтр("ru = 'Доступные виды цен'"));
	ПараметрыРедактирования.Вставить("Операторы", АдресХранилищаДереваОператоров);
	ПараметрыРедактирования.Вставить("ВычислятьФормулу", Истина);
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьБазовыйВидЦены(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ДоступныйВидЦены Из ДоступныеБазовыеВидыЦен Цикл
		ДанныеВыбора.Добавить(ДоступныйВидЦены.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Правила округления
#Область НастройкаТаблицыПравилОкругления

&НаКлиенте
Процедура ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте()
	
	Объект.ПравилаОкругленияЦены.Очистить();
	Если Округлять Тогда
		НоваяСтрока = Объект.ПравилаОкругленияЦены.Добавить();
		НоваяСтрока.ТочностьОкругления = ТочностьОкругления;
	КонецЕсли;
	
	НастроитьТаблицуПравилОкругления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПравилаОкругленияПриУпрощенномРежиме(Форма)
	
	Объект = Форма.Объект;
	
	Форма.Округлять = Объект.ПравилаОкругленияЦены.Количество() > 0;
	Если Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		Форма.ТочностьОкругления = Объект.ПравилаОкругленияЦены[0].ТочностьОкругления;
	Иначе
		Форма.ТочностьОкругления = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеНастройкиОкругления(Форма)
	
	ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1
		И Форма.Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И Форма.Объект.ПравилаОкругленияЦены[0].ВычитатьИзРезультата = 0 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	ИначеЕсли Форма.Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Истина;
	Иначе
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьРасширеннуюНастройкуОкругления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТаблицуПравилОкругления(Форма)
	
	Таблица = Форма.Объект.ПравилаОкругленияЦены;
	Если Таблица.Количество() > 0 Тогда
		Таблица.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;
	
	МаксимальныйИндекс = Таблица.Количество() - 1;
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		Если Таблица.Количество() = 1 И Таблица[Индекс].НижняяГраницаДиапазонаЦен = 0 Тогда
			ЦеновойДиапазон = НСтр("ru = '<Все цены>'");
		Иначе
			
			Если Индекс = МаксимальныйИндекс Тогда
				
				ЦеновойДиапазон = НСтр("ru = 'Свыше %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%", Таблица[Индекс].НижняяГраницаДиапазонаЦен);
				
			Иначе
				
				ЦеновойДиапазон = НСтр("ru = 'От %НачалоДиапазона% до %ОкончаниеДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%",    Таблица[Индекс].НижняяГраницаДиапазонаЦен);
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%ОкончаниеДиапазона%", Таблица[Индекс + 1].НижняяГраницаДиапазонаЦен);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.Объект.ВалютаЦены) Тогда
				ЦеновойДиапазон = ЦеновойДиапазон + " " + Форма.Объект.ВалютаЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Таблица[Индекс].ЦеновойДиапазон = ЦеновойДиапазон;
		
		УстановитьПример(Форма, Индекс);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПример(Форма, Индекс)
	
	Таблица = Форма.Объект.ПравилаОкругленияЦены;
	
	Число = 1111.11;
	Если Таблица.Количество() > 1 Тогда
		НижняяГраница = Таблица[Индекс].НижняяГраницаДиапазонаЦен;
		Если Индекс = Таблица.Количество() - 1 Тогда
			ВерхняяГраница = НижняяГраница + 1000;
		Иначе
			ВерхняяГраница = Таблица[Индекс + 1].НижняяГраницаДиапазонаЦен;
		КонецЕсли;
		Число = НижняяГраница + Окр((ВерхняяГраница - НижняяГраница) / 2, 15, 2);
		Если Число + 0.11 < ВерхняяГраница Тогда
			Число = Число + 0.11;
		КонецЕсли;
	КонецЕсли;
	
	Если Таблица[Индекс].ТочностьОкругления <> 0 Или Таблица[Индекс].ВычитатьИзРезультата <> 0 Тогда
		Цена = ЦенообразованиеБольничнаяАптекаКлиентСервер.ОкруглитьЦену(Число, Таблица[Индекс].ТочностьОкругления, Форма.Объект.ВариантОкругления);
		Значение = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПрименитьПсихологическоеОкругление(Цена, Таблица[Индекс].ВычитатьИзРезультата);
		
		ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";
		Таблица[Индекс].Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Округлять %1 до %2'"), Формат(Число, ФорматнаяСтрока), Формат(Значение, ФорматнаяСтрока));
	Иначе
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = НСтр("ru = 'Не округляется'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВерхняяГраницаДиапазонаЦен(СтрокаПравилОкругления)
	
	Индекс = Объект.ПравилаОкругленияЦены.Индекс(СтрокаПравилОкругления);
	
	Если Индекс < Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
		Возврат Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен;
	КонецЕсли;
	
	Возврат -1;
	
КонецФункции

&НаКлиенте
Функция СледующаяГраницаДиапазоновЦены()
	
	Таблица = Объект.ПравилаОкругленияЦены;
	
	ГраницаДиапазона = 0;
	Если Таблица.Количество() > 1 Тогда
		
		БазовоеЗначениеГраницы = Таблица[Таблица.Количество() - 2].НижняяГраницаДиапазонаЦен ;
		
		Если Не ЗначениеЗаполнено(БазовоеЗначениеГраницы) Тогда
			БазовоеЗначениеГраницы = 1;
		КонецЕсли;
		
		ГраницаДиапазона = БазовоеЗначениеГраницы * 10;
		
	КонецЕсли;
	
	Возврат ГраницаДиапазона;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеДиапазонаЦены(ТекущаяСтрока, Отказ)
	
	Таблица = Объект.ПравилаОкругленияЦены;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтрокаТаблицы <> ТекущаяСтрока 
		   И СтрокаТаблицы.НижняяГраницаДиапазонаЦен = ТекущаяСтрока.НижняяГраницаДиапазонаЦен Тогда
			
			Сообщение = НСтр("ru = 'Для диапазона от %НижняяГраница% уже заданы правила округления.'");
			
			ЗначениеНижнейГраницы = ТекущаяСтрока.НижняяГраницаДиапазонаЦен;
			Если ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
				ЗначениеНижнейГраницы = Строка(ЗначениеНижнейГраницы) + " " + Объект.ВалютаЦены;
			КонецЕсли;
			
			Сообщение = СтрЗаменить(Сообщение, "%НижняяГраница%", ЗначениеНижнейГраницы);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				Сообщение,
				,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ПравилаОкругленияЦены", Таблица.Индекс(ТекущаяСтрока) + 1, "ПравилаОкругленияЦеныНижняяГраницаДиапазонаЦен")
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьЭлементовНастройкиОкругления(Форма)
	
	Элементы = Форма.Элементы;
	
	ИспользоватьРасширенныеВозможности = Форма.ИспользоватьРасширенныеВозможностиЦенообразования;
	
	Элементы.ГруппаУпрощенныеПравилаОкругленияЦены.Видимость = Не ИспользоватьРасширенныеВозможности;
	
	ТолькоПросмотрДанныхОкругления = Не Форма.Округлять Или Элементы.Округлять.ТолькоПросмотр;
	Элементы.ТочностьОкругления.ТолькоПросмотр = ТолькоПросмотрДанныхОкругления;
	Элементы.ВариантОкругленияУпрощенно.ТолькоПросмотр  = ТолькоПросмотрДанныхОкругления;
	
КонецПроцедуры

#КонецОбласти // НастройкаТаблицыПравилОкругления

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ЗапретРедактированияРеквизитовОбъектовБольничнаяАптекаКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект,, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта
//
&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, НеИспользуется) Экспорт
	
	НастроитьДоступностьЭлементовНастройкиОкругления(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти // СтандартныеПодсистемы
