#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Идентификатор = "";
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если Не ИдентификаторУникален() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В базе данных уже содержится вид цены с идентификатором ""%1"". Идентификатор должен быть уникальным'"),
			Идентификатор);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Идентификатор",, Отказ);
	КонецЕсли;
	
	Если СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен
		И БазовыйВидЦены = Ссылка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Базовый вид цены не может быть равен текущему виду цены'"),
			ЭтотОбъект, "БазовыйВидЦены",, Отказ);
	КонецЕсли;
	
	Если СпособЗаданияЦены <> Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
		НепроверяемыеРеквизиты.Добавить("БазовыйВидЦены");
		НепроверяемыеРеквизиты.Добавить("Наценка");
		НепроверяемыеРеквизиты.Добавить("ЦеновыеГруппы.БазовыйВидЦены");
		НепроверяемыеРеквизиты.Добавить("ЦеновыеГруппы.Наценка");
	КонецЕсли;
	
	Если СпособЗаданияЦены <> Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
		НепроверяемыеРеквизиты.Добавить("Формула");
		НепроверяемыеРеквизиты.Добавить("ЦеновыеГруппы.Формула");
	КонецЕсли;
	
	Для Индекс = 0 По ПравилаОкругленияЦены.Количество() - 1 Цикл
		
		СтрокаПравилОкругления = ПравилаОкругленияЦены[Индекс];
		ВерхняяГраницаДиапазона = ?(Индекс < ПравилаОкругленияЦены.Количество() - 1, ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен, -1);
		ПроверитьКорректностьПравилОкругленияЦеныВСтроке(СтрокаПравилОкругления, ВерхняяГраницаДиапазона, Отказ);
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если ПравилаОкругленияЦены.Количество() > 1 Тогда
		ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения()
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Осуществляет поиск идентификатора, совпадающего с заполненным в объекте
//
// Возвращаемое значение:
//  Булево - Истина, если идентификатор не найден, Ложь в противном случае
//
Функция ИдентификаторУникален()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	1 КАК Поле
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Идентификатор = &Идентификатор
	|	И ВидыЦен.Ссылка <> &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Осуществляет проверку корректности правил округления цены, указанную пользователем
//
Процедура ПроверитьКорректностьПравилОкругленияЦеныВСтроке(Знач СтрокаПравилОкругления, Знач ВерхняяГраницаДиапазона, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПравилОкругления.ТочностьОкругления) И ВерхняяГраницаДиапазона > 0
	   И СтрокаПравилОкругления.ТочностьОкругления >= ВерхняяГраницаДиапазона Тогда
		
		ТекстОшибки = НСтр("ru='Точность округления в строке %НомерСтроки% списка ""Правила округления цены"" должна быть меньше нижней границы диапазона цен в следующей строке'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаПравилОкругления.НомерСтроки);
		
		ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПравилаОкругленияЦены", СтрокаПравилОкругления.НомерСтроки, "ТочностьОкругления");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПолеОшибки,, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПравилОкругления.ВычитатьИзРезультата)
	   И ВерхняяГраницаДиапазона > 0 И СтрокаПравилОкругления.ВычитатьИзРезультата >= ВерхняяГраницаДиапазона Тогда
		
		ТекстОшибки = НСтр("ru='Психологическое округление в строке %НомерСтроки% списка ""Правила округления цены"" должно быть меньше нижней границы диапазона цен в следующей строке'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаПравилОкругления.НомерСтроки);
		
		ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПравилаОкругленияЦены", СтрокаПравилОкругления.НомерСтроки, "ВычитатьИзРезультата");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПолеОшибки,, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПравилОкругления.ТочностьОкругления)
	   И СтрокаПравилОкругления.ВычитатьИзРезультата >= СтрокаПравилОкругления.ТочностьОкругления Тогда
		
		ТекстОшибки = НСтр("ru='Психологическое округление в строке %НомерСтроки% списка ""Правила округления цены"" должно быть меньше точности округления'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаПравилОкругления.НомерСтроки);
		
		ПолеОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПравилаОкругленияЦены", СтрокаПравилОкругления.НомерСтроки, "ВычитатьИзРезультата");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПолеОшибки,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли