#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыМетаданные = ПустаяСсылка().Метаданные().СтандартныеРеквизиты;
	
	Поля.Добавить(РеквизитыМетаданные.Код.Имя);
	Поля.Добавить(РеквизитыМетаданные.Наименование.Имя);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = СтрШаблон("(%1) %2", Формат(Данные.Код, "ЧН=0; ЧГ=0"), СокрЛП(Данные.Наименование));
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не Параметры.Отбор.Свойство("ПометкаУдаления") Тогда
		Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		Если Не Параметры.Отбор.Свойство("ПометкаУдаления") Тогда
			Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
		КонецЕсли;
		ВыбраннаяФорма = ВидФормы;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	Возврат РаботаСФайлами.РеквизитыРедактируемыеВГрупповойОбработке();
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
//
// Возвращаемое значение: 
//  Массив(Строка) - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("УникальныйИдентификаторСлужебный"); // УИД ссылки предопределен в обработчике заполнения.
	Возврат Результат;
	
КонецФункции

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПаруОписанийРезультатовАнализаИнвентаризируемыхУпаковок(РезультатАнализаУпаковок) Экспорт
	
	ПараОписаний = Новый Структура;
	Если Не ЗначениеЗаполнено(РезультатАнализаУпаковок) Тогда
		Возврат ПараОписаний;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.ФактическоеНаличие                                 КАК ФактическоеНаличие,
	|	ДанныеСправочника.ИнвертированноеЗначениеПоФакту                     КАК ИнвертированныйРезультатАнализа,
	|	ДанныеСправочника.РекомендуемоеДействиеПоСверкеОстатков              КАК ДействиеПоСверкеОстатков,
	|	ДанныеСправочника.РекомендуемоеДействиеПоОформлениюУведомлений       КАК ДействиеПоОформлениюУведомлений,
	|	ДанныеСправочника.ДействияПоСверкеОстатков.ДоступноеДействие         КАК ДействияПоСверкеОстатков,
	|	ДанныеСправочника.ДействияПоОформлениюУведомлений.ДоступноеДействие  КАК ДействияПоОформлениюУведомлений
	|ИЗ
	|	Справочник.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСправочника.ФактическоеНаличие                                 КАК ФактическоеНаличие,
	|	ДанныеСправочника.ИнвертированноеЗначениеПоФакту                     КАК ИнвертированныйРезультатАнализа,
	|	ДанныеСправочника.РекомендуемоеДействиеПоСверкеОстатков              КАК ДействиеПоСверкеОстатков,
	|	ДанныеСправочника.РекомендуемоеДействиеПоОформлениюУведомлений       КАК ДействиеПоОформлениюУведомлений,
	|	ДанныеСправочника.ДействияПоСверкеОстатков.ДоступноеДействие         КАК ДействияПоСверкеОстатков,
	|	ДанныеСправочника.ДействияПоОформлениюУведомлений.ДоступноеДействие  КАК ДействияПоОформлениюУведомлений
	|ИЗ
	|	Справочник.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.ИнвертированноеЗначениеПоФакту = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", РезультатАнализаУпаковок);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка                       = Результаты[0].Выбрать();
	ВыборкаИнвертированнаяПоФакту = Результаты[1].Выбрать();
	
	Если Не Выборка.Следующий() Или Не ВыборкаИнвертированнаяПоФакту.Следующий() Тогда
		Возврат ПараОписаний;
	КонецЕсли;
	
	ПараОписаний.Вставить("ОписаниеРезультата"                , ПреобразоватьВСтруктуруОписаниеРезультата(Выборка));
	ПараОписаний.Вставить("ОписаниеИнвертированногоРезультата", ПреобразоватьВСтруктуруОписаниеРезультата(ВыборкаИнвертированнаяПоФакту));
	
	Возврат ПараОписаний;
	
КонецФункции

Функция ПреобразоватьВСтруктуруОписаниеРезультата(Выборка)
	
	ОписаниеРезультата = Новый Структура;
	ОписаниеРезультата.Вставить("ФактическоеНаличие"             , Выборка.ФактическоеНаличие);
	ОписаниеРезультата.Вставить("ИнвертированныйРезультатАнализа", Выборка.ИнвертированныйРезультатАнализа);
	ОписаниеРезультата.Вставить("ДействиеПоСверкеОстатков"       , Выборка.ДействиеПоСверкеОстатков);
	ОписаниеРезультата.Вставить("ДействиеПоОформлениюУведомлений", Выборка.ДействиеПоОформлениюУведомлений);
	
	СписокДействийПоСверкеОстатков = Новый СписокЗначений;
	ВыборкаДействияПоСверкеОстатков = Выборка.ДействияПоСверкеОстатков.Выбрать();
	Пока ВыборкаДействияПоСверкеОстатков.Следующий() Цикл
		СписокДействийПоСверкеОстатков.Добавить(ВыборкаДействияПоСверкеОстатков.ДоступноеДействие);
	КонецЦикла;
	ОписаниеРезультата.Вставить("ДействияПоСверкеОстатков", СписокДействийПоСверкеОстатков);
	
	СписокДействийПоОформлениюУведомлений = Новый СписокЗначений;
	ВыборкаДействияПоОформлениюУведомлений = Выборка.ДействияПоОформлениюУведомлений.Выбрать();
	Пока ВыборкаДействияПоОформлениюУведомлений.Следующий() Цикл
		СписокДействийПоОформлениюУведомлений.Добавить(ВыборкаДействияПоОформлениюУведомлений.ДоступноеДействие);
	КонецЦикла;
	ОписаниеРезультата.Вставить("ДействияПоОформлениюУведомлений", СписокДействийПоОформлениюУведомлений);
	
	Возврат ОписаниеРезультата;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления информационной базы,
// предназначенный для первоначального заполнения или перезаполнения
// предопределенных данных.
//
Процедура ЗаполнитьПервоначальныеДанные() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Данные = ДанныеЗаполнения();
		
		ОбработанныеОбъекты = Новый Массив;
		Для Каждого ЭлементДанных Из Данные Цикл
			
			Если ОбщегоНазначения.СсылкаСуществует(ЭлементДанных.Ссылка) Тогда
				ОбъектСсылки = ЭлементДанных.Ссылка.ПолучитьОбъект();
				Если ОбъектСсылки.ПометкаУдаления Тогда
					ОбъектСсылки.ПометкаУдаления = Ложь;
				КонецЕсли;
			Иначе
				ОбъектСсылки = Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.СоздатьЭлемент();
				ОбъектСсылки.УстановитьСсылкуНового(ЭлементДанных.Ссылка);
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из ЭлементДанных Цикл
				
				Если КлючИЗначение.Ключ = "Ссылка" Тогда
					
					Продолжить;
					
				ИначеЕсли ТипЗнч(ОбъектСсылки[КлючИЗначение.Ключ]) = Тип("СправочникТабличнаяЧасть.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ДействияПоСверкеОстатков")
					  Или ТипЗнч(ОбъектСсылки[КлючИЗначение.Ключ]) = Тип("СправочникТабличнаяЧасть.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ДействияПоОформлениюУведомлений") Тогда
					
					ТабличныеЧастиОтличаются = ОбъектСсылки[КлючИЗначение.Ключ].Количество() <> КлючИЗначение.Значение.Количество();
					Если Не ТабличныеЧастиОтличаются Тогда
						Для Каждого ЭлементДанныхДействий Из КлючИЗначение.Значение Цикл
							Если ОбъектСсылки[КлючИЗначение.Ключ].НайтиСтроки(ЭлементДанныхДействий).Количество() = 0 Тогда
								ТабличныеЧастиОтличаются = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ТабличныеЧастиОтличаются Тогда
						ОбъектСсылки[КлючИЗначение.Ключ].Очистить();
						Для Каждого ЭлементДанныхДействий Из КлючИЗначение.Значение Цикл
							ЗаполнитьЗначенияСвойств(ОбъектСсылки[КлючИЗначение.Ключ].Добавить(), ЭлементДанныхДействий);
						КонецЦикла;
					КонецЕсли;
					
				Иначе
					
					Если ОбъектСсылки[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						ОбъектСсылки[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОбъектСсылки.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСсылки);
			КонецЕсли;
			
			ОбработанныеОбъекты.Добавить(ОбъектСсылки.Ссылка);
			
		КонецЦикла;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Описания.Ссылка КАК СсылкаНаУдаление
		|ИЗ
		|	Справочник.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП КАК Описания
		|ГДЕ
		|	НЕ Описания.Ссылка В (&ОбработанныеОбъекты)
		|	И НЕ Описания.ПометкаУдаления
		|");
		
		Запрос.УстановитьПараметр("ОбработанныеОбъекты", ОбработанныеОбъекты);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			УдаляемыйОбъект = Выборка.СсылкаНаУдаление.ПолучитьОбъект();
			УдаляемыйОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеЗаполнения()
	
	ТекстJSON = ПолучитьМакет("ДанныеЗаполнения").ПолучитьТекст();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	Данные = ПрочитатьJSON(Чтение);
	
	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось прочитать макет данных заполнения справочника.'");
	КонецЕсли;
	
	ОписаниеСвойствСправочника = ОбщегоНазначения.ОписаниеСвойствОбъекта(Метаданные.Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП, "Имя, Тип");
	ОписаниеСвойствСправочника.Удалить(ОписаниеСвойствСправочника.Найти("ИмяПредопределенныхДанных", "Имя"));
	ОписаниеСвойствСправочника.Удалить(ОписаниеСвойствСправочника.Найти("Предопределенный", "Имя"));
	ОписаниеСвойствСправочника.Удалить(ОписаниеСвойствСправочника.Найти("ПометкаУдаления", "Имя"));
	
	Для Каждого ЭлементДанных Из Данные Цикл
		
		Для Каждого ОписаниеСвойства Из ОписаниеСвойствСправочника Цикл
			
			Если ОписаниеСвойства.Имя = "УникальныйИдентификаторСлужебный" Тогда
				ЭлементДанных.Вставить("УникальныйИдентификаторСлужебный", ЭлементДанных.Ссылка);
			КонецЕсли;
			
			Если Не ЭлементДанных.Свойство(ОписаниеСвойства.Имя) Тогда
				ЭлементДанных.Вставить(ОписаниеСвойства.Имя, Неопределено);
			КонецЕсли;
			
			ЗначениеСвойства = ЭлементДанных[ОписаниеСвойства.Имя];
			
			ПустоеЗначениеСвойства = ОписаниеСвойства.Тип.ПривестиЗначение();
			Если ТипЗнч(ПустоеЗначениеСвойства) = Тип("ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП") Тогда
				// На текущий момент все поля типа Перечисление являются только ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП.
				Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ЭлементДанных[ОписаниеСвойства.Имя] = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП[ЗначениеСвойства];
				Иначе
					ЭлементДанных[ОписаниеСвойства.Имя] = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ПустоеЗначениеСвойства) Тогда
				// Ветка условия не первая, т.к. перечисление тоже ссылка.
				// На текущий момент все поля ссылочного типа являются только СправочникСсылка.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.
				// Это поля Ссылка и ИнвертированноеЗначениеПоФакту.
				ЭлементДанных[ОписаниеСвойства.Имя] = Справочники.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеСвойства));
			Иначе
				ЭлементДанных[ОписаниеСвойства.Имя] = ОписаниеСвойства.Тип.ПривестиЗначение(ЗначениеСвойства);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементДанныхДействия Из ЭлементДанных.ДействияПоСверкеОстатков Цикл
			// На текущий момент ДействияПоСверкеОстатков содержить только одно свойство ДоступноеДействие типа ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП.
			ЗначениеСвойства = ЭлементДанныхДействия.ДоступноеДействие;
			Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				ЭлементДанныхДействия.ДоступноеДействие = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП[ЗначениеСвойства];
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементДанныхДействия Из ЭлементДанных.ДействияПоОформлениюУведомлений Цикл
			// На текущий момент ДействияПоОформлениюУведомлений содержить только одно свойство ДоступноеДействие типа ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП.
			ЗначениеСвойства = ЭлементДанныхДействия.ДоступноеДействие;
			Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				ЭлементДанныхДействия.ДоступноеДействие = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП[ЗначениеСвойства];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецЕсли
