#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру значений по умолчанию для движений.
//
// Возвращаемое значение:
//  Структура - значения по умолчанию
//
Функция ЗначенияПоУмолчанию(Основание, Документ) Экспорт
	
	Значения = ИнтеграцияМДЛП.ДанныеПустойЗаписиРегистра(Метаданные.РегистрыСведений.СтатусыОформленияДокументовМДЛП);
	Значения.Документ           = Документ;
	Значения.Основание          = Основание;
	Значения.СтатусОформления   = Перечисления.СтатусыОформленияДокументовМДЛП.НеОформлено;
	
	Возврат Значения;
	
КонецФункции

// Осуществляет запись в регистр по переданным данным.
//
// Параметры:
//  ДанныеЗаписи - данные для записи в регистр
//
Процедура ДобавитьЗапись(ДанныеЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СтатусыОформленияДокументовМДЛП.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет запись из регистра по переданному документу.
//
// Параметры:
//  Документ - документ, данные по которому необходимо удалить
//
Процедура УдалитьЗаписьРаспоряженияНаОформление(Основание, ПустаяСсылкаНаОформляемыйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументовМДЛП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Основание.Установить(Основание);
	НаборЗаписей.Отбор.Документ.Установить(ПустаяСсылкаНаОформляемыйДокумент);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Рассчитать новый статус оформления документов МДЛП по документу-основанию.
//
// Параметры:
//  МетаданныеДокумента - Метаданные - Метаданные проверяемого документа.
//  ДокументОснование - ДокументСсылка - Ссылка на документ-основание.
//  РеквизитыДокументаОснования - Структура - Реквизиты документа-основания.
//  ЗаписьТребуется - Булево - Признак необходимости записи.
//
Процедура РассчитатьСтатусОформления(МетаданныеДокумента, ДокументОснование, РеквизитыДокументаОснования, ЗаписьТребуется) Экспорт
	
	ПустаяСсылка = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя()).ПустаяСсылка();
	
	МожноОтключитьТребованиеСозданияРаспоряженияНаОформление = ИнтеграцияМДЛППереопределяемый.МожноОтключитьТребованиеСозданияРаспоряженияНаОформление(ДокументОснование);
	
	ВыполнятьЗаписьВРегистр = Ложь;
	ДанныеЗаписи = ЗначенияПоУмолчанию(ДокументОснование, ПустаяСсылка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформления.СтатусОформления   КАК СтатусОформления,
	|	СтатусыОформления.Организация        КАК Организация,
	|	СтатусыОформления.МестоДеятельности  КАК МестоДеятельности,
	|	СтатусыОформления.Ответственный      КАК Ответственный,
	|	СтатусыОформления.Дата               КАК Дата,
	|	СтатусыОформления.Номер              КАК Номер
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовМДЛП КАК СтатусыОформления
	|ГДЕ
	|	СтатусыОформления.Основание = &Основание
	|	И СтатусыОформления.Документ = &ПустаяСсылка
	|");
	
	Запрос.УстановитьПараметр("Основание",    ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если (Не РеквизитыДокументаОснования.Проведен Или Не ЗаписьТребуется) Тогда
			
			УдалитьЗаписьРаспоряженияНаОформление(ДокументОснование, ПустаяСсылка);
			Возврат;
			
		ИначеЕсли МожноОтключитьТребованиеСозданияРаспоряженияНаОформление И Выборка.СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.НеТребуется Тогда
			
			ВыполнятьЗаписьВРегистр = Ложь;
			
		Иначе
			
			ВыполнятьЗаписьВРегистр = Истина;
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, РеквизитыДокументаОснования);
			ДанныеЗаписи.СтатусОформления = СтатусОформления(МетаданныеДокумента, ДокументОснование);
			
		КонецЕсли;
		
	ИначеЕсли РеквизитыДокументаОснования.Проведен И ЗаписьТребуется Тогда
		
		ВыполнятьЗаписьВРегистр = Истина;
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, РеквизитыДокументаОснования);
		ДанныеЗаписи.СтатусОформления = СтатусОформления(МетаданныеДокумента, ДокументОснование);
		
	КонецЕсли;
	
	Если ВыполнятьЗаписьВРегистр Тогда
		
		Если МожноОтключитьТребованиеСозданияРаспоряженияНаОформление Тогда
			// Если было отключено требование создания распоряжения на оформление, но по документу все же формируется уведомление
			// тогда возвращаем все записи в состояние НеОформлено,
			// и только после этого рассчитываем статус оформления для конкретной записи.
			ВключитьТребованиеСозданияРаспоряженияНаОформление(ДокументОснование);
		КонецЕсли;
		
		ДобавитьЗапись(ДанныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Отключает требование создания уведомлений на основании учетного документа.
//
// Параметры:
//  Основание - ДокументСсылка - Ссылка на документ-основание.
//  ПричинаОтключения - Строка - причина, указанная пользователем,
//                               по которой отключается требование создания уведомлений на основании учетного документа.
//
// Возвращаемое значение:
//  Уведомления - Массив - пустые ссылки уведомлений, для определения типов, которые не будут созданы на основании документа-основания.
//                         Могут быть использованы для оповещения об изменении.
//
Функция ОтключитьТребованиеСозданияРаспоряженияНаОформление(Основание, ПричинаОтключения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Уведомления = Новый Массив;
	
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументовМДЛП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Основание.Установить(Основание);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.НеОформлено Тогда
				Запись.СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.НеТребуется;
				Запись.ПричинаСтатусаНеТребуется = ПричинаОтключения;
				Уведомления.Добавить(Запись.Документ);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Возврат Уведомления;
	
КонецФункции

// Включает требование создания уведомлений на основании учетного документа, если ранее требование было отключено
// (см. функцию ОтключитьТребованиеСозданияРаспоряженияНаОформление).
//
// Параметры:
//  Основание - ДокументСсылка - Ссылка на документ-основание.
//
// Возвращаемое значение:
//  Уведомления - Массив - пустые ссылки уведомлений, для определения типов,
//                         по которым восстановлена возможность создания на основании документа-основания.
//                         Могут быть использованы для оповещения об изменении.
//
Функция ВключитьТребованиеСозданияРаспоряженияНаОформление(Основание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Уведомления = Новый Массив;
	
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументовМДЛП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Основание.Установить(Основание);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.НеТребуется Тогда
				Запись.СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.НеОформлено;
				Запись.ПричинаСтатусаНеТребуется = Неопределено;
				Уведомления.Добавить(Запись.Документ);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Возврат Уведомления;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтатусОформления(МетаданныеДокумента, ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя()).ЗапросСтатусаОформления(ДокументОснование);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОформления Тогда
		
		Статус = Перечисления.СтатусыОформленияДокументовМДЛП.ЕстьОшибкиОформления;
		
	ИначеЕсли Выборка.ЕстьПолностьюОформленныеТовары И (Не Выборка.ЕстьНеОформленныеТовары) Тогда
		
		Статус = Перечисления.СтатусыОформленияДокументовМДЛП.Оформлено;
		
	ИначеЕсли Выборка.ЕстьПолностьюОформленныеТовары И Выборка.ЕстьНеОформленныеТовары Тогда
		
		Статус = Перечисления.СтатусыОформленияДокументовМДЛП.ОформленоЧастично;
		
	ИначеЕсли Выборка.ЕстьОформленныеТовары Тогда
		
		Статус = Перечисления.СтатусыОформленияДокументовМДЛП.ОформленоЧастично;
		
	Иначе
		
		Статус = Перечисления.СтатусыОформленияДокументовМДЛП.НеОформлено;
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#КонецЕсли