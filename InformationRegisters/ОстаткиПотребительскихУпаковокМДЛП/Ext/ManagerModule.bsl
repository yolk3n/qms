#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаДанныхИзФайла

Функция ПараметрыЗагрузкиДанныхРезультатовМетода(ТипЗадачи) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипЗадачи", ТипЗадачи);
	
	Если ТипЗадачи = Перечисления.ТипыАсинхронныхЗадачМДЛП.ВыгрузкаДанныхИзРеестраКИЗ Тогда
		ПараметрыЗагрузки = ПараметрыЗагрузкиДанныхРезультатовМетодаИзФайловCSV();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗагрузки);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ЗагрузитьДанныеРезультатовМетода(Данные, ПараметрыЗагрузки) Экспорт
	
	Если ПараметрыЗагрузки.ТипЗадачи = Перечисления.ТипыАсинхронныхЗадачМДЛП.ВыгрузкаДанныхИзРеестраКИЗ Тогда
		Возврат ЗагрузитьДанныеРезультатовМетодаИзАрхива(Данные, ПараметрыЗагрузки);
	КонецЕсли;
	
КонецФункции

Функция ПараметрыЗагрузкиДанныхРезультатовМетодаИзФайловCSV() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Разделитель", ",");
	Параметры.Вставить("ЗагрузкаВТранзакции", Истина);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗагрузитьДанныеРезультатовМетодаИзФайловCSV(ФайлыCSV, ПараметрыЗагрузки)
	
	РабочиеПараметрыЗагрузки = ПараметрыЗагрузкиДанныхРезультатовМетодаИзФайловCSV();
	ЗаполнитьЗначенияСвойств(РабочиеПараметрыЗагрузки, ПараметрыЗагрузки);
	
	Разделитель         = РабочиеПараметрыЗагрузки.Разделитель;
	ЗагрузкаВТранзакции = РабочиеПараметрыЗагрузки.ЗагрузкаВТранзакции;
	
	Результат = СтруктураРезультатаЗагрузкиДанных();
	
	ДополнительныеСвойства = Новый Структура;
	ПередОбработкойФайловCSV(ДополнительныеСвойства);
	
	Если ЗагрузкаВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Для Каждого ФайлCSV Из ФайлыCSV Цикл
			
			ЧтениеДанных = Новый ЧтениеДанных(ФайлCSV.ПолноеИмя, КодировкаТекста.UTF8);
			
			РезультатПолученияИменПолей = ТранспортМДЛПАПИВызовСервера.ПолучитьЗначенияПолейСтрокиФайлаCSV(ЧтениеДанных, Разделитель);
			ИменаПолейФайла = РезультатПолученияИменПолей.ЗначенияПолейСтрокиФайла;
			КоличествоПолейФайла = ИменаПолейФайла.Количество();
			КоличествоСтрокФайла = РезультатПолученияИменПолей.КоличествоПрочитанныхСтрок;
			
			Пока Истина Цикл
				
				Попытка
					РезультатПолученияЗначений = ТранспортМДЛПАПИВызовСервера.ПолучитьЗначенияПолейСтрокиФайлаCSV(ЧтениеДанных, Разделитель);
					ЗначенияПолейСтрокиФайла = РезультатПолученияЗначений.ЗначенияПолейСтрокиФайла;
				Исключение
					ОбработатьОшибкуЗагрузкиФайлаCSV(ЗагрузкаВТранзакции, Результат.Данные.ОшибкиЗаписей, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
				Если РезультатПолученияЗначений.ЧтениеЗавершено Тогда
					Прервать;
				КонецЕсли;
				
				Результат.Данные.КоличествоЗаписей = Результат.Данные.КоличествоЗаписей + 1;
				
				КоличествоСтрокФайла = КоличествоСтрокФайла + РезультатПолученияЗначений.КоличествоПрочитанныхСтрок;
				Если КоличествоПолейФайла <> ЗначенияПолейСтрокиФайла.Количество() Тогда
					ТекстОшибки = НСтр("ru='Обработка строки %1 файла %2: количество значений строки не соответствует количеству колонок заголовка.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КоличествоСтрокФайла, ФайлCSV.Имя);
					ОбработатьОшибкуЗагрузкиФайлаCSV(ЗагрузкаВТранзакции, Результат.Данные.ОшибкиЗаписей, ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
				Попытка
					ОбработатьЗначенияПолейСтрокиФайлаCSV(ИменаПолейФайла, ЗначенияПолейСтрокиФайла, ДополнительныеСвойства);
					Результат.Данные.КоличествоОбработанныхЗаписей = Результат.Данные.КоличествоОбработанныхЗаписей + 1;
				Исключение
					ОбработатьОшибкуЗагрузкиФайлаCSV(ЗагрузкаВТранзакции, Результат.Данные.ОшибкиЗаписей, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
			КонецЦикла;
			
			ЧтениеДанных.Закрыть();
			
		КонецЦикла;
		
		ПослеОбработкиФайловCSV(ДополнительныеСвойства);
		
		Если ЗагрузкаВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ЗагрузкаВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат.Данные.ДатаАктуальности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства.СлужебныеДанные, "ДатаАктуальности");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураРезультатаЗагрузкиДанных()
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	Результат.Вставить("Данные", Новый Структура);
	Результат.Данные.Вставить("КоличествоЗаписей"            , 0);
	Результат.Данные.Вставить("КоличествоОбработанныхЗаписей", 0);
	Результат.Данные.Вставить("ОшибкиЗаписей"                , Новый Массив);
	Результат.Данные.Вставить("ДатаАктуальности"             , Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДанныеРезультатовМетодаИзАрхива(Данные, ПараметрыЗагрузки)
	
	ПапкаНазначения = ФайловаяСистема.СоздатьВременныйКаталог("async.log");
	
	ВключеноЛогированиеАсинхронныхЗадач = ТранспортМДЛПАПИВызовСервера.ВключеноЛогированиеАсинхронныхЗадач();
	
	Результат = ТранспортМДЛПАПИВызовСервера.ИзвлечьФайлыИзАрхива(Данные, ПапкаНазначения, ВключеноЛогированиеАсинхронныхЗадач);
	Если Результат.Статус = "Ошибка" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		НайденныеФайлыCSV = НайтиФайлы(ПапкаНазначения, "*.csv");
		Если НайденныеФайлыCSV.Количество() > 0 Тогда
			Результат = ЗагрузитьДанныеРезультатовМетодаИзФайловCSV(НайденныеФайлыCSV, ПараметрыЗагрузки);
		Иначе
			Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
			Результат.Статус = "Ошибка";
			Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить данные из архива.'");
		КонецЕсли;
	Исключение
		Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ВключеноЛогированиеАсинхронныхЗадач Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(ПапкаНазначения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Процедура ПередОбработкойФайловCSV(ДополнительныеСвойства)
	
	ДополнительныеСвойства.Вставить("ДанныеНабораЗаписей", Новый Соответствие);
	
	ДополнительныеСвойства.Вставить("СлужебныеДанные", Новый Структура);
	ДополнительныеСвойства.СлужебныеДанные.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());
	
	ДополнительныеСвойства.Вставить("ПараметрыОбработки", Новый Структура);
	ДополнительныеСвойства.ПараметрыОбработки.Вставить("КешМестДеятельности", Новый Соответствие);
	ДополнительныеСвойства.ПараметрыОбработки.Вставить("СоответствиеСтатусовУпаковок", ИнтеграцияМДЛПКлиентСервер.СоответствиеВнутреннихСтатусовКИЗПредставлениямСтатусовМДЛП());
	ДополнительныеСвойства.ПараметрыОбработки.Вставить("УдалениеЗаписейВыполнено", Новый Соответствие);
	
КонецПроцедуры

Процедура ОбработатьЗначенияПолейСтрокиФайлаCSV(ИменаПолейФайла, ЗначенияПолейСтрокиФайла, ДополнительныеСвойства)
	
	ДанныеЗаписи = Новый Структура;
	Для Индекс = 0 По ИменаПолейФайла.ВГраница() Цикл
		
		ИмяПоляСтрокиФайла = ИменаПолейФайла[Индекс];
		ЗначениеПоляСтрокиФайла = ЗначенияПолейСтрокиФайла[Индекс];
		Если ЗначениеПоляСтрокиФайла = "null" Тогда
			ЗначениеПоляСтрокиФайла = Неопределено;
		КонецЕсли;
		
		Если ИмяПоляСтрокиФайла = "sgtin" Тогда
			ДанныеЗаписи.Вставить("НомерУпаковки", ЗначениеПоляСтрокиФайла);
		ИначеЕсли ИмяПоляСтрокиФайла = "sys_id" Тогда
			ДанныеЗаписи.Вставить("МестоДеятельности", МестоДеятельностиПоИдентификатору(ЗначениеПоляСтрокиФайла, ДополнительныеСвойства));
		ИначеЕсли ИмяПоляСтрокиФайла = "gtin" Тогда
			ДанныеЗаписи.Вставить("GTIN", ЗначениеПоляСтрокиФайла);
		ИначеЕсли ИмяПоляСтрокиФайла = "status" Тогда
			ДанныеЗаписи.Вставить("ИсходныйСтатус", ЗначениеПоляСтрокиФайла);
			ДанныеЗаписи.Вставить("Статус", ВнутреннийСтатусУпаковкиПоСтатусуМДЛП(ЗначениеПоляСтрокиФайла, ДополнительныеСвойства));
		ИначеЕсли ИмяПоляСтрокиФайла = "status_date" Тогда
			ДанныеЗаписи.Вставить("ДатаСтатуса", ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЗначениеПоляСтрокиФайла));
		ИначеЕсли ИмяПоляСтрокиФайла = "pack3_id" Тогда
			ДанныеЗаписи.Вставить("НомерГрупповойУпаковки", ЗначениеПоляСтрокиФайла);
		ИначеЕсли ИмяПоляСтрокиФайла = "not_on_my_balance" Тогда
			ДанныеЗаписи.Вставить("ДатаОтгрузки", ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЗначениеПоляСтрокиФайла));
		ИначеЕсли ИмяПоляСтрокиФайла = "batch" Тогда
			ДанныеЗаписи.Вставить("НомерСерии", ЗначениеПоляСтрокиФайла);
		ИначеЕсли ИмяПоляСтрокиФайла = "expiration_date"  Тогда
			ДанныеЗаписи.Вставить("ГоденДо", ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЗначениеПоляСтрокиФайла));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоМестуДеятельности = ПолучитьДанныеНабораЗаписейПоМестуДеятельности(ДанныеЗаписи.МестоДеятельности, ДополнительныеСвойства);
	ДанныеПоМестуДеятельности.Добавить(ДанныеЗаписи);
	
	Если ДанныеПоМестуДеятельности.Количество() >= 1000 Тогда
		ЗаписатьДанныеНабораЗаписейПоМестуДеятельности(ДанныеЗаписи.МестоДеятельности, ДанныеПоМестуДеятельности, ДополнительныеСвойства);
		ДанныеПоМестуДеятельности.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиФайловCSV(ДополнительныеСвойства)
	
	Для Каждого КлючИЗначение Из ДополнительныеСвойства.ДанныеНабораЗаписей Цикл
		
		МестоДеятельности = КлючИЗначение.Ключ;
		ДанныеПоМестуДеятельности = КлючИЗначение.Значение;
		
		ЗаписатьДанныеНабораЗаписейПоМестуДеятельности(МестоДеятельности, ДанныеПоМестуДеятельности, ДополнительныеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОшибкуЗагрузкиФайлаCSV(ЗагрузкаВТранзакции, НаборОшибок, НоваяОшибка)
	
	Если ЗагрузкаВТранзакции Тогда
		ВызватьИсключение НоваяОшибка;
	Иначе
		НаборОшибок.Добавить(НоваяОшибка);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДанныеНабораЗаписейПоМестуДеятельности(МестоДеятельности, ДополнительныеСвойства)
	
	ДанныеПоМестуДеятельности = ДополнительныеСвойства.ДанныеНабораЗаписей.Получить(МестоДеятельности);
	Если ДанныеПоМестуДеятельности = Неопределено Тогда
		
		ДанныеПоМестуДеятельности = Новый Массив;
		ДополнительныеСвойства.ДанныеНабораЗаписей.Вставить(МестоДеятельности, ДанныеПоМестуДеятельности);
		
	КонецЕсли;
	
	Возврат ДанныеПоМестуДеятельности;
	
КонецФункции

Процедура ЗаписатьДанныеНабораЗаписейПоМестуДеятельности(МестоДеятельности, Данные, ДополнительныеСвойства)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Старые записи предыдущих загрузок, из регистра,
	// по текущему месту деятельности, удаляем один раз,
	// а потом только записываем новые порции данных без замещения.
	
	Если ДополнительныеСвойства.ПараметрыОбработки.УдалениеЗаписейВыполнено.Получить(МестоДеятельности) <> Истина Тогда
		
		// Удаляем старые записи предыдущих загрузок.
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.МестоДеятельности.Установить(МестоДеятельности);
		Набор.Записать(Истина);
		
		// Устанавливаем пометку, что по текущему месту деятельности старые записи предыдущих загрузок были удалены.
		ДополнительныеСвойства.ПараметрыОбработки.УдалениеЗаписейВыполнено.Вставить(МестоДеятельности, Истина);
		
	КонецЕсли;
	
	// Записываем очередную порцию данных без замещения по текущему месту деятельности.
	Набор = СоздатьНаборЗаписей();
	Набор.ОбменДанными.Загрузка = Истина;
	
	Для Каждого ЭлементДанных Из Данные Цикл
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ЭлементДанных);
		ЗаполнитьЗначенияСвойств(Запись, ДополнительныеСвойства.СлужебныеДанные);
		Запись.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Запись.НомерУпаковки);
		
	КонецЦикла;
	
	Набор.Записать(Ложь);
	
КонецПроцедуры

Функция МестоДеятельностиПоИдентификатору(Идентификатор, ДополнительныеСвойства)
	
	Значение = ДополнительныеСвойства.ПараметрыОбработки.КешМестДеятельности.Получить(Идентификатор);
	Если Значение = Неопределено Тогда
		Значение = Справочники.МестаДеятельностиМДЛП.НайтиПоРеквизиту("Идентификатор", Идентификатор);
		ДополнительныеСвойства.ПараметрыОбработки.КешМестДеятельности.Вставить(Идентификатор, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ВнутреннийСтатусУпаковкиПоСтатусуМДЛП(ИсходныйСтатус, ДополнительныеСвойства)
	
	Возврат ДополнительныеСвойства.ПараметрыОбработки.СоответствиеСтатусовУпаковок.Получить(ИсходныйСтатус);
	
КонецФункции

#КонецОбласти

#КонецЕсли