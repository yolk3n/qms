#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.ОшибкиПередачиЭДО.ПолноеИмя();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыСведений.ОшибкиПередачиЭДО.ПолноеИмя();
	
	ОтработаныВсеДанные = Ложь;
	
	ИдентификаторДокументооборота = Неопределено;
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	ОшибкиПередачиЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
			|ИЗ
			|	РегистрСведений.ОшибкиПередачиЭДО КАК ОшибкиПередачиЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
			|		ПО (ОператорыЭДО.ИдентификаторОператора = ПОДСТРОКА(ОшибкиПередачиЭДО.ИдентификаторОшибки, 1, 3))
			|ГДЕ
			|	(ОператорыЭДО.ИдентификаторОператора ЕСТЬ НЕ NULL
			|	ИЛИ ОшибкиПередачиЭДО.ИдентификаторОшибки = """")
			|	И ОшибкиПередачиЭДО.ИдентификаторДокументооборота > &ИдентификаторДокументооборота
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторДокументооборота";
		
		Запрос.УстановитьПараметр("ИдентификаторДокументооборота", ИдентификаторДокументооборота);
		
		Данные = Запрос.Выполнить().Выгрузить();
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
		
		КоличествоСтрокТаблицы = Данные.Количество();
		Если КоличествоСтрокТаблицы < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрокТаблицы > 0 Тогда
			ИдентификаторДокументооборота = Данные[КоличествоСтрокТаблицы - 1].ИдентификаторДокументооборота;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ОшибкиПередачиЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
		"Документ.ТранспортныйКонтейнерЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ТаблицаДанных = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ТаблицаДанных) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ИдентификаторыОшибок = ИдентификаторыОшибок(ТаблицаДанных.ВыгрузитьКолонку("ИдентификаторДокументооборота"));
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокументооборота", СтрокаТаблицы.ИдентификаторДокументооборота);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.ОшибкиПередачиЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторДокументооборота.Установить(СтрокаТаблицы.ИдентификаторДокументооборота);
			Набор.Прочитать();
			
			Записать = Ложь;
			
			ОбработатьДанные_ЗаполнитьИдентификаторОшибки(Набор, ИдентификаторыОшибок, Записать);
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать ошибки передачи ЭДО по причине:'") + Символы.ПС 
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые ошибки передачи ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция ошибок передачи ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);

	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ОбработатьДанные_ЗаполнитьИдентификаторОшибки(Набор, ИдентификаторыОшибок, Записать)
	
	Для каждого Запись Из Набор Цикл
			
		ИдентификаторОшибки = ИдентификаторыОшибок[Запись.ИдентификаторДокументооборота];
		Если Не ЗначениеЗаполнено(ИдентификаторОшибки) Тогда
			Набор.Очистить();
			Записать = Истина;
		ИначеЕсли Запись.ИдентификаторОшибки <> ИдентификаторОшибки Тогда 
			Записать = Истина;
			Запись.ИдентификаторОшибки = ИдентификаторОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторыОшибок(ИдентификаторыДокументооборотов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыДокументооборотов.ИдентификаторДокументооборота
	|ПОМЕСТИТЬ ИдентификаторыДокументооборотов
	|ИЗ
	|	&ИдентификаторыДокументооборотов КАК ИдентификаторыДокументооборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныйКонтейнерЭДО.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота,
	|	ТранспортныйКонтейнерЭДО.ВнешнийУИД КАК ИдентификаторОшибки
	|ИЗ
	|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|		ПО (ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер = ТранспортныйКонтейнерЭДО.Ссылка)
	|ГДЕ
	|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер ЕСТЬ NULL
	|	И ТранспортныйКонтейнерЭДО.ИдентификаторДокументооборота В
	|		(ВЫБРАТЬ
	|			ИдентификаторыДокументооборотов.ИдентификаторДокументооборота КАК ИдентификаторДокументооборота
	|		ИЗ
	|			ИдентификаторыДокументооборотов КАК ИдентификаторыДокументооборотов)
	|	И ТранспортныйКонтейнерЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|	И ТранспортныйКонтейнерЭДО.ВнешнийУИД <> """"";
	
	ТаблицаИдентификаторыДокументооборотов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторыДокументооборотов.Колонки.Добавить("ИдентификаторДокументооборота",
		Метаданные.РегистрыСведений.ОшибкиПередачиЭДО.Измерения.ИдентификаторДокументооборота.Тип);
	
	Для Каждого ИдентификаторДокументооборота Из ИдентификаторыДокументооборотов Цикл
		НоваяСтрока = ТаблицаИдентификаторыДокументооборотов.Добавить();
		НоваяСтрока.ИдентификаторДокументооборота = ИдентификаторДокументооборота;
	КонецЦикла;
	
	Идентификаторы = Новый Соответствие;
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументооборотов", ТаблицаИдентификаторыДокументооборотов);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Идентификаторы.Вставить(Выборка.ИдентификаторДокументооборота, Выборка.ИдентификаторОшибки);
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли