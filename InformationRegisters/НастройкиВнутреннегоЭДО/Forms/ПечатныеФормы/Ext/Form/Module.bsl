
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазличныеЗначенияМаршрутов = Новый Соответствие;
	ПечатныеФормыМассив = Новый Массив;
	Параметры.Свойство("ПечатнаяФормаПоУмолчанию", ПечатнаяФормаПоУмолчанию);
	ЕстьПечатнаяФормаПоУмолчанию = ЗначениеЗаполнено(ПечатнаяФормаПоУмолчанию);
	Параметры.Свойство("ПечатныеФормы", ПечатныеФормыМассив);
	Для каждого ПечатнаяФорма Из ПечатныеФормыМассив Цикл
		НоваяСтрока = ПечатныеФормы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПечатнаяФорма);
		Если ЕстьПечатнаяФормаПоУмолчанию И НоваяСтрока.Идентификатор = ПечатнаяФормаПоУмолчанию Тогда
			НоваяСтрока.Формировать = 1;
		КонецЕсли;
		Элементы.ПечатнаяФормаПоУмолчанию.СписокВыбора.Добавить(ПечатнаяФорма.Идентификатор, ПечатнаяФорма.Представление);
		РазличныеЗначенияМаршрутов.Вставить(ПечатнаяФорма.МаршрутПодписания);
	КонецЦикла;
	Параметры.Свойство("ВидЭлектроннойПодписи", ВидЭлектроннойПодписи);
	Параметры.Свойство("Организация", Организация);
	
	Если ПечатныеФормы.Количество() = 1 Тогда
		Элементы.ПечатнаяФормаПоУмолчанию.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	РасширенныйРежим = РазличныеЗначенияМаршрутов.Количество() > 1 Или Параметры.РасширенныйРежим;
	ПриИзмененииРасширенногоРежима(ЭтаФорма);
	
	УстановитьУсловноеОформление();
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатныеФормыМаршрутПодписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МаршрутПодписанияЗавершениеВыбора", ЭтотОбъект);
	Отбор = МаршрутыПодписанияБЭДКлиент.НовыйОтборМаршрутовПодписания();
	Отбор.Организация = Организация;
	Если ВидЭлектроннойПодписи <> ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхПодписей.Простая") Тогда
		Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ОднойДоступнойПодписью"));
	КонецЕсли;
	Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ПоПравилам"));
	Отбор.СхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.УказыватьПриСоздании"));
	Отбор.ВидПодписи = ВидЭлектроннойПодписи;
	
	МаршрутыПодписанияБЭДКлиент.ВыбратьМаршрутПодписания(Отбор, Элементы.ПечатныеФормы.ТекущиеДанные.МаршрутПодписания, 
		УникальныйИдентификатор, ОписаниеОповещения);

КонецПроцедуры
&НаКлиенте
Процедура МаршрутПодписанияЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Элементы.ПечатныеФормы.ТекущиеДанные.МаршрутПодписания = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки печатных форм внутреннего электронного документооборота не сохранены.
										|Завершить работу с программой?'")
		Иначе
			Описание = Новый ОписаниеОповещения("ПередЗакрытиемОкнаФормы", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр("ru = 'Настройки печатных форм внутреннего электронного документооборота изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Счетчик = 0;
	Для каждого ПечатнаяФорма Из ПечатныеФормы Цикл
		Если ПечатнаяФорма.Формировать = 1 И РасширенныйРежим Тогда
			Если Не ЗначениеЗаполнено(ПечатнаяФорма.МаршрутПодписания) Тогда
				ТекстСообщения = ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Маршрут подписания'"));
				Поле = СтрШаблон("ПечатныеФормы[%1].МаршрутПодписания", Счетчик);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПечатнаяФормаПоУмолчаниюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПечатнаяФормаПоУмолчанию) Тогда
		СтрокиТаблицы = ПечатныеФормы.НайтиСтроки(Новый Структура("Идентификатор", ПечатнаяФормаПоУмолчанию));
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			СтрокаТаблицы.Формировать = 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПечатныеФормы

&НаКлиенте
Процедура ПечатныеФормыФормироватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПечатныеФормы.ТекущиеДанные;
	Если ТекущиеДанные.Формировать = 1 И ПечатныеФормы.Количество() = 1 Тогда 
		ПечатнаяФормаПоУмолчанию = ТекущиеДанные.Идентификатор;
	ИначеЕсли Не ТекущиеДанные.Формировать = 1 И ПечатнаяФормаПоУмолчанию = ТекущиеДанные.Идентификатор Тогда
		ПечатнаяФормаПоУмолчанию = "";
	КонецЕсли;
	
	Если ТекущиеДанные.Формировать = 2 Тогда
		ТекущиеДанные.Формировать = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ЗакрытьФормуСРезультатом();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйРежим(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаОбОтключенииРасширенногоРежима", ЭтотОбъект);
	Если РасширенныйРежим Тогда
		РазличныеЗначенияМаршрутов = Новый Соответствие;
		Для каждого ПечатнаяФорма Из ПечатныеФормы Цикл
			РазличныеЗначенияМаршрутов.Вставить(ПечатнаяФорма.МаршрутПодписания);
		КонецЦикла;
		Если РазличныеЗначенияМаршрутов.Количество() > 1 Тогда
			ПоказатьВопрос(Оповещение, НСтр("ru = 'При отключении расширенного режима для всех печатных форм будет применяться один маршрут, продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииРасширенногоРежима(Форма) 
	
	Форма.Элементы.ПечатныеФормы.Шапка = Форма.РасширенныйРежим;
	Форма.Элементы.ПечатныеФормыМаршрутПодписания.Видимость = Форма.РасширенныйРежим;
	Форма.Элементы.ФормаРасширенныйРежим.Пометка = Форма.РасширенныйРежим;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбОтключенииРасширенногоРежима(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныйРежим = Не РасширенныйРежим;
	Модифицированность = Истина;
	ПриИзмененииРасширенногоРежима(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОкнаФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуСРезультатом();
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуСРезультатом() 
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	РазличныеЗначенияМаршрутов = Новый Соответствие;
	ПечатныеФормыМассив = Новый Массив;
	
	Если ПечатныеФормы.Количество() Тогда
		ЗначениеМаршрутаОбычныйРежим = ПечатныеФормы[0].МаршрутПодписания;
	Иначе 
		ЗначениеМаршрутаОбычныйРежим = ПредопределенноеЗначение("Справочник.МаршрутыПодписания.ПустаяСсылка");
	КонецЕсли;
	
	Для каждого ПечатнаяФорма Из ПечатныеФормы Цикл
		Если Не РасширенныйРежим И ПечатнаяФорма.МаршрутПодписания <> ЗначениеМаршрутаОбычныйРежим Тогда
			ПечатнаяФорма.МаршрутПодписания = ЗначениеМаршрутаОбычныйРежим;
		КонецЕсли;
		СвойстваСтруктуры = "Формировать, Идентификатор, Представление, МаршрутПодписания";
		ПечатнаяФормаСтруктура = Новый Структура(СвойстваСтруктуры);
		ЗаполнитьЗначенияСвойств(ПечатнаяФормаСтруктура, ПечатнаяФорма);
		ПечатныеФормыМассив.Добавить(ПечатнаяФормаСтруктура);
		РазличныеЗначенияМаршрутов.Вставить(ПечатнаяФорма.МаршрутПодписания);
	КонецЦикла;
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ПечатныеФормы", ПечатныеФормыМассив);
	РезультатЗакрытия.Вставить("ПечатнаяФормаПоУмолчанию", ПечатнаяФормаПоУмолчанию);
	РезультатЗакрытия.Вставить("РасширенныйРежимНастройки", РазличныеЗначенияМаршрутов.Количество() > 1);
	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление() 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПечатныеФормы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПечатныеФормы.МаршрутПодписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПечатныеФормыМаршрутПодписания");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПечатныеФормы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПечатныеФормыПредставление");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПечатныеФормыМаршрутПодписания");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПечатныеФормы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПечатныеФормыПредставление");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПечатныеФормыМаршрутПодписания");
	
КонецПроцедуры

#КонецОбласти
