#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("Контрагент" , Контрагент);
	Параметры.Свойство("Договор"    , Договор);
	
	ЕстьПравоНастройкиОбмена = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	
	Если ЭтоНоваяНастройка() Тогда
		Если Не ЕстьПравоНастройкиОбмена Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции'");
		КонецЕсли;
		Модифицированность = Истина;
		УстановитьПустойКлючНастройкиОтправки();
	Иначе
		ТолькоПросмотр = ЕстьПравоНастройкиОбмена;
		УстановитьКлючНастройкиОтправки();
	КонецЕсли;
	
	Элементы.НадписьОшибкаПерейти.Видимость = ИнтеграцияЭДО.ЕстьПравоОткрытияЖурналаРегистрации();
	
	Если Не ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций()
		И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ДатаНачалаЗагрузкиНастроек = ТекущаяДатаСеанса();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
	ПодготовитьФорму();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИмяСобытияИзмененияУчетнойЗаписиЭДО() Тогда
		ЗаполнитьСписокУчетныхЗаписей();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗначениеЗаполнено(Элементы.УчетнаяЗапись, Истина, Отказ);
	Если Не Отказ Тогда
		ПроверитьНаличиеДоступныхСертификатовУчетнойЗаписи(Отказ);
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Если Не РасширенныйРежим
		И ЕстьОшибкиНастройкиТранспорта(Истина) Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	УстановитьПредупреждениеНастройкиТранспорта(ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	ПриИзмененииУчетнойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗапись(ИдентификаторОтправителя);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Идентификатор_Создать() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИдентификаторПослеСозданияУчетнойЗаписи", ЭтотОбъект);
	
	УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗаписьПрямогоОбмена(Организация, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ИдентификаторПолучателя = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Организация, Контрагент", Организация, Контрагент);
	ИнтеграцияЭДОКлиент.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаПерейтиНажатие(Элемент)
	
	ОтборЖурнала = Новый Структура;
	Если ЗначениеЗаполнено(ДатаНачалаЗагрузкиНастроек) Тогда
		ОтборЖурнала.Вставить("ДатаНачала", ДатаНачалаЗагрузкиНастроек);
	КонецЕсли;
	ОтборЖурнала.Вставить("Уровень", "Ошибка");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или Не ЕстьПравоНастройкиОбмена Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ИсходящиеДокументыДополнительныеНастройки Тогда
		ОткрытьФормуРедактированияРегламентаЭДО(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ЗаписатьНастройки() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьНастройкиОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКаталогТоваров(Команда)
	
	НастройкиОтправкиЭДОСлужебныйКлиент.ОтправитьКаталогТоваров(Организация, Контрагент, Договор,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСоглашениеПоШаблону(Команда)
	
	НастройкиОтправкиЭДОСлужебныйКлиент.СформироватьСоглашениеПоШаблону(Организация, Контрагент, Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныеДокументы(Команда)
	
	СсылкаНаОбъектНастройкиЭДО = СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, Договор);
	ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов(СсылкаНаОбъектНастройкиЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасширенныйРежим(Команда)
	
	ИзменитьРасширенныйРежимНачало();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЭтоНоваяНастройка()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументов.Договор = &Договор
		|	И НастройкиОтправкиЭлектронныхДокументов.ЭтоПрямойОбмен";
	
	Запрос.УстановитьПараметр("Отправитель", Организация);
	Запрос.УстановитьПараметр("Получатель", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура ПодготовитьФорму()
	
	ЗаполнитьСписокУчетныхЗаписей();
	
	ЗаполнитьНастройкиИсходящихДокументов();
	
	ЗаполнитьРежимРедактированияНастроек();
	
	ЗаполнитьУчетнуюЗаписьПоУмолчанию();
	
	НастроитьОсновнуюСтраницуФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокУчетныхЗаписей()
	
	СписокВыбора = Элементы.УчетнаяЗапись.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		НастройкиОтправкиЭДОСлужебный.ЗаполнитьСписокУчетныхЗаписейПрямогоОбмена(СписокВыбора, Организация);
	КонецЕсли;
	
	СписокВыбора.Добавить(Идентификатор_Создать(), НСтр("ru = 'Создать новую учетную запись'"),,
		БиблиотекаКартинок.СоздатьЭлементСписка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиИсходящихДокументов()
	
	СведенияОФорматах = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов();
	
	Форматы = Новый Соответствие;
	Для Каждого СтрокаФормата Из СведенияОФорматах Цикл
		Форматы.Вставить(СтрокаФормата.ИдентификаторФормата, СтрокаФормата.ПредставлениеФормата);
	КонецЦикла;
	ФорматыЭлектронныхДокументов = Новый ФиксированноеСоответствие(Форматы);
	
	ТаблицаНастроек = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНастройкиОтправкиДокументов();
	
	Если Не НастройкиБЭД.ИспользоватьЭлектронныеПодписи() Тогда
		ТаблицаНастроек.ЗаполнитьЗначения(Истина, "ОбменБезПодписи");
	КонецЕсли;
	
	НастройкиОтправки = НастройкиОтправкиЭДО.ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(
		КлючНастройкиОтправки.Отправитель,
		КлючНастройкиОтправки.Получатель,
		КлючНастройкиОтправки.Договор,
		ТаблицаНастроек);
	
	РасширенныйРежим = Ложь;
	
	Если НастройкиОтправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставленияУчетныхЗаписей = Новый Соответствие;
	СписокВыбора = Элементы.УчетнаяЗапись.СписокВыбора;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		ПредставленияУчетныхЗаписей.Вставить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ОписанияВидовДокументов = ЭлектронныеДокументыЭДО.ОписанияВидовДокументов(
		НастройкиОтправки.ВыгрузитьКолонку("ВидДокумента"));
	
	ВидыДокументовПрямойОбмен = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовПрямогоОбмена();
	НастройкиОтправкиДляПрямогоОбмена = НастройкиОтправки.СкопироватьКолонки();
	Для Каждого СтрокаНастроек Из НастройкиОтправки Цикл
		ОписаниеВидаДокумента = ОписанияВидовДокументов[СтрокаНастроек.ВидДокумента];
		
		Если ВидыДокументовПрямойОбмен.Найти(СтрокаНастроек.ВидДокумента) = Неопределено
			Или ОписаниеВидаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НастройкиОтправкиДляПрямогоОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастроек);
	КонецЦикла;
	
	НастройкиОтправкиЭДОСлужебный.ЗаполнитьТаблицуФормыНастроекОтправки(ИсходящиеДокументы,
		НастройкиОтправкиДляПрямогоОбмена);
	
	Для Каждого СтрокаНастроек Из ИсходящиеДокументы Цикл
		Если СтрокаНастроек.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ЭтотОбъект, СтрокаНастроек);
		СтрокаНастроек.УчетнаяЗаписьПредставление = ПредставленияУчетныхЗаписей[СтрокаНастроек.ИдентификаторОтправителя];
		
		НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, СтрокаНастроек.ВерсияФормата);
		Если СтрокаНастроек.ОбменБезПодписи
			И НастройкиРегламента.ТребуетсяОтветнаяПодпись Тогда
			СтрокаНастроек.ТребуетсяОтветнаяПодпись = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРежимРедактированияНастроек()
	
	Если ИсходящиеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныйРежим = Ложь;
	
	СтрокаНастроек = ИсходящиеДокументы[1];
	ИдентификаторОтправителя = СтрокаНастроек.ИдентификаторОтправителя;
	ИдентификаторПолучателя  = СтрокаНастроек.ИдентификаторПолучателя;
	АдресОтправителя         = СтрокаНастроек.АдресОтправителя;
	АдресПолучателя          = СтрокаНастроек.АдресПолучателя;
	СпособОбмена             = СтрокаНастроек.СпособОбменаЭД;
	
	Для Каждого СтрокаНастроек Из ИсходящиеДокументы Цикл
		
		Если Не СтрокаНастроек.ЭтоГруппа
			И (ИдентификаторОтправителя <> СтрокаНастроек.ИдентификаторОтправителя
				ИЛИ ИдентификаторПолучателя <> СтрокаНастроек.ИдентификаторПолучателя
				ИЛИ АдресОтправителя <> СтрокаНастроек.АдресОтправителя
				ИЛИ АдресПолучателя <> СтрокаНастроек.АдресПолучателя) Тогда
			РасширенныйРежим = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнуюЗаписьПоУмолчанию()
	
	Если РасширенныйРежим Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.УчетнаяЗапись.СписокВыбора;
	Если ПустаяСтрока(ИдентификаторОтправителя)
		И СписокВыбора.Количество() = 2 Тогда
		ИдентификаторОтправителя = СписокВыбора[0].Значение;
		ПриИзмененииУчетнойЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОсновнуюСтраницуФормы()
	
	Если Элементы.ИсходящиеДокументы.ТекущаяСтрока = Неопределено Тогда
		Элементы.ИсходящиеДокументы.ТекущаяСтрока = ИсходящиеДокументы[1].ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
	
	ТолькоПросмотр = Не НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	Элементы.Договор.Видимость = ИнтеграцияЭДО.ИспользуютсяДоговорыКонтрагентов();
	
	УстановитьВидимостьРасширенныйРежим();
	
	УстановитьОтображениеТранспортныхНастроек();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРасширенныйРежим()
	
	Если РасширенныйРежим Тогда
		Элементы.УчетнаяЗапись.Видимость = Ложь;
		Элементы.ГруппаНастройки.ТекущаяСтраница = Элементы.СтраницаИсходящиеДокументы;
		Элементы.ГруппаНастройки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаДополнительныеНастройки.Видимость = Ложь;
		Элементы.ИсходящиеДокументыУчетнаяЗаписьПредставление.Видимость = Истина;
	Иначе
		Элементы.УчетнаяЗапись.Видимость = Истина;
		Элементы.ГруппаНастройки.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаДополнительныеНастройки.Видимость = Истина;
		Элементы.ИсходящиеДокументыУчетнаяЗаписьПредставление.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаИзменитьРасширенныйРежим.Пометка = РасширенныйРежим;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьНастройки()
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Результат = ЗаписатьНастройкиНаСервере(КонтекстДиагностики);
	Если Результат Тогда
		Модифицированность = Ложь;
		ОповеститьОбИзмененииНастройкиОтправки();
	Иначе
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьНастройкиНаСервере(КонтекстДиагностики)
	
	Если Не РасширенныйРежим Тогда
		ЗаполнитьИсходящиеДокументыОбщимиНастройками();
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РасширенныйРежим И Не ИспользоватьПодпись Тогда
	ИначеЕсли Не ПроверитьСоответствиеСертификатовМаршрутам(КонтекстДиагностики) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов");
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировки.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировки.УстановитьЗначение("Договор"    , Договор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировки.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировки.УстановитьЗначение("Договор"    , Договор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Отправитель", Контрагент );
		ЭлементБлокировки.УстановитьЗначение("Получатель" , Организация);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОтправителя", "");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПолучателя" , "");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		БлокировкаДанных.Заблокировать();
		
		Запись = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		Запись.Отправитель = Организация;
		Запись.Получатель  = Контрагент;
		Запись.Договор     = Договор;
		Запись.Прочитать();
		Если Запись.Выбран()
			И КлючНастройкиОтправкиИзменен() Тогда
			ТекстСообщения = НСтр("ru = 'Настройка отправки с указанными значениями организации, контрагента, договора уже существует.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЗафиксироватьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Запись.Отправитель     = Организация;
		Запись.Получатель      = Контрагент;
		Запись.Договор         = Договор;
		Запись.ИспользоватьУПД = Ложь;
		Запись.ИспользоватьУКД = Ложь;
		Запись.ЭтоПрямойОбмен  = Истина;
		
		Если КлючНастройкиОтправкиПустой(ЭтотОбъект) Тогда
			Запись.ДатаНачалаДействия = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Запись.Записать();
		
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Организация);
		НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
		НаборЗаписей.Отбор.Договор.Установить(Договор);
		
		Для Каждого СтрокаТаблицы Из ИсходящиеДокументы Цикл
			Если СтрокаТаблицы.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			
			НоваяЗапись.Отправитель = Организация;
			НоваяЗапись.Получатель  = Контрагент;
			НоваяЗапись.Договор     = Договор;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Если ОбщиеНастройкиПолученияОтсутствуют() Тогда
			НаборЗаписей = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Получатель.Установить(Организация);
			НаборЗаписей.Отбор.Отправитель.Установить(Контрагент);
			НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить("");
			НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить("");
			
			ТаблицаПредопределенногоПрофиля = ЭлектронныеДокументыЭДО.ШаблонНастроекОтраженияВУчете(
				ИнтеграцияЭДО.ПрофилиНастроекОтраженияВходящихДокументов().ПервоначальноеЗаполнение);
			Для Каждого СтрокаТаблицы Из ТаблицаПредопределенногоПрофиля Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Получатель       = Организация;
				НоваяЗапись.Отправитель      = Контрагент;
				НоваяЗапись.ВидДокумента     = СтрокаТаблицы.ВидДокумента;
				НоваяЗапись.СпособОбработки  = СтрокаТаблицы.СпособОбработки;
			КонецЦикла;
			
			НаборЗаписей.Записать();
		КонецЕсли;
		
		УстановитьКлючНастройкиОтправки();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Сохранение настроек отправки ЭДО'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			НСтр("ru = 'Не удалось сохранить Настройки отправки
				|Подробнее см. в журнале регистрации.'"));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьСоответствиеСертификатовМаршрутам(КонтекстДиагностики)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоГруппа", Ложь);
	ИспользованныеУчетныеЗаписи = ИсходящиеДокументы.Выгрузить(Отбор, "ИдентификаторОтправителя").ВыгрузитьКолонку(
		"ИдентификаторОтправителя");
	
	ПроверяемаяНастройка = НастройкиОтправкиЭДОСлужебный.НовоеОписаниеПроверяемойНастройки();
	ПроверяемаяНастройка.Отправитель = Организация;
	ПроверяемаяНастройка.Получатель = Контрагент;
	ПроверяемаяНастройка.Договор = Договор;
	ПроверяемаяНастройка.ИдентификаторОтправителя = ИдентификаторОтправителя;
	ПроверяемаяНастройка.ИдентификаторыОтправителя = ИспользованныеУчетныеЗаписи;
	
	Для Каждого СтрокаИсходящегоДокумента Из ИсходящиеДокументы Цикл
		Если СтрокаИсходящегоДокумента.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		Настройка = ПроверяемаяНастройка.Настройки.Добавить();
		ЗаполнитьЗначенияСвойств(Настройка, СтрокаИсходящегоДокумента);
	КонецЦикла;
	
	Возврат НастройкиОтправкиЭДОСлужебный.СертификатыСоответствуютМаршрутам(ПроверяемаяНастройка, КонтекстДиагностики);
	
КонецФункции

&НаСервере
Функция ОбщиеНастройкиПолученияОтсутствуют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель КАК Получатель
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя";
	
	Запрос.УстановитьПараметр("Получатель" , Организация);
	Запрос.УстановитьПараметр("Отправитель", Контрагент);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", "");
	Запрос.УстановитьПараметр("ИдентификаторПолучателя" , "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура УстановитьКлючНастройкиОтправки()
	
	КлючНастройкиОтправки = Новый ФиксированнаяСтруктура("Отправитель, Получатель, Договор",
		Организация, Контрагент, Договор);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПустойКлючНастройкиОтправки()
	
	КлючНастройкиОтправки = Новый ФиксированнаяСтруктура("Отправитель, Получатель, Договор");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиОтправкиПустой(Форма)
	
	Возврат НЕ (ЗначениеЗаполнено(Форма.КлючНастройкиОтправки.Отправитель)
		Или ЗначениеЗаполнено(Форма.КлючНастройкиОтправки.Получатель)
		Или ЗначениеЗаполнено(Форма.КлючНастройкиОтправки.Договор));
		
КонецФункции

&НаСервере
Функция КлючНастройкиОтправкиИзменен()
	
	Возврат КлючНастройкиОтправки.Отправитель <> Организация
		Или КлючНастройкиОтправки.Получатель <> Контрагент
		Или КлючНастройкиОтправки.Договор <> Договор;
		
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииНастройкиОтправки()
	
	КлючЗаписи = НастройкиОтправкиЭДОСлужебныйКлиент.КлючЗаписиНастроекОтправки(КлючНастройкиОтправки.Отправитель,
		КлючНастройкиОтправки.Получатель, КлючНастройкиОтправки.Договор);
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(КлючЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	ЗаполнитьСписокУчетныхЗаписей();
	
	СписокВыбора = Элементы.УчетнаяЗапись.СписокВыбора;
	Если СписокВыбора.Количество() = 2 Тогда
		ИдентификаторОтправителя = СписокВыбора[0].Значение;
	ИначеЕсли СписокВыбора.НайтиПоЗначению(ИдентификаторОтправителя) = Неопределено Тогда
		ИдентификаторОтправителя = "";
	КонецЕсли;
	
	ПриИзмененииУчетнойЗаписи();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУчетнойЗаписи()
	
	ЗаполнитьНастройкиУчетнойЗаписи();
	
	УстановитьОтображениеТранспортныхНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУчетнойЗаписи()
	
	Если ПустаяСтрока(ИдентификаторОтправителя) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = СинхронизацияЭДО.ДанныеУчетнойЗаписи(ИдентификаторОтправителя);
	Если ДанныеУчетнойЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ДанныеУчетнойЗаписи.Организация;
	КонецЕсли;
	
	СпособОбмена = ДанныеУчетнойЗаписи.СпособОбменаЭД;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеТранспортныхНастроек()
	
	Если СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		Элементы.АдресОтправителя.Видимость = Ложь;
		Элементы.АдресПолучателя.Заголовок  = НСтр("ru = 'Электронная почта получателя'");
	Иначе
		Элементы.АдресОтправителя.Видимость = Истина;
		Элементы.АдресОтправителя.Заголовок = НСтр("ru = 'Каталог отправителя'");
		Элементы.АдресПолучателя.Заголовок  = НСтр("ru = 'Каталог получателя'");;
	КонецЕсли;
	
	УстановитьПредупреждениеНастройкиТранспорта();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИдентификаторПослеСозданияУчетнойЗаписи(Идентификатор, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтправителя = Идентификатор;
	
	НастроитьОсновнуюСтраницуФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеДоступныхСертификатовУчетнойЗаписи(Отказ)
	
	УчетныеЗаписиДляПроверки = Новый Соответствие;
	
	Для Каждого СтрокаНастроек Из ИсходящиеДокументы Цикл
		Если СтрокаНастроек.ЭтоГруппа Или СтрокаНастроек.ОбменБезПодписи Тогда
			Продолжить;
		КонецЕсли;
		УчетныеЗаписиДляПроверки.Вставить(
			СтрокаНастроек.ИдентификаторОтправителя, СтрокаНастроек.УчетнаяЗаписьПредставление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УчетныеЗаписиДляПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЭДО = Новый Массив;
	Для Каждого УчетнаяЗаписьДляПроверки Из УчетныеЗаписиДляПроверки Цикл
		ИдентификаторыЭДО.Добавить(УчетнаяЗаписьДляПроверки.Ключ);
	КонецЦикла;
	
	Запросы = Новый Массив;
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&ИдентификаторыЭДО";
	Отбор.ТолькоДействительные = Истина;
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей(
		"СертификатыУчетныхЗаписейЭДО", Отбор);
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		УчетныеЗаписиДляПроверки.Удалить(Выборка.ИдентификаторЭДО);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УчетныеЗаписиДляПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Для Каждого УчетнаяЗаписьБезСертификатов Из УчетныеЗаписиДляПроверки Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В учетной записи ""%1"" нет доступных сертификатов.'"),
			УчетнаяЗаписьБезСертификатов.Значение);
		СтруктураКлюча = Новый Структура("ИдентификаторЭДО", УчетнаяЗаписьБезСертификатов.Ключ);
		КлючЗаписи = РегистрыСведений.УчетныеЗаписиЭДО.СоздатьКлючЗаписи(СтруктураКлюча);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючЗаписи,,"СписокСертификатов");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкиНастройкиТранспорта(Выводить = Ложь)
	
	ЕстьОшибки = Ложь;
	
	ПроверитьЗначениеЗаполнено(Элементы.ИдентификаторПолучателя, Выводить, ЕстьОшибки);
	
	ПроверитьЗначениеЗаполнено(Элементы.АдресПолучателя, Выводить, ЕстьОшибки);
	
	Если СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ПроверитьКорректностьЭлектроннойПочты(Элементы.АдресПолучателя, Выводить, ЕстьОшибки);
	Иначе
		ПроверитьНедопустимыеСимволыВИмениФайла(Элементы.АдресПолучателя, Выводить, ЕстьОшибки);
		
		ПроверитьЗначениеЗаполнено(Элементы.АдресОтправителя, Выводить, ЕстьОшибки);
		ПроверитьНедопустимыеСимволыВИмениФайла(Элементы.АдресОтправителя, Выводить, ЕстьОшибки);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗначениеЗаполнено(Элемент, Выводить, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.ПутьКДанным];
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Выводить Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено.'"), Элемент.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Элемент.ПутьКДанным);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНедопустимыеСимволыВИмениФайла(Элемент, Выводить, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.ПутьКДанным];
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	НедопустимыеСимволы = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ЗначениеРеквизита);
	Если НедопустимыеСимволы.Количество() Тогда
		Отказ = Истина;
		Если Выводить Тогда
			ШаблонТекста = НСтр("ru = 'Наименование папки содержит запрещенные символы (%1)'");
			ТекстСообщения = СтрШаблон(ШаблонТекста, СтрСоединить(НедопустимыеСимволы, " "));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Элемент.ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьЭлектроннойПочты(Элемент, Выводить, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.ПутьКДанным];
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЗначениеРеквизита) Тогда
		Отказ = Истина;
		Если Выводить Тогда
			ТекстСообщения = НСтр("ru = 'Электронная почта указана неверно'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элемент.ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеНастройкиТранспорта(ЕстьОшибки = Неопределено)
	
	Если РасширенныйРежим Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьОшибки = Неопределено Тогда
		ЕстьОшибки = ЕстьОшибкиНастройкиТранспорта();
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Элементы.СтраницаДополнительныеНастройки.Картинка = БиблиотекаКартинок.ПредупреждениеКрасноеБЭД16;
	Иначе
		Элементы.СтраницаДополнительныеНастройки.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяСобытияИзмененияУчетнойЗаписиЭДО()
	
	КлючУчетнойЗаписиЭДО = УчетныеЗаписиЭДОКлиент.КлючУчетнойЗаписи(ИдентификаторОтправителя);
	Возврат ОбщегоНазначенияБЭДКлиент.ИмяСобытияИзмененияОбъекта(КлючУчетнойЗаписиЭДО);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СкрываемыеПоля = Новый Массив;
	СкрываемыеПоля.Добавить("ИсходящиеДокументыФормировать");
	СкрываемыеПоля.Добавить("ИсходящиеДокументыДополнительныеНастройки");
	СкрываемыеПоля.Добавить("ИсходящиеДокументыУчетнаяЗаписьПредставление");
	НастройкиОтправкиЭДОСлужебный.УстановитьУсловноеОформлениеДляГруппировкиНастроек(УсловноеОформление, СкрываемыеПоля);
	
КонецПроцедуры

#Область РасширенныйРежим

&НаКлиенте
Процедура ИзменитьРасширенныйРежимНачало()
	
	Если РасширенныйРежим Тогда
		Описание = Новый ОписаниеОповещения("ИзменитьРасширенныйРежимЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Изменения расширенного режима будут очищены.
			|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВключитьРасширенныйРежим();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасширенныйРежимЗавершение(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыключитьРасширенныйРежим();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРасширенныйРежим()
	
	РасширенныйРежим = Истина;
	
	ЗаполнитьИсходящиеДокументыОбщимиНастройками();
	
	УстановитьВидимостьРасширенныйРежим();
	
КонецПроцедуры

&НаСервере
Процедура ВыключитьРасширенныйРежим()
	
	РасширенныйРежим = Ложь;
	
	ЗаполнитьОбщиеНастройкиПоИсходящимДокументам();
	
	ЗаполнитьИсходящиеДокументыОбщимиНастройками();
	
	УстановитьВидимостьРасширенныйРежим();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсходящиеДокументыОбщимиНастройками()
	
	ЭлементСписка = Элементы.УчетнаяЗапись.СписокВыбора.НайтиПоЗначению(ИдентификаторОтправителя);
	Если ЭлементСписка = Неопределено Тогда
		УчетнаяЗаписьПредставление = "";
	Иначе
		УчетнаяЗаписьПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИсходящиеДокументы Цикл
		СтрокаТаблицы.СпособОбменаЭД             = СпособОбмена;
		СтрокаТаблицы.ИдентификаторОтправителя   = ИдентификаторОтправителя;
		СтрокаТаблицы.ИдентификаторПолучателя    = ИдентификаторПолучателя;
		СтрокаТаблицы.УчетнаяЗаписьПредставление = УчетнаяЗаписьПредставление;
		СтрокаТаблицы.АдресОтправителя           = АдресОтправителя;
		СтрокаТаблицы.АдресПолучателя            = АдресПолучателя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбщиеНастройкиПоИсходящимДокументам()
	
	Если ИсходящиеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ИсходящиеДокументы[1];
	
	СпособОбмена             = СтрокаТаблицы.СпособОбменаЭД;
	ИдентификаторОтправителя = СтрокаТаблицы.ИдентификаторОтправителя;
	ИдентификаторПолучателя  = СтрокаТаблицы.ИдентификаторПолучателя;
	ИспользоватьПодпись      = Не СтрокаТаблицы.ОбменБезПодписи;
	МаршрутПодписания        = СтрокаТаблицы.МаршрутПодписания;
	АдресОтправителя         = СтрокаТаблицы.АдресОтправителя;
	АдресПолучателя          = СтрокаТаблицы.АдресПолучателя;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеРегламентаЭДО

&НаКлиенте
Процедура ОткрытьФормуРедактированияРегламентаЭДО(ТекущиеДанные)
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииРедактированияРегламентаЭДО", ЭтотОбъект);
	
	ПараметрыФормы = НастройкиОтправкиЭДОСлужебныйКлиент.НовыеПараметрыНастройкиРегламентаПрямогоОбмена();
	ПараметрыФормы.Организация                     = Организация;
	ПараметрыФормы.СпособОбмена                    = ТекущиеДанные.СпособОбменаЭД;
	ПараметрыФормы.АдресОтправителя                = ТекущиеДанные.АдресОтправителя;
	ПараметрыФормы.АдресПолучателя                 = ТекущиеДанные.АдресПолучателя;
	ПараметрыФормы.УчетнаяЗаписьПредставление      = ТекущиеДанные.УчетнаяЗаписьПредставление;
	ПараметрыФормы.ИдентификаторОтправителя        = ТекущиеДанные.ИдентификаторОтправителя;
	ПараметрыФормы.ИдентификаторПолучателя         = ТекущиеДанные.ИдентификаторПолучателя;
	ПараметрыФормы.ВидДокумента                    = ТекущиеДанные.ВидДокумента;
	ПараметрыФормы.ВерсияФормата                   = ТекущиеДанные.ВерсияФормата;
	ПараметрыФормы.ИспользоватьПодпись             = Не ТекущиеДанные.ОбменБезПодписи;
	ПараметрыФормы.МаршрутПодписания               = ТекущиеДанные.МаршрутПодписания;
	ПараметрыФормы.ОжидатьОтветнуюПодпись          = ТекущиеДанные.ТребуетсяОтветнаяПодпись;
	ПараметрыФормы.ОжидатьИзвещение                = ТекущиеДанные.ТребуетсяИзвещениеОПолучении;
	ПараметрыФормы.ВыгружатьДополнительныеСведения = ТекущиеДанные.ВыгружатьДополнительныеСведения;
	ПараметрыФормы.ЗаполнениеКодаТовара            = ТекущиеДанные.ЗаполнениеКодаТовара;
	ПараметрыФормы.РасширенныйРежим                = РасширенныйРежим;
	ПараметрыФормы.ВерсияФорматаУстановленаВручную = ТекущиеДанные.ВерсияФорматаУстановленаВручную;
	
	НастройкиОтправкиЭДОСлужебныйКлиент.НастроитьРегламентЭДОПрямогоОбмена(ПараметрыФормы, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииРедактированияРегламентаЭДО(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация <> Результат.Организация Тогда
		Организация = Результат.Организация;
		ПриИзмененииОрганизации();
	КонецЕсли;
	
	ТекущиеДанные.СпособОбменаЭД                  = Результат.СпособОбмена;
	ТекущиеДанные.ВерсияФормата                   = Результат.ВерсияФормата;
	ТекущиеДанные.АдресОтправителя                = Результат.АдресОтправителя;
	ТекущиеДанные.АдресПолучателя                 = Результат.АдресПолучателя;
	ТекущиеДанные.УчетнаяЗаписьПредставление      = Результат.УчетнаяЗаписьПредставление;
	ТекущиеДанные.ИдентификаторОтправителя        = Результат.ИдентификаторОтправителя;
	ТекущиеДанные.ИдентификаторПолучателя         = Результат.ИдентификаторПолучателя;
	ТекущиеДанные.ОбменБезПодписи                 = Не Результат.ИспользоватьПодпись;
	ТекущиеДанные.МаршрутПодписания               = Результат.МаршрутПодписания;
	ТекущиеДанные.ТребуетсяОтветнаяПодпись        = Результат.ОжидатьОтветнуюПодпись;
	ТекущиеДанные.ТребуетсяИзвещениеОПолучении    = Результат.ОжидатьИзвещение;
	ТекущиеДанные.ВыгружатьДополнительныеСведения = Результат.ВыгружатьДополнительныеСведения;
	ТекущиеДанные.ЗаполнениеКодаТовара            = Результат.ЗаполнениеКодаТовара;
	ТекущиеДанные.ВерсияФорматаУстановленаВручную = Результат.ВерсияФорматаУстановленаВручную;
	
	ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Форма, СтрокаТаблицы)
	
	ПредставлениеФормата = Форма.ФорматыЭлектронныхДокументов.Получить(СтрокаТаблицы.ВерсияФормата);
	
	МассивСтрок = Новый Массив;
	Если ПредставлениеФормата <> Неопределено Тогда
		МассивСтрок.Добавить(ПредставлениеФормата);
	Иначе
		МассивСтрок.Добавить(НСтр("ru = 'Произвольный документ'"));
	КонецЕсли;
	
	МассивСтрок.Добавить(?(СтрокаТаблицы.ТребуетсяОтветнаяПодпись,
		НСтр("ru = 'с ответной подписью'"), НСтр("ru = 'без ответной подписи'")));
	
	СтрокаТаблицы.ДополнительныеНастройки = СтрСоединить(МассивСтрок,", ");
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеНастройкиОбмена

&НаКлиенте
Процедура УдалитьНастройкиОтправки()
	
	Если КлючНастройкиОтправкиПустой(ЭтотОбъект)
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Договор) Тогда
		ТекстВопроса = НСтр("ru = 'Удалить настройку обмена с контрагентом?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Настройка обмена с контрагентом будет удалена. Отправка электронных документов контрагенту будет невозможна.
			|Продолжить?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьНастройкиОтправкиПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкиОтправкиПослеВопроса(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Если КлючНастройкиОтправкиПустой(ЭтотОбъект) Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если УдалитьНастройкиОтправкиНаСервере(КлючНастройкиОтправки) Тогда
		ОповеститьОбИзмененииНастройкиОтправки();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьНастройкиОтправкиНаСервере(Знач КлючНастройкиОтправки)
	
	Организация = КлючНастройкиОтправки.Отправитель;
	Контрагент  = КлючНастройкиОтправки.Получатель;
	Договор     = КлючНастройкиОтправки.Договор;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , Договор);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , Договор);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Организация);
		НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
		НаборЗаписей.Отбор.Договор.Установить(Договор);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Организация);
		НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
		НаборЗаписей.Отбор.Договор.Установить(Договор);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Удаление настроек отправки ЭДО'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			НСтр("ru = 'Не удалось удалить настройки отправки
				|Подробнее см. в журнале регистрации.'"));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, Договор)
	
	Возврат НастройкиОтправкиЭДОСлужебный.СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, Договор);
	
КонецФункции

#КонецОбласти

#Область ТипыИдентификаторовУчетныхЗаписей

&НаКлиентеНаСервереБезКонтекста
Функция Идентификатор_Создать()
	
	Возврат "Создать";
	
КонецФункции

#КонецОбласти

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено)
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 

#КонецОбласти