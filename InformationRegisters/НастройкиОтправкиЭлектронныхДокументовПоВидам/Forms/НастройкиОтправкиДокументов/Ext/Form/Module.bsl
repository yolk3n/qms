
#Область ОписаниеПеременных

&НаКлиенте
Перем НастройкаРегламентаЭДО;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоНастройкиОбмена = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ЕстьПравоОбработкиЭД     = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоЧтенияЭД        = ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
	
	ИспользуютсяДоговорыКонтрагентов = ИнтеграцияЭДО.ИспользуютсяДоговорыКонтрагентов();
	
	ТолькоПросмотр = Не ЕстьПравоНастройкиОбмена;
	Элементы.ФормаУдалить.Доступность = ЕстьПравоНастройкиОбмена;
	
	ИспользуемыеТипыДокументов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	ИспользуетсяКаталогТоваров = ИспользуемыеТипыДокументов[Перечисления.ТипыДокументовЭДО.КаталогТоваров] <> Неопределено;
	
	Элементы.ФормаОтправитьКаталогПоСоглашению.Видимость    = ЕстьПравоОбработкиЭД И ИспользуетсяКаталогТоваров;
	Элементы.ФормаСформироватьСоглашениеПоШаблону.Видимость = ЕстьПравоОбработкиЭД;
	Элементы.ФормаОткрытьЭлектронныеДокументы.Видимость     = ЕстьПравоЧтенияЭД;
	Элементы.ДоговорКонтрагента.Видимость                   = ИспользуютсяДоговорыКонтрагентов;
	Элементы.ДекорацияСтатусПриглашения.Видимость           = ИспользуютсяДоговорыКонтрагентов;
	
	ВидыДокументовЗаменяемыеУПДУКД = ЭлектронныеДокументыЭДО.ВидыДокументовЗаменяемыеУПДУКД();
	ВидыДокументовУПД = ВидыДокументовЗаменяемыеУПДУКД.УПД;
	ВидыДокументовУКД = ВидыДокументовЗаменяемыеУПДУКД.УКД;
	
	УстановитьУсловноеОформление();
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;
	ИспользуютсяНастройкиФормированияУниверсальныхДокументов = ИнтеграцияЭДО.ИспользуютсяНастройкиФормированияУниверсальныхДокументов();
	Если Не ИспользуютсяНастройкиФормированияУниверсальныхДокументов Тогда
		Элементы.ГруппаИспользовать.Видимость = Ложь;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере(Параметры);
	
	УстановитьКлючНастройкиОтправки(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки отправки не сохранены. Завершить работу с программой?'")
		Иначе
			Описание = Новый ОписаниеОповещения("ПередЗакрытиемОкнаФормы", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр("ru = 'Настройки отправки изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ОбновитьТекущиеДелаЭДО"
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений")
		И НастройкаРегламентаЭДО <> Истина Тогда
		
		ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОтправкаПриглашенияССозданиемНастроек" Тогда
		УстановитьКлючНастройкиОтправки(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьТекущуюСтроку(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитыДляУдаления = Новый Массив;
	
	Если РасширенныйРежим Тогда
		РеквизитыДляУдаления.Добавить("ИдентификаторОтправителя");
		РеквизитыДляУдаления.Добавить("ИдентификаторПолучателя");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, РеквизитыДляУдаления);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораУчетныхЗаписей();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораУчетныхЗаписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	
	УстановитьОтборПоУПД_УКД(ЭтотОбъект);
	
	СтрокаДляАктивизации = ТекущаяСтрокаПослеИзмененияУПДУКД("УПД", ИспользоватьУПД);
	Если СтрокаДляАктивизации <> Неопределено Тогда
		Элементы.ИсходящиеДокументы.ТекущаяСтрока = СтрокаДляАктивизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	
	УстановитьОтборПоУПД_УКД(ЭтотОбъект);
	
	СтрокаДляАктивизации = ТекущаяСтрокаПослеИзмененияУПДУКД("УКД", ИспользоватьУКД);
	Если СтрокаДляАктивизации <> Неопределено Тогда
		Элементы.ИсходящиеДокументы.ТекущаяСтрока = СтрокаДляАктивизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ЗаполнитьИдентификаторыЭДО();
	УправлениеФормой(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации());
	
	СформироватьКонтекст(ОбновляемыеКатегории); 
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ЗаполнитьИдентификаторыЭДО();
	УправлениеФормой(ЭтотОбъект); 
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ОператорАбонента());
	
	СформироватьКонтекст(ОбновляемыеКатегории); 
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПодключенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(ИдентификаторОтправителя)
		Или ПустаяСтрока(ИдентификаторПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо записать изменения в настройке отправки.
                             |Продолжить?'");
		
		Описание = Новый ОписаниеОповещения("ПослеВопросаНажатиеСтатусПодключения", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОткрытьПриглашение(ИдентификаторОтправителя, ИдентификаторПолучателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Организация, Контрагент", Организация, Контрагент);
	ИнтеграцияЭДОКлиент.ОткрытьФормуВыбораДоговора(
		ПараметрыФормы, Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		Или Не ЕстьПравоНастройкиОбмена Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ИсходящиеДокументыДополнительныеНастройки Тогда
		ОткрытьФормуРедактированияРегламентаЭДО(ТекущиеДанные);
	ИначеЕсли Поле = Элементы.ИсходящиеДокументыСтатусПриглашения Тогда
		ОткрытьПриглашение(ТекущиеДанные.ИдентификаторОтправителя, ТекущиеДанные.ИдентификаторПолучателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыФормироватьПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПДКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСГИСЭПДКлиент");		
		МодульОбменСГИСЭПДКлиент.ИсходящиеДокументыФормироватьПриИзменении(Элементы.ИсходящиеДокументы.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения("НажатиеЗаписать", ЭтотОбъект, Новый Структура);
	ВыполняемоеОповещение.ДополнительныеПараметры.Вставить("ОповещениеКоманды", ВыполняемоеОповещение);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения("НажатиеЗаписатьИЗакрыть", ЭтотОбъект, Новый Структура);
	ВыполняемоеОповещение.ДополнительныеПараметры.Вставить("ОповещениеКоманды", ВыполняемоеОповещение);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКаталогПоСоглашению(Команда)
	
	НастройкиОтправкиЭДОСлужебныйКлиент.ОтправитьКаталогТоваров(
		Организация, Контрагент, ДоговорКонтрагента, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныеДокументы(Команда)
	
	НастройкиЭДОСсылка = СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента);
	ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов(НастройкиЭДОСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСоглашениеПоШаблону(Команда)
	
	НастройкиОтправкиЭДОСлужебныйКлиент.СформироватьСоглашениеПоШаблону(
		Организация, Контрагент, ДоговорКонтрагента);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасширенныйРежим(Команда)
	
	Если РасширенныйРежим Тогда
		
		Описание = Новый ОписаниеОповещения("ИзменитьРасширенныйРежимПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Изменения расширенного режима будут очищены.
                                       |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		РасширенныйРежим = Не РасширенныйРежим;
		ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьНастройкуОтправки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеДокументы.ЦветГиперссылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИсходящиеДокументыСтатусПриглашения");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеДокументы.ЦветГиперссылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИсходящиеДокументыСтатусПриглашения");
	
	СкрываемыеПоля = Новый Массив;
	СкрываемыеПоля.Добавить("ИсходящиеДокументыФормировать");
	СкрываемыеПоля.Добавить("ИсходящиеДокументыДополнительныеНастройки");
	СкрываемыеПоля.Добавить("ИсходящиеДокументыСтатусПриглашения");
	НастройкиОтправкиЭДОСлужебный.УстановитьУсловноеОформлениеДляГруппировкиНастроек(УсловноеОформление, СкрываемыеПоля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	УстановитьТекущуюСтроку(Форма);
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ИсходящиеДокументы.ТекущаяСтрока = Неопределено Тогда
		Элементы.ИсходящиеДокументы.ТекущаяСтрока = Форма.ИсходящиеДокументы[1].ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.УчетнаяЗаписьКонтрагента.Видимость            = Не Форма.РасширенныйРежим;
	Элементы.УчетнаяЗаписьОрганизации.Видимость            = Не Форма.РасширенныйРежим;
	Элементы.СтатусПриглашения.Видимость                   = Не Форма.РасширенныйРежим;
	Элементы.ФормаРасширенныйРежим.Пометка                 = Форма.РасширенныйРежим;
	Элементы.ИсходящиеДокументыСтатусПриглашения.Видимость = Форма.РасширенныйРежим;
	
	ДоступенВыборУчетныхЗаписей = ЗначениеЗаполнено(Форма.Организация) И ЗначениеЗаполнено(Форма.Контрагент);
	Элементы.УчетнаяЗаписьОрганизации.Доступность = ДоступенВыборУчетныхЗаписей;
	Элементы.УчетнаяЗаписьКонтрагента.Доступность = ДоступенВыборУчетныхЗаписей;
	
	Если ДоступенВыборУчетныхЗаписей Тогда
		ПодсказкаВводаУчетныхЗаписей = НСтр("ru = 'Выберите учетную запись'");
	Иначе 
		ПодсказкаВводаУчетныхЗаписей = "";
	КонецЕсли;
	Элементы.УчетнаяЗаписьОрганизации.ПодсказкаВвода = ПодсказкаВводаУчетныхЗаписей;
	Элементы.УчетнаяЗаписьКонтрагента.ПодсказкаВвода = ПодсказкаВводаУчетныхЗаписей;
	
	УстановитьОтборПоУПД_УКД(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоУПД_УКД(Форма)
	
	Если Не Форма.ИспользуютсяНастройкиФормированияУниверсальныхДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ВидыДокументовУПД = Форма.ВидыДокументовУПД;
	ВидыДокументовУКД = Форма.ВидыДокументовУКД;
	Элементы = Форма.Элементы;
	
	Для Каждого СтрокаТЧ Из Форма.ИсходящиеДокументы Цикл
		
		СтрокаТЧ.Отображать = Истина;
		
		Если Не Форма.ИспользоватьУПД И СтрокаТЧ.ВидДокумента = ВидыДокументовУПД.ВидДокумента Тогда
			СтрокаТЧ.Отображать = Ложь;
		КонецЕсли;
		
		Если Не Форма.ИспользоватьУКД И СтрокаТЧ.ВидДокумента = ВидыДокументовУКД.ВидДокумента Тогда
			СтрокаТЧ.Отображать = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ИсходящиеДокументы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Отображать", Истина));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеСтатусаПриглашения(СтатусПриглашений)
	
	Результат = Новый Структура("ТекстЗаголовка, ЦветСсылки");
	Результат.ТекстЗаголовка = Строка(СтатусПриглашений);
	Результат.ЦветСсылки = 0;
	
	Если СтатусПриглашений = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Отклонено")
			Или СтатусПриглашений = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Ошибка") Тогда
			
			Результат.ЦветСсылки = 1;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(Знач ПараметрыФормы)
	
	Если ПараметрыФормы.Свойство("КлючНастроекОтправки") Тогда
		Организация = ПараметрыФормы.КлючНастроекОтправки.Отправитель;
		Контрагент = ПараметрыФормы.КлючНастроекОтправки.Получатель;
		ДоговорКонтрагента = ПараметрыФормы.КлючНастроекОтправки.Договор;
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("Ключ") Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Если ТипЗнч(ПараметрыФормы.Ключ) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
				Организация = ПараметрыФормы.Ключ.Организация;
			Иначе
				Организация = ПараметрыФормы.Ключ.Отправитель;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Если ТипЗнч(ПараметрыФормы.Ключ) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
				Контрагент = ПараметрыФормы.Ключ.Контрагент;
			Иначе
				Контрагент = ПараметрыФормы.Ключ.Получатель;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ТипЗнч(ПараметрыФормы.Ключ) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
				ДоговорКонтрагента = ПараметрыФормы.Ключ.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = ПараметрыФормы.Ключ.Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("СоздатьПоДоговору")
		И ПараметрыФормы.СоздатьПоДоговору <> Неопределено Тогда
		
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = ПараметрыФормы.СоздатьПоДоговору = Ложь;
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Организация);
		
	ИначеЕсли ПараметрыФормы.Свойство("Создание")
		И ПараметрыФормы.Создание = Истина Тогда
		
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр        = Ложь;
		Элементы.Контрагент.ТолькоПросмотр         = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ПараметрыФормы)
	
	ФорматыЭД.Загрузить(ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов());
	
	ТолькоПросмотр = Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам);
	
	ЗаполнитьРеквизитыФормы(ПараметрыФормы);
	
	Если Не ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций()
		И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ТаблицаНастроек = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНастройкиОтправкиДокументов();
	ТаблицаНастроек.Колонки.Добавить("ЭтоНовыйВидЭД", Новый ОписаниеТипов("Булево"));
	НастройкиОтправки = НастройкиОтправкиЭДО.ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(
		Организация, Контрагент, ДоговорКонтрагента, ТаблицаНастроек);
	
	ПолучитьОбщиеПараметрыНастроек();
	
	ЗаполнитьПредставлениеНастроек(ЭтотОбъект, ТаблицаНастроек, НастройкиОтправки);
	
	НастройкиОтправкиЭДОСлужебный.ЗаполнитьТаблицуФормыНастроекОтправки(ИсходящиеДокументы, ТаблицаНастроек);
	
	РасширенныйРежим = ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеНастроек(Форма, НастройкиПоУмолчанию, Знач ТекущиеНастройки)
	
	СтрокаСЗаполненнымиДанными = Неопределено;
	Для Каждого ТекСтрока Из НастройкиПоУмолчанию Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ВидДокумента", ТекСтрока.ВидДокумента);
		
		СтрокиТаблицы = ТекущиеНастройки.НайтиСтроки(Отбор);
		
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокиТаблицы[0]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ИдентификаторОтправителя) И ЗначениеЗаполнено(ТекСтрока.ИдентификаторПолучателя) Тогда
			СтрокаСЗаполненнымиДанными = ТекСтрока;
		КонецЕсли;
		ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Форма, ТекСтрока);
		
	КонецЦикла;
	
	Если СтрокаСЗаполненнымиДанными <> Неопределено Тогда
		Отбор = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя", "", "");
		СтрокиСНезаполненнымиИдентификаторами = НастройкиПоУмолчанию.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из СтрокиСНезаполненнымиИдентификаторами Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаСЗаполненнымиДанными, "ИдентификаторОтправителя, ИдентификаторПолучателя, СпособОбменаЭД");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусПриглашения(Знач ИдентификаторОтправителя, Знач ИдентификаторПолучателя)
	
	СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
	
	ОтборПриглашений = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.ИдентификаторОрганизации = "&ИдентификаторОрганизации";
	ОтборПриглашений.ИдентификаторКонтрагента = "&ИдентификаторКонтрагента";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", ОтборПриглашений);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросПриглашений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Приглашения.Статус
	|ИЗ
	|	Приглашения КАК Приглашения";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторПолучателя);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтатусПодключения = Выборка.Статус;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СформироватьПредставлениеСтатусаПриглашения(СтатусПодключения);
	
КонецФункции

&НаСервере
Процедура ПолучитьОбщиеПараметрыНастроек()
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроек.Отправитель = Организация;
	КлючНастроек.Получатель = Контрагент;
	КлючНастроек.Договор = ДоговорКонтрагента;
	ОбщиеПараметрыНастроек = НастройкиОтправкиЭДОСлужебный.ОбщиеПараметрыНастроек(КлючНастроек);
	
	ИспользоватьУПД 			= ОбщиеПараметрыНастроек.ИспользуетсяУПД;
	ИспользоватьУКД 			= ОбщиеПараметрыНастроек.ИспользуетсяУКД;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеУчетныхЗаписей

&НаКлиенте
Процедура ОткрытьФормуВыбораУчетныхЗаписей()
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииВыбораУченыхЗаписей", ЭтотОбъект);
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроек.Отправитель = Организация;
	КлючНастроек.Получатель = Контрагент;
	КлючНастроек.Договор = ДоговорКонтрагента;
	
	ПараметрыВыбора = НастройкиОтправкиЭДОСлужебныйКлиент.НовыеПараметрыТранспортныхНастроек();
	ПараметрыВыбора.КлючНастроек = КлючНастроек;
	ПараметрыВыбора.ИдентификаторОтправителя = ИдентификаторОтправителя;
	ПараметрыВыбора.ИдентификаторПолучателя = ИдентификаторПолучателя;
	НастройкиОтправкиЭДОСлужебныйКлиент.ОткрытьТранспортныеНастройкиОтправки(ПараметрыВыбора, ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеИдентификаторы()
	
	Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Очистить();
	Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент) Тогда
		ДоступныеИдентификаторы = СинхронизацияЭДО.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
		
		Для Каждого Идентификатор Из ДоступныеИдентификаторы.ИдентификаторыОтправителя Цикл
			
			Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Добавить(Идентификатор.Значение, Идентификатор.Представление);
			
		КонецЦикла;
		
		Для Каждого Идентификатор Из ДоступныеИдентификаторы.ИдентификаторыПолучателя Цикл
			
			Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.Добавить(Идентификатор.Значение, Идентификатор.Представление);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииВыбораУченыхЗаписей(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПриИзмененииИдентификаторов(Результат);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриИзмененииИдентификаторов(Результат)
	
	ИдентификаторОтправителя = ВРег(Результат.ИдентификаторОтправителя);
	ИдентификаторПолучателя  = ВРег(Результат.ИдентификаторПолучателя);
	СпособОбмена             = ПолучитьСпособОбменаУчетнойЗаписи(ИдентификаторОтправителя);
	
	Если Не РасширенныйРежим Тогда
		Таблица = ИсходящиеДокументы.Выгрузить();
		Таблица.ЗаполнитьЗначения(ИдентификаторОтправителя, "ИдентификаторОтправителя");
		Таблица.ЗаполнитьЗначения(ИдентификаторПолучателя , "ИдентификаторПолучателя");
		Таблица.ЗаполнитьЗначения(СпособОбмена,             "СпособОбменаЭД");
		ИсходящиеДокументы.Загрузить(Таблица);
	КонецЕсли;
	
	ОбновитьФорматыКонтрагента();
	ЗаполнитьПризнакВыгружатьДополнительныеСведения();
	
	СтруктураСтатусПодключения = ПолучитьСтатусПриглашения(ИдентификаторОтправителя, ИдентификаторПолучателя);
	СтатусПриглашения = СтруктураСтатусПодключения.ТекстЗаголовка;
	
	Если СтруктураСтатусПодключения.ЦветСсылки = 0 Тогда
		Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	ИначеЕсли СтруктураСтатусПодключения.ЦветСсылки = 1 Тогда
		Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеРегламентаЭДО

&НаКлиенте
Процедура ОткрытьФормуРедактированияРегламентаЭДО(ТекущиеДанные)
	
	НастройкаРегламентаЭДО = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииРедактированияРегламентаЭДО", ЭтотОбъект);
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроек.Отправитель = Организация;
	КлючНастроек.Получатель = Контрагент;
	КлючНастроек.Договор = ДоговорКонтрагента;
	КлючНастроек.ВидДокумента = ТекущиеДанные.ВидДокумента;
	
	ПараметрыНастройки = НастройкиОтправкиЭДОСлужебныйКлиент.НовыеПараметрыНастройкиРегламентаЭДО();
	ПараметрыНастройки.КлючНастроек = КлючНастроек;
	ПараметрыНастройки.ИдентификаторОтправителя = ТекущиеДанные.ИдентификаторОтправителя;
	ПараметрыНастройки.ИдентификаторПолучателя = ТекущиеДанные.ИдентификаторПолучателя;
	ПараметрыНастройки.МаршрутПодписания = ТекущиеДанные.МаршрутПодписания;
	ПараметрыНастройки.Формат = ТекущиеДанные.ВерсияФормата;
	ПараметрыНастройки.ТребуетсяИзвещение = ТекущиеДанные.ТребуетсяИзвещениеОПолучении;
	ПараметрыНастройки.ТребуетсяПодтверждение = ТекущиеДанные.ТребуетсяОтветнаяПодпись;
	ПараметрыНастройки.ВыгружатьДопСведения = ТекущиеДанные.ВыгружатьДополнительныеСведения;
	ПараметрыНастройки.ЗаполнениеКодаТовара = ТекущиеДанные.ЗаполнениеКодаТовара;
	ПараметрыНастройки.РасширенныйРежимНастройки = РасширенныйРежим;
	ПараметрыНастройки.ВерсияФорматаУстановленаВручную = ТекущиеДанные.ВерсияФорматаУстановленаВручную;
	ПараметрыНастройки.ПоказыватьДополнительныеНастройки = Истина;
	
	НастройкиОтправкиЭДОСлужебныйКлиент.НастроитьРегламентЭДО(ПараметрыНастройки,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииРедактированияРегламентаЭДО(Результат, ТекущиеДанные) Экспорт
	
	НастройкаРегламентаЭДО = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВерсияФормата = Результат.Формат;
	ТекущиеДанные.ИдентификаторОтправителя = Результат.ИдентификаторОтправителя;
	ТекущиеДанные.ИдентификаторПолучателя = Результат.ИдентификаторПолучателя;
	ТекущиеДанные.МаршрутПодписания = Результат.МаршрутПодписания;
	ТекущиеДанные.ТребуетсяОтветнаяПодпись = Результат.ТребуетсяОтветнаяПодпись;
	ТекущиеДанные.ТребуетсяИзвещениеОПолучении = Результат.ТребуетсяИзвещениеОПолучении;
	ТекущиеДанные.ВыгружатьДополнительныеСведения = Результат.ВыгружатьДополнительныеСведения;
	ТекущиеДанные.ВидДокумента = Результат.ВидДокумента;
	ТекущиеДанные.ЗаполнениеКодаТовара = Результат.ЗаполнениеКодаТовара;
	ТекущиеДанные.СпособОбменаЭД = ПолучитьСпособОбменаУчетнойЗаписи(ТекущиеДанные.ИдентификаторОтправителя);
	ТекущиеДанные.ВерсияФорматаУстановленаВручную = Результат.ВерсияФорматаУстановленаВручную;
	
	ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ЭтотОбъект, ТекущиеДанные);
	
	ОбновитьФорматыКонтрагента();
	
	СтруктураСтатусПодключения = ПолучитьСтатусПриглашения(ТекущиеДанные.ИдентификаторОтправителя, ТекущиеДанные.ИдентификаторПолучателя);
	ТекущиеДанные.СтатусПриглашенияПредставление = СтруктураСтатусПодключения.ТекстЗаголовка;
	ТекущиеДанные.ЦветГиперссылки = СтруктураСтатусПодключения.ЦветСсылки;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПодходящихИдентификаторовЭДО

&НаКлиенте
Процедура ИзменитьРасширенныйРежимПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РасширенныйРежим Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьИдентификаторыЭДО();

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификаторыЭДО()
	
	ОбновитьДоступныеИдентификаторы();
	
	ИдентификаторыОтправителя = Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.ВыгрузитьЗначения();
	ИдентификаторыПолучателя  = Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.ВыгрузитьЗначения();
	
	Если ЗначениеЗаполнено(ИдентификаторыОтправителя) И ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		Элементы.ДекорацияНадпись.Заголовок = НСтр("ru = 'Ожидается получение данных по совместимости идентификаторов ЭДО'");
		Элементы.ГруппаОжидание.Видимость = Истина;
		
		Элементы.ФормаРасширенныйРежим.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПодобратьПодходящиеИдентификаторыЭДОЗавершение", ЭтотОбъект);
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ИдентификаторыОтправителя", ИдентификаторыОтправителя);
		ПараметрыПроцедуры.Вставить("ИдентификаторыПолучателя",  ИдентификаторыПолучателя);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительнаяОперация = ПодобратьПодходящиеИдентификаторыЭДО(ПараметрыПроцедуры, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьПодходящиеИдентификаторыЭДО(Знач ПараметрыПроцедуры,Знач УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подбор подходящих идентификаторов ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "РаботаСАбонентамиЭДО.РейтингУчетныхЗаписей",
		ПараметрыПроцедуры.ИдентификаторыОтправителя, ПараметрыПроцедуры.ИдентификаторыПолучателя);
	
КонецФункции

&НаКлиенте
Процедура ПодобратьПодходящиеИдентификаторыЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		УстановитьИдентификаторыЭДО(Результат.АдресРезультата);
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Во время выбора подходящих учетных записей произошла ошибка.
                                                                |Подробнее см. в журнале регистрации.'"));
		
	КонецЕсли;
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	Элементы.ФормаРасширенныйРежим.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторыЭДО(АдресРезультата)
	
	Идентификаторы = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден идентификатор Абонента ЭДО'"));
		Возврат;
	КонецЕсли;
	
	РасширенныйРежим = Ложь;
	ИдентификаторОтправителя = ВРег(Идентификаторы.ИдентификаторОтправителя);
	ИдентификаторПолучателя = ВРег(Идентификаторы.ИдентификаторПолучателя);
	СпособОбменаЭД = ПолучитьСпособОбменаУчетнойЗаписи(ИдентификаторОтправителя);
	
	Таблица = ИсходящиеДокументы.Выгрузить();
	Таблица.ЗаполнитьЗначения(ИдентификаторОтправителя, "ИдентификаторОтправителя");
	Таблица.ЗаполнитьЗначения(ИдентификаторПолучателя , "ИдентификаторПолучателя");
	Таблица.ЗаполнитьЗначения(СпособОбменаЭД          , "СпособОбменаЭД");
	ИсходящиеДокументы.Загрузить(Таблица);
	
	ОбновитьФорматыКонтрагента();
	ЗаполнитьПризнакВыгружатьДополнительныеСведения();
	ОбновитьДоступныеИдентификаторы();
	
	ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура НажатиеЗаписать(ПропуститьПроверки, ДополнительныеПараметры) Экспорт

	Модифицированность = НЕ НачатьСохранениеНастроек(ПропуститьПроверки, ДополнительныеПараметры.ОповещениеКоманды);

КонецПроцедуры

&НаКлиенте
Процедура НажатиеЗаписатьИЗакрыть(ПропуститьПроверки, ДополнительныеПараметры) Экспорт

	Если НачатьСохранениеНастроек(ПропуститьПроверки, ДополнительныеПараметры.ОповещениеКоманды) Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаНажатиеСтатусПодключения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать(Неопределено);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьПриглашение(ИдентификаторОтправителя, ИдентификаторПолучателя);
	
КонецПроцедуры

&НаКлиенте
Функция НачатьСохранениеНастроек(ПропуститьПроверки = Ложь, ОповещениеКоманды = Неопределено)
	
	Если Не ПропуститьПроверки Тогда
		// Выполняем серверный вызов, так как нужно проверить валидность маршрута и в случае ошибок спросить у пользователя,
		// записывать ли его.
		ЕстьОшибкиЗаполнения = Ложь;
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		Если Не НастройкаВалидирована(ЕстьОшибкиЗаполнения, КонтекстДиагностики) Тогда
			Если Не ЕстьОшибкиЗаполнения Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗаписиПолученОтвет", ЭтотОбъект,
					Новый Структура("ОповещениеКоманды, КонтекстДиагностики", ОповещениеКоманды, КонтекстДиагностики));
				ТекстВопроса = НСтр("ru = 'Обнаружены возможные ошибки в настройках маршрутов. Продолжить запись?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Настройка некорректна'"));
			КонецЕсли;
				
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписатьНастройки();
	
	Если Результат Тогда
		Модифицированность = Ложь;
		УстановитьКлючНастройкиОтправки(ЭтотОбъект);
		Оповестить("ОбновитьТекущиеДелаЭДО", Контрагент, Организация);
		ТекстЗаголовка = НСтр("ru = 'Успех'");
		ТекстСообщения = НСтр("ru = 'Настройки отправки сохранены успешно'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВопросОЗаписиПолученОтвет(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеКоманды, Истина);
	Иначе 
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(ДополнительныеПараметры.КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкаВалидирована(ЕстьОшибкиЗаполнения = Ложь, КонтекстДиагностики = Неопределено)
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибкиЗаполнения = Истина;	
	КонецЕсли;
	
	ЕстьОшибкиВЗависимыхНастройках = Ложь;
	Если Не ЕстьОшибкиЗаполнения Тогда
		// Проверим, что все указанные маршруты возможно выполнить
		ЕстьОшибкиВЗависимыхНастройках = Не СертификатыСоответствуютМаршрутам(КонтекстДиагностики);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибкиЗаполнения И Не ЕстьОшибкиВЗависимыхНастройках;

КонецФункции

&НаСервере
Функция СертификатыСоответствуютМаршрутам(КонтекстДиагностики)
	
	// Подготовим соответствие наборов сертификатов учетным записям
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоГруппа", Ложь);
	ИспользованныеУчетныеЗаписи = ИсходящиеДокументы.Выгрузить(Отбор, "ИдентификаторОтправителя").ВыгрузитьКолонку(
		"ИдентификаторОтправителя");
	
	ПроверяемаяНастройка = НастройкиОтправкиЭДОСлужебный.НовоеОписаниеПроверяемойНастройки();
	ПроверяемаяНастройка.Отправитель = Организация;
	ПроверяемаяНастройка.Получатель = Контрагент;
	ПроверяемаяНастройка.Договор = ДоговорКонтрагента;
	ПроверяемаяНастройка.ИдентификаторОтправителя = ИдентификаторОтправителя;
	ПроверяемаяНастройка.ИдентификаторыОтправителя = ИспользованныеУчетныеЗаписи;
	
	Для Каждого СтрокаИсходящегоДокумента Из ИсходящиеДокументы Цикл
		Настройка = ПроверяемаяНастройка.Настройки.Добавить();
		ЗаполнитьЗначенияСвойств(Настройка, СтрокаИсходящегоДокумента);
	КонецЦикла;
	
	Возврат НастройкиОтправкиЭДОСлужебный.СертификатыСоответствуютМаршрутам(ПроверяемаяНастройка, КонтекстДиагностики);

КонецФункции

&НаСервере
Функция ЗаписатьНастройки()
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоГруппа", Ложь);
	ИсходящиеДокументыБезГруппировок = ИсходящиеДокументы.Выгрузить(Отбор);
	
	ИсходящиеДокументыБезГруппировок.Колонки.Добавить("Отправитель");
	ИсходящиеДокументыБезГруппировок.ЗаполнитьЗначения(Организация, "Отправитель");
	
	ИсходящиеДокументыБезГруппировок.Колонки.Добавить("Получатель");
	ИсходящиеДокументыБезГруппировок.ЗаполнитьЗначения(Контрагент, "Получатель");
	
	ИсходящиеДокументыБезГруппировок.Колонки.Добавить("Договор");
	ИсходящиеДокументыБезГруппировок.ЗаполнитьЗначения(ДоговорКонтрагента, "Договор");
	
	// Подготовим таблицу уникальных пар идентификаторов для создания приглашений.
	Идентификаторы = ИсходящиеДокументыБезГруппировок.Скопировать(, "ИдентификаторОтправителя, ИдентификаторПолучателя");
	Идентификаторы.Свернуть("ИдентификаторОтправителя, ИдентификаторПолучателя");
	ИдентификаторыОтфильтрованные = Идентификаторы.СкопироватьКолонки();
	КлючиПриглашений = Новый ТаблицаЗначений;
	КлючиПриглашений.Колонки.Добавить("Ключ",
		Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Измерения.Ключ.Тип);
	Для Каждого СтрокаИдентификатора Из Идентификаторы Цикл
		Если ЗначениеЗаполнено(СтрокаИдентификатора.ИдентификаторОтправителя)
			И ЗначениеЗаполнено(СтрокаИдентификатора.ИдентификаторПолучателя) Тогда
		
			НоваяСтрока = ИдентификаторыОтфильтрованные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИдентификатора);
			КлючПриглашенияНаИдентификатор = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
			КлючПриглашенияНаИдентификатор.ИдентификаторОрганизации = СтрокаИдентификатора.ИдентификаторОтправителя;
			КлючПриглашенияНаИдентификатор.ИдентификаторКонтрагента = СтрокаИдентификатора.ИдентификаторПолучателя;
			КлючПриглашения = ПриглашенияЭДО.КлючПриглашенияПоНатуральнымКлючам(КлючПриглашенияНаИдентификатор);
			Если ЗначениеЗаполнено(КлючПриглашения) Тогда
				СтрокаТаблицы = КлючиПриглашений.Добавить();
				СтрокаТаблицы.Ключ = КлючПриглашения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , ДоговорКонтрагента);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , ДоговорКонтрагента);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запись = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		Запись.Отправитель = Организация;
		Запись.Получатель  = Контрагент;
		Запись.Договор = ДоговорКонтрагента;
		Запись.Прочитать();
		
		Если Запись.Выбран()
			И КлючНастройкиОтправкиИзменен(КлючНастройкиОтправки, Организация, Контрагент, ДоговорКонтрагента) Тогда
			ТекстСообщения = НСтр("ru = 'Настройка отправки с указанными значениями организации, контрагента, договора уже существует.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЗафиксироватьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Запись.ИспользоватьУПД 				= ИспользоватьУПД;
		Запись.ИспользоватьУКД 				= ИспользоватьУКД;
		Запись.Записать();
		
		Если ИдентификаторыОтфильтрованные.Количество() Тогда
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами");
			ЭлементБлокировкиДанных.ИсточникДанных = КлючиПриглашений;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ключ", "Ключ");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			Запросы = Новый Массив;
			
			ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияКОбменуЭлектроннымиДокументами");
			Запросы.Добавить(ЗапросПриглашений);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Идентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
			|	Идентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя
			|ПОМЕСТИТЬ Идентификаторы
			|ИЗ
			|	&Идентификаторы КАК Идентификаторы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Идентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
			|	Идентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя
			|ИЗ
			|	Идентификаторы КАК Идентификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|		ПО Идентификаторы.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
			|			И Идентификаторы.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус ЕСТЬ NULL";
			
			ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
			ИтоговыйЗапрос.УстановитьПараметр("Идентификаторы", ИдентификаторыОтфильтрованные);
			
			Выборка = ИтоговыйЗапрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				КлючПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
				КлючПриглашения.ИдентификаторОрганизации = Выборка.ИдентификаторОтправителя;
				КлючПриглашения.ИдентификаторКонтрагента = Выборка.ИдентификаторПолучателя;
				ПриглашенияЭДО.СоздатьПриглашениеКОтправкеОператоруЭДО(КлючПриглашения, Организация, Контрагент,
					ПриглашенияЭДО.СтандартныйШаблонПриглашения());
			КонецЦикла;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Организация);
		НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
		НаборЗаписей.Отбор.Договор.Установить(ДоговорКонтрагента);
		НаборЗаписей.Загрузить(ИсходящиеДокументыБезГруппировок);
		НаборЗаписей.Записать();
		
		УстановитьКлючНастройкиОтправки(ЭтотОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Сохранение настроек отправки ЭДО'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			НСтр("ru = 'Не удалось сохранить Настройки отправки
                  |Подробнее см. в журнале регистрации.'"));
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция КлючНастройкиОтправкиИзменен(КлючНастройкиОтправки, Организация, Контрагент, ДоговорКонтрагента)
	
	Возврат КлючНастройкиОтправки.Отправитель <> Организация
		Или КлючНастройкиОтправки.Получатель <> Контрагент
		Или КлючНастройкиОтправки.Договор <> ДоговорКонтрагента;
		
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаОбъектНастройкиЭДО(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента)
	
	Возврат НастройкиОтправкиЭДОСлужебный.СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемОкнаФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Элементы.ФормаЗаписатьИЗакрыть);
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособОбменаУчетнойЗаписи(Знач ИдентификаторОтправителя)
	
	Данные = СинхронизацияЭДО.ДанныеУчетнойЗаписи(ИдентификаторОтправителя);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Возврат Данные.СпособОбменаЭД;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений()
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоГруппа", Ложь);
	Таблица = ИсходящиеДокументы.Выгрузить(Отбор, "ИдентификаторОтправителя, ИдентификаторПолучателя");
	Таблица.Свернуть("ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	ИдентификаторОтправителя = ВРег(Таблица[0].ИдентификаторОтправителя);
	ИдентификаторПолучателя  = ВРег(Таблица[0].ИдентификаторПолучателя);
	
	Запросы = Новый Массив;
	Отбор = ПриглашенияЭДО.НовыйОтборПриглашений();
	Отбор.ИдентификаторОрганизации = "&ИдентификаторОрганизации";
	Отбор.ИдентификаторКонтрагента = "&ИдентификаторКонтрагента";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияКОбменуЭлектроннымиДокументами", Отбор);
	
	Запросы.Добавить(ЗапросПриглашений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаИдентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя
		|ПОМЕСТИТЬ ТаблицаИдентификаторы
		|ИЗ
		|	&Идентификаторы КАК ТаблицаИдентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИдентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаИдентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ЕСТЬNULL(ПриглашенияКОбменуЭлектроннымиДокументами.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяОтправить)) КАК СтатусПриглашения
		|ИЗ
		|	ТаблицаИдентификаторы КАК ТаблицаИдентификаторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО ТаблицаИдентификаторы.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
		|			И ТаблицаИдентификаторы.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Идентификаторы", Таблица);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", Таблица.ВыгрузитьКолонку("ИдентификаторОтправителя"));
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторКонтрагента", Таблица.ВыгрузитьКолонку("ИдентификаторПолучателя"));
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаИсходящиеДокументы = ИсходящиеДокументы.Выгрузить();
	ТаблицаИсходящиеДокументы.ЗаполнитьЗначения(Перечисления.СтатусыПриглашений.ПустаяСсылка(), "СтатусПриглашения");
	ТаблицаИсходящиеДокументы.Индексы.Добавить("ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИдентификаторОтправителя", ВыборкаДетальныеЗаписи.ИдентификаторОтправителя);
		Отбор.Вставить("ИдентификаторПолучателя" , ВыборкаДетальныеЗаписи.ИдентификаторПолучателя);
		
		НайденныеСтроки = ТаблицаИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			СтрокаТЧ.СтатусПриглашения = ВыборкаДетальныеЗаписи.СтатусПриглашения;
			
			СтруктураСтатусПодключения = СформироватьПредставлениеСтатусаПриглашения(СтрокаТЧ.СтатусПриглашения);
			
			СтрокаТЧ.СтатусПриглашенияПредставление = СтруктураСтатусПодключения.ТекстЗаголовка;
			СтрокаТЧ.ЦветГиперссылки = СтруктураСтатусПодключения.ЦветСсылки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИсходящиеДокументы.Загрузить(ТаблицаИсходящиеДокументы);
	
	Если Таблица.Количество() = 1 Тогда
		
		ОбновитьДоступныеИдентификаторы();
		
		СтатусПриглашения = ТаблицаИсходящиеДокументы[1].СтатусПриглашенияПредставление;
		
		Если ИсходящиеДокументы[1].ЦветГиперссылки = 0 Тогда
			Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
		ИначеЕсли ИсходящиеДокументы[1].ЦветГиперссылки = 1 Тогда
			Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Таблица.Количество() > 1;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Форма, СтрокаТаблицы)
	
	Строки = Форма.ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", СтрокаТаблицы.ВерсияФормата));
	
	МассивСтрок = Новый Массив;
	Если Строки.Количество() > 0 Тогда
		МассивСтрок.Добавить(Строки[0].ПредставлениеФормата);
	Иначе
		МассивСтрок.Добавить(НСтр("ru = 'Произвольный документ'"));
	КонецЕсли;
	
	МассивСтрок.Добавить(?(СтрокаТаблицы.ТребуетсяОтветнаяПодпись, НСтр("ru = 'с ответной подписью'"), НСтр("ru = 'без ответной подписи'")));
	
	СтрокаТаблицы.ДополнительныеНастройки = СтрСоединить(МассивСтрок,", ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриглашение(ВыбранныйИдентификаторОрганизации, ВыбранныйИдентификаторКонтрагента)
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизацияЭДОКлиент.ОткрытьПриглашение(ВыбранныйИдентификаторОрганизации, ВыбранныйИдентификаторКонтрагента,
		ЭтотОбъект, Организация, Контрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКлючНастройкиОтправки(Форма)
	
	Форма.КлючНастройкиОтправки = Новый ФиксированнаяСтруктура("Отправитель, Получатель, Договор",
		Форма.Организация, Форма.Контрагент, Форма.ДоговорКонтрагента);
		
КонецПроцедуры

&НаКлиенте
Функция КлючНастройкиОтправкиПустой()
	
	Возврат НЕ (ЗначениеЗаполнено(КлючНастройкиОтправки.Отправитель)
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Получатель)
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Договор));
		
КонецФункции

&НаСервере
Процедура ОбновитьФорматыКонтрагента()
	
	Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоГруппа", Ложь);
	Настройки = ИсходящиеДокументы.Выгрузить(Отбор);
	Настройки.Свернуть("ИдентификаторПолучателя");
	НаборИдентификаторовКонтрагентов = Настройки.ВыгрузитьКолонку("ИдентификаторПолучателя");
	
	ПоддерживаемыеФорматы = НастройкиЭДО.АктуальныеПоддерживаемыеФорматыАбонента(НаборИдентификаторовКонтрагентов);
	
	Для каждого СтрокаНастроек Из ИсходящиеДокументы Цикл
		
		Если СтрокаНастроек.ВерсияФорматаУстановленаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура("ИдентификаторАбонента, ВидДокумента",
			СтрокаНастроек.ИдентификаторПолучателя, СтрокаНастроек.ВидДокумента);
		НайденныеСтроки = ПоддерживаемыеФорматы.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФормата = НайденныеСтроки[0];
		Если СтрокаФормата <> Неопределено И СтрокаФормата.Формат <> СтрокаНастроек.ВерсияФормата Тогда
			СтрокаНастроек.ВерсияФормата = СтрокаФормата.Формат;
			ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ЭтотОбъект, СтрокаНастроек);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакВыгружатьДополнительныеСведения() 
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоГруппа", Ложь);
	ТаблицаНастроек = ИсходящиеДокументы.Выгрузить(Отбор);
	ТаблицаНастроек.Свернуть("ИдентификаторПолучателя");
	ИдентификаторыПолучателя = ТаблицаНастроек.ВыгрузитьКолонку("ИдентификаторПолучателя");
	
	Операторы = Новый Массив;
	ОператорыАбонентов = Новый Соответствие;
	Для Каждого ИдентификаторПолучателя Из ИдентификаторыПолучателя Цикл
		Оператор = РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(ИдентификаторПолучателя);
		Операторы.Добавить(Оператор);
		ОператорыАбонентов.Вставить(ИдентификаторПолучателя, Оператор);
	КонецЦикла;
	
	Отбор = СервисНастроекЭДО.НовыйОтборОператоровЭлектронногоДокументооборота();
	Отбор.Идентификатор = "&Оператор";
	ЗапросОператоров = СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО", Отбор);
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросОператоров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ОператорыЭДО.ИдентификаторОператора КАК Идентификатор,
	|ОператорыЭДО.ОтправлятьДополнительныеСведения КАК ОтправлятьДополнительныеСведения
	|ИЗ
	|ОператорыЭДО КАК ОператорыЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Оператор", Операторы);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для каждого СтрокаНастроек Из ИсходящиеДокументы Цикл
		Оператор = ОператорыАбонентов[СтрокаНастроек.ИдентификаторПолучателя];
		Если Выборка.НайтиСледующий(Оператор, "Идентификатор") Тогда
			СтрокаНастроек.ВыгружатьДополнительныеСведения = Выборка.ОтправлятьДополнительныеСведения;
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекущаяСтрокаПослеИзмененияУПДУКД(Настройка, Значение)
	
	СтрокаДляАктивизации = Неопределено;
	Если Настройка = "УПД" Тогда
		ВидДокументаДляАктивизации = ВидыДокументовУПД.ВидДокумента;
	Иначе
		ВидДокументаДляАктивизации = ВидыДокументовУКД.ВидДокумента;
	КонецЕсли;
	
	Если Значение Тогда
		Для Каждого СтрокаТЗ Из ИсходящиеДокументы Цикл
			Если СтрокаТЗ.ВидДокумента = ВидДокументаДляАктивизации Тогда
				СтрокаДляАктивизации = СтрокаТЗ.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаДляАктивизации = Неопределено;
	КонецЕсли;
	
	Возврат СтрокаДляАктивизации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтроку(Форма)
	
	ТекущаяСтрока = Форма.Элементы.ИсходящиеДокументы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено
		Или Форма.ИсходящиеДокументы.НайтиПоИдентификатору(ТекущаяСтрока) = Неопределено Тогда
		Форма.Элементы.ИсходящиеДокументы.ТекущаяСтрока = Форма.ИсходящиеДокументы[1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеНастройкиОбмена

&НаКлиенте
Процедура УдалитьНастройкуОтправки()
	
	ВидыДокументов = Неопределено;
	Если КлючНастройкиОтправкиПустой()
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Договор) Тогда
		ТекстВопроса = НСтр("ru = 'Удалить настройку обмена с контрагентом?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Настройка обмена с контрагентом будет удалена. Также будут удалены настройки по договорам. Отправка электронных документов контрагенту будет невозможна.
			|Продолжить?'");
		ВидыДокументов = ВидыДокументовДляРазрываПриглашенийПередУдалением(КлючНастройкиОтправки);
	КонецЕсли;
	
	Если ВидыДокументов = Неопределено Тогда
		Описание = Новый ОписаниеОповещения("УдалитьНастройкуОтправкиПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Для удаления настройки необходимо вначале разорвать приглашение.'");
		
		Для Каждого СтрокаКоллекции Из ИсходящиеДокументы Цикл
			
			ВидДокумента = СтрокаКоллекции.ВидДокумента;
			
			Если ВидыДокументов.Найти(ВидДокумента) <> Неопределено Тогда
				
				РеквизитФормы = ?(Не РасширенныйРежим, "СтатусПриглашения",
					СтрШаблон("ИсходящиеДокументы[%1].СтатусПриглашенияПредставление", ИсходящиеДокументы.Индекс(СтрокаКоллекции)));
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы);
				
				Если Не РасширенныйРежим Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыДокументовДляРазрываПриглашенийПередУдалением(Знач КлючНастройкиОтправки)
	
	Запросы = Новый Массив;
	ОтборПриглашений = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.ИдентификаторОрганизации = "ВЫБРАТЬ ИдентификаторОтправителя ИЗ НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам";
	ОтборПриглашений.ИдентификаторКонтрагента = "ВЫБРАТЬ ИдентификаторПолучателя ИЗ НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияКОбменуЭлектроннымиДокументами");
	
	Запросы.Добавить(ЗапросПриглашений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
		|			И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Отправитель", КлючНастройкиОтправки.Отправитель);
	ИтоговыйЗапрос.УстановитьПараметр("Получатель", КлючНастройкиОтправки.Получатель);
	ИтоговыйЗапрос.УстановитьПараметр("Договор", КлючНастройкиОтправки.Договор);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыДокументов = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДокументов.Добавить(Выборка.ВидДокумента);
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

&НаКлиенте
Процедура УдалитьНастройкуОтправкиПослеВопроса(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация"       , КлючНастройкиОтправки.Отправитель);
	ПараметрыПроцедуры.Вставить("Контрагент"        , КлючНастройкиОтправки.Получатель);
	ПараметрыПроцедуры.Вставить("ДоговорКонтрагента", КлючНастройкиОтправки.Договор);
	
	ДлительнаяОперация = НачатьУдалениеНастроекОтправкиНаСервере(УникальныйИдентификатор, ПараметрыПроцедуры);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		Элементы.ГруппаОжиданиеУдаления.Видимость = Истина;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Описание = Новый ОписаниеОповещения("УдалитьНастройкуОтправкиЗавершение", ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьУдалениеНастроекОтправкиНаСервере(Знач УникальныйИдентификатор, Знач ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление настройки отправки электронных документов'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.УдалитьНастройкиОтправкиЭДО",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура УдалитьНастройкуОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отправки произошла ошибка.'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(НСтр("ru = 'Удаление настройки отправки ЭДО'"), 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат;
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата) = Истина Тогда
		
		Оповестить("ОбновитьТекущиеДелаЭДО");
		Закрыть();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отправки произошла ошибка.
                               |Подробнее см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено)
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли; 
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ОператорАбонента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ОператорАбонента(ИдентификаторПолучателя); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти  

#КонецОбласти
