#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация"               , Организация);
	Параметры.Свойство("УчетнаяЗаписьПредставление", УчетнаяЗаписьПредставление);
	Параметры.Свойство("ИдентификаторОтправителя"  , ИдентификаторОтправителя);
	Параметры.Свойство("ИдентификаторПолучателя"   , ИдентификаторПолучателя);
	Параметры.Свойство("СпособОбмена"              , СпособОбмена);
	Параметры.Свойство("ВидДокумента"              , ВидДокумента);
	Параметры.Свойство("ВерсияФормата"             , ВерсияФормата);
	Параметры.Свойство("АдресПолучателя"           , АдресПолучателя);
	Параметры.Свойство("АдресОтправителя"          , АдресОтправителя);
	Параметры.Свойство("ИспользоватьПодпись"       , ИспользоватьПодпись);
	Параметры.Свойство("МаршрутПодписания"         , МаршрутПодписания);
	Параметры.Свойство("ОжидатьОтветнуюПодпись"    , ОжидатьОтветнуюПодпись);
	Параметры.Свойство("ОжидатьИзвещение"          , ОжидатьИзвещение);
	Параметры.Свойство("ВыгружатьДополнительныеСведения", ВыгружатьДополнительныеСведения);
	Параметры.Свойство("ЗаполнениеКодаТовара"      , ЗаполнениеКодаТовара);
	Параметры.Свойство("РасширенныйРежим"          , РасширенныйРежим);
	Параметры.Свойство("ВерсияФорматаУстановленаВручную", ВерсияФорматаУстановленаВручную);
	
	ЗаполнитьДанныеФормы();
	
	НастроитьОтображениеЭлементовФормы();
	
	ОбщегоНазначенияБЭД.СброситьРазмерыИПоложениеОкна(ЭтаФорма);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения
			(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	ПриИзмененииУчетнойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗапись(ИдентификаторОтправителя);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Идентификатор_Создать() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьПараметрыУчетнойЗаписиПослеСоздания", ЭтотОбъект);
	СинхронизацияЭДОКлиент.ОткрытьУчетнуюЗаписьПрямогоОбмена(Организация, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияФорматаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияФорматаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВерсияФорматаУстановленаВручную Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("УстановитьВерсиюФорматаПослеВопроса", ЭтотОбъект, ВыбранноеЗначение);
	ТекстВопроса = НСтр("ru = 'В случае ручной корректировки будет отключен автоматический подбор формата, наиболее оптимального для обмена с выбранным контрагентом.
		|Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодписьПриИзменении(Элемент)
	
	Если Не ВидДокументаБезТитула Тогда
	ИначеЕсли ИспользоватьПодпись Тогда
		ОжидатьОтветнуюПодпись = ОжидатьОтветнуюПодписьПоУмолчанию(ВидДокумента);
	Иначе
		ОжидатьОтветнуюПодпись = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьНастроекПодписания(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОтветнуюПодписьПриИзменении(Элемент)
	
	Если ОжидатьОтветнуюПодпись Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьОжиданиеОтветнойПодписиПослеПодтверждения", ЭтотОбъект);
	НастройкиЭДОКлиент.ЗапроситьПодтверждениеОтключенияОжиданияОтветнойПодписи(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьДополнительныеСведенияПриИзменении(Элемент)

	ТекстВопроса = НСтр("ru = 'Изменение параметров выгрузки дополнительных сведений может привести к проблемам при загрузке документа у получателя. Рекомендуется проконсультироваться у специалистов технической поддержки.
                         |Вы действительно хотите изменить выгрузку дополнительных сведений?'");

	Описание = Новый ОписаниеОповещения("ВопросВыгружатьДопСведенияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьИЗакрыть(Команда)
	
	Если ЕстьОшибкиЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = НастройкиОтправкиЭДОСлужебныйКлиент.НовыеПараметрыНастройкиРегламентаПрямогоОбмена();
	Результат.Организация = Организация;
	Результат.СпособОбмена = СпособОбмена;
	Результат.АдресОтправителя = АдресОтправителя;
	Результат.АдресПолучателя = АдресПолучателя;
	Результат.УчетнаяЗаписьПредставление = УчетнаяЗаписьПредставление;
	Результат.ИдентификаторОтправителя = ИдентификаторОтправителя;
	Результат.ИдентификаторПолучателя = ИдентификаторПолучателя;
	Результат.ВидДокумента = ВидДокумента;
	Результат.ВерсияФормата = ВерсияФормата;
	Результат.ИспользоватьПодпись = ИспользоватьПодпись;
	Результат.МаршрутПодписания = МаршрутПодписания;
	Результат.ОжидатьОтветнуюПодпись = ОжидатьОтветнуюПодпись;
	Результат.ОжидатьИзвещение = ОжидатьИзвещение;
	Результат.ВыгружатьДополнительныеСведения = ВыгружатьДополнительныеСведения;
	Результат.ЗаполнениеКодаТовара = ЗаполнениеКодаТовара;
	Результат.РасширенныйРежим = РасширенныйРежим;
	Результат.ВерсияФорматаУстановленаВручную = ВерсияФорматаУстановленаВручную;
	
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросВыгружатьДопСведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ВыгружатьДополнительныеСведения = Не ВыгружатьДополнительныеСведения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	Если Не ЗначениеЗаполнено(МаршрутПодписания) Тогда
		МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
	КонецЕсли;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
	НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, ВерсияФормата);
	
	ВидДокументаБезТитула = Не НастройкиРегламента.ТребуетсяОтветнаяПодпись;
	
	РедактироватьОтветнуюПодпись = НастройкиРегламента.РедактироватьОтветнуюПодпись;
	
	ЗаполнитьСписокУчетныхЗаписей();
	
	ЗаполнитьСписокФорматовПоВидуДокумента();
	
	ИнициализироватьВариантыЗаполненияПолей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокУчетныхЗаписей()
	
	Если Не РасширенныйРежим Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.УчетнаяЗапись.СписокВыбора;
	СписокВыбора.Очистить();
	
	НастройкиОтправкиЭДОСлужебный.ЗаполнитьСписокУчетныхЗаписейПрямогоОбмена(СписокВыбора, Организация);
	
	Если ПустаяСтрока(ИдентификаторОтправителя)
		И СписокВыбора.Количество() = 1 Тогда
		ИдентификаторОтправителя = СписокВыбора[0].Значение;
	КонецЕсли;
	
	СписокВыбора.Добавить(Идентификатор_Создать(), НСтр("ru = 'Создать новую учетную запись'"),,
		БиблиотекаКартинок.СоздатьЭлементСписка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФорматовПоВидуДокумента()
	
	СписокВыбора = Элементы.ВерсияФормата.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФорматов = ЭлектронныеДокументыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.ВидыДокументов.Добавить(ВидДокумента);
	ОтборФорматов.Действует = Истина;
	ФорматыЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов(ОтборФорматов);
	
	Для Каждого СтрокаФормата Из ФорматыЭлектронныхДокументов Цикл
		СписокВыбора.Добавить(СтрокаФормата.ИдентификаторФормата, СтрокаФормата.ПредставлениеФормата);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеЭлементовФормы()
	
	Элементы.ГруппаРасширенныйРежим.Видимость = РасширенныйРежим;
	
	Элементы.ГруппаВерсияФормата.Видимость = Элементы.ВерсияФормата.СписокВыбора.Количество() > 0;
	
	Если Не ВидДокументаБезТитула Тогда
		Элементы.ОжидатьОтветнуюПодпись.Заголовок = НСтр("ru = 'Ожидать ответный титул'");
	КонецЕсли;
	
	УстановитьОтображениеТранспортныхНастроек();
	
	УстановитьДоступностьНастроекПодписания(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеТранспортныхНастроек()
	
	Если Не РасширенныйРежим Тогда
		Элементы.АдресОтправителя.Видимость = Ложь;
		Элементы.АдресПолучателя.Видимость  = Ложь;
	ИначеЕсли СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		Элементы.АдресОтправителя.Видимость = Ложь;
		Элементы.АдресПолучателя.Заголовок  = НСтр("ru = 'Электронная почта получателя'");
	Иначе
		Элементы.АдресОтправителя.Видимость = Истина;
		Элементы.АдресОтправителя.Заголовок = НСтр("ru = 'Каталог отправителя'");
		Элементы.АдресПолучателя.Заголовок  = НСтр("ru = 'Каталог получателя'");;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНастроекПодписания(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.МаршрутПодписания.Доступность = Форма.ИспользоватьПодпись;
	Если Форма.ВидДокументаБезТитула Тогда
		Элементы.ОжидатьОтветнуюПодпись.Доступность = Форма.ИспользоватьПодпись
			И Форма.РедактироватьОтветнуюПодпись;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетнойЗаписиПослеСоздания(УчетнаяЗапись, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтправителя = УчетнаяЗапись.ИдентификаторЭДО;
	СпособОбмена = УчетнаяЗапись.СпособОбмена;
	
	НастроитьОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантыЗаполненияПолей()
	
	ВариантыЗаполненияПолей = ЭлектронныеДокументыЭДО.ВариантыЗаполненияПолейЭлектронныхДокументов(
		ВидДокумента, ВерсияФормата);
	
	ЗначениеСвойства = Неопределено;
	Если ВариантыЗаполненияПолей.Свойство("ТоварКод", ЗначениеСвойства) Тогда
		Для Каждого Вариант Из ЗначениеСвойства Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ЗаполнениеКодаТовара.СписокВыбора.Добавить(), Вариант);
		КонецЦикла;
	Иначе
		Элементы.ЗаполнениеКодаТовара.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУчетнойЗаписи()
	
	ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ИдентификаторОтправителя);
	
	Если ДанныеУчетнойЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьПредставление = ДанныеУчетнойЗаписи.НаименованиеУчетнойЗаписи;
	Организация = ДанныеУчетнойЗаписи.Организация;
	
	Если ДанныеУчетнойЗаписи.СпособОбмена = СпособОбмена Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбмена = ДанныеУчетнойЗаписи.СпособОбмена;
	АдресОтправителя = "";
	АдресПолучателя  = "";
	
	УстановитьОтображениеТранспортныхНастроек();
	
КонецПроцедуры

&НаСервере
Функция ОжидатьОтветнуюПодписьПоУмолчанию(Знач ВидДокумента)
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
	
	ВидыДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидДокумента);
	ТаблицаНастроек = НастройкиОтправкиЭДОСлужебный.НоваяТаблицаНастроек();
	
	НастройкиОтправкиЭДОСлужебный.ЗаполнитьНастройкиПоВидамЭлектронныхДокументов(ТаблицаНастроек, ВидыДокументов);
	
	НастройкаПоУмолчанию = ТаблицаНастроек[0];
	
	Возврат НастройкаПоУмолчанию.ТребуетсяОтветнаяПодпись;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВерсиюФорматаПослеВопроса(Ответ, Значение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВерсияФормата = Значение;
		ВерсияФорматаУстановленаВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОжиданиеОтветнойПодписиПослеПодтверждения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ОжидатьОтветнуюПодпись = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкиЗаполнениеРеквизитов(Выводить = Истина)
	
	ЕстьОшибки = Ложь;
	
	Если Не РасширенныйРежим Тогда
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	ПроверитьЗначениеЗаполнено(Элементы.ИдентификаторОтправителя, Выводить, ЕстьОшибки);
	
	ПроверитьЗначениеЗаполнено(Элементы.ИдентификаторПолучателя, Выводить, ЕстьОшибки);
	
	ПроверитьЗначениеЗаполнено(Элементы.АдресПолучателя, Выводить, ЕстьОшибки);
	
	Если СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ПроверитьКорректностьЭлектроннойПочты(Элементы.АдресПолучателя, Выводить, ЕстьОшибки);
	Иначе
		ПроверитьНедопустимыеСимволыВИмениФайла(Элементы.АдресПолучателя, Выводить, ЕстьОшибки);
		
		ПроверитьЗначениеЗаполнено(Элементы.АдресОтправителя, Выводить, ЕстьОшибки);
		ПроверитьНедопустимыеСимволыВИмениФайла(Элементы.АдресОтправителя, Выводить, ЕстьОшибки);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗначениеЗаполнено(Элемент, Выводить, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.ПутьКДанным];
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Выводить Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено.'"), Элемент.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Элемент.ПутьКДанным);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНедопустимыеСимволыВИмениФайла(Элемент, Выводить, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.ПутьКДанным];
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	НедопустимыеСимволы = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ЗначениеРеквизита);
	Если НедопустимыеСимволы.Количество() Тогда
		Отказ = Истина;
		Если Выводить Тогда
			ШаблонТекста = НСтр("ru = 'Наименование папки содержит запрещенные символы (%1)'");
			ТекстСообщения = СтрШаблон(ШаблонТекста, СтрСоединить(НедопустимыеСимволы, " "));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Элемент.ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьЭлектроннойПочты(Элемент, Выводить, Отказ)
	
	ЗначениеРеквизита = ЭтотОбъект[Элемент.ПутьКДанным];
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЗначениеРеквизита) Тогда
		Отказ = Истина;
		Если Выводить Тогда
			ТекстСообщения = НСтр("ru = 'Электронная почта указана неверно'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элемент.ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ТипыИдентификаторовУчетныхЗаписей

&НаКлиентеНаСервереБезКонтекста
Функция Идентификатор_Создать()
	
	Возврат "Создать";
	
КонецФункции

#КонецОбласти

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
			ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
			ЭтотОбъект,
			Элемент,
			ПараметрНавигационнаяСсылка,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено)
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ВидЭлектронногоДокумента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеВидаЭД(ОписаниеВидаДокумента.ТипДокумента);
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти  

#КонецОбласти