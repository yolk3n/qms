
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрСведений.СловарьСопоставленияНоменклатурыБЭД";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("СсылкаНаОбъект");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("СсылкаНаОбъект");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСловарьСопоставленияНоменклатурыБЭД") Тогда
		НачальнаяРегистрацияДанныхСопоставленияДляСловаря(ДополнительныеПараметры, Параметры);
	Иначе
		РегистрацияДанныхСопоставленияДляСловаряКУдалению(ДополнительныеПараметры, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.9.7
//
// Если функциональность словаря включена, то
// Перебирает ссылки из определяемых типов, разбирает значение переопределяемого поля наименования на отдельные слова
// и записывает в РегистрСведений СловарьНоменклатурыХарактеристикиБЭД.
// Если функциональность выключена, то очищает РегистрСведений СловарьНоменклатурыХарактеристикиБЭД.
// 
// Параметры:
//  Параметры - Структура из см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСловарьСопоставленияНоменклатурыБЭД") Тогда
		ЗаполнитьСловарьСопоставленияНоменклатурыБЭД(Параметры);
	Иначе
		ОчиститьСловарьСопоставленияНоменклатурыБЭД(Параметры);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаписьДанных

// Регистрирует событие записи объекта.
//
// Параметры:
//  Объект - ОпределяемыйТип.ОбъектДанныхСопоставленияБЭД - источник события.
// 
Процедура ЗарегистрироватьИзменение(Объект) Экспорт
	
	Параметры = ПараметрыЗаписи();
	
	Параметры.СсылкаНаОбъект = Объект.Ссылка;
	Параметры.Позиция        = ?(Объект.ПометкаУдаления, -3, -2);
	
	ЗаписатьНабор(Параметры);
	
КонецПроцедуры

Процедура ОчиститьРегистр(СсылкаНаОбъект = Неопределено, ОтметитьВыполнениеОбработки = Ложь,
	Позиция = Неопределено) Экспорт
	
	Параметры = ПараметрыЗаписи();
	Параметры.СсылкаНаОбъект = СсылкаНаОбъект;
	Параметры.Позиция = Позиция;
	ЗаписатьНабор(Параметры, ОтметитьВыполнениеОбработки, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанных

Функция ЕстьЗарегистрированныеИзменения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	|ГДЕ
	|	СловарьСопоставленияНоменклатурыБЭД.Позиция < -1";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НачальнаяРегистрацияДанныхСопоставленияДляСловаря(ДополнительныеПараметры, Параметры)
	
	ТипыМетаданных = Метаданные.ОпределяемыеТипы.ДанныеСопоставленияБЭД.Тип.Типы();
	Для Каждого ТипМетаданного Из ТипыМетаданных Цикл
		
		СсылкаНаОбъект = Новый(ТипМетаданного);
		ОбъектТипаМетаданных = Метаданные.НайтиПоТипу(ТипМетаданного);
		
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаОпределяемогоТипа.Ссылка КАК СсылкаНаОбъект
		|ИЗ
		|	&ИмяТаблицыСправочника КАК ТаблицаОпределяемогоТипа
		|ГДЕ
		|	ТаблицаОпределяемогоТипа.Ссылка > &Ссылка
		|	И &ИерархическийСправочник
		|	И НЕ ТаблицаОпределяемогоТипа.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыСправочника", 
			СтрШаблон("Справочник.%1", ОбъектТипаМетаданных.Имя));
			
		Если ОбъектТипаМетаданных.Иерархический Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИерархическийСправочник",
				"НЕ ТаблицаОпределяемогоТипа.ЭтоГруппа");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИерархическийСправочник", "Истина");
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Пока Истина Цикл
			
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
			Выгрузка = Запрос.Выполнить().Выгрузить();
			
			КоличествоСтрок = Выгрузка.Количество();
			
			Если КоличествоСтрок = 0 Тогда
				Прервать
			КонецЕсли;
			
			СсылкаНаОбъект = Выгрузка[КоличествоСтрок - 1].СсылкаНаОбъект;
			
			ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура РегистрацияДанныхСопоставленияДляСловаряКУдалению(ДополнительныеПараметры, Параметры)
	
	Перем СсылкаНаОбъект;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	|ГДЕ
	|	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект > &СсылкаНаОбъект
	|	И СловарьСопоставленияНоменклатурыБЭД.Позиция = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СсылкаНаОбъект";

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Прервать
		КонецЕсли;
		
		СсылкаНаОбъект = Выгрузка[КоличествоСтрок - 1].СсылкаНаОбъект;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьНабор(Параметры, ОтметитьВыполнениеОбработки = Ложь, ДобавлятьЗапись = Истина)
	
	Набор = РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
	
	Если Параметры.СсылкаНаОбъект <> Неопределено Тогда
		Набор.Отбор.СсылкаНаОбъект.Установить(Параметры.СсылкаНаОбъект);
	КонецЕсли;
	Если Параметры.Позиция <> Неопределено Тогда
		Набор.Отбор.Позиция.Установить(Параметры.Позиция);
	КонецЕсли;
	
	Если ДобавлятьЗапись И Параметры.Позиция <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Параметры);
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Элемент = Блокировка.Добавить(Набор.Метаданные().ПолноеИмя());
	Если Параметры.СсылкаНаОбъект <> Неопределено Тогда
		Элемент.УстановитьЗначение("СсылкаНаОбъект", Параметры.СсылкаНаОбъект);
	КонецЕсли;
	Если Параметры.Позиция <> Неопределено Тогда
		Элемент.УстановитьЗначение("Позиция", Параметры.Позиция);
	КонецЕсли;
	Элемент.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Набор.Записать();
		Если ОтметитьВыполнениеОбработки Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.ОбъектМетаданных = Набор.Метаданные();
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Комментарий, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СопоставлениеНоменклатурыКонтрагентов,, ПараметрыЗаписи);
		ВызватьИсключение Комментарий;
	КонецПопытки;
	
КонецПроцедуры

Функция ПараметрыЗаписи()
	
	Параметры = Новый Структура();
	Параметры.Вставить("СсылкаНаОбъект");
	Параметры.Вставить("Позиция");
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьСловарьСопоставленияНоменклатурыБЭД(Параметры)

	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() > 0 Тогда
		Порция = ОбновляемыеДанные.ВыгрузитьКолонку("СсылкаНаОбъект");
		ПараметрыОбновления = СопоставлениеНоменклатурыКонтрагентовСлужебный.НовыеПараметрыОбновленияСловаря();
		ПараметрыОбновления.ОтметитьВыполнениеОбработки = Истина;
		СопоставлениеНоменклатурыКонтрагентовСлужебный.ОбновитьПорциюСсылокСловаря(Порция, ПараметрыОбновления);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
		Метаданные.РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ПолноеИмя());

КонецПроцедуры

Процедура ОчиститьСловарьСопоставленияНоменклатурыБЭД(Параметры)
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Строка Из ОбновляемыеДанные Цикл
		ОчиститьРегистр(Строка.СсылкаНаОбъект, Истина);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
		Метаданные.РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ПолноеИмя());

КонецПроцедуры

#КонецОбласти

#КонецЕсли