#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра  = Метаданные.РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой;
	ПолноеИмяРегистра   = МетаданныеРегистра.ПолноеИмя();
	ТаблицаНоменклатура = РаботаСНоменклатурой.ИмяТаблицыПоТипу(МетаданныеРегистра.Измерения.Номенклатура.Тип);
	
	Если НЕ ЗначениеЗаполнено(ТаблицаНоменклатура) Тогда
		// Не удалось определить таблицу хранения номенклатуры, обработка данных невозможна
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Номенклатура");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Номенклатура");
	
	РегистрацияДанныхДляОбработки_1_6_1(ДополнительныеПараметры, Параметры, ТаблицаНоменклатура);
	РегистрацияДанныхДляОбработки_1_7_2(ДополнительныеПараметры, Параметры, ТаблицаНоменклатура);
	
КонецПроцедуры

// Обработчик обновления БЭД 1.7.2
// Дополняет данные регистра СоответствиеНоменклатурыРаботаСНоменклатурой данными регистра УдалитьСоответствиеНоменклатурыБизнесСеть.
// 
// Обработчик обновления БЭД 1.6.1
// Заполняет ресурсы СтатусСопоставления и РежимЗагрузкиХарактеристик
// 
// Параметры:
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой;
	ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	СписокНоменклатуры = Новый Массив;
	Если ЗначениеЗаполнено(ОбновляемыеДанные) Тогда
		СписокНоменклатуры = ОбновляемыеДанные.ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	ДанныеДляЗаполнения_1_7_2 = ДанныеДляЗаполнения_1_7_2(СписокНоменклатуры);
	
	ЕстьОтработанныеЗаписи = Ложь;
	ПроизошлаОшибка        = Ложь;
	Для Каждого Строка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки       = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Строка.Номенклатура);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);
			НаборЗаписей.Прочитать();
			
			Записать = Ложь;
			ОбработкаДанных_1_6_1(НаборЗаписей, Записать);
			ОбработкаДанных_1_7_2(НаборЗаписей, ДанныеДляЗаполнения_1_7_2, Строка.Номенклатура, Записать);
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЕстьОтработанныеЗаписи = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать записи по номенклатуре %1 по причине:'");
			ТекстСообщения  = СтрШаблон(ШаблонСообщения, Строка.Номенклатура) + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			МетаданныеРегистра, Строка.Номенклатура, ТекстСообщения);
			
			ПроизошлаОшибка = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ ЕстьОтработанныеЗаписи И ПроизошлаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнение ресурса СтатусСопоставления
Процедура РегистрацияДанныхДляОбработки_1_6_1(ДополнительныеПараметры, Параметры, ТаблицаНоменклатура)
	
	РазмерПорции = 1000;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СправочникНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	&СправочникНоменклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка > &ПорядокОбхода
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|			ГДЕ
	|				СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = СправочникНоменклатура.Ссылка
	|				И СоответствиеНоменклатурыРаботаСНоменклатурой.СтатусСопоставления = ЗНАЧЕНИЕ(Перечисление.СтатусыСопоставленияРаботаСНоменклатурой.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СправочникНоменклатура", ТаблицаНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(РазмерПорции, "ЧГ="));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОтработаныВсеДанные = Ложь;
	ПорядокОбхода       = Неопределено;
	
	Пока НЕ ОтработаныВсеДанные Цикл
		
		Запрос.УстановитьПараметр("ПорядокОбхода", ПорядокОбхода);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок < РазмерПорции Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрок > 0 Тогда
			ПорядокОбхода = Выгрузка[КоличествоСтрок - 1].Номенклатура;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Перенос данных из удаляемого регистра УдалитьСоответствиеНоменклатурыБизнесСеть
Процедура РегистрацияДанныхДляОбработки_1_7_2(ДополнительныеПараметры, Параметры, ТаблицаНоменклатура)
	
	// Условия регистрации:
	// 1. ИдентификаторКатегории в регистре-приемнике (СоответствиеНоменклатурыРаботаСНоменклатурой) отсутствует, либо пустой.
	// 2. Есть запись в регистре-источнике (УдалитьСоответствиеНоменклатурыБизнесСеть).
	
	РазмерПорции = 1000;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СправочникНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	&СправочникНоменклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка > &ПорядокОбхода
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|				ГДЕ
	|					СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = СправочникНоменклатура.Ссылка
	|					И СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории <> """")
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.УдалитьСоответствиеНоменклатурыБизнесСеть КАК УдалитьСоответствиеНоменклатурыБизнесСеть
	|			ГДЕ
	|				УдалитьСоответствиеНоменклатурыБизнесСеть.ОбъектСопоставления = СправочникНоменклатура.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СправочникНоменклатура", ТаблицаНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(РазмерПорции, "ЧГ="));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОтработаныВсеДанные = Ложь;
	ПорядокОбхода       = Неопределено;
	
	Пока НЕ ОтработаныВсеДанные Цикл
		
		Запрос.УстановитьПараметр("ПорядокОбхода", ПорядокОбхода);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок < РазмерПорции Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрок > 0 Тогда
			ПорядокОбхода = Выгрузка[КоличествоСтрок - 1].Номенклатура;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляЗаполнения_1_7_2(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеНоменклатуры.ОбъектСопоставления КАК Номенклатура,
	|	СоответствиеНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеНоменклатуры.ПредставлениеКатегории КАК ПредставлениеКатегории
	|ИЗ
	|	РегистрСведений.УдалитьСоответствиеНоменклатурыБизнесСеть КАК СоответствиеНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатуры.ОбъектСопоставления В(&СписокНоменклатуры)
	|	И (СоответствиеНоменклатуры.ИдентификаторКатегории, ИСТИНА) В
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(УдалитьСоответствиеНоменклатурыБизнесСеть.ИдентификаторКатегории),
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.УдалитьСоответствиеНоменклатурыБизнесСеть КАК УдалитьСоответствиеНоменклатурыБизнесСеть
	|		ГДЕ
	|			УдалитьСоответствиеНоменклатурыБизнесСеть.ОбъектСопоставления = СоответствиеНоменклатуры.ОбъектСопоставления)";
	
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Номенклатура");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаДанных_1_6_1(НаборЗаписей, Записать)
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		// Не установлен статус сопоставления.
		Если Не ЗначениеЗаполнено(ЗаписьНабора.СтатусСопоставления) Тогда
			ЗаписьНабора.СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;;
			Записать = Истина;
		КонецЕсли;
		
		// Не установлен режим загрузки характеристик.
		Если Не ЗначениеЗаполнено(ЗаписьНабора.Характеристика) И Не ЗначениеЗаполнено(ЗаписьНабора.РежимЗагрузкиХарактеристик) Тогда
			ЗаписьНабора.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ХарактеристикиНеИспользуются;;
			Записать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаДанных_1_7_2(НаборЗаписей, ДанныеДляЗаполнения, НоменклатураСсылка, Записать)
	
	Если ТипЗнч(ДанныеДляЗаполнения) <> Тип("ТаблицаЗначений") Тогда
		Возврат
	КонецЕсли;
	
	СтрокиДляЗаполнения = ДанныеДляЗаполнения.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураСсылка));
	Если СтрокиДляЗаполнения.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокиДляЗаполнения[0]);
	
	ДанныеЗаполнены = Ложь;
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗначениеЗаполнено(ЗаписьНабора.Характеристика) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторКатегории) Тогда
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ПараметрыЗаполнения,, "Номенклатура");
			Записать = Истина;
		КонецЕсли;
		ДанныеЗаполнены = Истина;
	КонецЦикла;
	
	Если Не ДанныеЗаполнены Тогда
		СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.НеСопоставлено;
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(НоменклатураСсылка) Тогда
			СтатусСопоставления = Перечисления.СтатусыСопоставленияРаботаСНоменклатурой.СопоставленаГруппа;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаполнения);
		Запись.СтатусСопоставления        = СтатусСопоставления;
		Запись.РежимЗагрузкиХарактеристик = Перечисления.РежимыЗагрузкиХарактеристикРаботаСНоменклатурой.ХарактеристикиНеИспользуются;
		Записать = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли