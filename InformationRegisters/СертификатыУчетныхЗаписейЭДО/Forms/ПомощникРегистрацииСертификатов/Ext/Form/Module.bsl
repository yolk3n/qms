#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбменаССервером;

&НаКлиенте
Перем КонтекстРаботыС1СТакском, ТекущийПрофильТакском, ТекущийСтатусЗаявкиТакском;

&НаКлиенте
Перем ЗаданиеНаПроверкуЗапущено;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОперацииПомощникаРегистрацииСертификатов = УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов();
	Параметры.Свойство("Операция", Операция); // "Подписание", "Отправка" или "Прочее"
	Если Операция = ОперацииПомощникаРегистрацииСертификатов.Подписание Тогда
		
		Элементы.НеНапоминать.Видимость = Ложь;
		
		ТаблицаДанных = СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов();
		Для Каждого ЭлементМассива Из Параметры.Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), ЭлементМассива);
		КонецЦикла;
	
	ИначеЕсли Операция = ОперацииПомощникаРегистрацииСертификатов.Отправка Тогда
		
		Если ОбрабатыватьОтложенныеНапоминания() Тогда
			НастройкаНапоминаний = УчетныеЗаписиЭДОСлужебный.НапоминанияОбОтсутствииСертификатов();
			Если НастройкаНапоминаний <> Неопределено Тогда
				ОтложенныеНапоминания.Загрузить(НастройкаНапоминаний);
			КонецЕсли;
		КонецЕсли;
		
		Профили = Неопределено;
		Параметры.Свойство("УчетныеЗаписи", Профили);
		
		ТаблицаДанных = СформироватьТаблицуДанных(Профили);
		
	ИначеЕсли Операция = ОперацииПомощникаРегистрацииСертификатов.РегистрацияНепривязанныхСертификатов Тогда
		
		Профили = Неопределено;
		Параметры.Свойство("УчетныеЗаписи", Профили);
		Если ТипЗнч(Профили) = Тип("Массив") И Профили.Количество() > 0 Тогда
			Сч = 0;
			Для каждого Профиль Из Профили Цикл
				Профили[Сч] = Профиль.ИдентификаторЭДО;
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("Сертификаты") Тогда
			Сертификаты.ЗагрузитьЗначения(Параметры.Сертификаты);
		КонецЕсли;
		
		Если Профили = Неопределено Или Профили.Количество() = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
			|ИЗ
			|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Профили = Новый Массив;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Профили.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО);
			КонецЦикла;
		КонецЕсли;
		ТаблицаДанных = СформироватьТаблицуДанных(Профили);
		
	Иначе // Прочее
		
		Элементы.НеНапоминать.Видимость = Ложь;
		
		Профили = Неопределено;
		Параметры.Свойство("УчетныеЗаписи", Профили);

		ТаблицаДанных = СформироватьТаблицуДанных(Профили);
				
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Шаблон = НСтр("ru = 'В учетной записи %1 отсутствуют доступные сертификаты. Выполните настройку в настольном приложении.'");
		МассивИдентификаторов = ТаблицаДанных.ВыгрузитьКолонку("ИдентификаторОтправителя");
		МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИдентификаторов);
		Для каждого ЭлементКоллекции Из МассивИдентификаторов Цикл
			ТекстСообщения = СтрШаблон(Шаблон, ЭлементКоллекции);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДанныеФормы(ТаблицаДанных);
	
	Если УчетныеЗаписиБезСертификатов.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаданиеНаПроверкуЗапущено = Неопределено Тогда
		ЗаданиеНаПроверкуЗапущено = Ложь;
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
	ПараметрыОбменаССервером = Новый Структура;
	ПараметрыОбменаССервером.Вставить("ИдентификаторФормы",   УникальныйИдентификатор);
	ПараметрыОбменаССервером.Вставить("АдресРезультата",      Неопределено);
	ПараметрыОбменаССервером.Вставить("ИдентификаторЗадания", Неопределено);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ОбработкаВыбораСертификата(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПоказатьПомощникРегистрацииСертификатов" Тогда
		
		Параметр.ФормаПомощникаОткрыта = Истина;
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		Открыть();
		
		Параметр.Свойство("Операция", Операция);
		
		ПолучитьИОбработатьТаблицуДанных(Параметр.Данные, Параметр.УчетныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НеподписанныеДокументыНадписьНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НеподписанныеДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	УчетныеЗаписиЭДОСлужебныйКлиент.ПоказатьНеподписанныеДокументы(НеподписанныеДокументы,
		Элементы.НеподписанныеДокументыНадпись.Заголовок, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверитьДанныеНажатие(Элемент)
	
	Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьРедактированиеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.КодНалоговогоОргана = КодНалоговогоОргана;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЭлектроннаяПочта = ЭлектроннаяПочта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(ЭтотОбъект, Сертификат, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьПриИзменении(Элемент)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	ТекущиеДанные.Доверенность = Доверенность;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрофилиНастроекЭДО

&НаКлиенте
Процедура ПрофилиНастроекЭДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Если ТекущиеДанные.Статус = 1
		ИЛИ ТекущиеДанные.Статус = -1
		ИЛИ ТекущиеДанные.Статус = 3 Тогда
		
		УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗапись(ТекущиеДанные.ИдентификаторОрганизации);
		Возврат;
	КонецЕсли;
	
	ДобавитьСертификатВПрофильНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиНастроекЭДОПриАктивизацииСтроки(Элемент)
	
	ОбновитьПанельДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильНастроекЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗапись(УчетныеЗаписиБезСертификатов[0].ИдентификаторОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКВыборуУчетнойЗаписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ДобавитьСертификатВПрофильНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьПовторно(Команда)
	
	Если ЗначениеЗаполнено(НеподписанныеДокументы) Тогда
		ПараметрыВыполнения = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Сформировать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(ПараметрыВыполнения.НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
		ПараметрыВыполнения.ОбъектыДействий.Сообщения = НеподписанныеДокументы.ВыгрузитьЗначения();
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект,
			ПараметрыВыполнения.ОбъектыДействий.Сообщения);
		ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполнения);
		НеподписанныеДокументы.Очистить();
		Закрыть();
		
	ИначеЕсли Операция = УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов().Отправка Тогда
		СинхронизацияЭДОКлиент.ВыполнитьОбменЭлектроннымиДокументами(ЭтаФорма);
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрофильНастроекЭДО(Команда)
	
	ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗапись(ТекущиеДанные.ИдентификаторОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НеНапоминать(Команда)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьПрофильВНастройкуНапоминаний(ТекущиеДанные.ИдентификаторОрганизации);
	КонецЕсли;
	
	ОповеститьОбУстраненииОшибок();
	
	Если Не УчетныеЗаписиБезСертификатов.Количество() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ПерейтиКВыборуУчетнойЗаписи();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСобытийФормы

&НаСервере
Процедура ЗаполнитьДанныеФормы(ТаблицаДанных, ПовторноеЗаполнение = Ложь)
	
	УстановитьСвойстваЭлементовФормы();
	
	Если НЕ ТаблицаДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запросы = Новый Массив;
	
	ЗапросПредставленийЭД = ЭлектронныеДокументыЭДО.ЗапросПараметровПредставленияДокументов(
		"ПредставленияЭлектронныхДокументов", "&ЭлектронныеДокументы");
	
	Запросы.Добавить(ЗапросПредставленийЭД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИдентификаторЭДО КАК ИдентификаторОтправителя,
		|	ТаблицаДанных.Сообщение КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК Наименование,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	УчетныеЗаписиЭДО.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорЭДОИд,
		|	УчетныеЗаписиЭДО.ЭлектроннаяПочтаДляУведомлений КАК ЭлектроннаяПочта,
		|	УчетныеЗаписиЭДО.АдресОрганизации КАК АдресОрганизации,
		|	УчетныеЗаписиЭДО.АдресОрганизацииЗначение КАК АдресОрганизацииЗначение,
		|	ЛОЖЬ КАК Ожидание
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_ЭД.ИдентификаторОтправителя
		|			ИЗ
		|				ВТ_ЭД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК ДокументОснование,
		|	ПредставленияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
		|	ПредставленияЭлектронныхДокументов.НомерДокумента КАК НомерДокумента,
		|	ПредставленияЭлектронныхДокументов.ДатаДокумента КАК ДатаДокумента
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияЭлектронныхДокументов КАК ПредставленияЭлектронныхДокументов
		|		ПО ВТ_ЭД.Ссылка = ПредставленияЭлектронныхДокументов.Ссылка";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	ИтоговыйЗапрос.УстановитьПараметр("ЭлектронныеДокументы", ТаблицаДанных.ВыгрузитьКолонку("Сообщение"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = ИтоговыйЗапрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекущийПрофильЭДО = Неопределено;
	Если ПовторноеЗаполнение Тогда
		ТаблицаДанных = УчетныеЗаписиБезСертификатов.Выгрузить();
		Выборка = Результаты[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийПрофильЭДО = Выборка.ИдентификаторОрганизации;
			Если ТаблицаДанных.Найти(ТекущийПрофильЭДО, "ИдентификаторОрганизации") = Неопределено Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				ЗаполнитьРегистрационныеДанныеОрганизации(НоваяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		УчетныеЗаписиБезСертификатов.Загрузить(ТаблицаДанных);
	Иначе
		ТаблицаДанных = Результаты[2].Выгрузить();
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			НоваяСтрока = УчетныеЗаписиБезСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			ЗаполнитьРегистрационныеДанныеОрганизации(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если УчетныеЗаписиБезСертификатов.Количество() > 1 Тогда
		ОтображениеСписком = Истина;
	Иначе
		ОтображениеСписком = Ложь;
	КонецЕсли;
	
	Если ОтображениеСписком И ТекущийПрофильЭДО <> Неопределено Тогда
		Отбор = Новый Структура("ИдентификаторОрганизации", ТекущийПрофильЭДО);
		НайденныеСтроки = УчетныеЗаписиБезСертификатов.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Элементы.УчетныеЗаписиБезСертификатов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результаты[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПовторноеЗаполнение Тогда
			НайденноеЗначение = НеподписанныеДокументы.НайтиПоЗначению(Выборка.ДокументОснование);
			Если НайденноеЗначение <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НеподписанныеДокументы.Добавить(Выборка.ДокументОснование,
			СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Выборка.ВидДокумента, Выборка.НомерДокумента,
			Выборка.ДатаДокумента));
	КонецЦикла;
	
	НастроитьОтображениеФормы(ПовторноеЗаполнение);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеФормы(ПовторноеЗаполнение = Ложь)
	
	Если ОтображениеСписком Тогда
		Элементы.ПанельСертификатыНедоступны.ТекущаяСтраница = Элементы.СтраницаСертификатыНедоступныТаблицаПрофилейЭДО;
		Элементы.СтраницаСертификатыНедоступныПрофильЭДО.Видимость = Ложь;
		Элементы.СтраницаСертификатыНедоступныТаблицаПрофилейЭДО.Видимость = Истина;
		КлючСохраненияПоложенияОкна = "ОтображениеСписком";
	Иначе
		Элементы.ПанельСертификатыНедоступны.ТекущаяСтраница = Элементы.СтраницаСертификатыНедоступныПрофильЭДО;
		Элементы.СтраницаСертификатыНедоступныПрофильЭДО.Видимость = Истина;
		Элементы.СтраницаСертификатыНедоступныТаблицаПрофилейЭДО.Видимость = Ложь;
		КлючСохраненияПоложенияОкна = "ОтображениеЭлементом";
		ТекущийЭлемент = Элементы.ДобавитьСертификатВводДанных;
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru = 'Не удалось подписать документы (%1)'");
	Элементы.НеподписанныеДокументыНадпись.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСтроки, НеподписанныеДокументы.Количество());
	
	Если НЕ ПовторноеЗаполнение Тогда
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПрофилиНастроекЭДО");
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(1);
		СписокОтбора.Добавить(-1);
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НастройкиЭДО.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокОтбора;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельДополнительнойИнформации()
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Доверенность.Видимость = ТекущиеДанные.ТребуетсяДоверенность;
		
	Если ТекущиеДанные.Статус = 0 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаИнформация;
		
		Элементы.Доверенность.СписокВыбора.ЗагрузитьЗначения(
			ТекущиеДанные.Доверенности.ВыгрузитьЗначения());
		
		Организация         = ТекущиеДанные.Организация;
		АдресОрганизации    = ТекущиеДанные.АдресОрганизации;
		КодНалоговогоОргана = ТекущиеДанные.КодНалоговогоОргана;
		ЭлектроннаяПочта    = ТекущиеДанные.ЭлектроннаяПочта;
		Сертификат          = ТекущиеДанные.Сертификат;
		Доверенность        = ТекущиеДанные.Доверенность;
		
		ЭтоОбменЧерезОператора = СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ТекущиеДанные.СпособОбменаЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДобавитьСертификатВводДанных", "Доступность", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДобавитьСертификатВводДанных", "КнопкаПоУмолчанию", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			Элементы.ПанельДанныеДляРегистрации.Имя, "Видимость", ЭтоОбменЧерезОператора);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			Элементы.КодНалоговогоОргана.Имя, "Видимость",
			ТекущиеДанные.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
			
	ИначеЕсли ТекущиеДанные.Статус = 1 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.НадписьОжидание.Заголовок = НСтр("ru = 'Ожидание результата регистрации сертификата в сервисе'");
		
	ИначеЕсли ТекущиеДанные.Статус = -1 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.НадписьОжидание.Заголовок = НСтр("ru = 'Ожидание добавления сертификата в профиль:'")
			+ Символы.ПС + ТекущийПрофильТакском;
		
	ИначеЕсли ТекущиеДанные.Статус = 2 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Элементы.НадписьОписаниеОшибки.Заголовок = ТекущиеДанные.ОписаниеОшибки;
		Сертификат = ТекущиеДанные.Сертификат;
		
	ИначеЕсли ТекущиеДанные.Статус = 3 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаУспешно;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодписатьИОтправитьПовторно", "КнопкаПоУмолчанию", Истина);
		Сертификат = ТекущиеДанные.Сертификат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРедактированиеАдреса()
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеАдресаЗавершение", ЭтотОбъект, ТекущиеДанные);
	ИнтеграцияБСПБЭДКлиент.НачатьРедактированиеАдреса(ТекущиеДанные.АдресОрганизации,
		ТекущиеДанные.АдресОрганизацииЗначение, Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАдресаЗавершение(ПараметрыАдреса, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(ПараметрыАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	АдресОрганизации = ПараметрыАдреса.Представление;
	ТекущиеДанные.АдресОрганизации           = ПараметрыАдреса.Представление;
	ТекущиеДанные.АдресОрганизацииЗначение   = ПараметрыАдреса.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВПрофильНастроекЭДО()
	
	Если ЕстьПравоНастройкиОбмена()
		И ДанныеДляРегистрацииЗаполнены() Тогда
		Если ОтображениеСписком Тогда
			ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
		Иначе
			ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
		КонецЕсли;
		ЗарегистрироватьДобавитьСертификат(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ДанныеДляРегистрацииЗаполнены()
	
	Отказ = Ложь;
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	Если Не СинхронизацияЭДОКлиентСервер.ЭтоОбменЧерезОператора(ТекущиеДанные.СпособОбменаЭД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите профиль для добавления сертификата.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.Статус = 2 Тогда
		ТекущиеДанные.Статус = 0;
		ОбновитьПанельДополнительнойИнформации();
	КонецЕсли;
	
	Если ТекущиеДанные.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
		И ПустаяСтрока(КодНалоговогоОргана) Тогда
		Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		ТекстСообщения = НСтр("ru = 'Поле ""Код налогового органа"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"КодНалоговогоОргана",,Отказ);
	КонецЕсли;
	
	Если ПустаяСтрока(АдресОрганизации) Тогда
		Если НЕ Отказ Тогда
			Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Поле ""Юридический адрес"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"АдресОрганизации",,Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сертификат) Тогда
		Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		ТекстСообщения = НСтр("ru = 'Поле ""Сертификат"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Сертификат",,Отказ);
	КонецЕсли;
	
	Если ТекущиеДанные.ТребуетсяДоверенность И Не ЗначениеЗаполнено(ТекущиеДанные.Доверенность) Тогда
		Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена доверенность для сертификата %1'"), Сертификат);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Доверенность",, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораСертификата(Сертификат)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПроверкиПередДобавлениемСертификата(Организация, Профиль, Сертификат)

	Результат = Новый Структура;
	
	// Проверяем равенство ИНН и КПП в сертификате и организации.
	СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	СвойстваСубъекта.Вставить("ИНН", 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваСубъекта.ИНН, 12, "0"));
	
	РеквизитИНН = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	РеквизитКПП = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитИНН + ", " + РеквизитКПП);
	СвойстваОрганизации.Вставить(РеквизитИНН, 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваОрганизации[РеквизитИНН], 12, "0"));
	
	Результат.Вставить("ИННОтличается", СвойстваСубъекта.Свойство("ИНН") И СвойстваСубъекта.ИНН <> СвойстваОрганизации[РеквизитИНН]);
	Результат.Вставить("КППОтличается", СвойстваСубъекта.Свойство("КПП") И СвойстваСубъекта.КПП <> СвойстваОрганизации[РеквизитКПП]);
	
	СообщениеОбОшибке = "";
	// Проверяем для облачных сертификатов, что их можно использовать.
	Результат.Вставить("СертификатЗапрещенКакОблачный",
		Не КриптографияБЭД.ПроверитьПравомерностьИспользованияСертификата(Сертификат, СообщениеОбОшибке));
	Результат.Вставить("СообщениеОбОшибкеИспользованияОблачногоСертификата", СообщениеОбОшибке);
	
	Результат.Вставить("СертификатУжеЗарегистрирован", СертификатЗарегистрированВУчетнойЗаписи(Сертификат,
		Профиль));
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция РезультатПроверкиСертификатаИДоверенности(Организация, ИдентификаторОрганизации, Сертификат, СпособОбмена)
	
	Результат = РезультатПроверкиПередДобавлениемСертификата(Организация, ИдентификаторОрганизации, Сертификат);
	Результат.Вставить("ТребуетсяДоверенность",
		УчетныеЗаписиЭДОСлужебный.ТребуетсяДоверенность(Организация, Сертификат, СпособОбмена));
		
	УчетныеЗаписиЭДОСлужебный.ЗаполнитьСписокВыбораДоверенностей(Организация, Сертификат, Элементы.Доверенность);
	СписокВыбора = Элементы.Доверенность.СписокВыбора;
	Если СписокВыбора.Количество() = 1 Тогда
		Доверенность = СписокВыбора[0].Значение;
	КонецЕсли;
	
	Результат.Вставить("Доверенности", СписокВыбора);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ДанныеПрофиля)
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("Сертификат", Сертификат);
	
	РезультатыПроверки = РезультатПроверкиСертификатаИДоверенности(Организация, ДанныеПрофиля.ИдентификаторОрганизации,
		Сертификат, ДанныеПрофиля.СпособОбменаЭД);
	
	РезультатВыбора.Вставить("ТребуетсяДоверенность", РезультатыПроверки.ТребуетсяДоверенность);
	
	ДанныеПрофиля.Доверенности = РезультатыПроверки.Доверенности;
	
	Элементы.Доверенность.СписокВыбора.ЗагрузитьЗначения(
		ДанныеПрофиля.Доверенности.ВыгрузитьЗначения());
	Если ДанныеПрофиля.Доверенности.Количество() = 1 Тогда
		ДанныеПрофиля.Доверенность = ДанныеПрофиля.Доверенности[0].Значение;
	КонецЕсли;
	Доверенность = ДанныеПрофиля.Доверенность;
	
	// Облачные сертификаты могут быть запрещены.
	Если РезультатыПроверки.СертификатЗапрещенКакОблачный Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			РезультатыПроверки.СообщениеОбОшибкеИспользованияОблачногоСертификата);
		Возврат;
	КонецЕсли;
	
	Если РезультатыПроверки.СертификатУжеЗарегистрирован Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже зарегистрирован в выбранной учетной записи. Выберите другой.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	Если Не РезультатыПроверки.ТребуетсяДоверенность И (РезультатыПроверки.ИННОтличается ИЛИ РезультатыПроверки.КППОтличается) Тогда
		ДополнительныеПараметры = Новый Структура("РезультатВыбора, ДанныеПрофиля", РезультатВыбора, ДанныеПрофиля);
		ПослеПодтвержденияДобавленияСертификата = Новый ОписаниеОповещения("ПослеПодтвержденияДобавленияСертификата",
			ЭтотОбъект, ДополнительныеПараметры);
			
		Вопросы = Новый Массив;
		
		Если РезультатыПроверки.ИННОтличается И РезультатыПроверки.КППОтличается Тогда
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН/КПП по данным выбранного сертификата не совпадают с ИНН/КПП организации.'");
		ИначеЕсли РезультатыПроверки.ИННОтличается Тогда
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН по данным выбранного сертификата не совпадает с ИНН организации.'");
		Иначе
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'КПП по данным выбранного сертификата не совпадает с КПП организации.'");
		КонецЕсли;
		
		Вопросы.Добавить(ПредупреждениеОРазличииРеквизитов);
		Вопросы.Добавить(НСтр("ru = 'Продолжить регистрацию сертификата?'"));
		
		ТекстВопроса = СтрСоединить(Вопросы, Символы.ПС);
		ПоказатьВопрос(ПослеПодтвержденияДобавленияСертификата, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ПриУспешнойПроверкеСертификата(РезультатВыбора, ДанныеПрофиля);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияДобавленияСертификата(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеСертификата(ДополнительныеПараметры.РезультатВыбора, ДополнительныеПараметры.ДанныеПрофиля);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриУспешнойПроверкеСертификата(РезультатВыбора, ТекущиеДанные)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.УчетныеЗаписиБезСертификатов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = УчетныеЗаписиБезСертификатов[0];
	КонецЕсли;
	
	ТекущиеДанные.ТребуетсяДоверенность = РезультатВыбора.ТребуетсяДоверенность;
	ТекущиеДанные.Сертификат = РезультатВыбора.Сертификат;
	
	Сертификат = РезультатВыбора.Сертификат;
	
	Элементы.Доверенность.Видимость = ТекущиеДанные.ТребуетсяДоверенность;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДобавитьСертификат(ТекущиеДанные)
	
	Элементы.ДобавитьСертификатВводДанных.Доступность = Ложь;
	
	Если ТекущиеДанные.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		ЗарегистрироватьСертификатВСервисе1СЭДО(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		Если ИнтеграцияБИПБЭДКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
			
			ЗарегистрироватьСертификатВСервисеТакском(ТекущиеДанные);
			
		Иначе
			
			ЗарегистрироватьСертификатБезСохраненияВСервисеТакском(ТекущиеДанные);
			
			// В случае, если в конфигурацию не встроена интернет-поддержка или работа производится в режиме сервиса,
			// сертификат в сервисе 1С-Такском необходимо регистрировать через тех. поддержку.
			Если ТекущиеДанные.Успешно Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат добавлен в учетную запись, но для регистрации его в сервисе ЭДО необходимо обратиться в техническую поддержку 1С-ЭДО.'"));
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		СтруктураДанных = ВыгрузитьДанныеФормыВСтруктуру(ТекущиеДанные);
		
		СписокОшибок = Неопределено;
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		ДобавитьСертификатыВПрофиляЭДОНаСервере(МассивДанных, СписокОшибок);
		
		Если СписокОшибок = Неопределено Тогда
			УстановитьСтатусУспешно(ТекущиеДанные);
		Иначе
			УстановитьСтатусОшибка(СписокОшибок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если ОбрабатыватьОтложенныеНапоминания() Тогда
		УчетныеЗаписиЭДОСлужебный.СохранитьНапоминанияОбОтсутствииСертификатов(
			РеквизитФормыВЗначение("ОтложенныеНапоминания", Тип("ТаблицаЗначений")));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияСертификатаВСервисе1СЭДО

&НаКлиенте
Процедура ЗарегистрироватьСертификатВСервисе1СЭДО(ТекущиеДанные)
	
	ПараметрыРегистрации = СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО();
	ПараметрыРегистрации.Организация = ТекущиеДанные.Организация;
	ПараметрыРегистрации.ОператорЭДО = ТекущиеДанные.ОператорЭДОИд;
	ПараметрыРегистрации.АдресОрганизации = ТекущиеДанные.АдресОрганизации;
	ПараметрыРегистрации.АдресОрганизацииЗначение = ТекущиеДанные.АдресОрганизацииЗначение;
	ПараметрыРегистрации.ЭлектроннаяПочта = ЭлектроннаяПочта;
	ПараметрыРегистрации.КодНалоговогоОргана = КодНалоговогоОргана;
	ПараметрыРегистрации.СертификатыПодписейОрганизации.Добавить(ТекущиеДанные.Сертификат);
	Для Каждого Сертификат Из СертификатыУчетнойЗаписи(ТекущиеДанные.ИдентификаторОрганизации) Цикл
		ПараметрыРегистрации.СертификатыПодписейОрганизации.Добавить(Сертификат);
	КонецЦикла;
	ПараметрыРегистрации.ИдентификаторОрганизации = ТекущиеДанные.ИдентификаторОрганизации;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеСтроки", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	УстановитьСтатусОжидание(ТекущиеДанные);
	УчетныеЗаписиЭДОКлиент.ЗарегистрироватьСертификатВСервисе1СЭДО(ЭтотОбъект, Оповещение,
		ПараметрыРегистрации, КонтекстДиагностики);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СертификатыУчетнойЗаписи(ИдентификаторУчетнойЗаписи)
	
	Возврат УчетныеЗаписиЭДОСлужебный.СертификатыУчетнойЗаписи(ИдентификаторУчетнойЗаписи);
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОЗавершение(Результат, Контекст) Экспорт
	
	Если Результат.Успех Тогда
		Если НЕ ЗаданиеНаПроверкуЗапущено Тогда
			Контекст.ДанныеСтроки.ИдентификаторЗаявки = Результат.УникальныйИдентификаторЗаявки1СЭДО;
			ПроверитьВыполнениеЗаявкиНаРегистрацию();
		КонецЕсли;
	Иначе 
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
		УстановитьСтатусВводДанных(Контекст.ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеЗаявкиНаРегистрацию(Результат = Неопределено, Контекст = Неопределено) Экспорт
	
	ПовторитьПроверку = Ложь;
	
	ПараметрыОтбора = Новый Структура("Статус", 1);
	НайденныеСтроки = УчетныеЗаписиБезСертификатов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЗаявок = Новый Массив;
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ИдентификаторЗаявки) Тогда
			ИдентификаторыЗаявок.Добавить(СтрокаТаблицы.ИдентификаторЗаявки);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаданиеНаПроверкуЗапущено Тогда
		
		Если Результат = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Фоновое задание отменено пользователем'");
			УстановитьСтатусОшибка(НайденныеСтроки, ОписаниеОшибки);
			Возврат;
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			УстановитьСтатусОшибка(НайденныеСтроки, Результат.ПодробноеПредставлениеОшибки);
			Возврат;
		КонецЕсли;
		
		РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // см. СервисЭДО.ПолучитьСостояниеРегистрацииВСервисе1СЭДО
			
		МассивДанных = Новый Массив;
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СостояниеРегистрации = РезультатПроверки.СостояниеРегистрации.Получить(СтрокаТаблицы.ИдентификаторЗаявки);
			
			Если СостояниеРегистрации = Неопределено Тогда
				ПовторитьПроверку = Истина;
				
			ИначеЕсли СостояниеРегистрации.Результат Тогда
				СтруктураДанных = ВыгрузитьДанныеФормыВСтруктуру(СтрокаТаблицы);
				МассивДанных.Добавить(СтруктураДанных);
				УстановитьСтатусУспешно(СтрокаТаблицы);
				
			Иначе
				УстановитьСтатусОшибка(СтрокаТаблицы, СостояниеРегистрации.ОписаниеОшибки);
				
			КонецЕсли;
				
		КонецЦикла;
			
		Если МассивДанных.Количество() Тогда
			СписокОшибок = Неопределено;
			ДобавитьСертификатыВПрофиляЭДОНаСервере(МассивДанных, СписокОшибок);
			Если СписокОшибок <> Неопределено Тогда
				УстановитьСтатусОшибка(СписокОшибок);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПовторитьПроверку = Истина;
	КонецЕсли;
	
	Если ПовторитьПроверку Тогда
		ЗаданиеНаПроверкуЗапущено = Истина;
		ДлительнаяОперация = ЗапуститьЗаданиеНаПроверкуЗаявкиНаРегистрацию(ИдентификаторыЗаявок, УникальныйИдентификатор);
		
		// Обертка оповещения для работы в режиме скрытой формы.
		Оповещение = Новый ОписаниеОповещения("ПроверитьВыполнениеЗаявкиНаРегистрацию", ЭтотОбъект);
		Контекст = Новый Структура("Оповещение", Оповещение);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.Интервал = 15;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		ЗаданиеНаПроверкуЗапущено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьЗаданиеНаПроверкуЗаявкиНаРегистрацию(Знач ИдентификаторыЗаявок, Знач ИдентификаторФормы)
	
	Возврат СервисЭДОВызовСервера.НачатьПолучениеСостоянияРегистрацииВСервисе1СЭДО(ИдентификаторыЗаявок, ИдентификаторФормы);
	
КонецФункции

#КонецОбласти

#Область РегистрацияСертификатаВСервисеТакском

&НаКлиенте
Функция ПодготовитьДанныеДляРегистрацииСертификатаВТакском(ТекущиеДанные)
	
	ТекущийПрофильТакском = ТекущиеДанные.ИдентификаторОрганизации;
	УстановитьСтатусОжидание(ТекущиеДанные);
	
	КонтекстРаботыС1СТакском = Новый Структура;
	КонтекстРаботыС1СТакском.Вставить("ОбработаноНачальноеСостояниеЗаявки", Ложь);
	КонтекстРаботыС1СТакском.Вставить("ПараметрыОбработчика"             , Неопределено);
	КонтекстРаботыС1СТакском.Вставить("ТекущиеДанные"                    , ТекущиеДанные);
	КонтекстРаботыС1СТакском.Вставить("ОписаниеОшибки"                   , "");
	КонтекстРаботыС1СТакском.Вставить("Результат"                        , Ложь);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗарегистрироватьСертификатВСервисеТакскомЗавершение", ЭтотОбъект);
	Возврат ОповещениеОЗавершении;

КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьСертификатБезСохраненияВСервисеТакском(ТекущиеДанные)
	
	ОповещениеОЗавершении = ПодготовитьДанныеДляРегистрацииСертификатаВТакском(ТекущиеДанные);
	КонтекстРаботыС1СТакском.Результат = Истина;
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатВСервисеТакском(ТекущиеДанные)
	
	ОповещениеОЗавершении = ПодготовитьДанныеДляРегистрацииСертификатаВТакском(ТекущиеДанные);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикСтатусаЗаявки" , Новый ОписаниеОповещения("ПриОбработкеСтатусаЗаявки", ЭтотОбъект));
	ДополнительныеПараметры.Вставить("ОбработчикСозданияЗаявки", Новый ОписаниеОповещения("ПриСозданииЗаявки", ЭтотОбъект));
	
	Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(
		ТекущиеДанные.Сертификат,
		ТекущиеДанные.ИдентификаторОрганизации,
		ТекущиеДанные.Организация,
		ОповещениеОЗавершении,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСозданииЗаявки(ПараметрыОбработчика, ДополнительныеПараметры) Экспорт
	
	ДанныеЗаявки  = ПараметрыОбработчика.ДанныеЗаявки;
	ТекущиеДанные = КонтекстРаботыС1СТакском.ТекущиеДанные;
	ПараметрыСертификата = СвойстваСертификата(ТекущиеДанные.Сертификат);
	ДанныеЗаявки.Фамилия  = ПараметрыСертификата.Фамилия;
	ДанныеЗаявки.Имя      = ПараметрыСертификата.Имя;
	ДанныеЗаявки.Отчество = ПараметрыСертификата.Отчество;
	
	Действие = "ОтправитьЗаявку";
	Ошибки = УчетныеЗаписиЭДОСлужебныйКлиент.ОшибкиВДанныхЗаявкиТакском(ДанныеЗаявки);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Действие = "Завершить";
		УчетныеЗаписиЭДОСлужебныйКлиент.СообщитьОбОшибкахВДанныхЗаявкиТакском(Ошибки);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Действие"    , Действие);
	Результат.Вставить("ДанныеЗаявки", ДанныеЗаявки);
	ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОбработчикРезультата, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеСтатусаЗаявки(ПараметрыОбработчика, ДополнительныеПараметры) Экспорт
	
	ТекущийСтатусЗаявкиТакском = ПараметрыОбработчика.СтатусЗаявки;
	
	Если ПараметрыОбработчика.СтатусЗаявки = "Отсутствует" Тогда
		
		Если КонтекстРаботыС1СТакском.ОбработаноНачальноеСостояниеЗаявки Тогда
			// Если заявка уже была запрошена, тогда не может быть состояния "Отсутствует".
			УстановитьСтатусОшибка(КонтекстРаботыС1СТакском.ТекущиеДанные,
				НСтр("ru = 'Несогласованное состояние процесса.'"));
		Иначе
			КонтекстРаботыС1СТакском.ОбработаноНачальноеСостояниеЗаявки = Истина;
			ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОбработчикРезультата, Новый Структура("Действие", "НоваяЗаявка"));
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбработчика.СтатусЗаявки = "ОжиданиеОбработки" Тогда
		
		КонтекстРаботыС1СТакском.ОбработаноНачальноеСостояниеЗаявки = Истина;
		КонтекстРаботыС1СТакском.ПараметрыОбработчика = ПараметрыОбработчика;
		
		ПодключитьОбработчикОжидания("ПроверитьСтатусЗаявки", 15, Истина);
		
	ИначеЕсли ПараметрыОбработчика.СтатусЗаявки = "Отклонена" Тогда
		
		Если КонтекстРаботыС1СТакском.ОбработаноНачальноеСостояниеЗаявки Тогда
			
			КонтекстРаботыС1СТакском.ОписаниеОшибки = НСтр("ru = 'Заявка отклонена оператором по причине.'")
				+ Символы.ПС + ПараметрыОбработчика.ОписаниеОшибки;
			ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОбработчикРезультата, Новый Структура("Действие", "Завершить"));
			
		Иначе
			
			КонтекстРаботыС1СТакском.ОбработаноНачальноеСостояниеЗаявки = Истина;
			ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОбработчикРезультата, Новый Структура("Действие", "НоваяЗаявка"));
			
		КонецЕсли;
		
	Иначе
		
		// Успешно обработана.
		КонтекстРаботыС1СТакском.Результат = Истина;
		ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОбработчикРезультата, Новый Структура("Действие", "Завершить"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусЗаявки()
	
	ВыполнитьОбработкуОповещения(
		КонтекстРаботыС1СТакском.ПараметрыОбработчика.ОбработчикРезультата,
		Новый Структура("Действие", "ПроверитьСтатусЗаявки"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатВСервисеТакскомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если КонтекстРаботыС1СТакском.Результат Тогда
		
		СтруктураДанных = ВыгрузитьДанныеФормыВСтруктуру(КонтекстРаботыС1СТакском.ТекущиеДанные);
		
		СписокОшибок = Неопределено;
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		ДобавитьСертификатыВПрофиляЭДОНаСервере(МассивДанных, СписокОшибок);
		
		Если СписокОшибок = Неопределено Тогда
			УстановитьСтатусУспешно(КонтекстРаботыС1СТакском.ТекущиеДанные);
		Иначе
			УстановитьСтатусОшибка(СписокОшибок);
		КонецЕсли;
		
	Иначе
		УстановитьСтатусОшибка(КонтекстРаботыС1СТакском.ТекущиеДанные, КонтекстРаботыС1СТакском.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеСертификатаВПрофильЭДО

&НаСервереБезКонтекста
Процедура ДобавитьСертификатыВПрофиляЭДОНаСервере(Знач МассивДанных, СписокОшибок)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторОрганизации", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Сертификат"              , Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	Таблица.Колонки.Добавить("Доверенность"            , Новый ОписаниеТипов("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(МассивДанных, Таблица);
	
	Таблица.Свернуть("ИдентификаторОрганизации, Сертификат, Доверенность");
	
	ТаблицаИдентификаторов = Таблица.Скопировать(, "ИдентификаторОрганизации");
	ТаблицаИдентификаторов.Свернуть("ИдентификаторОрганизации");
	
	Для Каждого ИдентификаторЭДО Из ТаблицаИдентификаторов Цикл
		
		Отбор = Новый Структура("ИдентификаторОрганизации", ИдентификаторЭДО.ИдентификаторОрганизации);
		ДанныеПоИдентификатору = Таблица.Скопировать(Отбор, "Сертификат, Доверенность");
		МассивСертификатов = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПоИдентификатору, "Сертификат", Истина);
		Доверенности = Новый Соответствие;
		Для Каждого СтрокаДанных Из ДанныеПоИдентификатору Цикл
			Доверенности.Вставить(СтрокаДанных.Сертификат, СтрокаДанных.Доверенность);
		КонецЦикла;
		УчетныеЗаписиЭДОСлужебный.ЗаписатьСертификатыУчетнойЗаписи(ИдентификаторЭДО.ИдентификаторОрганизации,
			МассивСертификатов, Ложь, Доверенности);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПолучитьИОбработатьТаблицуДанных(Данные, ПрофилиНастроек)
	
	Если ЗначениеЗаполнено(Данные) Тогда
		ТаблицаДанных = СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов();
		Для Каждого ЭлементМассива Из Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных, ЭлементМассива);
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ПрофилиНастроек) Тогда
		
		ТаблицаДанных = СформироватьТаблицуДанных(ПрофилиНастроек);
		
	КонецЕсли;
	
	ЗаполнитьДанныеФормы(ТаблицаДанных, Истина);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуДанных(Профили)
	
	Таблица = СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов();
	Для Каждого Элемент Из Профили Цикл
		Строка = Таблица.Добавить();
		Строка.ИдентификаторЭДО = Элемент;
	КонецЦикла;
	
	УчетныеЗаписиЭДОСлужебный.ПрименитьНастройкиНапоминанийОбОтсутствииСертификатов(ОтложенныеНапоминания, Таблица);
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ДобавитьПрофильВНастройкуНапоминаний(УчетнаяЗапись)
	
	СтрокиНастроек = ОтложенныеНапоминания.НайтиСтроки(Новый Структура("ИдентификаторЭДО", УчетнаяЗапись));
	Если СтрокиНастроек.Количество() Тогда
		СтрокаНастройки = СтрокиНастроек[0];
	Иначе
		СтрокаНастройки = ОтложенныеНапоминания.Добавить();
	КонецЕсли;
	
	ХешСертификатов = УчетныеЗаписиЭДОСлужебный.ХешСертификатовУчетныхЗаписей(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчетнаяЗапись));
	
	СтрокаНастройки.ИдентификаторЭДО = УчетнаяЗапись;
	СтрокаНастройки.ХешСертификатов = ХешСертификатов[УчетнаяЗапись];
	СтрокаНастройки.ДатаОтсчета     = НачалоДня(ТекущаяДатаСеанса());
	
	УдаляемыеСтроки = УчетныеЗаписиБезСертификатов.НайтиСтроки(Новый Структура("ИдентификаторОрганизации", УчетнаяЗапись));
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		УчетныеЗаписиБезСертификатов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(ТекущиеДанные)
	
	ДанныеОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(ТекущиеДанные.Организация);
	
	Если ДанныеОрганизации.Свойство("КодИМНС") Тогда
		ТекущиеДанные.КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	КонецЕсли;
	
	КонтактнаяИнформация = ИнтеграцияБСПБЭД.КонтактнаяИнформацияОбъекта(ТекущиеДанные.Организация,
		"ЮрАдресОрганизации");
	ТекущиеДанные.АдресОрганизации = КонтактнаяИнформация.Представление;
	ТекущиеДанные.АдресОрганизацииЗначение = КонтактнаяИнформация.Значение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СертификатЗарегистрированВУчетнойЗаписи(Сертификат, ИдентификаторУчетнойЗаписи)
	
	Возврат УчетныеЗаписиЭДОСлужебный.СертификатЗарегистрированВУчетнойЗаписи(Сертификат, ИдентификаторУчетнойЗаписи);
	
КонецФункции

&НаКлиенте
Функция ВыгрузитьДанныеФормыВСтруктуру(ТекущиеДанныеФормы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Сертификат",               ТекущиеДанныеФормы.Сертификат);
	Результат.Вставить("ИдентификаторОрганизации", ТекущиеДанныеФормы.ИдентификаторОрганизации);
	Результат.Вставить("Доверенность",             ТекущиеДанныеФормы.Доверенность);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусОжидание(ДанныеСтроки)
	
	ДанныеСтроки.Статус = 1;
	Если ОтображениеСписком И ДанныеСтроки.ИдентификаторОрганизации = ТекущийПрофильТакском Тогда
		
		Отбор = Новый Структура("СпособОбменаЭД", ДанныеСтроки.СпособОбменаЭД);
		МассивСтрок = УчетныеЗаписиБезСертификатов.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			Если СтрокаТаблицы.ИдентификаторОрганизации <> ТекущийПрофильТакском
				И СтрокаТаблицы.Статус <> 3 Тогда
				СтрокаТаблицы.Статус = -1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВводДанных(ДанныеСтроки)
	
	ДанныеСтроки.Статус = 0;
	ОбновитьПанельДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОшибка(Значение, ОписаниеОшибки = "")
	
	ТекстОповещения = НСтр("ru = 'Добавление сертификата.'");
	ТекстПояснения = НСтр("ru = 'Не удалось добавить сертификаты'");
	Контекст = Неопределено;
	
	ОбновитьСтатусыТакском = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из Значение Цикл
			ЭлементМассива.Статус = 2;
			ЭлементМассива.ОписаниеОшибки = ОписаниеОшибки;
			Если ЭлементМассива.ИдентификаторОрганизации = ТекущийПрофильТакском Тогда
				ОбновитьСтатусыТакском = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("Соответствие") Тогда
		Для Каждого ЭлементСоответствия Из Значение Цикл
			Отбор = Новый Структура("ИдентификаторОрганизации", ЭлементСоответствия.Ключ);
			МассивСтрок = УчетныеЗаписиБезСертификатов.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Статус = 2;
				МассивСтрок[0].ОписаниеОшибки = ЭлементСоответствия.Значение;
				Если МассивСтрок[0].ИдентификаторОрганизации = ТекущийПрофильТакском Тогда
					ОбновитьСтатусыТакском = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Значение.Статус = 2;
		Значение.ОписаниеОшибки = ОписаниеОшибки;
		Если ОтображениеСписком И Значение.ИдентификаторОрганизации = ТекущийПрофильТакском Тогда
			ОбновитьСтатусыТакском = Истина;
		КонецЕсли;
		
		ШаблонПояснения = НСтр("ru = 'Не удалось добавить сертификат %1 в профиль настроек ЭДО'");
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснения, Значение.Сертификат);
		Контекст = Значение.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Если ОбновитьСтатусыТакском Тогда
		
		Отбор = Новый Структура("Статус", -1);
		МассивСтрок = УчетныеЗаписиБезСертификатов.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.Статус = 0;
		КонецЦикла;
		
		ТекущийПрофильТакском = Неопределено;
		
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
	ОповещениеПослеНажатия = Новый ОписаниеОповещения("ОповещениеПользователяПослеНажатия", ЭтотОбъект, Контекст);
	ПоказатьОповещениеПользователя(ТекстОповещения, ОповещениеПослеНажатия, ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусУспешно(ДанныеСтроки)
	
	ДанныеСтроки.Статус = 3;
	ДанныеСтроки.Успешно = Истина;
	Если ОтображениеСписком И ДанныеСтроки.ИдентификаторОрганизации = ТекущийПрофильТакском Тогда
		
		Отбор = Новый Структура("Статус", -1);
		МассивСтрок = УчетныеЗаписиБезСертификатов.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.Статус = 0;
		КонецЦикла;
		
		ТекущийПрофильТакском = Неопределено;
		
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
	ТекстОповещения = НСтр("ru = 'Добавление сертификата.'");
	ШаблонПояснения = НСтр("ru = 'Сертификат %1 успешно добавлен в профиль настроек ЭДО'");
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснения, ДанныеСтроки.Сертификат);
	
	ОповещениеПослеНажатия = Новый ОписаниеОповещения("ОповещениеПользователяПослеНажатия",
		ЭтотОбъект, ДанныеСтроки.ПолучитьИдентификатор());
	
	ПоказатьОповещениеПользователя(ТекстОповещения, ОповещениеПослеНажатия, ТекстПояснения, БиблиотекаКартинок.Информация32);
	
	ОповеститьОбУстраненииОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПользователяПослеНажатия(ИдентификаторСтроки) Экспорт
	
	Если НЕ Открыта() Тогда
		Открыть();
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.УчетныеЗаписиБезСертификатов.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОперацииПомощникаРегистрацииСертификатов = УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов();
	Если Операция = ОперацииПомощникаРегистрацииСертификатов.Подписание Тогда
		
		Заголовок = НСтр("ru = 'Ошибка при подписании документов'");
		Элементы.СертификатыНедоступныНадпись.Заголовок = НСтр("ru = 'Нет доступного сертификата для подписания документов'");
		
	ИначеЕсли Операция = ОперацииПомощникаРегистрацииСертификатов.Отправка Тогда
		
		Заголовок = НСтр("ru = 'Ошибка при отправке/получении документов'");
		Элементы.ГруппаНеподписанныеДокументы.Видимость = Ложь;
		Элементы.СертификатыНедоступныНадпись.Заголовок = НСтр("ru = 'Нет доступного сертификата для отправки или получения документов'");
		Элементы.ПодписатьИОтправитьПовторно.Заголовок  = НСтр("ru = 'Отправить и получить повторно'");
		
	ИначеЕсли Операция = ОперацииПомощникаРегистрацииСертификатов.РегистрацияНепривязанныхСертификатов Тогда
		
		Заголовок = НСтр("ru = 'Регистрация непривязанных сертификатов'");
		Элементы.НеНапоминать.Видимость = Ложь;
		Элементы.ГруппаПредупрежденияНедоступностиСертификатов.Видимость = Ложь;
		Элементы.ГруппаНепривязанныеСертификаты.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.ГруппаИнформацияСертификатыНедоступны.Видимость = Ложь;
		Элементы.ГруппаИнформацияСертификатыНедоступны2.Видимость = Ложь;
		Элементы.ГруппаНеподписанныеДокументы.Видимость = Ложь;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Регистрация сертификатов по учетной записи'");
		Элементы.ГруппаНеподписанныеДокументы.Видимость = Ложь;
		Элементы.ПодписатьИОтправитьПовторно.Видимость = Ложь;
		Элементы.СертификатыНедоступныНадпись.Заголовок = НСтр("ru = 'Нет доступных сертификатов в учетной записи'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуУчетнойЗаписи() 
	
	Если Элементы.Сертификаты.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран сертификат'"));
		Возврат; 
	КонецЕсли;
	НепривязанныйСертификат = Элементы.Сертификаты.ТекущиеДанные.Значение;
	Элементы.ГруппаПредупрежденияНедоступностиСертификатов.Видимость = Истина;
	Элементы.ГруппаНепривязанныеСертификаты.Видимость = Ложь;
	Элементы.ДобавитьСертификатВводДанных.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбУстраненииОшибок() 
	
	Если УчетныеЗаписиБезСертификатов.Количество() = 0 Или Не ОтображениеСписком Тогда
		ВидыОшибок = Новый Массив;
		ВидыОшибок.Добавить(СинхронизацияЭДОКлиентСервер.ВидОшибкиЕстьУчетныеЗаписиБезСертификатов());
		ОбработкаНеисправностейБЭДКлиент.ОповеститьОбИсправленииОшибок(ВидыОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбрабатыватьОтложенныеНапоминания() 
	
	Возврат Операция = УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов().Отправка;
	
КонецФункции

&НаСервере
Функция ЕстьПравоНастройкиОбмена()
	
	Возврат НастройкиЭДО.ЕстьПравоНастройкиОбмена(Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСертификата(Сертификат)
	
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат));
	Возврат СвойстваСертификатов[Сертификат];
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, Сообщения) Экспорт
	
	Для Каждого Сообщение Из Сообщения Цикл
		ИнтерфейсДокументовЭДОКлиент.ОповеститьОбИзмененииСообщения(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

