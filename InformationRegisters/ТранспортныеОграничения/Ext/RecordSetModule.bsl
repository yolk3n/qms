#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// В общем случае реквизит доп. упорядочивания обновляется
	ОбновлятьРеквизитДопУпорядочивания = Истина;
	
	Если ДополнительныеСвойства.Свойство("ОбновлятьРеквизитДопУпорядочивания") Тогда
		
		ОбновлятьРеквизитДопУпорядочивания = ДополнительныеСвойства.ОбновлятьРеквизитДопУпорядочивания;
		
	КонецЕсли;
	
	// Обновление реквизита доп. упорядочивания
	Если ОбновлятьРеквизитДопУпорядочивания Тогда
	
		// Таблица значений, хранящая максимальные значения реквизита доп. упорядочивания для сочетания склад, номенклатура, характеристика
		ЗначенияРеквизитовДопУпорядочивания = Неопределено;
		
		Если Количество() > 0 Тогда
			
			// Установка блокировки
			УстановитьБлокировку(Отбор);
			
			// Обработка записей набора
			Для Каждого РегистрСведенийЗапись Из ЭтотОбъект Цикл
			
				// Для записи не установлено значение реквизита доп. упорядочивания
				Если РегистрСведенийЗапись.РеквизитДопУпорядочивания = 0 Тогда
					
					РегистрСведенийЗапись.РеквизитДопУпорядочивания = ПолучитьНовоеЗначениеРеквизитаДопУпорядочивания(РегистрСведенийЗапись, ЗначенияРеквизитовДопУпорядочивания);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// В общем случае реквизит доп. упорядочивания обновляется
	ОбновлятьРеквизитДопУпорядочивания = Истина;
	
	Если ДополнительныеСвойства.Свойство("ОбновлятьРеквизитДопУпорядочивания") Тогда
		
		ОбновлятьРеквизитДопУпорядочивания = ДополнительныеСвойства.ОбновлятьРеквизитДопУпорядочивания;
		
	КонецЕсли;
	
	// Обновление реквизита доп. упорядочивания
	Если ОбновлятьРеквизитДопУпорядочивания Тогда
			
		ОбновитьЗначенияРеквизитаДопУпорядочивания(Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНовоеЗначениеРеквизитаДопУпорядочивания(РегистрСведенийЗапись, ЗначенияРеквизитовДопУпорядочивания)
	
	РеквизитДопУпорядочивания = 1;
	
	// Создание таблицы значений, хранящей максимальные значения реквизита доп. упорядочивания для сочетания склад, номенклатура, характеристика
	Если ЗначенияРеквизитовДопУпорядочивания = Неопределено Тогда
		
		ЗначенияРеквизитовДопУпорядочивания = Новый ТаблицаЗначений;
		ЗначенияРеквизитовДопУпорядочивания.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ЗначенияРеквизитовДопУпорядочивания.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ЗначенияРеквизитовДопУпорядочивания.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	// Поиск значения реквизиты доп. упорядочивания
	НайденныеСтроки = ЗначенияРеквизитовДопУпорядочивания.НайтиСтроки(Новый Структура("Склад, Номенклатура", РегистрСведенийЗапись.Склад, РегистрСведенийЗапись.Номенклатура));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		РеквизитДопУпорядочивания = НайденныеСтроки[0].РеквизитДопУпорядочивания + 1;
		НайденныеСтроки[0].РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		
	Иначе
		
		НоваяСтрока = ЗначенияРеквизитовДопУпорядочивания.Добавить();
		
		НоваяСтрока.Склад = РегистрСведенийЗапись.Склад;
		НоваяСтрока.Номенклатура = РегистрСведенийЗапись.Номенклатура;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТранспортныеОграничения.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ИЗ
		|	РегистрСведений.ТранспортныеОграничения КАК ТранспортныеОграничения
		|ГДЕ
		|	ТранспортныеОграничения.Склад = &Склад
		|	И ТранспортныеОграничения.Номенклатура = &Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания УБЫВ");
		
		Запрос.УстановитьПараметр("Склад", РегистрСведенийЗапись.Склад);
		Запрос.УстановитьПараметр("Номенклатура", РегистрСведенийЗапись.Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.РеквизитДопУпорядочивания) Тогда
			
			РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочивания + 1;
			
		КонецЕсли;
		
		НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		
	КонецЕсли;
		
	Возврат РеквизитДопУпорядочивания;
	
КонецФункции

Процедура ОбновитьЗначенияРеквизитаДопУпорядочивания(ПараметрыОтбора)
	
	// Установка блокировки
	УстановитьБлокировку(ПараметрыОтбора);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТранспортныеОграничения.Склад КАК Склад,
	|	ТранспортныеОграничения.Номенклатура КАК Номенклатура,
	|	ТранспортныеОграничения.СпособПополненияЗапаса КАК СпособПополненияЗапаса,
	|	ТранспортныеОграничения.СрокТранспортировки КАК СрокТранспортировки,
	|	ТранспортныеОграничения.ПериодичностьЗаказа КАК ПериодичностьЗаказа,
	|	ТранспортныеОграничения.Календарь КАК Календарь,
	|	ТранспортныеОграничения.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ВЫБОР
	|		КОГДА (ТранспортныеОграничения.Склад = &Склад
	|				ИЛИ (НЕ &СкладИспользование))
	|				И (ТранспортныеОграничения.Номенклатура = &Номенклатура
	|					ИЛИ (НЕ &НоменклатураИспользование))
	|				И (ТранспортныеОграничения.СпособПополненияЗапаса = &СпособПополненияЗапаса
	|					ИЛИ (НЕ &СпособПополненияЗапасаИспользование))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.ТранспортныеОграничения КАК ТранспортныеОграничения
	|ГДЕ
	|	(ТранспортныеОграничения.Склад = &Склад
	|			ИЛИ (НЕ &СкладИспользование))
	|	И (ТранспортныеОграничения.Номенклатура = &Номенклатура
	|			ИЛИ (НЕ &НоменклатураИспользование))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	РеквизитДопУпорядочивания,
	|	Приоритет");
	
	Запрос.УстановитьПараметр("Склад", ПараметрыОтбора.Склад.Значение);
	Запрос.УстановитьПараметр("СкладИспользование", ПараметрыОтбора.Склад.Использование);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыОтбора.Номенклатура.Значение);
	Запрос.УстановитьПараметр("НоменклатураИспользование", ПараметрыОтбора.Номенклатура.Использование);
	Запрос.УстановитьПараметр("СпособПополненияЗапаса", ПараметрыОтбора.СпособПополненияЗапаса.Значение);
	Запрос.УстановитьПараметр("СпособПополненияЗапасаИспользование", ПараметрыОтбора.СпособПополненияЗапаса.Использование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЗначениеРеквизитаДопУпорядочивания = 0;
		ПредыдущаяЗапись = Новый Структура("Склад, Номенклатура, Характеристика");
		
		// Создание набора записей
		НаборЗаписей = РегистрыСведений.ТранспортныеОграничения.СоздатьНаборЗаписей();
		
		// Установка отборов
		НаборЗаписей.Отбор.Склад.Значение = ПараметрыОтбора.Склад.Значение;
		НаборЗаписей.Отбор.Склад.Использование = ПараметрыОтбора.Склад.Использование;
		НаборЗаписей.Отбор.Номенклатура.Значение = ПараметрыОтбора.Номенклатура.Значение;
		НаборЗаписей.Отбор.Номенклатура.Использование = ПараметрыОтбора.Номенклатура.Использование;
		
		// Установка дополнительных свойств
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитДопУпорядочивания", Ложь);
		
		// Обработка выборки
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Запись не отличается от предыдущей
			Если Выборка.Склад = ПредыдущаяЗапись.Склад И Выборка.Номенклатура = ПредыдущаяЗапись.Номенклатура Тогда
				
				// Следующее значение упорядочивания
				ЗначениеРеквизитаДопУпорядочивания = ЗначениеРеквизитаДопУпорядочивания + 1;
				
			Иначе
				
				// Сохранение текущей записи
				ЗаполнитьЗначенияСвойств(ПредыдущаяЗапись, Выборка);
				ЗначениеРеквизитаДопУпорядочивания = 1;
				
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.РеквизитДопУпорядочивания = ЗначениеРеквизитаДопУпорядочивания;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировку(ПараметрыОтбора)
	
	БлокировкаДанных = Новый БлокировкаДанных;
			
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ТранспортныеОграничения");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если ПараметрыОтбора.Склад.Использование Тогда
		
		ЭлементБлокировки.УстановитьЗначение("Склад", ПараметрыОтбора.Склад.Значение);
		
	КонецЕсли;
	
	Если ПараметрыОтбора.Номенклатура.Использование Тогда
		
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", ПараметрыОтбора.Номенклатура.Значение);
		
	КонецЕсли;
	
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТранспортныеОграничения.Склад КАК Склад,
	|	ВЫРАЗИТЬ(ТранспортныеОграничения.СпособПополненияЗапаса КАК Справочник.СпособыПополненияЗапаса) КАК СпособПополненияЗапаса
	|ПОМЕСТИТЬ ТранспортныеОграничения
	|ИЗ
	|	&ТранспортныеОграничения КАК ТранспортныеОграничения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОшибкиЗаполнения
	|ИЗ
	|	ТранспортныеОграничения КАК ТранспортныеОграничения
	|ГДЕ
	|	ТранспортныеОграничения.СпособПополненияЗапаса.СпособПоставки = ЗНАЧЕНИЕ(Перечисление.СпособыПоставки.Перемещение)
	|	И ТранспортныеОграничения.Склад = ТранспортныеОграничения.СпособПополненияЗапаса.ИсточникПополненияЗапаса");
	
	Запрос.УстановитьПараметр("ТранспортныеОграничения", ЭтотОбъект.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'При способе поставки ""Перемещение"" источник пополнения запаса должен отличаться от склада, для которого определяются транспортные ограничения.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СпособПополненияЗапаса",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли