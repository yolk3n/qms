#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает соответствие версий формата обмена через универсальный формат
// внешним менеджерам обмена.
//
// Параметры:
//  ПланОбмена - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор плана обмена,
//               который использует механизм обмена через универсальный формат.
//
// Возвращаемое значение:
//  МенеджерыВерсийФормата - Соответствие - версии формата EnterpriseData менеджеру обмена через универсальный формат.
//
Функция МенеджерыВерсийФормата(ПланОбмена) Экспорт
	
	МенеджерыВерсийФормата = Новый Соответствие;
	
	ДанныеВерсийФормата = ДанныеВерсийФормата(ПланОбмена);
	
	Если ДанныеВерсийФормата.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		
		Для Каждого ДанныеВерсииФормата Из ДанныеВерсийФормата Цикл
			
			Если ДанныеВерсииФормата.РежимОтладки Тогда
				
				Если ПустаяСтрока(ДанныеВерсииФормата.ИмяФайлаОтладки) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеОбработки = ВнешниеОбработки.Создать(ДанныеВерсииФормата.ИмяФайлаОтладки);
				МенеджерыВерсийФормата.Вставить(ДанныеВерсииФормата.ВерсияФорматаОбмена, ДанныеОбработки);
				
			Иначе
				
				Если ПустаяСтрока(ДанныеВерсииФормата.АдресДанныхОбработки) Тогда
					Продолжить;
				КонецЕсли;
				
				Результат = ПолучитьМенеджерФорматаИзВременногоХранилища(ДанныеВерсииФормата.АдресДанныхОбработки);
				Если Результат.Получен Тогда
					МенеджерыВерсийФормата.Вставить(ДанныеВерсииФормата.ВерсияФорматаОбмена, Результат.МенеджерФормата);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МенеджерыВерсийФормата;
		
	КонецЕсли;
	
КонецФункции

// Возвращает данные конкретной версии формата обмена.
//
// Параметры:
//  ПланОбмена          - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор плана обмена,
//                        который использует механизм обмена через универсальный формат.
//  ВерсияФорматаОбмена - номер версии формата обмена.
//  Адрес               - УникальныйИдентификатор, Строка.
//                        (см. метод глобального контекста ПоместитьВоВременноеХранилище(<Данные>, <Адрес>))
//
// Возвращаемое значение:
//  Структура свойств версии формата обмена.
//
Функция ДанныеВерсииФормата(ПланОбмена, ВерсияФорматаОбмена, Адрес = Неопределено) Экспорт
	
	ДанныеВерсийФормата = ДанныеВерсийФормата(ПланОбмена, ВерсияФорматаОбмена, Адрес);
	
	Если ДанныеВерсийФормата.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеВерсийФормата[0]);
	КонецЕсли;
	
КонецФункции

// Возвращает данные версий формата обмена.
//
// Параметры:
//  ПланОбмена          - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор плана обмена,
//                        который использует механизм обмена через универсальный формат.
//  ВерсияФорматаОбмена - номер версии формата обмена.
//  Адрес               - УникальныйИдентификатор, Строка.
//                        (см. метод глобального контекста ПоместитьВоВременноеХранилище(<Данные>, <Адрес>))
//
// Возвращаемое значение:
//  МенеджерыВерсий - ТаблицаЗначений.
//
Функция ДанныеВерсийФормата(ПланОбмена = Неопределено, ВерсияФорматаОбмена = Неопределено, Адрес = Неопределено) Экспорт
	
	МенеджерыВерсий = Новый ТаблицаЗначений;
	МенеджерыВерсий.Колонки.Добавить("ПланОбмена");
	МенеджерыВерсий.Колонки.Добавить("ВерсияФорматаОбмена");
	МенеджерыВерсий.Колонки.Добавить("АдресДанныхОбработки");
	МенеджерыВерсий.Колонки.Добавить("ИмяФайла");
	МенеджерыВерсий.Колонки.Добавить("Информация");
	МенеджерыВерсий.Колонки.Добавить("ИмяФайлаОтладки");
	МенеджерыВерсий.Колонки.Добавить("РежимОтладки");
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат МенеджерыВерсий;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВерсииФормата.ПланОбмена           КАК ПланОбмена,
	|	ВерсииФормата.ВерсияФорматаОбмена  КАК ВерсияФорматаОбмена,
	|	ВерсииФормата.ХранилищеОбработки   КАК ХранилищеОбработки,
	|	ВерсииФормата.ИмяФайла             КАК ИмяФайла,
	|	ВерсииФормата.Информация           КАК Информация,
	|	ВерсииФормата.ИмяФайлаОтладки      КАК ИмяФайлаОтладки,
	|	ВерсииФормата.РежимОтладки         КАК РежимОтладки
	|ИЗ
	|	РегистрСведений.МенеджерыВерсийУниверсальногоФормата КАК ВерсииФормата
	|");
	
	Если ПланОбмена <> Неопределено Или ВерсияФорматаОбмена <> Неопределено Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ЗапросОбъект = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
		
		Если ПланОбмена <> Неопределено Тогда
			ЗапросОбъект.Отбор.Добавить(Новый ВыражениеСхемыЗапроса("ВерсииФормата.ПланОбмена = &ПланОбмена"));
			Запрос.УстановитьПараметр("ПланОбмена", ПланОбмена);
		КонецЕсли;
		
		Если ВерсияФорматаОбмена <> Неопределено Тогда
			ЗапросОбъект.Отбор.Добавить(Новый ВыражениеСхемыЗапроса("ВерсииФормата.ВерсияФорматаОбмена = &ВерсияФорматаОбмена"));
			Запрос.УстановитьПараметр("ВерсияФорматаОбмена", ВерсияФорматаОбмена);
		КонецЕсли;
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	ВыборкаМенеджерыВерсий = Запрос.Выполнить().Выбрать();
	Пока ВыборкаМенеджерыВерсий.Следующий() Цикл
		
		Менеджер = МенеджерыВерсий.Добавить();
		ЗаполнитьЗначенияСвойств(Менеджер, ВыборкаМенеджерыВерсий);
		
		ДвоичныеДанныеМенеджера = ВыборкаМенеджерыВерсий.ХранилищеОбработки.Получить();
		Если ДвоичныеДанныеМенеджера <> Неопределено Тогда
			Менеджер.АдресДанныхОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеМенеджера, Адрес);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МенеджерыВерсий;
	
КонецФункции

// Возвращает внешнюю обработку - менеджер обмена через универсальный формат,
// полученную из временного хранилища.
//
// Параметры:
//  АдресМенеджера - адрес, указывающий на значение во временном хранилище.
//
// Возвращаемое значение:
//  Результат - Структура - результат получения обработки из временного хранилища.
//    * Получен                    - Булево - признак удачного получения менеджера из временного хранилища.
//    * МенеджерФормата            - ВнешняяОбработка - менеджер обмена через универсальный формат.
//    * ТекстОшибки                - Строка - текст ошибки получения менеджера.
//    * КраткоеПредставлениеОшибки - Строка -  краткое представление ошибки получения менеджера.
//
Функция ПолучитьМенеджерФорматаИзВременногоХранилища(Знач АдресМенеджера) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Получен"        , Ложь);
	Результат.Вставить("МенеджерФормата", Неопределено);
	Результат.Вставить("ТекстОшибки"    , "");
	
	СобытияЖурналаРегистрации = Новый СписокЗначений;
	Попытка
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ИмяОбъекта = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресМенеджера);
			ДвоичныеДанные.Записать(ИмяОбъекта);
		#Иначе
			ИмяОбъекта = СокрЛП(ВнешниеОбработки.Подключить(АдресМенеджера,,, ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений()));
		#КонецЕсли
		
		Результат.МенеджерФормата = ВнешниеОбработки.Создать(ИмяОбъекта);
		Результат.Получен = Истина;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		СобытиеЖурнала = Новый Структура("ИмяСобытия, ПредставлениеУровня, Комментарий");
		СобытиеЖурнала.ИмяСобытия = НСтр("ru = 'Подключение внешнего модуля менеджера обмена через универсальный формат.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = НСтр("ru='Невозможно подключить обработку из файла.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Техническая информация:'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурнала.Комментарий = ТекстОшибки;
		СобытиеЖурнала.ПредставлениеУровня = "Ошибка";
		СобытияЖурналаРегистрации.Добавить(СобытиеЖурнала);
		
		Результат.Получен     = Ложь;
		Результат.ТекстОшибки = ТекстОшибки;
		
	КонецПопытки;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Попытка
			УдалитьФайлы(ИмяОбъекта);
		Исключение
			
			СобытиеЖурнала = Новый Структура("ИмяСобытия, ПредставлениеУровня, Комментарий");
			СобытиеЖурнала.ИмяСобытия = НСтр("ru = 'Подключение внешнего модуля менеджера обмена через универсальный формат.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстПредупреждения =  НСтр("ru = 'Ошибка при получении регистрационных данных:
				|Ошибка при удалении временного файла ""%1"":
				|%2'");
			СобытиеЖурнала.Комментарий = СтрШаблон(ТекстПредупреждения, ИмяОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СобытиеЖурнала.ПредставлениеУровня = "Предупреждение";
			СобытияЖурналаРегистрации.Добавить(СобытиеЖурнала);
			
		КонецПопытки;
	#КонецЕсли
	
	Если СобытияЖурналаРегистрации.Количество() > 0 Тогда
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияЖурналаРегистрации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли