#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаписатьРезультатыПроверкиКМ(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиКММДЛП.ПолноеИмя());
		ЭлементБлокировкиДанных.ИсточникДанных = Параметры.ТаблицаРезультатовПроверкиКМ;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("НомерУпаковки", "НомерУпаковки");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ДатаИзменения = ТекущаяДатаСеанса();
		
		НаборИменДетальныхСвойствРезультата = Новый Соответствие;
		
		ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
		Для Каждого КлючИЗначение Из ГруппыНастроекКонтроляКМ Цикл
			НаборИменДетальныхСвойствРезультата.Вставить(КлючИЗначение.Ключ, СтрСоединить(ДетальныеСвойстваРезультатаПроверкиКМ(КлючИЗначение.Ключ), ","));
		КонецЦикла;
		
		Для Каждого Строка Из Параметры.ТаблицаРезультатовПроверкиКМ Цикл
			
			КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
			
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.НомерУпаковки.Установить(Строка.НомерУпаковки);
			Набор.Отбор.КлючУпаковки.Установить(КлючУпаковки);
			
			Запись = Набор.Добавить();
			Запись.КлючУпаковки  = КлючУпаковки;
			Запись.ДатаИзменения = ДатаИзменения;
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Если ЗначениеЗаполнено(Строка.РезультатПроверкиКМ) Тогда
				
				ЗаполнитьЗначенияСвойств(Запись, Строка.РезультатПроверкиКМ);
				
				ДетальныеСвойстваРезультатаСтрокой = НаборИменДетальныхСвойствРезультата.Получить(Запись.КлючГруппыНастроекКонтроляКМ);
				
				ДетальныйРезультатПроверкиКМ = Новый Структура(ДетальныеСвойстваРезультатаСтрокой);
				ЗаполнитьЗначенияСвойств(ДетальныйРезультатПроверкиКМ, Строка.РезультатПроверкиКМ);
				
				Запись.ДетальныйРезультатПроверкиКМ = Новый ХранилищеЗначения(Новый ФиксированнаяСтруктура(ДетальныйРезультатПроверкиКМ));
				
			КонецЕсли;
			
			Набор.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Проверка КМ.Запись результатов'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет получение записанных результатов проверки КМ.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыПолученияРезультатовПроверкиКМ.ПараметрыПолученияРезультатовПроверкиКМ.
//
// Возвращаемое значение:
//  ТаблицаРезультатовПроверкиКМ - ТаблицаЗначений - таблица результатов проверки КМ.
//    * НомерУпаковкиПроверки - Строка - номер упаковки.
//    * КлючУпаковкиПроверки - Строка - ключ упаковки.
//    * ДатаИзменения - Дата - дата изменения записи.
//    * РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки КМ.
//
Функция ПолучитьРезультатыПроверкиКМ(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомераУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НомераУпаковок");
	Если ЗначениеЗаполнено(НомераУпаковок) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.КлючУпаковки   КАК КлючУпаковки
		|ПОМЕСТИТЬ НомераУпаковок
		|ИЗ
		|	&НомераУпаковок КАК НомераУпаковок
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУпаковки,
		|	КлючУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки                 КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки                  КАК КлючУпаковкиПроверки,
		|	РезультатыПроверки.ДатаИзменения                 КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиКММДЛП КАК РезультатыПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			НомераУпаковок КАК НомераУпаковок
		|		ПО
		|			НомераУпаковок.НомерУпаковки = РезультатыПроверки.НомерУпаковки
		|			И НомераУпаковок.КлючУпаковки = РезультатыПроверки.КлючУпаковки
		|");
		
		Запрос.УстановитьПараметр("НомераУпаковок", ТаблицаНомеровУпаковокИзМассива(НомераУпаковок));
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки                 КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки                  КАК КлючУпаковкиПроверки,
		|	РезультатыПроверки.ДатаИзменения                 КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиКММДЛП КАК РезультатыПроверки
		|");
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
		
	КонецЕсли;
	
	СвойстваРезультата = СвойстваРезультатаПроверкиКМ();
	
	ВыбираемыеПоля = Оператор.ВыбираемыеПоля;
	Для Каждого ИмяСвойства Из СвойстваРезультата Цикл
		ВыбираемыеПоля.Добавить(ИмяСвойства);
	КонецЦикла;
	
	КлючГруппыНастроекКонтроляКМОтбор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючГруппыНастроекКонтроляКМ");
	Если ЗначениеЗаполнено(КлючГруппыНастроекКонтроляКМОтбор) Тогда
		Оператор.Отбор.Добавить("РезультатыПроверки.КлючГруппыНастроекКонтроляКМ = &КлючГруппыНастроекКонтроляКМ");
		Запрос.УстановитьПараметр("КлючГруппыНастроекКонтроляКМ", КлючГруппыНастроекКонтроляКМОтбор);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	НаборИменСвойствРезультата = Новый Соответствие;
	НаборЗначенийПоУмолчаниюРезультата = Новый Соответствие;
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Для Каждого КлючИЗначение Из ГруппыНастроекКонтроляКМ Цикл
		НаборИменСвойствРезультата.Вставить(КлючИЗначение.Ключ, СтрСоединить(ВсеСвойстваРезультатаПроверкиКМ(КлючИЗначение.Ключ), ","));
		НаборЗначенийПоУмолчаниюРезультата.Вставить(КлючИЗначение.Ключ, РезультатПроверкиКМПоУмолчанию(КлючИЗначение.Ключ));
	КонецЦикла;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("РезультатПроверкиКМ", Новый ОписаниеТипов());
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(Строка.КлючГруппыНастроекКонтроляКМ) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеСвойстваРезультатаСтрокой  = НаборИменСвойствРезультата.Получить(Строка.КлючГруппыНастроекКонтроляКМ);
		ЗначенияПоУмолчаниюРезультата = НаборЗначенийПоУмолчаниюРезультата.Получить(Строка.КлючГруппыНастроекКонтроляКМ);
		
		РезультатПроверкиКМ = Новый Структура(ВсеСвойстваРезультатаСтрокой);
		ЗаполнитьЗначенияСвойств(РезультатПроверкиКМ, ЗначенияПоУмолчаниюРезультата);
		ЗаполнитьЗначенияСвойств(РезультатПроверкиКМ, Строка);
		
		ДетальныйРезультатПроверкиКМ = Строка.ДетальныйРезультатПроверкиКМ.Получить();
		Если ДетальныйРезультатПроверкиКМ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(РезультатПроверкиКМ, ДетальныйРезультатПроверкиКМ);
		КонецЕсли;
		
		Строка.РезультатПроверкиКМ = Новый ФиксированнаяСтруктура(РезультатПроверкиКМ);
		
	КонецЦикла;
	
	Для Каждого ИмяСвойства Из СвойстваРезультата Цикл
		Таблица.Колонки.Удалить(ИмяСвойства);
	КонецЦикла;
	
	Таблица.Индексы.Добавить("НомерУпаковкиПроверки");
	
	Возврат Таблица;
	
КонецФункции

Процедура УдалитьРезультатыПроверкиКМ(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомераУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "НомераУпаковок");
	Если ЗначениеЗаполнено(НомераУпаковок) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.КлючУпаковки   КАК КлючУпаковки
		|ПОМЕСТИТЬ НомераУпаковок
		|ИЗ
		|	&НомераУпаковок КАК НомераУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки                 КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки                  КАК КлючУпаковкиПроверки,
		|	РезультатыПроверки.ДатаИзменения                 КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиКММДЛП КАК РезультатыПроверки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			НомераУпаковок КАК НомераУпаковок
		|		ПО
		|			НомераУпаковок.НомерУпаковки = РезультатыПроверки.НомерУпаковки
		|			И НомераУпаковок.КлючУпаковки = РезультатыПроверки.КлючУпаковки
		|");
		
		Запрос.УстановитьПараметр("НомераУпаковок", ТаблицаНомеровУпаковокИзМассива(НомераУпаковок));
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РезультатыПроверки.НомерУпаковки  КАК НомерУпаковкиПроверки,
		|	РезультатыПроверки.КлючУпаковки   КАК КлючУпаковкиПроверки
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиКММДЛП КАК РезультатыПроверки
		|");
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
		
	КонецЕсли;
	
	// Отбор по ключу группы настроек контроля КМ
	КлючГруппыНастроекКонтроляКМОтбор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючГруппыНастроекКонтроляКМ");
	Если ЗначениеЗаполнено(КлючГруппыНастроекКонтроляКМОтбор) Тогда
		Оператор.Отбор.Добавить("РезультатыПроверки.КлючГруппыНастроекКонтроляКМ = &КлючГруппыНастроекКонтроляКМ");
		Запрос.УстановитьПараметр("КлючГруппыНастроекКонтроляКМ", КлючГруппыНастроекКонтроляКМОтбор);
	КонецЕсли;
	
	// Отбор по параметрам удаления результатов проверки
	ПараметрыУдаленияРезультатовПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПараметрыУдаленияРезультатовПроверки");
	Если ПараметрыУдаленияРезультатовПроверки <> Неопределено Тогда
		
		НаборГраницХранения = Новый Соответствие;
		
		ДатаИзменения = ТекущаяДатаСеанса();
		Для Каждого КлючИЗначение Из ПараметрыУдаленияРезультатовПроверки Цикл
			
			КлючГруппыНастроекКонтроляКМ = КлючИЗначение.Ключ;
			УдалятьСтарыеРезультатыПроверкиКМКонтрольНеВыполнен                 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КлючИЗначение.Значение, "УдалятьСтарыеРезультатыПроверкиКМКонтрольНеВыполнен", Ложь);
			КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КлючИЗначение.Значение, "КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен", 0);
			
			Если УдалятьСтарыеРезультатыПроверкиКМКонтрольНеВыполнен И КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен > 0 Тогда
				
				ГраницаХранения = ДатаИзменения - КоличествоДнейХраненияСтарыхРезультатовПроверкиКМКонтрольНеВыполнен * 24 * 60 * 60;
				КлючиГруппыНастроекКонтроляКМ = НаборГраницХранения.Получить(ГраницаХранения);
				Если КлючиГруппыНастроекКонтроляКМ = Неопределено Тогда
					КлючиГруппыНастроекКонтроляКМ = Новый Массив;
					НаборГраницХранения.Вставить(ГраницаХранения, КлючиГруппыНастроекКонтроляКМ);
				КонецЕсли;
				
				КлючиГруппыНастроекКонтроляКМ.Добавить(КлючГруппыНастроекКонтроляКМ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоНаборовГраницХранения = НаборГраницХранения.Количество();
		Если КоличествоНаборовГраницХранения > 0 Тогда
			
			ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
			
			УсловияИли = Новый Массив;
			Счетчик = 0;
			Для Каждого КлючИЗначение Из НаборГраницХранения Цикл
				
				ГраницаХранения              = КлючИЗначение.Ключ;
				КлючГруппыНастроекКонтроляКМ = КлючИЗначение.Значение;
				
				Если КоличествоНаборовГраницХранения = 1 И КлючГруппыНастроекКонтроляКМ.Количество() = ГруппыНастроекКонтроляКМ.Количество() Тогда
					
					Условие = "РезультатыПроверки.ДатаИзменения < &ГраницаХранения";
					Запрос.УстановитьПараметр("ГраницаХранения", ГраницаХранения);
					
				Иначе
					
					Условие = СтрШаблон("РезультатыПроверки.КлючГруппыНастроекКонтроляКМ = &КлючГруппыНастроекКонтроляКМ%1 И РезультатыПроверки.ДатаИзменения < &ГраницаХранения%1", Счетчик);
					Запрос.УстановитьПараметр(СтрШаблон("ГраницаХранения", Счетчик), ГраницаХранения);
					Запрос.УстановитьПараметр(СтрШаблон("КлючГруппыНастроекКонтроляКМ", Счетчик), КлючГруппыНастроекКонтроляКМ);
					
				КонецЕсли;
				
				УсловияИли.Добавить(Условие);
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			Оператор.Отбор.Добавить("НЕ РезультатыПроверки.КонтрольВыполнен");
			Оператор.Отбор.Добавить(СтрСоединить(УсловияИли, " ИЛИ "));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = СоздатьНаборЗаписей();
		
		Набор.Отбор.НомерУпаковки.Установить(Выборка.НомерУпаковкиПроверки);
		Набор.Отбор.КлючУпаковки.Установить(Выборка.КлючУпаковкиПроверки);
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваРезультатаПроверкиКМ() Экспорт
	
	Свойства = Новый Массив;
	
	Реквизиты = Метаданные.РегистрыСведений.РезультатыПроверкиКММДЛП.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		Свойства.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

Функция ДетальныеСвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	Свойства = Новый Массив;
	Свойства.Добавить("ЕстьОшибки");
	Свойства.Добавить("ТекстОшибки");
	Свойства.Добавить("ТребуетсяПолныйКодМаркировки");
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Если КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП Тогда
		Свойства.Добавить("ПризнакВалидностиКМ");
		Свойства.Добавить("ПредставлениеПризнакаВалидностиКМ");
		Свойства.Добавить("ПризнакНаличияКМвРеестрахСЭ");
		Свойства.Добавить("ПредставлениеПризнакаНаличияКМвРеестрахСЭ");
		Свойства.Добавить("ПризнакПрохожденияКМКриптографическойПроверки");
		Свойства.Добавить("ПредставлениеПризнакаПрохожденияКМКриптографическойПроверки");
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ Тогда
		Свойства.Добавить("КодОшибкиРВ");
		Свойства.Добавить("ПредставлениеОшибкиРВ");
		Свойства.Добавить("КодОшибкиФЛК");
		Свойства.Добавить("ПредставлениеОшибкиФЛК");
		Свойства.Добавить("КодРезультатаЛокальнойПроверки");
		Свойства.Добавить("ПредставлениеРезультатаЛокальнойПроверки");
		Свойства.Добавить("ОнлайнПроверкаПроводилась");
		Свойства.Добавить("КодРезультатаОнлайнПроверки");
		Свойства.Добавить("ПредставлениеРезультатаОнлайнПроверки");
		Свойства.Добавить("КодОшибкиОнлайнПроверки");
		Свойства.Добавить("ПредставлениеОшибкиОнлайнПроверки");
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ Тогда
		Свойства.Добавить("ЛокальнаяПроверкаКМВыполнена");
		Свойства.Добавить("РезультатЛокальнойПроверкиКМ");
		Свойства.Добавить("УдаленнаяПроверкаКМВыполнена");
		Свойства.Добавить("КодОбработкиЗапроса");
		Свойства.Добавить("СтатусОбработкиЗапроса");
		Свойства.Добавить("РезультатПроверкиОИСМ");
		Свойства.Добавить("КодРезультатаПроверкиОИСМ");
		Свойства.Добавить("КодРезультатаПроверкиОИСМБинарный");
		Свойства.Добавить("ПредставлениеРезультатаПроверкиОИСМ");
		Свойства.Добавить("ПредставлениеВЧекеРезультатаПроверкиОИСМ");
		Свойства.Добавить("РезультатПроверкиСтатусаТовара");
		Свойства.Добавить("ПодтвержденНаККТ");
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция ВсеСвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	ВсеСвойства = Новый Массив;
	
	СвойстваРезультатаПроверкиКМ = СвойстваРезультатаПроверкиКМ();
	УдаляемыйЭлемент = СвойстваРезультатаПроверкиКМ.Найти("ДетальныйРезультатПроверкиКМ");
	Если УдаляемыйЭлемент <> Неопределено Тогда
		СвойстваРезультатаПроверкиКМ.Удалить(УдаляемыйЭлемент);
	КонецЕсли;
	
	ДетальныеСвойстваРезультатаПроверкиКМ = ДетальныеСвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСвойства, СвойстваРезультатаПроверкиКМ, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСвойства, ДетальныеСвойстваРезультатаПроверкиКМ, Истина);
	
	Возврат ВсеСвойства;
	
КонецФункции

Функция РезультатПроверкиКМПоУмолчанию(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	ВсеСвойстваРезультатаСтрокой = СтрСоединить(ВсеСвойстваРезультатаПроверкиКМ(КлючГруппыНастроекКонтроляКМ), ",");
	Свойства = Новый Структура(ВсеСвойстваРезультатаСтрокой);
	
	Свойства.КлючГруппыНастроекКонтроляКМ = КлючГруппыНастроекКонтроляКМ;
	Свойства.КонтрольПройден              = Ложь;
	Свойства.ПредставлениеРезультата      = "";
	Свойства.ПолныйКодМаркировки          = "";
	Свойства.КонтрольВыполнен             = Ложь;
	
	Свойства.ЕстьОшибки                   = Ложь;
	Свойства.ТекстОшибки                  = "";
	Свойства.ТребуетсяПолныйКодМаркировки = Ложь;
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Если КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП Тогда
		Свойства.ПризнакВалидностиКМ                                         = Ложь;
		Свойства.ПредставлениеПризнакаВалидностиКМ                           = "";
		Свойства.ПризнакНаличияКМвРеестрахСЭ                                 = Ложь;
		Свойства.ПредставлениеПризнакаНаличияКМвРеестрахСЭ                   = "";
		Свойства.ПризнакПрохожденияКМКриптографическойПроверки               = Ложь;
		Свойства.ПредставлениеПризнакаПрохожденияКМКриптографическойПроверки = "";
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ Тогда
		Свойства.КодОшибкиРВ                                                 = 0;
		Свойства.ПредставлениеОшибкиРВ                                       = "";
		Свойства.КодОшибкиФЛК                                                = 0;
		Свойства.ПредставлениеОшибкиФЛК                                      = "";
		Свойства.КодРезультатаЛокальнойПроверки                              = 0;
		Свойства.ПредставлениеРезультатаЛокальнойПроверки                    = "";
		Свойства.ОнлайнПроверкаПроводилась                                   = Ложь;
		Свойства.КодРезультатаОнлайнПроверки                                 = 0;
		Свойства.ПредставлениеРезультатаОнлайнПроверки                       = "";
		Свойства.КодОшибкиОнлайнПроверки                                     = 0;
		Свойства.ПредставлениеОшибкиОнлайнПроверки                           = "";
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ Тогда
		Свойства.ЛокальнаяПроверкаКМВыполнена                                = Ложь;
		Свойства.РезультатЛокальнойПроверкиКМ                                = Ложь;
		Свойства.УдаленнаяПроверкаКМВыполнена                                = Ложь;
		Свойства.КодОбработкиЗапроса                                         = 0;
		Свойства.СтатусОбработкиЗапроса                                      = Неопределено;
		Свойства.РезультатПроверкиОИСМ                                       = Истина;
		Свойства.КодРезультатаПроверкиОИСМ                                   = 0;
		Свойства.КодРезультатаПроверкиОИСМБинарный                           = "00000000";
		Свойства.ПредставлениеРезультатаПроверкиОИСМ                         = НСтр("ru='Проверка КП КМ не выполнена, статус товара ОИСМ не проверен'");
		Свойства.ПредставлениеВЧекеРезультатаПроверкиОИСМ                    = КонтрольКодовМаркировкиМДЛПКлиентСервер.ПредставленияРезультатаПроверкиКМСредствамиККТВЧеке().М;
		Свойства.РезультатПроверкиСтатусаТовара                              = Неопределено;
		Свойства.ПодтвержденНаККТ                                            = Ложь;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаНомеровУпаковокИзМассива(НомераУпаковок)
	
	ТаблицаНомеровУпаковок = Новый ТаблицаЗначений;
	ТаблицаНомеровУпаковок.Колонки.Добавить("НомерУпаковки", Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип);
	ТаблицаНомеровУпаковок.Колонки.Добавить("КлючУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого НомерУпаковки Из НомераУпаковок Цикл
		Строка = ТаблицаНомеровУпаковок.Добавить();
		Строка.НомерУпаковки = НомерУпаковки;
		Строка.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(НомерУпаковки);
	КонецЦикла;
	
	Возврат ТаблицаНомеровУпаковок;
	
КонецФункции

#КонецОбласти

#КонецЕсли