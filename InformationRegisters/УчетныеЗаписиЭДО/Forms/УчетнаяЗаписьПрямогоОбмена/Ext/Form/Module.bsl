#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустой() Тогда
		
		АвтоНаименование = Истина;
		
		Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог;
		
		Если Не Параметры.Свойство("Организация", Запись.Организация)
			И Не ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций() Тогда
			Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
			Если ЗначениеЗаполнено(Организация) Тогда
				Запись.Организация = Организация;
			Иначе
				ВызватьИсключение НСтр("ru='Необходимо ввести сведения об организации'");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Организация) Тогда
			ПриИзмененииОрганизации(ЭтотОбъект);
		КонецЕсли;
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Элементы.КаталогОбмена.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Элементы.СпособОбменаЭД.СписокВыбора.ЗагрузитьЗначения(
		СинхронизацияЭДО.СпособыПрямогоОбмена());
		
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	УстановитьИспользованиеАвтоНаименования(ЭтотОбъект);
	
	ЗаполнитьСписокСертификатов();
	
	Если ЗначениеЗаполнено(Запись.ИдентификаторЭДО)
		И Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = СинхронизацияЭДО.ДанныеАутентификацииПрямогоОбменаЧерезFTP(Запись.ИдентификаторЭДО);
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначениеЗаполнено(ДанныеАутентификации) Тогда
			ЛогинFTP = ДанныеАутентификации.Логин;
			ПарольFTP = ЗначениеЗаданногоПароля();
		КонецЕсли;
	КонецЕсли;
	
	ИсходныйСпособОбмена = Запись.СпособОбменаЭД;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИсходныйИдентификаторЭДО = Запись.ИсходныйКлючЗаписи.ИдентификаторЭДО;
	Если ЗначениеЗаполнено(ИсходныйИдентификаторЭДО)
		И ИсходныйСпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезFTP
		И (ИсходныйИдентификаторЭДО <> Запись.ИдентификаторЭДО 
			ИЛИ Запись.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезFTP) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СинхронизацияЭДО.ЗаписатьДанныеАутентификацииПрямогоОбменаЧерезFTP(ИсходныйИдентификаторЭДО);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда		
		
		Если ЛогинИзменен Или ПарольИзменен Тогда
			
			Если ЛогинИзменен Тогда
				ЛогинДляСохранения = ЛогинFTP;
			Иначе
				ЛогинДляСохранения = "";
			КонецЕсли;
			
			Если ПарольИзменен Тогда
				ПарольДляСохранения = ПарольFTP;
			Иначе
				ПарольДляСохранения = "";
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			СинхронизацияЭДО.ЗаписатьДанныеАутентификацииПрямогоОбменаЧерезFTP(Запись.ИдентификаторЭДО,
				ЛогинДляСохранения, ПарольДляСохранения);	
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьСертификатыУчетнойЗаписи(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИзмененСоставСертификатов = Ложь;
	УстановитьДанныеЗаголовкаСтраницыСертификаты(ЭтотОбъект);
	ИсходныйСпособОбмена = Запись.СпособОбменаЭД;
	ЛогинИзменен = Ложь;
	ПарольИзменен = Ложь;
	Если ЗначениеЗаполнено(ПарольFTP) Тогда
		ПарольFTP = ЗначениеЗаданногоПароля();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Запись.ИсходныйКлючЗаписи);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	ШаблонТекста = НСтр("ru = 'Поле ""%1"" не заполнено'");
	
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		ТекстСообщения = СтрШаблон(ШаблонТекста, Элементы.Организация.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.Организация.ПутьКДанным,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.НаименованиеУчетнойЗаписи) Тогда
		ТекстСообщения = СтрШаблон(ШаблонТекста, Элементы.Наименование.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.Наименование.ПутьКДанным,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.ИдентификаторЭДО) Тогда
		ТекстСообщения = СтрШаблон(ШаблонТекста, Элементы.ИдентификаторЭДО.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.ИдентификаторЭДО.ПутьКДанным,, Отказ);
	КонецЕсли;
	
	Если Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		
		Если Не ЗначениеЗаполнено(Запись.КаталогОбмена) Тогда
			ТекстСообщения = СтрШаблон(ШаблонТекста, Элементы.КаталогОбмена.Заголовок);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.КаталогОбмена.ПутьКДанным,, Отказ);
		Иначе
			ТекстСообщения = СинхронизацияЭДО.ПроверитьОбменЧерезКаталог(Запись.КаталогОбмена);
			Если ТекстСообщения <> "" Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.КаталогОбмена.ПутьКДанным,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		
		Если Не ЗначениеЗаполнено(Запись.ПутьFTP) Тогда
			ТекстСообщения = СтрШаблон(ШаблонТекста, Элементы.ПутьFTP.Заголовок);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.ПутьFTP.ПутьКДанным,, Отказ);
		Иначе
			
			ИсходныйИдентификаторЭДО = Запись.ИсходныйКлючЗаписи.ИдентификаторЭДО;
			Если ИсходныйСпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезFTP
				И ИсходныйИдентификаторЭДО <> Запись.ИдентификаторЭДО Тогда
				ЛогинИзменен = Истина;
				ПарольИзменен = Истина;
				УстановитьПривилегированныйРежим(Истина);
				ДанныеАутентификации = СинхронизацияЭДО.ДанныеАутентификацииПрямогоОбменаЧерезFTP(
					ИсходныйИдентификаторЭДО);
				УстановитьПривилегированныйРежим(Ложь);
				Если ДанныеАутентификации <> Неопределено Тогда
					ПарольFTP = ДанныеАутентификации.Пароль;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеАутентификации = Новый Структура("Логин", ЛогинFTP);
			Если ПарольИзменен Тогда
				ДанныеАутентификации.Вставить("Пароль", ПарольFTP);
			КонецЕсли;
			ТекстСообщения = СинхронизацияЭДО.ПроверитьОбменЧерезFTP(Запись, ДанныеАутентификации);
			Если ТекстСообщения <> Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.КаталогОбмена.ПутьКДанным,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		И Не ЗначениеЗаполнено(Запись.УчетнаяЗаписьЭлектроннойПочты) Тогда
		ТекстСообщения = СтрШаблон(ШаблонТекста, Элементы.УчетнаяЗаписьЭлектроннойПочты.Заголовок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Элементы.УчетнаяЗаписьЭлектроннойПочты.ПутьКДанным,, Отказ);
	КонецЕсли;
	
	ПроверитьНаличиеДействующихСертификатов(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(
			ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	
	ПриИзмененииСпособаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	УстановитьИспользованиеАвтоНаименования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаПриИзменении(Элемент)
	Запись.КаталогОбмена = СокрЛП(Запись.КаталогОбмена);
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьКаталогПослеВыбораВДиалоге", ЭтотОбъект);
	ФайловаяСистемаКлиент.ВыбратьКаталог(Оповещение, НСтр("ru = 'Выберите каталог для обмена'"), Запись.КаталогОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьFTPПриИзменении(Элемент)
	
	Запись.ПутьFTP = СокрЛП(Запись.ПутьFTP);
	
	Если ЗначениеЗаполнено(Запись.ПортFTP) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Запись.ПутьFTP);
	Если СтруктураURI.Схема = "ftp" Тогда
		Запись.ПортFTP = 21;
	ИначеЕсли СтруктураURI.Схема = "ftps" Тогда
		Запись.ПортFTP = 990;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинFTPПриИзменении(Элемент)
	ЛогинИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольFTPПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСертификатов

&НаКлиенте
Процедура СписокСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Не ИспользоватьЭлектронныеПодписи() Тогда
		
		ТекстСообщения = НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("ПодписаниеЭД");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Отбор = КриптографияБЭДКлиент.НовыйОтборСпискаСертификатов();
	Отбор.Организация = Запись.Организация;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораСертификата", ЭтотОбъект);
	КриптографияБЭДКлиент.ОткрытьФормуВыбораСертификатов(Оповещение, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСертификата(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПроверитьИДобавитьСертификатВСписок(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Модифицированность = Истина;
	ИзмененСоставСертификатов = Истина;
	
	Для Каждого Сертификат Из Элементы.СписокСертификатов.ВыделенныеСтроки Цикл
		СтрокаСертификат = Элементы.СписокСертификатов.ДанныеСтроки(Сертификат);
		СтрокаСертификат.Скрыть = Истина;
	КонецЦикла;
	
	Отбор = Новый Структура("Скрыть", Ложь);
	Элементы.СписокСертификатов.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	УстановитьДанныеЗаголовкаСтраницыСертификаты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Удалить(Команда)
	УдалитьУчетнуюЗаписьНачало();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Если ЗначениеЗаполнено(Запись.Организация) Тогда
		Элементы.Организация.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Организация.Гиперссылка = Истина;
	КонецЕсли;
	
	ИзмененСоставСертификатов = Ложь;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСертификатов()
	
	ОтборСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	ОтборСертификатовУчетныхЗаписей.УчетныеЗаписи = "&ИдентификаторЭДО";
	
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей", ОтборСертификатовУчетныхЗаписей);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыУчетныхЗаписей.Сертификат
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей";
			
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторЭДО", Запись.ИдентификаторЭДО);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Сертификаты = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сертификаты.Добавить(ВыборкаДетальныеЗаписи.Сертификат);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
	УстановитьПривилегированныйРежим(Ложь);
	
	СекундВСутках = 60*60*24;
	Для Каждого СвойстваСертификата Из СвойстваСертификатов Цикл
		НоваяСтрока = СписокСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваСертификата.Значение);
		НоваяСтрока.Представление = СвойстваСертификата.Значение.Наименование;
		НоваяСтрока.СрокДействияВДнях = Окр((СвойстваСертификата.Значение.ДействителенДо - ТекущаяДатаСеанса()) / СекундВСутках);
		НоваяСтрока.СертификатДействителен = СвойстваСертификата.Значение.ДействителенДо > ТекущаяДатаСеанса();
	КонецЦикла;
	
	ЗаполнитьСрокДействияСертификата();
	
	УстановитьДанныеЗаголовкаСтраницыСертификаты(ЭтотОбъект)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСрокДействияСертификата()
	
	Если СписокСертификатов.Количество() = 0 Тогда
		НетДействующихСертификатов = Ложь;
	Иначе
		НетДействующихСертификатов = Истина;
		Для Каждого СтрокаТаблицы Из СписокСертификатов Цикл
			
			Если СтрокаТаблицы.СрокДействияВДнях < 0 Тогда
				СрокДействия = НСтр("ru = 'Истек'");
			Иначе
				
				Если СтрокаТаблицы.СрокДействияВДнях > 30 Тогда
					НетДействующихСертификатов = Ложь;
				КонецЕсли;
				
				СрокДействия = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"),
					СтрокаТаблицы.СрокДействияВДнях);
			КонецЕсли;
			
			СтрокаТаблицы.СрокДействия = СрокДействия;
		КонецЦикла;
	КонецЕсли;
	
	Если НетДействующихСертификатов Тогда
		Элементы.СтраницаСертификаты.Картинка = БиблиотекаКартинок.ПредупреждениеКрасноеБЭД16;
	Иначе
		Элементы.СтраницаСертификаты.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаОбмена()
	
	ЗаполнитьНаименование(ЭтотОбъект);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИспользованиеАвтоНаименования(Форма)
	
	Форма.АвтоНаименование = ПустаяСтрока(Форма.Запись.НаименованиеУчетнойЗаписи)
		ИЛИ Форма.Запись.НаименованиеУчетнойЗаписи = СформироватьНаименование(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименование(Форма)
	
	Возврат СтрШаблон(НСтр("ru = '%1, %2'"), Форма.Запись.Организация, Форма.Запись.СпособОбменаЭД);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименование(Форма)
	
	Если Форма.АвтоНаименование
		И ЗначениеЗаполнено(Форма.Запись.СпособОбменаЭД)
		И ЗначениеЗаполнено(Форма.Запись.Организация) Тогда
		Форма.Запись.НаименованиеУчетнойЗаписи = СформироватьНаименование(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДанныеЗаголовкаСтраницыСертификаты(Форма)
	
	Отбор = Новый Структура("Скрыть", Ложь);
	КоличествоСертификатов = Форма.СписокСертификатов.НайтиСтроки(Отбор).Количество();
	Если КоличествоСертификатов = 0 Тогда
		Форма.ЗаголовокСтраницыСертификаты = "";
		Возврат;
	КонецЕсли;
	
	Форма.ЗаголовокСтраницыСертификаты = КоличествоСертификатов;
	Если Форма.ИзмененСоставСертификатов Тогда
		Форма.ЗаголовокСтраницыСертификаты = Форма.ЗаголовокСтраницыСертификаты + "*";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ГруппаОбменЧерезКаталог.Видимость = Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог;
	Элементы.ГруппаОбменЧерезFTP.Видимость = Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP;
	Элементы.ГруппаОбменЧерезПочту.Видимость = Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОрганизации(Форма)
	
	Запись = Форма.Запись;
	
	ЗаполнитьНаименование(Форма);
	Если ЗначениеЗаполнено(Запись.Организация) Тогда
		Запись.ИдентификаторЭДО = Строка(Запись.Организация.УникальныйИдентификатор());
	Иначе
		Запись.ИдентификаторЭДО = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогПослеВыбораВДиалоге(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Запись.КаталогОбмена = Результат;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаСертификатовПередДобавлением

&НаКлиенте
Процедура ПроверитьИДобавитьСертификатВСписок(Сертификат)
	
	МассивСтрок = СписокСертификатов.НайтиСтроки(Новый Структура("Ссылка", Сертификат));
	Если МассивСтрок.Количество() > 0 И Не МассивСтрок[0].Скрыть Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже добавлен для учетной записи ЭДО'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьСертификатДляУчетнойЗаписи(Сертификат, Запись.Организация, Запись.СпособОбменаЭД);
	
	Если РезультатПроверки.Статус Тогда
		ДобавитьСертификатВСписок(Сертификат);
	Иначе
		МассивПредупреждений = Новый Массив;
		Для Каждого ОписаниеОшибки Из РезультатПроверки.Ошибки Цикл
			Если ОписаниеОшибки.Тип = "Предупреждение" Тогда
				МассивПредупреждений.Добавить(ОписаниеОшибки.Текст);
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки.Текст);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		МассивПредупреждений.Добавить(НСтр("ru = 'Продолжить регистрацию сертификата?'"));
		ТекстВопроса = СтрСоединить(МассивПредупреждений, Символы.ПС);
		
		Оповещение = Новый ОписаниеОповещения("ДобавитьСертификатВСписокПослеПодтверждения", ЭтотОбъект, Сертификат);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСертификатДляУчетнойЗаписи(Знач Сертификат, Знач Организация, Знач СпособОбмена)
	
	Возврат УчетныеЗаписиЭДОСлужебный.ПроверитьСертификатДляУчетнойЗаписи(Сертификат, Организация, СпособОбмена);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСертификатВСписокПослеПодтверждения(Ответ, Сертификат) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДобавитьСертификатВСписок(Сертификат);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатВСписок(Сертификат)
	
	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
	СтрокиСертификата = СписокСертификатов.НайтиСтроки(Новый Структура("Ссылка", Сертификат));
	
	Если СтрокиСертификата.Количество() = 0 Тогда
		СтрокаСертификата = СписокСертификатов.Добавить();
	Иначе
		СтрокаСертификата = СтрокиСертификата[0];
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрокаСертификата, СвойстваСертификатов[Сертификат]);
	СтрокаСертификата.Представление = СвойстваСертификатов[Сертификат].Наименование;
	СтрокаСертификата.СертификатДействителен = СвойстваСертификатов[Сертификат].ДействителенДо > ТекущаяДатаСеанса();
	СтрокаСертификата.Скрыть = Ложь;
	ЗаполнитьСрокДействияСертификата();

	ИзмененСоставСертификатов = Истина;

	УстановитьДанныеЗаголовкаСтраницыСертификаты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаписатьСертификатыУчетнойЗаписи(Отказ)
	
	ИсходныйИдентификаторЭДО = Запись.ИсходныйКлючЗаписи.ИдентификаторЭДО;
	Если Не ЗначениеЗаполнено(ИсходныйИдентификаторЭДО) Тогда
		ИсходныйИдентификаторЭДО = Запись.ИдентификаторЭДО;
	КонецЕсли;
	
	Если ИсходныйИдентификаторЭДО <> Запись.ИдентификаторЭДО Тогда
		Если УчетныеЗаписиЭДОСлужебный.ЕстьСертификатыУчетнойЗаписи(Запись.ИдентификаторЭДО) Тогда
			Отказ = Истина;
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ИзмененСоставСертификатов Тогда
		Возврат;
	КонецЕсли;
	
	СертификатыДляЗаписи = СписокСертификатов.Выгрузить(Новый Структура("Скрыть", Ложь)).ВыгрузитьКолонку("Ссылка");
	УчетныеЗаписиЭДОСлужебный.ЗаписатьСертификатыУчетнойЗаписи(ИсходныйИдентификаторЭДО, СертификатыДляЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУчетнуюЗаписьНачало()
	
	Модифицированность = Ложь;
	ТолькоПросмотр = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияУчетнойЗаписи", ЭтотОбъект);
	УчетныеЗаписиЭДОСлужебныйКлиент.УдалитьУчетнуюЗапись(Запись.ИдентификаторЭДО, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияУчетнойЗаписи(Результат, Контекст) Экспорт
	
	ТолькоПросмотр = Ложь;
	Если Результат.Успех = Истина Тогда
		ОповеститьОбИзмененииУчетнойЗаписи();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеЗаданногоПароля()
	Возврат " ";
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииУчетнойЗаписи()

	КлючЗаписи = УчетныеЗаписиЭДОСлужебныйКлиент.КлючУчетнойЗаписиЭДО(Запись.ИдентификаторЭДО);
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(КлючЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеДействующихСертификатов(Отказ)
	
	Если Не НастройкиБЭД.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиСИспользованиемПодписиОтсутствуют() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСертификаты = СписокСертификатов.НайтиСтроки(Новый Структура("Скрыть", Ложь));
	Если ВыбранныеСертификаты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокСертификатов",,Отказ);
	Иначе
		ЕстьДействующиеСертификаты = Ложь;
		Для каждого СтрокаСертификата Из ВыбранныеСертификаты Цикл
			Если СтрокаСертификата.СертификатДействителен Тогда
				ЕстьДействующиеСертификаты = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьДействующиеСертификаты Тогда
			ТекстСообщения = НСтр("ru = 'Нет действующих сертификатов.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СписокСертификатов",,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиСИспользованиемПодписиОтсутствуют()
	
	ИсходныйИдентификаторЭДО = Запись.ИсходныйКлючЗаписи.ИдентификаторЭДО;
	Если Не ЗначениеЗаполнено(ИсходныйИдентификаторЭДО) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Не НастройкиЭДО.ЕстьНастройкиУчетнойЗаписи(ИсходныйИдентификаторЭДО);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьЭлектронныеПодписи()
	
	Возврат НастройкиБЭД.ИспользоватьЭлектронныеПодписи();
	
КонецФункции

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено)
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 

#КонецОбласти