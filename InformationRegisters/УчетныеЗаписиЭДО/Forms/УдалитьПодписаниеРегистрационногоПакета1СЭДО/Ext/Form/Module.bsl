////////////////////////////////////////////////////////////////////////////////
// Модуль формы РегистрСведений.УчетныеЗаписиЭДО.УдалитьПодписаниеРегистрационногоПакета1СЭДО
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеПакета = Параметры.ДанныеПакета;
	ПроверитьДанныеПакета(Отказ);
	
	ОтборСертификатов = Параметры.ОтборСертификатов;
		
	Элементы.Сертификат.СписокВыбора.ЗагрузитьЗначения(ОтборСертификатов);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйПароль = ПарольСертификата(Сертификат);
	Если СохраненныйПароль <> Неопределено Тогда
		Пароль = УникальныйИдентификатор;
		ИспользоватьСохраненныйПароль = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ РазрешитьЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ЗакрытьФорму(ДанныеНаПодпись);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ИспользоватьСохраненныйПароль = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДанныеДляРегистрации(Команда)
	
	СервисЭДОКлиент.ОткрытьДанныеДляРегистрацииУОператораЭлектронногоДокументооборота(
		ДанныеПакета.РеквизитыПакета, ДанныеПакета.ДвоичныеДанныеДляОператораЭДО);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПользовательскоеСоглашение(Команда)
	
	СервисЭДОКлиент.ОткрытьПользовательскоеСоглашение1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	НачатьПодписаниеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЗакрытьФорму(ДанныеНаПодпись);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастроитьЭлементыФормыПриПодписании()
	
	Элементы.Подписать.Доступность = Не ВыполняетсяПодписание;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеПакета(Отказ)
	
	Если ДанныеПакета = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не (ДанныеПакета.Свойство("РеквизитыПакета") И ЗначениеЗаполнено(ДанныеПакета.РеквизитыПакета))
		ИЛИ Не (ДанныеПакета.Свойство("ДвоичныеДанныеДляОператораЭДО") И ЗначениеЗаполнено(ДанныеПакета.ДвоичныеДанныеДляОператораЭДО))
		ИЛИ Не (ДанныеПакета.Свойство("ДвоичныеДанныеСоглашенияНаПодключениеЭДО") 
		И ЗначениеЗаполнено(ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Сертификат = ДанныеПакета.ДобавляемыйСертификат;
	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
	СвойстваСертификата = СвойстваСертификатов[Сертификат];
	СертификатПрограмма = СвойстваСертификата.Программа;
	СертификатДанные = СвойстваСертификата.ДанныеСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодписаниеДанных()
	
	Если ВыполняетсяПодписание Тогда
		Возврат;
	КонецЕсли;
	ВыполняетсяПодписание = Истина;
	
	НастроитьЭлементыФормыПриПодписании();
	
	Если ЗначениеЗаполнено(СертификатПрограмма) Тогда
		
		ВыполнитьПодписаниеДанных();
		
	Иначе
		
		ВыбранныйПароль = Пароль;
		Если ИспользоватьСохраненныйПароль Тогда
			ВыбранныйПароль = ПарольСертификата(Сертификат);
		КонецЕсли;
		
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПослеОпределенияПрограммы", ЭтотОбъект);
		КриптографияБЭДКлиент.ОпределитьПрограммуСертификата(СертификатДанные, ВыбранныйПароль, ОбработкаЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОпределенияПрограммы(Программа, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Программа) Тогда
		УстановитьПрограммуСертификата(Сертификат, Программа);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить программу закрытого ключа сертификата.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ОтменитьПодписаниеДанных();
		Возврат;
	КонецЕсли;
	
	ВыполнитьПодписаниеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодписаниеДанных()
	
	ВыбранныйПароль = Пароль;
	Если ИспользоватьСохраненныйПароль Тогда
		ВыбранныйПароль = ПарольСертификата(Сертификат);
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, ВыбранныйПароль);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ПослеПодписанияДанных", ЭтотОбъект);
	
	КриптографияБЭДКлиент.Подписать(ДанныеНаПодпись, Неопределено,, ОбработкаПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПодписаниеДанных()
	
	ВыполняетсяПодписание = Ложь;
	НастроитьЭлементыФормыПриПодписании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияДанных(Знач ДанныеПослеПодписания, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Неопределено);
	
	ВыполняетсяПодписание = Ложь;
	НастроитьЭлементыФормыПриПодписании();
	
	ЗакрытьФорму(ДанныеПослеПодписания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПрограммуСертификата(Знач Сертификат, Знач Программа)
	
	КриптографияБЭД.УстановитьПрограммуСертификата(Сертификат, Программа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Знач Результат)
	
	Если Открыта() Тогда
		РазрешитьЗакрытие = Истина;
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольСертификата(Сертификат)
	
	УстановитьПривилегированныйРежим(Истина);
	ПаролиСертификатов = КриптографияБЭД.ПаролиСертификатов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат));
	Возврат ПаролиСертификатов[Сертификат];
	
КонецФункции

#КонецОбласти
