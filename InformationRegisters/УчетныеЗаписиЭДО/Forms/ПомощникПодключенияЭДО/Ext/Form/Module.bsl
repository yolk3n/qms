
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ПаролиСертификатов, КонтекстДиагностики;

&НаКлиенте
Перем ОбработчикРезультатаДанные, ОтветДанные;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не НастройкиЭДО.ЕстьПравоНастройкиОбмена(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ПолучатьИдентификаторыВСервисе1СЭДО = Истина;
	
	НастройкаОперацииЭДО = Параметры.НастройкаОперацииЭДО;
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ИспользоватьЭП = НастройкиБЭД.ИспользоватьЭлектронныеПодписи();
	
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
	ТипРегистрации = 2;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Параметры.Свойство("КнопкаНазадДоступна", КнопкаНазадДоступна);
	
	Если Не ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций() И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность") Тогда
			
		МодульЭлектронныйДокументооборотСКонтролирующимиОрганами = ОбщегоНазначения.ОбщийМодуль("ЭлектронныйДокументооборотСКонтролирующимиОрганами");
		
		СтруктураПараметров = Новый Структура("ОтпечатокСертификатаПодписи, ЭлектроннаяПодписьВМоделиСервиса, КодНО, ТипКриптоПровайдера");
		МодульЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаполнитьПараметрыДляФормыПодключенияКСервисуЭлектронныхДокументов(
			Организация, СтруктураПараметров);
		
		Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
			
			ЭПВМоделиСервиса = Ложь;
			Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса", ЭПВМоделиСервиса)
				И ЭПВМоделиСервиса <> Истина Тогда
				СтруктураПараметров.Свойство("ОтпечатокСертификатаПодписи", ОтпечатокСертификата);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
				КодНалоговогоОргана = СтруктураПараметров.КодНО;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	СпособыОбменаЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СпособыОбменаЭД", Новый Массив);
	Если СпособыОбменаЭД.Количество() = 1 Тогда
		СпособОбменаЭД = СпособыОбменаЭД[0];
		Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
			Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;

			Если Параметры.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры)
				И ЗначениеЗаполнено(ОтпечатокСертификата) Тогда

				ОбработатьДополнительныеПараметры(Параметры.ДополнительныеПараметры);

			КонецЕсли;

			ТипРегистрации = 2;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	
	Если Параметры.ОперацияЭДО <> Неопределено Тогда
		ИнициализироватьОперациюЭДО(Параметры.ОперацияЭДО);
		КлючСохраненияПоложенияОкна = "РаботаСОперациейЭДО";
	КонецЕсли;
	
	Если Не ПроверитьИспользованиеОбменаСКонтрагентами() Тогда
		ВключитьИспользованиеОбменаСКонтрагентами();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ОбработкаНеисправностейБЭДКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки,
		АдресЭлектроннойПочтыСлужбыПоддержки);
	Элементы.Техподдержка.Заголовок = ОбработкаНеисправностейБЭДКлиент.СформироватьГиперссылкуДляОбращенияВСлужбуПоддержки();
	
	Если ЗначениеЗаполнено(ОтпечатокСертификата) И Не НастройкаОперацииЭДО Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПоискаСертификата", ЭтотОбъект);
		КриптографияБЭДКлиент.НайтиСоздатьСертификатКриптографии(ОтпечатокСертификата, Организация, Оповещение);
	КонецЕсли;
	
	Если Операция = Неопределено Тогда
		ЗапуститьОжиданиеПолученияИдентификаторовЭДО();
	КонецЕсли;
	
	Если Не ИнтернетПоддержкаПользователейПодключена Тогда
		ПодключитьОбработчикОжидания("ПодключитьИнтернетПоддержкуПользователей", 1, Истина);
	КонецЕсли;
	
	Если Операция <> Неопределено
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ИдентификаторОператораЭДО) Тогда
		Далее(Неопределено);
		Элементы.ГруппаПодУведомления.Доступность = УведомлятьОСобытиях;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиНаличияУстановленныхПрограмм", ЭтотОбъект);
	КриптографияБЭДКлиент.ПроверитьНаличиеУстановленныхПрограмм(Оповещение);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ РазрешитьЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	// Если форма открывалась в режиме выполнения операции, и операция не выполнена,
	// то закрываем ее с сохранением сделанных настроек.
	Если Операция <> Неопределено И Не ОперацияВыполнена И Не НастройкаОперацииЭДО Тогда
		Отказ = Истина;
		ЗавершитьНастройкуОперацииЭДО();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПодключенияК1СЭДОПриИзменении(Элемент)
	
	ИдентификаторОрганизации = "";
	ИдентификаторОрганизацииСуществующий = "";
	Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Очистить();
	
	// Очистить адрес организации
	АдресОрганизации = "";
	КодНалоговогоОргана = "";
	
	УстановитьЗначенияПоУмолчанию();
	
	ЗапуститьОжиданиеПолученияИдентификаторовЭДО();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации());
	
	СформироватьКонтекст(ОбновляемыеКатегории);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииСуществующаяУчетнаяЗаписьПриИзменении(Элемент)
	
	ПолучитьСпособОбменаПоИдентификатору();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииНоваяУчетнаяЗаписьПриИзменении(Элемент)
	
	ПолучитьСпособОбменаПоОператоруЭДО();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПЧерезОператораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(Элемент,
			СертификатКриптографии, СтандартнаяОбработка);
			
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПЧерезОператораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И Не ПроверитьСертификат(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
	КонецЕсли;
	
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И Не ПроверитьПравомерностьИспользованияСертификата(
		ВыбранноеЗначение, ТекстСообщения) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорЭДОПодключенныйК1СЭДОПриИзменении(Элемент)
	
	ПриИзмененииОператораЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииЧерез1СЭДОПриИзменении(Элемент)
	
	ПолучитьСпособОбменаПоИдентификатору();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУсловияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СинхронизацияЭДОКлиент.ПоказатьУсловияИспользованияСервиса1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект);
	ИнтеграцияБСПБЭДКлиент.НачатьРедактированиеАдреса(АдресОрганизации, ЗначениеПолейАдреса, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПолучитьКодИМНСЗавершение", ЭтотОбъект);
	
	УчетныеЗаписиЭДОСлужебныйКлиент.РедактироватьКодНалоговогоОргана(КодНалоговогоОргана, Организация,
		УникальныйИдентификатор, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлятьОСобытияхПриИзменении(Элемент)
	
	Элементы.ГруппаПодУведомления.Доступность           = УведомлятьОСобытиях;
	
	УведомлятьОНовыхПриглашениях                        = УведомлятьОСобытиях;
	УведомлятьОбОтветахНаПриглашения                    = УведомлятьОСобытиях;
	УведомлятьОНовыхДокументах                          = УведомлятьОСобытиях;
	УведомлятьОНеобработанныхДокументах                 = УведомлятьОСобытиях;
	УведомлятьОбОкончанииСрокаДействияСертификата       = УведомлятьОСобытиях;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Результат = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта);
		ЭлектроннаяПочтаНеКорректна = Не Результат;
	Иначе
		ЭлектроннаяПочтаНеКорректна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПЧерезОператораПриИзменении(Элемент)
	
	ПриИзмененииСертификатаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодключениеТакскомВМоделиСервисаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ВыбратьСуществующий" Тогда
		СтандартнаяОбработка = Ложь;
		ТипРегистрации = 1;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОтправкаЗаявленияНаРегистрациюРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НажатиеНаГиперссылкуДиагностики();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОжиданиеОтветаОтОператораРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НажатиеНаГиперссылкуДиагностики();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСозданиеУчетнойЗаписиЭДОРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НажатиеНаГиперссылкуДиагностики();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НажатиеНаГиперссылкуДиагностики();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбработкаНеисправностейБЭДКлиент.ОткрытьСтраницуСервиса1СКоннект();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если НаименованиеУчетнойЗаписи = НаименованиеУчетнойЗаписиПредыдущееЗначение Тогда
		ШаблонНаименование = НСтр("ru = '%1, %2'");
		НаименованиеУчетнойЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
			Организация, СпособОбменаЭД);
		НаименованиеУчетнойЗаписиПредыдущееЗначение = НаименованиеУчетнойЗаписи;
	КонецЕсли;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО Тогда
		Если Организация <> ОрганизацияПредыдущееЗначение
			Или ИдентификаторОрганизацииСуществующий <> ИдентификаторОрганизацииСуществующийПредыдущееЗначение
			Или ОператорЭДО <> ОператорЭДОПредыдущееЗначение Тогда
			ТребуетсяОбновлениеСведенийОбУчетнойЗаписи = Истина;
		КонецЕсли;
		
		ОрганизацияПредыдущееЗначение = Организация;
		ИдентификаторОрганизацииСуществующийПредыдущееЗначение = ИдентификаторОрганизацииСуществующий;
		ОператорЭДОПредыдущееЗначение = ОператорЭДО;
	КонецЕсли;
	
	ЗаполнитьОписаниеУчетнойЗаписи();
	ИзменитьТекущуюСтраницу(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяРегистрация Тогда
		
		Описание = Новый ОписаниеОповещения("ОтменаОперации", ЭтотОбъект, Ложь);
		
		ПоказатьВопрос(Описание,
			НСтр("ru = 'Подключение еще не завершено.Хотите его прервать и вернуться на предыдущий этап?'")
				,РежимДиалогаВопрос.ДаНет);
	Иначе
		ИзменитьТекущуюСтраницу(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Элементы.ГруппаОтправкаЗаявленияНаРегистрацию.РасширеннаяПодсказка.Заголовок = "";
	Элементы.ГруппаОжиданиеОтветаОтОператора.РасширеннаяПодсказка.Заголовок = "";
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДО.РасширеннаяПодсказка.Заголовок = "";
	
	Отказ = ПроверкаЗаполнения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОперацииЭДО Тогда
		ЗавершитьНастройкуОперацииЭДО();
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеПроверки = Новый ОписаниеОповещения("НачатьРегистрацияВСервисе", ЭтотОбъект);
	ВыполнитьПроверкиПередПолучениемИдентификатора(ОповещениеПослеПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Описание = Новый ОписаниеОповещения("ОтменаОперации", ЭтотОбъект, Истина);
	ПоказатьВопрос(Описание, НСтр("ru = 'Подключение еще не завершено. Хотите его прервать и выйти?'")
				,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьСпособОбменаПоИдентификатору()
	
	Для Каждого Оператор Из ОператорыЭДО Цикл
		
		ИдентификаторОператора = Оператор.Идентификатор;
		ДлинаИдентификатораОператора = СтрДлина(ИдентификаторОператора);
		
		Если Лев(ИдентификаторОрганизацииСуществующий, ДлинаИдентификатораОператора) = ИдентификаторОператора Тогда
			ИдентификаторОператораЭДО = Оператор.Идентификатор;
			СпособОбменаЭД = Оператор.СпособОбмена;

			ИскомыйЭлемент = Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора.НайтиПоЗначению(ИдентификаторОператораЭДО);
			ОператорЭДО = ИскомыйЭлемент.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	СпособОбменаАбонента = СпособОбменаАбонентаНаСервере(ИдентификаторОрганизацииСуществующий);
	Если ЗначениеЗаполнено(СпособОбменаАбонента) Тогда
		СпособОбменаЭД = СпособОбменаАбонента;
		ПриИзмененииСпособаОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуПользователей()

	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияИнтернетПоддержки", ЭтотОбъект);
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);

КонецПроцедуры // Проверить()

&НаКлиенте
Процедура ОтменаОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры = Ложь Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД");
			ВыполняетсяРегистрация = Ложь;
			УправлениеФормой(ЭтотОбъект);
			ИзменитьТекущуюСтраницу(Ложь);
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаУведомления.Видимость = Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО");
	Элементы.ГруппаУведомления.Видимость = Элементы.ГруппаУведомления.Видимость И Форма.ТипРегистрации = 2;
	
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	СписокИдентификаторов = Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора;
	
	Элементы.ТипРегистрацииСуществующаяУчетнаяЗапись.Доступность = СписокИдентификаторов.Количество();
	Элементы.ИдентификаторОрганизацииЧерез1СЭДО.Доступность      = Форма.ТипРегистрации = 1;
	Элементы.ОператорЭДОПодключенныйК1СЭДО.Доступность           = Форма.ТипРегистрации = 2;
	
	ТребуетсяЗаявкаНаРегистрацию = Ложь;
	ПодключениеТакскомВМоделиСервиса = ПодключениеТакскомВМоделиСервиса(Форма);
	Если Форма.ТипРегистрации = 2 И ПодключениеТакскомВМоделиСервиса Тогда
		
		ИдентификаторОператораТакском = ИдентификаторОператораТакском(Форма);
		Если Не СтрНачинаетсяС(Форма.ИдентификаторОрганизацииСуществующий, ИдентификаторОператораТакском) Тогда
			ТребуетсяЗаявкаНаРегистрацию = Истина;
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				Для Каждого ЭлементСписка Из СписокИдентификаторов Цикл
					Если СтрНачинаетсяС(ЭлементСписка.Значение, ИдентификаторОператораТакском) Тогда
						Форма.ИдентификаторОрганизацииСуществующий = ЭлементСписка.Значение;
						ТребуетсяЗаявкаНаРегистрацию = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьПодключениеТакскомВМоделиСервиса.Видимость = ТребуетсяЗаявкаНаРегистрацию;
	
	Элементы.ПроверьтеДанныеОрганизации.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	Элементы.УчетнаяЗапись.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	
	Элементы.ГруппаОтправкаЗаявленияНаРегистрацию.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	Элементы.ГруппаОжиданиеОтветаОтОператора.Видимость = Не ПодключениеТакскомВМоделиСервиса;
	
	Элементы.Доверенность.Видимость = Форма.ТребуетсяДоверенность;
	
	Элементы.КодНалоговогоОргана.Видимость =
		Форма.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");
	Доступна = Ложь;
	Если ЗначениеЗаполнено(Форма.Организация)
		И ЗначениеЗаполнено(Форма.СертификатКриптографии)
		И ((Форма.ТипРегистрации = 2 И ЗначениеЗаполнено(Форма.ОператорЭДО))
			Или (Форма.ТипРегистрации = 1 И ЗначениеЗаполнено(Форма.ИдентификаторОрганизацииСуществующий)))
		И Не ТребуетсяЗаявкаНаРегистрацию
		И (ЗначениеЗаполнено(Форма.Доверенность) Или Не Форма.ТребуетсяДоверенность) Тогда
		
		Доступна = Истина;
	КонецЕсли;
	
	Доступна = Доступна ИЛИ Форма.НастройкаОперацииЭДО;
	
	ЭлементСписка = Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.НайтиПоЗначению(Форма.ИдентификаторОрганизацииСуществующий);
	Пометка = Форма.ТипРегистрации = 1 И ЭлементСписка <> Неопределено И ЭлементСписка.Пометка;
	Если Не ЗначениеЗаполнено(Форма.ДлительнаяОперация) Тогда
		Элементы.ГруппаОшибкаВыбора.Видимость = Пометка;
		Элементы.ГруппаПодсказка.Видимость    = Не Пометка;
		Элементы.ГруппаПолучениеДанных.Видимость = Ложь;
	Иначе
		Элементы.ГруппаОшибкаВыбора.Видимость    = Ложь;
		Элементы.ГруппаПодсказка.Видимость       = Ложь;
		Элементы.ГруппаПолучениеДанных.Видимость = Истина;
	КонецЕсли;
	
	ПоказатьДалее = ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
	
	Элементы.Далее.Видимость          = ПоказатьДалее;
	Элементы.Далее.КнопкаПоУмолчанию  = ПоказатьДалее;
	Элементы.Далее.Доступность = Доступна И Не Пометка И Форма.ИнтернетПоддержкаПользователейПодключена;
	
	ПоказатьГотово = ТекущаяСтраница = Элементы.СтраницаЗапросаСведений;
	Элементы.Готово.Видимость                     = ПоказатьГотово;
	Элементы.Готово.КнопкаПоУмолчанию             = ПоказатьГотово;
	Элементы.ГруппаУсловияИспользования.Видимость = ПоказатьГотово;
	Если Форма.НастройкаОперацииЭДО Тогда
		Элементы.Готово.Заголовок = НСтр("ru = 'Готово'");
		Элементы.Закрыть.Заголовок = НСтр("ru = 'Отмена'");
	КонецЕсли;
	
	Элементы.Назад.Видимость             = ТекущаяСтраница <> Элементы.СтраницаПодключенияК1СЭДО Или Форма.КнопкаНазадДоступна;
	Элементы.Закрыть.Видимость           = Не Форма.ВыполняетсяРегистрация;
	Элементы.Отмена.Видимость            =    Форма.ВыполняетсяРегистрация И ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	Элементы.Повторить.Видимость         = Не Форма.ВыполняетсяРегистрация И ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	Элементы.Повторить.КнопкаПоУмолчанию = Элементы.Повторить.Видимость;
	Если Форма.Операция <> Неопределено И ТекущаяСтраница = Элементы.СтраницаЗапросаСведений Тогда
		Элементы.Назад.Видимость = Ложь;
	КонецЕсли;
	
	Цвет = Новый Цвет;
	Если ПустаяСтрока(Форма.АдресОрганизации) Тогда
		
		Форма.АдресОрганизацииПредставление = НСтр("ru = 'Заполните адрес организации'");
		Цвет = WebЦвета.Красный;
	Иначе
		
		Форма.АдресОрганизацииПредставление = Форма.АдресОрганизации;
		
	КонецЕсли;
	
	Элементы.АдресОрганизации.ЦветТекста = Цвет;
	
	Цвет = Новый Цвет;
	Если Форма.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		КодНалоговогоОргана = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Форма.КодНалоговогоОргана);
		Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
			
			Форма.КодНалоговогоОргана = НСтр("ru = 'Укажите код налогового органа'");
			Цвет = WebЦвета.Красный;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.КодНалоговогоОргана.ЦветТекста = Цвет;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущуюСтраницу(Вперед)
	
	Страницы = Новый Массив;
	Страницы.Добавить(Элементы.СтраницаПодключенияК1СЭДО);
	Страницы.Добавить(Элементы.СтраницаЗапросаСведений);
	Страницы.Добавить(Элементы.СтраницаОжиданиеРегистрации);
	
	ТекущаяСтраница = Страницы.Найти(Элементы.СтраницыПомощника.ТекущаяСтраница);
	
	Если Вперед = Истина Тогда
		ТекущаяСтраница = ТекущаяСтраница + 1;
	ИначеЕсли Вперед = Ложь Тогда
		ТекущаяСтраница = ТекущаяСтраница - 1;
	КонецЕсли;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы[ТекущаяСтраница];
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаСостоянияПолученияИдентификатораЭД(ОтправкаЗаявления, ОжиданиеОтвета = Неопределено, СозданиеУчетнойЗаписи = Неопределено)
	
	Элементы.ГруппаЗаявлениеВыполнение.Видимость = ОтправкаЗаявления = Ложь;
	Элементы.ГруппаЗаявлениеВыполнено.Видимость  = ОтправкаЗаявления = Истина;
	Элементы.ГруппаЗаявлениеОшибка.Видимость     = ОтправкаЗаявления = "Ошибка";
	
	Элементы.ГруппаОжиданияОтветаОжидание.Видимость   = ОжиданиеОтвета = Неопределено;
	Элементы.ГруппаОжиданияОтветаВыполнение.Видимость = ОжиданиеОтвета = Ложь;
	Элементы.ГруппаОжиданияОтветаВыполнено.Видимость  = ОжиданиеОтвета = Истина;
	Элементы.ГруппаОжиданияОтветаОшибка.Видимость     = ОжиданиеОтвета = "Ошибка";
	
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДООжидание.Видимость   = СозданиеУчетнойЗаписи = Неопределено;
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДОВыполнение.Видимость = СозданиеУчетнойЗаписи = Ложь;
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДОВыполнено.Видимость  = СозданиеУчетнойЗаписи = Истина;
	Элементы.ГруппаСозданиеУчетнойЗаписиЭДООшибка.Видимость     = СозданиеУчетнойЗаписи = "Ошибка";
	
	Если ОтправкаЗаявления = "Ошибка"
			Или ОжиданиеОтвета = "Ошибка"
				Или СозданиеУчетнойЗаписи = "Ошибка" Тогда
				
				ВыполняетсяРегистрация = Ложь;
				
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодключениеТакскомВМоделиСервиса(Форма)
	
	Возврат Форма.РазделениеВключено
		И Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторОператораТакском(Форма)
	
	Отбор = Новый Структура("СпособОбмена",
		ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	НайденныеСтроки = Форма.ОператорыЭДО.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Результат = НайденныеСтроки[0].Идентификатор;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиНаличияУстановленныхПрограмм(ЕстьПрограммаКриптографии, ДополнительныеПараметры) Экспорт
	
	Если Не ЕстьПрограммаКриптографии Тогда
		ТекстОшибки = НСтр("ru = 'Программа криптографии не установлена на компьютере'");
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Создание учетной записи ЭДО'"),
			КриптографияБЭДКлиентСервер.ВидОшибкиКриптография(),
			ТекстОшибки, ТекстОшибки);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Ложь);
		
		ОбработатьОшибкиВКонтекстномРежиме(Элементы.ПредупреждениеНадпись, Элементы.ГруппаПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеНаГиперссылкуДиагностики() 
	
	КонтекстДиагностики.ЗаголовокОперации = НСтр("ru = 'При подключении к ЭДО'");
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупреждения;
	КонтекстДиагностики.ОшибкиОбработаны = Ложь;
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПравомерностьИспользованияСертификата(Сертификат, СообщениеОбОшибке)
	
	Возврат КриптографияБЭД.ПроверитьПравомерностьИспользованияСертификата(Сертификат, СообщениеОбОшибке);
	
КонецФункции

#Область ИнициализацияДанных

&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	ЗапуститьОжиданиеПолученияИдентификаторовЭДО();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаНеКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочта");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодключенныхОператоровЭДО()
	
	ТаблицаОператоров = СервисНастроекЭДО.ОператорыЭлектронногоДокументооборота();
	ОператорыЭДО.Загрузить(ТаблицаОператоров);
	
	Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора.Очистить();
	Для Каждого ДанныеОператораЭДО Из ОператорыЭДО Цикл
		Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора.Добавить(
			ДанныеОператораЭДО.Идентификатор, ДанныеОператораЭДО.Наименование);
	КонецЦикла;
	Если ЗначениеЗаполнено(Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора)
		И Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора.НайтиПоЗначению(ОператорЭДО) = Неопределено Тогда
		
		ОператорЭДО = Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхНаФорме

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	ЗаполнитьАдресЭлектроннойПочты();
	
	ИнтернетПоддержкаПользователейПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	ЕдинственныйСертификат = ПолучитьЕдинственныйСертификатОрганизации(Организация);
	
	Если ЗначениеЗаполнено(ЕдинственныйСертификат)
		И ПроверитьПравомерностьИспользованияСертификата(ЕдинственныйСертификат, "") Тогда
		СертификатКриптографии = ЕдинственныйСертификат;
		ПриИзмененииСертификатаНаСервере();
	КонецЕсли;
	
	Если ИспользоватьЭП И ЗначениеЗаполнено(Организация) Тогда
		
		ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкиДанных;

	Если Операция = Неопределено Тогда
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение идентификаторов в сервисе ЭДО'");
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"РаботаСАбонентамиЭДО.ПолучитьИдентификаторыВСервисе1СЭДО", Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдинственныйСертификатОрганизации(Знач Организация)
	
	Возврат КриптографияБЭД.ЕдинственныйСертификатОрганизации(Организация);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета()
	
	РеквизитыОрганизации = УчетныеЗаписиЭДОСлужебный.РеквизитыОрганизацииДляРегистрационногоПакета(Организация);
	КодНалоговогоОргана = РеквизитыОрганизации.КодНалоговогоОргана;
	АдресОрганизации = РеквизитыОрганизации.АдресОрганизации;
	ЗначениеПолейАдреса = РеквизитыОрганизации.ЗначениеПолейАдреса;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОжиданиеПолученияИдентификаторовЭДО()
	
	Если Не ПолучатьИдентификаторыВСервисе1СЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Описание = Новый ОписаниеОповещения("ПриПолученииИдентификаторовОрганизации", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииИдентификаторовОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПодключенныхОператоровЭДО();
	ПриИзмененииОператораЭДО();
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаИдентификатораСИнтернетПоддержкой2;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		СписокИдентификаторов = РезультатПроцедуры.СписокИдентификаторов;
		КонтекстДиагностики = РезультатПроцедуры.КонтекстДиагностики;
		
		Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
			
			ИдентификаторОрганизацииСуществующий = СписокИдентификаторов[0].Значение;
			Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Очистить();
			
			Для Каждого СтрокаСписка Из СписокИдентификаторов Цикл
				
				Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Добавить(СтрокаСписка.Значение,
						СтрокаСписка.Представление, СтрокаСписка.Пометка);
				
			КонецЦикла;
			
			ТипРегистрации = ?(ЗначениеЗаполнено(ИдентификаторОрганизацииСуществующий), 1, 2);
			
			ИдентификаторОрганизацииЧерез1СЭДОПриИзменении(Неопределено);
		Иначе 
			ОбработатьОшибкиВКонтекстномРежиме(Элементы.ПредупреждениеНадпись, Элементы.ГруппаПредупреждения);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
	Элементы.СтраницыЗагрузки.ТекущаяСтраница = Элементы.ГруппаИдентификатораСИнтернетПоддержкой2;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресЭлектроннойПочты()
	
	ЭлектроннаяПочта = ИнтеграцияБСПБЭД.КонтактнаяИнформацияОбъекта(Организация, "АдресЭлектроннойПочты").Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодИМНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		КодНалоговогоОргана = Результат;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		АдресИзменен = Истина;
		АдресОрганизации = Результат.Представление;
		ЗначениеПолейАдреса = Результат.Значение;

		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСпособОбменаПоОператоруЭДО()
	
	Если ТипРегистрации = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Оператор Из ОператорыЭДО Цикл
		
		Если Оператор.Идентификатор = ОператорЭДО Тогда
			ИдентификаторОператораЭДО = Оператор.Идентификатор;
			СпособОбменаЭД = Оператор.СпособОбмена;
			ПриИзмененииСпособаОбмена();
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУчетнойЗаписи

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	Отказ = Ложь;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УведомлятьОСобытиях = УведомлятьОСобытиях И (УведомлятьОНовыхПриглашениях
		Или УведомлятьОНовыхДокументах Или УведомлятьОНеобработанныхДокументах
		Или УведомлятьОбОтветахНаПриглашения Или УведомлятьОбОкончанииСрокаДействияСертификата);
	
	ПодключениеТакскомВМоделиСервиса = ПодключениеТакскомВМоделиСервиса(ЭтотОбъект);
	
	// Тестируем заполненность формы
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
				,
				"Организация",
				,
				Отказ);
	КонецЕсли;
	
	Если ЭлектроннаяПочтаНеКорректна Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Адрес электронной почты'")),
				,
				"ЭлектроннаяПочта",
				,
				Отказ);
	КонецЕсли;
	
	Если Не СоглашаюсьСУсловиямиИспользования Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Согласитесь с условиями использования'"),
				,
				"СоглашаюсьСУсловиямиИспользования",
				,
				Отказ);
			КонецЕсли;
			
	Если Не ИспользоватьЭлектронныеПодписи() Тогда
		
		ТекстСообщения = НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("НАСТРОЙКАКРИПТОГРАФИИ");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СертификатКриптографии) И Не НастройкаОперацииЭДО Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
				,
				"СертификатКриптографии",
				,
				Отказ);
	КонецЕсли;
	
	Если ТребуетсяДоверенность И Не ЗначениеЗаполнено(Доверенность) И Не НастройкаОперацииЭДО Тогда
		ТекстСообщения = ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле",
			"Заполнение", НСтр("ru = 'Доверенность'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Доверенность",, Отказ);
	КонецЕсли;
	
	Если Не ПодключениеТакскомВМоделиСервиса
		И Не ЗначениеЗаполнено(АдресОрганизации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Юридический адрес'")),
				,
				"АдресОрганизацииПредставление",
				,
				Отказ);
	КонецЕсли;
	
	Если Не СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
		И Не ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КодНалоговогоОргана)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Код налогового органа'")),
				,
				"КодНалоговогоОргана",
				,
				Отказ);
	КонецЕсли;
	
	Если Не ПодключениеТакскомВМоделиСервиса
		И Не ЗначениеЗаполнено(ЭлектроннаяПочта)
			И УведомлятьОСобытиях 
				И ТипРегистрации = 2 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Электронная почта'")),
				,
				"ЭлектроннаяПочта",
				,
				Отказ);
	КонецЕсли;
	
	Если ТипРегистрации = 1
			И Не ЗначениеЗаполнено(ИдентификаторОрганизацииСуществующий) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'")),
				,
				"ИдентификаторОрганизацииСуществующий",
				,
				Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкиПередПолучениемИдентификатора(ОповещениеПослеПроверки)
	
	УстановкаСостоянияПолученияИдентификатораЭД(Ложь);
	РезультатыПроверки = РезультатПроверкиПередПолучениемИдентификатораНаСервере(Организация, СертификатКриптографии);
	Если РезультатыПроверки.ИННОтличается И Не ТребуетсяДоверенность Тогда
		
		ПослеПодтвержденияСозданияПрофиля = Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПрофиля", ЭтотОбъект,
				Новый Структура("ОписаниеОповещения", ОповещениеПослеПроверки));
			
		Вопросы = Новый Массив;
		Вопросы.Добавить(НСтр("ru = 'Обратите внимание:'"));
		
		Если РезультатыПроверки.ИННОтличается Тогда
			
			ПредупреждениеОРазличииРеквизитов = " " + НСтр("ru = '- ИНН по данным сертификата не совпадает с ИНН выбранной организации.'");
			Вопросы.Добавить(ПредупреждениеОРазличииРеквизитов);
			
		КонецЕсли;
		Вопросы.Добавить(НСтр("ru = 'Продолжить получение идентификатора?'"));
		
		ТекстВопроса = СтрСоединить(Вопросы, Символы.ПС);
		ПоказатьВопрос(ПослеПодтвержденияСозданияПрофиля, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ПриУспешнойПроверкеАналогичногоПрофиля(ОповещениеПослеПроверки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПрофиля(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеАналогичногоПрофиля(ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриУспешнойПроверкеАналогичногоПрофиля(ОповещениеПослеПроверки)

	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки);

КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПроверкиПередПолучениемИдентификатораНаСервере(Организация, Сертификат)

	Возврат УчетныеЗаписиЭДОСлужебный.СравнитьРеквизиты(Организация, Сертификат);

КонецФункции

&НаКлиенте
Процедура НачатьРегистрацияВСервисе(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьРегистрацияВСервисеПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРегистрацияВСервисеПослеПодключенияРасширенияРаботыСКриптографией(РасширениеУстановлено, ДополнительныеПараметры) Экспорт

	Если РасширениеУстановлено = Истина Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	
		ВыполняетсяРегистрация = Истина;
		
		УправлениеФормой(ЭтотОбъект);
		
		Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			ЗарегистрироватьСертификат1СЭДО();
		ИначеЕсли ПодключениеТакскомВМоделиСервиса(ЭтотОбъект)
			И СтрНачинаетсяС(ИдентификаторОрганизацииСуществующий, ИдентификаторОператораТакском(ЭтотОбъект)) Тогда
			ИдентификаторОрганизации = ИдентификаторОрганизацииСуществующий;
			ТестСвязиСервисаЭДО();
		ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
			ЗапуститьПолучениеНовогоИдентификатораТакском();
		Иначе
			Возврат;
		КонецЕсли;
	
	Иначе
		
		УстановкаСостоянияПолученияИдентификатораЭД("Ошибка");
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСертификат(Сертификат) 
	
	Возврат УчетныеЗаписиЭДОСлужебный.ПроверитьСертификат(Сертификат);
	
КонецФункции

#КонецОбласти

#Область РегистрацияВСервисеТакском

&НаКлиенте
Процедура ЗапуститьПолучениеНовогоИдентификатораТакском(Результат = Неопределено, ДополнительныеПараметры = Неопределено)
	
	ЗаявкаТакскомОбработана = Ложь;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработкаЗавершения", ЭтотОбъект);
	
	ОбработчикСтатусаЗаявки = Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки",
		ЭтотОбъект);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресОрганизации"        , АдресОрганизации);
	ДополнительныеПараметры.Вставить("АдресОрганизацииЗначение", ЗначениеПолейАдреса);
	ДополнительныеПараметры.Вставить("Сертификат"              , СертификатКриптографии);
	ДополнительныеПараметры.Вставить("Организация"             , Организация);
	
	ДополнительныеПараметрыЗаявки = УчетныеЗаписиЭДОСлужебныйКлиент.НовыеДополнительныеПараметрыЗаявкиТакском();
	ДополнительныеПараметрыЗаявки.ПутьКДаннымАдресОрганизации = "АдресОрганизацииПредставление";
	
	ДополнительныеПараметры.Вставить("ДополнительныеПараметрыЗаявкиТакском", ДополнительныеПараметрыЗаявки);
	
	УчетныеЗаписиЭДОКлиент.НачатьПолучениеНовогоИдентификатораТакском(ОбработкаЗавершения,
		ОбработчикСтатусаЗаявки, СертификатКриптографии, Организация, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработкаЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		И Не ИгнорироватьОшибкуТакском Тогда
		УстановкаСостоянияПолученияИдентификатораЭД("Ошибка");
		Возврат;
	КонецЕсли;
	
	Если ЗаявкаТакскомОбработана Тогда
		ИгнорироватьОшибкуТакском = Ложь;
	ИначеЕсли Результат <> Неопределено Тогда
		
		ЗаявкаТакскомОбработана = Истина;
		ИгнорироватьОшибкуТакском = Истина;

		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Ложь);
		
		ИдентификаторОрганизацииСуществующий = Результат;
		ИдентификаторОрганизации = Результат;
		
		ТестСвязиСервисаЭДО();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	ОтветДанные = Новый Структура;
	Действие = "СтандартнаяОбработка";
	
	Если Результат.СтатусЗаявки = "Отсутствует" Тогда
		
		Действие = "НоваяЗаявка";
		
	ИначеЕсли Результат.СтатусЗаявки = "ОжиданиеОбработки" Тогда
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Ложь);
		
		Если ВыполняетсяРегистрация Тогда
			Действие = "ПроверитьСтатусЗаявки";
		Иначе
			Действие = "Завершить";
		КонецЕсли;
		
	ИначеЕсли Результат.СтатусЗаявки = "Обработана" Тогда
		
		ЗаявкаТакскомОбработана = Истина;
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Ложь);
		
		ИдентификаторОрганизацииСуществующий = Результат.ДанныеЗаявки.ИдентификаторАбонента;
		ИдентификаторОрганизации = Результат.ДанныеЗаявки.ИдентификаторАбонента;
		
		ТестСвязиСервисаЭДО();
		Действие = "Завершить";
		ИгнорироватьОшибкуТакском = Истина;
		
	ИначеЕсли Результат.СтатусЗаявки = "Отклонена" Тогда
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		
		ВидОперации = НСтр("ru = 'Получение нового идентификатора Такском'");
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), Результат.ОписаниеОшибки, Результат.ОписаниеОшибки);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Ложь);
		
		ОбработатьОшибкиВКонтекстномРежиме(Элементы.ГруппаОтправкаЗаявленияНаРегистрацию.РасширеннаяПодсказка);
		Действие = "Завершить";
	КонецЕсли;
	
	ОтветДанные.Вставить("Действие", Действие);	
	ОбработчикРезультатаДанные = Результат.ОбработчикРезультата;
	
	Если Действие <> "ПроверитьСтатусЗаявки" Тогда
		ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, ОтветДанные);
	Иначе 
		ПодключитьОбработчикОжидания("ОжиданиеОбработки", 10, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеОбработки()

	ВыполнитьОбработкуОповещения(ОбработчикРезультатаДанные, ОтветДанные);

КонецПроцедуры

#КонецОбласти

#Область РегистрацияВСервисе1СЭДО

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДО()
	
	ПараметрыРегистрации = СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО();
	ПараметрыРегистрации.Организация = Организация;
	ПараметрыРегистрации.ОператорЭДО = ИдентификаторОператораЭДО;
	ПараметрыРегистрации.АдресОрганизации = АдресОрганизации;
	ПараметрыРегистрации.АдресОрганизацииЗначение = ЗначениеПолейАдреса;
	ПараметрыРегистрации.ЭлектроннаяПочта = ЭлектроннаяПочта;
	ПараметрыРегистрации.КодНалоговогоОргана = КодНалоговогоОргана;
	ПараметрыРегистрации.СертификатыПодписейОрганизации.Добавить(СертификатКриптографии);
	Если ЗначениеЗаполнено(Доверенность) Тогда
		ПараметрыРегистрации.Доверенности.Вставить(СертификатКриптографии, Доверенность);
	КонецЕсли;
	Если ТипРегистрации = 1 Тогда
		ПараметрыРегистрации.ИдентификаторОрганизации = ИдентификаторОрганизацииСуществующий;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Оповещение   = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОЗавершение", ЭтотОбъект, Новый Структура);
	УчетныеЗаписиЭДОКлиент.ЗарегистрироватьСертификатВСервисе1СЭДО(ЭтотОбъект, Оповещение,
		ПараметрыРегистрации, КонтекстДиагностики);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОЗавершение(Результат, Контекст) Экспорт
	
	Если ВыполняетсяРегистрация = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Успех Тогда
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Ложь);
		УникальныйИдентификаторЗаявки1СЭДО = Результат.УникальныйИдентификаторЗаявки1СЭДО;
		ПаролиСертификатов                 = Результат.ПаролиСертификатов;
		// Запустим обработчик ожидания результата регистрации организации у оператора.
		ОжиданиеОперацийБЭДКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		ВыполняетсяРегистрация = Ложь;
		УстановкаСостоянияПолученияИдентификатораЭД("Ошибка");
		КонтекстДиагностики = Результат.КонтекстДиагностики;
		ОбработатьОшибкиВКонтекстномРежиме(Элементы.ГруппаОтправкаЗаявленияНаРегистрацию.РасширеннаяПодсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()
	
	Оповещение = Новый ОписаниеОповещения("ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение", ЭтотОбъект);
	СервисЭДОКлиент.ПолучитьСостояниеРегистрацииВСервисе1СЭДО(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УникальныйИдентификаторЗаявки1СЭДО), Оповещение,
		УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатФункции = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // см. СервисЭДО.ПолучитьСостояниеРегистрацииВСервисе1СЭДО
		СостояниеЗаявки = РезультатФункции.СостояниеРегистрации[УникальныйИдентификаторЗаявки1СЭДО];
		ИдентификаторОрганизации = СостояниеЗаявки.ИдентификаторОрганизации;
		
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			
			ИдентификаторОрганизацииСуществующий = ИдентификаторОрганизации;
			Элементы.ГруппаОжиданиеОтветаОтОператора.РасширеннаяПодсказка.Заголовок = "";
			ТестСвязиСервисаЭДО();
			
		Иначе
			КонтекстДиагностики = РезультатФункции.КонтекстДиагностики;
			ОбработатьОшибкиВКонтекстномРежиме(Элементы.ГруппаОжиданиеОтветаОтОператора.РасширеннаяПодсказка);
			
			Если Не СостояниеЗаявки.Результат Тогда
				УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
				Возврат;
			КонецЕсли;
			
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при регистрации учетной записи у оператора ЭДО.
                               |Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, "Ошибка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДО()
	
	УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Ложь);
	
	Если СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
		И Не ПодключениеТакскомВМоделиСервиса(ЭтотОбъект) Тогда
		ВыполнитьОтправкуДанныхВСервисНастроек();
		Возврат;
	КонецЕсли;
	
	КонтекстДиагностики.ЗаголовокОперации = НСтр("ru = 'При выполнении проверки соединения с оператором'");
	
	КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
	КлючСинхронизации.ИдентификаторУчетнойЗаписи = ИдентификаторОрганизацииСуществующий;
	КлючСинхронизации.СпособОбмена = СпособОбменаЭД;
	КлючСинхронизации.ВыбранныйСертификат = СертификатКриптографии;
		
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
		И ТипРегистрации = 1 Тогда

		Оповещение = Новый ОписаниеОповещения("ПолучитьПараметрыУведомленийЗавершение", ЭтотОбъект);
		СервисЭДОКлиент.ПолучитьПараметрыУведомлений(КлючСинхронизации, КонтекстДиагностики, Оповещение, ЭтотОбъект,
			ПаролиСертификатов);
		Возврат;

	КонецЕсли;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") 
		И ТипРегистрации = 2 Тогда
		
		Если УведомлятьОСобытиях Тогда
			Оповещение = Новый ОписаниеОповещения("УстановитьПараметрыУведомленийЗавершение", ЭтотОбъект);

			СервисЭДОКлиент.ОбновитьПараметрыУведомлений(ПараметрыУведомлений(ЭтаФорма), КлючСинхронизации,
				КонтекстДиагностики, Оповещение, ЭтотОбъект, ПаролиСертификатов);
		Иначе
			ВыполнитьОтправкуДанныхВСервисНастроек();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыполнитьОтправкуДанныхВСервисНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСУведомлениямиИСервисомНастроек

&НаКлиенте
Процедура УстановитьПараметрыУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		ВыполнитьОтправкуДанныхВСервисНастроек();
	Иначе
		ОбработатьОшибкиВКонтекстномРежиме(Элементы.ГруппаСозданиеУчетнойЗаписиЭДО);
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуДанныхВСервисНастроек()
	
	ДанныеСохранены = СохранитьУчетнуюЗапись();
	
	Если Не ДанныеСохранены Тогда 
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтправкаДанныхВСервисНастроекЗавершение", ЭтотОбъект, ИдентификаторОрганизации);
	
	СервисНастроекЭДОКлиент.ОтправитьДанныеАбонентаВСервисНастроек(ИдентификаторОрганизации,
		Оповещение, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхВСервисНастроекЗавершение(Результат, ИдентификаторЭДО) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОткрытьУчетнуюЗапись(ИдентификаторЭДО);
	Иначе
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеНастройкиУведомлений = Результат.ПараметрыУведомлений;
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	Если ТекущиеНастройкиУведомлений = Неопределено Тогда
		ОбработатьОшибкиВКонтекстномРежиме(Элементы.ГруппаСозданиеУчетнойЗаписиЭДО.РасширеннаяПодсказка);
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, "Ошибка");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТекущиеНастройкиУведомлений);
	ЭлектроннаяПочта = ТекущиеНастройкиУведомлений.АдресУведомлений;

	ВыполнитьОтправкуДанныхВСервисНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСУчетнойЗаписью

&НаСервере
Процедура ЗаполнитьОписаниеУчетнойЗаписи()
	
	КраткоеОписание   = НазначениеУчетнойЗаписи;
	ПодробноеОписание = ПодробноеОписаниеУчетнойЗаписи;
	
	Если ТипРегистрации = 1 Тогда
		
		ИнформацияОбУчетнойЗаписи = РаботаСАбонентамиЭДО.ИнформацияОбУчетнойЗаписи(ИдентификаторОрганизацииСуществующий);
		КраткоеОписание = ИнформацияОбУчетнойЗаписи.КраткоеОписание;
		ПодробноеОписание = ИнформацияОбУчетнойЗаписи.ПодробноеОписание;
		
	КонецЕсли;
	
	Если ПустаяСтрока(НазначениеУчетнойЗаписи) Или ТребуетсяОбновлениеСведенийОбУчетнойЗаписи Тогда
		НазначениеУчетнойЗаписи = КраткоеОписание;
	КонецЕсли;
	
	Если ПустаяСтрока(ПодробноеОписаниеУчетнойЗаписи) Или ТребуетсяОбновлениеСведенийОбУчетнойЗаписи Тогда
		ПодробноеОписаниеУчетнойЗаписи = ПодробноеОписание;
	КонецЕсли;
	
	ТребуетсяОбновлениеСведенийОбУчетнойЗаписи = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СохранитьУчетнуюЗапись()
	
	ОписаниеУчетнойЗаписи = УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи();
	ОписаниеУчетнойЗаписи.Наименование = НаименованиеУчетнойЗаписи;
	ОписаниеУчетнойЗаписи.Организация = Организация;
	ОписаниеУчетнойЗаписи.АдресОрганизации = АдресОрганизации;
	ОписаниеУчетнойЗаписи.АдресОрганизацииЗначение = ЗначениеПолейАдреса;
	ОписаниеУчетнойЗаписи.СпособОбмена = СпособОбменаЭД;
	ОписаниеУчетнойЗаписи.Идентификатор = ИдентификаторОрганизацииСуществующий;
	ОписаниеУчетнойЗаписи.Сертификат = СертификатКриптографии;
	ОписаниеУчетнойЗаписи.Доверенность = Доверенность;
	ОписаниеУчетнойЗаписи.КодНалоговогоОргана = КодНалоговогоОргана;
	ОписаниеУчетнойЗаписи.Оператор = ИдентификаторОператораЭДО;
	ОписаниеУчетнойЗаписи.Назначение = НазначениеУчетнойЗаписи;
	ОписаниеУчетнойЗаписи.ПодробноеОписание = ПодробноеОписаниеУчетнойЗаписи;
	ОписаниеУчетнойЗаписи.ПринятыУсловияИспользования = СоглашаюсьСУсловиямиИспользования;
		
	ОписаниеУчетнойЗаписи.ПараметрыУведомлений = ПараметрыУведомлений(ЭтаФорма);
	
	Возврат УчетныеЗаписиЭДОСлужебный.СоздатьУчетнуюЗапись(ОписаниеУчетнойЗаписи, АдресИзменен);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьУчетнуюЗапись(ИдентификаторЭДО)
	
	ОперацияВыполнена = Истина;
	
	Оповестить("ОбновленСписокУчетныхЗаписей1СЭДО");
	
	// Оповещение для БП_3.0 - удалить задачу подключения из начальной страницы.
	Оповестить("СозданПрофиль1СЭДО", Организация);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Успех'"),,НСтр("ru = 'Учетная запись создана успешно'"));
	
	Если КнопкаНазадДоступна Тогда
		Закрыть(ИдентификаторЭДО);
	Иначе
		
		УстановкаСостоянияПолученияИдентификатораЭД(Истина, Истина, Истина);
		Элементы.ГруппаЛево.Видимость = Ложь;
		Элементы.Повторить.Видимость = Ложь;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		Элементы.Закрыть.Видимость = Истина;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОперациямиЭДО

&НаСервере
Процедура ИнициализироватьОперациюЭДО(Знач ОперацияЭДО)
	
	Операция = ОперацияЭДО;
	
	ОперацияПодключенияЭДО = УчетныеЗаписиЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
		
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		ИнициализироватьОперациюПодключенияЭДО(ОперацияЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОперациюПодключенияЭДО(Знач ОперацияЭДО)
	
	Если НастройкаОперацииЭДО Тогда
		Заголовок = НСтр("ru = 'Настройки подключения к ЭДО'");
	КонецЕсли;
	
	Организация = ОперацияЭДО.Параметры.Организация;
	Если ЗначениеЗаполнено(ОперацияЭДО.Параметры.АдресОрганизации) Тогда
		АдресОрганизации = ОперацияЭДО.Параметры.АдресОрганизации;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОперацияЭДО.Параметры.АдресОрганизацииЗначение) Тогда
		ЗначениеПолейАдреса = ОперацияЭДО.Параметры.АдресОрганизацииЗначение;
	КонецЕсли;
	КодНалоговогоОргана = ОперацияЭДО.Параметры.КодНалоговогоОргана;
	СертификатКриптографии = ОперацияЭДО.Параметры.Сертификат;
	ИдентификаторОператораЭДО = ОперацияЭДО.Параметры.ОператорЭДО;
	СпособОбменаЭД = ОперацияЭДО.Параметры.СпособОбменаЭД;
	НаименованиеУчетнойЗаписи = ОперацияЭДО.Параметры.НаименованиеУчетнойЗаписи;
	НазначениеУчетнойЗаписи = ОперацияЭДО.Параметры.НазначениеУчетнойЗаписи;
	ПодробноеОписаниеУчетнойЗаписи = ОперацияЭДО.Параметры.ОписаниеУчетнойЗаписи;
	СоглашаюсьСУсловиямиИспользования = ОперацияЭДО.Параметры.ПринятыУсловияИспользования;
	
	ЭлектроннаяПочта = ОперацияЭДО.Параметры.ЭлектроннаяПочтаДляУведомлений;
	УведомлятьОСобытиях = ОперацияЭДО.Параметры.УведомлятьОСобытиях;
	УведомлятьОНовыхПриглашениях = ОперацияЭДО.Параметры.УведомлятьОНовыхПриглашениях;
	УведомлятьОбОтветахНаПриглашения = ОперацияЭДО.Параметры.УведомлятьОбОтветахНаПриглашения;
	УведомлятьОНовыхДокументах = ОперацияЭДО.Параметры.УведомлятьОНовыхДокументах;
	УведомлятьОНеОбработанныхДокументах = ОперацияЭДО.Параметры.УведомлятьОНеОбработанныхДокументах;
	УведомлятьОбОкончанииСрокаДействияСертификата = ОперацияЭДО.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата;
	
	ТипРегистрации = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперациюЭДО()
	
	ОперацияПодключенияЭДО = УчетныеЗаписиЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
	
	Если Операция.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		ЗаполнитьОперациюПодключенияЭДО();
		// Если идентификатор ЭДО еще не присвоен, то сбрасываем процесс выполнения операции.
		Если Не ЗначениеЗаполнено(Операция.Результат.ИдентификаторЭДО) Тогда
			ЗаполнитьЗначенияСвойств(Операция.Результат, ОперацияПодключенияЭДО.Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперациюПодключенияЭДО()
	
	Операция.Параметры.Организация = Организация;
	Операция.Параметры.АдресОрганизации = АдресОрганизации;
	Операция.Параметры.АдресОрганизацииЗначение = ЗначениеПолейАдреса;
	Операция.Параметры.КодНалоговогоОргана = КодНалоговогоОргана;
	Операция.Параметры.Сертификат = СертификатКриптографии;
	Операция.Параметры.ОператорЭДО = ИдентификаторОператораЭДО;
	Операция.Параметры.СпособОбменаЭД = СпособОбменаЭД;
	Операция.Параметры.НаименованиеУчетнойЗаписи = НаименованиеУчетнойЗаписи;
	Операция.Параметры.ОписаниеУчетнойЗаписи = ПодробноеОписаниеУчетнойЗаписи;
	Операция.Параметры.НазначениеУчетнойЗаписи = НазначениеУчетнойЗаписи;
	Операция.Параметры.ПринятыУсловияИспользования = СоглашаюсьСУсловиямиИспользования;
	
	Операция.Параметры.УведомлятьОСобытиях = УведомлятьОСобытиях;
	Операция.Параметры.ЭлектроннаяПочтаДляУведомлений = ЭлектроннаяПочта;
	Операция.Параметры.УведомлятьОНовыхПриглашениях = УведомлятьОНовыхПриглашениях;
	Операция.Параметры.УведомлятьОбОтветахНаПриглашения = УведомлятьОбОтветахНаПриглашения;
	Операция.Параметры.УведомлятьОНовыхДокументах = УведомлятьОНовыхДокументах;
	Операция.Параметры.УведомлятьОНеОбработанныхДокументах = УведомлятьОНеОбработанныхДокументах;
	Операция.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата = УведомлятьОбОкончанииСрокаДействияСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНастройкуОперацииЭДО()
	
	РазрешитьЗакрытие = Истина;
	ЗаполнитьОперациюЭДО();
	Закрыть(Операция);
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СОтчетность

&НаКлиенте
Процедура ПослеПоискаСертификата(СертификатКриптографии, Контекст) Экспорт
	
	Если ТипЗнч(СертификатКриптографии) <> Тип("СертификатКриптографии") Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
		Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Далее(Неопределено);
	Готово(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДополнительныеПараметры(Знач ДополнительныеПараметры)
	
	ПолучатьИдентификаторыВСервисе1СЭДО = Ложь;
	СоглашаюсьСУсловиямиИспользования = Истина;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДополнительныеПараметры);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОжиданиеРегистрации;
	
	Если Параметры.ДополнительныеПараметры.Свойство("КодРегиона")
		И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.КодРегиона) Тогда
		СформироватьАдрес(ДополнительныеПараметры);
	КонецЕсли;
	
	НазначениеУчетнойЗаписи = НСтр("ru = 'Основная'");
	ИдентификаторОператораЭДО = "2AE"; // Калуга-Астрал.
	НаименованиеУчетнойЗаписи = СтрШаблон(НСтр("ru = '%1, %2'"), Организация, СпособОбменаЭД);
	
КонецПроцедуры

// Выполняет формирование строки адреса по реквизитам адреса.
&НаСервере
Процедура СформироватьАдрес(Знач ДополнительныеПараметры)
	
	ДанныеАдреса = Новый Структура("Индекс,Регион,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	ЗаполнитьЗначенияСвойств(ДанныеАдреса, ДополнительныеПараметры);
	
	Адр = "";
	
	ДобавитьПодстроку(Адр, ДанныеАдреса.Индекс);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Регион);
	ДобавитьПодстроку(Адр, ДанныеАдреса.КодРегиона, "регион ");
	ДобавитьПодстроку(Адр, ДанныеАдреса.Район);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Город);
	ДобавитьПодстроку(Адр, ДанныеАдреса.НаселенныйПункт);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Улица);
	ДобавитьПодстроку(Адр, ДанныеАдреса.Дом     , "д. ");
	ДобавитьПодстроку(Адр, ДанныеАдреса.Корпус  , "корп. ");
	ДобавитьПодстроку(Адр, ДанныеАдреса.Квартира, "кв. ");
	
	АдресОрганизации = Адр;
	
КонецПроцедуры

// Процедура добавления подстроки к строке
// Параметры:
// - ИсходнаяСтрока - Строка - исходная строка;
// - Подстрока      - Строка - строка, которая должна быть добавлена в конец исходной строки;
// - Префикс        - Строка - строка, которая добавляется перед подстрокой;
// - Разделитель    - строка - строка, которая служит разделителем между строкой и подстрокой.
//
&НаСервере
Процедура ДобавитьПодстроку(ИсходнаяСтрока, Знач Подстрока, Префикс = "", Разделитель = ", ")
	
	Если ЗначениеЗаполнено(ИсходнаяСтрока) И ЗначениеЗаполнено(Подстрока) Тогда
		ИсходнаяСтрока = ИсходнаяСтрока + Разделитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подстрока) Тогда
		ИсходнаяСтрока = ИсходнаяСтрока + Префикс + Подстрока;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИспользованиеОбменаСКонтрагентами

&НаСервереБезКонтекста
Функция ПроверитьИспользованиеОбменаСКонтрагентами()
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВключитьИспользованиеОбменаСКонтрагентами()
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ВключитьИспользованиеЭлектронныхПодписей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьИспользованиеЭлектронныхПодписей()
	
	КриптографияБЭД.ВключитьИспользованиеЭлектронныхПодписей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУведомлений(Форма)

	ПараметрыУведомлений = СервисЭДОКлиентСервер.НовыеПараметрыУведомлений();
	ПараметрыУведомлений.АдресУведомлений                              = Форма.ЭлектроннаяПочта;
	ПараметрыУведомлений.УведомлятьОСобытиях                           = Форма.УведомлятьОСобытиях;
	ПараметрыУведомлений.УведомлятьОНовыхПриглашениях                  = Форма.УведомлятьОНовыхПриглашениях;
	ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения              = Форма.УведомлятьОбОтветахНаПриглашения;
	ПараметрыУведомлений.УведомлятьОНовыхДокументах                    = Форма.УведомлятьОНовыхДокументах;
	ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах           = Форма.УведомлятьОНеобработанныхДокументах;
	ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата = Форма.УведомлятьОбОкончанииСрокаДействияСертификата;
	
	Возврат ПараметрыУведомлений;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкиВКонтекстномРежиме(ЭлементДляОтображенияОшибок, ГруппаПредупреждения = Неопределено)
	
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.КонтекстныйРежимОбработки = Истина;
	ПараметрыОбработкиОшибок.НадписьПредупреждение = ЭлементДляОтображенияОшибок;
	Если ГруппаПредупреждения <> Неопределено Тогда
		ПараметрыОбработкиОшибок.ГруппаПредупреждения = ГруппаПредупреждения;
	КонецЕсли;
	ПараметрыОбработкиОшибок.ТекстПредупреждения = ДиагностикаЭДОКлиент.ТекстПредупреждения(КонтекстДиагностики);
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено)
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;

	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;

	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 

&НаСервереБезКонтекста
Функция СпособОбменаАбонентаНаСервере(Знач ИдентификаторЭДО)
	
	Возврат ОбменСКонтрагентамиИнтеграция.СпособОбменаАбонентаЭДО(ИдентификаторЭДО);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьЭлектронныеПодписи()
	
	Возврат НастройкиБЭД.ИспользоватьЭлектронныеПодписи();
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСертификатаНаСервере()
	
	ПроверитьНеобходимостьДоверенности();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьДоверенности()
	
	Если ЗначениеЗаполнено(СертификатКриптографии) Тогда
		СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(СертификатКриптографии);
		СвойстваИздателя = КриптографияБЭД.СвойстваИздателяСертификатаПоСсылке(СертификатКриптографии);
		ЭтоСертификатФизическогоЛица = 
			МашиночитаемыеДоверенности.ЭтоСертификатФизическогоЛица(СвойстваСубъекта, СвойстваИздателя); 
	КонецЕсли;	
	
	ТребуетсяДоверенность = УчетныеЗаписиЭДОСлужебный.ТребуетсяДоверенность(Организация, СертификатКриптографии,
		СпособОбменаЭД);
		
	Если ТребуетсяДоверенность  Тогда
		УчетныеЗаписиЭДОСлужебный.ЗаполнитьСписокВыбораДоверенностей(Организация, СертификатКриптографии,
		Элементы.Доверенность);
		Если Элементы.Доверенность.СписокВыбора.Количество() = 1 Тогда
			Доверенность = Элементы.Доверенность.СписокВыбора[0].Значение;
		КонецЕсли;
	Иначе
		Доверенность = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаОбмена()
	
	ПроверитьНеобходимостьДоверенности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОператораЭДО()
	
	ПолучитьСпособОбменаПоОператоруЭДО();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

