
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ПаролиСертификатов, УникальныйИдентификаторЗаявки1СЭДО,
	ТекущийСтатусЗаявкиТакском, ВыполняетсяДлительнаяОперация, КонтекстДиагностики, ОбработчикРезультатаЗаявкиТакском,
	ОтветДляЗаявкиТакском;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ТолькоПросмотр = Не НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ПодготовитьФормуНаСервере();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОтборСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	ОтборСертификатовУчетныхЗаписей.УчетныеЗаписи = "&ИдентификаторЭДО";
	
	ЗапросСертификатовУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей",
		ОтборСертификатовУчетныхЗаписей);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСертификатовУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыУчетныхЗаписей.Сертификат,
		|	СертификатыУчетныхЗаписей.Доверенность
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей";
			
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторЭДО", Запись.ИдентификаторЭДО);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Сертификаты = Новый Массив;
	Доверенности = Новый Соответствие;
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сертификаты.Добавить(ВыборкаДетальныеЗаписи.Сертификат);
			Доверенности.Вставить(ВыборкаДетальныеЗаписи.Сертификат, ВыборкаДетальныеЗаписи.Доверенность);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокСертификатов.Очистить();
	СекундВСутках = 60*60*24;
	Для Каждого СвойстваСертификата Из СвойстваСертификатов Цикл
		НоваяСтрока = СписокСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваСертификата.Значение);
		НоваяСтрока.Сертификат = СвойстваСертификата.Значение.Ссылка;
		НоваяСтрока.Доверенность = Доверенности[НоваяСтрока.Сертификат];
		НоваяСтрока.СертификатДействителенДо = СвойстваСертификата.Значение.ДействителенДо;
		НоваяСтрока.СертификатДействителен = СвойстваСертификата.Значение.ДействителенДо > ТекущаяДатаСеанса();
		НоваяСтрока.Представление = СвойстваСертификата.Значение.Наименование;
		НоваяСтрока.СрокДействияВДнях =
			Окр((СвойстваСертификата.Значение.ДействителенДо - ТекущаяДатаСеанса()) / СекундВСутках);
	КонецЦикла;
	
	ЗаполнитьСрокДействияСертификата(ЭтотОбъект);
	
	АдресОрганизацииИнформация = ИнформацияОбАдресеОрганизации(Запись.Организация);
	АдресОрганизации = АдресОрганизацииИнформация.Представление;
	АдресОрганизацииЗначение = АдресОрганизацииИнформация.Значение;
		
	ДанныеОрганизации = УчетныеЗаписиЭДОСлужебный.РегистрационныеДанныеОрганизации(Запись.Организация);
	КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	
	НастроитьЭлементыАдресаОрганизации(ЭтотОбъект);
	НастроитьЭлементыКодаНалоговогоОргана(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("Записать")
		И ПараметрыЗаписи.Записать Тогда
		
		Если ИзмененыПараметрыУчетнойЗаписи Или ИзмененыНастройкиУведомлений Тогда
			
			ЗначенияСвойств = ПолучитьНеСохраненныеРеквизиты(Запись.ИдентификаторЭДО, ИзмененыПараметрыУчетнойЗаписи,
				ИзмененыНастройкиУведомлений);
				
			СохранитьНовыеЗначенияВПараметрыЗаписи(ЗначенияСвойств, ПараметрыЗаписи);
			
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияСвойств);
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИзмененыНастройкиУведомлений"   , ИзмененыНастройкиУведомлений);
	РезультатПроверки.Вставить("ИзмененыПараметрыУчетнойЗаписи" , ИзмененыПараметрыУчетнойЗаписи);
	РезультатПроверки.Вставить("ИзмененСоставСертификатов"      , ИзмененСоставСертификатов);
	РезультатПроверки.Вставить("ИзмененыРегистрационныеДанные", ИзмененыРегистрационныеДанные);
	
	Отказ = Истина;
	
	ОбновитьОператоровЭДОПередЗаписью(РезультатПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.КопироватьID.Видимость = Ложь;
	#КонецЕсли
	
	ИспользоватьУведомления = ЕстьВключенныеСобытия();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СписокНеСохраненныхСвойств = Неопределено;
	Если ПараметрыЗаписи.Свойство("СписокНеСохраненныхСвойств", СписокНеСохраненныхСвойств) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СписокНеСохраненныхСвойств);
		
		ЗаполнитьЗначенияСвойств(Запись, СписокНеСохраненныхСвойств.ЗначенияЗаписи);
		
	КонецЕсли;
	
	Если ИзмененыНастройкиУведомлений 
		Или ИзмененыПараметрыУчетнойЗаписи
		Или ИзмененСоставСертификатов
		ИЛИ ИзмененыРегистрационныеДанные Тогда
		Модифицированность = Истина;
	КонецЕсли;
		
	Если Закрыть И ЭтотОбъект.Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
	ВыполняетсяДлительнаяОперация                  = Ложь;
	Элементы.ГруппаОжиданиеСинхронизации.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И ВыполняетсяДлительнаяОперация Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗавершениеРаботы И Не Отказ Тогда
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияАдресОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Запись.АдресОрганизации = АдресОрганизации;
	ПриИзмененииАдресаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодНалоговогоОрганаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Запись.КодНалоговогоОргана = КодНалоговогоОргана;
	ПриИзмененииКодаНалоговогоОргана();
КонецПроцедуры

&НаКлиенте
Процедура ПодробноеОписаниеУчетнойЗаписиПриИзменении(Элемент)
	ИзменилисьПараметрыУчетнойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеУчетнойЗаписиПриИзменении(Элемент)
	ИзменилисьПараметрыУчетнойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУведомленияПриИзменении(Элемент)
	
	Запись.УведомлятьОНовыхПриглашениях                  = ИспользоватьУведомления;
	Запись.УведомлятьОбОтветахНаПриглашения              = ИспользоватьУведомления;
	Запись.УведомлятьОНовыхДокументах                    = ИспользоватьУведомления;
	Запись.УведомлятьОНеОбработанныхДокументах           = ИспользоватьУведомления;
	Запись.УведомлятьОбОкончанииСрокаДействияСертификата = ИспользоватьУведомления;
	
	ИзмененыНастройкиУведомлений = Истина;
	Модифицированность           = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляУведомленийПриИзменении(Элемент)
	
	ИзмененыНастройкиУведомлений = Истина;
	Модифицированность = Истина;
	
	ЭлектроннаяПочтаНеКорректна = Не ПустаяСтрока(Запись.ЭлектроннаяПочтаДляУведомлений)
		И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Запись.ЭлектроннаяПочтаДляУведомлений);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее и
	// обращение в личный кабинет выполняется по текущему или по первому сертификату.
	
	Если СписокСертификатов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для входа в личный кабинет должен быть зарегистрирован хотя бы один сертификат'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинет", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только после записи учетной записи.
			|Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОбновлениеУведомленийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗагрузитьНастройкиУведомленийИзСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНадписьПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупреждения;
	КонтекстДиагностики.ОшибкиОбработаны = Ложь;
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСертификатов

&НаКлиенте
Процедура СписокСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокСертификатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокСертификатов.ТекущийЭлемент = Элементы.СписокСертификатовДоверенность Тогда
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяДоверенность;
		Если Не ТекущиеДанные.ТребуетсяДоверенность И ЗначениеЗаполнено(ТекущиеДанные.Доверенность) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Доверенность);
		КонецЕсли;
	Иначе 
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.СписокСертификатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокСертификатовДоверенность.СписокВыбора.ЗагрузитьЗначения(
		ТекущиеДанные.Доверенности.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Не ИспользоватьЭлектронныеПодписи() Тогда
		
		ТекстСообщения = НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("ПодписаниеЭД");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОтборПоОрганизации = Новый СписокЗначений;
	ОтборПоОрганизации.Добавить(Запись.Организация);
	ОтборПоОрганизации.Добавить(ПустаяОрганизация);
	
	Отбор = КриптографияБЭДКлиент.НовыйОтборСпискаСертификатов();
	Отбор.Организация = ОтборПоОрганизации;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораСертификата", ЭтотОбъект);
	КриптографияБЭДКлиент.ОткрытьФормуВыбораСертификатов(Оповещение, Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСертификата(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОповещениеПослеПроверки = Новый ОписаниеОповещения("ЗарегистрироватьДобавитьСертификат", ЭтотОбъект);
		ВыполнитьПроверкиПередДобавлениемСертификата(ВыбранноеЗначение, ОповещениеПослеПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Модифицированность = Истина;
	ИзмененСоставСертификатов = Истина;
	
	Для Каждого Сертификат Из Элементы.СписокСертификатов.ВыделенныеСтроки Цикл
		
		СтрокаСертификат = Элементы.СписокСертификатов.ДанныеСтроки(Сертификат);
		
		СтрокаСертификат.Скрыть = Истина;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Скрыть", Ложь);
	Элементы.СписокСертификатов.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КопироватьID(Команда)
	
	ОбщегоНазначенияБЭДКлиент.СкопироватьВБуферОбмена(Запись.ИдентификаторЭДО,
		НСтр("ru = 'Идентификатор учетной записи скопирован в буфер обмена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Закрыть = Истина;
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	УчетныеЗаписиЭДОСлужебныйКлиент.РедактироватьДатыЗапросаДанныхУОператораЭлектронногоДокументооборота(
		Запись.ИдентификаторЭДО);
		
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Модифицированность = Ложь;
	ТолькоПросмотр = Истина;
	ВыполняетсяДлительнаяОперация = Истина;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииУдаленияУчетнойЗаписи", ЭтаФорма);
	УчетныеЗаписиЭДОСлужебныйКлиент.УдалитьУчетнуюЗапись(Запись.ИдентификаторЭДО, Оповещение, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдресОрганизации(Команда)
	
	НачатьРедактированиеАдресаОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодНалоговогоОргана(Команда)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьРедактированиеКодаНалоговогоОргана", ЭтотОбъект);
	
	УчетныеЗаписиЭДОСлужебныйКлиент.РедактироватьКодНалоговогоОргана(Запись.КодНалоговогоОргана,
		Запись.Организация, УникальныйИдентификатор, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаУчетнойЗаписи(Команда)
	
	КонтекстДиагностики = Неопределено;
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаУчетнойЗаписиПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущую учетную запись внесены изменения. Продолжить выполнение проверки?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить проверку'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить проверку'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Проверка учетной записи'"));
	Иначе
		ПроверкаУчетнойЗаписиПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохранениеДанныхВСервисе

&НаКлиенте
Процедура ЗаписатьИОтправитьВСервисы(РезультатПроверки)
	
	Отказ = Ложь;
	
	Если РезультатПроверки.ИзмененыНастройкиУведомлений
		Или РезультатПроверки.ИзмененыПараметрыУчетнойЗаписи
		Или РезультатПроверки.ИзмененСоставСертификатов
		ИЛИ РезультатПроверки.ИзмененыРегистрационныеДанные Тогда
	
		Отказ = Истина;
		УстановитьСостояниеОжиданияСинхронизации(Истина);
		ВыполнитьСохранениеДанныхВСервисах(РезультатПроверки);
	Иначе 
		УстановитьСостояниеОжиданияСинхронизации(Ложь);
	КонецЕсли;
	
	
	Если Не Отказ Тогда
		ПараметрыЗаписи = Новый Структура("Записать", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохранениеДанныхВСервисах(Этапы)
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьСохранениеДанныхВСервисахПослеПолученияВсехСертификатов", ЭтотОбъект, Этапы);
	НачатьПолучениеВсехСертификатовИСамогоНового(Оповещение, СписокСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСохранениеДанныхВСервисахПослеПолученияВсехСертификатов(ДанныеСертификатов, Этапы) Экспорт
	
	ЕстьДоступныеСертификаты = ДанныеСертификатов.ОтборСертификатов.Количество() > 0;
	
	Если ЕстьДоступныеСертификаты Тогда
		СертификатПоУмолчанию = ДанныеСертификатов.ОтборСертификатов[0]; 
	КонецЕсли;
	
	Если Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		Если Этапы.ИзмененСоставСертификатов Или Этапы.ИзмененыРегистрационныеДанные Тогда
			Если Этапы.ИзмененСоставСертификатов Тогда
				// Данные по новому сертификату отправлены в Такском при его добавлении.
				ЗаписатьДанныеСертификатов();
				ИзмененСоставСертификатов = Ложь;
				Этапы.ИзмененСоставСертификатов = Ложь;
			КонецЕсли;
			Если Этапы.ИзмененыРегистрационныеДанные Тогда
				// Изменение регистрационных данных для Такскома не поддерживается.
				ИзмененыРегистрационныеДанные = Ложь;
				Этапы.ИзмененыРегистрационныеДанные = Ложь;
			КонецЕсли;
			ЗаписатьИОтправитьВСервисы(Этапы);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		Если Этапы.ИзмененСоставСертификатов ИЛИ Этапы.ИзмененыРегистрационныеДанные Тогда
			
			ПараметрыРегистрации = СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО();
			ПараметрыРегистрации.Организация = Запись.Организация;
			ПараметрыРегистрации.ОператорЭДО = Запись.ОператорЭДО;
			ПараметрыРегистрации.АдресОрганизации = Запись.АдресОрганизации;
			Если Запись.АдресОрганизации = АдресОрганизации Тогда
				ПараметрыРегистрации.АдресОрганизацииЗначение = АдресОрганизацииЗначение;
			Иначе
				ПараметрыРегистрации.АдресОрганизацииЗначение = Запись.АдресОрганизацииЗначение;
			КонецЕсли;
			
			ПараметрыРегистрации.ЭлектроннаяПочта = Запись.ЭлектроннаяПочтаДляУведомлений;
			ПараметрыРегистрации.КодНалоговогоОргана = Запись.КодНалоговогоОргана;
			ПараметрыРегистрации.СертификатыПодписейОрганизации = ДанныеСертификатов.Список;
			ПараметрыРегистрации.ИдентификаторОрганизации = Запись.ИдентификаторЭДО;
			ПараметрыРегистрации.ОтборСертификатов = ДанныеСертификатов.ОтборСертификатов;
			ПараметрыРегистрации.Доверенности = ДанныеСертификатов.Доверенности;
			
			Контекст = Новый Структура;
			Контекст.Вставить("ПараметрыРегистрации", ПараметрыРегистрации);
			Контекст.Вставить("Этапы", Этапы);
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиРегистрационногоПакетаВСервис1СЭДО",
				ЭтотОбъект, Контекст);
			КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
			
			Если ЕстьДоступныеСертификаты Тогда
				УчетныеЗаписиЭДОКлиент.ЗарегистрироватьСертификатВСервисе1СЭДО(ЭтотОбъект, Оповещение,
					ПараметрыРегистрации, КонтекстДиагностики);
			Иначе
				ПослеОтправкиРегистрационногоПакетаВСервис1СЭДО(
					Новый Структура("Успех, КонтекстДиагностики", Ложь, КонтекстДиагностики), Контекст);		
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Этапы.ИзмененыПараметрыУчетнойЗаписи Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОтправкаДанныхВСервисНастроекЗавершение", ЭтотОбъект, Этапы);
		
		СервисНастроекЭДОКлиент.ОтправитьДанныеАбонентаВСервисНастроек(Запись.ИдентификаторЭДО, Оповещение, ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	
	Если Этапы.ИзмененыНастройкиУведомлений Тогда
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		
		ПараметрыУведомлений = СервисЭДОКлиентСервер.НовыеПараметрыУведомлений();
		ПараметрыУведомлений.УведомлятьОСобытиях = ИспользоватьУведомления;
		ПараметрыУведомлений.УведомлятьОНовыхПриглашениях = Запись.УведомлятьОНовыхПриглашениях;
		ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения = Запись.УведомлятьОбОтветахНаПриглашения;
		ПараметрыУведомлений.УведомлятьОНовыхДокументах = Запись.УведомлятьОНовыхДокументах;
		ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах =  Запись.УведомлятьОНеОбработанныхДокументах;
		ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата = Запись.УведомлятьОбОкончанииСрокаДействияСертификата;
		ПараметрыУведомлений.АдресУведомлений = Запись.ЭлектроннаяПочтаДляУведомлений;
			
		КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
		КлючСинхронизации.ИдентификаторУчетнойЗаписи = Запись.ИдентификаторЭДО;
		КлючСинхронизации.СпособОбмена = Запись.СпособОбменаЭД;
		КлючСинхронизации.ВыбранныйСертификат = СертификатПоУмолчанию;
		
		Оповещение = Новый ОписаниеОповещения("УстановитьПараметрыУведомленийЗавершение", ЭтотОбъект, Этапы);	
		СервисЭДОКлиент.ОбновитьПараметрыУведомлений(ПараметрыУведомлений, КлючСинхронизации,
			КонтекстДиагностики, Оповещение, ЭтотОбъект, ПаролиСертификатов);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиРегистрационногоПакетаВСервис1СЭДО(РезультатОперации, Контекст) Экспорт
	
	Если РезультатОперации.Успех Тогда
		
		УникальныйИдентификаторЗаявки1СЭДО = РезультатОперации.УникальныйИдентификаторЗаявки1СЭДО;
		ПаролиСертификатов         = РезультатОперации.ПаролиСертификатов;
		// Запустим обработчик ожидания результата регистрации организации у оператора.
		ОжиданиеОперацийБЭДКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При обновлении сертификатов у оператора ЭДО'");
		КонтекстДиагностики = РезультатОперации.КонтекстДиагностики;
		ОбработатьОшибкиВКонтекстномРежиме(ТекстСообщения);
		
		Контекст.Этапы.ИзмененСоставСертификатов = Ложь;
		Контекст.Этапы.ИзмененыРегистрационныеДанные = Ложь;
		Закрыть = Ложь;
		ЗаписатьИОтправитьВСервисы(Контекст.Этапы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()
	
	Оповещение = Новый ОписаниеОповещения("ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение", ЭтотОбъект);
	СервисЭДОКлиент.ПолучитьСостояниеРегистрацииВСервисе1СЭДО(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УникальныйИдентификаторЗаявки1СЭДО), Оповещение,
		УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСостоянияРегистрацииСертификатаВ1СЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИзмененыНастройкиУведомлений"   , ИзмененыНастройкиУведомлений);
	РезультатПроверки.Вставить("ИзмененыПараметрыУчетнойЗаписи" , ИзмененыПараметрыУчетнойЗаписи);
	РезультатПроверки.Вставить("ИзмененСоставСертификатов"      , Ложь);
	РезультатПроверки.Вставить("ИзмененыРегистрационныеДанные", Ложь);
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // см. СервисЭДО.ПолучитьСостояниеРегистрацииВСервисе1СЭДО
		СостояниеЗаявки = РезультатВыполнения.СостояниеРегистрации[УникальныйИдентификаторЗаявки1СЭДО];
		Если ЗначениеЗаполнено(СостояниеЗаявки.ИдентификаторОрганизации) Тогда
			
			Если СостояниеЗаявки.Результат Тогда
				ЗаписатьДанныеСертификатов(РезультатПроверки);
				ИзмененСоставСертификатов = Ложь;
				ИзмененыРегистрационныеДанные = Ложь;
			Иначе
				Закрыть = Ложь;
				ОбщегоНазначенияКлиент.СообщитьПользователю(СостояниеЗаявки.ОписаниеОшибки);
			КонецЕсли;
			
		Иначе
			ОжиданиеОперацийБЭДКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Закрыть = Ложь;
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении сертификатов у оператора ЭДО.
										|Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ЗаписатьИОтправитьВСервисы(РезультатПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСертификатов(Знач РезультатПроверки = Неопределено)
	
	ДобавитьСертификатыУчетныхЗаписейЭДО(Запись.ИдентификаторЭДО, ВсеСертификаты(СписокСертификатов));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыУведомленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ИзмененыНастройкиУведомлений = Ложь;
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	Если Не Результат.Успех Тогда

		Закрыть = Ложь;
		ТекстСообщения = НСтр("ru = 'При обновлении уведомлений у оператора электронного документооборота'");

		ОбработатьОшибкиВКонтекстномРежиме(ТекстСообщения);

		ЗаписатьИОтправитьВСервисы(ДополнительныеПараметры);

		Возврат;
	КонецЕсли;
	
	ИзмененыНастройкиУведомлений = Ложь;
	ЗаписатьИОтправитьВСервисы(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаДанныхВСервисНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ИзмененыПараметрыУчетнойЗаписи = Ложь;
	
	Если Результат <> Неопределено 
		И Результат.Статус = "Выполнено" Тогда
		
		РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // см. СервисНастроекЭДО.ОтправитьДанныеАбонентаВСервисНастроек
		КонтекстДиагностики = РезультатПроцедуры.КонтекстДиагностики;
		Если РезультатПроцедуры.Результат Тогда
			ИзмененыПараметрыУчетнойЗаписи = Ложь;
		Иначе 
			Элементы.ГруппаОжиданиеСинхронизации.Видимость = Ложь;
			
			ЗаголовокОперации = НСтр("ru = 'При обновлении информации в сервисе настроек 1С:ЭДО'");
			ОбработатьОшибкиВКонтекстномРежиме(ЗаголовокОперации);
		КонецЕсли;
		
	ИначеЕсли ЭтотОбъект.Открыта() Тогда 
		Закрыть = Ложь;
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при обновлении информации в сервисе настроек 1С:ЭДО
                               |Подробности см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗаписатьИОтправитьВСервисы(ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхОператоровЭДО

&НаКлиенте
Процедура ОбновитьОператоровЭДОПередЗаписью(РезультатПроверкиУчетнойЗаписи)
	
	Если РезультатПроверкиУчетнойЗаписи.ИзмененСоставСертификатов Тогда
		УстановитьСостояниеОжиданияСинхронизации(Истина);
		ОжидатьОбновлениеДанных(РезультатПроверкиУчетнойЗаписи);
	Иначе
		ЗаписатьИОтправитьВСервисы(РезультатПроверкиУчетнойЗаписи);
	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура ОжидатьОбновлениеДанных(РезультатПроверки)       	
	
	ДлительнаяОперация = ОбновитьКешиОператоровЭДОИФорматов();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь; 
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РезультатПроверки", РезультатПроверки);
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииОбновленияДанных", ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);  
	
КонецПроцедуры	

&НаСервере
Функция ОбновитьКешиОператоровЭДОИФорматов()
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);  
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление данных из сервиса настроек 1С:ЭДО'");
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
	"СинхронизацияЭДО.ОбновитьКешиОператоровЭДОИФорматов");
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииОбновленияДанных(Результат, ДополнительныеПараметры) Экспорт  
	
	РезультатПроверки = ДополнительныеПараметры.РезультатПроверки;

	ЗаписатьИОтправитьВСервисы(РезультатПроверки);
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;   
	
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);       
	
КонецПроцедуры  

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаНеКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтбораИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запись.ЭлектроннаяПочтаДляУведомлений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запись.СпособОбменаЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЭлектроннаяПочтаДляУведомлений");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СрокДействияВДнях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СертификатДействителен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСертификат");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовДействителенДо");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСрокДействия");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовКемВыдан");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СрокДействияВДнях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СрокДействияВДнях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 30;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.СертификатДействителен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСертификат");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовДействителенДо");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовСрокДействия");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовКемВыдан");
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.ТребуетсяДоверенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.Доверенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовДоверенность");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокСертификатов.ТребуетсяДоверенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокСертификатовДоверенность");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСрокДействияСертификата(Форма)
	НетДействующихСертификатов = Истина;
	Для Каждого СтрокаТЧ Из Форма.СписокСертификатов Цикл
		
		Если СтрокаТЧ.СрокДействияВДнях < 0 Тогда
			СрокДействия = НСтр("ru = 'Истек'");
		Иначе
			
			Если СтрокаТЧ.СрокДействияВДнях > 30 Тогда
				НетДействующихСертификатов = Ложь;
			КонецЕсли;
			
			СрокДействия = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		        НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"),
		        СтрокаТЧ.СрокДействияВДнях);
		КонецЕсли;
		
		СтрокаТЧ.СрокДействияСертификата = СрокДействия;
	КонецЦикла;
	
	Если НетДействующихСертификатов Тогда
		Форма.Элементы.СтраницаСертификаты.Картинка = БиблиотекаКартинок.НекорректныйКонтрагент;
	Иначе
		Форма.Элементы.СтраницаСертификаты.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Элементы.ГруппаОжиданиеТакском.Видимость       = Ложь;
	Элементы.ГруппаОжиданиеСинхронизации.Видимость = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость      = Ложь;
	
	Элементы.Уведомления.Видимость = Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	Если Запись.ОбновитьНастройкиУведомлений Тогда
		Элементы.СтраницыУведомлений.ТекущаяСтраница = Элементы.СтраницаОбновлениеУведомлений;
	Иначе
		Элементы.СтраницыУведомлений.ТекущаяСтраница = Элементы.СтраницаНастройкаУведомлений;
	КонецЕсли;
	
	ЭтоТакском = (Запись.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	
	Элементы.ГруппаОбменЧерезОператораИнформация.Видимость = ЭтоТакском;
	Элементы.ГруппаАдрес.Видимость = Не ЭтоТакском;
	Элементы.ГруппаКодНО.Видимость = Не ЭтоТакском;
	
	ЭлектроннаяПочтаНеКорректна = Не ПустаяСтрока(Запись.ЭлектроннаяПочтаДляУведомлений)
		И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Запись.ЭлектроннаяПочтаДляУведомлений);
	
	Заголовок = Запись.НаименованиеУчетнойЗаписи;     
	
	ЗаполнитьПредставлениеОператора();
	
	ЗаполнитьПредставлениеОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеОператора()
	
	ПредставлениеОператора = СервисНастроекЭДО.ПредставлениеОператораЭлектронногоДокументооборота(Запись.ОператорЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеОрганизации()
	
	Если ЗначениеЗаполнено(Запись.Организация) Тогда
		ПредставлениеОрганизации = Новый ФорматированнаяСтрока(Строка(Запись.Организация),,,,
			ПолучитьНавигационнуюСсылку(Запись.Организация));
	Иначе
		ПредставлениеОрганизации = Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТестНастроекЭДО

&НаКлиенте
Процедура ПроверкаУчетнойЗаписиПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Проверка учетной записи.'"),
		,
		НСтр("ru = 'Выполняется проверка учетной записи. Подождите...'"));
		
	ПараметрыДиагностики = ДиагностикаЭДОКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	ПараметрыДиагностики.Отбор.УчетнаяЗапись.Добавить(Запись.ИдентификаторЭДО);
	ДиагностикаЭДОКлиент.ВыполнитьДиагностику(ПараметрыДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТакском

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакском(ДобавляемыйСертификат)
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
											ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Сертификат"),
											,
											"СписокСертификатов",
											,
											Отказ);
										КонецЕсли;
										
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
											ОбщегоНазначенияБЭДКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
											,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДобавляемыйСертификат", ДобавляемыйСертификат);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомОповещение", ЭтотОбъект, Контекст);
	
	КриптографияБЭДКлиент.ТестНастроекСПроверкойСертификата(ДобавляемыйСертификат, ЭтаФорма,
		Ложь, Истина, Истина, ОбработкаОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомОповещение(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		
		Элементы.СписокСертификатов.Доступность = Ложь;
		Элементы.ГруппаОжиданиеТакском.Видимость  = Истина;
		
		ДополнительныеОбработчики  = Новый Структура;
		
		ДополнительныеОбработчики.Вставить("ОбработчикСтатусаЗаявки" ,
			Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки"   , ЭтотОбъект));
			
		ДополнительныеОбработчики.Вставить("ОбработчикСозданияЗаявки",
			Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикСозданияЗаявки" , ЭтотОбъект, Контекст));
			
		ДополнительныеОбработчики.Вставить("ОбработчикРезультата"    ,
			Новый ОписаниеОповещения("ПолучениеНовогоИдентификатораТакскомОбработчикРезультата"    , ЭтотОбъект));
		
		Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(Контекст.ДобавляемыйСертификат,
			Запись.ИдентификаторЭДО,
			Запись.Организация,
			Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомЗавершение", ЭтотОбъект, Контекст), ДополнительныеОбработчики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Элементы.СписокСертификатов.Доступность = Истина;
	Элементы.ГруппаОжиданиеТакском.Видимость  = Ложь;
	
	Если ТекущийСтатусЗаявкиТакском = "Обработана" Тогда
		ЗаписатьСертификатТакском(Контекст);
		Записать();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'"),, НСтр("ru = 'Сертификат успешно зарегистрирован у  оператора.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСертификатТакском(Знач Контекст)
	
	ДобавитьСертификатВСписок(Контекст.ДобавляемыйСертификат, Ложь);
	ДобавитьСертификатыУчетныхЗаписейЭДО(Запись.ИдентификаторЭДО,
		СписокСертификатов.Выгрузить(, "Сертификат, Доверенность"));

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикСтатусаЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Новый Структура;
	Действие = "СтандартнаяОбработка";
	Если Результат.СтатусЗаявки = "Отсутствует" Тогда
		Действие = "НоваяЗаявка";
	ИначеЕсли Результат.СтатусЗаявки = "ОжиданиеОбработки" Тогда
		Действие = "ПроверитьСтатусЗаявки";
	ИначеЕсли Результат.СтатусЗаявки = "Обработана" Тогда
		Действие = "Завершить";
	ИначеЕсли Результат.СтатусЗаявки = "Отклонена" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		Действие = "Завершить";
	КонецЕсли;
	
	ТекущийСтатусЗаявкиТакском = Результат.СтатусЗаявки;
	
	Ответ.Вставить("Действие", Действие);
	
	ОбработчикРезультатаЗаявкиТакском = Результат.ОбработчикРезультата;
	ОтветДляЗаявкиТакском = Ответ;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОбработкиЗаявкиТакском", 10, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеОбработкиЗаявкиТакском()
	
	ВыполнитьОбработкуОповещения(ОбработчикРезультатаЗаявкиТакском, ОтветДляЗаявкиТакском);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикСозданияЗаявки(Результат, Контекст) Экспорт
	
	Ответ = Новый Структура;
	
	ДанныеЗаявки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Результат.ДанныеЗаявки);
	ПараметрыСертификата = КриптографияБЭДВызовСервера.СвойстваСертификатов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ДобавляемыйСертификат));
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаявки, ПараметрыСертификата,"Фамилия, Имя, Отчество");
	
	Ответ.Вставить("Действие", "ОтправитьЗаявку");
	Ответ.Вставить("ДанныеЗаявки", ДанныеЗаявки);
	
	ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеНовогоИдентификатораТакскомОбработчикРезультата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСертификатовПередДобавлением

&НаКлиенте
Процедура ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	// Сначала нужно проверить, что выбранный сертификат уже не содержится в списке
	МассивСтрок = СписокСертификатов.НайтиСтроки(Новый Структура("Сертификат", Сертификат));
	Если МассивСтрок.Количество() > 0 И Не МассивСтрок[0].Скрыть Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже добавлен для учетной записи ЭДО'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверкиПередДобавлениемСертификата(Сертификат, Запись.Организация,
		Запись.СпособОбменаЭД);
	
	Если РезультатПроверки.Статус Тогда
		ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки);
	Иначе
		МассивПредупреждений = Новый Массив;
		Для Каждого ОписаниеОшибки Из РезультатПроверки.Ошибки Цикл
			Если ОписаниеОшибки.Тип = "Предупреждение" Тогда
				МассивПредупреждений.Добавить(ОписаниеОшибки.Текст);
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки.Текст);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		МассивПредупреждений.Добавить(НСтр("ru = 'Продолжить регистрацию сертификата?'"));
		ТекстВопроса = СтрСоединить(МассивПредупреждений, Символы.ПС);
		
		Контекст = Новый Структура("ОписаниеОповещения, Сертификат", ОповещениеПослеПроверки, Сертификат);		
		Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияДобавленияСертификата", ЭтотОбъект, Контекст);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПроверкиПередДобавлениемСертификата(Знач Сертификат, Знач Организация, Знач СпособОбмена)
	
	Возврат УчетныеЗаписиЭДОСлужебный.ПроверитьСертификатДляУчетнойЗаписи(Сертификат, Организация, СпособОбмена);
	
КонецФункции

&НаКлиенте
Процедура ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки, Сертификат); 

КонецПроцедуры

// Обработка ответа на вопрос см. ВыполнитьПроверкиПередДобавлениемСертификата
//
// Параметры:
//  Ответ - РежимДиалогаВопрос
//  ДополнительныеПараметры - Структура:
//  * ОписаниеОповещения - ОписаниеОповещения
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
&НаКлиенте
Процедура ПослеПодтвержденияДобавленияСертификата(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеПередДобавлениемСертификата(ДополнительныеПараметры.Сертификат,
			ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры  

#КонецОбласти

#Область ПроверкиЗаполнения

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ОшибкаЗаполнения = Ложь;
	
	ИспользоватьУведомления = ЕстьВключенныеСобытия();
	
	Если ИспользоватьУведомления Тогда
			
		Если ИспользоватьУведомления
			И Не ЗначениеЗаполнено(Запись.ЭлектроннаяПочтаДляУведомлений) Тогда
				ОшибкаЗаполнения = Истина;
				ТекстСообщения = НСтр("ru = 'Не указана почта для уведомлений'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ЭлектроннаяПочтаДляУведомлений");
		ИначеЕсли ИспользоватьУведомления И ЭлектроннаяПочтаНеКорректна Тогда
				ОшибкаЗаполнения = Истина;
				ТекстСообщения = НСтр("ru = 'Электронная почта указана неверно'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ЭлектроннаяПочтаДляУведомлений");
		КонецЕсли;
			
		Если Не ПроверитьЗаполнение() Тогда
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранныеСертификаты = СписокСертификатов.НайтиСтроки(Новый Структура("Скрыть", Ложь));
	
	Если ВыбранныеСертификаты.Количество() = 0 Тогда
		ОшибкаЗаполнения = Истина;
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СписокСертификатов");
	Иначе
		ЕстьДействующиеСертификаты = Ложь;
		Для каждого СтрокаСертификата Из ВыбранныеСертификаты Цикл
			Если СтрокаСертификата.СертификатДействителен Тогда
				ЕстьДействующиеСертификаты = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьДействующиеСертификаты Тогда
			ОшибкаЗаполнения = Истина;
			ТекстСообщения = НСтр("ru = 'Нет действующих сертификатов.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СписокСертификатов");
		КонецЕсли;
		Счетчик = 0;
		Для Каждого СтрокаСертификата Из ВыбранныеСертификаты Цикл
			Если СтрокаСертификата.ТребуетсяДоверенность И Не ЗначениеЗаполнено(СтрокаСертификата.Доверенность) Тогда
				ОшибкаЗаполнения = Истина;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена доверенность для сертификата %1'"),
					СтрокаСертификата.Представление);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,
					СтрШаблон("СписокСертификатов[%1].Доверенность", Формат(Счетчик, "ЧГ=;")));
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
	
КонецФункции

&НаКлиенте
Функция ЕстьВключенныеСобытия()
	
	Результат = Ложь;
	Если Запись.УведомлятьОбОкончанииСрокаДействияСертификата
		Или Запись.УведомлятьОНеОбработанныхДокументах
		Или Запись.УведомлятьОНовыхДокументах
		Или Запись.УведомлятьОбОтветахНаПриглашения
		Или Запись.УведомлятьОНовыхПриглашениях Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура ЗарегистрироватьДобавитьСертификат(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		Если ИнтеграцияБИПБЭДКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
			ЗарегистрироватьСертификатТакском(ВыбранноеЗначение);
		Иначе
			
			ДобавитьСертификатВСписок(ВыбранноеЗначение, Ложь);
			ИзмененСоставСертификатов = Истина;
			Модифицированность = Истина;
			
			// В случае, если в конфигурацию не встроена интернет-поддержка или работа производится в режиме сервиса,
			// сертификат в сервисе 1С-Такском необходимо регистрировать через тех. поддержку.
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат добавлен в учетную запись, но для регистрации его в сервисе ЭДО необходимо обратиться в техническую поддержку 1С-ЭДО.'"));
			
		КонецЕсли;
		
	ИначеЕсли Запись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			
		ДобавитьСертификатВСписок(ВыбранноеЗначение, Истина);
		
		ИзмененСоставСертификатов = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСертификатыУчетныхЗаписейЭДО(Знач ИдентификаторЭДО, Знач Сертификаты)
	
	Доверенности = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из Сертификаты Цикл
		Доверенности.Вставить(СтрокаТаблицы.Сертификат, СтрокаТаблицы.Доверенность);
	КонецЦикла;
	УчетныеЗаписиЭДОСлужебный.ЗаписатьСертификатыУчетнойЗаписи(ИдентификаторЭДО,Сертификаты.ВыгрузитьКолонку("Сертификат"),, Доверенности);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатВСписок(ДобавляемыйСертификат, ТребуетсяСинхронизация)
	
	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДобавляемыйСертификат);
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);

	СтрокиСертификата = СписокСертификатов.НайтиСтроки(Новый Структура("Сертификат", ДобавляемыйСертификат));
	Если СтрокиСертификата.Количество() = 0 Тогда
		СтрокаСертификата = СписокСертификатов.Добавить();
	Иначе
		СтрокаСертификата = СтрокиСертификата[0];
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрокаСертификата, СвойстваСертификатов[ДобавляемыйСертификат]);
	СтрокаСертификата.Сертификат = СвойстваСертификатов[ДобавляемыйСертификат].Ссылка;
	СтрокаСертификата.СертификатДействителенДо = СвойстваСертификатов[ДобавляемыйСертификат].ДействителенДо;
	СтрокаСертификата.Представление = СвойстваСертификатов[ДобавляемыйСертификат].Наименование;
	СтрокаСертификата.СертификатДействителен = СвойстваСертификатов[ДобавляемыйСертификат].ДействителенДо > ТекущаяДатаСеанса();
	СтрокаСертификата.Скрыть = Ложь;
	ЗаполнитьСрокДействияСертификата(ЭтотОбъект);
	ПроверитьНеобходимостьДоверенности(СтрокаСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменилисьПараметрыУчетнойЗаписи()
	
	ИзмененыПараметрыУчетнойЗаписи = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИспользованиеУведомлений(Элемент)
	
	ИспользоватьУведомления = Запись.УведомлятьОбОкончанииСрокаДействияСертификата
		Или Запись.УведомлятьОНеОбработанныхДокументах
		Или Запись.УведомлятьОНовыхДокументах
		Или Запись.УведомлятьОбОтветахНаПриглашения
		Или Запись.УведомлятьОНовыхПриглашениях;
		
	Если Элемент <> Неопределено Тогда
		ИзмененыНастройкиУведомлений = Истина;
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеВсехСертификатовИСамогоНового(Оповещение, СписокСертификатов)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("СписокСертификатов", СписокСертификатов);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияДоступныхСертификатов", ЭтотОбъект, Контекст);
		
	КриптографияБЭДКлиент.ПолучитьДоступныеСертификаты(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияДоступныхСертификатов(Результат, Контекст) Экспорт
	
	ДанныеСертификатов = ДанныеСертификатов(Контекст.СписокСертификатов, Результат);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ДанныеСертификатов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСертификатов(Знач СписокСертификатов, ДоступныеСертификаты)
	
	Результат = Новый Структура("Список, ОтборСертификатов, Доверенности");
	Результат.Доверенности = Новый Соответствие;
	ТаблицаВсехСертификатов = ТаблицаВсехСертификатов(СписокСертификатов);
	
	Результат.Список = ТаблицаВсехСертификатов.ВыгрузитьКолонку("Сертификат");
	
	ОтборСертификатов = Новый Массив;
	
	ТаблицаВсехСертификатов.Сортировать("СрокДействияВДнях Убыв");
	
	Для каждого СтрокаТаблицы Из ТаблицаВсехСертификатов Цикл
		Если ДоступныеСертификаты.Найти(СтрокаТаблицы.Сертификат) <> Неопределено Тогда
			ОтборСертификатов.Добавить(СтрокаТаблицы.Сертификат);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Доверенность) Тогда
			Результат.Доверенности.Вставить(СтрокаТаблицы.Сертификат, СтрокаТаблицы.Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Нет доступных сертификатов для подписания регистрационных данных'"));
	КонецЕсли;
	
	Результат.ОтборСертификатов = ОтборСертификатов;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеСертификаты(Знач СписокСертификатов)
	
	Возврат ТаблицаВсехСертификатов(СписокСертификатов);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаВсехСертификатов(СписокСертификатов) 
	
	Возврат СписокСертификатов.Выгрузить(Новый Структура("Скрыть", Ложь));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНеСохраненныеРеквизиты(Знач ИдентификаторЭДО, Знач ИзмененыПараметрыУчетнойЗаписи,Знач ИзмененыНастройкиУведомлений)
	
	Возврат УчетныеЗаписиЭДОСлужебный.НеСохраненныеРеквизитыУчетнойЗаписи(ИдентификаторЭДО,
		ИзмененыПараметрыУчетнойЗаписи, ИзмененыНастройкиУведомлений);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЦветСтиля(Знач ИмяЦветаСтиля)
	
	ЦветСтиля = Новый Цвет;
	
	#Если Клиент Тогда
		ЦветСтиля = ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦветаСтиля);
	#Иначе
		ЦветСтиля = ЦветаСтиля[ИмяЦветаСтиля];
	#КонецЕсли
	
	Возврат ЦветСтиля;
	
КонецФункции

&НаСервере
Процедура ПроверитьНеобходимостьДоверенности(СтрокаТЗ)
	
	СтрокаТЗ.ТребуетсяДоверенность = УчетныеЗаписиЭДОСлужебный.ТребуетсяДоверенность(Запись.Организация,
		СтрокаТЗ.Сертификат, Запись.СпособОбменаЭД);
	
	Если СтрокаТЗ.ТребуетсяДоверенность Тогда
		УчетныеЗаписиЭДОСлужебный.ЗаполнитьСписокВыбораДоверенностей(Запись.Организация, СтрокаТЗ.Сертификат,
			Элементы.СписокСертификатовДоверенность);
		СписокВыбора = Элементы.СписокСертификатовДоверенность.СписокВыбора;
		СтрокаТЗ.Доверенности = СписокВыбора;
		Если СписокВыбора.Количество() = 1 Тогда
			СтрокаТЗ.Доверенность = СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеУчетнойЗаписи

&НаКлиенте
Процедура ПриЗавершенииУдаленияУчетнойЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	ВыполняетсяДлительнаяОперация = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;
	
	Если Результат.Успех = Истина Тогда
		
		Оповестить("ОбновленСписокУчетныхЗаписей1СЭДО");
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПерейтиВЛичныйКабинет(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	УчетныеЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запись.ИдентификаторЭДО);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинетОповещение", ЭтотОбъект);
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(
		ОбработкаОповещения, КонтекстДиагностики, УчетныеЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЛичныйКабинетОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатПодписи  = Неопределено;
	Если Результат.КлючиСинхронизации.Количество() = 0 Тогда
		Если ДиагностикаЭДОКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
		Иначе 
			ТекстСообщения = НСтр("ru='Нет доступных сертификатов, среди зарегистрированных по данной учетной записи.
			|Чтобы добавить сертификат, перейдите на вкладку ""Сертификаты"" и нажмите кнопку ""Добавить""'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,
				,
				"СписокСертификатов",
				"СписокСертификатов");
		КонецЕсли;
	Иначе
		Для Каждого КлючИЗначение Из Результат.КлючиСинхронизации Цикл
			СертификатПодписи = КлючИЗначение.Значение.ВыбранныйСертификат;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		Подключение1СТакскомКлиент.ОткрытьЛичныйКабинетАбонента(СертификатПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНовыеЗначенияВПараметрыЗаписи(ЗначенияСвойств, ПараметрыЗаписи)
	
	СписокНеСохраненныхСвойств = Новый Структура;
	СписокНеСохраненныхСвойств.Вставить("ИзмененСоставСертификатов"     , ИзмененСоставСертификатов);
	СписокНеСохраненныхСвойств.Вставить("ИзмененыНастройкиУведомлений"  , ИзмененыНастройкиУведомлений);
	СписокНеСохраненныхСвойств.Вставить("ИзмененыПараметрыУчетнойЗаписи", ИзмененыПараметрыУчетнойЗаписи);
	СписокНеСохраненныхСвойств.Вставить("ИзмененыРегистрационныеДанные" , ИзмененыРегистрационныеДанные);
	
	ЗначенияЗаписи = Новый Структура;
	Для Каждого Элемент Из ЗначенияСвойств Цикл
		
		ЗначенияЗаписи.Вставить(Элемент.Ключ,Запись[Элемент.Ключ]);
		
	КонецЦикла;
	
	СписокНеСохраненныхСвойств.Вставить("ЗначенияЗаписи", ЗначенияЗаписи);
	
	ПараметрыЗаписи.Вставить("СписокНеСохраненныхСвойств", СписокНеСохраненныхСвойств);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьЭлектронныеПодписи()
	
	Возврат НастройкиБЭД.ИспользоватьЭлектронныеПодписи();
	
КонецФункции

#Область Уведомления

&НаКлиенте
Процедура ЗагрузитьНастройкиУведомленийИзСервиса()
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьНастройкиУведомленийИзСервисаПослеПолученияСертификатов",
		ЭтотОбъект, СписокСертификатов);
	НачатьПолучениеВсехСертификатовИСамогоНового(Оповещение, СписокСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиУведомленийИзСервисаПослеПолученияСертификатов(ДанныеСертификатов, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификатов.ОтборСертификатов.Количество() > 0 Тогда
		СертификатПоУмолчанию = ДанныеСертификатов.ОтборСертификатов[0];
	КонецЕсли;
	
	КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
	КлючСинхронизации.ИдентификаторУчетнойЗаписи = Запись.ИдентификаторЭДО;
	КлючСинхронизации.СпособОбмена = Запись.СпособОбменаЭД;
	КлючСинхронизации.ВыбранныйСертификат = СертификатПоУмолчанию; 
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияПараметровУведомлений", ЭтотОбъект);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	СервисЭДОКлиент.ПолучитьПараметрыУведомлений(КлючСинхронизации,
		КонтекстДиагностики, Оповещение, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПараметровУведомлений(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыУведомлений = Результат.ПараметрыУведомлений;
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	Если ПараметрыУведомлений = Неопределено Тогда
		ОбработатьОшибкиВКонтекстномРежиме(НСтр("ru = 'При получении параметров уведомлений'"));
		Возврат;
	КонецЕсли;
	
	ИспользоватьУведомления = ПараметрыУведомлений.УведомлятьОСобытиях;
	Запись.ЭлектроннаяПочтаДляУведомлений = ПараметрыУведомлений.АдресУведомлений;
	Запись.УведомлятьОНовыхПриглашениях = ПараметрыУведомлений.УведомлятьОНовыхПриглашениях;
	Запись.УведомлятьОбОтветахНаПриглашения = ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения;
	Запись.УведомлятьОНовыхДокументах = ПараметрыУведомлений.УведомлятьОНовыхДокументах;
	Запись.УведомлятьОНеОбработанныхДокументах = ПараметрыУведомлений.УведомлятьОНеОбработанныхДокументах;
	Запись.УведомлятьОбОкончанииСрокаДействияСертификата = ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата;
	
	Запись.ОбновитьНастройкиУведомлений = Ложь;
	Модифицированность = Истина;
	Элементы.СтраницыУведомлений.ТекущаяСтраница = Элементы.СтраницаНастройкаУведомлений;
	
КонецПроцедуры

#КонецОбласти

#Область Адрес

&НаКлиенте
Процедура НачатьРедактированиеАдресаОрганизации()
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьРедактированиеАдресаОрганизации", ЭтотОбъект);
	ИнтеграцияБСПБЭДКлиент.НачатьРедактированиеАдреса(Запись.АдресОрганизации, Запись.АдресОрганизацииЗначение,
		ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеАдресаОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Запись.АдресОрганизации = Результат.Представление;
		Запись.АдресОрганизацииЗначение = Результат.Значение;
		ПриИзмененииАдресаОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииАдресаОрганизации()
	
	ПриИзмененииРегистрационныхДанных();
	НастроитьЭлементыАдресаОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НастроитьЭлементыАдресаОрганизации(Форма)
	
	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	Шаблон = НСтр("ru = '%1: %2'");
	
	Элементы.ГруппаАдрес.ЗаголовокСвернутогоОтображения =
		СтрШаблон(Шаблон, Элементы.ГруппаАдрес.Заголовок, Запись.АдресОрганизации);
	
	ЗаголовокКнопкиИзменения = НСтр("ru = 'Заполните адрес организации'");
	ЦветТекстаКнопкиИзменения = ЦветСтиля("НезаполненныйРеквизитЦветБЭД");
	
	Если ЗначениеЗаполнено(Запись.АдресОрганизации) Тогда
		ЗаголовокКнопкиИзменения = Запись.АдресОрганизации;
		ЦветТекстаКнопкиИзменения = Новый Цвет;
	КонецЕсли;
	
	Элементы.ИзменитьАдресОрганизации.Заголовок = ЗаголовокКнопкиИзменения;
	Элементы.ИзменитьАдресОрганизации.ЦветТекста = ЦветТекстаКнопкиИзменения;
	
	АдресСовпадает = (Форма.АдресОрганизации = Запись.АдресОрганизации) ИЛИ Не ЗначениеЗаполнено(Форма.АдресОрганизации);
	
	Элементы.ДекорацияАдрес.Видимость = Не АдресСовпадает;
	Элементы.ГруппаАдрес.ЦветТекстаЗаголовка = 
		?(АдресСовпадает, Новый Цвет, Элементы.ДекорацияАдрес.ЦветТекста);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбАдресеОрганизации(Знач Организация)
	
	Возврат ИнтеграцияБСПБЭД.КонтактнаяИнформацияОбъекта(Организация, "ЮрАдресОрганизации");
	
КонецФункции

#КонецОбласти

#Область КодНалоговогоОргана

&НаКлиенте
Процедура ЗакончитьРедактированиеКодаНалоговогоОргана(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Запись.КодНалоговогоОргана = Результат;
		ПриИзмененииКодаНалоговогоОргана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКодаНалоговогоОргана()
	
	ПриИзмененииРегистрационныхДанных();
	НастроитьЭлементыКодаНалоговогоОргана(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура НастроитьЭлементыКодаНалоговогоОргана(Форма)
	
	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	Шаблон = НСтр("ru = '%1: %2'");
	
	Элементы.ГруппаКодНО.ЗаголовокСвернутогоОтображения =
		СтрШаблон(Шаблон, Элементы.ГруппаКодНО.Заголовок, Запись.КодНалоговогоОргана);
	
	ЗаголовокКнопкиИзменения = НСтр("ru = 'Укажите код налоговой инспекции'");
	ЦветТекстаКнопкиИзменения = ЦветСтиля("НезаполненныйРеквизитЦветБЭД");
	
	Если ЗначениеЗаполнено(Запись.КодНалоговогоОргана) Тогда
		ЗаголовокКнопкиИзменения = Запись.КодНалоговогоОргана;
		ЦветТекстаКнопкиИзменения = Новый Цвет;
	КонецЕсли;
	
	Элементы.ИзменитьКодНалоговогоОргана.Заголовок = ЗаголовокКнопкиИзменения;
	Элементы.ИзменитьКодНалоговогоОргана.ЦветТекста = ЦветТекстаКнопкиИзменения;
	
	КодНОСовпадает = (Форма.КодНалоговогоОргана = Запись.КодНалоговогоОргана)
		ИЛИ Не ЗначениеЗаполнено(Форма.КодНалоговогоОргана);
	
	Элементы.ДекорацияКодНалоговогоОргана.Видимость = Не КодНОСовпадает;
	Элементы.ГруппаКодНО.ЦветТекстаЗаголовка = 
		?(КодНОСовпадает, Новый Цвет, Элементы.ДекорацияКодНалоговогоОргана.ЦветТекста);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрационныеДанные

&НаКлиенте
Процедура ПриИзмененииРегистрационныхДанных()
	
	ИзмененыРегистрационныеДанные = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаНеисправностей

&НаКлиенте
Процедура ОбработатьОшибкиВКонтекстномРежиме(ЗаголовокОперации) 
	
	КонтекстДиагностики.ЗаголовокОперации = ЗаголовокОперации;
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.КонтекстныйРежимОбработки = Истина;
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупреждения;
	ПараметрыОбработкиОшибок.НадписьПредупреждение = Элементы.ДекорацияНадписьПредупреждение;
	ПараметрыОбработкиОшибок.ТекстПредупреждения = ДиагностикаЭДОКлиент.ТекстПредупреждения(КонтекстДиагностики);
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Запись.Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура УстановитьСостояниеОжиданияСинхронизации(РегистрацияВыполняется)
	
	ВыполняетсяДлительнаяОперация = РегистрацияВыполняется;
	Элементы.ГруппаОжиданиеСинхронизации.Видимость = РегистрацияВыполняется;
	ТолькоПросмотр = РегистрацияВыполняется;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяДлительнаяОперация = Ложь;

#КонецОбласти