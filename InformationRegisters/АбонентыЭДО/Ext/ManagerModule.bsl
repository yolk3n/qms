////////////////////////////////////////////////////////////////////////////////
// Модуль менеджера РегистрСведений.АбонентыЭДО
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Ложь;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.АбонентыЭДО";
	ДополнительныеПараметры.ОтметитьВсеРегистраторы = Ложь;
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	
	Данные = ДанныеКОбработке_ИсправитьИдентификаторы();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.АбонентыЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, ПараметрыВыборки);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Набор = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторЭДО.Установить(Выборка.ИдентификаторЭДО);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
			
			Набор.Прочитать();
			
			Записать = Ложь;
			
			// Обработчик может создавать новые и удалять существующие записи в регистре.
			// Учесть при дальнейшей поддержке обработчика обновления.
			ОбработатьДанные_ИсправитьИдентификаторы(Набор, Записать);
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать абонентов ЭДО по причине:'") + Символы.ПС 
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторых абонентов ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция абонентов ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = Параметры.ПрогрессВыполнения.ОбработаноОбъектов  + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
			Параметры.Очередь, "РегистрСведений.АбонентыЭДО", ПараметрыВыборки);
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКОбработке_ИсправитьИдентификаторы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ИЗ
	|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
	|ГДЕ
	|	(АбонентыЭДО.ИдентификаторЭДО ПОДОБНО ""2AE-%""
	|			ИЛИ АбонентыЭДО.ИдентификаторЭДО ПОДОБНО ""2BE-%""
	|			ИЛИ АбонентыЭДО.ИдентификаторЭДО ПОДОБНО ""2BN-%""
	|			ИЛИ АбонентыЭДО.ИдентификаторЭДО ПОДОБНО ""2LB-%"")";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбработатьДанные_ИсправитьИдентификаторы(Набор, Записать)
	
	НекорректныеПрефиксы = Новый Массив;
	НекорректныеПрефиксы.Добавить("2AE-");
	НекорректныеПрефиксы.Добавить("2BE-");
	НекорректныеПрефиксы.Добавить("2BN-");
	НекорректныеПрефиксы.Добавить("2LB-");
	
	НаИсправление = Новый Массив;
	
	Для каждого Запись Из Набор Цикл
		
		Префикс = Лев(Запись.ИдентификаторЭДО, 4);
		Если НекорректныеПрефиксы.Найти(Префикс) <> Неопределено Тогда
			НаИсправление.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Запись Из НаИсправление Цикл
		
		// Добавляем запись с исправленным идентификатором, если ее еще нет.
		НовыйИдентификаторЭДО = Лев(Запись.ИдентификаторЭДО, 3) + Сред(Запись.ИдентификаторЭДО, 5);
		
		НовыйНабор = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
		НовыйНабор.Отбор.ИдентификаторЭДО.Установить(НовыйИдентификаторЭДО);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НовыйНабор);
		
		НовыйНабор.Прочитать();
		Если Не ЗначениеЗаполнено(НовыйНабор) Тогда
			НоваяЗапись = НовыйНабор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НоваяЗапись.ИдентификаторЭДО = НовыйИдентификаторЭДО;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НовыйНабор);
		КонецЕсли;
		
		// Удаляем запись с некорректным идентификатором.
		Набор.Удалить(Запись);
		Записать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли