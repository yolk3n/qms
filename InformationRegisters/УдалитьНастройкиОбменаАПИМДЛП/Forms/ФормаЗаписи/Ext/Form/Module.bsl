
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Запись, ЭтотОбъект);
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияМДЛПКлиент.ПодключитьОбработчикВыполненияОбменаНаКлиентеПоРасписанию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить("api.stage.mdlp.crpt.ru", НСтр("ru = 'Тестовый стенд API'"));
	ДанныеВыбора.Добавить("api.sb.mdlp.crpt.ru",    НСтр("ru = 'Тестовая система МДЛП (""Песочница"")'"));
	ДанныеВыбора.Добавить("api.mdlp.crpt.ru",       НСтр("ru = 'Промышленная система'"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Запись.Порт = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияНеВыполнялась;
	
КонецПроцедуры

&НаКлиенте
Процедура ПортПриИзменении(Элемент)
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияНеВыполнялась;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутПриИзменении(Элемент)
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияНеВыполнялась;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗащищенноеСоединениеПриИзменении(Элемент)
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияНеВыполнялась;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменПоРасписаниюПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьРасписание" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОбмена", ЭтотОбъект);
		ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаПодключения

&НаКлиенте
Процедура ГруппаВыполняетсяПроверкаПодключенияНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНетСвязиНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПодключениеНастроеноКорректноНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаГруппаПроверкаПодключенияНеВыполняласьНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПереданНеверныйИдентификаторНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьДанныеОрганизации(Команда)
	
	ПараметрыПодключения = ПараметрыПодключения();
	ПараметрыПодключения.Вставить("ТипАутентификации", ПредопределенноеЗначение("Перечисление.ТипыАутентификацииМДЛП.ЭП"));
	
	Обработчик = Новый ОписаниеОповещения("ПолучитьДанныеОрганизации_Завершение", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.ПолучитьИнформациюОбУчастнике(ПараметрыПодключения, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеОрганизации_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеОрганизации(Результат.ДанныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОтключитьАвтоматическийОбмен(Команда)
	
	Если ДанныеАутентификации = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗапомнитьПароль", Истина);
		ПараметрыОткрытия.Вставить("ЗаголовокКнопкиВойти", НСтр("ru = 'Подключить'"));
		ПараметрыОткрытия.Вставить("ПодключениеАвтоматическогоОбмена", Истина);
		ПараметрыОткрытия.Вставить("ИдентификаторОрганизации", Запись.ИдентификаторОрганизации);
		ПараметрыОткрытия.Вставить("ПараметрыПодключения", ПараметрыПодключения());
		ПараметрыОткрытия.ПараметрыПодключения.Вставить("ТипАутентификации", ПредопределенноеЗначение("Перечисление.ТипыАутентификацииМДЛП.Пароль"));
		
		Обработчик = Новый ОписаниеОповещения("ПриПодключенииАвтоматическогоОбмена", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.УдалитьНастройкиОбменаАПИМДЛП.Форма.Авторизация", ПараметрыОткрытия, ЭтотОбъект,,,, Обработчик);
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОтветеНаВопросОбОтключенииАвтоматическогоОбмена", ЭтотОбъект),
			НСтр("ru = 'Логин и пароль для подключения к API будут удалены из программы.
				|Отключить автоматическую загрузку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Отключение автоматической загрузки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияНеВыполнялась;
	
	ПолучитьНастройкиРегламентногоЗадания();
	ОбновитьСостояниеПодключенияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПодключения()
	
	Если Не ЗначениеЗаполнено(Запись.ИдентификаторКлиента)
	 Или Не ЗначениеЗаполнено(Запись.СекретКлиента)
	 Или Не ЗначениеЗаполнено(Запись.Адрес)
	 Или Не ЗначениеЗаполнено(Запись.Таймаут) Тогда
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияНеВыполнялась;
		Возврат;
	КонецЕсли;
	
	ПодключениеНастроеноКорректно = Ложь;
	УказанПравильныйИдентификатор = Ложь;
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ВыполняетсяПроверкаПодключения;
	ПодключитьОбработчикОжидания("ПроверитьПодключение", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение()
	
	ПараметрыПодключения = ПараметрыПодключения();
	ПараметрыПодключения.Вставить("ТипАутентификации", ПредопределенноеЗначение("Перечисление.ТипыАутентификацииМДЛП.ЭП"));
	
	Результат = ТранспортМДЛПАПИВызовСервера.ПолучитьОграничениеРазмераНебольшихДокументов(ПараметрыПодключения);
	Если Результат.Статус = "Ошибка" Тогда
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.НетСвязи;
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключения", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.АвторизоватьсяНаСайте(ПараметрыПодключения, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПодключения()
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИдентификаторОрганизации");
	ПараметрыПодключения.Вставить("Адрес");
	ПараметрыПодключения.Вставить("Порт");
	ПараметрыПодключения.Вставить("Таймаут");
	ПараметрыПодключения.Вставить("ИдентификаторКлиента");
	ПараметрыПодключения.Вставить("СекретКлиента");
	ПараметрыПодключения.Вставить("ЗащищенноеСоединение");
	ПараметрыПодключения.Вставить("ПрефиксВерсии", "/api/v1/");
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Запись);
	Если ПараметрыПодключения.Порт = 0 Тогда
		ПараметрыПодключения.Порт = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиПодключения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПереданНеверныйИдентификатор;
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
	Иначе
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаПодключенияКорректно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Знач НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьПодключение" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыполнитьПроверкуПодключения();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Повторить" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыполнитьПроверкуПодключения();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОбмена(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОбмена = РасписаниеЗадания;
	ИзменитьРасписаниеОбменаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеОбменаНаСервере()
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОбменДаннымиМДЛП);
	ПараметрыЗадания = Новый Структура("Расписание", РасписаниеОбмена);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания()
	
	Константы.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП.Установить(ОбменПоРасписанию);
	ОбновитьПовторноИспользуемыеЗначения();
	ПолучитьНастройкиРегламентногоЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиРегламентногоЗадания()
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОбменДаннымиМДЛП);
	ОбменПоРасписанию = РегламентноеЗадание.Использование;
	РасписаниеОбмена  = РегламентноеЗадание.Расписание;
	ПредставлениеРасписания = ПредставлениеНастройкиОбмена(ОбменПоРасписанию, РасписаниеОбмена);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНастройкиОбмена(ОбменПоРасписанию, РасписаниеОбмена)
	
	Представление = "";
	Если ОбменПоРасписанию Тогда
		Если РасписаниеОбмена = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru = '<расписание не задано>'");
		Иначе
			ПредставлениеРасписания = Строка(РасписаниеОбмена);
		КонецЕсли;
		Представление = Новый ФорматированнаяСтрока(ПредставлениеРасписания,,,, "НастроитьРасписание");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросОбОтключенииАвтоматическогоОбмена(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ОтключитьАвтоматическийОбмен(Запись.ИдентификаторОрганизации);
		ДанныеАутентификации = Неопределено;
		ОтобразитьСостояниеПодключения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииАвтоматическогоОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьСостояниеПодключенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьАвтоматическийОбмен(Знач ИдентификаторОрганизации)
	
	УстановитьПривилегированныйРежим(Истина);
	ИнтеграцияМДЛП.СохранитьДанныеАутентификацииПользователяАПИ(ИдентификаторОрганизации, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеПодключенияНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтеграцияМДЛП.ДанныеАутентификацииПользователяАПИ(Запись.ИдентификаторОрганизации);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтобразитьСостояниеПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеПодключения(Форма)
	
	Элементы = Форма.Элементы;
	Если Форма.ДанныеАутентификации = Неопределено Тогда
		Элементы.ДекорацияЛогин.Заголовок = НСтр("ru = 'Подключение автоматической загрузки не выполнено.'");
		Элементы.ПодключитьОтключитьАвтоматическийОбмен.Заголовок = НСтр("ru = 'Подключить'");
		Элементы.ГруппаПодключитьОтключитьАвтоматическийОбмен.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Подключена для пользователя %1'");
		Элементы.ДекорацияЛогин.Заголовок =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовка,
			Форма.ДанныеАутентификации.Логин);
		Элементы.ПодключитьОтключитьАвтоматическийОбмен.Заголовок = НСтр("ru = 'Отключить'");
		Элементы.ГруппаПодключитьОтключитьАвтоматическийОбмен.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеОрганизации(Знач ДанныеОрганизации)
	
	Запись.ИдентификаторОрганизации = ДанныеОрганизации.РегистрационныйНомерУчастника;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Организации.Ссылка  КАК Ссылка,
	|	Организации.РегистрационныйНомерУчастника КАК РегистрационныйНомерУчастника,
	|	Организации.ОГРН  КАК ОГРН,
	|	Организации.ИНН   КАК ИНН,
	|	Организации.КПП   КАК КПП,
	|	Организации.Наименование  КАК Наименование,
	|	Организации.СобственнаяОрганизация  КАК СобственнаяОрганизация
	|ИЗ
	|	Справочник.ОрганизацииМДЛП КАК Организации
	|ГДЕ
	|	Организации.РегистрационныйНомерУчастника = &РегистрационныйНомерУчастника
	|	И НЕ Организации.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаДеятельности.Ссылка  КАК Ссылка,
	|	МестаДеятельности.Организация КАК Организация,
	|	МестаДеятельности.Идентификатор  КАК Идентификатор,
	|	МестаДеятельности.Адрес  КАК Адрес,
	|	МестаДеятельности.ТипМестаДеятельности  КАК ТипМестаДеятельности
	|ИЗ
	|	Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|ГДЕ
	|	МестаДеятельности.Идентификатор В (&Идентификаторы)
	|	И НЕ МестаДеятельности.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("РегистрационныйНомерУчастника", ДанныеОрганизации.РегистрационныйНомерУчастника);
	Идентификаторы = Новый Массив;
	Для Каждого МестоДеятельности Из ДанныеОрганизации.МестаДеятельности Цикл
		Идентификаторы.Добавить(МестоДеятельности.Идентификатор);
	КонецЦикла;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОрганизацияСсылка = Неопределено;
	
	ОрганизацииРезультат = РезультатЗапроса[0];
	Если ОрганизацииРезультат.Пустой() Тогда
		ОрганизацияОбъект = Справочники.ОрганизацииМДЛП.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации);
		ОрганизацияОбъект.Записать();
		ОрганизацияСсылка = ОрганизацияОбъект.Ссылка;
	Иначе
		ОрганизацииВыборка = ОрганизацииРезультат.Выбрать();
		ОрганизацииВыборка.Следующий();
		ЕстьИзменения = Ложь;
		Для Каждого КлючЗначение Из ДанныеОрганизации Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОрганизацииВыборка, КлючЗначение.Ключ)
			   И ОрганизацииВыборка[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			ОрганизацияОбъект = ОрганизацииВыборка.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации);
			ОрганизацияОбъект.Записать();
		КонецЕсли;
		ОрганизацияСсылка = ОрганизацииВыборка.Ссылка;
	КонецЕсли;
	
	МестаДеятельностиРезультат = РезультатЗапроса[1].Выгрузить();
	Для Каждого МестоДеятельности Из ДанныеОрганизации.МестаДеятельности Цикл
		
		МестоДеятельностиОбъект = Неопределено;
		МестоДеятельностиВБазе = МестаДеятельностиРезультат.Найти(МестоДеятельности.Идентификатор, "Идентификатор");
		Если МестоДеятельностиВБазе = Неопределено Тогда
			МестоДеятельностиОбъект = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
		Иначе
			
			Для Каждого КлючЗначение Из МестоДеятельности Цикл
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(МестоДеятельностиВБазе, КлючЗначение.Ключ)
				   И МестоДеятельностиВБазе[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
					ЕстьИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЕстьИзменения = ЕстьИзменения Или МестоДеятельностиВБазе.Организация <> ОрганизацияСсылка;
			Если ЕстьИзменения Тогда
				МестоДеятельностиОбъект = МестоДеятельностиВБазе.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
		КонецЕсли;
		
		Если МестоДеятельностиОбъект <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(МестоДеятельностиОбъект, МестоДеятельности);
			МестоДеятельностиОбъект.Организация = ОрганизацияСсылка;
			ИнтеграцияМДЛП.ЗаполнитьЗначенияПолейКИПоПредставлению(МестоДеятельностиОбъект, МестоДеятельностиОбъект.Адрес, "Адрес");
			МестоДеятельностиОбъект.Наименование = МестоДеятельностиОбъект.Идентификатор;
			МестоДеятельностиОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
