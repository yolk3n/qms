#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция возвращает соответствие с данными штрихкодов
//
// Параметры
//  Штрихкоды    - Массив штрихкодов
//
// Возвращаемое значение
//  Соответствие с данными штрихкодов
//
Функция ПолучитьДанныеПоШтрихкодам(Штрихкоды) Экспорт
	
	ДанныеПоШтрихкодам = Новый Соответствие;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод           КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ШтрихкодыНоменклатуры.Партия             КАК Партия,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения   КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&МассивШтрихкодов)
	|");
	
	МассивШтрихкодов = Новый Массив;
	
	Для Каждого ТекущийШтрихкод Из Штрихкоды Цикл
		МассивШтрихкодов.Добавить(ТекущийШтрихкод);
		ДанныеПоШтрихкодам.Вставить(ТекущийШтрихкод, ОбработкаТабличнойЧастиКлиентСервер.СтруктураКэшируемойИнформацииПоШтрихкоду(ТекущийШтрихкод));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИнформацияПоШтрихкоду = ДанныеПоШтрихкодам[Выборка.Штрихкод];
		ИнформацияПоШтрихкоду.Номенклатура      = Выборка.Номенклатура;
		ИнформацияПоШтрихкоду.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		ИнформацияПоШтрихкоду.Партия            = Выборка.Партия;
		ИнформацияПоШтрихкоду.ЕдиницаИзмерения  = Выборка.ЕдиницаИзмерения;
		
		ИнформацияПоШтрихкоду.НеизвестныйШтрихкод = Ложь;
	КонецЦикла;
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

Функция ШтрихкодыНоменклатуры(Номенклатура, СерияНоменклатуры, Партия, ЕдиницаИзмерения) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = &СерияНоменклатуры
	|	И ШтрихкодыНоменклатуры.Партия = &Партия
	|	И ШтрихкодыНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = &СерияНоменклатуры
	|	И ШтрихкодыНоменклатуры.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	И ШтрихкодыНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Приоритет,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ШтрихкодыНоменклатуры.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	И ШтрихкодыНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ
	|			МИНИМУМ(Приоритет) КАК Приоритет
	|		ИЗ
	|			ШтрихкодыНоменклатуры
	|		) КАК НужныйПриоритет
	|	ПО
	|		НужныйПриоритет.Приоритет = ШтрихкодыНоменклатуры.Приоритет
	|		
	|");
	
	Запрос.УстановитьПараметр("Номенклатура"     , Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("Партия"           , Партия);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения" , ЕдиницаИзмерения);
	
	Штрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	Возврат Штрихкоды;
	 
КонецФункции

Процедура ЗарегистрироватьШтрихкоды(ДанныеШтрихкодов, Перезаписывать = Ложь) Экспорт
	
	Для Каждого КлючИЗначение Из ДанныеШтрихкодов Цикл
		
		ДанныеШтрихкода = КлючИЗначение.Значение;
		
		НовыйШтрихкод = СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Штрихкод = КлючИЗначение.Ключ;
		
		Перезаписать = Перезаписывать;
		Если Не Перезаписать Тогда
			НовыйШтрихкод.Прочитать();
			Перезаписать = Не НовыйШтрихкод.Выбран();
		КонецЕсли;
		
		Если Перезаписать Тогда
			ЗаполнитьЗначенияСвойств(НовыйШтрихкод, ДанныеШтрихкода);
			НовыйШтрихкод.Штрихкод = КлючИЗначение.Ключ;
			Если Не ЗначениеЗаполнено(НовыйШтрихкод.ЕдиницаИзмерения) Тогда
				НовыйШтрихкод.ЕдиницаИзмерения = НоменклатураСервер.ОсновнаяЕдиницаИзмерения(НовыйШтрихкод.Номенклатура, НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
			КонецЕсли;
			НовыйШтрихкод.Записать();
			ДанныеШтрихкода.Вставить("Статус", "Зарегистрирован");
		Иначе
			ДанныеШтрихкода.Вставить("Статус", "Существует");
			ДанныеШтрихкода.Вставить("СуществующиеДанные", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НовыйШтрихкод, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ГЕНЕРАЦИЯ ШТРИХКОДОВ

// Функция возвращает максимальное значение штрихкода числом.
//
// Параметры
//  ПрефиксШтучногоТовара       - Строка
//  ПрефиксВнутреннегоШтрихкода - Строка
//
// Возвращаемое значение
//  Число
//
Функция ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом(ПрефиксШтучногоТовара = "0", ПрефиксВнутреннегоШтрихкода = "00") Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + "_________""
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеКодаЧислом = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.Код);
	
	Возврат ЗначениеКодаЧислом;
	
КонецФункции

// Функция возвращает штрихкод, создаваемый из кода с префиксами и контрольным символом.
//
// Параметры
//  Код                         - Число
//  ПрефиксШтучногоТовара       - Строка
//  ПрефиксВнутреннегоШтрихкода - Строка
//
// Возвращаемое значение
//  Строка
//
Функция ПолучитьШтрихкодПоКоду(Код, ПрефиксШтучногоТовара = "0", ПрефиксВнутреннегоШтрихкода = "00") Экспорт
	
	Штрихкод = "2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + Формат(Код, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + ШтрихкодированиеКлиентСервер.КонтрольныйСимволEAN(ШтрихКод, 13);
	
	Возврат Штрихкод;
	
КонецФункции

// Функция осуществляет формирование нового внутреннего штрихкода для
// штучного товара.
//
// Параметры
//  Код  - <Число> 
//       - Измерение "Код" регистра сведений Штрихкоды
//
// Возвращаемое значение:
//  <Строка>
//       - сформированный штрихкод
//
Функция СформироватьШтрихкодEAN13(ПрефиксШтучногоТовара = "0", ПрефиксВнутреннегоШтрихкода = "00") Экспорт
	
	Код = Мин(ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом(ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода) + 1, 99999999);
	Возврат ПолучитьШтрихкодПоКоду(Код, ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ ИСТИНА
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Номенклатура)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли