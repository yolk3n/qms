#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Метод возвращает значение константы "Номер задания",
// считанной при разделяемой блокировке
//
Функция ТекущийНомерЗадания() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	НомерЗадания = Константы.НомерЗаданияКРасчетуСебестоимости.Получить();
	
	ЗафиксироватьТранзакцию();
	
	Возврат НомерЗадания;
	
КонецФункции

// Метод возвращает текущее значение константы "Номер задания",
// и увеличивает значение константы. Операции выполняются
// при установленной исключительной блокировке
//
Функция УстановитьСледующийНомерЗадания() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НомерЗадания = Константы.НомерЗаданияКРасчетуСебестоимости.Получить();
	Константы.НомерЗаданияКРасчетуСебестоимости.Установить(НомерЗадания + 1);
	
	ЗафиксироватьТранзакцию();
	
	Возврат НомерЗадания;
	
КонецФункции

// Метод создает запись регистра с заданными параметрами
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - организация, для которого необходимо выполнить перерасчет себестоимости
//  ПериодЗадания   - Дата - Начало периода, для которого необходимо выполнить перерасчет себестоимости
//  ДокументЗадания - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//
Процедура СоздатьЗаданиеКРасчетуСебестоимости(Организация, ПериодЗадания, ДокументЗадания = Неопределено, НомерЗадания = Неопределено) Экспорт
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда // В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если НомерЗадания = Неопределено Тогда
		НомерЗадания = ТекущийНомерЗадания();
	КонецЕсли;
	
	Запись = РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.СоздатьМенеджерЗаписи();
	Запись.Организация  = Организация;
	Запись.Документ     = ДокументЗадания;
	Запись.Месяц        = ПериодЗадания;
	Запись.НомерЗадания = НомерЗадания;
	Запись.Записать();
	
КонецПроцедуры

// Запись новых границ расчета себестоимости при завершении расчета за период
//
Процедура УстановитьНовыеГраницыРасчетаСебестоимости(НачалоПериода, ОкончаниеПериода, СписокОрганизаций, РассчитанныйНомерЗадания) Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Границы.Месяц,
	|	Границы.Организация
	|ИЗ
	|	РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
	|ГДЕ
	|	Границы.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Границы.НомерЗадания <= &НомерЗадания
	|	И Границы.Организация В (&СписокОрганизаций)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Границы.Месяц,
	|	Границы.НомерЗадания,
	|	Границы.Организация,
	|	Границы.Документ
	|ИЗ
	|	РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
	|ГДЕ
	|	Границы.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Границы.НомерЗадания > &НомерЗадания
	|	И Границы.Организация В (&СписокОрганизаций)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ), СЕКУНДА, 1) КАК Месяц,
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода"    , НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода" , ОкончаниеПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания"     , РассчитанныйНомерЗадания);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Записать(Истина);
	КонецЦикла;
	
	Если Не Результаты[1].Пустой() Тогда
		Набор = РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.СоздатьНаборЗаписей();
		Набор.Загрузить(Результаты[1].Выгрузить());
		Набор.Записать(Ложь);
	КонецЕсли;
	
	Выборка = Результаты[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьЗаданиеКРасчетуСебестоимости(Выборка.Организация, Выборка.Месяц, Неопределено, РассчитанныйНомерЗадания);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#КонецЕсли