
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции'");
	КонецЕсли;
	
	МассивКонтрагентов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "МассивКонтрагентов");
	Если Не ЗначениеЗаполнено(МассивКонтрагентов) Тогда
		ВызватьИсключение НСтр("ru = 'Не указаны параметры открытия формы'");
	КонецЕсли;
	
	Параметры.Свойство("ЗапрещеноСоздаватьНастройкиЭДО", ЗапрещеноСоздаватьНастройкиЭДО);
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьКонтрагентов(МассивКонтрагентов);
	
	Если Не ЗначениеЗаполнено(Организация)
		И Не ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций() Тогда
		Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
		ПриИзмененииОрганизации();
	КонецЕсли;
	
	Элементы.EmailОрганизации.Видимость = ТребуетсяЗаполнитьEmailОрганизации();
	
	ДлительнаяОперация = СинхронизироватьДанныеСервисаНастроек();
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьФормуПослеСинхронизацииДанныхСервисаНастроек(ДлительнаяОперация.АдресРезультата);
	
	ДлительнаяОперация = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ДлительнаяОперация = Неопределено Тогда
		ПоказатьГруппуПредупреждения();
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("СинхронизироватьДанныеСервисаНастроекЗавершение", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	НастроитьСтраницуОжидания(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда
		ПриОбновленииСпискаУчетныхЗаписей();
	ИначеЕсли Приглашения.Количество()
	И ОбщегоНазначенияБЭДКлиент.ЭтоСобытиеИзменениеОбъекта(Приглашения[0].Контрагент, ИмяСобытия)
		И ЗначениеЗаполнено(Источник) Тогда
		ОбновитьДанныеПриглашенияПоКонтрагенту(Источник);
	ИначеЕсли ИмяСобытия = "ОткрытиеПисьмаОВыбореОператора" Тогда
		ОткрылиПисьмоОВыбореОператора = Истина;
	ИначеЕсли ИмяСобытия = "ПрикрепленоПисьмоОВыбореОператора" Тогда
		ОбновитьИмяФайлаСоглашенияНаРоуминг(Параметр);
	ИначеЕсли ИмяСобытия = "ОткрепленоПисьмоОВыбореОператора" Тогда
		ОбновитьИмяФайлаСоглашенияНаРоуминг();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Отбор = Новый Структура("Выбран", Истина);
	НайденныеСтроки = Приглашения.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.Адрес) И ПустаяСтрока(СтрокаТаблицы.Предупреждение) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 не выбрана ни учетная запись, ни адрес электронной почты.'"), Приглашения.Индекс(СтрокаТаблицы) + 1);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, ,
				"Приглашения["+Приглашения.Индекс(СтрокаТаблицы)+"].Адрес",, Отказ);
		ИначеЕсли СтрокаТаблицы.Отбор = Отбор_ТребуютсяДействия()
			И ЗначениеЗаполнено(СтрокаТаблицы.Предупреждение) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрокаТаблицы.Предупреждение, ,
				"Приглашения["+Приглашения.Индекс(СтрокаТаблицы)+"].Адрес",, Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.ИдентификаторОрганизации) Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'В строке %1 не выбрана учетная запись организации'"), Приглашения.Индекс(СтрокаТаблицы) + 1);
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, ,
				"Приглашения["+Приглашения.Индекс(СтрокаТаблицы)+"].УчетнаяЗаписьОрганизации",, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не выбрана организация'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "Организация",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не выбрана учетная запись организации'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, , "УчетнаяЗаписьОрганизации",, Отказ);
	КонецЕсли;
	
	Если ТребуетсяЗаполнитьEmailОрганизации() Тогда
		Если Не ЗначениеЗаполнено(EmailОрганизации) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Значение поля ""E-mail организации"" не заполнено'"),,
				"EmailОрганизации",, Отказ);
		ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(EmailОрганизации) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Почтовый адрес заполнен неверно'"),,
				"EmailОрганизации",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПервыйЭтапПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПервыйЭтапОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации)
		Или ИдентификаторОрганизации = Идентификатор_ВыбиратьАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗапись(ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПервыйЭтапОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Идентификатор_Создать() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИдентификаторПослеСозданияУчетнойЗаписи", ЭтотОбъект);
	
	ПараметрыСоздания = УчетныеЗаписиЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ПараметрыСоздания.ОповещениеОЗавершении = Оповещение;
	ПараметрыСоздания.Организация = Организация;
	ПараметрыСоздания.КнопкаНазадДоступна = Истина;
	ПараметрыСоздания.РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	УчетныеЗаписиЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииВторойЭтапПриИзменении(Элемент)
	
	Если ИдентификаторОрганизации = Идентификатор_УказыватьВТаблице() Тогда
		Элементы.ПриглашенияИдентификаторОрганизацииПредставление.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.ПриглашенияИдентификаторОрганизацииПредставление.Видимость = Ложь;
	
	ПриИзмененииИдентификатораОрганизацииВторойЭтап();
	
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВыполненоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "ОткрытьТекущиеДелаЭДО" Тогда
		ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНадписьПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупреждения;
	КонтекстДиагностики.ОшибкиОбработаны = Ложь;
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриглашения

&НаКлиенте
Процедура ПриглашенияПриИзменении(Элемент)
	
	Элементы.EmailОрганизации.Видимость = ТребуетсяЗаполнитьEmailОрганизации();

	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПриглашенияПредупреждение 
		И ЗначениеЗаполнено(ТекущиеДанные.Предупреждение) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьПомощникОтправкиПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияПередНачаломИзменения(Элемент, Отказ)
	
	СписокВыбора = Элементы.ПриглашенияАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из Элемент.ТекущиеДанные.СписокВыбора Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияАдресПриИзменении(Элемент)
	
	ОбновитьДанныеПриглашения(Элементы.Приглашения.ТекущаяСтрока);
	
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПомощникОтправкиПриглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	ТекущиеДанные.Адрес = ВыбранноеЗначение;
	
	ОбновитьДанныеПриглашения(Элементы.Приглашения.ТекущаяСтрока);
	
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашенияИдентификаторОрганизацииПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	ТекущиеДанные.ИдентификаторОрганизации = ВыбранноеЗначение;
	
	СписокВыбора = Элементы.ПриглашенияИдентификаторОрганизацииПредставление.СписокВыбора;
	ТекущиеДанные.ИдентификаторОрганизацииПредставление = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	
	ОбновитьДанныеПриглашения(Элементы.Приглашения.ТекущаяСтрока, Истина);
	
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверкаНеТребуется(Команда)
	Элементы.ПроверкаНеТребуется.Пометка = Не Элементы.ПроверкаНеТребуется.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура РекомендуетсяПроверить(Команда)
	Элементы.РекомендуетсяПроверить.Пометка = Не Элементы.РекомендуетсяПроверить.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СвязьУжеНастроена(Команда)
	Элементы.СвязьУжеНастроена.Пометка = Не Элементы.СвязьУжеНастроена.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ТребуютсяДействия(Команда)
	Элементы.ТребуютсяДействия.Пометка = Не Элементы.ТребуютсяДействия.Пометка;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Значение поля ""Организация"" не заполнено.'"),,
			"Организация",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Значение поля ""Учетная запись"" не заполнено.'"),,
			"УчетнаяЗаписьОрганизации",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОбОрганизацииЗаполнена = Истина;
	
	СинхронизоватьАбонентовИПодготовитьСтраницуВторогоЭтапа();
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодготовитьСтраницуВторогоЭтапаПослеСинхронизацииАбонентов", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
	НастроитьСтраницуОжиданияЗаполненияПриглашений();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ИнформацияОбОрганизацииЗаполнена = Ложь;
	НастроитьОсновнуюСтраницуФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОСоглашенииНаРоуминг", ЭтотОбъект);
	Если ТребуетсяПредупредитьОПрикрепленииПисьмаНаРоуминг() Тогда
		ПриглашенияЭДОСлужебныйКлиент.ПоказатьВопросОПрикрепленииСоглашенияНаРоуминг(Оповещение);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьАвтоматически(Команда)
	
	ПерезаполнитьАвтоматическиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	СнятьУстановитьЗначениеВыбран(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	СнятьУстановитьЗначениеВыбран(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приглашения.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	Список = Новый СписокЗначений;
	Список.Добавить(Отбор_ТребуютсяДействия());
	Список.Добавить(Отбор_СвязьУжеНастроена());
	
	ОтборЭлемента.ПравоеЗначение = Список;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПриглашенияВыбран");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отсутствуют>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияПредупреждение.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияПредупреждение.Имя);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияПредупреждение.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияПредупреждение.Имя);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияПредставление.ПутьКДанным));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияПредставление.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПриглашенияАдрес.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентов(МассивКонтрагентов)
	
	Для Каждого Контрагент Из МассивКонтрагентов Цикл
		Приглашения.Добавить().Контрагент = Контрагент;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьДанныеСервисаНастроек()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление данных из сервиса настроек 1С:ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне  = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"СинхронизацияЭДО.ОбновитьКешиОператоровЭДОИФорматов", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
КонецФункции

&НаКлиенте
Процедура СинхронизироватьДанныеСервисаНастроекЗавершение(Результат, Контекст) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось загрузить данные из сервиса настроек.'");
		НастроитьСтраницуОшибки(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПодготовитьФормуПослеСинхронизацииДанныхСервисаНастроек(Результат.АдресРезультата);
	
	ПоказатьГруппуПредупреждения();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуПослеСинхронизацииДанныхСервисаНастроек(АдресРезультата)
	
	РезультатПроцедуры = ПолучитьИзВременногоХранилища(АдресРезультата);
	КонтекстДиагностики = РезультатПроцедуры.КонтекстДиагностики;
	
	ЗаполнитьИдентификаторыОрганизации();
	
	НастроитьОсновнуюСтраницуФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИдентификаторыОрганизации()
	
	Если СписокИдентификаторовОрганизации.Количество() Тогда
		СписокИдентификаторовОрганизации.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьСписокВыбораИдентификатораОрганизации();
		Возврат;
	КонецЕсли;
	СписокИдентификаторов = УчетныеЗаписиЭДО.СписокИдентификаторовУчетныхЗаписейОрганизацииСервисаЭДО(Организация);
	
	Для Каждого ЭлементСписка Из СписокИдентификаторов Цикл
		ЗаполнитьЗначенияСвойств(СписокИдентификаторовОрганизации.Добавить(), ЭлементСписка);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
	ИначеЕсли СписокИдентификаторовОрганизации.Количество() = 1 Тогда
		ИдентификаторОрганизации = СписокИдентификаторовОрганизации[0].Значение;
	ИначеЕсли СписокИдентификаторовОрганизации.Количество() > 1 Тогда
		ИдентификаторОрганизации = Идентификатор_ВыбиратьАвтоматически();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораИдентификатораОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораИдентификатораОрганизации()
	
	СписокВыбораПервыйЭтап = Элементы.ИдентификаторОрганизацииПервыйЭтап.СписокВыбора;
	СписокВыбораВторойЭтап = Элементы.ИдентификаторОрганизацииВторойЭтап.СписокВыбора;
	СписокВыбораПриглашения = Элементы.ПриглашенияИдентификаторОрганизацииПредставление.СписокВыбора;
	
	СписокВыбораПервыйЭтап.Очистить();
	СписокВыбораВторойЭтап.Очистить();
	СписокВыбораПриглашения.Очистить();
	
	Если СписокИдентификаторовОрганизации.Количество() > 1 Тогда
		ПредставлениеВыбиратьАвтоматически = НСтр("ru = 'Выбирается автоматически'");
		СписокВыбораПервыйЭтап.Добавить(Идентификатор_ВыбиратьАвтоматически(), ПредставлениеВыбиратьАвтоматически);
		СписокВыбораВторойЭтап.Добавить(Идентификатор_ВыбиратьАвтоматически(), ПредставлениеВыбиратьАвтоматически);
	КонецЕсли;
	
	Для Каждого УчетнаяЗапись Из СписокИдентификаторовОрганизации Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбораПервыйЭтап.Добавить(), УчетнаяЗапись);
		ЗаполнитьЗначенияСвойств(СписокВыбораВторойЭтап.Добавить(), УчетнаяЗапись);
		ЗаполнитьЗначенияСвойств(СписокВыбораПриглашения.Добавить(), УчетнаяЗапись);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокВыбораПервыйЭтап.Добавить(Идентификатор_Создать(), НСтр("ru = 'Создать новую учетную запись'"),,
			БиблиотекаКартинок.СоздатьЭлементСписка);
	КонецЕсли;
	
	Если СписокИдентификаторовОрганизации.Количество() > 1 Тогда
		СписокВыбораВторойЭтап.Добавить(Идентификатор_УказыватьВТаблице(), НСтр("ru = 'Указывается в таблице'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОсновнуюСтраницуФормы(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	
	Если Не Форма.ИнформацияОбОрганизацииЗаполнена Тогда
		Элементы.ПанельЭтапов.ТекущаяСтраница = Элементы.СтраницаПервыйЭтап;
		
		Элементы.КнопкаДалее.Видимость = Истина;
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
		Элементы.КнопкаНазад.Видимость = Ложь;
		Элементы.КнопкаОтправить.Видимость = Ложь;
	Иначе
		Элементы.ПанельЭтапов.ТекущаяСтраница = Элементы.СтраницаВторойЭтап;
		
		Элементы.ИдентификаторОрганизацииВторойЭтап.Доступность = Истина;
		Элементы.ПанельПриглашений.ТекущаяСтраница = Элементы.СтраницаПриглашенияОсновная;
		
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаОтправить.Видимость = Истина;
		Элементы.КнопкаОтправить.КнопкаПоУмолчанию = Истина;
		Элементы.ПриглашенияИдентификаторОрганизацииПредставление.Видимость = 
			Форма.ИдентификаторОрганизации = Идентификатор_УказыватьВТаблице();
		
		Форма.ТекущийЭлемент = Элементы.Приглашения;
	КонецЕсли;
	
	Элементы.EmailОрганизации.Подсказка =
		ПриглашенияЭДОСлужебныйКлиентСервер.ПодсказкаЭлектроннаяПочтаДляУведомленияОСтатусеЗаявкиНаРоуминг();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуОжидания(РежимЗагрузкиНастроек = Ложь)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	
	Элементы.НадписьОжиданиеЗагрузкаНастроек.Видимость = РежимЗагрузкиНастроек;
	Элементы.НадписьОжиданиеОтправкаПриглашения.Видимость = Не РежимЗагрузкиНастроек;
	
	Элементы.КнопкаНазад.Видимость = Ложь;
	Элементы.КнопкаОтправить.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуОшибки(ОписаниеОшибки = Неопределено)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОшибка;
	
	Элементы.КнопкаОтправить.Видимость = Ложь;
	
	Если ОписаниеОшибки = Неопределено Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
	Иначе
		Элементы.НадписьОшибка.Заголовок = ОписаниеОшибки;
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
		Элементы.КнопкаОтмена.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуВыполнено()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнено;
	Элементы.КнопкаНазад.Видимость = Ложь;
	Элементы.КнопкаОтмена.Заголовок = НСтр("ru = 'Закрыть'");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуОжиданияЗаполненияПриглашений()
	
	Элементы.ПанельЭтапов.ТекущаяСтраница = Элементы.СтраницаВторойЭтап;
	Элементы.ПанельПриглашений.ТекущаяСтраница = Элементы.СтраницаПриглашенияОжидание;
	
	Элементы.ИдентификаторОрганизацииВторойЭтап.Доступность = Ложь;
	Элементы.КнопкаДалее.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	ИдентификаторОрганизации = "";
	
	ЗаполнитьИдентификаторыОрганизации();
	ЗаполнитьEmailОрганизации();
	
	НастроитьОсновнуюСтраницуФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСпискаУчетныхЗаписей()
	
	ЗаполнитьИдентификаторыОрганизации();
	
	КоличествоИдентификаторовОрганизации = СписокИдентификаторовОрганизации.Количество();
	
	Если КоличествоИдентификаторовОрганизации > 0
		И (ИдентификаторОрганизации = Идентификатор_ВыбиратьАвтоматически()
		ИЛИ ИдентификаторОрганизации = Идентификатор_УказыватьВТаблице()) Тогда
		
		Если КоличествоИдентификаторовОрганизации = 1 Тогда
			ИдентификаторОрганизации = СписокИдентификаторовОрганизации[0].Значение;
			Элементы.ПриглашенияИдентификаторОрганизацииПредставление.Видимость = Ложь;
		КонецЕсли;
		
		Если ИнформацияОбОрганизацииЗаполнена Тогда
			ПриИзмененииИдентификатораОрганизацииВторойЭтап();
		КонецЕсли;
		
	ИначеЕсли КоличествоИдентификаторовОрганизации = 0
		ИЛИ СписокИдентификаторовОрганизации.НайтиПоЗначению(ИдентификаторОрганизации) = Неопределено Тогда
		
		ИдентификаторОрганизации = "";
		ИнформацияОбОрганизацииЗаполнена = Ложь;
		НастроитьОсновнуюСтраницуФормы(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИдентификаторПослеСозданияУчетнойЗаписи(Идентификатор, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОрганизации = Идентификатор;
	
	НастроитьОсновнуюСтраницуФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизоватьАбонентовИПодготовитьСтраницуВторогоЭтапа()
	
	ДлительнаяОперация = ЗаполнитьПараметрыСвязиИдентификаторовЭДОПослеСинхронизацииАбонентов();
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтраницуВторогоЭтапа(ДлительнаяОперация.АдресРезультата);
	
	ДлительнаяОперация = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыСвязиИдентификаторовЭДОПослеСинхронизацииАбонентов()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных по контрагентам из сервиса настроек'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Контрагенты = ОбщегоНазначения.ВыгрузитьКолонку(Приглашения, "Контрагент");
	
	Если ИдентификаторОрганизации = Идентификатор_ВыбиратьАвтоматически()
		Или ИдентификаторОрганизации = Идентификатор_УказыватьВТаблице() Тогда
		МассивИдентификаторовОрганизации = СписокИдентификаторовОрганизации.ВыгрузитьЗначения();
	Иначе
		МассивИдентификаторовОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОрганизации);
	КонецЕсли;
	
	ПараметрыПолученияСвязи = РаботаСАбонентамиЭДО.НовыеПараметрыПолученияСвязиИдентификаторов();
	ПараметрыПолученияСвязи.Контрагент = Контрагенты;
	ПараметрыПолученияСвязи.ИдентификаторыОрганизации = МассивИдентификаторовОрганизации;
	ПараметрыПолученияСвязи.ПолучатьПочтовыеАдреса = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"РаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов", ПараметрыПолученияСвязи,, Истина);
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьСтраницуВторогоЭтапаПослеСинхронизацииАбонентов(Результат, Контекст) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось загрузить идентификаторы контрагентов из сервиса настроек.'");
		НастроитьСтраницуОшибки(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтраницуВторогоЭтапа(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтраницуВторогоЭтапа(Знач АдресРезультата)
	
	ПараметрыСвязиИдентификаторов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ЗаполнитьТаблицуПриглашений(ПараметрыСвязиИдентификаторов);
	
	ПосчитатьКоличествоСтрокОтборов(Приглашения);
	
	УстановитьОтбор();
	
	НастроитьОсновнуюСтраницуФормы(ЭтотОбъект);
	
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриглашений(ПараметрыСвязиИдентификаторов)
	
	Приглашения.Очистить();
	
	Для Каждого СтрокаПараметровСвязи Из ПараметрыСвязиИдентификаторов Цикл
		НоваяСтрока = Приглашения.Добавить();
		ЗаполнитьРеквизитыПриглашения(НоваяСтрока, СтрокаПараметровСвязи);
		ЗаполнитьПредупреждениеПриглашения(НоваяСтрока, Истина);
		ЗаполнитьОтметкуВыбора(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПриглашения(ТекущиеДанные, ПараметрыСвязи)
	
	ТекущиеДанные.Абоненты = ПараметрыСвязи.Абоненты;
	
	ТекущиеДанные.Контрагент = ПараметрыСвязи.Контрагент;
	ТекущиеДанные.ИНН = ПараметрыСвязи.КонтрагентИНН;
	ТекущиеДанные.КПП = ПараметрыСвязи.КонтрагентКПП;
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязи.ИдентификаторКонтрагента) Тогда
		ТекущиеДанные.ТипАдреса = ТипАдреса_ЭлектроннаяПочта();
		ТекущиеДанные.Адрес = ПараметрыСвязи.ЭлектроннаяПочта;
		ТекущиеДанные.Представление = ПараметрыСвязи.ЭлектроннаяПочта;
	Иначе
		ТекущиеДанные.ТипАдреса = ТипАдреса_ИдентификаторЭДО();
		ТекущиеДанные.Адрес = ПараметрыСвязи.ИдентификаторКонтрагента;
		ТекущиеДанные.Представление = ПараметрыСвязи.ИдентификаторКонтрагентаПредставление;
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторОрганизации = ПараметрыСвязи.ИдентификаторОрганизации;
	ТекущиеДанные.ИдентификаторОрганизацииПредставление = ПараметрыСвязи.ИдентификаторОрганизацииПредставление;
	ТекущиеДанные.СписокВыбора = ПараметрыСвязи.СписокВыбора;
	ТекущиеДанные.ТребуетсяСоглашение = ПараметрыСвязи.ТребуетсяСоглашение;
	ТекущиеДанные.ОтправкаНаИдентификатор = ПараметрыСвязи.ОператорыСовпадают ИЛИ ПараметрыСвязи.СвязьДоступна = 1;
	ТекущиеДанные.АбонентВХабе1С = ПараметрыСвязи.АбонентВХабе1С;
	ТекущиеДанные.ТребуетсяНовоеСоглашение = ПараметрыСвязи.ТребуетсяНовоеСоглашение;
	ТекущиеДанные.ОбязательнаяОтправкаЗаявкиНаРоуминг = ПараметрыСвязи.ОбязательнаяОтправкаЗаявкиНаРоуминг;
	ТекущиеДанные.ТребуетсяСоглашениеПриПервомПодключении = ПараметрыСвязи.ТребуетсяСоглашениеПриПервомПодключении;
	ТекущиеДанные.ЗаявкаНаРоумингПринята = ПараметрыСвязи.ЗаявкаНаРоумингПринята;
	ТекущиеДанные.СтатусПодключения = ПараметрыСвязи.СтатусПодключения;
	ТекущиеДанные.АбонентАктивен = ПараметрыСвязи.АбонентАктивен;
	ТекущиеДанные.СертификатДействителен = ПараметрыСвязи.СертификатДействителен;
	ТекущиеДанные.ИдентификаторКонтрагента = ПараметрыСвязи.ИдентификаторКонтрагента;
	ТекущиеДанные.ОператорКонтрагента = ПараметрыСвязи.ОператорКонтрагента;
	ТекущиеДанные.ОператорыСовпадают = ПараметрыСвязи.ОператорыСовпадают;
	ТекущиеДанные.СвязьДоступна = ПараметрыСвязи.СвязьДоступна;
	ТекущиеДанные.ТребуетсяСоглашение = ПараметрыСвязи.ТребуетсяСоглашение;
	ТекущиеДанные.ВариантПотребностиСоглашения = ПараметрыСвязи.ВариантПотребностиСоглашения;
	ТекущиеДанные.ОтправкаТолькоНаИдентификаторЭДО = ПараметрыСвязи.ОтправкаТолькоНаИдентификаторЭДО;
	
	УстановитьЗнакСноскиВПредставленииАдреса(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗнакСноскиВПредставленииАдреса(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Представление)
		И Не ТекущиеДанные.ОтправкаНаИдентификатор
		И Не СтрЗаканчиваетсяНа(ТекущиеДанные.Представление, "*") Тогда
		ТекущиеДанные.Представление = ТекущиеДанные.Представление + "*";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредупреждениеПриглашения(ТекущиеДанные, ПараметрыСвязиПолучены);
	
	ТекущиеДанные.Предупреждение = "";
	ТекущиеДанные.Отбор = Отбор_ПроверкаНеТребуется();
	
	Если ПараметрыСвязиПолучены И ТекущиеДанные.СтатусПодключения > 0 Тогда
		ТекущиеДанные.Отбор = Отбор_СвязьУжеНастроена();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИНН) Тогда
		ТекущиеДанные.Предупреждение = НСтр("ru = 'У контрагента не указан ИНН'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Адрес)
		ИЛИ Не ПараметрыСвязиПолучены Тогда
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипАдреса = ТипАдреса_ЭлектроннаяПочта() Тогда
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ТекущиеДанные.Адрес) Тогда
			ТекущиеДанные.Отбор = Отбор_РекомендуетсяПроверить();
		Иначе
			ТекущиеДанные.Предупреждение = НСтр("ru = 'Почтовый адрес заполнен неверно'");
			ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ТекущиеДанные.ТипАдреса = ТипАдреса_ИдентификаторЭДО()
		И (Не РаботаСАбонентамиЭДОКлиентСервер.ИдентификаторАбонентаКорректный(ТекущиеДанные.Адрес)
		ИЛИ СписокИдентификаторовОрганизации.НайтиПоЗначению(ТекущиеДанные.Адрес) <> Неопределено) Тогда
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Некорректный идентификатор ЭДО'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		Возврат;
		
	КонецЕсли;
	
	Если Не ТекущиеДанные.АбонентАктивен Тогда
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Возможно неактивная учетная запись'");
		ТекущиеДанные.Отбор = Отбор_РекомендуетсяПроверить();
		
	ИначеЕсли Не ТекущиеДанные.СертификатДействителен Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'У учетной записи отсутствуют действующие сертификаты'");
		ТекущиеДанные.Отбор = Отбор_РекомендуетсяПроверить();
		
	ИначеЕсли ТекущиеДанные.СписокВыбора.Количество() > 1
		ИЛИ ТекущиеДанные.ИдентификаторКонтрагента = ТекущиеДанные.ОператорКонтрагента Тогда
		
		ТекущиеДанные.Отбор = Отбор_РекомендуетсяПроверить();
		
	КонецЕсли;
	
	Если ТекущиеДанные.ОператорыСовпадают Тогда
		Возврат;
		
	ИначеЕсли ТекущиеДанные.СвязьДоступна = -1 Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Обмен не поддерживается'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
	ИначеЕсли ТекущиеДанные.ТребуетсяСоглашение
		И ТекущиеДанные.ВариантПотребностиСоглашения = ПредопределенноеЗначение("Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеОбязательно")
		И Не ЗначениеЗаполнено(ТекущиеДанные.ИмяФайлаСоглашенияНаРоуминг) Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Возможно добавление письма о выборе оператора ЭДО'");
		ТекущиеДанные.Отбор = Отбор_РекомендуетсяПроверить();
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ИмяФайлаСоглашенияНаРоуминг)
		И (ТекущиеДанные.ТребуетсяНовоеСоглашение)
		И Не (ТекущиеДанные.ОбязательнаяОтправкаЗаявкиНаРоуминг Или ТекущиеДанные.ТребуетсяСоглашениеПриПервомПодключении) Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Требуется письмо о выборе оператора ЭДО'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ИмяФайлаСоглашенияНаРоуминг)
		И ТекущиеДанные.ОбязательнаяОтправкаЗаявкиНаРоуминг Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Требуется письмо о выборе оператора ЭДО'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ИмяФайлаСоглашенияНаРоуминг)
		И ТекущиеДанные.ТребуетсяСоглашениеПриПервомПодключении И Не ТекущиеДанные.ЗаявкаНаРоумингПринята Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Требуется письмо о выборе оператора ЭДО'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		
	ИначеЕсли ТекущиеДанные.ОтправкаТолькоНаИдентификаторЭДО
		И ТекущиеДанные.ИдентификаторКонтрагента = ТекущиеДанные.ОператорКонтрагента Тогда
		
		ТекущиеДанные.Предупреждение = НСтр("ru = 'Необходимо уточнить идентификатор ЭДО'");
		ТекущиеДанные.Отбор = Отбор_ТребуютсяДействия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтметкуВыбора(ТекущиеДанные)
	
	ТекущиеДанные.Выбран = ТекущиеДанные.Отбор <> Отбор_ТребуютсяДействия()
		И ТекущиеДанные.Отбор <> Отбор_СвязьУжеНастроена();
	Элементы.EmailОрганизации.Видимость = ТребуетсяЗаполнитьEmailОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьАвтоматическиНаСервере()
	
	Если ИдентификаторОрганизации = Идентификатор_ВыбиратьАвтоматически() Тогда
		ИдентификаторыОрганизации = СписокИдентификаторовОрганизации.ВыгрузитьЗначения();
	Иначе
		ИдентификаторыОрганизации = ИдентификаторОрганизации;
	КонецЕсли;
	
	Контрагенты = ОбщегоНазначения.ВыгрузитьКолонку(Приглашения, "Контрагент");
	
	ПараметрыПолученияСвязи = РаботаСАбонентамиЭДО.НовыеПараметрыПолученияСвязиИдентификаторов();
	ПараметрыПолученияСвязи.ИдентификаторыОрганизации = ИдентификаторыОрганизации;
	ПараметрыПолученияСвязи.Контрагент = Контрагенты;
	ПараметрыПолученияСвязи.ПолучатьПочтовыеАдреса = Истина;
	
	ПараметрыСвязиИдентификаторов = РаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов(ПараметрыПолученияСвязи);
	ЗаполнитьТаблицуПриглашений(ПараметрыСвязиИдентификаторов);
	
	ПосчитатьКоличествоСтрокОтборов(Приглашения, Ложь);
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИдентификатораОрганизацииВторойЭтап()
	
	Если ИдентификаторОрганизации = Идентификатор_ВыбиратьАвтоматически() Тогда
		ИдентификаторыОрганизации = СписокИдентификаторовОрганизации.ВыгрузитьЗначения();
	Иначе
		ИдентификаторыОрганизации = ИдентификаторОрганизации;
	КонецЕсли;
	
	ИдентификаторыКонтрагента = Приглашения.Выгрузить(,"Контрагент, Адрес");
	ИдентификаторыКонтрагента.Колонки["Адрес"].Имя = "ИдентификаторКонтрагента";
	
	ПараметрыПолученияСвязи = РаботаСАбонентамиЭДО.НовыеПараметрыПолученияСвязиИдентификаторов();
	ПараметрыПолученияСвязи.ИдентификаторыОрганизации = ИдентификаторыОрганизации;
	ПараметрыПолученияСвязи.ИдентификаторыКонтрагента = ИдентификаторыКонтрагента;
	ПараметрыПолученияСвязи.ПолучатьПочтовыеАдреса = Истина;
	
	ПараметрыСвязиИдентификаторов = РаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов(ПараметрыПолученияСвязи);
	
	ОбновитьИдентификаторыОрганизацииВТаблицеПриглашений(ПараметрыСвязиИдентификаторов);
	
	ПосчитатьКоличествоСтрокОтборов(Приглашения, Ложь);
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторыОрганизацииВТаблицеПриглашений(ПараметрыСвязиИдентификаторов)
	
	ПараметрыСвязиИдентификаторов.Индексы.Добавить("Контрагент");
	
	Для Каждого ТекущиеДанные Из Приглашения Цикл
		СтрокаПараметровСвязи = ПараметрыСвязиИдентификаторов.Найти(ТекущиеДанные.Контрагент, "Контрагент");
		Если СтрокаПараметровСвязи = Неопределено Тогда
			ПараметрыСвязиПолучены = Ложь;
			Продолжить;
		Иначе
			ПараметрыСвязиПолучены = Истина;
		КонецЕсли;
		
		ТекущиеДанные.ИдентификаторОрганизации = СтрокаПараметровСвязи.ИдентификаторОрганизации;
		ТекущиеДанные.ИдентификаторОрганизацииПредставление = СтрокаПараметровСвязи.ИдентификаторОрганизацииПредставление;
		
		ТекущиеДанные.СписокВыбора = СтрокаПараметровСвязи.СписокВыбора;
		
		ЗаполнитьПредупреждениеПриглашения(ТекущиеДанные, ПараметрыСвязиПолучены);
		ЗаполнитьОтметкуВыбора(ТекущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьЗначениеВыбран(Значение)
	
	Для Каждого СтрокаПриглашения Из Приглашения Цикл
		
		Если Элементы.Приглашения.ПроверитьСтроку(СтрокаПриглашения.ПолучитьИдентификатор())
			И СтрокаПриглашения.Выбран <> Значение
			И ЗначениеЗаполнено(СтрокаПриглашения.Отбор) Тогда
			СтрокаПриглашения.Выбран = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьКоличествоСтрокОтборов(Таблица, ИзменятьФильтр = Истина)
	
	Отбор = Новый Структура("Выбран", Ложь);
	Если Таблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		ПоказатьВсе = Ложь;
	Иначе
		ПоказатьВсе = Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("Отбор", 0);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.ТребуютсяДействия.Пометка = Количество > 0 Или ПоказатьВсе;
	КонецЕсли;
	Элементы.ТребуютсяДействия.Заголовок = СтрШаблон(НСтр("ru = 'Требуются действия (%1)'"), Количество);
	
	Отбор = Новый Структура("Отбор", 1);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.РекомендуетсяПроверить.Пометка = Количество > 0 Или ПоказатьВсе;
	КонецЕсли;
	Элементы.РекомендуетсяПроверить.Заголовок = СтрШаблон(НСтр("ru = 'Рекомендуется проверить (%1)'"), Количество);
	
	Отбор = Новый Структура("Отбор", 2);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.СвязьУжеНастроена.Пометка = Количество > 0 Или ПоказатьВсе;
	КонецЕсли;
	Элементы.СвязьУжеНастроена.Заголовок = СтрШаблон(НСтр("ru = 'Связь уже настроена (%1)'"), Количество);
	
	Отбор = Новый Структура("Отбор", 3);
	Количество = Таблица.НайтиСтроки(Отбор).Количество();
	Если ИзменятьФильтр Тогда
		Элементы.ПроверкаНеТребуется.Пометка = Количество > 0 Или  ПоказатьВсе;
	КонецЕсли;
	Элементы.ПроверкаНеТребуется.Заголовок = СтрШаблон(НСтр("ru = 'Проверка не требуется (%1)'"), Количество);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	ТребуютсяДействия      = Элементы.ТребуютсяДействия.Пометка;
	РекомендуетсяПроверить = Элементы.РекомендуетсяПроверить.Пометка;
	СвязьУжеНастроена      = Элементы.СвязьУжеНастроена.Пометка;
	ПроверкаНеТребуется    = Элементы.ПроверкаНеТребуется.Пометка;
	
	Если (ТребуютсяДействия И РекомендуетсяПроверить И СвязьУжеНастроена И ПроверкаНеТребуется)
		Или (Не ТребуютсяДействия И Не РекомендуетсяПроверить И Не СвязьУжеНастроена И Не ПроверкаНеТребуется) Тогда
		
		Элементы.Приглашения.ОтборСтрок = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Приглашения Цикл
		СтрокаТЧ.Показать = Ложь;
		
		Если СтрокаТЧ.Отбор = 0 И ТребуютсяДействия Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Отбор = 1 И РекомендуетсяПроверить Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Отбор = 2 И СвязьУжеНастроена Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Отбор = 3 И ПроверкаНеТребуется Тогда
			СтрокаТЧ.Показать = Истина;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Показать", Истина);
	Элементы.Приглашения.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриглашения(Знач ИдентификаторСтроки, Знач ОбновитьСписокВыбора = Ложь)
	
	ТекущиеДанные = Приглашения.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТекущиеДанные.Адрес = СокрЛП(ТекущиеДанные.Адрес);
	ТекущиеДанные.Представление = ТекущиеДанные.Адрес;
	ТекущиеДанные.ОтправкаНаИдентификатор = Ложь;
	
	Если СтрНайти(ТекущиеДанные.Адрес, "@") Тогда
		ТекущиеДанные.ТипАдреса = ТипАдреса_ЭлектроннаяПочта();
	ИначеЕсли Не ПустаяСтрока(ТекущиеДанные.ТипАдреса) Тогда 
		ТекущиеДанные.ТипАдреса = ТипАдреса_ИдентификаторЭДО();
	КонецЕсли;
	
	ПараметрыПолученияСвязи = РаботаСАбонентамиЭДО.НовыеПараметрыПолученияСвязиИдентификаторов();
	ПараметрыПолученияСвязи.ИдентификаторыОрганизации = ТекущиеДанные.ИдентификаторОрганизации;
	ПараметрыПолученияСвязи.ИдентификаторыКонтрагента = ТекущиеДанные.Адрес;
	ПараметрыПолученияСвязи.Контрагент = ТекущиеДанные.Контрагент;
	ПараметрыПолученияСвязи.ФормироватьСписокВыбора = ОбновитьСписокВыбора;
	
	ПараметрыСвязи = РаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов(ПараметрыПолученияСвязи,, Истина);

	СтрокаПараметровСвязи = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыСвязи) Тогда
		СтрокаПараметровСвязи = ПараметрыСвязи[0];
		ОбновитьРеквизитыПриглашения(ТекущиеДанные, СтрокаПараметровСвязи, ОбновитьСписокВыбора);
		ПараметрыСвязиПолучены = Истина;
	Иначе
		ПараметрыСвязиПолучены = Ложь;
	КонецЕсли;
	
	ЗаполнитьПредупреждениеПриглашения(ТекущиеДанные, ПараметрыСвязиПолучены);
	
	ЗаполнитьОтметкуВыбора(ТекущиеДанные);
	
	ПосчитатьКоличествоСтрокОтборов(Приглашения, Ложь);
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПриглашения(ТекущиеДанные, ПараметрыСвязи, ОбновитьСписокВыбора)
	
	РоумингБезАвтоматическойНастройки = ПараметрыСвязи.СвязьДоступна = 0
		Или ПараметрыСвязи.ОбязательнаяОтправкаЗаявкиНаРоуминг
		Или (ПараметрыСвязи.ТребуетсяСоглашениеПриПервомПодключении И Не ПараметрыСвязи.ЗаявкаНаРоумингПринята);
	
	ТекущиеДанные.ВариантПотребностиСоглашения = ПараметрыСвязи.ВариантПотребностиСоглашения;
	ТекущиеДанные.ИмяФайлаСоглашенияНаРоуминг = ПараметрыСвязи.ИмяФайлаСоглашенияНаРоуминг;
	ТекущиеДанные.ТребуетсяСоглашение = ПараметрыСвязи.ТребуетсяСоглашение;
	ТекущиеДанные.ИНН = ПараметрыСвязи.КонтрагентИНН;
	ТекущиеДанные.КПП = ПараметрыСвязи.КонтрагентКПП;
	ТекущиеДанные.ОтправкаНаИдентификатор = ПараметрыСвязи.ОператорыСовпадают
		ИЛИ ПараметрыСвязи.СвязьДоступна = 1;
	ТекущиеДанные.РоумингБезАвтоматическойНастройки = РоумингБезАвтоматическойНастройки;
	ТекущиеДанные.АбонентВХабе1С = ПараметрыСвязи.АбонентВХабе1С;
	ТекущиеДанные.ТребуетсяНовоеСоглашение = ПараметрыСвязи.ТребуетсяНовоеСоглашение;
	ТекущиеДанные.ОбязательнаяОтправкаЗаявкиНаРоуминг = ПараметрыСвязи.ОбязательнаяОтправкаЗаявкиНаРоуминг;
	ТекущиеДанные.ТребуетсяСоглашениеПриПервомПодключении = ПараметрыСвязи.ТребуетсяСоглашениеПриПервомПодключении;
	ТекущиеДанные.ЗаявкаНаРоумингПринята = ПараметрыСвязи.ЗаявкаНаРоумингПринята;
	ТекущиеДанные.СтатусПодключения = ПараметрыСвязи.СтатусПодключения;
	ТекущиеДанные.АбонентАктивен = ПараметрыСвязи.АбонентАктивен;
	ТекущиеДанные.СертификатДействителен = ПараметрыСвязи.СертификатДействителен;
	ТекущиеДанные.ИдентификаторКонтрагента = ПараметрыСвязи.ИдентификаторКонтрагента;
	ТекущиеДанные.ОператорКонтрагента = ПараметрыСвязи.ОператорКонтрагента;
	ТекущиеДанные.ОператорыСовпадают = ПараметрыСвязи.ОператорыСовпадают;
	ТекущиеДанные.СвязьДоступна = ПараметрыСвязи.СвязьДоступна;
	ТекущиеДанные.ТребуетсяСоглашение = ПараметрыСвязи.ТребуетсяСоглашение;
	ТекущиеДанные.ВариантПотребностиСоглашения = ПараметрыСвязи.ВариантПотребностиСоглашения;
	ТекущиеДанные.ОтправкаТолькоНаИдентификаторЭДО = ПараметрыСвязи.ОтправкаТолькоНаИдентификаторЭДО;
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязи.ИдентификаторКонтрагента) Тогда
		
	ИначеЕсли ПараметрыСвязи.ИдентификаторКонтрагента = ПараметрыСвязи.ОператорКонтрагента Тогда
		
		ТекущиеДанные.ТипАдреса = ТипАдреса_ОператорЭДО();
		ТекущиеДанные.Представление = ПараметрыСвязи.ОператорКонтрагентаПредставление;
		
	ИначеЕсли ТекущиеДанные.ТипАдреса = ТипАдреса_ИдентификаторЭДО() Тогда
		
		ТекущиеДанные.Представление = ПараметрыСвязи.ИдентификаторКонтрагентаПредставление;
		
	КонецЕсли;
	
	Если ОбновитьСписокВыбора Тогда
		ТекущиеДанные.СписокВыбора = ПараметрыСвязи.СписокВыбора;
	КонецЕсли;
	
	УстановитьЗнакСноскиВПредставленииАдреса(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриглашенияПоКонтрагенту(Знач Контрагент)
	
	Отбор = Новый Структура("Контрагент", Контрагент);
	НайденныеСтроки = Приглашения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		ОбновитьДанныеПриглашения(НайденныеСтроки[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникОтправкиПриглашения()
	
	ТекущиеДанные = Элементы.Приглашения.ТекущиеДанные;
	
	ПараметрыОткрытия = ПриглашенияЭДОСлужебныйКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	ПараметрыОткрытия.РежимНастройки = Истина;
	ПараметрыОткрытия.Организация = Организация;
	ПараметрыОткрытия.ИдентификаторОрганизации = ТекущиеДанные.ИдентификаторОрганизации;
	ПараметрыОткрытия.Контрагент = ТекущиеДанные.Контрагент;
	ПараметрыОткрытия.ТекстПриглашения = ТекущиеДанные.ТекстПриглашения;
	ПараметрыОткрытия.EmailОрганизации = EmailОрганизации;
	
	Если ТекущиеДанные.ТипАдреса = ТипАдреса_ИдентификаторЭДО() Тогда
		ПараметрыОткрытия.ИдентификаторКонтрагента = ТекущиеДанные.Адрес;
	ИначеЕсли ТекущиеДанные.ТипАдреса = ТипАдреса_ЭлектроннаяПочта() Тогда 
		ПараметрыОткрытия.ЭлектроннаяПочта = ТекущиеДанные.Адрес;
	ИначеЕсли ТекущиеДанные.ТипАдреса = ТипАдреса_ОператорЭДО() Тогда 
		ПараметрыОткрытия.ОператорКонтрагента = ТекущиеДанные.Адрес;
	КонецЕсли;
	ПараметрыОткрытия.Вставить("Абоненты", ТекущиеДанные.Абоненты);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораПомощникаОтправкиПриглашения", ЭтотОбъект, ТекущиеДанные);
	ПриглашенияЭДОСлужебныйКлиент.ОткрытьПомощникОтправкиПриглашения(ПараметрыОткрытия, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПомощникаОтправкиПриглашения(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОткрылиПисьмоОВыбореОператора Тогда
		ОткрылиПисьмоОВыбореОператора = Результат.ОткрылиПисьмоОВыбореОператора;
	КонецЕсли;
	
	ТекущиеДанные.ИдентификаторОрганизации = Результат.ИдентификаторОрганизации;
	
	ЭлементСписка = СписокИдентификаторовОрганизации.НайтиПоЗначению(ТекущиеДанные.ИдентификаторОрганизации);
	Если ЭлементСписка <> Неопределено Тогда
		ТекущиеДанные.ИдентификаторОрганизацииПредставление = ЭлементСписка.Представление;
	Иначе
		ТекущиеДанные.ИдентификаторОрганизацииПредставление = ТекущиеДанные.ИдентификаторОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИдентификаторКонтрагента) Тогда
		ТекущиеДанные.Адрес = Результат.ИдентификаторКонтрагента;
	ИначеЕсли ЗначениеЗаполнено(Результат.ЭлектроннаяПочта) Тогда 
		ТекущиеДанные.Адрес = Результат.ЭлектроннаяПочта;
	ИначеЕсли ЗначениеЗаполнено(Результат.ОператорКонтрагента) Тогда 
		ТекущиеДанные.Адрес = Результат.ОператорКонтрагента;
	Иначе
		ТекущиеДанные.Адрес = "";
	КонецЕсли;
	
	ТекущиеДанные.ТекстПриглашения = Результат.ТекстПриглашения;
	
	ОбновитьДанныеПриглашения(Элементы.Приглашения.ТекущаяСтрока);
	
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения()
	
	ПриглашенияКОтправке = Новый Массив;
	ТипыПриглашений = ПриглашенияЭДОСлужебныйКлиентСервер.ТипыПриглашений();
	
	Отбор = Новый Структура("Выбран", Истина);
	Для Каждого ВыбраннаяСтрока Из Приглашения.НайтиСтроки(Отбор) Цикл
		Если ВыбраннаяСтрока.ТипАдреса = ТипАдреса_ЭлектроннаяПочта() Тогда
			ТипПриглашения = ТипыПриглашений.Широковещательное;
		ИначеЕсли ВыбраннаяСтрока.ТипАдреса = ТипАдреса_ИдентификаторЭДО() И ВыбраннаяСтрока.ОтправкаНаИдентификатор Тогда
			ТипПриглашения = ТипыПриглашений.НаИдентификатор;
		Иначе
			Если ВыбраннаяСтрока.АбонентВХабе1С Тогда
				ТипПриглашения = ТипыПриглашений.Широковещательное;
			Иначе
				ТипПриглашения = ТипыПриглашений.ЗаявкаНаРоуминг;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипПриглашения = ТипыПриглашений.НаИдентификатор Тогда
			Приглашение = ПриглашенияЭДОКлиент.НовоеПриглашениеНаИдентификатор();
			Приглашение.ИдентификаторКонтрагента = ВыбраннаяСтрока.Адрес;
			// Форма открыта в сценарии, который предполагает создание настроек.
			Если Не ЗапрещеноСоздаватьНастройкиЭДО Тогда
				Приглашение.СоздаватьНастройкиЭДО = Истина;
			КонецЕсли;
		ИначеЕсли ТипПриглашения = ТипыПриглашений.Широковещательное Тогда
			Приглашение = ПриглашенияЭДОКлиент.НовоеШироковещательноеПриглашение();
			Приглашение.EmailКонтрагента = ВыбраннаяСтрока.Адрес;
		ИначеЕсли ТипПриглашения = ТипыПриглашений.ЗаявкаНаРоуминг Тогда
			Приглашение = ПриглашенияЭДОКлиент.НоваяЗаявкаНаРоуминг();
			Приглашение.ОператорЭДО = Лев(ВыбраннаяСтрока.Адрес, 3);
			Приглашение.ТребуетсяСоглашение = ВыбраннаяСтрока.ТребуетсяСоглашение;
		КонецЕсли;
		
		Если ВыбраннаяСтрока.РоумингБезАвтоматическойНастройки Тогда
			Приглашение.EmailОрганизации = EmailОрганизации;
		КонецЕсли;
		
		Приглашение.ИдентификаторОрганизации = ВыбраннаяСтрока.ИдентификаторОрганизации;
		Приглашение.Организация = Организация;
		Приглашение.Контрагент = ВыбраннаяСтрока.Контрагент;
		Приглашение.ТекстПриглашения = ВыбраннаяСтрока.ТекстПриглашения;
		
		Абонент = АбонентПоПриглашению(ВыбраннаяСтрока.Абоненты, ВыбраннаяСтрока.Адрес);
	
		Если Абонент = Неопределено Тогда
			Приглашение.ПолучательИНН = ВыбраннаяСтрока.ИНН;
			Приглашение.ПолучательКПП = ВыбраннаяСтрока.КПП;
		Иначе
			Приглашение.ПолучательИНН = Абонент.ИНН;
			Приглашение.ПолучательКПП = Абонент.КПП;
		КонецЕсли;
		
		ПриглашенияЭДОСлужебныйКлиент.АктуализироватьКлючПриглашенияПоНатуральнымКлючам(Приглашение);
		
		ПриглашенияКОтправке.Добавить(Приглашение);
	КонецЦикла;
	
	Если ПриглашенияКОтправке.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбраны приглашения для отправки'"));
		Возврат;
	КонецЕсли;
	
	НастроитьСтраницуОжидания();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПриглашенияЗавершение", ЭтотОбъект);
	ПриглашенияЭДОСлужебныйКлиент.ОтправитьПриглашения(ПриглашенияКОтправке, ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияЗавершение(РезультатОтправки, Контекст = Неопределено) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Не РезультатОтправки.Успех Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось отправить приглашения.'");
		НастроитьСтраницуОшибки(ОписаниеОшибки);
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатОтправки.КонтекстДиагностики);
		Возврат;
	КонецЕсли;
	
	НастроитьСтраницуВыполнено();
	
	Оповестить("ОбновитьСостояниеПриглашений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Идентификатор_ВыбиратьАвтоматически()
	Возврат "ВыбиратьАвтоматически";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Идентификатор_УказыватьВТаблице()
	Возврат "УказыватьВТаблице";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Идентификатор_Создать()
	Возврат "Создать";
КонецФункции

&НаКлиенте
Процедура ПоказатьГруппуПредупреждения()
	
	Элементы.ГруппаПредупреждения.Видимость = Ложь;
	
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстДиагностики.ЗаголовокОперации = НСтр("ru = 'При получении данных участников ЭДО'");
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.КонтекстныйРежимОбработки = Истина;
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупреждения;
	ПараметрыОбработкиОшибок.НадписьПредупреждение = Элементы.ДекорацияНадписьПредупреждение;
	ПараметрыОбработкиОшибок.ТекстПредупреждения = ДиагностикаЭДОКлиент.ТекстПредупреждения(КонтекстДиагностики);
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьEmailОрганизации() 
	
	СписокВыбора = Элементы.EmailОрганизации.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.ЗагрузитьЗначения(УчетныеЗаписиЭДО.ЭлектронныеАдресаДляУведомленияОСтатусеЗаявкиНаРоуминг(Организация));
	
	Если СписокВыбора.Количество() Тогда
		EmailОрганизации = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяЗаполнитьEmailОрганизации() 
	
	Отбор = Новый Структура("Выбран, РоумингБезАвтоматическойНастройки", Истина, Истина);
	Возврат Приглашения.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

&НаСервере
Функция АбонентПоПриглашению(Знач Абоненты, Адрес)
	
	Для каждого Элемент Из Абоненты Цикл
		
		Абонент = Элемент.Значение;
		
		Если Абонент.Идентификатор = Адрес Тогда
			Возврат Абонент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ТребуетсяПредупредитьОПрикрепленииПисьмаНаРоуминг() 
	
	Если Не ОткрылиПисьмоОВыбореОператора Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Выбран", Истина);
	Отбор.Вставить("ИмяФайлаСоглашенияНаРоуминг", "");
	Отбор.Вставить("ВариантПотребностиСоглашения", ПредопределенноеЗначение("Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеОбязательно"));
	Возврат Приглашения.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОСоглашенииНаРоуминг(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОтправитьПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьДоступностьОтправкиПриглашений(Форма) 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Выбран", Истина);
	ПриглашенияКОтправке = Форма.Приглашения.НайтиСтроки(ПараметрыОтбора);
	Форма.Элементы.КнопкаОтправить.Доступность = ПриглашенияКОтправке.Количество() <> 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИмяФайлаСоглашенияНаРоуминг(ИмяФайла = "")
	
	Для Каждого ДанныеПриглашения Из Приглашения Цикл
		ДанныеПриглашения.ИмяФайлаСоглашенияНаРоуминг = ИмяФайла;
		ЗаполнитьПредупреждениеПриглашения(ДанныеПриглашения, Истина);
		ЗаполнитьОтметкуВыбора(ДанныеПриглашения);
	КонецЦикла;
	ОпределитьДоступностьОтправкиПриглашений(ЭтотОбъект);
	
КонецПроцедуры

#Область ТипыОтборов

&НаКлиентеНаСервереБезКонтекста
Функция Отбор_ТребуютсяДействия()
	Возврат 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Отбор_РекомендуетсяПроверить()
	Возврат 1;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Отбор_СвязьУжеНастроена()
	Возврат 2;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Отбор_ПроверкаНеТребуется()
	Возврат 3;
КонецФункции

#КонецОбласти

#Область ТипыАдресов

&НаКлиентеНаСервереБезКонтекста
Функция ТипАдреса_ИдентификаторЭДО()
	Возврат "ИдентификаторЭДО";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипАдреса_ЭлектроннаяПочта()
	Возврат "ЭлектроннаяПочта";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипАдреса_ОператорЭДО()
	Возврат "ОператорЭДО";
КонецФункции

#КонецОбласти

#КонецОбласти