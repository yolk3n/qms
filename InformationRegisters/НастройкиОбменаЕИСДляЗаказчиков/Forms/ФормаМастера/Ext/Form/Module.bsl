 #Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	
	ИспользуетсяНесколькоОрганизаций = ЭлектронноеАктированиеЕИСВызовСервера.
		ИспользуетсяНесколькоОрганизаций();
	
	Если НЕ ИспользуетсяНесколькоОрганизаций И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЭлектронноеАктированиеЕИС.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИСВызовСервера.
		СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтотОбъект, "Организация");
	
	ЗаполнитьТекущиеНастройки();
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОрганизацияПриИзменении(Элементы.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантыНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Подписанты", Новый Массив);
	Для каждого Строка Из Подписанты Цикл
		Подписант = Новый Структура("ФИО, Должность");
		ЗаполнитьЗначенияСвойств(Подписант, Строка);
		ПараметрыФормы.Подписанты.Добавить(Подписант);
	КонецЦикла;
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков.Форма.ФормаПодписантов",
		ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьТекущиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияЭтаповОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "МастерНастройки" Тогда
		Гиперссылка = ГиперссылкаАвтоматическаяНастройка();
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"РаботаМастераНастройкиЗавершение", ЭтотОбъект);
		НачатьЗапускПриложения(ОписаниеОповещения, Гиперссылка, , Истина);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Инструкция" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОткрытияИнструкцийЗавершение", ЭтотОбъект);
		Гиперссылка = ГиперссылкаИнструкция();
		НачатьЗапускПриложения(ОписаниеОповещения, Гиперссылка, , Истина);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЛичныйКабинетЕИС" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЛичныйКабинетЕИСЗавершение", ЭтотОбъект);
		ГиперссылкаЛК = ГиперссылкаЛичныйКабинет();
		НачатьЗапускПриложения(ОписаниеОповещения, ГиперссылкаЛК, , Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерЕРУЗПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ДанныеЛичногоКабинетаПолучены = Ложь;
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТокенАвторизацииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ДанныеЛичногоКабинетаПолучены = Ложь;
	УправлениеЭУ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Модифицированность И НЕ ДанныеЛичногоКабинетаПолучены Тогда
		ТекстОшибки = ЗаполнитьСведенияОЗаказчике();
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаписи = ПодготовитьДанныеЗаписиРегистра();
	СохранитьНастройкиОбменаЕИС(СтруктураЗаписи);
	Модифицированность = Ложь;
	Закрыть(Истина);
	Оповестить(ЭлектронноеАктированиеЕИСКлиент.ИмяСобытияСохраненияНастроекПодключения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСведенияОбУчастнике(Команда)
	
	Если ЕстьДанныеДляПолученияСведений(Истина) Тогда
		ТекстОшибки = ЗаполнитьСведенияОЗаказчике();
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ГиперссылкаЛичныйКабинет()
	
	Возврат ЭлектронноеАктированиеЕИС.ГиперссылкаНаЛичныйКабинетЗаказчика();
	
КонецФункции

&НаСервереБезКонтекста
Функция ГиперссылкаАвтоматическаяНастройка()
	
	Возврат ЭлектронноеАктированиеЕИС.ГиперссылкаНаИнструкциюПоАвтоматическойНастройкеРабочегоМеста();
	
КонецФункции

&НаСервереБезКонтекста
Функция ГиперссылкаИнструкция()
	
	Возврат ЭлектронноеАктированиеЕИС.ГиперссылкаНаИнструкциюПоРучнойНастройкеРабочегоМеста();
	
КонецФункции

&НаКлиенте
Процедура РаботаМастераНастройкиЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		Шаблон = НСтр("ru='Не удалось запустить мастер настройки. Операционная система вернула код %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, КодВозврата);
		ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияИнструкцийЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		Шаблон = НСтр("ru='Не удалось открыть инструкцию. Операционная система вернула код %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, КодВозврата);
		ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛичныйКабинетЕИСЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		Шаблон = НСтр("ru='Не удалось открыть личный кабинет. Операционная система вернула код %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, КодВозврата);
		ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеЗаписиРегистра()
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Организация", Организация);
	СтруктураЗаписи.Вставить("ТокенАвторизации", ТокенАвторизации);
	СтруктураЗаписи.Вставить("КодПоСПЗ", КодПоСПЗ);
	// Формируем идентификатор участника.
	СтруктураЗаписи.Вставить("ИдентификаторУчастникаДокументооборота",
		ПолучитьИдентификаторУчастника());
	СтруктураЗаписи.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	СтруктураЗаписи.Вставить("ОбменВключен", Истина);
	
	Возврат СтруктураЗаписи;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторУчастника()
	
	Оператор = ЭлектронноеАктированиеЕИС.ОператорЭДОФедеральногоКазначейства();
	Возврат Оператор.Идентификатор + "-CUS-" + КодПоСПЗ;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСведенияОЗаказчике()
	
	Результат = "";
	
	Настройки = ПодготовитьДанныеЗаписиРегистра();
	
	РезультатСведенияОЗаказчике =
		ЭлектронноеАктированиеЕИС.СведенияОПодписантахЗаказчика(Организация, Настройки);
	Если РезультатСведенияОЗаказчике.Выполнено Тогда
		ДанныеПодписантов = РезультатСведенияОЗаказчике.ИнформацияОПодписантах;
		РегНомер = ДанныеПодписантов.КодПоСПЗ;
		НаименованиеОрганизации = ДанныеПодписантов.НаименованиеОрганизации;
		Если РегНомер <> КодПоСПЗ Тогда
			Шаблон = НСтр("ru = 'Код по СПЗ из личного кабинета %1 не соответствует коду из данных формы.'");
			ДанныеЛичногоКабинетаПолучены = Ложь;
			Возврат СтрШаблон(Шаблон, РегНомер);
		КонецЕсли;
		Подписанты.Очистить();
		Для каждого Подписант Из ДанныеПодписантов.Подписанты Цикл
			Строка = Подписанты.Добавить();
			Строка.ФИО = Подписант.ФИО;
			Строка.Должность = Подписант.Должность;
			УстановитьПривилегированныйРежим(Истина);
			ЭлектронноеАктированиеЕИС.СохранитьПодписантаЗаказчика(Организация, Подписант);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		СклоняемаяСтрока = НСтр("ru='сотрудник'");
		КоличествоПодписантов = Подписанты.Количество();
		ПодписантыНадпись = ПолучитьСклоненияСтрокиПоЧислу(
			СклоняемаяСтрока,
			КоличествоПодписантов, ,
			"ЧС=Количественное",
			"ПД=Именительный")[0];
		ИдентификаторУчастникаДокументооборота = ПолучитьИдентификаторУчастника();
		ДанныеЛичногоКабинетаПолучены = Истина;
	Иначе
		Результат = РезультатСведенияОЗаказчике.ОписаниеОшибки;
		ДанныеЛичногоКабинетаПолучены = Ложь;
	КонецЕсли;
	
	УправлениеЭУ();
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УправлениеЭУ()
	
	Если ДанныеЛичногоКабинетаПолучены Тогда
		Элементы.НаименованиеОрганизации.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Элементы.ИдентификаторУчастникаДокументооборота.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Элементы.ПодписантыНадпись.ЦветТекста = ЭлектронноеАктированиеЕИС.ЦветТекстаГиперссылки();
		Элементы.ПодписантыНадпись.Гиперссылка = Истина;
	Иначе
		НаименованиеОрганизации = НадписьТребуетсяПолучитьЗначение();
		ИдентификаторУчастникаДокументооборота = НадписьТребуетсяПолучитьЗначение();
		ПодписантыНадпись = НадписьТребуетсяПолучитьЗначение();
		
		СерыйЦвет = ЭлектронноеАктированиеЕИС.ЦветТекстаСерый();
		Элементы.НаименованиеОрганизации.ЦветТекста = СерыйЦвет;
		Элементы.ИдентификаторУчастникаДокументооборота.ЦветТекста = СерыйЦвет;
		Элементы.ПодписантыНадпись.ЦветТекста = СерыйЦвет;
		Элементы.ПодписантыНадпись.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОбменаЕИС(СтруктураЗаписи)
	
	НоваяНастройка = РегистрыСведений.НастройкиОбменаЕИСДляЗаказчиков.СоздатьМенеджерЗаписи();
	НоваяНастройка.Организация = СтруктураЗаписи.Организация;
	НоваяНастройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, СтруктураЗаписи);
	НоваяНастройка.ОбменВключен = Истина;
	
	НоваяНастройка.Записать();
	
	Если ЭлектронноеАктированиеЕИС.РазрешаетсяИспользоватьЭлектронноеАктированиеДляЗаказчиков()
		И НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		УстановитьПривилегированныйРежим(Истина);
		// Включием функциональную опцию.
		Константы.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НадписьТребуетсяПолучитьЗначение()
	
	Возврат НСтр("ru='<не заполнено>'");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекущиеНастройки()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = Новый Структура("Организация", Организация);
		Выборка = РегистрыСведений.НастройкиОбменаЕИСДляЗаказчиков.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДанныеДляПолученияСведений(ВыводитьОшибки = Ложь)
	
	ДанныеЗаполнены = Истина;
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru='Не заполнена организация.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Организация");
		КонецЕсли;
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодПоСПЗ) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru='Не заполнен код по СПЗ.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодПоСПЗ");
		КонецЕсли;
		ДанныеЗаполнены = Ложь;
	Иначе
		Если СтрДлина(СокрЛП(КодПоСПЗ)) < 11 Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Длина кода по СПЗ меньше 11 цифр.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодПоСПЗ");
			КонецЕсли;
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенАвторизации) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru='Не заполнен токен-ключ авторизации.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТокенАвторизации");
		КонецЕсли;
		ДанныеЗаполнены = Ложь;
	Иначе
		Если СтрДлина(СокрЛП(ТокенАвторизации)) < 36 Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Длина токен-ключа меньше 36 символов.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТокенАвторизации");
			КонецЕсли;
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

#КонецОбласти
