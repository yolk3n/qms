#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ЭлектронныйДокумент)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ЭлектронныйДокумент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Регистрирует данные для обработчика обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.ОбъектыУчетаДокументовЭДО.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ОбъектУчета");
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("ЭлектронныйДокумент");
	
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ОбъектУчета");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("ЭлектронныйДокумент");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	УдалитьАктуальныеДокументыЭДО.ОбъектУчета КАК ОбъектУчета,
	|	УдалитьАктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.УдалитьАктуальныеДокументыЭДО КАК УдалитьАктуальныеДокументыЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО УдалитьАктуальныеДокументыЭДО.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
	|		И УдалитьАктуальныеДокументыЭДО.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
	|ГДЕ
	|	НЕ ЕСТЬNULL(ОбъектыУчетаДокументовЭДО.Актуальный, ЛОЖЬ)
	|	И (УдалитьАктуальныеДокументыЭДО.ОбъектУчета > &ОбъектУчета
	|	ИЛИ (УдалитьАктуальныеДокументыЭДО.ОбъектУчета = &ОбъектУчета
	|	И УдалитьАктуальныеДокументыЭДО.ЭлектронныйДокумент > &ЭлектронныйДокумент))
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектУчета,
	|	ЭлектронныйДокумент";
	
	ОбъектУчета = Неопределено;
	ЭлектронныйДокумент = Неопределено;
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
		Если КоличествоСтрок < 1000 Тогда
			Прервать;
		КонецЕсли;
		
		ОбъектУчета = Выгрузка[КоличествоСтрок - 1].ОбъектУчета;
		ЭлектронныйДокумент = Выгрузка[КоличествоСтрок - 1].ЭлектронныйДокумент;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.ОбъектыУчетаДокументовЭДО.ПолноеИмя();
	
	ЕстьЗаблокированныеПредыдущимиОчередямиДанные =
		ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
		Параметры.Очередь, "РегистрСведений.СостоянияПоОбъектамУчетаЭДО");
	Если ЕстьЗаблокированныеПредыдущимиОчередямиДанные Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбновляемыеДанные.ОбъектУчета КАК ОбъектУчета,
	|	ОбновляемыеДанные.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбновляемыеДанные.ОбъектУчета КАК ОбъектУчета,
	|	ОбновляемыеДанные.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	УдалитьАктуальныеДокументыЭДО.ТребуетсяПересчетАктуальности КАК ТребуетсяПересчетАктуальности
	|ИЗ
	|	ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьАктуальныеДокументыЭДО КАК УдалитьАктуальныеДокументыЭДО
	|		ПО ОбновляемыеДанные.ОбъектУчета = УдалитьАктуальныеДокументыЭДО.ОбъектУчета
	|		И ОбновляемыеДанные.ЭлектронныйДокумент = УдалитьАктуальныеДокументыЭДО.ЭлектронныйДокумент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектУчета.Установить(Выборка.ОбъектУчета);
			НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Если ЗначениеЗаполнено(НаборЗаписей) Тогда
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
				Запись.ОбъектУчета = Выборка.ОбъектУчета;
				Запись.ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
			КонецЕсли;
			
			Запись.Актуальный = Истина;
			Запись.ТребуетсяПересчетАктуальности = Выборка.ТребуетсяПересчетАктуальности;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по объекту учета %1 и электронному документу %2 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ОбъектУчета, Выборка.ЭлектронныйДокумент)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				ПолноеИмяРегистра, , ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые записи регистра объектов учета документов ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция записей регистра объектов учета документов ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			ПолноеИмяРегистра,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли