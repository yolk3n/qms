#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаДанныхРезультатовМетода

Функция ПараметрыЗагрузкиДанныхРезультатовМетода(ТипЗадачи) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипЗадачи", ТипЗадачи);
	
	Параметры.Вставить("ЗагрузкаВТранзакции", Истина);
	Параметры.Вставить("ИгнорироватьНеизвестныеУпаковки", Истина);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗагрузитьДанныеРезультатовМетода(Данные, ПараметрыЗагрузки) Экспорт
	
	РабочиеПараметрыЗагрузки = ПараметрыЗагрузкиДанныхРезультатовМетода(Неопределено);
	ЗаполнитьЗначенияСвойств(РабочиеПараметрыЗагрузки, ПараметрыЗагрузки);
	
	ЗагрузкаВТранзакции = РабочиеПараметрыЗагрузки.ЗагрузкаВТранзакции;
	ИгнорироватьНеизвестныеУпаковки = РабочиеПараметрыЗагрузки.ИгнорироватьНеизвестныеУпаковки;
	
	Результат = СтруктураРезультатаЗагрузкиДанных();
	
	// Предобработка данных.
	Для Каждого КлючИЗначение Из Данные Цикл
		
		// Рассчитываем НомерВерхнеуровневойУпаковки.
		НомерНовойВерхнеуровневойГрупповойУпаковки = КлючИЗначение.Значение["parent_sscc"];
		НомерВерхнеуровневойГрупповойУпаковки = НомерНовойВерхнеуровневойГрупповойУпаковки;
		Пока ЗначениеЗаполнено(НомерНовойВерхнеуровневойГрупповойУпаковки) Цикл
			НомерВерхнеуровневойГрупповойУпаковки = НомерНовойВерхнеуровневойГрупповойУпаковки;
			ДанныеГрупповойУпаковки = Данные[НомерНовойВерхнеуровневойГрупповойУпаковки];
			НомерНовойВерхнеуровневойГрупповойУпаковки = ДанныеГрупповойУпаковки["parent_sscc"];
		КонецЦикла;
		КлючИЗначение.Значение.Вставить("upper_parent_sscc", НомерВерхнеуровневойГрупповойУпаковки);
		
	КонецЦикла;
	
	// Обработка данных.
	ДополнительныеСвойства = Новый Структура;
	ПередОбработкой(ДополнительныеСвойства);
	
	Если ЗагрузкаВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Для Каждого КлючИЗначение Из Данные Цикл
			
			Результат.Данные.КоличествоЗаписей = Результат.Данные.КоличествоЗаписей + 1;
			
			Если ИгнорироватьНеизвестныеУпаковки Тогда
				Если ЗначениеЗаполнено(КлючИЗначение.Значение["error_code"]) Тогда
					ТекстОшибки = НСтр("ru = 'Обработка данных sscc с кодом %1: %2'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КлючИЗначение.Ключ, КлючИЗначение.Значение["error_desc"]);
					ОбработатьОшибкуЗагрузки(Ложь, Результат.Данные.ОшибкиЗаписей, ТекстОшибки);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ОбработатьЗначенияСвойствЭлементаДанных(КлючИЗначение.Значение, ДополнительныеСвойства);
				Результат.Данные.КоличествоОбработанныхЗаписей = Результат.Данные.КоличествоОбработанныхЗаписей + 1;
			Исключение
				ОбработатьОшибкуЗагрузки(ЗагрузкаВТранзакции, Результат.Данные.ОшибкиЗаписей, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		ПослеОбработки(ДополнительныеСвойства);
		
		Если ЗагрузкаВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ЗагрузкаВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат.Данные.ДатаАктуальности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства.СлужебныеДанные, "ДатаАктуальности");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураРезультатаЗагрузкиДанных()
	
	Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	Результат.Вставить("Данные", Новый Структура);
	Результат.Данные.Вставить("КоличествоЗаписей"            , 0);
	Результат.Данные.Вставить("КоличествоОбработанныхЗаписей", 0);
	Результат.Данные.Вставить("ОшибкиЗаписей"                , Новый Массив);
	Результат.Данные.Вставить("ДатаАктуальности"             , Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

Процедура ПередОбработкой(ДополнительныеСвойства)
	
	ДополнительныеСвойства.Вставить("ДанныеНабораЗаписей", Новый Соответствие);
	
	ДополнительныеСвойства.Вставить("СлужебныеДанные", Новый Структура);
	ДополнительныеСвойства.СлужебныеДанные.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());
	
	ДополнительныеСвойства.Вставить("ПараметрыОбработки", Новый Структура);
	ДополнительныеСвойства.ПараметрыОбработки.Вставить("КешМестДеятельности", Новый Соответствие);
	ДополнительныеСвойства.ПараметрыОбработки.Вставить("СоответствиеСтатусовУпаковок", ИнтеграцияМДЛПКлиентСервер.СоответствиеВнутреннихСтатусовКИЗСтатусамМДЛП());
	ДополнительныеСвойства.ПараметрыОбработки.Вставить("УдалениеЗаписейВыполнено", Новый Соответствие);
	
КонецПроцедуры

Процедура ОбработатьЗначенияСвойствЭлементаДанных(ЗначенияСвойствЭлементаДанных, ДополнительныеСвойства)
	
	ДанныеЗаписи = Новый Структура;
	Для Каждого КлючИЗначение Из ЗначенияСвойствЭлементаДанных Цикл
		
		ИмяСвойства = КлючИЗначение.Ключ;
		ЗначениеСвойства = КлючИЗначение.Значение;
		
		Если ИмяСвойства = "sscc" Тогда
			ДанныеЗаписи.Вставить("НомерУпаковки", ЗначениеСвойства);
		ИначеЕсли ИмяСвойства = "owner_id" Тогда
			ДанныеЗаписи.Вставить("МестоДеятельности", МестоДеятельностиПоИдентификатору(ЗначениеСвойства, ДополнительныеСвойства));
		ИначеЕсли ИмяСвойства = "status" Тогда
			ДанныеЗаписи.Вставить("ИсходныйСтатус", ЗначениеСвойства);
			ДанныеЗаписи.Вставить("Статус", ВнутреннийСтатусУпаковкиПоСтатусуМДЛП(ЗначениеСвойства, ДополнительныеСвойства));
		ИначеЕсли ИмяСвойства = "status_date" Тогда
			ДанныеЗаписи.Вставить("ДатаСтатуса", ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЗначениеСвойства));
		ИначеЕсли ИмяСвойства = "parent_sscc" Тогда
			ДанныеЗаписи.Вставить("НомерГрупповойУпаковки", ЗначениеСвойства);
		ИначеЕсли ИмяСвойства = "upper_parent_sscc" Тогда
			ДанныеЗаписи.Вставить("НомерВерхнеуровневойУпаковки", ЗначениеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоМестуДеятельности = ПолучитьДанныеНабораЗаписейПоМестуДеятельности(ДанныеЗаписи.МестоДеятельности, ДополнительныеСвойства);
	ДанныеПоМестуДеятельности.Добавить(ДанныеЗаписи);
	
	Если ДанныеПоМестуДеятельности.Количество() >= 1000 Тогда
		ЗаписатьДанныеНабораЗаписейПоМестуДеятельности(ДанныеЗаписи.МестоДеятельности, ДанныеПоМестуДеятельности, ДополнительныеСвойства);
		ДанныеПоМестуДеятельности.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработки(ДополнительныеСвойства)
	
	Для Каждого КлючИЗначение Из ДополнительныеСвойства.ДанныеНабораЗаписей Цикл
		
		МестоДеятельности = КлючИЗначение.Ключ;
		ДанныеПоМестуДеятельности = КлючИЗначение.Значение;
		
		ЗаписатьДанныеНабораЗаписейПоМестуДеятельности(МестоДеятельности, ДанныеПоМестуДеятельности, ДополнительныеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОшибкуЗагрузки(ЗагрузкаВТранзакции, НаборОшибок, НоваяОшибка)
	
	Если ЗагрузкаВТранзакции Тогда
		ВызватьИсключение НоваяОшибка;
	Иначе
		НаборОшибок.Добавить(НоваяОшибка);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДанныеНабораЗаписейПоМестуДеятельности(МестоДеятельности, ДополнительныеСвойства)
	
	ДанныеПоМестуДеятельности = ДополнительныеСвойства.ДанныеНабораЗаписей.Получить(МестоДеятельности);
	Если ДанныеПоМестуДеятельности = Неопределено Тогда
		
		ДанныеПоМестуДеятельности = Новый Массив;
		ДополнительныеСвойства.ДанныеНабораЗаписей.Вставить(МестоДеятельности, ДанныеПоМестуДеятельности);
		
	КонецЕсли;
	
	Возврат ДанныеПоМестуДеятельности;
	
КонецФункции

Процедура ЗаписатьДанныеНабораЗаписейПоМестуДеятельности(МестоДеятельности, Данные, ДополнительныеСвойства)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Старые записи предыдущих загрузок, из регистра,
	// по текущему месту деятельности, удаляем один раз,
	// а потом только записываем новые порции данных без замещения.
	
	Если ДополнительныеСвойства.ПараметрыОбработки.УдалениеЗаписейВыполнено.Получить(МестоДеятельности) <> Истина Тогда
		
		// Удаляем старые записи предыдущих загрузок.
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.МестоДеятельности.Установить(МестоДеятельности);
		Набор.Записать(Истина);
		
		// Устанавливаем пометку, что по текущему месту деятельности старые записи предыдущих загрузок были удалены.
		ДополнительныеСвойства.ПараметрыОбработки.УдалениеЗаписейВыполнено.Вставить(МестоДеятельности, Истина);
		
	КонецЕсли;
	
	// Записываем очередную порцию данных без замещения по текущему месту деятельности.
	Набор = СоздатьНаборЗаписей();
	Набор.ОбменДанными.Загрузка = Истина;
	
	Для Каждого ЭлементДанных Из Данные Цикл
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ЭлементДанных);
		ЗаполнитьЗначенияСвойств(Запись, ДополнительныеСвойства.СлужебныеДанные);
		Запись.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Запись.НомерУпаковки);
		
	КонецЦикла;
	
	Набор.Записать(Ложь);
	
КонецПроцедуры

Функция МестоДеятельностиПоИдентификатору(Идентификатор, ДополнительныеСвойства)
	
	Значение = ДополнительныеСвойства.ПараметрыОбработки.КешМестДеятельности.Получить(Идентификатор);
	Если Значение = Неопределено Тогда
		Значение = Справочники.МестаДеятельностиМДЛП.НайтиПоРеквизиту("Идентификатор", Идентификатор);
		ДополнительныеСвойства.ПараметрыОбработки.КешМестДеятельности.Вставить(Идентификатор, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ВнутреннийСтатусУпаковкиПоСтатусуМДЛП(ИсходныйСтатус, ДополнительныеСвойства)
	
	Возврат ДополнительныеСвойства.ПараметрыОбработки.СоответствиеСтатусовУпаковок.Получить(ИсходныйСтатус);
	
КонецФункции

#КонецОбласти

#КонецЕсли