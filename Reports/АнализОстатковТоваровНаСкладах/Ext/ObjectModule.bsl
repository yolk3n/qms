#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	////////////////////////////////////////////////////////////////////////////////
	// Получение данных аналитики для анализа остатков товаров.
	
	СхемаАналитикаДляАнализа = ПолучитьМакет("СхемаАналитикаДляАнализа");
	ВариантНастроек = СхемаАналитикаДляАнализа.ВариантыНастроек[КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта];
	
	КомпоновщикНастроекДляАнализа = Новый КомпоновщикНастроекКомпоновкиДанных;
	ОтчетыСервер.ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроекДляАнализа, СхемаАналитикаДляАнализа,, ВариантНастроек);
	КомпоновщикНастроекДляАнализа.ЗагрузитьНастройки(ВариантНастроек.Настройки);
	
	Период = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период");
	Если ТипЗнч(Период) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЗначениеЗаполнено(Период.Значение) Тогда
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьПараметр(КомпоновщикНастроекДляАнализа, "Период", Период.Значение, Период.Использование);
	КонецЕсли;
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДополнитьОтборКомпоновкиДанных(КомпоновщикНастроекДляАнализа.Настройки.Отбор, НастройкиОтчета.Отбор);
	
	КомпоновщикНастроекДляАнализа.Восстановить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаАналитикаДляАнализа, КомпоновщикНастроекДляАнализа.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ОтчетыБольничнаяАптека.ОптимизироватьВыраженияПараметровВиртуальныхТаблиц(МакетКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
	
	АналитикаДляАнализа = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	////////////////////////////////////////////////////////////////////////////////
	// Формирование результата анализа остатков по полученной аналитике.
	
	ВнешнийНабор = Новый Структура("АналитикаДляАнализа", АналитикаДляАнализа);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНабор, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#КонецЕсли
