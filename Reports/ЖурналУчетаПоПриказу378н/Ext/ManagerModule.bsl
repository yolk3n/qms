#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

// Вызывает модуль менеджера отчета для заполнения его настроек.
//   Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   ОтчетМетаданные - ОбъектМетаданных - Метаданные отчета.
//
// Важно:
//   Для использования в модуле менеджера отчета должна быть размещена экспортная процедура по шаблону:
//      // Настройки размещения в панели отчетов.
//      //
//      // Параметры:
//      //   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//      //   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//      //       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//      //       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Описание:
//      //   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Вспомогательные методы:
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//      //
//      // Примеры:
//      //
//      //  1. Установка описания варианта.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//      //
//      //  2. Отключение варианта отчета.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Включен = Ложь;
//      //
//      Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
//      	// Код процедуры.
//      КонецПроцедуры
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	// Эти варианты отчета по умолчанию видны в панели отчетов
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ЖурналУчетаПоПриказу378н");
	НастройкиВарианта.Описание = НСтр("ru = 'Журнал учета по приказу 378н'");
	
КонецПроцедуры

// Возвращает признаки переопределения стандартного формирования отчета.
//
// Возвращаемое значение:
//  ПараметрыИсполнения - Структура - признаки использования методов формирования отчета.
//                      Каждый метод описывается в модуле менеджера отчета с именем,
//                      образованным от ключа структуры без приставки Использовать.
//    * ИспользоватьВнешниеНаборыДанных            - Булево - признак использования внешних наборов данных,
//                                                            полученных в результате выполнения указанного метода.
//    * ИспользоватьПриВыводеЗаголовка             - Булево - признак переопределения стандартного метода формирования заголовка отчета.
//                                                            Имеет смысл, если ВыводитьЗаголовок = Истина.
//    * ИспользоватьПриВыводеПодвала               - Булево - признак переопределения стандартного метода формирования подвала отчета.
//                                                            Имеет смысл, если ВыводитьПодвал = Истина.
//    * ИспользоватьПередКомпоновкойМакета         - Булево - признак выполнения дополнительных действий перед компоновкой макета.
//                                                            Имеет смысл, если необходимо изменить настройки отчета перед получением макета компоновки данных.
//    * ИспользоватьПослеКомпоновкиМакета          - Булево - признак выполнения дополнительных действий после компоновки макета.
//                                                            Имеет смысл, если необходимо изменить полученный макет компоновки данных.
//    * ИспользоватьПередВыводомЭлементаРезультата - Булево - признак выполнения дополнительных действий перед выводом элемента результата компоновки.
//                                                            Имеет смысл, если необходимо обработать элемент результата компоновки перед выводом.
//    * ИспользоватьПослеВыводаРезультата          - Булево - признак переопределения стандартного метода ОтчетыБольничнаяАптека.ПослеВыводаРезультата.
//    * ИспользоватьДанныеРасшифровки              - Булево - признак использования данных расшифровки отчета.
//                                                            Не имеет отдельного метода переопределения данных расшифровки.
//    * ИспользоватьПривилегированныйРежим         - Булево - признак использования привилегированного режима при выводе элементов результата компоновки.
//                                                            Не имеет отдельного метода.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыИсполнения = Новый Структура;
	ПараметрыИсполнения.Вставить("ИспользоватьВнешниеНаборыДанных"            , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеЗаголовка"             , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПередКомпоновкойМакета"         , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеКомпоновкиМакета"          , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПередВыводомЭлементаРезультата" , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьДанныеРасшифровки"              , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеВыводаРезультата"          , Истина);
	Возврат ПараметрыИсполнения;
	
КонецФункции

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - параметры, влияющие на результат отчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//  Результат           - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	ОтчетыБольничнаяАптека.ВывестиОтборВТабличныйДокумент(Результат, КомпоновщикНастроек);
	ОтчетыБольничнаяАптека.ВывестиГруппировкуВТабличныйДокумент(Результат, ПараметрыОтчета.Группировка);
	
	ПараметрыОтчета.Вставить("УчетВОтделении", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Склад, "ТипСклада") = Перечисления.ТипыСкладов.Отделение);
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры, влияющие на результат отчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - созданный в результате компоновки макет компоновки.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Схема = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьМакет("СхемаПолученияДанных");
	
	Если ПараметрыОтчета.УчетВОтделении Тогда
		Приход = Схема.НаборыДанных.ДанныеОтчета.Элементы.Приход.Элементы;
		Расход = Схема.НаборыДанных.ДанныеОтчета.Элементы.Расход.Элементы;
		Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.Закупки) Тогда
			Приход.Удалить(Приход.Закупки);
			Расход.Удалить(Расход.ВозвратТоваровПоставщику);
		КонецЕсли;
		Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж) Тогда
			Расход.Удалить(Расход.Реализация);
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	СводныеПроводки.СкопироватьОтборКомпоновкиДанных(КомпоновщикНастроек.Настройки.Отбор, ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор);
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоДня(ПараметрыОтчета.ДатаНачала));
	ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецДня(ПараметрыОтчета.ДатаОкончания));
	
	ВестиУчетПоИсточникамФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.Организация, "###ОтборПоОрганизации###", ЗначениеЗаполнено(ПараметрыОтчета.Организация));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ИсточникФинансирования", ВидСравненияКомпоновкиДанных.ВИерархии, ПараметрыОтчета.ИсточникФинансирования, "###ОтборПоИсточникуФинансирования###", ВестиУчетПоИсточникамФинансирования И ЗначениеЗаполнено(ПараметрыОтчета.ИсточникФинансирования));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ГруппаПКУ", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.ГруппаПКУ, "###ОтборПоГруппеПКУ###", ЗначениеЗаполнено(ПараметрыОтчета.ГруппаПКУ));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Склад", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.Склад, "###ОтборПоСкладу###", ЗначениеЗаполнено(ПараметрыОтчета.Склад));
	
	КомпоновщикНастроек.Восстановить();
	
	МакетКомпоновкиПолученияДанных = ОбщегоНазначенияБольничнаяАптека.ПолучитьМакетКомпоновки(Схема, КомпоновщикНастроек.ПолучитьНастройки());
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиПолученияДанных,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоРезультат = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультат);
	ДеревоРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаДляВывода = СформироватьТаблицуДляВывода(ДеревоРезультат, ПараметрыОтчета);
	
	Возврат Новый Структура("ТаблицаДляВывода", ТаблицаДляВывода);
	
КонецФункции

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - параметры, влияющие на результат отчета.
//  Схема               - СхемаКомпоновкиДанных - схема компоновки, на основании которой будет выполняться отчет.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаОкончания) Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПредставлениеПериода(ПараметрыОтчета.ДатаНачала, КонецДня(ПараметрыОтчета.ДатаОкончания), "ФП = Истина"));
	КонецЕсли;
	
	ТекстОтбора = "";
	Если ЗначениеЗаполнено(ПараметрыОтчета.Склад) Тогда
		ТекстОтбораИсточника = НСтр("ru = 'Склад Равно'") + " """ + ПараметрыОтчета.Склад + """";
		ТекстОтбора = ?(Не ПустаяСтрока(ТекстОтбора), ТекстОтбора + " " + НСтр("ru = 'И'") + " ", "") + ТекстОтбораИсточника;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования") И ЗначениеЗаполнено(ПараметрыОтчета.ИсточникФинансирования) Тогда
		ТекстОтбораИсточника = НСтр("ru = 'Источник финансирования Равно'") + " """ + ПараметрыОтчета.ИсточникФинансирования + """";
		ТекстОтбора = ?(Не ПустаяСтрока(ТекстОтбора), ТекстОтбора + " " + НСтр("ru = 'И'") + " ", "") + ТекстОтбораИсточника;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ГруппаПКУ) Тогда
		ТекстОтбораИсточника = НСтр("ru = 'Группа ПКУ Равно'") + " """ + ПараметрыОтчета.ГруппаПКУ + """";
		ТекстОтбора = ?(Не ПустаяСтрока(ТекстОтбора), ТекстОтбора + " " + НСтр("ru = 'И'") + " ", "") + ТекстОтбораИсточника;
	КонецЕсли;
	
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОтбора", ТекстОтбора);
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры, влияющие на результат отчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - созданный в результате компоновки макет компоновки.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	МакетТитула = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Титул")[0];
	ПараметрыОтчета.Вставить("МакетТитула", МакетТитула.Имя);
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("Номенклатура", "ДанныеОтчета.Номенклатура");
	ПутиКПараметрам = ОтчетыБольничнаяАптека.УстановитьСоответствиеПараметрамМакетаКомпоновки(МакетТитула.Параметры, ПараметрыРасшифровки, Истина);
	ПараметрыОтчета.Вставить("ПутиКПараметрам", ПутиКПараметрам);
	
	МакетШапки = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Шапка")[0];
	Для Каждого Ячейка Из МакетШапки.Макет[0].Ячейки Цикл
		Ячейка.Оформление.УстановитьЗначениеПараметра("СтильГраницы", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии));
	КонецЦикла;
	ПараметрыОтчета.Вставить("МакетШапки" , МакетШапки.Имя);
	
	МакетПодвала = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подвал")[0];
	Для Каждого Ячейка Из МакетПодвала.Макет[0].Ячейки Цикл
		Ячейка.Оформление.УстановитьЗначениеПараметра("СтильГраницы", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии));
	КонецЦикла;
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета         - Структура - параметры, влияющие на результат отчета.
//  МакетКомпоновки         - МакетКомпоновкиДанных - созданный в результате компоновки макет компоновки.
//  ЭлементРезультата       - ЭлементРезультатаКомпоновкиДанных - следующий элемент результата компоновки.
//  ДанныеРасшифровкиОбъект - ДанныеРасшифровкиКомпоновкиДанных - данные расшифровки.
//  СтандартнаяОбработка    - Булево - признак использования стандартного вывода элемента компоновки.
//  Результат               - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПередВыводомЭлементаРезультата(ПроцессорВывода, ПроцессорКомпоновки, ПараметрыОтчета, МакетКомпоновки, ЭлементРезультата, ДанныеРасшифровкиОбъект, СтандартнаяОбработка, Результат) Экспорт
	
	Если ЭлементРезультата.Макет = ПараметрыОтчета.МакетТитула Тогда
		Если ПараметрыОтчета.Свойство("НачалоОбласти") Тогда
			ЗадатьОбластьПечати(Результат, ПараметрыОтчета.НачалоОбласти, ПараметрыОтчета.ОбъектыПечати, ПараметрыОтчета.ОбъектОбласти);
		КонецЕсли;
		ПараметрыОтчета.Вставить("НачалоОбласти", Результат.ВысотаТаблицы + 1);
		ЗначенияПараметров = ОтчетыБольничнаяАптека.ПолучитьЗначенияРасшифровки(
			ДанныеРасшифровкиОбъект, ЭлементРезультата.ЗначенияПараметров, ПараметрыОтчета.ПутиКПараметрам);
		ПараметрыОтчета.Вставить("ОбъектОбласти", ЗначенияПараметров.НоменклатураРасшифровка);
		
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
		
		Если Не ПараметрыОтчета.ВыводитьТитульныйЛист Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли ЭлементРезультата.Макет = ПараметрыОтчета.МакетШапки Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры, влияющие на результат отчета.
//  Результат       - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	Если ПараметрыОтчета.Свойство("НачалоОбласти") Тогда
		ЗадатьОбластьПечати(Результат, ПараметрыОтчета.НачалоОбласти, ПараметрыОтчета.ОбъектыПечати, ПараметрыОтчета.ОбъектОбласти);
	КонецЕсли;
	
	ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ДополнительныеПараметры", Новый Структура);
	ДополнительныеПараметры.Вставить("ОбъектыПечати", ПараметрыОтчета.ОбъектыПечати);
	ПараметрыОтчета.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ОтчетыБольничнаяАптека.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция СформироватьТаблицуДляВывода(ДеревоРезультат, ПараметрыОтчета)
	
	ТаблицаПриход = Неопределено;
	ТаблицаРасход = Неопределено;
	ТаблицаДляВывода = ПолучитьПустуюТаблицуДляВывода(ПараметрыОтчета.СхемаКомпоновкиДанных, ТаблицаПриход, ТаблицаРасход);
	
	Для Каждого ГруппировкаНоменклатура Из ДеревоРезультат.Строки Цикл
		
		ОбщиеДанныеВывода = Новый Структура;
		
		СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ГруппировкаНоменклатура.Организация, ПараметрыОтчета.ДатаОкончания);
		ОбщиеДанныеВывода.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЮрФизЛице));
		
		ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(ГруппировкаНоменклатура.Номенклатура, ПараметрыОтчета.УчетВОтделении);
		Коэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ГруппировкаНоменклатура.Номенклатура, ЕдиницаИзмерения, 1);
		
		ФормаВыпускаЕдиницаИзмерения = ЕдиницаИзмерения;
		ДанныеПрепарата = НоменклатураСервер.ОписаниеНоменклатуры(ГруппировкаНоменклатура.Номенклатура);
		Если ДанныеПрепарата.ЭтоЛекарственноеСредство Тогда
			Если ЗначениеЗаполнено(ДанныеПрепарата.ТорговоеНаименование) Тогда
				НаименованиеНоменклатуры = ДанныеПрепарата.ТорговоеНаименование;
			Иначе
				НаименованиеНоменклатуры = ДанныеПрепарата.ДействующиеВеществаМНН;
			КонецЕсли;
			ФормаВыпускаЕдиницаИзмерения = Строка(ДанныеПрепарата.ФормаВыпуска) + ", " + ФормаВыпускаЕдиницаИзмерения;
		Иначе
			НаименованиеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппировкаНоменклатура.Номенклатура, "НаименованиеПолное");
		КонецЕсли;
		
		ОбщиеДанныеВывода.Вставить("НаименованиеНоменклатуры", НаименованиеНоменклатуры);
		ОбщиеДанныеВывода.Вставить("ФормаВыпуска", ФормаВыпускаЕдиницаИзмерения);
		
		КоличествоПриходныхОпераций = 0;
		КоличествоРасходныхОпераций = 0;
		
		Для Каждого СтрокаВидаДвижения Из ГруппировкаНоменклатура.Строки Цикл
			Если СтрокаВидаДвижения.ВидДвижения = "Приход" Тогда
				Приходы = ПолучитьДанныеПриходов(ТаблицаПриход, СтрокаВидаДвижения.Строки, Коэффициент);
				КоличествоПриходныхОпераций = Приходы.Количество();
			ИначеЕсли СтрокаВидаДвижения.ВидДвижения = "Расход" Тогда
				Расходы = ПолучитьДанныеРасходов(ТаблицаРасход, СтрокаВидаДвижения.Строки, Коэффициент);
				КоличествоРасходныхОпераций = Расходы.Количество();
			КонецЕсли;
		КонецЦикла;
		
		КоличествоСопоставленныхДокументов = Мин(КоличествоПриходныхОпераций, КоличествоРасходныхОпераций);
		
		Для ИндексСоответствия = 0 По КоличествоСопоставленныхДокументов - 1 Цикл
			СтрокаВывода = ТаблицаДляВывода.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ГруппировкаНоменклатура,, "КоличествоПриход, КоличествоРасход, КоличествоНачальныйОстаток, КоличествоКонечныйОстаток");
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ОбщиеДанныеВывода);
			
			СтрокаПриход = Приходы[ИндексСоответствия];
			ЗаполнитьЗначенияСвойств(СтрокаВывода, СтрокаПриход);
			
			СтрокаРасход = Расходы[ИндексСоответствия];
			ЗаполнитьЗначенияСвойств(СтрокаВывода, СтрокаРасход);
		КонецЦикла;
		
		Для ИндексБезСоответствия = КоличествоСопоставленныхДокументов По Макс(КоличествоПриходныхОпераций, КоличествоРасходныхОпераций) - 1 Цикл
			СтрокаВывода = ТаблицаДляВывода.Добавить();
			Если КоличествоПриходныхОпераций > КоличествоРасходныхОпераций Тогда
				ДобавляемаяСтрока = Приходы[ИндексБезСоответствия];
			Иначе
				ДобавляемаяСтрока = Расходы[ИндексБезСоответствия];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ГруппировкаНоменклатура,, "КоличествоПриход, КоличествоРасход, КоличествоНачальныйОстаток, КоличествоКонечныйОстаток");
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ОбщиеДанныеВывода);
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ДобавляемаяСтрока);
		КонецЦикла;
		
		ВыведеноСтрок = Макс(КоличествоПриходныхОпераций, КоличествоРасходныхОпераций);
		Если ВыведеноСтрок = 0 Тогда
			ВыведеноСтрок = 1;
			СтрокаВывода = ТаблицаДляВывода.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ГруппировкаНоменклатура,, "КоличествоПриход, КоличествоРасход, КоличествоНачальныйОстаток, КоличествоКонечныйОстаток");
			ЗаполнитьЗначенияСвойств(СтрокаВывода, ОбщиеДанныеВывода);
		КонецЕсли;
		
		ПерваяСтрока = ТаблицаДляВывода[ТаблицаДляВывода.Количество() - ВыведеноСтрок];
		ПерваяСтрока.Месяц = ПараметрыОтчета.ДатаНачала;
		ПерваяСтрока.КоличествоНачальныйОстаток = ГруппировкаНоменклатура.КоличествоНачальныйОстаток;
		ПерваяСтрока.КоличествоНачальныйОстаток = ПерваяСтрока.КоличествоНачальныйОстаток / Коэффициент;
		ПоследняяСтрока = ТаблицаДляВывода[ТаблицаДляВывода.Количество() - 1];
		ПоследняяСтрока.КоличествоКонечныйОстаток = ГруппировкаНоменклатура.КоличествоКонечныйОстаток;
		ПоследняяСтрока.КоличествоКонечныйОстаток = ПоследняяСтрока.КоличествоКонечныйОстаток / Коэффициент;
		
	КонецЦикла;
		
	Возврат ТаблицаДляВывода;
	
КонецФункции

Функция ПолучитьПустуюТаблицуДляВывода(СхемаКомпоновкиДанных, ТаблицаПриход = Неопределено, ТаблицаРасход = Неопределено)
	
	ТаблицаВывода = Новый ТаблицаЗначений;
	ТаблицаПриход = Новый ТаблицаЗначений;
	ТаблицаРасход = Новый ТаблицаЗначений;
	
	Для Каждого ПолеТаблицы Из СхемаКомпоновкиДанных.НаборыДанных[0].Поля Цикл
		ТаблицаВывода.Колонки.Добавить(ПолеТаблицы.Поле, ПолеТаблицы.ТипЗначения);
		Если СтрЗаканчиваетсяНа(ПолеТаблицы.Поле, "Приход") Тогда
			ТаблицаПриход.Колонки.Добавить(ПолеТаблицы.Поле, ПолеТаблицы.ТипЗначения);
		ИначеЕсли СтрЗаканчиваетсяНа(ПолеТаблицы.Поле, "Расход") Тогда
			ТаблицаРасход.Колонки.Добавить(ПолеТаблицы.Поле, ПолеТаблицы.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВывода;
	
КонецФункции

Функция ПолучитьДанныеПриходов(ТаблицаПриход, Данные, Коэффициент)
	
	Таблица = ТаблицаПриход.СкопироватьКолонки();
	
	Для Каждого Регистратор Из Данные Цикл
		Для Каждого Строка Из Регистратор.Строки Цикл
			
			Приход = Таблица.Добавить();
			Для Каждого Колонка Из Таблица.Колонки Цикл
				ИмяКолонкиВДанных = Лев(Колонка.Имя, СтрНайти(Колонка.Имя, "Приход", НаправлениеПоиска.СКонца) - 1);
				ЗначениеКолонки = Новый Структура(ИмяКолонкиВДанных);
				ЗаполнитьЗначенияСвойств(ЗначениеКолонки, Строка);
				Приход[Колонка.Имя] = ЗначениеКолонки[ИмяКолонкиВДанных];
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Приход.РегистраторПриход) Тогда
				ДатаНомер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Приход.РегистраторПриход, "Номер, Дата");
				Приход.НомерДатаДокументаПриход = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '№ %1 от %2'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДатаНомер.Номер), Формат(ДатаНомер.Дата, "ДЛФ=D"));
				Приход.ОписаниеПриход = ""
					+ Приход.ХозяйственнаяОперацияПриход
					+ ?(ЗначениеЗаполнено(Строка.Поставщик), " " + Строка.Поставщик, "")
					+ ?(ЗначениеЗаполнено(Строка.ПоставщикАналитика), " " + Строка.ПоставщикАналитика, "");
			КонецЕсли;
			
			Приход.КоличествоПриход = Строка.КоличествоПриход;
			Приход.КоличествоПриход = Приход.КоличествоПриход / Коэффициент;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьДанныеРасходов(ТаблицаРасход, Данные, Коэффициент)
	
	Таблица = ТаблицаРасход.СкопироватьКолонки();
	
	Для Каждого Регистратор Из Данные Цикл
		Для Каждого Строка Из Регистратор.Строки Цикл
			
			Расход = Таблица.Добавить();
			Для Каждого Колонка Из Таблица.Колонки Цикл
				ИмяКолонкиВДанных = Лев(Колонка.Имя, СтрНайти(Колонка.Имя, "Расход", НаправлениеПоиска.СКонца) - 1);
				ЗначениеКолонки = Новый Структура(ИмяКолонкиВДанных);
				ЗаполнитьЗначенияСвойств(ЗначениеКолонки, Строка);
				Расход[Колонка.Имя] = ЗначениеКолонки[ИмяКолонкиВДанных];
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Расход.РегистраторРасход) Тогда
				ДатаНомер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Расход.РегистраторРасход, "Номер, Дата");
				Расход.ДатаДокументаРасход = ДатаНомер.Дата;
				Расход.НомерДокументаРасход = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДатаНомер.Номер);
				Расход.ОписаниеРасход = Расход.НомерДокументаРасход + "("
					+ Расход.ХозяйственнаяОперацияРасход
					+ ?(ЗначениеЗаполнено(Строка.Получатель), " " + Строка.Получатель, "")
					+ ?(ЗначениеЗаполнено(Строка.ПолучательАналитика), " " + Строка.ПолучательАналитика, "")
					+ ")";
			КонецЕсли;
			
			Расход.КоличествоРасход = Строка.КоличествоРасход;
			Расход.КоличествоРасход = Расход.КоличествоРасход / Коэффициент;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(Номенклатура, УчетВОтделении) Экспорт
	
	Если Номенклатура <> Неопределено Тогда
		Возврат ОпределитьЕдиницуИзмеренияДляОтчета(Номенклатура, УчетВОтделении);
	Иначе
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ОпределитьЕдиницуИзмеренияДляОтчета(Номенклатура, УчетВОтделении)
	
	Если УчетВОтделении Тогда
		Возврат НоменклатураСервер.ОсновнаяЕдиницаИзмерения(Номенклатура, НоменклатураКлиентСервер.ВидЕдиницы_МинимальнаяЕдиница());
	КонецЕсли;
	
	Возврат НоменклатураСервер.ОсновнаяЕдиницаИзмерения(Номенклатура);
	
КонецФункции

Процедура ЗадатьОбластьПечати(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка)
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Объект_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли