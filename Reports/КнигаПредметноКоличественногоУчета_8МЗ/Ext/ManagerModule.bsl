#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Вызывает модуль менеджера отчета для заполнения его настроек.
//   Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   ОтчетМетаданные - ОбъектМетаданных - Метаданные отчета.
//
// Важно:
//   Для использования в модуле менеджера отчета должна быть размещена экспортная процедура по шаблону:
//      // Настройки размещения в панели отчетов.
//      //
//      // Параметры:
//      //   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//      //   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//      //       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//      //       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Описание:
//      //   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Вспомогательные методы:
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//      //
//      // Примеры:
//      //
//      //  1. Установка описания варианта.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//      //
//      //  2. Отключение варианта отчета.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Включен = Ложь;
//      //
//      Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
//      	// Код процедуры.
//      КонецПроцедуры
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	// Эти варианты отчета по умолчанию видны в панели отчетов
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	НастройкиВарианта.Описание = НСтр("ru = 'Книга предметно-количественного учета аптекарских запасов (Форма №8-МЗ)'");
	
КонецПроцедуры

// Возвращает признаки переопределения стандартного формирования отчета.
//
// Возвращаемое значение:
//  ПараметрыИсполнения - Структура - признаки использования методов формирования отчета.
//                      Каждый метод описывается в модуле менеджера отчета с именем,
//                      образованным от ключа структуры без приставки Использовать.
//    * ИспользоватьВнешниеНаборыДанных            - Булево - признак использования внешних наборов данных,
//                                                            полученных в результате выполнения указанного метода.
//    * ИспользоватьПриВыводеЗаголовка             - Булево - признак переопределения стандартного метода формирования заголовка отчета.
//                                                            Имеет смысл, если ВыводитьЗаголовок = Истина.
//    * ИспользоватьПриВыводеПодвала               - Булево - признак переопределения стандартного метода формирования подвала отчета.
//                                                            Имеет смысл, если ВыводитьПодвал = Истина.
//    * ИспользоватьПередКомпоновкойМакета         - Булево - признак выполнения дополнительных действий перед компоновкой макета.
//                                                            Имеет смысл, если необходимо изменить настройки отчета перед получением макета компоновки данных.
//    * ИспользоватьПослеКомпоновкиМакета          - Булево - признак выполнения дополнительных действий после компоновки макета.
//                                                            Имеет смысл, если необходимо изменить полученный макет компоновки данных.
//    * ИспользоватьПередВыводомЭлементаРезультата - Булево - признак выполнения дополнительных действий перед выводом элемента результата компоновки.
//                                                            Имеет смысл, если необходимо обработать элемент результата компоновки перед выводом.
//    * ИспользоватьПослеВыводаРезультата          - Булево - признак переопределения стандартного метода ОтчетыБольничнаяАптека.ПослеВыводаРезультата.
//    * ИспользоватьДанныеРасшифровки              - Булево - признак использования данных расшифровки отчета.
//                                                            Не имеет отдельного метода переопределения данных расшифровки.
//    * ИспользоватьПривилегированныйРежим         - Булево - признак использования привилегированного режима при выводе элементов результата компоновки.
//                                                            Не имеет отдельного метода.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыИсполнения = Новый Структура;
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеЗаголовка"    , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеКомпоновкиМакета" , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьДанныеРасшифровки"     , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПередВыводомЭлементаРезультата" , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеВыводаРезультата" , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	
	Возврат ПараметрыИсполнения;
	
КонецФункции

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - параметры, влияющие на результат отчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//  Результат           - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Период        = ПараметрыОтчета.Период;
	Организация   = ПараметрыОтчета.Организация;
	МакетыОтчета  = ПараметрыОтчета.МакетыОтчета;
	
	Если Не ЗначениеЗаполнено(Организация) И ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	ПодразделениеОрганизации = ПараметрыОтчета.ПодразделениеОрганизации;
	ИсточникФинансирования = ПараметрыОтчета.ИсточникФинансирования;
	
	ВестиУчетПоИсточникамФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
	ОбластьШапки = МакетыОтчета.ПФ_MXL_8_МЗ.ПолучитьОбласть("Титул");
	
	// Выведем заголовок.
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, КонецГода(Период));
	
	ОбластьШапки.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьШапки.Параметры.Организация  = Организация;
	ОбластьШапки.Параметры.ГодОтчета    = Год(Период);
	ОтчетыБольничнаяАптека.ВывестиОбластьВТабличныйДокумент(Результат, ОбластьШапки);
	
	ТекстОтбора = "";
	Если ВестиУчетПоИсточникамФинансирования И ЗначениеЗаполнено(ИсточникФинансирования) Тогда
		ТекстОтбораИсточника = НСтр("ru = 'Источник финансирования Равно'") + " """ + ИсточникФинансирования + """";
		Если СтрНайти(Строка(КомпоновщикНастроек.Настройки.Отбор), ТекстОтбораИсточника) = 0 Тогда
			ТекстОтбора = ТекстОтбораИсточника;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыБольничнаяАптека.ВывестиОтборВТабличныйДокумент(Результат, КомпоновщикНастроек, ТекстОтбора);
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - параметры, влияющие на результат отчета.
//  Схема               - СхемаКомпоновкиДанных - схема компоновки, на основании которой будет выполняться отчет.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", ПараметрыОтчета.Период);
	
	СкладыАптеки = ПолучитьОтборПоСкладам(КомпоновщикНастроек);
	ПараметрыДанных.УстановитьЗначениеПараметра("СкладыАптеки", СкладыАптеки);
	
	ВестиУчетПоИсточникамФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.Организация, "###ОтборПоОрганизации###", ЗначениеЗаполнено(ПараметрыОтчета.Организация));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ИсточникФинансирования", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.ИсточникФинансирования, "###ОтборПоИсточникуФинансирования###", ВестиУчетПоИсточникамФинансирования И ЗначениеЗаполнено(ПараметрыОтчета.ИсточникФинансирования));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Склад", ВидСравненияКомпоновкиДанных.ВСписке, СкладыАптеки, "###ОтборПоСкладу###", Истина);
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета  - Структура - параметры, влияющие на результат отчета.
//  МакетКомпоновки  - МакетКомпоновкиДанных - макет компоновки данных отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПараметрыОтчета.Вставить("МакетГруппировкиНоменклатура");
	ПараметрыОтчета.Вставить("МакетШапкиПриход");
	ПараметрыОтчета.Вставить("МакетГруппировкиПриход");
	ПараметрыОтчета.Вставить("МакетЗаголовкаГруппировкиРасход");
	
	ТелоГруппировкиНоменклатура = ОтчетыБольничнаяАптека.ПолучитьГруппировкиПоПолюГруппировки(МакетКомпоновки, "Номенклатура")[0].Тело;
	
#Область ОформлениеСекцииПриход
	
	// Удаление заголовка "ПРИХОД"
	Пока МакетКомпоновки.Тело.Количество() > 1 Цикл
		МакетКомпоновки.Тело.Удалить(0);
	КонецЦикла;
	
	Если ПараметрыОтчета.ВыводитьПриход Тогда
		
		МакетГруппировкиНоменклатура = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Номенклатура")[0];
		ПараметрыОтчета.Вставить("МакетГруппировкиНоменклатура", МакетГруппировкиНоменклатура.Имя);
		
		ЕдиницаИзмеренияЯчейки = МакетГруппировкиНоменклатура.Макет[1].Ячейки;
		НоменклатураЯчейки = МакетГруппировкиНоменклатура.Макет[0].Ячейки;
		Для Каждого КопируемаяЯчейка Из ЕдиницаИзмеренияЯчейки Цикл
			НоваяЯчейка = НоменклатураЯчейки.Добавить();
			Для Каждого ОбластьЯчейки Из КопируемаяЯчейка.Элементы Цикл
				НоваяЯчейка.Элементы.Добавить(ТипЗнч(ОбластьЯчейки)).Значение = ОбластьЯчейки.Значение;
			КонецЦикла;
			ОтчетыБольничнаяАптека.СкопироватьОформлениеОбластиКомпоновкиДанных(НоваяЯчейка.Оформление, КопируемаяЯчейка.Оформление);
		КонецЦикла;
		МакетГруппировкиНоменклатура.Макет.Удалить(1);// ЕдиницаИзмерения
		МакетОстатокНаНачало = МакетГруппировкиНоменклатура.Макет[1];
		МакетОстатокНаНачало.ИдентификаторТаблицы = "";
		МакетОстатокНаНачало.Ячейки[0].Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 35);
		
		МакетГруппировкиПриход = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Приход")[0];
		Для Каждого Параметр Из МакетГруппировкиПриход.Параметры Цикл
			Если ТипЗнч(Параметр) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
				Если Параметр.Выражение = "Приход.Регистратор.Дата" Тогда
					Параметр.Выражение = "Формат(Приход.Регистратор.Дата, ""ДЛФ=D"")";
				ИначеЕсли Параметр.Выражение = "Приход.Регистратор.Номер" Тогда
					Параметр.Выражение = "ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Приход.Регистратор.Номер)";
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
				Параметр.ВыраженияПолей[0].Выражение = "Приход.Регистратор";
				Параметр.ВыраженияПолей[0].Поле = "Регистратор";
			КонецЕсли;
		КонецЦикла;
		
		ИндексМакетаГруппировкиПриход = МакетКомпоновки.Макеты.Индекс(МакетГруппировкиПриход);
		МакетШапкиПриход = МакетКомпоновки.Макеты[ИндексМакетаГруппировкиПриход - 3];
		СтрокаТаблицы = МакетШапкиПриход.Макет.Добавить(Тип("СтрокаТаблицыОбластиКомпоновкиДанных"));
		СтрокаТаблицы.ИдентификаторТаблицы = МакетШапкиПриход.Макет[0].ИдентификаторТаблицы;
		НомерКолонки = 1;
		Для Каждого Ячейка Из МакетШапкиПриход.Макет[0].Ячейки Цикл
			НоваяЯчейка = СтрокаТаблицы.Ячейки.Добавить();
			ОбластьЯчейки = НоваяЯчейка.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			ОбластьЯчейки.Значение = НомерКолонки;
			ОтчетыБольничнаяАптека.СкопироватьОформлениеОбластиКомпоновкиДанных(НоваяЯчейка.Оформление, Ячейка.Оформление);
			НоваяЯчейка.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
		
		ИндексГруппировкиПриход = ТелоГруппировкиНоменклатура.Индекс(ОтчетыБольничнаяАптека.ПолучитьГруппировкиПоПолюГруппировки(МакетКомпоновки, "Приход")[0]);
		МакетОбласти = ТелоГруппировкиНоменклатура.Вставить(ИндексГруппировкиПриход - 1, Тип("МакетОбластиМакетаКомпоновкиДанных"));
		МакетОбласти.Макет = МакетКомпоновки.Макеты[ИндексМакетаГруппировкиПриход - 1].Имя;
		МакетОбласти = ТелоГруппировкиНоменклатура.Вставить(ИндексГруппировкиПриход - 1, Тип("МакетОбластиМакетаКомпоновкиДанных"));
		МакетОбласти.Макет = МакетКомпоновки.Макеты[ИндексМакетаГруппировкиПриход - 2].Имя;
		
		ПараметрыОтчета.Вставить("МакетШапкиПриход"      , МакетШапкиПриход.Имя);
		ПараметрыОтчета.Вставить("МакетГруппировкиПриход", МакетГруппировкиПриход.Имя);
		
		Если Не ПараметрыОтчета.ВыводитьРасход Тогда
			ИндексГруппировкиПриход = ТелоГруппировкиНоменклатура.Индекс(ОтчетыБольничнаяАптека.ПолучитьГруппировкиПоПолюГруппировки(МакетКомпоновки, "Приход")[0]);
			Для Счетчик = ИндексГруппировкиПриход + 1 По ТелоГруппировкиНоменклатура.Количество() Цикл
				ТелоГруппировкиНоменклатура.Удалить(ИндексГруппировкиПриход + 1);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти // ОформлениеСекцииПриход
	
#Область ОформлениеСекцииРасход
	
	Если ПараметрыОтчета.ВыводитьРасход Тогда
		
		Для Каждого Элемент Из ТелоГруппировкиНоменклатура Цикл
			Если ТипЗнч(Элемент) = Тип("ТаблицаМакетаКомпоновкиДанных") И Элемент.Имя = "Расход" Тогда
				
				МакетШапкиПериодМесяц = МакетКомпоновки.Макеты.Найти(Элемент.МакетШапки);
				МакетШапкиПериодМесяц.Макет.Удалить(1);
				МакетШапкиПериодМесяц.Макет[0].Ячейки[0].Элементы[0].Значение =
					НСтр("ru = 
					|'      Числа
					|
					|Месяцы'");
				
				Если Элемент.Идентификатор = "Расход" Тогда
					
					ЗаголовокГруппировкиРасход = ТелоГруппировкиНоменклатура[ТелоГруппировкиНоменклатура.Индекс(Элемент) - 2];
					ПараметрыОтчета.Вставить("МакетЗаголовкаГруппировкиРасход", ЗаголовокГруппировкиРасход.Макет);
					
					ОтступОтЗаголовка = МакетКомпоновки.Макеты.Найти(ТелоГруппировкиНоменклатура[ТелоГруппировкиНоменклатура.Индекс(Элемент) - 1].Макет);
					Параметр = ОтступОтЗаголовка.Параметры.Добавить(Тип("ПараметрОбластиВыражениеКомпоновкиДанных"));
					Параметр.Выражение = "НачальныйКонечныйОстаток.Номенклатура";
					Параметр.Имя = "Номенклатура";
					Параметр = ОтступОтЗаголовка.Параметры.Добавить(Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных"));
					ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
					ВыражениеПоля.Выражение = "НачальныйКонечныйОстаток.Номенклатура";
					ВыражениеПоля.Поле = "Номенклатура";
					Параметр.Имя = "НоменклатураРасшифровка";
					Параметр.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение;
					Ячейка = ОтступОтЗаголовка.Макет[0].Ячейки[0];
					Ячейка.Элементы[0].Значение = Новый ПараметрКомпоновкиДанных("Номенклатура");
					Ячейка.Оформление.УстановитьЗначениеПараметра("Расшифровка", Новый ПараметрКомпоновкиДанных("НоменклатураРасшифровка"));
					
					Параметр = ОтступОтЗаголовка.Параметры.Добавить(Тип("ПараметрОбластиВыражениеКомпоновкиДанных"));
					Параметр.Выражение = "НачальныйКонечныйОстаток.ЕдиницаИзмеренияПредставление";
					Параметр.Имя = "ЕдиницаИзмерения";
					Параметр = ОтступОтЗаголовка.Параметры.Добавить(Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных"));
					ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
					ВыражениеПоля.Выражение = "НачальныйКонечныйОстаток.Номенклатура.ЕдиницаИзмерения";
					ВыражениеПоля.Поле = "Номенклатура.ЕдиницаИзмерения";
					Параметр.Имя = "ЕдиницаИзмеренияРасшифровка";
					Параметр.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение;
					Ячейка = ОтступОтЗаголовка.Макет[0].Ячейки.Добавить();
					Ячейка.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных")).Значение = Новый ПараметрКомпоновкиДанных("ЕдиницаИзмерения");
					Ячейка.Оформление.УстановитьЗначениеПараметра("Расшифровка", Новый ПараметрКомпоновкиДанных("ЕдиницаИзмеренияРасшифровка"));
					
				ИначеЕсли Элемент.Идентификатор = "Расход2" Тогда
					
					ОтступОтЗаголовкаВтораяПоловина = МакетКомпоновки.Макеты.Найти(ТелоГруппировкиНоменклатура[ТелоГруппировкиНоменклатура.Индекс(Элемент) - 1].Макет);
					Ячейка = ОтступОтЗаголовкаВтораяПоловина.Макет[0].Ячейки[0];
					Ячейка.Оформление.Элементы.Найти("ВертикальныйУровень").Использование = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		МакетыГруппировкиДень = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "ПериодДень");
		Для Каждого МакетГруппировкиДень Из МакетыГруппировкиДень Цикл
			МакетГруппировкиДень.Макет.Удалить(1);
			МакетГруппировкиДень.Макет[0].Ячейки[0].Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		КонецЦикла;
		
		МакетыГруппировкаКонечныйОстаток = ОтчетыБольничнаяАптека.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "КонечныйОстаток");
		Для Каждого МакетГруппировкаКонечныйОстаток Из МакетыГруппировкаКонечныйОстаток Цикл
			МакетГруппировкаКонечныйОстаток.Макет.Удалить(0);
			МакетГруппировкаКонечныйОстаток.Макет[0].Ячейки[0].Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
			МакетГруппировкаКонечныйОстаток.Макет[0].Ячейки[1].Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		КонецЦикла;
		
		Если Не ПараметрыОтчета.ВыводитьПриход Тогда
			ИндексЗаголовкаРасход = МакетКомпоновки.Тело[0].Тело.Индекс(ЗаголовокГруппировкиРасход);
			Для Счетчик = 1 По ИндексЗаголовкаРасход Цикл
				ТелоГруппировкиНоменклатура.Удалить(0);
			КонецЦикла;
			Ячейка = ОтступОтЗаголовка.Макет[0].Ячейки[0];
			Ячейка.Оформление.УстановитьЗначениеПараметра("ВертикальныйУровень", 0);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти // ОформлениеСекцииРасход
	
	Если Не ПараметрыОтчета.ВыводитьПриход И Не ПараметрыОтчета.ВыводитьРасход Тогда
		МакетКомпоновки.Тело.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета         - Структура - параметры, влияющие на результат отчета.
//  МакетКомпоновки         - МакетКомпоновкиДанных - созданный в результате компоновки макет компоновки.
//  ЭлементРезультата       - ЭлементРезультатаКомпоновкиДанных - следующий элемент результата компоновки.
//  ДанныеРасшифровкиОбъект - ДанныеРасшифровкиКомпоновкиДанных - данные расшифровки.
//  СтандартнаяОбработка    - Булево - признак использования стандартного вывода элемента компоновки.
//  Результат               - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПередВыводомЭлементаРезультата(ПроцессорВывода, ПроцессорКомпоновки, ПараметрыОтчета, МакетКомпоновки, ЭлементРезультата, ДанныеРасшифровкиОбъект, СтандартнаяОбработка, Результат) Экспорт
	
	КоличествоЭлементовШапкиПриход = 4;
	Если ЭлементРезультата.Макет = ПараметрыОтчета.МакетГруппировкиНоменклатура
	 Или ЭлементРезультата.Макет = ПараметрыОтчета.МакетЗаголовкаГруппировкиРасход Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	ИначеЕсли ЭлементРезультата.Макет = ПараметрыОтчета.МакетШапкиПриход Тогда
		СтандартнаяОбработка = Ложь;
		НачалоИКонец = Новый ЭлементРезультатаКомпоновкиДанных;
		НачалоИКонец.ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Начало;
		НачалоИКонец.РасположениеВложенныхЭлементов = РасположениеВложенныхЭлементовРезультатаКомпоновкиДанных.Горизонтально;
		
		ПроцессорВывода.ВывестиЭлемент(НачалоИКонец);
		Для Счетчик = 1 По КоличествоЭлементовШапкиПриход Цикл
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		КонецЦикла;
		
		НачалоИКонец.ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Конец;
		ПроцессорВывода.ВывестиЭлемент(НачалоИКонец);
		
	ИначеЕсли ЭлементРезультата.Макет = ПараметрыОтчета.МакетГруппировкиПриход Тогда
		
		ИсходныйЭлемент = ЭлементРезультата;
		
		НачалоИКонец = Новый ЭлементРезультатаКомпоновкиДанных;
		НачалоИКонец.ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Начало;
		НачалоИКонец.РасположениеВложенныхЭлементов = РасположениеВложенныхЭлементовРезультатаКомпоновкиДанных.Горизонтально;
		ПроцессорВывода.ВывестиЭлемент(НачалоИКонец);
		
		Индекс = 0;
		Пока ЭлементРезультата.Макет = ПараметрыОтчета.МакетГруппировкиПриход Цикл
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			ЭлементРезультатаКонец = ПроцессорКомпоновки.Следующий();
			ЭлементРезультатаНачало = ПроцессорКомпоновки.Следующий();
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			Индекс = Индекс + 1;
			Если Индекс % КоличествоЭлементовШапкиПриход = 0 Тогда
				НачалоИКонец.ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Конец;
				ПроцессорВывода.ВывестиЭлемент(НачалоИКонец);
				НачалоИКонец.ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Начало;
				ПроцессорВывода.ВывестиЭлемент(НачалоИКонец);
			КонецЕсли;
		КонецЦикла;
		
		НачалоПовтора = Индекс % КоличествоЭлементовШапкиПриход;
		Если НачалоПовтора > 0 Тогда
			ИсходныйЭлемент.ЗначенияПараметров.Очистить();
			Для Счетчик = НачалоПовтора + 1 По КоличествоЭлементовШапкиПриход Цикл
				ПроцессорВывода.ВывестиЭлемент(ИсходныйЭлемент);
			КонецЦикла;
		КонецЕсли;
		
		НачалоИКонец.ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Конец;
		ПроцессорВывода.ВывестиЭлемент(НачалоИКонец);
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКонец);
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаНачало);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры, влияющие на результат отчета.
//  Результат       - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	ОтчетыБольничнаяАптека.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Обработчик расшифровки отчета
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ТипРасшифровки = ТипЗнч(Расшифровка);
	Если ТипРасшифровки <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Если ОбщегоНазначения.ЭтоСсылка(ТипРасшифровки) Тогда
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение", Расшифровка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	ПоляРасшифровки = ОтчетыБольничнаяАптека.ПолучитьПоляРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	
	ПервыйЭлемент  = Неопределено;
	ЕстьПоказатель = Ложь;
	
	Для Каждого Элемент Из ПоляРасшифровки Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "КоличествоРасход" Тогда 
				ПервыйЭлемент = Элемент;
			КонецЕсли;
			Если Элемент.Поле = "КоличествоРасход" Тогда
				ЕстьПоказатель = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЭлемент <> Неопределено Тогда
		Если ЕстьПоказатель Тогда
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
			
			// Передадим параметры заголовка и подвала
			ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);
			ДополнительныеСвойства.Вставить("ВыводитьПодвал", Истина);
			
			ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
			ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
			ДополнительныеСвойства.Вставить("ПодразделениеОрганизации", ОтчетОбъект.ПодразделениеОрганизации);
			ДополнительныеСвойства.Вставить("ИсточникФинансирования", ОтчетОбъект.ИсточникФинансирования);
			ДополнительныеСвойства.Вставить("ПоказыватьВсеГруппыПКУ", Истина);
			
			Месяц = Неопределено;
			ДеньМесяца = Неопределено;
			
			СписокПолейОтборов = Новый Массив;
			Для Каждого Отбор Из ПоляРасшифровки Цикл
				Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					
					ЗначениеОтбора = Отбор.Значение;
					Если ЗначениеОтбора = NULL Тогда
						Продолжить;
					КонецЕсли;
					
					ПолеОтбора = Отбор.Поле;
					Если ПолеОтбора = "ПериодМесяц" Тогда
						Месяц = ЗначениеОтбора;
					ИначеЕсли ПолеОтбора = "ПериодДень" Тогда
						ДеньМесяца = ЗначениеОтбора;
					Иначе
						ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, Отбор.Значение, ВидСравненияКомпоновкиДанных.Равно);
					КонецЕсли;
					СписокПолейОтборов.Добавить(ПолеОтбора);
				ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					
					ПолеОтбора     = Отбор.ЛевоеЗначение;
					ЗначениеОтбора = Отбор.ПравоеЗначение;
					Если СписокПолейОтборов.Найти(Строка(ПолеОтбора)) = Неопределено
					   И Отбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
					   И Не СтрНачинаетсяС(Отбор.Представление, "###") = 0 Тогда
						ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Месяц <> Неопределено Тогда
				Если ДеньМесяца = Неопределено Тогда
					ДополнительныеСвойства.Вставить("ДатаНачала"   , Месяц);
					ДополнительныеСвойства.Вставить("ДатаОкончания", КонецМесяца(Месяц));
				Иначе
					День = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Месяц, "ДЕНЬ", ДеньМесяца - 1);
					Если Месяц(День) = Месяц(Месяц) Тогда
						ДополнительныеСвойства.Вставить("ДатаНачала"   , День);
						ДополнительныеСвойства.Вставить("ДатаОкончания", День);
					Иначе
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СписокПунктовМеню = Новый СписокЗначений;
			СписокПунктовМеню.Добавить(Метаданные.Отчеты.ВедомостьВыборкиИзрасходованныхЛСПодлежащихПКУ_1МЗ.Имя, Метаданные.Отчеты.ВедомостьВыборкиИзрасходованныхЛСПодлежащихПКУ_1МЗ.Представление());
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			
			НастройкиРасшифровки = Новый Структура;
			НастройкиРасшифровки.Вставить(СписокПунктовМеню[0].Значение, ПользовательскиеНастройки);
			
			ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
			Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
			
		Иначе
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПервыйЭлемент.Значение)) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"     , ПервыйЭлемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОтборПоСкладам(КомпоновщикНастроек)
	
	СхемаКД = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	НаборДанных.Запрос = "
	|ВЫБРАТЬ
	|	Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады
	|ГДЕ
	|	ТипСклада В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.БольничнаяАптека),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин))
	|";
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле = "Склад";
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	Компоновщик.Настройки.Структура.Очистить();
	
	Группировка = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Склад");
	
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата.ВыгрузитьКолонку("Склад");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли