#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

// Вызывает модуль менеджера отчета для заполнения его настроек.
//   Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   ОтчетМетаданные - ОбъектМетаданных - Метаданные отчета.
//
// Важно:
//   Для использования в модуле менеджера отчета должна быть размещена экспортная процедура по шаблону:
//      // Настройки размещения в панели отчетов.
//      //
//      // Параметры:
//      //   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//      //   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//      //       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//      //       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Описание:
//      //   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Вспомогательные методы:
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//      //
//      // Примеры:
//      //
//      //  1. Установка описания варианта.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//      //
//      //  2. Отключение варианта отчета.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Включен = Ложь;
//      //
//      Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
//      	// Код процедуры.
//      КонецПроцедуры
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.Включен = Ложь;
	
КонецПроцедуры

// Добавляет команду отчета в список команд
//
// Параметры:
//  КомандыОтчетов     - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Функция ДобавитьКомандуОтчета(КомандыОтчетов) Экспорт
	
	МетаданныеОтчета = Метаданные.Отчеты.СостояниеВыполненияДокументов;
	
	Если ПравоДоступа("Просмотр", МетаданныеОтчета) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		КомандаОтчет.Идентификатор      = МетаданныеОтчета.ПолноеИмя();
		КомандаОтчет.Менеджер           = КомандаОтчет.Идентификатор;
		КомандаОтчет.Представление      = НСтр("ru = 'Состояние выполнения'");
		КомандаОтчет.Важность           = МенюОтчетыБольничнаяАптека.ПодменюОтчетыВажное();
		КомандаОтчет.ИмяПараметраФормы  = "ПараметрКоманды";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует отчет "Состояние выполнения документов" путем выполнения пакета запросов.
//
// Параметры:
// ПараметрыОтчета - Структура параметров отчета.
// АдресХранилища  - Строка - адрес помещения результата отчета.
//
Процедура СформироватьОтчетСостояниеВыполненияДокументов(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТаблицаОтчета = Новый ТабличныйДокумент;
	
	ВходящиеДокументы = ПараметрыОтчета.ВходящиеДокументы;
	
	МетаданныеМакета    = Метаданные.Отчеты.СостояниеВыполненияДокументов.Макеты.СостояниеВыполнения;
	Макет               = ПолучитьМакет(МетаданныеМакета.Имя);
	
	МетаданныеДокумента = ВходящиеДокументы[0].Метаданные();
	МенеджерДокумента   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
	
	ИменаОбластей = Новый СписокЗначений;
	ИменаОбластей.Добавить("ПоСпецификации"      , НСтр("ru = 'По спецификации'"));
	ИменаОбластей.Добавить("КЗаказу"             , НСтр("ru = 'К заказу'"));
	ИменаОбластей.Добавить("Заказано"            , НСтр("ru = 'Заказано'"));
	ИменаОбластей.Добавить("ЗаказаноБезСумм"     , НСтр("ru = 'Заказано'"));
	ИменаОбластей.Добавить("ВПроцессеОтгрузки"   , НСтр("ru = 'В процессе отгрузки'"));
	ИменаОбластей.Добавить("ВПроцессеПоступления", НСтр("ru = 'В процессе поступления'"));
	ИменаОбластей.Добавить("Поступило"           , НСтр("ru = 'Поступило'"));
	ИменаОбластей.Добавить("ПоступилоБезСумм"    , НСтр("ru = 'Поступило'"));
	ИменаОбластей.Добавить("Возвращено"          , НСтр("ru = 'Возвращено'"));
	ИменаОбластей.Добавить("Отменено"            , НСтр("ru = 'Отменено'"));
	ИменаОбластей.Добавить("ОтмененоБезСумм"     , НСтр("ru = 'Отменено'"));
	
	ДанныеОтчета = МенеджерДокумента.ПолучитьДанныеОтчетаСостоянияВыполненияДокументов(ВходящиеДокументы);
	
	ТаблицаОтчета.НачатьАвтогруппировкуСтрок();
	Для Каждого Документ Из ВходящиеДокументы Цикл
		
		Отбор = Новый Структура("Документ", Документ);
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТаблицаОтчета, Макет, "Документ", Отбор, 1);
		
		Для Каждого ИмяОбласти Из ИменаОбластей Цикл
			
			Данные = Неопределено;
			Если ДанныеОтчета.Свойство(ИмяОбласти.Значение, Данные) Тогда
				
				ДанныеЗаполнения = Данные.НайтиСтроки(Отбор);
				КоличествоСтрок = ДанныеЗаполнения.Количество();
				Если КоличествоСтрок = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Описание = СтрШаблон("%1 (%2)", ИмяОбласти.Представление, КоличествоСтрок);
				ДанныеОбластиОписание = Новый Структура("Описание", Описание);
				
				ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТаблицаОтчета, Макет, "Описание", ДанныеОбластиОписание, 2);
				
				ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТаблицаОтчета, Макет, "Шапка" + ИмяОбласти.Значение,, 3);
				
				Для Каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
					ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТаблицаОтчета, Макет, "Строки" + ИмяОбласти.Значение, СтрокаТаблицы, 3);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаОтчета.ЗакончитьАвтогруппировкуСтрок();
	
	ТаблицаОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ОтчетыБольничнаяАптека.ОбработкаРезультатаОтчета(МетаданныеМакета.ПолноеИмя(), ТаблицаОтчета);
	
	Результат = Новый Структура("ТаблицаОтчета", ТаблицаОтчета);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#КонецЕсли