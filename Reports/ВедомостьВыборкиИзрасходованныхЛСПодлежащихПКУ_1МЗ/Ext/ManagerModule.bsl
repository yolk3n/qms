#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Вызывает модуль менеджера отчета для заполнения его настроек.
//   Для вызова из процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Передается "как есть" из процедуры НастроитьВариантыОтчетов.
//   ОтчетМетаданные - ОбъектМетаданных - Метаданные отчета.
//
// Важно:
//   Для использования в модуле менеджера отчета должна быть размещена экспортная процедура по шаблону:
//      // Настройки размещения в панели отчетов.
//      //
//      // Параметры:
//      //   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//      //   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//      //       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//      //       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Описание:
//      //   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Вспомогательные методы:
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//      //
//      // Примеры:
//      //
//      //  1. Установка описания варианта.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//      //
//      //  2. Отключение варианта отчета.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Включен = Ложь;
//      //
//      Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
//      	// Код процедуры.
//      КонецПроцедуры
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	// Эти варианты отчета по умолчанию видны в панели отчетов
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	НастройкиВарианта.Описание = НСтр("ru = 'Ведомость выборки израсходованных ЛС подлежащих ПКУ (Форма №1-МЗ)'");
	
КонецПроцедуры

// Возвращает признаки переопределения стандартного формирования отчета.
//
// Возвращаемое значение:
//  ПараметрыИсполнения - Структура - признаки использования методов формирования отчета.
//                      Каждый метод описывается в модуле менеджера отчета с именем,
//                      образованным от ключа структуры без приставки Использовать.
//    * ИспользоватьВнешниеНаборыДанных            - Булево - признак использования внешних наборов данных,
//                                                            полученных в результате выполнения указанного метода.
//    * ИспользоватьПриВыводеЗаголовка             - Булево - признак переопределения стандартного метода формирования заголовка отчета.
//                                                            Имеет смысл, если ВыводитьЗаголовок = Истина.
//    * ИспользоватьПриВыводеПодвала               - Булево - признак переопределения стандартного метода формирования подвала отчета.
//                                                            Имеет смысл, если ВыводитьПодвал = Истина.
//    * ИспользоватьПередКомпоновкойМакета         - Булево - признак выполнения дополнительных действий перед компоновкой макета.
//                                                            Имеет смысл, если необходимо изменить настройки отчета перед получением макета компоновки данных.
//    * ИспользоватьПослеКомпоновкиМакета          - Булево - признак выполнения дополнительных действий после компоновки макета.
//                                                            Имеет смысл, если необходимо изменить полученный макет компоновки данных.
//    * ИспользоватьПередВыводомЭлементаРезультата - Булево - признак выполнения дополнительных действий перед выводом элемента результата компоновки.
//                                                            Имеет смысл, если необходимо обработать элемент результата компоновки перед выводом.
//    * ИспользоватьПослеВыводаРезультата          - Булево - признак переопределения стандартного метода ОтчетыБольничнаяАптека.ПослеВыводаРезультата.
//    * ИспользоватьДанныеРасшифровки              - Булево - признак использования данных расшифровки отчета.
//                                                            Не имеет отдельного метода переопределения данных расшифровки.
//    * ИспользоватьПривилегированныйРежим         - Булево - признак использования привилегированного режима при выводе элементов результата компоновки.
//                                                            Не имеет отдельного метода.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыИсполнения = Новый Структура;
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеЗаголовка"    , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьДанныеРасшифровки"     , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеПодвала"      , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеВыводаРезультата" , Истина);
	
	Возврат ПараметрыИсполнения;
	
КонецФункции

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - параметры, влияющие на результат отчета.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//  Результат           - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	ДатаНачала    = ПараметрыОтчета.ДатаНачала;
	ДатаОкончания = ПараметрыОтчета.ДатаОкончания;
	Организация   = ПараметрыОтчета.Организация;
	МакетыОтчета  = ПараметрыОтчета.МакетыОтчета;
	
	Если Не ЗначениеЗаполнено(Организация) И ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	ПодразделениеОрганизации = ПараметрыОтчета.ПодразделениеОрганизации;
	ИсточникФинансирования = ПараметрыОтчета.ИсточникФинансирования;
	
	ВестиУчетПоИсточникамФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
	ОбластьШапки = МакетыОтчета.ПФ_MXL_1МЗ.ПолучитьОбласть("Шапка");
	
	// Выведем заголовок.
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаОкончания);
	
	ОбластьШапки.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьШапки.Параметры.Организация  = Организация;
	ОбластьШапки.Параметры.Аптека       = ПодразделениеОрганизации;
	ОбластьШапки.Параметры.ДатаНач      = ДатаНачала;
	ОбластьШапки.Параметры.ДатаКон      = ДатаОкончания;
	ОтчетыБольничнаяАптека.ВывестиОбластьВТабличныйДокумент(Результат, ОбластьШапки);
	
	ТекстОтбора = "";
	Если ВестиУчетПоИсточникамФинансирования И ЗначениеЗаполнено(ИсточникФинансирования) Тогда
		ТекстОтбораИсточника = НСтр("ru = 'Источник финансирования Равно'") + " """ + ИсточникФинансирования + """";
		Если СтрНайти(Строка(КомпоновщикНастроек.Настройки.Отбор), ТекстОтбораИсточника) = 0 Тогда
			ТекстОтбора = ТекстОтбораИсточника;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыБольничнаяАптека.ВывестиОтборВТабличныйДокумент(Результат, КомпоновщикНастроек, ТекстОтбора);
	ОтчетыБольничнаяАптека.ВывестиГруппировкуВТабличныйДокумент(Результат, ПараметрыОтчета.Группировка);
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета     - Структура - параметры, влияющие на результат отчета.
//  Схема               - СхемаКомпоновкиДанных - схема компоновки, на основании которой будет выполняться отчет.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик для редактирования настроек отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
#Область ПараметрыИОтборы
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаНачала) Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", НачалоДня(ПараметрыОтчета.ДатаНачала));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаОкончания) Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецДня(ПараметрыОтчета.ДатаОкончания));
	КонецЕсли;
	
	ПараметрыДанных.УстановитьЗначениеПараметра("СкладыАптеки", ПолучитьОтборПоСкладам(КомпоновщикНастроек));
	
	ВестиУчетПоИсточникамФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.Организация, "###ОтборПоОрганизации###", ЗначениеЗаполнено(ПараметрыОтчета.Организация));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ПодразделениеОрганизации", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.ПодразделениеОрганизации, "###ОтборПоПодразделению###", ЗначениеЗаполнено(ПараметрыОтчета.ПодразделениеОрганизации));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ИсточникФинансирования", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.ИсточникФинансирования, "###ОтборПоИсточникуФинансирования###", ВестиУчетПоИсточникамФинансирования И ЗначениеЗаполнено(ПараметрыОтчета.ИсточникФинансирования));
	
	Если Не ПараметрыОтчета.ПоказыватьВсеГруппыПКУ Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ГруппаПКУ.ВыводитьВОтчетах", ВидСравненияКомпоновкиДанных.Равно, Истина, "###ГруппыПКУДляОтчетов###", Истина);
	КонецЕсли;
	
#КонецОбласти // ПараметрыИОтборы
	
#Область СтруктураОтчета
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ИмяПервойГруппировки = "ПерваяГруппировка";
	ИмяГруппировки = "Группировка";
	ПерваяГруппировка = Неопределено;
	Для Каждого Группировка Из ПараметрыОтчета.Группировка Цикл
		Если Не Группировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяГруппировка = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Если ПерваяГруппировка = Неопределено Тогда
			ПерваяГруппировка = Группировка;
			ТекущаяГруппировка.Имя = ИмяПервойГруппировки;
		Иначе
			ТекущаяГруппировка.Имя = ИмяГруппировки;
		КонецЕсли;
		ПолеГруппировки = ТекущаяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(Группировка.Поле);
		Если Группировка.ТипГруппировки = Перечисления.ТипыГруппировокОтчетов.СГруппами Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		ИначеЕсли Группировка.ТипГруппировки = Перечисления.ТипыГруппировокОтчетов.ТолькоГруппы Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
		Иначе
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЕсли;
		ТекущаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ТекущаяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		Структура = ТекущаяГруппировка.Структура;
	КонецЦикла;
	
	ГруппировкаНоменклатура = Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаНоменклатура.Имя = "Номенклатура";
	ПолеГруппировки = ГруппировкаНоменклатура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ГруппировкаНоменклатура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаНоменклатура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ДетальныеЗаписи = ГруппировкаНоменклатура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Имя = "ДетальныеЗаписи";
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ДобавляемыеПоля = Новый Массив;
	ДобавляемыеПоля.Добавить("Отделение");
	ДобавляемыеПоля.Добавить("НомерНакладной");
	ДобавляемыеПоля.Добавить("ДатаНакладной");
	ДобавляемыеПоля.Добавить("ДокументОтпуска");
	ДобавляемыеПоля.Добавить("СерияНоменклатуры");
	ДобавляемыеПоля.Добавить("Партия");
	Для Каждого Поле Из ДобавляемыеПоля Цикл
		ПолеВыбора = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
#КонецОбласти // СтруктураОтчета
	
#Область Оформление
	
	Если ПерваяГруппировка = Неопределено Тогда
		Для Каждого МакетЗаголовка Из Схема.МакетыЗаголовковГруппировок Цикл
			Если МакетЗаголовка.ИмяГруппировки = ИмяПервойГруппировки Тогда
				МакетЗаголовка.ИмяГруппировки = "Номенклатура";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
#КонецОбласти // Оформление
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры, влияющие на результат отчета.
//  Результат       - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПриВыводеПодвала(ПараметрыОтчета, Результат) Экспорт
	
	///////////////////////////////////////////////////////////////////////////////
	// Вывод подвала
	
	Область = ПараметрыОтчета.МакетыОтчета.ПФ_MXL_1МЗ.ПолучитьОбласть("Подвал");
	ОтчетыБольничнаяАптека.ВывестиОбластьВТабличныйДокумент(Результат, Область);
	
КонецПроцедуры

// Обработчик исполнения отчета.
// см. функцию ПолучитьПараметрыИсполненияОтчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры, влияющие на результат отчета.
//  Результат       - ТабличныйДокумент - результат выполнения отчета.
//
// см. процедуру ОтчетыБольничнаяАптека.СформироватьОтчет
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	Область = Результат.НайтиТекст(НСтр("ru = '№ п/п'"),,, Истина);
	Если Область <> Неопределено Тогда
		Результат.ФиксацияСверху = Область.Верх + 1;
	КонецЕсли;
	
	ОтчетыБольничнаяАптека.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОтборПоСкладам(КомпоновщикНастроек)
	
	СхемаКД = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	НаборДанных.Запрос = "
	|ВЫБРАТЬ
	|	Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады
	|ГДЕ
	|	ТипСклада В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.БольничнаяАптека),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин))
	|";
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле = "Склад";
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	Компоновщик.Настройки.Структура.Очистить();
	
	Группировка = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Склад");
	
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата.ВыгрузитьКолонку("Склад");
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли