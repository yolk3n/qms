
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСервер.ФормаУзлаПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ПланОбмена = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Объект.Ссылка.Метаданные());
	
	Если Объект.Ссылка.Пустая() Тогда
		НастроитьФормуПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	Для Каждого ЭлементСостава Из Объект.Ссылка.Метаданные().Состав Цикл
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСостава.Метаданные) Тогда
			ДоступныеДокументы.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НастроитьФормуПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВыбораДополнительныхУсловий" Тогда
		ОбновитьДанныеОбъекта(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗапроситьРежимИзмененияНастройкиОтраженияВБухгалтерскомУчете(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНастройкиОтраженияВБухгалтерскомУчете(ТекущийОбъект);
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДанныеНастройкиОтраженияВБухгалтерскомУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры 

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	ПараметрыФормы = ПараметрыФормыВыбораЭлементовОтбораПоУмолчанию();
	ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения          = "Организации";
	ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения = "Организация";
	ПараметрыФормы.ИмяТаблицыВыбора                       = "Справочник.Организации";
	ПараметрыФормы.ЗаголовокФормыВыбора                   = НСтр("ru = 'Выберите организации для отбора:'");
	
	ОткрытьСписокВыбранныхЭлементов(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхДокументов(Команда)
	
	ПараметрыФормы = ПараметрыФормыВыбораЭлементовОтбораПоУмолчанию();
	ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения          = "ВыгружаемыеДокументы";
	ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения = "ИдентификаторДокумента";
	ПараметрыФормы.ИмяТаблицыВыбора                       = "Справочник.ИдентификаторыОбъектовМетаданных";
	ПараметрыФормы.ЗаголовокФормыВыбора                   = НСтр("ru = 'Выберите типы документов для отбора:'");
	
	ОтборСправочника = Новый Структура;
	ОтборСправочника.Вставить("РеквизитОтбора"   , "Ссылка");
	ОтборСправочника.Вставить("Условие"          , "В");
	ОтборСправочника.Вставить("ИмяПараметра"     , "ДоступныеДокументы");
	ОтборСправочника.Вставить("ЗначениеПараметра", ДоступныеДокументы);
	
	КоллекцияФильтров = Новый Массив;
	КоллекцияФильтров.Добавить(ОтборСправочника);
	
	ПараметрыФормы.КоллекцияФильтров = КоллекцияФильтров;
	
	ОткрытьСписокВыбранныхЭлементов(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюИзмененияНастройкиОтражения(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УзелОбмена", Объект.Ссылка));
	
	ОткрытьФорму("РегистрСведений.НастройкиОтраженияВБухгалтерскомУчете.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

//////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияНоменклатураКоличествоСтоимостьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияНоменклатураКоличествоПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияГруппыБухУчетаСтоимостьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияНоменклатураСтоимостьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоТипамДокументовПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтраженияВБухгалтерскомУчетеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НастройкиОтраженияВБухгалтерскомУчете.НастройкаОтраженияВБухгалтерскомУчете Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтраженияПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораПериода = Новый Структура;
	ПараметрыВыбораПериода.Вставить("Значение", НастройкиОтраженияВБухгалтерскомУчете.Период);
	ПараметрыВыбораПериода.Вставить("РежимВыбораПериода", "Месяц");
	ПараметрыВыбораПериода.Вставить("ЗапрашиватьРежимВыбораПериодаУВладельца", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("НастройкаОтраженияПериодСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВыборПериода",
		ПараметрыВыбораПериода,
		ЭтотОбъект,
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтраженияПериодСтрокойПриИзменении(Элемент)
	
	Если ПустаяСтрока(НастройкаОтраженияПериодСтрокой) Тогда
		НастройкиОтраженияВБухгалтерскомУчете.Период = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтраженияПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	НастройкиОтраженияВБухгалтерскомУчете.Период = ДобавитьМесяц(НастройкиОтраженияВБухгалтерскомУчете.Период, Направление);
	НастройкаОтраженияПериодСтрокой = ПредставлениеМесяца(НастройкиОтраженияВБухгалтерскомУчете.Период);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьФормуПриСозданииНовогоПриЧтенииНаСервере()
	
	ЗаполнитьДанныеНастройкиОтраженияВБухгалтерскомУчете();
	
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияНастройкиОтраженияВБухгалтерскомУчете(Отказ)
	
	ЗапроситьРежимИзмененияРегистра(ЭтотОбъект, "НастройкиОтраженияВБухгалтерскомУчете", Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиОтраженияВБухгалтерскомУчете(ТекущийОбъект)
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОтраженияВБухгалтерскомУчете)
	   И ЗначениеЗаполнено(НастройкиОтраженияВБухгалтерскомУчете.НастройкаОтраженияВБухгалтерскомУчете) Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОтраженияВБухгалтерскомУчетеПрежняя.Период)
		 Или НастройкиОтраженияВБухгалтерскомУчетеНоваяЗапись Тогда
			
			НоваяЗапись = РегистрыСведений.НастройкиОтраженияВБухгалтерскомУчете.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, НастройкиОтраженияВБухгалтерскомУчете);
			НоваяЗапись.УзелОбмена = ТекущийОбъект.Ссылка;
			НоваяЗапись.Записать();
			
		Иначе
			МенеджерЗаписи = РеквизитФормыВЗначение("НастройкиОтраженияВБухгалтерскомУчете");
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНастройкиОтраженияВБухгалтерскомУчете()
	
	ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "НастройкиОтраженияВБухгалтерскомУчете", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(НастройкиОтраженияВБухгалтерскомУчете.Период) Тогда
		НастройкиОтраженияВБухгалтерскомУчете.Период = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	НастройкаОтраженияПериодСтрокой = ПредставлениеМесяца(НастройкиОтраженияВБухгалтерскомУчете.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтраженияПериодСтрокойНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтраженияВБухгалтерскомУчете.Период = ВыбранноеЗначение;
	НастройкаОтраженияПериодСтрокой = ПредставлениеМесяца(ВыбранноеЗначение);
	
КонецПроцедуры

#Область РедактированиеПериодическихСведений

&НаСервереБезКонтекста
Процедура ПрочитатьЗаписьДляРедактированияВФорме(Форма, ИмяРегистра, ВедущийОбъект)
	
	ИмяИзмерения = Метаданные.РегистрыСведений[ИмяРегистра].Измерения[0].Имя;
	
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить(ИмяИзмерения, ВедущийОбъект);
	
	ПрочитатьЗаписьДляРедактированияВФормеПоСтруктуре(Форма, ИмяРегистра, СтруктураВедущихОбъектов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьЗаписьДляРедактированияВФормеПоСтруктуре(Форма, ИмяРегистра, СтруктураВедущихОбъектов)
	
	МенеджерЗаписи = МенеджерПоследнейЗаписи(ИмяРегистра, СтруктураВедущихОбъектов);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Имя реквизита формы совпадает с именем регистра.
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, ИмяРегистра);
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма[ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма[ИмяРегистра + "НоваяЗапись"] = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МенеджерПоследнейЗаписи(ИмяРегистра, СтруктураВедущихОбъектов)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	Для Каждого ВедущийОбъект Из СтруктураВедущихОбъектов Цикл
		ИмяИзмерения = МетаданныеРегистра.Измерения[ВедущийОбъект.Ключ].Имя;
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект.Значение;
	КонецЦикла;
	
	РегистрПериодический = МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	
	ПоляЗапроса = "";
	Если РегистрПериодический Тогда
		ПоляЗапроса = "
		|	РегистрСведений.Период";
	КонецЕсли;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ПоляЗапроса = ПоляЗапроса + ?(ЗначениеЗаполнено(ПоляЗапроса), ",", "") + "
		|	РегистрСведений." + Измерение.Имя;
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|" + ПоляЗапроса + "
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
	|ГДЕ
	|	ИСТИНА
	|";
	
	Для Каждого ВедущийОбъект Из СтруктураВедущихОбъектов Цикл
		Запрос.УстановитьПараметр(ВедущийОбъект.Ключ, ВедущийОбъект.Значение);
		Запрос.Текст = Запрос.Текст + "
		|	И РегистрСведений." + ВедущийОбъект.Ключ + " = &" + ВедущийОбъект.Ключ;
	КонецЦикла;
	
	Если РегистрПериодический Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСведений.Период УБЫВ
		|";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистра(Форма, ИмяРегистра, Отказ)
	
	Если Форма[ИмяРегистра + "НоваяЗапись"] Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра].Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра + "Прежняя"].Период) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменилсяПериод = (Форма[ИмяРегистра].Период <> Форма[ИмяРегистра + "Прежняя"].Период);
	
	ИзменилисьДанные = Ложь;
	Для Каждого Поле Из Форма[ИмяРегистра + "Прежняя"] Цикл
		Если Поле.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		ИзменилисьДанные = Форма[ИмяРегистра][Поле.Ключ] <> Поле.Значение;
		Если ИзменилисьДанные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИзменилисьДанные И ИзменилсяПериод Тогда
		Форма[ИмяРегистра + "НоваяЗапись"] = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РедактированиеПериодическихСведений

#Область ФормированиеСпискаЭлементовОтбора

&НаКлиенте
Процедура ОткрытьСписокВыбранныхЭлементов(ПараметрыФормы)
	
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений", СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыВыбораЭлементовОтбораПоУмолчанию()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения"         , "");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора"                      , "");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора"                  , "");
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения"           , Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров"                     , Неопределено);
	ПараметрыФормы.Вставить("ТолькоПросмотр"                        , ТолькоПросмотр);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ИмяЭлементаФормы          = ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения;
	ИмяРеквизитаЭлементаФормы = ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения;
	
	Возврат Объект[ИмяЭлементаФормы].Выгрузить(, ИмяРеквизитаЭлементаФормы).ВыгрузитьКолонку(ИмяРеквизитаЭлементаФормы);
	
КонецФункции

#КонецОбласти // ФормированиеСпискаЭлементовОтбора

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Если Объект.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать
	   И Объект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		Элементы.ГруппаСтраницыОтборПоОрганизациям.ТекущаяСтраница = Элементы.ГруппаСтраницаОтборПоОрганизациямПустая;
	Иначе
		Элементы.ГруппаСтраницыОтборПоОрганизациям.ТекущаяСтраница = Элементы.ГруппаСтраницаОтборПоОрганизациям;
	КонецЕсли;
	
	Если Объект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		Элементы.ГруппаСтраницыОтборПоТипамДокументов.ТекущаяСтраница = Элементы.ГруппаСтраницаОтборПоТипамДокументовПустая;
	Иначе
		Элементы.ГруппаСтраницыОтборПоТипамДокументов.ТекущаяСтраница = Элементы.ГруппаСтраницаОтборПоТипамДокументов;
	КонецЕсли;
	
	Если Объект.РежимВыгрузкиДвиженийНоменклатуры = Перечисления.РежимыВыгрузкиДвиженийНоменклатуры.НоменклатураСтоимость
	 Или Объект.РежимВыгрузкиДвиженийНоменклатуры = Перечисления.РежимыВыгрузкиДвиженийНоменклатуры.ГруппыБухгалтерскогоУчетаСтоимость Тогда
		Элементы.ГруппаСтраницыВыгружатьВОсновныхЕдиницахУчета.ТекущаяСтраница = Элементы.ГруппаСтраницаВыгружатьВОсновныхЕдиницахУчетаПустая;
	Иначе
		Элементы.ГруппаСтраницыВыгружатьВОсновныхЕдиницахУчета.ТекущаяСтраница = Элементы.ГруппаСтраницаВыгружатьВОсновныхЕдиницахУчета;
	КонецЕсли;
	
	Элементы.ДатаНачалаВыгрузкиДокументов.Доступность = (Объект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	
	Элементы.ОткрытьСписокВыбранныхДокументов.Видимость = Объект.ИспользоватьОтборПоТипамДокументов;
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Видимость = Объект.ИспользоватьОтборПоОрганизациям;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновление заголовка команды выбора организаций для ограничения миграции.
	Если Объект.Организации.Количество() > 0 Тогда
		НовыйЗаголовокОрганизаций = СтрСоединить(Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), ", ");
	Иначе
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
	
	// Обновление заголовка команды выбора типов документов для ограничения миграции.
	Если Объект.ВыгружаемыеДокументы.Количество() > 0 Тогда
		НовыйЗаголовокДокументы = СтрСоединить(Объект.ВыгружаемыеДокументы.Выгрузить().ВыгрузитьКолонку("ИдентификаторДокумента"), ", ");
	Иначе
		НовыйЗаголовокДокументы = НСтр("ru = 'Выбрать типы документов'");
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхДокументов.Заголовок = НовыйЗаголовокДокументы;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
		Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеМесяца(Значение)
	
	Возврат Формат(Значение, "ДФ='ММММ гггг'");
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
