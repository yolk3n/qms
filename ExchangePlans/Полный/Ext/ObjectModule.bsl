#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

Перем ПоставщикиЗаданийРасчетаСебестоимости;
Перем ДанныеДляСозданияПерерасчетаСебестоимости;

Перем ОбъектыИнтегрированныеС1СДокументооборотом;

#КонецОбласти // ОписаниеПеременных

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ПриПолученииДанныхФайла(ЭлементДанных);
	
	Если ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
		Если ПоставщикиЗаданийРасчетаСебестоимости.Найти(ЭлементДанных.Метаданные()) <> Неопределено Тогда
			ДанныеДляСозданияПерерасчетаСебестоимости.Добавить(ЭлементДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ПриПолученииДанныхФайла(ЭлементДанных);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДаннымиСервер.НадоВыполнитьОбработчикПослеЗагрузкиДанных(ЭтотОбъект, Ссылка) Тогда
		
		ПослеЗагрузкиДанных(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ПослеЗагрузкиДанных(Отказ)
	
	РасширеннаяАналитикаУчета.ЗаменитьДублиКлючейАналитики();
	
	Для Каждого ДанныеДляПерерасчета Из ДанныеДляСозданияПерерасчетаСебестоимости Цикл
		Документы.РасчетСебестоимостиТоваров.ПриПолученииДанныхОтПодчиненного(ДанныеДляПерерасчета);
	КонецЦикла;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО2 Или Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		Если ОбъектыИнтегрированныеС1СДокументооборотом <> Неопределено
		   И ОбъектыИнтегрированныеС1СДокументооборотом.Количество() > 0 Тогда
			Попытка
				ОбновитьСвязьСДокументооборотом();
			Исключение
				ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет стандартное поведение при загрузке данных;
//
Процедура ПриПолученииДанныхФайла(ЭлементДанных)
	
	Если ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ОбъектыИнтегрированныеС1СДокументооборотом") Тогда
		
		Если ОбъектыИнтегрированныеС1СДокументооборотом = Неопределено Тогда
			ОбъектыИнтегрированныеС1СДокументооборотом = ЭлементДанных.Выгрузить();
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементДанных, ОбъектыИнтегрированныеС1СДокументооборотом);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСвязьСДокументооборотом()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
	Пароль = Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьПрокси(Истина, Пользователь, Пароль);
	
	ИзмеренияСтрокой = ОбщегоНазначенияБольничнаяАптека.ИменаИзмеренийРегистраСведений(Метаданные.РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.Имя);
	ОбъектыИнтегрированныеС1СДокументооборотом.Свернуть(СтрСоединить(ИзмеренияСтрокой, ","));
	Для Каждого Связь Из ОбъектыИнтегрированныеС1СДокументооборотом Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Связь.Объект)) Тогда
			
			ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "ExternalObject");
			ownerObject.id = Строка(Связь.Объект.УникальныйИдентификатор());
			ownerObject.type = Связь.Объект.Метаданные().ПолноеИмя();
			ownerObject.name = Строка(Связь.Объект);
			
			linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectID");
			linkedObject.id = Связь.ИдентификаторОбъектаДокументооборота;
			linkedObject.type = Связь.ТипОбъектаДокументооборота;
			
			AddLinkRequest = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
			AddLinkRequest.ownerObject = ownerObject;
			AddLinkRequest.linkedObject = linkedObject;
			
			Ответ = Прокси.execute(AddLinkRequest);
			Попытка
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ
#Область Инициализация

ПоставщикиЗаданийРасчетаСебестоимости     = Документы.РасчетСебестоимостиТоваров.ВходящиеДанныеМеханизма(Истина);
ДанныеДляСозданияПерерасчетаСебестоимости = Новый Массив;

#КонецОбласти // Инициализация

#КонецЕсли
