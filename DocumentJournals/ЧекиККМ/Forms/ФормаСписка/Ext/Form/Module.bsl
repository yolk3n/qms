
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	ТипыДокументов = Новый ФиксированныйМассив(ШтрихкодированиеПечатныхФорм.ТипыОбъектовДинамическогоСписка(Список));
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	НастройкаФормБольничнаяАптека.ФормаЖурналаДокументов_ПриСозданииНаСервере(ЭтотОбъект);
	
	Элементы.ОткрытьКассовуюСмену.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ОтчетОРозничныхПродажах);
	Элементы.ЗакрытьКассовуюСмену.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ОтчетОРозничныхПродажах);
	Элементы.ВнесениеДенег.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ);
	Элементы.ВыемкаДенег.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ);
	
	Элементы.СписокДокументВозвратТоваровОтКлиентаСоздатьНаОсновании.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ВозвратТоваровОтКлиента);
	Элементы.СписокКонтекстноеМенюВозвратТоваровОтКлиентаСоздатьНаОсновании.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ВозвратТоваровОтКлиента);
	
	Элементы.СписокДокументЧекККМКоррекцииСоздатьНаОсновании.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ЧекККМКоррекции);
	Элементы.СписокКонтекстноеМенюЧекККМКоррекцииСоздатьНаОсновании.Видимость = ПравоДоступа("Изменение", Метаданные.Документы.ЧекККМКоррекции);
	
	ДоступноДобавлениеИзменениеЧековККМ = ПравоДоступа("Изменение", Метаданные.Документы.ЧекККМ);
	
	Кассир = Пользователи.ТекущийПользователь();
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Кассир);
	КассаККМ = Справочники.КассыККМ.КассаККМФискальныйРегистраторПоУмолчанию();
	КассаОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КассаОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтчетОРозничныхПродажах"
	 Или ИмяСобытия = "Запись_ЧекККМ"
	 Или ИмяСобытия = "Запись_ЧекККМВозврат"
	 Или ИмяСобытия = "Запись_ЧекККМКоррекции"
	 Или ИмяСобытия = "ОбновитьСтатусФискальныхОпераций"
	 Или ИмяСобытия = "ИзменениеКассовойСмены" Тогда
		
		Элементы.Список.Обновить();
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
		УстановитьДоступностьКомандСозданияДокументовНаВозврат();
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиентСервер.ИспользоватьПодключаемоеОборудование(ЭтотОбъект) Тогда
		Если Не МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("Кассир", РеквизитыКассира.Наименование);
	РозничныеПродажиКлиент.ОткрытьКассовуюСмену(
		ПараметрыКассыККМ,
		ПараметрыОперации,
		Новый ОписаниеОповещения("ПослеОткрытияЗакрытияКассовойСмены", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиентСервер.ИспользоватьПодключаемоеОборудование(ЭтотОбъект) Тогда
		Если Не МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура("Кассир", РеквизитыКассира.Наименование);
	РозничныеПродажиКлиент.ЗакрытьКассовуюСмену(
		ПараметрыКассыККМ,
		ПараметрыОперации,
		Новый ОписаниеОповещения("ПослеОткрытияЗакрытияКассовойСмены", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	РозничныеПродажиКлиент.ВнестиДенежныеСредстваВКассу(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ПослеВнесенияВыемкиДенежныхСредств", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	РозничныеПродажиКлиент.ИзъятьДенежныеСредстваИзКассы(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ПослеВнесенияВыемкиДенежныхСредств", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(Команда)
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекККМНаВозврат(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("КассаККМ", КассаККМ));
	ОткрытьФорму("Документ.ЧекККМВозврат.Форма.ФормаДокументаМастер", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("КассаККМ", КассаККМ));
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛьготныйЧекККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("КассаККМ, ИспользоватьЛьготы", КассаККМ, Истина));
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекККМКоррекции(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("КассаККМ", КассаККМ));
	ОткрытьФорму("Документ.ЧекККМКоррекции.Форма.ФормаДокумента", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекККМНаВозврат(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("Основание", ТекущаяСтрока);
	ОткрытьФорму("Документ.ЧекККМВозврат.ФормаОбъекта", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииВозвратТоваровОтКлиента(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("Основание", ТекущаяСтрока);
	ОткрытьФорму("Документ.ВозвратТоваровОтКлиента.ФормаОбъекта", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекККМКоррекции(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("Основание", ТекущаяСтрока);
	ОткрытьФорму("Документ.ЧекККМКоррекции.ФормаОбъекта", ПараметрыОткрытияФормы);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КассаККМОтборПриИзменении(Элемент)
	
	КассаОтборПриИзменении();
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЧековПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ИмяОтрываемойФормы = ИмяОтрываемойФормы(ТекущиеДанные.Ссылка);
	
	Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		ОткрытьФорму(ИмяОтрываемойФормы, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не (ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		ПараметрыОткрытия = Новый Структура("Основание", ТекущиеДанные.Ссылка);
		ИмяОтрываемойФормы = ИмяОтрываемойФормы(ТекущиеДанные.Ссылка);
		ОткрытьФорму(ИмяОтрываемойФормы, ПараметрыОткрытия);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", Новый Структура("КассаККМ", КассаККМ));
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ИмяОтрываемойФормы = ИмяОтрываемойФормы(ТекущиеДанные.Ссылка);
	Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		ОткрытьФорму(ИмяОтрываемойФормы, ПараметрыОткрытия);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПоляДата(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КассаОтборПриИзменении()
	
	ОбновитьСостояниеКассовойСменыНаСервере();
	УстановитьОтборДинамическихСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере()
	
	СменаОткрыта = Ложь;
	ТекущаяКассоваяСмена = Неопределено;
	Организация = Неопределено;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
		Если ЗначениеЗаполнено(СостояниеКассовойСмены.СтатусКассовойСмены) Тогда
			
			ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СостояниеКассовойСмены.НомерКассовойСмены));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СостояниеКассовойСмены.СтатусКассовойСмены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", Формат(СостояниеКассовойСмены.НаличностьВКассе, "ЧДЦ=2"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СостояниеКассовойСмены.ВалютаПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
			
			ИнформацияСостояниеКассовойСмены = ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", Формат(СостояниеКассовойСмены.НаличностьВКассе, "ЧДЦ=2; ЧН=0.00"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СостояниеКассовойСмены.ВалютаПредставление);
			
			ИнформацияСостояниеКассовойСмены = ТекстСообщения;
			
		КонецЕсли;
		
		// Переменная формы
		СменаОткрыта = СостояниеКассовойСмены.СменаОткрыта;
		ТекущаяКассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		Организация = СостояниеКассовойСмены.Организация;
		
	Иначе
		
		ИнформацияСостояниеКассовойСмены = НСтр("ru='Касса ККМ не выбрана.'");
		
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(КассаККМ));
	
	ВерсияФФД = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетВерсиюФФД(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ПраваДоступа = РозничныеПродажи.ПраваДоступаРМК(Кассир);
	
	// Управление доступностью.
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьКассовуюСмену"                       , "Доступность", СменаОткрыта И ПраваДоступа.ЗакрытьСмену);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену"                       , "Доступность", Не СменаОткрыта И ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ОткрытьСмену);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздать"                              , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЧекККМ"                        , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЛьготныйЧекККМ"                , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЧекККМНаВозврат"               , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ И ПраваДоступа.ВозвратТовара);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкопировать"                          , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздать"               , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЧекККМ"         , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЛьготныйЧекККМ" , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЧекККМНаВозврат", "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ И ПраваДоступа.ВозвратТовара);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСкопировать"           , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег"                              , "Доступность", ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ВнесениеДенег);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег"                                , "Доступность", ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ВыемкаДенег);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьСостояниеКассовойСмены"             , "Доступность", ЗначениеЗаполнено(КассаККМ));
	
	// Управление видимостью.
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЛьготныйЧекККМ"                , "Видимость", ЗначениеЗаполнено(КассаККМ) И ВерсияФФД < "1.2");
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЛьготныйЧекККМ" , "Видимость", ЗначениеЗаполнено(КассаККМ) И ВерсияФФД < "1.2");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ)
	
	СменаОткрыта = Ложь;
	ТекущаяКассоваяСмена = Неопределено;
	Организация = Неопределено;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
		Если ЗначениеЗаполнено(СостояниеКассовойСмены.СтатусКассовойСмены) Тогда
			
			ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СостояниеКассовойСмены.НомерКассовойСмены));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СостояниеКассовойСмены.СтатусКассовойСмены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", Формат(СостояниеКассовойСмены.НаличностьВКассе, "ЧДЦ=2; ЧН=0.00"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СостояниеКассовойСмены.ВалютаПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
			
			ИнформацияСостояниеКассовойСмены = ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", Формат(СостояниеКассовойСмены.НаличностьВКассе, "ЧДЦ=2; ЧН=0.00"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СостояниеКассовойСмены.ВалютаПредставление);
			
			ИнформацияСостояниеКассовойСмены = ТекстСообщения;
			
		КонецЕсли;
		
		// Переменная формы
		СменаОткрыта = СостояниеКассовойСмены.СменаОткрыта;
		ТекущаяКассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		Организация = СостояниеКассовойСмены.Организация;
		
	Иначе
		
		СостояниеКассовойСмены = Неопределено;
		СостояниеКассовойСмены = НСтр("ru='Касса ККМ не выбрана.'");
		
	КонецЕсли;
	
	ВерсияФФД = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетВерсиюФФД(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	// Управление доступностью.
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗакрытьКассовуюСмену"                       , "Доступность", СменаОткрыта И ПраваДоступа.ЗакрытьСмену);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену"                       , "Доступность", Не СменаОткрыта И ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ОткрытьСмену);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздать"                              , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЧекККМ"                        , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЛьготныйЧекККМ"                , "Доступность", ЗначениеЗаполнено(КассаККМ) И ВерсияФФД < "1.2" И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСоздатьЧекККМНаВозврат"               , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ И ПраваДоступа.ВозвратТовара);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокСкопировать"                          , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздать"               , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЧекККМ"         , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЛьготныйЧекККМ" , "Доступность", ЗначениеЗаполнено(КассаККМ) И ВерсияФФД < "1.2" И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьЧекККМНаВозврат", "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ И ПраваДоступа.ВозвратТовара);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСкопировать"           , "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег"                              , "Доступность", ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ВнесениеДенег);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег"                                , "Доступность", ЗначениеЗаполнено(КассаККМ) И ПраваДоступа.ВыемкаДенег);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьСостояниеКассовойСмены"             , "Доступность", ЗначениеЗаполнено(КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументовНаВозврат()
	
	Если СостояниеКассовойСмены = Неопределено И ЗначениеЗаполнено(КассаККМ) Тогда
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
	   И СостояниеКассовойСмены <> Неопределено
	   И ТекущиеДанные.Свойство("Тип")
	   И ТекущиеДанные.Тип = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ЧекПробит = ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		ДоступенВозвратДеньВДень = (СменаОткрыта И Не СостояниеКассовойСмены.Ошибка24Часа И ТекущиеДанные.КассоваяСмена = ТекущаяКассоваяСмена);
		
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокДокументЧекККМВозвратСоздатьНаОсновании",           "Доступность", ПраваДоступа.ВозвратТовара И ЧекПробит И ДоступенВозвратДеньВДень);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокДокументВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", ПраваДоступа.ВозвратТовара И ЧекПробит И Не ДоступенВозвратДеньВДень);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюЧекККМВозвратСоздатьНаОсновании"          , "Доступность", ПраваДоступа.ВозвратТовара И ЧекПробит И ДоступенВозвратДеньВДень);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", ПраваДоступа.ВозвратТовара И ЧекПробит И Не ДоступенВозвратДеньВДень);
		
	Иначе
		
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокДокументЧекККМВозвратСоздатьНаОсновании",           "Доступность", Ложь);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокДокументВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюЧекККМВозвратСоздатьНаОсновании"          , "Доступность", Ложь);
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ)
	
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
	УстановитьОтборДинамическихСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборДинамическихСписков(Форма)
	
	ЧекиККМ = Форма.Список;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассаККМ", Форма.КассаККМ, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Форма.КассаККМ));
	
	ФильтрЧеков = Форма.ФильтрЧеков;
	Если ФильтрЧеков = 0 Тогда // Все
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ФильтрЧеков = 1 Тогда // Только текущая смена
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Форма.ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ФильтрЧеков = 2 Тогда // Все отложенные
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ФильтрЧеков = 3 Тогда // Отложенные по текущей смене
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "КассоваяСмена", Форма.ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЧекиККМ, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкода)
	
	ШтрихкодированиеПечатныхФормКлиент.СпозиционироватьсяНаСсылкеПоШтрихкодуТабличногоДокумента(Элементы.Список, ДанныеШтрихкода.Штрихкод, ТипыДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияЗакрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВнесенияВыемкиДенежныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяОтрываемойФормы(Ссылка)
	
	ИмяОтрываемойФормы = "";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ИмяОтрываемойФормы = "Документ.ЧекККМ.Форма.ФормаДокументаМастер";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ИмяОтрываемойФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаМастер";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
		ИмяОтрываемойФормы = "Документ.ЧекККМКоррекции.Форма.ФормаДокумента";
	КонецЕсли;
	
	Возврат ИмяОтрываемойФормы;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
