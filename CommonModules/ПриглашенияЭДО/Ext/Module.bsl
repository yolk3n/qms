
#Область СлужебныйПрограммныйИнтерфейс

// Получает новые приглашения к обмену электронными документами.
//
// Параметры:
//  КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПроверятьНеполученныеПриглашения - Булево - если Истина, будет выполнена проверка наличия неполученных приглашений
//
// Возвращаемое значение:
//  Число - количество обновленных приглашений.
Функция ПолучитьПриглашения(КлючиСинхронизации, КонтекстДиагностики, ПроверятьНеполученныеПриглашения = Истина) Экспорт
	
	ПараметрыЗапросаПриглашений = Неопределено;
	ТаблицаПриглашений = ТаблицаДанныхУчастниковОбмена(КлючиСинхронизации,
		КонтекстДиагностики, Ложь, ПараметрыЗапросаПриглашений);
	РезультатОбработкиТаблицыПриглашений = ОбработатьТаблицуПриглашений(ТаблицаПриглашений, КонтекстДиагностики);
	
	Если ПроверятьНеполученныеПриглашения Тогда
		ПроверитьНеполученныеПриглашения(КлючиСинхронизации, КонтекстДиагностики, ПараметрыЗапросаПриглашений,
			РезультатОбработкиТаблицыПриглашений);
	КонецЕсли;
	
	Возврат ТаблицаПриглашений.Количество();
	
КонецФункции

// Создает таблицу приглашений.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений:
// * ИдентификаторОрганизации - Строка - идентификатор учетной записи организации
// * Идентификатор - Строка - идентификатор учетной записи контрагента
// * ИдентификаторОператора - Строка - идентификатор оператора ЭДО
// * Наименование - Строка - наименование контрагента
// * ИНН - Строка - ИНН контрагента
// * КПП - Строка - КПП контрагента
// * ТекстПриглашения - Строка
// * Состояние - ПеречислениеСсылка.СтатусыПриглашений - статус приглашения
// * ОписаниеОшибки - Строка - содержит ошибку оператора электронного документооборота
// * Изменен - Дата - дата последнего изменения приглашения
// * ВнешнийИД - Строка - внешний идентификатор приглашения
// * ПричинаОтказаОтПриглашения - Строка
// * НомерСтроки - Число
Функция НоваяТаблицаПриглашений() Экспорт
	
	КС3 = Новый КвалификаторыСтроки(3);
	КС12 = Новый КвалификаторыСтроки(12);
	КС50 = Новый КвалификаторыСтроки(50);
	КС255 = Новый КвалификаторыСтроки(255);
	КС1024 = Новый КвалификаторыСтроки(1024);
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	КЧ = Новый КвалификаторыЧисла;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	
	ОписаниеТиповС3 = Новый ОписаниеТипов("Строка", , КС3);
	ОписаниеТиповС12 = Новый ОписаниеТипов(Массив, , КС12);
	ОписаниеТиповС50 = Новый ОписаниеТипов("Строка", , КС50);
	ОписаниеТиповС255 = Новый ОписаниеТипов("Строка", , КС255);
	ОписаниеТиповС1024 = Новый ОписаниеТипов("Строка", , КС1024);
	ОписаниеТиповС0 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , КД);
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , КЧ);
	ОписаниеТиповСтатусыУчастников = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПриглашений");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючПриглашения",            ОписаниеТиповС50);
	ТЗ.Колонки.Добавить("ИдентификаторОрганизации",   ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Идентификатор",              ОписаниеТиповС255); // ИдентификаторКонтрагента
	ТЗ.Колонки.Добавить("ИдентификаторОператора",     ОписаниеТиповС3);
	ТЗ.Колонки.Добавить("Наименование",               ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ИНН",                        ОписаниеТиповС12);
	ТЗ.Колонки.Добавить("КПП",                        ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ТекстПриглашения",           ОписаниеТиповС1024);
	ТЗ.Колонки.Добавить("Состояние",                  ОписаниеТиповСтатусыУчастников);
	ТЗ.Колонки.Добавить("ОписаниеОшибки",             ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Изменен",                    ОписаниеТиповЧисло);
	ТЗ.Колонки.Добавить("ВнешнийИД",                  ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ПричинаОтказаОтПриглашения", ОписаниеТиповС0);
	ТЗ.Колонки.Добавить("НомерСтроки",                ОписаниеТиповЧисло);
	
	Возврат ТЗ;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться приглашения к обмену электронными документами.
// Запрос содержит следующие поля:
//   * ИдентификаторОрганизации - Строка
//   * ИдентификаторКонтрагента - Строка
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   * ИНН - Строка
//   * ПриглашениеПринято - Булево.
//   * Статус - ПеречислениеСсылка.СтатусыПриглашений.
//   * ОператорЭДО - Строка.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборПриглашений
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросПриглашений(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборПриглашений();
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	Если Отбор.Ключ <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.Ключ В (%1)",
			Отбор.КлючПриглашения));
	КонецЕсли;
	Если Отбор.ИдентификаторОрганизации <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации В (%1)",
			Отбор.ИдентификаторОрганизации));
	КонецЕсли;
	Если Отбор.ИдентификаторКонтрагента <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента В (%1)",
			Отбор.ИдентификаторКонтрагента));
	КонецЕсли;
	Если Отбор.ИдентификаторОператора <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора В (%1)",
			Отбор.ИдентификаторОператора));
	КонецЕсли;
	Если Отбор.Контрагент <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент В (%1)",
			Отбор.Контрагент));
	КонецЕсли;
	Если Отбор.ИНН <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.ИНН В (%1)",
			Отбор.ИНН));
	КонецЕсли;
	Если Отбор.КПП <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.КПП В (%1)",
			Отбор.КПП));
	КонецЕсли;
	Если Отбор.Тип <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.Тип В (%1)",
			Отбор.Тип));
	КонецЕсли;
	Если Отбор.Статус <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.Статус В (%1)",
			Отбор.Статус));
	КонецЕсли;
	
	ШаблонЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора КАК ОператорЭДО,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Тип,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято) КАК
		|		ПриглашениеПринято
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	&ПоляУсловия";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ШаблонЗапроса, ИмяВременнойТаблицы, "",
		ПоляУсловия);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться принятые приглашения к обмену электронными документами.
// Запрос содержит следующие поля:
//   * ИдентификаторОрганизации - Строка
//   * ОператорЭДО - Строка
//   * ИдентификаторКонтрагента - Строка
//   * Статус - ПеречислениеСсылка.СтатусыПриглашений.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборПринятыхПриглашений
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросПринятыхПриглашенийПоОператорам(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборПринятыхПриглашений();
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	Если Отбор.ИдентификаторыОрганизации <> "" Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации В (%1)",
			Отбор.ИдентификаторыОрганизации));
	КонецЕсли;
	
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора КАК ОператорЭДО,
		|	МАКСИМУМ(ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента) КАК ИдентификаторКонтрагента,
		|	МАКСИМУМ(ПриглашенияКОбменуЭлектроннымиДокументами.Статус) КАК Статус
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	&ПоляУсловия
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора <> """"
		|СГРУППИРОВАТЬ ПО
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторОрганизации,
		|	ОператорЭДО";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ШаблонЗапроса, ИмяВременнойТаблицы, "",
		ПоляУсловия);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Инициализирует структуру для отбора приглашений, см. ЗапросПриглашений.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИдентификаторКонтрагента - Строка - параметр или выражение для отбора по идентификатору организации
// * ИдентификаторОрганизации - Строка - параметр или выражение для отбора по идентификатору контрагента
// * Контрагент - Строка - параметр или выражение для отбора по контрагенту
Функция НовыйОтборПриглашений() Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "");
	Отбор.Вставить("ИдентификаторОрганизации", "");
	Отбор.Вставить("ИдентификаторКонтрагента", "");
	Отбор.Вставить("ИдентификаторОператора", "");
	Отбор.Вставить("Контрагент", "");
	Отбор.Вставить("ИНН", "");
	Отбор.Вставить("КПП", "");
	Отбор.Вставить("Тип", "");
	Отбор.Вставить("Статус", "");
	
	Возврат Отбор;
	
КонецФункции

// Инициализирует структуру для отбора принятых приглашений по операторам, см. ЗапросПринятыхПриглашенийПоОператорам.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИдентификаторыОрганизации - Массив - идентификаторы организаций
Функция НовыйОтборПринятыхПриглашений() Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторыОрганизации", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает результат успеха создания приглашения со статусом "Требуется отправка",
//  если по переданным параметрам не найдено существующее приглашение.
// 
// Параметры:
// 	НатуральныеКлючиПриглашения - ФиксированнаяСтруктура - натуральные ключи по типу приглашения, возможные значения:
// 	* см. ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор
// 	* см. ПриглашенияЭДОКлиентСервер.КлючШироковещательногоПриглашения
// 	* см. ПриглашенияЭДОКлиентСервер.КлючЗаявкиНаРоуминг
// Возвращаемое значение:
// 	Структура - Описание:
// * Успешно - Булево - результат успеха.
// * Ключ - Строка - ключ созданного приглашения.
// * ОписаниеОшибки - Строка - описание ошибки.
Функция СоздатьПриглашениеКОтправкеОператоруЭДО(НатуральныеКлючиПриглашения, Организация,
Контрагент = Неопределено, ТекстПриглашения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт

	Возврат ПриглашенияЭДОСлужебный.СоздатьПриглашениеКОтправкеОператоруЭДО(НатуральныеКлючиПриглашения,
		Организация, Контрагент, ТекстПриглашения, ОписаниеОшибки);
	
КонецФункции

// Создает/обновляет приглашение.
// 
// Параметры:
// 	Приглашение - строка таблицы см. НоваяТаблицаПриглашений 
// 	НовыйСтатус - ПеречислениеСсылка.СтатусыПриглашений - новый статус приглашения
Процедура ОбновитьПриглашение(Приглашение, НовыйСтатус) Экспорт
	
	ПриглашенияЭДОСлужебный.ОбновитьПриглашение(Приглашение, НовыйСтатус);
	
КонецПроцедуры

// Отправляет в архив приглашения к обмену электронными документами.
// 
// Параметры:
// 	Приглашения - Массив из Структура:
// 	   * ИдентификаторОрганизации - Строка
// 	   * ИдентификаторКонтрагента - Строка
// Возвращаемое значение:
// 	Число - количество отправленных в архив приглашений.
Функция ОтправитьПриглашенияВАрхив(Приглашения) Экспорт
	
	Счетчик = 0;
	
	Для Каждого Приглашение Из Приглашения Цикл
		НачатьТранзакцию();
		Попытка
			ПространствоБлокировки = "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами";
			ПоляБлокировки = Новый Структура;
			ПоляБлокировки.Вставить("Ключ", Приглашение.КлючПриглашения);
			ПоляБлокировки.Вставить("ИдентификаторОрганизации", Приглашение.ИдентификаторОрганизации);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(ПространствоБлокировки, ПоляБлокировки);
			МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ключ = Приглашение.КлючПриглашения;
			МенеджерЗаписи.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Ознакомиться = Ложь;
				МенеджерЗаписи.Записать();
				Счетчик = Счетчик + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ИнформацияОбОшибке();
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр(
				"ru = 'Отправка в архив приглашений к обмену электронными документами'"), ПодробноеПредставлениеОшибки(
				Ошибка), НСтр("ru = 'При отправке приглашений в архив возникла ошибка.'"));
		КонецПопытки;
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции

// Определяет, принято ли приглашение.
// 
// Параметры:
// 	СтатусПриглашения - ПеречислениеСсылка.СтатусыПриглашений
// Возвращаемое значение:
// 	Булево
Функция ПриглашениеПринято(СтатусПриглашения) Экспорт
	
	Возврат СтатусПриглашения = Перечисления.СтатусыПриглашений.Принято;
	
КонецФункции

// Определяет, ожидается ли ответ на приглашение.
// 
// Параметры:
// 	СтатусПриглашения - ПеречислениеСсылка.СтатусыПриглашений
// Возвращаемое значение:
// 	Булево
Функция ОжидаетсяОтветНаПриглашение(СтатусПриглашения) Экспорт
	
	Возврат СтатусПриглашения = Перечисления.СтатусыПриглашений.ОжидаемСогласия
							Или СтатусПриглашения = Перечисления.СтатусыПриглашений.НастройкаРоуминга;
	
КонецФункции

// Возвращает данные приглашения и данные учетной записи ЭДО по идентификатору организации.
//
// Параметры:
//  КлючПриглашения - Строка - значение измерения регистра сведений ПриглашенияКОбменуЭлектроннымиДокументами.
//
// Возвращаемое значение:
//    
Функция ДанныеПриглашения(КлючПриглашения) Экспорт
	
	Возврат ПриглашенияЭДОСлужебный.ДанныеПриглашения(КлючПриглашения);
	
КонецФункции

// Определяет возможность обмена ЭД между организациями.
//
// Параметры:
//  ПараметрыПриглашения - ФиксированнаяСтруктура:
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИНН - Строка
//  * КПП - Строка.
//   
//  Возвращаемое значение:
//   Булево
Функция ОбменЭДМеждуОрганизациями(ПараметрыПриглашения) Экспорт
	
	Возврат ПриглашенияЭДОСлужебный.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
	
КонецФункции

Функция КлючЗаписиПриглашения(КлючПриглашения) Экспорт
	
	Возврат ПриглашенияЭДОСлужебный.КлючЗаписиПриглашения(КлючПриглашения);
	
КонецФункции

// Возвращает ключ найденного приглашения.
//
// Параметры:
// 	НатуральныеКлючиПриглашения - ФиксированнаяСтруктура - натуральные ключи по типу приглашения, возможные значения:
// 	* см. ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор
// 	* см. ПриглашенияЭДОКлиентСервер.КлючШироковещательногоПриглашения
// 	* см. ПриглашенияЭДОКлиентСервер.КлючЗаявкиНаРоуминг
// 
// Возвращаемое значение:
//  Строка - ключ приглашения.
Функция КлючПриглашенияПоНатуральнымКлючам(НатуральныеКлючиПриглашения) Экспорт
	
	Возврат ПриглашенияЭДОСлужебный.КлючПриглашенияПоНатуральнымКлючам(НатуральныеКлючиПриглашения);
	
КонецФункции

Функция СтандартныйШаблонПриглашения() Экспорт
	
	Возврат ПриглашенияЭДОСлужебный.СтандартныйШаблонПриглашения();
	
КонецФункции

// Изменяет контрагента в приглашении
// 
// Параметры:
//  ПолныйКлючПриглашения - Структура - Полное описание ключа приглашения:
//    * Ключ - Строка - Ключ приглашения (см. ПриглашенияЭДО.КлючПриглашенияПоНатуральнымКлючам)
//    * ИдентификаторОрганизации - Строка - ИД учетной записи ЭДО организации
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - Контрагент, которого необходимо установить для приглашения
// Контрагент
Процедура ИзменитьКонтрагентаВПриглашении(ПолныйКлючПриглашения, Контрагент) Экспорт
	
	ПриглашенияЭДОСлужебный.ИзменитьКонтрагентаВПриглашении(ПолныйКлючПриглашения, Контрагент);
	
КонецПроцедуры

#Область ОбработкаНеисправностей

Процедура ДобавитьОшибкуНепринятогоПриглашения(КонтекстДиагностики, ИдентификаторОрганизации, ИдентификаторКонтрагента,
	Объект, СтатусПриглашения, ВидОперации) Экспорт
	
	ВидОшибки = ПриглашенияЭДОСлужебныйКлиентСервер.ВидОшибкиНеНастроенаСвязьСКонтрагентом(СтатусПриглашения, "Отправка");
	
	ДополнительныеСвойстваОшибки = ДиагностикаЭДОКлиентСервер.НовыеДополнительныеСвойстваОшибки(ВидОшибки);
	
	КлючПриглашенияНаИдентификатор = ПриглашенияЭДОСлужебныйКлиентСервер.КлючПриглашенияНаИдентификатор();
	КлючПриглашенияНаИдентификатор.ИдентификаторОрганизации = ИдентификаторОрганизации;
	КлючПриглашенияНаИдентификатор.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
	
	КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
	КлючПриглашения.Ключ = КлючПриглашенияПоНатуральнымКлючам(КлючПриглашенияНаИдентификатор);
	КлючПриглашения.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	ДополнительныеСвойстваОшибки.Приглашение = ПриглашенияЭДОСлужебный.КлючЗаписиПриглашения(КлючПриглашения);
	
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеСвойстваОшибки);
	ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", Объект);
	
	ТекстОшибки = НСтр("ru = 'Не удалось отправить электронный документ: отсутствует связь с контрагентом'");
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ВидОшибки, ТекстОшибки, ТекстОшибки, ДополнительныеПараметрыОшибки);
	
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);

КонецПроцедуры

Процедура ДобавитьОшибкуПустогоКонтрагентаВПриглашении(КонтекстДиагностики, КлючПриглашения) Экспорт
	
	ВидОшибки = ПриглашенияЭДОСлужебныйКлиентСервер.ВидОшибкиНеУдалосьНайтиКонтрагентаПоПриглашению();

	ДополнительныеСвойстваОшибки = ДиагностикаЭДОКлиентСервер.НовыеДополнительныеСвойстваОшибки(ВидОшибки);
	ДополнительныеСвойстваОшибки.Приглашение = КлючЗаписиПриглашения(КлючПриглашения);
	
	ДополнительныеПараметрыОшибки = Новый Структура;
	ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеСвойстваОшибки);

	ТекстОшибки = НСтр("ru = 'Не удалось найти контрагента по реквизитам из приглашения'");
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Обновление статусов приглашений'"),
		ВидОшибки, ТекстОшибки, ТекстОшибки, ДополнительныеПараметрыОшибки);
	
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Ложь)

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

// См. СинхронизацияЭДОСобытия.ПриУдаленииУчетнойЗаписи
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторУчетнойЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ключ.Установить(ВыборкаДетальныеЗаписи.КлючПриглашения);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_1

#Область РегистрыСведений_ПриглашенияКОбменуЭлектроннымиДокументами_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = 
"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.3.50";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("89dad773-44d2-407c-84d9-7176eb7539fe");  
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление приглашений.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");   
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя()); 
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");   
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура =
	 "РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыСведений_УдалитьПриглашенияКОбменуЭлектроннымиДокументами_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
"РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26929902-0a33-455c-a620-648352afacb1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
"РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: Перенос записей приглашений.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.УдалитьПриглашенияКОбменуЭлектроннымиДокументами.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура =
"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область РегистрыСведений_ДанныеКонтрагентовСоздаваемыхБезусловно_ОбработатьДанныеДляПереходаНаНовуюВерсию
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2444c42-0ad0-431a-8468-9ab7312ac3ce");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ДанныеКонтрагентовСоздаваемыхБезусловно";

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ДанныеКонтрагентовСоздаваемыхБезусловно";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление данных контрагентов создаваемых безусловно.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
#КонецОбласти

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ДанныеКонтрагентовСоздаваемыхБезусловно.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("58591359-7cec-45ff-a4e0-8feed67a2fd0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление данных контрагентов создаваемых безусловно (начальное заполнение).'");

#КонецОбласти
	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаДанныхУчастниковОбмена(КлючиСинхронизации, КонтекстДиагностики, ПроверочныйЗапрос = Ложь,
	ПараметрыЗапросаПриглашений = Неопределено)
	
	ПараметрыЗапросаПриглашений = Новый ТаблицаЗначений;
	ПараметрыЗапросаПриглашений.Колонки.Добавить("ИдентификаторУчетнойЗаписи", Новый ОписаниеТипов("Строка"));
	ПараметрыЗапросаПриглашений.Колонки.Добавить("ДатаПолученияПриглашенийИзНастройки", Новый ОписаниеТипов("Число"));
	ПараметрыЗапросаПриглашений.Колонки.Добавить("ПроверочнаяДатаПолученияПриглашенийИзНастройки", Новый ОписаниеТипов("Число"));
	
	ИтоговаяТаблицаПриглашений = НоваяТаблицаПриглашений();
	
	ИдентификаторыОрганизации = Новый Массив;
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		ИдентификаторыОрганизации.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ДатыПолученияПриглашений = СинхронизацияЭДО.ДатыЗапросаДанныхОператораЭДО(ИдентификаторыОрганизации,
		СинхронизацияЭДО.ТипДанныхЗапросаОператораЭДОПриглашения());
	
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		
		КлючСинхронизации = КлючИЗначение.Значение;
		ИдентификаторУчетнойЗаписи = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
		
		СтрокаТаблицыПараметрыЗапросаПриглашений = ПараметрыЗапросаПриглашений.Добавить();
		СтрокаТаблицыПараметрыЗапросаПриглашений.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
		
		Если Не ЗначениеЗаполнено(КлючСинхронизации.МаркерРасшифрованный) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолученыВсеЗаписи = Ложь;
		
		ДатыПолученияПриглашенийУчетнойЗаписи = ДатыПолученияПриглашений[ИдентификаторУчетнойЗаписи];
		
		СтрокаТаблицыПараметрыЗапросаПриглашений.ДатаПолученияПриглашенийИзНастройки
			= ДатыПолученияПриглашенийУчетнойЗаписи.ДатаПолучения;
		
		СтрокаТаблицыПараметрыЗапросаПриглашений.ПроверочнаяДатаПолученияПриглашенийИзНастройки
			= ДатыПолученияПриглашенийУчетнойЗаписи.ПроверочнаяДатаПолучения;
		
		ДатаПоследнегоЗапроса = ?(ПроверочныйЗапрос,
			ДатыПолученияПриглашенийУчетнойЗаписи.ПроверочнаяДатаПолучения,
			ДатыПолученияПриглашенийУчетнойЗаписи.ДатаПолучения);
		
		Пока Не ПолученыВсеЗаписи Цикл
			ТаблицаПриглашений = СервисЭДО.ПолучитьПриглашения(КлючСинхронизации, ДатаПоследнегоЗапроса, КонтекстДиагностики);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПриглашений, ИтоговаяТаблицаПриглашений);	
			Если ТаблицаПриглашений.Количество() = 0 Тогда
				ПолученыВсеЗаписи = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИтоговаяТаблицаПриглашений;
	
КонецФункции

Функция ДатаЗапросаПриглашенияЗаполнена(ДатаЗапроса) 
	
	Возврат ЗначениеЗаполнено(ДатаЗапроса) И ДатаЗапроса <> СервисЭДО.ДатаЗапросаПоУмолчанию();
	
КонецФункции

Процедура УстановитьДатуПроверкиПриглашений(ИдентификаторОрганизации, ДатаПроверки)
	
	СинхронизацияЭДО.ИзменитьСостояниеОбмена(ИдентификаторОрганизации, "ДатаПолученияПриглашений", ДатаПроверки + 1000);
	
КонецПроцедуры

Процедура ПроверитьНеполученныеПриглашения(КлючиСинхронизации, КонтекстДиагностики, ПараметрыОсновногоЗапросаПриглашений,
	РезультатОбработкиТаблицыПриглашений) 
	
	ДанныеУчетныхЗаписей = ПараметрыОсновногоЗапросаПриглашений.Скопировать();
	ДанныеУчетныхЗаписей.Колонки.Добавить("ДатаУспешногоПолученияПриглашений", Новый ОписаниеТипов("Число"));
	Если РезультатОбработкиТаблицыПриглашений.ДанныеПоУчетнымЗаписям <>Неопределено Тогда
		Для каждого СтрокаТЗПриемник Из ДанныеУчетныхЗаписей Цикл
			СтрокаТЗИсточник = РезультатОбработкиТаблицыПриглашений.ДанныеПоУчетнымЗаписям.Найти(СтрокаТЗПриемник.ИдентификаторУчетнойЗаписи, "ИдентификаторОрганизации");
			Если СтрокаТЗИсточник <> Неопределено Тогда
				СтрокаТЗПриемник.ДатаУспешногоПолученияПриглашений = СтрокаТЗИсточник.ДатаУспешногоПолученияПриглашений;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Для каждого СтрокаТЗПриемник Из ДанныеУчетныхЗаписей Цикл
			Если Не ДатаЗапросаПриглашенияЗаполнена(СтрокаТЗПриемник.ДатаУспешногоПолученияПриглашений) Тогда
				СтрокаТЗПриемник.ДатаУспешногоПолученияПриглашений = СтрокаТЗПриемник.ДатаПолученияПриглашенийИзНастройки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	 
	ТаблицаПриглашенийПроверочная = ТаблицаДанныхУчастниковОбмена(КлючиСинхронизации,
		КонтекстДиагностики, Истина);
	РезультатОбработки = ОбработатьТаблицуПриглашений(ТаблицаПриглашенийПроверочная, КонтекстДиагностики, Ложь);
	
	Если РезультатОбработки.ДанныеПоУчетнымЗаписям <> Неопределено Тогда
		Для каждого ДанныеПоУчетнойЗаписи Из РезультатОбработки.ДанныеПоУчетнымЗаписям Цикл
			
			СтрокаТЗ = ДанныеУчетныхЗаписей.Найти(ДанныеПоУчетнойЗаписи.ИдентификаторОрганизации, "ИдентификаторУчетнойЗаписи");
			Если СтрокаТЗ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ДатаЗапросаПриглашенияЗаполнена(СтрокаТЗ.ДатаПолученияПриглашенийИзНастройки) И ДатаЗапросаПриглашенияЗаполнена(СтрокаТЗ.ДатаУспешногоПолученияПриглашений) Тогда
				Если СтрокаТЗ.ПроверочнаяДатаПолученияПриглашенийИзНастройки <> СтрокаТЗ.ДатаУспешногоПолученияПриглашений Тогда
					СинхронизацияЭДО.ИзменитьСостояниеОбмена(ДанныеПоУчетнойЗаписи.ИдентификаторОрганизации,
						"ПроверочнаяДатаПолученияПриглашений", СтрокаТЗ.ДатаУспешногоПолученияПриглашений);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТЗ.ДатаПолученияПриглашенийИзНастройки = СтрокаТЗ.ПроверочнаяДатаПолученияПриглашенийИзНастройки
				И ДатаЗапросаПриглашенияЗаполнена(СтрокаТЗ.ДатаУспешногоПолученияПриглашений) Тогда
				Если СтрокаТЗ.ПроверочнаяДатаПолученияПриглашенийИзНастройки <> СтрокаТЗ.ДатаУспешногоПолученияПриглашений Тогда
					СинхронизацияЭДО.ИзменитьСостояниеОбмена(ДанныеПоУчетнойЗаписи.ИдентификаторОрганизации,
						"ПроверочнаяДатаПолученияПриглашений", СтрокаТЗ.ДатаУспешногоПолученияПриглашений);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеПоУчетнойЗаписи.ЕстьНеполученные Тогда
				Продолжить;
			КонецЕсли;
			
			КраткийТекстОшибки = НСтр("ru = 'Имеются неполученные приглашения к обмену электронными документами, ограниченные датой запроса данных у оператора электронного документооборота'");
			ПодробныйТекстОшибки = КраткийТекстОшибки + Символы.ПС
				+ НСтр("ru = 'Для получения приглашений измените начальную дату запроса в настройках учетной записи'");
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("ПроверочнаяДатаПолученияЭД", ДанныеПоУчетнойЗаписи.ДатаПервогоНеполученного - 1);
			ДополнительныеДанные.Вставить("ДатаПроверки", СтрокаТЗ.ДатаУспешногоПолученияПриглашений);
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеДанные);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Получение приглашений к обмену электронными документами'"),
				СинхронизацияЭДО.ВидОшибкиЕстьНеполученныеПриглашения(),
				КраткийТекстОшибки,
				ПодробныйТекстОшибки,
				ДополнительныеПараметрыОшибки);
			Ошибка.УчетнаяЗапись = ДанныеПоУчетнойЗаписи.ИдентификаторОрганизации;
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработка таблицы приглашений.
//
// Параметры:
//  ТаблицаПриглашений - см. НоваяТаблицаПриглашений
//  Сохранить - Булево - если Истина, происходит запись приглашений в базу данных.
//
// Возвращаемое значение:
// Структура - результат обработки таблицы приглашений.
//
Функция ОбработатьТаблицуПриглашений(ТаблицаПриглашений, КонтекстДиагностики, Сохранить = Истина)
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("КоличествоПолученных", 0);
	РезультатОбработки.Вставить("ДанныеПоУчетнымЗаписям", Неопределено);
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ВнешнийИД КАК ВнешнийКод,
	|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Приглашения.Идентификатор КАК ИдентификаторКонтрагента,
	|	Приглашения.ИдентификаторОператора КАК ИдентификаторОператора,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП КАК КПП,
	|	Приглашения.Состояние КАК Состояние,
	|	Приглашения.Наименование КАК Наименование,
	|	Приглашения.ТекстПриглашения КАК ТекстПриглашения,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки КАК ОписаниеОшибки,
	|	Приглашения.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВнешнийКод,
	|	ИдентификаторОрганизации,
	|	ИдентификаторКонтрагента,
	|	ИдентификаторОператора,
	|	ИНН,
	|	КПП,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ВнешнийКод КАК ВнешнийКод,
	|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Приглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	Приглашения.ИдентификаторОператора КАК ИдентификаторОператора,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП КАК КПП,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ИдентификаторОрганизации,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийКод,
	|	Приглашения.ИдентификаторКонтрагента,
	|	Приглашения.ИдентификаторОператора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВнешнийКод,
	|	ИдентификаторОрганизации,
	|	ИдентификаторКонтрагента,
	|	ИдентификаторОператора,
	|	ИНН,
	|	КПП,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приглашения.ВнешнийКод КАК ВнешнийКод,
	|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Приглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	Приглашения.ИдентификаторОператора КАК ИдентификаторОператора,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП КАК КПП,
	|	Приглашения.ТекстПриглашения КАК ТекстПриглашения,
	|	Приглашения.Наименование КАК Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки КАК ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника,
	|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	УчетныеЗаписиЭДО.Организация КАК Организация,
	|	Приглашения.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|			ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|			ПО Приглашения.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|		ПО ПоследниеИзмененияЗаписей.ИдентификаторОрганизации = Приглашения.ИдентификаторОрганизации
	|		И ПоследниеИзмененияЗаписей.ИдентификаторКонтрагента = Приглашения.ИдентификаторКонтрагента
	|		И ПоследниеИзмененияЗаписей.ИдентификаторОператора = Приглашения.ИдентификаторОператора
	|		И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|		И ПоследниеИзмененияЗаписей.КПП = Приглашения.КПП
	|		И ПоследниеИзмененияЗаписей.ВнешнийКод = Приглашения.ВнешнийКод
	|		И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	
	Запросы = Новый Массив;
	Запросы.Добавить(УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО"));
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = ИтоговыйЗапрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); // Приглашения сохранять можно с любыми правами, а вот принимать нет.
	
	// В случае ошибки, содержащейся в запросе на присоединение контрагента,
	// Такском возвращает запись с указанием ошибки, но без КПП.
	// В результате запрос может вернуть 2 записи по одному контрагенту
	// (КПП в одной записи пустой, а в другой заполнен).
	// Чтобы не вводить в заблуждение пользователей, одну запись (более раннюю) надо удалить.
	ТЗПоследнихИзменений = Результат.Выгрузить();
	Для Сч = -ТЗПоследнихИзменений.Количество() + 1 По 0 Цикл
		СтрокаТЗ = ТЗПоследнихИзменений[-Сч];
		Если СтрокаТЗ.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторОрганизации", СтрокаТЗ.ИдентификаторОрганизации);
			Отбор.Вставить("ИдентификаторОператора", СтрокаТЗ.ИдентификаторОператора);
			Отбор.Вставить("ИНН", СтрокаТЗ.ВнешнийКод);

			МассивСтрок = ТЗПоследнихИзменений.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() > 1 Тогда
				ПервыйЭлемент = МассивСтрок[0];
				ВторойЭлемент = МассивСтрок[1];
				Если НЕ ЗначениеЗаполнено(ПервыйЭлемент.КПП) ИЛИ НЕ ЗначениеЗаполнено(ВторойЭлемент.КПП) Тогда
					Если ПервыйЭлемент.Изменен > ВторойЭлемент.Изменен Тогда
						ТЗПоследнихИзменений.Удалить(ВторойЭлемент);
					Иначе
						ТЗПоследнихИзменений.Удалить(ПервыйЭлемент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПоУчетнымЗаписям = ТЗПоследнихИзменений.Скопировать(, "ИдентификаторОрганизации");
	ДанныеПоУчетнымЗаписям.Свернуть("ИдентификаторОрганизации");
	ДанныеПоУчетнымЗаписям.Колонки.Добавить("ЕстьНеполученные", Новый ОписаниеТипов("Булево"));
	ДанныеПоУчетнымЗаписям.Колонки.Добавить("ДатаПервогоНеполученного", Новый ОписаниеТипов("Число"));
	ДанныеПоУчетнымЗаписям.Колонки.Добавить("ДатаУспешногоПолученияПриглашений", Новый ОписаниеТипов("Число"));
	
	РезультатОбработки.ДанныеПоУчетнымЗаписям = ДанныеПоУчетнымЗаписям;
	СтатусПриглашенияПринято = Перечисления.СтатусыПриглашений.Принято;
	
	МаксимальныйИндексИсходнойТаблицы = ТаблицаПриглашений.Количество() - 1;
	Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
		СтрокаТаблицыДанныхПоУчетнымЗаписям = ДанныеПоУчетнымЗаписям.Найти(
			НовыеПриглашения.ИдентификаторОрганизации, "ИдентификаторОрганизации");
		
		// Поиск существующего приглашения
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
			|	1 КАК Приоритет
			|ИЗ
			|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента <> """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
			|	2 КАК Приоритет
			|ИЗ
			|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ = &КлючПриглашения
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.Ключ <> ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
			|	3 КАК Приоритет
			|ИЗ
			|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора = &ИдентификаторОператора
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИНН = &ИНН
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.КПП = &КПП
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОператора <> """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Ключ КАК КлючПриглашения,
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
			|	4 КАК Приоритет
			|ИЗ
			|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИНН = &ИНН
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.КПП = &КПП
			|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = """"
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";
		
		Запрос.УстановитьПараметр("КлючПриглашения", НовыеПриглашения.ВнешнийКод);
		Запрос.УстановитьПараметр("ИдентификаторОрганизации", НовыеПриглашения.ИдентификаторОрганизации);
		Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.ИдентификаторКонтрагента);
		Запрос.УстановитьПараметр("ИдентификаторОператора", НовыеПриглашения.ИдентификаторОператора);
		Запрос.УстановитьПараметр("ИНН", Строка(НовыеПриглашения.ИНН));
		Запрос.УстановитьПараметр("КПП", Строка(НовыеПриглашения.КПП));

		ЭтоНовоеПриглашение = Истина;
		
		КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
		КлючПриглашения.Ключ = Строка(Новый УникальныйИдентификатор);
		КлючПриглашения.ИдентификаторОрганизации = НовыеПриглашения.ИдентификаторОрганизации;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ЭтоНовоеПриглашение = Ложь;
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			КлючПриглашения.Ключ = ВыборкаДетальныеЗаписи.КлючПриглашения;
		КонецЕсли;
		
		Если Не Сохранить Тогда
			Если ЗначениеЗаполнено(НовыеПриглашения.ИдентификаторКонтрагента) И ЭтоНовоеПриглашение Тогда
				СтрокаТаблицыДанныхПоУчетнымЗаписям.ЕстьНеполученные = Истина;
				Если ЗначениеЗаполнено(СтрокаТаблицыДанныхПоУчетнымЗаписям.ДатаПервогоНеполученного) Тогда
					СтрокаТаблицыДанныхПоУчетнымЗаписям.ДатаПервогоНеполученного =
						Мин(СтрокаТаблицыДанныхПоУчетнымЗаписям.ДатаПервогоНеполученного, НовыеПриглашения.Изменен);
				Иначе 
					СтрокаТаблицыДанныхПоУчетнымЗаписям.ДатаПервогоНеполученного = НовыеПриглашения.Изменен;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ключ = КлючПриглашения.Ключ;
			МенеджерЗаписи.ИдентификаторОрганизации = НовыеПриглашения.ИдентификаторОрганизации;
			МенеджерЗаписи.Прочитать();
			
			Если Не МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Ключ = КлючПриглашения.Ключ;
				МенеджерЗаписи.ИдентификаторОрганизации = НовыеПриглашения.ИдентификаторОрганизации;
				МенеджерЗаписи.Организация	= НовыеПриглашения.Организация;
			КонецЕсли;
			
			ИдентификаторКонтрагента = Неопределено;
			Если ЗначениеЗаполнено(НовыеПриглашения.ИдентификаторКонтрагента) Тогда
				ИдентификаторКонтрагента = НовыеПриглашения.ИдентификаторКонтрагента;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
				УстановитьДатуПроверкиПриглашений(НовыеПриглашения.ИдентификаторОрганизации, НовыеПриглашения.Изменен);
				СтрокаТаблицыДанныхПоУчетнымЗаписям.ДатаУспешногоПолученияПриглашений = НовыеПриглашения.Изменен;
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
				МенеджерЗаписи.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МенеджерЗаписи.ИдентификаторКонтрагента)
				И Не ЗначениеЗаполнено(МенеджерЗаписи.Тип) Тогда
				
				МенеджерЗаписи.Тип = Перечисления.ТипыПриглашений.НаИдентификатор;
			КонецЕсли;
			
			ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
			ПараметрыПриглашения.ИдентификаторОрганизации = НовыеПриглашения.ИдентификаторКонтрагента;
			ПараметрыПриглашения.ИдентификаторКонтрагента = НовыеПриглашения.ИдентификаторОрганизации;
			ПараметрыПриглашения.ИНН = НовыеПриглашения.ИНН;
			ПараметрыПриглашения.КПП = НовыеПриглашения.КПП;
			
			ОбменМеждуСобственнымиОрганизациями = ПриглашенияЭДО.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
			ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");
			
			ВозможноОпределитьКонтрагента = Не ЗначениеЗаполнено(МенеджерЗаписи.Контрагент)
				И ЗначениеЗаполнено(НовыеПриглашения.ИНН);
						
			Если ВозможноОпределитьКонтрагента Тогда					
				МенеджерЗаписи.Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя,
						НовыеПриглашения.ИНН, НовыеПриглашения.КПП);
			КонецЕсли;				
				
			Если ВозможноОпределитьКонтрагента
				И НовыеПриглашения.СтатусУчастника = СтатусПриглашенияПринято Тогда
						
				СоздатьКонтрагентаБезусловно = 
				ПриглашенияЭДОСлужебный.СоздатьКонтрагентаБезусловно(НовыеПриглашения.ИНН, НовыеПриглашения.КПП);
					
				Если СоздатьКонтрагентаБезусловно И Не ОбменМеждуСобственнымиОрганизациями Тогда
					РеквизитыКонтрагента = Новый Структура;
					РеквизитыКонтрагента.Вставить("ИНН", НовыеПриглашения.ИНН);
					РеквизитыКонтрагента.Вставить("КПП", НовыеПриглашения.КПП);
					РеквизитыКонтрагента.Вставить("Наименование", НовыеПриглашения.Наименование);
							
					МенеджерЗаписи.Контрагент = ИнтеграцияЭДО.СоздатьКонтрагента(РеквизитыКонтрагента);
					Если Не ЗначениеЗаполнено(МенеджерЗаписи.Контрагент) Тогда
						ДобавитьОшибкуПустогоКонтрагентаВПриглашении(КонтекстДиагностики, КлючПриглашения);
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				Иначе
					ДобавитьОшибкуПустогоКонтрагентаВПриглашении(КонтекстДиагностики, КлючПриглашения);
				КонецЕсли;
			КонецЕсли;
					
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Отклонено
				Или НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Принято
				Или НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Ошибка Тогда
				
				МенеджерЗаписи.Ознакомиться = Истина;
			КонецЕсли;
			
			// Заполнение остальных реквизитов.
			Если ЗначениеЗаполнено(НовыеПриглашения.ОписаниеОшибки) Тогда
				МенеджерЗаписи.ОписаниеОшибки = НовыеПриглашения.ОписаниеОшибки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
				МенеджерЗаписи.ТекстПриглашения = НовыеПриглашения.ТекстПриглашения;
			КонецЕсли;
			
			МенеджерЗаписи.Статус = НовыеПриглашения.СтатусУчастника;
			МенеджерЗаписи.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			
			МенеджерЗаписи.Наименование = НовыеПриглашения.Наименование;
			МенеджерЗаписи.ИНН = НовыеПриглашения.ИНН;
			МенеджерЗаписи.КПП = НовыеПриглашения.КПП; 
			
			ИндексИсходнойТаблицы = НовыеПриглашения.НомерСтроки - 1;
			Если МаксимальныйИндексИсходнойТаблицы >= ИндексИсходнойТаблицы Тогда
				СтрокаИсходнойТаблицы = ТаблицаПриглашений[ИндексИсходнойТаблицы];
				МенеджерЗаписи.ПричинаОтказа = СтрокаИсходнойТаблицы.ПричинаОтказаОтПриглашения;
			КонецЕсли;
			
			ТекстОписанияОшибки = "";
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Ошибка Тогда
				ШаблонОписанияОшибки = НСтр("ru = '%1. Повторите получение приглашений.'");
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
					НовыеПриглашения.ОписаниеОшибки);
			КонецЕсли;
			
			МенеджерЗаписи.ОписаниеОшибки = ТекстОписанияОшибки;
			МенеджерЗаписи.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

		СведенияОПриглашении = ПриглашенияЭДОСлужебный.СведенияОЗаписанномПриглашении();
		ЗаполнитьЗначенияСвойств(СведенияОПриглашении, МенеджерЗаписи);
		СведенияОПриглашении.Организация = НовыеПриглашения.Организация;
		ПриглашенияЭДОСобытия.ПослеИзмененияПриглашения(СведенияОПриглашении);
		
		УстановитьДатуПроверкиПриглашений(НовыеПриглашения.ИдентификаторОрганизации, НовыеПриглашения.Изменен);
		СтрокаТаблицыДанныхПоУчетнымЗаписям.ДатаУспешногоПолученияПриглашений = НовыеПриглашения.Изменен;
		
		РезультатОбработки.КоличествоПолученных = РезультатОбработки.КоличествоПолученных + 1;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти