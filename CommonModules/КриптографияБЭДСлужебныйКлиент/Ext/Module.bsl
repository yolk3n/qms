#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПодписи

Процедура ОбработатьОшибкуПолученияМенеджераКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ШаблонСообщения = НСтр("ru = 'Получение менеджера криптографии: %1'");
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
		ТекстСообщения = ИнформацияОбОшибке;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;

	Контекст.РезультатПроверки.ОписаниеОшибки = ТекстСообщения;

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьПодписьПослеПолученияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт

	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ОбработатьОшибкуПолученияМенеджераКриптографии(МенеджерКриптографии, Ложь, Контекст);
		Возврат;
	КонецЕсли;

	Контекст.МенеджерКриптографии = МенеджерКриптографии;

	ОповещениеПолучениеСертификатов = Новый ОписаниеОповещения("ПроверитьПодписьПослеПолученияСертификатовИзПодписи",
		ЭтотОбъект, Контекст, "ОбработатьОшибкуПолученияСертификатовИзПодписи", ЭтотОбъект);

	МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(ОповещениеПолучениеСертификатов, Контекст.Подпись);

КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

	Контекст.РезультатПроверки.ОписаниеОшибки =  ТекстСообщения;

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьПодписьПослеПолученияСертификатовИзПодписи(СертификатыПодписи, Контекст) Экспорт

	СертификатКриптографии = КриптографияБЭДКлиентСервер.СертификатПодписавшейСтороны(СертификатыПодписи);
	Если СертификатКриптографии = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьЗавершение", ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Контекст.ИсходныеДанные, Контекст.Подпись, , , Ложь);
		Возврат;
	КонецЕсли;

	Контекст.РезультатПроверки.СвойстваПодписи.Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
	Контекст.РезультатПроверки.СвойстваПодписи.КомуВыданСертификат = ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта(
		СертификатКриптографии);

	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ОбработатьОшибкуВыгрузкиСертификата", ЭтотОбъект);

	СертификатКриптографии.НачатьВыгрузку(Оповещение);

КонецПроцедуры

Процедура ОбработатьОшибкуВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ШаблонСообщения = НСтр("ru = 'Выгрузка сертификата: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке);

	Контекст.РезультатПроверки.ОписаниеОшибки =  ТекстСообщения;

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьПодписьПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт

	Контекст.РезультатПроверки.СвойстваПодписи.Сертификат = ДанныеСертификата;

	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьЗавершение", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Контекст.ИсходныеДанные, Контекст.Подпись, , , Ложь);

КонецПроцедуры

// Продолжение процедуры ПроверитьПодписьПослеВыгрузкиСертификата.
// 
// Параметры:
//  Результат - Булево
//            - Строка
//            - Неопределено
//  Контекст - Структура:
//   * ВидОперации - Строка
//   * Оповещение - ОписаниеОповещения
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//   * ПаролиСертификатов - См. КриптографияБЭДКлиент.Подписать.ПаролиСертификатов
Процедура ПроверитьПодписьЗавершение(Результат, Контекст) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ПодробноеПредставлениеОшибки = Результат;
		КраткоеПредставлениеОшибки = Результат;
		ДобавитьОшибкуКриптографии(Контекст.КонтекстДиагностики, Контекст.ВидОперации, ПодробноеПредставлениеОшибки,
			КраткоеПредставлениеОшибки);
		Контекст.РезультатПроверки.ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		Контекст.РезультатПроверки.СвойстваПодписи.Комментарий = ПодробноеПредставлениеОшибки;
	КонецЕсли;

	Контекст.РезультатПроверки.СвойстваПодписи.ДатаПроверкиПодписи = ОбщегоНазначенияКлиент.ДатаУниверсальная();
	Контекст.РезультатПроверки.СвойстваПодписи.ПодписьВерна = Результат = Истина;

	Поток = Новый ПотокВПамяти;
	Поток.НачатьПолучениеРазмера(Новый ОписаниеОповещения("ПроверитьПодписьЗавершениеПродолжение", ЭтотОбъект,
		Контекст));

КонецПроцедуры

Процедура ПроверитьПодписьЗавершениеПродолжение(Результат, Контекст) Экспорт

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

#КонецОбласти

Процедура ПослеВыполненияКриптографическойОперации(Результат, Контекст) Экспорт

	Если Контекст.ПаролиСертификатов = Неопределено Тогда
		Контекст.ПаролиСертификатов = КриптографияБЭДКлиент.НовыеПаролиСертификатов();
	КонецЕсли;

	Если Результат.Свойство("КонтекстОперации") И Результат.Свойство("ВыбранныйСертификат") Тогда
		Контекст.ПаролиСертификатов.Вставить(Результат.ВыбранныйСертификат.Ссылка, Результат.КонтекстОперации);
	КонецЕсли;

	Результат.Вставить("ПаролиСертификатов", Контекст.ПаролиСертификатов);
	ОбработатьОшибкиКриптографическойОперации(Результат, Контекст.ВидОперации, Контекст.КонтекстДиагностики);

	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	КонецЕсли;

КонецПроцедуры

// Обрабатывает ошибки криптографической операции.
// 
// Параметры:
//  Результат - Структура - см. описание результата, возвращаемого при выполнении оповещения, переданного в параметре
//              ОбработкаРезультата метода ЭлектроннаяПодписьКлиент.Подписать
//  ВидОперации - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ОбработатьОшибкиКриптографическойОперации(Результат, ВидОперации, КонтекстДиагностики) Экспорт
	// Для обработки случая, когда криптографическая операция выполняется повторно без ошибки.
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не Результат.Успех И Не Результат.Отказ Тогда
		Если Результат.Свойство("ОписаниеОшибки") И Результат.ОписаниеОшибки <> "" Тогда
			ТекстОшибки = Результат.ОписаниеОшибки;
		Иначе
			ТекстОшибки = НСтр("ru = 'Произошла криптографическая ошибка'");
		КонецЕсли;

		ПодробноеПредставлениеОшибки = ТекстОшибки;
		КраткоеПредставлениеОшибки = ТекстОшибки;

		КриптографияБЭДСобытияКлиент.ПриОшибкеВыполненияКриптографическойОперации(КонтекстДиагностики,
			ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);

		ДополнительныеПараметрыОшибки = Новый Структура;
		Если Результат.Свойство("ВыбранныйСертификат") Тогда
			ДополнительныеПараметрыОшибки.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
		КонецЕсли;
		ДобавитьОшибкуКриптографии(КонтекстДиагностики, ВидОперации, ПодробноеПредставлениеОшибки,
			КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет ошибку криптографии в контекст диагностики.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ПодробноеПредставлениеОшибки - Строка
//  КраткоеПредставлениеОшибки - Строка
//  ДополнительныеПараметрыОшибки - Структура
Процедура ДобавитьОшибкуКриптографии(КонтекстДиагностики, ВидОперации, ПодробноеПредставлениеОшибки,
	КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки = Неопределено)

	ВидОшибкиКриптография = КриптографияБЭДКлиентСервер.ВидОшибкиКриптография();
	Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации, ВидОшибкиКриптография,
		ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки);
	ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Истина);

КонецПроцедуры

Процедура ПолучитьОтпечаткиСертификатов(Оповещение, Личные, ПоказатьОшибку = Ложь) Экспорт

	Контекст = Новый Структура("Оповещение", Оповещение);
	СлужебноеОповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(СлужебноеОповещение, Личные, ПоказатьОшибку);

КонецПроцедуры

Процедура ПослеПолученияОтпечатков(Отпечатки, Контекст) Экспорт

	РезультатПолученияОтпечатков = КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков();

	Если ТипЗнч(Отпечатки) = Тип("Строка") Тогда
		РезультатПолученияОтпечатков.Ошибка = Истина;
		РезультатПолученияОтпечатков.ТекстОшибки = Отпечатки;
	Иначе
		РезультатПолученияОтпечатков.Доступность = Истина;
		Для Каждого КлючЗначение Из Отпечатки Цикл
			РезультатПолученияОтпечатков.Отпечатки.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;

	РезультатыПолучения = КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков();
	РезультатыПолучения.Клиент = РезультатПолученияОтпечатков;
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатыПолучения);

КонецПроцедуры

Процедура НайтиСоздатьСертификатКриптографии(Отпечаток, Организация, Оповещение) Экспорт

	Контекст = Новый Структура;
	Контекст.Вставить("Отпечаток", Отпечаток);
	Контекст.Вставить("Организация", Организация);
	Контекст.Вставить("Оповещение", Оповещение);

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПолучитьМенеджерКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);

КонецПроцедуры

Процедура ПослеПолученияОтпечатковПолучитьМенеджерКриптографии(Отпечатки, Контекст) Экспорт

	Если ТипЗнч(Отпечатки) <> Тип("Соответствие") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Отпечатки);
		Возврат;
	КонецЕсли;

	ОтпечатокНайден = Ложь;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		Если Контекст.Отпечаток = КлючЗначение.Ключ Тогда
			ОтпечатокНайден = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии",
				ЭтотОбъект, Контекст);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, КлючЗначение.Ключ, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ОтпечатокНайден Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии(Сертификат, Контекст) Экспорт

	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		Возврат;
	КонецЕсли;

	ВыгрузитьСертификатЗавершение = Новый ОписаниеОповещения("СертификатВыгрузитьПродолжить", ЭтотОбъект, Контекст);

	Сертификат.НачатьВыгрузку(ВыгрузитьСертификатЗавершение);

КонецПроцедуры

Процедура СертификатВыгрузитьПродолжить(ДвоичныеДанныеСертификата, Контекст) Экспорт

	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;

	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеПолученияМенеджераКриптографии", ЭтотОбъект,
		Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПолучениеСертификатов", Ложь);

КонецПроцедуры

Процедура ВыполнитьДействияПослеПолученияМенеджераКриптографии(МенеджерКриптографии, Контекст = Неопределено) Экспорт

	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНайтиСертификатКриптографииПользователя", ЭтотОбъект,
		Контекст);
	МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОписаниеОповещения);

КонецПроцедуры

Процедура СоздатьНайтиСертификатКриптографииПользователя(ИнформацияМодуля, Контекст = Неопределено) Экспорт

	Сертификат= КриптографияБЭДСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		Контекст.ДвоичныеДанныеСертификата, Контекст.Организация);

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Сертификат);

КонецПроцедуры

Процедура ПроверитьНаличиеУстановленныхПрограммПослеПоискаУстановленныхПрограмм(РезультатПроверки, Контекст) Экспорт

	ЕстьПрограммаКриптографии = Ложь;
	Для Каждого ОписаниеПрограммы Из РезультатПроверки Цикл
		Если ОписаниеПрограммы.Установлена Тогда
			ЕстьПрограммаКриптографии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ЕстьПрограммаКриптографии);

КонецПроцедуры

Процедура ОбработкаРезультатаТестаСертификата(Результат, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		Возврат;
	КонецЕсли;

	ВсеПроверки = Новый Массив;
	ВсеПроверки.Добавить(ДополнительныеПараметры.Результат.ПроверкиНаСервере);
	ВсеПроверки.Добавить(ДополнительныеПараметры.Результат.ПроверкиНаКлиенте);

	Для Каждого Проверка Из ВсеПроверки Цикл

		Если ТипЗнч(Проверка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;

		ТекущийРезультат = Ложь;

		Для Каждого КлючЗначение Из Проверка Цикл
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Булево") Тогда
				ТекущийРезультат = Значение;
				Если Не ТекущийРезультат Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ТекущийРезультат Тогда
			Результат = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаЗавершенияТестаСертификата(Результат, Контекст) Экспорт

	ОбработкаЗавершения = Контекст.ОбработкаЗавершения;
	Контекст.ДополнительныеПараметры.Очистить();
	Контекст.Очистить();

	Если ТипЗнч(ОбработкаЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДоступныеСертификатыПослеПолученияОтпечатков(Результат, Контекст) Экспорт

	ОшибкаПолученияОтпечатков = "";
	Сертификаты = КриптографияБЭДСлужебныйВызовСервера.ДоступныеСертификаты(Результат, ОшибкаПолученияОтпечатков);

	Если ЗначениеЗаполнено(ОшибкаПолученияОтпечатков) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкаПолученияОтпечатков);
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Сертификаты);

КонецПроцедуры

Процедура ОпределитьПрограммуСертификатаПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт

	НачатьОпределениеПрограммыСертификатаКриптографии(
		СертификатКриптографии, Контекст.Оповещение, Контекст.Пароль);

КонецПроцедуры

Процедура НачатьОпределениеПрограммыСертификатаКриптографии(Знач Сертификат, Знач ОбработкаЗавершения,
	Знач Пароль = Неопределено)

	ПроцессВыполнения = НовыйПроцессОпределенияПрограммыСертификатаКриптографии(Сертификат, ОбработкаЗавершения, Пароль);

	ВыполнитьОпределениеПрограммыСертификатаКриптографии(Неопределено, ПроцессВыполнения);

КонецПроцедуры

#Область ОпределениеПрограммыСертификатаКриптографии

Процедура ЗавершитьОпределениеПрограммыСертификатаКриптографии(Знач ПроцессВыполнения)

	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, ПроцессВыполнения.Программа);

КонецПроцедуры

Функция НовыйПроцессОпределенияПрограммыСертификатаКриптографии(Знач Сертификат, Знач ОбработкаЗавершения, Знач Пароль)

	Процесс = Новый Структура;
	Процесс.Вставить("Сертификат", Сертификат);
	Процесс.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	Процесс.Вставить("ТекущийЭтап");

	Процесс.Вставить("УстановленныеПрограммы");
	Процесс.Вставить("НаборПрограмм");

	Процесс.Вставить("СвойстваПароля");
	Процесс.Вставить("Пароль", Пароль);

	Процесс.Вставить("ПрограммаДляПроверки");
	Процесс.Вставить("РезультатПроверкиПрограммы", Ложь);
	Процесс.Вставить("ПроверенныеПрограммы", Новый Массив);
	Процесс.Вставить("Программа");

	Возврат Процесс;

КонецФункции

Процедура ВыполнитьОпределениеПрограммыСертификатаКриптографии(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт

	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;

	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_НайтиУстановленныеПрограммы(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_ВводПароля(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_ПроверитьПрограммы(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	ЗавершитьОпределениеПрограммыСертификатаКриптографии(ПроцессВыполнения);

КонецПроцедуры

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_НайтиУстановленныеПрограммы(ПроцессВыполнения)

	Выполнено = Ложь;

	УстановленныеПрограммы = ПроцессВыполнения.УстановленныеПрограммы;
	НаборПрограмм = ПроцессВыполнения.НаборПрограмм;

	Если ЗначениеЗаполнено(УстановленныеПрограммы) Тогда
		Если Не ЗначениеЗаполнено(НаборПрограмм) Тогда
			ПроцессВыполнения.НаборПрограмм = КриптографияБЭДСлужебныйВызовСервера.НайтиПрограммыЭлектроннойПодписиИШифрования(
				УстановленныеПрограммы);
		КонецЕсли;
		Выполнено = Истина;
	ИначеЕсли ТипЗнч(УстановленныеПрограммы) = Тип("Массив") Тогда // ничего не нашли (пустой массив)
		ЗавершитьОпределениеПрограммыСертификатаКриптографии(ПроцессВыполнения);
	Иначе
		ПроцессВыполнения.Вставить("ТекущийЭтап", "УстановленныеПрограммы");
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии",
			ЭтотОбъект, ПроцессВыполнения);
		ОписаниеПрограмм = КриптографияБЭДСлужебныйВызовСервера.ОписанияПрограммЭлектроннойПодписиИШифрования();
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(ОбработкаПродолжения, ОписаниеПрограмм, Ложь);
	КонецЕсли;

	Возврат Выполнено;

КонецФункции

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_ВводПароля(ПроцессВыполнения)

	Выполнено = Ложь;

	СвойстваПароля = ПроцессВыполнения.СвойстваПароля;
	Если ТипЗнч(СвойстваПароля) = Тип("Структура") Тогда
		ПроцессВыполнения.Пароль = СвойстваПароля.Пароль;
	КонецЕсли;

	Если ПроцессВыполнения.Пароль = Неопределено Тогда
		ПроцессВыполнения.Вставить("ТекущийЭтап", "СвойстваПароля");
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии",
			ЭтотОбъект, ПроцессВыполнения);
		ПараметрыВвода = Новый Структура;
		ПараметрыВвода.Вставить("Заголовок", НСтр("ru = 'Проверка сертификата криптографии'"));
		ПараметрыВвода.Вставить("Подсказка", НСтр("ru = 'Введите пароль закрытого ключа сертификата:'"));
		ОбщегоНазначенияБЭДКлиент.ПоказатьВводПароля(ПараметрыВвода, ОбработкаПродолжения);
	Иначе
		Выполнено = Истина;
	КонецЕсли;

	Возврат Выполнено;

КонецФункции

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_ПроверитьПрограммы(ПроцессВыполнения)

	ПрограммаДляПроверки = ПроцессВыполнения.ПрограммаДляПроверки;
	РезультатПроверки = ПроцессВыполнения.РезультатПроверкиПрограммы;

	Если ЗначениеЗаполнено(ПрограммаДляПроверки) Тогда
		ПроцессВыполнения.ПроверенныеПрограммы.Добавить(ПрограммаДляПроверки);
		Если РезультатПроверки Тогда
			ПроцессВыполнения.Программа = ПрограммаДляПроверки;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	НаборПрограмм = ПроцессВыполнения.НаборПрограмм;

	Для Каждого Программа Из НаборПрограмм Цикл
		Если ПроцессВыполнения.ПроверенныеПрограммы.Найти(Программа) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроцессВыполнения.Вставить("ТекущийЭтап", "РезультатПроверкиПрограммы");
		ПроцессВыполнения.Вставить("ПрограммаДляПроверки", Программа);
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии",
			ЭтотОбъект, ПроцессВыполнения);
		НачатьПроверкуСертификатаКриптографииПрограммой(
			ПроцессВыполнения.Сертификат, ПроцессВыполнения.ПрограммаДляПроверки, ПроцессВыполнения.Пароль,
			ОбработкаПродолжения);
		Возврат Ложь;
	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура НачатьПроверкуСертификатаКриптографииПрограммой(Знач Сертификат, Знач Программа, Знач Пароль,
	Знач ОбработкаЗавершения)

	Контекст = Новый Структура;
	Контекст.Вставить("Сертификат", Сертификат);
	Контекст.Вставить("Программа", Программа);
	Контекст.Вставить("Пароль", Пароль);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);

	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_ВыгрузкаСертификата",
		ЭтотОбъект, Контекст);
	Сертификат.НачатьВыгрузку(ОбработкаПродолжения);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ВыгрузкаСертификата(Знач ДвоичныеДанныеСертификата,
	Знач Контекст) Экспорт

	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);

	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_СозданиеМенеджераКриптографии",
		ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОбработкаПродолжения, "Подписание", Ложь, Контекст.Программа);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_СозданиеМенеджераКриптографии(Знач Менеджер, Знач Контекст) Экспорт

	Если ТипЗнч(Менеджер) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);
		Возврат;
	КонецЕсли;

	Менеджер.ПарольДоступаКЗакрытомуКлючу = Контекст.Пароль;

	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписания",
		ЭтотОбъект, Контекст, "НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписанияОшибка", ЭтотОбъект);

	Менеджер.НачатьПодписывание(ОбработкаПродолжения, Контекст.ДвоичныеДанныеСертификата, Контекст.Сертификат);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписания(Знач ДанныеПодписи, Знач Контекст) Экспорт

	Подписано = Истина;

	Попытка
		Подписано = ЗначениеЗаполнено(ДанныеПодписи);
	Исключение
		Подписано = Ложь;
	КонецПопытки;

	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Подписано);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписанияОшибка(ИнформацияОбОшибке,
	СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);

КонецПроцедуры

#КонецОбласти

#Область УстановкаПрограммКриптографии

#Область УстановитьCryptoPRO

Процедура УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(Результат, ВходящийКонтекст) Экспорт

	ОповещениеПослеСозданияКаталога = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеСозданияВременногоКаталога",
		ЭтотОбъект, ВходящийКонтекст);

	ВходящийКонтекст.Вставить("ПослеСозданияВременногоКаталога", ОповещениеПослеСозданияКаталога);

	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		ВходящийКонтекст.Вставить("РегистрационныеДанные", Результат);
		Оповещение = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеПолученияДистрибутива", ЭтотОбъект,
			ВходящийКонтекст);

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВходящийКонтекст.Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
			"УстановитьCryptoPRO", "Картинка", БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация);

		ДлительнаяОперация = КриптографияБЭДСлужебныйВызовСервера.ПолучитьДистрибутивCryptoProCSP(
			ВходящийКонтекст.РегистрационныеДанные);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Пользователь прервал операцию'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция НовыеПараметрыРегистрацииПрограммыКриптографии() Экспорт

	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("КонтактноеЛицо", "");
	ПараметрыРегистрации.Вставить("ЭлектроннаяПочта", "");
	ПараметрыРегистрации.Вставить("СерийныйНомер", "");
	ПараметрыРегистрации.Вставить("Продукт", "");
	ПараметрыРегистрации.Вставить("ВыполнятьКонтрольЦелостности", Ложь);
	ПараметрыРегистрации.Вставить("ИмяПрограммы", "");

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура УстановитьКриптопровайдерПослеПолученияДистрибутива(ДлительнаяОперация, ВходящийКонтекст) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы, "УстановитьVipNet",
		"Картинка", Новый Картинка);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
		"УстановитьCryptoPRO", "Картинка", Новый Картинка);

	Если ДлительнаяОперация = Неопределено Тогда
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);

		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Вызов API сервиса выдачи дистрибутивов'"));
		МассивСтрок.Добавить(ВходящийКонтекст.ИмяПрограммы);
		МассивСтрок.Добавить(НСтр("ru = 'Не был завершен штатно.'"));

		РезультатВыполнения.Вставить("ОписаниеОшибки", СтрСоединить(МассивСтрок, " "));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатПолученияДистрибутива = КриптографияБЭДСлужебныйВызовСервера.РезультатПолученияДистрибутиваКриптопровайдера(
			ДлительнаяОперация, ВходящийКонтекст.Форма.УникальныйИдентификатор);

		Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(РезультатПолученияДистрибутива.КонтекстДиагностики) Тогда
			ОбработчикПовторенияДействия = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеВводаРегистрационныхДанныхПовторить",
				ЭтотОбъект, Новый Структура("ВходящийКонтекст, РегистрационныеДанные", ВходящийКонтекст,
				ВходящийКонтекст.РегистрационныеДанные));
			ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
			ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия = ОбработчикПовторенияДействия;
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатПолученияДистрибутива.КонтекстДиагностики,
				ПараметрыОбработкиОшибок);
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВходящийКонтекст,
			РезультатПолученияДистрибутива.ДанныеДистрибутива);
		ФайловаяСистемаКлиент.СоздатьВременныйКаталог(ВходящийКонтекст.ПослеСозданияВременногоКаталога);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКриптопровайдерПослеСозданияВременногоКаталога(ИмяКаталогаВременныхФайлов, ВходящийКонтекст) Экспорт

	ИмяКаталогаВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ИмяКаталогаВременныхФайлов);
	ВходящийКонтекст.Вставить("ВременныйКаталог", ИмяКаталогаВременныхФайлов);

	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайловДистрибутива", ЭтотОбъект, ВходящийКонтекст);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Интерактивно = Ложь;
	ПараметрыСохранения.Диалог.Каталог = ИмяКаталогаВременныхФайлов;
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, ВходящийКонтекст.Дистрибутив, ПараметрыСохранения);

КонецПроцедуры

Процедура ПослеСохраненияФайловДистрибутива(ПолученныеФайлы, ВходящийКонтекст) Экспорт

	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗапуститьПриложениеНаКлиенте(
		ВходящийКонтекст.ВременныйКаталог + "Setup.bat", ВходящийКонтекст.ВременныйКаталог, Истина, Ложь,
		ВходящийКонтекст);

КонецПроцедуры

Процедура УстановитьКриптопровайдерПослеВводаРегистрационныхДанныхПовторить(Результат, ДополнительныеПараметры) Экспорт

	ВходящийКонтекст = ДополнительныеПараметры.ВходящийКонтекст;
	РегистрационныеДанные = ДополнительныеПараметры.РегистрационныеДанные;
	Если РегистрационныеДанные.ИмяПрограммы = "CryptoPro CSP" Тогда
		УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(РегистрационныеДанные, ВходящийКонтекст);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗапуститьПриложениеНаКлиенте

Процедура ЗапуститьПриложениеНаКлиенте(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, ВыводитьСообщения,
	ВходящийКонтекст)

	Оповещение = Новый ОписаниеОповещения("ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения", ЭтотОбъект,
		ВходящийКонтекст, "ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения", ЭтотОбъект);

	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.Оповещение = Оповещение;
	ПараметрыЗапуска.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапуска.ДождатьсяЗавершения = ДождатьсяЗавершения;

	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапуска);

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения(КодВозврата, ВходящийКонтекст) Экспорт

	Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Истина);
		РезультатВыполнения.Вставить("ОписаниеОшибки", "");

		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка,
	ВходящийКонтекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
						  |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки,
		ВходящийКонтекст.СтрокаКоманды);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);

	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Выполнено", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);

	ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);

КонецПроцедуры

#КонецОбласти

#КонецОбласти