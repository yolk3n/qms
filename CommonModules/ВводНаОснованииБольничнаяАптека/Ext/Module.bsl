
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Для Каждого КлючИЗначение Из ПараметрыСеанса.ОбъектыВводимыеНаОсновании.Получить() Цикл
		Объекты.Добавить(Метаданные.НайтиПоПолномуИмени(КлючИЗначение.Ключ));
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список команды создания на основании по умолчанию
//
// Параметры:
//  ПолноеИмяОбъекта - Строка - полное имя объекта для которого нужно добавить команды создания на основании.
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(ПолноеИмяОбъекта, КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводятсяНаОсновании = ПараметрыСеанса.ОбъектыВводимыеНаОсновании.Получить().Получить(ПолноеИмяОбъекта);
	Если ВводятсяНаОсновании = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
	   И МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		РежимЗаписи = "Проводить";
	Иначе
		РежимЗаписи = Неопределено;
	КонецЕсли;
	
	Для Каждого Объект Из ВводятсяНаОсновании Цикл
		ДобавитьКомандуСоздатьНаОснованииОбъекта(Объект, КомандыСоздатьНаОсновании, НастройкиФормы, РежимЗаписи);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет команду создания объекта на основании
//
// Параметры:
//  Объект - Строка - полное имя объекта, как оно задано в конфигураторе.
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - добавленная команда.
//
Функция ДобавитьКомандуСоздатьНаОснованииОбъекта(Объект, КомандыСоздатьНаОсновании, НастройкиФормы, РежимЗаписи = Неопределено) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект);
	Параметры = Новый Массив;
	Параметры.Добавить(КомандыСоздатьНаОсновании);
	Параметры.Добавить(НастройкиФормы);
	Команда = ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(МенеджерОбъекта, "ДобавитьКомандуСоздатьНаОсновании", Параметры, Истина);
	
	Если Команда = Неопределено Тогда
		
		// Функция не используется Команда = СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании, МетаданныеОбъекта),
		// т.к. в функции выполняется повторная проверка ПравоДоступа("Добавление", ОбъектМетаданных).
		// Проверка права выполнялась в момент заполнения параметра сеанса ОбъектыВводимыеНаОсновании
		// (см. УстановитьПараметрСеанса этого модуля).
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Объект);
		Команда = КомандыСоздатьНаОсновании.Добавить();
		Команда.Менеджер      = Объект;
		Команда.Представление = ОбщегоНазначенияБольничнаяАптека.ПредставлениеОбъекта(МетаданныеОбъекта);
		Команда.РежимЗаписи   = РежимЗаписи;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Команда.ФункциональныеОпции) Тогда
		Команда.ФункциональныеОпции = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ФункциональныеОпцииОбъекта(Объект);
	КонецЕсли;
	
	Возврат Команда;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметр сеанса для автоматического заполнения команд создания объектов на основании
//
Процедура УстановитьПараметрСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ОбъектыВводимыеНаОсновании" Тогда
		
		ОбъектыВводимыеНаОсновании = Новый Соответствие;
		
		СпискиМетаданных = Новый Массив;
		СпискиМетаданных.Добавить(Метаданные.Справочники);
		СпискиМетаданных.Добавить(Метаданные.Документы);
		СпискиМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
		СпискиМетаданных.Добавить(Метаданные.ПланыОбмена);
		СпискиМетаданных.Добавить(Метаданные.БизнесПроцессы);
		СпискиМетаданных.Добавить(Метаданные.Задачи);
		
		Для Каждого СписокОбъектов Из СпискиМетаданных Цикл
			Для Каждого Объект Из СписокОбъектов Цикл
				Если Не ПравоДоступа("Добавление", Объект) Тогда
					Продолжить;
				КонецЕсли;
				Если Не Объект.ИспользоватьСтандартныеКоманды Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого Основание Из Объект.ВводитсяНаОсновании Цикл
					
					ЯвляетсяОснованиемДля = ОбъектыВводимыеНаОсновании.Получить(Основание.ПолноеИмя());
					Если ЯвляетсяОснованиемДля = Неопределено Тогда
						ЯвляетсяОснованиемДля = Новый Массив;
					КонецЕсли;
					ЯвляетсяОснованиемДля.Добавить(Объект.ПолноеИмя());
					
					ОбъектыВводимыеНаОсновании.Вставить(Основание.ПолноеИмя(), ЯвляетсяОснованиемДля);
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыСеанса.ОбъектыВводимыеНаОсновании = Новый ХранилищеЗначения(ОбъектыВводимыеНаОсновании);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("ОбъектыВводимыеНаОсновании");
		Иначе
			УстановленныеПараметры.Добавить("ОбъектыВводимыеНаОсновании");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
