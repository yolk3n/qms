
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание запроса, в результате которого будут содержаться абоненты электронного документооборота.
// Запрос содержит следующие поля:
//   * СрокДействияСертификатов - Дата.
//   * ДатаПоследнейАктивности - Дата.
//   * ИдентификаторЭДО - Строка.
//   * КраткоеОписание - Строка.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - Строка - см. НовыйОтборАбонентовЭДО
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросАбонентовЭДО(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборАбонентовЭДО();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АбонентыЭДО.СрокДействияСертификатов КАК СрокДействияСертификатов,
		|	АбонентыЭДО.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности,
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание,
		|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|ГДЕ
		|	&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторЭДО) Тогда
		ПоляУсловия.Добавить(СтрШаблон("АбонентыЭДО.ИдентификаторЭДО В (%1)", Отбор.ИдентификаторЭДО));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.ИНН) Тогда
		ПоляУсловия.Добавить(СтрШаблон("АбонентыЭДО.ИНН В (%1)", Отбор.ИНН));
	КонецЕсли;
	Если Отбор.ЭтоПользователь1С <> Неопределено Тогда
		Условие = ?(Отбор.ЭтоПользователь1С, "АбонентыЭДО.ЭтоПользователь1С",
			"НЕ АбонентыЭДО.ЭтоПользователь1С");
		ПоляУсловия.Добавить(Условие);
	КонецЕсли;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(Запрос.Текст, ИмяВременнойТаблицы,
		"", ПоляУсловия);
	
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Инициализирует структуру для отбора абонентов электронного документооборота.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИдентификаторЭДО - Строка - параметр или выражение для отбора по идентификаторам учетных записей
// * ИНН - Строка - параметр или выражение для отбора по ИНН абонента
// * ЭтоПользователь1С - Булево - если задан и равен Истина, результат запроса будет содержать только тех абонентов,
//                       которые являются пользователями 1С. Если Ложь - результат запроса будет содержать только тех 
//                       абонентов, которые не являются пользователями 1С.
Функция НовыйОтборАбонентовЭДО() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторЭДО", "");
	Отбор.Вставить("ИНН", "");
	Отбор.Вставить("ЭтоПользователь1С", Неопределено);
	
	Возврат Отбор;
	
КонецФункции

// Получает идентификаторы учетных записей электронного документооборота по ИНН/КПП из сервиса 1С:ЭДО.
// Также сюда добавляются данные о известных учетных записях из сервиса настроек.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - владелец учетных записей
// Возвращаемое значение:
// 	Структура:
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// * СписокИдентификаторов - см. РаботаСАбонентамиЭДОСлужебный.НайтиУчетныеЗаписиАбонентов
Функция ПолучитьИдентификаторыВСервисе1СЭДО(Организация) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	СинхронизацияЭДО.ОбновитьКешиОператоровЭДОИФорматов(КонтекстДиагностики);
	СписокИдентификаторов = Новый СписокЗначений;
	
	ИмяРеквизитаИННОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	Если ЗначениеЗаполнено(СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации])) Тогда
		
		ИНН = ПараметрыОрганизации[ИмяРеквизитаИННОрганизации];
		Отбор = НовыйОтборДанныхАбонентаНастроек();
		Отбор.СписокИНН = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИНН);
		Отбор.ТолькоПользователи1С = Истина;
		ИдентификаторыАбонента = ДанныеАбонентовИзСервисаНастроек(Отбор, КонтекстДиагностики);
	
		СписокИдентификаторов = РаботаСАбонентамиЭДОСлужебный.НайтиУчетныеЗаписиАбонентов(ИдентификаторыАбонента,
			СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СписокИдентификаторов", СписокИдентификаторов);
	СтруктураВозврата.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает информацию об учетной записи.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Структура:
// * ПодробноеОписание - Строка
// * КраткоеОписание - Строка
Функция ИнформацияОбУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	Информация = Новый Структура;
	Информация.Вставить("КраткоеОписание", "");
	Информация.Вставить("ПодробноеОписание", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание,
	|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание
	|ИЗ
	|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
	|ГДЕ
	|	АбонентыЭДО.ИдентификаторЭДО = &ИдентификаторЭДО";

	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторУчетнойЗаписи);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Информация.КраткоеОписание = ВыборкаДетальныеЗаписи.КраткоеОписание;
		Информация.ПодробноеОписание = ВыборкаДетальныеЗаписи.ПодробноеОписание;
	КонецЦикла;
	
	Возврат Информация;
	
КонецФункции

// Получает данные об абонентах из сервиса настроек и обновляет данные в кеше.
//
// Параметры:
//   Отбор - см. НовыйОтборДанныхАбонентаНастроек
//   КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//   Отказ - Булево  - во время работы возникли ошибки
// Возвращаемое значение:
// 	Массив из Строка - идентификаторы абонентов
Функция ДанныеАбонентовИзСервисаНастроек(Отбор, КонтекстДиагностики, Отказ = Ложь) Экспорт
	
	ОтборСервисНастроек = СервисНастроекЭДО.НовыйОтборДанныхАбонентаВСервисеНастроек();
	Если ЗначениеЗаполнено(Отбор.СписокИНН) Тогда
		ОтборСервисНастроек.СписокИНН = Отбор.СписокИНН;
	ИначеЕсли ЗначениеЗаполнено(Отбор.ИдентификаторыЭДО) Тогда 
		ОтборСервисНастроек.ИдентификаторыЭДО = Отбор.ИдентификаторыЭДО;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборСервисНастроек.СписокИНН)
		И Не ЗначениеЗаполнено(ОтборСервисНастроек.ИдентификаторыЭДО) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО";
	
		Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторЭДО");
		ОтборСервисНастроек.ИдентификаторыЭДО = Идентификаторы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ДатаОбновления) Тогда
		ОтборСервисНастроек.ДатаОбновления = Отбор.ДатаОбновления;
	КонецЕсли;
	
	АбонентыКУдалению = АбонентыКУдалению(ОтборСервисНастроек.ИдентификаторыЭДО, ОтборСервисНастроек.СписокИНН);
	
	Абоненты = СервисНастроекЭДО.ДанныеАбонентовИзСервисаНастроек(ОтборСервисНастроек, Отказ, КонтекстДиагностики);
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(Абоненты) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаФорматов = РаботаСАбонентамиЭДОСлужебный.НоваяТаблицаФорматов();
		
		НачатьТранзакцию();
		Попытка
			Для Каждого СтрокаАбонент Из Абоненты Цикл
				ИсключитьАктуальногоАбонентаИзСпискаКУдалению(АбонентыКУдалению, СтрокаАбонент.ИдентификаторЭДО);
					
				НаборЗаписей = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(СтрокаАбонент.ИдентификаторЭДО);
				СтрокаНабора = НаборЗаписей.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаАбонент);
				
				НаборЗаписей.Записать();
				
				Для Каждого СтрокаФормата Из СтрокаАбонент.ПоддерживаемыеФорматыЭД Цикл
					НоваяСтрока = ТаблицаФорматов.Добавить();
					НоваяСтрока.ИдентификаторЭДО = СтрокаАбонент.ИдентификаторЭДО;
					НоваяСтрока.ИдентификаторФорматаВСервисе = СтрокаФормата.formatUeid;
					НоваяСтрока.ВариантЗаполнения = СтрокаФормата.fillOption;
				КонецЦикла;
				
				Если Не Отбор.ТолькоПользователи1С Или (Отбор.ТолькоПользователи1С И СтрокаАбонент.ЭтоПользователь1С) Тогда
					Результат.Добавить(СтрокаАбонент.ИдентификаторЭДО);
				КонецЕсли;
			КонецЦикла;
			
			УдалитьНеАктуальныхАбонентов(АбонентыКУдалению);
			
			РаботаСАбонентамиЭДОСлужебный.ОбработатьТаблицуПоддерживаемыхФорматов(ТаблицаФорматов);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ИнформацияОбОшибке();
			
			ВидОперации = НСтр("ru = 'Обновление абонентов из сервиса настроек 1С:ЭДО'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(Ошибка));
			Отказ = Истина;
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание отбора для получения данных из сервиса настроек.
// 
// Возвращаемое значение:
// 	Структура:
// * ИНН - Массив из Строка - если параметры ИНН и ИдентификаторыЭДО не заполнены,
//                            в выборку попадут все абоненты из базы.
// * ИдентификаторыЭДО - Массив из Строка - если параметры ИНН и ИдентификаторыЭДО не заполнены,
//                            в выборку попадут все абоненты из базы.
// * ДатаОбновления - Дата - выдавать в выборке только измененные после этой даты
// * ТолькоПользователи1С - Булево - получать только тех абонентов, которые являются пользователями 1С
Функция НовыйОтборДанныхАбонентаНастроек() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокИНН",            Новый Массив);
	Результат.Вставить("ИдентификаторыЭДО",    Новый Массив);
	Результат.Вставить("ДатаОбновления",       Дата(1, 1, 1));
	Результат.Вставить("ТолькоПользователи1С", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получает данные по идентификаторам абонентов электронного документооборота.
// 
// Параметры:
// 	ПараметрыПолучения - См. НовыеПараметрыПолученияДанныхАбонентов
// Возвращаемое значение:
// 	Структура:
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// * ИдентификаторыОрганизации - см. УчетныеЗаписиЭДО.СписокИдентификаторовУчетныхЗаписейОрганизацииСервисаЭДО
// * ПараметрыСвязиИдентификаторовЭДО - см. РаботаСАбонентамиЭДОСлужебный.ПараметрыСвязиИдентификаторов
Функция ДанныеПоИдентификаторамАбонентов(ПараметрыПолучения) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Организация = ПараметрыПолучения.Организация;
	Контрагент  = ПараметрыПолучения.Контрагент;
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПолучения,
		"ИдентификаторОрганизации");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПолучения,
		"ИдентификаторКонтрагента");
	ПриоритетПодключенные    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПолучения,
		"ПриоритетПодключенные", Ложь);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИдентификаторыОрганизации");
	ВозвращаемоеЗначение.Вставить("ПараметрыСвязиИдентификаторовЭДО");
	
	СинхронизацияЭДО.ОбновитьКешиОператоровЭДОИФорматов(КонтекстДиагностики);
	
	СписокИдентификаторовОрганизации = УчетныеЗаписиЭДО.СписокИдентификаторовУчетныхЗаписейОрганизацииСервисаЭДО(
		Организация);
	ВозвращаемоеЗначение.ИдентификаторыОрганизации = СписокИдентификаторовОрганизации;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ИдентификаторыОрганизации = Неопределено;
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ИдентификаторыОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОрганизации);
		ИначеЕсли ЗначениеЗаполнено(СписокИдентификаторовОрганизации) Тогда
			ИдентификаторыОрганизации = СписокИдентификаторовОрганизации.ВыгрузитьЗначения();
		КонецЕсли;
		
		ПараметрыПолученияСвязи = НовыеПараметрыПолученияСвязиИдентификаторов();
		ПараметрыПолученияСвязи.ИдентификаторыОрганизации = ИдентификаторыОрганизации;
		ПараметрыПолученияСвязи.ИдентификаторыКонтрагента = ИдентификаторКонтрагента;
		ПараметрыПолученияСвязи.Контрагент = Контрагент;
		ПараметрыПолученияСвязи.ПриоритетПодключенные = ПриоритетПодключенные;
		
		ВозвращаемоеЗначение.ПараметрыСвязиИдентификаторовЭДО = 
			ПараметрыСвязиИдентификаторов(ПараметрыПолученияСвязи, КонтекстДиагностики, Истина);
	КонецЕсли;
	
	ВозвращаемоеЗначение.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает параметры получения данных абонентов электронного документооборота.
// 
// Возвращаемое значение:
// 	Структура:
// * Организация - ОпределяемыйТип.Организация - обязательный параметр
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД - обязательный параметр
// * ИдентификаторОрганизации - Строка
// * ИдентификаторКонтрагента - Строка
// * ПриоритетПодключенные - Булево
Функция НовыеПараметрыПолученияДанныхАбонентов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Контрагент", Неопределено);
	Параметры.Вставить("ИдентификаторОрганизации", "");
	Параметры.Вставить("ИдентификаторКонтрагента", "");
	Параметры.Вставить("ПриоритетПодключенные", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Получает параметры связи идентификаторов электронного документооборота.
// 
// Параметры:
// 	ПараметрыПолучения - см. НовыеПараметрыПолученияСвязиИдентификаторов
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ОбновитьДанныеАбонентов - Булево - предварительно обновить данные абонентов из сервиса настроек
// Возвращаемое значение:
// 	См. РаботаСАбонентамиЭДОСлужебный.ПараметрыСвязиИдентификаторов
Функция ПараметрыСвязиИдентификаторов(ПараметрыПолучения, КонтекстДиагностики = Неопределено,
	ОбновитьДанныеАбонентов = Ложь) Экспорт
	
	Возврат РаботаСАбонентамиЭДОСлужебный.ПараметрыСвязиИдентификаторов(ПараметрыПолучения, КонтекстДиагностики,
		ОбновитьДанныеАбонентов);
		
КонецФункции

// Возвращает параметры получения связи идентификаторов электронного документооборота.
// 
// Возвращаемое значение:
// 	Структура:
// * ФормироватьСписокВыбора - Булево
// * ПолучатьПочтовыеАдреса - Булево
// * ПриоритетПодключенные - Булево
// * ИдентификаторыКонтрагента - Строка, Массив из Строка, ТаблицаЗначений - 
// * ИдентификаторыОрганизации - Строка, Массив из Строка -
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД, Массив из ОпределяемыйТип.КонтрагентБЭД -
Функция НовыеПараметрыПолученияСвязиИдентификаторов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторыОрганизации");
	Параметры.Вставить("Контрагент");
	Параметры.Вставить("ИдентификаторыКонтрагента");
	Параметры.Вставить("ПриоритетПодключенные", Ложь);
	Параметры.Вставить("ПолучатьПочтовыеАдреса", Ложь);
	Параметры.Вставить("ФормироватьСписокВыбора", Истина);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗапросПоддерживаемыхФорматов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборПоддерживаемыхФорматов();
	КонецЕсли;
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.ИдентификаторЭДО) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ПоддерживаемыеФорматыЭлектронныхДокументов.ИдентификаторЭДО В (%1)",
			Отбор.ИдентификаторЭДО));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.ИдентификаторЭДО КАК ИдентификаторАбонента,
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.ПоддерживаемыеФорматыЭлектронныхДокументов КАК ПоддерживаемыеФорматыЭлектронныхДокументов
		|ГДЕ
		|	&ПоляУсловия";
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(Запрос.Текст, ИмяВременнойТаблицы, "",
		ПоляУсловия);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция НовыйОтборПоддерживаемыхФорматов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторЭДО", "");
	
	Возврат Отбор;
	
КонецФункции

// Выполняет сопоставление идентификаторов организации и контрагента и выбирает оптимальные для связи
//
// Параметры:
//  ИдентификаторыОтправителя  - Массив - Список идентификаторов организации
//  ИдентификаторыПолучателя   - Массив - Список идентификаторов контрагента
//
// Возвращаемое значение:
//   Структура:
//     * ИдентификаторОтправителя - Строка
//     * ИдентификаторПолучателя - Строка
Функция РейтингУчетныхЗаписей(Знач ИдентификаторыОтправителя, Знач ИдентификаторыПолучателя) Экспорт
	
	Результат = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОтправителя) И Не ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОтправителя) И ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОтправителя) И Не ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		Результат.ИдентификаторОтправителя = ИдентификаторыОтправителя[0];
		Возврат Результат;
	КонецЕсли;
	
	Строка70 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(70));
	ТаблицаИдентификаторыПолучателя = Новый ТаблицаЗначений;
	ТаблицаИдентификаторыПолучателя.Колонки.Добавить("Идентификатор", Строка70);
	ТаблицаИдентификаторыПолучателя.Колонки.Добавить("ОператорЭДО"  , Строка70);
	
	ТаблицаОператоровЭДО = Неопределено;
	
	Для Каждого Идентификатор Из ИдентификаторыПолучателя Цикл
		
		НоваяСтрока = ТаблицаИдентификаторыПолучателя.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
		НоваяСтрока.ОператорЭДО = СервисНастроекЭДО.НайтиОператораЭДОПоИдентификатору(Идентификатор,
			ТаблицаОператоровЭДО);
		
	КонецЦикла;
	
	Запросы = Новый Массив;
	ЗапросСовместимостиОператоров = СервисНастроекЭДО.ЗапросСовместимостиОператоровЭДО("СовместимостьОператоровЭДО");
	Запросы.Добавить(ЗапросСовместимостиОператоров);
	
	ОтборАбонентов = НовыйОтборАбонентовЭДО();
	ОтборАбонентов.ИдентификаторЭДО = "&ИдентификаторыПолучателя";
	ЗапросАбонентов = ЗапросАбонентовЭДО("АбонентыЭДО", ОтборАбонентов);
	Запросы.Добавить(ЗапросАбонентов);
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ОтборУчетныхЗаписей.УчетныеЗаписи = "&ИдентификаторыОтправителя";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторыПолучателя.Идентификатор КАК Идентификатор,
		|	ТаблицаИдентификаторыПолучателя.ОператорЭДО КАК ОператорЭДО
		|ПОМЕСТИТЬ ТаблицаИдентификаторыПолучателя
		|ИЗ
		|	&ТаблицаИдентификаторыПолучателя КАК ТаблицаИдентификаторыПолучателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИдентификаторыПолучателя.Идентификатор КАК ИдентификаторЭДО,
		|	ТаблицаИдентификаторыПолучателя.ОператорЭДО КАК ОператорЭДО,
		|	ЕСТЬNULL(АбонентыЭДО.СрокДействияСертификатов, &ТекущаяДата) >= &ТекущаяДата КАК СертификатДействителен,
		|	ЕСТЬNULL(АбонентыЭДО.ДатаПоследнейАктивности, &ТекущаяДата) >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2) КАК АбонентАктивен
		|ПОМЕСТИТЬ ИдентификаторыАбонента
		|ИЗ
		|	ТаблицаИдентификаторыПолучателя КАК ТаблицаИдентификаторыПолучателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ АбонентыЭДО КАК АбонентыЭДО
		|		ПО ТаблицаИдентификаторыПолучателя.Идентификатор = АбонентыЭДО.ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорЭДО
		|ПОМЕСТИТЬ ИдентификаторыОрганизации
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыАбонента.ИдентификаторЭДО КАК ИдентификаторАбонента,
		|	ИдентификаторыОрганизации.ИдентификаторЭДО КАК ИдентификаторОрганизации,
		|	ИСТИНА КАК СвязьДоступна,
		|	ИдентификаторыАбонента.СертификатДействителен КАК СертификатДействителен,
		|	ИдентификаторыАбонента.АбонентАктивен КАК АбонентАктивен
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	ИдентификаторыАбонента КАК ИдентификаторыАбонента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыОрганизации КАК ИдентификаторыОрганизации
		|		ПО ИдентификаторыАбонента.ОператорЭДО = ИдентификаторыОрганизации.ОператорЭДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИдентификаторыАбонента.ИдентификаторЭДО,
		|	ИдентификаторыОрганизации.ИдентификаторЭДО,
		|	СовместимостьОператоровЭДО.СвязьДоступна,
		|	NULL,
		|	NULL
		|ИЗ
		|	СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыАбонента КАК ИдентификаторыАбонента
		|		ПО СовместимостьОператоровЭДО.Оператор2 = ИдентификаторыАбонента.ОператорЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыОрганизации КАК ИдентификаторыОрганизации
		|		ПО СовместимостьОператоровЭДО.Оператор1 = ИдентификаторыОрганизации.ОператорЭДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИдентификаторыАбонента.ИдентификаторЭДО,
		|	ИдентификаторыОрганизации.ИдентификаторЭДО,
		|	СовместимостьОператоровЭДО.СвязьДоступна,
		|	NULL,
		|	NULL
		|ИЗ
		|	СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыАбонента КАК ИдентификаторыАбонента
		|		ПО СовместимостьОператоровЭДО.Оператор1 = ИдентификаторыАбонента.ОператорЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыОрганизации КАК ИдентификаторыОрганизации
		|		ПО СовместимостьОператоровЭДО.Оператор2 = ИдентификаторыОрганизации.ОператорЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременнаяТаблица.ИдентификаторАбонента КАК ИдентификаторАбонента,
		|	ВременнаяТаблица.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВременнаяТаблица.СвязьДоступна КАК СвязьДоступна
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблица.СертификатДействителен УБЫВ,
		|	ВременнаяТаблица.АбонентАктивен УБЫВ,
		|	ВременнаяТаблица.СвязьДоступна УБЫВ";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторыОтправителя"      , ИдентификаторыОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("ТаблицаИдентификаторыПолучателя", ТаблицаИдентификаторыПолучателя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторыПолучателя", ИдентификаторыПолучателя);
	ИтоговыйЗапрос.УстановитьПараметр("ТекущаяДата"                    , ТекущаяДатаСеанса());
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат.ИдентификаторОтправителя = ВыборкаДетальныеЗаписи.ИдентификаторОрганизации;
		Результат.ИдентификаторПолучателя  = ВыборкаДетальныеЗаписи.ИдентификаторАбонента;
	Иначе
		Результат.ИдентификаторОтправителя = ИдентификаторыОтправителя[0];
		Результат.ИдентификаторПолучателя  = ИдентификаторыПолучателя[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСостоянияКонтрагентов(Контрагенты) Экспорт
	
	РаботаСАбонентамиЭДОСлужебный.ОбновитьСостоянияКонтрагентов(Контрагенты);
	
КонецПроцедуры

Функция СуществуетКонтрагентОператора(КодОператора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	АбонентыЭДО.ОператорЭДО КАК ОператорЭДО
	|ИЗ
	|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыКонтрагенты КАК Контрагенты
	|		ПО АбонентыЭДО.ИНН = Контрагенты.ИмяРеквизитаИНН
	|			И АбонентыЭДО.КПП = Контрагенты.ИмяРеквизитаКПП
	|			И (АбонентыЭДО.ОператорЭДО = &ОператорЭДО)";
	
	Запрос.УстановитьПараметр("ОператорЭДО", КодОператора);
	
	ИмяТаблицыКонтрагенты = "Справочник." + ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИНН = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКПП = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыКонтрагенты", ИмяТаблицыКонтрагенты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРеквизитаИНН", ИмяРеквизитаИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРеквизитаКПП", ИмяРеквизитаКПП); 
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// См. СинхронизацияЭДО.ПриПолученииСпискаШаблонов 
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить("ПроверкаКонтрагентовБЭД");
	
КонецПроцедуры

// См. СинхронизацияЭДО.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("РаботаСАбонентамиЭДО.ПроверитьКонтрагентовРегламентноеЗаданиеВыполнения");
	
КонецПроцедуры

#Область ПроверкаСостоянияКонтрагентов

#Область ОбработкаЗаписиКонтрагента

// Записывает данные контрагента в регистр для дальнейшей проверки сервисом.
//
// Параметры:
//  Объект - СправочникОбъект.<Контрагенты> - записываемый контрагент. 
//	Отказ - Булево - признак отказа.
Процедура ЗаписатьДанныеКонтрагентаДляПроверки(Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.ИНН = &ИНН
	|	И СостоянияКонтрагентовБЭД.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", Объект[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП", Объект[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент", Объект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 		 Объект[ИмяРеквизитаИННКонтрагента]);
	ДанныеКонтрагента.Вставить("КПП",		 Объект[ИмяРеквизитаКППКонтрагента]);
	ДанныеКонтрагента.Вставить("Дата", 		 НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние",  Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Метод регламентного задания по управлению проверкой контрагентов.
// Создает подчиненное регламентное задание ПроверкаКонтрагентовБЭДВыполнение.
Процедура ПроверитьКонтрагентовРегламентноеЗаданиеУправления() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД);
	
	// Если информационная база работает в режиме разделения данных, то выполняем проверку непосредственно в этом обработчике.
	// Иначе планируем подчиненное задание, которое выполнит проверку позже.
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено Тогда
		ПроверитьСостояниеКонтрагентовРегламент();
		Возврат;
	КонецЕсли;
	
	МетаданныеПодчиненногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение;
	
	// Найдем подчиненные задания выполнения проверки, если они остались с предыдущего раза.
	// Удалим лишние задания.
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
	
	ВсеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	НаУдаление = Новый Массив;
	ВыбранноеЗадание = Неопределено;
	Для каждого Задание Из ВсеЗадания Цикл
		Если РазделениеВключено Тогда
			Если ВыбранноеЗадание = Неопределено Тогда
				ВыбранноеЗадание = Задание;
			Иначе
				НаУдаление.Добавить(Задание);
			КонецЕсли;
		Иначе
			Если Задание.Предопределенное Тогда
				ВыбранноеЗадание = Задание;
			Иначе
				НаУдаление.Добавить(Задание);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Задание Из НаУдаление Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	// Настроим подчиненное задание для выполнения проверки контрагентов.
	// Запустим задание в случайный момент в интервале следующих суток.
	ДатаВыполнения = СлучайнаяДатаВыполненияЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	// Для обхода ошибки платформы устанавливаем свойства ПериодПовтораДней и ПериодПовтораВТечениеДня.
	// Чтобы задание выполнилось 1 раз, в коде подчиненного задания снимем флаг "Использование" после выполнения.
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 3600;
	Расписание.ВремяНачала = ДатаВыполнения;
	Расписание.ДатаНачала = ДатаВыполнения;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Наименование", МетаданныеПодчиненногоЗадания.Синоним);
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеПодчиненногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "1");
	
	Если ВыбранноеЗадание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(ВыбранноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Метод регламентного задания по проверке состояния контрагентов.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовРегламентноеЗаданиеВыполнения() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение);
	
	ПроверитьСостояниеКонтрагентовРегламент();
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение);
	
	ВсеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	Для каждого Задание Из ВсеЗадания Цикл
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Ложь);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Конструктор параметров проверки контрагента.
//
// Возвращаемое значение:
// 	Структура:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - проверяемый контрагент. 
//	ИНН - Строка - ИНН контрагента.
//	КПП - Строка - КПП контрагента.
//  АдресХранилища - Строка - адрес хранилища для помещения результата.
//  СохранятьРезультатСразуПослеПроверки - Булево - признак сохранения результата после проверки.
//	ПолучатьРезультатПроверкиВебСервисом - Булево - признак получения результата веб-сервисом.
//
Функция НовыеПараметрыПроверкиКонтрагента() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение());
	Параметры.Вставить("ИНН", "");
	Параметры.Вставить("КПП", "");
	Параметры.Вставить("АдресХранилища", "");
	Параметры.Вставить("СохранятьРезультатСразуПослеПроверки", Ложь);
	Параметры.Вставить("ПолучатьРезультатПроверкиВебСервисом", Истина);

	Возврат Параметры;
	
КонецФункции

// Записывает данные контрагента в регистр для дальнейшей проверки сервисом.
//
// Параметры:
//  Параметры - См. НовыеПараметрыПроверкиКонтрагента - записываемый контрагент. 
//
Процедура ПроверитьКонтрагента(Параметры) Экспорт
	
	ДанныеКонтрагентов = ТаблицаДанныхКонтрагентовДляПередачи();
	
	КонтрагентДляПроверки = ДанныеКонтрагентов.Добавить();
	ЗаполнитьЗначенияСвойств(КонтрагентДляПроверки, Параметры);
	КонтрагентДляПроверки.Дата = НачалоДня(ТекущаяДатаСеанса());

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		КонтрагентДляПроверки.ОбластьДанныхВспомогательныеДанные = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверкиКонтрагентов(ДанныеКонтрагентов);
	Если РезультатПроверки.Количество() Тогда
		ПоместитьВоВременноеХранилище(РезультатПроверки[0].Состояние, Параметры.АдресХранилища);
		Если Параметры.СохранятьРезультатСразуПослеПроверки Тогда
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(РезультатПроверки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

Процедура ПроверитьКонтрагентаВ1СЭДОПриЗаписи(Источник, Отказ) Экспорт

	СсылкаНаКонтрагента = Источник.Ссылка;

	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент", СсылкаНаКонтрагента);
	ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
	ПараметрыЗапуска.Вставить("АдресХранилища", Неопределено);
	
	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтрагента,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
				
	ПараметрыЗапуска.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	ПараметрыЗапуска.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапуска.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	КлючФоновогоЗадания = СтрШаблон("%1 %2", ПараметрыЗапуска.ИНН, ПараметрыЗапуска.КПП);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеФоновыеЗадания.Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
	
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		ФоновыеЗадания.Выполнить("РаботаСАбонентамиЭДО.ПроверитьКонтрагентаФоновоеЗадание", 
			Параметры, КлючФоновогоЗадания, НСтр("ru = 'Проверка подключения'"));
	
	Исключение
		// Исключение возникнет в случае запуска фонового задания с таким же ключем
		// Специальной обработки не требуется.
		Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО в фоновом задании.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки);
	КонецПопытки;

КонецПроцедуры

Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт
		
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере.
	Если Не Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры);
	Исключение
		Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО при записи из формы контрагента.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

// См. СинхронизацияЭДОСобытия.ПриУдаленииУчетнойЗаписи
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	НаборЗаписей = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(ИдентификаторУчетнойЗаписи);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаСостоянияКонтрагентов

#Область ПодготовкаДанныхКПроверке

// Добавляет данные о контрагентах, по которым не получено состояние в пул для дальнейшей обработки.
Процедура ЗаписатьНепроверенныхКонтрагентовВОчередьОбработки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	&ИмяРеквизитаИННКонтрагента КАК ИНН,
	|	&ИмяРеквизитаКППКонтрагента КАК КПП,
	|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.ПустаяСсылка) КАК Состояние
	|ИЗ
	|	&ИмяПрикладногоСправочника КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО Контрагенты.Ссылка = СостоянияКонтрагентовБЭД.Контрагент
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Состояние ЕСТЬ NULL 
	|	И &УсловиеГруппы";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	УсловиеНаГруппу = "ИСТИНА";
	Если ОбщегоНазначенияБЭД.СправочникИспользуетГруппы(Метаданные.Справочники[ИмяПрикладногоСправочника]) Тогда
		УсловиеНаГруппу = "Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизитаИННКонтрагента", "Контрагенты." + ИмяРеквизитаИННКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизитаКППКонтрагента", "Контрагенты." + ИмяРеквизитаКППКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПрикладногоСправочника", "Справочник." + ИмяПрикладногоСправочника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГруппы", УсловиеНаГруппу);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();	

	СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
	
КонецПроцедуры

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированныеИАктуализированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированныеИАктуализированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ТаблицаДанныхКонтрагентовДляПередачи();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, СостояниеПоАбонентам, СостояниеПоПриглашениям, Дата";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
		Если ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.СостояниеПоПриглашениям) Тогда
			ДанныеКонтрагентаДляПроверки.Состояние = ДанныеКонтрагентаДляПроверки.СостояниеПоПриглашениям;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.СостояниеПоАбонентам) 
			И ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен Тогда
			
			ДанныеКонтрагентаДляПроверки.Состояние = ДанныеКонтрагентаДляПроверки.СостояниеПоАбонентам;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, СостояниеПоАбонентам, СостояниеПоПриглашениям, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, СостояниеПоАбонентам, СостояниеПоПриглашениям");
	КонецЕсли;
	
КонецПроцедуры

// Оставляет только записи по контрагентам, к которым есть доступ. 
// В модели сервиса из неразделенной области проверку делать
// не нужно, поскольку регламентное задание выполняется под администратором 
// и нет доступа к разделенному справочнику контрагентов.
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если Не РазделениеВключено
		Или РазделениеВключено И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние,
			|	ДанныеКонтрагентов.СостояниеПоАбонентам,
			|	ДанныеКонтрагентов.СостояниеПоПриглашениям
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	&ИмяПрикладногоСправочникаКонтрагентов КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние,
			|	ВсеДанныеКонтрагентов.СостояниеПоАбонентам,
			|	ВсеДанныеКонтрагентов.СостояниеПоПриглашениям
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние,
			|	ВсеДанныеКонтрагентов.СостояниеПоАбонентам,
			|	ВсеДанныеКонтрагентов.СостояниеПоПриглашениям
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = &ПустаяСсылкаКонтрагента";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		ИмяПрикладногоСправочника = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПустаяСсылкаКонтрагента", "ЗНАЧЕНИЕ(Справочник."
			+ ИмяПрикладногоСправочника + ".ПустаяСсылка)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПрикладногоСправочникаКонтрагентов", "Справочник." + ИмяПрикладногоСправочника);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

// Выполняет проверку состояния контрагентов.
//
Процедура ПроверитьСостояниеКонтрагентовРегламент()
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ЗаписатьНепроверенныхКонтрагентовВОчередьОбработки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентов";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	РезультатПроверки = РезультатПроверкиКонтрагентов(ДанныеКонтрагентов);	

	СохранитьРезультатыПроверкиКонтрагентовВРегистр(РезультатПроверки);

КонецПроцедуры

// Выполняет проверку состояния контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов - См. ТаблицаДанныхКонтрагентовДляПередачи - содержит данные проверяемых контрагентов. 
//
Функция РезультатПроверкиКонтрагентов(ДанныеКонтрагентов)
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	ДанныеКэша = ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	ПодготовитьДанныеКПроверке(ДанныеКэша);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние и у которых нет ошибок.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
		|	ДанныеКонтрагентов.ИНН КАК ИНН,
		|	ДанныеКонтрагентов.КПП КАК КПП,
		|	ДанныеКонтрагентов.Дата КАК Дата,
		|	ДанныеКонтрагентов.Состояние КАК Состояние,
		|	ДанныеКонтрагентов.СостояниеПоАбонентам КАК СостояниеПоАбонентам,
		|	ДанныеКонтрагентов.СостояниеПоПриглашениям КАК СостояниеПоПриглашениям,
		|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные
		|ПОМЕСТИТЬ ВТДанныеКонтрагентов
		|ИЗ
		|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеКонтрагентов.Контрагент КАК Контрагент,
		|	ВТДанныеКонтрагентов.ИНН КАК ИНН,
		|	ВТДанныеКонтрагентов.КПП КАК КПП,
		|	ВТДанныеКонтрагентов.Дата КАК Дата,
		|	ВТДанныеКонтрагентов.Состояние КАК Состояние,
		|	ВТДанныеКонтрагентов.СостояниеПоАбонентам КАК СостояниеПоАбонентам,
		|	ВТДанныеКонтрагентов.СостояниеПоПриглашениям КАК СостояниеПоПриглашениям,
		|	ВТДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	ВТДанныеКонтрагентов КАК ВТДанныеКонтрагентов
		|ГДЕ
		|	ВТДанныеКонтрагентов.Состояние В (&Состояние)";
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКэша);
	
	ОбрабатываемыеСостояния = Новый Массив();
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	Запрос.УстановитьПараметр("Состояние", ОбрабатываемыеСостояния);
	
	Результат = Запрос.Выполнить();
	
	ДанныеКонтрагентовДляПроверкиСервисом = Результат.Выгрузить();
	ЗаполнитьРезультатПроверкиСервисом(ДанныеКонтрагентовДляПроверкиСервисом);
		
	Возврат ДанныеКонтрагентовДляПроверкиСервисом;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисомНастроек

Процедура ЗаполнитьРезультатПроверкиСервисом(ДанныеКонтрагентовДляПроверкиСервисом)
	
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 500;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
	
	СостояниеНеПодключен = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
	СостояниеПодключен = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		Отбор = СервисНастроекЭДО.НовыйОтборДанныхАбонентаВСервисеНастроек();
			
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			Отбор.СписокИНН.Добавить(ДанныеКонтрагента.ИНН);
			
		КонецЦикла;
		
		Отказ = Ложь;
		ДанныеСервиса = СервисНастроекЭДО.ДанныеАбонентовИзСервисаНастроек(Отбор, Отказ);
		Если Не ДанныеСервиса = Неопределено Тогда
			Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
				
				ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
				
				Отбор = Новый Структура("ИНН, КПП");
				ЗаполнитьЗначенияСвойств(Отбор, ДанныеКонтрагента);
				
				ДанныеКонтрагента.Состояние = СостояниеНеПодключен;
				Если ЗначениеЗаполнено(ДанныеКонтрагента.СостояниеПоПриглашениям) Тогда
					ДанныеКонтрагента.Состояние = ДанныеКонтрагента.СостояниеПоПриглашениям;
				КонецЕсли;
				
				ИзвестенИдентификаторАбонента = ДанныеСервиса.НайтиСтроки(Отбор).Количество();
				Если ДанныеКонтрагента.Состояние = СостояниеНеПодключен
					И ИзвестенИдентификаторАбонента Тогда
					
					ДанныеКонтрагента.Состояние = СостояниеПодключен;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьРезультатаПроверкиКонтрагентов

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	НачатьТранзакцию();
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные = ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		
		ЕстьИзменения = Ложь;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() И ЗначениеЗаполнено(НаборЗаписей) Тогда
			
			ТекущиеДанные = Новый Структура("Контрагент,Состояние,ИНН,КПП");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, НаборЗаписей[0]);
			
			НовыеДанные = Новый Структура("Контрагент,Состояние,ИНН,КПП");
			ЗаполнитьЗначенияСвойств(НовыеДанные, ДанныеКонтрагента);
			
			Для каждого Данные Из ТекущиеДанные Цикл
				Если Данные.Значение <> НовыеДанные[Данные.Ключ] Тогда
					ЕстьИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ЕстьИзменения = Истина;
			
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Очистить();
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Запись результатов проверки подключения контрагентов к 1С-ЭДО в регистр.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает пустую таблицу состояний контрагентов.
// 
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица состояний контрагентов.
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент.
//  ИНН - Строка - ИНН контрагента.
//  КПП - Строка - КПП контрагента.
//  Дата - Дата - дата получения состояния.
//  Состояние - ПеречислениеСсылка.СостоянияКонтрагентаБЭД - состояние контрагента.
//  СостояниеПоАбонентам - ПеречислениеСсылка.СостоянияКонтрагентаБЭД - состояние контрагента по данным абонентов.
//  СостояниеПоПриглашениям - ПеречислениеСсылка.СостоянияКонтрагентаБЭД - состояние контрагента по данным приглашений.
//  ОбластьДанныхВспомогательныеДанные - Число - номер области данных, создается если есть подсистема РаботаВМоделиСервиса.
//
Функция ТаблицаДанныхКонтрагентовДляПередачи()
	
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	ИмяПрикладногоСправочника = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
	
	Тип = "СправочникСсылка." + ИмяПрикладногоСправочника;
	
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", Новый ОписаниеТипов(Тип));
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	ДанныеКонтрагентов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	ДанныеКонтрагентов.Колонки.Добавить("СостояниеПоАбонентам", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	ДанныеКонтрагентов.Колонки.Добавить("СостояниеПоПриглашениям", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;

	Возврат ДанныеКонтрагентов;
	
КонецФункции

// Возвращает уже известные состояния контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов - См. ТаблицаДанныхКонтрагентовДляПередачи - содержит данные проверяемых контрагентов. 
//
Функция ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов)	
	
	Запрос = Новый Запрос;
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	КодыИСостоянияКонтрагентов.Код КАК Код,
		|	КодыИСостоянияКонтрагентов.Состояние
		|ПОМЕСТИТЬ КодыИСостояния
		|ИЗ
		|	&КодыИСостоянияКонтрагентов КАК КодыИСостоянияКонтрагентов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
		|	ДанныеКонтрагентов.ИНН КАК ИНН,
		|	ДанныеКонтрагентов.КПП КАК КПП,
		|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
		|	ДанныеКонтрагентов.Дата КАК Дата
		|ПОМЕСТИТЬ ДанныеКонтрагентов
		|ИЗ
		|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
		|	ДанныеКонтрагентов.ИНН КАК ИНН,
		|	ДанныеКонтрагентов.КПП КАК КПП,
		|	ДанныеКонтрагентов.Дата КАК Дата,
		|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
		|	СостоянияКонтрагентовБЭД.Состояние КАК Состояние,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА АбонентыЭДО.ИдентификаторЭДО ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ) КАК КодСостоянияПоАбонентам,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ПриглашенияРеквизитыКонтрагентов.Статус ЕСТЬ NULL
		|			ТОГДА 1
		|		КОГДА ПриглашенияРеквизитыКонтрагентов.Статус = &СтатусПриглашенияОтклонено
		|			ТОГДА 2
		|		КОГДА ПриглашенияРеквизитыКонтрагентов.Статус = &СтатусПриглашенияОшибка
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ) КАК КодСостоянияПоПриглашениям
		|ПОМЕСТИТЬ ДанныеКонтрагентовИКодыСостояния
		|ИЗ
		|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
		|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентовБЭД.Контрагент
		|		И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентовБЭД.ИНН
		|		И ДанныеКонтрагентов.КПП = СостоянияКонтрагентовБЭД.КПП
		|		И
		|			ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриглашенияРеквизитыКонтрагентов КАК ПриглашенияРеквизитыКонтрагентов
		|		ПО ДанныеКонтрагентов.ИНН = ПриглашенияРеквизитыКонтрагентов.ИНН
		|		И ДанныеКонтрагентов.КПП = ПриглашенияРеквизитыКонтрагентов.КПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|		ПО ДанныеКонтрагентов.ИНН = АбонентыЭДО.ИНН
		|		И ДанныеКонтрагентов.КПП = АбонентыЭДО.КПП
		|СГРУППИРОВАТЬ ПО
		|	ДанныеКонтрагентов.Контрагент,
		|	ДанныеКонтрагентов.ИНН,
		|	ДанныеКонтрагентов.КПП,
		|	ДанныеКонтрагентов.Дата,
		|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
		|	СостоянияКонтрагентовБЭД.Состояние
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКонтрагентовИКодыСостояния.Контрагент КАК Контрагент,
		|	ДанныеКонтрагентовИКодыСостояния.ИНН КАК ИНН,
		|	ДанныеКонтрагентовИКодыСостояния.КПП КАК КПП,
		|	ДанныеКонтрагентовИКодыСостояния.Дата КАК Дата,
		|	ДанныеКонтрагентовИКодыСостояния.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
		|	ЕСТЬNULL(ДанныеКонтрагентовИКодыСостояния.Состояние, &СостояниеПустаяСсылка) КАК Состояние,
		|	ЕСТЬNULL(КодыИСостоянияАбоненты.Состояние, &СостояниеПустаяСсылка) КАК СостояниеПоАбонентам,
		|	ЕСТЬNULL(КодыИСостоянияПриглашения.Состояние, &СостояниеПустаяСсылка) КАК СостояниеПоПриглашениям
		|ИЗ
		|	ДанныеКонтрагентовИКодыСостояния КАК ДанныеКонтрагентовИКодыСостояния
		|		ЛЕВОЕ СОЕДИНЕНИЕ КодыИСостояния КАК КодыИСостоянияПриглашения
		|		ПО ДанныеКонтрагентовИКодыСостояния.КодСостоянияПоПриглашениям = КодыИСостоянияПриглашения.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ КодыИСостояния КАК КодыИСостоянияАбоненты
		|		ПО ДанныеКонтрагентовИКодыСостояния.КодСостоянияПоАбонентам = КодыИСостоянияАбоненты.Код";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
	
	ОписаниеДополнительныхЗапросов = Новый Массив;

	ПриглашенияКонтрагенты = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияКонтрагенты");
	ОписаниеДополнительныхЗапросов.Добавить(ПриглашенияКонтрагенты);

	ОтборПриглашений = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.Статус = "&СтатусыПриглашенийСИзвестнымИдентификаторомКонтрагента";
	ПриглашенияРеквизитыКонтрагентов = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияРеквизитыКонтрагентов", ОтборПриглашений);
	ОписаниеДополнительныхЗапросов.Добавить(ПриглашенияРеквизитыКонтрагентов);
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписаниеДополнительныхЗапросов);

	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	
	Запрос.УстановитьПараметр("СтатусПриглашенияОшибка", Перечисления.СтатусыПриглашений.Ошибка);
	Запрос.УстановитьПараметр("СтатусПриглашенияОтклонено", Перечисления.СтатусыПриглашений.Отклонено);
	
	СтатусыПриглашенийСИзвестнымИдентификаторомКонтрагента = Новый Массив();
	СтатусыПриглашенийСИзвестнымИдентификаторомКонтрагента.Добавить(Перечисления.СтатусыПриглашений.Принято);
	СтатусыПриглашенийСИзвестнымИдентификаторомКонтрагента.Добавить(Перечисления.СтатусыПриглашений.ТребуетсяСогласие);
	Запрос.УстановитьПараметр("СтатусыПриглашенийСИзвестнымИдентификаторомКонтрагента", СтатусыПриглашенийСИзвестнымИдентификаторомКонтрагента);
	
	Запрос.УстановитьПараметр("СостояниеПустаяСсылка", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	
	КодыИСостоянияКонтрагентов = РаботаСАбонентамиЭДОСлужебный.КодыИСостоянияКонтрагентов();
	Запрос.УстановитьПараметр("КодыИСостоянияКонтрагентов", КодыИСостоянияКонтрагентов);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеСостояния = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеСостояния;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция АбонентыКУдалению(ИдентификаторыЭДО, СписокИНН) 
	
	Результат = Новый Соответствие();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ИЗ
	|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
	|ГДЕ
	|	(АбонентыЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО)
	|	ИЛИ АбонентыЭДО.ИНН В (&СписокИНН))";
	
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	Запрос.УстановитьПараметр("СписокИНН", СписокИНН);
	
	РезультатЗапроса =  Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ИсключитьАктуальногоАбонентаИзСпискаКУдалению(АбонентыКУдалению, ИдентификаторЭДО)

	АбонентыКУдалению.Удалить(ИдентификаторЭДО);
	
КонецПроцедуры

Процедура УдалитьНеАктуальныхАбонентов(АбонентыКУдалению) 
	
	Для Каждого АбонентКУдалению Из АбонентыКУдалению Цикл
		Набор = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭДО.Установить(АбонентКУдалению.Ключ);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает случайную дату выполнения задания в пределах суток.
// 
// Параметры:
//  МетаданныеЗадания - ОбъектМетаданныхРегламентноеЗадание
// 
// Возвращаемое значение:
//  Дата
Функция СлучайнаяДатаВыполненияЗадания(МетаданныеЗадания)
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(МетаданныеЗадания);
	Если РегламентноеЗадание <> Неопределено
		И Не ОбщегоНазначенияБЭД.ДневноеРасписаниеРегламентногоЗаданияЗадано(РегламентноеЗадание) Тогда
		Интервал = 60 * 60 * 24; // Сутки
	Иначе
		Интервал = 60 * 10; // Интервал по умолчанию
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СекундДоСтарта = ГСЧ.СлучайноеЧисло(30, Интервал);
	
	ДатаВыполнения = ТекущаяДатаСеанса() + СекундДоСтарта;
	
	Возврат ДатаВыполнения;
	
КонецФункции

#КонецОбласти