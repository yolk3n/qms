
#Область СлужебныйПрограммныйИнтерфейс

#Область ПространствоИмен

// Проверяет пространство имен на принадлежность к МЧД
// 
// Параметры:
//  ПространствоИмен - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоПространствоИменМЧД(ПространствоИмен) Экспорт
	Возврат СтрНачинаетсяС(ПространствоИмен, ПространствоИмен_МЧД());
КонецФункции

// Возвращает подстроку, характерную для пространства имен МЧД b2b.
// 
// Возвращаемое значение:
//  Строка
Функция ПространствоИмен_МЧД() Экспорт
	
	Возврат "ON_DOVBB";
	
КонецФункции

// Возвращает подстроку, характерную для пространства имен МЧД b2g.
// 
// Возвращаемое значение:
//  Строка
Функция ПространствоИмен_МЧД_b2g() Экспорт
	
	Возврат "ON_DOVEL";
	
КонецФункции

// Проверяет пространство имен на принадлежность к актам сверки взаиморасчетов.
// 
// Параметры:
//  ПространствоИмен - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоПространствоИменАктСверкиВзаиморасчетов(ПространствоИмен) Экспорт
	Возврат СтрНачинаетсяС(ПространствоИмен, "ON_AKTSVEROTP")
		Или СтрНачинаетсяС(ПространствоИмен, "ON_AKTSVERPOL");
КонецФункции

#КонецОбласти

#Область ДополнительныеПоля

// Заполнить разделы дополнительных полей. См. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
// 
// Параметры:
//  РазделыДополнительныхПолей - см. ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента
//  ТипЭлектронногоДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  Формат - Строка - см. ФорматыЭДО.ПоддерживаемыеФорматы
Процедура ЗаполнитьРазделыДополнительныхПолей(РазделыДополнительныхПолей, ТипЭлектронногоДокумента, Формат) Экспорт
	Форматы = ПоддерживаемыеФорматы();
	ТипыРазделовДопПолей = ЭлектронныеДокументыЭДОКлиентСервер.ТипыРазделовДополнительныхПолей();
	Если Формат = Форматы.УПД.ИнформацияПродавца
		ИЛИ Формат = Форматы.УПД2019.ИнформацияПродавца Тогда
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "Шапка";
		Раздел.Тип = ТипыРазделовДопПолей.Шапка;
		Раздел.Представление = НСтр("ru = 'Документ'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф";
		Раздел.ПутьКРеквизитуДереваДопДанные = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
		Раздел.ПутьКРеквизитуДереваСумма = "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом";
		
		Если ТипЭлектронногоДокумента <> Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
			Раздел = РазделыДополнительныхПолей.Добавить();
			Раздел.Имя = "СведенияОбОтгрузке";
			Раздел.Тип = ТипыРазделовДопПолей.Шапка;
			Раздел.Представление = НСтр("ru = 'Сведения об отгрузке'");
			Раздел.ПутьКЭлементуXML = "Файл.Документ.СвПродПер.ИнфПолФХЖ3";
			Раздел.ПутьКРеквизитуДереваДопДанные = "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация";
			Раздел.ПутьКРеквизитуДереваСумма = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
		КонецЕсли;
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "ТоварыУслуги";
		Раздел.Тип = ТипыРазделовДопПолей.Таблица;
		Раздел.Представление = НСтр("ru = 'Товары / услуги / права'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.ТаблСчФакт.СведТов.ИнфПолФХЖ2";
		Раздел.ПутьКРеквизитуДереваДопДанные = "СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные";
		Раздел.ПутьКРеквизитуДереваСумма = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
		
	ИначеЕсли Формат = Форматы.УКД.ИнформацияПродавца
	 	Или Формат = Форматы.УКД2020.ИнформацияПродавца Тогда
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "Шапка";
		Раздел.Тип = ТипыРазделовДопПолей.Шапка;
		Раздел.Представление = НСтр("ru = 'Документ'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.СвКСчФ.ИнфПолФХЖ1.ТекстИнф";
		Раздел.ПутьКРеквизитуДереваДопДанные = "ДопДанныеСчетаФактуры.ТекстоваяИнформация";
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "ТоварыУслуги";
		Раздел.Тип =  ТипыРазделовДопПолей.Таблица;
		Раздел.Представление = НСтр("ru = 'Товары / услуги / права'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2";
		Раздел.ПутьКРеквизитуДереваДопДанные = "СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные";
		
	ИначеЕсли Формат = Форматы.ПередачаТоваров.ИнформацияПродавца Тогда
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "Шапка";
		Раздел.Тип =  ТипыРазделовДопПолей.Шапка;
		Раздел.Представление = НСтр("ru = 'Документ'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.СодФХЖ3.ИнфПолФХЖ3";
		Раздел.ПутьКРеквизитуДереваДопДанные = "ДопДанные.Подписанные";
		Раздел.ПутьКРеквизитуДереваСумма = "ВсегоПоНакладной.СуммаСНДС";
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "ТоварыУслуги";
		Раздел.Тип =  ТипыРазделовДопПолей.Таблица;
		Раздел.Представление = НСтр("ru = 'Товары'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов.НомТов.ИнфПолФХЖ2";
		Раздел.ПутьКРеквизитуДереваДопДанные = "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные";
		Раздел.ПутьКРеквизитуДереваСумма = "ТаблицаТоваров.НомерСтроки.СуммаСНДС";
		
	ИначеЕсли Формат = Форматы.ПередачаРабот.ИнформацияПродавца Тогда
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "Шапка";
		Раздел.Тип = ТипыРазделовДопПолей.Шапка;
		Раздел.Представление = НСтр("ru = 'Документ'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.СодФХЖ2.ИнфПолФХЖ2";
		Раздел.ПутьКРеквизитуДереваДопДанные = "ДопДанные.Подписанные";
		Раздел.ПутьКРеквизитуДереваСумма = "ОписаниеУслуги.СуммаСНДСИтого";
		
		Раздел = РазделыДополнительныхПолей.Добавить();
		Раздел.Имя = "ТоварыУслуги";
		Раздел.Тип =  ТипыРазделовДопПолей.Таблица;
		Раздел.Представление = НСтр("ru = 'Услуги'");
		Раздел.ПутьКЭлементуXML = "Файл.Документ.СвДокПРУ.СодФХЖ1.ОписРабот.Работа.ИнфПолеОписРабот";
		Раздел.ПутьКРеквизитуДереваДопДанные = "ТаблицаУслуг.НомерСтроки.ДопДанныеПодписанные";
		Раздел.ПутьКРеквизитуДереваСумма = "ТаблицаУслуг.НомерСтроки.СуммаСНДС";

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СформироватьДокумент(Знач Формат, Знач Данные) Экспорт
	
	Проверка = ПроверитьЗаполнениеДанных(Формат, Данные);
	
	Если ТипЗнч(Данные) = Тип("ДеревоЗначений") Тогда
		ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Проверка.Ошибки);
	
		Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
				ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
				МодульЭлектронноеАктированиеЕИС.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(
					Данные, Проверка.Ошибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполненияДанных(Проверка) Тогда
		Возврат РезультатФормированияСОшибкойЗаполненияДанных(Проверка);
	КонецЕсли;
	
	Документ = ЗаполнитьДокумент(Формат, Данные);
	Если ЕстьОшибкиЗаполненияДокумента(Документ) Тогда
		Возврат РезультатФормированияСОшибкойЗаполненияДокумента(Документ);
	КонецЕсли;
	
	Возврат РезультатУспешногоФормированияДокумента(Документ);
	
КонецФункции

Функция ПроверитьДокумент(Формат, ОписаниеФайла) Экспорт
	
	РезультатПроверки = ФорматыЭДО.НовыйРезультатПроверки();
	
	ПространствоИмен = "";
	Форматы = ПоддерживаемыеФорматы();
	
	Если Формат = Форматы.УПД2019.ИнформацияПродавца Тогда
		
		ПространствоИмен = ПространствоИмен_УПД2019_ИнформацияПродавца();
		
	ИначеЕсли Формат = Форматы.УКД2020.ИнформацияПродавца Тогда
		
		ПространствоИмен = ПространствоИмен_УКД2020_ИнформацияПродавца();
		
	ИначеЕсли Формат = Форматы.ПередачаТоваров.ИнформацияПродавца Тогда
		
		ПространствоИмен = ПространствоИмен_ПередачаТоваров_ИнформацияПродавца();
		
	ИначеЕсли Формат = Форматы.ПередачаРабот.ИнформацияПродавца Тогда
		
		ПространствоИмен = ПространствоИмен_ПередачаУслуг_ИнформацияПродавца();
		
	Иначе
		Возврат РезультатПроверки;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПространствоИмен) Тогда
		
		Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ОписаниеФайла.ДвоичныеДанные, ПространствоИмен);
		
		Попытка
			
			ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
			
		Исключение
			
			Информация = ИнформацияОбОшибке();
			Причина = Информация.Причина;
			Пока Причина.Причина <> Неопределено Цикл
				Причина = Причина.Причина;
			КонецЦикла;
			
			РезультатПроверки.Ошибки = Истина;
			РезультатПроверки.ТекстОшибки = Причина.Описание;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ВидОшибкиНекорректныйФорматИнформацииОтправителя() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НекорректныйФорматИнформацииОтправителя";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка в файле информации отправителя'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Отклоните"">Отклоните</a> некорректные документы.'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Отклоните", "ИнтеграцияЭДОКлиент.ОтклонитьЭД");
	ВидОшибки.Статус = ОбработкаНеисправностейБЭДКлиентСервер.СтатусыОшибок().Обычная;
	ВидОшибки.ВыводитьСсылкуНаСписокОшибок = Истина;
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает описание поля сведений о выбытии маркированных товаров
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяРеквизита - Строка
//   * ИмяПоля - Строка
//
Функция ОписаниеПоляСведенийОВыбытииМаркированныхТоваров() Экспорт
	
	Возврат Новый Структура("ИмяРеквизита, ИмяПоля", "СведенияОВыбытииМаркированныхТоваров", "СвВыбытияМАРК");
		
КонецФункции

Процедура ДополнитьДанныеОбъектаУчетаСведениямиФайла(Дерево, Файл, Формат) Экспорт

	Если Формат = ПространствоИмен_АктСверкиВзаиморасчетов_ИнформацияПолучателя() Тогда
		ДополнитьДанныеОбъектаУчетаСведениямиФайла_АктСверкиВзаиморасчетов(Дерево, Файл);
	КонецЕсли;

КонецПроцедуры

// Новый результат заполнения документа.
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеОсновногоФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * ДанныеДополнительногоФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибки - Неопределено
//          - Массив Из см. ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки
// 
Функция НовыйРезультатЗаполненияДокумента() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОсновногоФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("ДанныеДополнительногоФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("Ошибки", Неопределено);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверка

Функция НовыйРезультатПроверкиЗаполненияДанных()
	
	Проверка = Новый Структура;
	Проверка.Вставить("Ошибки");
	
	Возврат Проверка;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных(Знач Формат, Знач Данные)
	
	Проверка = НовыйРезультатПроверкиЗаполненияДанных();
	
	Форматы = ПоддерживаемыеФорматы();
	Если Формат = Форматы.УПД2019.ИнформацияПродавца Тогда
		
		Проверка.Ошибки = ПроверитьЗаполнениеДанных_УПД2019_ИнформацияПродавца(Данные);
		
	ИначеЕсли Формат = Форматы.УПД2019.ИнформацияПокупателя Тогда
		
		Проверка.Ошибки = ПроверитьЗаполнениеДанных_УПД2019_ИнформацияПокупателя(Данные);
	
	ИначеЕсли Формат = Форматы.УПД.ИнформацияПокупателя Тогда
			
	ИначеЕсли Формат = Форматы.УКД.ИнформацияПродавца Тогда
		
		Проверка.Ошибки = ПроверитьЗаполнениеДанных_УКД_ИнформацияПродавца(Данные);
		
	ИначеЕсли Формат = Форматы.УКД.ИнформацияПокупателя Тогда
	
	ИначеЕсли Формат = Форматы.УКД2020.ИнформацияПродавца Тогда
		
		Проверка.Ошибки = ПроверитьЗаполнениеДанных_УКД2020_ИнформацияПродавца(Данные);
		
	ИначеЕсли Формат = Форматы.УКД2020.ИнформацияПокупателя Тогда		
			
	ИначеЕсли Формат = Форматы.ПередачаТоваров.ИнформацияПродавца Тогда
		
	ИначеЕсли Формат = Форматы.ПередачаТоваров.ИнформацияПокупателя Тогда
		
	ИначеЕсли Формат = Форматы.ПередачаРабот.ИнформацияПродавца Тогда
		
	ИначеЕсли Формат = Форматы.ПередачаРабот.ИнформацияПокупателя Тогда
		
	ИначеЕсли Формат = Форматы.АктОРасхождениях.ИнформацияПокупателя Тогда
				
	ИначеЕсли Формат = Форматы.ТорговаяОперация.ИнформацияПродавца Тогда
		
	ИначеЕсли Формат = Форматы.ТорговаяОперация.ИнформацияПокупателя Тогда
		
	ИначеЕсли Формат = Форматы.ПриемкаСдачаРабот.ИнформацияПродавца Тогда
		
	ИначеЕсли Формат = Форматы.ПриемкаСдачаРабот.ИнформацияПокупателя Тогда
		
	ИначеЕсли Формат = Форматы.СчетФактура Тогда
		
	ИначеЕсли Формат = Форматы.КорректировочныйСчетФактура Тогда
		
	ИначеЕсли Формат = Форматы.ИзвещениеОПолучении Тогда
		
	ИначеЕсли Формат = Форматы.ПодтверждениеДатыОтправки Тогда
		
	ИначеЕсли Формат = Форматы.ПодтверждениеДатыПолучения Тогда
		
	ИначеЕсли Формат = Форматы.УведомлениеОбУточнении Тогда
		
	ИначеЕсли Формат = Форматы.УведомлениеОбУточнении0101 Тогда
		
	ИначеЕсли Формат = Форматы.ПредложениеОбАннулировании Тогда
		
	ИначеЕсли Формат = Форматы.БизнесСеть.КоммерческиеПредложения Тогда
		
	ИначеЕсли Формат = Форматы.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		
	ИначеЕсли Формат = Форматы.АктСверкиВзаиморасчетов.ИнформацияПолучателя Тогда
		
	ИначеЕсли Формат = Форматы.СчетНаОплату101 Тогда
		
	ИначеЕсли ФорматыЭДО.ЭтоОбработкаФормата(Данные) Тогда
		Попытка
			Если Не Данные.ПроверитьЗаполнение() Тогда
				Если ТипЗнч(Проверка.Ошибки) = Тип("Массив") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Проверка.Ошибки, Данные.ПолучитьОшибкиЗаполнения());
				Иначе
					Проверка.Ошибки = Данные.ПолучитьОшибкиЗаполнения();
				КонецЕсли;
			КонецЕсли;
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Менеджер %1, не удалось проверить заполнение данных, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(Данные), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	Иначе
		Шаблон = НСтр("ru = 'Формат ""%1"" не поддерживается.'");
		СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат);
		ВызватьИсключение СтрокаСообщенияИсключения;
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

Функция ЕстьОшибкиЗаполненияДанных(Проверка)
	
	Возврат ЗначениеЗаполнено(Проверка.Ошибки);
	
КонецФункции

Функция РезультатФормированияСОшибкойЗаполненияДанных(Знач Проверка)
	
	Результат = ФорматыЭДО.НовыйРезультатФормированияДокумента();
	Результат.Ошибки = Проверка.Ошибки;
	
	Возврат Результат;
	
КонецФункции

#Область ПроверкаФорматов

Функция ПроверитьЗаполнениеДанных_УПД2019_ИнформацияПродавца(Данные)
	
	Ошибки = Неопределено;
	
	ФункцияУПД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "Функция");
	
	// КодОКВ - код валюты должен быть в Общероссийском классификаторе валют.
	ПроверитьКодВалютыФНС(Данные, Ошибки);
	
	// НомИспрСчФ и ДатаИспрСчФ - данные исправительного счета-фактуры должны быть либо указаны оба, либо не указаны
	// вообще. Также НомИспрСчФ должен быть больше 0.
	ПроверитьДанныеИсправленияФНС(Данные, Ошибки, "НомерИсправления", "ДатаИсправления");
	
	// ДатаОсн - обязателен, если в НаимОсн, отличном от "Без документа-основания".
	ТекстОтсутствияДокументаОснования = "Без документа-основания";
	ПроверитьОснованиеФНС(Данные, Ошибки, "ОснованиеОтгрузкиТоваров",,, ТекстОтсутствияДокументаОснования);
	
	// Адрес - обязателен при функциях СЧФ и СЧФДОП.
	АдресОбязателен = (ФункцияУПД = СЧФ() ИЛИ ФункцияУПД = СЧФДОП());
	
	СведенияОбУчастнике = Данные.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	Для каждого СтрокаУчастника Из СведенияОбУчастнике.Строки Цикл
		ПроверитьСведенияОбУчастникеУПД_2019(СтрокаУчастника, "СведенияОПродавце.НомерСтроки", Ошибки, АдресОбязателен);
		Если ФункцияУПД = СЧФ() ИЛИ ФункцияУПД = СЧФДОП() Тогда
			ПроверитьКППУчастникаУПД_2109(СтрокаУчастника, "СведенияОПродавце.НомерСтроки", Ошибки);
		КонецЕсли;
	КонецЦикла;
	СведенияОбУчастнике = Данные.Строки.Найти("СведенияОГрузоотправителе", "ПолныйПуть");
	Для каждого СтрокаУчастника Из СведенияОбУчастнике.Строки Цикл
		Если Не ЗначениеЗаполнено(СведенияОбУчастнике.Значение) Тогда // пустая таблица.
			Прервать;
		КонецЕсли;
		ПроверитьСведенияОбУчастникеУПД_2019(СтрокаУчастника, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель", Ошибки, АдресОбязателен);
		// Проверка заполнения одного из полей: Грузоотправитель, ОнЖе.
		ЗначениеГрузоотправитель = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаУчастника, СтрокаУчастника.ПолныйПуть + ".Грузоотправитель");
		ЗначениеОнЖе = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаУчастника, СтрокаУчастника.ПолныйПуть + ".ОнЖе");
		Если Не (ЗначениеЗаполнено(ЗначениеГрузоотправитель) ИЛИ ЗначениеЗаполнено(ЗначениеОнЖе)) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(
				Ошибки, СведенияОбУчастнике, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	СведенияОбУчастнике = Данные.Строки.Найти("СведенияОГрузополучателе", "ПолныйПуть");
	Для каждого СтрокаУчастника Из СведенияОбУчастнике.Строки Цикл
		ПроверитьСведенияОбУчастникеУПД_2019(СтрокаУчастника, "СведенияОГрузополучателе.НомерСтроки", Ошибки, АдресОбязателен);
	КонецЦикла;
	СведенияОбУчастнике = Данные.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Для каждого СтрокаУчастника Из СведенияОбУчастнике.Строки Цикл
		ПроверитьСведенияОбУчастникеУПД_2019(СтрокаУчастника, "СведенияОПокупателе.НомерСтроки", Ошибки, АдресОбязателен);
		Если ФункцияУПД = СЧФ() ИЛИ ФункцияУПД = СЧФДОП() Тогда
			ПроверитьКППУчастникаУПД_2109(СтрокаУчастника, "СведенияОПокупателе.НомерСтроки", Ошибки);
		КонецЕсли;
	КонецЦикла;
	ПроверитьСведенияОбУчастникеУПД_2019(Данные, "СведенияОПеревозчике", Ошибки, АдресОбязателен);
	ПроверитьСведенияОбУчастникеУПД_2019(Данные, "СведенияОКомиссионере", Ошибки, АдресОбязателен);
	ПроверитьСведенияОбУчастникеУПД_2019(Данные, "СведенияОКомитенте", Ошибки, АдресОбязателен);
	
	// Обстоятельства формирования счета-фактуры.
	Если ФункцияУПД = СЧФ() Тогда
		ДополнительныеСведенияОбУчастниках = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Данные, "ДополнительныеСведенияОбУчастниках");
		ДопустимыеЗначения = СтрРазделить("1,2,3", ",");
		Значение = ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ;
		Если ДопустимыеЗначения.Найти(Значение) = Неопределено Тогда
			СтрокаДерева = Данные.Строки.Найти("ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", "ПолныйПуть");
			ТекстОшибки = НСтр("ru = 'Некорректно указаны обстоятельства формирования счета-фактуры.'");
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДерева, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// СодОпер - обязателен при функциях ДОП и СЧФДОП.
	ПроверитьСодержаниеОперацииУПД(Данные, ФункцияУПД, Ошибки);
	
	// Сведения о товарах.
	НомерСтроки = 1;
	ПереченьПризнаковТовара = ВозможныеЗначенияПризнакаТовараУПД();
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		ЕдиницаИзмеренияКодСтрокаДерева = Неопределено;
		ЕдиницаИзмеренияКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод",, ЕдиницаИзмеренияКодСтрокаДерева);
			
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
			КодЕдиницыИзмеренияНулевой = ОбщегоНазначенияБЭДКлиентСервер.ТолькоСимволыВСтроке(ЕдиницаИзмеренияКод, "0");
		
			ПроверитьДанныеЕдиницыИзмеренияФНС(
				ЕдиницаИзмеренияКод, ЕдиницаИзмеренияКодСтрокаДерева, Ошибки, НомерСтроки, КодЕдиницыИзмеренияНулевой);
			
			// КолТов - количество обязательно при Функция=СЧФДОП или Функция=ДОП и при наличии ОКЕИ_Тов.
			КоличествоСтрокаДерева = Неопределено;
			Количество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
				"СведенияОТоварах.НомерСтроки.Количество",, КоличествоСтрокаДерева);
			Если (ФункцияУПД = СЧФДОП() ИЛИ ФункцияУПД = ДОП() ИЛИ ФункцияУПД = СвРК() ИЛИ ФункцияУПД = СвЗК())
				И Не ЗначениеЗаполнено(Количество) Тогда
				
				ТекстОшибки = НСтр("ru = 'значение должно быть заполнено, если указана единица измерения и электронный документ содержит данные первичного документа.'");
				ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, КоличествоСтрокаДерева, ТекстОшибки,, НомерСтроки);
			КонецЕсли;
			
			// НаимЕдИзм - наименование единицы измерение обязательно, если указан ее код.
			ПроверитьНаименованиеЕдиницыИзмеренияФНС(Товар, Ошибки, НомерСтроки, КодЕдиницыИзмеренияНулевой);
		КонецЕсли;
		
		// НалСт - ставка НДС должна содержать значение из определенного перечня.
		ПроверитьСтавкуНДС_УПДУКД(Товар, Ошибки, НомерСтроки, "НалоговаяСтавка");
		
		// КодПроисх - код страны должен быть в классификаторе стран мира.
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокиТД = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
				ПроверитьКодСтраныФНС(СтрокаТД, Ошибки,
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", НомерСтроки);
			КонецЦикла;
		КонецЕсли;
		
		// ПрТовРаб - признак товара должен принадлежать определенному перечню
		ПризнакТовараСтрокаДерева = Неопределено;
		ПризнакТовара = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.Признак",, ПризнакТовараСтрокаДерева);
		Если ЗначениеЗаполнено(ПризнакТовара) Тогда
			Если ПереченьПризнаковТовара.Найти(ПризнакТовара) = Неопределено Тогда
				ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
				ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПризнакТовараСтрокаДерева,
					ТекстОшибки,, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		// СтТовБезНДС И СтТовБезНДСВсего - обязателен всегда, кроме авансовых счетов-фактур.
		Если ФункцияУПД = СЧФ() ИЛИ ФункцияУПД = СЧФДОП() Тогда
			СтоимостьБезНДССтрокаДерева = Неопределено;
			
			ВидСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ВидСчетаФактуры");
			СтоимостьБезНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
				"СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога",, СтоимостьБезНДССтрокаДерева);
			
			Если Не (ЗначениеЗаполнено(ВидСчетаФактуры) И ВидСчетаФактуры = "Авансовый")
				И СтоимостьБезНДС = Неопределено Тогда
				ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
				ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтоимостьБезНДССтрокаДерева,
					ТекстОшибки, , НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьДлинуСтрокиЗначенияДерева(Товар, Ошибки, "СведенияОТоварах.НомерСтроки.КодКаталога", 27, 27, НомерСтроки);
		ПроверитьДлинуСтрокиЗначенияДерева(Товар, Ошибки, "СведенияОТоварах.НомерСтроки.КодВидаТовара", 10, 10, НомерСтроки);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Всего к оплате.
	// СтТовБезНДСВсего - обязателен всегда, кроме авансовых счетов-фактур.
	Если ФункцияУПД = СЧФ() ИЛИ ФункцияУПД = СЧФДОП() Тогда
		СтоимостьБезНДСВсегоСтрокаДерева = Неопределено;
		
		ВидСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ВидСчетаФактуры");
		СтоимостьБезНДСВсего = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога",, СтоимостьБезНДСВсегоСтрокаДерева);
		
		Если Не (ЗначениеЗаполнено(ВидСчетаФактуры) И ВидСчетаФактуры = "Авансовый")
			И СтоимостьБезНДСВсего = Неопределено Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтоимостьБезНДСВсегоСтрокаДерева,
				ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСсылкиСчетаФактуры = Неопределено;	
	СсылкаСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Данные, "СсылкаСчетаФактуры",, СтрокаСсылкиСчетаФактуры);
	
	Если ФункцияУПД <> ДОП() И ФункцияУПД <> СвРК() И ФункцияУПД <> СвЗК()
		И Не ЗначениеЗаполнено(СсылкаСчетаФактуры) Тогда

		ТекстОшибки = НСтр("ru = 'Не выписан счет-фактура'");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаСсылкиСчетаФактуры,
			ТекстОшибки, Ложь);

	КонецЕсли;	
	
	ПроверитьДлинуСтрокиЗначенияДерева(
		Данные, Ошибки, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", 20, 25);
	ПроверитьДлинуСтрокиЗначенияДерева(
		Данные, Ошибки, "ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.НомерЛицевогоСчетаПродавца", 11, 11);
	ПроверитьДлинуСтрокиЗначенияДерева(
		Данные, Ошибки, "ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.КодБюджетнойКлассификацииПродавца", 20, 20);
	ПроверитьДлинуСтрокиЗначенияДерева(
		Данные, Ошибки, "ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.КодЦели", 20, 20);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_УПД2019_ИнформацияПокупателя(Данные)
	
	Ошибки = Неопределено;	
	
	ПроверитьДлинуСтрокиЗначенияДерева(
		Данные, Ошибки, "ЗакупкаДляГосударственныхНужд.НомерЛицевогоСчетаПокупателя", 11, 11);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_УКД2020_ИнформацияПродавца(Данные)

	Ошибки = Неопределено;
	
	ФункцияУКД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "Функция");
	
	// КодОКВ - код валюты должен быть в Общероссийском классификаторе валют.
	ПроверитьКодВалютыФНС(Данные, Ошибки);

	// НомИспрСчФ и ДатаИспрКСчФ - данные исправительного счета-фактуры должны быть либо указаны оба, либо не указаны
	// вообще. Также НомИспрСчФ должен быть больше 0.
	ПроверитьДанныеИсправленияФНС(Данные, Ошибки, "НомерИсправления", "ДатаИсправления");
	
	ИсправленияИсходныхДокументов = Данные.Строки.Найти(
		"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента", "ПолныйПуть");
	
	Если ИсправленияИсходныхДокументов <> Неопределено Тогда
		Для Каждого Исправление Из ИсправленияИсходныхДокументов.Строки Цикл
			// НомИспрКСчФ и ДатаИспрСчФ - данные исправительного счета-фактуры должны быть либо указаны оба, либо не указаны
			// вообще. Также НомИспрСчФ должен быть больше 0.
			ПроверитьДанныеИсправленияФНС(Исправление, Ошибки,
				"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента.НомерСтроки.НомерИсправленияИсходногоДокумента",
				"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента.НомерСтроки.ДатаИсправленияИсходногоДокумента");
		КонецЦикла;
	КонецЕсли;
	
	// ДатаОсн - обязателен, если в НаимОсн, отличном от "Отсутствует".
	ПроверитьОснованиеФНС(Данные, Ошибки, "ОснованиеКорректировки");
	
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОПродавце", Ошибки);
	Если ФункцияУКД = КСЧФ() ИЛИ ФункцияУКД = КСЧФДИС() Тогда
		ПроверитьКППУчастникаУПД_2109(Данные, "СведенияОПродавце", Ошибки);
	КонецЕсли;
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОПокупателе", Ошибки);
	Если ФункцияУКД = КСЧФ() ИЛИ ФункцияУКД = КСЧФДИС() Тогда
		ПроверитьКППУчастникаУПД_2109(Данные, "СведенияОПокупателе", Ошибки);
	КонецЕсли;
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОКомиссионере", Ошибки);
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОКомитенте", Ошибки);
	
	// Гос. контракт
	ПроверитьИдентификаторГосКонтракта(Данные, Ошибки);
	
	// Реквизиты документов отгрузки и документов оснований
	ПроверитьСведенияОДокументахОснованияхУКД(Данные, Ошибки);
	
	// Сведения о товарах.
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	НомерСтроки = 1;
	ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом = Ложь;
	ЕстьСкорректированныеПозиции = Ложь;
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Если ПоказателиНеКорректировалисьУКД2020(Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСкорректированныеПозиции = Истина;
		
		НалоговаяСтавка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		СтавкаИсчисляетсяНалоговымАгентом = ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(НалоговаяСтавка);
		Если Не ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом И СтавкаИсчисляетсяНалоговымАгентом Тогда
			ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом = Истина;
		КонецЕсли;
		// ОКЕИ_ТовПосле - проверка кода единицы измерения.
		ЕдиницаИзмеренияКодСтрокаДерева = Неопределено;
		ЕдиницаИзмеренияКодПосле = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод",, ЕдиницаИзмеренияКодСтрокаДерева);
			
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияКодПосле) Тогда
			КодЕдиницыИзмеренияНулевой = ОбщегоНазначенияБЭДКлиентСервер.ТолькоСимволыВСтроке(ЕдиницаИзмеренияКодПосле, "0");
			ПроверитьДанныеЕдиницыИзмеренияФНС(ЕдиницаИзмеренияКодПосле, ЕдиницаИзмеренияКодСтрокаДерева, 
												Ошибки, НомерСтроки, КодЕдиницыИзмеренияНулевой);
		КонецЕсли;
		
		// ОКЕИ_ТовДо - проверка кода единицы измерения до корректировки.
		ЕдиницаИзмеренияКодСтрокаДерева = Неопределено;
		ЕдиницаИзмеренияКодДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки",, ЕдиницаИзмеренияКодСтрокаДерева);
			
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияКодДо) Тогда
			КодЕдиницыИзмеренияНулевой = ОбщегоНазначенияБЭДКлиентСервер.ТолькоСимволыВСтроке(ЕдиницаИзмеренияКодДо, "0");
			ПроверитьДанныеЕдиницыИзмеренияФНС(ЕдиницаИзмеренияКодДо, ЕдиницаИзмеренияКодСтрокаДерева,
			 									Ошибки, НомерСтроки, КодЕдиницыИзмеренияНулевой);
		КонецЕсли;
		
		// КодПроисх - код страны должен быть в классификаторе стран мира.
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокиТД = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
				ПроверитьКодСтраныФНС(СтрокаТД, Ошибки,
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", НомерСтроки);
			КонецЦикла;
		КонецЕсли;
		
		// Проверить наименование единиц измерения
		ПроверитьНаименованиеЕдиницыИзмеренияУКД(Товар, ЕдиницаИзмеренияКодДо, Истина, НомерСтроки, Ошибки);
		ПроверитьНаименованиеЕдиницыИзмеренияУКД(Товар, ЕдиницаИзмеренияКодПосле, Ложь, НомерСтроки, Ошибки);
		
		// НалСтДо - ставка НДС должна содержать значение из определенного перечня
		ПроверитьСтавкуНДС_УПДУКД(Товар, Ошибки, НомерСтроки, "НалоговаяСтавкаДоКорректировки");
		
		// НалСтПосле - ставка НДС должна содержать значение из определенного перечня
		ПроверитьСтавкуНДС_УПДУКД(Товар, Ошибки, НомерСтроки, "НалоговаяСтавка");
		
		// Дополнительные сведения товара
		ПроверяемыеСведения = ДополнительныеСведенияОТовареДляПроверкиУКД(Товар);
		ПроверитьЗависимыеСведенияОТоваре(ПроверяемыеСведения, Товар, Ошибки, НомерСтроки);
		
		// Проверить сведения о маркировке до корректировки
		Если СведенияОМаркировкеЗаполненыУКД2020(Товар, Истина) Тогда
			ПроверяемыеСведения = СведенияОМаркировкеТовараДляПроверкиУКД2020(Товар, Истина);
			ПроверитьЗависимыеСведенияОТоваре(ПроверяемыеСведения, Товар, Ошибки, НомерСтроки);
			
		КонецЕсли;
		
		// Проверить сведения о маркировке после корректировки
		Если СведенияОМаркировкеЗаполненыУКД2020(Товар, Ложь) Тогда
			ПроверяемыеСведения = СведенияОМаркировкеТовараДляПроверкиУКД2020(Товар, Ложь);
			ПроверитьЗависимыеСведенияОТоваре(ПроверяемыеСведения, Товар, Ошибки, НомерСтроки);
			
		КонецЕсли;
		
		ПараметрыПроверки = НовыеПараметрыПроверкиСтоимостиТовараУКД_2020();
		ПараметрыПроверки.ФункцияУКД = ФункцияУКД;
		ПараметрыПроверки.ДеревоДанных = Данные;
		ПараметрыПроверки.Товар = Товар;
		ПараметрыПроверки.НомерСтроки = НомерСтроки;
		ПараметрыПроверки.СтавкаИсчисляетсяНалоговымАгентом = СтавкаИсчисляетсяНалоговымАгентом;
		ПараметрыПроверки.СтавкаБезНДС = ЭтоСтавкаБезНДС(НалоговаяСтавка);
		ПараметрыПроверки.СтавкаНДС0 = ЭтоСтавкаНДС0(НалоговаяСтавка);
		ПараметрыПроверки.ЭтоВозврат = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ВидДокумента") = "Возврат";
		
		// Проверка суммы налога
		ПроверитьСуммуНалогаУКД_2020(ПараметрыПроверки, Ошибки);
		
		// Проверить стоимость товара после изменения с налогом
		ПроверитьСтоимостьТовараПослеИзмененияУКД_2020(ПараметрыПроверки, Истина, Ошибки);
		
		// Проверить стоимость товара после изменения без налога
		ПроверитьСтоимостьТовараПослеИзмененияУКД_2020(ПараметрыПроверки, Ложь, Ошибки);
		
		// Проверить стоимость увеличения/уменьшения товара с налогом
		ПроверитьСтоимостьУвеличенияУменьшенияТовараУКД_2020(ПараметрыПроверки, Истина, Ошибки);
		
		// Проверить стоимость увеличения/уменьшения товара без налога
		ПроверитьСтоимостьУвеличенияУменьшенияТовараУКД_2020(ПараметрыПроверки, Ложь, Ошибки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если ЕстьСкорректированныеПозиции Тогда
		// СтоимУвел, СтоимУм - должна быть указана хотя бы одна.
		ПроверитьНаличиеУвеличенияУменьшенияВУКД(Данные, Ошибки, НомерСтроки,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
			НСтр("ru = 'Всего сумма без НДС'"));
			
		Если Не ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом Тогда
			ПроверитьНаличиеУвеличенияУменьшенияВУКД(Данные, Ошибки, НомерСтроки,
				"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
				"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
				НСтр("ru = 'Всего сумма с НДС'"));
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru = 'Значения колонок ""Сумма"", ""НДС"", ""Количество"" до и после корректировки не отличаются, чтобы сформировать электронный документ, необходимо скорректировать значение относительно документа-основания.'");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, Неопределено, ТекстОшибки);
			
	КонецЕсли;
	
	СтрокаСсылкиСчетаФактуры = Неопределено;	
	СсылкаСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Данные, "СсылкаКорректировочногоСчетаФактуры",, СтрокаСсылкиСчетаФактуры);
			
	Если ФункцияУКД <> ДИС() И ФункцияУКД <> СвИСРК() И ФункцияУКД <> СвИСЗК()
		И Не ЗначениеЗаполнено(СсылкаСчетаФактуры) Тогда

		ТекстОшибки = НСтр("ru = 'Не выписан счет-фактура'");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаСсылкиСчетаФактуры,
			ТекстОшибки, Ложь);

	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_УКД_ИнформацияПродавца(Данные)

	Ошибки = Неопределено;
	
	ФункцияУКД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "Функция");
	
	// КодОКВ - код валюты должен быть в Общероссийском классификаторе валют.
	ПроверитьКодВалютыФНС(Данные, Ошибки);

	// НомИспрСчФ и ДатаИспрКСчФ - данные исправительного счета-фактуры должны быть либо указаны оба, либо не указаны
	// вообще. Также НомИспрСчФ должен быть больше 0.
	ПроверитьДанныеИсправленияФНС(Данные, Ошибки, "НомерИсправления", "ДатаИсправления");
	
	// НомИспрКСчФ и ДатаИспрСчФ - данные исправительного счета-фактуры должны быть либо указаны оба, либо не указаны
	// вообще. Также НомИспрСчФ должен быть больше 0.
	ПроверитьДанныеИсправленияФНС(Данные, Ошибки, "НомерИсправленияИсходногоДокумента",
		"ДатаИсправленияИсходногоДокумента");
	
	// ДатаОсн - обязателен, если в НаимОсн, отличном от "Отсутствует".
	ПроверитьОснованиеФНС(Данные, Ошибки, "ОснованиеКорректировки");
	
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОПродавце", Ошибки);
	Если ФункцияУКД = КСЧФ() ИЛИ ФункцияУКД = КСЧФДИС() Тогда
		ПроверитьКППУчастникаУПД_2109(Данные, "СведенияОПродавце", Ошибки);
	КонецЕсли;
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОПокупателе", Ошибки);
	Если ФункцияУКД = КСЧФ() ИЛИ ФункцияУКД = КСЧФДИС() Тогда
		ПроверитьКППУчастникаУПД_2109(Данные, "СведенияОПокупателе", Ошибки);
	КонецЕсли;
	ПроверитьСведенияОбУчастникеУПДУКД(Данные, "СведенияОКомиссионере", Ошибки);
	
	// Сведения о товарах.
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	НомерСтроки = 1;
	ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом = Ложь;
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		НалоговаяСтавка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если Не ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом И ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(НалоговаяСтавка) Тогда
			ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом = Истина;
		КонецЕсли;
		// ОКЕИ_ТовПосле - проверка кода единицы измерения.
		ЕдиницаИзмеренияКодСтрокаДерева = Неопределено;
		ЕдиницаИзмеренияКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод",, ЕдиницаИзмеренияКодСтрокаДерева);
			
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
			КодЕдиницыИзмеренияНулевой = ОбщегоНазначенияБЭДКлиентСервер.ТолькоСимволыВСтроке(ЕдиницаИзмеренияКод, "0");
			ПроверитьДанныеЕдиницыИзмеренияФНС(ЕдиницаИзмеренияКод, ЕдиницаИзмеренияКодСтрокаДерева, Ошибки, НомерСтроки,
				КодЕдиницыИзмеренияНулевой);
		КонецЕсли;
		
		// ОКЕИ_ТовДо - проверка кода единицы измерения до корректировки.
		ЕдиницаИзмеренияКодСтрокаДерева = Неопределено;
		ЕдиницаИзмеренияКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки",, ЕдиницаИзмеренияКодСтрокаДерева);
			
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
			КодЕдиницыИзмеренияНулевой = ОбщегоНазначенияБЭДКлиентСервер.ТолькоСимволыВСтроке(ЕдиницаИзмеренияКод, "0");
			ПроверитьДанныеЕдиницыИзмеренияФНС(ЕдиницаИзмеренияКод, ЕдиницаИзмеренияКодСтрокаДерева, Ошибки, НомерСтроки,
				КодЕдиницыИзмеренияНулевой);
		КонецЕсли;
		
		// НалСтДо - ставка НДС должна содержать значение из определенного перечня
		ПроверитьСтавкуНДС_УПДУКД(Товар, Ошибки, НомерСтроки, "НалоговаяСтавкаДоКорректировки");
		
		// НалСтПосле - ставка НДС должна содержать значение из определенного перечня
		ПроверитьСтавкуНДС_УПДУКД(Товар, Ошибки, НомерСтроки, "НалоговаяСтавка");

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// СтоимУвел, СтоимУм - должна быть указана хотя бы одна.
	ПроверитьНаличиеУвеличенияУменьшенияВУКД(Данные, Ошибки, НомерСтроки,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
		НСтр("ru = 'Всего сумма без НДС'"));
		
	Если Не ЕстьСтавкаНДСИсчисляетсяНалоговымАгентом Тогда
		ПроверитьНаличиеУвеличенияУменьшенияВУКД(Данные, Ошибки, НомерСтроки,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
			НСтр("ru = 'Всего сумма с НДС'"));
	КонецЕсли;
	
	СтрокаСсылкиСчетаФактуры = Неопределено;	
	СсылкаСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Данные, "СсылкаКорректировочногоСчетаФактуры",, СтрокаСсылкиСчетаФактуры);
			
	Если ФункцияУКД <> ДИС() И Не ЗначениеЗаполнено(СсылкаСчетаФактуры) Тогда

		ТекстОшибки = НСтр("ru = 'Не выписан счет-фактура'");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаСсылкиСчетаФактуры,
			ТекстОшибки, Ложь);

	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции


#КонецОбласти

#Область МетодыПроверки

Функция СвРК()
	Возврат "СвРК";
КонецФункции

Функция СвЗК()
	Возврат "СвЗК";
КонецФункции

Функция СвИСРК()
	Возврат "СвИСРК";
КонецФункции

Функция СвИСЗК()
	Возврат "СвИСЗК";
КонецФункции

Функция СЧФДОП()
	Возврат "СЧФДОП";
КонецФункции

Функция СЧФ()
	Возврат "СЧФ";
КонецФункции

Функция ДОП()
	Возврат "ДОП";
КонецФункции

Функция КСЧФДИС()
	Возврат "КСЧФДИС";
КонецФункции

Функция КСЧФ()
	Возврат "КСЧФ";
КонецФункции

Функция ДИС()
	Возврат "ДИС";
КонецФункции

Процедура ПроверитьДлинуСтрокиЗначенияДерева(ДеревоДанных, Ошибки, ПолноеИмяРеквизита,
	МинимальнаяДлина, МаксимальнаяДлина, НомерСтроки = Неопределено)
	
	РеквизитСтрокаДерева = Неопределено;
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		ПолноеИмяРеквизита, Ложь, РеквизитСтрокаДерева);
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		Если СтрДлина(Реквизит) < МинимальнаяДлина
			ИЛИ МаксимальнаяДлина < СтрДлина(Реквизит) Тогда
			ТекстОшибки = "";
			Если МинимальнаяДлина = МаксимальнаяДлина Тогда
				ШаблонОшибки = НСтр("ru = 'длина значения должна быть равна %1, указано %2'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, МинимальнаяДлина, СокрЛП(Реквизит));
			Иначе
				ШаблонОшибки = НСтр("ru = 'значение должно содержать от %1 до %2 символов, указано %3'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, МинимальнаяДлина, МаксимальнаяДлина, СокрЛП(Реквизит));
			КонецЕсли;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, РеквизитСтрокаДерева,
				ТекстОшибки,, НомерСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКодВалютыФНС(ДеревоДанных, Ошибки, ПолныйПуть = "ВалютаКод")
	
	НайденнаяСтрокаРеквизита = Неопределено;
	
	// Код валюты должен быть в Общероссийском классификаторе валют.
	КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть,,
		НайденнаяСтрокаРеквизита);
	
	Если ЗначениеЗаполнено(КодВалюты)
		И ТипЗнч(КодВалюты) <> Тип("Строка") Тогда
		КодВалюты = Строка(КодВалюты);
	КонецЕсли;
	
	Если ИнтеграцияБСПБЭД.ДанныеВалютыПоКлассификатору(КодВалюты) = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'указанный код (%1) не найден в классификаторе ОКВ'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, СокрЛП(КодВалюты));
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, НайденнаяСтрокаРеквизита,
			ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьДанныеИсправленияФНС(ДеревоДанных, Ошибки, ИмяРеквизитаНомер, ИмяРеквизитаДата)

	СтрокаНомера = Неопределено;
	НомерИсправления = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаНомер,,
		СтрокаНомера);
		
	СтрокаДаты = Неопределено;
	ДатаИсправления = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаДата,,
		СтрокаДаты);
		
	Если ЗначениеЗаполнено(НомерИсправления) ИЛИ ЗначениеЗаполнено(ДатаИсправления) Тогда
		Если Не ЗначениеЗаполнено(НомерИсправления) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаНомера, ТекстОшибки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДаты, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьОснованиеФНС(ДеревоДанных, Ошибки, ИмяРеквизитаОснования,
	ИмяРеквизитаНаименование = "ДокументНаименование", ИмяРеквизитаДата = "ДокументДата",
	ЗначениеНезаполненногоНаименования = "Отсутствует")
	
	// ДатаОсн - обязателен, если НаимОсн - отличное от "Отсутствует" (или "-").
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаОснования);
	Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
		СтрокаТаблицы = ДеревоДанных.Строки.Найти(ИмяРеквизитаОснования, "ПолныйПуть", Истина);
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
				НаименованиеОснования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
					ИмяРеквизитаОснования + ".НомерСтроки." + ИмяРеквизитаНаименование);
				
				ДатаОснованияСтрокаДерева = Неопределено;
				ДатаОснования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
					ИмяРеквизитаОснования + ".НомерСтроки." + ИмяРеквизитаДата,, ДатаОснованияСтрокаДерева);
				
				Если ЗначениеЗаполнено(НаименованиеОснования) И СокрЛП(НаименованиеОснования) <> ЗначениеНезаполненногоНаименования
					И Не ЗначениеЗаполнено(ДатаОснования) Тогда
					
					ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеЗаполненногоЗначенияДерева();
					ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ДатаОснованияСтрокаДерева,
						ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСведенияОбУчастникеУПД_2019(ДеревоДанных, ВидУчастника, Ошибки, АдресОбязателен = Ложь)
	
	УчастникВТаблице = (ВРег(Прав(ВидУчастника, 11)) = "НОМЕРСТРОКИ");
	Если УчастникВТаблице Тогда
		// Если не заполнен номер строки, значит участник не заполнен.
		Если Не ЗначениеЗаполнено(ДеревоДанных.Значение) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		// Если участник не указан в дереве, не проверяем.
		Участник = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника);
		Если Не ЗначениеЗаполнено(Участник) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Адрес - обязателен в некоторых случаях.
	АдресУчастникаСтрокаДерева = Неопределено;
	АдресУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес",, АдресУчастникаСтрокаДерева);
	Если Не ЗначениеЗаполнено(АдресУчастника) Тогда
		Если АдресОбязателен Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, АдресУчастникаСтрокаДерева,
				ТекстОшибки);
		КонецЕсли;
	Иначе
		Если АдресУчастника = "АдресИнформация" Тогда
			ПроверитьКодСтраныФНС(ДеревоДанных, Ошибки, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСведенияОбУчастникеУПДУКД(ДеревоДанных, ВидУчастника, Ошибки, АдресОбязателен = Ложь)
	
	// Если участник не указан в дереве, не проверяем.
	Участник = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника);
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	// Адрес - обязателен в некоторых случаях.
	АдресУчастникаСтрокаДерева = Неопределено;
	АдресУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес",, АдресУчастникаСтрокаДерева);
	Если Не ЗначениеЗаполнено(АдресУчастника) Тогда
		Если АдресОбязателен Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, АдресУчастникаСтрокаДерева,
				ТекстОшибки);
		КонецЕсли;
	Иначе
		Если АдресУчастника = "АдресИнформация" Тогда
			ПроверитьКодСтраныФНС(ДеревоДанных, Ошибки, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКППУчастникаУПД_2109(ДеревоДанных, ВидУчастника, Ошибки)

	УчастникВТаблице = (ВРег(Прав(ВидУчастника, 11)) = "НОМЕРСТРОКИ");
	Если УчастникВТаблице Тогда
		// Если не заполнен номер строки, значит участник не заполнен.
		Если Не ЗначениеЗаполнено(ДеревоДанных.Значение) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		// Если участник не указан в дереве, не проверяем.
		Участник = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника);
		Если Не ЗначениеЗаполнено(Участник) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТипУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника");
		
	Если ВРег(ТипУчастника) = "ЮЛ" Тогда
		СтрокаКПП = Неопределено;
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника+".ТипУчастника.ЮЛ.КПП",, СтрокаКПП);
		Если Не ЗначениеЗаполнено(КПП) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(
				Ошибки, СтрокаКПП, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКодСтраныФНС(ДеревоДанных, Ошибки, ИмяРеквизитаДерева, НомерСтроки = Неопределено)
	
	КодСтраныСтрокаДерева = Неопределено;
	КодСтраны = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		ИмяРеквизитаДерева,, КодСтраныСтрокаДерева);
	
	Если ЗначениеЗаполнено(КодСтраны) Тогда
		ДанныеСтраныПоКлассификатору = ДанныеКлассификатораСтранМираПоКоду(КодСтраны);
		КодыСтранДопустимыеКромеКлассификатора = КодыСтранДопустимыеКромеКлассификатора();
		Если ДанныеСтраныПоКлассификатору = Неопределено
			И КодыСтранДопустимыеКромеКлассификатора.Найти(КодСтраны) = Неопределено Тогда
			
			ШаблонОшибки = НСтр("ru = 'допускается указание кодов из классификатора ОКСМ, а также 980 (Евросоюз), 981 (ЕАЭС), указано %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, СокрЛП(КодСтраны));
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, КодСтраныСтрокаДерева,
				ТекстОшибки,, НомерСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция КодыСтранДопустимыеКромеКлассификатора()

	Результат = Новый Массив;
	Результат.Добавить("980");
	Результат.Добавить("981");
	
	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции

Процедура ПроверитьСодержаниеОперацииУПД(ДеревоДанных, ФункцияУПД, Ошибки)
	
	Если Не (ФункцияУПД = СЧФДОП() ИЛИ ФункцияУПД = ДОП()) Тогда
		Возврат;
	КонецЕсли;
	
	СодержаниеОперацииСтрокаДерева = Неопределено;
	СодержаниеОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СодержаниеОперации",, СодержаниеОперацииСтрокаДерева);
	Если Не ЗначениеЗаполнено(СодержаниеОперации) Тогда
		ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(
			Ошибки, СодержаниеОперацииСтрокаДерева, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ВозможныеЗначенияПризнакаТовараУПД()

	Результат = Новый Массив;
	Результат.Добавить("1");
	Результат.Добавить("2");
	Результат.Добавить("3");
	Результат.Добавить("4");
	Результат.Добавить("5");
	
	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции

Процедура ПроверитьДанныеЕдиницыИзмеренияФНС(ЕдиницаИзмеренияКод, ЕдиницаИзмеренияКодСтрокаДерева, Ошибки,
	НомерСтроки, КодЕдиницыИзмеренияНулевой)
	
	// ОКЕИ_Тов - код единицы измерения не менее 3 символов.
	Если СтрДлина(СокрЛП(ЕдиницаИзмеренияКод)) < 3 Тогда
		ШаблонОшибки = НСтр("ru = 'значение должно содержать от 3 до 4 символов, указано %1'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, СокрЛП(ЕдиницаИзмеренияКод));
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ЕдиницаИзмеренияКодСтрокаДерева,
			ТекстОшибки,, НомерСтроки);
	// ОКЕИ_Тов - код единицы измерения должен содержать только цифры.
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(ЕдиницаИзмеренияКод)) Тогда
		ШаблонОшибки = НСтр("ru = 'значение должно содержать только цифры, указано %1'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, СокрЛП(ЕдиницаИзмеренияКод));
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ЕдиницаИзмеренияКодСтрокаДерева,
			ТекстОшибки,, НомерСтроки);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаименованиеЕдиницыИзмеренияФНС(ДанныеТовара, Ошибки, НомерСтроки, 
	КодЕдиницыИзмеренияНулевой, ИмяЕдиницыИзмерения = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование")
	
	Если КодЕдиницыИзмеренияНулевой Тогда
		ЕдиницаИзмеренияНаименованиеСтрокаДерева = Неопределено;
		ЕдиницаИзмеренияНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДанныеТовара,
			ИмяЕдиницыИзмерения,, ЕдиницаИзмеренияНаименованиеСтрокаДерева);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияНаименование) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки,
				ЕдиницаИзмеренияНаименованиеСтрокаДерева, ТекстОшибки,, НомерСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСтавкуНДС_УПДУКД(Товар, Ошибки, НомерСтроки, ИмяСтавкиНДС)
	
	// НалСт - ставка НДС должна содержать значение из определенного перечня.
	СтавкаНДССтрокаДерева = Неопределено;
	ЗначениеСтавкиНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
		"СведенияОТоварах.НомерСтроки." + ИмяСтавкиНДС,, СтавкаНДССтрокаДерева);
	Если ЗначениеЗаполнено(ЗначениеСтавкиНДС) Тогда
		СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , ЗначениеСтавкиНДС);
		СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
		
		Если Не ЗначениеЗаполнено(СтавкаXDTO) Тогда
			ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтавкаНДССтрокаДерева, ТекстОшибки,,
				НомерСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СтавкаНДСXDTO(ЗначениеСтавки)
	
	СтавкиФНС = Новый Соответствие;
	СтавкиФНС.Вставить("0", "0%");
	СтавкиФНС.Вставить("10", "10%");
	СтавкиФНС.Вставить("18", "18%");
	СтавкиФНС.Вставить("10/110", "10/110");
	СтавкиФНС.Вставить("18/118", "18/118");
	СтавкиФНС.Вставить("20", "20%");
	СтавкиФНС.Вставить("20/120", "20/120");
	СтавкиФНС.Вставить(ВРег("без НДС"), "без НДС");
	СтавкиФНС.Вставить(ВРег("НДС исчисляется налоговым агентом"), "НДС исчисляется налоговым агентом");
	
	СтавкаXDTO = СтавкиФНС.Получить(ВРег(ЗначениеСтавки));
	
	Возврат СтавкаXDTO;
	
КонецФункции


Функция СтавкаНДСXDTOАктаОРасхождениях(ЗначениеСтавки)
	
	СтавкиФНС = Новый Соответствие;
	СтавкиФНС.Вставить("0", "0%");
	СтавкиФНС.Вставить("10", "10%");
	СтавкиФНС.Вставить("18", "18%");
	СтавкиФНС.Вставить("10/110", "10/110%");
	СтавкиФНС.Вставить("18/118", "18/118%");
	СтавкиФНС.Вставить("20", "20%");
	СтавкиФНС.Вставить("20/120", "20/120");
	СтавкиФНС.Вставить(ВРег("без НДС"), "без НДС");
	СтавкиФНС.Вставить(ВРег("НДС исчисляется налоговым агентом"), "НДС исчисляется налоговым агентом");
	
	СтавкаXDTO = СтавкиФНС.Получить(ВРег(ЗначениеСтавки));
	
	Возврат СтавкаXDTO;
	
КонецФункции

Функция НовыеПараметрыПроверкиСтоимостиТовараУКД_2020() 
	
	Результат = Новый Структура;
	Результат.Вставить("ФункцияУКД", "");
	Результат.Вставить("ДеревоДанных", Неопределено);
	Результат.Вставить("Товар", Неопределено);
	Результат.Вставить("НомерСтроки", 0);
	Результат.Вставить("СтавкаИсчисляетсяНалоговымАгентом", );
	Результат.Вставить("СтавкаБезНДС", );
	Результат.Вставить("СтавкаНДС0", );
	Результат.Вставить("ЭтоВозврат", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьСтоимостьУвеличенияУменьшенияТовараУКД_2020(ПараметрыПроверки, СтоимостьСНалогом, Ошибки)
	
	Если СтоимостьСНалогом Тогда
		ИмяСтоимостьУвеличение = "СтоимостьТоваровСНалогомУвеличение";
		ИмяСтоимостьУменьшение = "СтоимостьТоваровСНалогомУменьшение";
	Иначе
		ИмяСтоимостьУвеличение = "СтоимостьТоваровБезНалогаУвеличение";
		ИмяСтоимостьУменьшение = "СтоимостьТоваровБезНалогаУменьшение";
	КонецЕсли;
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьУвеличение);
	СтоимостьУвеличение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьУменьшение);
	СтоимостьУменьшение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
	
	Если СтоимостьУвеличение = 0 И СтоимостьУменьшение = 0 Тогда
		Если Не ПараметрыПроверки.ФункцияУКД = ДИС() Тогда
			Если СтоимостьСНалогом Тогда
				Если Не ПараметрыПроверки.СтавкаИсчисляетсяНалоговымАгентом Тогда
					ШаблонОшибки = 
						НСтр("ru = 'при функции УКД ""%1"" и стоимость товара (увеличение) и стоимость товара (уменьшение) в графе 9 не могут быть равными 0'");
					
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ПараметрыПроверки.ФункцияУКД);
					ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
				КонецЕсли;
			Иначе
				ШаблонОшибки = 
					НСтр("ru = 'при функции УКД ""%1"" и стоимость товара (увеличение) и стоимость товара (уменьшение) в графе 5 не могут быть равными 0'");
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ПараметрыПроверки.ФункцияУКД);
				ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтоимостьТовараПослеИзмененияУКД_2020(ПараметрыПроверки, СтоимостьСНалогом, Ошибки)
	
	Если СтоимостьСНалогом Тогда
		ИмяСтоимостьТовара = "СтоимостьТоваровСНалогом";
		ИмяСтоимостьТовараДо = "СтоимостьТоваровСНалогомДоКорректировки";
	Иначе
		ИмяСтоимостьТовара = "СтоимостьТоваровБезНалога";
		ИмяСтоимостьТовараДо = "СтоимостьТоваровБезНалогаДоКорректировки";
	КонецЕсли;
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьТовара);
	СтоимостьТовара = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьТовараДо);
	СтоимостьТовараДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
	
	Количество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, "СведенияОТоварах.НомерСтроки.Количество");
	Если Не Количество = 0 И СтоимостьТовара = 0 Тогда
		Если ПараметрыПроверки.ФункцияУКД = ДИС() Тогда
			Если СтоимостьТовараДо > 0 Тогда
				ШаблонОшибки = 
					НСтр("ru = 'при функции УКД ""%1"" и наличии стоимости товара до корректировки, стоимость товара не может быть равной 0'");
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ПараметрыПроверки.ФункцияУКД);
				ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
			КонецЕсли;
		Иначе
			Если Не ПараметрыПроверки.ЭтоВозврат Тогда
				Если СтоимостьСНалогом Тогда
					Если Не ПараметрыПроверки.СтавкаИсчисляетсяНалоговымАгентом Тогда
						ШаблонОшибки = 
							НСтр("ru = 'при функции УКД ""%1"" и ставке НДС отличной от ""НДС исчисляется налоговым агентом"" не может быть равным 0'");
						
						ТекстОшибки = СтрШаблон(ШаблонОшибки, ПараметрыПроверки.ФункцияУКД);
						ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
					КонецЕсли;
				Иначе
					ШаблонОшибки = 
						НСтр("ru = 'при функции УКД ""%1"" не может быть равным 0'");
					
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ПараметрыПроверки.ФункцияУКД);
					ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСуммуНалогаУКД_2020(ПараметрыПроверки, Ошибки) 
	
	Количество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, "СведенияОТоварах.НомерСтроки.Количество");
	Если Не Количество = 0
		И Не ПараметрыПроверки.СтавкаИсчисляетсяНалоговымАгентом
		И Не ПараметрыПроверки.СтавкаБезНДС
		И Не ПараметрыПроверки.СтавкаНДС0 Тогда
		
		ПолныйПуть = "СведенияОТоварах.НомерСтроки.СуммаНалога";
		СуммаНалога = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
		Если Не ЗначениеЗаполнено(СуммаНалога) И Не ПараметрыПроверки.ЭтоВозврат Тогда
			ТекстОшибки = 
				НСтр("ru = 'при ставке НДС отличной от ""НДС исчисляется налоговым агентом"" сумма налога после корректировки не может быть равной 0'");
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
		КонецЕсли;
		
		ПолныйПуть = "СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение";
		СуммаНалогаУвеличение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
		
		ПолныйПуть = "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение";
		СуммаНалогаУменьшение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПараметрыПроверки.Товар, ПолныйПуть);
		
		Если СуммаНалогаУвеличение = 0 И СуммаНалогаУменьшение = 0 Тогда
			ТекстОшибки = 
				НСтр("ru = 'при ставке НДС отличной от ""НДС исчисляется налоговым агентом"" и сумма налога (увеличение) и сумма налога (уменьшение) не могут быть равными 0'");
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, ПараметрыПроверки.Товар, ТекстОшибки,, ПараметрыПроверки.НомерСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИдентификаторГосКонтракта(ДеревоДанных, Ошибки)
	НайденнаяСтрокаРеквизита = Неопределено;
	
	ИдентификаторГосКонтракта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",, НайденнаяСтрокаРеквизита);
	Если ЗначениеЗаполнено(ИдентификаторГосКонтракта) Тогда
		ДлинаИдентификатораГосконтракта = СтрДлина(ИдентификаторГосКонтракта);
		Если ДлинаИдентификатораГосконтракта < 20
			Или ДлинаИдентификатораГосконтракта > 25 Тогда
			
			ШаблонОшибки = НСтр("ru = 'указанный идентификатор государственного контракта (%1) должен быть от 20 до 25 символов, текущая длина %2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ИдентификаторГосКонтракта, ДлинаИдентификатораГосконтракта);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, НайденнаяСтрокаРеквизита, ТекстОшибки);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСведенияОДокументахОснованияхУКД(ДеревоДанных, Ошибки) 
	
	ПроверяемыеТипыДокументов = Новый Структура;
	ПроверяемыеТипыДокументов.Вставить("ПередаточныйДокумент", НСтр("ru = 'передаточного документа'"));
	ПроверяемыеТипыДокументов.Вставить("ОснованиеКорректировки", НСтр("ru = 'документа основания'"));
	
	Для Каждого Элемент Из ПроверяемыеТипыДокументов Цикл
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, Элемент.Ключ);
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокаТаблицы = ДеревоДанных.Строки.Найти(Элемент.Ключ, "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Строка Из СтрокаТаблицы.Строки Цикл
					ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументНаименование", Элемент.Ключ);
					ДокументНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть);
					
					ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументДата", Элемент.Ключ);
					ДокументДата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть);
					
					Если ЗначениеЗаполнено(ДокументНаименование) И Не ЗначениеЗаполнено(ДокументДата) Тогда
						
						СтрокаЭлемента = Строка.Строки.Найти(ПолныйПуть, "ПолныйПуть");
						ТекстОшибки = НСтр("ru = 'при заполненном наименовании %1, должна быть заполнена и его дата'");
						ТекстОшибки = СтрШаблон(ТекстОшибки, Элемент.Значение);
						ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаЭлемента, ТекстОшибки);
							
					КонецЕсли;
					
					ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументНомер", Элемент.Ключ);
					ДокументНомер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть);
					
					Если ЗначениеЗаполнено(ДокументНаименование) И Не ЗначениеЗаполнено(ДокументНомер) Тогда
						
						СтрокаЭлемента = Строка.Строки.Найти(ПолныйПуть, "ПолныйПуть");
						ТекстОшибки = НСтр("ru = 'при заполненном наименовании %1, должен быть заполнен и его номер'");
						ТекстОшибки = СтрШаблон(ТекстОшибки, Элемент.Значение);
						ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаЭлемента, ТекстОшибки);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоказателиНеКорректировалисьУКД2020(Товар)
	Результат = Истина
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,     "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки")
			= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Количество")
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,     "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки")
			= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения")
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,     "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки")
			= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога")
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,     "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки")
			= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога")
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,     "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки")
			= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом")
		И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,     "СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки")
			= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
	
	Возврат Результат;
КонецФункции

Процедура ПроверитьНаименованиеЕдиницыИзмеренияУКД(Товар, Код, ДоКорректировки, НомерСтроки, Ошибки) 
	
	Если ДоКорректировки Тогда
		ПолныйПуть = "СведенияОТоварах.НомерСтроки.НаименованиеЕдиницыИзмеренияДоКорректировки";
		ТекстОшибки = НСтр("ru = 'при заполненном коде единицы измерения товара до корректировки, должно быть заполнено и ее наименование'");		
	Иначе
		ПолныйПуть = "СведенияОТоварах.НомерСтроки.НаименованиеЕдиницыИзмеренияПослеКорректировки";
		ТекстОшибки = НСтр("ru = 'при заполненном коде единицы измерения товара после корректировки, должно быть заполнено и ее наименование'");
	КонецЕсли;
	
	Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, ПолныйПуть);
	
	Если ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, Товар, ТекстОшибки,, НомерСтроки);			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗависимыеСведенияОТоваре(ПроверяемыеСведения, Товар, Ошибки, НомерСтроки) 
	ВсегоСведений = ПроверяемыеСведения.Количество() - 1;
	Для ОсновнойИндекс = 0 По ВсегоСведений Цикл
		ОбязательноеСведение = ПроверяемыеСведения[ОсновнойИндекс];
		Если ЗначениеЗаполнено(ОбязательноеСведение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеЗависимыхСведений = "";
		
		Отказ = Истина;
		Для ВложенныйИндекс = 0 По ВсегоСведений Цикл
			Если ОсновнойИндекс = ВложенныйИндекс Тогда
				Продолжить;
			Иначе
				ЗависимоеСведение = ПроверяемыеСведения[ВложенныйИндекс];
				Если ЗначениеЗаполнено(ЗависимоеСведение.Значение) Тогда
					Отказ = Ложь;
					
					Прервать;
				КонецЕсли;
				
				ШаблонПредставления = НСтр("ru = '%1, %2'");
				ПредставлениеЗависимыхСведений = СтрШаблон(ШаблонПредставления, ПредставлениеЗависимыхСведений, ЗависимоеСведение.Сведение);
				
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			ПредставлениеЗависимыхСведений = Сред(ПредставлениеЗависимыхСведений, 3);
			ШаблонОшибки = НСтр("ru = 'при не заполненном сведении товара %1, должно быть заполнено хотя бы одно из следующих сведений %2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбязательноеСведение.Сведение, ПредставлениеЗависимыхСведений);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, Товар, ТекстОшибки,, НомерСтроки);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДополнительныеСведенияОТовареДляПроверкиУКД(Товар) 
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сведение");
	Результат.Колонки.Добавить("Значение");
	
	ДобавитьСтрокуПроверяемыхСведений(Результат, "Наименование",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование"));
	ДобавитьСтрокуПроверяемыхСведений(Результат, "Характеристика",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ХарактеристикаОписаниеТовара"));
	ДобавитьСтрокуПроверяемыхСведений(Результат, "Код",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КодТовара"));
	ДобавитьСтрокуПроверяемыхСведений(Результат, "Артикул",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.АртикулТовара"));
		
	Возврат Результат;
КонецФункции

Процедура ДобавитьСтрокуПроверяемыхСведений(ПроверяемыеСведения, Сведение, Значение) 

	НоваяСтрока = ПроверяемыеСведения.Добавить();
	НоваяСтрока.Сведение = Сведение;
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

Процедура ПроверитьНаличиеУвеличенияУменьшенияВУКД(ДеревоДанных, Ошибки, НомерСтроки, ИмяРеквизитаУвеличение, 
													ИмяРеквизитаУменьшение, ПредставлениеРеквизита)
	
	РеквизитыУвеличения = СтрРазделить(ИмяРеквизитаУвеличение, ",");
	УвеличениеСтрокаДерева = Неопределено;
	ЕстьУвеличение = Ложь;
	
	Для каждого ИмяРеквизита Из РеквизитыУвеличения Цикл
		Увеличение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ИмяРеквизита,, УвеличениеСтрокаДерева);
		Если ЗначениеЗаполнено(Увеличение) Тогда
			ЕстьУвеличение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыУменьшения = СтрРазделить(ИмяРеквизитаУменьшение, ",");

	ЕстьУменьшение = Ложь;
	Для каждого ИмяРеквизита Из РеквизитыУменьшения Цикл
		Уменьшение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ИмяРеквизита,, УвеличениеСтрокаДерева);
		Если ЗначениеЗаполнено(Уменьшение) Тогда
			ЕстьУменьшение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Строка должна содержать корректировку (либо в "+", либо в "-").
	Если Не (ЕстьУвеличение ИЛИ ЕстьУменьшение) Тогда
		ТекстОшибки = НСтр("ru = 'чтобы сформировать документ, необходимо скорректировать значение относительно документа-основания'");
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(Ошибки, УвеличениеСтрокаДерева, ТекстОшибки,,
			НомерСтроки, ПредставлениеРеквизита);
	КонецЕсли;

КонецПроцедуры

Функция СведенияОМаркировкеЗаполненыУКД2020(Товар, ДоКорректировки) 
	Результат = Ложь;
	Если ДоКорректировки Тогда
		СведенияОМаркировке = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо");
		
	Иначе
		СведенияОМаркировке = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле");
		
	КонецЕсли;
	
	Результат = СведенияОМаркировке.ТранспортныеУпаковки.Количество()
		Или СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.Количество()
		Или СведенияОМаркировке.ИндивидуальныеУпаковки.Количество();
	
	Возврат Результат;
КонецФункции

Функция СведенияОМаркировкеТовараДляПроверкиУКД2020(Товар, ДоКорректировки) 
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сведение");
	Результат.Колонки.Добавить("Значение");
	
	Если ДоКорректировки Тогда
		СведенияОМаркировке = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо");
		
	Иначе
		СведенияОМаркировке = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле");
		
	КонецЕсли;
	
	ДобавитьСтрокуПроверяемыхСведений(Результат, "ТранспортныеУпаковки", СведенияОМаркировке.ТранспортныеУпаковки.Количество());
	ДобавитьСтрокуПроверяемыхСведений(Результат, "КонтрольныеИдентификационныеЗнаки", СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.Количество());
	ДобавитьСтрокуПроверяемыхСведений(Результат, "ИндивидуальныеУпаковки", СведенияОМаркировке.ИндивидуальныеУпаковки.Количество());
	
	Возврат Результат;
КонецФункции

Функция ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(НалоговаяСтавка) 
	
	ПредставлениеСтавки = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(, НалоговаяСтавка);
	
	Возврат ПредставлениеСтавки = "НДС исчисляется налоговым агентом";
	
КонецФункции

Функция ЭтоСтавкаБезНДС(НалоговаяСтавка) 
	
	ПредставлениеСтавки = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(, НалоговаяСтавка);
	
	Возврат ПредставлениеСтавки = "без НДС";
	
КонецФункции

Функция ЭтоСтавкаНДС0(НалоговаяСтавка) 
	
	ПредставлениеСтавки = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(, НалоговаяСтавка);
	
	Возврат ПредставлениеСтавки = "0";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Заполнение

Функция ЗаполнитьДокумент(Знач Формат, Знач Данные)
	
	Документ = Неопределено;
	
	Форматы = ПоддерживаемыеФорматы();
	
	Если Формат = Форматы.УПД2019.ИнформацияПродавца Тогда
		
		Документ = ЗаполнитьДокумент_УПД2019_ИнформацияПродавца(Данные);
		
	ИначеЕсли Формат = Форматы.УПД2019.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_УПД2019_ИнформацияПокупателя(Данные);
	
	ИначеЕсли Формат = Форматы.УПД.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_УПД_ИнформацияПокупателя(Данные);
			
	ИначеЕсли Формат = Форматы.УКД.ИнформацияПродавца Тогда
		
		Документ = ЗаполнитьДокумент_УКД_ИнформацияПродавца(Данные);
				
	ИначеЕсли Формат = Форматы.УКД.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_УКД_ИнформацияПокупателя(Данные);
	
	ИначеЕсли Формат = Форматы.УКД2020.ИнформацияПродавца Тогда
		
		Документ = ЗаполнитьДокумент_УКД2020_ИнформацияПродавца(Данные);
				
	ИначеЕсли Формат = Форматы.УКД2020.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_УКД2020_ИнформацияПокупателя(Данные);
			
	ИначеЕсли Формат = Форматы.ПередачаТоваров.ИнформацияПродавца Тогда
		
		Документ = ЗаполнитьДокумент_ПередачаТоваров_ИнформацияПродавца(Данные);
		
	ИначеЕсли Формат = Форматы.ПередачаТоваров.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_ПередачаТоваров_ИнформацияПокупателя(Данные);
		
	ИначеЕсли Формат = Форматы.ПередачаРабот.ИнформацияПродавца Тогда
		
		Документ = ЗаполнитьДокумент_ПередачаУслуг_ИнформацияПродавца(Данные);
		
	ИначеЕсли Формат = Форматы.ПередачаРабот.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_ПередачаУслуг_ИнформацияПокупателя(Данные);
		
	ИначеЕсли Формат = Форматы.АктОРасхождениях.ИнформацияПокупателя Тогда
		
		Документ = ЗаполнитьДокумент_АктОРасхождениях_ИнформацияПокупателя(Данные);
		
	ИначеЕсли Формат = Форматы.ПриемкаСдачаРабот.ИнформацияПокупателя Тогда
	
		Документ = ЗаполнитьДокумент_ПриемкаСдачаРабот_ИнформацияПокупателя(Данные);
		
	ИначеЕсли Формат = Форматы.ИзвещениеОПолучении Тогда
		
		Документ = ЗаполнитьДокумент_ИзвещениеОПолучении(Данные);
			
	ИначеЕсли Формат = Форматы.ПредложениеОбАннулировании Тогда
		
		Документ = ЗаполнитьДокумент_ПредложениеОбАннулировании(Данные);
		
	ИначеЕсли Формат = Форматы.УведомлениеОбУточнении Тогда
		
		Документ = ЗаполнитьДокумент_УведомлениеОбУточнении(Данные);	
			
	ИначеЕсли Формат = Форматы.БизнесСеть.КоммерческиеПредложения Тогда
		
		Документ = ЗаполнитьОбъектФормата_КоммерческиеПредложения(Данные);
		
	ИначеЕсли Формат = Форматы.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда	
		
		Документ = ЗаполнитьДокумент_АктСверкиВзаиморасчетов_ИнформацияОтправителя(Данные);	
		
	ИначеЕсли Формат = Форматы.АктСверкиВзаиморасчетов.ИнформацияПолучателя Тогда	
		
		Документ = ЗаполнитьДокумент_АктСверкиВзаиморасчетов_ИнформацияПолучателя(Данные);	
		
	ИначеЕсли Формат = Форматы.СчетНаОплату101 Тогда	
		
		Документ = ЗаполнитьДокумент_СчетНаОплату101(Данные);	
		
	Иначе
		Обработка = ФорматыЭДО.ОбработкаФормата(Формат);
		Если Обработка <> Неопределено Тогда
			Документ = Обработка.СформироватьДокумент(Данные);
		Иначе
			Шаблон = НСтр("ru = 'Формат ""%1"" не поддерживается.'");
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат);
			ВызватьИсключение СтрокаСообщенияИсключения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция ЕстьОшибкиЗаполненияДокумента(Знач Документ)
	
	Возврат ЗначениеЗаполнено(Документ.Ошибки);
	
КонецФункции

Функция РезультатФормированияСОшибкойЗаполненияДокумента(Знач Документ)
	
	Результат = ФорматыЭДО.НовыйРезультатФормированияДокумента();
	Результат.Ошибки = Документ.Ошибки;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатУспешногоФормированияДокумента(Знач Документ)
	
	Результат = ФорматыЭДО.НовыйРезультатФормированияДокумента();
	Результат.Документ = Документ.ДанныеОсновногоФайла;
	Результат.ДополнительныйДокумент = Документ.ДанныеДополнительногоФайла;
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеФорматов

Функция ЗаполнитьДокумент_УПД2019_ИнформацияПродавца(Знач Данные)
	
	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УПД2019_ИнформацияПродавца(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_УПД2019_ИнформацияПродавца();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДанныеЭлектронногоАктированияЕИС") = Истина Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
			МодульЭлектронноеАктированиеЕИС.ПередФормированиемЭлектронногоДокумента(
				ДеревоДанных, ПространствоИмен);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомиссионере")) Тогда
		СвКомиссионера = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУПД_2019(СвКомиссионера, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОКомиссионере");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомиссионера);
		
		СтрXML = ЗаписьXML.Закрыть();
		НачПоз = СтрНайти(СтрXML, "<ИдСв>");
		КолСимв = СтрНайти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
		СтрXML = Сред(СтрXML, НачПоз, КолСимв);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ДанныеКомиссионера";
		НоваяСтрока.Значение = СтрXML;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомитенте")) Тогда
		СвКомитента = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУПД_2019(СвКомитента, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОКомитенте");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомитента);
		
		СтрXML = ЗаписьXML.Закрыть();
		НачПоз = СтрНайти(СтрXML, "<ИдСв>");
		КолСимв = СтрНайти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
		СтрXML = Сред(СтрXML, НачПоз, КолСимв);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ДанныеКомитента";
		НоваяСтрока.Значение = СтрXML;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если СведенияОбОператореЗаполнены(Участники.Оператор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		НаимОрг = Участники.Оператор.Наименование;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = Участники.Оператор.ИНН;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = Участники.Оператор.Идентификатор;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1115131", Истина, Ошибки);
	ФункцияУПД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Функция", ФункцияУПД, Истина, Ошибки);
	
	ПоФактХЖ = "";
	Если ФункцияУПД = СвРК() Тогда
		ПоФактХЖ = "Документ, включающий в себя сведения о факте реализации комиссионером (агентом, действующим от собственного имени), товаров комитента (принципала)";
	ИначеЕсли ФункцияУПД = СвЗК() Тогда
		ПоФактХЖ = "Документ, включающий в себя сведения о факте закупки комиссионером (агентом, действующим от собственного имени) товара для комитента (принципала)";
	ИначеЕсли ФункцияУПД = СЧФДОП() ИЛИ ФункцияУПД = ДОП() Тогда
		ПоФактХЖ = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", ПоФактХЖ,, Ошибки);
	
	НаимДокОпр = "";
	Если ФункцияУПД = СЧФДОП() Тогда
		НаимДокОпр = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
	ИначеЕсли ФункцияУПД = ДОП() Тогда
		НаимДокОпр = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)";
	ИначеЕсли ФункцияУПД = СвРК() Тогда
		НаимДокОпр = "Документ, включающий в себя сведения о факте реализации комиссионером (агентом, действующим от собственного имени), товаров комитента (принципала)";
	ИначеЕсли ФункцияУПД = СвЗК() Тогда
		НаимДокОпр = "Документ, включающий в себя сведения о факте закупки комиссионером (агентом, действующим от собственного имени) товара для комитента (принципала)";
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", НаимДокОпр,, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОснДоверОргСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , Ошибки);
	
	// Сведения о счете-фактуре.
	ДанныеСчетаФактуры = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИмен);
	
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДатаДок = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "НомерСчФ", НомерДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДатаСчФ", ДатаДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "КодОКВ", КодВалюты, Истина, Ошибки);
	
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИмен);
	Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
		ДатаДок = ДатаФНС(ДатаДок);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДок, Истина, Ошибки);
	Иначе
		Если НЕ ЭтоЭлектронноеАктированиеЕИС Тогда
			// Для ЕИС нужно чтобы этот ИспрСчФ присутствовал только при наличии данных,
			// иначе не выполняется подпись в личном кабинете.
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДефНомИспрСчФ", "-", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДефДатаИспрСчФ", "-", Истина, Ошибки);
		КонецЕсли;
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры,"ИспрСчФ", ИспрСчФ, , Ошибки);
	
	ТаблицаПродавцов = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	Для каждого СтрокаПродавца Из ТаблицаПродавцов.Строки Цикл
		
		СвПрод = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУПД_2019(СвПрод, СтрокаПродавца, Ошибки, ПространствоИмен, "СведенияОПродавце.НомерСтроки");
		ДанныеСчетаФактуры.СвПрод.Добавить(СвПрод);
		
	КонецЦикла;
	
	ТаблицаГрузоотправителей = ДеревоДанных.Строки.Найти("СведенияОГрузоотправителе", "ПолныйПуть");
	Если ЗначениеЗаполнено(ТаблицаГрузоотправителей.Значение) Тогда
		Для каждого СтрокаГрузоотправителя Из ТаблицаГрузоотправителей.Строки Цикл
			
			ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИмен);
			ОнЖе = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.ОнЖе");
			Если ОнЖе = Истина Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", "он же", , Ошибки);
			Иначе
				ГрузОтпр = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
				ЗаполнитьСведенияОбУчастникеУПД_2019(
					ГрузОтпр, СтрокаГрузоотправителя, Ошибки, ПространствоИмен, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", ГрузОтпр, Истина, Ошибки);
			КонецЕсли;
			ДанныеСчетаФактуры.ГрузОт.Добавить(ГрузОт);
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаГрузополучателей = ДеревоДанных.Строки.Найти("СведенияОГрузополучателе", "ПолныйПуть");
	Если ЗначениеЗаполнено(ТаблицаГрузополучателей.Значение) Тогда
		Для каждого СтрокаГрузополучателя Из ТаблицаГрузополучателей.Строки Цикл
			
			ГрузПолуч = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
			ЗаполнитьСведенияОбУчастникеУПД_2019(ГрузПолуч, СтрокаГрузополучателя, Ошибки, ПространствоИмен, "СведенияОГрузополучателе.НомерСтроки");
			ДанныеСчетаФактуры.ГрузПолуч.Добавить(ГрузПолуч);
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПокупателей = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Для каждого СтрокаПокупателя Из ТаблицаПокупателей.Строки Цикл
		
		СвПокуп = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУПД_2019(СвПокуп, СтрокаПокупателя, Ошибки, ПространствоИмен, "СведенияОПокупателе.НомерСтроки");
		ДанныеСчетаФактуры.СвПокуп.Добавить(СвПокуп);
		
	КонецЦикла;
	
	СтрокаТаблицы = ДеревоДанных.Строки.Найти("ПлатежноРасчетныеДокументы", "ПолныйПуть");
	Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
		Для Каждого ПРД Из СтрокаТаблицы.Строки Цикл
			СвПРД = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.СвПРД", ПространствоИмен);
			ОбщийПуть = "ПлатежноРасчетныеДокументы.НомерСтроки.";
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПРД, ОбщийПуть + "НомерПРД");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПРД, "НомерПРД", Реквизит, Истина, Ошибки);
			Реквизит = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПРД, ОбщийПуть + "ДатаПРД"));
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПРД, "ДатаПРД", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ПРД, ОбщийПуть + "Сумма");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПРД, "СуммаПРД", Реквизит, Ложь, Ошибки);
			ДанныеСчетаФактуры.СвПРД.Добавить(СвПРД);
		КонецЦикла;
	КонецЕсли;
	
	ДопСвФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ДопСвФХЖ1", ПространствоИмен);
	ЗаполнитьНаименованиеВалютыXML(ДопСвФХЖ1, КодВалюты, Ошибки);
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках")) Тогда
		ОбщийПуть = "ДополнительныеСведенияОбУчастниках.";
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "ИдентификаторГосКонтракта");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ИдГосКон", Реквизит, Ложь, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "ВалютаКурс");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "КурсВал", Реквизит, Ложь, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "ОбстоятельстваФормированияСФ");
		Если ЗначениеЗаполнено(Реквизит)
			 И (Документ.Функция = "СЧФ" И СтрНайти("1,2,3", Реквизит)
				ИЛИ (Документ.Функция = "ДОП" ИЛИ Документ.Функция = "СЧФДОП")
					И СтрНайти("4,5,6,7,8", Реквизит)) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ОбстФормСЧФ", Реквизит, Ложь, Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "ЗакупкаДляГосударственныхНужд");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			// Информация о закупке для государственных и муниципальных нужд.
			ИнфПродГосЗакКазн = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн", ПространствоИмен);
			ОбщийПуть = ОбщийПуть + "ЗакупкаДляГосударственныхНужд.";
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "ДатаГосКонтракта");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "ДатаГосКонт", ДатаФНС(Реквизит), Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "НомерГосКонтракта");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "НомерГосКонт", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "НомерЛицевогоСчетаПродавца");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "ЛицСчетПрод", Реквизит, Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "КодБюджетнойКлассификацииПродавца");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "КодПродБюджКласс", Реквизит, Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "КодЦели");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "КодЦелиПрод", Реквизит, Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "КазначействоПродавцаКод");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "КодКазначПрод", Реквизит, Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "КазначействоПродавцаНаименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПродГосЗакКазн, "НаимКазначПрод", Реквизит, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ИнфПродГосЗакКазн", ИнфПродГосЗакКазн, Ложь, Ошибки);
		КонецЕсли;
	КонецЕсли;
	// Основание уступки денежного требования.
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеУступкиДенежногоТребования")) Тогда
		ОснУстДенТреб = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ДопСвФХЖ1.ОснУстДенТреб", ПространствоИмен);
		ОбщийПуть = "ОснованиеУступкиДенежногоТребования.";
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "Наименование");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснУстДенТреб, "НаимОсн", Реквизит, Ложь, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "Номер");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснУстДенТреб, "НомОсн", Реквизит, Ложь, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "Дата");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснУстДенТреб, "ДатаОсн", ДатаФНС(Реквизит), Ложь, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "ДополнительныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснУстДенТреб, "ДопСвОсн", Реквизит, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ОснУстДенТреб", ОснУстДенТреб, Ложь, Ошибки);
	КонецЕсли;
	// Фактор.
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОФакторе")) Тогда
		СвФактор = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУПД_2019(СвФактор, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОФакторе");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "СвФактор", СвФактор, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДопСвФХЖ1", ДопСвФХЖ1, , Ошибки);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры")) Тогда
		ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПолФХЖ1", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ1, "ИдФайлИнфПол",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры.ИдентификаторФайла"), , Ошибки);
			
		СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
				
				ИнфПолФХЖ1.ТекстИнф.Добавить(ТекстИнфТип);
			КонецЦикла;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ИнфПолФХЖ1", ИнфПолФХЖ1, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	ДокументыПодтвержденияОтгрузки = ДеревоДанных.Строки.Найти("ДокументыПодтвержденияОтгрузки", "ПолныйПуть");
	Если ТипЗнч(ДокументыПодтвержденияОтгрузки.Значение) = Тип("Число") И ДокументыПодтвержденияОтгрузки.Значение > 0 Тогда
		Для Каждого СтрокаДокумента Из ДокументыПодтвержденияОтгрузки.Строки Цикл
			ДокПодтвОтгр = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ДокПодтвОтгр", ПространствоИмен);
			ОбщийПуть = "ДокументыПодтвержденияОтгрузки.НомерСтроки.";
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДокумента, ОбщийПуть + "Наименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокПодтвОтгр, "НаимДокОтгр", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДокумента, ОбщийПуть + "Номер");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокПодтвОтгр, "НомДокОтгр", Реквизит, Истина, Ошибки);
			Реквизит = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДокумента, ОбщийПуть + "Дата"));
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокПодтвОтгр, "ДатаДокОтгр", Реквизит, Ложь, Ошибки);
			ДанныеСчетаФактуры.ДокПодтвОтгр.Добавить(ДокПодтвОтгр);
		КонецЦикла;
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", ДанныеСчетаФактуры, Истина, Ошибки);
	
	// Сведения таблицы счета-фактуры.
	ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИмен);
	ВсеСтрокиБезНДС = Истина;
	ВсеСтрокиСДефисом = Новый Структура("СтоимостьТоваровСНалогом,СуммаНалога", Истина, Истина);
	
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов", ПространствоИмен);
		
		// Обязательные реквизиты:
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, Ошибки);
		
		РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
		СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСт", СтавкаXDTO, Истина, Ошибки);
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		Если Реквизит = Неопределено Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДефСтТовУчНал", "-", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовУчНал", Реквизит, Истина, Ошибки);
			ВсеСтрокиСДефисом.СтоимостьТоваровСНалогом = Ложь;
		КонецЕсли;
		
		СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
		Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", "без акциза", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Реквизит, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "Акциз", СумАкцизТип, Истина, Ошибки);
		
		СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		Если Реквизит = Неопределено Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "ДефНДС", "-", Истина, Ошибки);
		ИначеЕсли НЕ ЗначениеЗаполнено(Реквизит) И ВРег(СтавкаНДС) = ВРег("без НДС") Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
			ВсеСтрокиСДефисом.СуммаНалога = Ложь;
		Иначе
			ВсеСтрокиБезНДС = Ложь;
			ВсеСтрокиСДефисом.СуммаНалога = Ложь;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНал", Реквизит, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНал", СумНДСТип, Истина, Ошибки);
		
		ЕдиницаИзмеренияНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование");
		
		// Необязательные реквизиты:
		ЕдиницаИзмеренияКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияНаименование) Тогда
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
				ОКЕИ_Тов = ЕдиницаИзмеренияКод;
			Иначе 
				ОКЕИ_Тов = "0000";
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_Тов", СокрЛП(ОКЕИ_Тов), Ложь, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДефОКЕИ_Тов", "-", Ложь, Ошибки);
		КонецЕсли;
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Количество",,, Истина);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТов", Реквизит, Истина, Ошибки);
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТов", Реквизит, , Ошибки);
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовБезНДС", Реквизит, , Ошибки);
		
		СведенияОПрослеживаемости = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
		
		КодСтраны = "";
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокиТД = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
				СвТД = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.СвТД", ПространствоИмен);
				КодСтраны = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТД, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				НомерТД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТД, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				Если ЗначениеЗаполнено(КодСтраны) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТД, "КодПроисх", КодСтраны, Истина, Ошибки);
				Иначе
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТД, "ДефКодПроисх", "-", Истина, Ошибки);
				КонецЕсли;
				
				Если СведенияОПрослеживаемости.Количество() > 0 Тогда
					НомерТД = "Прослеж";
				КонецЕсли;
				Если ЗначениеЗаполнено(НомерТД) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТД, "НомерТД", НомерТД, Истина, Ошибки);
				КонецЕсли;
				
				СведенияОТоваре.СвТД.Добавить(СвТД);
			КонецЦикла;
		КонецЕсли;
		
		ДопСведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов", ПространствоИмен);
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Признак");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ПрТовРаб", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ПризнакДополнительнаяИнформация");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ДопПризн", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварКод");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварХарактеристика");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ХарактерТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварСорт");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "СортТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварАртикул");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "АртикулТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КодКаталога");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодКат", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КодВидаТовара");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодВидТов", Реквизит, , Ошибки);
		
		СведенияОМаркировке = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировке");
		Если ЗначениеЗаполнено(СведенияОМаркировке.ИндивидуальныеУпаковки) Тогда
			НомСредИдентТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов.НомСредИдентТов", ПространствоИмен);
			Для каждого СтрокаКода Из СведенияОМаркировке.ИндивидуальныеУпаковки Цикл
				НомСредИдентТов.НомУпак.Добавить(СтрокаКода.Код);
			КонецЦикла;
			ДопСведТов.НомСредИдентТов.Добавить(НомСредИдентТов);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки) Тогда
			НомСредИдентТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов.НомСредИдентТов", ПространствоИмен);
			Для каждого СтрокаКода Из СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки Цикл
				НомСредИдентТов.КИЗ.Добавить(СтрокаКода.Код);
			КонецЦикла;
			ДопСведТов.НомСредИдентТов.Добавить(НомСредИдентТов);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОМаркировке.ТранспортныеУпаковки) Тогда
			Для каждого СтрокаКода Из СведенияОМаркировке.ТранспортныеУпаковки Цикл
				НомСредИдентТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов.НомСредИдентТов", ПространствоИмен);
				НомСредИдентТов.ИдентТрансУпак = СтрокаКода.Код;
				ДопСведТов.НомСредИдентТов.Добавить(НомСредИдентТов);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаПрослеживаемости Из СведенияОПрослеживаемости Цикл
			Нпп = СведенияОПрослеживаемости.Индекс(СтрокаПрослеживаемости) + 1;
			ПрефиксСведений = СтрШаблон("ДопПрослеж%1", Нпп);
			СведПрослеж = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов.СведПрослеж", ПространствоИмен);
			СведПрослеж.НомТовПрослеж = СтрокаПрослеживаемости.НомерТовара;
			СведПрослеж.ЕдИзмПрослеж = СтрокаПрослеживаемости.ЕдиницаИзмеренияКод;
			СведПрослеж.НаимЕдИзмПрослеж = СтрокаПрослеживаемости.ЕдиницаИзмеренияНаименование;
			СведПрослеж.КолВЕдПрослеж = СтрокаПрослеживаемости.Количество;
			СведПрослеж.ДопПрослеж = ПрефиксСведений;
			ДопСведТов.СведПрослеж.Добавить(СведПрослеж);
			
			ИдентификаторДопДанных = СтрШаблон("%1_КолУчетное", ПрефиксСведений);
			ЗначениеДопДанных = СтрокаПрослеживаемости.КоличествоУчетное;
			
			ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", ЗначениеДопДанных, Истина, Ошибки);
			
			СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
				
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "НаимЕдИзм", ЕдиницаИзмеренияНаименование, , Ошибки);
		
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			ДанныеСтраныПоКлассификатору = ДанныеКлассификатораСтранМираПоКоду(КодСтраны);
			Если ДанныеСтраныПоКлассификатору <> Неопределено Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КрНаимСтрПр", ДанныеСтраныПоКлассификатору.Наименование, , Ошибки);
			ИначеЕсли КодСтраны = "980" Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КрНаимСтрПр", НСтр("ru = 'Евросоюз'"), , Ошибки);
			ИначеЕсли КодСтраны = "981" Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КрНаимСтрПр", НСтр("ru = 'ЕАЭС'"), , Ошибки);
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КоличествоНадлежитОтпустить");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "НадлОтп", Реквизит, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДопСведТов", ДопСведТов, Истина, Ошибки);
		
		СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
				
				СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
			КонецЦикла;
		КонецЕсли;
			
		// Выгружаем доп. данные.
		СтрокаДопДанных = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть");
		Если ТипЗнч(СтрокаДопДанных.Значение) = Тип("Число") И СтрокаДопДанных.Значение > 0 Тогда
			Для Каждого ТекСтрокаДопДанных Из СтрокаДопДанных.Строки Цикл
				
				ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Идентификатор");
				ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Значение");
				
				ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", ЗначениеДопДанных, Истина, Ошибки);
				
				СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
			КонецЦикла;
		КонецЕсли;
		
		ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
	КонецЦикла;
	
	ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", Реквизит, , Ошибки);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом");
	Если ВсеСтрокиСДефисом.СтоимостьТоваровСНалогом Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "ДефСтТовУчНалВсего", "-", Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", Реквизит, Истина, Ошибки);
	КонецЕсли;
	
	СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога");
	Если ВсеСтрокиСДефисом.СуммаНалога Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "ДефНДС", "-", Истина, Ошибки);
	ИначеЕсли Не ЗначениеЗаполнено(Реквизит) И ВсеСтрокиБезНДС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
	Иначе
		ЗначениеСумНДСТип = Формат(Реквизит, "ЧДЦ=2; ЧРД=.; ЧГ=; ЧН=");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНал", ЗначениеСумНДСТип, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНДСТип, Истина, Ошибки);
	
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоКоличество");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "КолНеттоВс", Реквизит, , Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоОпл", ВсегоОпл, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТабличнаяЧасть, Истина, Ошибки);
	
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция") <> СЧФ() Тогда
		
		// Сведения о факте отгрузки товаров.
		ДанныеОбОтгрузкеТоваров = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер", ПространствоИмен);
		ОтгрузкаТоваров = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "СодОпер",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ВидОпер",
			XMLСтрока(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации")), , Ошибки);
		ДатаОтгрузкиТоваров = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров"));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ДатаПер", ДатаОтгрузкиТоваров, , Ошибки);
		
		ДатаНачалаПоставки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНачалаПоставки");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ДатаНач",  ДатаФНС(ДатаНачалаПоставки), , Ошибки);
		ДатаОкончанияПоставки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОкончанияПоставки");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ДатаОкон",  ДатаФНС(ДатаОкончанияПоставки), , Ошибки);
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеОтгрузкиТоваров");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокаТаблицы = ДеревоДанных.Строки.Найти("ОснованиеОтгрузкиТоваров", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
					ОснПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ОснПер", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснПер, "НаимОсн",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНаименование"), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснПер, "НомОсн",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументНомер"), , Ошибки);
					ДокументДата = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДата"));
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснПер, "ДатаОсн", ДокументДата, , Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснПер, "ДопСвОсн",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеОтгрузкиТоваров.НомерСтроки.ДокументДопСведения"), , Ошибки);
					
					ОтгрузкаТоваров.ОснПер.Добавить(ОснПер);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОснПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ОснПер", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснПер, "НаимОсн", "Без документа-основания", Истина, Ошибки);
			ОтгрузкаТоваров.ОснПер.Добавить(ОснПер);
		КонецЕсли;
		
		ТранГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ТранГруз", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранГруз, "СвТранГруз",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке"), , Ошибки);
			
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары")) Тогда
			
			СвЛицПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер", ПространствоИмен);
			Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "РаботникОрганизацииПродавца" Тогда
				
				РабОргПрод = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод", ПространствоИмен);
				
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "Должность", Реквизит, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "ИныеСвед", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "ОснПолн", Реквизит, , Ошибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
				Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
				Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "ФИО", ФИО,  , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПер, "РабОргПрод", РабОргПрод, , Ошибки);
				
			ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "ИноеЛицо" Тогда
				
				ИнЛицо = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо", ПространствоИмен);
				Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
					ПредОргПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер", ПространствоИмен);
					
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "Должность", Реквизит, Истина, Ошибки);
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ИныеСвед", Реквизит, , Ошибки);
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "НаимОргПер", Реквизит, Истина, Ошибки);
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ОснДоверОргПер", Реквизит, , Ошибки);
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ОснПолнПредПер", Реквизит, , Ошибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
					Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
					Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
					Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ФИО", ФИО,  , Ошибки);
						
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПер", ПредОргПер, , Ошибки);
				ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ФЛ" Тогда
					ФЛПер = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер", ПространствоИмен);
					
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПер, "ИныеСвед", Реквизит, , Ошибки);
					Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПер, "ОснДоверФЛ", Реквизит, , Ошибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
					Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
					Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
					Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПер, "ФИО", ФИО,  , Ошибки);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛПер", ФЛПер, , Ошибки);
					
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПер, "ИнЛицо", ИнЛицо, , Ошибки);
				
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "СвЛицПер", СвЛицПер, , Ошибки);
			
		КонецЕсли;
			
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТранспортнаяНакладная");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокаТаблицы = ДеревоДанных.Строки.Найти("ТранспортнаяНакладная", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Накладная Из СтрокаТаблицы.Строки Цикл
					ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.ТранГруз.ТранНакл", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Накладная,
						"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер"), Истина, Ошибки);
					ДатаДок = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Накладная,
						"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата"));
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДок, Истина, Ошибки);
						
					ТранГруз.ТранНакл.Добавить(ТранНакл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПеревозчике")) Тогда
			Перевозчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
			ЗаполнитьСведенияОбУчастникеУПД_2019(Перевозчик, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОПеревозчике");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранГруз, "Перевозчик", Перевозчик, Истина, Ошибки);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "ТранГруз", ТранГруз, , Ошибки);
		
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПередачеВещи")) Тогда
			СвПерВещи = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.СвПер.СвПерВещи", ПространствоИмен);
			
			ДатаДок = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПередачеВещи.ПередачаВещиДата"));
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПерВещи, "ДатаПерВещ", ДатаДок, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПерВещи, "СвПерВещ",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПередачеВещи.ПередачаВещиСведения"), , Ошибки);
				
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтгрузкаТоваров, "СвПерВещи", СвПерВещи, , Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбОтгрузкеТоваров, "СвПер", ОтгрузкаТоваров, Истина, Ошибки);
		
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаОтгрузки")) Тогда
			ИнфПолФХЖ3 = ПолучитьОбъектТипаCML("Файл.Документ.СвПродПер.ИнфПолФХЖ3", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "ИдФайлИнфПол",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаОтгрузки.ИдентификаторФайла"), , Ошибки);
			
			СтрокиДопДанныеДокументаОтгрузки = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки", "ПолныйПуть");
			СтрокаТаблицы = СтрокиДопДанныеДокументаОтгрузки.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
					
					ИнфПолФХЖ3.ТекстИнф.Добавить(ТекстИнфТип);
				КонецЦикла;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбОтгрузкеТоваров, "ИнфПолФХЖ3", ИнфПолФХЖ3, Истина, Ошибки);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвПродПер", ДанныеОбОтгрузкеТоваров, Истина, Ошибки);
	КонецЕсли;
	
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		
		// Для ЕИС список подписантов определяется заранее.
		МодульЭлектронноеАктированиеЕИС.ЗаполнитьСведенияОПодписантах(
			ДеревоДанных, Документ, ПространствоИмен, Ошибки);
			
	Иначе
		
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "5", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки);
		
		Документ.Подписант.Добавить(Подписант);
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			ВидДокумента = "УПДПрод";
			МодульЭлектронноеАктированиеЕИС.ПриФормированииДвоичныхДанныхЭД(
				ВидДокумента, Файл, ДеревоДанных);
		КонецЕсли;
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
		// Формирование приложения для ЕИС в сфере закупок.
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			РезультатСозданияПриложения = МодульЭлектронноеАктированиеЕИС.
				СформироватьДанныеПриложенияУПДДляЕИС(ДеревоДанных, ИдентификаторФайла);
			Если НЕ РезультатСозданияПриложения.Выполнено Тогда
				ОбщегоНазначенияБЭД.ДобавитьОшибку(
					Результат.Ошибки, РезультатСозданияПриложения.ОписаниеОшибки);
			КонецЕсли;
				
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные =
				РезультатСозданияПриложения.ДвоичныеДанные;
			Результат.ДанныеДополнительногоФайла.ИмяФайла =
				РезультатСозданияПриложения.ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_УПД2019_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	ИнформацияПродавца = ОбъектXDTO_УПД2019_ИнформацияПродавца(Основание.ДвоичныеДанные);
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС()
			И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДанныеЭлектронногоАктированияЕИС") = Истина Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПространствоИмен = ПространствоИмен_УПД2019_ИнформацияПокупателя();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УПД2019_ИнформацияПокупателя(
		ДеревоДанных, ДатаФормирования, ИнформацияПродавца);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	ИнфПок = ПолучитьОбъектТипаCML("Файл.ИнфПок", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "КНД", "1115132", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ДатаИнфПок", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ВремИнфПок", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "НаимЭконСубСост",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ОснДоверОргСост",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаДоверенность"),, Ошибки);
	
	ИдИнфПрод = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИдИнфПрод", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ИдФайлИнфПр", ИнформацияПродавца.ИдФайл, Истина, Ошибки);
	ДатаДокИнфПр = ИнформацияПродавца.Документ.ДатаИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, Ошибки);
	ВремФайлИнфПр = ИнформацияПродавца.Документ.ВремИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ВремФайлИнфПр", ВремФайлИнфПр, Истина, Ошибки);
	
	Подписи = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПодписиОснования");
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи = Новый Массив;
		Подписи.Добавить("---");
	КонецЕсли;
	Для Каждого Подпись Из Подписи Цикл
		ИдИнфПрод.ЭП.Добавить(Подпись);
	КонецЦикла;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ИдИнфПрод", ИдИнфПрод, Истина, Ошибки);
	
	СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", ИнформацияПродавца.Документ.НаимДокОпр, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "Функция", ИнформацияПродавца.Документ.Функция, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомСчФИнфПр", ИнформацияПродавца.Документ.СвСчФакт.НомерСчФ,, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаСчФИнфПр", ИнформацияПродавца.Документ.СвСчФакт.ДатаСчФ, Истина, Ошибки);
	
	СвПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин", ПространствоИмен);
	
	СведенияОПринятииТоваров = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияОПринятииТоваров");
	
	Если ЗначениеЗаполнено(СведенияОПринятииТоваров.ДатаПолученияТоваров) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "ДатаПрин", ДатаФНС(СведенияОПринятииТоваров.ДатаПолученияТоваров), Ложь, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "СодОпер", СведенияОПринятииТоваров.СодержаниеОперации, Ложь, Ошибки);
	
	КодСодОпер = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.КодСодОпер", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КодСодОпер, "КодИтога", СведенияОПринятииТоваров.КодИтога, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КодСодОпер, "НаимДокРасх", СведенияОПринятииТоваров.ДокументОРасхождениях.Наименование, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КодСодОпер, "ВидДокРасх", СведенияОПринятииТоваров.ДокументОРасхождениях.Вид, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КодСодОпер, "НомДокРасх", СведенияОПринятииТоваров.ДокументОРасхождениях.Номер, Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КодСодОпер, "ДатаДокРасх", ДатаФНС(СведенияОПринятииТоваров.ДокументОРасхождениях.Дата), Ложь, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "КодСодОпер", КодСодОпер, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары")) Тогда
		
		СвЛицПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИмен);
		Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "РаботникОрганизацииПокупателя" Тогда
			
			РабОргПок = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИмен);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "Должность", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ИныеСведения");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ИныеСвед", Реквизит, , Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ОснПолн", Реквизит, , Ошибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
			Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
			Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ФИО", ФИО,  , Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "РабОргПок", РабОргПок, , Ошибки);
			
		ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "ИноеЛицо" Тогда
			
			ИнЛицо = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо", ПространствоИмен);
			Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
				ПредОргПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин", ПространствоИмен);
				
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "Должность", Реквизит, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ИныеСвед", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "НаимОргПрин", Реквизит, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаПринятие");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснДоверОргПрин", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснПолнПредПрин", Реквизит, , Ошибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
				Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
				Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ФИО", ФИО,  , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПрин", ПредОргПрин, , Ошибки);
			ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ФЛ" Тогда
				ФЛПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин", ПространствоИмен);
				
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ИныеСвед", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаПринятие");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ОснДоверФЛ", Реквизит, , Ошибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
				Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
				Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ФИО", ФИО,  , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛПрин", ФЛПрин, , Ошибки);
				
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "ИнЛицо", ИнЛицо, , Ошибки);
			
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "СвЛицПрин", СвЛицПрин, , Ошибки);
		
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "СвПрин", СвПрин, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаПолучения")) Тогда
		ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "ИдФайлИнфПол",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДопДанныеДокументаПолучения.ИдентификаторФайла"), , Ошибки);
		
		СтрокиДопДанныеДокументаПолучения = ДеревоДанных.Строки.Найти("ДопДанныеДокументаПолучения", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеДокументаПолучения.Строки.Найти("ДопДанныеДокументаПолучения.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
				
				ИнфПолФХЖ4.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ИнфПолФХЖ4", ИнфПолФХЖ4, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "СодФХЖ4", СодФХЖ4, Истина, Ошибки);
	
	// Информация об обстоятельствах закупок для государственных и муниципальных нужд.
	ЗакупкаДляГосударственныхНужд = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "ЗакупкаДляГосударственныхНужд");
	Если ЗначениеЗаполнено(ЗакупкаДляГосударственныхНужд.НомерЛицевогоСчетаПокупателя) Тогда
		
		ИнфПокГосЗакКазн = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИнфПокГосЗакКазн", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ИдКодЗак", ЗакупкаДляГосударственныхНужд.КодЗакупки, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ЛицСчетПок", ЗакупкаДляГосударственныхНужд.НомерЛицевогоСчетаПокупателя, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "НаимФинОргПок", ЗакупкаДляГосударственныхНужд.НаименованиеФинансовогоОрганаПокупателя, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "НомРеестрЗапПок", ЗакупкаДляГосударственныхНужд.НомерРеестровойЗаписиПокупателя, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "УчНомБюдОбязПок", ЗакупкаДляГосударственныхНужд.НомерБюджетногоОбязательстваПокупателя, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "КодКазначПок", ЗакупкаДляГосударственныхНужд.КазначействоПокупателяКод, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "НаимКазначПок", ЗакупкаДляГосударственныхНужд.КазначействоПокупателяНаименование, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ОКТМОПок", ЗакупкаДляГосударственныхНужд.ОКТМОПокупателя, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ОКТМОМесПост", ЗакупкаДляГосударственныхНужд.ОКТМОМестаПоставки, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ДатаОплПред", ДатаФНС(ЗакупкаДляГосударственныхНужд.ПредельнаяДатаОплаты), Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "УчНомДенОбяз", ЗакупкаДляГосударственныхНужд.НомерДенежногоОбязательства, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ОчерПлат", ЗакупкаДляГосударственныхНужд.ОчередностьПлатежа, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПокГосЗакКазн, "ВидПлат", ЗакупкаДляГосударственныхНужд.ВидПлатежа, Ложь, Ошибки);
		
		Для каждого СтрокаОбязательства Из ЗакупкаДляГосударственныхНужд.ДенежныеОбязательства Цикл
			
			ИнфСведДенОбяз = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИнфПокГосЗакКазн.ИнфСведДенОбяз", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфСведДенОбяз, "НомСтр", СтрокаОбязательства.НомерСтрокиИнформацииПродавца, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфСведДенОбяз, "КодОбъектФАИП", СтрокаОбязательства.КодОбъектаФАИП, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфСведДенОбяз, "ВидСредств", СтрокаОбязательства.ВидСредств, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфСведДенОбяз, "КодПокБюджКласс", СтрокаОбязательства.КодБюджетнойКлассификации, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфСведДенОбяз, "КодЦелиПокуп", СтрокаОбязательства.КодЦели, Ложь, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфСведДенОбяз, "СумАванс", СтрокаОбязательства.СуммаАванса, Истина, Ошибки);
			
			ИнфПокГосЗакКазн.ИнфСведДенОбяз.Добавить(ИнфСведДенОбяз);
			
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ИнфПокГосЗакКазн", ИнфПокГосЗакКазн, Истина, Ошибки);
		
	КонецЕсли;
	
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		
		// Для ЕИС список подписантов определяется заранее.
		МодульЭлектронноеАктированиеЕИС.ЗаполнитьСведенияОПодписантах(
			ДеревоДанных, ИнфПок, ПространствоИмен, Ошибки, Истина);
			
	Иначе
		
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "2", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "5", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
		
		// В подписанте пустым значением заполняется поле Физ.лицо.
		ФЛ = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ", ПространствоИмен);
		ФИО = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ.ФИО", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
		
		ИнфПок.Подписант.Добавить(Подписант);
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИнфПок", ИнфПок, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
		// Формирование приложения для ЕИС в сфере закупок.
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			РезультатСозданияПриложения = МодульЭлектронноеАктированиеЕИС.
				СформироватьДанныеПриложенияУПДЗаказчикаДляЕИС(ДеревоДанных, ИдентификаторФайла);
			Если НЕ РезультатСозданияПриложения.Выполнено Тогда
				ВызватьИсключение(РезультатСозданияПриложения.ОписаниеОшибки);
			КонецЕсли;
				
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные =
				РезультатСозданияПриложения.ДвоичныеДанные;
			Результат.ДанныеДополнительногоФайла.ИмяФайла =
				РезультатСозданияПриложения.ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_УПД_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	ИнформацияПродавца = ОбъектXDTO_УПД_ИнформацияПродавца(Основание.ДвоичныеДанные);
	
	ПространствоИмен = ПространствоИмен_УПД_ИнформацияПокупателя();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УПД_ИнформацияПокупателя(
		ДеревоДанных, ДатаФормирования, ИнформацияПродавца);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	ИнфПок = ПолучитьОбъектТипаCML("Файл.ИнфПок", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "КНД", "1115126", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ДатаИнфПок", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ВремИнфПок", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "НаимЭконСубСост",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ОснДоверОргСост",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаДоверенность"),, Ошибки);
	
	ИдИнфПрод = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИдИнфПрод", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ИдФайлИнфПр", ИнформацияПродавца.ИдФайл, Истина, Ошибки);
	ДатаДокИнфПр = ИнформацияПродавца.Документ.ДатаИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, Ошибки);
	ВремФайлИнфПр = ИнформацияПродавца.Документ.ВремИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ВремФайлИнфПр", ВремФайлИнфПр, Истина, Ошибки);
	
	Подписи = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПодписиОснования");
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи = Новый Массив;
		Подписи.Добавить("---");
	КонецЕсли;
	Для Каждого Подпись Из Подписи Цикл
		ИдИнфПрод.ЭП.Добавить(Подпись);
	КонецЦикла;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ИдИнфПрод", ИдИнфПрод, Истина, Ошибки);
	
	СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", ИнформацияПродавца.Документ.НаимДокОпр, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "Функция", ИнформацияПродавца.Документ.Функция, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомСчФИнфПр", ИнформацияПродавца.Документ.СвСчФакт.НомерСчФ,, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаСчФИнфПр", ИнформацияПродавца.Документ.СвСчФакт.ДатаСчФ, Истина, Ошибки);
	
	СвПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин", ПространствоИмен);
	
	ДатаПолученияТоваров = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СведенияОПринятииТоваров");
	
	СодержаниеОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СодержаниеОперации");
		
	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "ДатаПрин", ДатаФНС(ДатаПолученияТоваров), Ложь, Ошибки);
	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "СодОпер", СодержаниеОперации, Ложь, Ошибки);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары")) Тогда
		
		СвЛицПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИмен);
		Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "РаботникОрганизацииПокупателя" Тогда
			
			РабОргПок = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИмен);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "Должность", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ИныеСведения");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ИныеСвед", Реквизит, , Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ОснПолн", Реквизит, , Ошибки);
			
			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
			Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
			Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ФИО", ФИО,  , Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "РабОргПок", РабОргПок, , Ошибки);
			
		ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары") = "ИноеЛицо" Тогда
			
			ИнЛицо = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо", ПространствоИмен);
			Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
				ПредОргПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин", ПространствоИмен);
				
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "Должность", Реквизит, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ИныеСвед", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "НаимОргПрин", Реквизит, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаПринятие");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснДоверОргПрин", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснПолнПредПрин", Реквизит, , Ошибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
				Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
				Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ФИО", ФИО,  , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПрин", ПредОргПрин, , Ошибки);
			ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПринявшемТовары.ИноеЛицо") = "ФЛ" Тогда
				ФЛПрин = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин", ПространствоИмен);
				
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ИныеСвед", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаПринятие");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ОснДоверФЛ", Реквизит, , Ошибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
				Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
				Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ФИО", ФИО,  , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛПрин", ФЛПрин, , Ошибки);
				
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "ИнЛицо", ИнЛицо, , Ошибки);
			
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "СвЛицПрин", СвЛицПрин, , Ошибки);
		
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "СвПрин", СвПрин, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеДокументаПолучения")) Тогда
		ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "ИдФайлИнфПол",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДопДанныеДокументаПолучения.ИдентификаторФайла"), , Ошибки);
		
		СтрокиДопДанныеДокументаПолучения = ДеревоДанных.Строки.Найти("ДопДанныеДокументаПолучения", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеДокументаПолучения.Строки.Найти("ДопДанныеДокументаПолучения.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
				
				ИнфПолФХЖ4.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ИнфПолФХЖ4", ИнфПолФХЖ4, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "СодФХЖ4", СодФХЖ4, Истина, Ошибки);
	
	// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "2", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "3", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
	
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ФЛ = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ", ПространствоИмен);
	ФИО = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ.ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
	
	ИнфПок.Подписант.Добавить(Подписант);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИнфПок", ИнфПок, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторФайла_УПД_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования, Знач ИнформацияПродавца)
	
	ИдентификаторФайлаПродавца = ИнформацияПродавца.ИдФайл;
	
	КонтрольДвиженияТовара = "";
	Если СтрНайти(ИдентификаторФайлаПродавца, "PROS") > 0 Тогда
		КонтрольДвиженияТовара = "PROS";
	ИначеЕсли СтрНайти(ИдентификаторФайлаПродавца, "MARK") > 0 Тогда
		КонтрольДвиженияТовара = "MARK";
	КонецЕсли;
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_SCHFDOPPOK%1_%2_%3_%4_%5",
		КонтрольДвиженияТовара, 
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции


Функция ЗаполнитьДокумент_ПередачаТоваров_ИнформацияПродавца(Знач Данные)
	
	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ПередачаТоваров_ИнформацияПродавца(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_ПередачаТоваров_ИнформацияПродавца();
	
	Ошибки = Неопределено;
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если СведенияОбОператореЗаполнены(Участники.Оператор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		НаимОрг = Участники.Оператор.Наименование;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = Участники.Оператор.ИНН;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = Участники.Оператор.Идентификатор;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , Ошибки);
	КонецЕсли;	
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175010", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеСоставителяДокумента"), Истина, Ошибки);
	
	НомИспрДокПТ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИспрДокПТ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	СвДокПТПр = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр", ПространствоИмен);
	
	Если ЗначениеЗаполнено(НомИспрДокПТ) И ЗначениеЗаполнено(ДатаИспрДокПТ) Тогда
		ИспрДокПТ = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.ИспрДокПТ", ПространствоИмен);
	
		ДатаИспрДокПТ = ДатаФНС(ДатаИспрДокПТ);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрДокПТ, "НомИспрДокПТ", НомИспрДокПТ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрДокПТ, "ДатаИспрДокПТ", ДатаИспрДокПТ, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПр, "ИспрДокПТ", ИспрДокПТ, , Ошибки);
		
	КонецЕсли;
	
	НаимДок = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.НаимДок", ПространствоИмен);
	
	ПоФактХЖ = "Документ о передаче товара при торговых операциях";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НаимДок, "ПоФактХЖ", ПоФактХЖ, Истина, Ошибки);
	НаимДокОпр = "Товарная накладная";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НаимДок, "НаимДокОпр", НаимДокОпр, Истина, Ошибки);
	
	ИдентДок = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок", ПространствоИмен);
	
	НомДокПТ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной");
	ДатаДокПТ = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдентДок, "НомДокПТ", НомДокПТ, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдентДок, "ДатаДокПТ", ДатаДокПТ, Истина, Ошибки);
	
	ДенИзм = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм", ПространствоИмен);
	
	КодОКВ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "КодОКВ", КодОКВ, Истина, Ошибки);
	ЗаполнитьНаименованиеВалютыXML(ДенИзм, КодОКВ, Ошибки);	
	
	СодФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1", ПространствоИмен);
	
	ДанныеПродавца = ДеревоДанных.Строки.Найти("Поставщик", "ПолныйПуть");
	
	Продавец = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеПередачаТоваров(Продавец, ДанныеПродавца, Ошибки, ПространствоИмен, "Поставщик");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Продавец", Продавец, Ложь, Ошибки);
	
	ДанныеПлательщика = ДеревоДанных.Строки.Найти("Плательщик", "ПолныйПуть");
	
	Покупатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеПередачаТоваров(Покупатель, ДанныеПлательщика, Ошибки, ПространствоИмен, "Плательщик");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Покупатель", Покупатель, Ложь, Ошибки);
	
	ДанныеГрузоотправителя = ДеревоДанных.Строки.Найти("Грузоотправитель", "ПолныйПуть");
	Если ЗначениеЗаполнено(ДанныеГрузоотправителя) И ЗначениеЗаполнено(ДанныеГрузоотправителя.Значение) Тогда
		ГрузОтпр = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеПередачаТоваров(ГрузОтпр, ДанныеГрузоотправителя, Ошибки, ПространствоИмен,
			"Грузоотправитель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ГрузОтпр", ГрузОтпр, Ложь, Ошибки);
	КонецЕсли;
	
	ДанныеГрузополучателя = ДеревоДанных.Строки.Найти("Грузополучатель", "ПолныйПуть");
	Если ЗначениеЗаполнено(ДанныеГрузополучателя) И ЗначениеЗаполнено(ДанныеГрузополучателя.Значение) Тогда
		ГрузПолуч = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеПередачаТоваров(ГрузПолуч, ДанныеГрузополучателя, Ошибки, ПространствоИмен,
			"Грузополучатель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ГрузПолуч", ГрузПолуч, Ложь, Ошибки);
	КонецЕсли;
	
	ТаблицаОснований = ДеревоДанных.Строки.Найти("Основание", "ПолныйПуть");
	Если ЗначениеЗаполнено(ТаблицаОснований) Тогда
		Для каждого СтрокаОснования Из ТаблицаОснований.Строки Цикл
			
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание", ПространствоИмен);
	
			НаимОсн = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеНаименование");
			
			Если ЗначениеЗаполнено(НаимОсн) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", НаимОсн, Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", "-", Истина, Ошибки);
			КонецЕсли;
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеНомер");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НомОсн", Реквизит, Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеДата");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаФНС(Реквизит), Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеДопСведения");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", Реквизит, Ложь, Ошибки);
			
			СодФХЖ1.Основание.Добавить(Основание);
			
		КонецЦикла;		
	Иначе
		Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", "-", Истина, Ошибки);
		СодФХЖ1.Основание.Добавить(Основание);
	КонецЕсли;
				

	ВидОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации");
	ВидОперацииСтрокой = ВидОперацииЭДСтрокой(ВидОперации);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ВидОперации", ВидОперацииСтрокой, , Ошибки);

	ИдГосКонтракта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдГосКонтракта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ИдГосКон", ИдГосКонтракта, , Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПр, "СодФХЖ1", СодФХЖ1, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПр, "НаимДок", НаимДок, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПр, "ИдентДок", ИдентДок, , Ошибки);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПр, "ДенИзм", ДенИзм, , Ошибки);
		
	СодФХЖ2 = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2", ПространствоИмен);
	
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
		
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			
			СвТов =  ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "НомТов", Товар.Значение, Истина, Ошибки);
			
			НаименованиеНоменклатуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "НаимТов", НаименованиеНоменклатуры, , Ошибки);
			
			НаименованиеХарактеристики = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.НаименованиеХарактеристики");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "ХарактерТов", НаименованиеХарактеристики, , Ошибки);
			
			Сорт = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Сорт");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "СортТов", Сорт, , Ошибки);	
					
			Артикул = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Артикул");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "АртикулТов", Артикул, , Ошибки);
						
			КодТовара = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КодТовара");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "КодТов", КодТовара, , Ошибки);
			
			Реквизит = Строка(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияНаименование"));
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "НаимЕдИзм", Реквизит, Истина, Ошибки);
			
			БазоваяЕдиницаКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "ОКЕИ_Тов", СокрЛП(БазоваяЕдиницаКод), , Ошибки);
			
			ВидУпаковки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ВидУпаковки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "ВидУпак", ВидУпаковки, , Ошибки);
			
			КоличествоВОдномМесте = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоВОдномМесте");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "Место", КоличествоВОдномМесте, , Ошибки);
			
			КоличествоМест = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "КолМест", КоличествоМест, , Ошибки);
			
			МассаБрутто = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаБрутто");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "Брутто", МассаБрутто, , Ошибки);
			
			МассаНетто = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.МассаНетто");
			Если Не ЗначениеЗаполнено(МассаНетто) Тогда
				МассаНетто = 0;
			КонецЕсли;
						
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "НеттоПередано", МассаНетто, Истина, Ошибки);
	
			Цена = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.Цена");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "Цена", Цена, , Ошибки);
			
			СуммаБезНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "СтБезНДС", СуммаБезНДС, , Ошибки);
			
			РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
			СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			Если ЗначениеЗаполнено(СтавкаXDTO) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "НалСт", СтавкаXDTO, , Ошибки);
			КонецЕсли;
			
			СуммаСНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "СтУчНДС", СуммаСНДС, Истина, Ошибки);
			
			СуммаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвТов, "СумНДС", СуммаНДС, , Ошибки);
			
			// Выгружаем доп. данные.
			СтрокаДопДанных = Товар.Строки.Найти("ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть");
			Если ТипЗнч(СтрокаДопДанных.Значение) = Тип("Число") И СтрокаДопДанных.Значение > 0 Тогда
				Для Каждого ТекСтрокаДопДанных Из СтрокаДопДанных.Строки Цикл
					
					ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Идентификатор");
					ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Значение");

					ИнфПолФХЖ2 = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов.ИнфПолФХЖ2", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ2, "Идентиф", XMLСтрока(ИдентификаторДопДанных), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ2, "Значен", XMLСтрока(ЗначениеДопДанных), Истина, Ошибки);
					
					СвТов.ИнфПолФХЖ2.Добавить(ИнфПолФХЖ2);
				КонецЦикла;
			КонецЕсли;
			
			СодФХЖ2.СвТов.Добавить(СвТов);
			
	КонецЦикла;
	
	// Заполняем Итоги табличной части
	КоличествоМест = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.КоличествоМест");
	МассаБрутто    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто");
	МассаНетто     = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто");
	СуммаБезНДС    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС");
	СуммаНДС       = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС");
	СуммаСНДС      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС");
	
	Если ЗначениеЗаполнено(СуммаБезНДС) Или ЗначениеЗаполнено(СуммаСНДС) Тогда

		Всего = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме.СодФХЖ2.Всего", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Всего, "КолМестВс", КоличествоМест, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Всего, "БруттоВс", МассаБрутто, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Всего, "НеттоВс", МассаНетто, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Всего, "СтБезНДСВс", СуммаБезНДС, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Всего, "СумНДСВс", СуммаНДС, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Всего, "СтУчНДСВс", СуммаСНДС, Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ2, "Всего", Всего, , Ошибки);

	КонецЕсли;
	
	СвДокПТПрКроме = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПТПрКроме", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПрКроме, "СвДокПТПр", СвДокПТПр, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПТПрКроме, "СодФХЖ2", СодФХЖ2, , Ошибки);
	
	СодФХЖ3 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИмен);
		
	СодОпер = "Перечисленные в документе ценности переданы";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "СодОпер", СодОпер, , Ошибки);

	КолПрил = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "КолПрил", КолПрил, , Ошибки);
		
	ДопДанныеДеревоДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть");	
	ДопДанныеПодписанные = ДопДанныеДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
	Если ТипЗнч(ДопДанныеПодписанные.Значение) = Тип("Число") И ДопДанныеПодписанные.Значение > 0 Тогда
		
		Для Каждого ТекСтрокаДопДанных Из ДопДанныеПодписанные.Строки Цикл
			ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ДопДанные.Подписанные.НомерСтроки.Идентификатор");
			ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ДопДанные.Подписанные.НомерСтроки.Значение");

			ИнфПолФХЖ3 = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "Значен", ЗначениеДопДанных, Истина, Ошибки);

			СодФХЖ3.ИнфПолФХЖ3.Добавить(ИнфПолФХЖ3);
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаОтпуск = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "ДатаОтпуск", ДатаОтпуск, , Ошибки);

	ТранспортнаяНакладнаяДеревоДанных = ДеревоДанных.Строки.Найти("ТранспортнаяНакладная", "ПолныйПуть");
	
	Если ЗначениеЗаполнено(ТранспортнаяНакладнаяДеревоДанных) Тогда

		Для Каждого СтрокаТранспортнаяНакладная Из ТранспортнаяНакладнаяДеревоДанных.Строки Цикл

			НомерНакладной = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТранспортнаяНакладная,
				"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяНомер");
			ДатаНакладной = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТранспортнаяНакладная,
				"ТранспортнаяНакладная.НомерСтроки.ТранспортнаяНакладнаяДата");
			Если ЗначениеЗаполнено(НомерНакладной) И ЗначениеЗаполнено(ДатаНакладной) Тогда
				ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.ТранНакл", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл", НомерНакладной, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаФНС(ДатаНакладной), , Ошибки);
				СодФХЖ3.ТранНакл.Добавить(ТранНакл);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары")) Тогда
			
			СвЛицОтпГруз = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз", ПространствоИмен);
			Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "РаботникОрганизацииПродавца" Тогда
				
				РабОргПрод = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод", ПространствоИмен);
				
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "Должность", Реквизит, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "ИныеСвед", Реквизит, , Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "ОснПолн", Реквизит, , Ошибки);
				
				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
				Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
				Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПрод, "ФИО", ФИО,  , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицОтпГруз, "РабОргПрод", РабОргПрод, , Ошибки);
				
			ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары") = "ИноеЛицо" Тогда
				
				ИнЛицо = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо", ПространствоИмен);
				Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ПредставительОрганизации" Тогда
					ПредОргПер = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ПредОргПер", ПространствоИмен);
					
					Должность = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "Должность", Должность, Истина, Ошибки);
					ИныеСвед = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ИныеСвед", ИныеСвед, , Ошибки);
					НаимОргПер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "НаимОргПер", НаимОргПер, Истина, Ошибки);
					ОснДоверОргПер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ОснДоверОргПер", ОснДоверОргПер, , Ошибки);
					ОснПолнПредПер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ОснПолнПредПер", ОснПолнПредПер, , Ошибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
					Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
					Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
					Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПер, "ФИО", ФИО,  , Ошибки);
						
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПер", ПредОргПер, , Ошибки);
					
				ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОЛицеПередавшемТовары.ИноеЛицо") = "ФЛ" Тогда
					ФЛ = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.ИнЛицо.ФЛ", ПространствоИмен);
					
					ИныеСвед = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ИныеСвед", ИныеСвед, , Ошибки);
					ОснДоверФЛПер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ОснДоверФЛПер", ОснДоверФЛПер, , Ошибки);
					
					ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
					Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
					Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
					Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО,  , Ошибки);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛ", ФЛ, , Ошибки);
					
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицОтпГруз, "ИнЛицо", ИнЛицо, , Ошибки);
				
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "СвЛицОтпГруз", СвЛицОтпГруз, , Ошибки);
			
		КонецЕсли;	
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", СодФХЖ3, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвДокПТПрКроме", СвДокПТПрКроме, Истина, Ошибки);
		
	// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "2", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
	
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки);
	
	Документ.Подписант.Добавить(Подписант);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ПередачаТоваров_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	ИнформацияПродавца = ОбъектXDTO_ПередачаТоваров_ИнформацияПродавца(Основание.ДвоичныеДанные);
	
	ПространствоИмен = ПространствоИмен_ПередачаТоваров_ИнформацияПокупателя();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ПередачаТоваров_ИнформацияПокупателя(ДеревоДанных, ДатаФормирования);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175011", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПок", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПок", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	
	ИдДокПТПр = ПолучитьОбъектТипаCML("Файл.Документ.ИдДокПТПр", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдДокПТПр, "ИдФайлИнфПр", ИнформацияПродавца.ИдФайл, Истина, Ошибки);
	ДатаДокИнфПр = ИнформацияПродавца.Документ.ДатаИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдДокПТПр, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, Ошибки);
	ВремФайлИнфПр = ИнформацияПродавца.Документ.ВремИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдДокПТПр, "ВремФайлИнфПр", ВремФайлИнфПр, Истина, Ошибки);
	
	Подписи = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПодписиОснования");
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи = Новый Массив;
		Подписи.Добавить("---");
	КонецЕсли;
	Для Каждого Подпись Из Подписи Цикл
		ИдДокПТПр.ЭП.Добавить(Подпись);
	КонецЦикла;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ИдДокПТПр", ИдДокПТПр, Истина, Ошибки);
	
	СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", ИнформацияПродавца.Документ.СвДокПТПрКроме.СвДокПТПр.НаимДок.НаимДокОпр, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомДокПТПр", ИнформацияПродавца.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.НомДокПТ,, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаДокПТПр", ИнформацияПродавца.Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.ДатаДокПТ, Истина, Ошибки);
	
	СвПрин = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ГрузПолучил", ПространствоИмен);
	
	ДатаПолученияГруза = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "ДатаПолученияГруза");
	
	Если ЗначениеЗаполнено(ДатаПолученияГруза) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "ДатаПолуч", ДатаФНС(ДатаПолученияГруза), Ложь, Ошибки);
	КонецЕсли;
	
	СодОпер = "Перечисленные в документе ценности приняты без претензий";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПрин, "СодОпер", СодОпер, Ложь, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ГрузПолучил", СвПрин, Истина, Ошибки);
	
	ДопДанныеПодписанныеДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДопДанные.Подписанные");
	Если ЗначениеЗаполнено(ДопДанныеПодписанныеДеревоДанных) Тогда
		
		Для Каждого ТекСтрокаДопДанных Из ДопДанныеПодписанныеДеревоДанных.Строки Цикл
			ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ДопДанные.Подписанные.НомерСтроки.Идентификатор");
			ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ДопДанные.Подписанные.НомерСтроки.Значение");

			ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИмен);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "Значен", ЗначениеДопДанных, Истина, Ошибки);

			СодФХЖ4.ИнфПолФХЖ4.Добавить(ИнфПолФХЖ4);
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ4", СодФХЖ4, Истина, Ошибки);
	
	
	// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "2", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
	
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ФЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ", ПространствоИмен);
	ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ.ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
	
	Документ.Подписант.Добавить(Подписант);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ПередачаУслуг_ИнформацияПродавца(Знач Данные)
	
	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ПередачаУслуг_ИнформацияПродавца(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_ПередачаУслуг_ИнформацияПродавца();
	
	Ошибки = Неопределено;
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если СведенияОбОператореЗаполнены(Участники.Оператор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		НаимОрг = Участники.Оператор.Наименование;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = Участники.Оператор.ИНН;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = Участники.Оператор.Идентификатор;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175012", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфИсп", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфИсп", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НаименованиеСоставителяДокумента"), Истина, Ошибки);
	
	НомИспрДокПРУ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИспрДокПРУ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	СвДокПРУ = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ", ПространствоИмен);
	
	Если ЗначениеЗаполнено(НомИспрДокПРУ) И ЗначениеЗаполнено(ДатаИспрДокПРУ) Тогда
		ИспрДокПРУ = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.ИспрДокПРУ", ПространствоИмен);
	
		ДатаИспрДокПРУ = ДатаФНС(ДатаИспрДокПРУ);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрДокПРУ, "НомИспрДокПРУ", НомИспрДокПРУ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрДокПРУ, "ДатаИспрДокПРУ", ДатаИспрДокПРУ, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПРУ, "ИспрДокПРУ", ИспрДокПРУ, , Ошибки);
		
	КонецЕсли;
	
	НаимДок = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.НаимДок", ПространствоИмен);
	
	ПоФактХЖ = "Документ о передаче результатов работ (Документ об оказании услуг)";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НаимДок, "ПоФактХЖ", ПоФактХЖ, Истина, Ошибки);
	НаимДокОпр = "Акт о передаче результатов работ (Акт об оказании услуг)";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НаимДок, "НаимДокОпр", НаимДокОпр, Истина, Ошибки);
	
	ИдентДок = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.ИдентДок", ПространствоИмен);
	
	НомДокПРУ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта");
	ДатаДокПРУ = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдентДок, "НомДокПРУ", НомДокПРУ, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдентДок, "ДатаДокПРУ", ДатаДокПРУ, Истина, Ошибки);
	
	ДенИзм = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.ДенИзм", ПространствоИмен);
	
	КодОКВ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "КодОКВ", КодОКВ, Истина, Ошибки);
	ЗаполнитьНаименованиеВалютыXML(ДенИзм, КодОКВ, Ошибки);	
	
	СодФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1", ПространствоИмен);
	ЗаголовокОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ЗагСодОпер", ЗаголовокОперации, , Ошибки);
	
	ДанныеИсполнителя = ДеревоДанных.Строки.Найти("Исполнитель", "ПолныйПуть");
		
	Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеПередачаУслуг(Исполнитель, ДанныеИсполнителя, Ошибки, ПространствоИмен, "Исполнитель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Исполнитель", Исполнитель, Ложь, Ошибки);
		
	ДанныеЗаказчика = ДеревоДанных.Строки.Найти("Заказчик", "ПолныйПуть");
	
	Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеПередачаУслуг(Заказчик, ДанныеЗаказчика, Ошибки, ПространствоИмен, "Заказчик");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Заказчик", Заказчик, Ложь, Ошибки);
	
	ТаблицаОснований = ДеревоДанных.Строки.Найти("Основание", "ПолныйПуть");
	Если ЗначениеЗаполнено(ТаблицаОснований) Тогда
		Для каждого СтрокаОснования Из ТаблицаОснований.Строки Цикл
			
			Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.Основание", ПространствоИмен);
	
			НаимОсн = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеНаименование");
			
			Если ЗначениеЗаполнено(НаимОсн) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", НаимОсн, Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", "-", Истина, Ошибки);
			КонецЕсли;
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеНомер");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НомОсн", Реквизит, Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеДата");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаФНС(Реквизит), Ложь, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаОснования, "Основание.НомерСтроки.ДокОснованиеДопСведения");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", Реквизит, Ложь, Ошибки);
			
			СодФХЖ1.Основание.Добавить(Основание);
			
		КонецЦикла;		
	Иначе
		Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.Основание", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", "-", Истина, Ошибки);
		СодФХЖ1.Основание.Добавить(Основание);
	КонецЕсли;
				

	ВидОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации");
	ВидОперацииСтрокой = ВидОперацииЭДСтрокой(ВидОперации);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ВидОперации", ВидОперацииСтрокой, , Ошибки);

	ИдГосКонтракта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдГосКонтракта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ИдГосКон", ИдГосКонтракта, , Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПРУ, "СодФХЖ1", СодФХЖ1, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПРУ, "НаимДок", НаимДок, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПРУ, "ИдентДок", ИдентДок, , Ошибки);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПРУ, "ДенИзм", ДенИзм, , Ошибки);
		
	СодФХЖ2 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2", ПространствоИмен);
	
	СведенияОРаботах = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.ОписРабот", ПространствоИмен);		
	
	СтрокаТаблицаУслуг = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
		
		Для Каждого Услуга Из СтрокаТаблицаУслуг.Строки Цикл
			
			Работа =  ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.ОписРабот.Работа", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "Номер", Услуга.Значение, Истина, Ошибки);

			НаименованиеНоменклатуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "НаимРабот", НаименованиеНоменклатуры, , Ошибки);
			
			ОписаниеНоменклатуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.Описание");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "Описание", ОписаниеНоменклатуры, , Ошибки);
			
			БазоваяЕдиницаКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияКод");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "ОКЕИ", СокрЛП(БазоваяЕдиницаКод), , Ошибки);
			
			НаименованиеЕдиницы = Строка(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование"));
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "НаимЕдИзм", НаименованиеЕдиницы, , Ошибки);
			
			МассаБрутто = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.Количество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "Количество", МассаБрутто, , Ошибки);
			
			Цена = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.Цена");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "Цена", Цена, , Ошибки);
			
			// Сведения о стоимости работ.
			СуммаБезНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "СтоимБезНДС", СуммаБезНДС, , Ошибки);
			
			СтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
			ПеречислениеСтавкаНДС = ИнтеграцияЭДО.СтавкаНДСПеречисление(СтавкаНДС);
			Если ЗначениеЗаполнено(ПеречислениеСтавкаНДС) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "НалСт", ПеречислениеСтавкаНДС, , Ошибки);
			КонецЕсли;
			
			СуммаСНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "СтоимУчНДС", СуммаСНДС, , Ошибки);
			
			СуммаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СуммаНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "СумНДС", СуммаНДС, , Ошибки, 
				НРег(ПеречислениеСтавкаНДС) <> НРег("без НДС"));
			
			РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Услуга, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
			СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДС);
			Если ЗначениеЗаполнено(СтавкаXDTO) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Работа, "НалСт", СтавкаXDTO, , Ошибки);
			КонецЕсли;
			
			// Выгружаем доп. данные.
			СтрокаДопДанных = Услуга.Строки.Найти("ТаблицаУслуг.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть");
			Если ТипЗнч(СтрокаДопДанных.Значение) = Тип("Число") И СтрокаДопДанных.Значение > 0 Тогда
				Для Каждого ТекСтрокаДопДанных Из СтрокаДопДанных.Строки Цикл
					
					ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"ТаблицаУслуг.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Идентификатор");
					ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"ТаблицаУслуг.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Значение");	
					
					ИнфПолеОписРабот = ПолучитьОбъектТипаCML("Файл.Документ.СвДокПРУ.СодФХЖ1.ОписРабот.Работа.ИнфПолеОписРабот", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолеОписРабот, "Идентиф", XMLСтрока(ИдентификаторДопДанных), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолеОписРабот, "Значен", XMLСтрока(ЗначениеДопДанных), Истина, Ошибки);
					
					Работа.ИнфПолеОписРабот.Добавить(ИнфПолеОписРабот);
				КонецЦикла;
			КонецЕсли;
			
			СведенияОРаботах.Работа.Добавить(Работа);
			
	КонецЦикла;
	
	НачалоРабот = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот");
	КонецРабот 	= ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот");		
	СуммаБезНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого");
	СуммаНДС    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого");
	СуммаСНДС   = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого");

	Если ЗначениеЗаполнено(СуммаСНДС)  Тогда
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОРаботах, "НачРабот", ДатаФНС(НачалоРабот), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОРаботах, "КонРабот", ДатаФНС(КонецРабот), , Ошибки);			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОРаботах, "СтБезНДСИт", СуммаБезНДС, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОРаботах, "СумНДСИт", СуммаНДС, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОРаботах, "СтУчНДСИт", СуммаСНДС, Истина, Ошибки);

	КонецЕсли;
	
	СодФХЖ1.ОписРабот.Добавить(СведенияОРаботах);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокПРУ, "СодФХЖ1", СодФХЖ1, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвДокПРУ", СвДокПРУ, Истина, Ошибки);	
	
	СодФХЖ2 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2", ПространствоИмен);
		
	СодОпер = "Результаты работ переданы (услуги оказаны)";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ2, "СодОпер", СодОпер, , Ошибки);
	
	ДопДанныеДеревоДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть");	
	ДопДанныеПодписанные = ДопДанныеДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
	Если ТипЗнч(ДопДанныеПодписанные.Значение) = Тип("Число") И ДопДанныеПодписанные.Значение > 0 Тогда
		
		Для Каждого ТекСтрокаДопДанных Из ДопДанныеПодписанные.Строки Цикл

			ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
				"ДопДанные.Подписанные.НомерСтроки.Идентификатор");
			ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
				"ДопДанные.Подписанные.НомерСтроки.Значение");
			
			ИнфПолФХЖ3 = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "Значен", ЗначениеДопДанных, Истина, Ошибки);

			СодФХЖ2.ИнфПолФХЖ2.Добавить(ИнфПолФХЖ3);
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПер = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ2, "ДатаПер", ДатаПер, , Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ2", СодФХЖ2, Истина, Ошибки);
	
	// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолнПодп", "Должностные обязанности", Истина, Ошибки);
	
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки);
	
	Документ.Подписант.Добавить(Подписант);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ПередачаУслуг_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	ИнформацияПродавца = ОбъектXDTO_ПередачаУслуг_ИнформацияПродавца(Основание.ДвоичныеДанные);
	
	ПространствоИмен = ПространствоИмен_ПередачаУслуг_ИнформацияПокупателя();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ПередачаУслуг_ИнформацияПокупателя(ДеревоДанных, ДатаФормирования);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175013", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфЗак", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфЗак", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	
	ИдДокПРУИсп = ПолучитьОбъектТипаCML("Файл.Документ.ИдДокПРУИсп", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдДокПРУИсп, "ИдФайлИнфИсп", ИнформацияПродавца.ИдФайл, Истина, Ошибки);
	ДатаДокИнфИсп = ИнформацияПродавца.Документ.ДатаИнфИсп;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдДокПРУИсп, "ДатаФайлИнфИсп", ДатаДокИнфИсп, Истина, Ошибки);
	ВремФайлИнфИсп = ИнформацияПродавца.Документ.ВремИнфИсп;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдДокПРУИсп, "ВремФайлИнфИсп", ВремФайлИнфИсп, Истина, Ошибки);
	
	Подписи = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПодписиОснования");
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи = Новый Массив;
		Подписи.Добавить("---");
	КонецЕсли;
	Для Каждого Подпись Из Подписи Цикл
		ИдДокПРУИсп.ЭП.Добавить(Подпись);
	КонецЦикла;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ИдДокПРУИсп", ИдДокПРУИсп, Истина, Ошибки);
	
	СодФХЖ3 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "НаимДокОпрИсп", ИнформацияПродавца.Документ.СвДокПРУ.НаимДок.НаимДокОпр, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "НомДокПРУИсп", ИнформацияПродавца.Документ.СвДокПРУ.ИдентДок.НомДокПРУ,, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "ДатаДокПРУИсп", ИнформацияПродавца.Документ.СвДокПРУ.ИдентДок.ДатаДокПРУ, Истина, Ошибки);
	
	РезПринял = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.РезПринял", ПространствоИмен);
	
	ДатаПолученияУслуг = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа");
	
	Если ЗначениеЗаполнено(ДатаПолученияУслуг) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПринял, "ДатаПрием", ДатаФНС(ДатаПолученияУслуг), Ложь, Ошибки);
	КонецЕсли;
	
	Претензия = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияПоВыполнениюУслуг.Претензия");
	Если Не ЗначениеЗаполнено(Претензия) Тогда
		Претензия = НСтр("ru ='Результаты работ (оказанных услуг) приняты без претензий'");
	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПринял, "СодОпер", Претензия, Ложь, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ3, "РезПринял", РезПринял, Истина, Ошибки);
	
	ДопДанныеПодписанныеДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДопДанные.Подписанные");
	Если ЗначениеЗаполнено(ДопДанныеПодписанныеДеревоДанных) Тогда
		
		Для Каждого ТекСтрокаДопДанных Из ДопДанныеПодписанныеДеревоДанных.Строки Цикл
			ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ДопДанные.Подписанные.НомерСтроки.Идентификатор");
			ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных, "ДопДанные.Подписанные.НомерСтроки.Значение");

			ИнфПолФХЖ3 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.ИнфПолФХЖ3.ТекстИнф", ПространствоИмен);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "Значен", ЗначениеДопДанных, Истина, Ошибки);

			СодФХЖ3.ИнфПолФХЖ4.Добавить(ИнфПолФХЖ3);
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", СодФХЖ3, Истина, Ошибки);	
	
	// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "2", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
	
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ФЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ", ПространствоИмен);
	ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ.ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
	
	Документ.Подписант.Добавить(Подписант);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ПриемкаСдачаРабот_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	
	ПространствоИмен = ПространствоИмен_ПриемкаСдачаРабот_ИнформацияПокупателя();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ПриемкаСдачаРабот_ИнформацияПокупателя(ДеревоДанных, ДатаФормирования);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДОСФ", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175007", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	
	СведенияАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияАктИ, "НаимПервДок", "Акт о выполнении работ (оказании услуг)", Истина, Ошибки);
	
	ИдАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИдАктИ", ПространствоИмен);	
	СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.СвАктИ", ПространствоИмен);	
	
	ПотокЧтения = Основание.ДвоичныеДанные.ОткрытьПотокДляЧтения();  	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ПотокЧтения);	
	ИнформацияОтправителя = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);  	

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдАктИ, "ИдФайлАктИ", ИнформацияОтправителя.ИдФайл, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдАктИ, "ДатаДокАктИ", ИнформацияОтправителя.Документ.ДатаДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдАктИ, "ВремДокАктИ", ИнформацияОтправителя.Документ.ВремДок, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", ИнформацияОтправителя.Документ.СвАктИ.НомАкт, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ИнформацияОтправителя.Документ.СвАктИ.ДатаАкт, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияАктИ, "ИдАктИ", ИдАктИ, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияАктИ, "СвАктИ", СвАктИ, Истина, Ошибки);

	ПринялАкт = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял", ПространствоИмен);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПоВыполнениюУслуг.ДатаЗаказа")) Тогда
		Реквизит = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияПоВыполнениюУслуг.ДатаЗаказа"));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПринялАкт, "ДатаЗаказ", Реквизит, , Ошибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияПоВыполнениюУслуг.Претензия")) Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияПоВыполнениюУслуг.Претензия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПринялАкт, "Претенз", Реквизит, , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияАктИ, "Принял", ПринялАкт, Истина, Ошибки);
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СведенияАктИ, Истина, Ошибки);
	
	// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ЮЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИмен);
	ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", "1111111111", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_АктОРасхождениях_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_АктОРасхождениях_ИнформацияПокупателя(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_АктОРасхождениях_ИнформацияПокупателя();
	
	Ошибки = Неопределено;
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);

	Если СведенияОбОператореЗаполнены(Участники.Оператор) Тогда
		СвОЭДОтпрСФ = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИмен);
		НаимОрг =Участники.Оператор.Наименование;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпрСФ, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = Участники.Оператор.ИНН;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпрСФ, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = Участники.Оператор.Идентификатор;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпрСФ, "ИдЭДОСФ", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ", СвОЭДОтпрСФ, , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
		
		// Документ.
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175014", Истина, Ошибки);
	
	ТекДатаВремя = ТекущаяДатаСеанса();	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПок", Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПок", Формат(ТекДатаВремя, "ДФ=HH.mm.ss"), Истина, Ошибки);
	
	НаименованиеДокумента = НСтр("ru = 'Документ о приемке ценностей и (или) расхождениях, выявленных при их приемке'");
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", НаименованиеДокумента, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "НаименованиеДокумента"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОснДоверОргСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СоставительДокументаДоверенность"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОбстСостДок", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваСоставленияДокумента"), , Ошибки);
		//  Номер и дата документа.
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДатаДок = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	ИдентДокПР = ПолучитьОбъектТипаCML("Файл.Документ.ИдентДокПР", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдентДокПР, "НомДокПР", НомерДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдентДокПР, "ДатаДокПР", ДатаДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ИдентДокПР", ИдентДокПР, Истина, Ошибки);
		//  Исправление.
	НомерИсправления = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаИсправления"));
	Если ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления) Тогда
		ИспрДокПР = ПолучитьОбъектТипаCML("Файл.Документ.ИспрДокПР", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрДокПР, "НомИспрДокПР", НомерИсправления, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрДокПР, "ДатаИспрДокПР", ДатаИсправления, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ИспрДокПР", ИспрДокПР, Истина, Ошибки);
	КонецЕсли;
		
		// Приемка.
	СодФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ОбстИсп", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОбстоятельстваИспользованияДокумента"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ИдГосКон", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ИдентификаторГосКонтракта"), , Ошибки);
		// Участники.
	Продавец = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастниеАктОРасхождениях(Продавец, ДеревоДанных, Ошибки, ПространствоИмен, "Продавец");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Продавец", Продавец, Истина, Ошибки);

	Покупатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастниеАктОРасхождениях(Покупатель, ДеревоДанных, Ошибки, ПространствоИмен, "Покупатель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Покупатель", Покупатель, Истина, Ошибки);

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Грузоотправитель")) Тогда

		Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастниеАктОРасхождениях(Грузоотправитель, ДеревоДанных, Ошибки, ПространствоИмен,
			"Грузоотправитель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Грузоотправитель", Грузоотправитель, , Ошибки);

	КонецЕсли;

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Грузополучатель")) Тогда

		Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастниеАктОРасхождениях(Грузополучатель, ДеревоДанных, Ошибки, ПространствоИмен,
			"Грузополучатель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Грузополучатель", Грузополучатель, , Ошибки);

	КонецЕсли;

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СтраховаяКомпания")) Тогда

		СтраховаяКомпания = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастниеАктОРасхождениях(СтраховаяКомпания, ДеревоДанных, Ошибки, ПространствоИмен,
			"СтраховаяКомпания");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "СтрахКом", СтраховаяКомпания, , Ошибки);

	КонецЕсли;
		
		// Приказ.
	НомерПриказа = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерПриказа");
	НомерПриказа = ?(ЗначениеЗаполнено(НомерПриказа), НомерПриказа, "б/н"); // регламентированная строка.
	ДатаПриказа = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаПриказа"));

	Если ЗначениеЗаполнено(НомерПриказа) И ЗначениеЗаполнено(ДатаПриказа) Тогда

		Приказ = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.Приказ", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Приказ, "НомПрик", НомерПриказа, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Приказ, "ДатаПрик", ДатаПриказа, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "Приказ", Приказ, , Ошибки);

	КонецЕсли;
		
		// Сведения об осмотре груза.
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОбОсмотреГруза")) Тогда

		СведенияОбОсмотреГруза = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "СведенияОбОсмотреГруза");

		СвОсмГруз = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвОсмГруз", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОсмГруз, "ДатаОсм", ДатаФНС(СведенияОбОсмотреГруза.ДатаОсмотра), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОсмГруз, "МестоСост", СведенияОбОсмотреГруза.МестоСоставленияДокумента, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОсмГруз, "ВремяНач", Формат(СведенияОбОсмотреГруза.ВремяПриемкиНачало,
			"ДФ='HH.mm.ss'"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОсмГруз, "ВремяОконч", Формат(СведенияОбОсмотреГруза.ВремяПриемкиОкончание,
			"ДФ='HH.mm.ss'"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОсмГруз, "ДатаОтпр", ДатаФНС(СведенияОбОсмотреГруза.ДатаОтправки), , Ошибки);

		Если ЗначениеЗаполнено(СведенияОбОсмотреГруза.СертификатыСоответствия) Тогда
			Для Каждого НомерСертификата Из СведенияОбОсмотреГруза.СертификатыСоответствия Цикл
				СвОсмГруз.СертСоотв.Добавить(НомерСертификата);
			КонецЦикла;
		КонецЕсли;

		СопрДок = ПолучитьОбъектТипаCML("СопрДокТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СопрДок, "НаимСопрДок", СведенияОбОсмотреГруза.СопроводительныйДокумент.Наименование,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СопрДок, "НомСопрДок", СведенияОбОсмотреГруза.СопроводительныйДокумент.Номер, Истина,
			Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СопрДок, "ДатаСопрДок", ДатаФНС(
			СведенияОбОсмотреГруза.СопроводительныйДокумент.Дата), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОсмГруз, "СопрДок", СопрДок, Истина, Ошибки);

		Если ЗначениеЗаполнено(СведенияОбОсмотреГруза.ДополнительныеДанные) Тогда
			ИнфПолСвОсм = ПолучитьОбъектТипаCML("ИнфПолТип", ПространствоИмен);
			ЗаполнитьДополнительныеДанныеАктОРасхождениях(ИнфПолСвОсм, СведенияОбОсмотреГруза.ДополнительныеДанные,
				ПространствоИмен, Ошибки);
			СвОсмГруз.ИнфПолСвОсм.Добавить(ИнфПолСвОсм);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "СвОсмГруз", СвОсмГруз, , Ошибки);

	КонецЕсли;
		
		// Сведения по транспортным документам.
	СведенияПоТранспортнымДокументам = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияПоТранспортнымДокументам");

	Для Каждого СтрокаСведений Из СведенияПоТранспортнымДокументам Цикл

		СвСопрДок = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвСопрДок", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "ОтмПломб", СтрокаСведений.ОтметкаОбОпломбировании, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "ВидУпак", СтрокаСведений.ВидУпаковки, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "КолМест", СтрокаСведений.Количество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "НаимГруз", СтрокаСведений.НаименованиеГруза, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "ОКЕИ_Тов", СокрЛП(СтрокаСведений.ЕдиницаИзмеренияКод), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "НаимЕдИзм", СтрокаСведений.ЕдиницаИзмеренияНаименование, Истина, Ошибки);
		
		Если ЗначениеЗаполнено(СтрокаСведений.МассаОтправленияБрутто)
			Или ЗначениеЗаполнено(СтрокаСведений.МассаОтправленияНетто) Тогда
			МассаДок = ПолучитьОбъектТипаCML("МасГрузТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(МассаДок, "МассаБр", СтрокаСведений.МассаОтправленияБрутто, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(МассаДок, "МассаНет", СтрокаСведений.МассаОтправленияНетто, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "МассаДок", МассаДок, , Ошибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСведений.МассаПрибытияБрутто)
			Или ЗначениеЗаполнено(СтрокаСведений.МассаПрибытияНетто) Тогда
			МассаФакт = ПолучитьОбъектТипаCML("МасГрузТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(МассаФакт, "МассаБр", СтрокаСведений.МассаПрибытияБрутто, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(МассаФакт, "МассаНет", СтрокаСведений.МассаПрибытияНетто, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "МассаФакт", МассаФакт, , Ошибки);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаСведений.ДополнительныеДанные) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из СтрокаСведений.ДополнительныеДанные Цикл
				ИнфПолСопрДок = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолСопрДок, "Идентиф", КлючЗначение.Ключ, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолСопрДок, "Значен", КлючЗначение.Значение, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСопрДок, "ИнфПолСопрДок", ИнфПолСопрДок, , Ошибки);
				Прервать;
			КонецЦикла;
		КонецЕсли;

		СодФХЖ1.СвСопрДок.Добавить(СвСопрДок);

	КонецЦикла;
		
		// Сведения о времени приемки.
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОВремениПриемки")) Тогда

		СведенияОВремениПриемки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "СведенияОВремениПриемки");

		СвВремПрием = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвВремПрием", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвВремПрием, "ПрибГруз", Формат(СведенияОВремениПриемки.ДатаПрибытияВПунктНазначения,
			ФорматДатаВремяеАктОРасхождениях()), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвВремПрием, "ВыдачГруз", Формат(
			СведенияОВремениПриемки.ДатаВыдачиОрганизациейТранспорта, ФорматДатаВремяеАктОРасхождениях()), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвВремПрием, "ВскрытГруз", Формат(
			СведенияОВремениПриемки.ДатаВскрытияТранспортныхСредств, ФорматДатаВремяеАктОРасхождениях()), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвВремПрием, "ДостГруз", Формат(СведенияОВремениПриемки.ДатаДоставкиНаСкладПолучателя,
			ФорматДатаВремяеАктОРасхождениях()), , Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "СвВремПрием", СвВремПрием, , Ошибки);

	КонецЕсли;
		
		// Обстоятельства приемки.
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОбстоятельстваПриемки")) Тогда

		ОбстоятельстваПриемки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "ОбстоятельстваПриемки");

		ДрОбстПрием = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.ДрОбстПрием", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДрОбстПрием, "УсловХран", ОбстоятельстваПриемки.УсловияХраненияТоваровНаСкладеПолучателя,
			, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДрОбстПрием, "СостТара", ОбстоятельстваПриемки.СостояниеТарыУпаковки, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДрОбстПрием, "ОпредНедост", ОбстоятельстваПриемки.ТипОпределенияКоличества, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДрОбстПрием, "ДопСв", ОбстоятельстваПриемки.ДополнительныеСведения, , Ошибки);

		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ОбстоятельстваПриемки.Перевозчик")) Тогда
			Перевозчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
			ЗаполнитьСведенияОбУчастниеАктОРасхождениях(Перевозчик, ДеревоДанных, Ошибки, ПространствоИмен,
				"ОбстоятельстваПриемки.Перевозчик");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДрОбстПрием, "Перевозчик", Перевозчик, , Ошибки);
		КонецЕсли;

		СопрТрансДок = ПолучитьОбъектТипаCML("СопрДокТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СопрТрансДок, "НаимСопрДок", ОбстоятельстваПриемки.ТранспортныйДокумент.Наименование,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СопрТрансДок, "НомСопрДок", ОбстоятельстваПриемки.ТранспортныйДокумент.Номер, Истина,
			Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СопрТрансДок, "ДатаСопрДок", ДатаФНС(
			ОбстоятельстваПриемки.ТранспортныйДокумент.Дата), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДрОбстПрием, "СопрТрансДок", СопрТрансДок, , Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ДрОбстПрием", ДрОбстПрием, , Ошибки);

	КонецЕсли;
		
		// Сведения о лице принявшем товар.
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОЛицеПринявшемТовар")) Тогда

		СведенияОЛицеПринявшемТовар = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "СведенияОЛицеПринявшемТовар");

		СвЛицПрин = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвЛицПрин", ПространствоИмен);

		Если СведенияОЛицеПринявшемТовар.Свойство("РаботникОрганизацииПокупателя") Тогда

			РаботникОрганизацииПокупателя = СведенияОЛицеПринявшемТовар.РаботникОрганизацииПокупателя;
			РабОргПок = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвЛицПрин.РабОргПок", ПространствоИмен);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "Должность", РаботникОрганизацииПокупателя.Должность, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ИныеСвед", РаботникОрганизацииПокупателя.ИныеСведения, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ОснПолн", РаботникОрганизацииПокупателя.ОснованиеПолномочий, Истина,
				Ошибки);

			ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", РаботникОрганизацииПокупателя.Фамилия, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", РаботникОрганизацииПокупателя.Имя, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", РаботникОрганизацииПокупателя.Отчество, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РабОргПок, "ФИО", ФИО, Истина, Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "РабОргПок", РабОргПок, , Ошибки);

		ИначеЕсли СведенияОЛицеПринявшемТовар.Свойство("ИноеЛицо") Тогда
			Если СведенияОЛицеПринявшемТовар.ИноеЛицо.Свойство("ПредставительОрганизации") Тогда

				ПредставительОрганизации = СведенияОЛицеПринявшемТовар.ИноеЛицо.ПредставительОрганизации;
				ИнЛицо = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвЛицПрин.ИнЛицо", ПространствоИмен);
				ПредОргПрин = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин",
					ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "Должность", ПредставительОрганизации.Должность, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ИныеСвед", ПредставительОрганизации.ИныеСведения, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "НаимОргПрин", ПредставительОрганизации.НаименованиеОрганизации,
					Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснДоверОргПрин",
					ПредставительОрганизации.ОснованиеПолномочийОрганизации, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ОснПолнПредПрин",
					ПредставительОрганизации.ОснованиеПолномочийПредставителя, , Ошибки);

				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительОрганизации.Фамилия, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительОрганизации.Имя, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительОрганизации.Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПредОргПрин, "ФИО", ФИО, Истина, Ошибки);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ПредОргПрин", ПредОргПрин, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "ИнЛицо", ИнЛицо, , Ошибки);

			ИначеЕсли СведенияОЛицеПринявшемТовар.ИноеЛицо.Свойство("ФизическоеЛицо") Тогда

				ФизическоеЛицо = СведенияОЛицеПринявшемТовар.ИноеЛицо.ФизическоеЛицо;
				ИнЛицо = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвЛицПрин.ИнЛицо", ПространствоИмен);
				ФЛПрин = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин", ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ОснДоверФЛ", ФизическоеЛицо.ОснованиеПолномочий, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ИныеСвед", ФизическоеЛицо.ИныеСведения, , Ошибки);

				ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФизическоеЛицо.Фамилия, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ФизическоеЛицо.Имя, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ФизическоеЛицо.Отчество, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛПрин, "ФИО", ФИО, Истина, Ошибки);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнЛицо, "ФЛПрин", ФЛПрин, , Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЛицПрин, "ИнЛицо", ИнЛицо, , Ошибки);

			КонецЕсли;
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "СвЛицПрин", СвЛицПрин, , Ошибки);

	КонецЕсли;

	ДополнительныеДанныеПриемки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ДополнительныеДанныеПриемки");
	Если ЗначениеЗаполнено(ДополнительныеДанныеПриемки) Тогда

		ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("ИнфПолТип", ПространствоИмен);
		ЗаполнитьДополнительныеДанныеАктОРасхождениях(ИнфПолФХЖ1, ДополнительныеДанныеПриемки, ПространствоИмен, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ1, "ИнфПолФХЖ1", ИнфПолФХЖ1, , Ошибки);

	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ1", СодФХЖ1, , Ошибки);
		
		// Результаты приемки (расхождения).
	СодФХЖ2 = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2", ПространствоИмен);

	КраткоеОписаниеСобытия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"КраткоеОписаниеСобытия");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ2, "СодСоб", КраткоеОписаниеСобытия, Истина, Ошибки);

	ЗаключениеКомиссии = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЗаключениеКомиссии");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ2, "Заключение", ЗаключениеКомиссии, , Ошибки);

	РезультатыПриемки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "РезультатыПриемки");

	Для Каждого СтрокаРезультата Из РезультатыПриемки Цикл

		РезПрием = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "ОКЕИ_Тов", СокрЛП(СтрокаРезультата.ЕдиницаИзмеренияКод), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "НаимЕдИзм", СтрокаРезультата.ЕдиницаИзмеренияНаименование, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "РасхРабУслПрав", СтрокаРезультата.ИнформацияОРасхождениях, , Ошибки);
			// Ценности.
		Ценности = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.Ценности", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "НомСтрСопрДок", СтрокаРезультата.Товар.НомерСтрокиСопроводительногоДокумента,
			, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "НаимТов", СтрокаРезультата.Товар.Наименование, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "ХарактТов", СтрокаРезультата.Товар.Характеристика, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "СортТов", СтрокаРезультата.Товар.Сорт, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "АртикулТов", СтрокаРезультата.Товар.Артикул, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "КодТов", СтрокаРезультата.Товар.Код, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ценности, "Паспорт", СтрокаРезультата.Товар.Паспорт, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "Ценности", Ценности, Истина, Ошибки);
			
			// По документам.
		Если ЗначениеЗаполнено(СтрокаРезультата.ПоДокументу.Количество) Тогда

			ПоДокум = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.ПоДокум", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоДокум, "КолТовПрин", СтрокаРезультата.ПоДокументу.Количество, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоДокум, "ЦенаПрин", СтрокаРезультата.ПоДокументу.Цена, , Ошибки);
			СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , СтрокаРезультата.ПоДокументу.СтавкаНДС);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоДокум, "СтавНДСПрин", СтавкаНДСXDTOАктаОРасхождениях(СтавкаНДС), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоДокум, "СтоимТовНДСПрин", СтрокаРезультата.ПоДокументу.СуммаСНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоДокум, "СумНДСПрин", СтрокаРезультата.ПоДокументу.СуммаНДС, , Ошибки);
			ЗаполнитьСведенияОМаркировкеАктОРасхождениях(ПоДокум, СтрокаРезультата.ПоДокументу.Маркировка,
				ПространствоИмен, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "ПоДокум", ПоДокум, , Ошибки);

		КонецЕсли;
			
			// По факту.
		Если ЗначениеЗаполнено(СтрокаРезультата.ПоФакту.Количество) Тогда

			ПоФакту = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.ПоФакту", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоФакту, "КолТовПрин", СтрокаРезультата.ПоФакту.Количество, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоФакту, "ЦенаПрин", СтрокаРезультата.ПоФакту.Цена, , Ошибки);
			СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , СтрокаРезультата.ПоФакту.СтавкаНДС);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоФакту, "СтавНДСПрин", СтавкаНДСXDTOАктаОРасхождениях(СтавкаНДС), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоФакту, "СтоимТовНДСПрин", СтрокаРезультата.ПоФакту.СуммаСНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПоФакту, "СумНДСПрин", СтрокаРезультата.ПоФакту.СуммаНДС, , Ошибки);
			ЗаполнитьСведенияОМаркировкеАктОРасхождениях(ПоФакту, СтрокаРезультата.ПоФакту.Маркировка,
				ПространствоИмен, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "ПоФакту", ПоФакту, , Ошибки);

		КонецЕсли;
			
			// Брак.
		Если ЗначениеЗаполнено(СтрокаРезультата.Брак.Количество) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Брак.Маркировка.ТранспортныеУпаковки)
			Или ЗначениеЗаполнено(СтрокаРезультата.Брак.Маркировка.ИндивидуальныеУпаковки)
			Или ЗначениеЗаполнено(СтрокаРезультата.Брак.Маркировка.КонтрольныеИдентификационныеЗнаки) Тогда
				
			Брак = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.Брак", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Брак, "КолТовРасх", СтрокаРезультата.Брак.Количество, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Брак, "СтоимТовНДСРасх", СтрокаРезультата.Брак.СуммаСНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Брак, "СумНДСРасх", СтрокаРезультата.Брак.СуммаНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Брак, "ПоясненияРасх", СтрокаРезультата.Брак.Пояснение, , Ошибки);
			ЗаполнитьСведенияОМаркировкеАктОРасхождениях(Брак, СтрокаРезультата.Брак.Маркировка, ПространствоИмен,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "Брак", Брак, , Ошибки);

		КонецЕсли;
			
			// Бой.
		Если ЗначениеЗаполнено(СтрокаРезультата.Бой.Количество) Тогда

			Бой = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.Бой", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Бой, "КолТовРасх", СтрокаРезультата.Бой.Количество, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Бой, "СтоимТовНДСРасх", СтрокаРезультата.Бой.СуммаСНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Бой, "СумНДСРасх", СтрокаРезультата.Бой.СуммаНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Бой, "ПоясненияРасх", СтрокаРезультата.Бой.Пояснение, , Ошибки);
			ЗаполнитьСведенияОМаркировкеАктОРасхождениях(Бой, СтрокаРезультата.Бой.Маркировка, ПространствоИмен, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "Бой", Бой, , Ошибки);

		КонецЕсли;
			
			// Недостача.
		Если ЗначениеЗаполнено(СтрокаРезультата.Недостача.Количество) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Недостача.СуммаНДС) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Недостача.СуммаСНДС)
			Или ЗначениеЗаполнено(СтрокаРезультата.Недостача.Маркировка.ТранспортныеУпаковки) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Недостача.Маркировка.ИндивидуальныеУпаковки) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Недостача.Маркировка.КонтрольныеИдентификационныеЗнаки) Тогда

			Недостача = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.Недостача", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Недостача, "КолТовРасх", СтрокаРезультата.Недостача.Количество, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Недостача, "СтоимТовНДСРасх", СтрокаРезультата.Недостача.СуммаСНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Недостача, "СумНДСРасх", СтрокаРезультата.Недостача.СуммаНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Недостача, "ПоясненияРасх", СтрокаРезультата.Недостача.Пояснение, , Ошибки);
			ЗаполнитьСведенияОМаркировкеАктОРасхождениях(Недостача, СтрокаРезультата.Недостача.Маркировка,
				ПространствоИмен, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "Недостача", Недостача, , Ошибки);

		КонецЕсли;			
			
			// Излишки.
		Если ЗначениеЗаполнено(СтрокаРезультата.Излишки.Количество) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Излишки.СуммаНДС) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Излишки.СуммаСНДС)
			Или ЗначениеЗаполнено(СтрокаРезультата.Излишки.Маркировка.ТранспортныеУпаковки) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Излишки.Маркировка.ИндивидуальныеУпаковки) 
			Или ЗначениеЗаполнено(СтрокаРезультата.Излишки.Маркировка.КонтрольныеИдентификационныеЗнаки) Тогда

			Излишки = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.Излишки", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Излишки, "КолТовРасх", СтрокаРезультата.Излишки.Количество, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Излишки, "СтоимТовНДСРасх", СтрокаРезультата.Излишки.СуммаСНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Излишки, "СумНДСРасх", СтрокаРезультата.Излишки.СуммаНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Излишки, "ПоясненияРасх", СтрокаРезультата.Излишки.Пояснение, , Ошибки);
			ЗаполнитьСведенияОМаркировкеАктОРасхождениях(Излишки, СтрокаРезультата.Излишки.Маркировка,
				ПространствоИмен, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "Излишки", Излишки, , Ошибки);

		КонецЕсли;
			
			// Ценовые отклонения.
		Если СтрокаРезультата.ЦеновыеОтклонения.Цена > 0 Или СтрокаРезультата.ЦеновыеОтклонения.СуммаНДС > 0
			Или СтрокаРезультата.ЦеновыеОтклонения.СуммаСНДС > 0 Тогда

			ЦенОтклон = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.ЦенОтклон", ПространствоИмен);
			ПолДельта = ПолучитьОбъектТипаCML("ДельтаТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолДельта, "ДельтаЦена", СтрокаРезультата.ЦеновыеОтклонения.Цена, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолДельта, "ДельтаСтоимНДС", СтрокаРезультата.ЦеновыеОтклонения.СуммаСНДС, Истина,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолДельта, "ДельтаСумНДС", СтрокаРезультата.ЦеновыеОтклонения.СуммаНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолДельта, "ПояснДельта", СтрокаРезультата.ЦеновыеОтклонения.Пояснение, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЦенОтклон, "ПолДельта", ПолДельта, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "ЦенОтклон", ЦенОтклон, , Ошибки);

		ИначеЕсли СтрокаРезультата.ЦеновыеОтклонения.Цена < 0 Или СтрокаРезультата.ЦеновыеОтклонения.СуммаНДС < 0
			Или СтрокаРезультата.ЦеновыеОтклонения.СуммаСНДС < 0 Тогда

			ЦенОтклон = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.РезПрием.ЦенОтклон", ПространствоИмен);
			ОтрицатДельта = ПолучитьОбъектТипаCML("ДельтаТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтрицатДельта, "ДельтаЦена", (-1) * СтрокаРезультата.ЦеновыеОтклонения.Цена, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтрицатДельта, "ДельтаСтоимНДС", (-1) * СтрокаРезультата.ЦеновыеОтклонения.СуммаСНДС,
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтрицатДельта, "ДельтаСумНДС", (-1) * СтрокаРезультата.ЦеновыеОтклонения.СуммаНДС, ,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОтрицатДельта, "ПояснДельта", СтрокаРезультата.ЦеновыеОтклонения.Пояснение, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЦенОтклон, "ОтрицатДельта", ОтрицатДельта, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РезПрием, "ЦенОтклон", ЦенОтклон, , Ошибки);

		КонецЕсли;

		// Дополнительные данные.
		Если ТипЗнч(СтрокаРезультата.ДопДанныеПодписанные) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаДопДанных Из СтрокаРезультата.ДопДанныеПодписанные Цикл

				ИнфПолРезПрием = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолРезПрием, "Идентиф", СтрокаДопДанных.Идентификатор, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолРезПрием, "Значен", СтрокаДопДанных.Значение, Истина, Ошибки);
				РезПрием.ИнфПолРезПрием.Добавить(ИнфПолРезПрием);

			КонецЦикла;
		КонецЕсли;

		СодФХЖ2.РезПрием.Добавить(РезПрием);

	КонецЦикла;
		
		// Прилагаемые документы.
	ПрилагаемыеДокументы = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ПрилагаемыеДокументы");
	Для Каждого СтрокаДокумента Из ПрилагаемыеДокументы Цикл

		ПрилДок = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ2.ПрилДок", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрилДок, "ВидПрилДок", СтрокаДокумента.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрилДок, "НомерПрилДок", СтрокаДокумента.Номер, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрилДок, "ДатаПрилДок", ДатаФНС(СтрокаДокумента.Дата), Истина, Ошибки);
		СодФХЖ2.ПрилДок.Добавить(ПрилДок);

	КонецЦикла;

	ВидОперации = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных,
		"ВидОперации");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ2, "ВидОперации", ВидОперации, , Ошибки);
		
		// Дополнительные данные расхождения.
	ДополнительныеДанныеРасхождения = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ДополнительныеДанныеРасхождения");
	Если ТипЗнч(ДополнительныеДанныеРасхождения) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ДополнительныеДанныеРасхождения Цикл

			ИнфПолФХЖ2 = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ2, "Идентиф", КлючЗначение.Ключ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ2, "Значен", КлючЗначение.Значение, Истина, Ошибки);
			СодФХЖ2.ИнфПолФХЖ2.Добавить(ИнфПолФХЖ2);

		КонецЦикла;
	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ2", СодФХЖ2, , Ошибки);
	Документ.ИнфДопСв.Добавить("1"); // К документу дополнительная информация не составляется.
		
		// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, Ошибки); // Лицо, ответственное за оформление события (операции).
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "5", Истина, Ошибки); // Работник организации - покупателя.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ПризнОзнак", "1", Истина, Ошибки);
		// В подписанте пустым значением заполняется поле Физ.лицо.
	ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки);
	Документ.Подписант.Добавить(Подписант);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ЗаполнитьДокумент_УКД_ИнформацияПродавца(Знач Данные)

	ДеревоДанных = Данные;

	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДанныеЭлектронногоАктированияЕИС") = Истина Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УКД_ИнформацияПродавца(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_УКД_ИнформацияПродавца();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомиссионере")) Тогда
		СвКомиссионера = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУКД(СвКомиссионера, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОКомиссионере");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомиссионера);
		
		СтрXML = ЗаписьXML.Закрыть();
		НачПоз = СтрНайти(СтрXML, "<ИдСв>");
		КолСимв = СтрНайти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
		СтрXML = Сред(СтрXML, НачПоз, КолСимв);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ДанныеКомиссионера";
		НоваяСтрока.Значение = СтрXML;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);

	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"), , Ошибки);
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02", Истина, Ошибки);
	КонецЕсли;

	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);

	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если СведенияОбОператореЗаполнены(Участники.Оператор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		НаимОрг = Участники.Оператор.Наименование;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = Участники.Оператор.ИНН;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = Участники.Оператор.Идентификатор;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1115127", Истина, Ошибки);
	ФункцияУКД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Функция", ФункцияУКД, Истина, Ошибки);

	ПоФактХЖ = ?(ФункцияУКД = КСЧФ(),
		"",
		"Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", ПоФактХЖ,, Ошибки);
	
	НаимДокОпр = "";	
	Если ФункцияУКД = КСЧФДИС() Тогда
		НаимДокОпр = "Корректировочный счет-фактура и документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав";
	ИначеЕсли ФункцияУКД = ДИС() Тогда
		НаимДокОпр = "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав";
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", НаимДокОпр,, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОснДоверОргСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , Ошибки);
		
		// Сведения о счете-фактуре.
		ДанныеСчетаФактуры = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИмен);
		
		НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
		ДатаДок = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
		КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "НомерКСчФ", НомерДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДатаКСчФ", ДатаДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "КодОКВ", КодВалюты, Истина, Ошибки);
		
		НомИспрКСчФ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
		ДатаИспрКСчФ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
		Если ЗначениеЗаполнено(НомИспрКСчФ) И ЗначениеЗаполнено(ДатаИспрКСчФ) Тогда
			ДатаИспрКСчФ = ДатаФНС(ДатаИспрКСчФ);
			ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомИспрКСчФ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаИспрКСчФ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры,"ИспрКСчФ", ИспрКСчФ, , Ошибки);
		КонецЕсли;
		
		СчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ", ПространствоИмен);
		НомерСчФ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента");
		ДатаСчФ = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СчФ, "НомерСчФ", НомерСчФ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СчФ, "ДатаСчФ", ДатаСчФ, Истина, Ошибки);
		
		НомИспрСчФ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента");
		ДатаИспрСчФ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
		
		Если ЗначениеЗаполнено(НомИспрСчФ) И ЗначениеЗаполнено(ДатаДок) Тогда
			ДатаИспрСчФ = ДатаФНС(ДатаИспрСчФ);
			ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ.ИспрСчФ", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомИспрСчФ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаИспрСчФ, Истина, Ошибки);
			СчФ.ИспрСчФ.Добавить(ИспрСчФ);
		КонецЕсли;
		ДанныеСчетаФактуры.СчФ.Добавить(СчФ);
		
		СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУКД(СвПрод, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОПродавце");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПрод", СвПрод, Истина, Ошибки);
		
		СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУКД(СвПокуп, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОПокупателе");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПокуп", СвПокуп, Истина, Ошибки);
		
		ДопСвФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ДопСвФХЖ1", ПространствоИмен);
		ЗаполнитьНаименованиеВалютыXML(ДопСвФХЖ1, КодВалюты, Ошибки);
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках")) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ИдГосКон",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта"), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "КурсВал",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс"), , Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДопСвФХЖ1", ДопСвФХЖ1, , Ошибки);
		
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры")) Тогда
			ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПолФХЖ1", ПространствоИмен);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ1, "ИдФайлИнфПол",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДопДанныеСчетаФактуры.ИдентификаторФайла"), , Ошибки);
				
			СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
			СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
						"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
					
					ИнфПолФХЖ1.ТекстИнф.Добавить(ТекстИнфТип);
				КонецЦикла;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ИнфПолФХЖ1", ИнфПолФХЖ1, , Ошибки);
			КонецЕсли;
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", ДанныеСчетаФактуры, Истина, Ошибки);
		
		// Сведения таблицы счета-фактуры.
		ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИмен);
		ВсеСтрокиБезНДСДо = Истина; ВсеСтрокиБезНДСПосле = Истина;
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИмен);
			
			// Обязательные реквизиты:
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, Ошибки);
			
			РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
			СтавкаНДСДо = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДСДо);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтДо", СтавкаXDTO, Истина, Ошибки);
			РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
			СтавкаНДСПосле = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
			СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДСПосле);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтПосле", СтавкаXDTO, Истина, Ошибки);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовДо", Реквизит, , Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовПосле", Реквизит, , Ошибки);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовДо", Реквизит, , Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.Количество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовПосле", Реквизит, , Ошибки);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовДо", Реквизит, , Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовПосле", Реквизит, , Ошибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИмен);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", "без акциза", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Реквизит, Истина, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизДо", СумАкцизТип, Истина, Ошибки);
			
			СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИмен);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкциза");
			Если НЕ ЗначениеЗаполнено(Реквизит) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", "без акциза", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Реквизит, Истина, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизПосле", СумАкцизТип, Истина, Ошибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИмен);
			СумУвел = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаУвеличение");
			СумУм = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаАкцизаУменьшение");
			Если Не ЗначениеЗаполнено(СумУвел) И Не ЗначениеЗаполнено(СумУм) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", 0, Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(СумУвел) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", СумУвел, Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(СумУм) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", СумУм, Истина, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизРазн", РазнСумНалТип, Истина, Ошибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
			Если НЕ ЗначениеЗаполнено(Реквизит) И ВРег(СтавкаНДСДо) = ВРег("без НДС") Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
			Иначе
				ВсеСтрокиБезНДСДо = Ложь;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалДо", СумНДСТип, Истина, Ошибки);
			
			СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			Если НЕ ЗначениеЗаполнено(Реквизит) И ВРег(СтавкаНДСПосле) = ВРег("без НДС") Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
			Иначе
				ВсеСтрокиБезНДСПосле = Ложь;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалПосле", СумНДСТип, Истина, Ошибки);
			
			РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИмен);
			СумУвел = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение");
			СумУм = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");
			Если Не ЗначениеЗаполнено(СумУвел) И Не ЗначениеЗаполнено(СумУм) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", 0, Истина, Ошибки);
				
			ИначеЕсли ЗначениеЗаполнено(СумУвел) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУвел", СумУвел, Истина, Ошибки);
				
			ИначеЕсли ЗначениеЗаполнено(СумУм) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, "СумУм", СумУм, Истина, Ошибки);
				
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СумНалРазн", РазнСумНалТип, Истина, Ошибки);
			
			// Стоимость без налога
			СуммаДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
			СуммаПосле = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
			Если ЗначениеЗаполнено(СуммаДо) ИЛИ ЗначениеЗаполнено(СуммаПосле) Тогда
				СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", СуммаДо, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", СуммаПосле, Истина, Ошибки);
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУвеличение");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", Реквизит, , Ошибки);
				КонецЕсли;
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаУменьшение");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", Реквизит, , Ошибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовБезНДС", СтоимТип, , Ошибки);
			КонецЕсли;
			
			// Стоимость с налогом
			СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИмен);
			СуммаДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", СуммаДо, Истина, Ошибки);
			СуммаПосле = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", СуммаПосле, Истина, Ошибки);
			СтоимУвел = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУвеличение");
			Если ЗначениеЗаполнено(СтоимУвел) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", СтоимУвел, Истина, Ошибки);
			КонецЕсли;
			СтоимУм = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомУменьшение");
			Если ЗначениеЗаполнено(СтоимУм) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", СтоимУм, Истина, Ошибки);
			ИначеЕсли Не ЗначениеЗаполнено(СтоимУвел) Тогда
				НалоговаяСтавка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
				Если ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(НалоговаяСтавка) Тогда
					СтоимУм = 0;
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", СтоимУм, Истина, Ошибки);
				КонецЕсли;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "СтТовУчНал", СтоимТип, Истина, Ошибки);
			
			// Дополнительные сведения о товаре
			ДопСведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ДопСведТов", ПространствоИмен);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КорреспондирующиеСчетаДебет");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КорСчДебет", Реквизит, , Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.КорреспондирующиеСчетаКредит");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КорСчКредит", Реквизит, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДопСведТов", ДопСведТов, Истина, Ошибки);
			
			СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
					ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
						"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);
					
					СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
				КонецЦикла;
			КонецЕсли;
			
			// Выгружаем доп. данные.
			СтрокаДопДанных = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть");
			Если ТипЗнч(СтрокаДопДанных.Значение) = Тип("Число") И СтрокаДопДанных.Значение > 0 Тогда
				Для Каждого ТекСтрокаДопДанных Из СтрокаДопДанных.Строки Цикл
					
					ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Идентификатор");
					ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Значение"); 
					
					ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", ЗначениеДопДанных, Истина, Ошибки);
					
					СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
				КонецЦикла;
			КонецЕсли;
			
			ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
		КонецЦикла;
		
		// Всего увеличение/уменьшение.
		ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", Реквизит, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", Реквизит, Истина, Ошибки);
		
		СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение");
		Если Не ЗначениеЗаполнено(Реквизит) И ВсеСтрокиБезНДСДо И ВсеСтрокиБезНДСПосле Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУвел", ВсегоУвел, Истина, Ошибки);
		
		ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", Реквизит, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", Реквизит, Истина, Ошибки);
		
		СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение");
		Если Не ЗначениеЗаполнено(Реквизит) И ВсеСтрокиБезНДСДо И ВсеСтрокиБезНДСПосле Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУм", ВсегоУм, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТабличнаяЧасть, Истина, Ошибки);
	
		// Сведения о факте отгрузки товаров.
		ДанныеОбИзмененииСтоимости = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "СодОпер",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, Ошибки);
		ДатаНаправленияНаСогласование = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаНаправленияНаСогласование"));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ДатаНапр", ДатаНаправленияНаСогласование, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ИныеСвИзмСтоим",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости"), , Ошибки);
			
		РеквизитыПередаточныхДокументов = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "РеквизитыПередаточныхДокументов");
		Если РеквизитыПередаточныхДокументов = Неопределено Тогда
			РеквизитыПередаточныхДокументов = "";
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ПередатДокум", РеквизитыПередаточныхДокументов, Истина, Ошибки);
			
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОснованиеКорректировки");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокаТаблицы = ДеревоДанных.Строки.Найти("ОснованиеКорректировки", "ПолныйПуть");
			Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
				Для Каждого Основание Из СтрокаТаблицы.Строки Цикл
					ОснКор = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.ОснКор", ПространствоИмен);
					
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснКор, "НаимОсн",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументНаименование"), Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснКор, "НомОсн",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументНомер"), , Ошибки);
						
					ДокументДата = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументДата"));
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснКор, "ДатаОсн", ДокументДата, , Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснКор, "ДопСвОсн",
						ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Основание,
						"ОснованиеКорректировки.НомерСтроки.ДокументДопСведения"), , Ошибки);
					
					ДанныеОбИзмененииСтоимости.ОснКор.Добавить(ОснКор);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОснКор = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.ОснКор", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснКор, "НаимОсн", "Отсутствует", Истина, Ошибки);
			ДанныеОбИзмененииСтоимости.ОснКор.Добавить(ОснКор);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", ДанныеОбИзмененииСтоимости, Истина, Ошибки);
	
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			
			// Для ЕИС список подписантов определяется заранее.
			МодульЭлектронноеАктированиеЕИС.ЗаполнитьСведенияОПодписантах(
				ДеревоДанных, Документ, ПространствоИмен, Ошибки);
			
		Иначе
	
			// Сведения о лице, подписывающем файл обмена.
			Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "6", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
			
			// В подписанте пустым значением заполняется поле Физ.лицо.
			ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки);
			
			Документ.Подписант.Добавить(Подписант);
		
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
		// Формирование приложения для ЕИС в сфере закупок.
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			РезультатСозданияПриложения = МодульЭлектронноеАктированиеЕИС.
				СформироватьДанныеПриложенияУКДДляЕИС(ДеревоДанных, ИдентификаторФайла);
			Если НЕ РезультатСозданияПриложения.Выполнено Тогда
				ВызватьИсключение(РезультатСозданияПриложения.ОписаниеОшибки);
			КонецЕсли;
				
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные =
				РезультатСозданияПриложения.ДвоичныеДанные;
			Результат.ДанныеДополнительногоФайла.ИмяФайла =
				РезультатСозданияПриложения.ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_УКД_ИнформацияПокупателя(Знач Данные)
	
	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	ИнформацияПродавца = ОбъектXDTO_УКД_ИнформацияПродавца(Основание.ДвоичныеДанные);
	
	ПространствоИмен = ПространствоИмен_УКД_ИнформацияПокупателя();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УКД_ИнформацияПокупателя(ДеревоДанных, ДатаФормирования);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.02", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	ИнфПок = ПолучитьОбъектТипаCML("Файл.ИнфПок", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "КНД", "1115128", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ДатаИнфПок", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ВремИнфПок", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ОснДоверОргСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , Ошибки);

	ИдИнфПрод = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИдИнфПрод", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ИдФайлИнфПр", ИнформацияПродавца.ИдФайл, Истина, Ошибки);
	ДатаДокИнфПр = ИнформацияПродавца.Документ.ДатаИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, Ошибки);
	ВремФайлИнфПр = ИнформацияПродавца.Документ.ВремИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ВремФайлИнфПр", ВремФайлИнфПр, Истина, Ошибки);

	Подписи = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПодписиОснования");
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи = Новый Массив;
		Подписи.Добавить("---");
	КонецЕсли;
	Для Каждого Подпись Из Подписи Цикл
		ИдИнфПрод.ЭП.Добавить(Подпись);
	КонецЦикла;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ИдИнфПрод", ИдИнфПрод, Истина, Ошибки);

	СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4", ПространствоИмен);  
	НаименованиеДокументОтправителя = ИнформацияПродавца.Документ.НаимДокОпр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", НаименованиеДокументОтправителя, Истина, Ошибки);
	ФункцияОтпр = ИнформацияПродавца.Документ.Функция;  
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ФункцияПр", ФункцияОтпр, Истина, Ошибки);
	НомерИнфПр = ИнформацияПродавца.Документ.СвКСчФ.НомерКСчФ;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомДокИнфПр", НомерИнфПр, , Ошибки);
	ДатаИнформацииПродавца = ДатаФНС(ИнформацияПродавца.Документ.СвКСчФ.ДатаКСчФ);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаДокИнфПр", ДатаИнформацииПродавца, Истина, Ошибки);

	СвСоглас = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвСоглас", ПространствоИмен);
	ДатаСогласования = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаСогласования"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСоглас, "ДатаСоглас", ДатаСогласования, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСоглас, "СодОпер", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СодержаниеОперации"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "СвСоглас", СвСоглас, Истина, Ошибки);

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДопДанныеДокументаПолучения")) Тогда
		ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "ИдФайлИнфПол", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДопДанныеДокументаПолучения.ИдентификаторФайла"), , Ошибки);

		СтрокиДопДанныеДокументаПолучения = ДеревоДанных.Строки.Найти("ДопДанныеДокументаПолучения", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеДокументаПолучения.Строки.Найти(
			"ДопДанныеДокументаПолучения.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					Информация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина,
					Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					Информация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);

				ИнфПолФХЖ4.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ИнфПолФХЖ4", ИнфПолФХЖ4, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "СодФХЖ4", СодФХЖ4, Истина, Ошибки);
		
		// Сведения о лице, подписывающем файл обмена.
	Подписант = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);

	ФЛ = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ", ПространствоИмен);
	ФИО = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ.ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
		
	ИнфПок.Подписант.Добавить(Подписант);
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИнфПок", ИнфПок, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_УКД2020_ИнформацияПродавца(Знач Данные)

	ДеревоДанных = Данные;

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УКД2020_ИнформацияПродавца(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_УКД2020_ИнформацияПродавца();
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДанныеЭлектронногоАктированияЕИС") = Истина Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомиссионере")) Тогда
		СвКомиссионера = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУКД(СвКомиссионера, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОКомиссионере");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомиссионера);
		
		СтрXML = ЗаписьXML.Закрыть();
		НачПоз = СтрНайти(СтрXML, "<ИдСв>");
		КолСимв = СтрНайти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
		СтрXML = Сред(СтрXML, НачПоз, КолСимв);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ДанныеКомиссионера";
		НоваяСтрока.Значение = СтрXML;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОКомитенте")) Тогда
		СвКомитента = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеУКД(СвКомитента, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОКомитенте");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СвКомитента);
		
		СтрXML = ЗаписьXML.Закрыть();
		НачПоз = СтрНайти(СтрXML, "<ИдСв>");
		КолСимв = СтрНайти(СтрXML, "</ИдСв>") - НачПоз + СтрДлина("</ИдСв>");
		СтрXML = Сред(СтрXML, НачПоз, КолСимв);
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ДанныеКомитента";
		НоваяСтрока.Значение = СтрXML;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);

	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);

	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);

	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если СведенияОбОператореЗаполнены(Участники.Оператор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		НаимОрг = Участники.Оператор.Наименование;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, Ошибки);
		ИННЮЛ = Участники.Оператор.ИНН;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, Ошибки);
		ИдЭДО = Участники.Оператор.Идентификатор;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", ИдЭДО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1115133", Истина, Ошибки);
	ФункцияУКД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Функция", ФункцияУКД, Истина, Ошибки);
	
	ПоФактХЖ = "";
	Если ФункцияУКД = КСЧФДИС() ИЛИ ФункцияУКД = ДИС() Тогда
		ПоФактХЖ = "Документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав";
	ИначеЕсли ФункцияУКД = СвИСРК() Тогда
		ПоФактХЖ = "Документ, включающий в себя сведения об изменении стоимости товара комитента (принципала), ранее реализованного покупателю комиссионером (агентом, действующим от собственного имени)";
	ИначеЕсли ФункцияУКД = СвИСЗК() Тогда
		ПоФактХЖ = "Документ, включающий в себя сведения об изменении стоимости товара, ранее приобретенного для комитента (принципала) комиссионером (агентом, действующим от собственного имени)";
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ПоФактХЖ", ПоФактХЖ,, Ошибки);
	
	НаимДокОпр = "";
	Если ФункцияУКД = КСЧФДИС() ИЛИ ФункцияУКД = ДИС() Тогда
		НаимДокОпр = "Документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав";
	ИначеЕсли ФункцияУКД = СвИСРК() Тогда
		НаимДокОпр = "Документ, включающий в себя сведения об изменении стоимости товара комитента (принципала), ранее реализованного покупателю комиссионером (агентом, действующим от собственного имени)";
	ИначеЕсли ФункцияУКД = СвИСЗК() Тогда
		НаимДокОпр = "Документ, включающий в себя сведения об изменении стоимости товара комитента (принципала), ранее реализованного покупателю комиссионером (агентом, действующим от собственного имени)";
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимДокОпр", НаимДокОпр,, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПр", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВремИнфПр", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОснДоверОргСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , Ошибки);
		
	// Сведения о счете-фактуре.
	ДанныеСчетаФактуры = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИмен);

	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДатаДок = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "НомерКСчФ", НомерДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДатаКСчФ", ДатаДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "КодОКВ", КодВалюты, Истина, Ошибки);

	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	Если ЗначениеЗаполнено(НомерДок) И ЗначениеЗаполнено(ДатаДок) Тогда
		ДатаДок = ДатаФНС(ДатаДок);
		ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомерДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаДок, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ИспрКСчФ", ИспрКСчФ, , Ошибки);
	КонецЕсли;
	
	ТаблицаОснований = ДеревоДанных.Строки.Найти("ИсходныеДокументы", "ПолныйПуть");
	Для каждого Основание Из ТаблицаОснований.Строки Цикл
		СчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ", ПространствоИмен);
		
		НомерДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Основание, "ИсходныеДокументы.НомерСтроки.НомерИсходногоДокумента");
		ДатаДокумента = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Основание, "ИсходныеДокументы.НомерСтроки.ДатаИсходногоДокумента"));
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СчФ, "НомерСчФ", НомерДокумента, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СчФ, "ДатаСчФ", ДатаДокумента, Истина, Ошибки);
		
		ТаблицаИсправлений = Основание.Строки.Найти("ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента");
		
		Для Каждого Исправление Из ТаблицаИсправлений.Строки Цикл
			
			НомерИсправления = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Исправление,
				"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента.НомерСтроки.НомерИсправленияИсходногоДокумента");
			ДатаИсправления = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Исправление,
				"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента.НомерСтроки.ДатаИсправленияИсходногоДокумента"));
			
			Если ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления) Тогда
				ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.СчФ.ИспрСчФ", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомерИсправления, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаИсправления, Истина, Ошибки);
				СчФ.ИспрСчФ.Добавить(ИспрСчФ);
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСчетаФактуры.СчФ.Добавить(СчФ);
	КонецЦикла;

	СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеУКД(СвПрод, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОПродавце");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПрод", СвПрод, Истина, Ошибки);

	СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеУКД(СвПокуп, ДеревоДанных, Ошибки, ПространствоИмен, "СведенияОПокупателе");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "СвПокуп", СвПокуп, Истина, Ошибки);

	ДопСвФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ДопСвФХЖ1", ПространствоИмен);
	ЗаполнитьНаименованиеВалютыXML(ДопСвФХЖ1, КодВалюты, Ошибки);
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках")) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "ИдГосКон", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСвФХЖ1, "КурсВал", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс"), , Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ДопСвФХЖ1", ДопСвФХЖ1, , Ошибки);

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДопДанныеСчетаФактуры")) Тогда
		ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПолФХЖ1", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ1, "ИдФайлИнфПол", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДопДанныеСчетаФактуры.ИдентификаторФайла"), , Ошибки);

		СтрокиДопДанныеСчетаФактуры = ДеревоДанных.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация",
			"ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнфТип = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);

				ИнфПолФХЖ1.ТекстИнф.Добавить(ТекстИнфТип);
			КонецЦикла;

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеСчетаФактуры, "ИнфПолФХЖ1", ИнфПолФХЖ1, , Ошибки);
		КонецЕсли;
	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", ДанныеСчетаФактуры, Истина, Ошибки);
		
		// Сведения таблицы счета-фактуры.
	ТабличнаяЧасть = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИмен);
	ВсеСтрокиБезНДС = Истина;

	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Если ПоказателиНеКорректировалисьУКД2020(Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОТоваре = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов", ПространствоИмен);
		
		// Обязательные реквизиты:
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НомСтр", Товар.Значение, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НаимТов", Реквизит, Истина, Ошибки);

		РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
		СтавкаНДСДо = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
		СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДСДо);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтДо", СтавкаXDTO, Истина, Ошибки);
		РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		СтавкаНДСПосле = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
		СтавкаXDTO = СтавкаНДСXDTO(СтавкаНДСПосле);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "НалСтПосле", СтавкаXDTO, Истина, Ошибки);

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.НомерСтрокиИсходногоДокумента");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ПорНомТовВСЧФ", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовДо", Реквизит, , Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.Количество");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "КолТовПосле", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовДо", Реквизит, , Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ЦенаТовПосле", Реквизит, , Ошибки);
		КонецЕсли;

		СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.СуммаАкцизаДоКорректировки");
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", "без акциза", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Реквизит, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизДо", СумАкцизТип, Истина, Ошибки);

		СумАкцизТип = ПолучитьОбъектТипаCML("СумАкцизТип", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.СуммаАкциза");
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "БезАкциз", "без акциза", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумАкцизТип, "СумАкциз", Реквизит, Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "АкцизПосле", СумАкцизТип, Истина, Ошибки);
		
		// Сумма акциза увеличение/уменьшение
		ЗаполнитьСуммуАкцизаУвеличениеУменьшениеУКД_2020(
			СведенияОТоваре, Товар, ПространствоИмен, Ошибки, ЭтоЭлектронноеАктированиеЕИС);
		
		ЗаполнитьСуммуНалогаДоИзмененияУКД_2020(СведенияОТоваре, Товар, ПространствоИмен, Ошибки);
		
		ЗаполнитьСуммуНалогаПослеИзмененияУКД_2020(СведенияОТоваре, Товар, ПространствоИмен, Ошибки);
		
		Если ВРег(СтавкаНДСДо) <> ВРег("без НДС")
			ИЛИ ВРег(СтавкаНДСПосле) <> ВРег("без НДС") Тогда
			ВсеСтрокиБезНДС = Ложь;
		КонецЕсли;
		
		// Сумма налога увеличение/уменьшение
		ЗаполнитьСуммуНалогаУвеличениеУменьшениеУКД_2020(СведенияОТоваре, Товар, ПространствоИмен, Ошибки);
		
		// Стоимость без налога
		ЗаполнитьСтоимостьТовараУКД_2020(СведенияОТоваре, Товар, ПространствоИмен, Ложь, ФункцияУКД, Ошибки);
			
		// Стоимость с налогом
		ЗаполнитьСтоимостьТовараУКД_2020(СведенияОТоваре, Товар, ПространствоИмен, Истина, ФункцияУКД, Ошибки);
			
		// Дополнительные сведения о товаре
		ДопСведТов = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ДопСведТов", ПространствоИмен);
		
		НаименованиеЕдиницыИзмеренияДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.НаименованиеЕдиницыИзмеренияДоКорректировки");
		КодЕдиницыИзмеренияДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКодДоКорректировки");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "НаимЕдИзмДо", НаименованиеЕдиницыИзмеренияДо, , Ошибки);
		Если ЗначениеЗаполнено(НаименованиеЕдиницыИзмеренияДо) Тогда
			Если Не ЗначениеЗаполнено(КодЕдиницыИзмеренияДо) Тогда
				КодЕдиницыИзмеренияДо = "0000";
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовДо", КодЕдиницыИзмеренияДо, , Ошибки);
		КонецЕсли;
		
		НаименованиеЕдиницыИзмеренияПосле = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.НаименованиеЕдиницыИзмеренияПослеКорректировки");
		КодЕдиницыИзмеренияПосле = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "НаимЕдИзмПосле", НаименованиеЕдиницыИзмеренияПосле, , Ошибки);
		Если ЗначениеЗаполнено(НаименованиеЕдиницыИзмеренияПосле) Тогда
			Если Не ЗначениеЗаполнено(КодЕдиницыИзмеренияПосле) Тогда
				КодЕдиницыИзмеренияПосле = "0000";
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ОКЕИ_ТовПосле", КодЕдиницыИзмеренияПосле, , Ошибки);
		КонецЕсли;
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ХарактеристикаОписаниеТовара");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ХарактерТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.СортТовара");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "СортТов", Реквизит, , Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.АртикулТовара");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "АртикулТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.КодТовара");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодТов", Реквизит, , Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.КодВидаТовара");
			
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодВидТов", Реквизит, , Ошибки);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, "ДопСведТов", ДопСведТов, Истина, Ошибки);

		СведенияОМаркировкеДо = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо");
		Если ЗначениеЗаполнено(СведенияОМаркировкеДо.ТранспортныеУпаковки) Тогда
			Для Каждого СтрокаКода Из СведенияОМаркировкеДо.ТранспортныеУпаковки Цикл
				НомСредИдентТовДо = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НомСредИдентТовДо",
					ПространствоИмен);
				НомСредИдентТовДо.ИдентТрансУпак = СтрокаКода.Код;
				СведенияОТоваре.НомСредИдентТовДо.Добавить(НомСредИдентТовДо);
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОМаркировкеДо.КонтрольныеИдентификационныеЗнаки) Тогда
			НомСредИдентТовДо = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НомСредИдентТовДо",
				ПространствоИмен);
			Для Каждого СтрокаКода Из СведенияОМаркировкеДо.КонтрольныеИдентификационныеЗнаки Цикл
				НомСредИдентТовДо.КИЗ.Добавить(СтрокаКода.Код);
			КонецЦикла;
			СведенияОТоваре.НомСредИдентТовДо.Добавить(НомСредИдентТовДо);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОМаркировкеДо.ИндивидуальныеУпаковки) Тогда
			НомСредИдентТовДо = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НомСредИдентТовДо",
				ПространствоИмен);
			Для Каждого СтрокаКода Из СведенияОМаркировкеДо.ИндивидуальныеУпаковки Цикл
				НомСредИдентТовДо.НомУпак.Добавить(СтрокаКода.Код);
			КонецЦикла;
			СведенияОТоваре.НомСредИдентТовДо.Добавить(НомСредИдентТовДо);
		КонецЕсли;

		СведенияОМаркировкеПосле = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле");
		Если ЗначениеЗаполнено(СведенияОМаркировкеПосле.ТранспортныеУпаковки) Тогда
			Для Каждого СтрокаКода Из СведенияОМаркировкеПосле.ТранспортныеУпаковки Цикл
				НомСредИдентТовПосле = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НомСредИдентТовПосле",
					ПространствоИмен);
				НомСредИдентТовПосле.ИдентТрансУпак = СтрокаКода.Код;
				СведенияОТоваре.НомСредИдентТовПосле.Добавить(НомСредИдентТовПосле);
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки) Тогда
			НомСредИдентТовПосле = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НомСредИдентТовПосле",
				ПространствоИмен);
			Для Каждого СтрокаКода Из СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки Цикл
				НомСредИдентТовПосле.КИЗ.Добавить(СтрокаКода.Код);
			КонецЦикла;
			СведенияОТоваре.НомСредИдентТовПосле.Добавить(НомСредИдентТовПосле);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОМаркировкеПосле.ИндивидуальныеУпаковки) Тогда
			НомСредИдентТовПосле = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.НомСредИдентТовПосле",
				ПространствоИмен);
			Для Каждого СтрокаКода Из СведенияОМаркировкеПосле.ИндивидуальныеУпаковки Цикл
				НомСредИдентТовПосле.НомУпак.Добавить(СтрокаКода.Код);
			КонецЦикла;
			СведенияОТоваре.НомСредИдентТовПосле.Добавить(НомСредИдентТовПосле);
		КонецЕсли;
		
		ДанныеОбУчетномКоличестве = Новый Структура;
		
		СведенияОПрослеживаемости = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				Товар, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
		Для Каждого СтрокаПрослеживаемости Из СведенияОПрослеживаемости Цикл
			Нпп = СведенияОПрослеживаемости.Индекс(СтрокаПрослеживаемости) + 1;
			ПрефиксСведений = СтрШаблон("ДопПрослеж%1", Формат(Нпп, "ЧГ=0"));
			
			СведПрослеж = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.СведПрослеж", ПространствоИмен);
			СведПрослеж.НомТовПрослеж = СтрокаПрослеживаемости.НомерТовара;
			СведПрослеж.ЕдИзмПрослеж = СтрокаПрослеживаемости.ЕдиницаИзмеренияКод;
			СведПрослеж.ДопПрослеж = ПрефиксСведений;
			
			ИзмененияВКоличестве = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.СведПрослеж.ИзмКолЕдПТ",
				ПространствоИмен);
			ИзмененияВКоличестве.КолТовЕдПТДо = СтрокаПрослеживаемости.КоличествоТовараДоИзменения;
			ИзмененияВКоличестве.КолТовЕдПТПосле = СтрокаПрослеживаемости.КоличествоТовараПослеИзменения;
			КоличествоТовараУвеличение = СтрокаПрослеживаемости.КоличествоТовараУвеличение;
			Если ЗначениеЗаполнено(КоличествоТовараУвеличение) Тогда
				ИзмененияВКоличестве.КолТовЕдПТУвел = КоличествоТовараУвеличение;
			Иначе
				ИзмененияВКоличестве.КолТовЕдПТУм = СтрокаПрослеживаемости.КоличествоТовараУменьшение;
			КонецЕсли;
			СведПрослеж.ИзмКолЕдПТ = ИзмененияВКоличестве;
			
			СведенияОТоваре.СведПрослеж.Добавить(СведПрослеж);
			
			СтрокаУчетногоКоличества = Новый Структура;
			СтрокаУчетногоКоличества.Вставить("До", СтрокаПрослеживаемости.КоличествоТовараУчетноеДоИзменения);
			СтрокаУчетногоКоличества.Вставить("После", СтрокаПрослеживаемости.КоличествоТовараУчетноеПослеИзменения);
			Если ЗначениеЗаполнено(СтрокаПрослеживаемости.КоличествоТовараУчетноеУвеличение) Тогда
				СтрокаУчетногоКоличества.Вставить("Увел", СтрокаПрослеживаемости.КоличествоТовараУчетноеУвеличение);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаПрослеживаемости.КоличествоТовараУчетноеУменьшение) Тогда
				СтрокаУчетногоКоличества.Вставить("Ум", СтрокаПрослеживаемости.КоличествоТовараУчетноеУменьшение);
			КонецЕсли;
			ДанныеОбУчетномКоличестве.Вставить(ПрефиксСведений, СтрокаУчетногоКоличества);
		КонецЦикла;
		
		Если ДанныеОбУчетномКоличестве.Количество() > 0 Тогда
			ЗаписьJSON = Новый ЗаписьJSON;
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
			ЗаписатьJSON(ЗаписьJSON, ДанныеОбУчетномКоличестве);
			СтрокаJSON = ЗаписьJSON.Закрыть();
			
			ОграничениеДлиныСтроки = 2000;
			СтрокиJSON = Новый Массив;
			Пока СтрДлина(СтрокаJSON) > ОграничениеДлиныСтроки Цикл
				ПозЗавершенияСтроки = СтрНайти(Лев(СтрокаJSON, ОграничениеДлиныСтроки), "},", НаправлениеПоиска.СКонца);
				СтрокиJSON.Добавить(Лев(СтрокаJSON, ПозЗавершенияСтроки) + "}");
				СтрокаJSON = "{" + Сред(СтрокаJSON, ПозЗавершенияСтроки + 2);
			КонецЦикла;
			СтрокиJSON.Добавить(СтрокаJSON);
			
			Для Нпп = 1 По СтрокиJSON.Количество() Цикл
				СтрокаJSON = СтрокиJSON[Нпп - 1];
				Идентификатор = "ДопПрослеж_КоличествоУчетное";
				Если Нпп <> 1 Тогда
					Идентификатор = Идентификатор + Формат(Нпп, "ЧГ=0;");
				КонецЕсли;
				ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", Идентификатор, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", СтрокаJSON, Истина, Ошибки);
				СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
			КонецЦикла;
		КонецЕсли;
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			СтрокиТД = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			НомерСтрокиТД = 0;
			Для Каждого СтрокаТД Из СтрокиТД.Строки Цикл
				НомерСтрокиТД = НомерСтрокиТД + 1;
				
				КодСтраны = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТД,
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				Если ЗначениеЗаполнено(КодСтраны) Тогда
					ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);
					Идентификатор = "цифровой код страны происхождения";
					Если НомерСтрокиТД > 1 Тогда
						Идентификатор = Идентификатор + " " + Формат(НомерСтрокиТД, "ЧГ=0;");
					КонецЕсли;
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", Идентификатор, Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", КодСтраны, Истина, Ошибки);
					СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
					
					ДанныеСтраныМира = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(КодСтраны);
					Если ДанныеСтраныМира <> Неопределено Тогда
						НаименованиеСтраны = ДанныеСтраныМира.Наименование;
						ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);
						Идентификатор = "краткое наименование страны происхождения";
						Если НомерСтрокиТД > 1 Тогда
							Идентификатор = Идентификатор + " " + Формат(НомерСтрокиТД, "ЧГ=0;");
						КонецЕсли;
						РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", Идентификатор, Истина, Ошибки);
						РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", НаименованиеСтраны, Истина, Ошибки);
						СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
					КонецЕсли;
				КонецЕсли;
				
				НомерТД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТД,
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				Если ЗначениеЗаполнено(НомерТД) Тогда
					ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);
					Идентификатор = "регистрационный номер декларации на товары";
					Если НомерСтрокиТД > 1 Тогда
						Идентификатор = Идентификатор + " " + Формат(НомерСтрокиТД, "ЧГ=0;");
					КонецЕсли;
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", Идентификатор, Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", НомерТД, Истина, Ошибки);
					СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТаблицы = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен",
					ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"СведенияОТоварах.НомерСтроки.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);

				СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
			КонецЦикла;
		КонецЕсли;
			
		// Выгружаем доп. данные.
		СтрокаДопДанных = Товар.Строки.Найти("СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть");
		Если ТипЗнч(СтрокаДопДанных.Значение) = Тип("Число") И СтрокаДопДанных.Значение > 0 Тогда
			Для Каждого ТекСтрокаДопДанных Из СтрокаДопДанных.Строки Цикл  
				
				ИдентификаторДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Идентификатор");
				ЗначениеДопДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекСтрокаДопДанных,
						"СведенияОТоварах.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Значение");

				ТекстИнфТип = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.СведТов.ИнфПолФХЖ2", ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Идентиф", ИдентификаторДопДанных, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнфТип, "Значен", ЗначениеДопДанных, Истина, Ошибки);

				СведенияОТоваре.ИнфПолФХЖ2.Добавить(ТекстИнфТип);
			КонецЦикла;
		КонецЕсли;

		ТабличнаяЧасть.СведТов.Добавить(СведенияОТоваре);
	КонецЦикла;
		
		// Всего увеличение/уменьшение.
	ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", Реквизит, Истина, Ошибки);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", Реквизит, Истина, Ошибки);

	СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
	Если ВсеСтрокиБезНДС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
	Иначе
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУвел", ВсегоУвел, Истина, Ошибки);

	ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", Реквизит, Истина, Ошибки);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", Реквизит, Истина, Ошибки);

	СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
	Если ВсеСтрокиБезНДС Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
	Иначе
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТабличнаяЧасть, "ВсегоУм", ВсегоУм, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТабличнаяЧасть, Истина, Ошибки);
	
		// Сведения о факте отгрузки товаров.
	ДанныеОбИзмененииСтоимости = ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "СодОпер",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации"), Истина, Ошибки);
	ДатаНаправленияНаСогласование = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаНаправленияНаСогласование"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ДатаНапр", ДатаНаправленияНаСогласование, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеОбИзмененииСтоимости, "ИныеСвИзмСтоим",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости"),
		, Ошибки);

	ЗаполнитьДокументТипXML("ПередаточныйДокумент", "ПередатДокум", ДанныеОбИзмененииСтоимости, ДеревоДанных,
		ПространствоИмен, Ошибки);
	ЗаполнитьДокументТипXML("ОснованиеКорректировки", "ДокумОснКор", ДанныеОбИзмененииСтоимости, ДеревоДанных,
		ПространствоИмен, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СодФХЖ3", ДанныеОбИзмененииСтоимости, Истина, Ошибки);
	
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		МодульЭлектронноеАктированиеЕИС.ЗаполнитьСведенияОПодписантах(
			ДеревоДанных, Документ, ПространствоИмен, Ошибки);
	Иначе
	
			// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "6", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
			
			// В подписанте пустым значением заполняется поле Физ.лицо.
		ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки);
	
		Документ.Подписант.Добавить(Подписант);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			ВидДокумента = "УКДПрод";
			МодульЭлектронноеАктированиеЕИС.ПриФормированииДвоичныхДанныхЭД(
				ВидДокумента, Файл, ДеревоДанных);
		КонецЕсли;
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

		// Формирование приложения для ЕИС в сфере закупок.
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			РезультатСозданияПриложения = МодульЭлектронноеАктированиеЕИС.
				СформироватьДанныеПриложенияУКДДляЕИС(ДеревоДанных, ИдентификаторФайла);
			Если НЕ РезультатСозданияПриложения.Выполнено Тогда
				ОбщегоНазначенияБЭД.ДобавитьОшибку(
					Результат.Ошибки, РезультатСозданияПриложения.ОписаниеОшибки);
			КонецЕсли;
				
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные =
				РезультатСозданияПриложения.ДвоичныеДанные;
			Результат.ДанныеДополнительногоФайла.ИмяФайла =
				РезультатСозданияПриложения.ИмяФайла;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ЗаполнитьДокумент_УКД2020_ИнформацияПокупателя(Знач Данные)

	ДеревоДанных = Данные;
	Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
	ИнформацияПродавца = ОбъектXDTO_УКД2020_ИнформацияПродавца(Основание.ДвоичныеДанные);

	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	МодульЭлектронноеАктированиеЕИС = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС()
			И ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДанныеЭлектронногоАктированияЕИС") = Истина Тогда
			ЭтоЭлектронноеАктированиеЕИС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПространствоИмен = ПространствоИмен_УКД2020_ИнформацияПокупателя();

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УКД2020_ИнформацияПокупателя(ДеревоДанных, ДатаФормирования, ИнформацияПродавца);
	
	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИмен);
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", Участники.ИдентификаторОтправителя, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПол", Участники.ИдентификаторПолучателя, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(Участники.Оператор.Идентификатор) Тогда
		СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", Участники.Оператор.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", Участники.Оператор.ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", Участники.Оператор.Идентификатор, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр,, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, Ошибки);
	
	ИнфПок = ПолучитьОбъектТипаCML("Файл.ИнфПок", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "КНД", "1115134", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ДатаИнфПок", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ВремИнфПок", Формат(ДатаФормирования, "ДФ=HH.mm.ss"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "НаимЭконСубСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ОснДоверОргСост", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность"), , Ошибки);

	ИдИнфПрод = ПолучитьОбъектТипаCML("Файл.ИнфПок.ИдИнфПрод", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ИдФайлИнфПр", ИнформацияПродавца.ИдФайл, Истина, Ошибки);
	ДатаДокИнфПр = ИнформацияПродавца.Документ.ДатаИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ДатаФайлИнфПр", ДатаДокИнфПр, Истина, Ошибки);
	ВремФайлИнфПр = ИнформацияПродавца.Документ.ВремИнфПр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдИнфПрод, "ВремФайлИнфПр", ВремФайлИнфПр, Истина, Ошибки);

	Подписи = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПодписиОснования");
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи = Новый Массив;
		Подписи.Добавить("---");
	КонецЕсли;
	Для Каждого Подпись Из Подписи Цикл
		ИдИнфПрод.ЭП.Добавить(Подпись);
	КонецЦикла;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "ИдИнфПрод", ИдИнфПрод, Истина, Ошибки);

	СодФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4", ПространствоИмен);  
	НаименованиеДокументОтправителя = ИнформацияПродавца.Документ.НаимДокОпр;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НаимДокОпрПр", НаименованиеДокументОтправителя, Истина, Ошибки);
	ФункцияОтпр = ИнформацияПродавца.Документ.Функция;  
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ФункцияПр", ФункцияОтпр, Истина, Ошибки);
	НомерИнфПр = ИнформацияПродавца.Документ.СвКСчФ.НомерКСчФ;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "НомДокИнфПр", НомерИнфПр, , Ошибки);
	ДатаИнформацииПродавца = ДатаФНС(ИнформацияПродавца.Документ.СвКСчФ.ДатаКСчФ);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ДатаДокИнфПр", ДатаИнформацииПродавца, Истина, Ошибки);

	СвСоглас = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.СвСоглас", ПространствоИмен);
	ДатаСогласования = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаСогласования"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСоглас, "ДатаСоглас", ДатаСогласования, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвСоглас, "СодОпер", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "СодержаниеОперации"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "СвСоглас", СвСоглас, Истина, Ошибки);

	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДопДанныеДокументаПолучения")) Тогда
		ИнфПолФХЖ4 = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4", ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ4, "ИдФайлИнфПол", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДопДанныеДокументаПолучения.ИдентификаторФайла"), , Ошибки);

		СтрокиДопДанныеДокументаПолучения = ДеревоДанных.Строки.Найти("ДопДанныеДокументаПолучения", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеДокументаПолучения.Строки.Найти(
			"ДопДанныеДокументаПолучения.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("Файл.ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф", ПространствоИмен);

				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					Информация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Идентификатор"), Истина,
					Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					Информация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация.НомерСтроки.Значение"), Истина, Ошибки);

				ИнфПолФХЖ4.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СодФХЖ4, "ИнфПолФХЖ4", ИнфПолФХЖ4, Истина, Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПок, "СодФХЖ4", СодФХЖ4, Истина, Ошибки);
	
	Если ЭтоЭлектронноеАктированиеЕИС Тогда
		
		// Для ЕИС список подписантов определяется заранее.
		МодульЭлектронноеАктированиеЕИС.ЗаполнитьСведенияОПодписантах(
			ДеревоДанных, ИнфПок, ПространствоИмен, Ошибки, Истина);
		
	Иначе
		
		// Сведения о лице, подписывающем файл обмена.
		Подписант = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "5", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", "Должностные обязанности", Истина, Ошибки);
	
		ФЛ = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ", ПространствоИмен);
		ФИО = ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ФЛ.ФИО", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
		
		ИнфПок.Подписант.Добавить(Подписант);
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИнфПок", ИнфПок, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(Файл, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
		
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;
		
		// Формирование приложения для ЕИС в сфере закупок.
		Если ЭтоЭлектронноеАктированиеЕИС Тогда
			РезультатСозданияПриложения = МодульЭлектронноеАктированиеЕИС.
				СформироватьДанныеПриложенияУКДЗаказчикаДляЕИС(ДеревоДанных, ИдентификаторФайла);
			Если НЕ РезультатСозданияПриложения.Выполнено Тогда
				ВызватьИсключение(РезультатСозданияПриложения.ОписаниеОшибки);
			КонецЕсли;
				
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные =
				РезультатСозданияПриложения.ДвоичныеДанные;
			Результат.ДанныеДополнительногоФайла.ИмяФайла =
				РезультатСозданияПриложения.ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ИзвещениеОПолучении(Знач Данные)

	ДеревоДанных = Данные;

	ПространствоИмен = ПространствоИмен_ИзвещениеОПолучении();

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ИзвещениеОПолучении(ДеревоДанных, ДатаФормирования);

	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВерсияПрограммы"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.02", Истина, Ошибки);
	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1115110", Истина, Ошибки);
		
	// Отправитель
	Отправитель = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО", ПространствоИмен);
	ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(Отправитель, Данные,
		Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении, "Отправитель", Ошибки, ПространствоИмен, "1.02");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", Отправитель, Истина, Ошибки);
		
	// Общие сведения о документе
	ОбщиеСведения = ПолучитьОбъектТипаCML("Файл.Документ.СвИзвПолуч", ПространствоИмен);

	Реквизит = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.ДатаПолучения"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ДатаПол", Реквизит, Истина, Ошибки);
	Реквизит = ВернутьВремяЭСФСтрокой(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.ВремяПолучения"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ВремяПол", Реквизит, Истина, Ошибки);
				
	// Данные о полученном файле
	ПолученныйЭД = ПолучитьОбъектТипаCML("Файл.Документ.СвИзвПолуч.СведПолФайл", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ИмяПолученногоФайла");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", Реквизит, Истина, Ошибки);
		
	// ЭЦП полученного файла в кодировке Base64
	МассивЭП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ПолученныеЭП");
	Если ТипЗнч(МассивЭП) = Тип("Массив") И ЗначениеЗаполнено(МассивЭП) Тогда
		Для Каждого ЭП Из МассивЭП Цикл
			ПолученныйЭД["ЭЦППолФайл"].Добавить(ЭП);
		КонецЦикла;
	КонецЕсли;

	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента");
		
	Если Реквизит = Истина Тогда

		ДанныеДок = ПолучитьОбъектТипаCML("Файл.Документ.СвИзвПолуч.СведПолФайл.ДанПолучДок", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НаимДокумента");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НаимДок", Реквизит, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомерДокумента");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомДок", Реквизит, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаДокумента");
		Реквизит = ДатаФНС(Реквизит);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаДок", Реквизит, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрСФ", Реквизит, , Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит = ДатаФНС(Реквизит);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрСФ", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомКСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомКСФ", Реквизит, , Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаКСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит = ДатаФНС(Реквизит);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаКСФ", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрКСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрКСФ", Реквизит, , Ошибки);
		КонецЕсли;
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрКСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит = ДатаФНС(Реквизит);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрКСФ", Реквизит, , Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ДанПолучДок", ДанныеДок, , Ошибки);

	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "СведПолФайл", ПолученныйЭД, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвИзвПолуч", ОбщиеСведения, Истина, Ошибки);
		
		// Получатель
	Получатель = ПолучитьОбъектТипаCML("Файл.Документ.ОтпрДок", ПространствоИмен);
	ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(Получатель, Данные,
		Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении, "Получатель", Ошибки, ПространствоИмен, "1.02");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОтпрДок", Получатель, Истина, Ошибки);
		
		// Подписант
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должность", "---", Истина, Ошибки);

	ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", "---", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", "---", Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ЗаполнитьДокумент_ПредложениеОбАннулировании(Знач Данные)

	ДеревоДанных = Данные;

	ПространствоИмен = ПространствоИмен_ПредложениеОбАннулировании();

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ПредложениеОбАннулировании(ДеревоДанных, ДатаФормирования);

	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВерсияПрограммы"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.01", Истина, Ошибки);

	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
		// Отправитель
	Отправитель = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО", ПространствоИмен);
	ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(Отправитель, Данные,
		Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании, "Отправитель", Ошибки, ПространствоИмен, "1.01");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", Отправитель, Истина, Ошибки);
		
		// Общие сведения о документе
	ОбщиеСведения = ПолучитьОбъектТипаCML("Файл.Документ.СвПредАн", ПространствоИмен);
		
		// Данные о полученном файле
	ПолученныйЭД = ПолучитьОбъектТипаCML("Файл.Документ.СвПредАн.СведАнФайл", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ИмяПолученногоФайла");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяАнФайла", Реквизит, Истина, Ошибки);
		
		// ЭЦП полученного файла в кодировке Base64
	МассивЭП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ПолученныеЭП");
	Если ТипЗнч(МассивЭП) = Тип("Массив") И ЗначениеЗаполнено(МассивЭП) Тогда

		Для Каждого ЭП Из МассивЭП Цикл
			ПолученныйЭД["ЭЦПАнФайл"].Добавить(ЭП);
		КонецЦикла;

	КонецЕсли;

	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ТекстУточнения");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ТекстПредАн", Реквизит, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "СведАнФайл", ПолученныйЭД, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвПредАн", ОбщиеСведения, Истина, Ошибки);
		
		// Получатель
	Получатель = ПолучитьОбъектТипаCML("Файл.Документ.НапрПредАн", ПространствоИмен);
	ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(Получатель, Данные,
		Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании, "Получатель", Ошибки, ПространствоИмен, "1.01");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НапрПредАн", Получатель, Истина, Ошибки);
		
		// Подписант
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должность", "---", Истина, Ошибки);

	ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", "---", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", "---", Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);
	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ЗаполнитьДокумент_УведомлениеОбУточнении(Знач Данные)

	ДеревоДанных = Данные;

	ПространствоИмен = ПространствоИмен_УведомлениеОбУточнении();

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_УведомлениеОбУточнении(ДеревоДанных, ДатаФормирования);

	Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВерсияПрограммы"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.02", Истина, Ошибки);

	Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1115113", Истина, Ошибки);
		
		// Отправитель
	Отправитель = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО", ПространствоИмен);
	ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(Отправитель, Данные,
		Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении, "Отправитель", Ошибки, ПространствоИмен, "1.02");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", Отправитель, Истина, Ошибки);
		
		// Общие сведения о документе
	ОбщиеСведения = ПолучитьОбъектТипаCML("Файл.Документ.СвУведУточ", ПространствоИмен);
	Реквизит = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.ДатаПолучения"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ДатаПол", Реквизит, Истина, Ошибки);
	Реквизит = ВернутьВремяЭСФСтрокой(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.ВремяПолучения"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ВремяПол", Реквизит, Истина, Ошибки);

		
		// Данные о полученном файле
	ПолученныйЭД = ПолучитьОбъектТипаCML("Файл.Документ.СвУведУточ.СведПолФайл", ПространствоИмен);
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ИмяПолученногоФайла");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", Реквизит, Истина, Ошибки);
		
		// ЭЦП полученного файла в кодировке Base64
	МассивЭП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ПолученныеЭП");
	Если ТипЗнч(МассивЭП) = Тип("Массив") И ЗначениеЗаполнено(МассивЭП) Тогда

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ЭЦППолФайл", МассивЭП[0], Истина, Ошибки);

	КонецЕсли;

	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ТекстУточнения");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ТекстУведУточ", Реквизит, Истина, Ошибки);

	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента");

	Если Реквизит = Истина Тогда

		ДанныеДок = ПолучитьОбъектТипаCML("Файл.Документ.СвУведУточ.ДанПолучДок", ПространствоИмен);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НаимДокумента");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НаимДок", Реквизит, Истина, Ошибки);
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомерДокумента");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомСФ", Реквизит, Истина, Ошибки);

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаДокумента");
		Реквизит = ДатаФНС(Реквизит);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаСФ", Реквизит, Истина, Ошибки);

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрСФ", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит = ДатаФНС(Реквизит);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрСФ", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрКСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрКСФ", Реквизит, , Ошибки);
		КонецЕсли;

		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
			"ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрКСФ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит = ДатаФНС(Реквизит);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрКСФ", Реквизит, , Ошибки);
		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ДанПолучДок", ДанныеДок, , Ошибки);

	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбщиеСведения, "СведПолФайл", ПолученныйЭД, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвУведУточ", ОбщиеСведения, Истина, Ошибки);
		
		// Получатель
	Получатель = ПолучитьОбъектТипаCML("Файл.Документ.ОтпрДок", ПространствоИмен);
	ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(Получатель, Данные,
		Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении, "Получатель", Ошибки, ПространствоИмен, "1.02");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОтпрДок", Получатель, Истина, Ошибки);
		
		// Подписант
	Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Должность", "---", Истина, Ошибки);

	ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", "---", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", "---", Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДанныеПоУчастнику_СлужебныеСообщения(УчастникЭДО, Дерево, ТипДокумента, ВидУчастникаЭДО, Ошибки, ПространствоИмен, ВерсияФормата)
	
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО);
	Если Реквизит <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ИдУчастникаЭДО");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО", Реквизит, Истина, Ошибки);
	
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника");
	// Заполнение реквизитов
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении Тогда
		Если Реквизит = "ОператорЭДО" Тогда
			ОператорЭДО = ПолучитьОбъектТипаCML("Файл.Документ.ОтпрДок.ОперЭДО", ПространствоИмен);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.НаименованиеОрганизации");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОператорЭДО, "НаимОрг", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОператорЭДО, "ИННЮЛ", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.ИдентификаторОператора");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОператорЭДО, "ИдОперЭДО", Реквизит, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ОперЭДО", ОператорЭДО, Истина, Ошибки);
		ИначеЕсли Реквизит = "ИП" Тогда
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФЛТип"), ВерсияФормата);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, Ошибки);
			
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, Ошибки);
		Иначе
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ЮЛТип"), ВерсияФормата);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, Ошибки);
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении Тогда
		Если Реквизит = "ИП" Тогда
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО.ИП", ПространствоИмен);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, Ошибки);
			
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, Ошибки);
		Иначе
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО.ЮЛ", ПространствоИмен);
			
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, Ошибки);
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда
		Если Реквизит = "ИП" Тогда
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФЛТип"), ВерсияФормата);
			РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, Ошибки);
		Иначе
			РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ЮЛТип"), ВерсияФормата);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, Ошибки);
			Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, Ошибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьОбъектФормата_КоммерческиеПредложения(Данные)
	
	КонтекстПроверки = "ФорматыЭДО_ФНС.ЗаполнитьОбъектФормата_КоммерческиеПредложения";
	Результат = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения"),
		НСтр("ru='Отсутствует подсистема КоммерческиеПредложения.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		КонтекстПроверки);
	
	УчетныйДокумент = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "УчетныйДокумент");
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(УчетныйДокумент),
		НСтр("ru='В дереве ЭДО не заполнено значение по ключу УчетныйДокумент.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		КонтекстПроверки);

	МодульКоммерческиеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
	Если МодульКоммерческиеПредложенияСлужебный.ЭтоКоммерческоеПредложениеКлиенту(УчетныйДокумент) Тогда
		Результат = ЗаполнитьДокумент_КоммерческоеПредложение(Данные);
	ИначеЕсли МодульКоммерческиеПредложенияСлужебный.ЭтоЗапросКоммерческогоПредложенияПоставщику(УчетныйДокумент) Тогда
		Результат = ЗаполнитьДокумент_ЗапросКоммерческогоПредложения(Данные);
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru='В дереве ЭДО значение по ключу УчетныйДокумент имеет неожиданный тип ""%1"" в %2.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				Строка(ТипЗнч(УчетныйДокумент)),
				КонтекстПроверки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ЗапросКоммерческогоПредложения(Данные)
	
	ДеревоДанных = Данные;

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_ЗапросКоммерческогоПредложения(ДеревоДанных, ДатаФормирования);

	ПространствоИменСхемы = ПространствоИмен_КоммерческиеПредложения();

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения")
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ДополнитьЗапросКоммерческихПредложенийНоменклатуройСервиса(ДеревоДанных);
	КонецЕсли;
		
		// CommerceOfferRequest
	CommerceOfferRequest = ПолучитьОбъектТипаCML("CommerceOfferRequest", ПространствоИменСхемы);

	ИдентификаторДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Идентификатор");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "id", ИдентификаторДокумента, Истина, Ошибки);

	Номер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "number", Номер, Истина, Ошибки);

	Дата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "date", Дата, Истина, Ошибки);

	Описание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "description", Описание, Ложь, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "modified", Дата('00010101'), Ложь, Ошибки, Истина);
		
		// CommerceOfferRequest.Products
	Товары = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть").Строки;

	СопоставлениеНоменклатуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СопоставлениеНоменклатуры");

	Для Каждого Позиция Из Товары Цикл

		Products = ПолучитьОбъектТипаCML("CommerceOfferRequest.products", ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция, "Товары.НомерСтроки.Количество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "count", ЗначениеСвойства, Истина, Ошибки);
			
			// CommerceOfferRequest.Products.Product
		Product = ПолучитьОбъектТипаCML("CommerceOfferRequest.products.product", ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.НоменклатураНаименование");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "productName", ЗначениеСвойства, Истина, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.ХарактеристикаНаименование");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "characteristicName", ЗначениеСвойства, Ложь, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.ЕдиницаИзмеренияКодОКЕИ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "baseUnitOkeiCode", ЗначениеСвойства, Истина, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.ЕдиницаИзмеренияНаименование");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "baseUnitName", ЗначениеСвойства, Истина, Ошибки);

		ИдентификаторДляСопоставления = СопоставлениеНоменклатуры[Позиция.Значение];

		Если ЗначениеЗаполнено(ИдентификаторДляСопоставления) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "matchId", СопоставлениеНоменклатуры[Позиция.Значение], Ложь, Ошибки);
		КонецЕсли;
			
			// CommerceOfferRequest.Products.Product.CustomerNomenclature
		ТипОбъекта = "CommerceOfferRequest.products.product.customerNomenclature";
		CustomerNomenclature = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.Описание");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CustomerNomenclature, "productDescription", ЗначениеСвойства, Ложь, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.АртикулПоставщика");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CustomerNomenclature, "vendorCode", ЗначениеСвойства, Ложь, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.АртикулПроизводителя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CustomerNomenclature, "partNumber", ЗначениеСвойства, Ложь, Ошибки);
			
			// CommerceOfferRequest.Products.Product.CustomerNomenclature.Manufacturer
		ТипОбъекта = "CommerceOfferRequest.products.product.customerNomenclature.manufacturer";
		Manufacturer = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.Производитель");
		ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, "");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Manufacturer, "name", ЗначениеСвойства, Ложь, Ошибки, Истина);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.ТорговаяМарка");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Manufacturer, "tradeMark", ЗначениеСвойства, Ложь, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CustomerNomenclature, "Manufacturer", Manufacturer, Ложь, Ошибки);
			
			// CommerceOfferRequest.Products.Product.CustomerNomenclature.Barcodes
		Штрихкоды = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция, "Товары.НомерСтроки.Товар.Штрихкоды");

		Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
			Для Каждого Штрихкод Из Штрихкоды Цикл
				Если ТипЗнч(Штрихкод) = Тип("Строка") Тогда
					CustomerNomenclature.Barcodes.Добавить(Штрихкод);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
			// CommerceOfferRequest.Products.Product.CustomerNomenclature.RequisiteValues
		ПолныйПуть = "Товары.НомерСтроки.Товар.РеквизитыТовара";
		РеквизитыТовара = Позиция.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);

		Если ЗначениеЗаполнено(РеквизитыТовара.Значение) Тогда

			Для Каждого РеквизитТовара Из РеквизитыТовара.Строки Цикл

				ТипОбъекта = "CommerceOfferRequest.products.product.customerNomenclature.requisiteValues";
				RequisiteValues = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитТовара,
					"Товары.НомерСтроки.Товар.РеквизитыТовара.НомерСтроки.ИмяРеквизита");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "name", ЗначениеСвойства, Истина, Ошибки);

				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитТовара,
					"Товары.НомерСтроки.Товар.РеквизитыТовара.НомерСтроки.ЗначениеРеквизита");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "value", ЗначениеСвойства, Истина, Ошибки);

				CustomerNomenclature.RequisiteValues.Добавить(RequisiteValues);

			КонецЦикла;

		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "CustomerNomenclature", CustomerNomenclature, Ложь, Ошибки);
			
			// CommerceOfferRequest.Products.Product.Ref1cNomenclature
		ТипОбъекта = "CommerceOfferRequest.products.product.ref1cNomenclature";
		Ref1cNomenclature = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

		УказаниеНоменклатуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.Товар.Сервис1СНоменклатура");

		Если УказаниеНоменклатуры = "Номенклатура" Тогда
				
				// CommerceOfferRequest.Products.Product.Ref1cNomenclature.ProductSpecification
			ТипОбъекта = "CommerceOfferRequest.products.product.ref1cNomenclature.productSpecification";
			ProductSpecification = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура.ИдентификаторНоменклатуры");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ProductSpecification, "id", ЗначениеСвойства, Истина, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура.ИдентификаторХарактеристики");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ProductSpecification, "characteristicId", ЗначениеСвойства, Ложь, Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ref1cNomenclature, "ProductSpecification", ProductSpecification, Истина, Ошибки);

		ИначеЕсли УказаниеНоменклатуры = "Рубрика" Тогда
				
				// CommerceOfferRequest.Products.Product.Ref1cNomenclature.CategorySpecification
			ТипОбъекта = "CommerceOfferRequest.products.product.ref1cNomenclature.categorySpecification";
			CategorySpecification = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.ИдентификаторРубрики");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CategorySpecification, "categoryId", ЗначениеСвойства, Истина, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.НаименованиеРубрики");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CategorySpecification, "categoryName", ЗначениеСвойства, Истина, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.ИдентификаторПроизводителя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CategorySpecification, "manufacturerId", ЗначениеСвойства, Ложь, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.НаименованиеПроизводителя");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CategorySpecification, "manufacturerName", ЗначениеСвойства, Ложь, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.ИдентификаторТорговойМарки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CategorySpecification, "tradeMarkId", ЗначениеСвойства, Ложь, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.НаименованиеТорговойМарки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CategorySpecification, "tradeMarkName", ЗначениеСвойства, Ложь, Ошибки);
				
				// CommerceOfferRequest.Products.Product.Ref1cNomenclature.CategorySpecification.RequisiteValues
			ПолныйПуть = "Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.РеквизитыРубрики";
			РеквизитыРубрики = Позиция.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);

			Если ЗначениеЗаполнено(РеквизитыРубрики) Тогда

				Для Каждого РеквизитРубрики Из РеквизитыРубрики.Строки Цикл

					ТипОбъекта = "CommerceOfferRequest.products.product.ref1cNomenclature.categorySpecification.requisiteValues";
					RequisiteValues = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);

					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитРубрики,
						"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.РеквизитыРубрики.НомерСтроки.ИдентификаторРеквизита");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "requisiteId", ЗначениеСвойства, Истина, Ошибки);

					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитРубрики,
						"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.РеквизитыРубрики.НомерСтроки.ИмяРеквизита");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "requisiteName", ЗначениеСвойства, Истина, Ошибки);

					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитРубрики,
						"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.РеквизитыРубрики.НомерСтроки.ЗначениеРеквизита");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "value", ЗначениеСвойства, Истина, Ошибки);

					CategorySpecification.RequisiteValues.Добавить(RequisiteValues);

				КонецЦикла;

			КонецЕсли;

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ref1cNomenclature, "CategorySpecification", CategorySpecification, Истина, Ошибки);

		КонецЕсли;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "Ref1cNomenclature", Ref1cNomenclature, Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "Product", Product, Истина, Ошибки);
			
			// CommerceOfferRequest.Products.Packaging
		Packaging = ПолучитьОбъектТипаCML("CommerceOfferRequest.products.packaging", ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.ЛогистическаяУпаковка.Описание");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Packaging, "description", ЗначениеСвойства, Ложь, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.ЛогистическаяУпаковка.Числитель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Packaging, "unitsNumerator", ЗначениеСвойства, Истина, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.ЛогистическаяУпаковка.Знаменатель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Packaging, "unitsDenominator", ЗначениеСвойства, Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "Packaging", Packaging, Истина, Ошибки);
			
			// CommerceOfferRequest.Products.DeliveryDate (MaxDeliveryDaysAfterOrder)
		СрокПоставки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция, "Товары.НомерСтроки.СрокПоставки");

		Если СрокПоставки = "НаДату" Тогда

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СрокПоставки.НаДату");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "deliveryDate", ЗначениеСвойства, Истина, Ошибки);

		ИначеЕсли СрокПоставки = "ВДнях" Тогда

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СрокПоставки.ВДнях");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "maxDeliveryDaysAfterOrder", ЗначениеСвойства, Ложь, Ошибки);

		КонецЕсли;
			
			// CommerceOfferRequest.Products.PriceAndTaxes
		МаксимальнаяЦена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция, "Товары.НомерСтроки.Цена");

		Если ЗначениеЗаполнено(МаксимальнаяЦена) Тогда

			PriceAndTaxes = ПолучитьОбъектТипаCML("CommerceOfferRequest.products.priceAndTaxes", ПространствоИменСхемы);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "maxPrice", МаксимальнаяЦена, Ложь, Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "PriceAndTaxes", PriceAndTaxes, Ложь, Ошибки);

		КонецЕсли;
			
			// CommerceOfferRequest.Products.Matching
		Matching = ПолучитьОбъектТипаCML("CommerceOfferRequest.products.matching", ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
			"Товары.НомерСтроки.ИдентификаторСтроки");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Matching, "matchId", ЗначениеСвойства, Истина, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "Matching", Matching, Истина, Ошибки);

		CommerceOfferRequest.Products.Добавить(Products);

	КонецЦикла;
		
		// CommerceOfferRequest.Customer
	Customer = ДанныеУчастникаBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, "Организация", Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "Customer", Customer, Истина, Ошибки);
		
		// CommerceOfferRequest.Contacts
	Contacts = КонтактноеЛицоBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "Contacts", Contacts, Истина, Ошибки);
		
		// CommerceOfferRequest.Recipients
	Recipients = ПолучитьОбъектТипаCML("CommerceOfferRequest.Recipients", ПространствоИменСхемы);
		
		// CommerceOfferRequest.Recipients.isBlackList
	ПолныйПуть = "Получатели.ЧерныйСписок";
	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Recipients, "isBlackList", ЗначениеСвойства, Ложь, Ошибки, Истина);

	Адресат = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Контрагент");

	Отбор = Новый Структура;
	Отбор.Вставить("ПолныйПуть", "Получатели.Адресаты.НомерСтроки.Ссылка");
	Отбор.Вставить("Значение", Адресат);

	Адресаты = ДеревоДанных.Строки.НайтиСтроки(Отбор, Истина);

	Если ЗначениеЗаполнено(Адресаты) Тогда
			
			// CommerceOfferRequest.Recipients.Supplier
		Путь = "Получатели.Адресаты.НомерСтроки";
		Supplier = ДанныеУчастникаBNCommerceOffering(ПространствоИменСхемы, Адресаты[0].Родитель, Путь, Ошибки);

		Recipients.Supplier.Добавить(Supplier);

	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "Recipients", Recipients, Истина, Ошибки);
		
		// CommerceOfferRequest.TermsAndConditions
	TermsAndConditions = ПолучитьОбъектТипаCML("CommerceOfferRequest.TermsAndConditions", ПространствоИменСхемы);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.УсловияДоставки");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "termsOfDelivery", ЗначениеСвойства, Ложь, Ошибки);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.УсловияОплаты");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "termsOfPayment", ЗначениеСвойства, Ложь, Ошибки);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.УсловияПрочие");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "otherConditions", ЗначениеСвойства, Ложь, Ошибки);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ПриемПередачаНаКомиссию");
	ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Ложь);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "commissionTransaction", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ВсеИлиНичего");
	ЗначениеСвойства = ?(ЗначениеСвойства = Истина, Истина, Ложь);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "allOrNothing", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияИПоложения.ВалютаКод");
	ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, 0);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "currencyCode", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ВалютаНаименование");
	ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, "");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "currencyName", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияИПоложения.ТолькоСНДС");
	ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Ложь);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "vatDeductable", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ДатаНачалаСбора");
	ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Дата('00010101'));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "dateOffersCollectFrom", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ДатаОкончанияСбора");
	ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Дата('00010101'));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "dateOffersCollectTo", ЗначениеСвойства, Ложь, Ошибки, Истина);

	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ДатаОкончанияРассмотрения");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "dateOffersConsiderTo", ЗначениеСвойства, Ложь, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "TermsAndConditions", TermsAndConditions, Истина, Ошибки);
		
		// CommerceOfferRequest.DeliveryAddress
	АдресДоставки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "АдресДоставки");

	Если ЗначениеЗаполнено(АдресДоставки) Тогда

		DeliveryAddress = ПолучитьОбъектТипаCML("CommerceOfferRequest.deliveryAddress", ПространствоИменСхемы);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"АдресДоставки.Представление");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(DeliveryAddress, "name", ЗначениеСвойства, Истина, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "АдресДоставки.Код");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(DeliveryAddress, "code", ЗначениеСвойства, Ложь, Ошибки);

		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "АдресДоставки.КодСтраны");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(DeliveryAddress, "countryCode", ЗначениеСвойства, Ложь, Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOfferRequest, "DeliveryAddress", DeliveryAddress, Ложь, Ошибки);

	КонецЕсли;
		
		// CommerceOfferRequest.AttachedFiles
	ПрикрепленныеФайлы = ДеревоДанных.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");

	Если ЗначениеЗаполнено(ПрикрепленныеФайлы.Значение) Тогда

		Для Каждого ПрикрепленныйФайл Из ПрикрепленныеФайлы.Строки Цикл

			AttachedFiles = ПолучитьОбъектТипаCML("CommerceOfferRequest.attachedFiles", ПространствоИменСхемы);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
				"ПрисоединенныеФайлы.НомерСтроки.ИмяФайла");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFiles, "fileName", ЗначениеСвойства, Истина, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
				"ПрисоединенныеФайлы.НомерСтроки.РасширениеФайла");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFiles, "fileExtension", ЗначениеСвойства, Истина, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
				"ПрисоединенныеФайлы.НомерСтроки.Размер");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFiles, "fileSize", ЗначениеСвойства, Истина, Ошибки);

			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
				"ПрисоединенныеФайлы.НомерСтроки.ДвоичныеДанные");
			ДанныеФайла = РаботаСФайламиБЭД.Base64СтрокаИзДвоичныхДанных(ЗначениеСвойства);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFiles, "fileData", ДанныеФайла, Истина, Ошибки);

			CommerceOfferRequest.AttachedFiles.Добавить(AttachedFiles);

		КонецЦикла;

	КонецЕсли;
	
	ПроверитьОбъектXDTO(CommerceOfferRequest, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(CommerceOfferRequest,, Истина);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанные;

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_КоммерческоеПредложение(Данные)
	
	ДеревоДанных = Данные;

	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_КоммерческоеПредложение(ДеревоДанных, ДатаФормирования);

	ПространствоИменСхемы = ПространствоИмен_КоммерческиеПредложения();

	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения")
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
			МодульПодсистемы.ДополнитьКоммерческоеПредложениеНоменклатуройСервиса(ДеревоДанных);
		КонецЕсли;
		
		// CommerceOffer
		CommerceOffer = ПолучитьОбъектТипаCML("CommerceOffer", ПространствоИменСхемы);
		
		ИдентификаторДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Идентификатор");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "id", ИдентификаторДокумента, Истина, Ошибки);
		
		ИдентификаторЗапроса = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ИдентификаторЗапроса");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "requestId", ИдентификаторЗапроса, Ложь, Ошибки);
		
		Номер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "number", Номер, Истина, Ошибки);
		
		Дата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "date", Дата, Истина, Ошибки);
		
		// CommerceOffer.Products
		Товары = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть").Строки;
		
		ЭтоУСН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.УСН");
		
		ЭтоУСН = ?(ЗначениеЗаполнено(ЭтоУСН), ЭтоУСН, Ложь);
		
		Для Каждого Позиция Из Товары Цикл
			
			Products = ПолучитьОбъектТипаCML("CommerceOffer.products", ПространствоИменСхемы);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Количество");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "count", ЗначениеСвойства, Истина, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Комментарий");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "comment", ЗначениеСвойства, Ложь, Ошибки);
			
			// CommerceOffer.Products.Product
			Product = ПолучитьОбъектТипаCML("CommerceOffer.products.product", ПространствоИменСхемы);
			
			СопоставлениеНоменклатуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"СопоставлениеНоменклатуры");
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.НоменклатураНаименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "productName", ЗначениеСвойства, Истина, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.ХарактеристикаНаименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "characteristicName", ЗначениеСвойства, Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.ЕдиницаИзмеренияКодОКЕИ");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "baseUnitOkeiCode", ЗначениеСвойства, Истина, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.ЕдиницаИзмеренияНаименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "baseUnitName", ЗначениеСвойства, Истина, Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "matchId", СопоставлениеНоменклатуры[Позиция.Значение], Истина, Ошибки);
			
			ВариантОписания = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.Товар.ВариантОписания");
			
			Если ВариантОписания = "УчетныеДанные" Тогда
				
				// CommerceOffer.Products.Product.SupplierNomenclature
				ТипОбъекта = "CommerceOffer.products.product.supplierNomenclature";
				SupplierNomenclature = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.Описание");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(SupplierNomenclature, "productDescription", ЗначениеСвойства, Ложь, Ошибки);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.АртикулПоставщика");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(SupplierNomenclature, "vendorCode", ЗначениеСвойства, Ложь, Ошибки);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.АртикулПроизводителя");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(SupplierNomenclature, "partNumber", ЗначениеСвойства, Ложь, Ошибки);
				
				// CommerceOffer.Products.Product.SupplierNomenclature.Manufacturer
				ТипОбъекта = "CommerceOffer.products.product.customerNomenclature.manufacturer";
				Manufacturer = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.Производитель");
				ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, "");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Manufacturer, "name", ЗначениеСвойства, Ложь, Ошибки, Истина);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.ТорговаяМарка");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Manufacturer, "tradeMark", ЗначениеСвойства, Ложь, Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(SupplierNomenclature, "Manufacturer", Manufacturer, Ложь, Ошибки);
				
				// CommerceOffer.Products.Product.SupplierNomenclature.Barcodes
				Штрихкоды = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.Штрихкоды");
				
				Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
					Для Каждого Штрихкод Из Штрихкоды Цикл
						Если ТипЗнч(Штрихкод) = Тип("Строка") Тогда
							SupplierNomenclature.Barcodes.Добавить(Штрихкод);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// CommerceOffer.Products.Product.SupplierNomenclature.RequisiteValues
				ПолныйПуть = "Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные.РеквизитыТовара";
				РеквизитыТовара = Позиция.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
				
				Если ЗначениеЗаполнено(РеквизитыТовара.Значение) Тогда
					
					Для Каждого РеквизитТовара Из РеквизитыТовара.Строки Цикл
						
						ТипОбъекта = "CommerceOffer.products.product.customerNomenclature.requisiteValues";
						RequisiteValues = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);
						
						ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитТовара,
							"Товары.НомерСтроки.Товар.РеквизитыТовара.НомерСтроки.ИмяРеквизита");
						РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "name", ЗначениеСвойства, Истина, Ошибки);
						
						ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(РеквизитТовара,
							"Товары.НомерСтроки.Товар.РеквизитыТовара.НомерСтроки.ЗначениеРеквизита");
						РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RequisiteValues, "value", ЗначениеСвойства, Истина, Ошибки);
						
						SupplierNomenclature.RequisiteValues.Добавить(RequisiteValues);
						
					КонецЦикла;
					
				КонецЕсли;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "SupplierNomenclature", SupplierNomenclature, Ложь, Ошибки);
				
			// CommerceOffer.Products.Product.Ref1cNomenclature
			ИначеЕсли ВариантОписания = "Сервис1СНоменклатура" Тогда
				
				ТипОбъекта = "CommerceOffer.products.product.ref1cNomenclature";
				Ref1cNomenclature = ПолучитьОбъектТипаCML(ТипОбъекта, ПространствоИменСхемы);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.Сервис1СНоменклатура.ИдентификаторНоменклатуры");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ref1cNomenclature, "id", ЗначениеСвойства, Истина, Ошибки);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ВариантОписания.Сервис1СНоменклатура.ИдентификаторХарактеристики");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Ref1cNomenclature, "characteristicId", ЗначениеСвойства, Ложь, Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Product, "Ref1cNomenclature", Ref1cNomenclature, Истина, Ошибки);
				
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "Product", Product, Истина, Ошибки);
			
			// CommerceOffer.Products.Packaging
			Packaging = ПолучитьОбъектТипаCML("CommerceOffer.products.packaging", ПространствоИменСхемы);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.ЛогистическаяУпаковка.Описание");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Packaging, "description",
				?(Не ЗначениеЗаполнено(ЗначениеСвойства), "", ЗначениеСвойства),
				Ложь, Ошибки, Истина);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.ЛогистическаяУпаковка.Числитель");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Packaging, "unitsNumerator", ЗначениеСвойства, Истина, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.ЛогистическаяУпаковка.Знаменатель");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Packaging, "unitsDenominator", ЗначениеСвойства, Истина, Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "Packaging", Packaging, Истина, Ошибки);
			
			// CommerceOffer.Products.DeliveryDate (MaxDeliveryDaysAfterOrder)
			СрокПоставки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СрокПоставки");
			
			Если СрокПоставки = "НаДату" Тогда
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.СрокПоставки.НаДату");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "deliveryDate", ЗначениеСвойства, Истина, Ошибки);
				
			ИначеЕсли СрокПоставки = "ВДнях" Тогда
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.СрокПоставки.ВДнях");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "maxDeliveryDaysAfterOrder", ЗначениеСвойства, Ложь, Ошибки);
				
			КонецЕсли;
			
			// CommerceOffer.Products.PriceAndTaxes
			Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция, "Товары.НомерСтроки.Цена");
			
			PriceAndTaxes = ПолучитьОбъектТипаCML("CommerceOffer.products.priceAndTaxes", ПространствоИменСхемы);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "Price", ?(Не ЗначениеЗаполнено(Цена), 0, Цена), Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СтавкаНДС");
			ПредставлениеСтавкиНДС = ЗначениеСтавкиНДСФорматаBNCommerceOffering(ЗначениеСвойства, ЭтоУСН);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "vat",
				?(Не ЗначениеЗаполнено(ПредставлениеСтавкиНДС), "", ПредставлениеСтавкиНДС), Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СуммаСНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "amountIncVat",
				?(Не ЗначениеЗаполнено(ЗначениеСвойства), 0, ЗначениеСвойства), Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СуммаБезНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "amountExcVat",
				?(Не ЗначениеЗаполнено(ЗначениеСвойства), 0, ЗначениеСвойства), Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СуммаНДС");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "VatAmount",
				?(Не ЗначениеЗаполнено(ЗначениеСвойства), 0, ЗначениеСвойства),
				Ложь, Ошибки, Истина);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.ПроцентСкидки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "discountPercent",
				?(Не ЗначениеЗаполнено(ЗначениеСвойства), 0, ЗначениеСвойства), Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.СуммаСкидки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(PriceAndTaxes, "discountTotal",
				?(Не ЗначениеЗаполнено(ЗначениеСвойства), 0, ЗначениеСвойства), Ложь, Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "PriceAndTaxes", PriceAndTaxes, Ложь, Ошибки);
			
			// CommerceOffer.Products.RefCommerceOfferRequest
			RefCommerceOfferRequest = ПолучитьОбъектТипаCML("CommerceOffer.products.refCommerceOfferRequest",
				ПространствоИменСхемы);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RefCommerceOfferRequest, "requestId", ИдентификаторДокумента, Ложь, Ошибки);
			
			ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
				"Товары.НомерСтроки.ИдентификаторСтроки");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(RefCommerceOfferRequest, "externalCode", ЗначениеСвойства, Истина, Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Products, "RefCommerceOfferRequest", RefCommerceOfferRequest, Ложь, Ошибки);
			
			CommerceOffer.Products.Добавить(Products);
			
		КонецЦикла;
		
		// CommerceOffer.Supplier
		Supplier = ДанныеУчастникаBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, "Организация", Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "Supplier", Supplier, Истина, Ошибки);
		
		// CommerceOffer.Contacts
		Contacts = КонтактноеЛицоBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "Contacts", Contacts, Истина, Ошибки);
		
		// CommerceOffer.Customer
		Customer = ДанныеУчастникаBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, "Получатель", Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "Customer", Customer, Истина, Ошибки);
		
		// CommerceOffer.TermsAndConditions
		TermsAndConditions = ПолучитьОбъектТипаCML("CommerceOffer.TermsAndConditions", ПространствоИменСхемы);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.УсловияДоставки");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "termsOfDelivery", ЗначениеСвойства, Ложь, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.УсловияОплаты");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "termsOfPayment", ЗначениеСвойства, Ложь, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.УсловияПрочие");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "otherConditions", ЗначениеСвойства, Ложь, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.ПриемПередачаНаКомиссию");
		ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Ложь);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "commissionTransaction", ЗначениеСвойства, Ложь, Ошибки, Истина);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.ВсеИлиНичего");
		ЗначениеСвойства = ?(ЗначениеСвойства = Истина, Истина, Ложь);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "allOrNothing", ЗначениеСвойства, Ложь, Ошибки, Истина);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.ЦенаВключаетНДС");
		ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Ложь);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "priceIncludesVat", ЗначениеСвойства, Ложь, Ошибки, Истина);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.ВалютаКод");
		ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, 0);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "currencyCode", ЗначениеСвойства, Ложь, Ошибки, Истина);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.ВалютаНаименование");
		ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, "");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "currencyName", ЗначениеСвойства, Ложь, Ошибки, Истина);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "simplifiedTaxation", ЭтоУСН, Ложь, Ошибки, Истина);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"УсловияИПоложения.СрокДействия");
		ЗначениеСвойства = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Дата('00010101'));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(TermsAndConditions, "dateOfferActualTo", ЗначениеСвойства, Ложь, Ошибки, Истина);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "TermsAndConditions", TermsAndConditions, Истина, Ошибки);
		
		// CommerceOffer.AttachedFiles
		ПрикрепленныеФайлы = ДеревоДанных.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");
		
		Если ЗначениеЗаполнено(ПрикрепленныеФайлы.Значение) Тогда
			
			Для Каждого ПрикрепленныйФайл Из ПрикрепленныеФайлы.Строки Цикл
				
				AttachedFile = ПолучитьОбъектТипаCML("AttachedFile", ПространствоИменСхемы);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
					"ПрисоединенныеФайлы.НомерСтроки.ИмяФайла");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFile, "fileName", ЗначениеСвойства, Истина, Ошибки);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
					"ПрисоединенныеФайлы.НомерСтроки.РасширениеФайла");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFile, "fileExtension", ЗначениеСвойства, Истина, Ошибки);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
					"ПрисоединенныеФайлы.НомерСтроки.Размер");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFile, "fileSize", ЗначениеСвойства, Истина, Ошибки);
				
				ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
					"ПрисоединенныеФайлы.НомерСтроки.ДвоичныеДанные");
				ДанныеФайла = РаботаСФайламиБЭД.Base64СтрокаИзДвоичныхДанных(ЗначениеСвойства);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AttachedFile, "fileData", ДанныеФайла, Истина, Ошибки);
				
				CommerceOffer.AttachedFiles.Добавить(AttachedFile);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// CommerceOffer.AdditionalInformation
		ДополнительнаяИнформация = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительнаяИнформация");
		
		Если ДополнительнаяИнформация = Истина Тогда
			
			AdditionalInformation = ПолучитьОбъектТипаCML("CommerceOffer.AdditionalInformation", ПространствоИменСхемы);
			
			ПростойТекст = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДополнительнаяИнформация.ПростойТекст");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AdditionalInformation, "text", ПростойТекст, Ложь, Ошибки);
			
			ТекстHTML = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДополнительнаяИнформация.ФорматированныйТекст.ТекстHTML");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(AdditionalInformation, "htmlText", ТекстHTML, Ложь, Ошибки);
			
			ПрикрепленныеФайлы = ДеревоДанных.Строки.Найти("ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы",
				"ПолныйПуть", Истина);
			
			Если ЗначениеЗаполнено(ПрикрепленныеФайлы.Значение) Тогда
				
				HtmlAttachedFiles = ПолучитьОбъектТипаCML("CommerceOffer.additionalInformation.htmlAttachedFiles",
					ПространствоИменСхемы);
				
				Для Каждого ПрикрепленныйФайл Из ПрикрепленныеФайлы.Строки Цикл
					
					HtmlAttachedFile = ПолучитьОбъектТипаCML("htmlAttachedFile", ПространствоИменСхемы);
					
					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
						"ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы.НомерСтроки.ContentID");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(HtmlAttachedFile, "contentID", ЗначениеСвойства, Истина, Ошибки);
					
					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
						"ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы.НомерСтроки.ИмяФайла");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(HtmlAttachedFile, "fileName", ЗначениеСвойства, Истина, Ошибки);
					
					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
						"ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы.НомерСтроки.РасширениеФайла");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(HtmlAttachedFile, "fileExtension", ЗначениеСвойства, Ложь, Ошибки);
					
					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
						"ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы.НомерСтроки.Размер");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(HtmlAttachedFile, "fileSize", ЗначениеСвойства, Истина, Ошибки);
					
					ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПрикрепленныйФайл,
						"ДополнительнаяИнформация.ФорматированныйТекст.ПрисоединенныеФайлы.НомерСтроки.ДвоичныеДанные");
					ДанныеФайла = РаботаСФайламиБЭД.Base64СтрокаИзДвоичныхДанных(ЗначениеСвойства);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(HtmlAttachedFile, "fileData", ДанныеФайла, Истина, Ошибки);
					
					AdditionalInformation.HtmlAttachedFiles.Добавить(HtmlAttachedFile);
					
				КонецЦикла;
				
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(CommerceOffer, "additionalInformation", AdditionalInformation, Ложь, Ошибки);
			
		КонецЕсли;
		
		CommerceOffer.Проверить();
		
	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(CommerceOffer,, Истина);
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанные;
		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_АктСверкиВзаиморасчетов_ИнформацияОтправителя(Данные)
	
	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_АктСверкиВзаиморасчетов_ИнформацияОтправителя(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_АктСверкиВзаиморасчетов_ИнформацияОтправителя();
	
	Ошибки = Неопределено;
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);	
	СвойствоФайл = Пакет.КорневыеСвойства.Получить("Файл");
	Файл = ПолучитьОбъектТипаCML(СвойствоФайл.Тип, ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	// Документ.
	СвойствоДокумент = Файл.Свойства().Получить("Документ");
	Документ = ПолучитьОбъектТипаCML(СвойствоДокумент.Тип, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1110332", Истина, Ошибки);
	
	ТекДатаВремя = ТекущаяДатаСеанса();	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфОтпр", Формат(ТекДатаВремя, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВрИнфОтпр", Формат(ТекДатаВремя, "ДФ=HH:mm:ss"), Истина, Ошибки);
	
	// Номер документа.
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НомерАкт", НомерДок, Истина, Ошибки);
	
	// Период сверки.
	НачалоПериода = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНачалаПериодаСверки");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаНачПер", Формат(НачалоПериода, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
	ОкончаниеПериода = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОкончанияПериодаСверки");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаОкПер", Формат(ОкончаниеПериода, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
	
	// Сведения документа.
	СвойствоСвДокКрАкт = Документ.Свойства().Получить("СвДокКрАкт");
	СведенияДокумента = ПолучитьОбъектТипаCML(СвойствоСвДокКрАкт.Тип, ПространствоИмен);
	
	// Код валюты.
	КодВалюты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "КодВалюты");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияДокумента, "КодОКВ", КодВалюты, Истина, Ошибки);
	
	// Участники.
	Отправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеАктСверкиВзаиморасчетов(Отправитель, ДеревоДанных, Ошибки, ПространствоИмен, "Отправитель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияДокумента, "СвОтпр", Отправитель, Истина, Ошибки);

	Получатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеАктСверкиВзаиморасчетов(Получатель, ДеревоДанных, Ошибки, ПространствоИмен, "Получатель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияДокумента, "СвПол", Получатель, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвДокКрАкт", СведенияДокумента, Истина, Ошибки);
	
	// Таблица акта.
	СведенияОтправителя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияОтправителя");
	СвойствоТаблАкт = Документ.Свойства().Получить("ТаблАкт");		
	ТаблАкт = ПолучитьОбъектТипаCML(СвойствоТаблАкт.Тип, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоНачДеб", СведенияОтправителя.СальдоНаНачалоПериодаДебет, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоНачКр", СведенияОтправителя.СальдоНаНачалоПериодаКредит, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ОборотДеб", СведенияОтправителя.ОборотПоДебету, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ОборотКр", СведенияОтправителя.ОборотПоКредиту, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоКонДеб", СведенияОтправителя.СальдоНаКонецПериодаДебет, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоКонКр", СведенияОтправителя.СальдоНаКонецПериодаКредит, Истина, Ошибки);		

	Для Каждого СтрокаПоДоговорам Из СведенияОтправителя.СведенияПоДоговорам Цикл

		СвойствоДогСв = ТаблАкт.Свойства().Получить("ДогСв");
		ДогСв = ПолучитьОбъектТипаCML(СвойствоДогСв.Тип, ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ИдДог", СтрокаПоДоговорам.ИдентификаторДоговора, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ОписТипДог", СтрокаПоДоговорам.ОписаниеДоговора, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "НомДог", СтрокаПоДоговорам.НомерДоговора, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ДатаДог", Формат(СтрокаПоДоговорам.ДатаДоговора, "Л=ru; ДФ=dd.MM.yyyy"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоНачДеб", СтрокаПоДоговорам.СальдоНаНачалоПериодаДебет, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоНачКр", СтрокаПоДоговорам.СальдоНаНачалоПериодаКредит, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ОборотДеб", СтрокаПоДоговорам.ОборотПоДебету, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ОборотКр", СтрокаПоДоговорам.ОборотПоКредиту, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоКонДеб", СтрокаПоДоговорам.СальдоНаКонецПериодаДебет, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоКонКр", СтрокаПоДоговорам.СальдоНаКонецПериодаКредит, Истина, Ошибки);
		
		Для Каждого СтрокаПоДокументам Из СтрокаПоДоговорам.СведенияПоДокументам Цикл
			
			СвойствоДокСв = ДогСв.Свойства().Получить("ДокСв");
		    ДокСв = ПолучитьОбъектТипаCML(СвойствоДокСв.Тип, ПространствоИмен);
			
			НомерДокумента = СтрокаПоДокументам.НомерДокумента;
			Если ПустаяСтрока(НомерДокумента) Тогда
			    НомерДокумента = "б/н";
			КонецЕсли;	
				
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "НаимДок", СтрокаПоДокументам.НаименованиеДокумента, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "НомДок", НомерДокумента, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ДатаДок", Формат(СтрокаПоДокументам.ДатаДокумента, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ИдДок", СтрокаПоДокументам.ИдентификаторДокумента, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ДопИнф", СтрокаПоДокументам.ДопИнформация, , Ошибки);
			
			Для Каждого СтрокаПоОперациям Из СтрокаПоДокументам.СведенияПоОперациям Цикл
				
				СвойствоСвОпер = ДокСв.Свойства().Получить("СвОпер");
				СвОпер = ПолучитьОбъектТипаCML(СвойствоСвОпер.Тип, ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "НомСтр", СтрокаПоОперациям.ПорядковыйНомерСтроки, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "ДатаОпер", Формат(СтрокаПоОперациям.ДатаОперации, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "НаимОпер", СтрокаПоОперациям.НаименованиеОперации, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "СумДебет", СтрокаПоОперациям.СуммаДебет, Не ЗначениеЗаполнено(СтрокаПоОперациям.СуммаКредит), Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "СумКредит", СтрокаПоОперациям.СуммаКредит, Не ЗначениеЗаполнено(СтрокаПоОперациям.СуммаДебет), Ошибки);
				
				ДокСв.СвОпер.Добавить(СвОпер);
				
			КонецЦикла;
			
			ДогСв.ДокСв.Добавить(ДокСв);
			
		КонецЦикла;
		
		ТаблАкт.ДогСв.Добавить(ДогСв);
		
	КонецЦикла;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ТаблАкт", ТаблАкт, , Ошибки);
			
	// Подписант.
	СвойствоПодписант = Документ.Свойства().Получить("Подписант");
	Подписант = ПолучитьОбъектТипаCML(СвойствоПодписант.Тип, ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СтатПодп", "1", Истина, Ошибки); // Лицо, имеющее полномочия на подписание документа без доверенности.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ТипПодпис", "2", Истина, Ошибки); // Простая электронная подпись.
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл, , , "Файл");
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

Функция ЗаполнитьДокумент_АктСверкиВзаиморасчетов_ИнформацияПолучателя(Данные)
	
	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_АктСверкиВзаиморасчетов_ИнформацияПолучателя(ДеревоДанных, ДатаФормирования);
	
	ПространствоИмен = ПространствоИмен_АктСверкиВзаиморасчетов_ИнформацияПолучателя();
	
	Ошибки = Неопределено;
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);	
	СвойствоФайл = Пакет.КорневыеСвойства.Получить("Файл");
	Файл = ПолучитьОбъектТипаCML(СвойствоФайл.Тип, ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, Ошибки);
	
	// Признак наличия разногласий.
	ПризнакНаличияРазногласий = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПризнакНаличияРазногласий");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ПризнРазн", ?(ПризнакНаличияРазногласий, "2", "1"), Истина, Ошибки);
	
	// Документ.
	СвойствоДокумент = Файл.Свойства().Получить("Документ");
	Документ = ПолучитьОбъектТипаCML(СвойствоДокумент.Тип, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1110333", Истина, Ошибки);
	
	ТекДатаВремя = ТекущаяДатаСеанса();	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаИнфПол", Формат(ТекДатаВремя, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВрИнфПол", Формат(ТекДатаВремя, "ДФ=HH:mm:ss"), Истина, Ошибки);
	
	// Идентификация файла отправителя.
	СвойствоИдИнфОтпр = Документ.Свойства().Получить("ИдИнфОтпр");
	ИнформацияОтправителя = ПолучитьОбъектТипаCML(СвойствоИдИнфОтпр.Тип, ПространствоИмен);
	
	СведенияОтправителя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияОтправителя");
			
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнформацияОтправителя, "ИдФайлИнфОтпр", СведенияОтправителя.ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнформацияОтправителя, "ДатФайлИнфОтпр", СведенияОтправителя.ДатаФормированияФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнформацияОтправителя, "ВрФайлИнфОтпр", СведенияОтправителя.ВремяФормированияФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнформацияОтправителя, "ЭП", СведенияОтправителя.ЭлектроннаяПодпись, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ИдИнфОтпр", ИнформацияОтправителя, , Ошибки);
	
	// Таблица акта.
	СведенияПолучателя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияПолучателя");
	СвойствоТаблАкт = Документ.Свойства().Получить("ТаблАкт");		
	ТаблАкт = ПолучитьОбъектТипаCML(СвойствоТаблАкт.Тип, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоНачДеб", СведенияПолучателя.СальдоНаНачалоПериодаДебет, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоНачКр", СведенияПолучателя.СальдоНаНачалоПериодаКредит, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ОборотДеб", СведенияПолучателя.ОборотПоДебету, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ОборотКр", СведенияПолучателя.ОборотПоКредиту, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоКонДеб", СведенияПолучателя.СальдоНаКонецПериодаДебет, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "СальдоКонКр", СведенияПолучателя.СальдоНаКонецПериодаКредит, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ИтогоРасхДеб", СведенияПолучателя.ИтогоРасхождениеПоДебету, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ИтогоРасхКр", СведенияПолучателя.ИтогоРасхождениеПоКредиту, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТаблАкт, "ДопИнф", СведенияПолучателя.ДопИнформация, , Ошибки);

	Для Каждого СтрокаПоДоговорам Из СведенияПолучателя.СведенияПоДоговорам Цикл

		СвойствоДогСв = ТаблАкт.Свойства().Получить("ДогСв");
		ДогСв = ПолучитьОбъектТипаCML(СвойствоДогСв.Тип, ПространствоИмен);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ИдДог", СтрокаПоДоговорам.ИдентификаторДоговора, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ОписТипДог", СтрокаПоДоговорам.ОписаниеДоговора, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "НомДог", СтрокаПоДоговорам.НомерДоговора, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ДатаДог", Формат(СтрокаПоДоговорам.ДатаДоговора, "Л=ru; ДФ=dd.MM.yyyy"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоНачДеб", СтрокаПоДоговорам.СальдоНаНачалоПериодаДебет, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоНачКр", СтрокаПоДоговорам.СальдоНаНачалоПериодаКредит, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ОборотДеб", СтрокаПоДоговорам.ОборотПоДебету, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ОборотКр", СтрокаПоДоговорам.ОборотПоКредиту, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоКонДеб", СтрокаПоДоговорам.СальдоНаКонецПериодаДебет, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "СальдоКонКр", СтрокаПоДоговорам.СальдоНаКонецПериодаКредит, Истина, Ошибки);		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ИтогоРасхДеб", СтрокаПоДоговорам.ИтогоРасхождениеПоДебету, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ИтогоРасхКр", СтрокаПоДоговорам.ИтогоРасхождениеПоКредиту, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДогСв, "ДопИнф", СтрокаПоДоговорам.ДопИнформация, , Ошибки);
		
		Для Каждого СтрокаПоДокументам Из СтрокаПоДоговорам.СведенияПоДокументам Цикл
			
			СвойствоДокСв = ДогСв.Свойства().Получить("ДокСв");
		    ДокСв = ПолучитьОбъектТипаCML(СвойствоДокСв.Тип, ПространствоИмен);
			
			НомерДокумента = СтрокаПоДокументам.НомерДокумента;
			Если ПустаяСтрока(НомерДокумента) Тогда
			    НомерДокумента = "б/н";
			КонецЕсли;	
				
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "НаимДок", СтрокаПоДокументам.НаименованиеДокумента, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "НомДок", НомерДокумента, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ДатаДок", Формат(СтрокаПоДокументам.ДатаДокумента, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ИдДок", СтрокаПоДокументам.ИдентификаторДокумента, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ИтогоРасх", СтрокаПоДокументам.ИтогоРасхождение, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокСв, "ДопИнф", СтрокаПоДокументам.ДопИнформация, , Ошибки);
			
			Для Каждого СтрокаПоОперациям Из СтрокаПоДокументам.СведенияПоОперациям Цикл
				
				СвойствоСвОпер = ДокСв.Свойства().Получить("СвОпер");
				СвОпер = ПолучитьОбъектТипаCML(СвойствоСвОпер.Тип, ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "НомСтр", СтрокаПоОперациям.ПорядковыйНомерСтроки, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "ДатаОпер", Формат(СтрокаПоОперациям.ДатаОперации, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "НаимОпер", СтрокаПоОперациям.НаименованиеОперации, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "СумДебет", СтрокаПоОперациям.СуммаДебет, Не ЗначениеЗаполнено(СтрокаПоОперациям.СуммаКредит), Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "СумКредит", СтрокаПоОперациям.СуммаКредит, Не ЗначениеЗаполнено(СтрокаПоОперациям.СуммаДебет), Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОпер, "ДопИнф", СтрокаПоОперациям.ДопИнформация, , Ошибки);
				
				ДокСв.СвОпер.Добавить(СвОпер);
				
			КонецЦикла;
			
			ДогСв.ДокСв.Добавить(ДокСв);
			
		КонецЦикла;
		
		ТаблАкт.ДогСв.Добавить(ДогСв);
		
	КонецЦикла;
	
	Если ПризнакНаличияРазногласий Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ТаблАкт", ТаблАкт, , Ошибки);
	КонецЕсли;	
		
	// Подписант.
	СвойствоПодписант = Документ.Свойства().Получить("Подписант");
	Подписант = ПолучитьОбъектТипаCML(СвойствоПодписант.Тип, ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "СтатПодп", "1", Истина, Ошибки); // Лицо, имеющее полномочия на подписание документа без доверенности.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ТипПодпис", "2", Истина, Ошибки); // Простая электронная подпись.
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл, , , "Файл");
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДанныеОбъектаУчетаСведениямиФайла_АктСверкиВзаиморасчетов(Дерево, Файл)
	
	СведенияОтправителя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Дерево, "СведенияОтправителя");
	
	ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Файл);
	ПараметрыЭД = КонвертацияЭДО.ПолучитьПараметрыЭлектронногоДокумента(ДанныеФайла);
	
	Если ПараметрыЭД <> Неопределено Тогда 
		СведенияОтправителя.ИдентификаторФайла = ПараметрыЭД.ИдентификаторФайла;
		СведенияОтправителя.ДатаФормированияФайла = ПараметрыЭД.ДатаФормированияФайла;	
		СведенияОтправителя.ВремяФормированияФайла = ПараметрыЭД.ВремяФормированияФайла;	
	КонецЕсли;
		
	ЭП = "";	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(Файл);
	Если Подписи.Количество() > 0 Тогда
		Подпись = Подписи[0].Подпись; 
		ЭП = Base64Строка(Подпись);
	КонецЕсли;	
	СведенияОтправителя.ЭлектроннаяПодпись = ЭП;
		
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(Дерево, СведенияОтправителя, "СведенияОтправителя");	
		
КонецПроцедуры	

Функция ЗаполнитьДокумент_СчетНаОплату101(Знач Данные)

	ДеревоДанных = Данные;
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ИдентификаторФайла = ИдентификаторФайла_СчетНаОплату101(ДеревоДанных, ДатаФормирования);
	
	Ошибки = Неопределено;
	ВерсияСхемы = "4.01";
	ПространствоИмен = ПространствоИмен_СчетНаОплату101();
    
	ФайлТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл", ПространствоИмен), ВерсияСхемы);
	Файл = ПолучитьОбъектТипаCML(ФайлТип, ПространствоИмен);
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
	СвойствоФайл = Пакет.КорневыеСвойства.Получить("Файл");
	Файл = ПолучитьОбъектТипаCML(СвойствоФайл.Тип, ПространствоИмен);
	
	// Техническая информация по документу.
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", ИдентификаторФайла, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияПрограммы"),, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.01", Истина, Ошибки);
	
	// Документ.
	ДокументТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ", ПространствоИмен), ВерсияСхемы);
	Документ = ПолучитьОбъектТипаCML(ДокументТип, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1110379", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Функция", 
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Функция"), Истина, Ошибки);
	
	// Номер и дата документа.
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "НомерДок", НомерДок, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", Формат(ДатаФормирования, "Л=ru; ДФ=dd.MM.yyyy"), Истина, Ошибки);
	
	ВсегоНаименований = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоНаименований");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВсегоНаим", ВсегоНаименований, Истина, Ошибки);
	
	// Основания.
	Основания = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "Основания");
	Если Основания.Количество() > 0 Тогда
		ОснованиеТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.Основание", ПространствоИмен), ВерсияСхемы);
		Для Каждого Основание Из Основания Цикл
			ТекущееОснование = ПолучитьОбъектТипаCML(ОснованиеТип, ПространствоИмен);
			Если Не ПустаяСтрока(Основание.Наименование) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущееОснование, "НаимОсн", Основание.Наименование, Ложь, Ошибки);
			КонецЕсли;	
			НомерОснования = Основание.Номер;
			Если ПустаяСтрока(НомерОснования) Тогда	
			    НомерОснования = "б/н";
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущееОснование, "НомОсн", НомерОснования, Ложь, Ошибки);
			Если Основание.Дата <> '00010101' Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущееОснование, 
					"ДатаОсн", Формат(Основание.Дата, "Л=ru; ДФ=dd.MM.yyyy"), Ложь, Ошибки);
			КонецЕсли;
			Если Не ПустаяСтрока(Основание.Идентификатор) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущееОснование, "ИдентОсн", Основание.Идентификатор, Ложь, Ошибки);
			КонецЕсли;
			Если Не ПустаяСтрока(Основание.ИдентификаторГосКонтракта) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущееОснование, "ИдГосКон", Основание.ИдентификаторГосКонтракта, Ложь, Ошибки);
			КонецЕсли;
			Если Не ПустаяСтрока(Основание.ДополнительныеСведения) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущееОснование, "ДопСвОсн", Основание.ДополнительныеСведения, Ложь, Ошибки);
			КонецЕсли;
			Документ.Основание.Добавить(ТекущееОснование);
		КонецЦикла;	
	КонецЕсли;
	
	// Получатель денежных средств.
	ПолучательДенежныхСредств = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолучательДенежныхСредств");
	Если ПолучательДенежныхСредств <> Неопределено Тогда
		ПолучДнСр = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеСчетНаОплату101(ПолучДнСр, ДеревоДанных, Ошибки, ПространствоИмен, "ПолучательДенежныхСредств");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ПолучДнСр", ПолучДнСр, Ложь, Ошибки);
	КонецЕсли;	
	
	// Плательщик.
	Плательщик = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Плательщик");
	Если Плательщик <> Неопределено Тогда
		ПлатСр = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеСчетНаОплату101(ПлатСр, ДеревоДанных, Ошибки, ПространствоИмен, "Плательщик");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ПлатСр", ПлатСр, Ложь, Ошибки);
	КонецЕсли;
	
	// Продавец.
	СвПрод = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеСчетНаОплату101(СвПрод, ДеревоДанных, Ошибки, ПространствоИмен, "Продавец");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвПрод", СвПрод, Истина, Ошибки);
	
	// Покупатель.
	СвПокуп = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
	ЗаполнитьСведенияОбУчастникеСчетНаОплату101(СвПокуп, ДеревоДанных, Ошибки, ПространствоИмен, "Покупатель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "СвПокуп", СвПокуп, Истина, Ошибки);
	
	// Грузоотправитель.
	Грузоотправитель = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузоотправитель");
	Если Грузоотправитель <> Неопределено Тогда
		ГрузОт = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеСчетНаОплату101(ГрузОт, ДеревоДанных, Ошибки, ПространствоИмен, "Грузоотправитель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ГрузОт", ГрузОт, Ложь, Ошибки);
	КонецЕсли;
	
	// Грузополучатель.
	Грузополучатель = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузополучатель");
	Если Грузополучатель <> Неопределено Тогда
		ГрузПолуч = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИмен);
		ЗаполнитьСведенияОбУчастникеСчетНаОплату101(ГрузПолуч, ДеревоДанных, Ошибки, ПространствоИмен, "Грузополучатель");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ГрузПолуч", ГрузПолуч, Ложь, Ошибки);
	КонецЕсли;

	// Товары.
	Товары = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ТаблицаТоваров");
	СведТовЦенПокТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.СведТовЦенПок", ПространствоИмен), ВерсияСхемы);
	ДопСведТовТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.СведТовЦенПок.ДопСведТов", ПространствоИмен), ВерсияСхемы);
	
	НомерСтроки = 1;
	Для Каждого СтрокаТовары Из Товары Цикл
		СведТовЦенПок = ПолучитьОбъектТипаCML(СведТовЦенПокТип, ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "НомСтр", НомерСтроки, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "НаимТов", СтрокаТовары.Наименование, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "КолТов", СтрокаТовары.Количество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "ОКЕИТов", СтрокаТовары.КодЕдиницыИзмерения, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "НаимЕдИзм", СтрокаТовары.НаименованиеЕдиницыИзмерения, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "ЦенаТов", СтрокаТовары.ЦенаЗаЕдиницуИзмерения, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СтТовБезНДС", СтрокаТовары.СтоимостьБезНДС, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "НалСт", СтрокаТовары.СтавкаНДС, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СтТовУчНал", СтрокаТовары.СтоимостьСНДС, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СумСки", СтрокаТовары.СуммаСкидки, , Ошибки); //АПК:1036 не проверять строку на орфографию.
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "ЦенаТовБезСки", СтрокаТовары.ЦенаБезСкидки, , Ошибки); //АПК:1036 не проверять строку на орфографию.
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СтТовБезНДССки", СтрокаТовары.СтоимостьБезНДСБезСкидки, , Ошибки); //АПК:1036 не проверять строку на орфографию.
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СтТовУчНалБезСки", СтрокаТовары.СтоимостьСНДСБезСкидки, , Ошибки); //АПК:1036 не проверять строку на орфографию.
		СуммаНДС = ПолучитьОбъектТипаCML("СуммНДСТип", ПространствоИмен);
		СуммаНалога = 0;
		Если СтрокаТовары.СуммаНДС.Свойство("СуммаНалога", СуммаНалога) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СуммаНДС, "СумНал", СуммаНалога, , Ошибки);
		Иначе	
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СуммаНДС, "БезНДС", "без НДС", , Ошибки); //АПК:1036 не проверять строку на орфографию.
		КонецЕсли;	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СумНал", СуммаНДС, , Ошибки);
		СумНалБезСки = ПолучитьОбъектТипаCML("СуммНДСТип", ПространствоИмен); //АПК:1036 не проверять строку на орфографию.
		СуммаНалога = 0;
		Если СтрокаТовары.СуммаНДСБезСкидки.Свойство("СуммаНалога", СуммаНалога) Тогда
		    РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНалБезСки, "СумНал", СуммаНалога, , Ошибки); //АПК:1036 не проверять строку на орфографию.
		Иначе	
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНалБезСки, "БезНДС", "без НДС", , Ошибки); //АПК:1036 не проверять строку на орфографию.
		КонецЕсли;	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "СумНалБезСки", СумНалБезСки, , Ошибки); //АПК:1036 не проверять строку на орфографию.
		ДополнительныеСведения = СтрокаТовары.ДополнительныеСведения;
		ДопСведТов = ПолучитьОбъектТипаCML(ДопСведТовТип, ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ПрТовРаб", ДополнительныеСведения.Признак, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ДопПризн", ДополнительныеСведения.ДополнительнаяИнформацияПризнака, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодПроисх", ДополнительныеСведения.КодСтраныПроисхождения, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КрНаимСтрПр", ДополнительныеСведения.НаименованиеСтраныПроисхождения, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "ХарактерТов", ДополнительныеСведения.ХарактеристикаТовара, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "СортТов", ДополнительныеСведения.СортТовара, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "АртикулТов", ДополнительныеСведения.АртикулТовара, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодТов", ДополнительныеСведения.КодТовара, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодКат", ДополнительныеСведения.КодКаталога, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСведТов, "КодВидТов", ДополнительныеСведения.КодВидаТовара, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведТовЦенПок, "ДопСведТов", ДопСведТов, , Ошибки);
		Если СтрокаТовары.ИнформационноеПоле.Количество() > 0 Тогда
			ИнфПолФХЖ2 = ПолучитьОбъектТипаCML("ИнфПолТип", ПространствоИмен);
			Для Каждого ИнформационноеПоле Из СтрокаТовары.ИнформационноеПоле Цикл
				Если Не ПустаяСтрока(ИнформационноеПоле.ИдентификаторФайла) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ2, "ИдФайлИнфПол", ИнформационноеПоле.ИдентификаторФайла, , Ошибки);
				КонецЕсли;	
				Для Каждого ТекстоваяИнформация Из ИнформационноеПоле.ТекстоваяИнформация Цикл
					ТекстИнф = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
						ТекстоваяИнформация.Идентификатор, Истина, Ошибки);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значение",
						ТекстоваяИнформация.Значение, Истина, Ошибки);
					ИнфПолФХЖ2.ТекстИнф.Добавить(ТекстИнф);
				КонецЦикла;
			КонецЦикла;
			СведТовЦенПок.ИнфПолФХЖ2.Добавить(ИнфПолФХЖ2);
		КонецЕсли;	
		
		// Выгружаем дополнительные данные.
		Если СтрокаТовары.ДопДанныеПодписанные.Количество() > 0 Тогда
			ИнфПолФХЖ2 = ПолучитьОбъектТипаCML("ИнфПолТип", ПространствоИмен);
			Для Каждого ТекущаяСтрокаДопДанных Из СтрокаТовары.ДопДанныеПодписанные Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
					ТекущаяСтрокаДопДанных.Идентификатор, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значение",
					ТекущаяСтрокаДопДанных.Значение, Истина, Ошибки);
				ИнфПолФХЖ2.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
			СведТовЦенПок.ИнфПолФХЖ2.Добавить(ИнфПолФХЖ2);
		КонецЕсли;
		
		Документ.СведТовЦенПок.Добавить(СведТовЦенПок);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	
		
	// Всего к оплате.
	ВсегоКОплате = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ВсегоКОплате");
	ВсегоОплТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.ВсегоОпл", ПространствоИмен), ВерсияСхемы);	
	ВсегоОпл = ПолучитьОбъектТипаCML(ВсегоОплТип, ПространствоИмен);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", ВсегоКОплате.СтоимостьБезНДС, , Ошибки);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", ВсегоКОплате.СтоимостьСНДС, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "КолНеттоВс", ВсегоКОплате.Количество, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумСкиВсего", ВсегоКОплате.СуммаСкидки, , Ошибки); //АПК:1036 не проверять строку на орфографию.
	СумНалВсего = ПолучитьОбъектТипаCML("СуммНДСТип", ПространствоИмен);
	СуммаНалога = 0;
	Если ВсегоКОплате.СуммаНалога.Свойство("СуммаНалога", СуммаНалога) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНалВсего, "СумНал", СуммаНалога, , Ошибки);
	Иначе	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНалВсего, "БезНДС", "без НДС", , Ошибки); //АПК:1036 не проверять строку на орфографию.
	КонецЕсли;	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ВсегоОпл", ВсегоОпл, Истина, Ошибки);
	
	// Дополнительные сведения.
	ДополнительныеСведения = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДополнительныеСведения");
	ДопСвТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.ДопСв", ПространствоИмен), ВерсияСхемы);	
	ДопСв = ПолучитьОбъектТипаCML(ДопСвТип, ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСв, "ДатаНачТов", Формат(ДополнительныеСведения.ДатаНачалаПоставки, "Л=ru; ДФ=dd.MM.yyyy"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСв, "НазнПл", ДополнительныеСведения.НазначениеПлатежа, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСв, "УникИнф", ДополнительныеСведения.ИнформацияДляОплаты, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСв, "СпособОпл", ДополнительныеСведения.СпособОплаты, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСв, "НалКоорТочВрПодТС", ДополнительныеСведения.ПрименениеUTC, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопСв, "ОгранОпДат", Формат(ДополнительныеСведения.ОграничениеПоДатеОплаты, "Л=ru; ДФ=dd.MM.yyyy"), , Ошибки);
	Для Каждого УсловиеОплаты Из ДополнительныеСведения.УсловияОплаты Цикл
	    ДопСв.УслОпл.Добавить(УсловиеОплаты);
	КонецЦикла;
	Для Каждого УсловиеПоставки Из ДополнительныеСведения.УсловияПоставки Цикл
	    ДопСв.УслОказПост.Добавить(УсловиеПоставки);
	КонецЦикла;
	Если ДополнительныеСведения.ИнформационноеПоле.Количество() > 0 Тогда
		ИнфПолФХЖ3 = ПолучитьОбъектТипаCML("ИнфПолТип", ПространствоИмен);
		Для Каждого ИнформационноеПоле Из ДополнительныеСведения.ИнформационноеПоле Цикл
			Если Не ПустаяСтрока(ИнформационноеПоле.ИдентификаторФайла) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ3, "ИдФайлИнфПол", ИнформационноеПоле.ИдентификаторФайла, , Ошибки);
			КонецЕсли;	
			Для Каждого ТекстоваяИнформация Из ИнформационноеПоле.ТекстоваяИнформация Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
					ТекстоваяИнформация.Идентификатор, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значение",
					ТекстоваяИнформация.Значение, Истина, Ошибки);
				ИнфПолФХЖ3.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
		КонецЦикла;
		ДопСв.ИнфПолФХЖ3.Добавить(ИнфПолФХЖ3);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДопСв", ДопСв, , Ошибки);
	
	// Денежная единица.
	ДенежнаяЕдиница = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДенежнаяЕдиница");
	ДенИзмТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.ДенИзм", ПространствоИмен), ВерсияСхемы);	
	ДенИзм = ПолучитьОбъектТипаCML(ДенИзмТип, ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "НаимОКВ", ДенежнаяЕдиница.НаименованиеВалюты, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "КодОКВ", ДенежнаяЕдиница.КодВалюты, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "УЕ", ДенежнаяЕдиница.УсловныеЕдиницы, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "КурсВал", ДенежнаяЕдиница.КурсВалюты, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "ОпрУЕ", ДенежнаяЕдиница.ОпределениеУсловныхЕдиниц, , Ошибки);
	СумНалВсего = ПолучитьОбъектТипаCML("СуммНДСТип", ПространствоИмен);
	СуммаНалога = 0;
	Если ДенежнаяЕдиница.СуммаНалога.Свойство("СуммаНалога", СуммаНалога) Тогда
	    РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНалВсего, "СумНал", СуммаНалога, , Ошибки);
	Иначе	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНалВсего, "БезНДС", "без НДС", , Ошибки); //АПК:1036 не проверять строку на орфографию.
	КонецЕсли;	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДенИзм, "СумНалВсего", СумНалВсего, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ДенИзм", ДенИзм, Истина, Ошибки);
	
	// Информационное поле.
	ИнформационноеПолеДокумента = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ИнформационноеПоле");
	Если ИнформационноеПолеДокумента.Количество() > 0 Тогда
		ИнфПолФХЖ1 = ПолучитьОбъектТипаCML("ИнфПолТип", ПространствоИмен);
		Для Каждого ИнформационноеПоле Из ИнформационноеПолеДокумента Цикл
			Если Не ПустаяСтрока(ИнформационноеПоле.ИдентификаторФайла) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнфПолФХЖ1, "ИдФайлИнфПол", ИнформационноеПоле.ИдентификаторФайла, , Ошибки);
			КонецЕсли;	
			Для Каждого ТекстоваяИнформация Из ИнформационноеПоле.ТекстоваяИнформация Цикл
				ТекстИнф = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф",
					ТекстоваяИнформация.Идентификатор, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен",
					ТекстоваяИнформация.Значение, Истина, Ошибки);
				ИнфПолФХЖ1.ТекстИнф.Добавить(ТекстИнф);
			КонецЦикла;
		КонецЦикла;
		Документ.ИнфПолФХЖ1.Добавить(ИнфПолФХЖ1);
	КонецЕсли;
		
	// Подписант.
	ПодписантТип = ПолучитьТипОбъектаCML(СтрШаблон("{%1}.Файл.Документ.Подписант", ПространствоИмен), ВерсияСхемы);
	Подписант = ПолучитьОбъектТипаCML(ПодписантТип, ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ТипПодпис", "2", Истина, Ошибки); // Простая электронная подпись.
	// В подписанте пустым значением заполняется поле Физ.лицо.
	ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
	Документ.Подписант.Добавить(Подписант);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, Ошибки);

	ПроверитьОбъектXDTO(Файл, Ошибки);

	Результат = НовыйРезультатЗаполненияДокумента();

	Если ЗначениеЗаполнено(Ошибки) Тогда

		Результат.Ошибки = Ошибки;

	Иначе

		ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Файл, , , "Файл");
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные =
			ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);

		ИмяФайлаПоУмолчанию = ИдентификаторФайла + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ИмяФайлаПоУмолчанию;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#Область МетодыЗаполнения

Функция ИдентификаторФайла_УПД2019_ИнформацияПродавца(Знач Данные, Знач ДатаФормирования)
	
	ЕстьПрослеживание = Ложь;
	ЕстьМаркировка = Ложь;
	СведенияОТоварах = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СведенияОТоварах.Строки Цикл
		Прослеживание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
		ЕстьПрослеживание = ЕстьПрослеживание ИЛИ ЗначениеЗаполнено(Прослеживание);
		Маркировка = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировке");
		Если ТипЗнч(Маркировка) = Тип("Структура") Тогда
			Если (Маркировка.Свойство("ТранспортныеУпаковки") И ЗначениеЗаполнено(Маркировка.ТранспортныеУпаковки))
				ИЛИ (Маркировка.Свойство("ИндивидуальныеУпаковки") И ЗначениеЗаполнено(Маркировка.ИндивидуальныеУпаковки))
				ИЛИ (Маркировка.Свойство("КонтрольныеИдентификационныеЗнаки") И ЗначениеЗаполнено(Маркировка.КонтрольныеИдентификационныеЗнаки)) Тогда
				ЕстьМаркировка = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьПрослеживание И ЕстьМаркировка Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КонтрольДвиженияТовара = "";
	Если ЕстьПрослеживание Тогда
		КонтрольДвиженияТовара = "PROS";
	ИначеЕсли ЕстьМаркировка Тогда
		КонтрольДвиженияТовара = "MARK";
	КонецЕсли;
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_NSCHFDOPPR%1_%2_%3_%4_%5",
		КонтрольДвиженияТовара, 
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ЗаполнитьСведенияОбУчастникеУПД_2019(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , Ошибки);
	
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		СвЮЛУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "НаимОрг", Наименование, Истина, Ошибки);
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		Если ЗначениеЗаполнено(ИНН) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИННЮЛ", ИНН, Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ДефИННЮЛ", "-", Истина, Ошибки);
		КонецЕсли;
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "КПП", КПП, Ложь, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛУч, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		СвИПТип = ПолучитьОбъектТипаCML("СвИПТип", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Если ЗначениеЗаполнено(ИНН) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ИННФЛ", ИНН, Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ДефИННФЛ", "-", Истина, Ошибки);
		КонецЕсли;
		
		СвидетельствоОГосРегистрации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "СвГосРегИП", СвидетельствоОГосРегистрации, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИПТип, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		СвФЛТип = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛУчастФХЖ", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛТип, "ИННФЛ", ИНН, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛТип, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛТип, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛУчастФХЖ",  СвФЛТип, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		СвИнНеУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвИнНеУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИнНеУч",  СвИнНеУч, , Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
	
	АдресЗаполнен = Истина;
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Район", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Район"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Город", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Город"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, Ошибки);
		
	Иначе
		
		АдресЗаполнен = Ложь;
		
	КонецЕсли;
	Если АдресЗаполнен Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.Телефон"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета"), , Ошибки);
		
		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, , Ошибки);
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, , Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторФайла_УПД2019_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования, Знач ИнформацияПродавца)
	
	ИдентификаторФайлаПродавца = ИнформацияПродавца.ИдФайл;
	
	КонтрольДвиженияТовара = "";
	Если СтрНайти(ИдентификаторФайлаПродавца, "PROS") > 0 Тогда
		КонтрольДвиженияТовара = "PROS";
	ИначеЕсли СтрНайти(ИдентификаторФайлаПродавца, "MARK") > 0 Тогда
		КонтрольДвиженияТовара = "MARK";
	КонецЕсли;
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_NSCHFDOPPOK%1_%2_%3_%4_%5",
		КонтрольДвиженияТовара, 
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ОбъектXDTO_УПД2019_ИнформацияПродавца(Знач ДанныеXML)
	
	ПространствоИмен = ПространствоИмен_УПД2019_ИнформацияПродавца();
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
	
	Возврат Объект;
	
КонецФункции

Функция ИдентификаторФайла_ПередачаТоваров_ИнформацияПродавца(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("DP_TOVTORGPR_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ПередачаТоваров_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("DP_TOVTORGPOK_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ПередачаУслуг_ИнформацияПродавца(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("DP_REZRUISP_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ПередачаУслуг_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("DP_REZRUZAK_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ПриемкаСдачаРабот_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("DP_ZAKTPRM_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_АктОРасхождениях_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования)
	
	ЕстьМаркировка = Ложь;

	РезультатыПриемки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "РезультатыПриемки");
	ЕстьМаркировка = Ложь;
	НаборГруппДанныхСМаркировкой = СтрРазделить("ПоДокументу,ПоФакту,Бой,Брак,Излишки,Недостача", ",");
	
	Для Каждого СтрокаПриемки Из РезультатыПриемки Цикл
		Для каждого ГруппаДанных Из НаборГруппДанныхСМаркировкой Цикл
			Маркировка = СтрокаПриемки[ГруппаДанных].Маркировка;
			Если ЗначениеЗаполнено(Маркировка.ИндивидуальныеУпаковки)
				ИЛИ ЗначениеЗаполнено(Маркировка.КонтрольныеИдентификационныеЗнаки)
				ИЛИ ЗначениеЗаполнено(Маркировка.ТранспортныеУпаковки) Тогда
				ЕстьМаркировка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КонтрольДвиженияТовара = "";
	Если ЕстьМаркировка Тогда
		КонтрольДвиженияТовара = "MARK";
	КонецЕсли;
	
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("DP_PRIRASXPRIN%1_%2_%3_%4_%5",
		КонтрольДвиженияТовара,
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_УКД_ИнформацияПродавца(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_KORSCHFDOPPR_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_УКД_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_KORSCHFDOPPOK_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_УКД2020_ИнформацияПродавца(Знач Данные, Знач ДатаФормирования)

	ЕстьПрослеживание = Ложь;
	ЕстьМаркировка = Ложь;
	СведенияОТоварах = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СведенияОТоварах.Строки Цикл
		Прослеживание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОПрослеживаемости");
		ЕстьПрослеживание = ЕстьПрослеживание ИЛИ ЗначениеЗаполнено(Прослеживание);
		Если ЕстьПрослеживание Тогда
			Прервать;
		КонецЕсли;
	
		МаркировкаДо = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо");
		Если ТипЗнч(МаркировкаДо) = Тип("Структура") Тогда
			Если (МаркировкаДо.Свойство("ТранспортныеУпаковки") И ЗначениеЗаполнено(МаркировкаДо.ТранспортныеУпаковки))
				ИЛИ (МаркировкаДо.Свойство("ИндивидуальныеУпаковки") И ЗначениеЗаполнено(МаркировкаДо.ИндивидуальныеУпаковки))
				ИЛИ (МаркировкаДо.Свойство("КонтрольныеИдентификационныеЗнаки") И ЗначениеЗаполнено(МаркировкаДо.КонтрольныеИдентификационныеЗнаки)) Тогда
				ЕстьМаркировка = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		МаркировкаПосле = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			Товар, "СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле");
		Если ТипЗнч(МаркировкаПосле) = Тип("Структура") Тогда
			Если (МаркировкаПосле.Свойство("ТранспортныеУпаковки") И ЗначениеЗаполнено(МаркировкаПосле.ТранспортныеУпаковки))
				ИЛИ (МаркировкаПосле.Свойство("ИндивидуальныеУпаковки") И ЗначениеЗаполнено(МаркировкаПосле.ИндивидуальныеУпаковки))
				ИЛИ (МаркировкаПосле.Свойство("КонтрольныеИдентификационныеЗнаки") И ЗначениеЗаполнено(МаркировкаПосле.КонтрольныеИдентификационныеЗнаки)) Тогда
				ЕстьМаркировка = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	КонтрольДвиженияТовара = "";
	Если ЕстьПрослеживание Тогда
		КонтрольДвиженияТовара = "PROS";
	ИначеЕсли ЕстьМаркировка Тогда
		КонтрольДвиженияТовара = "MARK";
	КонецЕсли;
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_NKORSCHFDOPPR%1_%2_%3_%4_%5",
		КонтрольДвиженияТовара, 
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_УКД2020_ИнформацияПокупателя(Знач Данные, Знач ДатаФормирования, Знач ИнформацияПродавца)
	
	ИдентификаторФайлаПродавца = ИнформацияПродавца.ИдФайл;
	
	КонтрольДвиженияТовара = "";
	Если СтрНайти(ИдентификаторФайлаПродавца, "PROS") > 0 Тогда
		КонтрольДвиженияТовара = "PROS";
	ИначеЕсли СтрНайти(ИдентификаторФайлаПродавца, "MARK") > 0 Тогда
		КонтрольДвиженияТовара = "MARK";
	КонецЕсли;
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_NKORSCHFDOPPOK%1_%2_%3_%4_%5",
		КонтрольДвиженияТовара, 
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ИзвещениеОПолучении(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Отправитель = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Отправитель");
	
	ИдПолучателя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"Получатель.ТипУчастника.ОператорЭДО.ИдентификаторОператора", Ложь);
	Если Не ЗначениеЗаполнено(ИдПолучателя) Тогда
		Получатель = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Получатель");
		ИдПолучателя = Получатель.ИдУчастникаЭДО;
	КонецЕсли;
	
	ИдентификаторФайла = СтрШаблон("DP_IZVPOL_%1_%2_%3_%4",
		ИдПолучателя,
		Отправитель.ИдУчастникаЭДО,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ПредложениеОбАннулировании(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Отправитель = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Отправитель");
	Получатель = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Получатель");
	
	ИдентификаторФайла = СтрШаблон("DP_PRANNUL_%1_%2_%3_%4",
		Получатель.ИдУчастникаЭДО,
		Отправитель.ИдУчастникаЭДО,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_УведомлениеОбУточнении(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Отправитель = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Отправитель");
	Получатель = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Получатель");
	
	ИдентификаторФайла = СтрШаблон("DP_UVUTOCH_%1_%2_%3_%4",
		Получатель.ИдУчастникаЭДО,
		Отправитель.ИдУчастникаЭДО,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_КоммерческоеПредложение(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
		
	ИдентификаторФайла = СтрШаблон("CommerceOffer_%1",
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_ЗапросКоммерческогоПредложения(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	
	ИдентификаторФайла = СтрШаблон("CommerceOfferRequest_%1",
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_АктСверкиВзаиморасчетов_ИнформацияОтправителя(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_AKTSVEROTP_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции	

Функция ИдентификаторФайла_АктСверкиВзаиморасчетов_ИнформацияПолучателя(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_AKTSVERPOL_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИдентификаторФайла_СчетНаОплату101(Знач Данные, Знач ДатаФормирования)
	
	УникальныйИдентификатор = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		Данные, "УникальныйИдентификатор");
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	
	ИдентификаторФайла = СтрШаблон("ON_CHETOP_%1_%2_%3_%4",
		Участники.ИдентификаторПолучателя,
		Участники.ИдентификаторОтправителя,
		Формат(ДатаФормирования, "ДФ=yyyyMMdd"),
		УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ДанныеУчастникаBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, Путь, Ошибки)
	
	// Organization
	Organization = ПолучитьОбъектТипаCML("Organization", ПространствоИменСхемы);
	
	ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		СтрШаблон("%1.Наименование", Путь));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Organization, "name", ЗначениеСвойства, Истина, Ошибки);
	
	ВидОрганизации = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		СтрШаблон("%1.Вид", Путь));
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		// Organization.IndividualEntrepreneur
		IndividualEntrepreneur = ПолучитьОбъектТипаCML("Organization.individualEntrepreneur",
			ПространствоИменСхемы);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.Вид.ИндивидуальныйПредприниматель.ИНН", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(IndividualEntrepreneur, "inn", ЗначениеСвойства, Истина, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.Вид.ИндивидуальныйПредприниматель.Имя", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(IndividualEntrepreneur, "name", ЗначениеСвойства, Истина, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.Вид.ИндивидуальныйПредприниматель.Фамилия", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(IndividualEntrepreneur, "surname", ЗначениеСвойства, Истина, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.Вид.ИндивидуальныйПредприниматель.Отчество", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(IndividualEntrepreneur, "patronymic", ЗначениеСвойства, Ложь, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Organization, "IndividualEntrepreneur", IndividualEntrepreneur, Истина, Ошибки);
		
	ИначеЕсли ВидОрганизации = "ЮридическоеЛицо" Тогда
		
		// Organization.Entity
		Entity = ПолучитьОбъектТипаCML("Organization.Entity", ПространствоИменСхемы);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.Вид.ЮридическоеЛицо.ИНН", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Entity, "inn", ЗначениеСвойства, Ложь, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.Вид.ЮридическоеЛицо.КПП", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Entity, "kpp", ЗначениеСвойства, Ложь, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Organization, "Entity", Entity, Истина, Ошибки);
		
	КонецЕсли;
	
	ЮридическийАдрес = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		СтрШаблон("%1.ЮридическийАдрес", Путь));
	
	Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
		
		// Organization.Address
		Address = ПолучитьОбъектТипаCML("Address", ПространствоИменСхемы);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.ЮридическийАдрес.Представление", Путь));
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Address, "name", ЗначениеСвойства, Ложь, Ошибки);
		
		ЗначениеСвойства = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
			СтрШаблон("%1.ЮридическийАдрес.Код", Путь));
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Address, "code", ЗначениеСвойства, Ложь, Ошибки, Истина);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Organization, "address", Address, Ложь, Ошибки);
		
	КонецЕсли;
	
	Возврат Organization;
	
КонецФункции

Функция КонтактноеЛицоBNCommerceOffering(ПространствоИменСхемы, ДеревоДанных, Ошибки)
	
	Contacts = ПолучитьОбъектТипаCML("Contacts", ПространствоИменСхемы);
	
	Менеджер         = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "КонтактноеЛицо.ФИО");
	ЭлектроннаяПочта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"КонтактноеЛицо.ЭлектроннаяПочта");
	Телефон          = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "КонтактноеЛицо.Телефон");
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Contacts, "contactName", Менеджер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Contacts, "email", ЭлектроннаяПочта, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Contacts, "phone", Телефон, Ложь, Ошибки);
	
	Возврат Contacts;
	
КонецФункции


Функция ЗначениеСтавкиНДСФорматаBNCommerceOffering(Знач СтавкаНДС, Знач ЭтоУСН = Ложь)
	
	ПредставлениеСтавкиНДС = Неопределено;
	
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		ПредставлениеСтавкиНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(Неопределено, СтавкаНДС);
	КонецЕсли;
	
	ЗначениеСтавки = Неопределено;
	
	Если ЭтоУСН Или ПредставлениеСтавкиНДС = "без НДС" Тогда
		ЗначениеСтавки = "VAT_Without";
	ИначеЕсли ПредставлениеСтавкиНДС = "0" Тогда
		ЗначениеСтавки = "VAT_0";
	ИначеЕсли ПредставлениеСтавкиНДС = "10" Тогда
		ЗначениеСтавки = "VAT_10";
	ИначеЕсли ПредставлениеСтавкиНДС = "18" Тогда
		ЗначениеСтавки = "VAT_18";
	ИначеЕсли ПредставлениеСтавкиНДС = "20" Тогда
		ЗначениеСтавки = "VAT_20";
	КонецЕсли;
	
	Возврат ЗначениеСтавки;
	
КонецФункции

Процедура ЗаполнитьСведенияОбУчастникеПередачаТоваров(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		СвОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИмен);
		СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.СвЮЛ", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", Наименование, Истина, Ошибки);
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ИНН, Истина, Ошибки);
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", КПП, Ложь, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "СвЮЛ", СвЮЛ, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СвОрг, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		СвИП = ПолучитьОбъектТипаCML("СвИПТип", ПространствоИмен);		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ", ИНН, Истина, Ошибки);		
		СвидетельствоОГосРегистрации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "СвГосРегИП", СвидетельствоОГосРегистрации, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИП, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИностраннаяОрганизация" Тогда
		СвОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИмен);
		ИнОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.ИнОрг", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОрг, "НаимОрг", Наименование, Истина, Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОрг, "ИныеСвед", ИныеСведения, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОрг, "Страна", ИныеСведения, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИнОрг", ИнОрг, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СвОрг, , Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
	
	АдресЗаполнен = Истина; 
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "Структурированный" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Индекс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.КодРегион"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Район", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Район"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Город", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Город"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.НаселПункт"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Улица"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Дом"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Корпус"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Кварт"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "Произвольный" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", "643", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Произвольный"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "Иностранный" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Иностранный.КодСтраны"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Иностранный.АдресТекст"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, Ошибки);
		
	Иначе
		
		АдресЗаполнен = Ложь;
		
	КонецЕсли;
	Если АдресЗаполнен Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Контакт.Телефон"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Контакт.ЭлектроннаяПочта"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НомерСчета"), , Ошибки);

		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НаимБанк"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.БИК"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.КорСчет"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, Истина, Ошибки);
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникеПередачаУслуг(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		СвОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИмен);
		СвЮЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.СвЮЛ", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", Наименование, Истина, Ошибки);
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ИНН, Истина, Ошибки);
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", КПП, Ложь, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "СвЮЛ", СвЮЛ, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СвОрг, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		СвИП = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвИП", ПространствоИмен);		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ", ИНН, Истина, Ошибки);		
		СвидетельствоОГосРегистрации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "СвГосРегИП", СвидетельствоОГосРегистрации, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИП, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , Ошибки);		
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИностраннаяОрганизация" Тогда
		СвОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИмен);
		ИнОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.ИнОрг", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОрг, "НаимОрг", Наименование, Истина, Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОрг, "ИныеСвед", ИныеСведения, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОрг, "Страна", ИныеСведения, Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИнОрг", ИнОрг, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СвОрг, , Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
	
	АдресЗаполнен = Истина; 
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "Структурированный" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Индекс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.КодРегион"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Район", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Район"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Город", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Город"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.НаселПункт"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Улица"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Дом"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Корпус"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Структурированный.Кварт"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "Произвольный" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", "643", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Произвольный"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИно", АдрИнфТип, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "Иностранный" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Иностранный.КодСтраны"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.Иностранный.АдресТекст"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИно", АдрИнфТип, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, Ошибки);
		
	Иначе
		
		АдресЗаполнен = Ложь;
		
	КонецЕсли;
	Если АдресЗаполнен Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Контакт")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Контакт.Телефон"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Контакт.ЭлектроннаяПочта"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НомерСчета"), , Ошибки);
		
		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.НаимБанк"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.БИК"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскийСчет.КорСчет"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, Истина, Ошибки);
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектXDTO_ПередачаТоваров_ИнформацияПродавца(Знач ДанныеXML)
	
	ПространствоИмен = ПространствоИмен_ПередачаТоваров_ИнформацияПродавца();
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
	
	Возврат Объект;
	
КонецФункции

Функция ОбъектXDTO_ПередачаУслуг_ИнформацияПродавца(Знач ДанныеXML)
	
	ПространствоИмен = ПространствоИмен_ПередачаУслуг_ИнформацияПродавца();
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
	
	Возврат Объект;
	
КонецФункции

Функция ОбъектXDTO_УПД_ИнформацияПродавца(Знач ДанныеXML)
	
	ПространствоИмен = ПространствоИмен_УПД_ИнформацияПродавца();
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
	
	Возврат Объект;
	
КонецФункции

Процедура ЗаполнитьСведенияОбУчастниеАктОРасхождениях(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , Ошибки);
	
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		СвОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИмен);
		СвОргУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.СвОргУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОргУч, "НаимОрг", Наименование, Истина, Ошибки);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОргУч, "ИННЮЛ", ИНН, Истина, Ошибки);
		
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОргУч, "КПП", КПП, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "СвОргУч", СвОргУч, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СвОрг, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		СвИП = ПолучитьОбъектТипаCML("СвИПТип", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ", ИНН, Истина, Ошибки);
		
		СвидетельствоОГосРегистрации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "СвГосРегИП", СвидетельствоОГосРегистрации, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИП, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		СвОрг = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг", ПространствоИмен);
		СвИнНеУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвОрг.СвИнНеУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , Ошибки);
		
		Страна = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.Страна");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "Страна", Страна, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "СвИнНеУч", СвИнНеУч, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвОрг", СвОрг, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		СвФЛ = ПолучитьОбъектТипаCML("СвФлТип", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИО", ФИО, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , Ошибки);
		
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
	
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ") <> Неопределено Тогда
		
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Район", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Район"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Город", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Город"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Улица", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Дом", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация") <> Неопределено Тогда
		
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР") <> Неопределено Тогда
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, Ошибки);
		
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, Ошибки);
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.Телефон"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета"), , Ошибки);
		
		СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, Истина, Ошибки);
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОМаркировкеАктОРасхождениях(ОбъектXDTO, Маркировка, ПространствоИмен, Ошибки)
	
	Если ЗначениеЗаполнено(Маркировка.ТранспортныеУпаковки) Тогда
		
		Для каждого СтрокаМаркировки Из Маркировка.ТранспортныеУпаковки Цикл
			
			НомСредИдентТов = ФабрикаXDTO.Создать(ОбъектXDTO.НомСредИдентТов.ВладеющееСвойство.Тип);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НомСредИдентТов, "ИдентТрансУпак", СтрокаМаркировки.Код, , Ошибки);
			ОбъектXDTO.НомСредИдентТов.Добавить(НомСредИдентТов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Маркировка.ИндивидуальныеУпаковки) Тогда
		
		НомСредИдентТов = ФабрикаXDTO.Создать(ОбъектXDTO.НомСредИдентТов.ВладеющееСвойство.Тип);
		
		Для каждого СтрокаМаркировки Из Маркировка.ИндивидуальныеУпаковки Цикл
			
			НомСредИдентТов.НомУпак.Добавить(СтрокаМаркировки.Код);
			
		КонецЦикла;
		
		ОбъектXDTO.НомСредИдентТов.Добавить(НомСредИдентТов);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Маркировка.КонтрольныеИдентификационныеЗнаки) Тогда
		
		НомСредИдентТов = ФабрикаXDTO.Создать(ОбъектXDTO.НомСредИдентТов.ВладеющееСвойство.Тип);
		
		Для каждого СтрокаМаркировки Из Маркировка.КонтрольныеИдентификационныеЗнаки Цикл
			
			НомСредИдентТов.КИЗ.Добавить(СтрокаМаркировки.Код);
			
		КонецЦикла;
		
		ОбъектXDTO.НомСредИдентТов.Добавить(НомСредИдентТов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеДанныеАктОРасхождениях(ИнфПол, ДополнительныеДанные, ПространствоИмен, Ошибки)
	
	Если Не (ТипЗнч(ДополнительныеДанные) = Тип("Соответствие")
		ИЛИ ТипЗнч(ДополнительныеДанные) = Тип("Структура")) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючЗначение Из ДополнительныеДанные Цикл
		
		ТекстИнф = ПолучитьОбъектТипаCML("ТекстИнфТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Идентиф", КлючЗначение.Ключ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекстИнф, "Значен", КлючЗначение.Значение, Истина, Ошибки);
		ИнфПол.ТекстИнф.Добавить(ТекстИнф);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФорматДатаВремяеАктОРасхождениях()
	Возврат "ДФ='dd.MM.yyyy HH.mm.ss'";
КонецФункции

Процедура ЗаполнитьСведенияОбУчастникеАктСверкиВзаиморасчетов(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , Ошибки);
	
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		СвЮЛУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛУч", ПространствоИмен);
				
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "НаимОрг", Наименование, Истина, Ошибки);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИННЮЛ", ИНН, Истина, Ошибки);
		
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "КПП", КПП, , Ошибки);
		
		ОГРН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН");
		Если ПустаяСтрока(ОГРН) Тогда	
			ОГРН = "0000000000000";	
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ОГРН", ОГРН, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛУч, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		СвИП = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвИП", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ", ИНН, Истина, Ошибки);
		
		ОГРН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ОГРН");
		Если ПустаяСтрока(ОГРН) Тогда	
			ОГРН = "000000000000000";	
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ОГРНИП", ОГРН, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИП, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		СвИнНеУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвИнНеУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , Ошибки);
		
		Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "Идентиф", Идентификатор, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИнНеУч", СвИнНеУч, , Ошибки);		
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ИНН, , Ошибки);
				
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИО", ФИО, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , Ошибки);
		
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
		
	КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
	КонтактныеСведения = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения");
			
	Телефон	= ?(ПустаяСтрока(КонтактныеСведения.Телефон), "-", КонтактныеСведения.Телефон);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф", Телефон, , Ошибки);
	
	ЭлектроннаяПочта = ?(ПустаяСтрока(КонтактныеСведения.ЭлектроннаяПочта), "-", КонтактныеСведения.ЭлектроннаяПочта);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта", ЭлектроннаяПочта, , Ошибки);
	
	Иное = ?(ПустаяСтрока(КонтактныеСведения.Иное), "-", КонтактныеСведения.Иное);	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ИнКонт", Иное, , Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, Ошибки);
	
КонецПроцедуры	

Процедура ЗаполнитьСведенияОбУчастникеСчетНаОплату101(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "КраткНазв",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КраткоеНазвание"), , Ошибки);		
			
	ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		СвЮЛУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛУч", ПространствоИмен);
				
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "НаимОрг", Наименование, Истина, Ошибки);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИННЮЛ", ИНН, Истина, Ошибки);
		
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "КПП", КПП, , Ошибки);
		
		ОГРН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ОГРН", ОГРН, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИныеСвед", ИныеСведения, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛУч, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		СвИП = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвИП", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ", ИНН, Истина, Ошибки);
		
		ОГРН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ОГРН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ОГРНИП", ОГРН, , Ошибки);
		
		СвидетельствоГосударственнойРегистрации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоГосударственнойРегистрации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "СвГосРегИП", СвидетельствоГосударственнойРегистрации, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ФИО.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ФИО.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ФИО.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП", СвИП, , Ошибки);
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		СвИнНеУч = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвИнНеУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , Ошибки);
		
		Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "Идентиф", Идентификатор, , Ошибки);
		
		ОКСМ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ОКСМ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "ОКСМ", ОКСМ, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИнНеУч", СвИнНеУч, , Ошибки);		
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		СвФЛУчастФХЖ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛУчастФХЖ", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛУчастФХЖ, "ИННФЛ", ИНН, , Ошибки);
		
		СНИЛС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.СНИЛС");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛУчастФХЖ, "СНИЛС", СНИЛС, , Ошибки);
		
		ИдентификаторИностранногоФизЛица = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИдентификаторИностранногоФизЛица");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛУчастФХЖ, "ИдентифФЛ", ИдентификаторИностранногоФизЛица, , Ошибки);
		
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛУчастФХЖ, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ФИО.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ФИО.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.ФИО.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛУчастФХЖ, "ФИО", ФИО, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛУчастФХЖ", СвФЛУчастФХЖ, , Ошибки);
		
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
	
	НомерСчета = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета");
	Если НомерСчета <> Неопределено И Не ПустаяСтрока(НомерСчета) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета", НомерСчета, Истина, Ошибки);
		НаименованиеБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НаимБанк", НаименованиеБанка, , Ошибки);
		ИННБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.ИННБанка");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "ИННЮЛ", ИННБанка, , Ошибки);
		КППБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КППБанка");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "КПП", КППБанка, , Ошибки);
		БИКБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "БИК", БИКБанка, Истина, Ошибки);
		КорреспондентскийСчетБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "КорСчет", КорреспондентскийСчетБанка, Истина, Ошибки);
		РасчетныйСчет = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.РасчетныйСчет");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "РасчСчет", РасчетныйСчет, Истина, Ошибки);
		КодSWIFT = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КодSWIFT");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "SWIFTКод", КодSWIFT, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, , Ошибки);
	КонецЕсли;	
		
	АдресЗаполнен = Истина;
	Адрес = ПолучитьОбъектТипаCML("АдресТип", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		АдресРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Индекс",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "КодРегион",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Район",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Район"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Город",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Город"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "НаселПункт",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Улица",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Дом",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Корпус",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресРФ, "Кварт",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Адрес, "АдрРФ", АдресРФ, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресФИАС" Тогда	
		АдресФИАС = ПолучитьОбъектТипаCML("АдрФИАСТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "ИдНом",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ИдентификаторОбъекта"), , Ошибки);
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "Регион",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.Регион"), Истина, Ошибки);
			
		МуниципальныйРайон = ПолучитьОбъектТипаCML("ВидНаимКодТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(МуниципальныйРайон, "ВидКод",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.МуниципальныйРайон.Вид"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(МуниципальныйРайон, "Наим",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.МуниципальныйРайон.Наименование"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "МуниципРайон", МуниципальныйРайон, , Ошибки);
			
		ГородскоеПоселение = ПолучитьОбъектТипаCML("ВидНаимКодТип", ПространствоИмен);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ГородскоеПоселение, "ВидКод",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ГородскоеПоселение.Вид"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ГородскоеПоселение, "Наим",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ГородскоеПоселение.Наименование"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "ГородСелПоселен", ГородскоеПоселение, , Ошибки);	
		
		НаселенныйПункт = ПолучитьОбъектТипаCML("ВидНаимТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НаселенныйПункт, "Вид",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.НаселенныйПункт.Вид"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НаселенныйПункт, "Наим",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.НаселенныйПункт.Наименование"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "НаселенПункт", НаселенныйПункт, , Ошибки);	
			
		ЭлементПланировочнойСтруктуры = ПолучитьОбъектТипаCML("ТипНаимТип", ПространствоИмен);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЭлементПланировочнойСтруктуры, "Тип",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементПланировочнойСтруктуры.Тип"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЭлементПланировочнойСтруктуры, "Наим",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементПланировочнойСтруктуры.Наименование"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "ЭлПланСтруктур", ЭлементПланировочнойСтруктуры, , Ошибки);	
			
		ЭлементУличноДорожнойСети = ПолучитьОбъектТипаCML("ТипНаимТип", ПространствоИмен);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЭлементУличноДорожнойСети, "Тип",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементУличноДорожнойСети.Тип"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЭлементУличноДорожнойСети, "Наим",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементУличноДорожнойСети.Наименование"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "ЭлУлДорСети", ЭлементУличноДорожнойСети, , Ошибки);	
			
		ЗданиеСооружение = ПолучитьОбъектТипаCML("НомерТип", ПространствоИмен);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗданиеСооружение, "Тип",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ЗданиеСооружение.Тип"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗданиеСооружение, "Номер",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ЗданиеСооружение.Номер"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "Здание", ЗданиеСооружение, , Ошибки);	
			
		ПомещениеЗдания	= ПолучитьОбъектТипаCML("НомерТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПомещениеЗдания, "Тип",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеЗдания.Тип"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПомещениеЗдания, "Номер",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеЗдания.Номер"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "ПомещЗдания", ПомещениеЗдания, , Ошибки);	
		
		ПомещениеКвартиры = ПолучитьОбъектТипаCML("НомерТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПомещениеКвартиры, "Тип",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеКвартиры.Тип"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПомещениеКвартиры, "Номер",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеКвартиры.Номер"), Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресФИАС, "ПомещКвартиры", ПомещениеКвартиры, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Адрес, "АдрФИАС", АдресФИАС, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда	
		АдресИнформация = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресИнформация, "КодСтр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресИнформация, "АдрТекст",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст"), Истина, Ошибки);	
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Адрес, "АдрИнф", АдресИнформация, , Ошибки);	
	Иначе
		АдресЗаполнен = Ложь;
	КонецЕсли;
	Если АдресЗаполнен Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", Адрес, , Ошибки);
	КонецЕсли;
	
	Контакт = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
	КонтактныеСведения = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения");
	Если КонтактныеСведения.Телефоны.Количество() = 0 Тогда
		Контакт.Тлф.Добавить("-");
	Иначе
		Для Каждого Телефон Из КонтактныеСведения.Телефоны Цикл
			Контакт.Тлф.Добавить(Телефон.Телефон);
		КонецЦикла;	
	КонецЕсли;	
	Если КонтактныеСведения.ЭлектронныеПочты.Количество() > 0 Тогда
		Для Каждого ЭлектроннаяПочта Из КонтактныеСведения.ЭлектронныеПочты Цикл
			Контакт.ЭлПочта.Добавить(ЭлектроннаяПочта.ЭлектроннаяПочта);
		КонецЦикла;	
	КонецЕсли;
	Если Не ПустаяСтрока(КонтактныеСведения.Иное) Тогда
	    РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "ИнКонт", КонтактныеСведения.Иное, , Ошибки);
	КонецЕсли;
	УчастникXDTO.Конт.Добавить(Контакт);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникеУКД(УчастникXDTO, СтрокаДереваДанных, Ошибки, ПространствоИмен, ВидУчастника)
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".КодОКПО"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "СтруктПодр", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".СтруктурноеПодразделение"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИнфДляУчаст", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		СтрокаДереваДанных, ВидУчастника + ".ИнформацияДляУчастника"), , Ошибки);
	
	ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		СвЮЛУч = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвЮЛУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "НаимОрг", Наименование, Истина, Ошибки);
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "ИННЮЛ", ИНН, Истина, Ошибки);
		КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛУч, "КПП", КПП, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛУч", СвЮЛУч, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		СвИПТип = ПолучитьОбъектТипаCML("СвИПТип", ПространствоИмен);
		
		ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ИННФЛ", ИНН, Истина, Ошибки);
		
		СвидетельствоОГосРегистрации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "СвГосРегИП", СвидетельствоОГосРегистрации, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ИныеСвед", ИныеСведения, , Ошибки);
		
		ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
		Фамилия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", Фамилия, Истина, Ошибки);
		Имя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", Имя, Истина, Ошибки);
		Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", Отчество, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИПТип, "ФИО", ФИО,  , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИП",  СвИПТип, , Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		СвИнНеУч = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвИнНеУч", ПространствоИмен);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "НаимОрг", Наименование, , Ошибки);
		ИныеСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "ИныеСвед", ИныеСведения, , Ошибки);
		Если ПространствоИмен = ПространствоИмен_УКД2020_ИнформацияПродавца() Тогда
			ИдентификаторИнЮЛ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ИЛ.Идентификатор", Ложь);
			Если ЗначениеЗаполнено(ИдентификаторИнЮЛ) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИнНеУч, "Идентиф", ИдентификаторИнЮЛ, , Ошибки);
			КонецЕсли;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИдСв, "СвИнНеУч",  СвИнНеУч, , Ошибки);
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, Истина, Ошибки);
	
	АдресЗаполнен = Истина;
	АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИмен);
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресРФ" Тогда
		АдрРФ = ПолучитьОбъектТипаCML("АдрРФТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Индекс",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Район",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Район"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Город",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Город"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "НаселПункт",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Улица",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Дом",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Корпус",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрРФ, "Кварт",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".Адрес") = "АдресИнформация" Тогда
		АдрИнфТип = ПолучитьОбъектТипаCML("АдрИнфТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "КодСтр",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдрИнфТип, "АдрТекст",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст"), Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "АдрИнф", АдрИнфТип, Истина, Ошибки);
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес") = "КодГАР" Тогда
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "КодГАР",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".Адрес.КодГАР"), Истина, Ошибки);
		
	Иначе
		
		АдресЗаполнен = Ложь;
		
	КонецЕсли;
	Если АдресЗаполнен Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Адрес", АдресТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения")) Тогда
		КонтактТип = ПолучитьОбъектТипаCML("КонтактТип", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "Тлф",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.Телефон"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КонтактТип, "ЭлПочта",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта"), , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", КонтактТип, Истина, Ошибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты")) Тогда
		БанкРекв = ПолучитьОбъектТипаCML("СвПродПокТип.БанкРекв", ПространствоИмен);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "НомерСчета",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета"), , Ошибки);
		
		СвБанк = ПолучитьОбъектТипаCML("СвПродПокТип.БанкРекв.СвБанк", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "НаимБанк",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "КорСчет",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДереваДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкРекв, "СвБанк", СвБанк, Истина, Ошибки);
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанкРекв, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектXDTO_УКД_ИнформацияПродавца(Знач ДанныеXML)
	
	ПространствоИмен = ПространствоИмен_УКД_ИнформацияПродавца();
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
	
	Возврат Объект;
	
КонецФункции

Процедура ЗаполнитьСтоимостьТовараУКД_2020(СведенияОТоваре, Товар, ПространствоИменСхемы, ЭтоСтоимостьСНалогом, ФункцияУКД, Ошибки) 

	Если ЭтоСтоимостьСНалогом Тогда
		
		ИмяСтоимостьДо = "СтоимостьТоваровСНалогомДоКорректировки";
		ИмяСтоимостьПосле = "СтоимостьТоваровСНалогом";
		ИмяСтоимостьУвеличение = "СтоимостьТоваровСНалогомУвеличение";
		ИмяСтоимостьУменьшение = "СтоимостьТоваровСНалогомУменьшение";
		ИмяЭлемента = "СтТовУчНал";
		
	Иначе
		
		ИмяСтоимостьДо = "СтоимостьТоваровБезНалогаДоКорректировки";
		ИмяСтоимостьПосле = "СтоимостьТоваровБезНалога";
		ИмяСтоимостьУвеличение = "СтоимостьТоваровБезНалогаУвеличение";
		ИмяСтоимостьУменьшение = "СтоимостьТоваровБезНалогаУменьшение";
		ИмяЭлемента = "СтТовБезНДС";
		
	КонецЕсли;
	
	РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
	СтавкаНДСДоИсчисляетсяНалоговымАгентом = ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(РеквизитСтавкаНДС);
	ЭтоКорректировкаСчетаФактуры = (ФункцияУКД = КСЧФ() ИЛИ ФункцияУКД = КСЧФДИС());
	
	ЕстьДанные = Ложь;
	СтоимТип = ПолучитьОбъектТипаCML("СтоимТип", ПространствоИменСхемы);  
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьДо);
	СтоимостьДо = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, ПолныйПуть);
	Если СтоимостьДо <> Неопределено Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимДоИзм", СтоимостьДо, Истина, Ошибки);
		ЕстьДанные = Истина;
	КонецЕсли;
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьПосле);
	СтоимостьПосле = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, ПолныйПуть,,,Истина);
	Если СтоимостьПосле > 0
		ИЛИ (ЭтоКорректировкаСчетаФактуры И Не ЭтоСтоимостьСНалогом)
		ИЛИ (ЭтоКорректировкаСчетаФактуры И ЭтоСтоимостьСНалогом И Не СтавкаНДСДоИсчисляетсяНалоговымАгентом)
		ИЛИ (Не ЭтоКорректировкаСчетаФактуры И СтоимостьДо <> Неопределено) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимПослеИзм", СтоимостьПосле, Истина, Ошибки);
		ЕстьДанные = Истина;
	КонецЕсли;
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьУвеличение);
	СтоимостьУвеличение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, ПолныйПуть);
	Если ЗначениеЗаполнено(СтоимостьУвеличение) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУвел", СтоимостьУвеличение, , Ошибки);
		ЕстьДанные = Истина;
	КонецЕсли;
	
	ПолныйПуть = СтрШаблон("СведенияОТоварах.НомерСтроки.%1", ИмяСтоимостьУменьшение);
	СтоимостьУменьшение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, ПолныйПуть,,,Истина);
	Если Не ЗначениеЗаполнено(СтоимостьУвеличение)
		И ((СтоимостьУменьшение > 0)
			ИЛИ (ЭтоКорректировкаСчетаФактуры И Не ЭтоСтоимостьСНалогом)
			ИЛИ (ЭтоКорректировкаСчетаФактуры И ЭтоСтоимостьСНалогом И Не СтавкаНДСДоИсчисляетсяНалоговымАгентом)) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СтоимТип, "СтоимУм", СтоимостьУменьшение, , Ошибки);
		ЕстьДанные = Истина;
	КонецЕсли;
	
	Если ЕстьДанные Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТоваре, ИмяЭлемента, СтоимТип, , Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сумму акциза, увеличение (уменьшение) (графа 6, строки В, Г корректировочного счета-фактуры)
// при условии, что увеличение (уменьшение) больше 0.
// 
// Параметры:
//  СведенияОТовареXDTO - ОбъектXDTO
//  СведенияОТовареДеревоДанных - СтрокаДереваЗначений
//  ПространствоИмен - Строка
//  Ошибки - Неопределено, Массив
//  ЭтоЭлектронноеАктированиеЕИС - Булево - Истина, если формируется документ для ЕИС в сфере закупок.
Процедура ЗаполнитьСуммуАкцизаУвеличениеУменьшениеУКД_2020(
	СведенияОТовареXDTO, СведенияОТовареДеревоДанных, ПространствоИмен, Ошибки, ЭтоЭлектронноеАктированиеЕИС = Ложь)
	
	Увеличение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.СуммаАкцизаУвеличение");
	Уменьшение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.СуммаАкцизаУменьшение");
	
	ИмяИЗначениеСуммы = ПолучитьИмяИЗначениеСуммыРазнИзДереваУКД_2020(Увеличение, Уменьшение);
	Если ИмяИЗначениеСуммы.Значение > 0 ИЛИ ЭтоЭлектронноеАктированиеЕИС Тогда
		// Для электронного актирования тег АкцизРазн обязателен.
		РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, ИмяИЗначениеСуммы.Имя, ИмяИЗначениеСуммы.Значение, Истина,
			Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТовареXDTO, "АкцизРазн", РазнСумНалТип, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сумму налога до изменения (графа 8, строка А корректировочного счета-фактуры)
// 
// Параметры:
//  СведенияОТовареXDTO - ОбъектXDTO
//  СведенияОТовареДеревоДанных - СтрокаДереваЗначений
//  ПространствоИмен - Строка
//  Ошибки - Неопределено, Массив
Процедура ЗаполнитьСуммуНалогаДоИзмененияУКД_2020(СведенияОТовареXDTO, СведенияОТовареДеревоДанных, ПространствоИмен, Ошибки)
	
	РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
	СтавкаНДСДо = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
	
	СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
	Если ВРег(СтавкаНДСДо) = ВРег("без НДС") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
	Иначе
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки",,,Истина);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", Реквизит, Истина, Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТовареXDTO, "СумНалДо", СумНДСТип, Истина, Ошибки);
	
КонецПроцедуры

// Заполняет сумму налога после изменения (графа 8, строка Б корректировочного счета-фактуры)
// при условии, что НалСтДо не = «НДС исчисляется налоговым агентом».
// 
// Параметры:
//  СведенияОТовареXDTO - ОбъектXDTO
//  СведенияОТовареДеревоДанных - СтрокаДереваЗначений
//  ПространствоИмен - Строка
//  Ошибки - Неопределено, Массив
Процедура ЗаполнитьСуммуНалогаПослеИзмененияУКД_2020(СведенияОТовареXDTO, СведенияОТовареДеревоДанных, ПространствоИмен, Ошибки)
	
	РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
	Если ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(РеквизитСтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
	СтавкаНДСПосле = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , РеквизитСтавкаНДС);
	
	СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИмен);
	Если ВРег(СтавкаНДСПосле) = ВРег("без НДС") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "БезНДС", "без НДС", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТовареXDTO, "СумНалПосле", СумНДСТип, Истина, Ошибки);
	Иначе
		СуммаНалога = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СуммаНалога",,,Истина);
		Если СуммаНалога < 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Ошибка установки значения %1 для свойства ""%2"".
				|Значение должно быть >= 0.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СуммаНалога, "СумНалПосле");
			ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", СуммаНалога, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТовареXDTO, "СумНалПосле", СумНДСТип, Истина, Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТовареXDTO, "СумНалПосле", СумНДСТип, Истина, Ошибки);
	
КонецПроцедуры

// Заполняет сумму налога после изменения (графа 8, строка Б корректировочного счета-фактуры)
// при условии, что НалСтДо не = «НДС исчисляется налоговым агентом».
// 
// Параметры:
//  СведенияОТовареXDTO - ОбъектXDTO
//  СведенияОТовареДеревоДанных - СтрокаДереваЗначений
//  ПространствоИмен - Строка
//  Ошибки - Неопределено, Массив
Процедура ЗаполнитьСуммуНалогаУвеличениеУменьшениеУКД_2020(СведенияОТовареXDTO, СведенияОТовареДеревоДанных, ПространствоИмен, Ошибки);
	
	РеквизитСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.НалоговаяСтавкаДоКорректировки");
	Если ЭтоСтавкаНДСИсчисляетсяНалоговымАгентом(РеквизитСтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Увеличение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.СуммаНалогаУвеличение");
	Уменьшение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СведенияОТовареДеревоДанных,
		"СведенияОТоварах.НомерСтроки.СуммаНалогаУменьшение");

	ИмяИЗначениеСуммы = ПолучитьИмяИЗначениеСуммыРазнИзДереваУКД_2020(Увеличение, Уменьшение);
	РазнСумНалТип = ПолучитьОбъектТипаCML("РазнСумНалТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РазнСумНалТип, ИмяИЗначениеСуммы.Имя, ИмяИЗначениеСуммы.Значение, Истина,
		Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОТовареXDTO, "СумНалРазн", РазнСумНалТип, Истина, Ошибки);
	
КонецПроцедуры

// Возвращает имя и значение разницы сумм налога до и после изменения.
// 
// Параметры:
//  СуммаУвеличение - Число
//  СуммаУменьшение - Число
// 
// Возвращаемое значение:
//  Структура:
//  * Имя - Строка - СумУвел/СумУм
//  * Значение - Число - разница сумм налога до и после изменения.
Функция ПолучитьИмяИЗначениеСуммыРазнИзДереваУКД_2020(СуммаУвеличение, СуммаУменьшение)
	
	Результат = Новый Структура("Имя,Значение", "СумУвел", 0);
	
	Если ЗначениеЗаполнено(СуммаУвеличение) Тогда
		Результат.Имя = "СумУвел";
		Результат.Значение = СуммаУвеличение;
	ИначеЕсли ЗначениеЗаполнено(СуммаУменьшение) Тогда
		Результат.Имя = "СумУм";
		Результат.Значение = СуммаУменьшение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектXDTO_УКД2020_ИнформацияПродавца(Знач ДанныеXML)
	
	ПространствоИмен = ПространствоИмен_УКД2020_ИнформацияПродавца();
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, "Файл");
	
	Возврат Объект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Чтение

Процедура ПрочитатьИнформациюПокупателяXDTO_5_01(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("УПДПокупатель", "5.01");
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
		
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.Функция");
	Если ФункцияДокумента = "С" ИЛИ ФункцияДокумента = СЧФДОП() Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.СчетФактура;
	ИначеЕсли ФункцияДокумента = "Д" ИЛИ ФункцияДокумента = ДОП() Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.НаимЭконСубСост"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СодОпер"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаПолученияТоваров", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.ДатаПрин",, "Дата"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин") <> Неопределено Тогда
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.Должность);
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ИныеСведения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ИныеСвед"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ОснПолн"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Фамилия"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Имя"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Отчество"));
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо") <> Неопределено Тогда
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.Должность"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ИныеСвед"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.НаимОргПрин"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаПринятие",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснДоверОргПрин"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснПолнПредПрин"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Фамилия"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Имя"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Отчество"));
				
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ИныеСвед"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаПринятие",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ОснДоверФЛ"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Фамилия"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Имя"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Отчество"));
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеДокументаПолучения.ИдентификаторФайла",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ИдФайлИнфПол"));
			
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				НоваяСтрока.Значение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
			КонецЦикла;
			
			ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.Должн"));
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;	

КонецПроцедуры

Процедура ПрочитатьИнформациюПокупателяXDTO_2019(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("УПДПокупатель", "2019");
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
		
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.Функция");
	Если ФункцияДокумента = "С" ИЛИ ФункцияДокумента = СЧФДОП() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетФактура;
	ИначеЕсли ФункцияДокумента = "Д" ИЛИ ФункцияДокумента = ДОП() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.НаимЭконСубСост"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.СодержаниеОперации",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СодОпер"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДатаПолученияТоваров",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.ДатаПрин",, "Дата"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.КодСодОпер") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.КодИтога",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.КодСодОпер.КодИтога"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Наименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.КодСодОпер.НаимДокРасх"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Вид",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.КодСодОпер.ВидДокРасх"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Номер",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.КодСодОпер.НомДокРасх"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПринятииТоваров.ДокументОРасхождениях.Дата",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.КодСодОпер.ДатаДокРасх",, "Дата"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин") <> Неопределено Тогда
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность",
				ЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.Должность);
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ИныеСведения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ИныеСвед"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ОснПолн"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Фамилия"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Имя"));
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО.Отчество"));
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо") <> Неопределено Тогда
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.Должность"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ИныеСвед"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.НаимОргПрин"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаПринятие",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснДоверОргПрин"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснПолнПредПрин"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Фамилия"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Имя"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Отчество"));
				
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ИныеСвед"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаПринятие",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ОснДоверФЛ"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Фамилия"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Имя"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Отчество"));
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеДокументаПолучения.ИдентификаторФайла",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ИдФайлИнфПол"));
			
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				НоваяСтрока.Значение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
			КонецЦикла;
			
			ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн") <> Неопределено Тогда
		
		Путь = "ЗакупкаДляГосударственныхНужд.";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "КодЗакупки",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ИдКодЗак"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "НомерЛицевогоСчетаПокупателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ЛицСчетПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "НаименованиеФинансовогоОрганаПокупателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.НаимФинОргПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "НомерРеестровойЗаписиПокупателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.НомРеестрЗапПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "НомерБюджетногоОбязательстваПокупателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.УчНомБюдОбязПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "КазначействоПокупателяКод",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.КодКазначПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "КазначействоПокупателяНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.НаимКазначПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "ОКТМОПокупателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ОКТМОПок"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "ОКТМОМестаПоставки",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ОКТМОМесПост"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "ПредельнаяДатаОплаты",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ДатаОплПред",, "Дата"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "НомерДенежногоОбязательства",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.УчНомДенОбяз"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "ОчередностьПлатежа",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ОчерПлат"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "ВидПлатежа",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ВидПлат"));
		
		ИнфСведДенОбяз = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ИнфПокГосЗакКазн.ИнфСведДенОбяз",,, Истина);
		Если ИнфСведДенОбяз <> Неопределено Тогда
			
			Обязательства = Новый ТаблицаЗначений;
			Обязательства.Колонки.Добавить("НомерСтрокиИнформацииПродавца");
			Обязательства.Колонки.Добавить("КодОбъектаФАИП");
			Обязательства.Колонки.Добавить("ВидСредств");
			Обязательства.Колонки.Добавить("КодБюджетнойКлассификации");
			Обязательства.Колонки.Добавить("КодЦели");
			Обязательства.Колонки.Добавить("СуммаАванса");
			
			Для Каждого Элемент Из ИнфСведДенОбяз Цикл
				СтрокаОбязательства = Обязательства.Добавить();
				СтрокаОбязательства.НомерСтрокиИнформацииПродавца = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомСтр",, "Число");
				СтрокаОбязательства.КодОбъектаФАИП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КодОбъектФАИП");
				СтрокаОбязательства.ВидСредств = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ВидСредств");
				СтрокаОбязательства.КодБюджетнойКлассификации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КодПокБюджКласс");
				СтрокаОбязательства.КодЦели = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КодЦелиПокуп");
				СтрокаОбязательства.СуммаАванса = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СумАванс",, "Число");
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Обязательства, Путь + "ДенежныеОбязательства");
		КонецЕсли;
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.Должн"));
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПродавцаXDTO_5_01(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
		
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Функция");
	НазначениеФормата = "";
	Если ФункцияДокумента = СЧФДОП() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.УПД;
		НазначениеФормата = СЧФДОП();
		
	ИначеЕсли ФункцияДокумента = СЧФ() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетФактура;
		НазначениеФормата = СЧФ();
		
	ИначеЕсли ФункцияДокумента = ДОП() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
		НазначениеФормата = ДОП();
		
	КонецЕсли;
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("УПД", "5.01", НазначениеФормата);
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	// Характеристики электронного документа.
	ВставитьЗначениеВДерево(ДеревоДанных, "Функция",      ФункцияДокумента);
	ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПоФактХЖ"));
	
	ВставитьЗначениеВДерево(ДеревоДанных, "НаименованиеДокументаОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимДокОпр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимЭконСубСост"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.НомерСчФ"));
	
	ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДатаСчФ",, "Дата");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДатаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.КодОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ",, "Дата"));
	
	Грузоотправитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ГрузОт.ГрузОтпр");
	Если Грузоотправитель <> Неопределено Тогда
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, Грузоотправитель, "СведенияОГрузоотправителе.Грузоотправитель");
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ГрузОт.ОнЖе") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных,
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ГрузПолуч"), "СведенияОГрузополучателе");
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных,
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.СвПрод"), "СведенияОПродавце");
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных,
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.СвПокуп"), "СведенияОПокупателе");
		
	ПРД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.СвПРД",,, Истина);
	Если ПРД <> Неопределено Тогда
		
		ТаблицаПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
		ТаблицаПлатежноРасчетныеДокументы.Колонки.Добавить("НомерПРД");
		ТаблицаПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаПРД");

		Для Каждого СтрокаПлатежа Из ПРД Цикл
			НоваяСтрока = ТаблицаПлатежноРасчетныеДокументы.Добавить();
			НоваяСтрока.НомерПРД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПлатежа, "НомерПРД");
			НоваяСтрока.ДатаПРД  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПлатежа, "ДатаПРД",, "Дата");
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПлатежноРасчетныеДокументы, "ПлатежноРасчетныеДокументы");
	КонецЕсли;
	

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИдГосКон"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.НаимОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.КурсВал"));
	
	ОпределенВидСчетаФактуры = Ложь; // в дополнительных данных может не быть значения "ВидСчетаФактуры"
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИнфПолФХЖ1") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеСчетаФактуры.ИдентификаторФайла", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИнфПолФХЖ1.ИдФайлИнфПол"));
		
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ВидУчастника   = "СведенияОПродавце";
			
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
				ВидУчастника = "СведенияОПокупателе";
				
				Для Каждого СтрокаИнформации Из ТекстИнф Цикл
					
					ЗначениеСвойства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
					
					Если ЗначениеСвойства = "ДанныеКомиссионера" ИЛИ ЗначениеСвойства = "ДанныеКомитента" Тогда
						
						ВидУчастника = ?(
							ЗначениеСвойства = "ДанныеКомиссионера",
							"СведенияОКомиссионере",
							"СведенияОКомитенте");
						
						ОбъектXML = Новый ЧтениеXML;
						СтрокаXML = "<УчастникТип>" + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен") + "</УчастникТип>";
						ОбъектXML.УстановитьСтроку(СтрокаXML);
						СведенияОбУчастнике = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
						ОбъектXML.Закрыть();
						
						ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника);
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			СвойстваОрганизации = ДанныеУчастникаСделкиУПД_УКД(ВидУчастника, ДеревоДанных, "ИНН, КПП");
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(
				"Организации", СвойстваОрганизации.ИНН, СвойстваОрганизации.КПП, ДатаДокумента);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				
				Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
				
				Если Значен = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Идентиф = "ВидСчетаФактуры" Тогда
					
					ОпределенВидСчетаФактуры = Истина;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ВидСчетаФактуры", Значен);
					
				ИначеЕсли Идентиф = "ТолькоУслуги" Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ТолькоУслуги", Булево(Значен));
					
				КонецЕсли;
				
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = Идентиф;
				НоваяСтрока.Значение      = Значен;
				
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
				ДокументыОснованияСчетаФактуры);
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	ЕстьАтрибутТЧСтТовБезНДС = Ложь; // проверка наличия в ТЧ атрибута "СтТовБезНДС"
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт") <> Неопределено Тогда
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("Количество");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом");
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога");
		СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации");
		СведенияОТоварах.Колонки.Добавить("ДокументОснование");
		СведенияОТоварах.Колонки.Добавить("Признак");
		СведенияОТоварах.Колонки.Добавить("ПризнакДополнительнаяИнформация");
		СведенияОТоварах.Колонки.Добавить("ТоварКод");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		СведенияОТоварах.Колонки.Добавить("СтранаПроисхожденияНаименование");
		СведенияОТоварах.Колонки.Добавить("КоличествоНадлежитОтпустить");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаДебет");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаКредит");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировке");
		СведенияОТоварах.Колонки.Добавить("ТекстоваяИнформация");
		СведенияОТоварах.Колонки.Добавить("ДопДанныеПодписанные");
		СведенияОТоварах.Колонки.Добавить("Сопоставление");
		
		СведТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.СведТов",,, Истина);
		Если СведТов <> Неопределено Тогда
			Для Каждого Товар Из СведТов Цикл
				
				Если Не ЕстьАтрибутТЧСтТовБезНДС И РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС") <> Неопределено Тогда
					ЕстьАтрибутТЧСтТовБезНДС = Истина
				КонецЕсли;
				
				// Основные характеристики товара.
				НоваяСтрока = СведенияОТоварах.Добавить();
				
				НоваяСтрока.ТоварНаименование         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НаимТов"    , , "Строка");
				НоваяСтрока.ЕдиницаИзмеренияКод       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ОКЕИ_Тов");
				НоваяСтрока.Количество                = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "КолТов"     , , "Число");
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ЦенаТов"    , , "Число");
				НоваяСтрока.СтоимостьТоваровБезНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС", , "Число");
				
				НоваяСтрока.НалоговаяСтавка = 
					ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НалСт"));
				
				НоваяСтрока.СтоимостьТоваровСНалогом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал",, "Число");
				
				НоваяСтрока.СуммаАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "Акциз.СумАкциз",, "Число", Ложь, Истина);
				
				НоваяСтрока.СуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНал.СумНал",, "Число", Ложь, Истина);
				
				// Сведения о таможенной декларации.
				СвТД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СвТД",,, Истина);
				Если СвТД <> Неопределено Тогда
					
					СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
					
					СведенияОТаможеннойДекларации.Колонки.Добавить(
						"СтранаПроисхожденияКод",    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
					СведенияОТаможеннойДекларации.Колонки.Добавить(
						"ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(29)));
					
					Для Каждого СведенияТД Из СвТД Цикл
						СтрокаТаблицы = СведенияОТаможеннойДекларации.Добавить();
						СтрокаТаблицы.СтранаПроисхожденияКод    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияТД, "КодПроисх");
						СтрокаТаблицы.ТаможеннаяДекларацияНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияТД, "НомерТД");
					КонецЦикла;
					
					НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
					
				КонецЕсли;
				
				ПодготовитьСтруктуруСведенийОМаркировкеВТаблицеТоваров(НоваяСтрока);
				ИдентификаторТовара = "";
				
				ИнфПолФХЖ2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ИнфПолФХЖ2",,, Истина);
				Если ИнфПолФХЖ2 <> Неопределено Тогда
					
					ДопДанныеПодписанные = Новый ТаблицаЗначений;
					ДопДанныеПодписанные.Колонки.Добавить("Идентификатор");
					ДопДанныеПодписанные.Колонки.Добавить("Значение");
					
					ТекстоваяИнформация = Новый ТаблицаЗначений;
					ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
					ТекстоваяИнформация.Колонки.Добавить("Значение");
					
					ДокументОснованиеНайден = Ложь;
					
					Для Каждого СтрокаИнформации Из ИнфПолФХЖ2 Цикл
						
						Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
						Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
						
						Если Значен = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если Идентиф = "ИД" Тогда
							
							ИдентификаторТовара = Значен;
							
						ИначеЕсли Идентиф = "cis" Или Идентиф = "sscc" Тогда
							
							ИмяТаблицыКодовМаркировки = "КодыИндивидуальныхУпаковок";
							ИзвлечьКодыМаркировкиИзДопДанныхДокумента(Значен, НоваяСтрока, ИмяТаблицыКодовМаркировки);
							
							// В дополнительные данные дерева сведения по маркировке не добавляем, чтобы не засорять печатную форму,
							// поскольку для их вывода предусмотрено специализированное поле.
							Продолжить;
						
						КонецЕсли;
						
						СтрокаТаблицы = ТекстоваяИнформация.Добавить();
						СтрокаТаблицы.Идентификатор = Идентиф;
						СтрокаТаблицы.Значение      = Значен;
						
						СтрокаТаблицы = ДопДанныеПодписанные.Добавить();
						СтрокаТаблицы.Идентификатор = Идентиф;
						СтрокаТаблицы.Значение      = Значен;
						
					КонецЦикла;
					
					НоваяСтрока.ДопДанныеПодписанные = ДопДанныеПодписанные;
					
					НоваяСтрока.ТекстоваяИнформация = ТекстоваяИнформация;
				КонецЕсли;
				
				// Дополнительные характеристики товара.
				Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов") <> Неопределено Тогда
					НоваяСтрока.Признак                         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.ПрТовРаб");
					НоваяСтрока.ПризнакДополнительнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.ДопПризн");
					НоваяСтрока.ТоварКод                        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КодТов");
					НоваяСтрока.ЕдиницаИзмеренияНаименование    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.НаимЕдИзм",, "Строка");
					НоваяСтрока.СтранаПроисхожденияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КрНаимСтрПр");
					НоваяСтрока.КоличествоНадлежитОтпустить     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.НадлОтп",, "Число");
					НоваяСтрока.КорреспондирующиеСчетаДебет     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КорСчДебет");
					НоваяСтрока.КорреспондирующиеСчетаКредит    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КорСчКредит");
				КонецЕсли;
				
				СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
				СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
				СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.ТоварНаименование;
				СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмеренияНаименование;
				СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.ЕдиницаИзмеренияКод;
				СопоставлениеПоУмолчанию.КодНоменклатуры = НоваяСтрока.ТоварКод;

				НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
					НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
				
			КонецЦикла;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ОбстФормСЧФ") <> "2" Тогда
			ВидСчетаФактуры = "Реализация";
		Иначе
			ВидСчетаФактуры = "Авансовый";
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);   

		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего",, "Число"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего",, "Число"));
		
		ВсегоСуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНал",, "Число", Ложь, Истина);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСуммаНалога",
			СуммаНДССФПривестиКТребуемомуФормату(ВсегоСуммаНалога));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоКоличество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.НеттоВс",, "Число"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СодОпер"));
		
		ВидОперацииСтрокой = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ВидОпер");
		ВидОперации = ВидОперацииЭДПоСтроке(ВидОперацииСтрокой);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ДатаПер",, "Дата"));
		
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		ОснованияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ОснПер",,, Истина);
		Для Каждого Основание Из ОснованияДокумента Цикл
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "НаимОсн");
			НоваяСтрока.ДокументНомер        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "НомОсн");
			НоваяСтрока.ДокументДата         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "ДатаОсн",, "Дата");
			НоваяСтрока.ДокументДопСведения  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "ДопСвОсн");
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер") <> Неопределено Тогда
			
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Должность"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ИныеСвед"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ОснПолн"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Фамилия"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Имя"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Отчество"));
				
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо") <> Неопределено Тогда
				
				Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер") <> Неопределено Тогда
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.Должность"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ИныеСвед"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.НаимОргПер"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснДоверОргПер"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснПолнПредПер"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Фамилия"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Имя"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Отчество"));
					
				ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер") <> Неопределено Тогда
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ИныеСвед"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ОснДоверФЛ"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Фамилия"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Имя"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Отчество"));
						
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОТранспортировке", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз.СвТранГруз"));
			
			ТранспортнаяНакладная = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз.ТранНакл",,, Истина);
			Если ТранспортнаяНакладная <> Неопределено Тогда
				
				ТаблицаНакладных = Новый ТаблицаЗначений;
				ТаблицаНакладных.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
				ТаблицаНакладных.Колонки.Добавить("ТранспортнаяНакладнаяДата");
				
				Для Каждого Накладная Из ТранспортнаяНакладная Цикл
					НоваяСтрока = ТаблицаНакладных.Добавить();
					НоваяСтрока.ТранспортнаяНакладнаяНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Накладная, "НомТранНакл");
					НоваяСтрока.ТранспортнаяНакладнаяДата  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Накладная, "ДатаТранНакл",, "Дата");
				КонецЦикла;
				
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаНакладных, "ТранспортнаяНакладная");
			КонецЕсли;
			
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз.Перевозчик"), "СведенияОПеревозчике");
			
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПередачеВещи.ПередачаВещиДата",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвПерВещи.ДатаПерВещ",, "Дата"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПередачеВещи.ПередачаВещиСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвПерВещи.СвПерВещ"));
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.ИнфПолФХЖ3") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДопДанныеДокументаОтгрузки.ИдентификаторФайла",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.ИнфПолФХЖ3.ИдФайлИнфПол"));
				
			ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.ИнфПолФХЖ3.ТекстИнф",,, Истина);
			Если ТекстИнф <> Неопределено Тогда
				
				ДокументыОснованияДокументаОтгрузки = Новый Массив;
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				Для Каждого СтрокаИнформации Из ТекстИнф Цикл
					
					Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
					Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
					
					Если Значен = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаИнформации.Идентиф = "ИныеСведенияОбОтгрузке" Тогда
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
							"ИныеСведенияОбОтгрузке", Значен);
					КонецЕсли;
					
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = Идентиф;
					НоваяСтрока.Значение      = Значен;
					
				КонецЦикла;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"ДокументыОснованияДокументаОтгрузки",
					ДокументыОснованияДокументаОтгрузки);
					
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных,
					ТекстоваяИнформация,
					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя",       "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ГосРегИПВыдДов"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.СвГосРегИП"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.Должн"));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", "");
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	НовыйЭД.ВидЭД = УточненныйТипДокументаИнформацииПродавцаУПД(ДеревоДанных, НовыйЭД.ВидЭД);
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПродавцаXDTO_2019(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ВерсПрог = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ВерсПрог");
	ВерсПрог1С = "1С:Предприятие 8";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
		
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Функция");
	НазначениеФормата = "";
	Если ФункцияДокумента = СЧФДОП() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.УПД;
		НазначениеФормата = СЧФДОП();
		
	ИначеЕсли ФункцияДокумента = СЧФ() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетФактура;
		НазначениеФормата = СЧФ();
		
	ИначеЕсли ФункцияДокумента = ДОП() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
		НазначениеФормата = ДОП();
		
	ИначеЕсли ФункцияДокумента = СвРК() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером;
		НазначениеФормата = СвРК();
		
	ИначеЕсли ФункцияДокумента = СвЗК() Тогда
		
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;
		НазначениеФормата = СвЗК();

	КонецЕсли;
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("УПД", "2019", НазначениеФормата);
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	// Характеристики электронного документа.
	ВставитьЗначениеВДерево(ДеревоДанных, "Функция",      ФункцияДокумента);
	ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПоФактХЖ"));
	
	ВставитьЗначениеВДерево(ДеревоДанных, "НаименованиеДокументаОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимДокОпр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимЭконСубСост"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.НомерСчФ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДатаСчФ",, "Дата"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.КодОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ",, "Число"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ",, "Дата"));
		
	ТаблицаГрузоотправителей = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузоотправителе");
	СписокГрузОт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ГрузОт",,, Истина);
	Если СписокГрузОт <> Неопределено Тогда
		Для Каждого ГрузОт Из СписокГрузОт Цикл
			СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
			ГрузОтпр = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ГрузОт, "ГрузОтпр");
			Если ГрузОтпр <> Неопределено Тогда
				ДанныеГрузоотправителя = ПолучитьДанныеУчастникаУПД(ГрузОтпр);
				СтрокаГрузоотправителя.Грузоотправитель = ДанныеГрузоотправителя;
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ГрузОт.ОнЖе") <> Неопределено Тогда
				СтрокаГрузоотправителя.ОнЖе = Истина;
			КонецЕсли;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
	КонецЕсли;
	
	ТаблицаГрузополучателей = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОГрузополучателе");
	СписокГрузПолуч = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ГрузПолуч",,, Истина);
	Если СписокГрузПолуч <> Неопределено Тогда
		Для каждого ГрузПолуч Из СписокГрузПолуч Цикл
			СтрокаГрузополучателя = ТаблицаГрузополучателей.Добавить();
			ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(ГрузПолуч);
			ЗаполнитьЗначенияСвойств(СтрокаГрузополучателя, ДанныеГрузополучателя);
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, "СведенияОГрузополучателе");
	КонецЕсли;
	
	ТаблицаПродавцов = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПродавце");
	СписокСвПрод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.СвПрод",,, Истина);
	Если СписокСвПрод <> Неопределено Тогда
		Для каждого СвПрод Из СписокСвПрод Цикл
			СтрокаПродавца = ТаблицаПродавцов.Добавить();
			ДанныеПродавца = ПолучитьДанныеУчастникаУПД(СвПрод);
			ЗаполнитьЗначенияСвойств(СтрокаПродавца, ДанныеПродавца);
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, "СведенияОПродавце");
	КонецЕсли;
	
	ТаблицаПокупателей = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "СведенияОПокупателе");
	СписокСвПокуп = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.СвПокуп",,, Истина);
	Если СписокСвПокуп <> Неопределено Тогда
		Для каждого СвПокуп Из СписокСвПокуп Цикл
			СтрокаПокупателя = ТаблицаПокупателей.Добавить();
			ДанныеПокупателя = ПолучитьДанныеУчастникаУПД(СвПокуп);
			ЗаполнитьЗначенияСвойств(СтрокаПокупателя, ДанныеПокупателя);
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, "СведенияОПокупателе");
	КонецЕсли;
	
	ПРД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.СвПРД",,, Истина);
	Если ПРД <> Неопределено Тогда
		
		ТаблицаПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
		ТаблицаПлатежноРасчетныеДокументы.Колонки.Добавить("НомерПРД");
		ТаблицаПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаПРД");
		ТаблицаПлатежноРасчетныеДокументы.Колонки.Добавить("Сумма");

		Для Каждого СтрокаПлатежа Из ПРД Цикл
			НоваяСтрока = ТаблицаПлатежноРасчетныеДокументы.Добавить();
			НоваяСтрока.НомерПРД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПлатежа, "НомерПРД");
			НоваяСтрока.ДатаПРД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПлатежа, "ДатаПРД",, "Дата");
			НоваяСтрока.Сумма = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПлатежа, "СуммаПРД",, "Число");
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПлатежноРасчетныеДокументы, "ПлатежноРасчетныеДокументы");
	КонецЕсли;
	
	ДокПодтвОтгр = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДокПодтвОтгр",,, Истина);
	Если ДокПодтвОтгр <> Неопределено Тогда
		
		ДокументыПодтвержденияОтгрузки = Новый ТаблицаЗначений;
		ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Наименование");
		ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Номер");
		ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Дата");

		Для Каждого СтрокаДокумента Из ДокПодтвОтгр Цикл
			НоваяСтрока = ДокументыПодтвержденияОтгрузки.Добавить();
			НоваяСтрока.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаДокумента, "НаимДокОтгр",, "Строка");
			НоваяСтрока.Номер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаДокумента, "НомДокОтгр",, "Строка");
			НоваяСтрока.Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаДокумента, "ДатаДокОтгр",, "Дата");
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыПодтвержденияОтгрузки, "ДокументыПодтвержденияОтгрузки");
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИдГосКон"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.НаимОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.КурсВал"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ОбстФормСЧФ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.ДатаГосКонтракта",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.ДатаГосКонт",, "Дата"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.НомерГосКонтракта",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.НомерГосКонт",, "Строка"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.НомерЛицевогоСчетаПродавца",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.ЛицСчетПрод",, "Строка"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.КодБюджетнойКлассификацииПродавца",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.КодПродБюджКласс",, "Строка"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.КодЦели",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.КодЦелиПрод",, "Строка"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.КазначействоПродавцаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.КодКазначПрод",, "Строка"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ЗакупкаДляГосударственныхНужд.КазначействоПродавцаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ИнфПродГосЗакКазн.НаимКазначПрод",, "Строка"));
		
	ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.СвФактор"), "СведенияОФакторе");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОснованиеУступкиДенежногоТребования.Наименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ОснУстДенТреб.НаимОсн",, "Строка"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОснованиеУступкиДенежногоТребования.Номер",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ОснУстДенТреб.НомОсн",, "Строка"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОснованиеУступкиДенежногоТребования.Дата",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ОснУстДенТреб.ДатаОсн",, "Дата"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ОснованиеУступкиДенежногоТребования.ДополнительныеСведения",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ДопСвФХЖ1.ОснУстДенТреб.ДопСвОсн",, "Строка"));
	
	ОпределенВидСчетаФактуры = Ложь; // в дополнительных данных может не быть значения "ВидСчетаФактуры"
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИнфПолФХЖ1") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеСчетаФактуры.ИдентификаторФайла", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИнфПолФХЖ1.ИдФайлИнфПол"));
		
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвСчФакт.ИнфПолФХЖ1.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ВидУчастника   = "СведенияОПродавце";
			
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
				ВидУчастника = "СведенияОПокупателе";
				
				Для Каждого СтрокаИнформации Из ТекстИнф Цикл

					ЗначениеСвойства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
					
					Если ЗначениеСвойства = "ДанныеКомиссионера" ИЛИ ЗначениеСвойства = "ДанныеКомитента" Тогда
						
						ВидУчастника = ?(
							ЗначениеСвойства = "ДанныеКомиссионера",
							"СведенияОКомиссионере",
							"СведенияОКомитенте");
						
						ОбъектXML = Новый ЧтениеXML;
						СтрокаXML = "<УчастникТип>" + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен") + "</УчастникТип>";
						ОбъектXML.УстановитьСтроку(СтрокаXML);
						СведенияОбУчастнике = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
						ОбъектXML.Закрыть();
						
						ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОбУчастнике, ВидУчастника);
						
					КонецЕсли;
	
				КонецЦикла;
			КонецЕсли;
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			ОписаниеПоляСведенияОВыбытии = ОписаниеПоляСведенийОВыбытииМаркированныхТоваров();
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				
				Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
				
				Если Значен = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Идентиф = "ВидСчетаФактуры" Тогда
					
					ОпределенВидСчетаФактуры = Истина;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ВидСчетаФактуры", Значен);
					
				ИначеЕсли Идентиф = "ТолькоУслуги" Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ТолькоУслуги", Булево(Значен));
					
				ИначеЕсли Идентиф = "ДокументОбОтгрузке" Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ДокументОбОтгрузке", Значен);

				ИначеЕсли Идентиф = ОписаниеПоляСведенияОВыбытии.ИмяПоля Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						ОписаниеПоляСведенияОВыбытии.ИмяРеквизита, Значен);
					
				КонецЕсли;
				
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = Идентиф;
				НоваяСтрока.Значение      = Значен;
				
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	ЕстьАтрибутТЧСтТовБезНДС = Ложь; // проверка наличия в ТЧ атрибута "СтТовБезНДС"
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт") <> Неопределено Тогда
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("Количество");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом");
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога");
		СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации");
		СведенияОТоварах.Колонки.Добавить("ДокументОснование");
		СведенияОТоварах.Колонки.Добавить("Признак");
		СведенияОТоварах.Колонки.Добавить("ПризнакДополнительнаяИнформация");
		СведенияОТоварах.Колонки.Добавить("ТоварКод");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		СведенияОТоварах.Колонки.Добавить("СтранаПроисхожденияНаименование");
		СведенияОТоварах.Колонки.Добавить("КоличествоНадлежитОтпустить");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаДебет");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаКредит");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировке");
		СведенияОТоварах.Колонки.Добавить("ТекстоваяИнформация");
		СведенияОТоварах.Колонки.Добавить("ДопДанныеПодписанные");
		СведенияОТоварах.Колонки.Добавить("Сопоставление");
		СведенияОТоварах.Колонки.Добавить("ТоварХарактеристика");
		СведенияОТоварах.Колонки.Добавить("ТоварСорт");
		СведенияОТоварах.Колонки.Добавить("ТоварАртикул");
		СведенияОТоварах.Колонки.Добавить("КодКаталога");
		СведенияОТоварах.Колонки.Добавить("КодВидаТовара");
		СведенияОТоварах.Колонки.Добавить("СведенияОПрослеживаемости");
		СведенияОТоварах.Колонки.Добавить("ОснованиеОсвобожденияОтНДС");
		СведенияОТоварах.Колонки.Добавить("СведенияОДокументеОтгрузки");
		
		СведТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.СведТов",,, Истина);
		Если СведТов <> Неопределено Тогда
			Для Каждого Товар Из СведТов Цикл
				
				Если Не ЕстьАтрибутТЧСтТовБезНДС И РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС") <> Неопределено Тогда
					ЕстьАтрибутТЧСтТовБезНДС = Истина
				КонецЕсли;
				
				// Основные характеристики товара.
				НоваяСтрока = СведенияОТоварах.Добавить();
				
				НоваяСтрока.ТоварНаименование         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НаимТов",, "Строка");
				НоваяСтрока.ЕдиницаИзмеренияКод       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ОКЕИ_Тов");
				НоваяСтрока.Количество                = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "КолТов", ,    "Число");
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ЦенаТов", ,   "Число");
				НоваяСтрока.СтоимостьТоваровБезНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС",, "Число");
				
				НоваяСтрока.НалоговаяСтавка = 
					ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НалСт"));
				
				НоваяСтрока.СтоимостьТоваровСНалогом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал",, "Число", Ложь, Истина);
				Если НоваяСтрока.СтоимостьТоваровСНалогом = Неопределено Тогда
					ДефСтТовУчНал = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДефСтТовУчНал",, "Строка", Ложь, Истина);
					Если ДефСтТовУчНал = "-" Тогда
						НоваяСтрока.СтоимостьТоваровСНалогом = "-";
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.СуммаАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "Акциз.СумАкциз",, "Число", Ложь, Истина);
				
				НоваяСтрока.СуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНал.СумНал",, "Число", Ложь, Истина);
				Если НоваяСтрока.СуммаНалога = Неопределено Тогда
					БезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНал.БезНДС",, "Строка", Ложь, Истина);
					ДефНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНал.ДефНДС",, "Строка", Ложь, Истина);
					Если БезНДС = "без НДС" Тогда
						НоваяСтрока.СуммаНалога = "без НДС";
					ИначеЕсли ДефНДС = "-" Тогда
						НоваяСтрока.СуммаНалога = "-";
					КонецЕсли;
				КонецЕсли;
				
				ИдентификаторТовара = "";
				
				ИнфПолФХЖ2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ИнфПолФХЖ2",,, Истина);
				Если ИнфПолФХЖ2 <> Неопределено Тогда
					
					ДопДанныеПодписанные = Новый ТаблицаЗначений;
					ДопДанныеПодписанные.Колонки.Добавить("Идентификатор");
					ДопДанныеПодписанные.Колонки.Добавить("Значение");	
					
					ТекстоваяИнформация = Новый ТаблицаЗначений;
					ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
					ТекстоваяИнформация.Колонки.Добавить("Значение");
					
					ДокументОснованиеНайден = Ложь;
					
					Для Каждого СтрокаИнформации Из ИнфПолФХЖ2 Цикл
						
						Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
						Если Идентиф = "ДатаДокументаОтгрузки" Тогда
							Тип = "Дата";
						Иначе
							Тип = Неопределено;
						КонецЕсли;
						Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен",, Тип);
						
						Если Значен = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если Идентиф = "ИД" И ВерсПрог = ВерсПрог1С Тогда
							
							ИдентификаторТовара = Значен;
							
						ИначеЕсли Идентиф = ИдентификаторОснованиеОсвобожденияОтНДС() Тогда
							
							НоваяСтрока.ОснованиеОсвобожденияОтНДС = Значен;
							
						ИначеЕсли Идентиф = "НомерДокументаОтгрузки" Тогда
							
							Если НоваяСтрока.СведенияОДокументеОтгрузки = Неопределено Тогда
								НоваяСтрока.СведенияОДокументеОтгрузки = Новый Структура;
							КонецЕсли;
							НоваяСтрока.СведенияОДокументеОтгрузки.Вставить("Номер", Значен);
							
						ИначеЕсли Идентиф = "ДатаДокументаОтгрузки" Тогда
							
							Если НоваяСтрока.СведенияОДокументеОтгрузки = Неопределено Тогда
								НоваяСтрока.СведенияОДокументеОтгрузки = Новый Структура;
							КонецЕсли;
							НоваяСтрока.СведенияОДокументеОтгрузки.Вставить("Дата", Значен);
							
						КонецЕсли;
						
						СтрокаТаблицы = ТекстоваяИнформация.Добавить();
						СтрокаТаблицы.Идентификатор = Идентиф;
						СтрокаТаблицы.Значение      = Значен;
						
						СтрокаТаблицы = ДопДанныеПодписанные.Добавить();
						СтрокаТаблицы.Идентификатор = Идентиф;
						СтрокаТаблицы.Значение = Значен;
					КонецЦикла;
					
					НоваяСтрока.ДопДанныеПодписанные = ДопДанныеПодписанные;
					
					НоваяСтрока.ТекстоваяИнформация = ТекстоваяИнформация;
				КонецЕсли;
				
				// Дополнительные характеристики товара.
				ДопСведТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов");
				Если ДопСведТов <> Неопределено Тогда
					НоваяСтрока.Признак                         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "ПрТовРаб");
					НоваяСтрока.ПризнакДополнительнаяИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "ДопПризн");
					НоваяСтрока.ТоварКод                        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "КодТов");
					НоваяСтрока.ЕдиницаИзмеренияНаименование    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "НаимЕдИзм",, "Строка");
					НоваяСтрока.СтранаПроисхожденияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "КрНаимСтрПр");
					НоваяСтрока.КоличествоНадлежитОтпустить     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "НадлОтп",, "Число");
					НоваяСтрока.ТоварХарактеристика             = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "ХарактерТов",, "Строка");
					НоваяСтрока.ТоварСорт                       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "СортТов");
					НоваяСтрока.ТоварАртикул                    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "АртикулТов");
					НоваяСтрока.КодКаталога                     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "КодКат");
					НоваяСтрока.КодВидаТовара                   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "КодВидТов");
					
					// Сведения о прослеживаемости.
					СведПрослеж = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "СведПрослеж",,, Истина);
					Если СведПрослеж <> Неопределено Тогда
						
						СведенияОПрослеживаемости = Новый ТаблицаЗначений;
						СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
						СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
						СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
						СведенияОПрослеживаемости.Колонки.Добавить("Количество");
						СведенияОПрослеживаемости.Колонки.Добавить("КоличествоУчетное");
						
						Для Каждого Элемент Из СведПрослеж Цикл
							СтрокаТаблицы = СведенияОПрослеживаемости.Добавить();
							СтрокаТаблицы.НомерТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомТовПрослеж");
							СтрокаТаблицы.ЕдиницаИзмеренияКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ЕдИзмПрослеж");
							СтрокаТаблицы.ЕдиницаИзмеренияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НаимЕдИзмПрослеж");
							СтрокаТаблицы.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КолВЕдПрослеж",, "Число");
							ИдентификаторСтроки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ДопПрослеж");
							Если ИдентификаторСтроки <> Неопределено И ТипЗнч(НоваяСтрока.ТекстоваяИнформация) = Тип("ТаблицаЗначений") Тогда
								СтрокаТаблицыТекстоваяИнформация = НоваяСтрока.ТекстоваяИнформация.Найти(СтрШаблон("%1_КолУчетное", ИдентификаторСтроки));
								Если СтрокаТаблицыТекстоваяИнформация <> Неопределено Тогда
									СтрокаТаблицы.КоличествоУчетное = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаТаблицыТекстоваяИнформация.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						НоваяСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
						
					КонецЕсли;
					
					// Сведения о маркировке.
					НомСредИдентТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДопСведТов, "НомСредИдентТов",,, Истина);
					Если НомСредИдентТов <> Неопределено Тогда
						
						ТаблицаКодов = Новый ТаблицаЗначений;
						ТаблицаКодов.Колонки.Добавить("Код");
						СведенияОМаркировке = Новый Структура;
						СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
						СведенияОМаркировке.Вставить("ТранспортныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
						СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодов.СкопироватьКолонки());
						
						Для Каждого Элемент Из НомСредИдентТов Цикл
							ИдентТрансУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИдентТрансУпак");
							Если ЗначениеЗаполнено(ИдентТрансУпак) Тогда
								СведенияОМаркировке.ТранспортныеУпаковки.Добавить().Код = ИдентТрансУпак;
							КонецЕсли;
							КИЗ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КИЗ",,, Истина);
							Если КИЗ <> Неопределено Тогда
								Для каждого КИЗЗначение Из КИЗ Цикл
									СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.Добавить().Код = КИЗЗначение;
								КонецЦикла;
							КонецЕсли;
							НомУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомУпак",,, Истина);
							Если НомУпак <> Неопределено Тогда
								Для каждого НомУпакЗначение Из НомУпак Цикл
									СведенияОМаркировке.ИндивидуальныеУпаковки.Добавить().Код = НомУпакЗначение;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						
						НоваяСтрока.СведенияОМаркировке = СведенияОМаркировке;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Сведения о таможенной декларации.
				СвТД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СвТД",,, Истина);
				Если СвТД <> Неопределено Тогда
					
					СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
					СведенияОТаможеннойДекларации.Колонки.Добавить(
						"СтранаПроисхожденияКод",    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
					СведенияОТаможеннойДекларации.Колонки.Добавить(
						"ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(29)));
					
					НомерСтрокиТД = 0;
					Для Каждого СведенияТД Из СвТД Цикл
						НомерСтрокиТД = НомерСтрокиТД + 1;
						НомерТД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияТД, "НомерТД");
						Если НРег(НомерТД) = "прослеж"
							И ЗначениеЗаполнено(НоваяСтрока.СведенияОПрослеживаемости)
							И НоваяСтрока.СведенияОПрослеживаемости.Количество() >= НомерСтрокиТД Тогда
							НомерТД = НоваяСтрока.СведенияОПрослеживаемости[НомерСтрокиТД - 1].НомерТовара;
						КонецЕсли;
						СтрокаТаблицы = СведенияОТаможеннойДекларации.Добавить();
						СтрокаТаблицы.ТаможеннаяДекларацияНомер = НомерТД;
						СтрокаТаблицы.СтранаПроисхожденияКод =
							РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияТД, "КодПроисх");
					КонецЦикла;
					
					НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
					
				КонецЕсли;
				
				СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
				СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
				СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.ТоварНаименование;
				СопоставлениеПоУмолчанию.Характеристика = НоваяСтрока.ТоварХарактеристика;
				СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмеренияНаименование;
				СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.ЕдиницаИзмеренияКод;
				СопоставлениеПоУмолчанию.Артикул = НоваяСтрока.ТоварАртикул;
				СопоставлениеПоУмолчанию.КодНоменклатуры = НоваяСтрока.ТоварКод;
				
				НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
					НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
				
			КонецЦикла;
		КонецЕсли;
		
		Если Не ОпределенВидСчетаФактуры Тогда
			Если ЕстьАтрибутТЧСтТовБезНДС Тогда
				ВидСчетаФактуры = "Реализация";
			Иначе
				ВидСчетаФактуры = "Авансовый";
			КонецЕсли;
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего",, "Число"));
			
		ВсегоСтоимостьТоваровСНалогом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего",, "Число", Ложь, Истина);
		Если ВсегоСтоимостьТоваровСНалогом = Неопределено Тогда
			ДефСтТовУчНалВсего = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.ДефСтТовУчНалВсего",, "Строка", Ложь, Истина);
			Если ДефСтТовУчНалВсего = "-" Тогда
				ВсегоСтоимостьТоваровСНалогом = "-";
			КонецЕсли;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом",
			ВсегоСтоимостьТоваровСНалогом);
		
		ВсегоСуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНал",, "Число", Ложь, Истина);
		Если ВсегоСуммаНалога = Неопределено Тогда
			ДефНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.ДефНДС",, "Строка", Ложь, Истина);
			БезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.БезНДС",, "Строка", Ложь, Истина);
			Если БезНДС = "без НДС" Тогда
				ВсегоСуммаНалога = "без НДС";
			ИначеЕсли ДефНДС = "-" Тогда
				ВсегоСуммаНалога = "-"
			КонецЕсли;
		Иначе
			ВсегоСуммаНалога = СуммаНДССФПривестиКТребуемомуФормату(ВсегоСуммаНалога);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСуммаНалога",
			ВсегоСуммаНалога);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоКоличество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблСчФакт.ВсегоОпл.КолНеттоВс",, "Число"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СодОпер"));
		
		ВидОперацииСтрокой = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ВидОпер");
		ВидОперации = ВидОперацииЭДПоСтроке(ВидОперацииСтрокой);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ДатаПер",, "Дата"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНачалаПоставки",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ДатаНач",, "Дата"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОкончанияПоставки",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ДатаОкон",, "Дата"));
		
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		ОснованияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ОснПер",,, Истина);
		Для Каждого Основание Из ОснованияДокумента Цикл
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДокументНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "НаимОсн");
			НоваяСтрока.ДокументНомер        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "НомОсн");
			НоваяСтрока.ДокументДата         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "ДатаОсн",, "Дата");
			НоваяСтрока.ДокументДопСведения  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "ДопСвОсн");
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер") <> Неопределено Тогда
			
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.Должность"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ИныеСвед"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ОснПолн"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Фамилия"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Имя"));
					
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО.Отчество"));
				
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо") <> Неопределено Тогда
				
				Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер") <> Неопределено Тогда
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.Должность"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ИныеСвед"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.НаимОргПер"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснДоверОргПер"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ОснПолнПредПер"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Фамилия"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Имя"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ПредОргПер.ФИО.Отчество"));
					
				ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер") <> Неопределено Тогда
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ИныеСвед"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ОснДоверФЛ"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Фамилия"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Имя"));
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
						РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвЛицПер.ИнЛицо.ФЛПер.ФИО.Отчество"));
						
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОТранспортировке", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз.СвТранГруз"));
			
			ТранспортнаяНакладная = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз.ТранНакл",,, Истина);
			Если ТранспортнаяНакладная <> Неопределено Тогда
				
				ТаблицаНакладных = Новый ТаблицаЗначений;
				ТаблицаНакладных.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
				ТаблицаНакладных.Колонки.Добавить("ТранспортнаяНакладнаяДата");
				
				Для Каждого Накладная Из ТранспортнаяНакладная Цикл
					НоваяСтрока = ТаблицаНакладных.Добавить();
					НоваяСтрока.ТранспортнаяНакладнаяНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Накладная, "НомТранНакл");
					НоваяСтрока.ТранспортнаяНакладнаяДата  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Накладная, "ДатаТранНакл",, "Дата");
				КонецЦикла;
				
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаНакладных, "ТранспортнаяНакладная");
			КонецЕсли;
			
			ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.ТранГруз.Перевозчик"), "СведенияОПеревозчике");
			
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПередачеВещи.ПередачаВещиДата",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвПерВещи.ДатаПерВещ",, "Дата"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПередачеВещи.ПередачаВещиСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.СвПер.СвПерВещи.СвПерВещ"));
			
		ОписаниеПоляВидОборота = ОписаниеПоляВидОборотаМаркированнымиТоварамиВКомиссионныхОперациях();
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.ИнфПолФХЖ3") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ДопДанныеДокументаОтгрузки.ИдентификаторФайла",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.ИнфПолФХЖ3.ИдФайлИнфПол"));
				
			ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПродПер.ИнфПолФХЖ3.ТекстИнф",,, Истина);
			Если ТекстИнф <> Неопределено Тогда
				
				ДокументыОснованияДокументаОтгрузки = Новый Массив;
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				Для Каждого СтрокаИнформации Из ТекстИнф Цикл
					
					Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
					Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
					
					Если Значен = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаИнформации.Идентиф = "ИныеСведенияОбОтгрузке" Тогда
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
							"ИныеСведенияОбОтгрузке", Значен);
						
					ИначеЕсли СтрокаИнформации.Идентиф = ОписаниеПоляВидОборота.ИмяПоля Тогда
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ОписаниеПоляВидОборота.ИмяРеквизита, Значен);
						
					КонецЕсли;
					
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = Идентиф;
					НоваяСтрока.Значение      = Значен;
					
				КонецЦикла;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					"ДокументыОснованияДокументаОтгрузки",
					ДокументыОснованияДокументаОтгрузки);
					
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных,
					ТекстоваяИнформация,
					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
					
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя",       "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ГосРегИПВыдДов"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Фамилия" , , "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Имя"     , , "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Отчество", , "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.СвГосРегИП"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.Должн"));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", "");
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	НовыйЭД.ВидЭД = УточненныйТипДокументаИнформацииПродавцаУПД(ДеревоДанных, НовыйЭД.ВидЭД);
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПродавцаУКДXDTO_5_02(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ВерсПрог = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ВерсПрог");
	ВерсПрог1С = "1С:Предприятие 8";
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.УКД_ИнформацияПродавца");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Функция");
	Если ФункцияДокумента = "КСЧФДИС" Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.УКД;
	ИначеЕсли ФункцияДокумента = "КСЧФ" Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	ИначеЕсли ФункцияДокумента = "ДИС" Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	КонецЕсли;
	
	НовыйЭД.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01";
	
	// Характеристики электронного документа.
	ВставитьЗначениеВДерево(ДеревоДанных, "Функция",      ФункцияДокумента);
	ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПоФактХЖ"));
	
	ВставитьЗначениеВДерево(ДеревоДанных, "НаименованиеДокументаОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимДокОпр"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимЭконСубСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.НомерКСчФ"));
	
	ДатаКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДатаКСчФ",, "Дата");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДатаКорректировки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.КодОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ",, "Дата"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СчФ.НомерСчФ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СчФ.ДатаСчФ",, "Дата"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СчФ.ИспрСчФ.НомИспрСчф"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СчФ.ИспрСчФ.ДатаИспрСчФ",, "Дата"));
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СвПрод"),  "СведенияОПродавце");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СвПокуп"), "СведенияОПокупателе");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДопСвФХЖ1.ИдГосКон"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДопСвФХЖ1.НаимОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДопСвФХЖ1.КурсВал"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИнфПолФХЖ1") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеСчетаФактуры.ИдентификаторФайла", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИнфПолФХЖ1.ИдФайлИнфПол"));
		
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИнфПолФХЖ1.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ВидУчастника   = "СведенияОПродавце";
			
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
				ВидУчастника = "СведенияОПокупателе";
			КонецЕсли;
			
			СвойстваОрганизации = ДанныеУчастникаСделкиУПД_УКД(ВидУчастника, ДеревоДанных, "ИНН, КПП");
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(
				"Организации", СвойстваОрганизации.ИНН, СвойстваОрганизации.КПП, ДатаКорректировки);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				
				Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
				
				Если Значен = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Идентиф = "ДанныеКомиссионера" Тогда
					
					ОбъектXML = Новый ЧтениеXML;
					СтрокаXML = "<СвПродПокТип> " + Значен + " <Адрес> <АдрРФ КодРегион=""00""/> </Адрес> </СвПродПокТип>";
					ОбъектXML.УстановитьСтроку(СтрокаXML);
					СведенияОКомиссионере = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					ОбъектXML.Закрыть();
					ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере");
					
				ИначеЕсли Идентиф = "ТолькоУслуги" Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ТолькоУслуги", Булево(Значен));
					
				ИначеЕсли Идентиф = ИдентификаторВидаДокументаДляОтображенияВУчете() Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Идентиф, Значен);
					
				КонецЕсли;
				
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = Идентиф;
				НоваяСтрока.Значение      = Значен;
				
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
				ДокументыОснованияСчетаФактуры);
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	СведТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.СведТов",,, Истина);
	Если СведТов <> Неопределено Тогда
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("КоличествоДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("Количество");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаУменьшение");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаУменьшение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение");
		СведенияОТоварах.Колонки.Добавить("ДокументОснование");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаДебет");
		СведенияОТоварах.Колонки.Добавить("КорреспондирующиеСчетаКредит");
		СведенияОТоварах.Колонки.Добавить("ТекстоваяИнформация");
		СведенияОТоварах.Колонки.Добавить("ДопДанныеПодписанные");
		СведенияОТоварах.Колонки.Добавить("Сопоставление");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировкеДо");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировке");
		
		Для Каждого Товар Из СведТов Цикл
			
			// Основные характеристики товара.
			НоваяСтрока = СведенияОТоварах.Добавить();
			НоваяСтрока.ТоварНаименование                     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НаимТов");
			НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ОКЕИ_ТовДо");
			НоваяСтрока.ЕдиницаИзмеренияКод                   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ОКЕИ_ТовПосле");
			НоваяСтрока.КоличествоДоКорректировки             = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "КолТовДо"    , , "Число");
			НоваяСтрока.Количество                            = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "КолТовПосле" , , "Число");
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ЦенаТовДо"   , , "Число");
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения                = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ЦенаТовПосле", , "Число");
			
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС") <> Неопределено Тогда
				
				НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимДоИзм"   ,, "Число");
				НоваяСтрока.СтоимостьТоваровБезНалога                = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимПослеИзм",, "Число");
				НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимУвел"    ,, "Число");
				НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимУм"      ,, "Число");
				
			КонецЕсли;
			
			НоваяСтрока.НалоговаяСтавкаДоКорректировки = 
				ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НалСтДо"));
			
			НоваяСтрока.НалоговаяСтавка = 
				ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НалСтПосле"));
			
			НоваяСтрока.СуммаНалогаДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалДо.СумНДС"   ,, "Число", Ложь, Истина);
			НоваяСтрока.СуммаНалога                = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалПосле.СумНДС",, "Число", Ложь, Истина);
			
			НоваяСтрока.СуммаНалогаУвеличение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалРазн.СумУвел",, "Число");
			НоваяСтрока.СуммаНалогаУменьшение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалРазн.СумУм"  ,, "Число");
			
			НоваяСтрока.СуммаАкцизаДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "АкцизДо.СумАкциз",, "Число", Ложь, Истина);
			НоваяСтрока.СуммаАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "АкцизПосле.СумАкциз",, "Число", Ложь, Истина);
			
			НоваяСтрока.СуммаАкцизаУвеличение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "АкцизРазн.СумУвел",, "Число");
			НоваяСтрока.СуммаАкцизаУменьшение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "АкцизРазн.СумУм"  ,, "Число");
			
			НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимДоИзм"   ,, "Число");
			НоваяСтрока.СтоимостьТоваровСНалогом                = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимПослеИзм",, "Число");
			НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимУвел"    ,, "Число");
			НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимУм"      ,, "Число");
			
			ПодготовитьСтруктуруСведенийОМаркировкеВТаблицеТоваров_ГИСМТ(НоваяСтрока);
			
			Информация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ИнфПолФХЖ2",,, Истина);
			
			ИдентификаторТовара = "";
			
			Если Информация <> Неопределено Тогда
				
				ДопДанныеПодписанные = Новый ТаблицаЗначений;
				ДопДанныеПодписанные.Колонки.Добавить("Идентификатор");
				ДопДанныеПодписанные.Колонки.Добавить("Значение");
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				ДокументОснованиеНайден = Ложь;
				
				Для Каждого СтрокаИнформации Из Информация Цикл
					
					Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
					Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
					
					Если Значен = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если Идентиф = "ИД" 
						И ВерсПрог = ВерсПрог1С Тогда
						
						ИдентификаторТовара = Значен;
						
					ИначеЕсли Идентиф = "cis_до" Тогда
						СтрокаМаркировки = НоваяСтрока.СведенияОМаркировкеДо.КонтрольныеИдентификационныеЗнаки.Добавить();
						СтрокаМаркировки.Код = СокрЛП(Значен);
						
						// В дополнительные данные дерева сведения по маркировке не добавляем, чтобы не засорять печатную форму,
						// поскольку для их вывода предусмотрено специализированное поле.
						Продолжить;
					ИначеЕсли Идентиф = "sscc_до" Тогда
						СтрокаМаркировки = НоваяСтрока.СведенияОМаркировкеДо.ТранспортныеУпаковки.Добавить();
						СтрокаМаркировки.Код = СокрЛП(Значен);
						
						// В дополнительные данные дерева сведения по маркировке не добавляем, чтобы не засорять печатную форму,
						// поскольку для их вывода предусмотрено специализированное поле.
						Продолжить;
					ИначеЕсли Идентиф = "cis" Тогда
						СтрокаМаркировки = НоваяСтрока.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.Добавить();
						СтрокаМаркировки.Код = СокрЛП(Значен);
						
						// В дополнительные данные дерева сведения по маркировке не добавляем, чтобы не засорять печатную форму,
						// поскольку для их вывода предусмотрено специализированное поле.
						Продолжить;
					ИначеЕсли Идентиф = "sscc" Тогда
						СтрокаМаркировки = НоваяСтрока.СведенияОМаркировке.ТранспортныеУпаковки.Добавить();
						СтрокаМаркировки.Код = СокрЛП(Значен);
						
						// В дополнительные данные дерева сведения по маркировке не добавляем, чтобы не засорять печатную форму,
						// поскольку для их вывода предусмотрено специализированное поле.
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицы = ТекстоваяИнформация.Добавить();
					СтрокаТаблицы.Идентификатор = Идентиф;
					СтрокаТаблицы.Значение      = Значен;
										
					СтрокаТаблицы = ДопДанныеПодписанные.Добавить();
					СтрокаТаблицы.Идентификатор = Идентиф;
					СтрокаТаблицы.Значение      = Значен;
					
				КонецЦикла;
				
				НоваяСтрока.ТекстоваяИнформация = ТекстоваяИнформация;
				
				НоваяСтрока.ДопДанныеПодписанные = ДопДанныеПодписанные;
				
			КонецЕсли;
			
			// Дополнительные характеристики товара.
			НоваяСтрока.КорреспондирующиеСчетаДебет  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КорСчДебет");
			НоваяСтрока.КорреспондирующиеСчетаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КорСчКредит");
			
			СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
			СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
			СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.ТоварНаименование;
			СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.ЕдиницаИзмеренияКод;
			
			НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
				НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего",, "Число"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего",, "Число"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
			СуммаНДССФПривестиКТребуемомуФормату(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС",, "Число", Ложь, Истина)));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего",, "Число"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего",, "Число"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
			СуммаНДССФПривестиКТребуемомуФормату(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС",, "Число", Ложь, Истина)));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.СодОпер"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ПередатДокум"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ДатаНапр"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ИныеСвИзмСтоим"));
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		Основания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ОснКор",,, Истина);
		Если Основания <> Неопределено Тогда
			Для Каждого Основание Из Основания Цикл
				НоваяСтрока = ОснованиеКорректировки.Добавить();
				НоваяСтрока.ДокументНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "НаимОсн");
				НоваяСтрока.ДокументНомер        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "НомОсн");
				НоваяСтрока.ДокументДата         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "ДатаОсн",, "Дата");
				НоваяСтрока.ДокументДопСведения  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основание, "ДопСвОсн");
			КонецЦикла;
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя",       "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ГосРегИППодп"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.СвГосРегИП"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Фамилия" ,,  "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Имя"     ,,  "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.Должн"));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", "");
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПродавцаУКДXDTO_2020(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.УКД_ИнформацияПродавца_2020");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
		
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Функция");
	Если ФункцияДокумента = КСЧФДИС() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.УКД;
		
	ИначеЕсли ФункцияДокумента = КСЧФ() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		
	ИначеЕсли ФункцияДокумента = ДИС() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;

	ИначеЕсли ФункцияДокумента = СвИСРК() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером;

	ИначеЕсли ФункцияДокумента = СвИСЗК() Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером;
		
	КонецЕсли;
	
	НовыйЭД.ВерсияФормата = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	
	// Характеристики электронного документа.
	ВставитьЗначениеВДерево(ДеревоДанных, "Функция",      ФункцияДокумента);
	ВставитьЗначениеВДерево(ДеревоДанных, "Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПоФактХЖ"));
	
	ВставитьЗначениеВДерево(ДеревоДанных, "НаименованиеДокументаОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимДокОпр"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимЭконСубСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.НомерКСчФ"));
	
	ДатаКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДатаКСчФ",, "Дата");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента", ДатаКорректировки);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.КодОКВ"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИспрКСчФ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ",, "Дата"));
	КонецЕсли;
	
	КорректируемыеСчетаФактуры = Новый ТаблицаЗначений;
	КорректируемыеСчетаФактуры.Колонки.Добавить("НомерИсходногоДокумента");
	КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаИсходногоДокумента");
	КорректируемыеСчетаФактуры.Колонки.Добавить("ИсправленияИсходногоДокумента");
	
	СчФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СчФ", , , Истина);
	Для Каждого СведенияОСчФ Из СчФ Цикл
		
		СтрокаСФ = КорректируемыеСчетаФактуры.Добавить();
		
		СтрокаСФ.НомерИсходногоДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОСчФ, "НомерСчФ");
		СтрокаСФ.ДатаИсходногоДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОСчФ, "ДатаСчФ",, "Дата");
		
		ИспрСчФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОСчФ, "ИспрСчФ", , , Истина);
		
		СведенияОИсправлениях = Новый ТаблицаЗначений;
		СведенияОИсправлениях.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
		СведенияОИсправлениях.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
		
		Если ИспрСчФ <> Неопределено Тогда
			Для Каждого СведенияОИспрСчФ Из ИспрСчФ Цикл
				
				СтрокаИсправленияСФ = СведенияОИсправлениях.Добавить();
				СтрокаИсправленияСФ.НомерИсправленияИсходногоДокумента =
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОИспрСчФ, "НомИспрСчФ", , "Число");
				СтрокаИсправленияСФ.ДатаИсправленияИсходногоДокумента =
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОИспрСчФ, "ДатаИспрСчФ",, "Дата");
				
			КонецЦикла;
		КонецЕсли;
		
		Если СведенияОИсправлениях.Количество() > 0 Тогда
			СтрокаСФ.ИсправленияИсходногоДокумента = СведенияОИсправлениях;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, КорректируемыеСчетаФактуры, "ИсходныеДокументы");
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СвПрод"), "СведенияОПродавце");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.СвПокуп"), "СведенияОПокупателе");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДопСвФХЖ1.ИдГосКон"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДопСвФХЖ1.НаимОКВ"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ДопСвФХЖ1.КурсВал"));
	
	ОписаниеПоляСведенияОВыбытии = ОписаниеПоляСведенийОВыбытииМаркированныхТоваров();
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИнфПолФХЖ1") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеСчетаФактуры.ИдентификаторФайла", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИнфПолФХЖ1.ИдФайлИнфПол"));
		
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвКСчФ.ИнфПолФХЖ1.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда

			ВидУчастника = "СведенияОПродавце";
			
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
				ВидУчастника = "СведенияОПокупателе";
			КонецЕсли;
			
			СвойстваОрганизации = ДанныеУчастникаСделкиУПД_УКД(ВидУчастника, ДеревоДанных, "ИНН, КПП");
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(
				"Организации", СвойстваОрганизации.ИНН, СвойстваОрганизации.КПП, ДатаКорректировки);
			
			ДокументыОснованияСчетаФактуры = Новый Массив;
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				
				Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
				
				Если Значен = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Идентиф = "ДанныеКомиссионера" Тогда
					
					ОбъектXML = Новый ЧтениеXML;
					СтрокаXML = "<СвПродПокТип> " + Значен + " <Адрес> <АдрРФ КодРегион=""00""/> </Адрес> </СвПродПокТип>";
					ОбъектXML.УстановитьСтроку(СтрокаXML);
					СведенияОКомиссионере = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					ОбъектXML.Закрыть();
					ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере");
					
				ИначеЕсли Идентиф = "ТолькоУслуги" Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						"ТолькоУслуги", Булево(Значен));
					
				ИначеЕсли Идентиф = ИдентификаторВидаДокументаДляОтображенияВУчете() Тогда	
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Идентиф, Значен);
					
				ИначеЕсли Идентиф = ОписаниеПоляСведенияОВыбытии.ИмяПоля Тогда
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
						ОписаниеПоляСведенияОВыбытии.ИмяРеквизита, Значен);
					
				КонецЕсли;
				
				НоваяСтрока = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = Идентиф;
				НоваяСтрока.Значение      = Значен;
				
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
				ДокументыОснованияСчетаФактуры);
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
	
	СведТов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.СведТов",,, Истина);
	Если СведТов <> Неопределено Тогда
		
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("КоличествоДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("Количество");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СуммаНалогаУменьшение");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаУвеличение");
		СведенияОТоварах.Колонки.Добавить("СуммаАкцизаУменьшение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение");
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение");
		СведенияОТоварах.Колонки.Добавить("ДокументОснование");
		СведенияОТоварах.Колонки.Добавить("ХарактеристикаОписаниеТовара");
		СведенияОТоварах.Колонки.Добавить("СортТовара");
		СведенияОТоварах.Колонки.Добавить("АртикулТовара");
		СведенияОТоварах.Колонки.Добавить("КодТовара");
		СведенияОТоварах.Колонки.Добавить("НаименованиеЕдиницыИзмеренияДоКорректировки");
		СведенияОТоварах.Колонки.Добавить("НаименованиеЕдиницыИзмеренияПослеКорректировки");
		СведенияОТоварах.Колонки.Добавить("КодВидаТовара");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировке");
		СведенияОТоварах.Колонки.Добавить("ТекстоваяИнформация");
		СведенияОТоварах.Колонки.Добавить("ДопДанныеПодписанные");
		СведенияОТоварах.Колонки.Добавить("Сопоставление");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировкеДо");
		СведенияОТоварах.Колонки.Добавить("СведенияОМаркировкеПосле");
		СведенияОТоварах.Колонки.Добавить("СведенияОПрослеживаемости");
		СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации");
		
		Для Каждого Товар Из СведТов Цикл
			
			// Основные характеристики товара.
			НоваяСтрока = СведенияОТоварах.Добавить();
			НоваяСтрока.ТоварНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НаимТов");
			НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ОКЕИ_ТовДо");
			НоваяСтрока.ЕдиницаИзмеренияКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ОКЕИ_ТовПосле");
			НоваяСтрока.КоличествоДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "КолТовДо",, "Число");
			НоваяСтрока.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "КолТовПосле",, "Число");
			НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ЦенаТовДо",, "Число");
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ЦенаТовПосле",, "Число");
			НоваяСтрока.НомерСтрокиИсходногоДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ПорНомТовВСЧФ",, "Число");
			
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС") <> Неопределено Тогда
				
				НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимДоИзм",, "Число");
				НоваяСтрока.СтоимостьТоваровБезНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимПослеИзм",, "Число");
				НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимУвел",, "Число");
				НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовБезНДС.СтоимУм",, "Число");
				
			КонецЕсли;
			
			НоваяСтрока.НалоговаяСтавкаДоКорректировки = 
				ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НалСтДо"));
			
			НоваяСтрока.НалоговаяСтавка = 
				ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НалСтПосле"));
				
			// Сумма налога
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалДо") <> Неопределено Тогда
				НоваяСтрока.СуммаНалогаДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалДо.СумНДС",, "Число", Ложь, Истина);
				НоваяСтрока.СуммаНалога = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СумНалПосле.СумНДС",, "Число", Ложь, Истина);
			КонецЕсли;
			
			// Сумма налога увеличение/уменьшение
			СуммаНалогаРазн = ПолучитьИмяИЗначениеСуммыРазнИзФайла(Товар, "СумНалРазн", "СуммаНалогаУвеличение", "СуммаНалогаУменьшение");
			Если ЗначениеЗаполнено(СуммаНалогаРазн.Значение) Тогда
				НоваяСтрока[СуммаНалогаРазн.Имя] = СуммаНалогаРазн.Значение;
			КонецЕсли;
			// Сумма акциза
			НоваяСтрока.СуммаАкцизаДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "АкцизДо.СумАкциз",, "Число", Ложь, Истина);
			НоваяСтрока.СуммаАкциза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "АкцизПосле.СумАкциз",, "Число", Ложь, Истина);
			
			// Сумма акциза увеличение/уменьшение
			СуммаАкцизаРазн = ПолучитьИмяИЗначениеСуммыРазнИзФайла(Товар, "АкцизРазн", "СуммаАкцизаУвеличение", "СуммаАкцизаУменьшение");
			Если ЗначениеЗаполнено(СуммаАкцизаРазн.Значение) Тогда
				НоваяСтрока[СуммаАкцизаРазн.Имя] = СуммаАкцизаРазн.Значение;
			КонецЕсли;
			
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал") <> Неопределено Тогда
				НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимДоИзм",, "Число");
				НоваяСтрока.СтоимостьТоваровСНалогом = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимПослеИзм",, "Число");
				НоваяСтрока.СтоимостьТоваровСНалогомУвеличение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимУвел",, "Число");
				НоваяСтрока.СтоимостьТоваровСНалогомУменьшение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СтТовУчНал.СтоимУм",, "Число");
			КонецЕсли;
			
			НоваяСтрока.ХарактеристикаОписаниеТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.ХарактерТов",, "Строка");
			НоваяСтрока.СортТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.СортТов",, "Строка");
			НоваяСтрока.АртикулТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.АртикулТов",, "Строка");
			НоваяСтрока.КодТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КодТов",, "Строка");
			НоваяСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.НаимЕдИзмДо",, "Строка");
			НоваяСтрока.НаименованиеЕдиницыИзмеренияПослеКорректировки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.НаимЕдИзмПосле",, "Строка");
			НоваяСтрока.КодВидаТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ДопСведТов.КодВидТов",, "Строка");
			
			Информация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "ИнфПолФХЖ2",,, Истина);
			
			ИдентификаторТовара = "";
			
			Если Информация <> Неопределено Тогда
				
				ДопДанныеПодписанные = Новый ТаблицаЗначений;
				ДопДанныеПодписанные.Колонки.Добавить("Идентификатор");
				ДопДанныеПодписанные.Колонки.Добавить("Значение");
				
				ТекстоваяИнформация = Новый ТаблицаЗначений;
				ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
				ТекстоваяИнформация.Колонки.Добавить("Значение");
				
				ДокументОснованиеНайден = Ложь;
				
				СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
				СведенияОТаможеннойДекларации.Колонки.Добавить(
					"СтранаПроисхожденияКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
				СведенияОТаможеннойДекларации.Колонки.Добавить(
					"ТаможеннаяДекларацияНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(29)));
				
				Для Каждого СтрокаИнформации Из Информация Цикл
					
					Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
					Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
					
					Если Значен = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если Идентиф = "ИД" Тогда
						
						ИдентификаторТовара = Значен;
						
					ИначеЕсли Идентиф = "cis" Или Идентиф = "sscc" Тогда
							
						ИмяТаблицыКодовМаркировки = "КодыИндивидуальныхУпаковок";
						ИзвлечьКодыМаркировкиИзДопДанныхДокумента(Значен, НоваяСтрока, ИмяТаблицыКодовМаркировки);
						
						// В дополнительные данные дерева сведения по маркировке не добавляем, чтобы не засорять печатную форму,
						// поскольку для их вывода предусмотрено специализированное поле.
						Продолжить;
						
					ИначеЕсли Лев(Идентиф, 22) = "СтранаПроисхожденияКод" Тогда
						// Удалить. Устаревший вариант идентификатора.
						
						НомерСтрокиСтрокой = Сред(Идентиф, 23);
						Если ЗначениеЗаполнено(НомерСтрокиСтрокой) Тогда
							НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСтрокиСтрокой);
							Если Не ЗначениеЗаполнено(НомерСтроки) Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							НомерСтроки = 1;
						КонецЕсли;
						
						Пока СведенияОТаможеннойДекларации.Количество() < НомерСтроки Цикл
							СведенияОТаможеннойДекларации.Добавить();
						КонецЦикла;
						СведенияОТаможеннойДекларации[НомерСтроки - 1].СтранаПроисхожденияКод = Значен;
						
					ИначеЕсли Лев(Идентиф, 33) = "цифровой код страны происхождения" Тогда
						
						НомерСтрокиСтрокой = СокрЛП(Сред(Идентиф, 34));
						Если ЗначениеЗаполнено(НомерСтрокиСтрокой) Тогда
							НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСтрокиСтрокой);
							Если Не ЗначениеЗаполнено(НомерСтроки) Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							НомерСтроки = 1;
						КонецЕсли;
						
						Пока СведенияОТаможеннойДекларации.Количество() < НомерСтроки Цикл
							СведенияОТаможеннойДекларации.Добавить();
						КонецЦикла;
						СведенияОТаможеннойДекларации[НомерСтроки - 1].СтранаПроисхожденияКод = Значен;
						
					ИначеЕсли Лев(Идентиф, 25) = "ТаможеннаяДекларацияНомер" Тогда
						// Удалить. Устаревший вариант идентификатора.
						
						НомерСтрокиСтрокой = Сред(Идентиф, 26);
						Если ЗначениеЗаполнено(НомерСтрокиСтрокой) Тогда
							НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСтрокиСтрокой);
							Если Не ЗначениеЗаполнено(НомерСтроки) Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							НомерСтроки = 1;
						КонецЕсли;
						
						Пока СведенияОТаможеннойДекларации.Количество() < НомерСтроки Цикл
							СведенияОТаможеннойДекларации.Добавить();
						КонецЦикла;	
						СведенияОТаможеннойДекларации[НомерСтроки - 1].ТаможеннаяДекларацияНомер = Значен;
						
					ИначеЕсли Лев(Идентиф, 42) = "регистрационный номер декларации на товары" Тогда
						
						НомерСтрокиСтрокой = СокрЛП(Сред(Идентиф, 43));
						Если ЗначениеЗаполнено(НомерСтрокиСтрокой) Тогда
							НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСтрокиСтрокой);
							Если Не ЗначениеЗаполнено(НомерСтроки) Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							НомерСтроки = 1;
						КонецЕсли;
						
						Пока СведенияОТаможеннойДекларации.Количество() < НомерСтроки Цикл
							СведенияОТаможеннойДекларации.Добавить();
						КонецЦикла;	
						СведенияОТаможеннойДекларации[НомерСтроки - 1].ТаможеннаяДекларацияНомер = Значен;
						
					КонецЕсли;
					
					СтрокаТаблицы = ТекстоваяИнформация.Добавить();
					СтрокаТаблицы.Идентификатор = Идентиф;
					СтрокаТаблицы.Значение = Значен;
					
					СтрокаТаблицы = ДопДанныеПодписанные.Добавить();
					СтрокаТаблицы.Идентификатор = Идентиф;
					СтрокаТаблицы.Значение = Значен;
					
				КонецЦикла;
				
				ОтборПустыхСтрок = Новый Структура("СтранаПроисхожденияКод,ТаможеннаяДекларацияНомер", "", "");
				ПустыеСтрокиСведений = СведенияОТаможеннойДекларации.НайтиСтроки(ОтборПустыхСтрок);
				Для каждого ПустаяСтрокаСведений Из ПустыеСтрокиСведений Цикл
					СведенияОТаможеннойДекларации.Удалить(ПустаяСтрокаСведений);
				КонецЦикла;
				
				Если СведенияОТаможеннойДекларации.Количество() > 0 Тогда
					НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
				КонецЕсли;
				
				НоваяСтрока.ТекстоваяИнформация = ТекстоваяИнформация;
				
				НоваяСтрока.ДопДанныеПодписанные = ДопДанныеПодписанные;
				
			КонецЕсли;
			
			НомСредИдентТовДо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НомСредИдентТовДо",,, Истина);
			Если НомСредИдентТовДо <> Неопределено Тогда
				ТаблицаКодов = Новый ТаблицаЗначений;
				ТаблицаКодов.Колонки.Добавить("Код");
				СведенияОМаркировке = Новый Структура;
				СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
				СведенияОМаркировке.Вставить("ТранспортныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
				СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодов.СкопироватьКолонки());
				
				Для Каждого Элемент Из НомСредИдентТовДо Цикл
					ИдТрансУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИдентТрансУпак");
					Если ЗначениеЗаполнено(ИдТрансУпак) Тогда
						СведенияОМаркировке.ТранспортныеУпаковки.Добавить().Код = ИдТрансУпак;
					КонецЕсли;
					КИЗ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КИЗ",,, Истина);
					Если КИЗ <> Неопределено Тогда
						Для каждого КИЗЗначение Из КИЗ Цикл
							СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.Добавить().Код = КИЗЗначение;
						КонецЦикла;
					КонецЕсли;
					НомУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомУпак",,, Истина);
					Если НомУпак <> Неопределено Тогда
						Для каждого НомУпакЗначение Из НомУпак Цикл
							СведенияОМаркировке.ИндивидуальныеУпаковки.Добавить().Код = НомУпакЗначение;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				НоваяСтрока.СведенияОМаркировкеДо = СведенияОМаркировке;
				
			КонецЕсли;
			
			НомСредИдентТовПосле = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "НомСредИдентТовПосле",,, Истина);
			Если НомСредИдентТовПосле <> Неопределено Тогда
				ТаблицаКодов = Новый ТаблицаЗначений;
				ТаблицаКодов.Колонки.Добавить("Код");
				СведенияОМаркировке = Новый Структура;
				СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
				СведенияОМаркировке.Вставить("ТранспортныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
				СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодов.СкопироватьКолонки());
				
				Для Каждого Элемент Из НомСредИдентТовПосле Цикл
					ИдТрансУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИдентТрансУпак");
					Если ЗначениеЗаполнено(ИдТрансУпак) Тогда
						СведенияОМаркировке.ТранспортныеУпаковки.Добавить().Код = ИдТрансУпак;
					КонецЕсли;
					КИЗ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КИЗ",,, Истина);
					Если КИЗ <> Неопределено Тогда
						Для каждого КИЗЗначение Из КИЗ Цикл
							СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.Добавить().Код = КИЗЗначение;
						КонецЦикла;
					КонецЕсли;
					НомУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомУпак",,, Истина);
					Если НомУпак <> Неопределено Тогда
						Для каждого НомУпакЗначение Из НомУпак Цикл
							СведенияОМаркировке.ИндивидуальныеУпаковки.Добавить().Код = НомУпакЗначение;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				НоваяСтрока.СведенияОМаркировкеПосле = СведенияОМаркировке;
				
			КонецЕсли;
			
			СведПрослеж = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Товар, "СведПрослеж",,, Истина);
			Если СведПрослеж <> Неопределено Тогда
				СведенияОПрослеживаемости = Новый ТаблицаЗначений;
				СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара");
				СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараДоИзменения");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараПослеИзменения");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУвеличение");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУменьшение");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеДоИзменения");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеПослеИзменения");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеУвеличение");
				СведенияОПрослеживаемости.Колонки.Добавить("КоличествоТовараУчетноеУменьшение");
				
				ДанныеОбУчетномКоличестве = Новый Структура;
				Если ТипЗнч(НоваяСтрока.ТекстоваяИнформация) = Тип("ТаблицаЗначений") Тогда
					Для каждого СтрокаТаблицыТекстоваяИнформация Из НоваяСтрока.ТекстоваяИнформация Цикл
						ЭтоДанныеОбУчетномКоличестве =
							Лев(СтрокаТаблицыТекстоваяИнформация.Идентификатор, 28) = "ДопПрослеж_КоличествоУчетное";
						Если Не ЭтоДанныеОбУчетномКоличестве Тогда
							Продолжить;
						КонецЕсли;
						ЧтениеJSON = Новый ЧтениеJSON;
						ЧтениеJSON.УстановитьСтроку(СтрокаТаблицыТекстоваяИнформация.Значение);
						СтруктураУчетноеКоличество = ПрочитатьJSON(ЧтениеJSON);
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеОбУчетномКоличестве,
							СтруктураУчетноеКоличество);
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Элемент Из СведПрослеж Цикл
					СтрокаТаблицы = СведенияОПрослеживаемости.Добавить();
					СтрокаТаблицы.НомерТовара = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомТовПрослеж");
					СтрокаТаблицы.ЕдиницаИзмеренияКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ЕдИзмПрослеж");
					ИзмененияВКоличестве = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИзмКолЕдПТ");
					СтрокаТаблицы.КоличествоТовараДоИзменения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИзмененияВКоличестве, "КолТовЕдПТДо",, "Число");
					СтрокаТаблицы.КоличествоТовараПослеИзменения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИзмененияВКоличестве, "КолТовЕдПТПосле",, "Число");
					СтрокаТаблицы.КоличествоТовараУвеличение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИзмененияВКоличестве, "КолТовЕдПТУвел",, "Число");
					СтрокаТаблицы.КоличествоТовараУменьшение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИзмененияВКоличестве, "КолТовЕдПТУм",, "Число");
					
					ИдентификаторСтроки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ДопПрослеж");
					Если ИдентификаторСтроки <> Неопределено И ДанныеОбУчетномКоличестве.Свойство(ИдентификаторСтроки) Тогда
						СтрокаУчетногоКоличества = ДанныеОбУчетномКоличестве[ИдентификаторСтроки];
						СтрокаТаблицы.КоличествоТовараУчетноеДоИзменения = СтрокаУчетногоКоличества.До;
						СтрокаТаблицы.КоличествоТовараУчетноеПослеИзменения = СтрокаУчетногоКоличества.После;
						Если СтрокаУчетногоКоличества.Свойство("Увел") Тогда
							СтрокаТаблицы.КоличествоТовараУчетноеУвеличение = СтрокаУчетногоКоличества.Увел;
						КонецЕсли;
						Если СтрокаУчетногоКоличества.Свойство("Ум") Тогда
							СтрокаТаблицы.КоличествоТовараУчетноеУменьшение = СтрокаУчетногоКоличества.Ум;
						КонецЕсли;
					ИначеЕсли ИдентификаторСтроки <> Неопределено И ТипЗнч(НоваяСтрока.ТекстоваяИнформация) = Тип("ТаблицаЗначений") Тогда
						// Удалить. Устаревшие идентификаторы.
						СтрокаТаблицыТекстоваяИнформация = НоваяСтрока.ТекстоваяИнформация.Найти(СтрШаблон("%1_КолУчетноеДоИзменения", ИдентификаторСтроки));
						Если СтрокаТаблицыТекстоваяИнформация <> Неопределено Тогда
							СтрокаТаблицы.КоличествоУчетноеДоИзменения = СтрокаТаблицыТекстоваяИнформация.Значение;
						КонецЕсли;
						СтрокаТаблицыТекстоваяИнформация = НоваяСтрока.ТекстоваяИнформация.Найти(СтрШаблон("%1_КолУчетноеПослеИзменения", ИдентификаторСтроки));
						Если СтрокаТаблицыТекстоваяИнформация <> Неопределено Тогда
							СтрокаТаблицы.КоличествоУчетноеПослеИзменения = СтрокаТаблицыТекстоваяИнформация.Значение;
						КонецЕсли;
						СтрокаТаблицыТекстоваяИнформация = НоваяСтрока.ТекстоваяИнформация.Найти(СтрШаблон("%1_КолУчетноеУвеличение", ИдентификаторСтроки));
						Если СтрокаТаблицыТекстоваяИнформация <> Неопределено Тогда
							СтрокаТаблицы.КоличествоУчетноеУвеличение = СтрокаТаблицыТекстоваяИнформация.Значение;
						КонецЕсли;
						СтрокаТаблицыТекстоваяИнформация = НоваяСтрока.ТекстоваяИнформация.Найти(СтрШаблон("%1_КолУчетноеУменьшение", ИдентификаторСтроки));
						Если СтрокаТаблицыТекстоваяИнформация <> Неопределено Тогда
							СтрокаТаблицы.КоличествоУчетноеУменьшение = СтрокаТаблицыТекстоваяИнформация.Значение;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				НоваяСтрока.СведенияОПрослеживаемости = СведенияОПрослеживаемости;
				
			КонецЕсли;
			
			СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
			СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
			СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.ТоварНаименование;
			СопоставлениеПоУмолчанию.Характеристика = НоваяСтрока.ХарактеристикаОписаниеТовара;
			СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки;
			СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.ЕдиницаИзмеренияКод;
			СопоставлениеПоУмолчанию.Артикул = НоваяСтрока.АртикулТовара;
			СопоставлениеПоУмолчанию.КодНоменклатуры = НоваяСтрока.КодТовара;
			
			НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
				НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего",, "Число"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего",, "Число"));
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СумНал") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
				СуммаНДССФПривестиКТребуемомуФормату(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС",, "Число", Ложь, Истина)));
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего",, "Число"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего",, "Число"));
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СумНал") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
				СуммаНДССФПривестиКТребуемомуФормату(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС",, "Число", Ложь, Истина)));
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.СодОпер"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ДатаНапр"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ИныеСвИзмСтоим"));
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		СведенияОДокументеОснования = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ДокумОснКор",,, Истина);
		Если СведенияОДокументеОснования <> Неопределено Тогда
			Для Каждого СтрокаСведений Из СведенияОДокументеОснования Цикл
				НоваяСтрока = ОснованиеКорректировки.Добавить();
				НоваяСтрока.ДокументНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "НаимОсн");
				НоваяСтрока.ДокументНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "НомОсн");
				НоваяСтрока.ДокументДата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ДатаОсн",, "Дата");
				
				ДопСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ДопСвОсн");
				Если ЗначениеЗаполнено(ДопСведения) Тогда
					НоваяСтрока.ДокументДопСведения = ДопСведения;
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
		ПередаточныйДокумент = Новый ТаблицаЗначений;
		ПередаточныйДокумент.Колонки.Добавить("ДокументНаименование");
		ПередаточныйДокумент.Колонки.Добавить("ДокументНомер");
		ПередаточныйДокумент.Колонки.Добавить("ДокументДата");
		ПередаточныйДокумент.Колонки.Добавить("ДокументДопСведения");
		
		СведенияОПередаточномДокументе = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ПередатДокум",,, Истина);
		Если СведенияОПередаточномДокументе <> Неопределено Тогда
			Для Каждого СтрокаСведений Из СведенияОПередаточномДокументе Цикл
				НоваяСтрока = ПередаточныйДокумент.Добавить();
				НоваяСтрока.ДокументНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "НаимОсн");
				НоваяСтрока.ДокументНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "НомОсн");
				НоваяСтрока.ДокументДата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ДатаОсн",, "Дата");
				
				ДопСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ДопСвОсн");
				Если ЗначениеЗаполнено(ДопСведения) Тогда
					НоваяСтрока.ДокументДопСведения = ДопСведения;
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПередаточныйДокумент, "ПередаточныйДокумент");
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Фамилия",, "Строка"));
		ФИО.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Имя",, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ФЛ.ГосРегИППодп"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Фамилия",, "Строка"));
		ФИО.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Имя",, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ИП.СвГосРегИП"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Фамилия",, "Строка"));
		ФИО.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Имя",, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант.ЮЛ.Должн"));
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОПБОЮЛ", "");
		ВставитьЗначениеВДерево(ДеревоДанных, "Свидетельство", "");
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПокупателяУКДXDTO_5_02(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.УКД_ИнформацияПокупателя");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ФункцияПр");
	Если ФункцияДокумента = "К" ИЛИ ФункцияДокумента = "КСЧФДИС" Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.УКД;
	ИначеЕсли ФункцияДокумента = "Д" ИЛИ ФункцияДокумента = "ДИС" Тогда
		НовыйЭД.ВидЭД               = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	КонецЕсли;
	
	НовыйЭД.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.НаимЭконСубСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвСоглас.СодОпер"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаСогласования", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвСоглас.ДатаСоглас",, "Дата"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеДокументаПолучения.ИдентификаторФайла",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ИдФайлИнфПол"));
			
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				НоваяСтрока               = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				НоваяСтрока.Значение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.Должн"));
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПокупателяУКДXDTO_2020(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.УКД_ИнформацияПокупателя");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФункцияДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ФункцияПр");
	Если ФункцияДокумента = "К" ИЛИ ФункцияДокумента = "КСЧФДИС" Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.УКД;		
	ИначеЕсли ФункцияДокумента = "Д" ИЛИ ФункцияДокумента = "ДИС" Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	КонецЕсли;
	
	НовыйЭД.ВерсияФормата = "ON_NKORSCHFDOPPR_1_996_03_05_01";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.НаимЭконСубСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СоставительДокументаДоверенность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.ОснДоверОргСост"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвСоглас.СодОпер"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДатаСогласования", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.СвСоглас.ДатаСоглас",, "Дата"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДопДанныеДокументаПолучения.ИдентификаторФайла",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ИдФайлИнфПол"));
			
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.СодФХЖ4.ИнфПолФХЖ4.ТекстИнф",,, Истина);
		Если ТекстИнф <> Неопределено Тогда
			
			ТекстоваяИнформация = Новый ТаблицаЗначений;
			ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
			ТекстоваяИнформация.Колонки.Добавить("Значение");
			
			Для Каждого СтрокаИнформации Из ТекстИнф Цикл
				НоваяСтрока               = ТекстоваяИнформация.Добавить();
				НоваяСтрока.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Идентиф");
				НоваяСтрока.Значение      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаИнформации, "Значен");
			КонецЦикла;
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаПолучения.ТекстоваяИнформация");
		КонецЕсли;
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ФЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", "");
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ИП.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", НСтр("ru = 'ИП'"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ") <> Неопределено Тогда
		
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Фамилия" ,, "Строка"));
		ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Имя"     ,, "Строка"));
		ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.ФИО.Отчество",, "Строка"));
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		ВставитьЗначениеВДерево(ДеревоДанных, "ДолжностьРуководителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИнфПок.Подписант.ЮЛ.Должн"));
		
	КонецЕсли;
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьАкт501XDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И СтрНайти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	
	Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;
	Если Исполнитель <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Исполнитель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Заказчик");
		КонецЕсли;
	КонецЕсли;
	
	Заказчик = Неопределено;
	Если НЕ ЭД.Документ.СвАктИ.Свойства().Получить("Заказчик") = Неопределено Тогда
		Заказчик = ЭД.Документ.СвАктИ.Заказчик;
	ИначеЕсли ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		Заказчик = ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных);
	КонецЕсли;
	
	Если Заказчик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Заказчик");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Исполнитель");
		КонецЕсли;
	КонецЕсли;
			
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Если Организация = Неопределено Тогда // получен Акт из не-1С системы, подставим Организацию по ИД
		УстановитьПривилегированныйРежим(Истина);
		
		ИдЗаказчика = ЭД.СвУчДокОбор.ИдПок;
		ДанныеУчетнойЗаписи = СинхронизацияЭДО.ДанныеУчетнойЗаписи(ИдЗаказчика);
		ОрганизацияПоИД = ?(ДанныеУчетнойЗаписи <> Неопределено, ДанныеУчетнойЗаписи.Организация, Неопределено);
		
		Если ЗначениеЗаполнено(ОрганизацияПоИД) Тогда
			Организация = ОрганизацияПоИД;
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Организации");
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", Организация.Код);
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдЗаказчика, НСтр("ru = 'ИД организации:'") + " " + ИдЗаказчика,
				Организация, ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Организация", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Структура = Новый Структура("Организация", Организация);
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты,
				Валюта, ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;	

	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = ВидОперацииЭДПоСтроке(ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвАктИ.НомАкт);
	ДатаДок = ЭД.Документ.СвАктИ.ДатаАкт;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ФорматыЭДО.ДатаИзСтроки(ДатаДок));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ЭД.Документ.СвАктИ.Заголовок);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Если ЭД.Документ.СвАктИ.Сдал <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвАктИ.Сдал.ДатаИсполн;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсполнения", ФорматыЭДО.ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		
		Если ЭД.Документ.СвАктИ.Сдал.ПодписьИсполн <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалДолжность", ЭД.Документ.СвАктИ.Сдал.ПодписьИсполн.Должность);
			ФИО = ЭД.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалФИО", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	НаборДанныхОписанияРабот = ЭД.Документ.СвАктИ.ОписРабот;
	СуммаДокумента = 0;
	Если ТипЗнч(НаборДанныхОписанияРабот) = Тип("СписокXDTO") Тогда
		Сч = 1;
		Для Каждого ЭлементОписания Из НаборДанныхОписанияРабот Цикл
			
			СписокОписаний = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "СписокОписаний");
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "НачРабот",  ЭлементОписания.НачРабот);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "КонРабот",  ЭлементОписания.КонРабот);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "Сумма",     ЭлементОписания.СумБезНДСИт);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаНДС",  ЭлементОписания.СумНДСИт);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СписокОписаний, "СуммаСНДС", ЭлементОписания.СумУчНДСИт);
			
			СуммаДокумента = СуммаДокумента + ?(ЗначениеЗаполнено(ЭлементОписания.СумУчНДСИт), ЭлементОписания.СумУчНДСИт, 0);
			
			// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
			ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
				ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани);
			
			НаборДанных = ЭлементОписания.Работа;
			Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
				Для Каждого Элемент Из НаборДанных Цикл
					ИдТовара = "";
			
					СписокТЧ = Новый СписокЗначений;
					СписокТЧ.Добавить(Элемент.Номер,      "Номер");
					Если ЗначениеЗаполнено(Элемент.НаимРабот) Тогда
						СписокТЧ.Добавить(Элемент.НаимРабот,  "Наименование");
					Иначе
						СписокТЧ.Добавить(Элемент.Описание,  "Наименование");
					КонецЕсли;
					СписокТЧ.Добавить(Элемент.Количество, "Количество");
					СписокТЧ.Добавить(Элемент.Цена,       "Цена");
					СписокТЧ.Добавить(Элемент.СумБезНДС,  "Сумма");
					СписокТЧ.Добавить(Элемент.СумНДС,     "СуммаНДС");
					СписокТЧ.Добавить(Элемент.СумУчНДС,   "СуммаСНДС");
					СписокТЧ.Добавить(Элемент.Описание,   "Описание");
					СписокТЧ.Добавить(Элемент.НаимЕдИзм,  "ЕдиницаИзмеренияНаименование");
					СписокТЧ.Добавить(Элемент.ОКЕИ,       "ЕдиницаИзмеренияКод");
					
					// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
					Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
						Если СтрНайти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
							// В инф.поле xml-строка неактуального формата.
							ОбъектXML = Новый ЧтениеXML;
							Попытка
								ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
								УслугаXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
								СписокТЧ.Добавить(УслугаXDTO["Ид"], "ИД");
							Исключение
								ВидОперации = НСтр("ru = 'Чтение неактуального формата Акт.'");
								ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
								ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
							КонецПопытки;
						Иначе
							// В инф.поле xml-строка Актуального формата.
							ИнфПол = Элемент.ИнфПолСтр;
							ФорматыЭДО.ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Услуги", Строка(Сч) + "." + Элемент.Номер);
						КонецЕсли;
					КонецЕсли;
					
					ИдТовара = "";
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Строка(Сч) + "." + Элемент.Номер, "Услуги", Ошибка);
					
					РеквизитыНоменклатуры = Новый Структура;
					РеквизитыЕдиницыИзмерения = Новый Структура;
					РеквизитыБазовойЕдиницыИзмерения = Новый Структура;
					
					ДокументОснованиеНайден = Ложь;
					
					Для Каждого ЭлементСЗ Из СписокТЧ Цикл
						
						// Номенклатура.
						Если ЭлементСЗ.Представление = "Наименование" Тогда
							РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаКод" Тогда
							РеквизитыБазовойЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "БазоваяЕдиницаНаименование" Тогда
							РеквизитыБазовойЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ОКЕИ_Тов" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
							РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
							ИдТовара = ЭлементСЗ.Значение;
						ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
							ЭлементСЗ.Значение = ЭлементСЗ.Значение;
						КонецЕсли;
					КонецЦикла;
					
					НаимРабот = "";
					РеквизитыНоменклатуры.Свойство("Наименование", НаимРабот);
					КодЕдИзм = "";
					Если РеквизитыБазовойЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
						НаименованиеЕдИзм = "";
						РеквизитыБазовойЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
						ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(КодЕдИзм),
							РеквизитыБазовойЕдиницыИзмерения);
						НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм), НаименованиеЕдИзм,
							ЕдИзм, РеквизитыБазовойЕдиницыИзмерения, ДанныеРазбора, Ошибка);
						Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
					
					КодЕдИзм = "";
					Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
						НаименованиеЕдИзм = "";
						РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
						ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(КодЕдИзм),
							РеквизитыЕдиницыИзмерения);
						НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(КодЕдИзм),
							НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДанныеРазбора, Ошибка);
						Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
					
					// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
					Если ИдентификацияПоНоменклатуреКомпании Тогда
						СтруктураИд = РазобратьИДТовара(ИдТовара);
						Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Иначе
						// Номенклатура поставщиков.
						РеквизитыНоменклатурыПоставщика = Новый Структура;
						ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
						ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
						
						РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
						
						Если ЗначениеЗаполнено(НаимРабот) Тогда
							РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимРабот);
							
							// Если пришел пустой ИД, используем вместо него наименование товара.
							// Актуально для входящих ЭД из учетных систем отличных от 1С.
							Если Не ЗначениеЗаполнено(ИдТовара) Тогда
								ИдТовара = СопоставлениеНоменклатурыКонтрагентов.ИдентификаторТовараПоДаннымНоменклатуры(НаимРабот);
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИдТовара) Тогда

							РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
							
							Номенклатура = Неопределено;

							НоменклатураПоставщика = СопоставлениеНоменклатурыКонтрагентовСлужебный.НоменклатураКонтрагентаПоВладельцуИИдентификатору(
								ВладелецНоменклатуры, ИдТовара);
							
							НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураКонтрагентов");
							НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, НоменклатураПоставщика,
																					РеквизитыНоменклатурыПоставщика, ДанныеРазбора, Ошибка);
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
							
							Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
								РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
								Номенклатура = НоменклатураПоставщика.Номенклатура;
							КонецЕсли;
						
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Номенклатура) Тогда
						
						НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
						НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимРабот, Номенклатура,
							РеквизитыНоменклатуры, ДанныеРазбора, Ошибка);
						
						СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
						
					КонецЕсли;
					
					ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(СписокОписаний, "Работа", СписокТЧ);
					
				КонецЦикла;
			КонецЕсли;
			Сч = Сч + 1;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СписокОписаний", СписокОписаний);
		КонецЦикла;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАкт501ЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СвАктИ.Принял <> Неопределено Тогда
		Если ЭД.Документ.СвАктИ.Принял.ДатаЗаказ <> Неопределено Тогда
			ДатаДок = ЭД.Документ.СвАктИ.Принял.ДатаЗаказ;
			ДатаПолучения = ФорматыЭДО.ДатаИзСтроки(ДатаДок);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		КонецЕсли;
		Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.НомДоверен);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		ИначеЕсли ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.Должность);
			ФИО = ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвАктИ.Принял.Претенз <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ЭД.Документ.СвАктИ.Принял.Претенз);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12XDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ФорматыЭДО.ДатаИзСтроки(ДатаДок));
	
	СуммаДокумента = 0;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс;
	ИначеЕсли ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск;
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИДФайл);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Структура = Новый Структура("Организация", Организация);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И СтрНайти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;

	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты,
				Валюта, ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;

	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = ВидОперацииЭДПоСтроке(ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Документ.СвТНО.ОКУДПервДок);
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаНеттоПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.НеттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", ФорматыЭДО.ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
			
		ИдентификаторыСтрокСерии = ИдентификаторыСерийНоменклатуры();

		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			
			СписокТЧ.Добавить(Элемент.НомТов,      "Номер");
			СписокТЧ.Добавить(Элемент.НаимТов,     "Наименование");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.СортТов,     "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов,  "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм,   "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов,    "ЕдиницаИзмеренияКод");
			СписокТЧ.Добавить(Элемент.КодТов,      "ТоварКод");
	
			СписокТЧ.Добавить(Элемент.Нетто,     "Количество");
			СписокТЧ.Добавить(Элемент.КолМест,   "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак,   "Упаковка");
			СписокТЧ.Добавить(Элемент.Место,     "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.Нетто,     "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто,    "МассаБрутто");
			СписокТЧ.Добавить(Элемент.Цена,      "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДС,    "СуммаНДС");
			СписокТЧ.Добавить(Элемент.СумУчНДС,  "СуммаСНДС");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И СтрНайти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧCML(ТоварXDTO, СписокТЧ, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Элемент.НомТов);
				Исключение
					ВидОперации = НСтр("ru = 'Чтение неактуального формата ТОРГ-12.'");
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ФорматыЭДО.ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				ДокументОснованиеНайден = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "Наименование" Тогда
						РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "НаименованиеХарактеристики" Тогда
						РеквизитыНоменклатуры.Вставить("НаименованиеХарактеристики", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ТоварКод" Тогда
						РеквизитыНоменклатуры.Вставить("ТоварКод", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Сорт" Тогда
						РеквизитыНоменклатуры.Вставить("Сорт", ЭлементСЗ.Значение);
						
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ОКЕИ_Тов" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
						
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						ЭлементСЗ.Значение = ЭлементСЗ.Значение;
						СтавкаНДСПереданаДопПараметром = Истина;					
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				КонецЕсли;
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДанныеРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
							СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
							СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					
					ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					
					НаименованиеИД = ""; ТоварКодИД = ""; АртикулИД = "";
					НаименованиеХарактеристикиИД = "";
					НаименованиеУпаковкиИД = "";
					ЕдиницаИзмеренияКод = "";
					Если РеквизитыНоменклатуры.Свойство("Наименование") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", РеквизитыНоменклатуры.Наименование);
						НаименованиеИД = РеквизитыНоменклатуры.Наименование;
					КонецЕсли;
					Если РеквизитыНоменклатуры.Свойство("ТоварКод") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("ТоварКод", РеквизитыНоменклатуры.ТоварКод);
						ТоварКодИД = РеквизитыНоменклатуры.ТоварКод;
					КонецЕсли;
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
						АртикулИД = РеквизитыНоменклатуры.Артикул;
					КонецЕсли;
					Если РеквизитыНоменклатуры.Свойство("НаименованиеХарактеристики") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("НаименованиеХарактеристики",
							РеквизитыНоменклатуры.НаименованиеХарактеристики);
						НаименованиеХарактеристикиИД = РеквизитыНоменклатуры.НаименованиеХарактеристики;
					КонецЕсли;
					
					Если РеквизитыЕдиницыИзмерения.Свойство("Наименование") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("НаименованиеУпаковки",
							РеквизитыЕдиницыИзмерения.Наименование);
						НаименованиеУпаковкиИД = РеквизитыЕдиницыИзмерения.Наименование;
					КонецЕсли;
					
					Если РеквизитыЕдиницыИзмерения.Свойство("Код") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("ЕдиницаИзмеренияКод",
							РеквизитыЕдиницыИзмерения.Наименование);
						ЕдиницаИзмеренияКод = РеквизитыЕдиницыИзмерения.Код;
					КонецЕсли;
					
					// Если пришел пустой ИД, используем вместо него наименование товара.
					// Актуально для входящих ЭД из учетных систем отличных от 1С.
					Если Не ЗначениеЗаполнено(ИдТовара) Тогда
						СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
						СопоставлениеПоУмолчанию.Наименование        = НаименованиеИД;
						СопоставлениеПоУмолчанию.Характеристика      = НаименованиеХарактеристикиИД;
						СопоставлениеПоУмолчанию.ЕдиницаИзмерения    = НаименованиеУпаковкиИД;
						СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = ЕдиницаИзмеренияКод;
						СопоставлениеПоУмолчанию.Артикул             = АртикулИД;
						СопоставлениеПоУмолчанию.КодНоменклатуры     = ТоварКодИД;
						ИдТовара = ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(СопоставлениеПоУмолчанию);
					КонецЕсли;
					
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Упаковка       = Неопределено;
					
					НоменклатураПоставщика = СопоставлениеНоменклатурыКонтрагентовСлужебный.НоменклатураКонтрагентаПоВладельцуИИдентификатору(
						ВладелецНоменклатуры, ИдТовара);
					
					НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураКонтрагентов");
					НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
																			РеквизитыНоменклатурыПоставщика, ДанныеРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						Номенклатура   = НоменклатураПоставщика.Номенклатура;
						Характеристика = НоменклатураПоставщика.Характеристика;
						Упаковка       = НоменклатураПоставщика.Упаковка;
					КонецЕсли;					
					
					Если ЗначениеЗаполнено(Характеристика) Тогда
						СписокТЧ.Добавить(Характеристика, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(Упаковка) Тогда
						СписокТЧ.Добавить(Упаковка, "Упаковка");
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока = ИдентификаторыСтрокСерии.Добавить();
				НоваяСтрока.Идентификатор  = ИдТовара;
				НоваяСтрока.Номенклатура   = Номенклатура;
				НоваяСтрока.Характеристика = Характеристика;
				
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДанныеРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			КонецЕсли;
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
	ПрочитатьСерииНоменклатуры(НовыйЭД, ИдентификаторыСтрокСерии);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТОРГ12ПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = ФорматыЭДО.ДатаИзСтроки(ДатаДок);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСчетФактуруXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетФактура;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвСчФакт.НомерСчФ);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвСчФакт.ДатаСчФ));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвСчФакт.КодОКВ);
	Если НЕ ЭД.Документ.СвСчФакт.ИспрСчФ = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузОт = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр = Неопределено Тогда
			Если НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг = Неопределено Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг);
			Иначе
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель",
				ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Имя
					+ " " + ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.ФИОИП.Отчество);
			КонецЕсли;
			Если Не ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно = Неопределено Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительКодСтраны", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр);
			Иначе
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрРФ));
			КонецЕсли
		ИначеЕсли НЕ ЭД.Документ.СвСчФакт.ГрузОт.ОнЖе = Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", НСтр("ru = 'он же'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч = Неопределено Тогда
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг = Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузополучатель", ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
			НовыйЭД,
			"Грузополучатель",
			ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Фамилия + " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Имя
				+ " " + ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.ФИОИП.Отчество);
		КонецЕсли;
		
		Если НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно = Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.АдрТекст);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательКодСтраны", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.КодСтр);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", СоставнойАдрес(ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрРФ));
		КонецЕсли
	КонецЕсли;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвСчФакт.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И СтрНайти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		Если ЭД.ВерсФорм = "5.02" Тогда
			
			ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
			
		Иначе
			Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И СтрНайти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
				ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КомиссионнаяСФ = Ложь;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		КомиссионнаяСФ = ЗаполнитьДанныеКомиссионераИзДопДанных(ДанныеРазбора, НовыйЭД, "SFAKT", Ошибка);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвСчФакт.СвПрод;
	Покупатель = ЭД.Документ.СвСчФакт.СвПокуп;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВыставленныйКомитентом", КомиссионнаяСФ);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
		Если КомиссионнаяСФ Тогда
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "ПокупательКомиссии");
		Иначе
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДанныеРазбора.ДеревоРазбора);
	
	Если НЕ ЭД.Документ.СвСчФакт.СвПРД = Неопределено И ЭД.Документ.СвСчФакт.СвПРД.Количество() > 0 Тогда
		ПлатежныеДокументы = "";
		ПервыйЭлемент = Истина;
		Для Каждого СтрокаПлатежа Из ЭД.Документ.СвСчФакт.СвПРД Цикл
			ПлатежныеДокументы = ПлатежныеДокументы + ?(ПервыйЭлемент,"",", № ") + СтрокаПлатежа.НомерПРД + " от " + СтрокаПлатежа.ДатаПРД;
			ПервыйЭлемент = Ложь;
		КонецЦикла;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежныйДокумент", ПлатежныеДокументы);
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено
		И Не ЭД.Документ.Подписант.ИП = Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	ИначеЕсли Не ЭД.Документ.Подписант.Свойства().Получить("ЮЛ") = Неопределено
		И Не ЭД.Документ.Подписант.ЮЛ = Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДС",ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНал", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДС",     СуммаНДССФПривестиКТребуемомуФормату(
		ЭД.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНДС));
	
	Для Каждого Товар Из ЭД.Документ.ТаблСчФакт.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТЧ.Добавить(Товар.НомСтр,         "НомСтр");
		СписокТЧ.Добавить(Товар.НаимТов,        "НаимТов");
		СписокТЧ.Добавить(Товар.ОКЕИ_Тов,       "ОКЕИ_Тов");
		СписокТЧ.Добавить(Товар.КолТов,         "КолТов");
		СписокТЧ.Добавить(Товар.ЦенаТов,        "ЦенаТов");
		СписокТЧ.Добавить(Товар.СтТовБезНДС,    "СтТовБезНДС");
		СписокТЧ.Добавить(Товар.СтТовУчНал,     "СтТовУчНал");
		Если ЭД.ВерсФорм = "5.01" Тогда
			СписокТЧ.Добавить(Товар.НалСт.НалСтВел, "НалСтВел");
			СписокТЧ.Добавить(Товар.НалСт.НалСтТип, "НалСтТип");
		Иначе
			СписокТЧ.Добавить(Товар.НалСт, "НалСтВел");
		КонецЕсли;
		
		СумАкциз = Товар.Акциз.СумАкциз;
		Если Не ЗначениеЗаполнено(СумАкциз) Тогда
			СумАкциз = Товар.Акциз.БезАкциз;
		КонецЕсли;
		СписокТЧ.Добавить(СумАкциз, "СумАкциз");
		
		СписокТЧ.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНал.СумНДС), "СумНДС");
		Если ЗначениеЗаполнено(Товар.ОКЕИ_Тов) Тогда
			ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(Товар.ОКЕИ_Тов));
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(Строка(ЕдИзм), "ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.ИнфПолСтр) Тогда
			// В инф.поле xml-строка Актуального формата.
			ИнфПол = Товар.ИнфПолСтр;
			Если ЭД.ВерсФорм = "5.01" Тогда
				
				ФорматыЭДО.ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
				
			Иначе
				
				ПрочитатьДопДанныеТЧ_ФНС502(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
				
			КонецЕсли;
			ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Товар.НомСтр, "Товары", Ошибка);
		КонецЕсли;
		
		Если ЭД.ВерсФорм = "5.01" Тогда
			
			Если НЕ Товар.НомерТД = Неопределено И Товар.НомерТД.Количество() > 0 Тогда
				НомераТД = "";
				Для Каждого СтрокаТД Из Товар.НомерТД Цикл
					НомераТД = НомераТД + СтрокаТД + ", ";
				КонецЦикла;
				СписокТЧ.Добавить(НомераТД, "НомерТД");
			КонецЕсли;
			
			Если НЕ Товар.КодПроисх = Неопределено И Товар.КодПроисх.Количество() > 0 Тогда
				СписокТЧ.Добавить(Товар.КодПроисх[0], "КодПроисх");
			КонецЕсли;
			
		Иначе
			НомераТД = "";
			КодПроисх = "";
			НаименованиеСтраныПроисхождения = "";
			
			ДопДанныеТаможеннойДекларации = Неопределено;
			СписокТЧДопДанныеТаможеннойДекларации = СписокТЧ.НайтиПоЗначению("ДопДанныеТаможеннойДекларации");
			Если Не СписокТЧДопДанныеТаможеннойДекларации = Неопределено Тогда 
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.УстановитьСтроку(СписокТЧДопДанныеТаможеннойДекларации.Представление);
				ДопДанныеТаможеннойДекларации = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ТаблицаЗначений"));
			КонецЕсли;
			Для Каждого СведенияТД Из Товар.СвТД Цикл
				НомераТД = НомераТД + СведенияТД.НомерТД;
				КодПроисх = КодПроисх + СведенияТД.КодПроисх;
				Если Не ДопДанныеТаможеннойДекларации = Неопределено Тогда 
					НаименованиеСтраныИзДопДанных = ДопДанныеТаможеннойДекларации.Найти(КодПроисх, "КодСтраныПроисхождения");
					Если Не НаименованиеСтраныИзДопДанных = Неопределено Тогда
						НаименованиеСтраныПроисхождения = НаименованиеСтраныПроисхождения + НаименованиеСтраныИзДопДанных.НаименованиеСтраныПроисхождения;
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
			
			СписокТЧ.Добавить(НомераТД, "НомерТД");
			СписокТЧ.Добавить(КодПроисх, "КодПроисх");
			СписокТЧ.Добавить(НаименованиеСтраныПроисхождения, "НаименованиеСтраныПроисхождения");

			Если Не СписокТЧДопДанныеТаможеннойДекларации = Неопределено Тогда
				СписокТЧ.Удалить(СписокТЧДопДанныеТаможеннойДекларации);
			КонецЕсли;
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйСчетФактуруXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвКСчФ.НомерКСчФ);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаКСчФ));
	Если ЭД.ВерсФорм = "5.02" Тогда
		ДанныеСФ = ЭД.Документ.СвКСчФ.СчФ;
		Если ДанныеСФ.Количество() > 0 Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ДанныеСФ[0].НомерСчФ);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ДанныеСФ[0].ДатаСчФ);
			ИспрСФ = ДанныеСФ[0].ИспрСчФ;
			Если ИспрСФ.Количество() > 0 Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ИспрСФ[0].НомИспрСчФ);
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ФорматыЭДО.ДатаИзСтроки(ИспрСФ[0].ДатаИспрСчФ));
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ЭД.Документ.СвКСчФ.НомерСчФ);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаСчФ));
		Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
			И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено Тогда
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
		КонецЕсли;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвКСчФ.КодОКВ);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));
	КонецЕсли;
	Если НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрСчФ = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ЭД.Документ.СвКСчФ.ИспрСчФ.НомИспрСчФ);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ФорматыЭДО.ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрСчФ.ДатаИспрСчФ));
	КонецЕсли;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвКСчФ.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И СтрНайти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		Если ЭД.ВерсФорм = "5.02" Тогда
			ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
		Иначе
			ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
		КонецЕсли;
	КонецЕсли;

	КомиссионнаяСФ = Ложь;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		КомиссионнаяСФ = ЗаполнитьДанныеКомиссионераИзДопДанных(ДанныеРазбора, НовыйЭД, "KORSFAKT", Ошибка);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Продавец = ЭД.Документ.СвКСчФ.СвПрод;
	Покупатель = ЭД.Документ.СвКСчФ.СвПокуп;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВыставленныйКомитентом", КомиссионнаяСФ);
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
		ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Продавец, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
		Если КомиссионнаяСФ Тогда
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "ПокупательКомиссии");
		Иначе
			ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДанныеРазбора.ДеревоРазбора);
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Если Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено
		И Не ЭД.Документ.Подписант.ИП = Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);
	ИначеЕсли Не ЭД.Документ.Подписант.Свойства().Получить("ЮЛ") = Неопределено
		И Не ЭД.Документ.Подписант.ЮЛ = Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантЮЛ", ЭД.Документ.Подписант.ЮЛ.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ЮЛ.ФИО.Имя + " " + ЭД.Документ.Подписант.ЮЛ.ФИО.Отчество);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННЮЛ", ЭД.Документ.Подписант.ЮЛ.ИННЮЛ);
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУвел") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУвел = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУвел", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС));
	КонецЕсли;
	
	Если НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУм") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУм = Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУм", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС));
	КонецЕсли;
	
	СуммаДокумента = 0;
	
	Для каждого Товар Из ЭД.Документ.ТаблКСчФ.СведТов Цикл
		
		СписокТЧ = Новый СписокЗначений;
		СписокТч.Добавить(Товар.НомСтр, "НомСтр");
		СписокТч.Добавить(Товар.НаимТов, "НаимТов");
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовДо") = Неопределено Тогда
			Если ЗначениеЗаполнено(Товар.ОКЕИ_ТовДо) Тогда
				СписокТч.Добавить(Товар.ОКЕИ_ТовДо, "ОКЕИ_ТовДо");
				ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(Товар.ОКЕИ_ТовДо));
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					СписокТЧ.Добавить(Строка(ЕдИзм), "ЕдиницаИзмеренияДо");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ОКЕИ_ТовПосле") = Неопределено Тогда
			Если ЗначениеЗаполнено(Товар.ОКЕИ_ТовПосле) Тогда
				СписокТч.Добавить(Товар.ОКЕИ_ТовПосле, "ОКЕИ_ТовПосле");
				ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(Товар.ОКЕИ_ТовПосле));
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					СписокТЧ.Добавить(Строка(ЕдИзм), "ЕдиницаИзмерения");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовДо, "КолТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("КолТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.КолТовПосле, "КолТовПосле");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовДо") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовДо, "ЦенаТовДо");
		КонецЕсли;
		Если НЕ Товар.Свойства().Получить("ЦенаТовПосле") = Неопределено Тогда
			СписокТч.Добавить(Товар.ЦенаТовПосле, "ЦенаТовПосле");
		КонецЕсли;
		
		Если НЕ Товар.Свойства().Получить("СтТовБезНДС") = Неопределено
			И НЕ Товар.СтТовБезНДС = Неопределено Тогда
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимДоИзм, "СтТовБезНДСДоИзм");
			СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимПослеИзм, "СтТовБезНДСПослеИзм");
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУвел") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУвел, "СтТовБезНДСУвел");
			КонецЕсли;
			Если НЕ Товар.СтТовБезНДС.Свойства().Получить("СтоимУм") = Неопределено Тогда
				СписокТЧ.Добавить(Товар.СтТовБезНДС.СтоимУм, "СтТовБезНДСУм");
			КонецЕсли;
		КонецЕсли;
		
		СписокТч.Добавить(Товар.АкцизДо.СумАкциз, "АкцизДо");
		СписокТч.Добавить(Товар.АкцизПосле.СумАкциз, "АкцизПосле");
		СписокТч.Добавить(Товар.АкцизРазн.СумУвел, "АкцизУвел");
		СписокТч.Добавить(Товар.АкцизРазн.СумУм, "АкцизУм");
		Если ЭД.ВерсФорм = "5.02" Тогда
			СписокТч.Добавить(Товар.НалСтДо, "НалСтВелДо");
			СписокТч.Добавить(Товар.НалСтПосле, "НалСтВелПосле");
			
		Иначе
			СписокТч.Добавить(Товар.НалСтДо.НалСтВел, "НалСтВелДо");
			СписокТч.Добавить(Товар.НалСтДо.НалСтТип, "НалСтТипДо");
			СписокТч.Добавить(Товар.НалСтПосле.НалСтВел, "НалСтВелПосле");
			СписокТч.Добавить(Товар.НалСтПосле.НалСтТип, "НалСтТипПосле");
			
		КонецЕсли;
		
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалДо.СумНДС), "СумНДСДо");
		СписокТч.Добавить(СуммаНДССФПривестиКТребуемомуФормату(Товар.СумНалПосле.СумНДС), "СумНДСПосле");
		СписокТч.Добавить(Товар.СумНалРазн.СумУвел, "СумНДСУвел");
		СписокТч.Добавить(Товар.СумНалРазн.СумУм, "СумНДСУм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимДоИзм, "СтТовУчНалДоИзм");
		СписокТч.Добавить(Товар.СтТовУчНал.СтоимПослеИзм, "СтТовУчНалПослеИзм");
		СуммаДокумента = СуммаДокумента
						+ ?(ЗначениеЗаполнено(Товар.СтТовУчНал.СтоимПослеИзм), Товар.СтТовУчНал.СтоимПослеИзм, 0);
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУвел") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУвел, "СтТовУчНалУвел");
		КонецЕсли;
		Если НЕ Товар.СтТовУчНал.Свойства().Получить("СтоимУм") = Неопределено Тогда
			СписокТч.Добавить(Товар.СтТовУчНал.СтоимУм, "СтТовУчНалУм");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.ИнфПолСтр) Тогда
			// В инф.поле xml-строка Актуального формата.
			ИнфПол = Товар.ИнфПолСтр;
			Если ЭД.ВерсФорм = "5.02" Тогда
				ПрочитатьДопДанныеТЧ_ФНС502(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
			Иначе
				ФорматыЭДО.ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Товар.НомСтр);
			КонецЕсли;
			ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Товар.НомСтр, "Товары", Ошибка);
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	КонецЦикла;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	
КонецПроцедуры

Функция ЗаполнитьДанныеКомиссионераИзДопДанных(ДеревоРазбора, НовыйЭД, ПространствоИменСхемы, Ошибка)
	
	КомиссионнаяСФ = Ложь;
	СтрКомиссионер = НовыйЭД.Строки.Найти("ДанныеКомиссионера", "Реквизит", Истина);
	КомиссионерНаименование = НовыйЭД.Строки.Найти("КомиссионерНаименование", "Реквизит", Истина);
	КомиссионерДобавлен = Ложь;
	Если ЗначениеЗаполнено(СтрКомиссионер) Тогда
		КомиссионнаяСФ = Истина;
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
			ОбъектXML = Новый ЧтениеXML;
			Попытка
				СтрокаXML = "<СвПродПокТип xmlns=""" + ПространствоИменСхемы + """> " + СтрКомиссионер.ЗначениеРеквизита
					+ " <Адрес> <АдрРФ КодРегион=""00""/> </Адрес> </СвПродПокТип>";
				ОбъектXML.УстановитьСтроку(СтрокаXML);
				Комиссионер = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ФорматыЭДО.ПолучитьТипЗначенияCML("СвПродПокТип", ПространствоИменСхемы));
				ОбъектXML.Закрыть();
				ПрочитатьДанныеКонтрагента(Комиссионер, Комиссионер, ДеревоРазбора, НовыйЭД, Ошибка, "Комиссионер");
				КомиссионерДобавлен = Истина;
			Исключение
				Ошибка = Истина;
				ТекстСообщения = НСтр("ru = 'Не удалось прочитать данные Комиссионера
					|при извлечении данных ЭД (корр)счет-фактура.'");
				ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД'"),
																							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																							ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КомиссионерНаименование) Тогда
		// Из прикладных решений с БЭД версии 1.1.15.3 и меньше могут приходить данные о комиссионере
		// в виде набора данных КомиссионерНаименование, КомиссионерИНН, КомиссионерКПП.
		КомиссионнаяСФ = Истина;
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий И НЕ КомиссионерДобавлен Тогда
			РеквизитыКонтрагента = Новый Структура;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", КомиссионерНаименование.ЗначениеРеквизита);
			СтрокаИНН = НовыйЭД.Строки.Найти("КомиссионерИНН", "Реквизит", Истина);
			РеквизитыКонтрагента.Вставить("ИНН", ?(ЗначениеЗаполнено(СтрокаИНН), СтрокаИНН.ЗначениеРеквизита, ""));
			СтрокаКПП = НовыйЭД.Строки.Найти("КомиссионерКПП", "Реквизит", Истина);
			РеквизитыКонтрагента.Вставить("КПП", ?(ЗначениеЗаполнено(СтрокаКПП), СтрокаКПП.ЗначениеРеквизита, ""));
			ИдКонтрагента = РеквизитыКонтрагента.ИНН + ?(ЗначениеЗаполнено(РеквизитыКонтрагента.КПП), РеквизитыКонтрагента.КПП, "");
			ВидКонтрагента = "Организации";
			ИмяРеквизита = "Организация";
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
			Контрагент = ЭлектронноеВзаимодействие.НайтиСсылку(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
				Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КомиссионнаяСФ;
	
КонецФункции

Процедура ПрочитатьКорректировочныйДокументXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	НовыйЭД.ОписаниеОбъекта = "Корректировочный";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);
	ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ФорматыЭДО.ДатаИзСтроки(ДатаДок));
	
	СуммаДокумента = 0;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс;
	ИначеЕсли ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено
		И ЗначениеЗаполнено(ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск) Тогда
		
		СуммаДокумента = ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск;
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	
	Грузоотправитель = Неопределено;
	ДопПараметрыГрузоотправителя = Новый Структура;
	Поставщик = ЭД.Документ.СвТНО.Поставщик;
	Если ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено Тогда
		ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);
		ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);
		Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;
		Если Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено Тогда
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);
			КонецЕсли;
			Если НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено Тогда
				ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поставщик <> Неопределено Тогда
		Грузоотправитель = Поставщик;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено Тогда
			ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);
			ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	Если Грузоотправитель <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Грузоотправитель");
		Если ДопПараметрыГрузоотправителя.Количество() > 0 Тогда
			ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);
			Если ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита) Тогда
				СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);
				Если СтрокаГрузоотправителя <> Неопределено Тогда
					Для Каждого ДопПараметр Из ДопПараметрыГрузоотправителя Цикл
						ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаГрузоотправителя, ДопПараметр.Ключ, ДопПараметр.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено Тогда
		ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Грузополучатель");
	КонецЕсли;
	
	// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
	// но один из этих элементов обязательно должен быть заполнен
	// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
	Если Поставщик = Неопределено Тогда
		Поставщик = Грузоотправитель;
	КонецЕсли;
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
	КонецЕсли;
	
	Плательщик = ЭД.Документ.СвТНО.Плательщик;
	Если Плательщик <> Неопределено Тогда
		Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
		ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
			ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
		КонецЕсли;
	КонецЕсли;
	
	Организация = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
	Структура = Новый Структура("Организация", Организация);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	ИнфПол = ЭД.Документ.СвТНО.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено И СтрНайти(ИнфПол.ТекстИнф, "xml") = 0 Тогда
		ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
		
		СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);
		Если СтрокаВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			КодВалюты = СтрокаВалюты.ЗначениеРеквизита;
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты,
				Валюта, ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;		
	
	КонецЕсли;
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = ВидОперацииЭДПоСтроке(ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.Основание <> Неопределено Тогда
		ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;
		Если ЗначениеЗаполнено(ДатаПоДаннымКлиента) Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));
		КонецЕсли;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);
	КонецЕсли;
	
	Если ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
	КонецЕсли;
	Если ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);
		ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", ФорматыЭДО.ДатаИзСтроки(ДатаДок));
		КонецЕсли;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);
	КонецЕсли;
	
	НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			
			СписокТЧ.Добавить(Элемент.НомТов,      "Номер");
			СписокТЧ.Добавить(Элемент.НаимТов,     "Наименование");
			СписокТЧ.Добавить(Элемент.ХарактерТов, "НаименованиеХарактеристики");
			СписокТЧ.Добавить(Элемент.КодТов,      "ТоварКод");
			СписокТЧ.Добавить(Элемент.СортТов,     "Сорт");
			СписокТЧ.Добавить(Элемент.АртикулТов,  "Артикул");
			СписокТЧ.Добавить(Элемент.НаимЕдИзм,   "ЕдиницаИзмеренияНаименование");
			СписокТЧ.Добавить(Элемент.ОКЕИ_Тов,    "ЕдиницаИзмеренияКод");
	
			СписокТЧ.Добавить(Элемент.НеттоДоКорректировки, "КоличествоДоКорректировки");
			СписокТЧ.Добавить(Элемент.Нетто,     "Количество");
			СписокТЧ.Добавить(Элемент.КолМест,   "Мест");
			СписокТЧ.Добавить(Элемент.ВидУпак,   "Упаковка");
			СписокТЧ.Добавить(Элемент.Место,     "КоличествоВОдномМесте");
			СписокТЧ.Добавить(Элемент.НеттоДоКорректировки, "МассаНеттоДоКорректировки");
			СписокТЧ.Добавить(Элемент.Нетто,     "МассаНетто");
			СписокТЧ.Добавить(Элемент.Брутто,    "МассаБрутто");
			СписокТЧ.Добавить(Элемент.ЦенаДоКорректировки,      "ЦенаДоКорректировки");
			СписокТЧ.Добавить(Элемент.Цена,      "Цена");
			СписокТЧ.Добавить(Элемент.СумБезНДСДоКорректировки, "СуммаДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумБезНДС, "Сумма");
			СписокТЧ.Добавить(Элемент.СумНДСДоКорректировки,    "СуммаНДСДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумНДС,    "СуммаНДС");
			СписокТЧ.Добавить(Элемент.СумУчНДСДоКорректировки,  "СуммаСНДСДоКорректировки");
			СписокТЧ.Добавить(Элемент.СумУчНДС,  "СуммаСНДС");
			
			// Удалить первую ветку - нужна лишь, чтобы читать старые документы.
			Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) И СтрНайти(Элемент.ИнфПолСтр, "xml") > 0 Тогда
				
				СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				
				// В инф.поле xml-строка неактуального формата.
				ОбъектXML = Новый ЧтениеXML;
				Попытка
					ОбъектXML.УстановитьСтроку(Элемент.ИнфПолСтр);
					ТоварXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
					РазобратьСтрокуТЧCML(ТоварXDTO, СписокТЧ, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Элемент.НомТов);
				Исключение
					ВидОперации = НСтр("ru = 'Чтение неактуального формата Корректировочный документ.'");
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
				КонецПопытки;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ИнфПолСтр) Тогда
					// В инф.поле xml-строка Актуального формата.
					ИнфПол = Элемент.ИнфПолСтр;
					ФорматыЭДО.ПрочитатьИнфПол(ИнфПол, ДеревоДопДанных, "Товары", Элемент.НомТов);
					ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, Элемент.НомТов, "Товары", Ошибка);
				КонецЕсли;
				РеквизитыНоменклатуры = Новый Структура;
				РеквизитыЕдиницыИзмерения = Новый Структура;
				ИдТовара = "";
				СтавкаНДСПереданаДопПараметром = Ложь;
				ДокументОснованиеНайден = Ложь;
				Для Каждого ЭлементСЗ Из СписокТЧ Цикл
					
					// Номенклатура.
					Если ЭлементСЗ.Представление = "Наименование" Тогда
						РеквизитыНоменклатуры.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Характеристика" Тогда
						РеквизитыНоменклатуры.Вставить("Характеристика", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "Артикул" Тогда
						РеквизитыНоменклатуры.Вставить("Артикул", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияКод" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Код", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ЕдиницаИзмеренияНаименование" Тогда
						РеквизитыЕдиницыИзмерения.Вставить("Наименование", ЭлементСЗ.Значение);
					ИначеЕсли ЭлементСЗ.Представление = "ИД" Тогда
						ИдТовара = ЭлементСЗ.Значение;
						
					// Проверка наличия ставки НДС в доп. параметрах.
					ИначеЕсли ЭлементСЗ.Представление = "СтавкаНДС" Тогда
						СтавкаНДСПереданаДопПараметром = Истина;
					
					КонецЕсли;
				КонецЦикла;
				// Ставка НДС может прийти в доп. параметрах.
				Если НЕ СтавкаНДСПереданаДопПараметром Тогда
					СписокТЧ.Добавить(Элемент.СтавкаНДС, "СтавкаНДС");
				КонецЕсли;
				
				НаимТовара = "";
				РеквизитыНоменклатуры.Свойство("Наименование", НаимТовара);
				
				КодЕдИзм = "";
				Если РеквизитыЕдиницыИзмерения.Свойство("Код", КодЕдИзм) Тогда
					НаименованиеЕдИзм = "";
					РеквизитыЕдиницыИзмерения.Свойство("Наименование", НаименованиеЕдИзм);
					ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(КодЕдИзм),
						РеквизитыЕдиницыИзмерения);
					НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(КодЕдИзм),
						НаименованиеЕдИзм, ЕдИзм, РеквизитыЕдиницыИзмерения, ДанныеРазбора, Ошибка);
					Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
				// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
				Если ИдентификацияПоНоменклатуреКомпании Тогда
					СтруктураИд = РазобратьИДТовара(ИдТовара);
					Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
					Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
						ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
						Если СписокТЧ.НайтиПоЗначению(ХарактеристикаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
						УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
						Если СписокТЧ.НайтиПоЗначению(УпаковкаНоменклатуры) <> Неопределено Тогда
							СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Номенклатура поставщиков.
					РеквизитыНоменклатурыПоставщика = Новый Структура;
					ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
					ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
					
					РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
					РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
					Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаимТовара) Тогда
						РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
					КонецЕсли;
					
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Упаковка       = Неопределено;
					
					НоменклатураПоставщика = СопоставлениеНоменклатурыКонтрагентовСлужебный.НоменклатураКонтрагентаПоВладельцуИИдентификатору(
						ВладелецНоменклатуры, ИдТовара);
						
					НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураКонтрагентов");
					НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
																			РеквизитыНоменклатурыПоставщика, ДанныеРазбора, Ошибка);
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
					
					Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
						РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
						Номенклатура   = НоменклатураПоставщика.Номенклатура;
						Характеристика = НоменклатураПоставщика.Характеристика;
						Упаковка       = НоменклатураПоставщика.Упаковка;
					КонецЕсли;										
					
					Если ЗначениеЗаполнено(Характеристика) Тогда
						СписокТЧ.Добавить(Характеристика, "Характеристика");
					КонецЕсли;
					Если ЗначениеЗаполнено(Упаковка) Тогда
						СписокТЧ.Добавить(Упаковка, "Упаковка");
					КонецЕсли;
					
				КонецЕсли;
				
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
					РеквизитыНоменклатуры, ДанныеРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			КонецЕсли;
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКорректировочныйДокументПолучательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	ИнфПол = ЭД.Документ.СвТНП.ИнфПол;
	Если ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено Тогда
		ФорматыЭДО.ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.ИдФайл);
	Если ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено Тогда
		ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;
		ДатаПолучения = ФорматыЭДО.ДатаИзСтроки(ДатаДок);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);
		Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);
			ДоверенностьВыдана = "";
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено Тогда
				ВспомогательнаяСтруктура = Новый Структура;
				ВспомогательнаяСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);
				ВспомогательнаяСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);
				Если ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено Тогда
					ФИО = ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО;
					ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
					ВспомогательнаяСтруктура.Вставить("ФИО", ФамилияИнициалы);
				КонецЕсли;
				Для Каждого Элемент Из ВспомогательнаяСтруктура Цикл
					Если ЗначениеЗаполнено(Элемент.Значение) Тогда
						ДоверенностьВыдана = ДоверенностьВыдана + ?(ЗначениеЗаполнено(ДоверенностьВыдана), ", ", "") + СокрЛП(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ФамилияИнициалы);
		КонецЕсли;
		Если ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);
			ФИО = ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО;
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ФамилияИнициалы);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПередачаТоваровПродавецXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	ВерсПрог = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ВерсПрог");
	ВерсПрог1С = "1С:Предприятие 8";
	
	ДеревоЭД = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ТОРГ12_Продавец");
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	
	ИдентификаторДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл");
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ИдентификаторДокумента);
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	НомерТоварнойНакладной = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.НомДокПТ");
	ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерТоварнойНакладной", НомерТоварнойНакладной);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерТоварнойНакладной);
	
	ДатаТоварнойНакладной = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.ИдентДок.ДатаДокПТ",, "Дата");
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаТоварнойНакладной", ДатаТоварнойНакладной);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаТоварнойНакладной);
	
	ВставитьЗначениеВДерево(ДеревоЭД, "НаименованиеДокументаОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.НаимДок.НаимДокОпр"));
	
	Исправление = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.ИспрДокПТ");
	Если Исправление <> Неопределено Тогда
		
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаИсправления",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Исправление, "ДатаИспрДокПТ",, "Дата"));
		
		ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерИсправления",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Исправление, "НомИспрДокПТ"));
			
	КонецЕсли;
	
	ВидОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ВидОперации");
	Если ВидОперации <> Неопределено Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ВидОперации", ВидОперацииЭДПоСтроке(ВидОперации));
	КонецЕсли;
		
	ЗаполнитьРеквизитДерева(ДеревоЭД, "НаименованиеСоставителяДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимЭконСубСост"));
	
	КодВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм.КодОКВ");
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаКод", КодВалюты);
	
	НаименованиеВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.ДенИзм.НаимОКВ");
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаНаименование", НаименованиеВалюты);
	
	Основания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Основание",,, Истина);
	
	Если Основания <> Неопределено Тогда
		ОснованияДокумента = ШаблонОснованияДокумента();
		Для Каждого СтрокаОснования Из Основания Цикл
			
			Если СтрокаОснования.НаимОсн = "-" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ОснованияДокумента.Добавить();
			
			НоваяСтрока.ДокОснованиеНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "НаимОсн");
			НоваяСтрока.ДокОснованиеНомер        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "НомОсн");
			
			ДатаОсн = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "ДатаОсн");
			Если ДатаОсн <> Неопределено Тогда
				ДокОснованиеДата = ДатаФНС(ДатаОсн);
				НоваяСтрока.ДокОснованиеДата = ДокОснованиеДата;
			КонецЕсли;
			
			НоваяСтрока.ДокОснованиеДопСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "ДопСвОсн");
			
		КонецЦикла;
	КонецЕсли;
	
	Если ОснованияДокумента.Количество() Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ОснованияДокумента, "Основание");
	КонецЕсли;
	
	Грузоотправитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузОтпр");
	ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Грузоотправитель, "Грузоотправитель");
	
	Грузополучатель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ГрузПолуч");
	ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Грузополучатель, "Грузополучатель");
	
	Продавец = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Продавец");
	ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Продавец, "Поставщик");
	
	Покупатель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.Покупатель");
	ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Покупатель, "Плательщик");
	
	ИдГосКонтракта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СвДокПТПр.СодФХЖ1.ИдГосКон");
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ИдГосКонтракта", ИдГосКонтракта);
	
	// Сведения о организации.
	ВидУчастника = "Поставщик";
	ВидКонтрагента = "Плательщик";
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ВидУчастника = "Плательщик";
		ВидКонтрагента = "Поставщик";
	КонецЕсли;
	РеквизитыУчастникаСделки = ДанныеУчастникаСделки(ДеревоЭД, ВидУчастника);
		
	Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации",
		РеквизитыУчастникаСделки.ИНН, РеквизитыУчастникаСделки.КПП, ДатаТоварнойНакладной);
	
	// Поиск по ИНН, КПП ссылки на контрагента.
	РеквизитыКонтрагента = ДанныеУчастникаСделки(ДеревоЭД, ВидКонтрагента);
	РеквизитыКонтрагента.Вставить("ДатаСведений", ДатаТоварнойНакладной);
	
	// Добавление контрагента в дерево разбора.
	// Используется для поиска контрагента в форме однократной сделки.
	ДобавитьКонтрагентаВДеревоРазбора(ДанныеРазбора, НовыйЭД, ВидКонтрагента, РеквизитыКонтрагента, Ошибка);
	
	СведенияОПередаче = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3");
	
	Если СведенияОПередаче <> Неопределено Тогда
		ДатаДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПередаче, "ДатаОтпуск",, "Дата");
		Если ЗначениеЗаполнено(ДатаДок) Тогда
			ЗаполнитьРеквизитДерева(ДеревоЭД, "СведенияПоОтпускуГруза.ДатаОтпуска", ДатаДок);
		КонецЕсли;
	КонецЕсли;
	
	ЛицоПередавшееГруз = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.СвЛицОтпГруз");
	Если ЛицоПередавшееГруз <> Неопределено Тогда
		ЗаполнитьДанныеЛицаПередавшегоГруз(ДеревоЭД, ЛицоПередавшееГруз);
	КонецЕсли;
	
	Накладные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.ТранНакл",,, Истина);
	Если Накладные <> Неопределено Тогда
		
		ТранспортнаяНакладная = ШаблонТранспортнаяНакладная();
		
		Для Каждого СтрокаНакладная Из Накладные Цикл
			НоваяСтрока = ТранспортнаяНакладная.Добавить();
			НоваяСтрока.ТранспортнаяНакладнаяНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаНакладная, "НомТранНакл");
			НоваяСтрока.ТранспортнаяНакладнаяДата  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаНакладная, "ДатаТранНакл");
		КонецЦикла;
		
		Если ТранспортнаяНакладная.Количество() Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТранспортнаяНакладная, "ТранспортнаяНакладная");
		КонецЕсли;
		
	КонецЕсли;
	
	// Чтение дополнительных данных.
	ИнфПол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПередаче, "ИнфПолФХЖ3");
	ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
	ПоместитьТабличнуюЧастьВШапкуДокумента(ДеревоЭД, ДеревоДопДанных, "Серии");
	
	ДокументБезНДС = Истина;
	
	// Чтение табличной части документа.
	НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СодФХЖ2.СвТов",,, Истина);
	Если НаборДанных <> Неопределено Тогда
		
		ТаблицаТоваров = ШаблонТаблицыПередачаТоваров();
		
		Для Каждого Элемент Из НаборДанных Цикл
				
			НоваяСтрока = ТаблицаТоваров.Добавить();
			
			НаименованиеНоменклатуры = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НаимТов",, "Строка");
			НоваяСтрока.НаименованиеНоменклатуры = НаименованиеНоменклатуры;
			
			НаименованиеХарактеристики = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ХарактерТов",, "Строка");
			НоваяСтрока.НаименованиеХарактеристики = НаименованиеХарактеристики;
			
			НоваяСтрока.Сорт                         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СортТов",, "Строка");
			НоваяСтрока.Артикул                      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "АртикулТов",, "Строка");
			НоваяСтрока.КодТовара                    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КодТов",, "Строка");
			НоваяСтрока.ЕдиницаИзмеренияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НаимЕдИзм",, "Строка");
			НоваяСтрока.БазоваяЕдиницаКод            = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ОКЕИ_Тов");
			НоваяСтрока.КодТовара                    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КодТов",, "Строка");
			НоваяСтрока.МассаБрутто                  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Брутто",,        "Число");
			НоваяСтрока.МассаНетто                   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НеттоПередано",, "Число");
			НоваяСтрока.КоличествоВОдномМесте        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Место", ,        "Число");
			
			КоличествоМест = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КолМест",, "Число");
			Если Не ЗначениеЗаполнено(КоличествоМест) Тогда
				КоличествоМест = НоваяСтрока.МассаНетто;
			КонецЕсли;
			НоваяСтрока.КоличествоМест = КоличествоМест;
			
			НоваяСтрока.Цена        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Цена",,     "Число");
			НоваяСтрока.СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СтБезНДС",, "Число");
			НоваяСтрока.СуммаСНДС   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СтУчНДС",,  "Число");
			
			ПредставлениеСтавкиНДС  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НалСт",, "Строка");
			НоваяСтрока.СтавкаНДС   = ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(ПредставлениеСтавкиНДС);
			
			Если ПредставлениеСтавкиНДС = "без НДС" Тогда
				НоваяСтрока.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СумНДС",, "Число", Ложь, Истина);
			Иначе
				НоваяСтрока.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СумНДС",, "Число");
				ДокументБезНДС = Ложь;
			КонецЕсли;
			
			ИдентификаторТовара = "";
			
			ИнфПолФХЖ2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИнфПолФХЖ2");
			Если ИнфПолФХЖ2 <> Неопределено Тогда
				
				ИдентификаторыСтрокСерии = ИдентификаторыСерийНоменклатуры();
				
				ПрочитатьДопДанныеТЧ_ФНС502(ИнфПолФХЖ2, ДеревоДопДанных, "Товары", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомТов"));
				
				ДопРеквизитыСтрокиТч = Новый СписокЗначений;
				ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, ДопРеквизитыСтрокиТч, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомТов"), "Товары", Ошибка);
				
				ДопДанные = Новый ТаблицаЗначений;
				ДопДанные.Колонки.Добавить("Идентификатор");
				ДопДанные.Колонки.Добавить("Значение");

				Для Каждого ЭлементСпискаДопДанные Из ДопРеквизитыСтрокиТч Цикл
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("Ид")
						И ВерсПрог = ВерсПрог1С Тогда
						ИдТовара = ЭлементСпискаДопДанные.Значение;
						ИдентификаторТовара = ИдТовара;
					КонецЕсли;
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("НомерСерии") Тогда
						НоваяСтрока.НомерСерии = ЭлементСпискаДопДанные.Значение;
					КонецЕсли;
					
					Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("СрокГодностиСерии") Тогда
						НоваяСтрока.СрокГодностиСерии = ЭлементСпискаДопДанные.Значение;
					КонецЕсли;					
						
					СтрокаДопДанных = ДопДанные.Добавить();
					СтрокаДопДанных.Идентификатор = ЭлементСпискаДопДанные.Представление;
					СтрокаДопДанных.Значение = ЭлементСпискаДопДанные.Значение;

				КонецЦикла;
				
				Если ДопДанные.Количество()> 0 Тогда
					НоваяСтрока.ДопДанныеПодписанные = ДопДанные;
				КонецЕсли;
				
				ДопРеквизитыСтрокиТчНеПодписанные = Новый СписокЗначений;
				ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, ДопРеквизитыСтрокиТчНеПодписанные, Элемент.НомТов, "Товары", Ошибка, Ложь);
				
				ДопДанныеНеПодписанные = Новый Структура;
				Для Каждого ЭлементСпискаНеПодписанные Из ДопРеквизитыСтрокиТчНеПодписанные Цикл
					ДопДанныеНеПодписанные.Вставить(ЭлементСпискаНеПодписанные.Представление, ЭлементСпискаНеПодписанные.Значение);
				КонецЦикла;
				
				Если ДопДанныеНеПодписанные.Количество()> 0 Тогда
					НоваяСтрока.ДопДанныеНеПодписанные = ДопДанныеНеПодписанные;
				КонецЕсли;
				
				НоваяСтрокаСерии = ИдентификаторыСтрокСерии.Добавить();
				НоваяСтрокаСерии.Идентификатор  = ИдТовара;
				НоваяСтрокаСерии.Номенклатура   = НаименованиеНоменклатуры;
				НоваяСтрокаСерии.Характеристика = НаименованиеХарактеристики;
				
			КонецЕсли;
			
			СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
			СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
			СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.НаименованиеНоменклатуры;
			СопоставлениеПоУмолчанию.Характеристика = НоваяСтрока.НаименованиеХарактеристики;
			СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмеренияНаименование;
			СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.БазоваяЕдиницаКод;
			СопоставлениеПоУмолчанию.Артикул = НоваяСтрока.Артикул;
			СопоставлениеПоУмолчанию.КодНоменклатуры = НоваяСтрока.КодТовара;
			
			НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
				НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаТоваров, "ТаблицаТоваров");
		
	КонецЕсли;
	
	СуммаСНДС = 0;
	// Чтение итогов документа
	Всего = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СодФХЖ2.Всего");
	Если Всего <> Неопределено Тогда
		
		Итоги = Всего;
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(Итоги, "БруттоВс") Тогда
			МассаБрутто = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Итоги, "БруттоВс",, "Число");
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.МассаБрутто", МассаБрутто);
		КонецЕсли;
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(Итоги, "НеттоВс") Тогда
			МассаНетто = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Итоги, "НеттоВс", , "Число");
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.МассаНетто", МассаНетто);
		КонецЕсли;
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(Итоги, "СтБезНДСВс") Тогда
			СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Итоги, "СтБезНДСВс",, "Число");
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаБезНДС", СуммаБезНДС, Истина);
		КонецЕсли;
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(Итоги, "СумНДСВс") Тогда
			СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СодФХЖ2.Всего.СумНДСВс",, "Число", Ложь, ДокументБезНДС);
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаНДС", СуммаНДС, Истина);
		КонецЕсли;
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(Итоги, "СтУчНДСВс") Тогда
			СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПТПрКроме.СодФХЖ2.Всего.СтУчНДСВс",, "Число");
			ЗаполнитьРеквизитДерева(ДеревоЭД, "ВсегоПоНакладной.СуммаСНДС", СуммаСНДС, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаДокумента = СуммаСНДС;
	Если СуммаДокумента = 0 Тогда
		СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
		Если СуммаДокумента = 0 Тогда
			СуммаДокумента = ТаблицаТоваров.Итог("СуммаБезНДС")+ ТаблицаТоваров.Итог("СуммаНДС");
		КонецЕсли;
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", СуммаДокумента);
	
	ПрочитатьПодписанта(НовыйЭД, ЭД.Документ);
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ПоместитьДопДанныеВДеревоЭД(ДеревоЭД, ДеревоДопДанных);
	
	НовыйЭД.ЗначениеРеквизита = ДеревоЭД;
	НовыйЭД.ОписаниеОбъекта = "ПередачаТоваров";
	
КонецПроцедуры

Процедура ПрочитатьИзвещениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ИзвещениеОПолучении;
	
	Попытка

		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",   
			?(ЭД.ВерсФорм = "1.03", 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвИзвПолуч.СведПолФайл.ИмяПолФайла"),
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла")));
			
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
			ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок")));
		
		ИдентификаторОтправителя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок.ИдУчастЭДО");
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок.ОперЭДО.ИдОперЭДО") <> Неопределено Тогда
			ИдентификаторОтправителя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок.ОперЭДО.ИдОперЭДО");
		КонецЕсли;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
			ИдентификаторОтправителя);
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",
			ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.УчастЭДО")));
			
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.УчастЭДО.ИдУчастЭДО"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвИзвПолуч.ДатаПол"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвИзвПолуч.ВремяПол"));


	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла, возможно несоответствие формату:
					|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭД.ИдФайл);
				
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
				
	КонецПопытки;

	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));	 
			
КонецПроцедуры

Процедура ПрочитатьУточнениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
	
	Попытка

		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",  
			?(ЭД.ВерсФорм = "1.03", 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.СведПолФайл.ИмяПолФайла"),
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.СведПолФайл.ИмяПостФайла")));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
			ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок")));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",
			ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.УчастЭДО")));
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.ДатаВремяПол") <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.ДатаВремяПол",, "Дата"));
		Иначе
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.ДатаПол"));
				
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.ВремяПол"));
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвУведУточ.ТекстУведУточ"));
	
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла, возможно несоответствие формату:
					|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭД.ИдФайл);
				
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
				
	КонецПопытки;

	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
			
КонецПроцедуры

Процедура ПрочитатьПредложениеОбАннулированииXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПредАн.СведАнФайл.ИмяАнФайла"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",
		ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.УчастЭДО")));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
		ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НапрПредАн")));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПредАн.ТекстПредАн"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.УчастЭДО.ИдУчастЭДО"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НапрПредАн.ИдУчастЭДО"));

	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
КонецПроцедуры

Процедура ПрочитатьПодтверждениеXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ИмяПостФайла"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
		ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвОтпр")));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",
		ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПолДок")));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ДатаДок"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ВремяДок"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.КНД"));
	
	Если ЭД.Документ.КНД = "1167002" Тогда
		ПараметрЗаголовка = "получения";
		ОтправленПолучен = "получен";
	Иначе
		ПараметрЗаголовка = "отправки";
		ОтправленПолучен = "отправлен";
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО",
		""""
		+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.НаимОрг",, "Строка")
		+ """ (ИНН "
		+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.ИННЮЛ",, "Строка")
		+ ", код "
		+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.ИдОперЭДО",, "Строка")
		+ ")");
		
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
КонецПроцедуры

Процедура ПрочитатьПодтверждениеДатыПолученияXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО;
	
	Попытка
		Если ЭД.ВерсФорм = "1.03" Тогда    
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.СведПолФайл.ИмяПолФайла"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
				ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвОтпрДок")));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвОтпрДок.ИдУчастЭДО"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель", 
				ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПолДок")));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя", 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПолДок.ИдУчастЭДО"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ДатаПол"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ВремяПол")); 
				
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
				ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок")));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОтпрДок.ИдУчастЭДО"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель", 
				ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПолДок")));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя", 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПолДок.ИдУчастЭДО"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ДатаОтпр"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ВремяОтпр"));
			
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.КНД"));
			
		Если ЭД.Документ.КНД = "1115112" Тогда
			ПараметрЗаголовка = "получения";
			ОтправленПолучен = "получен";
		Иначе
			ПараметрЗаголовка = "отправки";
			ОтправленПолучен = "отправлен";
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО",
			""""
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.НаимОрг",, "Строка")
			+ """ (ИНН "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.ИННЮЛ",, "Строка")
			+ ", код "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.ИдОперЭДО",, "Строка")
			+ ")");
			

	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла, возможно несоответствие формату:
					|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭД.ИдФайл);
				
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
				
	КонецПопытки;

   	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));

КонецПроцедуры

Процедура ПрочитатьПодтверждениеДатыОтправкиXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПодтверждениеОператораЭДО;
	Попытка
			
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",
			?(ЭД.ВерсФорм = "1.03", 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.СведОтпрФайл.ИмяОтпрФайла"),
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла")));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",
			ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвОтпрДок")));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвОтпрДок.ИдУчастЭДО"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",
			ПолучитьДанныеУчастникаОбменаЭД(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПолДок")));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПолДок.ИдУчастЭДО"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ДатаОтпр"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведПодтв.ВремяОтпр"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, ".Документ.КНД"));
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "отправки");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен", "отправлен");
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО",
			""""
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.НаимОрг",, "Строка")
			+ """ (ИНН "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.ИННЮЛ",, "Строка")
			+ ", код "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОперЭДО.ИдОперЭДО",, "Строка")
			+ ")");
			
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при чтении данных из файла, возможно несоответствие формату:
					|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭД.ИдФайл);
				
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеОшибки);
				
	КонецПопытки;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));

	
КонецПроцедуры

Процедура ПрочитатьПередачаТоваровПокупательXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ4.ГрузПолучил") <> Неопределено Тогда
		
		ДатаДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ4.ГрузПолучил.ДатаПолуч",, "Дата");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаДок);
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭД.Документ.СодФХЖ4.ГрузПолучил, "СвЛицПолГруз") Тогда
			
			ЛицоГрузополучатель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз");
			Если ЛицоГрузополучатель <> Неопределено Тогда
				
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоГрузополучатель, "РабОргПок.Должность"));
					
				ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоГрузополучатель, "РабОргПок.ФИО");
				ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия",, "Строка") + " "
						+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя",, "Строка") + " "
						+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество",, "Строка"));
						
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ФамилияИнициалы);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Подписант = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант");
	
	Если Подписант <> Неопределено Тогда
		
		Если ТипЗнч(Подписант) = Тип("СписокXDTO") Тогда
			ИндексПодписанта = ЭД.Документ.Подписант.Количество() - 1;
			Подписант = ЭД.Документ.Подписант[ИндексПодписанта];
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФЛ") <> Неопределено Тогда
			
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФЛ.ФИО.Фамилия" ,, "Строка"));
			ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФЛ.ФИО.Имя"     ,, "Строка"));
			ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФЛ.ФИО.Отчество",, "Строка"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО",
				ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", "");
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИП") <> Неопределено Тогда
			
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИП.ФИО.Фамилия" ,, "Строка"));
			ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИП.ФИО.Имя"     ,, "Строка"));
			ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИП.ФИО.Отчество",, "Строка"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО",
				ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", НСтр("ru = 'ИП'"));
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ЮЛ") <> Неопределено Тогда
			
			ФИО = Новый Структура;
			ФИО.Вставить("Фамилия",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ЮЛ.ФИО.Фамилия" ,, "Строка"));
			ФИО.Вставить("Имя",      РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ЮЛ.ФИО.Имя"     ,, "Строка"));
			ФИО.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ЮЛ.ФИО.Отчество",, "Строка"));
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО",
				ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность",Подписант.ЮЛ.Должн);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПередачаРаботИсполнительXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	ВерсПрог = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ВерсПрог");
	ВерсПрог1С = "1С:Предприятие 8";
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИДФайл"));
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	ИнфПол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.ИнфПолФХЖ2");
	ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, "Шапка");
	
	ДеревоЭД = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.Акт501_Исполнитель");
	
	НомерАкта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.ИдентДок.НомДокПРУ");
	ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерАкта", НомерАкта);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", НомерАкта);
	
	ДатаАкта = ФорматыЭДО.ДатаИзСтроки(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.ИдентДок.ДатаДокПРУ"));
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаАкта", ДатаАкта);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаАкта);
	
	ВставитьЗначениеВДерево(ДеревоЭД, "НаименованиеДокументаОтправителя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.НаимДок.НаимДокОпр"));
	
	Исполнитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.Исполнитель");
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Исполнитель, "Исполнитель");
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Исполнитель, "Заказчик");
		
	КонецЕсли;
	
	Заказчик = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.Заказчик");
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Заказчик, "Заказчик");
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоЭД, Заказчик, "Исполнитель");
		
	КонецЕсли;
	
	ВидУчастника = "Заказчик";
	ВидКонтрагента = "Исполнитель";
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		ВидУчастника = "Исполнитель";
		ВидКонтрагента = "Заказчик";
	КонецЕсли;
	
	РеквизитыУчастникаСделки = ДанныеУчастникаСделки(ДеревоЭД, ВидУчастника);
	
	Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации",
		РеквизитыУчастникаСделки.ИНН, РеквизитыУчастникаСделки.КПП, ДатаАкта);
		
	Структура = Новый Структура("Организация", Организация);
	
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.ДенИзм.КодОКВ"));
	
	ЗаполнитьРеквизитДерева(ДеревоЭД, "ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.ДенИзм.НаимОКВ"));
	
	Основания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.Основание");
	ОснованияДокумента = ШаблонОснованияДокумента();
	
	Если ТипЗнч(Основания) = Тип("ОбъектXDTO") Тогда
		
		НоваяСтрока = ОснованияДокумента.Добавить();
		НоваяСтрока.ДокОснованиеНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основания, "НаимОсн");
		НоваяСтрока.ДокОснованиеНомер        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основания, "НомОсн");
		ДатаОсн = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основания, "ДатаОсн");
		Если ЗначениеЗаполнено(ДатаОсн) Тогда
			НоваяСтрока.ДокОснованиеДата = ДатаФНС(ДатаОсн);
		КонецЕсли;
		НоваяСтрока.ДокОснованиеДопСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Основания, "ДопСвОсн");
		
	Иначе
		
		Для Каждого СтрокаОснования Из Основания Цикл
			Если СтрокаОснования.НаимОсн = "-" Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОснованияДокумента.Добавить();
			НоваяСтрока.ДокОснованиеНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "НаимОсн");
			НоваяСтрока.ДокОснованиеНомер        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "НомОсн");
			ДатаОсн = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "ДатаОсн");
			Если ЗначениеЗаполнено(ДатаОсн) Тогда
				НоваяСтрока.ДокОснованиеДата = ДатаФНС(ДатаОсн);
			КонецЕсли;
			НоваяСтрока.ДокОснованиеДопСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаОснования, "ДопСвОсн");
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияДокумента.Количество() Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ОснованияДокумента, "Основание");
	КонецЕсли;
	
	ВидОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.ВидОперации");
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ВидОперации", ВидОперацииЭДПоСтроке(ВидОперации));
	КонецЕсли;
	
	ЗаполнитьРеквизитДерева(ДеревоЭД, "Заголовок", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.ЗагСодОпер"));
	
	// Поиск по ИНН, КПП ссылки на контрагента.
	РеквизитыКонтрагента = ДанныеУчастникаСделки(ДеревоЭД, ВидКонтрагента);
	РеквизитыКонтрагента.Вставить("ДатаСведений", ДатаАкта);
	
	// Добавление контрагента в дерево разбора.
	// Используется для поиска контрагента в форме однократной сделки.
	ДобавитьКонтрагентаВДеревоРазбора(ДанныеРазбора, НовыйЭД, ВидКонтрагента, РеквизитыКонтрагента, Ошибка);
	
	ДатаИсправления = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.ИспрДокПРУ.ДатаИспрДокПРУ");
	Если ЗначениеЗаполнено(ДатаИсправления) Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаИсправления", ФорматыЭДО.ДатаИзСтроки(ДатаИсправления));
	КонецЕсли;
		
	ЗаполнитьРеквизитДерева(ДеревоЭД, "НомерИсправления",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.ИспрДокПРУ.НомИспрДокПРУ"));
	
	ДатаИсполнения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.ДатаПер");
	Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ДатаИсполнения", ФорматыЭДО.ДатаИзСтроки(ДатаИсполнения));
	КонецЕсли;
	
	СписокОписанийРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокПРУ.СодФХЖ1.ОписРабот",,, Истина);
	ИтогДокумента = Неопределено;
	
	Если СписокОписанийРабот <> Неопределено Тогда
		
		ИтогДокумента = Новый Структура;
		ИтогДокумента.Вставить("НачалоРабот", Дата(1, 1, 1));
		ИтогДокумента.Вставить("КонецРабот", Дата(1, 1, 1));
		ИтогДокумента.Вставить("СуммаБезНДС", 0);
		ИтогДокумента.Вставить("СуммаНДС", 0);
		ИтогДокумента.Вставить("СуммаСНДС", 0);
		
		ТаблицаУслуг = ШаблонТаблицыПередачаРабот();
		ДокументОснованиеНайден = Ложь;
		
		Для каждого ОписаниеРабот Из СписокОписанийРабот Цикл
			
			НачалоРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОписаниеРабот, "НачРабот",, "Дата");
			Если Не ЗначениеЗаполнено(ИтогДокумента.НачалоРабот) И ЗначениеЗаполнено(НачалоРабот) Тогда
				ИтогДокумента.НачалоРабот = НачалоРабот;
			КонецЕсли;
			ИтогДокумента.НачалоРабот = Мин(ИтогДокумента.НачалоРабот, НачалоРабот);
			КонецРабот = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОписаниеРабот, "КонРабот",, "Дата");
			Если Не ЗначениеЗаполнено(ИтогДокумента.КонецРабот) И ЗначениеЗаполнено(КонецРабот) Тогда
				ИтогДокумента.КонецРабот = КонецРабот;
			КонецЕсли;
			ИтогДокумента.КонецРабот = Макс(ИтогДокумента.КонецРабот, КонецРабот);
			ИтогДокумента.СуммаБезНДС = ИтогДокумента.СуммаБезНДС + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОписаниеРабот, "СтБезНДСИт",, "Число");
			ИтогДокумента.СуммаНДС = ИтогДокумента.СуммаНДС + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОписаниеРабот, "СумНДСИт",, "Число");
			ИтогДокумента.СуммаСНДС = ИтогДокумента.СуммаСНДС + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОписаниеРабот, "СтУчНДСИт",, "Число");
			
			Работы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОписаниеРабот, "Работа",,, Истина);
			Если Работы <> Неопределено Тогда
				Для Каждого Элемент Из Работы Цикл
					
					НоваяСтрока = ТаблицаУслуг.Добавить();
					
					НоваяСтрока.НаименованиеНоменклатуры     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НаимРабот",, "Строка");
					НоваяСтрока.Описание                     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Описание",, "Строка");
					НоваяСтрока.ЕдиницаИзмеренияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НаимЕдИзм",, "Строка");
					
					// Код 0000 используется из-за требования стандарта.
					КодОКЕИ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ОКЕИ");
					Если КодОКЕИ = "0000" Тогда
						КодОКЕИ = "";
					КонецЕсли;
					
					НоваяСтрока.ЕдиницаИзмеренияКод = КодОКЕИ;
					НоваяСтрока.Количество  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Количество",,  "Число");
					НоваяСтрока.Цена        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Цена",,        "Число");
					НоваяСтрока.СуммаБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СтоимБезНДС",, "Число");
					НоваяСтрока.СуммаСНДС   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СтоимУчНДС",,  "Число");
					ПредставлениеСтавкиНДС  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НалСт");
					НоваяСтрока.СтавкаНДС   = ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(ПредставлениеСтавкиНДС);
					Если ПредставлениеСтавкиНДС = "без НДС" Тогда
						НоваяСтрока.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СумНДС",, "Число", Ложь, Истина);
					Иначе
						НоваяСтрока.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "СумНДС",, "Число");
					КонецЕсли;
					
					ДопРеквизитыСтрокиТч = Новый СписокЗначений;
					
					Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИнфПолеОписРабот") <> Неопределено Тогда
						ПрочитатьДопДанныеТЧ_ФНС502(Элемент.ИнфПолеОписРабот, ДеревоДопДанных, "Услуги","1." + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Номер"));
						ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, ДопРеквизитыСтрокиТч, "1." + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Номер"), "Услуги", Ошибка);
					КонецЕсли;
					
					ИдентификаторТовара = "";
					
					Для Каждого ЭлементСЗ Из ДопРеквизитыСтрокиТч Цикл
						
						// Номенклатура.
						Если ЭлементСЗ.Представление = "ИД" 
							И ВерсПрог = ВерсПрог1С Тогда
							ИдентификаторТовара = ЭлементСЗ.Значение;
							
						ИначеЕсли ЭлементСЗ.Представление = "НалСт" Тогда
							ЭлементСЗ.Значение = ЭлементСЗ.Значение;
							НоваяСтрока.СтавкаНДС = ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(ЭлементСЗ.Значение);
												
						КонецЕсли;
						
						ДопДанные = Новый ТаблицаЗначений;
						ДопДанные.Колонки.Добавить("Идентификатор");
						ДопДанные.Колонки.Добавить("Значение");
						
						Для Каждого ЭлементСпискаДопДанные Из ДопРеквизитыСтрокиТч Цикл
							Если ВРег(ЭлементСпискаДопДанные.Представление) = ВРег("Ид") 
								И ВерсПрог = ВерсПрог1С Тогда
								ИдентификаторТовара = ЭлементСпискаДопДанные.Значение;
							КонецЕсли;							
							
							СтрокаДопДанных = ДопДанные.Добавить();
							СтрокаДопДанных.Идентификатор = ЭлементСпискаДопДанные.Представление;
							СтрокаДопДанных.Значение = ЭлементСпискаДопДанные.Значение;
							
						КонецЦикла;
						
						Если ДопДанные.Количество()> 0 Тогда
							НоваяСтрока.ДопДанныеПодписанные = ДопДанные;
						КонецЕсли;
						
						ДопРеквизитыСтрокиТчНеПодписанные = Новый СписокЗначений;
						ЗаполнитьСтрокуТЧПоДопДанным(
							ДеревоДопДанных, ДопРеквизитыСтрокиТчНеПодписанные, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Номер"), "Услуги", Ошибка, Ложь);
						
						ДопДанныеНеПодписанные = Новый Структура;
						Для Каждого ЭлементСпискаНеПодписанные Из ДопРеквизитыСтрокиТчНеПодписанные Цикл
							ДопДанныеНеПодписанные.Вставить(ЭлементСпискаНеПодписанные.Представление, ЭлементСпискаНеПодписанные.Значение);
						КонецЦикла;
						
						Если ДопДанныеНеПодписанные.Количество() Тогда
							НоваяСтрока.ДопДанныеНеПодписанные = ДопДанныеНеПодписанные;
						КонецЕсли;
						
					КонецЦикла;
					
					Наименование = "" + ?(ЗначениеЗаполнено(НоваяСтрока.НаименованиеНоменклатуры), 
						НоваяСтрока.НаименованиеНоменклатуры, НоваяСтрока.Описание);
					
					СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
					СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
					СопоставлениеПоУмолчанию.Наименование = Наименование;
					СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмеренияНаименование;
					СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.ЕдиницаИзмеренияКод;
					
					НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
						НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
					
				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаУслуг, "ТаблицаУслуг");
		
	КонецЕсли;
	
	СуммаСНДС = 0;
	Если ИтогДокумента <> Неопределено Тогда
		
		СуммаСНДС = ИтогДокумента.СуммаСНДС;
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.НачалоРабот", ИтогДокумента.НачалоРабот);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.КонецРабот", ИтогДокумента.КонецРабот);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.СуммаБезНДСИтого", ИтогДокумента.СуммаБезНДС, Истина);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.СуммаНДСИтого", ИтогДокумента.СуммаНДС, Истина);
		ЗаполнитьРеквизитДерева(ДеревоЭД, "ОписаниеУслуги.СуммаСНДСИтого", ИтогДокумента.СуммаСНДС, Истина);
		
	КонецЕсли;
	
	Если СуммаСНДС = 0 Тогда
		СуммаСНДС = ТаблицаУслуг.Итог("СуммаСНДС");
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", СуммаСНДС);
	
	Подписанты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант");
	Если Подписанты <> Неопределено Тогда
		
		ЮрЛицо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписанты, "ЮЛ");
		Если ЮрЛицо <> Неопределено Тогда
			
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалДолжность", 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮрЛицо, "Должн"));
			
			ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮрЛицо, "ФИО");
			Если ФИО <> Неопределено Тогда
				
				ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия",, "Строка")
					+ " "
					+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя",, "Строка")
					+ " "
					+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество",, "Строка"));
					
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалФИО", ФамилияИнициалы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписанты, "ИП");
		Если ИП <> Неопределено Тогда
			ФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИП, "ФИО");
			
			ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия"   ,, "Строка")
				+ " "
				+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя"     ,, "Строка")
				+ " "
				+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество",, "Строка"));
				
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СдалФИО", ФамилияИнициалы);
				
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ПоместитьДопДанныеВДеревоЭД(ДеревоЭД, ДеревоДопДанных);
	
	НовыйЭД.ЗначениеРеквизита = ДеревоЭД;
	НовыйЭД.ОписаниеОбъекта = "ПередачаРезультатовРабот";
	
КонецПроцедуры

Процедура ПрочитатьПередачаРаботЗаказчикXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
	
	ДеревоДопДанных = Неопределено;
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ДатаПолучения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ3.РезПринял.ДатаПрием",, "Дата"));
	
	Подписант = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант");
	
	ИП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИП");
	Если ИП <> Неопределено Тогда
		
		ФИО = ИП.ФИО;
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия"   ,, "Строка") + " "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя"     ,, "Строка") + " "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество",, "Строка"));
			
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ФамилияИнициалы);
		
	КонецЕсли;
	
	ЮрЛицо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ЮЛ");
	Если ЮрЛицо <> Неопределено Тогда
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮрЛицо, "Должн"));
		ФамилияИнициалы = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮрЛицо.ФИО, "Фамилия",, "Строка") + " "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮрЛицо.ФИО, "Имя",, "Строка")   + " "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮрЛицо.ФИО, "Отчество",, "Строка"));
			
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ФамилияИнициалы);
		
	КонецЕсли;
		
	СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если СтрокаДерева = Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьАктОРасхожденияхXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктОРасхождениях;
	
	// Шапка.
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("АктОРасхождениях", "5.01");
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	ВставитьЗначениеВДерево(ДеревоДанных, "НаименованиеДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимДокОпр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "СоставительДокументаНаименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НаимЭконСубСост"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "СоставительДокументаДоверенность", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОснДоверОргСост"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваСоставленияДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ОбстСостДок"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ИдентДокПР.НомДокПР"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ИдентДокПР.ДатаДокПР",, "Дата"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерИсправления", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ИспрДокПР.НомИспрДокПР"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаИсправления", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ИспрДокПР.ДатаИспрДокПР",, "Дата"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ИдентификаторГосКонтракта", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ИдГосКон"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ОбстоятельстваИспользованияДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ОбстИсп"));
		
	// Участники.
	ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.Продавец"), "Продавец");
	ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.Покупатель"), "Покупатель");
	ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.Грузоотправитель"), "Грузоотправитель");
	ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.Грузополучатель"), "Грузополучатель");
	ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СтрахКом"), "СтраховаяКомпания");
	
	// Приказ.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерПриказа", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.Приказ.НомПрик"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаПриказа", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.Приказ.ДатаПрик",, "Дата"));
	
	// Сведения об осмотре груза.
	ОбщийПуть = "СведенияОбОсмотреГруза.";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДатаОсмотра", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.ДатаОсм",, "Дата"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "МестоСоставленияДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.МестоСост"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ВремяПриемкиНачало", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.ВремяНач",, "Время"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ВремяПриемкиОкончание", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.ВремяОконч",, "Время"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДатаОтправки", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.ДатаОтпр",, "Дата"));
		
	Сертификаты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.СертСоотв",,, Истина);
	НаборСертификатов = Новый Массив;
	Если ЗначениеЗаполнено(Сертификаты) Тогда
		Для каждого НомерСертификата Из Сертификаты Цикл
			НаборСертификатов.Добавить(НомерСертификата);
		КонецЦикла;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ОбщийПуть + "СертификатыСоответствия", НаборСертификатов);
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "СопроводительныйДокумент.Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.СопрДок.НаимСопрДок"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "СопроводительныйДокумент.Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.СопрДок.НомСопрДок"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "СопроводительныйДокумент.Дата", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.СопрДок.ДатаСопрДок",, "Дата"));
		
	ДополнительныеДанные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвОсмГруз.ИнфПолСвОсм",,, Истина);
	ДополнительныеДанныеДляДерева = ПрочитатьАктОРасхожденияхИнфПолТип(ДополнительныеДанные);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДополнительныеДанные", ДополнительныеДанныеДляДерева);
	
	// Сведения по транспортным документам.
	СвСопрДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвСопрДок",,, Истина);
	Если СвСопрДок <> Неопределено Тогда
		
		СведенияПоТранспортнымДокументам = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияПоТранспортнымДокументам");
			
		Для Каждого СтрокаСведений Из СвСопрДок Цикл
				
			НоваяСтрока = СведенияПоТранспортнымДокументам.Добавить();
			НоваяСтрока.ОтметкаОбОпломбировании = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ОтмПломб");
			НоваяСтрока.ВидУпаковки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ВидУпак");
			НоваяСтрока.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "КолМест",, "Число");
			НоваяСтрока.НаименованиеГруза = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "НаимГруз");
			НоваяСтрока.ЕдиницаИзмеренияКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ОКЕИ_Тов");
			НоваяСтрока.ЕдиницаИзмеренияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "НаимЕдИзм");
			НоваяСтрока.МассаОтправленияБрутто = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "МассаДок.МассаБр",, "Число");
			НоваяСтрока.МассаОтправленияНетто = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "МассаДок.МассаНет",, "Число");
			НоваяСтрока.МассаПрибытияБрутто = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "МассаФакт.МассаБр",, "Число");
			НоваяСтрока.МассаПрибытияНетто = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "МассаФакт.МассаНет",, "Число");
			
			ИнфПолСопрДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаСведений, "ИнфПолСопрДок",,, Истина);
			НоваяСтрока.ДополнительныеДанные = ПрочитатьАктОРасхожденияхТекстИнфТип(ИнфПолСопрДок);
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияПоТранспортнымДокументам, "СведенияПоТранспортнымДокументам");
		
	КонецЕсли;
	
	// Сведения о времени приемки.
	ОбщийПуть = "СведенияОВремениПриемки.";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДатаПрибытияВПунктНазначения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвВремПрием.ПрибГруз",, "Дата"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДатаВыдачиОрганизациейТранспорта", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвВремПрием.ВыдачГруз",, "Дата"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДатаВскрытияТранспортныхСредств", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвВремПрием.ВскрытГруз",, "Дата"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДатаДоставкиНаСкладПолучателя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвВремПрием.ДостГруз",, "Дата"));
	
	// Обстоятельства приемки.
	ОбщийПуть = "ОбстоятельстваПриемки.";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "УсловияХраненияТоваровНаСкладеПолучателя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.УсловХран"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "СостояниеТарыУпаковки", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.СостТара"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ТипОпределенияКоличества", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.ОпредНедост"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ДополнительныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.ДопСв"));
		
	ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.Перевозчик"), ОбщийПуть + "Перевозчик");
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ТранспортныйДокумент.Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.СопрТрансДок.НаимСопрДок"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ТранспортныйДокумент.Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.СопрТрансДок.НомСопрДок"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ОбщийПуть + "ТранспортныйДокумент.Дата", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ДрОбстПрием.СопрТрансДок.ДатаСопрДок",, "Дата"));
		
	// Сведения о лице, принявшем товар.
	СвЛицПрин = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин");
	Если СвЛицПрин <> Неопределено Тогда
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок") <> Неопределено Тогда
			
			ОбщийПуть = "СведенияОЛицеПринявшемТовар.РаботникОрганизацииПокупателя.";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "Должность", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок.Должность"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "ИныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок.ИныеСвед"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "ОснованиеПолномочий", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок.ОснПолн"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок.ФИО.Фамилия"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок.ФИО.Имя"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ОбщийПуть + "Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.РабОргПок.ФИО.Отчество"));
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо") <> Неопределено Тогда
			
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин") <> Неопределено Тогда
				
				ОбщийПуть = "СведенияОЛицеПринявшемТовар.ИноеЛицо.ПредставительОрганизации.";
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Должность", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.Должность"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "ИныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.ИныеСвед"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "НаименованиеОрганизации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.НаимОргПрин"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "ОснованиеПолномочийОрганизации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснДоверОргПрин"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "ОснованиеПолномочийПредставителя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.ОснПолнПредПрин"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Фамилия"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Имя"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ПредОргПрин.ФИО.Отчество"));
				
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин") <> Неопределено Тогда
				
				ОбщийПуть = "СведенияОЛицеПринявшемТовар.ИноеЛицо.ФизическоеЛицо.";
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "ОснованиеПолномочий", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин.ОснДоверФЛ"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "ИныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин.ИныеСвед"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Фамилия"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Имя"));
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ОбщийПуть + "Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.СвЛицПрин.ИнЛицо.ФЛПрин.ФИО.Отчество"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительные данные приемки.
	ДополнительныеДанные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ1.ИнфПолФХЖ1",,, Истина);
	ДополнительныеДанныеДляДерева = ПрочитатьАктОРасхожденияхИнфПолТип(ДополнительныеДанные);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДополнительныеДанныеПриемки", ДополнительныеДанныеДляДерева);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "КраткоеОписаниеСобытия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.СодСоб"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ЗаключениеКомиссии", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.Заключение"));
	
	// Результаты приемки.
	РезПрием = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.РезПрием",,, Истина);
	РезультатыПриемки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "РезультатыПриемки");
	Для каждого СтрокаПриемки Из РезПрием Цикл
		
		НоваяСтрока = РезультатыПриемки.Добавить();
		НоваяСтрока.ЕдиницаИзмеренияНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "НаимЕдИзм",, "Строка");
		НоваяСтрока.ЕдиницаИзмеренияКод = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ОКЕИ_Тов");
		
		НоваяСтрока.Товар = Новый Структура;
		НоваяСтрока.Товар.Вставить("НомерСтрокиСопроводительногоДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.НомСтрСопрДок"));
		НоваяСтрока.Товар.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.НаимТов",, "Строка"));
		НоваяСтрока.Товар.Вставить("Характеристика", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.ХарактТов",, "Строка"));
		НоваяСтрока.Товар.Вставить("Сорт", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.СортТов"));
		НоваяСтрока.Товар.Вставить("Артикул", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.АртикулТов"));
		НоваяСтрока.Товар.Вставить("Код", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.КодТов"));
		НоваяСтрока.Товар.Вставить("Паспорт", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Ценности.Паспорт"));
		
		НоваяСтрока.ПоДокументу = Новый Структура;
		НоваяСтрока.ПоДокументу.Вставить("Количество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоДокум.КолТовПрин",, "Число"));
		НоваяСтрока.ПоДокументу.Вставить("Цена", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоДокум.ЦенаПрин",, "Число"));
		СтавкаНДССтрокой = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоДокум.СтавНДСПрин");
		СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДССтрокой), ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(СтавкаНДССтрокой), Неопределено);
		НоваяСтрока.ПоДокументу.Вставить("СтавкаНДС", СтавкаНДС);
		НоваяСтрока.ПоДокументу.Вставить("СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоДокум.СумНДСПрин",, "Число"));
		НоваяСтрока.ПоДокументу.Вставить("СуммаСНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоДокум.СтоимТовНДСПрин",, "Число"));
		Маркировка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоДокум.НомСредИдентТов",,, Истина);
		НоваяСтрока.ПоДокументу.Вставить("Маркировка", ПрочитатьАктОРасхожденияхНомСредИдентТов(Маркировка));
		
		НоваяСтрока.ПоФакту = Новый Структура;
		НоваяСтрока.ПоФакту.Вставить("Количество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоФакту.КолТовПрин",, "Число"));
		НоваяСтрока.ПоФакту.Вставить("Цена", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоФакту.ЦенаПрин",, "Число"));
		СтавкаНДССтрокой = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоФакту.СтавНДСПрин");
		СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДССтрокой), ФорматыЭДОПовтИсп.СтавкаНДСИзПредставления(СтавкаНДССтрокой), Неопределено);
		НоваяСтрока.ПоФакту.Вставить("СтавкаНДС", СтавкаНДС);
		НоваяСтрока.ПоФакту.Вставить("СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоФакту.СумНДСПрин",, "Число"));
		НоваяСтрока.ПоФакту.Вставить("СуммаСНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоФакту.СтоимТовНДСПрин",, "Число"));
		Маркировка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ПоФакту.НомСредИдентТов",,, Истина);
		НоваяСтрока.ПоФакту.Вставить("Маркировка", ПрочитатьАктОРасхожденияхНомСредИдентТов(Маркировка));
		
		НоваяСтрока.Брак = Новый Структура;
		НоваяСтрока.Брак.Вставить("Количество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Брак.КолТовРасх",, "Число"));
		НоваяСтрока.Брак.Вставить("СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Брак.СумНДСРасх",, "Число"));
		НоваяСтрока.Брак.Вставить("СуммаСНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Брак.СтоимТовНДСРасх",, "Число"));
		НоваяСтрока.Брак.Вставить("Пояснение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Брак.ПоясненияРасх"));
		Маркировка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Брак.НомСредИдентТов",,, Истина);
		НоваяСтрока.Брак.Вставить("Маркировка", ПрочитатьАктОРасхожденияхНомСредИдентТов(Маркировка));
		
		НоваяСтрока.Бой = Новый Структура;
		НоваяСтрока.Бой.Вставить("Количество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Бой.КолТовРасх",, "Число"));
		НоваяСтрока.Бой.Вставить("СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Бой.СумНДСРасх",, "Число"));
		НоваяСтрока.Бой.Вставить("СуммаСНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Бой.СтоимТовНДСРасх",, "Число"));
		НоваяСтрока.Бой.Вставить("Пояснение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Бой.ПоясненияРасх"));
		Маркировка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Бой.НомСредИдентТов",,, Истина);
		НоваяСтрока.Бой.Вставить("Маркировка", ПрочитатьАктОРасхожденияхНомСредИдентТов(Маркировка));
		
		НоваяСтрока.Недостача = Новый Структура;
		НоваяСтрока.Недостача.Вставить("Количество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Недостача.КолТовРасх",, "Число"));
		НоваяСтрока.Недостача.Вставить("СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Недостача.СумНДСРасх",, "Число"));
		НоваяСтрока.Недостача.Вставить("СуммаСНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Недостача.СтоимТовНДСРасх",, "Число"));
		НоваяСтрока.Недостача.Вставить("Пояснение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Недостача.ПоясненияРасх"));
		Маркировка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Недостача.НомСредИдентТов",,, Истина);
		НоваяСтрока.Недостача.Вставить("Маркировка", ПрочитатьАктОРасхожденияхНомСредИдентТов(Маркировка));
		
		НоваяСтрока.Излишки = Новый Структура;
		НоваяСтрока.Излишки.Вставить("Количество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Излишки.КолТовРасх",, "Число"));
		НоваяСтрока.Излишки.Вставить("СуммаНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Излишки.СумНДСРасх",, "Число"));
		НоваяСтрока.Излишки.Вставить("СуммаСНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Излишки.СтоимТовНДСРасх",, "Число"));
		НоваяСтрока.Излишки.Вставить("Пояснение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Излишки.ПоясненияРасх"));
		Маркировка = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "Излишки.НомСредИдентТов",,, Истина);
		НоваяСтрока.Излишки.Вставить("Маркировка", ПрочитатьАктОРасхожденияхНомСредИдентТов(Маркировка));
		
		ЦеновыеОтклонения = Новый Структура;
		ЦеновыеОтклонения.Вставить("Цена",      0);
		ЦеновыеОтклонения.Вставить("СуммаНДС",  0);
		ЦеновыеОтклонения.Вставить("СуммаСНДС", 0);
		ЦеновыеОтклонения.Вставить("Пояснение", "");
		НоваяСтрока.ЦеновыеОтклонения = ЦеновыеОтклонения;
		ЦенОтклон = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ЦенОтклон");
		Если ЦенОтклон <> Неопределено Тогда
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ПолДельта") <> Неопределено Тогда
				НоваяСтрока.ЦеновыеОтклонения.Цена = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ПолДельта.ДельтаЦена",, "Число");
				НоваяСтрока.ЦеновыеОтклонения.СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ПолДельта.ДельтаСумНДС",, "Число");
				НоваяСтрока.ЦеновыеОтклонения.СуммаСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ПолДельта.ДельтаСтоимНДС",, "Число");
				НоваяСтрока.ЦеновыеОтклонения.Пояснение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ПолДельта.ПояснДельта");
			ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ОтрицатДельта") <> Неопределено Тогда
				НоваяСтрока.ЦеновыеОтклонения.Цена = (-1) * РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ОтрицатДельта.ДельтаЦена",, "Число");
				НоваяСтрока.ЦеновыеОтклонения.СуммаНДС = (-1) * РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ОтрицатДельта.ДельтаСумНДС",, "Число");
				НоваяСтрока.ЦеновыеОтклонения.СуммаСНДС = (-1) * РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ОтрицатДельта.ДельтаСтоимНДС",, "Число");
				НоваяСтрока.ЦеновыеОтклонения.Пояснение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЦенОтклон, "ОтрицатДельта.ПояснДельта");
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.ИнформацияОРасхождениях = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "РасхРабУслПрав");
		
		ИнфПолРезПрием = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПриемки, "ИнфПолРезПрием",,, Истина);
		
		ДопДанныеСтроки = Новый ТаблицаЗначений;
		ДопДанныеСтроки.Колонки.Добавить("Идентификатор");
		ДопДанныеСтроки.Колонки.Добавить("Значение");
	
		Если ИнфПолРезПрием <> Неопределено Тогда
			Для Каждого ЭлементТекстИнф Из ИнфПолРезПрием Цикл
				
				СтрокаДопДанных = ДопДанныеСтроки.Добавить();
				
				СтрокаДопДанных.Идентификатор = ЭлементТекстИнф.Идентиф;
				СтрокаДопДанных.Значение = ЭлементТекстИнф.Значен;
				
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.ДопДанныеПодписанные = ДопДанныеСтроки;
		
		СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
		СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.Товар.Наименование;
		СопоставлениеПоУмолчанию.Характеристика = НоваяСтрока.Товар.Характеристика;
		СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмеренияНаименование;
		СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.ЕдиницаИзмеренияКод;
		СопоставлениеПоУмолчанию.Артикул = НоваяСтрока.Товар.Артикул;
		СопоставлениеПоУмолчанию.КодНоменклатуры = НоваяСтрока.Товар.Код;
		
		НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
			НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, РезультатыПриемки, "РезультатыПриемки");
	
	// Прилагаемые документы.
	ПрилДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.ПрилДок",,, Истина);
	ПрилагаемыеДокументы = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "ПрилагаемыеДокументы");
	Если ЗначениеЗаполнено(ПрилДок) Тогда
		Для каждого СтрокаДокумента Из ПрилДок Цикл
			НоваяСтрока = ПрилагаемыеДокументы.Добавить();
			НоваяСтрока.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаДокумента, "ВидПрилДок");
			НоваяСтрока.Номер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаДокумента, "НомерПрилДок");
			НоваяСтрока.Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаДокумента, "ДатаПрилДок",, "Дата");
		КонецЦикла;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПрилагаемыеДокументы, "ПрилагаемыеДокументы");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ВидОперации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.ВидОперации"));
		
	// Дополнительные данные расхождения.
	ИнфПолФХЖ2 = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СодФХЖ2.ИнфПолФХЖ2",,, Истина);
	ДополнительныеДанныеРасхождения = ПрочитатьАктОРасхожденияхТекстИнфТип(ИнфПолФХЖ2);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДополнительныеДанныеРасхождения", ДополнительныеДанныеРасхождения);
		
	
	// Подписанты.
	Подписант = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант",,, Истина);
	Подписанты = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "Подписанты");
	
	Для каждого СтрокаПодписанта Из Подписант Цикл
		
		НоваяСтрока = Подписанты.Добавить();
		НоваяСтрока.ОбластьПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ОблПолн");
		НоваяСтрока.Статус = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "Статус");
		НоваяСтрока.ОснованиеПолномочийПодписанта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ОснПолн");
		НоваяСтрока.ОснованиеПолномочийОрганизации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ОснПолнОрг");
		НоваяСтрока.ПризнакОзнакомленияСПравиламиПриемки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ПризнОзнак");
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ФЛ") <> Неопределено Тогда
			
			НоваяСтрока.ТипПодписанта = Новый Структура("ФЛ", Новый Структура);
			НоваяСтрока.ТипПодписанта.ФЛ.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ФЛ.ИННФЛ"));
			НоваяСтрока.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ФЛ.ФИО.Фамилия");
			НоваяСтрока.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ФЛ.ФИО.Имя");
			НоваяСтрока.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ФЛ.ФИО.Отчество");
			НоваяСтрока.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ФЛ.ИныеСвед");
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП") <> Неопределено Тогда
			
			НоваяСтрока.ТипПодписанта = Новый Структура("ИП", Новый Структура);
			НоваяСтрока.ТипПодписанта.ИП.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП.ИННФЛ"));
			НоваяСтрока.ТипПодписанта.ИП.Вставить("СвидетельствоОГосРегистрации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП.СвГосРегИП"));
			НоваяСтрока.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП.ФИО.Фамилия");
			НоваяСтрока.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП.ФИО.Имя");
			НоваяСтрока.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП.ФИО.Отчество");
			НоваяСтрока.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ИП.ИныеСвед");
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ") <> Неопределено Тогда
			
			НоваяСтрока.ТипПодписанта = Новый Структура("ЮЛ", Новый Структура);
			НоваяСтрока.ТипПодписанта.ЮЛ.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.ИННЮЛ"));
			НоваяСтрока.ТипПодписанта.ЮЛ.Вставить("ОрганизацияНаименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.НаимОрг"));
			НоваяСтрока.ТипПодписанта.ЮЛ.Вставить("Должность", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.Должн"));
			НоваяСтрока.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.ФИО.Фамилия");
			НоваяСтрока.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.ФИО.Имя");
			НоваяСтрока.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.ФИО.Отчество");
			НоваяСтрока.ИныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПодписанта, "ЮЛ.ИныеСвед");
			
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Подписанты, "Подписанты");
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюОтправителяАктСверкиВзаиморасчетовXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов;
	
	// Шапка.
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("АктСверкиВзаиморасчетов", "5.01", "ИнформацияОтправителя");
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	ДатаНачалаПериодаСверки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ДатаНачПер");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаНачалаПериодаСверки", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаНачалаПериодаСверки, ЧастиДаты.Дата));
		
	ДатаОкончанияПериодаСверки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ДатаОкПер");	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаОкончанияПериодаСверки", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаОкончанияПериодаСверки, ЧастиДаты.Дата));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НомерАкт"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "КодВалюты", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокКрАкт.КодОКВ"));
		
	ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ДатаИнфОтпр");
	ВремяДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ВрИнфОтпр");
	ДатаВремяДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", ДатаДокумента, ВремяДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаВремяДокумента, ЧастиДаты.ДатаВремя));
	
	// Участники.
	ПрочитатьАктСверкиВзаиморасчетовУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокКрАкт.СвОтпр"), "Отправитель");
	ПрочитатьАктСверкиВзаиморасчетовУчастникТип(ДеревоДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвДокКрАкт.СвПол"), "Получатель");
	
	// Сведения отправителя.
	ТаблАкт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблАкт");
	Если ТаблАкт <> Неопределено Тогда
		
		СведенияОтправителя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияОтправителя");
			
		СведенияОтправителя.СальдоНаНачалоПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоНачДеб");
		СведенияОтправителя.СальдоНаНачалоПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоНачКр");
		СведенияОтправителя.ОборотПоДебету = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ОборотДеб");
		СведенияОтправителя.ОборотПоКредиту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ОборотКр");
		СведенияОтправителя.СальдоНаКонецПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоКонДеб");
		СведенияОтправителя.СальдоНаКонецПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоКонКр");
		
		ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СведенияОтправителя, "СведенияОтправителя");
		
		ДогСв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблАкт.ДогСв",,, Истина);
		Если ДогСв <> Неопределено Тогда
			
			СведенияПоДоговорам = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "СведенияОтправителя.СведенияПоДоговорам");
			
			Для Каждого ТекущийДоговор Из ДогСв Цикл
				
				НоваяСтрокаПоДоговорам = СведенияПоДоговорам.Добавить();
				НоваяСтрокаПоДоговорам.ИдентификаторДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ИдДог");
				НоваяСтрокаПоДоговорам.ОписаниеДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ОписТипДог");
				НоваяСтрокаПоДоговорам.НомерДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "НомДог");
				НоваяСтрокаПоДоговорам.ДатаДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ДатаДог");
				НоваяСтрокаПоДоговорам.СальдоНаНачалоПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоНачДеб");
				НоваяСтрокаПоДоговорам.СальдоНаНачалоПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоНачКр");
				НоваяСтрокаПоДоговорам.ОборотПоДебету = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ОборотДеб");
				НоваяСтрокаПоДоговорам.ОборотПоКредиту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ОборотКр");
				НоваяСтрокаПоДоговорам.СальдоНаКонецПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоКонДеб");
				НоваяСтрокаПоДоговорам.СальдоНаКонецПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоКонКр");
				
				Если Не ПустаяСтрока(НоваяСтрокаПоДоговорам.ДатаДоговора) Тогда
					НоваяСтрокаПоДоговорам.ДатаДоговора = СтроковыеФункцииКлиентСервер.СтрокаВДату(НоваяСтрокаПоДоговорам.ДатаДоговора, ЧастиДаты.Дата);
				КонецЕсли;	
				
				ДокСв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ДокСв",,, Истина);
				Если ДокСв <> Неопределено Тогда
					
					СведенияПоДокументам = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
						ДеревоДанных, "СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам");
						
					Для Каждого ТекущийДокумент Из ДокСв Цикл
						
						НоваяСтрокаПоДокументам = СведенияПоДокументам.Добавить();
						НоваяСтрокаПоДокументам.НаименованиеДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "НаимДок");
						НоваяСтрокаПоДокументам.НомерДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "НомДок");
						НоваяСтрокаПоДокументам.ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ДатаДок");
						НоваяСтрокаПоДокументам.ИдентификаторДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ИдДок");
						НоваяСтрокаПоДокументам.ДопИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ДопИнф");
						
						Если Не ПустаяСтрока(НоваяСтрокаПоДокументам.ДатаДокумента) Тогда
							НоваяСтрокаПоДокументам.ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(НоваяСтрокаПоДокументам.ДатаДокумента, ЧастиДаты.Дата);
						КонецЕсли;
						
						СвОпер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "СвОпер",,, Истина);
						Если СвОпер <> Неопределено Тогда
							
							СведенияПоОперациям = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
								ДеревоДанных, "СведенияОтправителя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям");
								
							Для Каждого ТекущаяОперация Из СвОпер Цикл	
								
								НоваяСтрокаПоОперациям = СведенияПоОперациям.Добавить();
								НоваяСтрокаПоОперациям.ПорядковыйНомерСтроки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "НомСтр"); 
								НоваяСтрокаПоОперациям.ДатаОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "ДатаОпер");
								НоваяСтрокаПоОперациям.НаименованиеОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "НаимОпер");
								НоваяСтрокаПоОперациям.СуммаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "СумДебет");
								НоваяСтрокаПоОперациям.СуммаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "СумКредит");
								
								Если Не ПустаяСтрока(НоваяСтрокаПоОперациям.ДатаОперации) Тогда
									НоваяСтрокаПоОперациям.ДатаОперации = СтроковыеФункцииКлиентСервер.СтрокаВДату(НоваяСтрокаПоОперациям.ДатаОперации, ЧастиДаты.Дата);
								КонецЕсли;
								
							КонецЦикла;	
							
							НоваяСтрокаПоДокументам.СведенияПоОперациям = СведенияПоОперациям;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НоваяСтрокаПоДоговорам.СведенияПоДокументам = СведенияПоДокументам;	
						
				КонецЕсли;	
				
			КонецЦикла;
				
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
				ДеревоДанных, СведенияПоДоговорам, "СведенияОтправителя.СведенияПоДоговорам");	
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Подписант.
	Подписант = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант");
	СведенияПодписанта = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияПодписанта");
		
	ФИО = СведенияПодписанта.ФИО;
	ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Фамилия");
	ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Имя");
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Отчество") <> Неопределено Тогда
		ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Отчество");
	КонецЕсли;	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СтатПодп") <> Неопределено Тогда	
		СведенияПодписанта.СтатусПодписанта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СтатПодп");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ТипПодпис") <> Неопределено Тогда	
		СведенияПодписанта.ТипПодписи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ТипПодпис");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИдСистХран") <> Неопределено Тогда	
		СведенияПодписанта.ИнформационнаяСистема = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИдСистХран");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должн") <> Неопределено Тогда	
		СведенияПодписанта.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должн");
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДовер") <> Неопределено Тогда	
		СведенияДоверенности =  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДовер");
		ЭлектроннаяДоверенность = СведенияПодписанта.ЭлектроннаяДоверенность;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "НомДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ЕдиныйНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "НомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаНач") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаНач");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ВнутреннийНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаВнРегДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ДатаВнутреннейРегистрации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаВнРегДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.СведенияОСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм");
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДоверБум") <> Неопределено Тогда	
		СведенияДоверенности =  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДоверБум");
		БумажнаяДоверенность = СведенияПодписанта.БумажнаяДоверенность;
		
		ФИО = БумажнаяДоверенность.ФИО;
		ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Фамилия");
		ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Имя");
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Отчество") <> Неопределено Тогда
			ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Отчество");
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.ВнутреннийНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СвИдДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.Доверитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СвИдДовер");
		КонецЕсли;
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СведенияПодписанта, "СведенияПодписанта");	
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюПолучателяАктСверкиВзаиморасчетовXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов;
	
	// Шапка.
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("АктСверкиВзаиморасчетов", "5.01", "ИнформацияПолучателя");
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	ПризнакНаличияРазногласий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ПризнРазн");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ПризнакНаличияРазногласий", ?(ПризнакНаличияРазногласий = "2", Истина, Ложь));
		
	// Сведения отправителя.
	ИнформацияОтправителя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ИдИнфОтпр");
	СведенияОтправителя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияОтправителя");
		
	СведенияОтправителя.ИдентификаторФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОтправителя, "ИдФайлИнфОтпр");
	СведенияОтправителя.ДатаФормированияФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОтправителя, "ДатФайлИнфОтпр");
	СведенияОтправителя.ВремяФормированияФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОтправителя, "ВрФайлИнфОтпр");
	СведенияОтправителя.ЭлектроннаяПодпись = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОтправителя, "ЭП");
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СведенияОтправителя, "СведенияОтправителя");
	
	// Сведения получателя.
	ТаблАкт = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблАкт");
	Если ТаблАкт <> Неопределено Тогда
		
		СведенияПолучателя = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "СведенияПолучателя");
			
		СведенияПолучателя.СальдоНаНачалоПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоНачДеб");
		СведенияПолучателя.СальдоНаНачалоПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоНачКр");
		СведенияПолучателя.ОборотПоДебету = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ОборотДеб");
		СведенияПолучателя.ОборотПоКредиту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ОборотКр");
		СведенияПолучателя.СальдоНаКонецПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоКонДеб");
		СведенияПолучателя.СальдоНаКонецПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "СальдоКонКр");
		СведенияПолучателя.ИтогоРасхождениеПоДебету = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ИтогоРасхДеб");
		СведенияПолучателя.ИтогоРасхождениеПоКредиту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ИтогоРасхКр");
		СведенияПолучателя.ДопИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТаблАкт, "ДопИнф");
		
		ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СведенияПолучателя, "СведенияПолучателя");
		
		ДогСв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ТаблАкт.ДогСв",,, Истина);
		Если ДогСв <> Неопределено Тогда
			
			СведенияПоДоговорам = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "СведенияПолучателя.СведенияПоДоговорам");
			
			Для Каждого ТекущийДоговор Из ДогСв Цикл
				
				НоваяСтрокаПоДоговорам = СведенияПоДоговорам.Добавить();
				НоваяСтрокаПоДоговорам.ИдентификаторДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ИдДог");
				НоваяСтрокаПоДоговорам.ОписаниеДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ОписТипДог");
				НоваяСтрокаПоДоговорам.НомерДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "НомДог");
				НоваяСтрокаПоДоговорам.ДатаДоговора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ДатаДог");
				НоваяСтрокаПоДоговорам.СальдоНаНачалоПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоНачДеб");
				НоваяСтрокаПоДоговорам.СальдоНаНачалоПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоНачКр");
				НоваяСтрокаПоДоговорам.ОборотПоДебету = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ОборотДеб");
				НоваяСтрокаПоДоговорам.ОборотПоКредиту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ОборотКр");
				НоваяСтрокаПоДоговорам.СальдоНаКонецПериодаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоКонДеб");
				НоваяСтрокаПоДоговорам.СальдоНаКонецПериодаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "СальдоКонКр");				
				НоваяСтрокаПоДоговорам.ИтогоРасхождениеПоДебету = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ИтогоРасхДеб");
				НоваяСтрокаПоДоговорам.ИтогоРасхождениеПоКредиту = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ИтогоРасхКр");
				НоваяСтрокаПоДоговорам.ДопИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ДопИнф");				
				
				Если Не ПустаяСтрока(НоваяСтрокаПоДоговорам.ДатаДоговора) Тогда
					НоваяСтрокаПоДоговорам.ДатаДоговора = СтроковыеФункцииКлиентСервер.СтрокаВДату(НоваяСтрокаПоДоговорам.ДатаДоговора, ЧастиДаты.Дата);
				КонецЕсли;	
				
				ДокСв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДоговор, "ДокСв",,, Истина);
				Если ДокСв <> Неопределено Тогда
					
					СведенияПоДокументам = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
						ДеревоДанных, "СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам");
						
					Для Каждого ТекущийДокумент Из ДокСв Цикл
						
						НоваяСтрокаПоДокументам = СведенияПоДокументам.Добавить();
						НоваяСтрокаПоДокументам.НаименованиеДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "НаимДок");
						НоваяСтрокаПоДокументам.НомерДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "НомДок");
						НоваяСтрокаПоДокументам.ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ДатаДок");
						НоваяСтрокаПоДокументам.ИдентификаторДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ИдДок");
						НоваяСтрокаПоДокументам.ИтогоРасхождение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ИтогоРасх");
						НоваяСтрокаПоДокументам.ДопИнформация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "ДопИнф");
						
						Если Не ПустаяСтрока(НоваяСтрокаПоДокументам.ДатаДокумента) Тогда
							НоваяСтрокаПоДокументам.ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(НоваяСтрокаПоДокументам.ДатаДокумента, ЧастиДаты.Дата);
						КонецЕсли;
						
						СвОпер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущийДокумент, "СвОпер",,, Истина);
						Если СвОпер <> Неопределено Тогда
							
							СведенияПоОперациям = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
								ДеревоДанных, "СведенияПолучателя.СведенияПоДоговорам.НомерСтроки.СведенияПоДокументам.НомерСтроки.СведенияПоОперациям");
								
							Для Каждого ТекущаяОперация Из СвОпер Цикл	
								
								НоваяСтрокаПоОперациям = СведенияПоОперациям.Добавить();
								НоваяСтрокаПоОперациям.ПорядковыйНомерСтроки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "НомСтр"); 
								НоваяСтрокаПоОперациям.ДатаОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "ДатаОпер");
								НоваяСтрокаПоОперациям.НаименованиеОперации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "НаимОпер");
								НоваяСтрокаПоОперациям.СуммаДебет = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "СумДебет");
								НоваяСтрокаПоОперациям.СуммаКредит = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекущаяОперация, "СумКредит");
								
								Если Не ПустаяСтрока(НоваяСтрокаПоОперациям.ДатаОперации) Тогда
									НоваяСтрокаПоОперациям.ДатаОперации = СтроковыеФункцииКлиентСервер.СтрокаВДату(НоваяСтрокаПоОперациям.ДатаОперации, ЧастиДаты.Дата);
								КонецЕсли;
								
							КонецЦикла;	
							
							НоваяСтрокаПоДокументам.СведенияПоОперациям = СведенияПоОперациям;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НоваяСтрокаПоДоговорам.СведенияПоДокументам = СведенияПоДокументам;	
						
				КонецЕсли;	
				
			КонецЦикла;
				
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
				ДеревоДанных, СведенияПоДоговорам, "СведенияПолучателя.СведенияПоДоговорам");	
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Подписант.
	Подписант = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант");
	СведенияПодписанта = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияПодписанта");
		
	ФИО = СведенияПодписанта.ФИО;
	ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Фамилия");
	ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Имя");
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Отчество") <> Неопределено Тогда
		ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Отчество");
	КонецЕсли;	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СтатПодп") <> Неопределено Тогда	
		СведенияПодписанта.СтатусПодписанта = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СтатПодп");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ТипПодпис") <> Неопределено Тогда	
		СведенияПодписанта.ТипПодписи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ТипПодпис");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИдСистХран") <> Неопределено Тогда	
		СведенияПодписанта.ИнформационнаяСистема = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ИдСистХран");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должн") <> Неопределено Тогда	
		СведенияПодписанта.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должн");
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДовер") <> Неопределено Тогда	
		СведенияДоверенности =  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДовер");
		ЭлектроннаяДоверенность = СведенияПодписанта.ЭлектроннаяДоверенность;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "НомДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ЕдиныйНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "НомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаНач") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаНач");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ВнутреннийНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаВнРегДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ДатаВнутреннейРегистрации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаВнРегДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.СведенияОСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм");
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДоверБум") <> Неопределено Тогда	
		СведенияДоверенности =  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СвДоверБум");
		БумажнаяДоверенность = СведенияПодписанта.БумажнаяДоверенность;
		
		ФИО = БумажнаяДоверенность.ФИО;
		ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Фамилия");
		ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Имя");
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Отчество") <> Неопределено Тогда
			ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Отчество");
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.ВнутреннийНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СвИдДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.Доверитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СвИдДовер");
		КонецЕсли;
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СведенияПодписанта, "СведенияПодписанта");	
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры

Процедура ПрочитатьСчетНаОплату101XDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка) Экспорт

	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	
	// Шапка.
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(
		НовыйЭД, "ИдентификаторДокумента", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИдФайл"));
	
	ФорматЭлектронногоДокумента = ФорматЭлектронногоДокументаПоИмени("СчетНаОплату", "1.01");
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ФорматЭлектронногоДокумента.МакетДерева);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "Функция", 
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Функция"));
	ДатаДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ДатаДок");	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДатаДокумента", 
		СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаДокумента, ЧастиДаты.Дата));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "НомерДокумента", 
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.НомерДок"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, "ВсегоНаименований", 
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ВсегоНаим"));
	
	// Основания.
	ОснованияЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Основание");
	Если ОснованияЭД.Количество() > 0 Тогда
		Основания = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "Основания");
		Для Каждого ОснованиеЭД Из ОснованияЭД Цикл 
			НоваяСтрока = Основания.Добавить();
			НоваяСтрока.Наименование = ОснованиеЭД.НаимОсн;
			НоваяСтрока.Номер = ОснованиеЭД.НомОсн;
			ДатаОсн = ОснованиеЭД.ДатаОсн;
			НоваяСтрока.Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаОсн, ЧастиДаты.Дата);
			НоваяСтрока.Идентификатор = ОснованиеЭД.ИдентОсн;
			НоваяСтрока.ИдентификаторГосКонтракта = ОснованиеЭД.ИдГосКон;
			НоваяСтрока.ДополнительныеСведения = ОснованиеЭД.ДопСвОсн;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Основания, "Основания");
	КонецЕсли;	
	
	// Получатель денежных средств.
	ПолучательДенежныхСредств = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПолучДнСр");
	ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, ПолучательДенежныхСредств, "ПолучательДенежныхСредств");
	
	// Плательщик.
	Плательщик = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ПлатСр");
	ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, Плательщик, "Плательщик");
	
	// Продавец.
	Продавец = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПрод");
	ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, Продавец, "Продавец");
	
	// Покупатель.
	Покупатель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СвПокуп");
	ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, Покупатель, "Покупатель");
	
	// Грузоотправитель.
	Грузоотправитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ГрузОт");
	ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, Грузоотправитель, "Грузоотправитель");
	
	// Грузополучатель.
	Грузополучатель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ГрузПолуч");
	ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, Грузополучатель, "Грузополучатель");
	
	// Товары.
	ТоварыЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.СведТовЦенПок");
	Товары = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ТаблицаТоваров");
	Для Каждого ТоварЭД Из ТоварыЭД Цикл
		
		НоваяСтрока = Товары.Добавить();
	    НоваяСтрока.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "НаимТов");
		НоваяСтрока.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "КолТов");
		НоваяСтрока.КодЕдиницыИзмерения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ОКЕИТов");
		НоваяСтрока.НаименованиеЕдиницыИзмерения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "НаимЕдИзм");
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ЦенаТов");
		НоваяСтрока.СтоимостьБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СтТовБезНДС");
		СтавкаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "НалСт");
		НоваяСтрока.СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(СтрЗаменить(СтавкаНДС, "%", ""));
		НоваяСтрока.СтоимостьСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СтТовУчНал");
		НоваяСтрока.СуммаСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СумСки"); //АПК:1036 не проверять строку на орфографию.
		НоваяСтрока.ЦенаБезСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ЦенаТовБезСки"); //АПК:1036 не проверять строку на орфографию.
		НоваяСтрока.СтоимостьБезНДСБезСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СтТовБезНДССки"); //АПК:1036 не проверять строку на орфографию.
		НоваяСтрока.СтоимостьСНДСБезСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СтТовУчНалБезСки"); //АПК:1036 не проверять строку на орфографию.
		СуммаНДС = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		СуммаНДС.Вставить("СуммаНалога", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СумНал.СумНал"));	
		СуммаНДС.Вставить("БезНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СумНал.БезНДС"));
		НоваяСтрока.СуммаНДС = СуммаНДС;
		СуммаНДСБезСкидки = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ТаблицаТоваров.НомерСтроки.СуммаНДСБезСкидки");
		СуммаНДСБезСкидки.Вставить("СуммаНалога", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СумНал.СумНал"));	
		СуммаНДСБезСкидки.Вставить("БезНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "СумНал.БезНДС"));	
		НоваяСтрока.СуммаНДСБезСкидки = СуммаНДСБезСкидки;	
		
		ИдентификаторТовара = "";
		Если ТоварЭД.ИнфПолФХЖ2.Количество() > 0 Тогда
			Для Каждого ТекущийЭлемент Из ТоварЭД.ИнфПолФХЖ2 Цикл
				
				ДопДанныеПодписанные = Новый ТаблицаЗначений;
				ДопДанныеПодписанные.Колонки.Добавить("Идентификатор");
				ДопДанныеПодписанные.Колонки.Добавить("Значение");

				Для Каждого Элемент Из ТекущийЭлемент.ТекстИнф Цикл
					Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Идентиф");
					Значение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Значение");
					
					Если Значение = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если Идентификатор = "ИД" Тогда
						ИдентификаторТовара = Значение;
					КонецЕсли;
                    				
					НоваяСтрокаДанных = ДопДанныеПодписанные.Добавить();
					НоваяСтрокаДанных.Идентификатор = Идентификатор;
					НоваяСтрокаДанных.Значение = Значение;
					
				КонецЦикла;
				
				НоваяСтрока.ДопДанныеПодписанные = ДопДанныеПодписанные;
				
            КонецЦикла;		
		КонецЕсли;
		
		ДополнительныеСведения = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, "ТаблицаТоваров.НомерСтроки.ДополнительныеСведения");
		ДополнительныеСведения.Признак = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.ПрТовРаб");
		ДополнительныеСведения.ДополнительнаяИнформацияПризнака = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.ДопПризн");	
		ДополнительныеСведения.КодСтраныПроисхождения = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.КодПроисх");
		ДополнительныеСведения.НаименованиеСтраныПроисхождения = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.КрНаимСтрПр");
		ДополнительныеСведения.ХарактеристикаТовара = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.ХарактерТов");
		ДополнительныеСведения.СортТовара = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.СортТов");
		ДополнительныеСведения.АртикулТовара = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.АртикулТов");
		ДополнительныеСведения.КодТовара = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.КодТов");
		ДополнительныеСведения.КодКаталога = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.КодКат");
		ДополнительныеСведения.КодВидаТовара = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварЭД, "ДопСведТов.КодВидТов");
		НоваяСтрока.ДополнительныеСведения = ДополнительныеСведения;
		
		СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
		СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторТовара;
		СопоставлениеПоУмолчанию.Наименование = НоваяСтрока.Наименование;
		СопоставлениеПоУмолчанию.ЕдиницаИзмерения = НоваяСтрока.НаименованиеЕдиницыИзмерения;
		СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = НоваяСтрока.КодЕдиницыИзмерения;
		Если ЗначениеЗаполнено(ДополнительныеСведения.ХарактеристикаТовара) Тогда
		    СопоставлениеПоУмолчанию.Характеристика = ДополнительныеСведения.ХарактеристикаТовара;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДополнительныеСведения.АртикулТовара) Тогда
		    СопоставлениеПоУмолчанию.Артикул = ДополнительныеСведения.АртикулТовара;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДополнительныеСведения.КодТовара) Тогда
		    СопоставлениеПоУмолчанию.КодНоменклатуры = ДополнительныеСведения.КодТовара;
		КонецЕсли;
		
		НоваяСтрока.Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(
			НоваяСтрока.ДопДанныеПодписанные, СопоставлениеПоУмолчанию);
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Товары, "ТаблицаТоваров");
	
	// Всего к оплате.
	ВсегоКОплатеЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ВсегоОпл");
	ВсегоКОплате = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ВсегоКОплате");
	ВсегоКОплате.СтоимостьБезНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВсегоКОплатеЭД, "СтТовБезНДСВсего");
	ВсегоКОплате.СтоимостьСНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВсегоКОплатеЭД, "СтТовУчНалВсего");
	ВсегоКОплате.Количество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВсегоКОплатеЭД, "КолНеттоВс");
	ВсегоКОплате.СуммаСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВсегоКОплатеЭД, "СумСкиВсего"); //АПК:1036 не проверять строку на орфографию.
	СуммаНалога = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "ВсегоКОплате.СуммаНалога");
	СуммаНалога.Вставить("СуммаНалога", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВсегоКОплатеЭД, "СумНалВсего.СумНал"));	
	СуммаНалога.Вставить("БезНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ВсегоКОплатеЭД, "СумНалВсего.БезНДС"));	
	ВсегоКОплате.СуммаНалога = СуммаНалога;
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ВсегоКОплате, "ВсегоКОплате");
	
	// Дополнительные сведения.
	ДополнительныеСведенияЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ДопСв");
	ДополнительныеСведения = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДополнительныеСведения");
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "ДатаНачТов") <> Неопределено Тогда
		ДатаНачалаПоставки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "ДатаНачТов");	
	    ДополнительныеСведения.ДатаНачалаПоставки = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаНачалаПоставки, ЧастиДаты.Дата);
	КонецЕсли;	
	ДополнительныеСведения.НазначениеПлатежа = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "НазнПл");
	ДополнительныеСведения.ИнформацияДляОплаты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "УникИнф");
	ДополнительныеСведения.СпособОплаты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "СпособОпл");
	ДополнительныеСведения.ПрименениеUTC = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "НалКоорТочВрПодТС");
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "ОгранОпДат") <> Неопределено Тогда
		ОграничениеПоДатеОплаты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "ОгранОпДат");
		ДополнительныеСведения.ОграничениеПоДатеОплаты = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОграничениеПоДатеОплаты, ЧастиДаты.Дата);
	КонецЕсли;	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "ОгранОпДатВр") <> Неопределено Тогда	
		ОграничениеПоДатеВремениОплаты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДополнительныеСведенияЭД, "ОгранОпДатВр");
		ДополнительныеСведения.ОграничениеПоДатеВремениОплаты = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОграничениеПоДатеВремениОплаты, ЧастиДаты.Дата);
	КонецЕсли;	
	Если ДополнительныеСведенияЭД.УслОпл.Количество() > 0 Тогда
		Для Каждого УсловиеОплаты Из ДополнительныеСведенияЭД.УслОпл Цикл
			НоваяСтрока = ДополнительныеСведения.УсловияОплаты.Добавить();
			НоваяСтрока.УсловиеОплаты = УсловиеОплаты;
		КонецЦикла;
	КонецЕсли;
	Если ДополнительныеСведенияЭД.УслОказПост.Количество() > 0 Тогда
		Для Каждого УсловиеОплаты Из ДополнительныеСведенияЭД.УслОказПост Цикл
			НоваяСтрока = ДополнительныеСведения.УсловияПоставки.Добавить();
			НоваяСтрока.УсловиеОплаты = УсловиеОплаты;
		КонецЦикла;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ДополнительныеСведения, "ДополнительныеСведения");	
		
	// Денежная единица.
	ДенежнаяЕдиницаЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.ДенИзм");
	ДенежнаяЕдиница = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, "ДенежнаяЕдиница");
	ДенежнаяЕдиница.НаименованиеВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "НаимОКВ");
	ДенежнаяЕдиница.КодВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "КодОКВ");
	ДенежнаяЕдиница.УсловныеЕдиницы = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "УЕ");
	ДенежнаяЕдиница.КурсВалюты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "КурсВал");
	ДенежнаяЕдиница.ОпределениеУсловныхЕдиниц = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "ОпрУЕ");
	СуммаНалога = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "ДенежнаяЕдиница.СуммаНалога");
	СуммаНалога.Вставить("СуммаНалога", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "СумНалВсего.СумНал"));	
	СуммаНалога.Вставить("БезНДС", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДенежнаяЕдиницаЭД, "СумНалВсего.БезНДС"));	
	ДенежнаяЕдиница.СуммаНалога = СуммаНалога;
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, ДенежнаяЕдиница, "ДенежнаяЕдиница");
	
	// Подписант.
	Подписанты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ.Подписант");
	СведенияПодписанта = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, "СведенияПодписанта");
	Подписант = Подписанты[0];
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должн") <> Неопределено Тогда	
		СведенияПодписанта.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должн");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ТипПодпис") <> Неопределено Тогда	
		СведенияПодписанта.ТипПодписи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ТипПодпис");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СпосПодтПолном") <> Неопределено Тогда	
		СведенияПодписанта.СпособПодтвержденияПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "СпосПодтПолном");
	КонецЕсли;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ДопСведПод") <> Неопределено Тогда	
		СведенияПодписанта.ДополнительныеСведения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ДопСведПод");
	КонецЕсли;
	ФИО = СведенияПодписанта.ФИО;
	ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Фамилия");
	ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Имя");
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Отчество") <> Неопределено Тогда
		ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "ФИО.Отчество");
	КонецЕсли;
	Для Каждого СведенияДоверенности Из Подписант.СвДоверЭл Цикл
		
		ЭлектроннаяДоверенность = СведенияПодписанта.ЭлектроннаяДоверенность;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "НомДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ЕдиныйНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "НомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ВнутреннийНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаВнРегДовер") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.ДатаВнутреннейРегистрации = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаВнРегДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ИдСистХран") <> Неопределено Тогда
		    ЭлектроннаяДоверенность.СведенияОСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ИдСистХран");
		КонецЕсли;
	
	КонецЦикла;
	Для Каждого СведенияДоверенности Из Подписант.СвДоверБум Цикл
		
		БумажнаяДоверенность = СведенияПодписанта.БумажнаяДоверенность;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.Дата = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ДатаДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.ВнутреннийНомер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ВнНомДовер");
		КонецЕсли;
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СвИдДовер") <> Неопределено Тогда
		    БумажнаяДоверенность.Доверитель = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СвИдДовер");
		КонецЕсли;
		ФИО = БумажнаяДоверенность.ФИО;
		ФИО.Фамилия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Фамилия");
		ФИО.Имя = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Имя");
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Отчество") <> Неопределено Тогда
			ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "ФИО.Отчество");
		КонецЕсли;
		
	КонецЦикла;
			
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СведенияПодписанта, "СведенияПодписанта");	
	
	НовыйЭД.ЗначениеРеквизита = ДеревоДанных;
	
КонецПроцедуры	

Процедура РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, НомерСтроки = Неопределено)
	
	ИдЭД = ?(ЭД.Свойства().Получить("ИД") = Неопределено, "", ЭД.Ид);
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ЗнДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
				НаимЕдИзм = "";
				Если ЗнДанных.Свойства().Получить("Наименование") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					НаимЕдИзм = ЗнДанных.Наименование;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.НаименованиеКраткое);
					НаимЕдИзм = ЗнДанных.НаименованиеКраткое;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("НаименованиеПолное", ЗнДанных.НаименованиеПолное);
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("МеждународноеСокращение", ЗнДанных.МеждународноеСокращение);
				КонецЕсли;
				ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, НаимЕдИзм,
					ЕдИзм, РеквизитыЕдИзм, ДанныеРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
				Если НЕ ЗнДанных.Свойства().Получить("Наименование") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				КонецЕсли;
				Если НЕ ЗнДанных.Свойства().Получить("Коэффициент") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Коэффициент", ЗнДанных.Коэффициент);
				КонецЕсли;
				ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код),
					ЗнДанных.Наименование, ЕдИзм, РеквизитыЕдИзм, ДанныеРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налог") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Если ВРег(ЗнДанных.ТипНалога) = "НДС" Тогда
					СписокТЧ.Добавить(ЗнДанных.ВеличинаСтавкиНалога, "СтавкаНДС");
					СписокТЧ.Добавить(ЗнДанных.Сумма, "СуммаНДС");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаБезНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаСУчетомНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "СуммаСНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("СрокГодности") Тогда
			СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗнДанных Цикл
				МассивЗначений = Новый Массив;
				Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
			КонецЦикла;
			
		// Схема 2:
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			РеквизитыЕдИзм = Новый Структура;
			Если ЗначениеЗаполнено(ЗнДанных) Тогда
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных);
				ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(ЗнДанных), РеквизитыЕдИзм);
				НаименованиеЕИ = ?(ЗначениеЗаполнено(ЕдИзм), ЕдИзм.Наименование, Неопределено);
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных), НаименованиеЕИ,
					ЕдИзм, РеквизитыЕдИзм, ДанныеРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			Если ТипЗнч(ЗнДанных.Налог) = Тип("СписокXDTO") Тогда
				МассивСтруктур = Новый Массив;
				Для Каждого Налог Из ЗнДанных.Налог Цикл
					СтруктураНалога = Новый Структура;
					Для Каждого СвойствоНалога Из Налог.Свойства() Цикл
						ЗначениеНалога = Налог.Получить(СвойствоНалога);
						Если НЕ ЗначениеЗаполнено(ЗначениеНалога) Тогда
							Продолжить;
						КонецЕсли;
						СтруктураНалога.Вставить(СвойствоНалога.Имя, ЗначениеНалога);
					КонецЦикла;
					МассивСтруктур.Добавить(СтруктураНалога);
				КонецЦикла;
				Если МассивСтруктур.Количество() > 0 Тогда
					СтруктураНалога = МассивСтруктур[0];
					СтавкаНДС = "";
					НДСУчтеноВСумме = "";
					СуммаНДС = 0;
					Если НЕ СтруктураНалога.Свойство("Ставка", СтавкаНДС) Тогда
						СтавкаНДС = НСтр("ru = 'без НДС'");
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("УчтеноВСумме", НДСУчтеноВСумме) Тогда
						НДСУчтеноВСумме = Ложь;
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("Сумма", СуммаНДС) Тогда
						СуммаНДС = 0;
					КонецЕсли;
					СписокТЧ.Добавить(СтавкаНДС, "СтавкаНДС");
					СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
					СписокТЧ.Добавить(НДСУчтеноВСумме, "НДСУчтеноВСумме");
				КонецЕсли;
				Если МассивСтруктур.Количество() > 1 Тогда
					СписокТЧ.Добавить(МассивСтруктур, "Налоги");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ДопРасходы") Тогда
			
			МассивСтруктур = Новый Массив;
			Для Каждого ЭлСписка Из ЗнДанных[ТекСвойство.Имя] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого СвойствоДопСписка Из ЭлСписка.Свойства() Цикл
					ЗначениеДопСписка = Налог.Получить(СвойствоДопСписка);
					Если НЕ ЗначениеЗаполнено(ЗначениеДопСписка) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураНалога.Вставить(СвойствоДопСписка.Имя, ЗначениеДопСписка);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
			СписокТЧ.Добавить(МассивСтруктур, ТекСвойство.Имя);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			
			ДопРеквизиты = Новый Структура;
			Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
			Если ЗначениеЗаполнено(Организация) Тогда
				ДопРеквизиты.Вставить("Организация", Организация);
			КонецЕсли;
			
			ПрочитатьСписокЗначенийРеквизитовCML(ЗнДанных.ЗначениеРеквизита, СписокТЧ, Ошибка, ДопРеквизиты);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Цена");
			
		Иначе
			СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
	Если ИдентификацияПоНоменклатуреКомпании Тогда
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
	Иначе
		// Номенклатура поставщиков.
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Упаковка       = Неопределено;
			
		НоменклатураПоставщика = СопоставлениеНоменклатурыКонтрагентовСлужебный.НоменклатураКонтрагентаПоВладельцуИИдентификатору(
			ВладелецНоменклатуры, ИдТовара);
			
		НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураКонтрагентов");
		НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
																РеквизитыНоменклатурыПоставщика, ДанныеРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			Номенклатура   = НоменклатураПоставщика.Номенклатура;
			Характеристика = НоменклатураПоставщика.Характеристика;
			Упаковка       = НоменклатураПоставщика.Упаковка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			СписокТЧ.Добавить(Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			СписокТЧ.Добавить(Упаковка, "Упаковка");
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДанныеРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация", Организация);
	
	Если ТипЗНЧ(НомерСтроки) = Тип("Число") Тогда
		НомерСтроки = НомерСтроки + 1;
	КонецЕсли;
	ПрочитатьДопДанныеСтрокиТЧ(Элемент, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
	
КонецПроцедуры

Процедура ПрочитатьПодписанта(НовыйЭД, Документ)
	
	Подписанты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "Подписант",,, Истина);
	
	Если Подписанты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписанта = Новый Структура("Должность, ФИО, ФИОПБОЮЛ, НаименованиеОрганизации");
	ФИО              = Новый Структура("Фамилия, Имя, Отчество");
	
	Для Каждого ТекПодписант Из Подписанты Цикл
		
		НаименованиеОрганизации = "";
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ЮЛ") <> Неопределено Тогда
			
			ФИО.Фамилия  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ЮЛ.ФИО.Фамилия" ,, "Строка");
			ФИО.Имя      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ЮЛ.ФИО.Имя"     ,, "Строка");
			ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ЮЛ.ФИО.Отчество",, "Строка");
			Должность    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ЮЛ.Должн"       ,, "Строка");
			
			ФИОРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			ФИОПБОЮЛ = "";

		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ФЛ") <> Неопределено Тогда
			
			ФИО.Фамилия  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ФЛ.ФИО.Фамилия" ,, "Строка");
			ФИО.Имя      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ФЛ.ФИО.Имя"     ,, "Строка");
			ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ФЛ.ФИО.Отчество",, "Строка");
			
			ФИОПБОЮЛ = "";
			Если Не (ФИО.Фамилия = "-" И ФИО.Имя = "-") Тогда
				ФИОПБОЮЛ = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
			
			Должность       = "";
			ФИОРуководителя = "";
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ИП") <> Неопределено Тогда
			
			ФИО.Фамилия  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ИП.ФИО.Фамилия" ,, "Строка");
			ФИО.Имя      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ИП.ФИО.Имя"     ,, "Строка");
			ФИО.Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекПодписант, "ИП.ФИО.Отчество",, "Строка");
			ФИОПБОЮЛ     = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			
			Должность       = "";
			ФИОРуководителя = "";
		
		КонецЕсли;
		
		ДанныеПодписанта.Должность = Должность;
		ДанныеПодписанта.ФИО       = ФИОРуководителя;
		ДанныеПодписанта.ФИОПБОЮЛ  = ФИОПБОЮЛ;
		ДанныеПодписанта.НаименованиеОрганизации = НаименованиеОрганизации;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Подписант", ДанныеПодписанта);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонТаблицыПередачаТоваров()
	
	МакетПередачаТоваров = МакетЭлектронногоДокумента("ТОРГ12_Продавец");
	ОбластьТовары = МакетПередачаТоваров.ПолучитьОбласть("Товары");
	ВысотаОбласти = ОбластьТовары.ВысотаТаблицы;
	
	Товары = Новый ТаблицаЗначений;
	
	Для н = 3 По ВысотаОбласти Цикл
		ЯчейкаТовары = ОбластьТовары.Область(н,3);
		Товары.Колонки.Добавить(ЯчейкаТовары.Текст);
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

Функция ШаблонТаблицыПередачаРабот()
	
	МакетПередачаТоваров = МакетЭлектронногоДокумента("Акт501_Исполнитель");
	ОбластьУслуги = МакетПередачаТоваров.ПолучитьОбласть("Услуги");
	ВысотаОбласти = ОбластьУслуги.ВысотаТаблицы;
	
	Услуги = Новый ТаблицаЗначений;
	
	Для н = 3 По ВысотаОбласти Цикл
		ЯчейкаТовары = ОбластьУслуги.Область(н,3);
		Услуги.Колонки.Добавить(ЯчейкаТовары.Текст);
	КонецЦикла;
	
	Возврат Услуги;

КонецФункции
//-

Процедура ПрочитатьДопДанныеФНС_502(ИнфПол, ДеревоДопДанных, ИмяНабораДанных)
	
	Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = ДеревоДопДанных();
	КонецЕсли;
	
	СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
	Если СтрокаДЗ = Неопределено Тогда
		СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
		СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
		СтрокаДЗ.ИмяРеквизита = "Набор";
	КонецЕсли;
	
	Если ИнфПол <> Неопределено Тогда
		
		КоллекцияЗначений = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнфПол, "ТекстИнф",,, Истина);
		Если КоллекцияЗначений = Неопределено Тогда
			Если ТипЗнч(ИнфПол) = Тип("ОбъектXDTO") Тогда
				// При мягком чтении СписокXDTO конвертируется в ОбъектXDTO если в нем одна строка.
				КоллекцияЗначений = Новый Массив;
				КоллекцияЗначений.Добавить(ИнфПол);
			Иначе
				КоллекцияЗначений = ИнфПол;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ИмяЗначениеРеквизита Из КоллекцияЗначений Цикл
			СтрДЗ                    = СтрокаДЗ.Строки.Добавить();
			СтрДЗ.ИмяРеквизита       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИмяЗначениеРеквизита, "Идентиф");
			СтрДЗ.ЗначениеРеквизита  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИмяЗначениеРеквизита, "Значен");
			СтрДЗ.ЮридическиЗначимый = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДопДанныеТЧ_ФНС502(ИнфПол, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки)
	
	Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = ДеревоДопДанных();
	КонецЕсли;
	
	СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
	Если СтрокаДЗ = Неопределено Тогда
		СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
		СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
		Если НомерСтроки = Неопределено Тогда
			СтрокаДЗ.ИмяРеквизита = "Набор";
		Иначе
			СтрокаДЗ.ИмяРеквизита = "Список";
		КонецЕсли;
	КонецЕсли;
	
	СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
	
	// Поиск подчиненных по разделителю "."
	ИндексРазделителяНомера = СтрНайти(Строка(НомерСтроки), ".");
	Если ИндексРазделителяНомера Тогда
		СтрокаПоискаРодителя = Лев(Строка(НомерСтроки), ИндексРазделителяНомера - 1);
		СтрокиДЗРодитель = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", СтрокаПоискаРодителя));
	КонецЕсли;
	
	Если СтрокиДЗ.Количество() > 0 Тогда
		СтрокаДЗ = СтрокиДЗ[0];
	ИначеЕсли ИндексРазделителяНомера И СтрокиДЗРодитель.Количество() Тогда
		СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
		СтрокаДЗ.ИмяРеквизита = "Нпп";
		СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
		ДеревоЭлектронногоДокументаБЭД.СкопироватьСтрокиДереваРекурсивно(СтрокаДЗ, СтрокиДЗРодитель[0]);
	Иначе
		СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
		СтрокаДЗ.ИмяРеквизита = "Нпп";
		СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
	КонецЕсли;

	Коллекция = ИнфПол;
	Если ТипЗнч(ИнфПол) = Тип("ОбъектXDTO") Тогда
		Коллекция = Новый Массив;
		Коллекция.Добавить(ИнфПол);
	КонецЕсли;
		
	Для Каждого ИмяЗначениеРеквизита Из Коллекция Цикл
		
		СтрДЗ = СтрокаДЗ.Строки.Добавить();
		
		Идентиф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИмяЗначениеРеквизита, "Идентиф",, "Строка");
		Значен  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИмяЗначениеРеквизита, "Значен" ,, "Строка");
		Если Врег(Прав(Идентиф, 7)) = ВРег("_Массив") Тогда
			СтрДЗ.ИмяРеквизита      = Лев(Идентиф, СтрДлина(Идентиф) - 7);
			СтрДЗ.ЗначениеРеквизита = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Значен);
		Иначе
			СтрДЗ.ИмяРеквизита      = Идентиф;
			СтрДЗ.ЗначениеРеквизита = Значен;
		КонецЕсли;
		
		СтрДЗ.ЮридическиЗначимый = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника)
	
	Если СведенияОбУчастнике = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.НаимОрг"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.ИННЮЛ"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.КПП"));
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч") <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч.НаимОрг"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч.ИныеСвед"));
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛНеУч") <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛНеУч.НаимОрг"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛНеУч.ИныеСвед"));
	
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИННФЛ"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.СвГосРегИП"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИныеСведения",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИныеСвед"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Фамилия"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Имя"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Отчество"));
	
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес") <> Неопределено Тогда

		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Индекс",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Индекс"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.КодРегиона",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.КодРегион"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Район",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Район"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Город",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Город"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.НаселПункт"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Улица",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Улица"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Дом",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Дом"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Корпус",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Корпус"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресРФ.Квартира",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Кварт"));
										
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресИнформация.КодСтраны",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф.КодСтр"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.АдресИнформация.АдресТекст",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф.АдрТекст"));
										
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".Адрес.КодГАР",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.КодГАР"));
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.Тлф"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.ЭлПочта"));
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.НомерСчета"));
				
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике.БанкРекв, "СвБанк") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.НаимБанк"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.БИК"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.КорСчет"));
		
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".КодОКПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ОКПО"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "СтруктПодр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ИнформацияДляУчастника",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИнфДляУчаст"));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаПередачаТоваров(ДеревоДанных, СведенияОбУчастнике, ВидУчастника)
	
	Если СведенияОбУчастнике = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвОрг") <> Неопределено Тогда
		
		СведенияЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвОрг.СвЮЛ");
		Если СведенияЮЛ <> Неопределено Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияЮЛ, "НаимОрг"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияЮЛ, "ИННЮЛ"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияЮЛ, "КПП"));
			
		КонецЕсли;
			
		СведенияИностраннаяОрганизация = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвОрг.ИнОрг");
		Если СведенияИностраннаяОрганизация <> Неопределено Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностраннаяОрганизация, "НаимОрг"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.Страна",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностраннаяОрганизация, "Страна"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.ИныеСведения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностраннаяОрганизация, "ИныеСвед"));
			
		КонецЕсли;
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИННФЛ"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.СвГосРегИП"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИныеСвед"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Фамилия"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Имя"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Отчество"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛ") <> Неопределено Тогда
		
		СведенияФЛ = СведенияОбУчастнике.ИдСв.СвФЛ;
		ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФЛ, "ИННФЛ"));
		
		ЗаполнитьРеквизитДерева(ДеревоДанных,ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФЛ, "ФИО.Фамилия"));
		
		ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФЛ, "ФИО.Имя"));
		
		ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФЛ, "ФИО.Отчество"));
	
	КонецЕсли;
	
	АдресУчастника = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес");
	Если АдресУчастника <> Неопределено Тогда
		
		КодСтраны = "";
		
		АдресРФ  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресУчастника, "АдрРФ");
		
		Если АдресРФ <> Неопределено Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Индекс",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Индекс"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.КодРегион",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "КодРегион"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Район",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Район"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Город",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Город"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.НаселПункт",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "НаселПункт"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Улица",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Улица"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Дом",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Дом"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Корпус",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Корпус"));
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Структурированный.Кварт",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(АдресРФ, "Кварт"));
			
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(АдресУчастника, "АдрИнф") Тогда
			
			ИнформацияОбАдресе = АдресУчастника.АдрИнф;
			КодСтраны = ИнформацияОбАдресе.КодСтр;
			
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(АдресУчастника, "АдрИно") Тогда
			
			ИнформацияОбАдресе = АдресУчастника.АдрИно;
			КодСтраны = ИнформацияОбАдресе.КодСтр;
			
		КонецЕсли;
		
		Если КодСтраны = "643" Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Произвольный",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОбАдресе, "АдрТекст"));
			
		Иначе
			Если ИнформацияОбАдресе <> Неопределено Тогда
				
				ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Иностранный.КодСтраны",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОбАдресе, "КодСтр"));
					
				ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Адрес.Иностранный.АдресТекст",
					РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИнформацияОбАдресе, "АдрТекст"));
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт") <> Неопределено Тогда
		
		ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Контакт.Телефон",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.Тлф"));
			
		ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".Контакт.ЭлектроннаяПочта",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.ЭлПочта"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв") <> Неопределено Тогда
		
		ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.НомерСчета"));
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк") <> Неопределено Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.НаимБанк"));
		
			ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.БИК"));
			
			КонецЕсли;
			
	КонецЕсли;
	
	ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".КодОКПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ОКПО"));
	
	ЗаполнитьРеквизитДерева(ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "СтруктПодр"));

КонецПроцедуры

Функция ДанныеУчастникаСделкиУПД_УКД(ВидУчастника, ДеревоДанных, Знач Свойства = "")
	
	// Если свойства не указаны, получим все возможные.
	Если Не ЗначениеЗаполнено(Свойства) Тогда
		Свойства = "Представление, ИНН_КПП, ИНН, КПП, Адрес, БанковскиеРеквизиты";
	КонецЕсли;
	Результат = Новый Структура(Свойства);
	Для Каждого КлючИЗначение Из Результат Цикл
		Результат.Вставить(КлючИЗначение.Ключ, "");
	КонецЦикла;
	
	ТипУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника");
	
	// Получим представление.
	Если Результат.Свойство("Представление") Тогда
		Если ТипУчастника = "ЮЛ" Тогда
			
			Результат.Представление = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");			
		ИначеЕсли ТипУчастника = "ИП" Тогда
			
			Фамилия  = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
			Имя      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Имя");
			Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.Отчество");
			
			Результат.Представление = НСтр("ru = 'ИП'") + " " + Фамилия + ?(ЗначениеЗаполнено(Имя), " " + Имя, "")
				+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
		ИначеЕсли ТипУчастника = "ФЛ" Тогда
			
			Фамилия  = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
			Имя      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
			Отчество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
			
			Результат.Представление = Фамилия + ?(ЗначениеЗаполнено(Имя), " " + Имя, "")
				+ ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
		ИначеЕсли ТипУчастника = "ИЛ" Тогда
			
			Результат.Представление = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		КонецЕсли;
	КонецЕсли;
	
	// Получим ИНН/КПП.
	Если Результат.Свойство("ИНН_КПП") ИЛИ Результат.Свойство("ИНН") ИЛИ Результат.Свойство("КПП") Тогда
		ИНН = "";
		КПП = "";
		
		Если ТипУчастника = "ЮЛ" Тогда
			
			ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
			КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");		
		ИначеЕсли ТипУчастника = "ИП" Тогда
			
			ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		ИначеЕсли ТипУчастника = "ФЛ" Тогда
			
			ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		ИначеЕсли ТипУчастника = "ИЛ" Тогда
			
			// не используется.
		КонецЕсли;
		
		Если Результат.Свойство("ИНН_КПП") Тогда
			Результат.ИНН_КПП = "" + ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП, "");
		КонецЕсли;
		
		Если Результат.Свойство("ИНН") Тогда
			Результат.ИНН = ИНН;
		КонецЕсли;
		
		Если Результат.Свойство("КПП") Тогда
			Результат.КПП = КПП;
		КонецЕсли;
	КонецЕсли;
	
	// Получим адрес.
	Если Результат.Свойство("Адрес") Тогда
		ТипАдреса = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес");
		
		Если ТипАдреса = "АдресРФ" Тогда
			СтруктураАдресаПоставщика = Новый Структура();
			
			СтруктураАдресаПоставщика.Вставить("Индекс",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс"));
			СтруктураАдресаПоставщика.Вставить("КодРегион",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона"));
			СтруктураАдресаПоставщика.Вставить("Район",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район"));
			СтруктураАдресаПоставщика.Вставить("Город",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город"));
			СтруктураАдресаПоставщика.Вставить("НаселПункт",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт"));
			СтруктураАдресаПоставщика.Вставить("Улица",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица"));
			СтруктураАдресаПоставщика.Вставить("Дом",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом"));
			СтруктураАдресаПоставщика.Вставить("Корпус",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус"));
			СтруктураАдресаПоставщика.Вставить("Кварт",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира"));
			
			Результат.Адрес = СобратьАдрес(СтруктураАдресаПоставщика);
			
		ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			
			КодСтр = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны");
			АдрТекст = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст");
			
			Результат.Адрес = ?(КодСтр = "643", "", КодСтр + ", ") + АдрТекст;
			
		ИначеЕсли ТипАдреса = "КодГАР" Тогда
			
			Результат.Адрес = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес.КодГАР");
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("БанковскиеРеквизиты") Тогда
		
		РеквизитыБанка = Новый Структура;
		
		РеквизитыБанка.Вставить("БИКБанка", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка"));
		
		РеквизитыБанка.Вставить("НаименованиеБанка", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка"));
		
		РеквизитыБанка.Вставить("НомерСчета", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета"));
		
		РеквизитыБанка.Вставить("КорреспондентскийСчетБанка", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка"));
		
		Результат.БанковскиеРеквизиты = РеквизитыБанка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДанныеУчастникаУПД_2019(ДеревоДанных, СведенияОбУчастнике, ВидУчастника)
	
	Если СведенияОбУчастнике = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.НаимОрг"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.ИННЮЛ"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.КПП"));
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч") <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч.НаимОрг"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч.ИныеСвед"));
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИННФЛ"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.СвГосРегИП"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИныеСвед"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Фамилия"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Имя"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Отчество"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ИННФЛ"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ИныеСвед"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ФИО.Фамилия"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ФИО.Имя"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ФИО.Отчество"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес") <> Неопределено Тогда

		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Индекс",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Индекс"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.КодРегиона",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.КодРегион"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Район",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Район"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Город",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Город"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.НаселПункт"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Улица",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Улица"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Дом",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Дом"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Корпус",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Корпус"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Квартира",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Кварт"));
										
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресИнформация.КодСтраны",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф.КодСтр"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресИнформация.АдресТекст",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф.АдрТекст"));
										
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.КодГАР",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.КодГАР"));
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.Тлф"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.ЭлПочта"));
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.НомерСчета"));
				
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике.БанкРекв, "СвБанк") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.НаимБанк"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.БИК"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.КорСчет"));
		
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".КодОКПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ОКПО"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "СтруктПодр"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ИнформацияДляУчастника",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИнфДляУчаст"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".КраткоеНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "КраткНазв"));
	
КонецПроцедуры

Функция ПолучитьДанныеУчастникаУПД(Знач СведенияОбУчастнике)
	
	Данные = Новый Структура;
	
	Данные.Вставить("ТипУчастника", Новый Структура);
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч") <> Неопределено Тогда
		
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.НаимОрг"));
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.ИННЮЛ"));
		Данные.ТипУчастника.ЮЛ.Вставить("КПП", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвЮЛУч.КПП"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч") <> Неопределено Тогда
		
		Данные.ТипУчастника.Вставить("ИЛ", Новый Структура);
		
		Данные.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч.НаимОрг"));
		Данные.ТипУчастника.ИЛ.Вставить("ИныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИнНеУч.ИныеСвед"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП") <> Неопределено Тогда
		
		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		
		Данные.ТипУчастника.ИП.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИННФЛ"));
		Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.СвГосРегИП"));
		Данные.ТипУчастника.ИП.Вставить("ИныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ИныеСвед"));
		Данные.ТипУчастника.ИП.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Фамилия"));
		Данные.ТипУчастника.ИП.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Имя"));
		Данные.ТипУчастника.ИП.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвИП.ФИО.Отчество"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ") <> Неопределено Тогда
		
		Данные.ТипУчастника.Вставить("ФЛ", Новый Структура);
		
		Данные.ТипУчастника.ФЛ.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ИННФЛ"));
		Данные.ТипУчастника.ФЛ.Вставить("ИныеСведения", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ИныеСвед"));
		Данные.ТипУчастника.ФЛ.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ФИО.Фамилия"));
		Данные.ТипУчастника.ФЛ.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ФИО.Имя"));
		Данные.ТипУчастника.ФЛ.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИдСв.СвФЛУчастФХЖ.ФИО.Отчество"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес") <> Неопределено Тогда
		
		Данные.Вставить("Адрес", Новый Структура);
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ") <> Неопределено Тогда
			
			Данные.Адрес.Вставить("АдресРФ", Новый Структура);
			
			Данные.Адрес.АдресРФ.Вставить("Индекс", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Индекс"));
			Данные.Адрес.АдресРФ.Вставить("КодРегиона", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.КодРегион"));
			Данные.Адрес.АдресРФ.Вставить("Район", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Район"));
			Данные.Адрес.АдресРФ.Вставить("Город", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Город"));
			Данные.Адрес.АдресРФ.Вставить("НаселенныйПункт", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.НаселПункт"));
			Данные.Адрес.АдресРФ.Вставить("Улица", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Улица"));
			Данные.Адрес.АдресРФ.Вставить("Дом", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Дом"));
			Данные.Адрес.АдресРФ.Вставить("Корпус", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Корпус"));
			Данные.Адрес.АдресРФ.Вставить("Квартира", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрРФ.Кварт"));
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф") <> Неопределено Тогда
			
			Данные.Адрес.Вставить("АдресИнформация", Новый Структура);
			
			Данные.Адрес.АдресИнформация.Вставить("КодСтраны", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф.КодСтр"));
			Данные.Адрес.АдресИнформация.Вставить("АдресТекст", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.АдрИнф.АдрТекст"));
			
		Иначе
			
			Данные.Вставить("КодГАР", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Адрес.КодГАР"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт") <> Неопределено Тогда
		
		Данные.Вставить("КонтактныеСведения", Новый Структура);
		
		Данные.КонтактныеСведения.Вставить("Телефон", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.Тлф"));
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "Контакт.ЭлПочта"));
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв") <> Неопределено Тогда
		
		Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
		
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.НомерСчета"));
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике.БанкРекв, "СвБанк") <> Неопределено Тогда
			
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.НаимБанк"));
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.БИК"));
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "БанкРекв.СвБанк.КорСчет"));
			
		КонецЕсли;
	КонецЕсли;
	
	Данные.Вставить("КодОКПО", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ОКПО"));
	Данные.Вставить("СтруктурноеПодразделение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "СтруктПодр"));
	Данные.Вставить("ИнформацияДляУчастника", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "ИнфДляУчаст"));
	Данные.Вставить("КраткоеНаименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУчастнике, "КраткНазв"));
	
	Возврат Данные;
	
КонецФункции


Процедура ПодготовитьСтруктуруСведенийОМаркировкеВТаблицеТоваров(НоваяСтрока)
	
	ТаблицаКодовУпаковок = Новый ТаблицаЗначений;
	ТаблицаКодовУпаковок.Колонки.Добавить("КодУпаковки", Новый ОписаниеТипов("Строка"));
	НоваяСтрока.СведенияОМаркировке = Новый Структура;
	НоваяСтрока.СведенияОМаркировке.Вставить("КодыИндивидуальныхУпаковок", ТаблицаКодовУпаковок);

КонецПроцедуры

Процедура ПодготовитьСтруктуруСведенийОМаркировкеВТаблицеТоваров_ГИСМТ(НоваяСтрока)
	
	ТаблицаКодовУпаковок = Новый ТаблицаЗначений;
	ТаблицаКодовУпаковок.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока.СведенияОМаркировкеДо = Новый Структура;
	НоваяСтрока.СведенияОМаркировкеДо.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодовУпаковок.Скопировать());
	НоваяСтрока.СведенияОМаркировкеДо.Вставить("ТранспортныеУпаковки", ТаблицаКодовУпаковок.Скопировать());
	
	НоваяСтрока.СведенияОМаркировке = Новый Структура;
	НоваяСтрока.СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодовУпаковок.Скопировать());
	НоваяСтрока.СведенияОМаркировке.Вставить("ТранспортныеУпаковки", ТаблицаКодовУпаковок.Скопировать());
	
КонецПроцедуры

Процедура ИзвлечьКодыМаркировкиИзДопДанныхДокумента(Знач СтрокаКодов, СтрокаТаблицыТоваров, ИмяТаблицыКодовМаркировки)
	
	Если СтрокаТаблицыТоваров.СведенияОМаркировке = Неопределено Тогда
		ПодготовитьСтруктуруСведенийОМаркировкеВТаблицеТоваров(СтрокаТаблицыТоваров);
	КонецЕсли;
	
	КодыМаркировки = СтрРазделить(СтрокаКодов, " ", Ложь);
	ОбработанныеКоды = Новый Массив;
	
	Для Каждого ЭлементМаркировки Из КодыМаркировки Цикл
		КодМаркировки = СокрЛП(ЭлементМаркировки);
		
		Если ОбработанныеКоды.Найти(КодМаркировки) = Неопределено Тогда
			НоваяСтрока = СтрокаТаблицыТоваров.СведенияОМаркировке[ИмяТаблицыКодовМаркировки].Добавить();
			НоваяСтрока.КодУпаковки = СокрЛП(КодМаркировки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ОписаниеПоляВидОборотаМаркированнымиТоварамиВКомиссионныхОперациях() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", "ВидОборота");
	Результат.Вставить("ИмяПоля", "ВидОборотаМАРК");
	
	Возврат Результат;	
КонецФункции

// Возвращает макет электронного документа по имени.
//
// Параметры:
//  ИмяМакета - Строка - название электронного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет с описанием структуры электронного документа.
//
Функция МакетЭлектронногоДокумента(Знач ИмяМакета)
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет(ИмяМакета);
	УстановитьПривилегированныйРежим(Ложь);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	Возврат Макет;
	
КонецФункции

Функция ИдентификаторВидаДокументаДляОтображенияВУчете() 
	
	Возврат "ВидДокумента";
	
КонецФункции

Функция ПеречислениеИзЗначенияXML(ЗначениеXML, ИмяПеречисления)

	МенеджерПеречисления = Перечисления[ИмяПеречисления];
	Результат = МенеджерПеречисления.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ЗначениеXML) Тогда
		МетаданныеПеречисления = Метаданные.Перечисления[ИмяПеречисления];
		Если МетаданныеПеречисления.ЗначенияПеречисления.Найти(ЗначениеXML) <> Неопределено Тогда
			Результат = МенеджерПеречисления[ЗначениеXML];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьРеквизитДерева(Дерево, Реквизит, Значение, ЗаполнятьПустые = Ложь)
	
	Если Не (ЗначениеЗаполнено(Значение) ИЛИ ЗаполнятьПустые) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение);
	
КонецПроцедуры


Функция ПолучитьИмяИЗначениеСуммыРазнИзФайла(СведенияОТоваре, ИмяЭлемента, ИмяКолонкиУвеличение, ИмяКолонкиУменьшение)
	Результат = Новый Структура("Имя,Значение", "", Неопределено);
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОТоваре, ИмяЭлемента) = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	СуммаРазн = Новый Массив;
	
	ЗначениеСвойства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОТоваре, ИмяЭлемента + ".СумУвел",, "Число",, Истина);
	ДобавитьВозможныеИмяИЗначениеЭлементаСуммы(СуммаРазн, ИмяКолонкиУвеличение, ЗначениеСвойства);
	
	ЗначениеСвойства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОТоваре, ИмяЭлемента + ".СумУм",, "Число",, Истина);
	ДобавитьВозможныеИмяИЗначениеЭлементаСуммы(СуммаРазн, ИмяКолонкиУменьшение, ЗначениеСвойства);
	
	Для каждого Элемент Из СуммаРазн Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ЗаполнитьЗначенияСвойств(Результат, Элемент);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ДобавитьВозможныеИмяИЗначениеЭлементаСуммы(СуммаРазн, Имя, Значение) 
	ИмяИЗначение = Новый Структура;
	ИмяИЗначение.Вставить("Имя", Имя);
	ИмяИЗначение.Вставить("Значение", Значение);
	
	СуммаРазн.Добавить(ИмяИЗначение);
	
КонецПроцедуры


#КонецОбласти

#Область ФорматыИВариантыЗаполнения

// Возвращает поддерживаемые форматы электронных документов.
//
// Возвращаемое значение:
//  Структура - форматы:
//   * УПД - Структура - форматы УПД (ММВ-7-15/155@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * УПД2019 - Структура - форматы УПД 2019 (ММВ-7-15/820@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * УКД - Структура - форматы УКД (ММВ-7-15/155@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * УКД2020 - Структура - форматы УКД (ЕД-7-26/736@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * ПередачаТоваров - Структура - форматы передачи товаров (ММВ-7-10/551@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * ПередачаРабот - Структура - форматы передачи результатов работ (ММВ-7-10/552@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * АктОРасхождениях - Структура - форматы документа о приемке и расхождениях (ММВ-7-15/423@):
//     ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * ТорговаяОперация - Структура - форматы торговой операции (ММВ-7-6/172@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * ПриемкаСдачаРабот - Структура - форматы приемки-сдачи работ (ММВ-7-6/172@):
//    ** ИнформацияПродавца - Строка - идентификатор формата информации продавца.
//    ** ИнформацияПокупателя - Строка - идентификатор формата информации покупателя.
//   * СчетФактура - Строка - идентификатор формата счета-фактуры (ММВ-7-6/93@).
//   * КорректировочныйСчетФактура - Строка - идентификатор формата корректировочного счета-фактуры (ММВ-7-6/93@).
//   * МашиночитаемаяДоверенность - Строка
//   * МашиночитаемаяДоверенность2022 - Строка
//   * ИзвещениеОПолучении - Строка - идентификатор формата извещения о получении (ММВ-7-6/363@).
//   * АктПриемкиСтроительныхРаботУслуг - Структура - ЕД-7-26/691@:
//    ** ИнформацияПодрядчика - Строка
//    ** ИнформацияЗаказчика - Строка
//   * ИзвещениеОПолучении - Строка
//   * ПредложениеОбАннулировании - Строка
//   * ПодтверждениеДатыОтправки - Строка - идентификатор формата подтверждения даты отправки (ММВ-7-6/363@).
//   * ПодтверждениеДатыПолучения - Строка - идентификатор формата подтверждения даты получения (ММВ-7-6/363@).
//   * УведомлениеОбУточнении - Строка - идентификатор формата уведомления об уточнении (ММВ-7-6/363@).
//   * УведомлениеОбУточнении0101 - Строка - идентификатор формата уведомления об уточнении 0101.
//   * СчетНаОплату101 - Строка - формат счета на оплату (версия 1.01).
//   * ДоговорнойДокумент101 - Строка - PDF/А-3 формат договорного документа (версия 1.01).
//   * АктСверкиВзаиморасчетов - Структура - форматы акта сверки взаимных расчетов (ЕД-7-26/405@):
//    ** ИнформацияОтправителя - Строка - идентификатор формата информации отправителя.
//    ** ИнформацияПолучателя - Строка - идентификатор формата информации получателя.
//   * БизнесСеть - Структура - формат бизнес-сети:
//    ** КоммерческиеПредложения - Строка - идентификатор формата коммерческих предложений.
//
Функция ПоддерживаемыеФорматы() Экспорт
	
	Форматы = Новый Структура;
	
	Форматы.Вставить("УПД", Новый Структура);
	Форматы.УПД.Вставить("ИнформацияПродавца", "ON_SCHFDOPPR_1_995_01_05_01");
	Форматы.УПД.Вставить("ИнформацияПокупателя", "ON_SCHFDOPPOK_1_995_02_05_01");

	Форматы.Вставить("УПД2019", Новый Структура);
	Форматы.УПД2019.Вставить("ИнформацияПродавца", "ON_NSCHFDOPPR_1_997_01_05_01");
	Форматы.УПД2019.Вставить("ИнформацияПокупателя", "ON_NSCHFDOPPOK_1_997_02_05_01");
	
	Форматы.Вставить("УКД", Новый Структура);
	Форматы.УКД.Вставить("ИнформацияПродавца", "ON_KORSCHFDOPPR_1_996_01_05_01");
	Форматы.УКД.Вставить("ИнформацияПокупателя", "ON_KORSCHFDOPPOK_1_996_02_05_01");

	Форматы.Вставить("УКД2020", Новый Структура);
	Форматы.УКД2020.Вставить("ИнформацияПродавца", "ON_NKORSCHFDOPPR_1_996_03_05_01");
	Форматы.УКД2020.Вставить("ИнформацияПокупателя", "ON_NKORSCHFDOPPOK_1_996_04_05_01");
		
	Форматы.Вставить("ПередачаТоваров", Новый Структура);
	Форматы.ПередачаТоваров.Вставить("ИнформацияПродавца", "DP_TOVTORGPR_1_992_01_05_01");
	Форматы.ПередачаТоваров.Вставить("ИнформацияПокупателя", "DP_TOVTORGPOK_1_992_02_05_01");
	
	Форматы.Вставить("ПередачаРабот", Новый Структура);
	Форматы.ПередачаРабот.Вставить("ИнформацияПродавца", "DP_REZRUISP_1_990_01_05_01");
	Форматы.ПередачаРабот.Вставить("ИнформацияПокупателя", "DP_REZRUZAK_1_990_02_05_01");
	
	Форматы.Вставить("АктОРасхождениях", Новый Структура);
	Форматы.АктОРасхождениях.Вставить("ИнформацияПокупателя", "DP_PRIRASXPRIN_1_994_01_05_01");
	
	Форматы.Вставить("ТорговаяОперация", Новый Структура);
	Форматы.ТорговаяОперация.Вставить("ИнформацияПродавца", "DP_OTORG12_1_986_00_05_0");
	Форматы.ТорговаяОперация.Вставить("ИнформацияПокупателя", "DP_PTORG12_1_989_00_05_01");
	
	Форматы.Вставить("ПриемкаСдачаРабот", Новый Структура);
	Форматы.ПриемкаСдачаРабот.Вставить("ИнформацияПродавца", "DP_IAKTPRM_1_987_00_05_01");
	Форматы.ПриемкаСдачаРабот.Вставить("ИнформацияПокупателя", "DP_ZAKTPRM_1_990_00_05_01");
	
	Форматы.Вставить("АктСверкиВзаиморасчетов", Новый Структура);
	Форматы.АктСверкиВзаиморасчетов.Вставить("ИнформацияОтправителя", "ON_AKTSVEROTP_1_972_01_05_01_01");
	Форматы.АктСверкиВзаиморасчетов.Вставить("ИнформацияПолучателя", "ON_AKTSVERPOL_1_972_02_05_01_01");
	
	Форматы.Вставить("СчетФактура", "ON_SFAKT_1_897_01_05_02");
	Форматы.Вставить("КорректировочныйСчетФактура", "ON_KORSFAKT_1_911_01_05_02");

	Форматы.Вставить("МашиночитаемаяДоверенность", МашиночитаемыеДоверенности.ПилотныйФорматМЧД());
	Форматы.Вставить("МашиночитаемаяДоверенность2022", МашиночитаемыеДоверенности.ФорматМЧД_2022());
	
	Форматы.Вставить("СчетНаОплату101", "ON_CHETOP_1_998_01_01_01");
	ИмяФормата = Обработки.ФорматДоговорнойДокумент101.ИмяФормата();
	Форматы.Вставить("ДоговорнойДокумент101", ИмяФормата);
	
	Форматы.Вставить("АктПриемкиСтроительныхРаботУслуг", Новый Структура);
	ИмяФормата = Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияПодрядчикаЭДО.ИмяФормата();
	Форматы.АктПриемкиСтроительныхРаботУслуг.Вставить("ИнформацияПодрядчика", ИмяФормата);
	ИмяФормата = Обработки.ФорматАктПриемкиСтроительныхРаботИнформацияЗаказчикаЭДО.ИмяФормата();
	Форматы.АктПриемкиСтроительныхРаботУслуг.Вставить("ИнформацияЗаказчика", ИмяФормата);
	
	// Номер схемы не учитывается при идентификации формата.
	Форматы.Вставить("ИзвещениеОПолучении", "DP_IZVPOL_1_982_00_01_02_01");
	Форматы.Вставить("ПредложениеОбАннулировании", "DP_PRANNUL_1_985_00_01_01_01");
	Форматы.Вставить("ПодтверждениеДатыОтправки", "DP_PDOTPR_1_983_00_01_02_01");
	Форматы.Вставить("ПодтверждениеДатыПолучения", "DP_PDPOL_1_984_00_01_02_01");
	Форматы.Вставить("УведомлениеОбУточнении", "DP_UVUTOCH_1_985_00_01_02_01");
	Форматы.Вставить("УведомлениеОбУточнении0101", "DP_UVUTOCH_1_985_00_01_01");
	
	Форматы.Вставить("БизнесСеть", Новый Структура);
	Форматы.БизнесСеть.Вставить("КоммерческиеПредложения", "BNCommerceOffering");
	
	Возврат Форматы;
	
КонецФункции

#КонецОбласти

#Область XDTO

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Возврат ФорматыЭДО.ПолучитьОбъектТипаCML(Тип, ВерсияСхемы);
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы) Экспорт
	
	Возврат ФорматыЭДО.ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	
КонецФункции

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ИмяОбъекта, ИмяСвойства, ВидФасета) Экспорт
	
	Возврат ФорматыЭДО.ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ИмяОбъекта, ИмяСвойства, ВидФасета);
	
КонецФункции

Функция ДвоичныеДанныеОбъектаXDTO(Знач ОбъектXDTO, Знач Кодировка = "windows-1251", Знач УказаниеТипа = Ложь, Знач ЛокальноеИмя = "")
	
	НазначениеТипа = ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное);
	
	Поток = Новый ПотокВПамяти();
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьПоток(Поток, Кодировка);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	Если ПустаяСтрока(ЛокальноеИмя) Тогда
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ОбъектXDTO,,,, НазначениеТипа);
	Иначе
		ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ОбъектXDTO, ЛокальноеИмя,,, НазначениеТипа);
	КонецЕсли;
	НоваяЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанные;
	
КонецФункции

Функция ПроверитьОбъектXDTO(Знач ОбъектXDTO, Ошибки)
	
	Результат = Истина;
	
	Попытка
		ОбъектXDTO.Проверить();
	Исключение
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Ошибка проверки объекта XDTO:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ПространствоИмен

Функция ПространствоИмен_УПД2019_ИнформацияПродавца()
	
	Возврат "ON_NSCHFDOPPR_2019";
	
КонецФункции

Функция ПространствоИмен_УПД2019_ИнформацияПокупателя()
	
	Возврат "ON_NSCHFDOPPOK_2019";
	
КонецФункции

Функция ПространствоИмен_УПД_ИнформацияПродавца()
	
	Возврат "ON_SCHFDOPPR_5_01";
	
КонецФункции

Функция ПространствоИмен_УПД_ИнформацияПокупателя()
	
	Возврат "ON_SCHFDOPPOK_5_01";
	
КонецФункции

Функция ПространствоИмен_ПередачаТоваров_ИнформацияПродавца()
	
	Возврат "TORGPR";
	
КонецФункции

Функция ПространствоИмен_ПередачаТоваров_ИнформацияПокупателя()
	
	Возврат "TORGPOK";
	
КонецФункции

Функция ПространствоИмен_ПередачаУслуг_ИнформацияПродавца()
	
	Возврат "RUISP";
	
КонецФункции

Функция ПространствоИмен_ПередачаУслуг_ИнформацияПокупателя()
	
	Возврат "RUZAK";
	
КонецФункции

Функция ПространствоИмен_АктОРасхождениях_ИнформацияПокупателя()
	
	Возврат "DP_PRIRASXPRIN_5_01";
	
КонецФункции

Функция ПространствоИмен_ПриемкаСдачаРабот_ИнформацияПокупателя()
	
	Возврат "ZAKTPRM_5_01_02";
	
КонецФункции

Функция ПространствоИмен_УКД_ИнформацияПродавца()
	
	Возврат "ON_KORSCHFDOPPR";
	
КонецФункции

Функция ПространствоИмен_УКД_ИнформацияПокупателя()
	
	Возврат "ON_KORSCHFDOPPOK";
	
КонецФункции

Функция ПространствоИмен_УКД2020_ИнформацияПродавца()
	
	Возврат "ON_NKORSCHFDOPPR_2020";
	
КонецФункции

Функция ПространствоИмен_УКД2020_ИнформацияПокупателя()
	
	Возврат "ON_NKORSCHFDOPPOK_2020";
	
КонецФункции

Функция ПространствоИмен_ИзвещениеОПолучении()
	
	Возврат "DP_IZVPOL";
	
КонецФункции

Функция ПространствоИмен_ПредложениеОбАннулировании()
	
	Возврат "DP_PRANNUL";
	
КонецФункции

Функция ПространствоИмен_УведомлениеОбУточнении()
	
	Возврат "DP_UVUTOCH";
	
КонецФункции

Функция ПространствоИмен_КоммерческиеПредложения()
	
	Возврат "http://1cbn.ru/bn-commerce-offering/XMLSchema";
	
КонецФункции

Функция ПространствоИмен_АктСверкиВзаиморасчетов_ИнформацияОтправителя()
	
	Возврат "ON_AKTSVEROTP_1_972_01_05_01_01";
	
КонецФункции

Функция ПространствоИмен_АктСверкиВзаиморасчетов_ИнформацияПолучателя()
	
	Возврат "ON_AKTSVERPOL_1_972_02_05_01_01";
	
КонецФункции

Функция ПространствоИмен_СчетНаОплату101()
	
	Возврат "ON_CHETOP_1_998_01_01_01";
	
КонецФункции

#КонецОбласти

#Область ФНС

Функция ДатаФНС(Знач ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

#КонецОбласти

#Область МашиночитаемыеДоверенности

// Заполняет номера машиночитаемых доверенностей из файла формата ФНС. 
//
// Параметры:
//  НомераДоверенностей - см. ФорматыЭДО.НомераМашиночитаемыхДоверенностей
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  Формат - Строка
//
Процедура ЗаполнитьНомераМашиночитаемыхДоверенностей(НомераДоверенностей, ОписаниеФайла, Формат) Экспорт
	
	ФорматыФНС = ПоддерживаемыеФорматы();
	
	Если Формат = ФорматыФНС.УПД2019.ИнформацияПродавца Тогда
		ЗаполнитьНомераДоверенностей_УПД2019_ИнформацияПродавца(НомераДоверенностей, ОписаниеФайла);
	КонецЕсли; 
	
КонецПроцедуры

#Область УПД2019_ИнформацияПродавца

// Заполняет номера машиночитаемых доверенностей из файла формата УПД2019 информация продавца. 
//
// Параметры:
//  НомераДоверенностей - см. ФорматыЭДО.НомераМашиночитаемыхДоверенностей
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//
Процедура ЗаполнитьНомераДоверенностей_УПД2019_ИнформацияПродавца(НомераДоверенностей, ОписаниеФайла)
	
	Поток = ОписаниеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "ИнфПолФХЖ1"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			НомераДоверенностей = НомераМЧДИзДополнительныхДанных_УПД2019_ИнформацияПродавца(ЧтениеXML);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Поток.Закрыть();
	
КонецПроцедуры

// Извлекает номера МЧД из дополнительных данных УПД2019 информация продавца.
// 
// Параметры:
//  ЧтениеXML - ЧтениеXML - начало элемента ИнфПолФХЖ1.
// 
// Возвращаемое значение:
//  Массив из Строка
Функция НомераМЧДИзДополнительныхДанных_УПД2019_ИнформацияПродавца(ЧтениеXML)
	
	Результат = Новый Массив;
	ИмяЭлемента = "ИнфПолФХЖ1";
	
	Если ЧтениеXML.Имя <> ИмяЭлемента
		ИЛИ ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = ИмяЭлемента Тогда
			
			Возврат Результат;
			
		ИначеЕсли ЧтениеXML.Имя = "ТекстИнф"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЧтениеXML.ЗначениеАтрибута("Идентиф") = "МЧД" Тогда
			
			Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Значен"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщегоНазначения

Процедура ЗаполнитьНаименованиеВалютыXML(ЭлементXDTO, КодВалюты, Ошибки)
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда
		ДанныеПоКлассификатору = ИнтеграцияБСПБЭД.ДанныеВалютыПоКлассификатору(КодВалюты);
		Если ДанныеПоКлассификатору <> Неопределено Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЭлементXDTO, "НаимОКВ", ДанныеПоКлассификатору.Наименование, , Ошибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьФизЛицоПодписанта(Подписант, ПространствоИмен, Ошибки)
	
	ФЛ = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ", ПространствоИмен);
	ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФЛ.ФИО", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", "-", , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛ, "ФИО", ФИО, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФЛ", ФЛ, Истина, Ошибки);
	
КонецПроцедуры

Процедура ЗаполнитьДокументТипXML(ТипДокумента, ИмяЭлемента, ДанныеОбИзмененииСтоимости, ДеревоДанных, ПространствоИменСхемы, Ошибки) 

	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ТипДокумента);
	Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
		СтрокаТаблицы = ДеревоДанных.Строки.Найти(ТипДокумента, "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Строка Из СтрокаТаблицы.Строки Цикл
				Тип = СтрШаблон("Файл.Документ.СодФХЖ3.%1", ИмяЭлемента);
				ТекущийДокумент = ПолучитьОбъектТипаCML(Тип, ПространствоИменСхемы);
				
				ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументНаименование", ТипДокумента);
				ДокументНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущийДокумент, "НаимОсн", ДокументНаименование, Истина, Ошибки);
				
				ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументНомер", ТипДокумента);
				ДокументНомер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть);
				Если ЗначениеЗаполнено(ДокументНомер) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущийДокумент, "НомОсн", ДокументНомер, Истина, Ошибки);
				КонецЕсли;
				
				ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументДата", ТипДокумента);
				ДокументДата = ДатаФНС(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть));
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущийДокумент, "ДатаОсн", ДокументДата, Истина, Ошибки);
				
				ПолныйПуть = СтрШаблон("%1.НомерСтроки.ДокументДопСведения", ТипДокумента);
				ДокументСведения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Строка, ПолныйПуть,,, Истина);
				Если ЗначениеЗаполнено(ДокументСведения) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТекущийДокумент, "ДопСвОсн", ДокументСведения, Истина, Ошибки);					
				КонецЕсли;
				
				ДанныеОбИзмененииСтоимости[ИмяЭлемента].Добавить(ТекущийДокумент);
				
			КонецЦикла;
		КонецЕсли;
	Иначе
		Тип = СтрШаблон("Файл.Документ.СодФХЖ3.%1", ИмяЭлемента);
		ОбъектТипаCML = ПолучитьОбъектТипаCML(Тип, ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОбъектТипаCML, "НаимОсн", 
			ПредставлениеПустогоНаименованияДокументаОснования(), Истина, Ошибки);
		
		ДанныеОбИзмененииСтоимости[ИмяЭлемента].Добавить(ОбъектТипаCML);
		
	КонецЕсли;

КонецПроцедуры

Функция ПредставлениеПустогоНаименованияДокументаОснования() 
		Возврат НСтр("ru = 'Без документа-основания'");
КонецФункции


Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита);

КонецПроцедуры

Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

Процедура СформироватьДопСтроку(МассивСтрок, Рекв, ПространствоИмен, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, Ошибки, Знач УровеньВложенности)
	
	УровеньВложенности = УровеньВложенности + 1;
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если Не ЮридическиЗначимый Тогда
			Если СтрокаДЗ.ЮридическиЗначимый Тогда 
				// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
				// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
				// будут передаваться отдельно от не значимых, в разных файлах).
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , Ошибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , Ошибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			СформироватьДопСтроку(МассивСтрокДЗ, Реквизит, ПространствоИмен, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, Ошибки, УровеньВложенности);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Рекв.Реквизит.Добавить(Реквизит);
			ЕстьДанныеДляДопФайла = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьВремяЭСФСтрокой(ДатаВремя)
	
	ВремяЭСФ = Формат(Час(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ + Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ + Формат(Секунда(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=");
	
	Возврат ВремяЭСФ;
	
КонецФункции

Функция СуммаНДССФПривестиКТребуемомуФормату(СуммаНДС)
	
	Если СтрНайти(СуммаНДС, ".") > 0 ИЛИ СтрНайти(СуммаНДС, ",") > 0 ИЛИ СтрНайти(СуммаНДС, "-") > 0 Тогда
		ВозвращаемаяСумма = Число(СуммаНДС);
	Иначе
		ВозвращаемаяСумма = СуммаНДС;
	КонецЕсли;
	
	Возврат ВозвращаемаяСумма;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Преобразует значение представление "ВидыОперацийЭД" в корректное представление
// учитывает локализацию и различие между синонимом и именем.
// 
// Параметры:
//  ВидОперацииЭД - ПеречислениеСсылка.ВидыОперацийЭД.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВидОперацииЭДСтрокой(ВидОперацииЭД)
	
	Если ТипЗнч(ВидОперацииЭД) <> Тип("ПеречислениеСсылка.ВидыОперацийЭД") Тогда
		Возврат "";
	КонецЕсли;
	
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия Тогда
		Возврат "Продажа";
	КонецЕсли;
	
	ВидОперацииСтрокой = XMLСтрока(ВидОперацииЭД);
	
	Возврат ВидОперацииСтрокой;
	
КонецФункции

// Преобразует строковое представление в значение перечисления "ВидыОперацийЭД"
// учитывает локализацию и различие между синонимом и именем.
// 
// Параметры:
//  ВидОперации - Строка.
//  
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийЭД.
//
Функция ВидОперацииЭДПоСтроке(ВидОперации) Экспорт
	
	ВидОперацииЭДСтрокой = ВидОперации;
	
	Если ВидОперации = "Продажа" Тогда
		ВидОперацииЭДСтрокой = "ПродажаКомиссия";
	КонецЕсли;
	
	ВидОперацииЭД = ПеречислениеИзЗначенияXML(ВидОперацииЭДСтрокой, "ВидыОперацийЭД");
	
	Возврат ВидОперацииЭД;
	
КонецФункции

Процедура ПрочитатьДанныеПоРасчетномуСчету(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДанныеРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Банк.БИК"));
		РеквизитыБанка.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Банк.Наименование"));
		РеквизитыБанка.Вставить("КоррСчет",     РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Банк.СчетКорреспондентский"));
		
	Иначе
		
		РеквизитыБанка = Новый Структура;
		
		РеквизитыБанка.Вставить("Код",
			?(РасчетныйСчетXDTO.Свойство("БИК"), РасчетныйСчетXDTO.БИК, ""));
			
		РеквизитыБанка.Вставить("Наименование",
			?(РасчетныйСчетXDTO.Свойство("НаименованиеБанка"), РасчетныйСчетXDTO.НаименованиеБанка, ""));
			
		РеквизитыБанка.Вставить("КоррСчет",
			?(РасчетныйСчетXDTO.Свойство("СчетКорреспондентский"), РасчетныйСчетXDTO.СчетКорреспондентский, ""));
		
	КонецЕсли;
	
	БанкСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	// Создаем объект банка в дереве разбора.
	ТипБанкиВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
		БанкСсылка, РеквизитыБанка, ДанныеРазбора, Ошибка);
	
	// Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
			
			ЕстьБанкКорреспондент = Истина;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",          РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "БанкКорреспондент.БИК",, "Строка"));
			РеквизитыБанкаКорреспондента.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "БанкКорреспондент.Наименование",, "Строка"));
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "БанкКорреспондент.СчетКорреспондентский",, "Строка"));
			
		КонецЕсли;
	ИначеЕсли РасчетныйСчетXDTO.Свойство("БИККорр") И ЗначениеЗаполнено(РасчетныйСчетXDTO.БИККорр) Тогда
		
		ЕстьБанкКорреспондент = Истина;
		
		РеквизитыБанкаКорреспондента = Новый Структура;
		РеквизитыБанкаКорреспондента.Вставить("Код",          ?(РасчетныйСчетXDTO.Свойство("БИККорр"),          РасчетныйСчетXDTO.БИККорр,          ""));
		РеквизитыБанкаКорреспондента.Вставить("Наименование", ?(РасчетныйСчетXDTO.Свойство("НаименованиеКорр"), РасчетныйСчетXDTO.НаименованиеКорр, ""));
		РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     ?(РасчетныйСчетXDTO.Свойство("СчетКорр"),         РасчетныйСчетXDTO.СчетКорр,         ""));
		
	КонецЕсли;
	
	Если ЕстьБанкКорреспондент Тогда
		
		БанкКорреспондентСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
			"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДанныеРазбора,
			Ошибка);
		
	КонецЕсли;
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета",
		?(ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO"),
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "НомерСчета"),
			РасчетныйСчетXDTO.НомерСчета));
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		РеквизитыБанковскогоСчета.Вставить("Комментарий", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Комментарий",, "Строка"));
	ИначеЕсли ТипЗнч(РасчетныйСчетXDTO) = Тип("Структура") И РасчетныйСчетXDTO.Свойство("Комментарий") Тогда
		РеквизитыБанковскогоСчета.Вставить("Комментарий", РасчетныйСчетXDTO.Комментарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействие.НайтиСсылку(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора.
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета,
		НСтр("ru = 'Номер счета:'") + " " + РеквизитыБанковскогоСчета.НомерСчета,
		БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДанныеРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ЕстьБанкКорреспондент Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
	КонецЕсли;
	
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеКонтрагента(Элемент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Роль = "")
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани) Тогда
		ВидКонтрагента = "Организации";
		Если Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
			ИмяРеквизита = "Контрагент";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "Комиссионер" Тогда
		Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий) Тогда
			ВидКонтрагента = "Организации";
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		Иначе
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = "Комиссионер";
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		
	ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		
	ИначеЕсли Роль = "Грузоотправитель"  Тогда
		
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = Роль;
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		
	ИначеЕсли Роль = "Грузополучатель"  Тогда
			
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = Роль;
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
			
	ИначеЕсли Роль = "ПокупательКомиссии" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Покупатель";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаПокупателя";
	КонецЕсли;
	
	// Контрагент
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "OTORG12"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM2"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OKORDOC"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OTORG_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "PTORG_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT_5_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT_5_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT" Тогда
		ИдКонтрагента = "";
		Если Элемент.ИдСв <> Неопределено Тогда
			Если Элемент.ИдСв.СвЮЛ <> Неопределено И НЕ Элемент.ИдСв.СвЮЛ.НаимОрг = "---" Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("Наименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвЮЛ.ИННЮЛ);
				РеквизитыКонтрагента.Вставить("КПП", Элемент.ИдСв.СвЮЛ.КПП);
				Если Элемент.ИдСв.СвЮЛ.Свойства().Получить("ОКОПФ") <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("ОКОПФ", Элемент.ИдСв.СвЮЛ.ОКОПФ);
				КонецЕсли;
				Если ЗначениеЗаполнено(Элемент.ИдСв.СвЮЛ.ИННЮЛ) Тогда
					ИдКонтрагента = Элемент.ИдСв.СвЮЛ.ИННЮЛ + Элемент.ИдСв.СвЮЛ.КПП;
				КонецЕсли;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			ИначеЕсли Элемент.ИдСв.СвФЛ <> Неопределено Тогда
				ПолноеНаименование = Элемент.ИдСв.СвФЛ.ФИОИП.Фамилия +" "+ Элемент.ИдСв.СвФЛ.ФИОИП.Имя
					+ " " + Элемент.ИдСв.СвФЛ.ФИОИП.Отчество;
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", ПолноеНаименование);
				РеквизитыКонтрагента.Вставить("Наименование", ПолноеНаименование);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвФЛ.ИННФЛ);
				ИдКонтрагента = Элемент.ИдСв.СвФЛ.ИННФЛ;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если ЭлементАдрес.АдрРФ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));
			ИначеЕсли ЭлементАдрес.АдрИно <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
			ИначеЕсли ЗначениеЗаполнено(ЭлементАдрес.АдрТекст) Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("Контакт") <> Неопределено Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ЭлементКонтакты.Тлф <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ЭлементКонтакты.Факс <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "TORGPR"
		ИЛИ Элемент.Тип().URIПространстваИмен = "RUISP" Тогда
		
		СведенияЮрЛица = Неопределено;
		Если Не Элемент.ИдСв.СвОрг = Неопределено Тогда
			СведенияЮрЛица = Элемент.ИдСв.СвОрг.СвЮЛ;
		КонецЕсли;
		СведенияФизЛица = Элемент.ИдСв.СвФЛ;
		
		Если Не СведенияЮрЛица = Неопределено И НЕ СведенияЮрЛица.НаимОрг = "---" Тогда
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", СведенияЮрЛица.НаимОрг);
			РеквизитыКонтрагента.Вставить("ИНН", СведенияЮрЛица.ИННЮЛ);
			РеквизитыКонтрагента.Вставить("КПП", СведенияЮрЛица.КПП);
			
			Если ЗначениеЗаполнено(СведенияЮрЛица.ИННЮЛ) Тогда
				ИдКонтрагента = СведенияЮрЛица.ИННЮЛ + СведенияЮрЛица.КПП;
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			
		ИначеЕсли Не СведенияФизЛица = Неопределено Тогда
			
			ФИОФизЛица = СведенияФизЛица.ФИО;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование",
			ФИОФизЛица.Фамилия +" "+ ФИОФизЛица.Имя
			+ " " + ФИОФизЛица.Отчество);
			РеквизитыКонтрагента.Вставить("ИНН", СведенияФизЛица.ИННФЛ);
			ИдКонтрагента = СведенияФизЛица.ИННФЛ;
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
			
		Иначе
			СведенияИностраннаяОрганизация = Неопределено;
			Если Не Элемент.ИдСв.СвОрг = Неопределено Тогда
				СведенияИностраннаяОрганизация = Элемент.ИдСв.СвОрг.ИнОрг;
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", СведенияИностраннаяОрганизация.НаимОрг);
			РеквизитыКонтрагента.Вставить("Наименование", СведенияИностраннаяОрганизация.НаимОрг);
			РеквизитыКонтрагента.Вставить("Страна", СведенияИностраннаяОрганизация.Страна);
			РеквизитыКонтрагента.Вставить("ИныеСведения", СведенияИностраннаяОрганизация.ИныеСвед);
			
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если Не ЭлементАдрес.АдрРФ = Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));
				
			ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементАдрес, "АдрИнф") Тогда
				Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементАдрес.АдрИнф, "АдрТекст") Тогда
					РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИнф.АдрТекст);
				КонецЕсли;
				Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементАдрес.АдрИнф, "КодСтр") Тогда
					РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИнф.КодСтр);
				КонецЕсли;
				
			ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементАдрес, "АдрИно") Тогда
				Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементАдрес.АдрИно, "АдрТекст") Тогда
					РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				КонецЕсли;
				Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементАдрес.АдрИно, "КодСтр") Тогда
					РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ФорматыЭДО.ЕстьСвойствоXDTO(Элемент, "Контакт") Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементКонтакты, "Тлф") Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ФорматыЭДО.ЕстьСвойствоXDTO(ЭлементКонтакты, "Факс") Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			
			Если ЗнДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				ИдКонтрагента = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Роль") Тогда
				Если ВРег(ЗнДанных) = ВРег("Продавец") Тогда
					Если НовыйЭД.ВидЭД=Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					Иначе
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
					КонецЕсли;
				ИначеЕсли ВРег(ЗнДанных) = ВРег("Покупатель") Тогда
					Если НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ЗаказТовара Тогда
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
					Иначе
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
				РеквизитыУчастника = ЗнДанных;
				Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
					РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
					Если РеквизитУчастника <> Неопределено Тогда
						Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
							РеквизитыКонтрагента.Вставить("ЮридическийАдрес_Представление", РеквизитУчастника.Представление);
						ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
							РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
						Иначе // остальное по именам
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Адрес") Тогда
				РеквизитыКонтрагента.Вставить("ФактическийАдрес_Представление", ЗнДанных.Представление);
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Контакты") Тогда
				ТаблицаКонтактов = Новый ТаблицаЗначений();
				ТаблицаКонтактов.Колонки.Добавить("Вид");
				ТаблицаКонтактов.Колонки.Добавить("Представление");
				ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
				Для Каждого Контакт Из ЗнДанных.Контакт Цикл
					Вид = Неопределено;
					Если Контакт.Тип = НСтр("ru = 'Почта'") Тогда
						Вид = ЭлектронноеВзаимодействие.НайтиСсылку("ВидыКонтактнойИнформации","EmailКонтрагента");
					ИначеЕсли Контакт.Тип = НСтр("ru = 'Телефон рабочий'") Тогда
						Вид = ЭлектронноеВзаимодействие.НайтиСсылку("ВидыКонтактнойИнформации","ТелефонКонтрагента");
					ИначеЕсли Контакт.Тип = НСтр("ru = 'Факс'") Тогда
						Вид = ЭлектронноеВзаимодействие.НайтиСсылку("ВидыКонтактнойИнформации","ФаксКонтрагента");
					КонецЕсли;
					Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
						НовКонт = ТаблицаКонтактов.Добавить();
						НовКонт.Вид = Вид;
						НовКонт.Представление = Контакт.Значение;
						НовКонт.ЗначенияПолей = Контакт.Комментарий;
					КонецЕсли;
				КонецЦикла;
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
			Иначе // остальное по именам
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИНН", РеквизитыКонтрагента.ИНН);
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		СтруктураПоиска.Вставить("КПП", РеквизитыКонтрагента.КПП);
	КонецЕсли;
	Контрагент = ЭлектронноеВзаимодействие.НайтиСсылку(ВидКонтрагента, ИдКонтрагента, СтруктураПоиска);
	
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДанныеРазбора, Ошибка);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено Тогда
			РасчетныеСчета = Элемент.РасчетныеСчета;
			Если РасчетныеСчета <> Неопределено Тогда
				РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");
				Для Каждого РасчетныйСчетXDTO Из РасчетныеСчетаXDTO Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДанныеРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
					Прервать;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Свойства().Получить("БанкРекв") <> Неопределено И Элемент.БанкРекв <> Неопределено Тогда
			ПрочитатьДанныеПоРасчетномуСчетуТорг12(НовыйЭД, Элемент.БанкРекв, ДанныеРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("РеквизитыПолучателя") <> Неопределено Тогда
		СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");
		РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДанныеРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ИнтеграцияЭДО.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронноеВзаимодействие.НайтиСсылку(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
					+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДанныеРазбора, Ошибка);
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СобратьАдрес(Знач СтруктураАдрес)
	
	Адрес = "";
	
	Для Каждого КлючЗначение Из СтруктураАдрес Цикл
		
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеАдресногоПоля = КлючЗначение.Значение;
		НаименованиеРегиона = "";
		Если Врег(КлючЗначение.Ключ) = Врег("КодРегион") Тогда
			НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЗначениеАдресногоПоля);
			Если ЗначениеЗаполнено(НаименованиеРегиона) Тогда
				ЗначениеАдресногоПоля = НаименованиеРегиона
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПрефиксКЭлементуАдреса(КлючЗначение.Ключ, ЗначениеАдресногоПоля);
		
		Адрес = Адрес + ?(ЗначениеЗаполнено(Адрес), ","+ " " + ЗначениеАдресногоПоля, ЗначениеАдресногоПоля);
		
	КонецЦикла;
	
	Возврат Адрес;
	
КонецФункции

Функция СоставнойАдрес(Параметры)
	
	Если Параметры = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ВозврЗнч = "";
	Для Каждого Свойство Из Параметры.Свойства() Цикл
		ДобПараметр = "";
		Если НЕ ЗначениеЗаполнено(Параметры[Свойство.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Индекс" Тогда
			ДобПараметр = Параметры[Свойство.Имя];
		ИначеЕсли Свойство.Имя = "КодРегион" Тогда
			ДобПараметр = АдресныйКлассификатор.НаименованиеРегионаПоКоду(Параметры.КодРегион);
		Иначе
			ДобПараметр = Параметры[Свойство.Имя];
		КонецЕсли;
		ДобавитьПрефиксКЭлементуАдреса(Свойство.Имя, ДобПараметр);
		Если ЗначениеЗаполнено(ДобПараметр) Тогда
			ВозврЗнч = ?(ЗначениеЗаполнено(ВозврЗнч), ВозврЗнч + ", ", "") + ДобПараметр;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозврЗнч;
	
КонецФункции

Процедура ПрочитатьДанныеПоРасчетномуСчетуТорг12(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДанныеРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
	
	// Обработка банка счета
	
	БанкXDTO = РасчетныйСчетXDTO.СвБанк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.НаимБанк);
	
	БанкСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора
	ТипБанкиВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДанныеРазбора.ДеревоРазбора, "Банки");
	
	СтрокаБанка = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
		БанкСсылка, РеквизитыБанка, ДанныеРазбора, Ошибка);
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействие.НайтиСсылку(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДанныеРазбора.ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета,
		НСтр("ru = 'Номер счета:'") + " " + РеквизитыБанковскогоСчета.НомерСчета,
		БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДанныеРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПрефиксКЭлементуАдреса(Знач ИмяЭлемента, ЗначениеЭлемента)
	
	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = ВРег(ИмяЭлемента);
	Префикс = "";
	
	Если ИмяЭлемента = "ДОМ" Тогда
		
		// Добавляем префикс "дом № ", если
		// значение начинается с цифры 
		// и состоит из одного слова.
		// Например, добавляем для "15А", не добавляем для "15А д".
		
		НачальныйСимвол = Лев(ЗначениеЭлемента, 1);
		НачальныйСимволЦифра = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НачальныйСимвол);
		ТолькоОдноСлово = (СтрНайти(СокрЛП(ЗначениеЭлемента), " ") = 0);
		
		Если НачальныйСимволЦифра И ТолькоОдноСлово Тогда
			Префикс = НСтр("ru = 'дом №'") + " ";
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "КОРПУС" Тогда
		
		// Добавляем префикс "корпус ", если
		// значение состоит из одного символа
		// или из одних цифр.
		
		ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеЭлемента);
		ТолькоОдинСимвол = (СтрДлина(ЗначениеЭлемента) = 1);
		
		Если ТолькоЦифры ИЛИ ТолькоОдинСимвол Тогда
			Префикс = НСтр("ru = 'корпус'") + " ";
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "КВАРТИРА" ИЛИ ИмяЭлемента = "КВАРТ" Тогда
		
		// Добавляем префикс "кв. ", если
		// значение состоит из одних цифр.
		
		ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеЭлемента);
		
		Если ТолькоЦифры Тогда
			Префикс = НСтр("ru = 'кв.'") + " ";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеЭлемента = Префикс + ЗначениеЭлемента;
	
КонецПроцедуры

#Область РаботаСФорматамиЭлектронныхДокументов

Функция НовыйФорматЭлектронногоДокумента(Знач Идентификатор = "", Знач Имя = "", Знач Версия = "", Знач Назначение = "")
	
	формат = Новый Структура;
	формат.Вставить("Идентификатор", Идентификатор);
	формат.Вставить("Имя", Имя);
	формат.Вставить("Версия", Версия);
	формат.Вставить("Назначение", Назначение);
	формат.Вставить("ПространствоИмен", "");
	формат.Вставить("МакетДерева", "");
	формат.Вставить("МакетВизуализации", "");
	
	Возврат формат;
	
КонецФункции

Функция ФорматыЭлектронныхДокументов()
	
	НаборФорматов = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовУПД());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовУПДПокупателя());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовАктОРасхождениях());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовУКД());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовУКДПокупателя());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовАктСверкиВзаиморасчетов());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборФорматов, ФорматыЭлектронныхДокументовСчетНаОплату());
	
	Возврат НаборФорматов;
	
КонецФункции

Функция ФорматыЭлектронныхДокументовУПД()
	
	НаборФорматов = Новый Массив;
	
	ПространствоИмен = "ON_SCHFDOPPR";
	МакетДерева = "ОбменСКонтрагентами.УПД_ИнформацияПродавца";
	МакетВизуализации = "ЭД_УПД_ИнформацияПродавца";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_SCHFDOPPR_1_995_01_05_01", "УПД", "5.01", СЧФДОП()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_SCHFDOPPR_1_995_01_05_01", "УПД", "5.01", СЧФ()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_SCHFDOPPR_1_995_01_05_01", "УПД", "5.01", ДОП()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NSCHFDOPPR_1_997_01_05_01", "УПД", "2019", СЧФДОП()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NSCHFDOPPR_1_997_01_05_01", "УПД", "2019", СЧФ()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NSCHFDOPPR_1_997_01_05_01", "УПД", "2019", ДОП()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NSCHFDOPPR_1_997_01_05_01", "УПД", "2019", СвРК()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NSCHFDOPPR_1_997_01_05_01", "УПД", "2019", СвЗК()));
	
	Для каждого формат Из НаборФорматов Цикл
		
		Суффикс = "_" + СтрЗаменить(формат.Версия, ".", "_");
		
		Если ПроверитьФорматЭлектронногоДокумента(Формат, "УПД", "2019") Тогда
			ПространствоИмен = "ON_NSCHFDOPPR";
		Иначе
			ПространствоИмен = "ON_SCHFDOPPR";
		КонецЕсли;
		
		формат.ПространствоИмен = ПространствоИмен + Суффикс;
		формат.МакетВизуализации = МакетВизуализации + Суффикс;
		формат.МакетДерева = МакетДерева + Суффикс;

		
	КонецЦикла;
	
	Возврат НаборФорматов;
	
КонецФункции

Функция ФорматыЭлектронныхДокументовУКД()
	
	НаборФорматов = Новый Массив;
	
	ПространствоИмен = "ON_KORSCHFDOPPR";
	МакетДерева = "ОбменСКонтрагентами.УКД_ИнформацияПродавца";
	МакетВизуализации = "ЭД_УКД_ИнформацияПродавца";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_KORSCHFDOPPR_1_996_01_05_01", "УКД", "5.02", КСЧФДИС()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_KORSCHFDOPPR_1_996_01_05_01", "УКД", "5.02", КСЧФ()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_KORSCHFDOPPR_1_996_01_05_01", "УКД", "5.02", ДИС()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NKORSCHFDOPPR_1_996_03_05_01", "УКД", "2020", КСЧФДИС()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NKORSCHFDOPPR_1_996_03_05_01", "УКД", "2020", КСЧФ()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NKORSCHFDOPPR_1_996_03_05_01", "УКД", "2020", ДИС()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NKORSCHFDOPPR_1_996_03_05_01", "УКД", "2020", СвИСРК()));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NKORSCHFDOPPR_1_996_03_05_01", "УКД", "2020", СвИСЗК()));
	
	Для каждого формат Из НаборФорматов Цикл
		
		Суффикс = "_" + СтрЗаменить(формат.Версия, ".", "_");
		
		Если ПроверитьФорматЭлектронногоДокумента(Формат, "УКД", "2020") Тогда
			ПространствоИмен = "ON_NKORSCHFDOPPR";
		Иначе
			ПространствоИмен = "ON_KORSCHFDOPPR";
		КонецЕсли;
		
		формат.ПространствоИмен = ПространствоИмен + Суффикс;
		формат.МакетВизуализации = МакетВизуализации + Суффикс;
		формат.МакетДерева = МакетДерева + Суффикс;
	
	КонецЦикла;
	
	Возврат НаборФорматов;
КонецФункции

Функция ФорматыЭлектронныхДокументовУКДПокупателя()
	
	НаборФорматов = Новый Массив;
	
	ПространствоИмен = "ON_KORSCHFDOPPOK";
	МакетДерева = "ОбменСКонтрагентами.УКД_ИнформацияПокупателя";
	МакетВизуализации = "ЭД_УКД_ИнформацияПокупателя";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_KORSCHFDOPPR_1_996_01_05_01 (УКД: Информация покупателя)", "УКДПокупатель", "5.02"));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NKORSCHFDOPPR_1_996_03_05_01 (УКД: Информация покупателя)", "УКДПокупатель", "2020"));
	
	Для каждого формат Из НаборФорматов Цикл
		
		Суффикс = "_" + СтрЗаменить(формат.Версия, ".", "_");
		
		Если ПроверитьФорматЭлектронногоДокумента(Формат, "УКДПокупатель", "2020") Тогда
			ПространствоИмен = "ON_NKORSCHFDOPPR";
		Иначе
			ПространствоИмен = "ON_KORSCHFDOPPR";
		КонецЕсли;
		
		формат.ПространствоИмен = ПространствоИмен + Суффикс;
		формат.МакетВизуализации = МакетВизуализации + Суффикс;
		формат.МакетДерева = МакетДерева + Суффикс;
	
	КонецЦикла;
	
	Возврат НаборФорматов;
КонецФункции

Функция ФорматыЭлектронныхДокументовУПДПокупателя()
	
	НаборФорматов = Новый Массив;
	
	ПространствоИмен = "ON_SCHFDOPPOK";
	МакетДерева = "ОбменСКонтрагентами.УПД_ИнформацияПокупателя";
	МакетВизуализации = "ЭД_УПД_ИнформацияПокупателя";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_SCHFDOPPR_1_995_01_05_01 (УПД: Информация покупателя)", "УПДПокупатель", "5.01"));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_NSCHFDOPPR_1_997_01_05_01 (УПД: Информация покупателя)", "УПДПокупатель", "2019"));
	
	Для каждого формат Из НаборФорматов Цикл
		
		Суффикс = "_" + СтрЗаменить(формат.Версия, ".", "_");
		
		Если ПроверитьФорматЭлектронногоДокумента(Формат, "УПДПокупатель", "2019") Тогда
			ПространствоИмен = "ON_NSCHFDOPPOK";
		Иначе
			ПространствоИмен = "ON_SCHFDOPPOK";
		КонецЕсли;
		
		формат.ПространствоИмен = ПространствоИмен + Суффикс;
		формат.МакетВизуализации = МакетВизуализации + Суффикс;
		формат.МакетДерева = МакетДерева + Суффикс;
		
	КонецЦикла;
	
	Возврат НаборФорматов;
	
КонецФункции

Функция ФорматыЭлектронныхДокументовАктОРасхождениях()
	
	НаборФорматов = Новый Массив;
	
	ПространствоИмен = "DP_PRIRASXPRIN";
	МакетДерева = "ОбменСКонтрагентами.АктОРасхождениях";
	МакетВизуализации = "ЭД_АктОРасхождениях";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"DP_PRIRASXPRIN_1_994_01_05_01", "АктОРасхождениях", "5.01"));
	
	Для каждого формат Из НаборФорматов Цикл
		
		Суффикс = "_" + СтрЗаменить(формат.Версия, ".", "_");
		формат.ПространствоИмен = ПространствоИмен + Суффикс;
		формат.МакетВизуализации = МакетВизуализации + Суффикс;
		Если ПроверитьФорматЭлектронногоДокумента(Формат, "АктОРасхождениях", "5.01") Тогда
			формат.МакетДерева = МакетДерева + "_2019";
		Иначе
			формат.МакетДерева = МакетДерева + Суффикс;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборФорматов;
	
КонецФункции

Функция ФорматыЭлектронныхДокументовАктСверкиВзаиморасчетов()
	
	НаборФорматов = Новый Массив;
	
	МакетДерева = "ОбменСКонтрагентами.АктСверкиВзаиморасчетов";
	МакетВизуализации = "ЭД_АктСверкиВзаиморасчетов";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_AKTSVEROTP_1_972_01_05_01_01", "АктСверкиВзаиморасчетов", "5.01", "ИнформацияОтправителя"));
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_AKTSVERPOL_1_972_02_05_01_01", "АктСверкиВзаиморасчетов", "5.01", "ИнформацияПолучателя"));
	
	Для Каждого Формат Из НаборФорматов Цикл
		
		Суффикс = "_" + Формат.Назначение + "_" + СтрЗаменить(Формат.Версия, ".", "_");
		
		Формат.ПространствоИмен = Формат.Идентификатор;
		Формат.МакетВизуализации = МакетВизуализации + Суффикс;
		Формат.МакетДерева = МакетДерева + Суффикс;

		
	КонецЦикла;
		
	Возврат НаборФорматов;
	
КонецФункции

Функция ФорматыЭлектронныхДокументовСчетНаОплату()
	
	НаборФорматов = Новый Массив;
	
	МакетДерева = "ОбменСКонтрагентами.СчетНаОплату";
	МакетВизуализации = "ЭД_СчетНаОплату";
	
	НаборФорматов.Добавить(НовыйФорматЭлектронногоДокумента(
		"ON_CHETOP_1_998_01_01_01", "СчетНаОплату", "1.01"));
	
	Для Каждого Формат Из НаборФорматов Цикл
		
		Суффикс = "_" + СтрЗаменить(Формат.Версия, ".", "_");
		
		Формат.ПространствоИмен = Формат.Идентификатор;
		Формат.МакетВизуализации = МакетВизуализации + Суффикс;
		Формат.МакетДерева = МакетДерева + Суффикс;

	КонецЦикла;
	
	Возврат НаборФорматов;
	
КонецФункции

Функция ФорматЭлектронногоДокументаПоИмениИИдентификатору(Знач Имя, Знач Идентификатор = "", Знач Назначение = "") Экспорт
	
	ВсеФорматы = ФорматыЭлектронныхДокументов();
	
	НайденныйФормат = НовыйФорматЭлектронногоДокумента();
	
	Для каждого Формат Из ВсеФорматы Цикл
		
		Если Формат.Имя = Имя 
			И (Формат.Идентификатор = Идентификатор ИЛИ Не ЗначениеЗаполнено(Идентификатор))
			И (Формат.Назначение = Назначение ИЛИ Не ЗначениеЗаполнено(Назначение)) Тогда
			
			НайденныйФормат = Новый ФиксированнаяСтруктура(Формат);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйФормат;
	
КонецФункции

Функция ФорматЭлектронногоДокументаПоИмени(Знач Имя, Знач Версия = "", Знач Назначение = "")
	
	ВсеФорматы = ФорматыЭлектронныхДокументов();
	
	НайденныйФормат = НовыйФорматЭлектронногоДокумента();
	
	Для каждого Формат Из ВсеФорматы Цикл
		
		Если Формат.Имя = Имя 
			И (Формат.Версия = Версия ИЛИ Не ЗначениеЗаполнено(Версия))
			И (Формат.Назначение = Назначение ИЛИ Не ЗначениеЗаполнено(Назначение)) Тогда
			
			НайденныйФормат = Новый ФиксированнаяСтруктура(Формат);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйФормат;
	
КонецФункции

Функция ПроверитьФорматЭлектронногоДокумента(Знач Формат, Знач Имя, Знач Версия = "", Знач Назначение = "") Экспорт
	
	Результат = (Формат.Имя = Имя);
	
	Если ЗначениеЗаполнено(Версия) И Формат.Версия <> Версия Тогда
		Результат = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Назначение) И Формат.Назначение <> Назначение Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция УточненныйТипДокументаИнформацииПродавцаУПД(ДеревоДанных, ТипДокумента)
	
	УточненныйТипДокумента = ТипДокумента;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		
		ТолькоУслуги = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги");
		
		Если ТипЗнч(ТолькоУслуги) = Тип("Булево") И ТолькоУслуги Тогда
			
			УточненныйТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
			
		Иначе
			
			ТолькоРаботыУслуги       = Истина;
			ТолькоИмущественныеПрава = Истина;
			
			СведенияОТоварах = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДанных, "СведенияОТоварах");
			Для каждого Сведения Из СведенияОТоварах Цикл
				
				Если Сведения.Признак <> "4" Тогда
					ТолькоИмущественныеПрава = Ложь;
				КонецЕсли;
				
				Если Сведения.Признак <> "2" И Сведения.Признак <> "3" Тогда
					ТолькоРаботыУслуги = Ложь;
				КонецЕсли;
				
				Если Не (ТолькоИмущественныеПрава ИЛИ ТолькоРаботыУслуги) Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТолькоИмущественныеПрава Тогда
				УточненныйТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав;
			ИначеЕсли ТолькоРаботыУслуги Тогда
				УточненныйТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УточненныйТипДокумента;
	
КонецФункции

// Функция-конструктор параметров номенклатуры для подсистемы сопоставления
// 
// Возвращаемое значение:
//  Структура:
//   * Идентификатор - Строка
//   * Наименование - Строка
//   * Характеристика - Строка
//   * ЕдиницаИзмерения - Строка
//   * ЕдиницаИзмеренияКод - Строка
//   * Артикул - Строка
//   * КодНоменклатуры - Строка
//   * ШтрихкодКомбинации - Строка
//
Функция НовыеДанныеСопоставления()
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("Идентификатор",       "");
	Сопоставление.Вставить("Наименование",        "");
	Сопоставление.Вставить("Характеристика",      "");
	Сопоставление.Вставить("ЕдиницаИзмерения",    "");
	Сопоставление.Вставить("ЕдиницаИзмеренияКод", "");
	Сопоставление.Вставить("Артикул",             "");
	Сопоставление.Вставить("КодНоменклатуры",     "");
	Сопоставление.Вставить("ШтрихкодКомбинации",  "");
	
	Возврат Сопоставление;
	
КонецФункции

Функция ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(Сопоставление)
	
	НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
	
	Если Сопоставление.Наименование <> Неопределено Тогда
		НоменклатураКонтрагента.Наименование = Строка(Сопоставление.Наименование);
	КонецЕсли;
	Если Сопоставление.Характеристика <> Неопределено Тогда
		НоменклатураКонтрагента.Характеристика = Строка(Сопоставление.Характеристика);
	КонецЕсли;
	Если Сопоставление.ЕдиницаИзмерения <> Неопределено Тогда
		НоменклатураКонтрагента.ЕдиницаИзмерения = Строка(Сопоставление.ЕдиницаИзмерения);
	КонецЕсли;
	Если Сопоставление.ЕдиницаИзмеренияКод <> Неопределено Тогда
		НоменклатураКонтрагента.ЕдиницаИзмеренияКод = Строка(Сопоставление.ЕдиницаИзмеренияКод);
	КонецЕсли;
	Если Сопоставление.Артикул <> Неопределено Тогда
		НоменклатураКонтрагента.Артикул = Строка(Сопоставление.Артикул);
	КонецЕсли;
	Если Сопоставление.КодНоменклатуры <> Неопределено Тогда
		НоменклатураКонтрагента.КодНоменклатуры = Строка(Сопоставление.КодНоменклатуры);
	КонецЕсли;
	Если Сопоставление.ШтрихкодКомбинации <> Неопределено Тогда
		НоменклатураКонтрагента.ШтрихкодКомбинации = Строка(Сопоставление.ШтрихкодКомбинации);
	КонецЕсли;
	
	Возврат СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(НоменклатураКонтрагента);
	
КонецФункции
	
Функция ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита", "Набор");
		СтрокиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаДопДанных Из СтрокиДопДанные Цикл
			Для Каждого СтрокаДерева Из СтрокаДопДанных.Строки Цикл
				Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
					Структура = Новый Структура;
					СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
					ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, Структура);
				ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
					НовСтрока = Неопределено;
					Для Каждого Строка Из СтрокаДерева.Строки Цикл
						Если Строка.ЗначениеРеквизита = "Структура" Тогда
							Если НовСтрока = Неопределено Тогда
								НовСтрока                   = НовыйЭД.Строки.Добавить();
								НовСтрока.Реквизит          = СтрокаДерева.ЗначениеРеквизита;
								НовСтрока.ЗначениеРеквизита = СтрокаДерева.ИмяРеквизита;
							КонецЕсли;
							Структура = Новый Структура;
							СформироватьСтруктуруПоДопДанным(Строка, Структура);
							ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовСтрока, Строка.ИмяРеквизита, Структура);
						Иначе
							ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, Строка.ЗначениеРеквизита, Строка.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаДопДанных.ЗначениеРеквизита = "Шапка" И СтрокаДерева.ИмяРеквизита = "Список" Тогда
					ТЗ = Новый ТаблицаЗначений;
					СформироватьТаблицуЗначенийПоДопДанным(СтрокаДерева, ТЗ);
					ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ЗначениеРеквизита, ТЗ);
				Иначе
					ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
				КонецЕсли;
			КонецЦикла;
			ВозвращаемоеЗначение = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура СформироватьСтруктуруПоДопДанным(Дерево, СтруктураДопДанных)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
			Структура = Новый Структура;
			СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, Структура);
		ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
			СтруктураДопДанных.Вставить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"));
		Иначе
			СтруктураДопДанных.Вставить(СтрокаДерева.ИмяРеквизита, СтрокаДерева.ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура "восстанавливает" набор данных в таблицу значений. Если при формировании ЭД в доп.данные
// была помещена таблица значений, то при разборе ЭД набор данных (из доп.данных) преобразуется в таблицу значений.
//
// Параметры:
//   Дерево - ДеревоЗначений - набор доп.данных прочитанных из ЭД.
//   ТЗ - ТаблицаЗначений - таблица значений сформированная по данным из дерева значений.
//
Процедура СформироватьТаблицуЗначенийПоДопДанным(Дерево, ТЗ)
	
	Для Каждого СтрокаТЗвДереве Из Дерево.Строки Цикл
		СтрокаТЗ = Неопределено;
		Для Каждого ЗначениеЯчейкиТЗ Из СтрокаТЗвДереве.Строки Цикл
			Если СтрокаТЗвДереве.ЗначениеРеквизита = "0" Тогда // 0-я строка ТЗ в дереве
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			Если СтрокаТЗ = Неопределено Тогда
				СтрокаТЗ = ТЗ.Добавить();
			КонецЕсли;
			Если ТЗ.Колонки.Найти(ЗначениеЯчейкиТЗ.ИмяРеквизита) = Неопределено Тогда
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			СтрокаТЗ[ЗначениеЯчейкиТЗ.ИмяРеквизита] = ЗначениеЯчейкиТЗ.ЗначениеРеквизита;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗаказчикаИзДопДанных(ДеревоДопДанных)
	
	Заказчик = Неопределено;
	СтрокаШапка = ДеревоДопДанных.Строки.Найти("Шапка");
	Если НЕ СтрокаШапка = Неопределено Тогда
		СтруктураДанныхЗаказчика = Новый Структура;
		СформироватьСтруктуруПоДопДанным(СтрокаШапка, СтруктураДанныхЗаказчика);
		Заказчик = Новый Структура;
		НаименованиеЗаказчика = "";
		Если СтруктураДанныхЗаказчика.Свойство("Заказчик", НаименованиеЗаказчика) Тогда //ЮрЛицо
			Заказчик.Вставить("ПолноеНаименование", НаименованиеЗаказчика);
			ИННЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИНН", ИННЗаказчика) Тогда
				Заказчик.Вставить("ИНН", ИННЗаказчика);
			КонецЕсли;
			КППЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикКПП", КППЗаказчика) Тогда
				Заказчик.Вставить("КПП", КППЗаказчика);
			КонецЕсли;
			Заказчик.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			
			// Банковский счет заказчика
			НаимБанк = "";
			Если СтруктураДанныхЗаказчика.Свойство("НаимБанк", НаимБанк) Тогда
				Заказчик.Вставить("НаимБанк", НаимБанк);
			КонецЕсли;
			НомерСчета = "";
			Если СтруктураДанныхЗаказчика.Свойство("НомерСчета", НомерСчета) Тогда
				Заказчик.Вставить("НомерСчета", НомерСчета);
			КонецЕсли;
			БИК = "";
			Если СтруктураДанныхЗаказчика.Свойство("БИК", БИК) Тогда
				Заказчик.Вставить("БИК", БИК);
			КонецЕсли;
			
		Иначе // ФизЛицо
			ФамилияЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикФамилия", ФамилияЗаказчика) Тогда
				НаименованиеЗаказчика = ФамилияЗаказчика;
			КонецЕсли;
			ИмяЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИмя", ИмяЗаказчика) Тогда
				НаименованиеЗаказчика = НаименованиеЗаказчика + " " + ИмяЗаказчика;
			КонецЕсли;
			ОтчествоЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикОтчество", ОтчествоЗаказчика) Тогда
				НаименованиеЗаказчика = НаименованиеЗаказчика + " " + ОтчествоЗаказчика;
			КонецЕсли;
			Заказчик.Вставить("ПолноеНаименование", НаименованиеЗаказчика);
			ИННЗаказчика = "";
			Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикИНН", ИННЗаказчика) Тогда
				Заказчик.Вставить("ИНН", ИННЗаказчика);
			КонецЕсли;
			Заказчик.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
		КонецЕсли;
		
		ЗаказчикАдрес_Представление = "";
		Если СтруктураДанныхЗаказчика.Свойство("ЗаказчикАдрес_Представление", ЗаказчикАдрес_Представление) Тогда
			Заказчик.Вставить("ЮридическийАдрес_Представление", ЗаказчикАдрес_Представление);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заказчик;

КонецФункции

Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторыСерийНоменклатуры()
	
	ИдентификаторыСерий = Новый ТаблицаЗначений;
	ИдентификаторыСерий.Колонки.Добавить("Идентификатор");
	ИдентификаторыСерий.Колонки.Добавить("Номенклатура");
	ИдентификаторыСерий.Колонки.Добавить("Характеристика");
	
	Возврат ИдентификаторыСерий;
	
КонецФункции

Функция ИдентификаторОснованиеОсвобожденияОтНДС()

	Возврат "ОснованиеОсвобожденияОтНДС";

КонецФункции

Процедура ПрочитатьСерииНоменклатуры(ДеревоДанных, ИдентификаторыСтрокСерии)
	
	СтрокаТаблицаСерии = ДеревоДанных.Строки.Найти("Серии", "Реквизит");
	Если СтрокаТаблицаСерии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьХарактеристика =  Не СтрокаТаблицаСерии.ЗначениеРеквизита.Колонки.Найти("Характеристика") = Неопределено;
	
	Для Каждого СтрокаСерии Из СтрокаТаблицаСерии.ЗначениеРеквизита Цикл
		
		ИдентификаторСтроки = СтрокаСерии.ИдентификаторСтроки;
		
		НоменклатураХарактеристика = ИдентификаторыСтрокСерии.Найти(ИдентификаторСтроки, "Идентификатор");
		Если НоменклатураХарактеристика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Номенклатура = НоменклатураХарактеристика.Номенклатура;
		СтрокаСерии.Номенклатура = Номенклатура;
		
		Если ЕстьХарактеристика Тогда
			Характеристика = НоменклатураХарактеристика.Характеристика;
			СтрокаСерии.Характеристика = Характеристика;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьСтрокуТЧПоДопДанным(ДеревоДопДанных, СписокТЧ, НомерСтроки, ИмяТЧ, Ошибка, ЮридическиЗначимый = Истина)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
		СтрокиШапкиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиШапкиДопДанные.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиТЧДопДанные = СтрокиШапкиДопДанные[0].Строки.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТЧДопДанные.Количество() > 0 Тогда
				Для Каждого СтрокаДерева Из СтрокиТЧДопДанные[0].Строки Цикл
					
					Если Не СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаДерева.ИмяРеквизита = "Набор" Тогда
						Структура = Новый Структура;
						СформироватьСтруктуруПоДопДанным(СтрокаДерева, Структура);
						СписокТЧ.Добавить(Структура, СтрокаДерева.ЗначениеРеквизита);
					ИначеЕсли СтрокаДерева.ИмяРеквизита = "Массив" Тогда
						СписокТЧ.Добавить(СтрокаДерева.Строки.ВыгрузитьКолонку("ЗначениеРеквизита"), СтрокаДерева.ЗначениеРеквизита);
						
					ИначеЕсли СтрокаДерева.ИмяРеквизита = "Список" Тогда
						
						ТаблицаДопДанных = Новый ТаблицаЗначений;
						ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
						ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
						ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
						
						НаименованиеРеквизита = СтрокаДерева.ЗначениеРеквизита;
						ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, СтрокаДерева.ЗначениеРеквизита);
						СписокТЧ.Добавить(ТаблицаДопДанных, НаименованиеРеквизита);
						
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("КодОКЕИ") Тогда
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, "ОКЕИ_Тов");
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("КодОКЕИДо") Тогда
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, "ОКЕИ_ТовДо");
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("КодОКЕИПосле") Тогда
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, "ОКЕИ_ТовПосле");
					ИначеЕсли ВРег(СтрокаДерева.ИмяРеквизита) = ВРег("ДопДанныеТаможеннойДекларации") Тогда
						СписокТЧ.Добавить("ДопДанныеТаможеннойДекларации", СтрокаДерева.ЗначениеРеквизита);
					Иначе
						СписокТЧ.Добавить(СтрокаДерева.ЗначениеРеквизита, СтрокаДерева.ИмяРеквизита);
					КонецЕсли;
				КонецЦикла;
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПрочитатьСтрокиДереваРекурсивно(СтрокиДерева, ТаблицаДопДанных, ИмяРодителя = "")
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" ИЛИ СтрокаДерева.ИмяРеквизита = "Массив" 
			ИЛИ СтрокаДерева.ИмяРеквизита = "Список" ИЛИ СтрокаДерева.ИмяРеквизита = "Нпп"
			ИЛИ СтрокаДерева.ЗначениеРеквизита = "Структура" Тогда
			
			ИмяРодителя = ИмяРодителя + СтрокаДерева.ЗначениеРеквизита;
			ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, ИмяРодителя);
		Иначе
			СтрокаТЗ = ТаблицаДопДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьИДТовара(знач ИД)
	
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Поз = СтрНайти(ИД, "#");
	Если Поз > 0 Тогда
		
		СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);
		Если СтрДлина(ИД) > Поз Тогда
			
			Ид = Сред(ИД, Поз + 1);
			Поз = СтрНайти(ИД, "#");
			Если Поз > 0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);
			КонецЕсли;
			
			Ид = Сред(ИД, Поз + 1);
			Если СтрДлина(ИД) > Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает ссылка на элемент справочника.
//
// Параметры:
//  Наименование - Строка, название справочника в метаданных.
//  ИД - Уникальный идентификатор элемента.
//
// Возвращаемое значение:
//  Ссылка на элемент справочника.
//
Функция ЭлементСправочникаПоИД(Наименование, ИД)
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(Наименование);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Если ЗначениеЗаполнено(ИД) И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИД) Тогда
			UID = Новый УникальныйИдентификатор(ИД);
			Результат = Справочники[ИмяПрикладногоСправочника].ПолучитьСсылку(UID);
			
			Если Не ОбщегоНазначения.СсылкаСуществует(Результат) Тогда
				Результат = Неопределено;
			КонецЕсли;
		Иначе
			Результат = ИнтеграцияЭДО.ПолучитьПустуюСсылку(Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков()
	
	ИмяРеквизитаВладельца = "Контрагент";
	Возврат ИмяРеквизитаВладельца;
	
КонецФункции

// Процедура выполняет чтение универсальной структуры данных схемы 2 (разработанной
// для передачи произвольных данных в шапке и в табличных частях: список из набора пар:
// наименование реквизита и список значений реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - СписокXDTO, Массив - список реквизитов и значений.
//    *Элементы массива - ОбъектXDTO - единичный элемент списка реквизитов и значений.
//  Приемник - строка дерева данных, список значений - строка дерева, в которую помещаются извлеченные из xml-файла данные,
//    либо список значений (при разборе таблицы товаров).
//  Ошибка - Булево - флаг ошибки.
//
Процедура ПрочитатьСписокЗначенийРеквизитовCML(ЗначенияРеквизитов, Приемник, Ошибка, ДопРеквизиты = Неопределено)
	
	Если ЗначенияРеквизитов = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Структура;
	ОбычныеРеквизиты        = Новый Структура;

	Если ТипЗнч(ЗначенияРеквизитов) = Тип("ОбъектXDTO") Тогда
		МассивЗначенийРеквизитов = Новый Массив;
		МассивЗначенийРеквизитов.Добавить(ЗначенияРеквизитов);
	Иначе
	    МассивЗначенийРеквизитов = ЗначенияРеквизитов;
	КонецЕсли;
	
	Для Каждого Реквизит Из МассивЗначенийРеквизитов Цикл
		
		НаименованиеРеквизита = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Наименование");
		ЗначениеРеквизита     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Значение");
		
		Если ЗначениеРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизитаКоллекция = Новый Массив;
		ЗначениеРеквизитаКоллекция.Добавить(ЗначениеРеквизита);
		
		Если ЭтоДопРеквизит(НаименованиеРеквизита) Тогда
			ЗапомнитьРеквизитыДерева(ДополнительныеРеквизиты,
				НаименованиеРеквизита, ЗначениеРеквизитаКоллекция, Приемник, ДопРеквизиты);
		Иначе
			ЗапомнитьРеквизитыДерева(ОбычныеРеквизиты,
				НаименованиеРеквизита, ЗначениеРеквизитаКоллекция, Приемник, ДопРеквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеРеквизиты.Количество() Тогда
		ДобавитьРеквизитВПриемник("ДопДанныеПодписанные", ДополнительныеРеквизиты, Приемник)
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОбычныеРеквизиты Цикл
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, Приемник);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВПриемник(НаименованиеРеквизита, ЗначениеРеквизита, Приемник)
	
	Если ТипЗнч(Приемник) = Тип("СписокЗначений") Тогда
		Приемник.Добавить(ЗначениеРеквизита, НаименованиеРеквизита);
	Иначе
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(Приемник, НаименованиеРеквизита, ЗначениеРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДопРеквизит(НаименованиеРеквизита)
	
	НомерСимвола = СтрНайти(НаименованиеРеквизита, "Доп_");
	
	Возврат НомерСимвола > 0;
	
КонецФункции

Процедура ЗапомнитьРеквизитыДерева(СтруктураРеквизитов, НаименованиеРеквизита, ЗначениеРеквизита, Приемник, ДопРеквизиты)
	
	ИмяРеквизита = СтрЗаменить(НаименованиеРеквизита, "Доп_", "");
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если СтрНайти(ИмяРеквизита, "_Таблица") > 0 Тогда
		
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_Таблица", "");
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
		Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
			Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда

			РеквизитЗначение = Новый Массив;			
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДокументыСделки") Тогда
		
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
		
		ЦенаВключаетНДС = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
		Если ВРег(ЦенаВключаетНДС) = ВРег("false") Тогда
			РеквизитЗначение = Ложь;
		ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("true") Тогда
			РеквизитЗначение = Истина;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		
		ДатаИсправленияЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		Попытка
			РеквизитЗначение = ФорматыЭДО.ДатаИзСтроки(ДатаИсправленияЗначение);
		Исключение
			РеквизитЗначение = ДатаФНС(ДатаИсправленияЗначение);
		КонецПопытки;
	Иначе
		РеквизитЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, РеквизитЗначение);
	
КонецПроцедуры

Функция ТаблицаИзСтроки(Знач ЗначенияРеквизита)
	
	ПредставлениеТаблицы = ЗначенияРеквизита[0];
	
	Попытка
		ТаблицаРезультат = ЗначениеИзСтрокиВнутр(ПредставлениеТаблицы);
	Исключение
		Попытка
			ТаблицаРезультат = ТаблицаИзСтрокиСРазделителем(ПредставлениеТаблицы);
		Исключение
			Возврат Новый ТаблицаЗначений;
		КонецПопытки;
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ТаблицаИзСтрокиСРазделителем(Знач ЗначенияРеквизита)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Элемент Из ЗначенияРеквизита Цикл
		
		ПозицияНомерСтроки = СтрНайти(Элемент, "_");
		НомерСтроки = Лев(Элемент, ПозицияНомерСтроки - 1);
		ДанныеСтроки.Вставить("НомСтр", НомерСтроки);

		Элемент = СтрЗаменить(Элемент, НомерСтроки + "_", "");
		
		Пока СтрДлина(Элемент) > 0 Цикл
			
			Позиция = СтрНайти(Элемент, "#");
			
			РеквизитИЗначение = Лев(Элемент, Позиция);
			Элемент = СтрЗаменить(Элемент, РеквизитИЗначение, "");
			
			Разделитель = СтрНайти(РеквизитИЗначение, "&");
			
			НаименованиеРеквизита = Лев(РеквизитИЗначение, Разделитель - 1);
			
			ЗначениеРеквизита = СтрЗаменить(РеквизитИЗначение, НаименованиеРеквизита, "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "&", "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#", "");
			
			ДанныеСтроки.Вставить(НаименованиеРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		СоздатьКолонкиТаблицы(ДанныеСтроки, ТаблицаРезультат);
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("НомСтр");

	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ЗначениеДополнительногоРеквизита(РеквизитЗначение)
	
	МассивЗначений = Новый Массив;
	Для Каждого Значение Из РеквизитЗначение Цикл
		МассивЗначений.Добавить(Значение);
	КонецЦикла;
	ЗначениеРеквизита = ?(МассивЗначений.Количество() > 1, МассивЗначений, МассивЗначений[0]);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

// Возвращает данные контрагента документа
// Параметры:
//  ДеревоЭД - деревоЗначений - данные электронного документа.
//  ВидУчастника - строка - наименование участника сделки.
//  ЗаполнятьАдрес - булево - флаг, определяющий нужно ли искать в дереве значение адреса участника сделки.
//
// Возвращаемое значение:
//  - Структура с полями ПредставлениеУчастника, ИННКППУчастника, ИННУчастника, КППУчастника, АдресУчастника.
//
Функция ДанныеУчастникаСделки(ДеревоЭД, ВидУчастника, ЗаполнятьАдрес = Истина)
	
	ИННУчастника           = "";
	КППУчастника           = "";
	ИННКППУчастника        = "";
	ПредставлениеУчастника = "";
	АдресУчастника         = "";
	
	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		ПредставлениеУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ИННУчастника           = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КППУчастника           = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		
		ИННКППУчастника = "" + ИННУчастника + ?(ЗначениеЗаполнено(КППУчастника), "/" + КППУчастника, "");
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Фамилия      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.Фамилия");
		Имя          = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.Имя");
		Отчество     = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.Отчество");
		ИННУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		
		ИННКППУчастника = ИННУчастника;
		
		ПредставлениеУчастника = 
			"ИП " + Фамилия + ?(ЗначениеЗаполнено(Имя), " " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		ПредставлениеУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ИностраннаяОрганизация" Тогда
		
		ПредставлениеУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ИностраннаяОрганизация.НаименованиеОрганизации");
		
	ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		Фамилия      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя          = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество     = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		ИННУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		ИННКППУчастника = ИННУчастника;
		
		ПредставлениеУчастника = 
			"" + Фамилия + ?(ЗначениеЗаполнено(Имя), " " + Имя, "") + ?(ЗначениеЗаполнено(Отчество), " " + Отчество, "");
		
	КонецЕсли;
	
	Если ЗаполнятьАдрес Тогда
		
		Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес") = "Структурированный" Тогда
			СтруктураАдресаПоставщика = Новый Структура();
			
			Индекс = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Индекс", Ложь);
			Если ЗначениеЗаполнено(Индекс) Тогда
				СтруктураАдресаПоставщика.Вставить("Индекс", Индекс);
			КонецЕсли;
			
			КодРегиона = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.КодРегион", Ложь);
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				СтруктураАдресаПоставщика.Вставить("КодРегион", КодРегиона);
			КонецЕсли;
			
			Район = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Район", Ложь);
			Если ЗначениеЗаполнено(Район) Тогда
				СтруктураАдресаПоставщика.Вставить("Район", Район);
			КонецЕсли;
			
			Город = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Город", Ложь);
			Если ЗначениеЗаполнено(Город) Тогда
				СтруктураАдресаПоставщика.Вставить("Город", Город);
			КонецЕсли;
			
			НаселенныйПункт = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.НаселПункт", Ложь);
			Если ЗначениеЗаполнено(НаселенныйПункт) Тогда
				СтруктураАдресаПоставщика.Вставить("НаселПункт", НаселенныйПункт);
			КонецЕсли;
			
			Улица = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Улица", Ложь);
			Если ЗначениеЗаполнено(Улица) Тогда
				СтруктураАдресаПоставщика.Вставить("Улица", Улица);
			КонецЕсли;
			
			Дом = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Дом", Ложь);
			Если ЗначениеЗаполнено(Дом) Тогда
				СтруктураАдресаПоставщика.Вставить("Дом", Дом);
			КонецЕсли;
			
			Корпус = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Корпус", Ложь);
			Если ЗначениеЗаполнено(Корпус) Тогда
				СтруктураАдресаПоставщика.Вставить("Корпус", Корпус);
			КонецЕсли;
			
			Квартира = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Структурированный.Кварт", Ложь);
			Если ЗначениеЗаполнено(Квартира) Тогда
				СтруктураАдресаПоставщика.Вставить("Кварт", Квартира);
			КонецЕсли;
			
			АдресУчастника = СобратьАдрес(СтруктураАдресаПоставщика);
			
		ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес") = "Произвольный" Тогда
			
			КодСтр = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны", Ложь);
			АдрТекст = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст", Ложь);
			
			Если ЗначениеЗаполнено(КодСтр) И ЗначениеЗаполнено(АдрТекст) Тогда
				АдресУчастника = КодСтр + ", " + АдрТекст;
			Иначе
				// Совместимость со старым представлением адреса в макете э.д.
				АдресУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Произвольный", Ложь);
			КонецЕсли;
			
		ИначеЕсли ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес") = "Иностранный" Тогда
			
			КодСтраны  = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Иностранный.КодСтраны", Ложь);
			АдресТекст = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".Адрес.Иностранный.АдресТекст", Ложь);
			
			АдресУчастника = КодСтраны + "," + " " + АдресТекст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	БанковскийСчет = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".БанковскийСчет");
	РеквизитыСчета = Новый Структура;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		РеквизитыСчета.Вставить("НомерСчета",        ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".БанковскийСчет.НомерСчета"));
		РеквизитыСчета.Вставить("НаименованиеБанка", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".БанковскийСчет.НаимБанк"));
		РеквизитыСчета.Вставить("БИК",               ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоЭД, ВидУчастника + ".БанковскийСчет.БИК"));
	Иначе
		РеквизитыСчета.Вставить("НомерСчета",        "");
		РеквизитыСчета.Вставить("НаименованиеБанка", "");
		РеквизитыСчета.Вставить("БИК",               "");
	КонецЕсли;
	
	ДанныеУчастникаСделки  = Новый Структура;
	
	ДанныеУчастникаСделки.Вставить("Представление",  ПредставлениеУчастника);
	ДанныеУчастникаСделки.Вставить("ИННКПП",         ИННКППУчастника);
	ДанныеУчастникаСделки.Вставить("ИНН",            ИННУчастника);
	ДанныеУчастникаСделки.Вставить("КПП",            КППУчастника);
	ДанныеУчастникаСделки.Вставить("Адрес",          АдресУчастника);
	ДанныеУчастникаСделки.Вставить("БанковскийСчет", РеквизитыСчета);
	
	Возврат ДанныеУчастникаСделки;
	
КонецФункции

Функция ШаблонОснованияДокумента()
	
	Шаблон = Новый ТаблицаЗначений;
	Шаблон.Колонки.Добавить("ДокОснованиеНаименование");
	Шаблон.Колонки.Добавить("ДокОснованиеНомер");
	Шаблон.Колонки.Добавить("ДокОснованиеДата");
	Шаблон.Колонки.Добавить("ДокОснованиеДопСведения");
	
	Возврат Шаблон;
	
КонецФункции

Процедура ДобавитьКонтрагентаВДеревоРазбора(ДанныеРазбора, НовыйЭД, ВидКонтрагента, РеквизитыКонтрагента, Ошибка)
	
	ДатаСведений = Неопределено;
	РеквизитыКонтрагента.Свойство("ДатаСведений", ДатаСведений);
	Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(
		"Контрагенты", РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП, ДатаСведений);
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДанныеРазбора.ДеревоРазбора, ВидКонтрагента);
	ИдКонтрагента = РеквизитыКонтрагента.ИНН + РеквизитыКонтрагента.КПП;
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДанныеРазбора, Ошибка);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

Процедура ПоместитьТабличнуюЧастьВШапкуДокумента(ДеревоЭД, ДеревоДопДанных, ИмяТаблицы)
	
	СтрокаТч = ДеревоДопДанных.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита", Истина);
	Если СтрокаТч = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТчДопДанные = Новый ТаблицаЗначений;
	СформироватьТаблицуЗначенийПоДопДанным(СтрокаТч, ТчДопДанные);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТчДопДанные, ИмяТаблицы);

КонецПроцедуры

Функция ШаблонТранспортнаяНакладная()
	
	Шаблон = Новый ТаблицаЗначений;
	Шаблон.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	Шаблон.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	Возврат Шаблон;
	
КонецФункции

Процедура ЗаполнитьДанныеЛицаПередавшегоГруз(ДеревоДанных, ДанныеЛицаПередавшегоГруз)
	
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, "РабОргПрод") <> Неопределено Тогда
		
		Путь = "РабОргПрод";
		
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".Должность"));
			
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ИныеСвед"));
			
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.ОснованиеПолномочий",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ОснПолн"));
			
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Фамилия"));
			
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Имя"));
			
		ЗаполнитьРеквизитДерева(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Отчество"));
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, "ИнЛицо") <> Неопределено Тогда
		
		Путь = "ИнЛицо";
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ПредОргПер") <> Неопределено Тогда
			
			Путь = Путь + ".ПредОргПер";
			
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Должность",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".Должность"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ИныеСведения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ИныеСвед"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.НаименованиеОрганизации",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".НаимОргПер"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ДоверенностьНаОтгрузку",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ОснДоверОргПер"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.ОснованиеПолномочий",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ОснПолнПредПер"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Фамилия",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Фамилия"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Имя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Имя"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ПредставительОрганизации.Отчество",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Отчество"));
			
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФЛПер") <> Неопределено Тогда
			
			Путь = Путь + ".ФЛПер";
			
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ИныеСвед"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ОснДоверФЛ"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Фамилия"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Имя"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Отчество"));
				
		ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФЛ") <> Неопределено Тогда
			
			Путь = Путь + ".ФЛ";
			
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ИныеСведения",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ИныеСвед"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.ДоверенностьНаОтгрузку",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ОснДоверФЛПер"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Фамилия"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Имя"));
				
			ЗаполнитьРеквизитДерева(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЛицаПередавшегоГруз, Путь + ".ФИО.Отчество"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеУчастникаОбменаЭД(УчастникОбмена)
	
	Если УчастникОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если УчастникОбмена.Свойства().Получить("ОтпрЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОтпрЮЛ.НаимОрг",, "Строка") + ", "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОтпрЮЛ.ИННЮЛ",, "Строка") + "/"
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОтпрЮЛ.КПП",, "Строка");
			
	ИначеЕсли УчастникОбмена.Свойства().Получить("ПолЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ПолЮЛ.НаимОрг",, "Строка") + ", "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ПолЮЛ.ИННЮЛ",, "Строка") + "/"
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ПолЮЛ.КПП",, "Строка");
			
	ИначеЕсли УчастникОбмена.Свойства().Получить("ОтпрИП") <> Неопределено Тогда
		
		ДанныеФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОтпрИП.ФИО");
		
		СоставляющиеФИО = Новый Массив;
		СоставляющиеФИО.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФИО, "Фамилия",, "Строка"));
		СоставляющиеФИО.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФИО, "Имя",, "Строка"));
		
		Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФИО, "Отчество");
		Если ЗначениеЗаполнено(Отчество) Тогда
			СоставляющиеФИО.Добавить(Отчество);
		КонецЕсли;
		
		ВозвращаемоеЗначение = СтрСоединить(СоставляющиеФИО, " ") + ", " + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОтпрИП.ИННФЛ",, "Строка");
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ЮЛ") <> Неопределено Тогда
		
		ВозвращаемоеЗначение =
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ЮЛ.НаимОрг",, "Строка") + ", "
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ЮЛ.ИННЮЛ",, "Строка") + "/"
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ЮЛ.КПП",, "Строка");
		
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ИП") <> Неопределено Тогда
		
		ДанныеФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ИП.ФИО");
		
		СоставляющиеФИО = Новый Массив;
		СоставляющиеФИО.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ИП.ФИО.Фамилия",, "Строка"));
		СоставляющиеФИО.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ИП.ФИО.Имя"    ,, "Строка"));
		
		Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ИП.ФИО.Отчество");
		
		Если ЗначениеЗаполнено(Отчество) Тогда
			СоставляющиеФИО.Добавить(Отчество);
		КонецЕсли;
		
		ВозвращаемоеЗначение = СтрСоединить(СоставляющиеФИО, " ") + ", " + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ИП.ИННФЛ",, "Строка");
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ФЛ") <> Неопределено Тогда
		
		ДанныеФИО = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ФЛ.ФИО");
		
		СоставляющиеФИО = Новый Массив;
		СоставляющиеФИО.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ФЛ.ФИО.Фамилия",, "Строка"));
		СоставляющиеФИО.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ФЛ.ФИО.Имя"    ,, "Строка"));
		
		Отчество = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ФЛ.ФИО.Отчество");
		
		Если ЗначениеЗаполнено(Отчество) Тогда
			СоставляющиеФИО.Добавить(Отчество);
		КонецЕсли;
		
		ВозвращаемоеЗначение = СтрСоединить(СоставляющиеФИО, " ") + ", " + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ФЛ.ИННФЛ",, "Строка");
				
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОперЭДО") <> Неопределено Тогда
		
		ВозвращаемоеЗначение =
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОперЭДО.НаимОрг",, "Строка") + ", " 
			+ РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УчастникОбмена, "ОперЭДО.ИННЮЛ",, "Строка");
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПоместитьДопДанныеВДеревоЭД(ДеревоЭД, ДеревоДопДанных)
	
	ДопДанныеШапки = ДеревоДопДанных.Строки.Найти("Шапка", "ЗначениеРеквизита");
	
	Если ДопДанныеШапки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДереваШапки Из ДопДанныеШапки.Строки Цикл
		
		Данные = Новый Соответствие;
		Данные.Вставить(СтрокаДереваШапки.ИмяРеквизита, СтрокаДереваШапки.ЗначениеРеквизита);
		
		Если СтрокаДереваШапки.ЮридическиЗначимый Тогда
		
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоЭД, Данные, Истина);
			
		Иначе
				
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоЭД, Данные, Ложь);
			
		КонецЕсли;
		
		// Если в доп. данных есть реквизиты договора, они помещаются в дерево документа.
		Если ВРег(СтрокаДереваШапки.ИмяРеквизита) = ВРег("ДокументСделкиНаименование")
			Или ВРег(СтрокаДереваШапки.ИмяРеквизита) = ВРег("ДокументСделкиНомер")
			Или ВРег(СтрокаДереваШапки.ИмяРеквизита) = ВРег("ДокументСделкиДата") Тогда
			
			ЗаполнитьРеквизитДерева(ДеревоЭД, СтрокаДереваШапки.ИмяРеквизита, СтрокаДереваШапки.ЗначениеРеквизита);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьАктОРасхожденияхУчастникТип(ДеревоДанных, Участник, ВидУчастника)
	
	Если Участник = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвОргУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвОргУч.НаимОрг"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвОргУч.ИННЮЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвОргУч.КПП"));
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвИнНеУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвИнНеУч.НаимОрг"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.Страна",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвИнНеУч.Страна"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвОрг.СвИнНеУч.ИныеСвед"));
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ") <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ИННФЛ"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ИныеСвед"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ФИО.Фамилия"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ФИО.Имя"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ФИО.Отчество"));
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ИННФЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.СвГосРегИП"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ИныеСвед"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Фамилия"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Имя"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Отчество"));
			
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес") <> Неопределено Тогда

		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ") <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Индекс",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Индекс"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.КодРегиона",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.КодРегион"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Район",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Район"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Город",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Город"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.НаселПункт"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Улица",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Улица"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Дом",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Дом"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Корпус",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Корпус"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресРФ.Квартира",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Кварт"));
				
		ИначеЕсли Участник.Адрес.АдрИнф <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресИнформация.КодСтраны",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрИнф.КодСтр"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.АдресИнформация.АдресТекст",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрИнф.АдрТекст"));
										
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".Адрес.КодГАР",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.КодГар"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт.Тлф"));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт.ЭлПочта"));
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.НомерСчета"));
				
		Если Участник.БанкРекв.СвБанк <> Неопределено Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.СвБанк.НаимБанк"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.СвБанк.БИК"));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.СвБанк.КорСчет"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".КодОКПО", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ОКПО"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "СтруктПодр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".ИнформацияДляУчастника", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИнфДляУчаст"));
	
КонецПроцедуры

Функция ПрочитатьАктОРасхожденияхТекстИнфТип(Знач ТекстИнф)
	
	Результат = Новый Соответствие;
	
	Если ТекстИнф = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементТекстИнф Из ТекстИнф Цикл
		
		Результат.Вставить(ЭлементТекстИнф.Идентиф, ЭлементТекстИнф.Значен);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьАктОРасхожденияхИнфПолТип(Знач ИнфПол)
	
	Результат = Новый Соответствие;
	
	Если ИнфПол = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементИнфПол Из ИнфПол Цикл
		
		ТекстИнф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементИнфПол, "ТекстИнф",,, Истина);
		
		Для каждого ЭлементТекстИнф Из ТекстИнф Цикл
			
			Результат.Вставить(ЭлементТекстИнф.Идентиф, ЭлементТекстИнф.Значен);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьАктОРасхожденияхНомСредИдентТов(Знач НомСредИдентТов)
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	Результат = Новый Структура;
	Результат.Вставить("ИндивидуальныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
	Результат.Вставить("ТранспортныеУпаковки", ТаблицаКодов.СкопироватьКолонки());
	Результат.Вставить("КонтрольныеИдентификационныеЗнаки", ТаблицаКодов.СкопироватьКолонки());
	
	Если НомСредИдентТов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Элемент Из НомСредИдентТов Цикл
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "ИдентТрансУпак") <> Неопределено Тогда
			Результат.ТранспортныеУпаковки.Добавить().Код = Элемент.ИдентТрансУпак;
		КонецЕсли;
		
		НомУпак = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "НомУпак",,, Истина);
		Если НомУпак <> Неопределено Тогда
			Для каждого Код Из НомУпак Цикл
				Результат.ИндивидуальныеУпаковки.Добавить().Код = Код;
			КонецЦикла;
		КонецЕсли;
		
		КИЗ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "КИЗ",,, Истина);
		Если КИЗ <> Неопределено Тогда
			Для каждого Код Из КИЗ Цикл
				Результат.КонтрольныеИдентификационныеЗнаки.Добавить().Код = Код;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьАктСверкиВзаиморасчетовУчастникТип(ДеревоДанных, Участник, ВидУчастника)
	
	Если Участник = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.НаимОрг"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.ИННЮЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.КПП"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.ОГРН"));	
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.НаимОрг"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.Идентиф"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.ИныеСвед"));
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ") <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ИННФЛ"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ФИО.Фамилия"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ФИО.Имя"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛ.ФИО.Отчество"));
	
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ИННФЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ОГРН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ОГРНИП"));	
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Фамилия"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Имя"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Отчество"));
			
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Телефон",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт.Тлф"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт.ЭлПочта"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".КонтактныеСведения.Иное",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Контакт.ИнКонт"));	
			
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".КодОКПО", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ОКПО"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "СтруктПодр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".ИнформацияДляУчастника", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИнфДляУчаст"));
	
КонецПроцедуры

Процедура ПрочитатьСчетНаОплату101УчастникТип(ДеревоДанных, Участник, ВидУчастника)
	
	Если Участник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".КодОКПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ОКПО"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".СтруктурноеПодразделение",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "СтруктПодр"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".ИнформацияДляУчастника",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИнфДляУчаст"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		ДеревоДанных, ВидУчастника + ".КраткоеНазвание",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "КраткНазв"));	
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.НаимОрг"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.ИННЮЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.КПП"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ОГРН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.ОГРН"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвЮЛУч.ИныеСвед"));	
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.НаимОрг"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИдентификаторОрганизации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.Идентиф"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.ОКСМ",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.ОКСМ"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИнНеУч.ИныеСвед"));
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ") <> Неопределено Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.ИННФЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.СНИЛС",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.СНИЛС"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИдентификаторИностранногоФизЛица",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.ИдентифФЛ"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ФИО.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.ФИО.Фамилия"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ФИО.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.ФИО.Имя"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ФИО.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.ФИО.Отчество"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвФЛУчастФХЖ.ИныеСвед"));	
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ИННФЛ"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ОГРН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ОГРНИП"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.СвидетельствоГосударственнойРегистрации",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.СвГосРегИП"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ФИО.Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Фамилия"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ФИО.Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Имя"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ФИО.Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ФИО.Отчество"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "ИдСв.СвИП.ИныеСвед"));	
			
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.НомерСчета"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.НаимБанк"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.ИННБанка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.ИННЮЛ"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.КППБанка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.КПП"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.БИК"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.КорСчет"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.РасчетныйСчет",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.РасчСчет"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскиеРеквизиты.КодSWIFT",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "БанкРекв.SWIFTКод"));	
			
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Индекс",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Индекс"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.КодРегиона",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.КодРегион"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Район",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Район"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Город",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Город"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.НаселенныйПункт",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.НаселПункт"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Улица",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Улица"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Дом",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Дом"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Корпус",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Корпус"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.Квартира",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.Кварт"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ.ИныеСведения",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрРФ.ИныеСвед"));	
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС") <> Неопределено Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ИдентификаторОбъекта",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ИдНом"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.Регион",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.Регион"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.МуниципальныйРайон.Вид",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.МуниципРайон.ВидКод"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.МуниципальныйРайон.Наименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.МуниципРайон.Наим"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ГородскоеПоселение.Вид",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ГородСелПоселен.ВидКод"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ГородскоеПоселение.Наименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ГородСелПоселен.Наим"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.НаселенныйПункт.Вид",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.НаселенПункт.Вид"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.НаселенныйПункт.Наименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.НаселенПункт.Наим"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементПланировочнойСтруктуры.Тип",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ЭлПланСтруктур.Тип"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементПланировочнойСтруктуры.Наименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ЭлПланСтруктур.Наим"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементУличноДорожнойСети.Тип",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ЭлУлДорСети.Тип"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ЭлементУличноДорожнойСети.Наименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ЭлУлДорСети.Наим"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ЗданиеСооружение.Тип",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.Здание.Тип"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ЗданиеСооружение.Номер",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.Здание.Номер"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеЗдания.Тип",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ПомещЗдания.Тип"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеЗдания.Номер",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ПомещЗдания.Номер"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеКвартиры.Тип",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ПомещКвартиры.Тип"));	
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресФИАС.ПомещениеКвартиры.Номер",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрФИАС.ПомещКвартиры.Номер"));	
			
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрИнф") <> Неопределено Тогда		
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.КодСтраны",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрИнф.КодСтр"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.АдресИнформация.АдресТекст",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Адрес.АдрИнф.АдрТекст"));	
		
	КонецЕсли;
	          
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Конт") <> Неопределено Тогда
		КонтактныеСведенияЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Участник, "Конт");
		КонтактныеСведения = ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента(
			ДеревоДанных, ВидУчастника + ".КонтактныеСведения");
		Для Каждого КонтактныеСведенияЭД Из КонтактныеСведенияЭД Цикл
			Для Каждого ТелефонЭД Из КонтактныеСведенияЭД.Тлф Цикл
				НоваяСтрока = КонтактныеСведения.Телефоны.Добавить();
				НоваяСтрока.Телефон = ТелефонЭД;
			КонецЦикла;
			Для Каждого ЭлектроннаяПочтаЭД Из КонтактныеСведенияЭД.ЭлПочта Цикл
				НоваяСтрока = КонтактныеСведения.ЭлектронныеПочты.Добавить();
				НоваяСтрока.ЭлектроннаяПочта = ЭлектроннаяПочтаЭД;
			КонецЦикла;
			КонтактныеСведения.Иное = КонтактныеСведенияЭД.ИнКонт;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КонтактныеСведения",
			КонтактныеСведенияЭД);
	КонецЕсли;
		
КонецПроцедуры

// Функция преобразует строку в дату и время.
//
// Параметры:
//  ДатаВремя - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС".
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя".
//
Функция ПолучитьДатуВремяИзСтроки(ДатаВремя)
	
	Результат = Неопределено;
	ДатаВремя = СтрЗаменить(ДатаВремя, "-", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ":", "");
	Если СтрДлина(ДатаВремя) - СтрНайти(ДатаВремя, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "0");
	ИначеЕсли СтрНайти(ДатаВремя, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремя = СтрЗаменить(ДатаВремя, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(ДатаВремя);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(ДатаВремя, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьДопДанныеСтрокиТЧ(СтрокаXDTO, ДеревоДокумента, ИмяТаблицы, НомерСтроки, СвойстваТЧ, ДопПараметры = Неопределено)
	
	ДопДанные = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	СтрокаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	
	ВсеДопДанные = Новый Массив;
	Если СтрокаXDTO.Свойства().Получить("ЗначенияРеквизитов") <> Неопределено Тогда
		Если ТипЗнч(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаXDTO, "ЗначенияРеквизитов")) = Тип("ОбъектXDTO") Тогда
			ВсеДопДанные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаXDTO, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина);
		КонецЕсли;
	КонецЕсли;
	ТекстДопДанных = "";
	Для каждого ТекущиеДопДанные Из ВсеДопДанные Цикл
		Если ТекущиеДопДанные.Наименование = "ДопДанныеСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьДопДанных = Новый ЗаписьXML;
		ЗаписьДопДанных.УстановитьСтроку();
		ЗаписьДопДанных.ЗаписатьНачалоЭлемента("Реквизит");
		ЗаписьДопДанных.ЗаписатьАтрибут("Имя", ТекущиеДопДанные.Наименование);
		ЗаписьДопДанных.ЗаписатьАтрибут("Значение", ТекущиеДопДанные.Значение);
		ЗаписьДопДанных.ЗаписатьКонецЭлемента();
		ТекущийЭлемент = ЗаписьДопДанных.Закрыть();
		ТекстДопДанных = ТекстДопДанных + ТекущийЭлемент;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстДопДанных) Тогда
		ПозицияКонцаДанных = СтрНайти(ДопДанные, "</Данные>");
		Если ЗначениеЗаполнено(ПозицияКонцаДанных) Тогда
			ДопДанные = Лев(ДопДанные, ПозицияКонцаДанных - 1) + ТекстДопДанных + "</Данные>";
		Иначе
			ДопДанные = "<Данные>" + ТекстДопДанных + "</Данные>";
		КонецЕсли;
	КонецЕсли;
	
	НовоеДерево = Ложь;
	Если СтрокаДопДерево = Неопределено Тогда
		ДопДерево = ДеревоДопДанных();
		НовоеДерево = Истина;
		
	Иначе
		ДопДерево = СтрокаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
		
	ФорматыЭДО.ПрочитатьИнфПол(ДопДанные, ДопДерево, ИмяТаблицы, Строка(НомерСтроки));
	
	Если НовоеДерево Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, Строка(НомерСтроки), ДопПараметры);
	
КонецПроцедуры

Процедура ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, НомерСтроки, ДопПараметры)
	
	СвойстваТаблицы = ДопДерево.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СвойстваТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтр Из СвойстваТаблицы.Строки Цикл
		
		Если ВРег(НомерСтр.ИмяРеквизита) = "НПП" Тогда
			Если Не НомерСтр.ЗначениеРеквизита = НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснованиеНайден = Ложь;
		
		Для Каждого ТекСвойство Из НомерСтр.Строки Цикл
			
			ИмяСвойства = ТекСвойство.ИмяРеквизита;
			ЗначениеСвойства = ТекСвойство.ЗначениеРеквизита;
			
			Если ВРег(ИмяСвойства) = "ВИДДОКУМЕНТАОСНОВАНИЯ"
				Или ВРег(ИмяСвойства) = "НОМЕРДОКУМЕНТАОСНОВАНИЯ"
				Или ВРег(ИмяСвойства) = "ДАТАДОКУМЕНТАОСНОВАНИЯ" Тогда
				Продолжить;
			КонецЕсли;
				
			СвойстваТЧ.Добавить(ЗначениеСвойства, ИмяСвойства);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКолонкиТаблицы(СтруктураСКолонками, Таблица)
	
	Для Каждого КлючЗначение Из СтруктураСКолонками Цикл
		Если Не Таблица.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица.Колонки.Добавить(КлючЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Реквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектРазбора, "Реквизит",,, Истина);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		РеквизитИмя      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Имя");
		РеквизитЗначение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Значение");
		
		Если Не ЗначениеЗаполнено(РеквизитИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура(
			"ИмяРеквизита, ЗначениеРеквизита", РеквизитИмя, РеквизитЗначение);
			
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита       = РеквизитИмя;
			СтрДЗ.ЗначениеРеквизита  = РеквизитЗначение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Реквизит") <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОбОператореЗаполнены(Оператор)
	Возврат ЗначениеЗаполнено(Оператор.Идентификатор)
		ИЛИ ЗначениеЗаполнено(Оператор.Наименование)
		ИЛИ ЗначениеЗаполнено(Оператор.ИНН);
КонецФункции

#Область КлассификаторСтранМира

// см. УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду.
Функция ДанныеКлассификатораСтранМираПоКоду(Знач Код, Знач ТипКода = "КодСтраны")

	Возврат УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(Код, ТипКода);

КонецФункции 

#КонецОбласти

// Извлекает из доп. данных строки товара дерева документа информацию для сопоставления номенклатуры.
// Информация предназначенная для сопоставления определяется по специальному префиксу.
//
// Параметры:
//  ДопДанные - ТаблицаЗначений - доп. данные, из которых нужно извлечь информацию для сопоставления.
//
// Возвращаемое значение:
//  Структура - информация для сопоставления товаров, переданная отправителем.
//
Функция ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(Знач ДопДанные, Знач СопоставлениеПоУмолчанию = Неопределено)
	
	Если ДопДанные = Неопределено Тогда
		ДопДанные = Новый ТаблицаЗначений;
	КонецЕсли;
	Если СопоставлениеПоУмолчанию = Неопределено Тогда
		СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
	КонецЕсли;
	
	Если ПустаяСтрока(СопоставлениеПоУмолчанию.Идентификатор) Тогда
		СопоставлениеПоУмолчанию.Идентификатор = ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(СопоставлениеПоУмолчанию);
	КонецЕсли;
	
	Префикс = ФорматыЭДО.ПрефиксДополнительныхДанныхЭлектронныхДокументов();
	ДлинаПрефикса = СтрДлина(Префикс);
	
	Сопоставление = ОбщегоНазначения.СкопироватьРекурсивно(СопоставлениеПоУмолчанию);
	
	Для Каждого Элемент Из ДопДанные Цикл
		
		Если ТипЗнч(Элемент) = Тип("СтрокаТаблицыЗначений") Тогда
			Ключ = Элемент.Идентификатор;
			Значение = Элемент.Значение;
		Иначе
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
		КонецЕсли;
		
		Если Лев(Ключ, ДлинаПрефикса) = Префикс Тогда
			
			Ключ = Сред(Ключ, ДлинаПрефикса + 1);
			Сопоставление.Вставить(Ключ, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СопоставлениеДляДереваДокумента = ФорматыЭДО.ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Сопоставление);
	
	Возврат СопоставлениеДляДереваДокумента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

