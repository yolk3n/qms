
#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму редактирования адреса
// 
// Параметры:
// 	ПредставлениеАдреса - Строка - представление адреса.
// 	ЗначениеПолейАдреса - Строка - строка JSON или XML контактной информации, соответствующая XDTO-пакету КонтактнаяИнформация.
// 	Оповещение - ОписаниеОповещения - обработчик оповещения, который будет вызван после закрытия формы.
Процедура НачатьРедактированиеАдреса(ПредставлениеАдреса, ЗначениеПолейАдреса = "",
	Оповещение = Неопределено) Экспорт
	
	ТипАдрес = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	
	ДанныеКонтактнойИнформации = ИнтеграцияБСПБЭДСлужебныйВызовСервера.ДанныеКонтактнойИнформацииПоПредставлению(
		ПредставлениеАдреса, ТипАдрес);
	
	Если ЗначениеПолейАдреса = "" Тогда
		ЗначениеПолейАдреса = ДанныеКонтактнойИнформации.Значение;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации.ПараметрыВида.РедактированиеТолькоВДиалоге = Истина;
	ДанныеКонтактнойИнформации.ПараметрыВида.ОбязательноеЗаполнение = Истина;
	ДанныеКонтактнойИнформации.ПараметрыВида.Наименование = НСтр("ru = 'Юридический адрес организации'");
	ДанныеКонтактнойИнформации.ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Ложь;
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ДанныеКонтактнойИнформации.ПараметрыВида, ЗначениеПолейАдреса, ПредставлениеАдреса,, ТипАдрес);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

// Открывает переданный сертификат на просмотр.
// 
// Параметры:
// 	АдресДанныхСертификата - адрес во временном хранилища, в котором лежит сертификат.
Процедура ПоказатьСертификат(АдресДанныхСертификата) Экспорт
	
	СтруктураСертификата = ИнтеграцияБСПБЭДСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, СтруктураСертификата.Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат не найден'"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя события, по которому БСП оповещает о записи сертификата.
// 
// Возвращаемое значение:
// 	Строка - имя события.
Функция ИмяСобытияЗаписьСертификата() Экспорт
	
	Возврат "Запись_СертификатыКлючейЭлектроннойПодписиИШифрования";
	
КонецФункции

Процедура ПодключитьОбсуждения(ОписаниеЗавершения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеЗавершения", ОписаниеЗавершения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияОбсуждений", ИнтеграцияБСПБЭДСлужебныйКлиент, ДополнительныеПараметры);
	
	МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
	МодульОбсужденияСлужебныйКлиент.ПоказатьПодключение(ОписаниеОповещения);
	
КонецПроцедуры

// Конструктор параметров для метода см. ОткрытьФормуВыбораФайловИзОбщегоХранилища
// 
// Возвращаемое значение:
// 	Структура - имя события:
//	* ЗакрыватьПриВыборе - Булево - признак закрытия формы после выбора файла.
//	* МножественныйВыбор - Булево - признак доступности множественного выбора файла.
//	
Функция НовыеПараметрыВыбораФайловИзОбщегоХранилища() экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Открывает форму выбора файлов из общего хранилища.
// 
// Параметры:
// 	Параметры - См. НовыеПараметрыВыбораФайловИзОбщегоХранилища
// 	Оповещение - обработчик оповещения, который будет вызван после выбора файлов. В качестве результата может быть передано:
// 	  * Неопределено - пользователь отказался от выбора
// 	  * СправочникСсылка.Файлы - ссылка на выбранный файл
// 	  * Массив - массив из выбранных файлов в случае множественного выбора.
//
Процедура ОткрытьФормуВыбораФайловИзОбщегоХранилища(Параметры, Оповещение) Экспорт
	
	ТекстПредупреждения = "";
	Если НЕ ИнтеграцияБСПБЭДСлужебныйВызовСервера.ЕстьДоступКХранилищуФайлов(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение( ,ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Параметры.ЗакрыватьПриВыборе);
	ПараметрыФормы.Вставить("МножественныйВыбор", Параметры.МножественныйВыбор);
		
	ОткрытьФорму("Справочник.Файлы.ФормаВыбора", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти
