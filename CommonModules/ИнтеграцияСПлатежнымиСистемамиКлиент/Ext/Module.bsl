///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами".
// ОбщийМодуль.ИнтеграцияСПлатежнымиСистемамиКлиент.
//
// Клиентские процедуры настройки интеграции с платежными системами:
//  - открытие форм настройки параметров интеграции;
//  - отправка сообщений в службу технической поддержки;
//  - переход в журнал регистрации для просмотра лога;
//  - создание новых настроек интеграции;
//  - инициализация параметров открытия и открытие формы платежных ссылок СБП, шаблонов сообщений;
//  - алгоритмы настройки формы "Интернет-поддержка и сервисы";
//  - обработка событий отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму списка настроек интеграции с Системой быстрых платежей.
//
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения - форма которая будет установлена в качестве владельца.
//
Процедура НастройкиИнтеграции(Владелец) Экспорт
	
	ОткрытьФорму(
		"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ФормаСписка",
		,
		Владелец);
	
КонецПроцедуры

// Открывает форму настройки подключения к с Системой быстрых платежей.
//
// Параметры:
//  БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//    выбора участника СБП.
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - оповещение, которое
//    необходимо вызвать после завершения настройки подключения. В случае успешного
//    завершения настройки интеграции в результате оповещения будет возвращено Истина;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//    Значение будет передано в переопределяемые методы:
//     - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаполненииФормыИнтеграции;
//     - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриНастройкеЭлементовФормыИнтеграции.
//  ОтборУчастников - Строка, Неопределено - Параметры отбора участников СБП.
//    Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//    Неопределено по умолчанию.
//
Процедура ПодключитьИнтеграциюССБП(
		БИК = Неопределено,
		ОписаниеОповещения = Неопределено,
		ДополнительныеПараметры = Неопределено,
		ОтборУчастников = Неопределено) Экспорт
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("БИК", БИК);
	ПараметрыПодключения.Вставить("ТорговаяТочка", Неопределено);
	ПараметрыПодключения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыПодключения.Вставить("ОтборУчастников", ОтборУчастников);
	
	СлужебнаяПодключитьИнтеграциюССБП(ПараметрыПодключения, ОписаниеОповещения);
	
КонецПроцедуры

// Отправляет сообщение в службу технической поддержки.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//                     продажу в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                  настройка выполнения оплаты;
//  ТекстСообщения - Строка - сообщение для технической поддержки.
//
Процедура ОтправитьСообщениеВСлужбуТехническойПоддержки(
		ДокументОперации,
		ТорговаяТочка,
		ТекстСообщения = "") Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		
		ДанныеОперации = ИнтеграцияСПлатежнымиСистемамиВызовСервера.ИнформацияДляТехническойПоддержки(
			ДокументОперации,
			ТорговаяТочка);
		
		Вложения = Новый Массив;
		Вложения.Добавить(
			Новый Структура(
				"Представление, ВидДанных, Данные",
				НСтр("ru = 'Служебные данные операции.txt'"),
				"Текст",
				ДанныеОперации));
		
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("Получатель", "webIts");
		ДанныеСообщения.Вставить("Тема",       НСтр("ru = 'Интернет-поддержка. Интеграция с платежными системами'"));
		ДанныеСообщения.Вставить("Сообщение",  ТекстСообщения);
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения,
			Вложения);
	Иначе
		ВызватьИсключение НСтр("ru = 'Для отправки сообщений в техническую поддержку необходимо встроить подсистему ""СообщенияВСлужбуТехническойПоддержки""'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сформировано сообщение в техническую поддержку.'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Открывает форму реестра операций.
//
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения - форма которая будет установлена в качестве владельца.
//
Процедура РеестрОперацийСБПc2b(Владелец) Экспорт
	
	ОткрытьФорму(
		"Отчет.РеестрОперацийСБПc2b.ФормаОбъекта",
		,
		Владелец);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.НастройкиПрограммы

// Обработчик команды БИПНастройкаИнтеграцииСПлатежнымиСистемами
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//  Команда - КомандаФормы - команда на панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_БИПНастройкаИнтеграцииСПлатежнымиСистемами(Форма, Команда) Экспорт
	
	НастройкиИнтеграции(Форма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента БИПДлительностьОперацииПлатежнойСистемы
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//  Элемент - КомандаФормы - команда на панели администрирования.
//
Процедура БИПДлительностьОперацииПлатежнойСистемыПриИзменении(Форма, Элемент) Экспорт
	
	ИнтеграцияСПлатежнымиСистемамиВызовСервера.УстановитьДлительностьОперации(
		Форма.БИПДлительностьОперацииПлатежнойСистемы);
	
КонецПроцедуры

// Открывает форму списка шаблонов сообщений.
//
// Параметры:
//  УИД  - УникальныйИдентификатор - ключ уникальности используемый при открытии формы.
//
Процедура ИнтернетПоддержкаИСервисы_ОткрытьШаблоныСообщенийСБП(УИД) Экспорт
		
	РезультатПроверки = ИнтеграцияСПлатежнымиСистемамиВызовСервера.ВсеШаблоныСозданы();
	
	Если РезультатПроверки.ВсеШаблоны Тогда
		ОткрытьФормуШаблонаСообщенийСОтбором(РезультатПроверки.МассивШаблонов,УИД);
	Иначе
		РезультатПроверки.Вставить("УникальныйИдентификатор",УИД);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросОСозданииШаблонов",
			ЭтотОбъект,
			РезультатПроверки);
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Создать шаблоны сообщений для автоматического заполнения на основании данных документов?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.НастройкиПрограммы

#КонецОбласти

// Открывает форму пользовательского соглашения.
//
// Параметры:
//  ВладелецФормы - ы качестве владельца может выступить форма или элемент управления другой формы.
//
Процедура ФормаПользовательскогоСоглашения(ВладелецФормы = Неопределено) Экспорт
	
	ОткрытьФорму(
		"Обработка.ПодключениеКСБП.Форма.ПользовательскоеСоглашение",
		,
		ВладелецФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента.
//
Процедура ПриОбработкеВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента")
		Или Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Расшифровка = "ПодключитьИнтернетПоддержкуПользователейРеестрСБП" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаОтчета", ФормаОтчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеПодключенияИнтернетПоддержкиПользователей",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаПлатежнойСсылки

// См. ИнтеграцияСПлатежнымиСистемамиСлужебный.ПриОпределенииКомандПодключенныхКОбъекту
//
Процедура ПодключаемыйОткрытьФормуПлатежнойСсылкиСБП(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОткрытьФормуПлатежнойСсылкиСБП(ПараметрКоманды);
	
КонецПроцедуры

// Подготавливает параметры открытия формы формирования платежной ссылки основания платежа.
// Перед открытием проверяется наличие подключенной интернет поддержки пользователей.
//
// Параметры:
//  ПодключенаИПП - Булево - признак подключения ИПП.
//  Параметры - Структура - содержит описание параметров открытия формы:
//   * ОснованиеПлатежа - Произвольный - основание платежа, для которого будет формироваться ссылка.
//
Процедура ОткрытьФормуПлатежнойСсылкиСБППродолжение(Знач ПодключенаИПП, Знач Параметры) Экспорт
	
	Если Не ПодключенаИПП Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ИнтеграцияСПлатежнымиСистемамиВызовСервера.ПриОпределенииДоступностиИнтеграцииПоДокументуОперации(
		Параметры.ОснованиеПлатежа);
	
	Если Не РезультатПроверки.ИнтеграцияДоступна Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ПараметрыНастройки =
		ИнтеграцияСПлатежнымиСистемамиВызовСервера.ПриОпределенииПараметровИнтеграцииДокументаОперации(
			Параметры.ОснованиеПлатежа);
	
	Если ПараметрыНастройки.ТекстВопроса <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыНастройки", ПараметрыНастройки);
		ДополнительныеПараметры.Вставить("Параметры", Параметры);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуПлатежнойСсылкиСБППослеОтвета",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ПараметрыНастройки.ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		ОткрытьФормуПлатежнойСсылкиСБППослеОтветаЗавершение(
			ПараметрыНастройки,
			Параметры)
	КонецЕсли;
	
КонецПроцедуры

// Определяет поведение системы после ответа пользователя о создании новой торговой точки.
//
// Параметры:
//  Ответ - Структура - результат открытия окна с вопросом пользователю.
//  Параметры - Структура - содержит описание параметров открытия формы.
//
Процедура ОткрытьФормуПлатежнойСсылкиСБППослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуПлатежнойСсылкиСБППослеОтветаЗавершение(
			ДополнительныеПараметры.ПараметрыНастройки,
			ДополнительныеПараметры.Параметры)
	КонецЕсли;
	
КонецПроцедуры

// Определяет поведение системы после ответа пользователя о создании новой торговой точки.
//
// Параметры:
//  Параметры - Структура - параметры открытия.
//  ПараметрыНастройки - Структура - содержит описание параметров настройки.
//
Процедура ОткрытьФормуПлатежнойСсылкиСБППослеОтветаЗавершение(ПараметрыНастройки, Параметры)
	
	Если ЗначениеЗаполнено(ПараметрыНастройки.ПереченьТорговыхТочек) Тогда
		
		ОткрытьФормуПодготовкиПлатежнойСсылкиСБП(
			Параметры.ОснованиеПлатежа,
			ПараметрыНастройки.ПереченьТорговыхТочек);
		
	ИначеЕсли ИнтеграцияСПлатежнымиСистемамиВызовСервера.НастройкаИнтеграцияДоступна() Тогда
		
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ОснованиеПлатежа", Параметры.ОснованиеПлатежа);
		ПараметрыЗавершения.Вставить("НоваяТорговаяТочка", Неопределено);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПараметрыЗавершения", ПараметрыЗавершения);
		ПараметрыОповещения.Вставить("НастройкиПодключения", ПараметрыНастройки.НастройкиПодключения);
		
		ОбработкаОтвета = Новый ОписаниеОповещения(
			"ПоказатьВопросСозданияТорговойТочкиЗавершение",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ТекстВопроса = НСтр("ru='Настройка подключения к Системе быстрых платежей не
			|найдена, необходимо создать новую настройку.
			|Создать сейчас?'");
		
		ПоказатьВопрос(
			ОбработкаОтвета,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не обнаружены настройки подключения к СБП'"));
	КонецЕсли;
	
КонецПроцедуры

// Определяет поведение системы после ответа пользователя о создании новой торговой точки.
//
// Параметры:
//  Ответ - Структура - результат открытия окна с вопросом пользователю.
//  Параметры - Структура - содержит описание параметров открытия формы.
//
Процедура ПоказатьВопросСозданияТорговойТочкиЗавершение(Знач Ответ, Знач Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СозданиеТорговойТочкиЗавершение",
			ЭтотОбъект,
			Параметры.ПараметрыЗавершения);
		ПодключитьИнтеграциюССБП(
			Параметры.НастройкиПодключения.БИК,
			ОписаниеОповещения,
			Параметры.НастройкиПодключения.ДополнительныеПараметры,
			Параметры.НастройкиПодключения.ОтборУчастников);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет вызов обработки оповещения после окончания процесса создания торговой точки
//
// Параметры:
//  Результат - КодВозвратаДиалога - Содержит ответ пользователя.
//  ДополнительныеПараметры - Структура - содержит описание оповещения при закрытии формы.
//
Процедура СозданиеТорговойТочкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Отмена Тогда
		ПереченьТорговыхТочек = 
			ИнтеграцияСПлатежнымиСистемамиВызовСервера.ПриОпределенииПараметровИнтеграцииДокументаОперации(
				ДополнительныеПараметры.ОснованиеПлатежа);
		Если ЗначениеЗаполнено(ПереченьТорговыхТочек) Тогда
			ОткрытьФормуПодготовкиПлатежнойСсылкиСБП(
				ДополнительныеПараметры.ОснованиеПлатежа,
				ПереченьТорговыхТочек);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму формирования платежной ссылки основания платежа.
// Перед открытием проверяется наличие подключенной интернет поддержки пользователей.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, для которого будет формироваться ссылка.
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения операции платежной системы.
//
Процедура ОткрытьФормуПодготовкиПлатежнойСсылкиСБП(ОснованиеПлатежа, ПереченьТорговыхТочек)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОснованиеПлатежа", ОснованиеПлатежа);
	ПараметрыФормы.Вставить("ПереченьТорговыхТочек",    ПереченьТорговыхТочек);
	
	ОткрытьФорму(
		"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.Форма.ФормаПодготовкиПлатежнойСсылкиСБП",
		ПараметрыФормы);
		
КонецПроцедуры

// Определяет поведение системы после ответа пользователя о создании шаблонов
//
// Параметры:
//  Результат - Структура - результат открытия окна с вопросом пользователю.
//  Параметры - Структура - содержит описание параметров открытия формы.
//
Процедура ПослеОтветаНаВопросОСозданииШаблонов(Результат, Параметры) Экспорт
	
	МассивШаблонов = Параметры.МассивШаблонов;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ИнтеграцияСПлатежнымиСистемамиВызовСервера.УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем();
		
		МассивСозданныхШаблонов =
			ИнтеграцияСПлатежнымиСистемамиВызовСервера.СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			МассивШаблонов,
			МассивСозданныхШаблонов);
		
	КонецЕсли;
	
	ОткрытьФормуШаблонаСообщенийСОтбором(
		МассивШаблонов,
		Параметры.УникальныйИдентификатор);
	
КонецПроцедуры

// Осуществляет открытие формы шаблонов сообщений с отбором по предопределенным шаблонам подсистемы.
//
// Параметры:
//  МассивШаблонов - Массив из СправочникСсылка.ШаблоныСообщений - массив элементов по которым будет установлен отбор.
//  УИД - УникальныйИдентификатор - ключ уникальности используемый при открытии формы
//
Процедура ОткрытьФормуШаблонаСообщенийСОтбором(МассивШаблонов, УИД)
	
	ОтборФормы = Новый Структура();
	ОтборФормы.Вставить("Ссылка", МассивШаблонов);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	
	ИмяФормыСпискаШаблонов = "Справочник.ШаблоныСообщений.ФормаСписка";
	ОткрытьФорму(ИмяФормыСпискаШаблонов, ПараметрыФормы, ЭтотОбъект, УИД);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

// Выполнение проверки и подключение к Интернет-поддержке пользователей.
// Параметры:
//  ОбработкаЗавершения - ОписаниеОповещения - Процедура, которая будет либо выполнена сразу, если вход в ИПП выполнен,
//    либо после вывода пользователю диалога о необходимости подключения к ИПП и ввода учетных данных.
//    Параметр Результат процедуры-обработчика может принимать значение Ложь,если пользователь отказался от подключения
//    к ИПП или отменил ввод учетных данных, либо Истина, если вход в ИПП выполнен.
//
Процедура НачатьПроверкуИПодключениеИнтернетПоддержкиПользователей(Знач ОбработкаЗавершения = Неопределено)
	
	Если ПроверитьПодключениеИнтернетПоддержкиПользователей() Тогда
		
		Если ОбработкаЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Истина);
		КонецЕсли;
		
	Иначе
		
		ПоказатьВопросПодключенияИнтернетПоддержкиПользователей(ОбработкаЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки
//
Функция ПроверитьПодключениеИнтернетПоддержкиПользователей() 
	
	Возврат ИнтеграцияСПлатежнымиСистемамиВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

// Выполняет вызов вопроса пользователю оповещения после окончания процесса подключения ИПП
//
// Параметры:
//  ОбработкаЗавершения - ОписаниеОповещения - Содержит описание оповещения,
//   которое необходимо вызвать после ответа пользователя.
//
Процедура ПоказатьВопросПодключенияИнтернетПоддержкиПользователей(Знач ОбработкаЗавершения = Неопределено)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ПоказатьВопросПодключенияИнтернетПоддержкиПользователейЗавершение", ЭтотОбъект, Параметры);
	
	ТекстВопроса = НСтр("ru='Для использования функций взаимодействия с сервисом СБП,
		|необходимо подключиться к Интернет-поддержке пользователей.
		|Подключиться сейчас?'");
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Выполняет вызов обработки оповещения после окончания процесса подключения ИПП
//
// Параметры:
//  Ответ - КодВозвратаДиалога - Содержит ответ пользователя.
//  Параметры - Структура - содержит описание оповещения при закрытии формы.
//
Процедура ПоказатьВопросПодключенияИнтернетПоддержкиПользователейЗавершение(Знач Ответ, Знач Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОбработкаПодключения = Новый ОписаниеОповещения(
			"НачатьПодключениеИнтернетПоддержкиПользователейЗавершение",
			ЭтотОбъект,
			Параметры);
		НачатьПодключениеИнтернетПоддержкиПользователей(ОбработкаПодключения);
		
	Иначе
		
		Если Параметры.ОбработкаЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей
//
Процедура НачатьПодключениеИнтернетПоддержкиПользователей(Знач ОбработкаПодключения = Неопределено)
	
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
		ОбработкаПодключения,
		ЭтотОбъект);
	
КонецПроцедуры

// Выполняет вызов обработки оповещения после окончания процесса подключения ИПП
//
// Параметры:
//  ДанныеПодключения - Структура - Содержит данные аутентификации пользователя,
//    пустая если они не заданы.
//  Параметры - Структура - содержит описание оповещения при закрытии формы
//
Процедура НачатьПодключениеИнтернетПоддержкиПользователейЗавершение(Знач ДанныеПодключения, Знач Параметры) Экспорт
	
	Если Параметры.ОбработкаЗавершения <> Неопределено Тогда
		
		Подключено = (ДанныеПодключения <> Неопределено);
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения, Подключено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеКСистемеБыстрыхПлатежей

// Открывает форму настройки подключения к с Системой быстрых платежей.
//
// Параметры:
//  ПараметрыПодключения - Структура - параметры настройки подключения к Системе быстрых платежей:
//    * БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//      выбора участника СБП.
//    * ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами, Неопределено - настройка
//      для автоматического заполнения параметров подключения на основании;
//    * ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//      Значение будет передано в переопределяемые методы:
//       - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаполненииФормыИнтеграции;
//       - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриНастройкеЭлементовФормыИнтеграции.
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - оповещение, которое
//    необходимо вызвать после завершения настройки подключения. В случае успешного
//    завершения настройки интеграции в результате оповещения будет возвращено Истина;
//
Процедура СлужебнаяПодключитьИнтеграциюССБП(
		ПараметрыПодключения,
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму(
		"Обработка.ПодключениеКСБП.Форма",
		ПараметрыПодключения,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Выполняет формирование отчета после ввода данных аутентификации.
//
// Параметры:
//  Результат - Строка - результат ввода логина и пароля;
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПослеПодключенияИнтернетПоддержкиПользователей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		ВызватьИсключение НСтр("ru = 'Не внедрена подсистема ""Варианты отчетов"".'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		МодульОтчетыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтчетыКлиент");
		МодульОтчетыКлиент.СформироватьОтчет(ДополнительныеПараметры.ФормаОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму журнала регистрации с отбором
// по событию см. ИмяСобытияЖурналаРегистрации.
//
Процедура ОткрытьЖурналРегистрации() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаРегистрации());
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор);
	
КонецПроцедуры

// Открывает журнал регистрации с отбором по событию "Интеграция с платежными системами".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с описанием ошибки;
//  Элемент - ДекорацияФормы - элемент описания ошибки;
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение ссылки;
//  СтандартнаяОбработка - Булево - признак стандартной обработки ссылки.
//
Процедура ДекорацияОшибкаОбработкаНавигационнойСсылки(
		Форма,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "OpenLog" Тогда
		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаРегистрации());
		Отбор.Вставить("Уровень",                   "Ошибка");
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Переводы СБП'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
	
КонецФункции

// Открывает форму формирования ссылки на оплату.
// Позволяет: 
//   * Сформировать новую ссылку.
//   * Просмотреть сформированную ранее ссылку.
//   * Обновить данные в сервисе, если они изменились.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, для которого нужно сформировать/открыть/обновить ссылку.
//
Процедура ОткрытьФормуПлатежнойСсылкиСБП(Знач ОснованиеПлатежа)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОснованиеПлатежа", ОснованиеПлатежа);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"ОткрытьФормуПлатежнойСсылкиСБППродолжение",
		ЭтотОбъект,
		Параметры);
	
	НачатьПроверкуИПодключениеИнтернетПоддержкиПользователей(ОбработкаПродолжения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

