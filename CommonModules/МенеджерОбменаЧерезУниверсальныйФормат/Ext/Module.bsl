// Конвертация БА 2.1.5 от 14.05.2020 11:24:10
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений;
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
	
	Иначе
	
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			КомпонентыОбмена.ПараметрыКонвертации.ОтключитьСписаниеПриОтпускеВОтделениеБезСкладУчета = КомпонентыОбмена.УзелКорреспондента.ОтключитьСписаниеПриОтпускеВОтделениеБезСкладскогоУчета;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
			ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВнПотреблениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВнПотреблениеТоваровВОтделении_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровИзОтделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Изготовление_ВыпускПродукции_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеИзлишков_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеИзлишковВОтделении_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтпускТоваровВОтделение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеМеждуОтделениями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаТоваровВОтделении_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПотреблениеПоНазначениямВрачей_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеНедостачТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеНедостачТоваровВОтделении_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Отделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных); 
		ДобавитьПОД_Справочник_СтатьиДоходовГруппа_Получение(ПравилаОбработкиДанных);  // { Профрешение 22.12.2023 } 
		ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных);	   
		ДобавитьПОД_Справочник_СтатьиРасходовГруппа_Получение(ПравилаОбработкиДанных); // { Профрешение 19.12.2023 }                                                              
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВнПотреблениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ВнПотреблениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнПотреблениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнПотребление_ВПроизводство_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнПотреблениеТоваровВОтделении_Отправка
Процедура ДобавитьПОД_Документ_ВнПотреблениеТоваровВОтделении_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнПотреблениеТоваровВОтделении_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВнутреннееПотреблениеТоваровВОтделении;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровИзОтделения_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровИзОтделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровИзОтделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровИзОтделения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратИзОтделения_Перемещение_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтКлиента_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтКлиента_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказПоставщику");
КонецПроцедуры
#КонецОбласти
#Область Документ_Изготовление_ВыпускПродукции_Отправка
Процедура ДобавитьПОД_Документ_Изготовление_ВыпускПродукции_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Изготовление_ВыпускПродукции_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИзготовлениеПоЛекарственнойПрописи;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Изготовление_ВыпускПродукции_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Изготовление_ВПроизводство_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ВыпускПродукции.Материалы") Тогда
		// Начиная с формата 1.3, в объекте Документ.ВыпускПродукции появилось свойство Материалы,
		// для списания материалов, необходимых для производства.
		// Необходимости в формировании документа Документ.ПередачаМатериаловВПроизводство, в данном контексте, нет.  
		ИспользованиеПКО.Удалить("Документ_Изготовление_ВПроизводство_Отправка");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеИзлишков_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеИзлишков_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеИзлишков_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеИзлишковВОтделении_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеИзлишковВОтделении_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеИзлишковВОтделении_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеИзлишковТоваровВОтделении;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваровВОтделении_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтпускТоваровВОтделение_Отправка
Процедура ДобавитьПОД_Документ_ОтпускТоваровВОтделение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтпускТоваровВОтделение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтпускТоваровВОтделение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтпускТоваровВОтделение_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтпускВОтделение_Перемещение_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтпускВОтделение_ВПроизводство_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтпускТоваровВОтделение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Отправка в документ Перемещение товаров выполняется всегда.
	// Если складской учет в отделении ведется
	// или в настрофках узла установлен флаг ОтключитьСписаниеПриОтпускеВОтделениеБезСкладУчета,
	// тогда отправка в документ передачи в производство не выполняется.
	// Передача в производство выполняется со склада получателя.
	
	Если СкладыСервер.ВестиСкладскойУчетВОтделении(ДанныеИБ.Отделение, ДанныеИБ.Дата)
	 Или КомпонентыОбмена.ПараметрыКонвертации.ОтключитьСписаниеПриОтпускеВОтделениеБезСкладУчета = Истина Тогда
		ИспользованиеПКО.Документ_ОтпускВОтделение_ВПроизводство_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.Товары.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеМеждуОтделениями_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеМеждуОтделениями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеМеждуОтделениями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваровМеждуОтделениями;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеМеждуОтделениями_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка             = Ложь;
	ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка  = Ложь;
	ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка = Ложь;
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.Партия                                   КАК Партия,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Номенклатура.СтавкаНДС                   КАК СтавкаНДСВРознице,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		
		ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка  = Истина;
		ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка = Истина;
		
		ДанныеПолученияЦен = Новый Структура("ВидЦены", ДанныеИБ.ВидЦены);
		ПараметрыРасширенияДанных = Новый Структура("СуммаПоВидуЦены", "Сумма");
	
	Иначе
		
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Истина;
		
		ДанныеПолученияЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СкладПолучатель, Новый Структура("ТипСклада, ВидЦены", "ТипСклада", "РозничныйВидЦены"));
		Если ДанныеПолученияЦен.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин И ЗначениеЗаполнено(ДанныеПолученияЦен.ВидЦены) Тогда
			ПараметрыРасширенияДанных = Новый Структура("ЦенаПоВидуЦены, СуммаПоВидуЦены", "ЦенаВРознице", "СуммаВРознице");
		Иначе
			ПараметрыРасширенияДанных = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса, ПараметрыРасширенияДанных);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата"   , КонецДня(ДанныеИБ.Дата));
	Запрос.УстановитьПараметр("ВидЦены", ДанныеПолученияЦен.ВидЦены);
	Запрос.УстановитьПараметр("Валюта" , Константы.ВалютаРегламентированногоУчета.Получить());
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересортицаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписаниеЗапасов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписаниеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПересортицаВСписаниеЗапасов_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПересортицаВСписаниеТоваров_Отправка = Ложь;
	
	Если ДанныеИБ.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		
		// Цена и сумма номенклатуры оприходования получаются по себестоимости списания номенклатуры списания.
		// Обрабатываются только те строки, в которых номенклатура списания отлична от номенклатуры оприходования.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                              КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура                             КАК Номенклатура,
		|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
		|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	Товары.Партия                                   КАК Партия,
		|	Товары.Количество                               КАК Количество,
		|	Товары.НоменклатураОприходование                КАК НоменклатураОприходование,
		|	Товары.ЕдиницаИзмеренияОприходование            КАК ЕдиницаИзмеренияВДокументеОприходование,
		|	ВЫБОР
		|		КОГДА Товары.НоменклатураОприходование.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.НоменклатураОприходование.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.НоменклатураОприходование.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмеренияОприходование,
		|	Товары.НоменклатураОприходование.Упаковка       КАК УпаковкаОприходование,
		|	Товары.СерияНоменклатурыОприходование           КАК СерияНоменклатурыОприходование,
		|	Товары.КоличествоОприходование                  КАК КоличествоОприходование,
		|	Товары.КоличествоВЕдиницахИзмерения             КАК КоличествоВЕдиницахИзмерения,
		|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))  КАК ТипЗапасов,
		|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
		|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ПересортицаТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.НоменклатураОприходование <> Товары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	СерияНоменклатуры,
		|	Партия
		|";
		
		ПараметрыРасширенияДанных = Новый Структура("ЦенаПоВидуЦены, СуммаПоВидуЦены", "Цена", "Сумма");
		
		ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса, ПараметрыРасширенияДанных);
		
		ПараметрыПолученияДанных = Новый Структура;
		ПараметрыПолученияДанных.Вставить("Дата"   , ДанныеИБ.Дата);
		ПараметрыПолученияДанных.Вставить("Валюта" , Константы.ВалютаРегламентированногоУчета.Получить());
		ПараметрыПолученияДанных.Вставить("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "УчетныйВидЦены"));
		
	Иначе
		
		// Цена и сумма номенклатуры оприходования получаются из документа.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                              КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура                             КАК Номенклатура,
		|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
		|	Товары.Количество                               КАК Количество,
		|	Товары.НоменклатураОприходование                КАК НоменклатураОприходование,
		|	Товары.ЕдиницаИзмеренияОприходование            КАК ЕдиницаИзмеренияВДокументеОприходование,
		|	ВЫБОР
		|		КОГДА Товары.НоменклатураОприходование.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.НоменклатураОприходование.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.НоменклатураОприходование.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмеренияОприходование,
		|	Товары.НоменклатураОприходование.Упаковка       КАК УпаковкаОприходование,
		|	Товары.СерияНоменклатурыОприходование           КАК СерияНоменклатурыОприходование,
		|	Товары.КоличествоОприходование                  КАК КоличествоОприходование,
		|	Товары.КоличествоВЕдиницахИзмерения             КАК КоличествоВЕдиницахИзмерения,
		|	Товары.Цена                                     КАК Цена,
		|	Товары.Сумма                                    КАК Сумма,
		|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))  КАК ТипЗапасов,
		|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
		|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ПересортицаТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|";
		
		ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
		ПараметрыПолученияДанных = Новый Структура;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Для Каждого КлючИЗначение Из ПараметрыПолученияДанных Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ЕстьДанныеКВыгрузке = Товары.Количество() > 0;
	Если ЕстьДанныеКВыгрузке Тогда
		Для Каждого Товар Из Товары Цикл
			Если Не (ЗначениеЗаполнено(Товар.Цена) И ЗначениеЗаполнено(Товар.Сумма)) Тогда
				ЕстьДанныеКВыгрузке = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьДанныеКВыгрузке Тогда
		
		ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка   = Истина;
		ИспользованиеПКО.Документ_ПересортицаВСписаниеЗапасов_Отправка = Истина;
		ИспользованиеПКО.Документ_ПересортицаВСписаниеТоваров_Отправка = Истина;
		
		ТипИспользуется_СписаниеЗапасов = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов"); // С версии 1.3.
		Если Не ТипИспользуется_СписаниеЗапасов Тогда
			ИспользованиеПКО.Удалить("Документ_ПересортицаВСписаниеЗапасов_Отправка");
		КонецЕсли;
		
		ТипИспользуется_СписаниеТоваров = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеТоваров"); // До версии 1.3.
		Если Не ТипИспользуется_СписаниеТоваров Тогда
			ИспользованиеПКО.Удалить("Документ_ПересортицаВСписаниеТоваров_Отправка");
		КонецЕсли;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары"        , Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаДокумента", Товары.Итог("Сумма"));
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаТоваровВОтделении_Отправка
Процедура ДобавитьПОД_Документ_ПересортицаТоваровВОтделении_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересортицаТоваровВОтделении_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваровВОтделении;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересортицаТоваровВОтделении_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОтдВОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОтдВСписаниеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересортицаТоваровВОтделении_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПересортицаВОтдВОприходование_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПересортицаВОтдВСписаниеТоваров_Отправка = Ложь;
	
	Если ДанныеИБ.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		
		// Цена и сумма номенклатуры оприходования получаются по себестоимости списания номенклатуры списания.
		// Обрабатываются только те строки, в которых номенклатура списания отлична от номенклатуры оприходования.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                              КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура                             КАК Номенклатура,
		|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
		|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	Товары.Партия                                   КАК Партия,
		|	Товары.Количество                               КАК Количество,
		|	Товары.НоменклатураОприходование                КАК НоменклатураОприходование,
		|	Товары.ЕдиницаИзмеренияОприходование            КАК ЕдиницаИзмеренияВДокументеОприходование,
		|	ВЫБОР
		|		КОГДА Товары.НоменклатураОприходование.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.НоменклатураОприходование.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.НоменклатураОприходование.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмеренияОприходование,
		|	Товары.НоменклатураОприходование.Упаковка       КАК УпаковкаОприходование,
		|	Товары.СерияНоменклатурыОприходование           КАК СерияНоменклатурыОприходование,
		|	Товары.КоличествоОприходование                  КАК КоличествоОприходование,
		|	Товары.КоличествоВЕдиницахИзмерения             КАК КоличествоВЕдиницахИзмерения,
		|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))  КАК ТипЗапасов,
		|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
		|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ПересортицаТоваровВОтделении.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.НоменклатураОприходование <> Товары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	СерияНоменклатуры,
		|	Партия
		|";
		
		ПараметрыРасширенияДанных = Новый Структура("ЦенаПоВидуЦены, СуммаПоВидуЦены", "Цена", "Сумма");
		
		ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса, ПараметрыРасширенияДанных);
		
		ПараметрыПолученияДанных = Новый Структура;
		ПараметрыПолученияДанных.Вставить("Дата"   , ДанныеИБ.Дата);
		ПараметрыПолученияДанных.Вставить("Валюта" , Константы.ВалютаРегламентированногоУчета.Получить());
		ПараметрыПолученияДанных.Вставить("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "УчетныйВидЦены"));
		
	Иначе
		
		// Цена и сумма номенклатуры оприходования получаются из документа.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                              КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура                             КАК Номенклатура,
		|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
		|	Товары.Количество                               КАК Количество,
		|	Товары.НоменклатураОприходование                КАК НоменклатураОприходование,
		|	Товары.ЕдиницаИзмеренияОприходование            КАК ЕдиницаИзмеренияВДокументеОприходование,
		|	ВЫБОР
		|		КОГДА Товары.НоменклатураОприходование.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.НоменклатураОприходование.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.НоменклатураОприходование.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмеренияОприходование,
		|	Товары.НоменклатураОприходование.Упаковка       КАК УпаковкаОприходование,
		|	Товары.СерияНоменклатурыОприходование           КАК СерияНоменклатурыОприходование,
		|	Товары.КоличествоОприходование                  КАК КоличествоОприходование,
		|	Товары.КоличествоВЕдиницахИзмерения             КАК КоличествоВЕдиницахИзмерения,
		|	Товары.Цена                                     КАК Цена,
		|	Товары.Сумма                                    КАК Сумма,
		|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))  КАК ТипЗапасов,
		|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
		|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
		|ИЗ
		|	Документ.ПересортицаТоваровВОтделении.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|";
		
		ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
		ПараметрыПолученияДанных = Новый Структура;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Для Каждого КлючИЗначение Из ПараметрыПолученияДанных Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ЕстьДанныеКВыгрузке = Товары.Количество() > 0;
	Если ЕстьДанныеКВыгрузке Тогда
		Для Каждого Товар Из Товары Цикл
			Если Не (ЗначениеЗаполнено(Товар.Цена) И ЗначениеЗаполнено(Товар.Сумма)) Тогда
				ЕстьДанныеКВыгрузке = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьДанныеКВыгрузке Тогда
		
		ИспользованиеПКО.Документ_ПересортицаВОтдВОприходование_Отправка   = Истина;
		ИспользованиеПКО.Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка = Истина;
		ИспользованиеПКО.Документ_ПересортицаВОтдВСписаниеТоваров_Отправка = Истина;
		
		ТипИспользуется_СписаниеЗапасов = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов"); // С версии 1.3.
		Если Не ТипИспользуется_СписаниеЗапасов Тогда
			ИспользованиеПКО.Удалить("Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка");
		КонецЕсли;
		
		ТипИспользуется_СписаниеТоваров = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеТоваров"); // До версии 1.3.
		Если Не ТипИспользуется_СписаниеТоваров Тогда
			ИспользованиеПКО.Удалить("Документ_ПересортицаВОтдВСписаниеТоваров_Отправка");
		КонецЕсли;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары"        , Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаДокумента", Товары.Итог("Сумма"));
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеДопРасходов_ПТиУ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДРЧерезПодотчетноеЛицо_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДРСчетФактураПолученный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЗакупкаУПоставщика          = ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ЗакупкаЧерезПодотчетноеЛицо = ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	ПредъявленСчетФактура       = ЗакупкаУПоставщика И ДанныеИБ.ПредъявленСчетФактура;
	
	ИспользованиеПКО.Документ_ПоступлениеДопРасходов_ПТиУ_Отправка = ЗакупкаУПоставщика;
	ИспользованиеПКО.Документ_ПДРЧерезПодотчетноеЛицо_Отправка     = ЗакупкаЧерезПодотчетноеЛицо;
	ИспользованиеПКО.Документ_ПДРСчетФактураПолученный_Отправка    = ПредъявленСчетФактура;
	
	Если ЗакупкаЧерезПодотчетноеЛицо Тогда
	
		// ПрочиеРасходы
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расходы.Содержание                                            КАК Содержание,
		|	Расходы.Сумма                                                 КАК Сумма,
		|	Расходы.СтавкаНДС                                             КАК СтавкаНДС,
		|	Расходы.СуммаНДС                                              КАК СуммаНДС,
		|	Расходы.СтатьяРасходов                                        КАК СтатьяЗатрат,
		|	ЕСТЬNULL(Расходы.СтатьяРасходов.КорреспондирующийСчет, """")  КАК СчетЗатрат
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка = &Ссылка
		|	И Расходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|");
	
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ИспользованиеПКО.Документ_ПДРЧерезПодотчетноеЛицо_Отправка  = Ложь;
			ИспользованиеПКО.Документ_ПДРСчетФактураПолученный_Отправка = Ложь;
			Возврат;
		КонецЕсли;
		
		ПрочиеРасходы = РезультатЗапроса.Выгрузить();
		
		Колонки = ПрочиеРасходы.Колонки;
		Колонки.Добавить("ПредъявленСФ");
		Колонки.Добавить("Поставщик");
		Колонки.Добавить("ДатаСФ");
		Колонки.Добавить("НомерСФ");
		Колонки.Добавить("НомерВходящегоДокумента");
		Колонки.Добавить("ДатаВходящегоДокумента");
		Колонки.Добавить("Налогообложение");
	
		ПрочиеРасходы.ЗаполнитьЗначения(ПредъявленСчетФактура              , "ПредъявленСФ");
		ПрочиеРасходы.ЗаполнитьЗначения(ДанныеИБ.Контрагент                , "Поставщик");
		ПрочиеРасходы.ЗаполнитьЗначения(ДанныеИБ.ДатаВходящегоСчетаФактуры , "ДатаСФ");
		ПрочиеРасходы.ЗаполнитьЗначения(ДанныеИБ.НомерВходящегоСчетаФактуры, "НомерСФ");
		ПрочиеРасходы.ЗаполнитьЗначения(ДанныеИБ.НомерВходящегоДокумента   , "НомерВходящегоДокумента");
		ПрочиеРасходы.ЗаполнитьЗначения(ДанныеИБ.ДатаВходящегоДокумента    , "ДатаВходящегоДокумента");
		
		Если СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
			// До версии 1.6.
			ПрочиеРасходы.ЗаполнитьЗначения(ДанныеИБ.НалогообложениеНДС, "Налогообложение");
		КонецЕсли;
	
		ДанныеИБ.ДополнительныеСвойства.Вставить("ПрочиеРасходы" , ПрочиеРасходы);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаДокумента", ПрочиеРасходы.Итог("Сумма"));
	
		Если ПредъявленСчетФактура Тогда
			
			ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаНДС", ПрочиеРасходы.Итог("СуммаНДС"));
	
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокументОснование");
			ДокументОснование = ДокументыОснования.Добавить();
			ДокументОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Ссылка, "Документ_ПДРЧерезПодотчетноеЛицо_Отправка");
			ДанныеИБ.ДополнительныеСвойства.Вставить("ДокументыОснования", ДокументыОснования);
	
		КонецЕсли;
	
	ИначеЕсли ЗакупкаУПоставщика Тогда
		
		// ДопРасходы
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расходы.НомерСтроки    КАК НомерСтрокиДокумента,
		|	Расходы.Содержание     КАК Содержание,
		|	Расходы.Количество     КАК Количество,
		|	Расходы.Сумма          КАК Сумма,
		|	Расходы.Цена           КАК Цена,
		|	Расходы.СтавкаНДС      КАК СтавкаНДС,
		|	Расходы.СуммаНДС       КАК СуммаНДС,
		|	ИСТИНА                 КАК ЭтоДопРасходы,
		|	Расходы.СтатьяРасходов КАК СтатьяЗатрат
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка = &Ссылка
		|	И Расходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента
		|");
	
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
	
		Если РезультатЗапроса.Пустой() Тогда
			ИспользованиеПКО.Документ_ПоступлениеДопРасходов_ПТиУ_Отправка = Ложь;
			ИспользованиеПКО.Документ_ПДРСчетФактураПолученный_Отправка    = Ложь;
			Возврат;
		КонецЕсли;
		
		// Расходы - Услуги
		Услуги = РезультатЗапроса.Выгрузить();
	
		// РасшифровкаДопРасходов
		РасшифровкаДопРасходов = ОбменДаннымиБольничнаяАптека.ТаблицаРаспределенияРасходовНаСебестоимостьТоваров(ДанныеИБ);
	
		// Удаление строк с пустыми суммами из расшифровки.
		ГраницаСтрокДопРасходы = РасшифровкаДопРасходов.Количество() - 1;
		Для Индекс = 0 По ГраницаСтрокДопРасходы Цикл
			СтрокаДопРасходов = РасшифровкаДопРасходов[ГраницаСтрокДопРасходы - Индекс];
			Если Окр(СтрокаДопРасходов.Сумма, 2) = 0 Тогда
				РасшифровкаДопРасходов.Удалить(СтрокаДопРасходов);
			КонецЕсли;
		КонецЦикла;
	
		Если РасшифровкаДопРасходов.Количество() = 0 Тогда
			ИспользованиеПКО.Документ_ПоступлениеДопРасходов_ПТиУ_Отправка = Ложь;
			ИспользованиеПКО.Документ_ПДРСчетФактураПолученный_Отправка    = Ложь;
			Возврат;
		КонецЕсли;
	
		Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
			Если ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступления) Тогда
				СтрокаРасшифровкаДопРасходов.ДокументПоступления = ИнструкцияОтправкиДокументаПоступления(СтрокаРасшифровкаДопРасходов.ДокументПоступления);
			Иначе
				ИспользованиеПКО.Документ_ПоступлениеДопРасходов_ПТиУ_Отправка = Ложь;
				ИспользованиеПКО.Документ_ПДРСчетФактураПолученный_Отправка    = Ложь;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	
		ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги"                , Услуги);
		ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаДокумента"        , Услуги.Итог("Сумма"));
	
		Если ПредъявленСчетФактура Тогда
			
			ДанныеИБ.ДополнительныеСвойства.Вставить("СуммаНДС", Услуги.Итог("СуммаНДС"));
	
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокументОснование");
			ДокументОснование = ДокументыОснования.Добавить();
			ДокументОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Ссылка, "Документ_ПоступлениеДопРасходов_ПТиУ_Отправка");
			ДанныеИБ.ДополнительныеСвойства.Вставить("ДокументыОснования", ДокументыОснования);
	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПТУЧерезПодотчетноеЛицо_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПТУСчетФактураПолученный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЗакупкаЧерезПодотчетноеЛицо = ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Не ЗакупкаЧерезПодотчетноеЛицо;
	ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Отправка = ЗакупкаЧерезПодотчетноеЛицо;
	
	ИспользованиеПКО.Документ_ПТУСчетФактураПолученный_Отправка = Не ЗакупкаЧерезПодотчетноеЛицо И ДанныеИБ.ПредъявленСчетФактура;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПотреблениеПоНазначениямВрачей_Отправка
Процедура ДобавитьПОД_Документ_ПотреблениеПоНазначениямВрачей_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПотреблениеПоНазначениямВрачей_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПотреблениеТоваровПоНазначениямВрачей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПотреблениеПоНазначениямВрачей_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровНаСторону;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеНедостачТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеНедостачТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеНедостачТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостач_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеНедостачТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТипИспользуется_СписаниеНедостач = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеНедостач"); // С версии 1.3.
	Если Не ТипИспользуется_СписаниеНедостач Тогда
		ИспользованиеПКО.Удалить("Документ_СписаниеНедостач_Отправка");
	КонецЕсли;
	
	ТипИспользуется_СписаниеТоваров = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеТоваров"); // До версии 1.3.
	Если Не ТипИспользуется_СписаниеТоваров Тогда
		ИспользованиеПКО.Удалить("Документ_СписаниеТоваров_Отправка");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачТоваровВОтделении_Отправка
Процедура ДобавитьПОД_Документ_СписаниеНедостачТоваровВОтделении_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеНедостачТоваровВОтделении_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеНедостачТоваровВОтделении;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеНедостачТоваровВОтделении_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровВОтделении_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостачВОтделении_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеНедостачТоваровВОтделении_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТипИспользуется_СписаниеНедостач = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеНедостач"); // С версии 1.3.
	Если Не ТипИспользуется_СписаниеНедостач Тогда
		ИспользованиеПКО.Удалить("Документ_СписаниеНедостачВОтделении_Отправка");
	КонецЕсли;
	
	ТипИспользуется_СписаниеТоваров = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеТоваров"); // До версии 1.3.
	Если Не ТипИспользуется_СписаниеТоваров Тогда
		ИспользованиеПКО.Удалить("Документ_СписаниеТоваровВОтделении_Отправка");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры
#КонецОбласти
#Область ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры
#КонецОбласти
#Область ЗначенияДопРеквизитов_Отправка
Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДопРеквизитов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ДанныеИБ.ЭтоГруппа Тогда	
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыДокументовФизическихЛиц = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыДокументовФизическихЛиц");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыНоменклатуры_Отправка = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Не ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ДокументыФизическихЛиц");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КассыККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ");
КонецПроцедуры

Процедура ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ИспользоватьБезПодключенияОборудования
	 Или Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ") Тогда
		ИспользованиеПКО.Справочник_КассыККМ = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Отделения_Отправка
Процедура ДобавитьПОД_Справочник_Отделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Отделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ОтделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Отделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
КонецПроцедуры

Процедура ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СерииНоменклатуры = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СкладыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДоходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Отправка"); 
	
КонецПроцедуры 

#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// С версии 1.6.
	// Выгрузка штрихкодов выполняется только при наличии Упаковок.
	// Упаковки выгружаются только при наличии Номенклатуры в формате.
	// Номенклатура в формате объекта появилась только с версии 1.6.
	
	ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Упаковки.КлючевыеСвойства.Номенклатура");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Отправка
Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы");
КонецПроцедуры

Процедура ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ИспользоватьБезПодключенияОборудования
	 Или Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ЭквайринговыеТерминалы") Тогда
		ИспользованиеПКО.Справочник_ЭквайринговыеТерминалы = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Ложь;
	ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Ложь;
	
	Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если СтрНайти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Истина;
		ИначеЕсли Найти(Владелец.ТипЗначения, "Контрагент") > 0
			 Или Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыДокументовФизическихЛиц_Получение"; 
	// Профрешение 29.12.2023 {
	//ПравилоОбработки.ОбъектВыборкиФормат     = "";  
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыДокументовФизическихЛиц";  
    // } Профрешение
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыДокументовФизическихЛиц_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыДокументовФизическихЛиц_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыДокументовФизическихЛиц = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыДокументовФизическихЛиц");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КассыККМ";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КассыККМ_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ");
КонецПроцедуры

Процедура ПОД_Справочник_КассыККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КассыККМ = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти  
// } Сурина

#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Подразделения_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Отделения_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_Подразделения_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ПодразделениеНайдено = Ложь;
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		Если СсылкаПоДаннымXDTO(КомпонентыОбмена, ДанныеXDTO, КлючИЗначение.Ключ) <> Неопределено Тогда
			ИспользованиеПКО[КлючИЗначение.Ключ] = Истина;
			ПодразделениеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеРеквизиты = Неопределено;
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты", ДополнительныеРеквизиты) И ДополнительныеРеквизиты.Количество() > 0 Тогда
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
			Если СтрНачинаетсяС(ВРег(ДопРеквизит.Свойство.Наименование), ВРег("Тип подразделения")) И ТипЗнч(ДопРеквизит.ЗначениеСвойства) = Тип("Строка") Тогда
				Если Не ПодразделениеНайдено Тогда
					Если ДопРеквизит.ЗначениеСвойства = ТипПодразделенияОтделение() Тогда
						ИспользованиеПКО.Справочник_Отделения_Получение = Истина;
						ПодразделениеНайдено = Истина;
					ИначеЕсли ДопРеквизит.ЗначениеСвойства = ТипПодразделенияПодразделение() Тогда
						ИспользованиеПКО.Справочник_Подразделения_Получение = Истина;
						ПодразделениеНайдено = Истина;
					КонецЕсли;
				КонецЕсли;
				ДополнительныеРеквизиты.Удалить(ДополнительныеРеквизиты.Индекс(ДопРеквизит));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользователю будет предложено сопоставить данные текущего объекта,
	// при интерактивной загрузке, для обеих типов подразделения.
	// Несопоставленные данные будут загружены с пометкой на удаление, 
	// т.к. не понятно, какого типа объект.
	Если Не ПодразделениеНайдено Тогда
		Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
			ИспользованиеПКО[КлючИЗначение.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПОД_Справочник_СкладыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов_Получение");
КонецПроцедуры 

// Профрешение 22.12.2023 { 
Процедура ДобавитьПОД_Справочник_СтатьиДоходовГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДоходовГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДоходовГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходовГруппа_Получение");
КонецПроцедуры
// } Профрешение
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Получение");
КонецПроцедуры   

// Профрешение 19.12.2023 {
Процедура ДобавитьПОД_Справочник_СтатьиРасходовГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиРасходовГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходовГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходовГруппа_Получение");
КонецПроцедуры
// } Профрешение

#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Получение
Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЭквайринговыеТерминалы_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы");
КонецПроцедуры

Процедура ПОД_Справочник_ЭквайринговыеТерминалы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ЭквайринговыеТерминалы = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ЭквайринговыеТерминалы");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВнПотребление_ВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратИзОтделения_Перемещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Изготовление_ВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Изготовление_ВыпускПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваровВОтделении_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтпускВОтделение_ВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтпускВОтделение_Перемещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДРСчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДРЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеМеждуОтделениями_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОтдВОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОтдВСписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_ПТиУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПотреблениеПоНазначениямВрачей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПТУСчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостачВОтделении_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровВОтделении_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Отделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДоходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Упаковки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Отделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДоходов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Получение(ПравилаКонвертации);	
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);  //посмотреть
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДопРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КассыККМ(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДоходовГруппа_Получение(ПравилаКонвертации); // { Профрешение 22.12.2023 }
	ДобавитьПКО_Справочник_СтатьиРасходовГруппы_Получение(ПравилаКонвертации); // { Профрешение 18.12.2023 }  
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЭквайринговыеТерминалы(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_ВнПотребление_ВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_ВнПотребление_ВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнПотребление_ВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнПотребление_ВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнПотребление_ВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                                           КАК НомерСтроки,
	|	Товары.Номенклатура                                          КАК Номенклатура,
	|	Товары.СерияНоменклатуры                                     КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                                      КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                                        КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                                 КАК Упаковка,
	|	Товары.Количество                                            КАК Количество,
	|	Товары.СтатьяРасходов                                        КАК СтатьяЗатрат,
	|	ЕСТЬNULL(Товары.СтатьяРасходов.КорреспондирующийСчет, """")  КАК СчетЗатрат,
	|	&ПодразделениеЗатрат                                         КАК ПодразделениеЗатрат,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))               КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))                  КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеЗатрат", ДанныеИБ.ПодразделениеОрганизации);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВнутреннееПотреблениеТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "Н" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                                           КАК НомерСтроки,
	|	Товары.Номенклатура                                          КАК Номенклатура,
	|	Товары.СерияНоменклатуры                                     КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                                      КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                                        КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                                 КАК Упаковка,
	|	Товары.Количество                                            КАК Количество,
	|	Товары.СтатьяРасходов                                        КАК СтатьяЗатрат,
	|	ЕСТЬNULL(Товары.СтатьяРасходов.КорреспондирующийСчет, """")  КАК СчетЗатрат,
	|	&ПодразделениеЗатрат                                         КАК ПодразделениеЗатрат,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))               КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))                  КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваровВОтделении.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеЗатрат", ДанныеИБ.Отделение);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка
Процедура ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвизоПоМПЗВходящее";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",           "ОрганизацияОтправитель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары.Скопировать();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка
Процедура ДобавитьПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвизоПоМПЗИсходящее";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "ОрганизацияПолучатель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",      "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",       "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары.Скопировать();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратИзОтделения_Перемещение_Отправка
Процедура ДобавитьПКО_Документ_ВозвратИзОтделения_Перемещение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратИзОтделения_Перемещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровИзОтделения;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратИзОтделения_Перемещение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",                "ПодразделениеОтправитель", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "ПодразделениеПолучатель", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",         "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",          "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратИзОтделения_Перемещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "В" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ВозвратТоваровИзОтделения.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтКлиента_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументРеализации",       "ДокументРеализации", , "Документ_ОтчетОРозничныхПродажах_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",       "Налогообложение", , "Перечисление_Налогообложение");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1, "ВидыОперацийВозвратТоваровОтПокупателя_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Шапка
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Валюта, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов"       , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов"  , СтруктураКурсаДокумента.Кратность);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах" , Ложь);
	
	ДанныеXDTO.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДСПродавца") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_НалогообложениеНДСПродавца"));
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
		// До версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_Налогообложение"));
	КонецЕсли;
	
	// Для возврата от розничного покупателя, контрагент в документе не заполняется.
	// Используется фиктивный розничный покупатель.
	// Данный контрагент должен существовать в конфигурации-приемнике (типовые конфигурации это предполагают).
	ДанныеXDTO.Вставить("Контрагент", ПолучитьРозничногоПокупателя());
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.Вручную) ТОГДА
	|			ВЫРАЗИТЬ(Товары.Себестоимость КАК Число(15,2))
	|		КОГДА Товары.Ссылка.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзТекущегоДокумента) ТОГДА
	|			ВЫРАЗИТЬ(Товары.СуммаСНДС - Товары.СуммаНДС КАК Число(15,2))
	|		ИНАЧЕ // ИзДокументаПродажи
	|			0
	|	КОНЕЦ                                           КАК Себестоимость,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ТипИспользуется_ВозвратПодДеятельность = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ВозвратТоваровОтПокупателя.Товары.Строка.ВозвратПодДеятельность"); // С версии 1.6.
	Если ТипИспользуется_ВозвратПодДеятельность Тогда
		Товары.Колонки.Добавить("ВозвратПодДеятельность");
		Товары.ЗаполнитьЗначения("ПоФактическомуИспользованию", "ВозвратПодДеятельность");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1, "ВидыОперацийВозвратПоставщику_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ДокументПоступления", 1, "Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Заказ", 1, "Документ_ЗаказПоставщику_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1, "Перечисление_НалогообложениеНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваровУслуг_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Шапка
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов"       , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов"  , СтруктураКурсаДокумента.Кратность);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах" , ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Организация));
	ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеИБ.Контрагент));
	ДанныеXDTO.Вставить("ВидОперации"              , Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументПоступления) Тогда
		ДанныеXDTO.Вставить("ДокументПоступления", ДанныеИБ.ДокументПоступления);
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.ДокументПоступления КАК ДокументПоступления
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваров
		|	И Товары.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
		|	И Товары.ДокументПоступления.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|");
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ДанныеXDTO.Вставить("ДокументПоступления", Выборка.ДокументПоступления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказПоставщику")
	   И ДанныеXDTO.Свойство("ДокументПоступления")
	   И ЗначениеЗаполнено(ДанныеXDTO.ДокументПоступления) Тогда
		
		ЗаказПоставщику = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументПоступления, "ЗаказПоставщику");
		Если ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") И ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			ДанныеXDTO.Вставить("Заказ", ЗаказПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДС") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	КонецЕсли;
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.ДокументПоступления.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) ТОГДА
	|			Товары.ДокументПоступления
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|	КОНЕЦ                                           КАК ДокументПоступления,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов"     , ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов"       , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов"  , СтруктураКурсаДокумента.Кратность);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах" , ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Организация));
	ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеИБ.Контрагент));
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары);
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_Изготовление_ВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_Изготовление_ВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Изготовление_ВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИзготовлениеПоЛекарственнойПрописи;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Изготовление_ВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_Изготовление_ВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	&ПодразделениеЗатрат                            КАК ПодразделениеЗатрат,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))  КАК ТипЗапасов,
	|	ВЫРАЗИТЬ(""20.01"" КАК СТРОКА(8))               КАК СчетЗатрат
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ИзготовлениеПоЛекарственнойПрописи.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеЗатрат", ДанныеИБ.ПодразделениеОрганизации);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_Изготовление_ВыпускПродукции_Отправка
Процедура ДобавитьПКО_Документ_Изготовление_ВыпускПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Изготовление_ВыпускПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИзготовлениеПоЛекарственнойПрописи;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "ПодразделениеЗатрат", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Материалы");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	
	// Продукция
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Продукция.Номенклатура       КАК Номенклатура,
	|	Продукция.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	Продукция.Партия             КАК Партия,
	|	Продукция.ЕдиницаИзмерения   КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Продукция.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Продукция.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Продукция.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                        КАК ЕдиницаИзмерения,
	|	Продукция.Номенклатура.Упаковка КАК Упаковка,
	|	Продукция.Количество         КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ИзготовлениеПоЛекарственнойПрописи КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ПараметрыРасширенияДанных = Новый Структура("ЦенаПоВидуЦены, СуммаПоВидуЦены", "Цена", "Сумма");
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса, ПараметрыРасширенияДанных);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата"   , ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("Валюта" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "УчетныйВидЦены"));
	
	Продукция = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Продукция); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Продукция); // С версии 1.6.
	
	ТипИспользуется_Продукция = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ВыпускПродукции.Продукция"); // С версии 1.3.
	Если ТипИспользуется_Продукция Тогда
		ДанныеXDTO.Вставить("Продукция", Продукция);
	КонецЕсли;
	
	ТипИспользуется_Товары = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ВыпускПродукции.Товары"); // До версии 1.3.
	Если ТипИспользуется_Товары Тогда	
		ДанныеXDTO.Вставить("Товары", Продукция);
	КонецЕсли;
	
	ТипИспользуется_Материалы = СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ВыпускПродукции.Материалы"); // С версии 1.3.
	Если ТипИспользуется_Материалы Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                              КАК НомерСтроки,
		|	Товары.Номенклатура                             КАК Номенклатура,
		|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
		|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
		|		ИНАЧЕ
		|			Товары.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
		|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
		|	Товары.Количество                               КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ИзготовлениеПоЛекарственнойПрописи.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ЕдиницаИзмерения
		|";
		
		ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		Материалы = Запрос.Выполнить().Выгрузить();
		
		КонвертироватьСерииТоваров(КомпонентыОбмена, Материалы); // С версии 1.6.
		КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Материалы); // С версии 1.6.
		
		ДанныеXDTO.Вставить("Материалы", Материалы);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов",            "СтатьяДоходов", , "Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                         "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.Сумма                                    КАК Сумма,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ.ИнвентаризацияТоваровНаСкладе));
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваровВОтделении_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваровВОтделении_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваровВОтделении_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеИзлишковТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваровВОтделении_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",      "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",          "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов",  "СтатьяДоходов", , "Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваровВОтделении_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "О" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.Сумма                                    КАК Сумма,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваровВОтделении.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ.ИнвентаризацияТоваровВОтделении));
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтпускВОтделение_ВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_ОтпускВОтделение_ВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтпускВОтделение_ВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтпускТоваровВОтделение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтпускВОтделение_ВПроизводство_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",       "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтпускВОтделение_ВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "О" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                                           КАК НомерСтроки,
	|	Товары.Номенклатура                                          КАК Номенклатура,
	|	Товары.СерияНоменклатуры                                     КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                                      КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                                        КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                                 КАК Упаковка,
	|	Товары.Количество                                            КАК Количество,
	|	Товары.СтатьяРасходов                                        КАК СтатьяЗатрат,
	|	ЕСТЬNULL(Товары.СтатьяРасходов.КорреспондирующийСчет, """")  КАК СчетЗатрат,
	|	&ПодразделениеЗатрат                                         КАК ПодразделениеЗатрат,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))               КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))                  КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОтпускТоваровВОтделение.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеЗатрат", ДанныеИБ.Отделение);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтпускВОтделение_Перемещение_Отправка
Процедура ДобавитьПКО_Документ_ОтпускВОтделение_Перемещение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтпускВОтделение_Перемещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтпускТоваровВОтделение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтпускВОтделение_Перемещение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",                "ПодразделениеПолучатель", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "ПодразделениеОтправитель", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель",         "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",          "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтпускВОтделение_Перемещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "О" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОтпускТоваровВОтделение.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦены",                  "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "КассаККМ", 1, "Справочник_КассыККМ");
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.КассаККМ") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.КассаККМ);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДС") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_НалогообложениеНДС"));
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
		// До версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_Налогообложение"));
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент,
	|	Товары.Партия.Поставщик                         КАК Поставщик
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты            КАК НомерКарты,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты              КАК ВидКарты,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер  КАК Эквайрер,
	|	СУММА(ОплатаПлатежнымиКартами.Сумма)                   КАК СуммаОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	И ОплатаПлатежнымиКартами.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер  КАК Эквайрер,
	|	СУММА(ОплатаПлатежнымиКартами.Сумма)                   КАК СуммаОплаты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	И ОплатаПлатежнымиКартами.Сумма < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Товары
	Товары = РезультатыЗапроса[2].Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ТоварыПродажа") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("ТоварыПродажа", Товары);
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.Товары") Тогда
		// До версии 1.6.
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	// Оплата платежными картами
	ТабОплатаКартами = РезультатыЗапроса[3].Выгрузить();
	
	ТабОплатаКартамиОтрицательныеСуммы = РезультатыЗапроса[4].Выгрузить();
	Если ТабОплатаКартамиОтрицательныеСуммы.Количество() > 0 Тогда
		
		Для Каждого Строка Из ТабОплатаКартамиОтрицательныеСуммы Цикл
			
			СуммаКВычету = (-1) * Строка.СуммаОплаты;
	
			СтруктураПоиска = Новый Структура("Эквайрер", Строка.Эквайрер);
			
			СтрокиОплаты = ТабОплатаКартами.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаОплаты Из СтрокиОплаты Цикл
				
				Если СтрокаОплаты.СуммаОплаты >= СуммаКВычету Тогда
					СтрокаОплаты.СуммаОплаты = СтрокаОплаты.СуммаОплаты - СуммаКВычету;
					Прервать;
				Иначе
					СуммаКВычету = СуммаКВычету - СтрокаОплаты.СуммаОплаты;
					СтрокаОплаты.СуммаОплаты = 0;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Удаление строк с пустыми суммами из ТабОплатаКартами
		ГраницаТабОплатаКартами = ТабОплатаКартами.Количество() - 1;
		Для Индекс = 0 По ГраницаТабОплатаКартами Цикл
			СтрокаОплаты = ТабОплатаКартами[ГраницаТабОплатаКартами - Индекс];
			Если СтрокаОплаты.СуммаОплаты = 0 Тогда
				ТабОплатаКартами.Удалить(СтрокаОплаты);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ТабОплатаКартами);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДРСчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_ПДРСчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПДРСчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПДРСчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                     "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                       "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",     "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоСчетаФактуры",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",         "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                 "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",    "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоСчетаФактуры", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",              "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                           "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "КодВидаОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПДРСчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры"   , "НаПоступление");
	ДанныеXDTO.Вставить("КодВидаОперации"   , "01");
	ДанныеXDTO.Вставить("СпособВыставления" , "НаБумажномНосителе");
	ДанныеXDTO.Вставить("Сумма"             , ДанныеИБ.ДополнительныеСвойства.СуммаДокумента);
	ДанныеXDTO.Вставить("СуммаНДС"          , ДанныеИБ.ДополнительныеСвойства.СуммаНДС);
	ДанныеXDTO.Вставить("ДокументыОснования", ДанныеИБ.ДополнительныеСвойства.ДокументыОснования);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПДРЧерезПодотчетноеЛицо_Отправка
Процедура ДобавитьПКО_Документ_ПДРЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПДРЧерезПодотчетноеЛицо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПДРЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",          "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "НалогообложениеНДСПродавца", 1, "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Налогообложение", 1,"Перечисление_Налогообложение");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПДРЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "Ч" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Валюта, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсДокумента"     , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурсаДокумента.Кратность);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДСПродавца") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("НалогообложениеНДСПродавца", ДанныеИБ.НалогообложениеНДС);
	КонецЕсли;
	
	// ПрочиеРасходы
	ДанныеXDTO.Вставить("ПрочиеРасходы", ДанныеИБ.ДополнительныеСвойства.ПрочиеРасходы);
	
	// Сумма
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.ДополнительныеСвойства.СуммаДокумента);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеМеждуОтделениями_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеМеждуОтделениями_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеМеждуОтделениями_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваровМеждуОтделениями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеМеждуОтделениями_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель", "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",  "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеМеждуОтделениями_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПеремещениеТоваровМеждуОтделениями.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладОтправитель", "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СкладПолучатель",  "СкладПолучатель", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары.Скопировать();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОприходование_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",                  "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов",            "СтатьяДоходов", , "Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтрокиДокумента                     КАК НомерСтрокиДокумента,
	|	Товары.НоменклатураОприходование                КАК Номенклатура,
	|	Товары.СерияНоменклатурыОприходование           КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмеренияВДокументеОприходование  КАК ЕдиницаИзмеренияВДокументе,
	|	Товары.ЕдиницаИзмеренияОприходование            КАК ЕдиницаИзмерения,
	|	Товары.УпаковкаОприходование                    КАК Упаковка,
	|	Товары.КоличествоОприходование                  КАК Количество,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.ТипЗапасов                               КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары" , ДанныеИБ.ДополнительныеСвойства.Товары);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	ДанныеXDTO.Вставить("Сумма"    , ДанныеИБ.ДополнительныеСвойства.СуммаДокумента);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОтдВОприходование_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОтдВОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОтдВОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОтдВОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходов", "СтатьяДоходов", , "Справочник_СтатьиДоходов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОтдВОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтрокиДокумента                     КАК НомерСтрокиДокумента,
	|	Товары.НоменклатураОприходование                КАК Номенклатура,
	|	Товары.СерияНоменклатурыОприходование           КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмеренияВДокументеОприходование  КАК ЕдиницаИзмеренияВДокументе,
	|	Товары.ЕдиницаИзмеренияОприходование            КАК ЕдиницаИзмерения,
	|	Товары.УпаковкаОприходование                    КАК Упаковка,
	|	Товары.КоличествоОприходование                  КАК Количество,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.ТипЗапасов                               КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары" , ДанныеИБ.ДополнительныеСвойства.Товары);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	ДанныеXDTO.Вставить("Сумма"    , ДанныеИБ.ДополнительныеСвойства.СуммаДокумента);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТаблицаТоваров = ДанныеИБ.ДополнительныеСвойства.Товары;
	Если ТаблицаТоваров.Колонки.Найти("Упаковка") <> Неопределено Тогда
		КолонкиТоваров = "НомерСтрокиДокумента, Номенклатура, Серия, ЕдиницаИзмерения, Упаковка, Количество, КоличествоУпаковок, ТипЗапасов, ПартияОбразующийДокумент";
	Иначе
		КолонкиТоваров = "НомерСтрокиДокумента, Номенклатура, Серия, ЕдиницаИзмерения, Количество, ТипЗапасов, ПартияОбразующийДокумент";
	КонецЕсли;
	
	Товары = ТаблицаТоваров.Скопировать(, КолонкиТоваров);
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОтдВСписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОтдВСписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОтдВСписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОтдВСписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОтдВСписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары.Скопировать(,"НомерСтрокиДокумента, Номенклатура, ЕдиницаИзмерения, Количество, ТипЗапасов");
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	ДанныеXDTO.Вставить("Сумма"    , ДанныеИБ.ДополнительныеСвойства.СуммаДокумента)
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписаниеЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТаблицаТоваров = ДанныеИБ.ДополнительныеСвойства.Товары;
	Если ТаблицаТоваров.Колонки.Найти("Упаковка") <> Неопределено Тогда
		КолонкиТоваров = "НомерСтрокиДокумента, Номенклатура, Серия, ЕдиницаИзмерения, Упаковка, Количество, КоличествоУпаковок, ТипЗапасов, ПартияОбразующийДокумент";
	Иначе
		КолонкиТоваров = "НомерСтрокиДокумента, Номенклатура, Серия, ЕдиницаИзмерения, Количество, ТипЗапасов, ПартияОбразующийДокумент";
	КонецЕсли;
	
	Товары = ТаблицаТоваров.Скопировать(, КолонкиТоваров);
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВСписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары.Скопировать(,"НомерСтрокиДокумента, Номенклатура, ЕдиницаИзмерения, Количество, ТипЗапасов");
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	ДанныеXDTO.Вставить("Сумма"    , ДанныеИБ.ДополнительныеСвойства.СуммаДокумента)
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеДопРасходов_ПТиУ_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_ПТиУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеДопРасходов_ПТиУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеДопРасходов_ПТиУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",    "ВидОперации", , "ВидыОперацийПоступленияТоваров_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_ПТиУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "Р" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов"       , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов"  , СтруктураКурсаДокумента.Кратность);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах" , ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеИБ.Контрагент));
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Организация));
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДСПродавца") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_НалогообложениеНДСПродавца"));
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
		// До версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_Налогообложение"));
	КонецЕсли;
	
	// Расходы - Услуги
	ДанныеXDTO.Вставить("Услуги", ДанныеИБ.ДополнительныеСвойства.Услуги);
	
	// РасшифровкаДопРасходов
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", ДанныеИБ.ДополнительныеСвойства.РасшифровкаДопРасходов);
	
	// Сумма
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.ДополнительныеСвойства.СуммаДокумента);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",     "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",    "ВидОперации", , "ВидыОперацийПоступленияТоваров_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетКонтрагента", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Заказ", 1, "Документ_ЗаказПоставщику_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Шапка
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов"       , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов"  , СтруктураКурсаДокумента.Кратность);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах" , ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Организация));
	ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеИБ.Контрагент));
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказПоставщику") Тогда
		Если ТипЗнч(ДанныеИБ.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ДанныеXDTO.Вставить("Заказ", ДанныеИБ.ЗаказПоставщику);
		КонецЕсли;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДСПродавца") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_НалогообложениеНДСПродавца"));
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
		// До версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(ДанныеИБ.НалогообложениеНДС, "Перечисление_Налогообложение"));
	КонецЕсли;
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.Партия                                   КАК Партия,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	Товары.НомерГТД.Код                             КАК НомерГТД,
	|	Товары.НомерГТД.СтранаПроисхождения             КАК СтранаПроисхождения,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Склад, "ТипСклада, РозничныйВидЦены");
	Если (ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) И ЗначениеЗаполнено(ДанныеСклада.РозничныйВидЦены) Тогда
		ПараметрыРасширенияДанных = Новый Структура("ЦенаПоВидуЦены, СуммаПоВидуЦены", "ЦенаВРознице", "СуммаВРознице");
	Иначе
		ПараметрыРасширенияДанных = Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса, ПараметрыРасширенияДанных);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата"   , ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВидЦены", ДанныеСклада.РозничныйВидЦены);
	Запрос.УстановитьПараметр("Валюта" , ДанныеИБ.Валюта);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПотреблениеПоНазначениямВрачей_Отправка
Процедура ДобавитьПКО_Документ_ПотреблениеПоНазначениямВрачей_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПотреблениеПоНазначениямВрачей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПотреблениеТоваровПоНазначениямВрачей;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПотреблениеПоНазначениямВрачей_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1,"Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЗатрат", 1,"Справочник_СтатьиРасходов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПотреблениеПоНазначениямВрачей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                                    КАК НомерСтроки,
	|	Товары.Номенклатура                                   КАК Номенклатура,
	|	Товары.СерияНоменклатуры                              КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                               КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                                 КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                          КАК Упаковка,
	|	Товары.Количество                                     КАК Количество,
	|	&СтатьяЗатрат                                         КАК СтатьяЗатрат,
	|	ЕСТЬNULL(СтатьиРасходов.КорреспондирующийСчет, """")  КАК СчетЗатрат,
	|	&ПодразделениеЗатрат                                  КАК ПодразделениеЗатрат,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))        КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))           КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПотреблениеТоваровПоНазначениямВрачей.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО
	|			СтатьиРасходов.Ссылка = &СтатьяЗатрат
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка"             , ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеЗатрат", ДанныеИБ.Отделение);
	Запрос.УстановитьПараметр("СтатьяЗатрат"       , ДанныеИБ.СтатьяРасходов);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПТУСчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_ПТУСчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПТУСчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПТУСчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                     "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                       "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",     "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоСчетаФактуры",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",         "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                 "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",    "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоСчетаФактуры", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",              "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",             "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                           "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "КодВидаОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "",                           "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПТУСчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	// Шапка
	ДанныеXDTO.Вставить("СуммаНДС"         , ДанныеИБ.Товары.Итог("СуммаНДС"));
	ДанныеXDTO.Вставить("ВидСчетаФактуры"  , "НаПоступление");
	ДанныеXDTO.Вставить("КодВидаОперации"  , "01");
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	
	// ДокументыОснования
	ДокументыОснования = Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументОснование = ДокументыОснования.Добавить();
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ДокументОснование.ДокументОснование = ЗначениеВИнструкцию(ДанныеИБ.Ссылка, "Документ_ПТУЧерезПодотчетноеЛицо_Отправка");
	Иначе
		ДокументОснование.ДокументОснование = ЗначениеВИнструкцию(ДанныеИБ.Ссылка, "Документ_ПоступлениеТоваровУслуг_Отправка");
	КонецЕсли;
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПТУЧерезПодотчетноеЛицо_Отправка
Процедура ДобавитьПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПТУЧерезПодотчетноеЛицо_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодотчетноеЛицо",          "ПодотчетноеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "НалогообложениеНДСПродавца", 1, "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Налогообложение", 1,"Перечисление_Налогообложение");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "Ч" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Валюта, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсДокумента"     , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьДокумента", СтруктураКурсаДокумента.Кратность);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДСПродавца") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("НалогообложениеНДСПродавца", ДанныеИБ.НалогообложениеНДС);
	КонецЕсли;
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.Партия                                   КАК Партия,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	Товары.НомерГТД.Код                             КАК НомерГТД,
	|	Товары.НомерГТД.СтранаПроисхождения             КАК СтранаПроисхождения,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Склад, "ТипСклада, РозничныйВидЦены");
	Если (ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) И ЗначениеЗаполнено(ДанныеСклада.РозничныйВидЦены) Тогда
		ПараметрыРасширенияДанных = Новый Структура("ЦенаПоВидуЦены, СуммаПоВидуЦены", "ЦенаВРознице", "СуммаВРознице");
	Иначе
		ПараметрыРасширенияДанных = Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса, ПараметрыРасширенияДанных);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата"   , ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВидЦены", ДанныеСклада.РозничныйВидЦены);
	Запрос.УстановитьПараметр("Валюта" , ДанныеИБ.Валюта);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Колонки = Товары.Колонки;
	Колонки.Добавить("Поставщик");
	Колонки.Добавить("ПредъявленСФ");
	Колонки.Добавить("ДатаСФ");
	Колонки.Добавить("НомерСФ");
	Колонки.Добавить("НомерВходящегоДокумента");
	Колонки.Добавить("ДатаВходящегоДокумента");
	Колонки.Добавить("Налогообложение");
	
	Товары.ЗаполнитьЗначения(ДанныеИБ.Контрагент                , "Поставщик");
	Товары.ЗаполнитьЗначения(ДанныеИБ.ПредъявленСчетФактура     , "ПредъявленСФ");
	Товары.ЗаполнитьЗначения(ДанныеИБ.ДатаВходящегоСчетаФактуры , "ДатаСФ");
	Товары.ЗаполнитьЗначения(ДанныеИБ.НомерВходящегоСчетаФактуры, "НомерСФ");
	Товары.ЗаполнитьЗначения(ДанныеИБ.НомерВходящегоДокумента   , "НомерВходящегоДокумента");
	Товары.ЗаполнитьЗначения(ДанныеИБ.ДатаВходящегоДокумента    , "ДатаВходящегоДокумента");
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
		// До версии 1.6.
		Товары.ЗаполнитьЗначения(ДанныеИБ.НалогообложениеНДС, "Налогообложение");
	КонецЕсли;
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровНаСторону;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",                   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоговорКонтрагента",       "Договор", , "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов"       , СтруктураКурсаДокумента.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов"  , СтруктураКурсаДокумента.Кратность);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах" , ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Организация));
	
	Если ДанныеИБ.Метаданные().Реквизиты.Найти("НалогообложениеНДС") <> Неопределено Тогда
		Налогообложение = ДанныеИБ.НалогообложениеНДС;
	Иначе
		Налогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДС") Тогда
		// С версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(Налогообложение, "Перечисление_НалогообложениеНДС"));
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Налогообложение") Тогда
		// До версии 1.6.
		ДанныеXDTO.Вставить("Налогообложение", ЗначениеВИнструкцию(Налогообложение, "Перечисление_Налогообложение"));
	КонецЕсли;
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	Товары.Сумма                                    КАК Сумма,
	|	Товары.Цена                                     КАК Цена,
	|	Товары.СтавкаНДС                                КАК СтавкаНДС,
	|	Товары.СуммаНДС                                 КАК СуммаНДС,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПередачаТоваровНаСторону.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостач_Отправка
Процедура ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеНедостач_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ.ИнвентаризацияТоваровНаСкладе));
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачВОтделении_Отправка
Процедура ДобавитьПКО_Документ_СписаниеНедостачВОтделении_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеНедостачВОтделении_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеНедостачТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеНедостачВОтделении_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостачВОтделении_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "О" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.СерияНоменклатуры                        КАК СерияНоменклатуры,
	|	Товары.Партия                                   КАК Партия,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка                    КАК Упаковка,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов,
	|	ЕСТЬNULL(Товары.Партия.ДокументОприходования,
	|		ЗНАЧЕНИЕ(Документ.Партия.ПустаяСсылка))     КАК ПартияОбразующийДокумент
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СписаниеНедостачТоваровВОтделении.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка" , ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары);
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6.
	
	ДанныеXDTO.Вставить("Товары", Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ.ИнвентаризацияТоваровВОтделении));
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",                    "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Товары
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ.ИнвентаризацияТоваровНаСкладе));
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваровВОтделении_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваровВОтделении_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваровВОтделении_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеНедостачТоваровВОтделении;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровВОтделении_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Отделение",     "Подразделение", , "Справочник_Отделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваровВОтделении_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "О" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                              КАК НомерСтроки,
	|	Товары.Номенклатура                             КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения                         КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	Товары.Количество                               КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))  КАК ТипЗапасов
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СписаниеНедостачТоваровВОтделении.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары"   , Товары);
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ.ИнвентаризацияТоваровВОтделении));
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦены",       "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                    КАК НомерСтроки,
	|	Товары.Номенклатура                   КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения               КАК ЕдиницаИзмеренияВДокументе,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ЭтоЛекарственноеСредство ТОГДА
	|			Товары.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ                                 КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.Упаковка          КАК Упаковка,
	|	Товары.СерияНоменклатуры              КАК СерияНоменклатуры,
	|	Товары.Цена                           КАК Цена
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	ТекстЗапроса = ОбменДаннымиБольничнаяАптека.ТекстЗапросаТаблицыТоваров(ТекстЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	КонвертироватьСерииТоваров(КомпонентыОбмена, Товары); // С версии 1.6
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары); // С версии 1.6
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "",                      "Владелец", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", ЗначениеВИнструкцию(ДанныеИБ.Владелец, "Справочник_Контрагенты_Отправка"));
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", ЗначениеВИнструкцию(ДанныеИБ.Владелец, "Справочник_ФизическиеЛица_Отправка"));
	КонецЕсли;
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                   "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",        "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",  "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",               "Владелец", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВыводитьСуммуБезКопеек", "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",             "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",    "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",        "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "",                       "ВыводитьМесяцПрописью", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыводитьМесяцПрописью", ДанныеИБ.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры", "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ИспользоватьСерии", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ИспользоватьСрокГодностиСерии", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры.КлючевыеСвойства.ИспользоватьСерии") Тогда // С версии 1.7
		ДанныеXDTO.Вставить("ИспользоватьСерии", ДанныеИБ.ИспользоватьСерии);
	КонецЕсли;
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры.КлючевыеСвойства.ИспользоватьСрокГодностиСерии") Тогда // С версии 1.7
		ДанныеXDTO.Вставить("ИспользоватьСрокГодностиСерии", ДанныеИБ.ИспользоватьСрокГодностиСерии);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",  "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияДействия", "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	КлючевыеСвойства.Вставить("ВидДоговора"             , "СПоставщиком");
	КлючевыеСвойства.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1,"Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ПериодОтбор",         ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	ДанныеXDTO.Вставить("ВидДокументаОтбор",   ДанныеИБ.Отбор.ВидДокумента.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ТаблицаЗаписи.Колонки.Физлицо.Имя = "ФизическоеЛицо";
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Упаковка Тогда
	
		УпаковкаДляВыгрузки = КомпонентыОбмена.ПараметрыКонвертации.УпаковкаДляВыгрузки;
		Если УпаковкаДляВыгрузки = Неопределено Тогда
			
			ДанныеУпаковки = Новый Структура;
			ДанныеУпаковки.Вставить("КодОКЕИ"           , "778");
			ДанныеУпаковки.Вставить("Наименование"      , НСтр("ru='упак.'"));
			ДанныеУпаковки.Вставить("НаименованиеПолное", НСтр("ru='Упаковка'"));
			ДанныеУпаковки.Вставить("ТипЕдиницы"        , Перечисления.ТипыЕдиницИзмерения.Упаковка);
	
			Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ЕдиницыИзмерения ГДЕ КодОКЕИ = &КодОКЕИ");
			Запрос.УстановитьПараметр("КодОКЕИ", ДанныеУпаковки.КодОКЕИ);
			Выборка = Запрос.Выполнить().Выбрать();
	
			Если Выборка.Следующий() Тогда
				УпаковкаДляВыгрузки = Выборка.Ссылка;
			Иначе
				УпаковкаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(УпаковкаОбъект, ДанныеУпаковки);
				ОбменДаннымиXDTOСервер.ЗаписатьОбъектВИБ(КомпонентыОбмена, УпаковкаОбъект, ТипЗнч(УпаковкаОбъект));
				УпаковкаДляВыгрузки = УпаковкаОбъект.Ссылка;
			КонецЕсли;
			
			КомпонентыОбмена.ПараметрыКонвертации.УпаковкаДляВыгрузки = УпаковкаДляВыгрузки;
			
		КонецЕсли;
	
		ДанныеИБ = УпаковкаДляВыгрузки.ПолучитьОбъект();
		
		Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
			ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.Ссылка);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	// Код
	Если Не ЗначениеЗаполнено(ДанныеИБ.КодОКЕИ) Тогда
		
		КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
		КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		
		Если ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда 
			ЗаписьКлассификатора = КлассификаторТаблица.Найти(ДанныеИБ.Наименование, "SymbolNational");
		ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
			ЗаписьКлассификатора = КлассификаторТаблица.Найти(ДанныеИБ.НаименованиеПолное, "Name");
		Иначе
			// Сработает исключение проверки формата.
			Возврат; 
		КонецЕсли;
		
		Если ЗаписьКлассификатора = Неопределено Тогда
			// Сработает исключение проверки формата.
			Возврат; 
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Код", ЗаписьКлассификатора.Code);
		
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Код", ДанныеИБ.КодОКЕИ);
	КонецЕсли;
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	// Наименование
	Если Не ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		
		Если ЗаписьКлассификатора = Неопределено Тогда
			КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
			ЗаписьКлассификатора = КлассификаторТаблица.Найти(ДанныеИБ.КодОКЕИ, "Code");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКлассификатора.SymbolNational) Тогда
			Наименование = ЗаписьКлассификатора.SymbolNational;
		ИначеЕсли ЗначениеЗаполнено(ЗаписьКлассификатора.SymbolInternational) Тогда
			Наименование = ЗаписьКлассификатора.SymbolInternational;
		ИначеЕсли ЗначениеЗаполнено(ЗаписьКлассификатора.CodeNameNational) Тогда
			Наименование = ЗаписьКлассификатора.CodeNameNational;
		ИначеЕсли ЗначениеЗаполнено(ЗаписьКлассификатора.CodeNameInternational) Тогда
			Наименование = ЗаписьКлассификатора.CodeNameInternational;
		Иначе
			Наименование = ЗаписьКлассификатора.Name;
		КонецЕсли;
		
	Иначе
		Наименование = ДанныеИБ.Наименование;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ЕдиницыИзмерения.КлючевыеСвойства.Наименование") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", Наименование);
	Иначе
		ДанныеXDTO.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	// ПолноеНаименование
	Если Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		
		Если ЗаписьКлассификатора = Неопределено Тогда
			КлассификаторXML = Справочники.ЕдиницыИзмерения.ПолучитьМакет("ОбщероссийскийКлассификаторЕдиницИзмерения").ПолучитьТекст();
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
			ЗаписьКлассификатора = КлассификаторТаблица.Найти(ДанныеИБ.КодОКЕИ, "Code");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКлассификатора.Name) Тогда
			НаименованиеПолное = ЗаписьКлассификатора.Name;
		Иначе
			НаименованиеПолное = ДанныеИБ.Наименование;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("НаименованиеПолное", НаименованиеПолное);
	Иначе
		ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеИБ.НаименованиеПолное);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДополнительнаяИнформация",  "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",      "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",         "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",            "Артикул");
	ДобавитьПКС(СвойстваШапки, "Код",                "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Описание",           "Описание");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",          "СтавкаНДС", , "Перечисление_СтавкиНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",    "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "Весовой", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмеренияСрокаГодности", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ИспользоватьСерии", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "КодТНВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "СрокГодности", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ЭтоЛекарственноеСредство Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеИБ.ОсновнаяЕдиницаУчета);
	Иначе
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеИБ.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Номенклатура.ВидНоменклатуры") Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", ДанныеИБ.ВидНоменклатуры);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "ОбщиеСвойстваДанныеКлассификатора") Тогда
		ДанныеXDTO.Вставить("КодТНВЭД", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.КодТНВЭД, "Код, Наименование"));
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Номенклатура.Весовой") Тогда // С версии 1.7
		ДанныеXDTO.Вставить("Весовой", ДанныеИБ.ВесИспользовать);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Номенклатура.ИспользоватьСерии") Тогда // С версии 1.7
		ДанныеXDTO.Вставить("ИспользоватьСерии", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВидНоменклатуры, "ИспользоватьСерии"));
	КонецЕсли;
	
	//Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Номенклатура.СрокГодности") Тогда // С версии 1.7
	//	ДанныеXDTO.Вставить("СрокГодности", ДанныеИБ.СрокГодности);
	//КонецЕсли;
	//
	//Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Номенклатура.ЕдиницаИзмеренияСрокаГодности") Тогда // С версии 1.7
	//	ДанныеXDTO.Вставить("ЕдиницаИзмеренияСрокаГодности", ДанныеИБ.ЕдиницаИзмеренияСрокаГодности);
	//КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель", "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                    "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",       "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "Префикс",                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                              "ОсновнойБанковскийСчет", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",           "ГоловнаяОрганизация", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ГоловнаяОрганизация = ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ГоловнаяОрганизация", Неопределено);
	КонецЕсли;
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ОсновнойБанковскийСчет", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Ссылка));
КонецПроцедуры
#КонецОбласти
#Область Справочник_Отделения_Отправка
Процедура ДобавитьПКО_Справочник_Отделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Отделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ОтделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Отделения_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ВышестоящееПодразделение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Отделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Подразделения.КлючевыеСвойства.ВышестоящееПодразделение") Тогда
		Инструкция = Неопределено;
		Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
			Инструкция = ЗначениеВИнструкцию(ДанныеИБ.Родитель, "Справочник_Отделения_Отправка");
		ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.ПодразделениеОрганизации) Тогда
			Инструкция = ЗначениеВИнструкцию(ДанныеИБ.ПодразделениеОрганизации, "Справочник_Подразделения_Отправка");
		КонецЕсли;
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВышестоящееПодразделение", Инструкция);
	КонецЕсли;
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СсылкаСвойства = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ПодразделенияОрганизаций"); // Т.к. отделение конвертируется в подразделение.
	Свойство       = Новый Структура("Ссылка, Наименование, ЭтоДополнительноеСведение", СсылкаСвойства, "Тип подразделения", Истина);
	ДобавляемыйДопРеквизит = Новый Структура("Свойство, Значение", Свойство, ТипПодразделенияОтделение());
	
	ВыгрузитьПроизвольныеДанныеВДопРеквизиты(КомпонентыОбмена, ДобавляемыйДопРеквизит, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СсылкаСвойства = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ПодразделенияОрганизаций");
	Свойство       = Новый Структура("Ссылка, Наименование, ЭтоДополнительноеСведение", СсылкаСвойства, "Тип подразделения", Истина);
	ДобавляемыйДопРеквизит = Новый Структура("Свойство, Значение", Свойство, ТипПодразделенияПодразделение());
	
	ВыгрузитьПроизвольныеДанныеВДопРеквизиты(КомпонентыОбмена, ДобавляемыйДопРеквизит, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Пользователи_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры
Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СерииНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",        "СерийныйНомер");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "РозничныйВидЦены", "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",        "ТипСклада", , "Перечисление_ТипыСкладов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                 "МОЛ", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "СкладГруппа", 1, "Справочник_СкладыГруппа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Склады.КлючевыеСвойства.СкладГруппа") Тогда // С версии 1.7
		ДанныеXDTO.КлючевыеСвойства.Вставить("СкладГруппа", ДанныеИБ.Родитель);
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Склады.КлючевыеСвойства.Группа") Тогда // До версии 1.7
		ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", ДанныеИБ.Родитель);
	КонецЕсли;
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Склады.КонтактнаяИнформация") Тогда // С версии 1.7
		ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	КонецЕсли;
	
	ДанныеМОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(ДанныеИБ.Ссылка, ТекущаяДатаСеанса());
	ДанныеXDTO.Вставить("МОЛ", ЗначениеВИнструкцию(ДанныеМОЛ.Ответственный, "Справочник_ФизическиеЛица_Отправка"));
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиДоходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиДоходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");  
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");

КонецПроцедуры  

Процедура ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки_Отправка
Процедура ДобавитьПКО_Справочник_Упаковки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Упаковки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "", "Коэффициент", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// С версии 1.6
	// Объект Упаковка передается только при необходимост (ПОД не назначены).
	// При выгрузке свойств типа Упаковка нужно проверять, что в формате, у объекта Упаковка, есть поле Номенклатура.
	// ДанныеИБ всегда должны быть типа Структура, состоящей из свойств
	// Ссылка - СправочникСсылка.ЕдиницаИзмерения и
	// Номенклатура - СправочникСсылка.Номенклатура.
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Упаковки.КлючевыеСвойства.Номенклатура")
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеИБ, "Номенклатура")
	   И ЗначениеЗаполнено(ДанныеИБ.Ссылка)
	   И ЗначениеЗаполнено(ДанныеИБ.Номенклатура) Тогда
		
		// Работа с кэшем упаковок. 
		КэшУпаковок = КомпонентыОбмена.ПараметрыКонвертации.КэшУпаковок;
		Если КэшУпаковок = Неопределено Тогда
			КэшУпаковок = Новый Соответствие;
		КонецЕсли;
	
		ДанныеУпаковки = КэшУпаковок.Получить(ДанныеИБ.Ссылка);
		Если ДанныеУпаковки = Неопределено Тогда
			ДанныеУпаковки = Новый Соответствие;
		КонецЕсли;
		
		ДанныеУпаковкиНоменклатуры = ДанныеУпаковки.Получить(ДанныеИБ.Номенклатура);
		Если ДанныеУпаковкиНоменклатуры = Неопределено Тогда
			ДанныеУпаковкиНоменклатуры = Новый Структура;
			ДанныеУпаковкиНоменклатуры.Вставить("ЕдиницаИзмерения", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Номенклатура, "ЕдиницаИзмерения"));
			ДанныеУпаковкиНоменклатуры.Вставить("Коэффициент"     , НоменклатураСервер.КоэффициентЕдиницыИзмерения(ДанныеИБ.Номенклатура, ДанныеИБ.Ссылка));
		КонецЕсли;
		
		ДанныеУпаковки.Вставить(ДанныеИБ.Номенклатура, ДанныеУпаковкиНоменклатуры);
		КэшУпаковок.Вставить(ДанныеИБ.Ссылка, ДанныеУпаковки);
		КомпонентыОбмена.ПараметрыКонвертации.КэшУпаковок = КэшУпаковок;
		
		// Заполнение данных XDTO.
		ДанныеXDTO.Вставить("Наименование"    , Строка(ДанныеИБ.Ссылка));
		ДанныеXDTO.Вставить("Номенклатура"    , ДанныеИБ.Номенклатура);
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеУпаковкиНоменклатуры.ЕдиницаИзмерения);
		ДанныеXDTO.Вставить("Коэффициент"     , ДанныеУпаковкиНоменклатуры.Коэффициент);
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "Перечисление_ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "Уточнение",    "УточнениеНаименования");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ШтрихкодыНоменклатуры.Штрихкод") Тогда // С версии 1.7
		ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ШтрихкодыНоменклатуры.ШтрихкодОтбор") Тогда // До версии 1.7
		ДанныеXDTO.Вставить("ШтрихкодОтбор", ДанныеИБ.Отбор.Штрихкод.Значение);
	КонецЕсли;
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	
	// С версии 1.6
	ТаблицаЗаписи.Колонки.Добавить("Упаковка");
	ТаблицаЗаписи.ЗагрузитьКолонку(ТаблицаЗаписи.ВыгрузитьКолонку("ЕдиницаИзмерения"), "Упаковка");
	КонвертироватьУпаковкиТоваров(КомпонентыОбмена, ТаблицаЗаписи);
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_БанковскиеСчетаКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",       "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	Если КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Если Найти(КлючевыеСвойства.Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		Иначе
			ИмяПКО = "Справочник_Контрагенты_Получение";
		КонецЕсли;
		
		ОписаниеЭлемента = Новый Структура("ИмяСвойства, ИмяПКО", "Владелец", ИмяПКО);
		ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, КлючевыеСвойства, ОписаниеЭлемента);
		
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                   "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",        "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",  "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",               "Владелец", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ВыводитьСуммуБезКопеек", "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",             "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",    "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",        "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "ВариантВыводаМесяца",    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	ДанныеКорректировки = Новый Структура;
	ДанныеКорректировки.Вставить("ВариантВыводаМесяца", Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью);
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачалаДействия",    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияДействия", "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаВзаиморасчетов",  "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Менеджер",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Дата,Контрагент,Наименование,Номер,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	ДанныеКорректировки = Новый Структура;
	ДанныеКорректировки.Вставить("Статус"  , Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	ДанныеКорректировки.Вставить("Менеджер", Пользователи.ТекущийПользователь());
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВалютаВзаиморасчетов) Тогда
		// Если получаемое значение ВалютаВзаиморасчетов не заполнено,
		// тогда заполняется из ДанныеИБ или по умолчанию.
		ДанныеКорректировки.Вставить("ВалютаВзаиморасчетов", ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",      "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",         "СтранаРегистрации", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                 "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Получение");
	ДобавитьПКС(СвойстваШапки, "Поставщик",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПрочиеОтношения",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	ПолучитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	ДанныеКорректировки = Новый Структура;
	ДанныеКорректировки.Вставить("Поставщик", Истина);
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ЮрФизЛицо) Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
			ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации)
		   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.СтранаРегистрации, "Код") <> "643" Тогда
			ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		КонецЕсли;
	Иначе
		// ФизЛицо может интерпритироваться как ФизЛицо или как ИндивидуальныйПредприниматель.
		// В первую очередь заполняется из ДанныхИБ, если не заполнен реквизит - по умолчанию ФизЛицо.
		ДанныеКорректировки.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
КонецПроцедуры
#КонецОбласти 
// } Сурина

 #Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",           "ГоловнаяОрганизация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                    "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",       "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",                     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮрФизЛицо_Получение");
	ДобавитьПКС(СвойстваШапки, "ИндивидуальныйПредприниматель", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	ПолучитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	Если ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.ГоловнаяОрганизация) Тогда
			ПолученныеДанные.ОбособленноеПодразделение = ПолученныеДанные.ГоловнаяОрганизация <> ОбъектСсылка;
		Иначе
			ПолученныеДанные.ГоловнаяОрганизация = ОбъектСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Отделения_Получение
Процедура ДобавитьПКО_Справочник_Отделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Отделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ОтделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Отделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Отделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Отделения_Подразделения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеОрганизации", "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",                 "", 1, "Справочник_Отделения_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ПодразделениеОрганизации");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Отделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Подразделения.КлючевыеСвойства.ВышестоящееПодразделение") Тогда
		
		ВышестоящееПодразделение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеXDTO.КлючевыеСвойства, "ВышестоящееПодразделение");
		Если ВышестоящееПодразделение <> Неопределено Тогда
			
			// Проверка существования родителя объекта в качестве отделения.
			СсылкаОтделения = СсылкаПоДаннымXDTO(КомпонентыОбмена, ВышестоящееПодразделение, "Справочник_Отделения_Получение");
			Если СсылкаОтделения <> Неопределено Тогда
				ПолученныеДанные.Родитель = СсылкаОтделения;
				ПолученныеДанные.ПодразделениеОрганизации = Неопределено;
			Иначе
				// Если родительское отделение не было обнаружено, тогда
				// выполняется проверка существования родителя в качестве подразделения.
				СсылкаПодразделения = СсылкаПоДаннымXDTO(КомпонентыОбмена, ВышестоящееПодразделение, "Справочник_Подразделения_Получение");
				Если СсылкаПодразделения <> Неопределено Тогда
					ПолученныеДанные.Родитель = Неопределено;
					ПолученныеДанные.ПодразделениеОрганизации = СсылкаПодразделения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_Отделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	Если ДанныеИБ = Неопределено Тогда
		
		// Если объект не был обнаружен или сопоставлен пользователем,
		// тогда в отложенном обработчике объекту будет установлена ПометкаУдаления = Истина.
		// Это необходимо т.к. объект формата Подразделение может быть интерпритирован
		// в конфигурации как Отделение или как Подразделение.
		// Если до этого момента не удалось определить вид объекта,
		// значит будет загружено оба вида с установкой Пометки удаления.
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОбъектНесопоставлен");
	
	КонецЕсли;
КонецПроцедуры                            
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Отделения_Подразделения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "", 1, "Справочник_Подразделения_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Подразделения.КлючевыеСвойства.ВышестоящееПодразделение") Тогда
		ОписаниеЭлемента = Новый Структура("ИмяСвойства, ИмяСвойстваXDTO", "Родитель", "ВышестоящееПодразделение");
		ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO.КлючевыеСвойства, ОписаниеЭлемента);
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	Если ДанныеИБ = Неопределено Тогда
		
		// Если объект не был обнаружен или сопоставлен пользователем,
		// тогда в отложенном обработчике объекту будет установлена ПометкаУдаления = Истина.
		// Это необходимо т.к. объект формата Подразделение может быть интерпритирован
		// в конфигурации как Отделение или как Подразделение.
		// Если до этого момента не удалось определить вид объекта,
		// значит будет загружено оба вида с установкой Пометки удаления.
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОбъектНесопоставлен");
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ФизическоеЛицо");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",         "Группа", , "Справочник_СкладыГруппа");
	ДобавитьПКС(СвойстваШапки, "РозничныйВидЦены", "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "ТипСклада",        "ТипСклада", , "Перечисление_ТипыСкладов_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСклада,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	
	ОписаниеЭлемента = Новый Структура("ИмяСвойства, ИмяПКО", "МОЛ", "Справочник_ФизическиеЛица_Получение");
	ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO, ОписаниеЭлемента);
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	МОЛ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПолученныеДанные.ДополнительныеСвойства, "МОЛ");
	Если ЗначениеЗаполнено(МОЛ) Тогда
		Отбор = Новый Структура("Склад", ОбъектСсылка);
		СрезПоследних = РегистрыСведений.МатериальноОтветственныеЛица.СрезПоследних(ТекущаяДатаСеанса(), Отбор);
		Если СрезПоследних.Количество() = 0 Тогда 
			МенеджерЗаписи = РегистрыСведений.МатериальноОтветственныеЛица.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период        = ТекущаяДатаСеанса();
			МенеджерЗаписи.Склад         = ОбъектСсылка;
			МенеджерЗаписи.Ответственный = МОЛ;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКорректировки = Новый Структура;
	ДанныеКорректировки.Вставить("ИсточникИнформацииОЦенахДляПечати", Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости);
	
	Если ПолученныеДанные.ТипСклада = Перечисления.ТипыСкладов.БольничнаяАптека Тогда
		
		// Тип склада БольничнаяАптека в конфигурации может интерпритироваться как БольничнаяАптека или как Отделение,
		// т.к. загружается из свойства "Оптовый" объекта "ТипыСкладов" формата,
		// а выгружается в указанное свойство из двух - БольничнаяАптека и Отделение.
		// По этому, реквизит заполняется следующим образом: 
		//  В первую очередь ТипСклада будет заполнятся из ДанныеИБ.ТипСклада,
		//  если ДанныеИБ = Неопределено или реквизит ТипСклада не заполнен,
		//  тогда Перечисления.ТипыСкладов.БольничнаяАптека.
		
		ДанныеКорректировки.Вставить("ТипСклада", Перечисления.ТипыСкладов.БольничнаяАптека);
		
	КонецЕсли;
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Получение
Процедура ДобавитьПКО_Справочник_СтатьиДоходов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДоходов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиДоходов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДоходов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование"); 
	
	// Профрешение 22.12.2023 {
	ДобавитьПКС(СвойстваШапки, "Родитель", "Группа", , "Справочник_СтатьиДоходовГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель", "СтатьиДоходовГруппа", , "Справочник_СтатьиДоходовГруппа_Получение");
	// } Профрешение
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование, ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование, ЭтоГруппа");
КонецПроцедуры  

// Профрешение 22.12.2023 {
Процедура ДобавитьПКО_Справочник_СтатьиДоходовГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДоходовГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДоходовГруппа";  
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование"); 
	ДобавитьПКС(СвойстваШапки, "Родитель", "Группа", , "Справочник_СтатьиДоходовГруппа_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование, ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование, ЭтоГруппа");
КонецПроцедуры
// } Профрешение 

Процедура ПКО_Справочник_СтатьиДоходов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов";  
	
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование"); 

	// Профрешение 18.12.2023 {                                  
	ДобавитьПКС(СвойстваШапки, "Родитель", "Группа", , "Справочник_СтатьиРасходовГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель", "СтатьиРасходовГруппа", , "Справочник_СтатьиРасходовГруппа_Получение");  
	// } Профрешение
	ДобавитьПКС(СвойстваШапки, "КорреспондирующийСчет", "КорСчет"); // {Профрешение Сурина 24.01.24} 
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
   	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование, ЭтоГруппа"); 
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование, ЭтоГруппа");
КонецПроцедуры

// Профрешение 18.12.2023 {
Процедура ДобавитьПКО_Справочник_СтатьиРасходовГруппы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходовГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходовГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель", "Группа", , "Справочник_СтатьиРасходовГруппа_Получение");
	
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование, ЭтоГруппа"); 
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование, ЭтоГруппа");
	
КонецПроцедуры    
// } Профрешение

Процедура ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
		
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;       

	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "Перечисление_ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	ПолучитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Банки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Банки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Страна",       "Страна", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");
	ДобавитьПКС(СвойстваШапки, "",             "SWIFT", 1);
	ДобавитьПКС(СвойстваШапки, "",             "СВИФТБИК", 1);
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Банки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Банки.КлючевыеСвойства.СВИФТБИК") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("СВИФТБИК", ДанныеИБ.СВИФТБИК);
	КонецЕсли;
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Банки.SWIFT") Тогда
		ДанныеXDTO.Вставить("SWIFT", ДанныеИБ.СВИФТБИК);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Банки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Банки.КлючевыеСвойства.СВИФТБИК") Тогда
		ОписаниеЭлемента = Новый Структура("ИмяСвойства", "СВИФТБИК");
		ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO.КлючевыеСвойства, ОписаниеЭлемента);
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Банки.SWIFT") Тогда
		ОписаниеЭлемента = Новый Структура("ИмяСвойства, ИмяСвойстваXDTO", "СВИФТБИК", "SWIFT");
		ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO, ОписаниеЭлемента);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Валюты_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗагружаетсяИзИнтернета", "ЗагружаетсяИзИнтернета");
	ДобавитьПКС(СвойстваШапки, "Код",                    "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Наценка",                "Наценка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяВалюта",         "ОсновнаяВалюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                       "ПараметрыПрописи", 1);
	ДобавитьПКС(СвойстваШапки, "",                       "ПараметрыПрописиНаРусском", 1);
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",       "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособУстановкиКурса",   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Валюты.ПараметрыПрописи") Тогда
		ДанныеXDTO.Вставить("ПараметрыПрописи", ДанныеИБ.ПараметрыПрописи);
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Валюты.ПараметрыПрописиНаРусском") Тогда
		ДанныеXDTO.Вставить("ПараметрыПрописиНаРусском", ДанныеИБ.ПараметрыПрописи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Валюты.ПараметрыПрописи") Тогда
		ОписаниеЭлемента = Новый Структура("ИмяСвойства", "ПараметрыПрописи");
		ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO, ОписаниеЭлемента);
	ИначеЕсли СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Валюты.ПараметрыПрописиНаРусском") Тогда
		ОписаниеЭлемента = Новый Структура("ИмяСвойства, ИмяСвойстваXDTO", "ПараметрыПрописи", "ПараметрыПрописиНаРусском");
		ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO, ОписаниеЭлемента);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Заполнение реквизитов.
	ДанныеКорректировки = Новый Структура;
	ДанныеКорректировки.Вставить("СпособУстановкиКурса", Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод);
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ВидДокументаИзКлассификатора", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидДокументаИзКлассификатора = "";
	Если ДанныеИБ.Предопределенный И ЗначениеЗаполнено(ДанныеИБ.ИмяПредопределенныхДанных) Тогда
		ВидДокументаИзКлассификатора = ДанныеИБ.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДокументаИзКлассификатора", ВидДокументаИзКлассификатора);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Заполнение реквизитов.
	ДанныеКорректировки = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		// Если Заголовок не заполнен, заполняется из ДанныхИБ или по умолчанию из Наименования.
		ДанныеКорректировки.Вставить("Заголовок", ПолученныеДанные.Наименование);
	КонецЕсли;
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДопРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДопРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДопРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ
Процедура ДобавитьПКО_Справочник_КассыККМ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КассыККМ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КассыККМ";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_КассыККМ_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КассыККМ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КассыККМ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер", "РегистрационныйНомер");
	ДобавитьПКС(СвойстваШапки, "Склад",                "Склад", , "Справочник_Склады_Отправка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Склад,РегистрационныйНомер");
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "Код, Наименование");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Идентификатор",     "Идентификатор");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",   "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                  "ВалютаЦены", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                  "ОкруглятьВБольшуюСторону", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "ТочностьОкругления", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",        "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "СпособЗаданияЦены", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВалютаЦены = ?(ЗначениеЗаполнено(ДанныеИБ.ВалютаЦены), ДанныеИБ.ВалютаЦены, Константы.ВалютаРегламентированногоУчета.Получить());
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", ВалютаЦены);
	
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ОкруглятьВБольшуюСторону", ДанныеИБ.ВариантОкругления = Перечисления.ВариантыОкругления.ВсегдаВБольшуюСторону);
	
	Если ДанныеИБ.ПравилаОкругленияЦены.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТочностьОкругления", ДанныеИБ.ПравилаОкругленияЦены[0].ТочностьОкругления);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ОписаниеЭлемента = Новый Структура("ИмяСвойства", "ВалютаЦены");
	ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO.КлючевыеСвойства, ОписаниеЭлемента);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	
	ОкруглятьВБольшуюСторону = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеXDTO, "ОкруглятьВБольшуюСторону");
	Если ОкруглятьВБольшуюСторону = Истина Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВариантОкругления", Перечисления.ВариантыОкругления.ВсегдаВБольшуюСторону);
	КонецЕсли;
	
	ТочностьОкругления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеXDTO, "ТочностьОкругления");
	Если ЗначениеЗаполнено(ТочностьОкругления) Тогда
		ПравилаОкругленияЦены = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("ТочностьОкругления", ТочностьОкругления));
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПравилаОкругленияЦены", ПравилаОкругленияЦены);	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Запись дополнительных сведений.
	ОбъектСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ПолученныеДанные.ДополнительныеСвойства);
	
	// Заполнение реквизитов.
	ДанныеКорректировки = Новый Структура;
	ДанныеКорректировки.Вставить("СпособЗаданияЦены", Перечисления.СпособыЗаданияЦен.Вручную);
	ДанныеКорректировки.Вставить("Идентификатор"    , ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьИдентификатор(ПолученныеДанные.Наименование));
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВариантОкругления) Тогда
		// Если получаемое значение ВариантОкругления не заполнено,
		// тогда заполняется из ДанныеИБ или по умолчанию.
		ДанныеКорректировки.Вставить("ВариантОкругления", Перечисления.ВариантыОкругления.ПоАрифметическимПравилам);
	КонецЕсли;
	
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	1 КАК Поле
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка <> &Ссылка
	|	И ВидыЦен.Идентификатор = &Идентификатор
	|");
	
	Запрос.УстановитьПараметр("Ссылка"       , ОбъектСсылка);
	Запрос.УстановитьПараметр("Идентификатор", ПолученныеДанные.Идентификатор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		ПолученныеДанные.Идентификатор = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.СформироватьУникальныйИдентификатор();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы
Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайринговыеТерминалы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЭквайринговыеТерминалы_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЭквайринговыеТерминалы_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайер",      "Эквайер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчетаОрганизаций_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ЭквайринговыеТерминалы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("БанковскийСчетОрганизации", Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеИБ.Организация));
КонецПроцедуры

Процедура ПКО_Справочник_ЭквайринговыеТерминалы_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Проверка обязательных реквизитов.
	КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресСклада, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагенты, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагенты, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСклада, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагенты, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагенты, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийВозвратПоставщику_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийВозвратПоставщику_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратПоставщику";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику, "ВозвратПоставщику");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийВозвратПоставщику_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийВозвратПоставщику_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратПоставщику";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику, "ВозвратКомитенту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику, "ВозвратПоставщику");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийВозвратТоваровОтПокупателя_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийВозвратТоваровОтПокупателя_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийВозвратОтПокупателя";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя, "ВозвратОтРозничногоПокупателя");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийПоступленияТоваров_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПоступленияТоваров_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеВнутриведомственное, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеМежбюджетное, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо, "ПокупкаУПоставщика");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_Налогообложение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_Налогообложение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
		ПравилоКонвертации.ТипXDTO   = "Налогообложение";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, "ПродажаНеОблагаетсяНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД, "ПродажаОблагаетсяЕНВД");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, "ПродажаОблагаетсяНДС");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_НалогообложениеНДС.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_НалогообложениеНДС";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
		ПравилоКонвертации.ТипXDTO   = "НалогообложениеНДС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, "ПродажаНеОблагаетсяНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД, "ПродажаОблагаетсяЕНВД");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, "ПродажаОблагаетсяНДС");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_НалогообложениеНДСПродавца.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_НалогообложениеНДСПродавца";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
		ПравилоКонвертации.ТипXDTO   = "НалогообложениеНДСПродавца";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, "НеОблагаетсяНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД, "ОблагаетсяЕНВД");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, "ОблагаетсяНДС");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СтавкиНДС_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
		ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыНоменклатуры_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыСкладов_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыСкладов_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
		ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.БольничнаяАптека, "Оптовый");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.Отделение, "Оптовый");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "Розничный");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮрФизЛицо_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮрФизЛицо_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ВидыОперацийПоступленияТоваров_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПоступленияТоваров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗакупкаПоИмпорту", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ЗначенияДляПолучения.Вставить("ПокупкаУПоставщика", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ЗначенияДляПолучения.Вставить("ПриемНаКомиссию", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_СтавкиНДС_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
		ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
		ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
		ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
		ЗначенияДляПолучения.Вставить("НДС2", Перечисления.СтавкиНДС.НДС10);
		ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
		ЗначенияДляПолучения.Вставить("НДС2_102", Перечисления.СтавкиНДС.НДС10_110);
		ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
		ЗначенияДляПолучения.Вставить("НДС4", Перечисления.СтавкиНДС.НДС18);
		ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
		ЗначенияДляПолучения.Вставить("НДС4_104", Перечисления.СтавкиНДС.НДС18_118);
		ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
		ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыНоменклатуры_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.Товар);
		ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
		ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Услуга);
		ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыСкладов_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыСкладов_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
		ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСкладов.БольничнаяАптека);
		ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.РозничныйМагазин);
		ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСкладов.РозничныйМагазин);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ЮрФизЛицо_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮрФизЛицо_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// Перечисление_ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ)
	ВидКИ = Неопределено;
	
	ПрефиксПользовательскойКИ = ПрефиксПользовательскойКИ();
	
	Если СтрНачинаетсяС(ВидКИСтрокой, ПрефиксПользовательскойКИ) Тогда
		
		// Получение пользовательского вида контактной информации.
		
		ИмяТипаКИ = СтрЗаменить(ВидКИСтрокой, ПрефиксПользовательскойКИ, "");
		ТипКИ     = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ(&ГруппаВидовКИ)
		|	И ВидыКонтактнойИнформации.Наименование = &Наименование
		|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
		|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
		|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ
		|");
		
		Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
		Запрос.УстановитьПараметр("Наименование" , НаименованиеКИ);
		Запрос.УстановитьПараметр("ТипКИ"        , ТипКИ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидКИ = Выборка.Ссылка;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			
			ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
			ВидКИОбъект.Родитель     = ГруппаВидовКИ;
			ВидКИОбъект.Наименование = НаименованиеКИ;
			ВидКИОбъект.Тип          = ТипКИ;
			ВидКИОбъект.Используется = Истина;
			ВидКИОбъект.Записать();
			
			ВидКИ = ВидКИОбъект.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		// Получение предопределенного вида контактной информации.
		
		СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
		
		Если ГруппаВидовКИ = СправочникВидыКИ.СправочникКонтрагенты Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ВидКИ = СправочникВидыКИ.EmailКонтрагенты;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ВидКИ = СправочникВидыКИ.ПочтовыйАдресКонтрагенты;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ВидКИ = СправочникВидыКИ.ФактАдресКонтрагенты;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ВидКИ = СправочникВидыКИ.ЮрАдресКонтрагенты;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ВидКИ = СправочникВидыКИ.ТелефонКонтрагенты;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ВидКИ = СправочникВидыКИ.ФаксКонтрагенты;
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникОрганизации Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ВидКИ = СправочникВидыКИ.EmailОрганизации;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ВидКИ = СправочникВидыКИ.ПочтовыйАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ВидКИ = СправочникВидыКИ.ФактАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ВидКИ = СправочникВидыКИ.ЮрАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ВидКИ = СправочникВидыКИ.ТелефонОрганизации;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ВидКИ = СправочникВидыКИ.ФаксОрганизации;
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникФизическиеЛица Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ВидКИ = СправочникВидыКИ.EmailФизическогоЛица;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ВидКИ = СправочникВидыКИ.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ВидКИ = СправочникВидыКИ.АдресМестаПроживанияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ВидКИ = СправочникВидыКИ.АдресПоПропискеФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ВидКИ = СправочникВидыКИ.ТелефонМобильныйФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ВидКИ = СправочникВидыКИ.ТелефонДомашнийФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ВидКИ = СправочникВидыКИ.ТелефонРабочийФизическиеЛица;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидКИ;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	ДанныеИспользованияДопРеквизитовИСведений = ПолучитьИспользованиеДопРеквизитовИСведений(КомпонентыОбмена, ДанныеИБ.Ссылка);
	
	// Выгрузка доп. реквизитов.
	Если ДанныеИспользованияДопРеквизитовИСведений.ОбъектИспользуетДопРеквизиты Тогда
		ВыгрузитьПроизвольныеДанныеВДопРеквизиты(КомпонентыОбмена, ДанныеИБ.ДополнительныеРеквизиты.Выгрузить(), ДанныеXDTO);
	КонецЕсли;
	
	// Выгрузка доп. сведений.
	Если ДанныеИспользованияДопРеквизитовИСведений.ОбъектИспользуетДопСведения Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ Свойство, Значение ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Объект = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыгрузитьПроизвольныеДанныеВДопРеквизиты(КомпонентыОбмена, РезультатЗапроса.Выгрузить(), ДанныеXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаление неиспользуемой коллекции доп реквизитов и сведений.
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ДанныеXDTO.ДополнительныеРеквизиты.Количество() = 0 Тогда
		ДанныеXDTO.Удалить("ДополнительныеРеквизиты");
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПроизвольныеДанныеВДопРеквизиты(КомпонентыОбмена, ВыгружаемыеДопРеквизиты, ДанныеXDTO)
	// Выполняет выгрузку произвольных данных в коллекцию ДополнительныеРеквизиты формата обмена объекта.
	//
	// Параметры:
	//  КомпонентыОбмена
	//  ВыгружаемыеДопРеквизиты - Структура,
	//                            СтрокаТаблицыЗначений,
	//                            ВыборкаИзРезультатаЗапроса,
	//                            ТаблицаЗначений,
	//                            Массив - данные, которые можно выгрузить в коллекцию ДополнительныеРеквизиты.
	//                                     Элемент данных должен состоять из следующих свойств:
	//                                       * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
	//                                       * Значение - Характеристика.ДополнительныеРеквизитыИСведения.
	//  ДанныеXDTO
	
	Если Не ДанныеXDTO.Свойство("ДополнительныеРеквизиты") Тогда
		ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
		ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
		ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
		
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
	
	ТипДопРеквизитов = ТипЗнч(ВыгружаемыеДопРеквизиты);
	
	Если ТипДопРеквизитов = Тип("Структура")
	 Или ТипДопРеквизитов = Тип("СтрокаТаблицыЗначений")
	 Или ТипДопРеквизитов = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ДобавитьЭлементДопРеквизитов(КомпонентыОбмена, ВыгружаемыеДопРеквизиты, ДанныеXDTO.ДополнительныеРеквизиты);
	ИначеЕсли ТипДопРеквизитов = Тип("ТаблицаЗначений")
		  Или ТипДопРеквизитов = Тип("Массив") Тогда
		Для Каждого ОписаниеДопРеквизита Из ВыгружаемыеДопРеквизиты Цикл
			ДобавитьЭлементДопРеквизитов(КомпонентыОбмена, ОписаниеДопРеквизита, ДанныеXDTO.ДополнительныеРеквизиты);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьЭлементДопРеквизитов(КомпонентыОбмена, ВыгружаемыйДопРеквизит, ТаблицаДопРеквизитов)
	// Добавляет элемент в коллекцию ДанныеXDTO.ДополнительныеРеквизиты по передаваемым данным. 
	//
	// Параметры:
	//  ВыгружаемыйДопРеквизит - Структура - данные, которые необходимо поместить в ДанныеXDTO.ДополнительныеРеквизиты.
	//                                       Свойства структуры:
	//                                         * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
	//                                         * Значение - Характеристика.ДополнительныеРеквизитыИСведения.
	//  ТаблицаДопРеквизитов - ДанныеXDTO.ДополнительныеРеквизиты (ТаблицаЗначений) - коллекция передаваемых дополнительных реквизитов.
	
	Если Не ЗначениеЗаполнено(ВыгружаемыйДопРеквизит.Свойство) Или Не ЗначениеЗаполнено(ВыгружаемыйДопРеквизит.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСвойства = ВыгружаемыйДопРеквизит.Значение;
	ИмяПКО = ДобавитьЭлементДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства);
	
	Если ИмяПКО <> Неопределено Тогда
		
		СтрокаДопРеквизитов = ТаблицаДопРеквизитов.Добавить();
		СтрокаДопРеквизитов.Свойство         = ЗначениеВИнструкцию(ВыгружаемыйДопРеквизит.Свойство, "Справочник_ДополнительныеРеквизиты");
		СтрокаДопРеквизитов.ЗначениеСвойства = ЗначениеВИнструкцию(ЗначениеСвойства, ИмяПКО);
		
	КонецЕсли;
КонецПроцедуры
Функция ДобавитьЭлементДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства)
	ТипЗначенияЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	
	Если ТипЗначенияЗначенияСвойства = Тип("Число") 
	 Или ТипЗначенияЗначенияСвойства = Тип("Строка")
	 Или ТипЗначенияЗначенияСвойства = Тип("Булево")
	 Или ТипЗначенияЗначенияСвойства = Тип("Дата") Тогда
		Возврат "";
	Иначе
		
		ЭтоГруппа = ОбщегоНазначения.ОбъектЯвляетсяГруппой(ЗначениеСвойства);
		
		Если ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
			ИмяПКО = ?(Не ЭтоГруппа, "Справочник_Номенклатура_Отправка", "Справочник_НоменклатураГруппа");
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
			ИмяПКО = ?(Не ЭтоГруппа, "Справочник_Контрагенты_Отправка", "Справочник_КонтрагентыГруппа");
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ИмяПКО = "Справочник_ЗначенияДопРеквизитов";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
			ИмяПКО = Неопределено;
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
			ИмяПКО = "Справочник_Валюты";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			ИмяПКО = "Справочник_ЕдиницыИзмерения";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
			ИмяПКО = "Справочник_Организации_Отправка";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяПКО = "Справочник_Пользователи";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ИмяПКО = "Справочник_Подразделения_Отправка";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
			ИмяПКО = ?(Не ЭтоГруппа, "Справочник_Склады_Отправка", "Справочник_СкладыГруппа");   
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
			ИмяПКО = "Справочник_СтраныМира";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ВидыЦен") Тогда
			ИмяПКО = "Справочник_ТипыЦен";
		ИначеЕсли ТипЗначенияЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИмяПКО = ?(Не ЭтоГруппа, "Справочник_ФизическиеЛица_Отправка", "Справочник_ФизическиеЛицаГруппа");
		Иначе
			ИмяПКО = Неопределено;
		КонецЕсли;
		
		Возврат ИмяПКО;
		
	КонецЕсли;
КонецФункции
Процедура ЗагрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO)
	// Загружает дополнительные реквизиты и сведения из коллекции ДанныеXDTO.ДополнительныеРеквизиты
	// в две коллекции ДополнительныеРеквизиты и ДополнительныеСведения, которые будут обработаны
	// в событиях "Перед записью полученных данных объекта" и "После конвертации".
	// В массивы помещаются структуры со свойствами "Свойство" и "Значение",
	// которые соответствуют формату дополнительных реквизитов и свойств БСП.
	//
	// Параметры:
	//  КомпонентыОбмена
	//  ПолученныеДанные
	//  ДанныеXDTO
	
	Если Не (ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИспользованияДопРеквизитовИСведений = ПолучитьИспользованиеДопРеквизитовИСведений(КомпонентыОбмена, ПолученныеДанные.Ссылка);
	
	ОбъектИспользуетДопРеквизиты = ДанныеИспользованияДопРеквизитовИСведений.ОбъектИспользуетДопРеквизиты;
	ОбъектИспользуетДопСведения  = ДанныеИспользованияДопРеквизитовИСведений.ОбъектИспользуетДопСведения;
	
	Если Не ОбъектИспользуетДопРеквизиты И Не ОбъектИспользуетДопСведения Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование данных для загрузки в дополнительные реквизиты (сведения) объекта.
	Если ОбъектИспользуетДопСведения Тогда
		МассивСтрокДопСведения = Новый Массив;
	КонецЕсли;
	
	Если ОбъектИспользуетДопРеквизиты Тогда
		МассивСтрокДопРеквизиты = Новый Массив;
	КонецЕсли;
	
	ТипВладельцаСвойства = ОбщегоНазначения.ИмяТаблицыПоСсылке(ПолученныеДанные);
	
	Для Каждого ДопРеквизитДанныеXDTO Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
		
		// Получение данных элемента коллекции дополнительных реквизитов (сведений) в формате конфигурации.
		ЗагружаемыйДопРеквизит = ПолучитьЭлементИзДопРеквизитов(КомпонентыОбмена, ДопРеквизитДанныеXDTO, ТипВладельцаСвойства);
		Если ЗагружаемыйДопРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоДопСведение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗагружаемыйДопРеквизит.Свойство, "ЭтоДополнительноеСведение", Ложь);
		Если ОбъектИспользуетДопСведения И ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(ЗагружаемыйДопРеквизит);
		ИначеЕсли ОбъектИспользуетДопРеквизиты И Не ЭтоДопСведение Тогда
			МассивСтрокДопРеквизиты.Добавить(ЗагружаемыйДопРеквизит);
		КонецЕсли;
		
	КонецЦикла;
	
	// Помещение дополнительных реквизитов и сведений в ДополнительныеСвойства объекта для дальнейшей обработки.
	Если ОбъектИспользуетДопСведения И МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
	
	Если ОбъектИспользуетДопРеквизиты И МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаписатьДополнительныеСведения(КомпонентыОбмена, ОбъектСсылка, ДополнительныеСвойства)
	// Формирует записи в регистре сведений ДополнительныеСведения по данным,
	// из коллекции ДополнительныеСведения.
	// (см. алгоритм ЗагрузитьДополнительныеРеквизитыИСведения,
	// вызываемый из обработчика события "При конвертации данных XDTO").
	//
	// Параметры:
	//  КомпонентыОбмена
	//  ОбъектСсылка - ЛюбаяСсылка - владелец дополнительного сведения.
	//  ДополнительныеСвойства - Структура - свойство прикладного объекта конфигурации,
	//                                       в которое помещена коллекция ДополнительныеСведения.
	//
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСведения = Неопределено;
	Если Не ДополнительныеСвойства.Свойство("ДополнительныеСведения", ДополнительныеСведения)
	 Или ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДополнительныеРеквизиты");
	
	Для Каждого СтрокаДопСведения Из ДополнительныеСведения Цикл
		
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
			КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"КонвертироватьИЗаписать").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена, 
				СтрокаДопСведения.Значение.Значение, 
				ПКО_ЗначениеСвойства, 
				"КонвертироватьИЗаписать").Ссылка;
			
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
		
	КонецЦикла;
	
	ОбменДаннымиXDTOСервер.ЗаписатьОбъектВИБ(КомпонентыОбмена, ДопСведенияНаборЗаписей, ТипЗнч(ДопСведенияНаборЗаписей));
КонецПроцедуры
Функция ЗначениеВИнструкцию(Значение, ИмяПКО)
	Возврат Новый Структура("Значение, ИмяПКО", Значение, ИмяПКО);
КонецФункции
Функция ИнструкцияОтправкиДокументаПоступления(ПартияОбразующийДокумент)
	Если ТипЗнч(ПартияОбразующийДокумент) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПартияОбразующийДокумент, "ХозяйственнаяОперация");
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
			Инструкция = Новый Структура("Значение, ИмяПКО", ПартияОбразующийДокумент, "Документ_ПоступлениеТоваровУслуг_Отправка");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
			Инструкция = Новый Структура("Значение, ИмяПКО", ПартияОбразующийДокумент, "Документ_ПТУЧерезПодотчетноеЛицо_Отправка");
		Иначе
			Инструкция = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПартияОбразующийДокумент) = Тип("ДокументСсылка.ИзготовлениеПоЛекарственнойПрописи") Тогда
		
		Инструкция = Новый Структура("Значение, ИмяПКО", ПартияОбразующийДокумент, "Документ_Изготовление_ВыпускПродукции_Отправка");
		
	Иначе
		
		Инструкция = Неопределено;
		
	КонецЕсли;
	
	Возврат Инструкция;
КонецФункции
Процедура КонвертироватьДокументПоступленияТоваров(КомпонентыОбмена, Товары)
	Если Товары.Колонки.Найти("ПартияОбразующийДокумент") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Колонки.Добавить("ДокументПоступления");
	Для Каждого Товар Из Товары Цикл
		Товар.ДокументПоступления = ИнструкцияОтправкиДокументаПоступления(Товар.ПартияОбразующийДокумент);
	КонецЦикла;
	Товары.Колонки.Удалить("ПартияОбразующийДокумент");
КонецПроцедуры
Процедура КонвертироватьСерииТоваров(КомпонентыОбмена, Товары)
	ТипИспользуется_Серия = СвойствоФорматаОбмена(КомпонентыОбмена, "ОбщиеСвойстваДанныеНоменклатуры.Серия"); // С версии 1.6.
	Если Не ТипИспользуется_Серия И Товары.Колонки.Найти("Серия") <> Неопределено Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
КонецПроцедуры
Процедура КонвертироватьУпаковкиТоваров(КомпонентыОбмена, Товары)
	// Если в таблице Товары есть поле Упаковка, и в формате объекта Упаковка используется свойство Номенклатура,
	// тогда формируется значение реквизита Упаковка в виде структуры, включающей как значение Упаковки так и Номенклатуры,
	// а так же назначается правило конвертации Справочник_Упаковки_Отправка.
	
	Если Товары.Колонки.Найти("Упаковка") <> Неопределено Тогда
		Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Упаковки.КлючевыеСвойства.Номенклатура") Тогда
			Товары.Колонки.Добавить("КонвертируемаяУпаковка");
			Для Каждого Товар Из Товары Цикл
				Если ЗначениеЗаполнено(Товар.Упаковка) Тогда
					Значение = Новый Структура("Ссылка, Номенклатура", Товар.Упаковка, Товар.Номенклатура);
					Товар.КонвертируемаяУпаковка = ЗначениеВИнструкцию(Значение, "Справочник_Упаковки_Отправка");
				КонецЕсли;
			КонецЦикла;
			Товары.Колонки.Удалить("Упаковка");
			Товары.Колонки.КонвертируемаяУпаковка.Имя = "Упаковка";
		Иначе
			Товары.Колонки.Удалить("Упаковка");
			Если Товары.Колонки.Найти("КоличествоУпаковок") <> Неопределено Тогда
				Товары.Колонки.Удалить("КоличествоУпаковок");
			КонецЕсли;
			Если Товары.Колонки.Найти("ЦенаЗаУпаковку") <> Неопределено Тогда
				Товары.Колонки.Удалить("ЦенаЗаУпаковку");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура КорректироватьПолученныеДанные(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, ДанныеКорректировки = Неопределено)
	// Выполняет проверку реквизитов объекта ПолученныеДанные
	// и перезаполняет их по следующему принципу:
	//  1. Если реквизит объекта ПолученныеДанные - не заполнен,
	//     тогда данные берутся из ДанныеИБ или из ДанныеКорректировки.
	//  2. Если передается структура ДанныеКорректировки,
	//     тогда реквизит объекта ПолученныеДанные заполняется из структуры в том случае,
	//     если реквизит объекта ДанныеИБ - не заполнен, иначе из ДанныеИБ.
	// В дальнейшем, данные из объекта ПолученныеДанные будут перенесены в ДанныеИБ.
	// Табличные части заполняются отдельно.
	//
	// Например:
	//  Если в структуре ДанныеКорректировки будет свойство Статус,
	//  при этом ДанныеИБ <> Неопределено, тогда ПолученныеДанные
	//  будут заполнены из ДанныеИБ, если реквизит объекта ДанныеИБ будет заполнен,
	//  иначе установится значение из ДанныеКорректировки.
	//
	
	ЭтоНовый = ДанныеИБ = Неопределено;
	ТипДанных = ТипЗнч(ПолученныеДанные);
	
	// Сохранение повторно используемой информации о реквизитах объектов.
	КэшРеквизитовОбъектов = КомпонентыОбмена.ПараметрыКонвертации.КэшРеквизитовОбъектов;
	Если КэшРеквизитовОбъектов = Неопределено Тогда
		КэшРеквизитовОбъектов = Новый Соответствие;
		КомпонентыОбмена.ПараметрыКонвертации.КэшРеквизитовОбъектов = КэшРеквизитовОбъектов;
	КонецЕсли;
	
	РеквизитыОбъекта = КэшРеквизитовОбъектов.Получить(ТипДанных);
	Если РеквизитыОбъекта = Неопределено Тогда
		
		МетаданныеОбъекта    = ПолученныеДанные.Метаданные();
		Реквизиты            = МетаданныеОбъекта.Реквизиты;
		СтандартныеРеквизиты = МетаданныеОбъекта.СтандартныеРеквизиты;
		
		РеквизитыОбъекта = Новый Массив;
		
		Для Каждого Реквизит Из Реквизиты Цикл
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("ИмяРеквизита", Реквизит.Имя);
			ОписаниеРеквизита.Вставить("Обязательный", Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
			РеквизитыОбъекта.Добавить(ОписаниеРеквизита);
		КонецЦикла;
		
		Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("ИмяРеквизита", СтандартныйРеквизит.Имя);
			ОписаниеРеквизита.Вставить("Обязательный", СтандартныйРеквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
			РеквизитыОбъекта.Добавить(ОписаниеРеквизита);
		КонецЦикла;
		
		КэшРеквизитовОбъектов.Вставить(ТипДанных, РеквизитыОбъекта);
		
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из РеквизитыОбъекта Цикл
		
		ИмяРеквизита = ОписаниеРеквизита.ИмяРеквизита;
		
		// Заполнение реквизита объекта ПолученныеДанные из базы,
		// если выполняется повторная загрузка, при этом
		// обязательные реквизита в ПолученныхДанных - не заполнены.
		Если Не ЭтоНовый И Не ЗначениеЗаполнено(ПолученныеДанные[ИмяРеквизита]) И ОписаниеРеквизита.Обязательный Тогда
			ПолученныеДанные[ИмяРеквизита] = ДанныеИБ[ИмяРеквизита];
		КонецЕсли;
		
		// Заполнение реквизита объекта ПолученныеДанные по умолчанию.
		// Если объект новый (ДанныеИБ = Неопределено) или реквизит не заполнен, тогда
		// значения берутся из структуры ДанныеКорректировки, для указанного реквизита.
		// Если объект не новый и реквизит заполнен, тогда значения берутся из реквизита объекта.
		Если ДанныеКорректировки <> Неопределено Тогда
			ЗначениеРеквизитаПоУмолчанию = Неопределено;
			Если ДанныеКорректировки.Свойство(ИмяРеквизита, ЗначениеРеквизитаПоУмолчанию) Тогда
				Если ЭтоНовый Тогда
					ПолученныеДанные[ИмяРеквизита] = ЗначениеРеквизитаПоУмолчанию;
				Иначе
					ЗначениеРеквизитаОбъекта = ДанныеИБ[ИмяРеквизита];
					ПолученныеДанные[ИмяРеквизита] = ?(ЗначениеЗаполнено(ЗначениеРеквизитаОбъекта), ЗначениеРеквизитаОбъекта, ЗначениеРеквизитаПоУмолчанию);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			
			// Поиск набора еще не выполнялся.
			ИмяНабора = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			
			// 1 этап - прямой поиск.
			НаборДопРеквизитов = УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
			Если НаборДопРеквизитов <> Неопределено Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборДопРеквизитов, "ЭтоГруппа") = Истина Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				НаборДопРеквизитов = УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора + "_Общие");
				Если НаборДопРеквизитов <> Неопределено Тогда
					Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборДопРеквизитов, "ЭтоГруппа") = Истина Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
					|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
					|ГДЕ ЭтоГруппа = ЛОЖЬ И Наименование ПОДОБНО &ИмяПоиск
					|");
				
				ИмяТипаОбъекта = Сред(СтрокаДопРеквизиты.ТипОбъекта, СтрНайти(СтрокаДопРеквизиты.ТипОбъекта, ".", НаправлениеПоиска.СКонца) + 1);
				Запрос.УстановитьПараметр("ИмяПоиск", "%" + ИмяТипаОбъекта + "%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
			
		КонецЕсли;
		
		СвойствоСсылка = СсылкаПоДаннымXDTO(КомпонентыОбмена, СтрокаДопРеквизиты.Свойство, "Справочник_ДополнительныеРеквизиты");
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.
			Продолжить;
		КонецЕсли;
		
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
			
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И Не ДопЗначенияИспользуются
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
				Иначе
					
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗначенияСвойства = Неопределено Или Не ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				
				Если ТипЗначенияСвойства <> Неопределено И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
		// Проверка наличия в наборе доп. реквизита или доп. сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;
		
	КонецЦикла;
	
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			
			Отбор = Новый Структура("ПометкаУдаления", Ложь);
		
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			КоличествоРеквизитов = НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(Отбор).Количество();
			КоличествоСведений   = НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(Отбор).Количество();
			
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(КоличествоРеквизитов, "ЧГ=");
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(КоличествоСведений, "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ОбъектФорматаПоддерживаетсяКорреспондентом(КомпонентыОбмена, ОбъектФормата)
	// Массив КомпонентыОбмена.ПоддерживаемыеОбъектыXDTO содержит имена объектов формата,
	// которые корреспондент может принимать (если текущий режим - отправка)
	// или отправлять (если текущий режим - получение).
	
	Возврат КомпонентыОбмена.ПоддерживаемыеОбъектыXDTO.Найти(ОбъектФормата) <> Неопределено;
КонецФункции
Процедура ОтложеннаяОбработка_Отделения_Подразделения(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	Если Объект.ДополнительныеСвойства.Свойство("ОбъектНесопоставлен") Тогда
		//Объект.ПометкаУдаления = Истина; // {Профрешение Сурина 10.01.24   } Сурина
		Объект.Владелец = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Владелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЗначенияПолей");
	Результат.Колонки.Добавить("ВидКонтактнойИнформации");
	Результат.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		
		ЗначенияПолей = ?(ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Значение));
		
		Если Не ЗначениеЗаполнено(СтрокаКИ.Вид)
		 Или (Не ЗначениеЗаполнено(ЗначенияПолей) И Не ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Неактуальные варсии контактной информации не выгружаются.
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование, Предопределенный, ХранитьИсториюИзменений");
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина Тогда
			НайденныеСтроки = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРезультата = Результат.Добавить();
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
			
			// Контактная информация в нужном формате.
			СтрокаРезультата.ЗначенияПолей = ЗначенияПолей;
			
		Иначе
			
			// Попытка №1.
			Если ЗначениеЗаполнено(ЗначенияПолей) Тогда
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(ЗначенияПолей, СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
			КонецЕсли;
			
			// Попытка №2.
			Если Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
				ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
			КонецЕсли;
			
			СтрокаРезультата.ЗначенияПолей = ЗначенияПолей;
			
		КонецЕсли;
		
		Если СвойстваВидаКИ.Предопределенный
		   И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
		   И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
		   И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
			
			// Контактная информация предопределенного вида.
			СтрокаРезультата.ВидКонтактнойИнформации = СтрокаКИ.Вид;
			
		Иначе
			
			// Контактная информация с пользовательским видом.
			
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
			
			СтрокаРезультата.ВидКонтактнойИнформации = ПрефиксПользовательскойКИ() + ИмяТипаКИ;
			СтрокаРезультата.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", Результат);
КонецПроцедуры
Функция ПолучитьИспользованиеДопРеквизитовИСведений(КомпонентыОбмена, СсылкаОбъекта)
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат Новый Структура("ОбъектИспользуетДопРеквизиты, ОбъектИспользуетДопСведения", Ложь, Ложь);
	КонецЕсли;
	
	ТипДанных = ТипЗнч(СсылкаОбъекта);
	
	// Кэширование информации об использовании доп. реквизитов и сведений.
	КэшИспользованияДопРеквизитовИСведений = КомпонентыОбмена.ПараметрыКонвертации.КэшИспользованияДопРеквизитовИСведений;
	Если КэшИспользованияДопРеквизитовИСведений = Неопределено Тогда
		КэшИспользованияДопРеквизитовИСведений = Новый Соответствие;
		КомпонентыОбмена.ПараметрыКонвертации.КэшИспользованияДопРеквизитовИСведений = КэшИспользованияДопРеквизитовИСведений;
	КонецЕсли;
	
	ДанныеИспользованияДопРеквизитовИСведений = КэшИспользованияДопРеквизитовИСведений.Получить(ТипДанных);
	Если ДанныеИспользованияДопРеквизитовИСведений = Неопределено Тогда
		ДанныеИспользованияДопРеквизитовИСведений = Новый Структура;
		ДанныеИспользованияДопРеквизитовИСведений.Вставить("ОбъектИспользуетДопРеквизиты", УправлениеСвойствами.ИспользоватьДопРеквизиты(СсылкаОбъекта));
		ДанныеИспользованияДопРеквизитовИСведений.Вставить("ОбъектИспользуетДопСведения", УправлениеСвойствами.ИспользоватьДопСведения(СсылкаОбъекта));
		КэшИспользованияДопРеквизитовИСведений.Вставить(ТипДанных, ДанныеИспользованияДопРеквизитовИСведений);
	КонецЕсли;
	
	Возврат ДанныеИспользованияДопРеквизитовИСведений;
КонецФункции
Процедура ПолучитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, ГруппаВидовКИ)
	Если Не (ДанныеXDTO.Свойство("КонтактнаяИнформация") И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация)) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		
		ВидКИСтрокой   = СокрЛП(СтрокаXDTO.ВидКонтактнойИнформации.Значение);
		НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
		ЗначениеКИ     = СокрЛП(СтрокаXDTO.ЗначенияПолей);
		
		ВидКИ = ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ);
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			Продолжить;
		КонецЕсли;
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, ЗначениеКИ, ВидКИ);
		
	КонецЦикла;
КонецПроцедуры
Функция ПолучитьРозничногоПокупателя()
	// Возвращает описание элемента справочника контрагенты,
	// для подстановки в качестве розничного покупателя,
	// т.к. контрагент может не использоваться в документе,
	// но быть обязательным для заполнения в формате.
	// Розничный покупатель возвращается не как инструкция, а как обычная структура,
	// по этому в объект XDTO он будет записан без использования правил конвертации,
	// а просто как набор свойств.
	
	РозничныйПокупатель = Новый Структура;
	РозничныйПокупатель.Вставить("Наименование"             , НСтр("ru='Розничный покупатель'"));
	РозничныйПокупатель.Вставить("НаименованиеПолное"       , НСтр("ru='Розничный покупатель'"));
	РозничныйПокупатель.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Возврат РозничныйПокупатель;
КонецФункции
Функция ПолучитьЭлементИзДопРеквизитов(КомпонентыОбмена, ДопРеквизитДанныеXDTO, ТипВладельцаСвойства)
	// Конвертирует элемент коллекции ДанныеXDTO.ДополнительныеРеквизиты в формат конфигурации,
	// и добавляет сведения о загрузке доп. реквизитов (сведений), для отложенной обработки.
	//
	// Параметры:
	//  ДопРеквизитДанныеXDTO - конвертируемый элемент коллекции ДанныеXDTO.ДополнительныеРеквизиты.
	//  ТипЗначенияСвойства - тип значения свойства. Устанавливается в функции ПолучитьЭлементИзДопРеквизитов_ОпределитьИмяПКО.
	//
	// Возвращаемое значение:
	//  ЗагружаемыйДопРеквизит - Структура - данные дополнительных реквизитов объекта во внутреннем формате.
	//                                       Свойства структуры:
	//                                         * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
	//                                         * Значение - Характеристика.ДополнительныеРеквизитыИСведения.
	//
	
	ЗначениеСвойства = ДопРеквизитДанныеXDTO.ЗначениеСвойства;
	ТипЗначенияСвойства = Неопределено;
	
	ИмяПКО = ПолучитьЭлементИзДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ТипЗначенияСвойства);
	
	ЗагружаемыйДопРеквизит = Неопределено;
	Если ИмяПКО <> Неопределено Тогда
		
		Свойство = ДопРеквизитДанныеXDTO.Свойство;
		
		Если ИмяПКО = "Справочник_ЗначенияДопРеквизитов" Тогда
			Если Не (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
				// Ключевое свойство Владелец необходимо указать явно.
				ЗначениеСвойства.Вставить("Владелец", Свойство);
			КонецЕсли;
		КонецЕсли;
		
		ЗагружаемыйДопРеквизит = Новый Структура("Свойство, Значение", Свойство, ЗначениеВИнструкцию(ЗначениеСвойства, ИмяПКО));
		
		// Формирование записи данных о загрузке доп. реквизитов (сведений), для отложенной обработки.
		// (см. процедуру ОбработатьЗагруженныеДопРеквизитыИСведения).
		ОписаниеСвойства = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ОписаниеСвойства.Свойство       = Свойство;
		ОписаниеСвойства.ТипЗначения    = ТипЗначенияСвойства;
		ОписаниеСвойства.ТипОбъекта     = ТипВладельцаСвойства;
		ОписаниеСвойства.ЭтоДопСведение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Свойство, "ЭтоДополнительноеСведение", Ложь);
		
	КонецЕсли;
	
	Возврат ЗагружаемыйДопРеквизит;
КонецФункции
Функция ПолучитьЭлементИзДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ТипЗначенияСвойства)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	
	Если ТипЗначенияСвойства = Тип("Строка")
	 Или ТипЗначенияСвойства = Тип("Число")
	 Или ТипЗначенияСвойства = Тип("Дата")
	 Или ТипЗначенияСвойства = Тип("Булево") Тогда
		Возврат "";
	ИначеЕсли ТипЗначенияСвойства = Тип("Структура") И ЗначениеСвойства.Свойство("ТипЗначения") Тогда
		
		ТипЗначенияЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
		
		Если Найти(ТипЗначенияЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
			ИмяПКО = "Справочник_ЗначенияДопРеквизитов";
			ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "КонтрагентГруппа") > 0 Тогда
			ИмяПКО = Неопределено;
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Контрагент") > 0 Тогда
			ИмяПКО = "Справочник_Контрагенты_Получение";
			ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Валюта") > 0 Тогда
			Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
				И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
				ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
			Иначе
				ИмяПКО = "Справочник_Валюты";
			КонецЕсли;
			ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Договор") > 0 Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
			ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
			ТипЗначенияСвойства = Тип("СправочникСсылка.Организации");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Пользователь") > 0 Тогда
			ИмяПКО = "Справочник_Пользователи";
			ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Подразделение") > 0 Тогда
			ИмяПКО = "Справочник_Подразделения_Получение";
			ТипЗначенияСвойства = Тип("СправочникСсылка.ПодразделенияОрганизаций");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "СкладГруппа") > 0 Тогда
			ИмяПКО = "Справочник_СкладыГруппа";
			ТипЗначенияСвойства = Тип("СправочникСсылка.Склады");  
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "Склад") > 0 Тогда
			ИмяПКО = "Справочник_Склады_Получение";
			ТипЗначенияСвойства = Тип("СправочникСсылка.Склады");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "СтатьяДоходов") > 0 Тогда
			ИмяПКО = "Справочник_СтатьиДоходов_Получение";
			ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "СтатьяРасходов") > 0 Тогда
			ИмяПКО = "Справочник_СтатьиРасходов_Получение";
			ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"); 
		// Профрешение 18.12.2023 {
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "СтатьяРасходовГруппа") > 0 Тогда
			ИмяПКО = "Справочник_СтатьиРасходовГруппа_Получение";
			ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов");
		// } Профрешение
		// Профрешение 22.12.2023 {
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "СтатьяДоходовГруппа") > 0 Тогда
			ИмяПКО = "Справочник_СтатьиДоходовГруппа_Получение";
			ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов");	
		// } Профрешение
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "СтранаМира") > 0 Тогда
			ИмяПКО = "Справочник_СтраныМира";
			ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "ТипЦен") > 0 Тогда
			ИмяПКО = "Справочник_ТипыЦен";
			ТипЗначенияСвойства = Тип("СправочникСсылка.ВидыЦен");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "ФизическоеЛицоГруппа") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
			ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
		ИначеЕсли Найти(ТипЗначенияЗначенияСвойства, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
			ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
		Иначе
			ИмяПКО = Неопределено;
			ТипЗначенияСвойства = Неопределено;
		КонецЕсли;
		
		Возврат ИмяПКО;
	Иначе
		ТипЗначенияСвойства = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Функция ПрефиксПользовательскойКИ()
	Возврат "ПользовательскаяКИ";
КонецФункции
Процедура ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено Или Не ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		
		Если ЗначениеЗаполнено(ПолученныеДанные.НаименованиеБанка) Тогда
		
			ШаблонНаименования = НСтр("ru = '%1 в %2 (%3)'");
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонНаименования,
				Прав(СокрЛП(ПолученныеДанные.НомерСчета), 4),
				Строка(ПолученныеДанные.НаименованиеБанка),
				Строка(ПолученныеДанные.ВалютаДенежныхСредств));
			
		Иначе
		
			ШаблонНаименования = НСтр("ru = '%1 (%2)'");
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонНаименования,
				СокрЛП(ПолученныеДанные.НомерСчета),
				Строка(ПолученныеДанные.ВалютаДенежныхСредств));
		
		КонецЕсли; 
		
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		ПолученныеДанные.Наименование = СтрокаНаименования;		
	Иначе
		ПолученныеДанные.Наименование = ДанныеИБ.Наименование;
	КонецЕсли;
КонецПроцедуры
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	КэшИспользуемыхСвойствФормата = КомпонентыОбмена.ПараметрыКонвертации.КэшИспользуемыхСвойствФормата;
	
	Если КэшИспользуемыхСвойствФормата = Неопределено Тогда
		КэшИспользуемыхСвойствФормата = Новый Соответствие;
	КонецЕсли;
	
	Результат = КэшИспользуемыхСвойствФормата.Получить(ИмяСвойства);
	
	Если Результат = Неопределено Тогда
		
		Результат = Ложь;
	
		ПространствоИмен = КомпонентыОбмена.XMLСхема;
		Если ФабрикаXDTO.Тип(ПространствоИмен, ИмяСвойства) <> Неопределено Тогда
			Результат = Истина;
		Иначе
			
			ЭлементыФабрики = СтрРазделить(ИмяСвойства, "./\", Ложь);
			Если ЭлементыФабрики.Количество() > 1 Тогда
				
				// Тип объекта является общим свойством.
				ИмяОбъекта = ЭлементыФабрики[0];
				ТипЭлементаФабрики = ФабрикаXDTO.Тип(ПространствоИмен, ИмяОбъекта);
				ИндексИнициализации = 1;
				
				Если ТипЭлементаФабрики = Неопределено Тогда
					// Тип объекта является справочником, документом и т.д.
					ИмяОбъекта = ЭлементыФабрики[0] + "." + ЭлементыФабрики[1];
					ТипЭлементаФабрики = ФабрикаXDTO.Тип(ПространствоИмен, ИмяОбъекта);
					ИндексИнициализации = 2;
				КонецЕсли;
				
				Если ТипЭлементаФабрики <> Неопределено Тогда
					
					Для Индекс = ИндексИнициализации По ЭлементыФабрики.ВГраница() Цикл
						ИмяЭлементаФабрики = ЭлементыФабрики[Индекс];
						Если ТипЗнч(ТипЭлементаФабрики) = Тип("СвойствоXDTO") Тогда
							ТипЭлементаФабрики = ТипЭлементаФабрики.Тип.Свойства.Получить(ИмяЭлементаФабрики);
						Иначе
							ТипЭлементаФабрики = ТипЭлементаФабрики.Свойства.Получить(ИмяЭлементаФабрики);
						КонецЕсли;
						Если ТипЭлементаФабрики = Неопределено Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Результат = ТипЭлементаФабрики <> Неопределено;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	КэшИспользуемыхСвойствФормата.Вставить(ИмяСвойства, Результат);
	
	Возврат Результат;
КонецФункции
Функция СсылкаПоДаннымXDTO(КомпонентыОбмена, ДанныеXDTO, ИмяПКО)
	// Проверяет существование ссылки на объект в базе-приемнике
	// по структуре загружаемых данных объекта XDTO,
	// и возвращает ее, если она была найдена, или Неопределено, если нет.
	
	РежимЗагрузкиДанных = КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу;
	КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу = Ложь;
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
	ПроверяемаяСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации, "ПолучитьСсылку").Ссылка;
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(ПроверяемаяСсылка);
	КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу = РежимЗагрузкиДанных;
	
	Возврат ?(СсылкаСуществует, ПроверяемаяСсылка, Неопределено);
КонецФункции
Функция ТипПодразделенияОтделение()
	Возврат "Отделение";
КонецФункции
Функция ТипПодразделенияПодразделение()
	Возврат "Подразделение";
КонецФункции
Процедура ЭлементСтруктурыXDTOВДопСвойстваОбъекта(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO, ОписаниеЭлемента)
	// Конвертирует элемент структуры ДанныеXDTO в элемент коллекции объекта ПолученныеДанные.
	// Вызывается из обработчика При конвертации данных XDTO.
	//
	// Параметры:
	//  КомпонентыОбмена - Структура - компоненты обмена.
	//  ПолученныеДанные - ЛюбойОбъект - объект, у которого заполняются ДополнительныеСвойства.
	//  ДанныеXDTO       - Структура - сами ДанныеXDTO или Ключевые свойства Данных XDTO.
	//  ОписаниеЭлемента - Структура - описание элемента, для преобразования в объект конфигурации.
	//                                 Свойства структуры:
	//                                   * ИмяСвойства     - Строка - имя свойства объекта конфигурации. 
	//                                   * ИмяСвойстваXDTO - Строка - имя свойства объекта ДанныеXDTO.
	//                                                       Если ИмяСвойства не отличается от ИмяСвойстваXDTO - можно не указывать. 
	//                                   * ИмяПКО          - Строка - имя правила конвертации объекта.
	//                                                       Заполнять этот параметр нужно в том случае,
	//                                                       если свойство не указано в Правилах конвертации свойств
	//                                                       но его нужно конвертировать по правилу.
	
	ИмяСвойства     = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента, "ИмяСвойства");
	ИмяСвойстваXDTO = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента, "ИмяСвойстваXDTO", ИмяСвойства);
	ИмяПКО          = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеЭлемента, "ИмяПКО", "");
	
	ЗначениеСвойстваXDTO = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеXDTO, ИмяСвойстваXDTO);
	Если ЗначениеЗаполнено(ЗначениеСвойстваXDTO) Тогда
		Если ПустаяСтрока(ИмяПКО) Тогда
			ЗначениеДопСвойства = ЗначениеСвойстваXDTO;
		Иначе
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			ЗначениеДопСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ЗначениеСвойстваXDTO, ПКО, "ПолучитьСсылку").Ссылка;
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеДопСвойства);
	КонецЕсли;
КонецПроцедуры
Функция ЭтоВыгрузкаКлючевыхСвойств(СтекВыгрузки)
	// Выгрузка только ключевых свойств выполняется в том случае,
	// если объект выгружается как свойство  другого объекта. 
	// Соответственно, в стеке кроме этого объекта будут находится и родительский объект.
	Возврат СтекВыгрузки.Количество() > 1;
КонецФункции
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("УпаковкаДляВыгрузки");
	ПараметрыКонвертации.Вставить("КэшИспользованияДопРеквизитовИСведений");
	ПараметрыКонвертации.Вставить("КэшРеквизитовОбъектов");
	ПараметрыКонвертации.Вставить("КэшИспользуемыхСвойствФормата");
	ПараметрыКонвертации.Вставить("ОтключитьСписаниеПриОтпускеВОтделениеБезСкладУчета");
	ПараметрыКонвертации.Вставить("КэшУпаковок");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтпускТоваровВОтделение_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтпускТоваровВОтделение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаТоваровВОтделении_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаТоваровВОтделении_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеНедостачТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеНедостачТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеНедостачТоваровВОтделении_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеНедостачТоваровВОтделении_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыДокументовФизическихЛиц_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыДокументовФизическихЛиц_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Подразделения_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Подразделения_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЭквайринговыеТерминалы_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ЭквайринговыеТерминалы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнПотребление_ВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнПотребление_ВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнПотреблениеВОтд_ВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратИзОтделения_Перемещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратИзОтделения_Перемещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Изготовление_ВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Изготовление_ВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Изготовление_ВыпускПродукции_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваровВОтделении_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваровВОтделении_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтпускВОтделение_ВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтпускВОтделение_ВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтпускВОтделение_Перемещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтпускВОтделение_Перемещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДРСчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПДРСчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДРЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПДРЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеМеждуОтделениями_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеМеждуОтделениями_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОтдВОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОтдВОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОтдВСписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОтдВСписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОтдВСписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_ПТиУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_ПТиУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПотреблениеПоНазначениямВрачей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПотреблениеПоНазначениямВрачей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПТУСчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПТУСчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПТУЧерезПодотчетноеЛицо_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостачВОтделении_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеНедостачВОтделении_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровВОтделении_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровВОтделении_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Отделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Отделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Отделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Отделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Отделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Отделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Банки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Банки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Валюты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КассыККМ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КассыККМ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КассыККМ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Отделения_Подразделения" Тогда 
		ОтложеннаяОбработка_Отделения_Подразделения(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

