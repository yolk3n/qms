
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Определяет список планов обмена, которые используют функционал подсистемы обмена данными.
//
Процедура ПолучитьПланыОбмена(ПланыОбменаПодсистемы) Экспорт
	
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменБАБГУ2);
	
	// Обмен через универсальный формат
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат);
	
	// Распределенный обмен данными
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.Полный);
	
КонецПроцедуры

// Определяет список планов обмена, которые используют детализацию обмена.
//
Функция ПланыОбменаИспользующиеДетализациюОбмена() Экспорт
	
	ПланыОбменаСДетализацией = Новый Массив;
	ПланыОбменаСДетализацией.Добавить(Метаданные.ПланыОбмена.ОбменБАБГУ2);
	
	Возврат ПланыОбменаСДетализацией;
	
КонецФункции

// Определяет список планов обмена, которые используют шаблоны сводных проводок.
//
Функция ПланыОбменаСНастройкамиПроводок() Экспорт
	
	ПланыОбменаСПроводками = Новый Массив;
	ПланыОбменаСПроводками.Добавить(Метаданные.ПланыОбмена.ОбменБАБГУ2);
	
	Возврат ПланыОбменаСПроводками;
	
КонецФункции

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат "БольничнаяАптека";
	
КонецФункции

// Возвращает бухгалтерскую аналитику 
//
Функция ПолучитьСчетаУчетаОперацийБГУ(Организация, ИсточникФинансирования, ДатаСреза) Экспорт
	
	СчетаУчета = Новый Структура;
	Поля = "";
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.СчетаУчетаОперацийБГУ.Ресурсы Цикл
		СчетаУчета.Вставить(Ресурс.Имя);
		Поля = Поля + "," + Ресурс.Имя + " КАК " + Ресурс.Имя;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Приоритет
	|	%1
	|ИЗ
	|	РегистрСведений.СчетаУчетаОперацийБГУ.СрезПоследних(&ДатаСреза, Организация = &Организация И ИсточникФинансирования = &ИсточникФинансирования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет
	|	%1
	|ИЗ
	|	РегистрСведений.СчетаУчетаОперацийБГУ.СрезПоследних(&ДатаСреза, Организация = &Организация И ИсточникФинансирования = &ПустойИсточникФинансирования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Приоритет
	|	%1
	|ИЗ
	|	РегистрСведений.СчетаУчетаОперацийБГУ.СрезПоследних(&ДатаСреза, Организация = &ПустаяОрганизация И ИсточникФинансирования = &ИсточникФинансирования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4 КАК Приоритет
	|	%1
	|ИЗ
	|	РегистрСведений.СчетаУчетаОперацийБГУ.СрезПоследних(&ДатаСреза, Организация = &ПустаяОрганизация И ИсточникФинансирования = &ПустойИсточникФинансирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";
	
	Запрос = Новый Запрос(СтрШаблон(ТекстЗапроса, Поля));
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
	Запрос.УстановитьПараметр("ПустойИсточникФинансирования", Справочники.ИсточникиФинансирования.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СчетаУчета, Выборка);
	КонецЕсли;
	
	Возврат СчетаУчета;
	
КонецФункции

// Возвращает таблицу цен списания номенклатуры документа. Если в отчетный период документа
// нет проведенного расчета себестоимости товаров, вызывается исключение.
//
// Параметры:
//  Документ - ДокументОбъект.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками "НомерСтроки" и "Цена".
//
Функция ПолучитьЦеныНоменклатурыДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетСебестоимости.ПредварительныйРасчет  КАК ПредварительныйРасчет,
	|	ВЫБОР
	|		КОГДА Границы.Месяц ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                      КАК РасчетАктуален
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
	|		ПО
	|			Границы.Организация = РасчетСебестоимости.Организация
	|			И Границы.Месяц <= &КонецПериода
	|ГДЕ
	|	РасчетСебестоимости.Проведен
	|	И РасчетСебестоимости.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетСебестоимости.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетСебестоимости.Дата УБЫВ
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Документ.Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Документ.Дата));
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить цены по себестоимости для документа %Документ%: с %ПериодС% по %ПериодПо% не произведен расчет себестоимости.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Документ.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодС%", Формат(НачалоМесяца(Документ.Дата),"ДЛФ=DD"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодПо%", Формат(КонецМесяца(Документ.Дата),"ДЛФ=DD"));
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не Выборка.РасчетАктуален Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить цены по себестоимости для документа %Документ%: расчет себестоимости не актуален.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Документ.Ссылка);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                    КАК НомерСтроки,
	|	Товары.Номенклатура                   КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА Товары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                 КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА Товары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                 КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьИсточникиФинансирования
	|			ТОГДА Товары.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ                                 КАК ИсточникФинансирования
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	#ТоварыДокумента КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                        КАК НомерСтроки,
	|	Товары.Номенклатура                       КАК Номенклатура,
	|	Товары.СерияНоменклатуры                  КАК Серия,
	|	Товары.Партия                             КАК Партия,
	|	Товары.ИсточникФинансирования             КАК ИсточникФинансирования,
	|	АналитикаВидаУчета.КлючАналитики          КАК АналитикаВидаУчета,
	|	АналитикаУчетаНоменклатуры.КлючАналитики  КАК АналитикаУчетаНоменклатуры,
	|	&РазделУчета                              КАК РазделУчета
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТоварыДокумента КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|	ПО
	|		АналитикаВидаУчета.Организация = &Организация
	|		И АналитикаВидаУчета.Склад = &Склад
	|		И Товары.ИсточникФинансирования = АналитикаВидаУчета.ИсточникФинансирования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|	ПО
	|		Товары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|		И Товары.СерияНоменклатуры = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|		И Товары.Партия = АналитикаУчетаНоменклатуры.Партия
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Если Выборка.ПредварительныйРасчет Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Цены.АналитикаВидаУчета          КАК АналитикаВидаУчета,
		|	Цены.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
		|	Цены.РазделУчета                 КАК РазделУчета,
		|	Цены.СтоимостьРегл               КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.СтоимостьТоваров.СрезПоследних(
		|		&ДатаЦены,
		|		(АналитикаВидаУчета, АналитикаУчетаНоменклатуры, РазделУчета)
		|		В (ВЫБРАТЬ
		|			Отбор.АналитикаВидаУчета, Отбор.АналитикаУчетаНоменклатуры, Отбор.РазделУчета
		|		ИЗ
		|			ТаблицаТовары КАК Отбор)) КАК Цены
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	СебестоимостьТоваров.АналитикаВидаУчета          КАК АналитикаВидаУчета,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.РазделУчета                 КАК РазделУчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СУММА(СебестоимостьТоваров.Количество), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК ЧИСЛО(23, 10)) / СУММА(СебестоимостьТоваров.Количество)
		|	КОНЕЦ                                            КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
		|ГДЕ
		|	СебестоимостьТоваров.Активность
		|	И СебестоимостьТоваров.ДокументДвижения = &Ссылка
		|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваров.АналитикаВидаУчета,
		|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
		|	СебестоимостьТоваров.РазделУчета
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|	ПО
	|		Товары.АналитикаВидаУчета = ЦеныНоменклатуры.АналитикаВидаУчета
	|		И Товары.АналитикаУчетаНоменклатуры = ЦеныНоменклатуры.АналитикаУчетаНоменклатуры
	|		И Товары.РазделУчета = ЦеныНоменклатуры.РазделУчета
	|";
	
	МетаданныеДокумента = Документ.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТоварыДокумента", МетаданныеДокумента.ПолноеИмя() + ".Товары");
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтатусУказанияСерийОтправитель", МетаданныеДокумента.ТабличныеЧасти.Товары) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.СтатусУказанияСерий", "Товары.СтатусУказанияСерийОтправитель");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.СтатусУказанияПартий", "Товары.СтатусУказанияПартийОтправитель");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеДокумента) Тогда
		Склад = Документ.СкладОтправитель;
	Иначе
		Склад = Документ.Склад;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.УстановитьПараметр("ДатаЦены", Документ.Дата);
	Запрос.УстановитьПараметр("ИспользоватьИсточникиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада") = Перечисления.ТипыСкладов.Отделение Тогда
		Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях);
	Иначе
		Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах);
	КонецЕсли;
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Производит регистрацию объектов для начальной выгрузки
// с помощью оптимизированного алгоритма.
//
Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Знач Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	ТипПолучателя = ТипЗнч(Получатель);
	Если ТипПолучателя = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		РегистрацияИзмененияДляНачальнойВыгрузкиСинхронизацияДанныхЧерезУниверсальныйФормат(Получатель, СтандартнаяОбработка, Отбор);
	ИначеЕсли ТипПолучателя = Тип("ПланОбменаСсылка.ОбменБАБГУ2") Тогда
		РегистрацияИзмененияДляНачальнойВыгрузкиБухгалтерияГосударственногоУчреждения20(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
КонецПроцедуры

// Фильтрует получателей объекта по наличию расчета себестоимости.
//
// Параметры:
//  ДатаДокумента     - Дата - дата, на которую проверяется наличие расчета себестоимости.
//  Организация       - СправочникСсылка.Организации,
//                      Массив(СправочникСсылка.Организации) - организация по которой происходил расчет себестоимости.
//  Получатели        - ПланОбменаСсылка - исходные получатели выгружаемого объекта, необходимые для регистрации документов,
//                      которые зависят от расчета себестоимости. В следствии использования нестандартного механизма регистрации - очищаются.
//  БезОтбораПоРежиму - Булево - если Истина, тогда выбираются все узлы, без учета режима выгрузки движений номенклатуры.
//                      Используется для документов, в которых сумма оприходования
//                      получается по стоимости списания. Например документы "Перемещение товаров", "Пересортица товаров".
//                      Если Ложь - выбираются только те узлы, в которых режим выгрузки движений номенклатуры не равен "Номенклатура - количество".
//
Процедура СократитьПолучателейПоРасчетуСебестоимости(Получатели, ДатаДокумента, Организация, БезОтбораПоРежиму = Ложь) Экспорт
	
	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если БезОтбораПоРежиму Тогда
		
		ПолучателиДляАнализа = Получатели;
		
	Иначе
		
		Запрос = Новый Запрос;
		
		УзлыПоПланамОбмена = ОбщегоНазначенияБольничнаяАптека.РазложитьМассивСсылокПоТипам(Получатели);
		
		ОбъединениеЗапросов = "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	#ПланОбмена КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.Ссылка В(&Получатели)
		|	И ПланОбмена.РежимВыгрузкиДвиженийНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиДвиженийНоменклатуры.НоменклатураКоличество)
		|";
		
		ТекстЗапроса = "";
		Для Каждого ПланОбмена Из УзлыПоПланамОбмена Цикл
			
			ТекстЗапросаПланаОбмена = СтрЗаменить(ШаблонЗапроса, "#ПланОбмена", ПланОбмена.Ключ);
			
			ПараметрПолучатели = "Получатели" + СтрЗаменить(ПланОбмена.Ключ, ".", "");
			ТекстЗапросаПланаОбмена = СтрЗаменить(ТекстЗапросаПланаОбмена, "&Получатели", "&" + ПараметрПолучатели);
			Запрос.УстановитьПараметр(ПараметрПолучатели, ПланОбмена.Значение);
			
			ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(ТекстЗапроса), ОбъединениеЗапросов, "") + ТекстЗапросаПланаОбмена;
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		ПолучателиДляАнализа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
		
	КонецЕсли;
	
	Если ПолучателиДляАнализа.Количество() <> 0 Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетСебестоимости.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
		|		ПО
		|			Границы.Организация = РасчетСебестоимости.Организация
		|			И Границы.Месяц <= &КонецПериода
		|ГДЕ
		|	РасчетСебестоимости.Проведен
		|	И РасчетСебестоимости.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетСебестоимости.Организация = &Организация
		|	И Границы.Месяц ЕСТЬ NULL
		|");
		
		Запрос.УстановитьПараметр("Организация"  , Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаДокумента));
		Запрос.УстановитьПараметр("КонецПериода" , КонецМесяца(ДатаДокумента));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Получатели = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Получатели, ПолучателиДляАнализа);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует изменения объектов, зависящих от изменения расчета себестоимости товаров.
//
// Параметры:
//  Получатели - ПланОбменаСсылка - получатели документа Расчет себестоимости товаров,
//                                  используемые для отбора получателей зависимых объектов.
//  Выгрузка   - Булево - (только чтение) параметр определяет контекст выполнения правила регистрации.
//  Объект     - ДокументОбъект.РасчетСебестоимостиТоваров - изменяемый объект, приводящий
//                                                           к регистрации изменений расходных документов.
//
Процедура ЗарегистрироватьДанныеОбменаПоРасчетуСебестоимости(Получатели, Объект, Выгрузка) Экспорт
	
	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ДополнитьЗапросДанныеПолучателей(Запрос, Получатели);
	ДополнитьЗапросПолучателиРасчетаСебестоимости(Запрос);
	
	Если Не Выгрузка Тогда
		
		ДополнитьЗапросЗависимыеОбъектыКРегистрации(Запрос, Объект);
		
		ДанныеРегистрацииОбъектов = Запрос.ВыполнитьПакет();
		
		ДанныеЗависимыхОбъектов = ДанныеРегистрацииОбъектов[2];
		Если Не ДанныеЗависимыхОбъектов.Пустой() Тогда
			
			ОбъектРегистрации = Неопределено;
			ПолучателиОбъектов = Новый Массив;
			Выборка = ДанныеЗависимыхОбъектов.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ОбъектРегистрации <> Выборка.Ссылка Тогда
					Если ОбъектРегистрации <> Неопределено Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(ПолучателиОбъектов, ОбъектРегистрации);
						ПолучателиОбъектов.Очистить();
					КонецЕсли;
					ОбъектРегистрации = Выборка.Ссылка;
				КонецЕсли;
				
				ПолучателиОбъектов.Добавить(Выборка.Получатель);
				
			КонецЦикла;
			
			Если ОбъектРегистрации <> Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(ПолучателиОбъектов, ОбъектРегистрации);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ДанныеРегистрацииОбъектов = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Получатели.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, ДанныеРегистрацииОбъектов[1].Выгрузить().ВыгрузитьКолонку("Получатель"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс обмена данными через универсальный формат
#Область ОбменДаннымиЧерезУниверсальныйФормат

// Получает доступные для использования версии универсального формата EnterpriseData.
// (см. процедуру ОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(ВерсииФормата))
//
// Параметры:
//   ВерсииФормата - Соответствие - Соответствие номера версии формата,
//                   общему модулю, в котором находятся обработчики выгрузки/загрузки для данной версии.
//
// Пример тела процедуры:
//   ВерсииФормата.Вставить("1.0.beta", <ИмяОбщегоМодуляСПравиламиКонвертации>);
//
Процедура ПриПолученииДоступныхВерсийФормата(ВерсииФормата) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВерсииФормата, ПоддерживаемыеВерсииФорматаОбмена(), Истина);
	
КонецПроцедуры

// Функция возвращает имя используемого формата в виде строки.
//
Функция ПространствоИменУниверсальногоФорматаОбмена() Экспорт
	
	Возврат "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
КонецФункции

// Возвращает существующие в конфигурации версии универсального формата EnterpriseData.
//
// Возвращаемое значение:
//  ВерсииФормата - Массив имен версий формата обмена.
//
Функция ВерсииФорматаОбмена() Экспорт
	
	ВерсииФормата = Новый Массив;
	
	Для Каждого Пакет Из ФабрикаXDTO.Пакеты Цикл
		
		ФорматОбмена = Пакет.URIПространстваИмен;
		Если СтрНачинаетсяС(ФорматОбмена, ПространствоИменУниверсальногоФорматаОбмена()) Тогда
			
			Позиция = СтрНайти(ФорматОбмена, "/", НаправлениеПоиска.СКонца);
			Если Позиция <> 0 Тогда
				
				ВерсияФормата = Сред(ФорматОбмена, Позиция + 1);
				
				Счетчик = ВерсииФормата.Количество();
				Пока Счетчик >= 0 Цикл
					Счетчик = Счетчик - 1;
					Если Счетчик = -1 Или ВерсииФормата[Счетчик] < ВерсияФормата Тогда
						ВерсииФормата.Вставить(Счетчик + 1, ВерсияФормата);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВерсииФормата;
	
КонецФункции

// Возвращает доступные для использования версии универсального формата EnterpriseData,
// включая подключенные внешние обработки.
//
// Параметры:
//  ПланОбмена - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор плана обмена,
//               который использует механизм обмена через универсальный формат.
//
// Возвращаемое значение:
//  ВерсииФормата - Соответствие - версии формата EnterpriseData менеджеру обмена через универсальный формат.
//
Функция МенеджерыВерсийФорматаОбмена(ПланОбмена) Экспорт
	
	ВерсииФормата = ПоддерживаемыеВерсииФорматаОбмена();
	
	ВнешниеВерсииФормата = РегистрыСведений.МенеджерыВерсийУниверсальногоФормата.МенеджерыВерсийФормата(ПланОбмена);
	Если ВнешниеВерсииФормата <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВерсииФормата, ВнешниеВерсииФормата, Истина);
	КонецЕсли;
	
	Возврат ВерсииФормата;
	
КонецФункции

// Возвращает поддерживаемые конфигурацией версии универсального формата EnterpriseData.
//
// Возвращаемое значение:
//  ВерсииФормата - Соответствие - версии формата EnterpriseData менеджеру обмена через универсальный формат.
//
Функция ПоддерживаемыеВерсииФорматаОбмена() Экспорт
	
	ВерсииФормата = Новый Соответствие;
	ВерсииФормата.Вставить("1.2", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.3", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.4", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.5", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.6", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.7", МенеджерОбменаЧерезУниверсальныйФормат);
	
	Возврат ВерсииФормата;
	
КонецФункции

#Область ФормированиеТекстаЗапросаТаблицыТоваров

// Возвращает текст запроса, в котором описан алгоритм перерасчета Количества и Цены
// из ЕдиницаИзмеренияВДокументе в ЕдиницаИзмерения, указанные во входящем тексте запроса.
// Функционально можно расширить получение показателей по виду цены.
//
// Параметры:
//  ТекстЗапроса              - Строка - текст запроса, с временной таблицей Товары,
//                              в которой должны быть описаны поля: Номенклатура, ЕдиницаИзмерения.
//  ПараметрыРасширенияДанных - Структура, Неопределено - параметры, которые расширяют алгоритм получения данных.
//
// Возвращаемое значение - Строка - текст запроса, содержащий три таблицы.
//
Функция ТекстЗапросаТаблицыТоваров(Знач ТекстЗапроса, ПараметрыРасширенияДанных = Неопределено) Экспорт
	
	СхемаРасширенияДанных = СхемаРасширенияДанных(ТекстЗапроса, ПараметрыРасширенияДанных);
	СхемаРасчетаПоЕдинице = СхемаРасчетаПоЕдинице(СхемаРасширенияДанных);
	СхемаРезультат        = СхемаРезультат(СхемаРасчетаПоЕдинице.ПолучитьТекстЗапроса(), ПараметрыРасширенияДанных);
	
	Возврат СхемаРезультат.ПолучитьТекстЗапроса();
	
КонецФункции

Функция СхемаРасширенияДанных(ТекстЗапроса, ПараметрыРасширенияДанных)
	
	Схема = Новый СхемаЗапроса;
	
	Если ПараметрыРасширенияДанных = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
		|ВЫБРАТЬ
		|	Товары.*
		|ПОМЕСТИТЬ КонвертированныеТовары
		|ИЗ
		|	Товары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыПолучаемыхЕдиниц
		|		ПО
		|			Товары.Номенклатура = КоэффициентыПолучаемыхЕдиниц.Номенклатура
		|			И Товары.ЕдиницаИзмерения = КоэффициентыПолучаемыхЕдиниц.ЕдиницаИзмерения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницДокумента
		|		ПО
		|			Товары.Номенклатура = КоэффициентыЕдиницДокумента.Номенклатура
		|			И Товары.ЕдиницаИзмеренияВДокументе = КоэффициентыЕдиницДокумента.ЕдиницаИзмерения
		|";
		
		Схема.УстановитьТекстЗапроса(ТекстЗапроса);
		
	ИначеЕсли ПараметрыРасширенияДанных.Свойство("ЦенаПоВидуЦены")
		  Или ПараметрыРасширенияДанных.Свойство("СуммаПоВидуЦены") Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
		|ВЫБРАТЬ
		|	Товары.*,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	* ВЫБОР
		|		КОГДА Товары.ЕдиницаИзмерения <> ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, Товары.ЕдиницаИзмерения)
		|			ТОГДА КоэффициентыПолучаемыхЕдиниц.Коэффициент / ЕСТЬNULL(КоэффициентыУпаковокХраненияЦены.Коэффициент, 1)
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|	* ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыХраненияЦены.Кратность, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыХраненияЦены.Курс, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) > 0
		|					ТОГДА 
		|						(КурсыВалютыХраненияЦены.Курс * КурсыВалютыДокумента.Кратность)
		|						/ (КурсыВалютыДокумента.Курс * КурсыВалютыХраненияЦены.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ  КАК ЦенаПоВидуЦены,
		|	Товары.Количество
		|	/ КоэффициентыПолучаемыхЕдиниц.Коэффициент
		|	* ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	* ВЫБОР
		|		КОГДА Товары.ЕдиницаИзмерения <> ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, Товары.ЕдиницаИзмерения)
		|			ТОГДА КоэффициентыПолучаемыхЕдиниц.Коэффициент / ЕСТЬNULL(КоэффициентыУпаковокХраненияЦены.Коэффициент, 1)
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|	* ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыХраненияЦены.Кратность, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыХраненияЦены.Курс, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) > 0
		|					ТОГДА 
		|						(КурсыВалютыХраненияЦены.Курс * КурсыВалютыДокумента.Кратность)
		|						/ (КурсыВалютыДокумента.Курс * КурсыВалютыХраненияЦены.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ  КАК СуммаПоВидуЦены
		|
		|ПОМЕСТИТЬ КонвертированныеТовары
		|ИЗ
		|	Товары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыПолучаемыхЕдиниц
		|		ПО
		|			Товары.Номенклатура = КоэффициентыПолучаемыхЕдиниц.Номенклатура
		|			И Товары.ЕдиницаИзмерения = КоэффициентыПолучаемыхЕдиниц.ЕдиницаИзмерения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницДокумента
		|		ПО
		|			Товары.Номенклатура = КоэффициентыЕдиницДокумента.Номенклатура
		|			И Товары.ЕдиницаИзмеренияВДокументе = КоэффициентыЕдиницДокумента.ЕдиницаИзмерения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				(Номенклатура, СерияНоменклатуры, Партия) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, СерияНоменклатуры, Партия ИЗ Товары)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ
		|					РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыУпаковокХраненияЦены
		|				ПО
		|					ЦеныНоменклатуры.Номенклатура = КоэффициентыУпаковокХраненияЦены.Номенклатура
		|					И ЦеныНоменклатуры.Упаковка = КоэффициентыУпаковокХраненияЦены.ЕдиницаИзмерения
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ
		|					РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыХраненияЦены
		|				ПО
		|					ЦеныНоменклатуры.Валюта = КурсыВалютыХраненияЦены.Валюта
		|		ПО
		|			Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И Товары.СерияНоменклатуры = ЦеныНоменклатуры.СерияНоменклатуры
		|			И Товары.Партия = ЦеныНоменклатуры.Партия
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютыДокумента
		|		ПО
		|			ИСТИНА
		|";
		
		Схема.УстановитьТекстЗапроса(ТекстЗапроса);
		ПакетЗапросов = Схема.ПакетЗапросов;
		ЗапросОбъект = ПакетЗапросов.Получить(ПакетЗапросов.Количество() - 1);
		
		КолонкиЗапроса = ЗапросОбъект.Колонки;
		Если Не ПараметрыРасширенияДанных.Свойство("СуммаПоВидуЦены") Тогда
			
			Колонка = КолонкиЗапроса.Найти("СуммаПоВидуЦены");
			ЗапросОбъект.Колонки.Удалить(КолонкиЗапроса.Индекс(Колонка));
			
		КонецЕсли;
		
		Если Не ПараметрыРасширенияДанных.Свойство("ЦенаПоВидуЦены") Тогда
			
			Колонка = КолонкиЗапроса.Найти("ЦенаПоВидуЦены");
			ЗапросОбъект.Колонки.Удалить(КолонкиЗапроса.Индекс(Колонка));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Схема;
	
КонецФункции

Функция СхемаРасчетаПоЕдинице(Схема)
	
	ПакетЗапросов = Схема.ПакетЗапросов;
	ЗапросОбъект = ПакетЗапросов.Получить(ПакетЗапросов.Количество() - 1);
	Оператор = ЗапросОбъект.Операторы[0];
	
	КолонкиЗапроса = ЗапросОбъект.Колонки;
	Для Каждого Колонка Из КолонкиЗапроса Цикл
		
		ИндексКолонки = КолонкиЗапроса.Индекс(Колонка);
		
		Если Колонка.Псевдоним = "Количество" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("
				|Товары.Количество / КоэффициентыПолучаемыхЕдиниц.Коэффициент
				|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "Цена" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("
				|Товары.Цена
				|* ВЫБОР
				|	КОГДА Товары.ЕдиницаИзмеренияВДокументе <> Товары.ЕдиницаИзмерения
				|		ТОГДА КоэффициентыПолучаемыхЕдиниц.Коэффициент / КоэффициентыЕдиницДокумента.Коэффициент
				|	ИНАЧЕ 1
				|КОНЕЦ
				|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление текста запроса получения данных об упаковках.
	Если КолонкиЗапроса.Найти("Упаковка") <> Неопределено Тогда
		
		Если КолонкиЗапроса.Найти("Количество") <> Неопределено
		 Или КолонкиЗапроса.Найти("Цена") <> Неопределено Тогда
			Источник = Оператор.Источники.Добавить("РегистрСведений.ЕдиницыИзмеренияНоменклатуры", "КоэффициентыПолучаемыхУпаковок");
			Источник.Соединения.Очистить();
			ГлавнаяТаблица = Оператор.Источники.НайтиПоПсевдониму("Товары");
			ГлавнаяТаблица.Соединения.Добавить(Источник, "Товары.Номенклатура = КоэффициентыПолучаемыхУпаковок.Номенклатура И Товары.Упаковка = КоэффициентыПолучаемыхУпаковок.ЕдиницаИзмерения");
		КонецЕсли;
		
		Если КолонкиЗапроса.Найти("Количество") <> Неопределено Тогда
			ИндексНовойКолонки = Оператор.ВыбираемыеПоля.Количество();
			Оператор.ВыбираемыеПоля.Добавить("
			|Товары.Количество / КоэффициентыПолучаемыхУпаковок.Коэффициент
			|", ИндексНовойКолонки);
			КолонкиЗапроса[ИндексНовойКолонки].Псевдоним = "КоличествоУпаковок";
		КонецЕсли;
		
		Если КолонкиЗапроса.Найти("Цена") <> Неопределено Тогда
			ИндексНовойКолонки = Оператор.ВыбираемыеПоля.Количество();
			Оператор.ВыбираемыеПоля.Добавить("
			|Товары.Цена
			|* ВЫБОР
			|	КОГДА Товары.ЕдиницаИзмеренияВДокументе <> Товары.Упаковка
			|		ТОГДА КоэффициентыПолучаемыхУпаковок.Коэффициент / КоэффициентыЕдиницДокумента.Коэффициент
			|	ИНАЧЕ 1
			|КОНЕЦ
			|", ИндексНовойКолонки);
			КолонкиЗапроса[ИндексНовойКолонки].Псевдоним = "ЦенаЗаУпаковку";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Схема;
	
КонецФункции

Функция СхемаРезультат(ТекстЗапроса, ПараметрыРасширенияДанных)
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	КонвертированныеТовары КАК Товары
	|";
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	ПакетЗапросов = Схема.ПакетЗапросов;
	ЗапросОбъект = ПакетЗапросов.Получить(ПакетЗапросов.Количество() - 1);
	Оператор = ЗапросОбъект.Операторы[0];
	
	КолонкиЗапроса = ЗапросОбъект.Колонки;
	Для Каждого Колонка Из КолонкиЗапроса Цикл
		
		ИндексКолонки = КолонкиЗапроса.Индекс(Колонка);
		
		Если Колонка.Псевдоним = "НомерСтроки" Тогда
			
			Колонка.Псевдоним = "НомерСтрокиДокумента";
			
		ИначеЕсли Колонка.Псевдоним = "СерияНоменклатуры" Тогда
			
			Колонка.Псевдоним = "Серия";
			
		ИначеЕсли Колонка.Псевдоним = "Количество" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("
			|ВЫБОР
			|	КОГДА Товары.Количество > 0 И Товары.Количество <= 0.001
			|		ТОГДА 0.001
			|	ИНАЧЕ ВЫРАЗИТЬ(Товары.Количество КАК Число(15,3))
			|КОНЕЦ
			|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "Цена" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("
			|ВЫБОР
			|	КОГДА Товары.Цена > 0 И Товары.Цена <= 0.01
			|		ТОГДА 0.01
			|	ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена КАК Число(15,2))
			|КОНЕЦ
			|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "КоличествоУпаковок" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("
			|ВЫБОР
			|	КОГДА Товары.КоличествоУпаковок > 0 И Товары.КоличествоУпаковок <= 0.001
			|		ТОГДА 0.001
			|	ИНАЧЕ ВЫРАЗИТЬ(Товары.КоличествоУпаковок КАК Число(15,3))
			|КОНЕЦ
			|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "ЦенаЗаУпаковку" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("
			|ВЫБОР
			|	КОГДА Товары.ЦенаЗаУпаковку > 0 И Товары.ЦенаЗаУпаковку <= 0.01
			|		ТОГДА 0.01
			|	ИНАЧЕ ВЫРАЗИТЬ(Товары.ЦенаЗаУпаковку КАК Число(15,2))
			|КОНЕЦ
			|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "Сумма" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("ВЫРАЗИТЬ(Товары.Сумма КАК Число(15,2))");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "СуммаНДС" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("ВЫРАЗИТЬ(Товары.СуммаНДС КАК Число(15,2))");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "СуммаСНДС" Тогда
			
			Выражение = Новый ВыражениеСхемыЗапроса("ВЫРАЗИТЬ(Товары.СуммаСНДС КАК Число(15,2))");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "ЦенаПоВидуЦены" Тогда
			
			ПсевдонимПоля = Неопределено;
			Если ПараметрыРасширенияДанных.Свойство(Колонка.Псевдоним, ПсевдонимПоля) Тогда
				Колонка.Псевдоним = ПсевдонимПоля;
			КонецЕсли;
			
			Выражение = Новый ВыражениеСхемыЗапроса("
			|ВЫБОР
			|	КОГДА Товары.ЦенаПоВидуЦены > 0 И Товары.ЦенаПоВидуЦены <= 0.01
			|		ТОГДА 0.01
			|	ИНАЧЕ ВЫРАЗИТЬ(Товары.ЦенаПоВидуЦены КАК Число(15,2))
			|КОНЕЦ
			|");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		ИначеЕсли Колонка.Псевдоним = "СуммаПоВидуЦены" Тогда
			
			ПсевдонимПоля = Неопределено;
			Если ПараметрыРасширенияДанных.Свойство(Колонка.Псевдоним, ПсевдонимПоля) Тогда
				Колонка.Псевдоним = ПсевдонимПоля;
			КонецЕсли;
			
			Выражение = Новый ВыражениеСхемыЗапроса("ВЫРАЗИТЬ(Товары.СуммаПоВидуЦены КАК Число(15,2))");
			Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Выражение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Схема;
	
КонецФункции

#КонецОбласти // ФормированиеТекстаЗапросаТаблицыТоваров

#Область ФормированиеТаблицыРаспределенияРасходовНаСебестоимостьТоваров

Функция ТаблицаРаспределенияРасходовНаСебестоимостьТоваров(ДанныеРаспределения) Экспорт
	
	// Инициализация таблицы распределения расходов.
	ТаблицаРаспределенияРасходов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРаспределенияРасходов.Колонки;
	Колонки.Добавить("Номенклатура"       , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	Колонки.Добавить("СтоимостьТоваров"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("Сумма"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("СуммаНДС"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("ДокументПоступления");
	
	// Формирование временной таблицы распределения на себестоимость.
	Запрос = Новый Запрос(ТекстЗапросаРасходыКРаспределениюНаСебестоимость());
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("Ссылка", ДанныеРаспределения.Ссылка);
	Запрос.Выполнить();
	
	Если Менеджер.Таблицы[0].ПолучитьДанные().Пустой() Тогда
		// Возврат пустой таблицы.
		Возврат ТаблицаРаспределенияРасходов;
	КонецЕсли;
	
	Если ДанныеРаспределения.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеРаспределения.Валюта, ДанныеРаспределения.Дата);
		КоэффициентПересчетаВВалютуРегл = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	Иначе
		КоэффициентПересчетаВВалютуРегл = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст = ТекстЗапросаАналитикаВидаУчета()
		+ ТекстЗапросаТаблицаСпособовРаспределения()
		+ ТекстЗапросаТаблицаДокументов()
		+ ТекстЗапросаТаблицаПоступленияТоваров()
		+ ТекстЗапросаТаблицаБазыРаспределения()
		+ ТекстЗапросаТаблицаРасходов();
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("Организация"                    , ДанныеРаспределения.Организация);
	Запрос.УстановитьПараметр("ДатаНачала"                     , НачалоМесяца(ДанныеРаспределения.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания"                  , КонецДня(ДанныеРаспределения.Дата));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПоследнийРезультат  = МассивРезультатов.ВГраница();
	
	РезультатЗапросаПоБазе = МассивРезультатов[ПоследнийРезультат - 1];
	ТаблицаРасходов = МассивРезультатов[ПоследнийРезультат].Выгрузить();
	
	СтруктураОтбора = Новый Структура("ИндексБазы");
	
	// Выборка строк базы распределения по индексу аналитики.
	ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		Если ВыборкаПоИндексу.База = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;
		
		// Получение массива расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборке базы распределения.
		// Данные затраты будут распределены по одинаковой базе распределения.
		МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		Если МассивРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого СтрокаРасходов Из МассивРасходов Цикл
		
			СуммаКРаспределению     = СтрокаРасходов.Сумма;
			СуммаНДСКРаспределению  = СтрокаРасходов.СуммаНДС;
			БазаВсего               = ВыборкаПоИндексу.База;
		
			// Выборка строк базы распределения по индексу базы распределения
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				Если БазаВсего <> 0 Тогда
					Сумма    = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СуммаНДС = Окр(СуммаНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
				Иначе
					Сумма    = 0;
					СуммаНДС = 0;
				КонецЕсли;
				
				СуммаКРаспределению    = СуммаКРаспределению - Сумма;
				СуммаНДСКРаспределению = СуммаНДСКРаспределению - СуммаНДС;
				БазаВсего              = БазаВсего - Выборка.База;
				
				НоваяСтрока = ТаблицаРаспределенияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Сумма    = Сумма;
				НоваяСтрока.СуммаНДС = СуммаНДС;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРаспределенияРасходов;
	
КонецФункции

Функция ТекстЗапросаРасходыКРаспределениюНаСебестоимость()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Расходы.НомерСтроки                                         КАК НомерСтроки,
	|	Расходы.СтатьяРасходов                                      КАК СтатьяРасходов,
	|	Расходы.АналитикаРасходов                                   КАК АналитикаРасходов,
	|	Расходы.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость  КАК ПравилоРаспределения,
	|	Расходы.Сумма                                               КАК Сумма,
	|	Расходы.СуммаНДС                                            КАК СуммаНДС
	|ПОМЕСТИТЬ ВтТаблицаРасходов
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Расходы КАК Расходы
	|ГДЕ
	|	Расходы.Ссылка = &Ссылка
	|	И Расходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАналитикаВидаУчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Организация    КАК Организация,
	|	Склад          КАК Склад,
	|	КлючАналитики  КАК КлючАналитики
	|ПОМЕСТИТЬ ВТОтборАналитикаВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета
	|ГДЕ
	|	Организация = &Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСпособовРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.ПравилоРаспределения  КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов     КАК АналитикаРасходов,
	|	ВЫБОР КОГДА
	|		ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ                                КАК АналитикаЗаполнена,
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаСпособовРаспределения
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ВЫБОР КОГДА
	|		ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументов()
	
	ТекстЗапроса = "
	|// Поступление товаров по конкретным документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка                   КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы  КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Поступления товаров по любым документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка                   КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы  КАК ИндексБазы
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаНоменклатуры.Номенклатура     КАК Номенклатура,
	|	АналитикаВида.Склад                    КАК Склад,
	|	УчетСебестоимости.Период               КАК Период,
	|	УчетСебестоимости.Регистратор          КАК ДокументПоступления,
	|	УчетСебестоимости.КоличествоПриход     КАК Количество,
	|	УчетСебестоимости.СтоимостьПриход      КАК Стоимость
	|
	|ПОМЕСТИТЬ ВтПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(,,
	|		Регистратор,
	|		РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах), ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях))
	|		И АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)
	|	) КАК УчетСебестоимости
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВТОтборАналитикаВидаУчета КАК АналитикаВида
	|		ПО
	|			УчетСебестоимости.АналитикаВидаУчета = АналитикаВида.КлючАналитики
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО
	|			УчетСебестоимости.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|
	|ГДЕ
	|	УчетСебестоимости.КоличествоПриход > 0
	|	И УчетСебестоимости.СтоимостьПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	ДокументПоступления
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы              КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура         КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления  КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество)    КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость)     КАК Стоимость
	|
	|ПОМЕСТИТЬ ТаблицаПоступленияТоваров
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			ВтПоступленияТоваров.ДокументПоступления = ТаблицаДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы   КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура         КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления  КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество)    КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость)     КАК Стоимость
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|		ПО
	|			ВтПоступленияТоваров.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (ВтПоступленияТоваров.Склад = ТаблицаСпособовРаспределения.АналитикаРасходов
	|				ИЛИ ВтПоступленияТоваров.Номенклатура = ТаблицаСпособовРаспределения.АналитикаРасходов
	|				ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексБазы
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаБазыРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы             КАК ИндексБазы,
	|	ТаблицаПоступленияТоваров.Номенклатура              КАК Номенклатура,
	|	ТаблицаПоступленияТоваров.ДокументПоступления       КАК ДокументПоступления,
	|	ТаблицаПоступленияТоваров.Количество                КАК Количество,
	|	ТаблицаПоступленияТоваров.Стоимость                 КАК СтоимостьТоваров,
	|	ВЫБОР КОГДА ТаблицаСпособовРаспределения.ПравилоРаспределения = ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству)
	|		ТОГДА
	|			ЕСТЬNULL(ТаблицаПоступленияТоваров.Количество, 0)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ТаблицаПоступленияТоваров.Стоимость, 0)
	|	КОНЕЦ                                               КАК База
	|ИЗ
	|	ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаПоступленияТоваров КАК ТаблицаПоступленияТоваров
	|		ПО
	|			ТаблицаСпособовРаспределения.ИндексБазы = ТаблицаПоступленияТоваров.ИндексБазы
	|ИТОГИ
	|	СУММА(База)
	|ПО
	|	ИндексБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы                  КАК ИндексБазы,
	|	ВЫРАЗИТЬ(СУММА(ТаблицаРасходы.Сумма)
	|		* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2))  КАК Сумма,
	|	ВЫРАЗИТЬ(СУММА(ТаблицаРасходы.СуммаНДС)
	|		* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2))  КАК СуммаНДС
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаРасходы.ПравилоРаспределения = ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		И ТаблицаРасходы.АналитикаРасходов = ТаблицаСпособовРаспределения.АналитикаРасходов
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ФормированиеТаблицыРаспределенияРасходовНаСебестоимостьТоваров

#КонецОбласти // ОбменДаннымиЧерезУниверсальныйФормат

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Начальная регистрация изменений
#Область НачальнаяРегистрацияИзменений

Процедура РегистрацияИзмененияДляНачальнойВыгрузкиСинхронизацияДанныхЧерезУниверсальныйФормат(Получатель, СтандартнаяОбработка, Отбор)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("ДатаНачалаВыгрузкиДокументов");
	ЗапрашиваемыеЗначения.Вставить("ПравилаОтправкиСправочников");
	ЗапрашиваемыеЗначения.Вставить("ПравилаОтправкиДокументов");
	ЗапрашиваемыеЗначения.Вставить("ИспользоватьОтборПоОрганизациям");
	ЗапрашиваемыеЗначения.Вставить("Организации");
	ЗапрашиваемыеЗначения.Вставить("ИспользоватьОтборПоТипамДокументов");
	ЗапрашиваемыеЗначения.Вставить("ВыгружаемыеДокументы");
	ЗапрашиваемыеЗначения.Вставить("ВыгружатьЦеныНоменклатуры");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, ЗапрашиваемыеЗначения);
	
	ВыгрузкаДокументовАвтоматически = ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
	ВыгрузкаСправочниковНеВыгружать = ЗначенияРеквизитов.ПравилаОтправкиСправочников = "НеСинхронизировать";
	
	Если ВыгрузкаДокументовАвтоматически Или Не ВыгрузкаСправочниковНеВыгружать Тогда
		
		Отбор = Новый Массив;
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
		
		Если ВыгрузкаДокументовАвтоматически И ЗначенияРеквизитов.ИспользоватьОтборПоТипамДокументов Тогда
			
			// В качестве объектов для регистрации выбираются только те документы, которые включены в таблицу ВыгружаемыеДокументы.
			ВыгружаемыеДокументы = ЗначенияРеквизитов.ВыгружаемыеДокументы.Выгрузить().ВыгрузитьКолонку("ИдентификаторДокумента");
			МетаданныеВыгружаемыхДокументов = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ВыгружаемыеДокументы);
			Для Каждого КлючИЗначение Из МетаданныеВыгружаемыхДокументов Цикл
				Отбор.Добавить(КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ВыгрузкаСправочниковАвтоматически    = ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация";
		ВыгрузкаСправочниковПриНеобходимости = ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости";
		
		МетаданныеОрганизаций = Метаданные.Справочники.Организации;
		МетаданныеУстановкиЦенНоменклатуры = Метаданные.Документы.УстановкаЦенНоменклатуры;
		
		СоставПланаОбмена = Получатель.Метаданные().Состав;
		Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
			
			ОбъектКРегистрации = ЭлементСостава.Метаданные;
			
			// Регистрируются справочники, если правило отправки - АвтоматическаяСинхронизация.
			// Справочник "Организации" так же регистрируется, если правило отправки - СинхронизироватьПоНеобходимости.
			РегистрироватьСправочник = ОбщегоНазначения.ЭтоСправочник(ОбъектКРегистрации)
				И (ВыгрузкаСправочниковАвтоматически Или ВыгрузкаСправочниковПриНеобходимости И ОбъектКРегистрации = МетаданныеОрганизаций);
			
			// Регистрируются документы, если правило отправки - АвтоматическаяСинхронизация
			// и не используется отбор по типам документов (т.к. отбираемые типы были добавлены в отбор ранее)
			// или это документ УстановкаЦенНоменклатуры и в настройках узла указано, что нужно выгружать цены номенклатуры.
			РегистрироватьДокумент = ОбщегоНазначения.ЭтоДокумент(ОбъектКРегистрации)
				И (ВыгрузкаДокументовАвтоматически И Не ЗначенияРеквизитов.ИспользоватьОтборПоТипамДокументов
					Или ОбъектКРегистрации = МетаданныеУстановкиЦенНоменклатуры И ВыгрузкаСправочниковАвтоматически И ЗначенияРеквизитов.ВыгружатьЦеныНоменклатуры);
			
			Если РегистрироватьСправочник Или РегистрироватьДокумент Тогда
				Отбор.Добавить(ОбъектКРегистрации);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отбор.Количество() > 0 Тогда
			ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(
				Получатель,
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияИзмененияДляНачальнойВыгрузкиБухгалтерияГосударственногоУчреждения20(Получатель, СтандартнаяОбработка, Отбор)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("ДатаНачалаВыгрузкиДокументов");
	ЗапрашиваемыеЗначения.Вставить("РежимВыгрузкиСправочников");
	ЗапрашиваемыеЗначения.Вставить("РежимВыгрузкиДокументов");
	ЗапрашиваемыеЗначения.Вставить("РежимВыгрузкиДвиженийНоменклатуры");
	ЗапрашиваемыеЗначения.Вставить("ИспользоватьОтборПоОрганизациям");
	ЗапрашиваемыеЗначения.Вставить("Организации");
	ЗапрашиваемыеЗначения.Вставить("ИспользоватьОтборПоТипамДокументов");
	ЗапрашиваемыеЗначения.Вставить("ВыгружаемыеДокументы");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, ЗапрашиваемыеЗначения);
	
	ВыгрузкаДокументовАвтоматически = ЗначенияРеквизитов.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
	ВыгрузкаСправочниковНеВыгружать = ЗначенияРеквизитов.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать;
	
	Если ВыгрузкаДокументовАвтоматически Или Не ВыгрузкаСправочниковНеВыгружать Тогда
		
		Отбор = Новый Массив;
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
		
		Если ВыгрузкаДокументовАвтоматически Тогда
			
			ДанныеПоРасчетуСебестоимости = Новый Массив;
			ДанныеПоРасчетуСебестоимости.Добавить(Метаданные.Документы.РасчетСебестоимостиТоваров);
			
			Если ЗначенияРеквизитов.РежимВыгрузкиДвиженийНоменклатуры <> Перечисления.РежимыВыгрузкиДвиженийНоменклатуры.НоменклатураКоличество Тогда
				// В режиме выгрузки стоимости регистрируются документы,
				// стоимость которых получается механизмом расчета себестоимости
				// и отправляются корреспонденту по факту данного расчета, а не при проведении,
				// с учетом отбора по типу документа (ИспользоватьОтборПоТипамДокументов).
				ЗарегистрироватьРасчетСебестоимостиПоДатеНачалаВыгрузкиИОрганизациям(Получатель, ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, Организации);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоРасчетуСебестоимости, РегистрируемыеПоРасчетуСебестоимостиМетаданные());
			КонецЕсли;
			
			Если ЗначенияРеквизитов.ИспользоватьОтборПоТипамДокументов Тогда
				
				// В качестве объектов для регистрации выбираются только те документы, которые включены в таблицу ВыгружаемыеДокументы.
				ВыгружаемыеДокументы = ЗначенияРеквизитов.ВыгружаемыеДокументы.Выгрузить().ВыгрузитьКолонку("ИдентификаторДокумента");
				МетаданныеВыгружаемыхДокументов = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ВыгружаемыеДокументы);
				Для Каждого КлючИЗначение Из МетаданныеВыгружаемыхДокументов Цикл
					ОбъектКРегистрации = КлючИЗначение.Значение;
					Если ДанныеПоРасчетуСебестоимости.Найти(ОбъектКРегистрации) = Неопределено Тогда
						
						// Если режим выгрузки стоимости, тогда в Отбор добавляются только те документы,
						// которые не зависят от расчета себестоимости.
						Отбор.Добавить(ОбъектКРегистрации);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыгрузкаСправочниковАвтоматически    = ЗначенияРеквизитов.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		ВыгрузкаСправочниковПриНеобходимости = ЗначенияРеквизитов.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		
		МетаданныеОрганизаций = Метаданные.Справочники.Организации;
		
		СоставПланаОбмена = Получатель.Метаданные().Состав;
		Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
			
			ОбъектКРегистрации = ЭлементСостава.Метаданные;
			
			// Регистрируются справочники, если режим выгрузки справочников - ВыгружатьПоУсловию,
			// Справочник "Организации" так же регистрируется, если режим выгрузки - ВыгружатьПриНеобходимости.
			РегистрироватьСправочник = ОбщегоНазначения.ЭтоСправочник(ОбъектКРегистрации)
				И (ВыгрузкаСправочниковАвтоматически Или ВыгрузкаСправочниковПриНеобходимости И ОбъектКРегистрации = МетаданныеОрганизаций);
			
			// Регистрируются документы, если режим выгрузки документов - ВыгружатьПоУсловию
			// и не используется отбор по типам документов (т.к. отбираемые типы были добавлены в отбор ранее)
			// и регистрируемые документы не зависят от расчета себестоимости (т.к. они были зарегистрированы ранее).
			РегистрироватьДокумент = ОбщегоНазначения.ЭтоДокумент(ОбъектКРегистрации)
				И ВыгрузкаДокументовАвтоматически
				И Не ЗначенияРеквизитов.ИспользоватьОтборПоТипамДокументов
				И ДанныеПоРасчетуСебестоимости.Найти(ОбъектКРегистрации) = Неопределено;
			
			Если РегистрироватьСправочник Или РегистрироватьДокумент Тогда
				Отбор.Добавить(ОбъектКРегистрации);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отбор.Количество() > 0 Тогда
			ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(
				Получатель,
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьРасчетСебестоимостиПоДатеНачалаВыгрузкиИОрганизациям(Получатель, ДатаНачалаВыгрузки, Организации = Неопределено)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	Дата,
	|	Организация
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров
	|ГДЕ
	|	Проведен
	|	И Дата >= &ДатаНачалаВыгрузки
	|	И НЕ ПредварительныйРасчет
	|";
	
	Если Организации <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И Организация В (&Организации)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации"       , Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Получатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Получатель);
		ЗарегистрироватьДанныеОбменаПоРасчетуСебестоимости(Получатели, Выборка, Ложь);
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // НачальнаяРегистрацияИзменений

////////////////////////////////////////////////////////////////////////////////
// Регистрация данных обмена по расчету себестоимости
#Область РегистрацияДанныхОбменаПоРасчетуСебестоимости

// Формирует запрос получения узлов, на которых необходимо зарегистрировать
// зависимые от расчета себестоимости объекты.
//
// Параметры:
//  Получатели - ПланОбменаСсылка - исходные получатели выгружаемого объекта,
//               необходимые для регистрации документов,
//               которые зависят от расчета себестоимости.
//
Процедура ДополнитьЗапросДанныеПолучателей(Запрос, Получатели)
	
	ТекстЗапроса = "";
	
	ОбъединениеЗапросов = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ПланОбмена.Ссылка                                  КАК Получатель,
	|	ПланОбмена.РежимВыгрузкиДвиженийНоменклатуры       КАК РежимВыгрузкиДвиженийНоменклатуры,
	|	ПланОбмена.ИспользоватьОтборПоТипамДокументов      КАК ИспользоватьОтборПоТипамДокументов,
	|	ВыгружаемыеДокументыОбмена.ИдентификаторДокумента  КАК ИдентификаторДокумента
	|ИЗ
	|	#ПланОбмена КАК ПланОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			#ВыгружаемыеДокументы КАК ВыгружаемыеДокументыОбмена
	|		ПО
	|			ПланОбмена.ИспользоватьОтборПоТипамДокументов
	|			И ВыгружаемыеДокументыОбмена.Ссылка = ПланОбмена.Ссылка
	|ГДЕ
	|	ПланОбмена.Ссылка В(&Получатели)
	|";
	
	УзлыПоПланамОбмена = ОбщегоНазначенияБольничнаяАптека.РазложитьМассивСсылокПоТипам(Получатели);
	Для Каждого ПланОбмена Из УзлыПоПланамОбмена Цикл
		
		ТекстЗапросаПолучатель = СтрЗаменить(ШаблонЗапроса, "#ПланОбмена", ПланОбмена.Ключ);
		ТекстЗапросаПолучатель = СтрЗаменить(ТекстЗапросаПолучатель, "#ВыгружаемыеДокументы", ПланОбмена.Ключ + ".ВыгружаемыеДокументы");
		
		ПараметрПолучатели = СтрЗаменить(ПланОбмена.Ключ, ".", "");
		ТекстЗапросаПолучатель = СтрЗаменить(ТекстЗапросаПолучатель, "&Получатели", "&" + ПараметрПолучатели);
		Запрос.УстановитьПараметр(ПараметрПолучатели, ПланОбмена.Значение);
		
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(ТекстЗапроса), ОбъединениеЗапросов, "") + ТекстЗапросаПолучатель;
		
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	ПакетЗапросов.ТаблицаДляПомещения = "Получатели";
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Добавляет в запрос текст выборки узлов-получателей данных расчета себестоимости.
//
// Параметры:
//  Запрос - Запрос - запрос выборки данных для регистрации изменений,
//           зависимых от расчета себестоимости объектов.
//
Процедура ДополнитьЗапросПолучателиРасчетаСебестоимости(Запрос)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Получатели КАК Получатели
	|ГДЕ
	|	НЕ Получатели.ИспользоватьОтборПоТипамДокументов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Получатели КАК Получатели
	|ГДЕ
	|	Получатели.ИспользоватьОтборПоТипамДокументов
	|	И Получатели.ИдентификаторДокумента = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	МетаданныеОбъекта = Метаданные.Документы.РасчетСебестоимостиТоваров;
	
	ПараметрИдентификатор = "Идентификатор" + МетаданныеОбъекта.Имя;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Идентификатор", "&" + ПараметрИдентификатор);
	
	Запрос.УстановитьПараметр(ПараметрИдентификатор, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъекта));
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса;
	
КонецПроцедуры

// Добавляет в запрос текст выборки данных, зависимых от расчета себестоимости.
//
// Параметры:
//  Запрос - Запрос - запрос выборки данных для регистрации изменений,
//           зависимых от расчета себестоимости объектов.
//  Объект - ДокументОбъект.РасчетСебестоимостиТоваров - изменяемый объект,
//           приводящий к регистрации изменений расходных документов.
//
Процедура ДополнитьЗапросЗависимыеОбъектыКРегистрации(Запрос, Объект)
	
	ТекстЗапроса = "";
	
	ОбъединениеЗапросов = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ШаблонЗапросаРегистрацииОбъектов = ШаблонЗапросаРегистрацииОбъектов();
	
	РегистрируемыеОбъекты = РегистрируемыеПоРасчетуСебестоимостиМетаданные();
	Для Каждого МетаданныеОбъекта Из РегистрируемыеОбъекты Цикл
		
		ТекстЗапросаДокумента = СтрЗаменить(ШаблонЗапросаРегистрацииОбъектов, "#Документ", МетаданныеОбъекта.ПолноеИмя());
		
		ПараметрИдентификатор = "Идентификатор" + МетаданныеОбъекта.Имя;
		ТекстЗапросаДокумента = СтрЗаменить(ТекстЗапросаДокумента, "&Идентификатор", "&" + ПараметрИдентификатор);
		Запрос.УстановитьПараметр(ПараметрИдентификатор, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъекта));
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ОбъединениеЗапросов) + ТекстЗапросаДокумента;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ОбъединениеЗапросов + ТекстЗапросаРегистрацииПеремещениеТоваров();
	ТекстЗапроса = ТекстЗапроса + ОбъединениеЗапросов + ТекстЗапросаРегистрацииПересортицаТоваров();
	ТекстЗапроса = ТекстЗапроса + ОбъединениеЗапросов + ТекстЗапросаРегистрацииПересортицаТоваровВОтделении();
	
	Запрос.УстановитьПараметр("НачалоПериода"          , НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ОкончаниеПериода"       , КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Организация"            , Объект.Организация);
	Запрос.УстановитьПараметр("РежимВыгрузкиКоличества", Перечисления.РежимыВыгрузкиДвиженийНоменклатуры.НоменклатураКоличество);
	
	Порядок = "
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|";
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса + Порядок;
	
КонецПроцедуры

// Возвращает общий текст запроса получения документов и узлов,
// на которых необходимо зарегистрировать данные документы
// при расчете себестоимости, если они проходят фильт миграции данных.
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка
//
Функция ШаблонЗапросаРегистрацииОбъектов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	#Документ КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры <> &РежимВыгрузкиКоличества
	|		И НЕ Получатели.ИспользоватьОтборПоТипамДокументов
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	#Документ КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры <> &РежимВыгрузкиКоличества
	|		И Получатели.ИспользоватьОтборПоТипамДокументов
	|		И Получатели.ИдентификаторДокумента = &Идентификатор
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает дополнительный текст запроса получения документов Перемещение товаров
// и узлов, на которых необходимо зарегистрировать данные документы
// при расчете себестоимости, если они проходят фильт миграции данных.
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка
//
Функция ТекстЗапросаРегистрацииПеремещениеТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры = &РежимВыгрузкиКоличества
	|		И НЕ Получатели.ИспользоватьОтборПоТипамДокументов
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры = &РежимВыгрузкиКоличества
	|		И Получатели.ИспользоватьОтборПоТипамДокументов
	|		И Получатели.ИдентификаторДокумента = &ИдентификаторПеремещениеТоваров
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает дополнительный текст запроса получения документов Пересортица товаров
// и узлов, на которых необходимо зарегистрировать данные документы
// при расчете себестоимости, если они проходят фильт миграции данных.
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка
//
Функция ТекстЗапросаРегистрацииПересортицаТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Документ.ПересортицаТоваров КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры = &РежимВыгрузкиКоличества
	|		И НЕ Получатели.ИспользоватьОтборПоТипамДокументов
	|ГДЕ
	|	Документ.ПриходоватьТоварыПоСебестоимостиСписания
	|	И Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Документ.ПересортицаТоваров КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры = &РежимВыгрузкиКоличества
	|		И Получатели.ИспользоватьОтборПоТипамДокументов
	|		И Получатели.ИдентификаторДокумента = &ИдентификаторПересортицаТоваров
	|ГДЕ
	|	Документ.ПриходоватьТоварыПоСебестоимостиСписания
	|	И Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает дополнительный текст запроса получения документов Пересортица товаров в отделении
// и узлов, на которых необходимо зарегистрировать данные документы
// при расчете себестоимости, если они проходят фильт миграции данных.
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка
//
Функция ТекстЗапросаРегистрацииПересортицаТоваровВОтделении()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Документ.ПересортицаТоваровВОтделении КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры = &РежимВыгрузкиКоличества
	|		И НЕ Получатели.ИспользоватьОтборПоТипамДокументов
	|ГДЕ
	|	Документ.ПриходоватьТоварыПоСебестоимостиСписания
	|	И Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка        КАК Ссылка,
	|	Получатели.Получатель  КАК Получатель
	|ИЗ
	|	Документ.ПересортицаТоваровВОтделении КАК Документ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Получатели КАК Получатели
	|	ПО
	|		Получатели.РежимВыгрузкиДвиженийНоменклатуры = &РежимВыгрузкиКоличества
	|		И Получатели.ИспользоватьОтборПоТипамДокументов
	|		И Получатели.ИдентификаторДокумента = &ИдентификаторПересортицаТоваровВОтделении
	|ГДЕ
	|	Документ.ПриходоватьТоварыПоСебестоимостиСписания
	|	И Документ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Документ.Организация = &Организация
	|	И Документ.Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает коллекцию метаданных документов,
// регистрируемых при изменении расчета себестоимости товаров.
//
// Возвращаемое значение:
//  РегистрируемыеПоРасчетуСебестоимостиМетаданные - Массив
//
Функция РегистрируемыеПоРасчетуСебестоимостиМетаданные()
	
	РегистрируемыеПоРасчетуСебестоимостиМетаданные = Новый Массив;
	
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ПересортицаТоваров);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ПересортицаТоваровВОтделении);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваровВОтделении);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ВозвратТоваровИзОтделения);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ИзготовлениеПоЛекарственнойПрописи);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ОтпускТоваровВОтделение);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ПередачаТоваровНаСторону);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.СписаниеНедостачТоваровВОтделении);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ПотреблениеТоваровПоНазначениямВрачей);
	РегистрируемыеПоРасчетуСебестоимостиМетаданные.Добавить(Метаданные.Документы.ПеремещениеТоваровМеждуОтделениями);
	
	Возврат РегистрируемыеПоРасчетуСебестоимостиМетаданные;
	
КонецФункции

#КонецОбласти // РегистрацияИзмененийПоРасчетуСебестоимости

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы
#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы