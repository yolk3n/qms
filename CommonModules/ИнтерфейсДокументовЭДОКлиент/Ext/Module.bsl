
#Область СлужебныйПрограммныйИнтерфейс

#Область ТекущиеДелаЭДО

Функция ПараметрыЗапускаТекущихДелЭДО() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОтображения", "");
	Результат.Вставить("Раздел", "");
	Результат.Вставить("ОтборУчетныхДокументов", Новый Массив);
	Результат.Вставить("ОтборВходящихДокументов", Новый Массив);
	Результат.Вставить("ОтборИсходящихДокументов", Новый Массив);
	Возврат Результат;
	
КонецФункции

Процедура ОткрытьТекущиеДелаЭДОКоманда(Источник = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОткрытьТекущиеДелаЭДО();
	
КонецПроцедуры

Процедура ОткрытьТекущиеДелаЭДО(ПараметрыЗапуска = Неопределено, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДО");
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДО", ПараметрыЗапуска,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает страницу опроса на сайте ИТС
//
Процедура ОткрытьСтраницуОпроса() Экспорт
	
	ПараметрыЕстьИдея = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыОткрытияСтраницыОпроса();
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/survey/service1cedo" + ПараметрыЕстьИдея);
	
КонецПроцедуры

Процедура ВыборРежимаПросмотраТекущихДел(Оповещение, Форма, РежимОтображения, ПакетноеОтображение, 
		ОбластьЛегенды = Неопределено, ОбластьПросмотра = Неопределено) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимОтображения", РежимОтображения);
	ПараметрыФормы.Вставить("ПакетноеОтображение", ПакетноеОтображение);
	ПараметрыФормы.Вставить("ОбластьЛегенды", ОбластьЛегенды);
	ПараметрыФормы.Вставить("ОбластьПросмотра", ОбластьПросмотра);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДОВыборРежимаПросмотра", 
		ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Процедура ОткрытьАрхивЭДО() Экспорт

	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.АрхивЭлектронныхДокументов");

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаЭлектронныхДокументов

#Область ФормированиеКаталогаТоваров	

// Сформировать каталог товаров.
// 
// Параметры:
//  ПараметрыКаталогаТоваров - см. НастройкиОтправкиЭДОСлужебныйВызовСервера.ПараметрыКаталогаТоваровДляОтправкиПоЭДО
//  ИдентификаторФормы - УникальныйИдентификатор
Процедура СформироватьКаталогТоваров(ПараметрыКаталогаТоваров, ИдентификаторФормы) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыКаталогаТоваров", ПараметрыКаталогаТоваров);
	Контекст.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьКаталогТоваровПослеПодбора", ЭтотОбъект, Контекст);
	ИнтеграцияЭДОКлиент.ОткрытьФормуПодбораТоваров(ИдентификаторФормы, ОписаниеОповещения);
	
КонецПроцедуры

// Отправить каталог товаров после подбора.
// 
// Параметры:
//  ДанныеКаталога - Строка - адрес временного хранилища данных каталога товаров.
//  Контекст - Структура:
//  * ПараметрыКаталогаТоваров - см. НастройкиОтправкиЭДОСлужебныйВызовСервера.ПараметрыКаталогаТоваровДляОтправкиПоЭДО
//  * ИдентификаторФормы - Строка
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ОтправитьКаталогТоваровПослеПодбора(ДанныеКаталога, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКаталога) Тогда
		ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
		ПараметрыОткрытия.ДанныеКаталога = ДанныеКаталога;
		ПараметрыОткрытия.ВидДокумента = Контекст.ПараметрыКаталогаТоваров.ВидДокумента;
		ПараметрыОткрытия.НовыйДокумент = Истина;
		ОткрытьЭлектронныйДокументОбъектаУчета(Контекст.ПараметрыКаталогаТоваров.НастройкаЭДО, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

Функция НовыеПараметрыФормыПросмотраЗагрузкиЭлектронныхДокументов() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресХранилищаФайла");
	СтруктураПараметров.Вставить("АдресХранилищаПакета");
	СтруктураПараметров.Вставить("ФайлАрхива", Истина);
	СтруктураПараметров.Вставить("ИмяФайла");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("УникальныйИдентификатор");
	СтруктураПараметров.Вставить("ВладелецЭД");

	Возврат СтруктураПараметров;

КонецФункции

Процедура ОткрытьФормуПросмотраЗагрузкиЭлектронногоДокумента(Параметры) Экспорт

	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗагрузкаПросмотрЭлектронногоДокумента",
		Новый Структура("СтруктураЭД", Параметры), ЭтотОбъект, Параметры.УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодключаемыхКоманд

// Обработчик команды отправки печатной формы по ЭДО.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыВыполненияКоманды - Структура - дополнительные параметры просмотра.
//
Процедура ОтправитьПечатнуюФормуПоЭДОКоманда(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО();
	Контекст.ДокументОснование = ПараметрКоманды;
	
	СуществуютЭД = ИнтеграцияЭДОВызовСервера.ЭлектронныеДокументыОбъектовУчета(ПараметрКоманды).Количество() > 0;
	
	Если СуществуютЭД Тогда 
		
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СписокСформированныхДокументов", Контекст, 
			ПараметрКоманды,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	КонецЕсли;
	
	СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеВФайл(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МассивСсылок = ОбщегоНазначенияБЭДКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивСсылок) Тогда
		Если МассивСсылок.Количество() = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанных объектов.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

Процедура ОткрытьВыгрузкуДокументовВФайл(ОбъектыУчета) Экспорт
	
	Параметры = Новый Структура("СтруктураЭД", ОбъектыУчета);
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры);
	
КонецПроцедуры

Процедура ПерезаполнитьДокумент(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт	
	
	ИнтеграцияЭДОКлиент.ПерезаполнитьДокумент(ПараметрКоманды);	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзФайла(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаДокумент", ПараметрКоманды);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'XML файл'") + "(*.xml)|*.xml|" + НСтр("ru = 'ZIP файл'") + "(*.zip)|*.zip";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

Процедура ОткрытьНастройкиОтправкиДокументовПоДоговору(Договор, ДополнительныеПараметры) Экспорт
	
	НастройкиЭДОКлиент.ОткрытьНастройкиОтправкиПоДоговору(Договор);
	
КонецПроцедуры

Процедура ПригласитьКОбменуЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Параметры = СинхронизацияЭДОКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	Параметры.Контрагент = ИнтерфейсДокументовЭДОВызовСервера.КонтрагентыДляОтправкиПриглашений(ПараметрКоманды);
	СинхронизацияЭДОКлиент.ОткрытьПомощникОтправкиПриглашения(Параметры);
	
КонецПроцедуры

Процедура ОткрытьНастройкиОтраженияВУчете(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	НастройкиЭДОКлиент.ОткрытьНастройкиОтраженияВУчете(ПараметрКоманды);
			
КонецПроцедуры
	
Процедура ОткрытьНастройкиОтправкиДокументовКонтрагента(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	НастройкиЭДОКлиент.ОткрытьНастройкиОтправки(ПараметрКоманды);	
		
КонецПроцедуры
	
Процедура ПодключитьКЭДО(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	ПараметрыСоздания = СинхронизацияЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ПараметрыСоздания.Организация = ПараметрКоманды;
	СинхронизацияЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
		
КонецПроцедуры
	
Процедура ОткрытьСписокУчетныхЗаписей(Организация, ПараметрыВыполненияКоманды) Экспорт
	
	СинхронизацияЭДОКлиент.ОткрытьСписокУчетныхЗаписей(Организация);
	
КонецПроцедуры

Процедура ОткрытьСписокМЧД(Организация, ПараметрыВыполненияКоманды) Экспорт
	
	МашиночитаемыеДоверенностиКлиент.ОткрытьСписокМЧД(Организация);
	
КонецПроцедуры
	
Процедура НастройкиОтправкиДокументовИнтеркампани(Организация, ДополнительныеПараметры) Экспорт

	НастройкиЭДОКлиент.ОткрытьНастройкиИнтеркампани(Организация);
		
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", ПараметрыВыполненияКоманды.Источник);
	
	Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
		ДополнительныеПараметры.Вставить("Оповещение", ПараметрыВыполненияКоманды.Оповещение);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДЗавершить", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ПараметрКоманды.Количество() > 1 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрКоманды", ПараметрКоманды);
		ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
		Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
			ДополнительныеПараметры.Вставить("ОповещениеПриОтказе", ПараметрыВыполненияКоманды.Оповещение);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьПроведениеПослеВопросаПользователю", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Отправить электронные документы выделенных элементов?
			|Если электронных документов нет, они будут созданы автоматически.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(ПараметрКоманды, ОбработчикОповещения);
	
	КонецЕсли;
			
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьЭД_Договор(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрКоманды) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран объект учета для отправки электронного документа'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	
	ПараметрыПросмотра = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
		ПараметрКоманды, ПараметрыОткрытия);

	Если НЕ ЗначениеЗаполнено(ПараметрыПросмотра.ЭлектронныйДокумент)
		И ПараметрыПросмотра.ПредварительныйПросмотр.РезультатПоискаНастроек.Успех Тогда
		
		НастройкиФормирования = ПараметрыПросмотра.ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки;
		
		Если НастройкиФормирования.Направление <> ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний")
			И НастройкиФормирования.НастройкиОтправки.Формат = "ON_DOGDOC_1_999_01_01_01_01" Тогда
			
			ОбработчикЗавершения = Новый ОписаниеОповещения("ЗапроситьФайлДляДоговорногоДокумента101Завершение",
				ЭтотОбъект, ПараметрКоманды);
			ПоказатьСправкуПоФорматуПДФ_А3_ЗапроситьФайл(ОбработчикЗавершения);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрКоманды);

	СформироватьПодписатьОтправитьЭДЗавершить(МассивПараметров, Новый Структура);

КонецПроцедуры

Процедура ПроверитьПроведениеПослеВопросаПользователю(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ОповещениеПриОтказе") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриОтказе);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(ДополнительныеПараметры.ПараметрКоманды,
		ДополнительныеПараметры.Обработчик);
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьЭДЗавершить(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ПараметрКоманды;
	
	Если ПараметрыВыполненияКоманды.Свойство("ДополнительныеФайлы") Тогда
		ПараметрыВыполненияДействийПоЭДО.ДополнительныеФайлы = ПараметрыВыполненияКоманды.ДополнительныеФайлы;
	КонецЕсли;
	
	Если ПараметрыВыполненияКоманды.Свойство("Оповещение") Тогда
		Оповещение = ПараметрыВыполненияКоманды.Оповещение;
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОбъектыУчета", ПараметрКоманды);
		ПараметрыОповещения.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	КонецЕсли;
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
		
КонецПроцедуры
	
Процедура ОткрытьНастройкиВнутреннегоЭДО(Организация, ПараметрыВыполненияКоманды) Экспорт

	НастройкиЭДОКлиент.ОткрытьНастройкиВнутреннегоЭлектронногоДокументооборота(Организация);
		
КонецПроцедуры
	
Процедура ОткрытьЭлектронныйДокументОбъектаУчетаКоманда(ОбъектУчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбран объект учета для просмотра электронного документа'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

// Параметры "ПриОткрытии" формы.
// 
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево
//
Функция ПараметрыПриОткрытииФормы() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;

КонецФункции

// Обработчика события "ПриОткрытии" для форм списка и документа.
// Параметры:
//  Параметры -  ФормаКлиентскогоПриложения - (вариант передачи параметра устарел).
//            -  см. ПараметрыПриОткрытииФормы
//
Процедура ПриОткрытииФормы(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыПриОткрытии = ПараметрыПриОткрытииФормы();
		ПараметрыПриОткрытии.Форма = Параметры;
	Иначе 
		ПараметрыПриОткрытии = Параметры;
	КонецЕсли;
	
	Если ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО Тогда
		ПараметрыПриОткрытии.Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
		ПараметрыПриОткрытии.Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаСписка

// Параметры оповещения для формы списка.
//
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * ИмяДинамическогоСписка - Строка - Наименование динамического списка формы, отображающего "СостояниеЭД".
//                               Возможно указание нескольких списков через ("СписокИсходящий, СписокВходящий")
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
//                            - Массив Из РасширениеГруппыФормыДляПодменю
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево
//    * ЕстьОбработчикОбновленияВидимостиСостоянияЭДО - Булево
//
Функция ПараметрыОповещенияЭДО_ФормаСписка() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ИмяДинамическогоСписка", "");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновленияВидимостиСостоянияЭДО", Ложь);

	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;

КонецФункции

// Обработчик события "ОбработкаОповещения" формы списка документов.
//
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаСписка
//
Процедура ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт

	ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	Форма = ПараметрыОповещения.Форма;
	Если ИмяСобытия = ИмяСобытияОбновленияСостоянияЭДО() Или ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда

		ИмяДинамическогоСписка = ПараметрыОповещения.ИмяДинамическогоСписка;
		МассивСписков = СтрРазделить(ИмяДинамическогоСписка, ", ", Ложь);
		Для Каждого ИмяРеквизита Из МассивСписков Цикл
			Форма.Элементы[ИмяРеквизита].Обновить();
		КонецЦикла;
		Если ПараметрыОповещения.ЕстьОбработчикОбновитьКомандыЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ИспользоватьВнутренниеДокументыЭДО" Тогда

		Если ПараметрыОповещения.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьСостоянияЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьСостоянияЭДО", 0.2, Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Обработка нажатия на гиперссылку "СостояниеЭДО" в форме списка
//
// Параметры:
//  ОбъектУчетаСсылка - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//  СтандартнаяОбработка - Булево - признак стандартной обработки нажатия на гиперссылку (устанавливается в Ложь).
//
Процедура ДекорацияСостояниеЭДОФормаСпискаНажатие(ОбъектУчетаСсылка, СтандартнаяОбработка = Ложь) Экспорт
	
	Если ОбъектУчетаСсылка <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ИнтерфейсДокументовЭДОВызовСервера.СостояниеОбъектаУчетаУстановлено(ОбъектУчетаСсылка) Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчетаСсылка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриАктивизацииСтроки_ФормаСписка(Форма) Экспорт
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);

КонецПроцедуры

// См. ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО
Процедура ОбработчикОбновленияВидимостьСостоянияЭДО(Форма, КолонкаСостояния) Экспорт
	
	Если КолонкаСостояния <> Неопределено Тогда
		КолонкаСостояния.Видимость = ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяЭДОИВнутреннийЭДО();
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Область ФормаДокумента
	
// Параметров оповещения для формы документа.
//
// Возвращаемое значение:
//  Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * ДокументСсылка - ДокументСсылка
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент отображения состояние ЭДО
//    * ГруппаСостояниеЭДО - ГруппаФормы - владелец для КонтроллерСостояниеЭДО
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
//
Функция ПараметрыОповещенияЭДО_ФормаДокумента() Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ДокументСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;

КонецФункции

// Обработчик события "ОбработкаОповещения" формы документа.
//
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаДокумента
//  РезультатыОбработкиОповещения - Структура - Выходной параметр:
//    * ИзменилосьСостояниеЭДО - Булево - Истина, если произошло изменение состояния ЭДО объекта учета, отображаемого 
//                                        в вызывающей форме.
//
Процедура ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения,
	РезультатыОбработкиОповещения = Неопределено) Экспорт

	ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);

	РезультатыОбработкиОповещения = Новый Структура;
	РезультатыОбработкиОповещения.Вставить("ИзменилосьСостояниеЭДО", Ложь);

	Если ИмяСобытия = ИмяСобытияОбновленияСостоянияЭДО() Или ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда

		ДокументСсылка = ПараметрыОповещения.ДокументСсылка;

		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыУчета") И ТипЗнч(
			Параметр.ДокументыУчета) = Тип("Массив") И Параметр.ДокументыУчета.Найти(ДокументСсылка) = Неопределено Тогда

			Возврат;

		КонецЕсли;

		ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыОповещения);
		РезультатыОбработкиОповещения.ИзменилосьСостояниеЭДО = Истина;

	КонецЕсли;

КонецПроцедуры

// Обработка нажатия на гиперссылку "СостояниеЭДО" в форме документа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма учетного документа.
//  СтандартнаяОбработка - Булево - Признак стандартной обработки нажатия на гиперссылку (устанавливается в Ложь).
//
Процедура КонтроллерСостояниеЭДОНажатие(Форма, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбменаСКонтрагентами = Форма.ПараметрыОбменаСКонтрагентами;
	ДанныеСостоянияЭДО = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие;
				
	Если ДанныеСостоянияЭДО.СуществуетАктуальныйДокумент Тогда
		
		ОткрытьЭлектронныйДокументОбъектаУчета(Форма.Объект.Ссылка);
		
	ИначеЕсли Не ДанныеСостоянияЭДО.ЕстьПравоНастройки И ДанныеСостоянияЭДО.НеобходимаНастройка Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходима настройка электронного документооборота. Обратитесь к администратору.'"))
	Иначе
		Если Форма.Модифицированность Тогда
			Если ДанныеСостоянияЭДО.НеобходимаНастройка Тогда
				ТекстВопроса = НСтр("ru='Для того чтобы настроить ЭДО, нужно записать документ. Записать?'");			
			Иначе
				ТекстВопроса = НСтр("ru='Для того чтобы начать ЭДО, нужно записать документ. Записать?'");			
			КонецЕсли;
				
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			Оповещение = Новый ОписаниеОповещения("КонтроллерСостояниеЭДОНажатиеПродолжить", ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, ,
				КодВозвратаДиалога.Отмена, НСтр("ru='Необходимо записать документ'"));
		
		Иначе
			ОткрытьЭлектронныйДокументОбъектаУчета(Форма.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Описание оповещения для процедуры КонтроллерСостояниеЭДОНажатие
//
// Параметры:
//  Результат - КодВозвратаДиалога.ОК, КодВозвратаДиалога.Отмена - результат диалога с пользователем.
//  Параметры - Структура - дополнительные параметры.
//    * Форма - ФормаКлиентскогоПриложения - Форма учетного документа, из которого вызван диалог.
//
Процедура КонтроллерСостояниеЭДОНажатиеПродолжить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Параметры.Форма.Записать();
		ОткрытьЭлектронныйДокументОбъектаУчета(Параметры.Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи_ФормаДокументаСправочника(Форма, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами")
		И Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации <> Неопределено Тогда
		СформироватьОтложенныйКонтекстДиагностики(Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
		ПодключитьОбработчикОжидания("ОбменСКонтрагентамиОбработатьОшибкиОтложенно", 1, Истина);
	КонецЕсли;
	
	Оповестить(ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСправочника

// Параметры оповещения ЭДО для формы справочника.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * ЕстьОбработчикОбновитьКомандыЭДО - Булево
// * СправочникСсылка - СправочникСсылка
// * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент отображения состояние ЭДО
// * ГруппаСостояниеЭДО - ГруппаФормы - владелец для КонтроллерСостояниеЭДО
Функция ПараметрыОповещенияЭДО_ФормаСправочника() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	ПараметрыОповещения.Вставить("СправочникСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы справочника.
//
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаСправочника
//
Процедура ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	Форма = ПараметрыОповещения.Форма;
	Если ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда
		
		Если ПараметрыОповещения.ЕстьОбработчикОбновитьКомандыЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ИмяСобытияОбновленияСостоянияЭДО() Или ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда

		СправочникСсылка = ПараметрыОповещения.СправочникСсылка;

		НеЗаполнятьСостояниеЭДО = (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыУчета") И ТипЗнч(
			Параметр.ДокументыУчета) = Тип("Массив") И Параметр.ДокументыУчета.Найти(СправочникСсылка) = Неопределено);
		
		Если НеЗаполнятьСостояниеЭДО Тогда

			Возврат;

		КонецЕсли;

		ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

// Открывает форму ПечатьЭлектронныхДокументов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив, СписокЗначений, ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                         ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыФормы - Структура - Параметры, которые будут переданы в открываемую форму.
//
Процедура ОткрытьФормуПечатиЭлектронныхДокументов(Знач ЭлектронныеДокументы, Знач ПараметрыФормы = Неопределено) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ПечатьЭлектронныхДокументов", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

// Выгружает электронные документы в формате PDF в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDF(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	СоответствиеФайловВыгрузки = ИнтерфейсДокументовЭДОВызовСервера.СформироватьФайлыВыгрузкиЭДВФорматеPDF(
		ЭлектронныеДокументы, ИдентификаторФормы);
	
	СохранитьФайлыВыгрузкиЭД(СоответствиеФайловВыгрузки);
	
КонецПроцедуры

// Выгружает документооборот по электронным документам в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
Процедура ВыгрузитьДокументооборотЦеликом(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	СоответствиеФайловВыгрузки = ИнтерфейсДокументовЭДОВызовСервера.СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(
		ЭлектронныеДокументы, ИдентификаторФормы);
	
	СохранитьФайлыВыгрузкиЭД(СоответствиеФайловВыгрузки);
	
КонецПроцедуры

// Выгружает электронные документы для предоставления в ФНС.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Знач ЭлектронныеДокументы) Экспорт
	
	СоответствиеФайловВыгрузки = ИнтерфейсДокументовЭДОВызовСервера.СформироватьФайлыВыгрузкиЭДДляФНС(
		ЭлектронныеДокументы);
	
	СохранитьФайлыВыгрузкиЭД(СоответствиеФайловВыгрузки);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

// Показывает окно для ввод (выбора) значения учетного документа.
// Выбранное значение передается в оповещение о выборе.
//
// Параметры:
//  Настройки - Структура - настройки подбора учетного документа.
//   * СпособОбработки - Строка - способ обработки входящего электронного документа.
//   * ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных для выбора.
//   * ИмяТипаСсылки - Строка - имя типа ссылки для выбора. Например, "ДокументСсылка.ПоступлениеТоваровУслуг".
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент по электронному документу.
//   * Организация - ОпределяемыйТип.Организация - организация по электронному документу.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение, которое выполняется при вводе (выборе) значения.
//
Процедура ПоказатьПодборУчетногоДокумента(Знач Настройки, Знач ОповещениеОВыборе) Экспорт
	
	СтандартнаяОбработка = Истина;
	СпособыОтраженияМЧДвУчете = ИнтеграцияЭДОКлиент.СпособыОтраженияМЧДвУчете(); 
	Если ЗначениеЗаполнено(Настройки.СпособОбработки)
		И СпособыОтраженияМЧДвУчете.Свойство(Настройки.СпособОбработки) Тогда
		МашиночитаемыеДоверенностиКлиент.ПриПодбореУчетногоДокумента(Настройки, ОповещениеОВыборе, СтандартнаяОбработка);
	Иначе
		ОбменСКонтрагентамиКлиентПереопределяемый.ПриПодбореУчетногоДокумента(Настройки, ОповещениеОВыборе, СтандартнаяОбработка);		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Подсказка = НСтр("ru = 'Укажите документ отражения в учете'");
	ПоказатьВводЗначения(ОповещениеОВыборе,, Подсказка, Новый ОписаниеТипов(Настройки.ИмяТипаСсылки));
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовОбработкаНавигационнойСсылки
Процедура ПечатьДокументовОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;  
		
	Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыУчета[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Возврат;	
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВнутреннийЭДОПрогрессПодписания" Тогда
		
		ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектыУчета[0]);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Реклама1СЭДОВнутренний" Тогда
		
		ЕстьПравоНастройкиОбмена = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоНастройкиОбмена();

		Если ЕстьПравоНастройкиОбмена Тогда
			
			Организация = Неопределено;
			ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектыУчета[0]);
			Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
				Если СтрокаОписания.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Внутренний") Тогда
					Организация = СтрокаОписания.Организация;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения("ЗавершениеРаботыМастераНастроекВнутреннегоЭДОСобытие", ЭтотОбъект);
			
			ВидДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыУчета[0], Команда);
			
			НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(Организация, ВидДокумента, Оповещение);
		Иначе 
			КонтекстОперации = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
			ВидОперации = НСтр("ru = 'Формирование внутреннего электронного документа'");
			ВидОшибки = ИнтерфейсДокументовЭДОКлиентСервер.ВидОшибкиНетПравДляНастройкиЭДО();
			ТекстОшибки = НСтр("ru = 'Не настроен внутренний документооборот'");
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстОперации, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Ложь);
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстОперации);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовВыполнитьКоманду
Процедура ПечатьДокументовВыполнитьКоманду(Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры) Экспорт
	
	Если Команда.Имя = "ВнутреннийЭДООтправитьНаПодпись" Тогда
		
		ОбъектыПечати = Форма.ОбъектыПечати.ВыгрузитьЗначения();
		
		Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыПечати[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
		
		Если Не ЗначениеЗаполнено(Команда) Тогда
			Возврат;
		КонецЕсли;
		
		ВидВнутреннегоДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыПечати[0], Команда);
		
		Организация = Неопределено;
		ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектыПечати[0]);
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			Если СтрокаОписания.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Внутренний") Тогда
				Организация = СтрокаОписания.Организация;
			КонецЕсли;
		КонецЦикла;
		
		КлючНастройки = Новый Структура;
		КлючНастройки.Вставить("Организация", Организация);
		КлючНастройки.Вставить("ВидВнутреннегоДокумента", ВидВнутреннегоДокумента);
		
		Параметр = Новый Структура;
		Параметр.Вставить("КлючНастройки", КлючНастройки);
		
		СформироватьЭДИзФормыПечатиБСП(Форма, Параметр);  
		
	ИначеЕсли Команда.Имя = "ЭДОСформироватьПроизвольныйДокумент" Тогда
		
		ВыполнитьКоманду_ЭДОСформироватьПроизвольныйДокумент(
			Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовОбработкаОповещения
Процедура ПечатьДокументовОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП" Тогда
		
		ИнтерфейсДокументовЭДОКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);
		Форма.ПодключитьОбработчикОжидания("ОбновитьТекущуюПечатнуюФорму",0.1,Истина);
		
	ИначеЕсли ИмяСобытия = "ЗавершениеРаботыМастераНастроекВнутреннегоЭДО" Тогда
		
		Оповестить("ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП");
		СформироватьЭДИзФормыПечатиБСП(Форма, Параметр);
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеФормированияЭлектронныхДокументовСобытие(Результат, ДополнительныеПараметры) Экспорт
	Оповестить("ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП");
КонецПроцедуры

Процедура ЗавершениеРаботыМастераНастроекВнутреннегоЭДОСобытие(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Оповестить("ЗавершениеРаботыМастераНастроекВнутреннегоЭДО", Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеПечатиБСП(НавигационнаяСсылка, Параметры = Неопределено) Экспорт
	
	Если НавигационнаяСсылка = "Реклама1СЭДО" Тогда
		МассивСсылок = Параметры;
		Если ЗначениеЗаполнено(МассивСсылок) Тогда
			ОткрытьЭлектронныйДокументОбъектаУчета(МассивСсылок[0]);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументовИзПечатныхФорм

// Обработать выбор команды печати для отправки неформализованного ЭДО.
// 
// Параметры:
//  Выбор - ЭлементСпискаЗначений, Неопределено -
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//
Процедура ОбработатьВыборКомандыПечатиДляОтправкиНеформализованногоЭДО(Выбор, Контекст) Экспорт
	
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьНеформализованныйЭДОПоКомандеПечати(Выбор.Значение, Контекст.ДокументОснование);
	
КонецПроцедуры

// Обработать ответ на вопрос о формировании многих документов ЭДО.
// 
// Параметры:
//  Ответ - КодВозвратаДиалога, Неопределено -
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//
Процедура ОбработатьОтветНаВопросОФормированииМногихДокументов(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
	
КонецПроцедуры

// Открывает формы новых неформализованных документов ЭДО контексту отправки
// 
// Параметры:
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//
Процедура СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст) Экспорт
	
	Если Контекст.ДанныеПечатныхФорм.Количество() = 0 Тогда
		
		КомандыПечати = ИнтерфейсДокументовЭДОВызовСервера.ДоступныеКомандыПечатиОбъекта(Контекст.ДокументОснование);
		
		Если КомандыПечати.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Невозможно сформировать документ ЭДО: не найдено печатных форм для отправки.'"));
			Возврат;
			
		ИначеЕсли КомандыПечати.Количество() = 1 Тогда
			
			СформироватьНеформализованныйЭДОПоКомандеПечати(КомандыПечати[0], Контекст.ДокументОснование);
			Возврат;
			
		Иначе
			
			ВыбратьПечатнуюФормуДляОтправкиНеформализованногоЭДО(Контекст, КомандыПечати);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ДанныеПечатнойФормы Из Контекст.ДанныеПечатныхФорм Цикл
		
		ПараметрыФормы = Новый Структура;
		
		Если ДанныеПечатнойФормы.ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ПараметрыФормы.Вставить("ТабличныйДокумент", ДанныеПечатнойФормы.ТабличныйДокумент);
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.ДвоичныеДанныеФайла <> Неопределено Тогда
			ПараметрыФормы.Вставить("ДвоичныеДанныеФайла", ДанныеПечатнойФормы.ДвоичныеДанныеФайла);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("НаименованиеФайла", ДанныеПечатнойФормы.НаименованиеФайла);
		ПараметрыФормы.Вставить("Расширение", ДанныеПечатнойФормы.Расширение);
		ПараметрыФормы.Вставить("Уникальность", ДанныеПечатнойФормы.Уникальность);
		ПараметрыФормы.Вставить("Основание", Контекст.ДокументОснование);
		
		ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму исходящего неформализованного документа ЭДО по описанию команды печати
// 
// Параметры:
//  ОписаниеКомандыПечати - Структура - Структура содержащая поля таблицы значений команд печати.
//                                      см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  ДокументОснование - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
Процедура СформироватьНеформализованныйЭДОПоКомандеПечати(ОписаниеКомандыПечати, ДокументОснование) Экспорт
	
	РезультатПечати = ИнтерфейсДокументовЭДОВызовСервера.ПечатныеФормыДокументов(ОписаниеКомандыПечати, 
		ДокументОснование, ТипФайлаТабличногоДокумента.PDF);
	
	Если РезультатПечати = Неопределено Или РезультатПечати.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО();
	Контекст.ДокументОснование = ДокументОснование;
	
	Для Каждого ПечатныйДокумент Из РезультатПечати Цикл
		
		ДанныеПечатнойФормы = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПечатнойФормыДляНеформализованногоЭДО();
		
		ДанныеПечатнойФормы.ДвоичныеДанныеФайла = ПечатныйДокумент.ДвоичныеДанные;
		ДанныеПечатнойФормы.НаименованиеФайла = СтрЗаменить(ПечатныйДокумент.ИмяФайла, ".pdf", "");
		ДанныеПечатнойФормы.Расширение = "pdf";
		ДанныеПечатнойФормы.Уникальность = ПечатныйДокумент.ИмяФайла;
		
		Контекст.ДанныеПечатныхФорм.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
	Если Контекст.ДанныеПечатныхФорм.Количество() = 1 Тогда
		
		СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
		
	Иначе
		
		ШаблонВопроса = НСтр("ru='Будет сформировано %1 электронных документа. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, РезультатПечати.Количество());
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОФормированииМногихДокументов", 
			ЭтотОбъект, Контекст);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Формирование документов'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументовОбъектовУчета

// Создает, утверждает, подписывает и отправляет электронный документ. Выполняются только те действия,
// которые действительно требуются для электронного документа (еще не были выполнены и допустимы). Используется как для
// исходящих, так и для входящих документов.
//
// Параметры:
//  ОбъектыУчета       - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета, электронные 
//                       документы которого нужно обработать.
//  ОписаниеОповещения - ОписаниеОповещения - обработчик оповещения, который вызывается по окончании операции.
//						 В качестве результата возвращается ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО().
Процедура ВыполнитьКомплекснуюОбработкуАктуальныхЭлектронныхДокументовОбъектовУчета(ОбъектыУчета, ОписаниеОповещения = Неопределено) Экспорт
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбъектыУчета", ОбъектыУчета);
	ПараметрыОповещения.Вставить("ОповещениеУспешногоЗавершения", ОписаниеОповещения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ОбъектыУчета;
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

// Отклоняет актуальный для переданного учетного объекта электронный документ. Если в процессе выполнения метода 
// возникают ошибки, они обрабатываются библиотекой, вызывающей стороне не возвращаются.
//
// Параметры:
//  ОбъектыУчета       - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета. Имеет смысл 
//  					 передавать только входящие документы.
//  ОписаниеОповещения - ОписаниеОповещения - оповещение вызывается по окончании выполнения операции. В качестве результата
//                       возвращается ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО().
//
Процедура ОтклонитьАктуальныеЭлектронныеДокументыОбъектовУчета(ОбъектыУчета, ОписаниеОповещения) Экспорт
	
	ОбъектыДействий = ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	ОбъектыДействий.ОбъектыУчета = ОбъектыУчета;
	ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область События

Функция ИмяСобытияОбновленияСостоянияЭДО() Экспорт
	Возврат "ОбновитьСостояниеЭД";
КонецФункции

Функция ИмяСобытияОбновленияТекущихДелЭДО() Экспорт
	Возврат "ОбновитьТекущиеДелаЭДО";
КонецФункции

#КонецОбласти

#Область ПросмотрЭлектронногоДокументаОбработчикиСобытий

Процедура ПросмотрЭлектронногоДокументаОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ПерейтиНаСайтЭДО" Тогда
		СтандартнаяОбработка = Ложь;
		СинхронизацияЭДОКлиент.ОткрытьСайтСервиса1СЭДО();		
	ИначеЕсли НавигационнаяСсылка = "ПерейтиНаСайтБизнесСеть" Тогда
		СтандартнаяОбработка = Ложь;
		СинхронизацияЭДОКлиент.ОткрытьСайтСервисаБизнесСеть();		
	ИначеЕсли НавигационнаяСсылка = "ПоказатьПредупреждения" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
		Параметры.Предупреждения = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаПредупреждений);
		
		ПоказатьПроблемыПриОбработкеДокументов(Новый ОписаниеОповещения, Параметры);
	ИначеЕсли НавигационнаяСсылка = "СделатьАктуальнымЭлектронныйДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ЭлектронныйДокумент = Форма.Объект.Ссылка;
		НаборОбъектовУчета = Форма.Основания.ВыгрузитьЗначения();
		
		ИнтеграцияЭДОКлиент.УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, ЭлектронныйДокумент);
		
		Форма.Элементы["ГруппПредупрежденияОНеактуальномЭлектронномДокументе"].Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументов

// Открывает форму исходящего произвольного электронного документа на основании объекта учета.
// 
// Параметры:
// 	Основание - основание ЭД
Процедура ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Основание, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

Процедура ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры, ПараметрыВыполненияДействийПоЭДО = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("СписокДокументовКОтправке, 
	|АдресСведенийОбОшибках,
	|РежимПодписатьОтправить,
	|ИсправляемыйДокумент,
	|Предупреждения,
	|ПараметрыВыполненияДействийПоЭДО");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	ПараметрыФормы.ПараметрыВыполненияДействийПоЭДО = ПараметрыВыполненияДействийПоЭДО;
	
	Если Параметры.Свойство("ОткрытьФормуРучногоФормированияОтветногоТитула")
		И Параметры.ОткрытьФормуРучногоФормированияОтветногоТитула Тогда
			ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула", ПараметрыФормы, Параметры.ФормаВладелец,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ПомощникФормированияДокументов", ПараметрыФормы, Параметры.ФормаВладелец,,,,
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует переданные двоичные данные в произвольный электронный документ.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после создания документа:
//  * ЭлектронныйДокумент - Неопределено - если создание отменено пользователем.
//                        - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на созданный документ.
//                          Если документ не создан, то возвращается пустая ссылка.
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПараметрыФормирования - Структура - описывает стороны электронного документооборота:
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, которому нужно отправить документ.
//  * Организация - ОпределяемыйТип.Организация - организация, от имени которой нужно отправить документ.
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор, по которому отправляется документ.
//  * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - учетные объекты, которые нужно проставить в качестве основания.
//  ПараметрыФайла        - Структура - описывает файл, который нужно отправить:
//  * ИмяФайла - Строка - имя файла вместе с расширением.
//  * АдресХранилища - Строка - адрес временного хранилища, в котором содержатся двоичные данные файла.
//
Процедура НачатьСозданиеЭлектронногоДокументаПоФайлу(ОповещениеОЗавершении, ПараметрыФормирования, ПараметрыФайла) Экспорт
	
	Результат = ИнтерфейсДокументовЭДОВызовСервера.СоздатьЭлектронныйДокументПоФайлу(ПараметрыФормирования, ПараметрыФайла);
	Если Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат.ЭлектронныйДокумент);
		Возврат;
	КонецЕсли;
	
	ОбъектУчета = ?(ЗначениеЗаполнено(ПараметрыФормирования.ОбъектыУчета), ПараметрыФормирования.ОбъектыУчета[0],
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПараметрыФормирования", ПараметрыФормирования);
	Контекст.Вставить("ПараметрыФайла", ПараметрыФайла);
	Контекст.Вставить("ОбъектУчета", ОбъектУчета);
	
	Оповещение = Новый ОписаниеОповещения("НачатьСозданиеПроизвольногоДокументаПослеОбработкиОшибок",
		ИнтерфейсДокументовЭДОКлиент, Контекст);
	ДополнительныеПараметры = Новый Структура("ОбъектыУчета", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета));
	НачатьОбработкуОшибокФормированияДокумента(Оповещение, Результат.Ошибки, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьСозданиеПроизвольногоДокументаПослеОбработкиОшибок(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ПараметрыВыполненияДействийПоЭДО)
		И ЗначениеЗаполнено(Результат.ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов) Тогда
		Подписанты = Результат.ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов[Контекст.ОбъектУчета];
		Контекст.ПараметрыФормирования.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	НачатьСозданиеЭлектронногоДокументаПоФайлу(Контекст.ОповещениеОЗавершении, Контекст.ПараметрыФормирования,
		Контекст.ПараметрыФайла);
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

Процедура ПереформироватьДокумент(ОповещениеОЗавершении, Параметры) Экспорт
	
	Если Параметры.Отказ Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Параметры.ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("Параметры", Параметры);
	Контекст.Вставить("ПараметрыДействийПоЭДО", Параметры.ПараметрыДействийПоЭДО);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ПараметрыПереформирования = Новый Структура;
	ПараметрыПереформирования.Вставить("КонтекстДиагностики", КонтекстДиагностики);	
	ПараметрыПереформирования.Вставить("Контекст", Контекст);
		
	НачатьПереформированиеДокумента(ПараметрыПереформирования);	
	
КонецПроцедуры

// Оформить группу состояния и статусы МЧД.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Подписана - Булево
//  Верна - Булево 
//  Отозвана - Булево
//  ДатаОтзыва - Дата - дата отзыва доверенности из реестра ФНС 
//  СтатусВРеестреФНС - Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//
Процедура ОформитьГруппуСостоянияИСтатусыМЧД(Форма, Подписана, Верна, Отозвана, ДатаОтзыва, СтатусВРеестреФНС) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Элементы.ГруппаСостоянияИСтатусы.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаСостоянияИСтатусы.Видимость = Истина;		
	КонецЕсли;
	
	Элементы.ГруппаНеверна.Видимость = Ложь;
	
	Элементы.ГруппаПометкаОтозвана.Видимость = Отозвана;
	Если Отозвана И (ДатаОтзыва > ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		ТекстЗаголовка = МашиночитаемыеДоверенностиКлиентСервер.ЗаголовокБудетОтозвана();
		Элементы.ДекорацияПометкаОтозвана.Заголовок = ТекстЗаголовка + " " + Формат(ДатаОтзыва, "ДЛФ=Д");
		Элементы.ДекорацияПометкаОтозванаКартинка.Картинка = БиблиотекаКартинок.ОформлениеЗнакВоcклицательныйЗнак;
	ИначеЕсли Отозвана И (ДатаОтзыва <= ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = Форма.ЦветФонаВниманиеМЧД;
	КонецЕсли;
	
	Если Не Подписана Тогда
		Элементы.ДекорацияПодписана.Заголовок = НСтр("ru = 'Требуется подписать'");
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = Форма.ЦветФонаНедействительнаяМЧД;
	Иначе
		Элементы.ДекорацияПодписана.Заголовок = НСтр("ru = 'Подписана'");
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = Форма.ЦветФонаДействительнаяМЧД;		
	КонецЕсли;
	
	Если (Не Верна) И Подписана Тогда
		Элементы.ГруппаСостоянияИСтатусы.ЦветФона = Форма.ЦветФонаНедействительнаяМЧД;
		Элементы.ГруппаНеверна.Видимость = Истина;		
	КонецЕсли;
	
	Если Верна Тогда
		Элементы.ДекорацияНеверна.Заголовок = НСтр("ru = 'Верна'");
		Элементы.ГруппаНеверна.Видимость = Истина;
		Элементы.ДекорацияВернаКартинка.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусВРеестреФНС) Тогда
		ТекстЗаголовка = НСтр("ru = 'В реестре ФНС: %1'");
		Элементы.ГруппаСтатусВРеестреФНС.Видимость = Истина;
		Элементы.ДекорацияСтатусВРеестреФНС.Заголовок = СтрШаблон(ТекстЗаголовка, СтатусВРеестреФНС);
	Иначе
		Элементы.ГруппаСтатусВРеестреФНС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПоказатьПредставлениеОшибокКонтекстаДиагностики(КонтекстДиагностики) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	
	МассивПредставленийОшибок = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		МассивПредставленийОшибок.Добавить(Ошибка.ПодробноеПредставлениеОшибки);	
	КонецЦикла;		
	
	ТекстОшибки = СтрСоединить(МассивПредставленийОшибок, Символы.ПС);
	
	ПоказатьПредупреждение( ,ТекстОшибки, 0, НСтр("ru = 'Ошибка'"));
	
КонецПроцедуры

// Выполнение добавления документа в пакет после корректировки имени файла.
//
// Параметры:
//  ИмяФайла - Строка
//  Параметры - Структура:
//  * ИмяФайла - Строка
//  * АдресХранилища - Строка
//  * ДополнительныеПараметры - Структура - Описание структуры в 
//  									  ЭлектронныйДокументИсходящийЭДО.ФормаПросмотра.ПараметрыДобавленияВПакет
//  						    Неопределено
//
Процедура ДобавитьДокументВПакетИзФайлаНаДискеПослеВыбораФайлаЗавершение(ИмяФайла, Параметры) Экспорт
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Параметры.ИмяФайла = ИмяФайла;
	ПакетыДокументовЭДОКлиент.СформироватьИДобавитьПроизвольныйДокументВПакетПолучитьРеквизиты(
		Параметры.ДополнительныеПараметры, Параметры);
КонецПроцедуры

Процедура НачатьОтправкуПолучениеДокументов(Форма, ОповещениеЗавершения = Неопределено) Экспорт
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Выполняется обмен электронными документами'");
	
	КонтекстОжиданияОперации = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстОжиданияОперации", КонтекстОжиданияОперации);
	ПараметрыОповещения.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ОтправкаПолучениеЭДЗавершение", ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
	
	СинхронизацияЭДОКлиент.ВыполнитьОбменЭлектроннымиДокументами(Форма, КонтекстОжиданияОперации, Оповещение);
	
	#Если Не МобильныйКлиент Тогда
		Если ОжиданиеОперацийБЭДКлиент.ОперацияВыполняется(КонтекстОжиданияОперации) Тогда
			ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Форма, КонтекстОжиданияОперации);	
		КонецЕсли;
	#КонецЕсли	
	
КонецПроцедуры

Процедура ОтправкаПолучениеЭДЗавершение(Результат, Параметры) Экспорт

	ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(Параметры.КонтекстОжиданияОперации);

	Оповестить(ИмяСобытияОбновленияСостоянияЭДО());
	
	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения);
	КонецЕсли;

КонецПроцедуры

// Открывает форму просмотра электронного документа.
// 
// Параметры:
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на ЭлектронныйДокумент.
Процедура ОткрытьЭлектронныйДокумент(ЭлектронныйДокумент, ТолькоПросмотр = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);

	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьДокументыНаПодпись(Параметры) Экспорт
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ДокументыНаПодпись", , Параметры.Источник,
		Параметры.Уникальность, Параметры.Окно);
	
КонецПроцедуры

// Открывает форму просмотра электронного документа.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО
Процедура ОткрытьЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	
	Если ТипЗнч(Сообщение) <> Тип("ДокументСсылка.СообщениеЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ИнтерфейсДокументовЭДОВызовСервера.ЭлектронныйДокументСообщенияЭДО(Сообщение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЭлектронныйДокумент);
	ПараметрыФормы.Вставить("Сообщение", Сообщение);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму просмотра дерева электронных документов по указанному объекту.
// 
// Параметры:
// 	ОбъектУчетаСсылка - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - параметры объекта учета.
Процедура ОткрытьДеревоЭлектронныхДокументов(ОбъектУчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектУчета", ОбъектУчета);
	Если ДополнительныеПараметры = Неопределено Тогда
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы, , ОбъектУчета.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("Окно") И ТипЗнч(ДополнительныеПараметры.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ДополнительныеПараметры.Окно;
		КонецЕсли;		

		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ДеревоЭлектронныхДокументов", ПараметрыФормы,
			ОбъектУчета, ОбъектУчета.УникальныйИдентификатор(), Окно);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новые параметры открытия электронного документа.
// 
// Возвращаемое значение:
//  Структура:
//  * ВидДокумента - Неопределено
//                 - СправочникСсылка.ВидыДокументовЭДО - уточнение вида документа, когда по объекту учета доступно несколько вариантов.
//  * ДанныеКаталога - Строка - адрес временного хранилища данных каталога.
//  * НовыйДокумент - Булево - при Истина поиск текущего электронного документа не производится.
//  * ЗначенияДополнительныхПолей - Произвольный
Функция НовыеПараметрыОткрытияЭлектронногоДокумента() Экспорт
	
	Возврат ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыОткрытияЭлектронногоДокумента();
	
КонецФункции

// Открывает форму просмотра электронного документа по указанному объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - параметры объекта учета.
//  ПараметрыОткрытия - см. НовыеПараметрыОткрытияЭлектронногоДокумента
Процедура ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчета, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	КонецЕсли;
	
	ПараметрыПросмотра = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
		ОбъектУчета, ПараметрыОткрытия);

	ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета) Экспорт
	
	ПараметрыПросмотра = ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОписанию(
		ОписаниеЭлектронногоДокументаОбъектаУчета);
	
	ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра);
	
КонецПроцедуры

Процедура ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы, Оповещение = Неопределено) Экспорт
	
	ИмяФормы = "Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ПодборДокументовУчета";
	Если ТипЗнч(ПараметрыФормы.ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументВходящийЭДО.Форма.ПодборДокументовУчета";	
	КонецЕсли;	
		
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы, ОписаниеОповещения = Неопределено) Экспорт

	Если Не ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоОбработкиДокументов() Тогда
		Возврат; 
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ПеренаправлениеЭлектронныхДокументов", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьКарточкуЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура("Ключ", ЭлектронныйДокумент);
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		ОткрытьФорму("Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаДокумента", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ОткрытьФорму("Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаДокумента", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОбИзмененииСообщения(Сообщение) Экспорт
	
	Параметр = НовыйПараметрыОповещения();
	Параметр.Сообщения.Добавить(Сообщение);
	
	Оповестить(ИмяСобытияОбновленияСостоянияЭДО(), Параметр);
	
КонецПроцедуры

Функция НовыеДанныеПроверкиОповещения() Экспорт
	
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("Сообщение");
	ДанныеПроверки.Вставить("ЭлектронныйДокумент");
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Вызывается из формы просмотра электронного документа.
// Проверяет совпадение переданных в оповещение параметров свойствам формы.
// 
// Параметры:
//  ДанныеПроверки - Структура - данные для проверки необходимости обработки оповещения:
//  	* Сообщение - ДокументСсылка.СообщениеЭДО - электронный документ. 
//  	* ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, 
//  						ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ. 
//  Параметр - Структура - параметр передаваемый в обработку оповещение формы.
//  ОбработатьОповещение - Булево - признак выхода из обработки оповещения формы.
//
Процедура ПриОбработкеОповещенияФормыПросмотраЭД(ДанныеПроверки, Параметр, ОбработатьОповещение) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФлагВыхода = Ложь;
		Если Параметр.Свойство("Сообщения") Тогда
			ФлагВыхода = Истина;
			Если ТипЗнч(Параметр.Сообщения) = Тип("Массив")
				И Параметр.Сообщения.Найти(ДанныеПроверки.Сообщение) <> Неопределено Тогда
				ФлагВыхода = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ФлагВыхода2 = Ложь;
		Если Параметр.Свойство("ЭлектронныеДокументы") Тогда
			ФлагВыхода2 = Истина;
			Если ТипЗнч(Параметр.ЭлектронныеДокументы) = Тип("Массив")
				И Параметр.ЭлектронныеДокументы.Найти(ДанныеПроверки.ЭлектронныйДокумент) <> Неопределено Тогда
					ФлагВыхода2 = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагВыхода И ФлагВыхода2 Тогда
			ОбработатьОповещение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОткрытьНастройкиОтборовСписка(Оповещение, Форма, КомпоновщикНастроек) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Настройка списка'"));
	ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
	ПараметрыФормы.Вставить("Настройки", КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", КомпоновщикНастроек.ФиксированныеНастройки);

	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.НастройкаОтборовСписка", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Процедура СформироватьОтложенныйКонтекстДиагностики(КонтекстДиагностики) Экспорт
	
	ПараметрыПриложения.Вставить(ИмяПараметраОтложенныйКонтекстДиагностики(), КонтекстДиагностики);
	
КонецПроцедуры

Функция ОтложенныйКонтекстДиагностики() Экспорт
		
	Возврат ПараметрыПриложения[ИмяПараметраОтложенныйКонтекстДиагностики()];
	
КонецФункции

Процедура ЗаблокироватьЭлементФормы(Форма, СписокЭлементов, Элемент) Экспорт

	Элемент.Доступность = Ложь;
	СписокЭлементов.Добавить(Элемент.Имя);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПросмотрЭлектронногоДокумента

#Область ОбработкаСобытийВыполненияДействийПоЭДО

// Параметры:
//  Комментарий - Строка
//  ДополнительныеПараметры - Структура:
//    * НаборДействий - Соответствие из КлючИЗначение:
//      ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//      ** Значение - Булево
//    * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    * ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                                       ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    * ПакетыДокументов - Массив из УникальныйИдентификатор
//    * ОсновноеДействие - ПеречислениеСсылка.ДействияПоЭДО
Процедура ВыполнитьДействияПоЭДОПослеВводаСтроки(Комментарий, ДополнительныеПараметры) Экспорт
	
	Если Комментарий = Неопределено Тогда
		Возврат; 
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);

	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = ДополнительныеПараметры.НаборДействий;
	
	Если ДополнительныеПараметры.Свойство("ОбъектыУчета")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ОбъектыУчета) Тогда
		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ДополнительныеПараметры.ОбъектыУчета;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЭлектронныеДокументы") 
		И ЗначениеЗаполнено(ДополнительныеПараметры.ЭлектронныеДокументы) Тогда
		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ДополнительныеПараметры.ЭлектронныеДокументы;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПакетыДокументов")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ПакетыДокументов) Тогда
		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов = ДополнительныеПараметры.ПакетыДокументов;
	КонецЕсли;
		
	ПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
	ПараметрыДействия.Комментарий = Комментарий; 
				
	ПараметрыВыполненияДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(ДополнительныеПараметры.ОсновноеДействие,
		ПараметрыДействия);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
		
КонецПроцедуры

Процедура ПослеВыполненияДействийПоЭДО(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить(ИмяСобытияОбновленияСостоянияЭДО());
	
	Если Результат.Свойство("ОшибкиФормирования") И Результат.ОшибкиФормирования.Количество() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеОбработкиОшибокФормирования",
			ИнтерфейсДокументовЭДОКлиент, ПараметрыОповещения);
		НачатьОбработкуОшибокФормированияДокумента(Оповещение, Результат.ОшибкиФормирования, ПараметрыОповещения);
		
		Возврат;
		
	ИначеЕсли Результат.Свойство("КонтекстДиагностики")
		И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
		
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
		Возврат;
			
	КонецЕсли;
	
	Если ПараметрыОповещения <> Неопределено 
		И ПараметрыОповещения.Свойство("ОповещениеУспешногоЗавершения") Тогда			
			
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОповещениеУспешногоЗавершения, Результат.Итог);
		
	КонецЕсли;	
		
	Оповестить(ИмяСобытияОбновленияТекущихДелЭДО());

КонецПроцедуры

Процедура НачатьОбработкуОшибокФормированияДокумента(ОповещениеОЗавершении, ОшибкиФормирования, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОшибкаНастройкиСОднимКлючем = Ложь;
	ТекущееОписание = ОшибкиФормирования[0].ОписаниеОбъектаУчета; 
	ОшибкаНастройкиСОднимКлючем = ОшибкиФормирования[0].ОтсутствуютНастройки;
	
	Если ОшибкаНастройкиСОднимКлючем Тогда
		Для Каждого Ошибка Из ОшибкиФормирования Цикл
			Описание = Ошибка.ОписаниеОбъектаУчета;
			Если ТекущееОписание.Организация <> Описание.Организация
				Или ТекущееОписание.Контрагент <> Описание.Контрагент
				Или ТекущееОписание.ТипДокумента <> Описание.ТипДокумента
				Или ТекущееОписание.Направление <> Описание.Направление 
				Или Не Ошибка.ОтсутствуютНастройки Тогда
			
				ОшибкаНастройкиСОднимКлючем = Ложь;
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ОшибкаНастройкиСОднимКлючем", ОшибкаНастройкиСОднимКлючем);
	Оповещение = Новый ОписаниеОповещения("ПослеОбработкиОшибокФормирования", ИнтерфейсДокументовЭДОКлиент, Контекст);
	
	Если ОшибкаНастройкиСОднимКлючем Тогда
		
		Если ТекущееОписание.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
			
			ОписаниеВидаВнутреннегоДокумента = НастройкиЭДОКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
			ОписаниеВидаВнутреннегоДокумента.ОбъектУчета = ТекущееОписание.ОбъектУчета;			
		
			НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(ТекущееОписание.Организация,
				ОписаниеВидаВнутреннегоДокумента, Оповещение);
			
		Иначе
			КлючНастроек = ИнтерфейсДокументовЭДОВызовСервера.КлючНастроекОтправкиОбъектаУчета(ТекущееОписание);
			НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(КлючНастроек, Оповещение);				
		КонецЕсли;
		
	Иначе
		
		ПараметрыОбработки = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Структура"),
			ДополнительныеПараметры, Новый Структура);
		
		Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
		Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
		
		Если ПараметрыОбработки.Свойство("ОбъектыУчета") Тогда
			Параметры.СписокДокументовКОтправке = ПараметрыОбработки.ОбъектыУчета;
		КонецЕсли;
		
		Если ПараметрыОбработки.Свойство("ИсправляемыйДокумент") Тогда
			Параметры.ИсправляемыйДокумент = ПараметрыОбработки.ИсправляемыйДокумент;
		КонецЕсли;
		
		Если ПараметрыОбработки.Свойство("ПараметрыВыполненияДействийПоЭДО")
			И ПараметрыОбработки.ПараметрыВыполненияДействийПоЭДО.НаборДействий.Получить(ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать")) = Истина Тогда
			Параметры.РежимПодписатьОтправить = Истина;
		КонецЕсли;
		
		Если ОшибкиФормирования[0].Свойство("ОшибкаФормированияВПрикладнойЧасти") 
			И ОшибкиФормирования[0].ОшибкаФормированияВПрикладнойЧасти <> Неопределено Тогда  
			Параметры.Вставить("ОткрытьФормуРучногоФормированияОтветногоТитула", Истина);
		КонецЕсли;
		
		Если ПараметрыОбработки.Свойство("ПараметрыВыполненияДействийПоЭДО") Тогда
			ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры, ПараметрыОбработки.ПараметрыВыполненияДействийПоЭДО);
		Иначе
			ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиОшибокФормирования(ПараметрыВыполненияДействийПоЭДО, Контекст) Экспорт
	
	Если ПараметрыВыполненияДействийПоЭДО = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
		Результат.Вставить("ОшибкаНастройкиСОднимКлючем", Контекст.ОшибкаНастройкиСОднимКлючем);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоЭДОПослеОбработкиОшибокФормирования(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	Если Результат.ОшибкаНастройкиСОднимКлючем Тогда
		ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения,
			ПараметрыОповещения.ПараметрыВыполненияДействийПоЭДО);
	Иначе
		ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(ОповещениеЗавершения,
			Результат.ПараметрыВыполненияДействийПоЭДО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Открывает электронный документ по параметрам просмотра.
// 
// Параметры:
//  ПараметрыПросмотра - См. ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета
Процедура ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра)
	
	Если ЗначениеЗаполнено(ПараметрыПросмотра.ЭлектронныйДокумент) Тогда
		ОткрытьЭлектронныйДокумент(ПараметрыПросмотра.ЭлектронныйДокумент);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СтатусыЭлектронныхДокументов",
			ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПредварительныйПросмотр = ПараметрыПросмотра.ПредварительныйПросмотр;
	Если ПредварительныйПросмотр = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ отсутствует.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбъектУчета = ПараметрыПросмотра.ОбъектУчета;
	
	Если Не ПредварительныйПросмотр.РезультатПроверкиГотовности.Успех Тогда 
		НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеПодготовкиОбъектаУчета",
			ЭтотОбъект, ПараметрыПросмотра);
		ИнтеграцияЭДОКлиент.ПодготовитьКДокументообороту(НаборОбъектовУчета, ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если ПредварительныйПросмотр.РезультатПодготовкиВложения.Ошибка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПредварительныйПросмотр.РезультатПодготовкиВложения.ТекстОшибки);
		Возврат;
	ИначеЕсли ПредварительныйПросмотр.РезультатПодготовкиВложения.Успех Тогда
		ОткрытьНовыйЭлектронныйДокументПоОписанияФайла(ОбъектУчета,
			ПредварительныйПросмотр.РезультатПодготовкиВложения.АдресОписанияФайла,
			ПредварительныйПросмотр.РезультатПодготовкиВложения.ВидДокумента);
		Возврат;
	КонецЕсли;
	
	Если Не ПредварительныйПросмотр.РезультатПоискаНастроек.Успех Тогда
		ПараметрыПоиска = ПредварительныйПросмотр.РезультатПоискаНастроек.ПараметрыПоиска;

		Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеСозданияНастроек", ЭтотОбъект, ПараметрыПоиска);
		Если ПараметрыПоиска.Направление =  ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
			ОписаниеВида = НастройкиЭДОКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
			ОписаниеВида.ОбъектУчета = ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО.ОбъектУчета;
			НеЗаданОсновнойВид = ПредварительныйПросмотр.РезультатПоискаНастроек.НеУказанОсновнойВидДокумента;
			
			Если Не ЗначениеЗаполнено(ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки.НастройкиВнутреннегоЭДО) Тогда
				НастройкиЭДОКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(
				ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО.Организация, ОписаниеВида, Оповещение);
			
			ИначеЕсли ПредварительныйПросмотр.РезультатПоискаНастроек.ФормированиеЗапрещено Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ФормированиеЗапрещено", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
				Возврат;
			ИначеЕсли НеЗаданОсновнойВид Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ОсновнойВидНеУстановлен", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ПараметрыПоиска.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Интеркампани") Тогда
			Если ПредварительныйПросмотр.РезультатПоискаНастроек.ФормированиеЗапрещено Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ФормированиеЗапрещено", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
			Иначе
				НастройкиЭДОКлиент.ОткрытьНастройкиИнтеркампани(ПараметрыПоиска.КлючНастроекИнтеркампани.Организация);
			КонецЕсли;
			
		Иначе
			Если ПредварительныйПросмотр.РезультатПоискаНастроек.ФормированиеЗапрещено Тогда
				Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
				ОписаниеОбъектаУчета = ПредварительныйПросмотр.РезультатПоискаНастроек.ОписаниеОбъектаУчета;
				СтруктураОшибки = Новый Структура("ОписаниеОбъектаУчета, ФормированиеЗапрещено", ОписаниеОбъектаУчета, Истина);
				ОшибкиФормирования = Новый Массив;
				ОшибкиФормирования.Добавить(СтруктураОшибки);
				
				Параметры.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОшибкиФормирования);
				Параметры.СписокДокументовКОтправке.Добавить(ОбъектУчета);
				
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеРедактированияНастроек",
					ЭтотОбъект, ОбъектУчета);
				ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
			Иначе
				Если ПараметрыПоиска.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий")
					И ПараметрыПоиска.КлючНастроекОтправки = Неопределено Тогда 
						ТекстСообщения = НСтр("ru = 'Электронный документ отсутствует.'");
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						Возврат;
				КонецЕсли;
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(ПараметрыПоиска.КлючНастроекОтправки, Оповещение);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	Иначе
		ПараметрыПоиска = ПредварительныйПросмотр.РезультатПоискаНастроек.ПараметрыПоиска;
		Если ПараметрыПоиска.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Исходящий") Тогда
			Настройка = ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки.НастройкиОтправки;
			
			Если Не Настройка.ГотовностьКОбмену 
				И Настройка.СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог")
				И Настройка.СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP")
				И Настройка.СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
				
				ПараметрыПоиска = ПредварительныйПросмотр.РезультатПоискаНастроек.ПараметрыПоиска;
	
				Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеСозданияНастроек", ЭтотОбъект, ПараметрыПоиска);
				НастройкиЭДОКлиент.НастроитьОбменСКонтрагентом(ПараметрыПоиска.КлючНастроекОтправки, Оповещение);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	ОбработатьРезультатПодготовкиДанныхДляПросмотра(ПредварительныйПросмотр.РезультатПодготовкиДанных,
		ОбъектУчета, ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки);

КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПослеПодготовкиОбъектаУчета(НаборОбъектовУчета, ПараметрыПросмотра) Экспорт
	
	Если Не ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	ОбъектУчета = НаборОбъектовУчета[0];
	ПараметрыПросмотра =
		ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(ОбъектУчета, ПараметрыОткрытия);
	
	ОткрытьЭлектронныйДокументПоПараметрамПросмотра(ПараметрыПросмотра);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПослеСозданияНастроек(НастройкиОтправки, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиФормирования = ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = Параметры.Направление;
	
	Если Параметры.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда

		Настройки = Новый Структура;
		Настройки.Вставить("Организация", НастройкиОтправки.КлючНастройки.Организация);
		Настройки.Вставить("ВидДокумента", НастройкиОтправки.КлючНастройки.ВидВнутреннегоДокумента);
		Настройки.Вставить("ВидПодписи", НастройкиОтправки.ВидЭлектроннойПодписи);
		Настройки.Вставить("МаршрутПодписания", НастройкиОтправки.Маршрут);
		Настройки.Вставить("Подписанты", НастройкиОтправки.Подписанты);

		НастройкиФормирования.НастройкиВнутреннегоЭДО = Настройки;
		
	Иначе
		НастройкиФормирования.НастройкиОтправки = НастройкиОтправки;
	КонецЕсли;
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДОВызовСервера.ПодготовитьДанныеДляПросмотра(
		Параметры.ОбъектУчета, НастройкиФормирования, ПараметрыОткрытия);
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотра(РезультатПодготовкиДанных, Параметры.ОбъектУчета, НастройкиФормирования);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПослеРедактированияНастроек(Результат, ОбъектУчета) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ОткрытьЭлектронныйДокументОбъектаУчета(ОбъектУчета);
	
КонецПроцедуры

// Открывает электронный документ после обработки проблем при формировании.
// 
// Параметры:
//  Результат - Неопределено, см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  Контекст - Структура:
//  * НастройкиФормирования - см. ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки
Процедура ОткрытьЭлектронныйДокументПослеОбработкиПроблемПриФормировании(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектУчета = Результат.ОбъектыДействий.ОбъектыУчета[0];
	ДополнительныеДанные = Результат.ДополнительныеДанныеОбъектов[ОбъектУчета];	
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = НовыеПараметрыОткрытияЭлектронногоДокумента();
	ПараметрыОткрытия.ЗначенияДополнительныхПолей = ДополнительныеДанные;
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДОВызовСервера.ПодготовитьДанныеДляПросмотра(
		ОбъектУчета, Контекст.НастройкиФормирования, ПараметрыОткрытия);
	
	ОбработатьРезультатПодготовкиДанныхДляПросмотра(РезультатПодготовкиДанных, ОбъектУчета, Контекст.НастройкиФормирования);
	
КонецПроцедуры

Процедура ОбработатьРезультатПодготовкиДанныхДляПросмотра(РезультатПодготовкиДанных, ОбъектУчета, НастройкиФормирования)
	
	Если РезультатПодготовкиДанных.Ошибка Тогда
		Контекст = Новый Структура("НастройкиФормирования", НастройкиФормирования);
		Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеОбработкиПроблемПриФормировании", ЭтотОбъект, Контекст);
		
		Параметры = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
		Параметры.АдресСведенийОбОшибках = РезультатПодготовкиДанных.АдресСведенийОбОшибках;
		Параметры.СписокДокументовКОтправке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		
		ПоказатьПроблемыПриОбработкеДокументов(Оповещение, Параметры);
		
		Возврат;
	КонецЕсли;
	
	ОткрытьНовыйЭлектронныйДокументПоПодготовленнымДанным(ОбъектУчета, НастройкиФормирования, РезультатПодготовкиДанных);
	
КонецПроцедуры

// Открывает форму исходящего электронного документа в режиме предварительного просмотра.
// 
// Параметры:
// 	ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 	НастройкиФормирования - см. ИнтерфейсДокументовЭДО.НастройкиФормированияДокументооборотаОбъектаУчета
// 	АдресДанныхДокумента - Строка - адрес данных документа во временном хранилище.
Процедура ОткрытьНовыйЭлектронныйДокументПоПодготовленнымДанным(ОбъектУчета, НастройкиФормирования, РезультатПодготовкиДанных)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектУчета", ОбъектУчета);
	ПараметрыФормы.Вставить("НастройкиФормирования", НастройкиФормирования);
	ПараметрыФормы.Вставить("РезультатПодготовкиДанных", РезультатПодготовкиДанных);
	
	Если НастройкиФормирования.Направление <> ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний")
		И НастройкиФормирования.НастройкиОтправки.Формат = "ON_DOGDOC_1_999_01_01_01_01" Тогда
		
		#Если Не ВнешнееСоединение Тогда
			
			ОбработчикЗавершения = Новый ОписаниеОповещения("ЗагрузитьДоговорнойДокумент101ИзФайлаЗавершение", ЭтотОбъект,
				ПараметрыФормы);
			ПоказатьСправкуПоФорматуПДФ_А3_ЗапроситьФайл(ОбработчикЗавершения);
			
		#КонецЕсли
		
	Иначе
		ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

// Открывает форму исходящего электронного документа в режиме предварительного просмотра.
// 
// Параметры:
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  АдресОписанияФайла - Строка - адрес во временном хранилище на см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  ВидДокумента - Неопределено
//               - СправочникСсылка.ВидыДокументовЭДО - уточнение вида документа, когда по объекту учета доступно несколько вариантов.
Процедура ОткрытьНовыйЭлектронныйДокументПоОписанияФайла(Основание, АдресОписанияФайла, ВидДокумента = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ПараметрыФормы.Вставить("АдресОписанияФайла", АдресОписанияФайла);
	ПараметрыФормы.Вставить("ВидДокумента", ВидДокумента);
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры


Процедура ОткрытьНовыйЭлектронныйДокумент(ЭлектронныйДокументДляКопирования = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ЭлектронныйДокументДляКопирования) Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", ЭлектронныйДокументДляКопирования);
	КонецЕсли;
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы)
		
	ЭтоМобильныйКлиент = Ложь;
	
	#Если МобильныйКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#КонецЕсли
	
	Если ЭтоМобильныйКлиент Тогда
		ИмяФормы = "Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотраМК";
	Иначе
		ИмяФормы = "Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотра";
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("Ключ")
		И ТипЗнч(ПараметрыФормы.Ключ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		Если ЭтоМобильныйКлиент Тогда
			ИмяФормы = "Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраМК";
		Иначе
			ИмяФормы = "Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотра";
		КонецЕсли;
	КонецЕсли;
	
	Уникальность = Истина;
	
	Если ПараметрыФормы.Свойство("ОбъектУчета") Тогда
		Уникальность = ПараметрыФормы.ОбъектУчета;
	ИначеЕсли ПараметрыФормы.Свойство("Уникальность") Тогда
		Уникальность = ПараметрыФормы.Уникальность;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, , Уникальность);
	
КонецПроцедуры

Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

Процедура НачатьПереформированиеДокумента(ПараметрыПереформирования)
	 
	РезультатПереформирования = ИнтерфейсДокументовЭДОВызовСервера.ПереформироватьДокумент(ПараметрыПереформирования.Контекст.Параметры, ПараметрыПереформирования.КонтекстДиагностики);

	Если РезультатПереформирования <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияДопДанныхПриПереформировании", ЭтотОбъект, ПараметрыПереформирования);
		ПолучитьДопДанныеОбъектаУчета(Оповещение, РезультатПереформирования, ПараметрыПереформирования.Контекст.Параметры.ОбъектУчета);
	Иначе
		ПослеПереформирования(Неопределено, ПараметрыПереформирования);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДопДанныеОбъектаУчета(Оповещение, РезультатПереформирования, ОбъектУчета)
	
	ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыПроблемПриОбработкеДокументов();
	ПараметрыОткрытия.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(РезультатПереформирования.ОшибкиФормирования);
	ПараметрыОткрытия.СписокДокументовКОтправке.Добавить(ОбъектУчета); 
	
	ПоказатьПроблемыПриОбработкеДокументов(Оповещение, ПараметрыОткрытия);
		
КонецПроцедуры

Процедура ПослеПолученияДопДанныхПриПереформировании(ДопДанные, Результат) Экспорт

	Если ДопДанные <> Неопределено Тогда
		
		Результат.Контекст.Параметры.Вставить("ДопДанные", ДопДанные.ДополнительныеДанныеОбъектов.Получить(Результат.Контекст.Параметры.ОбъектУчета));	
		
		Если ЗначениеЗаполнено(ДопДанные.МаршрутыПодписанияОбъектов) Тогда
			Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.МаршрутыПодписанияОбъектов 
				= ДопДанные.МаршрутыПодписанияОбъектов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДопДанные.ПодписантыОбъектов) Тогда
			Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.ПодписантыОбъектов = ДопДанные.ПодписантыОбъектов;		
		КонецЕсли;
	
	Иначе
		Возврат;
	КонецЕсли;
	 
	РезультатПереформирования = ИнтерфейсДокументовЭДОВызовСервера.ПереформироватьДокумент(Результат.Контекст.Параметры, Результат.КонтекстДиагностики);
	
	Если РезультатПереформирования <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияДопДанныхПриПереформировании", ЭтотОбъект, Результат);
		ПолучитьДопДанныеОбъектаУчета(Оповещение, РезультатПереформирования, Результат.Контекст.Параметры.ОбъектУчета);
	Иначе
		ПослеПереформирования(Неопределено, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПереформирования(ДопДанные, Результат)

	Если Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Получить(ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Аннулировать")) <> Неопределено Тогда
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Вставить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Подписать"), Истина);
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Вставить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"), Истина);
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.НаборДействий.Вставить(ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отправить"), Истина);
		Результат.Контекст.Параметры.ПараметрыДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Результат.Контекст.Параметры.ЭлектронныйДокумент);
		
		ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Неопределено, Результат.Контекст.Параметры.ПараметрыДействийПоЭДО);
	КонецЕсли;
	
	Результат.Вставить("Переформирован", Истина);						
	ВыполнитьОбработкуОповещения(Результат.Контекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ИспользоватьПрочтениеДокументовЭДО

Процедура ПометитьКакПрочтенные(Список) Экспорт
	
	Сообщения = ПолучитьВыбранныеДокументы(Список);
	КоличествоСообщений = Сообщения.Количество();
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоПрочтенных = 0;
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(Ссылка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			Прочтен = Список.ДанныеСтроки(Ссылка).Прочтен;
			
			Если Прочтен Тогда
				
				ЧислоПрочтенных = ЧислоПрочтенных + 1;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоставитьПометкуПрочтения = Истина;	
	Если КоличествоСообщений = ЧислоПрочтенных Тогда
		ПоставитьПометкуПрочтения = Ложь;
	КонецЕсли;	
	
	Если КоличествоСообщений > 1 Тогда
		Если ПоставитьПометкуПрочтения Тогда
			Состояние(НСтр("ru = 'Документы помечаются как прочтенные. Пожалуйста подождите...'"));
		Иначе
			Состояние(НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'"));
		КонецЕсли;	
	КонецЕсли;
	
	ОповеститьОПрочтении = РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Сообщения, ПоставитьПометкуПрочтения);
	
	Если Не ОповеститьОПрочтении Тогда
		Возврат;
	КонецЕсли;

	Если ПоставитьПометкуПрочтения Тогда
		ШаблонТекста = НСтр("ru = 'Документы помечены как прочтенные (%1)'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Сняты пометки прочтенности документов (%1)'");
	КонецЕсли;

	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, КоличествоСообщений);
	Состояние(ТекстСостояния);

	Список.Обновить();

КонецПроцедуры 

Функция ПолучитьВыбранныеДокументы(Список)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Для каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ПолучитьДанныеТекущейСтрокиСписка(Список, Строка);
		Если ДанныеСтроки <> Неопределено Тогда
			ДокументСсылка = ДанныеСтроки.ЭлектронныйДокумент;
			Результат.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ТекущиеДанные = ПолучитьДанныеТекущейСтрокиСписка(Список, Список.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ДокументСсылка = ТекущиеДанные.ЭлектронныйДокумент;
			Результат.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеТекущейСтрокиСписка(Список, Строка)
		
	Если Строка = Неопределено Или ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Список.ДанныеСтроки(Строка);
	
КонецФункции

#КонецОбласти

#Область ПереопределениеМеханизмовБСП

Процедура СформироватьЭДИзФормыПечатиБСП(Форма, Параметры = Неопределено)
	
	ОбъектыПечати = Форма.ОбъектыПечати.ВыгрузитьЗначения();

	Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыПечати[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	ВидВнутреннегоДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыПечати[0], Команда);
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		
		КлючиНастроекОбъектов = Новый Соответствие;
		КлючНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючНастройки");
		
		ПодписантыОбъектов = Новый Соответствие;
		Подписанты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Подписанты");
		
		МаршрутыПодписанияОбъектов = Новый Соответствие;
		МаршрутПодписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Маршрут");
		
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			
			Если ЗначениеЗаполнено(КлючНастройки) Тогда
				МассивКлючейНастроек = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастройки);
				КлючиНастроекОбъектов.Вставить(ОбъектПечати, МассивКлючейНастроек);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Подписанты) Тогда
				ПодписантыОбъектов = Новый Соответствие;
				ПодписантыОбъектов.Вставить(ОбъектПечати, Подписанты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МаршрутПодписания) Тогда
				МаршрутыПодписанияОбъектов = Новый Соответствие;
				МаршрутыПодписанияОбъектов.Вставить(ОбъектПечати, МаршрутПодписания);
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Сформировать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));				
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета = ОбъектыПечати;
	ПараметрыВыполненияДействийПоЭДО.МаршрутыПодписанияОбъектов = МаршрутыПодписанияОбъектов;
	ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов = ПодписантыОбъектов;
	ПараметрыВыполненияДействийПоЭДО.КлючиНастроекОбъектов = КлючиНастроекОбъектов;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбъектыУчета", ОбъектыПечати);
	ПараметрыОповещения.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);	
	ПараметрыОповещения.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ЗавершениеФормированияЭлектронныхДокументовСобытие", ЭтотОбъект));

	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ПараметрыОповещения);
	
	ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);

КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

Процедура ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд = Неопределено)
	
	КартинкаПодменюЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	Если ОповещенияОСобытияхЭДОКлиент.ЕстьНовыеДокументы() Тогда
		КартинкаПодменюЭДО = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	КонецЕсли;
	ОбновитьОтображениеНовыхЭД(Форма, КартинкаПодменюЭДО, МестоРазмещенияКоманд);

КонецПроцедуры

// Обновление отображения новых электронных документов.
//
// Параметры:
//  Форма					 - Форма - форма отображения.
//  КартинкаЭДО				 - Картинка - изображение оповещения.
//  МестоРазмещенияКоманд	 - Массив, ЭлементФормы - место размещения команд.
//
Процедура ОбновитьОтображениеНовыхЭД(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	Если Не МестоРазмещенияКоманд = Неопределено Тогда
		
		Если ТипЗнч(МестоРазмещенияКоманд) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из МестоРазмещенияКоманд Цикл
				ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд);
			
		КонецЕсли;
		
	Иначе
		
		Элементы = Форма.Элементы;
		
		ПодменюЭДО = ПодменюЭДОФормы(Элементы);
		Если ПодменюЭДО = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ПодменюЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодменюЭДОФормы(ЭлементыФормы)
	
	КомандыЭДО = ЭлементыФормы.Найти("ФормаКоманднаяПанельКомандыЭДО");
	
	Возврат КомандыЭДО;
	
КонецФункции

Процедура ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	ПодменюЭДО = МестоРазмещенияКоманд;
	Если ПодменюЭДО.Вид = ВидГруппыФормы.ГруппаКнопок Или ПодменюЭДО.Картинка = КартинкаЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюЭДО.Картинка = КартинкаЭДО;
	Если Не КартинкаЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО Тогда
		ПодменюЭДО.Подсказка = НСтр("ru = 'В сервисе 1С-ЭДО есть новые документы'");
	Иначе
		ПодменюЭДО.Подсказка = НСтр("ru = 'Команды ЭДО'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик общих для форм документа, справочника, списка событий
// 
// Параметры:
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//  ПараметрыОповещения - см. ПараметрыОповещенияЭДО_ФормаДокумента
//                      - см. ПараметрыОповещенияЭДО_ФормаСправочника
//                      - см. ПараметрыОповещенияЭДО_ФормаСписка
//
Процедура ОбщаяОбработкаОповещения(ИмяСобытия, Параметр, Источник, ПараметрыОповещения)
	
	Форма = ПараметрыОповещения.Форма;
	Если ИмяСобытия = ОповещенияОСобытияхЭДОКлиентСервер.ИмяОповещенияОНовыхДокументах() Тогда
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Открыть файл, если нужно, сделав визуализацию ЭП
Процедура ОткрытьФайл(ТекущийФайл, УникальныйИдентификатор, ДляРедактирования) Экспорт
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
	
	ДанныеФайла = ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайла(ТекущийФайл, ПараметрыДанныхФайла,, ДляРедактирования);
	
	Если ДанныеФайла.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для открытия файла, необходимо снять пометку удаления с документа'"));
	Иначе
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ДляРедактирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьВводРеквизитовПроизвольногоДокумента(Оповещение, Форма, ОписаниеФайла = Неопределено, ОбъектУчета = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		Параметры.Вставить("ОписаниеФайла", ОписаниеФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		Параметры.Вставить("ОбъектУчета", ОбъектУчета);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗаполнениеРеквизитовПроизвольногоДокумента", Параметры, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Обработка результата помещения файла.
//
// Параметры:
//  ВыборВыполнен			 - Булево - результат выполнения выбора.
//  АдресФайла				 - Строка - адрес хранилища.
//  ВыбранноеИмяФайла		 - Строка - имя файла.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ЗагрузитьДанныеИзФайлаОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не ВыборВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	
	Если ВРег(Расширение) <> ВРег("zip")
			И ВРег(Расширение) <> ВРег("xml") Тогда
		ТекстСообщения = НСтр("ru = 'Некорректный формат файла.
									|Выберите файл с расширением ""zip"" или ""xml"".'");
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураОбмена = Новый Структура();
	СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Входящий"));
	СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураОбмена.Вставить("ИмяФайла",     ВыбранноеИмяФайла);
	СтруктураОбмена.Вставить("АдресХранилищаФайла",     АдресФайла);
	СтруктураОбмена.Вставить("АдресХранилищаФайлаДопДанных", "");
	СтруктураОбмена.Вставить("АдресХранилищаФайлаКартинок",  "");
	СтруктураОбмена.Вставить("СсылкаНаДокумент",        СсылкаНаДокумент);
	СтруктураОбмена.Вставить("ИмяФайла",                ВыбранноеИмяФайла);
	
	Если ВРег(Расширение) = ВРег("zip") Тогда
		
		ОписаниеФайла = Новый Структура;

		ОписаниеФайла.Вставить("ИмяФайла", ВыбранноеИмяФайла);
		ОписаниеФайла.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(АдресФайла));
		
		ОписаниеФайловДокументаПакета = ИнтерфейсДокументовЭДОВызовСервера.ОписаниеФайловДокументаПакета(ОписаниеФайла);
		
		Если ЗначениеЗаполнено(ОписаниеФайловДокументаПакета) Тогда
			СтруктураОбмена.Вставить("АдресХранилищаФайла", ПоместитьВоВременноеХранилище(
				ОписаниеФайловДокументаПакета.ДанныеОсновногоФайла.ДвоичныеДанные, УникальныйИдентификатор));
			СтруктураОбмена.Вставить("ИмяФайла", ОписаниеФайловДокументаПакета.ДанныеОсновногоФайла.ИмяФайла);	
			СтруктураОбмена.Вставить("АдресХранилищаФайлаДопДанных", ПоместитьВоВременноеХранилище(
				ОписаниеФайловДокументаПакета.ДанныеФайлаДопДанных.ДвоичныеДанные, УникальныйИдентификатор));
			Если ЗначениеЗаполнено(ОписаниеФайловДокументаПакета.ДанныеФайлаКартинок) Тогда
				СтруктураОбмена.Вставить("АдресХранилищаФайлаКартинок", ПоместитьВоВременноеХранилище(
					ОписаниеФайловДокументаПакета.ДанныеФайлаКартинок.ДвоичныеДанные, УникальныйИдентификатор));
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
	ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.ЗагрузкаПросмотрЭлектронногоДокумента", Параметры, ,
		СтруктураОбмена.УникальныйИдентификатор);
	
	
КонецПроцедуры

// Сохраняет переданные файлы. Для каждого файла после сохранения записывает факт выгрузки электронного документа.
//
// Параметры:
//  СоответствиеФайловВыгрузки - Соответствие - Файлы, которые нужно сохранить:
//   * Ключ - Структура - Данные файла выгрузки.
//   * Значение - Строка - Адрес во внутреннем хранилище, куда помещен файл
//
Процедура СохранитьФайлыВыгрузкиЭД(Знач СоответствиеФайловВыгрузки)
	
	Если СоответствиеФайловВыгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначениеФайлВыгрузки Из СоответствиеФайловВыгрузки Цикл
		
		ДанныеФайлаВыгрузки = КлючЗначениеФайлВыгрузки.Ключ;
		СсылкаНаДвоичныеДанныеФайла = КлючЗначениеФайлВыгрузки.Значение;
		
		РаботаСФайламиБЭДКлиент.СохранитьФайлВыгрузкиКак(ДанныеФайлаВыгрузки, СсылкаНаДвоичныеДанныеФайла);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяПараметраОтложенныйКонтекстДиагностики() 
		
	Возврат "ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстДиагностики";
	
КонецФункции

Функция НовыйПараметрыОповещения()
	
	ДанныеПроверки = Новый Структура;
	ДанныеПроверки.Вставить("Сообщения", Новый Массив);
	ДанныеПроверки.Вставить("ЭлектронныеДокументы", Новый Массив);
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Параметры:
//  ОбъектыДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  ОписаниеОповещения - ОписаниеОповещения
Процедура ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбъектыДействий.ЭлектронныеДокументы);
	ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбъектыДействий.ПакетыДокументов);
	ДополнительныеПараметры.Вставить("ОбъектыУчета", ОбъектыДействий.ОбъектыУчета);
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения", ОписаниеОповещения);
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отклонить"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Отклонить"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗагрузитьДоговорнойДокумент101ИзФайлаЗавершение(ПомещенныйФайл, ПараметрыФормы) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФайлДанных - Файл данных в формате XML
	ФайлДанных = ПолучитьИзВременногоХранилища(ПараметрыФормы.РезультатПодготовкиДанных.АдресОписанияСообщения);
	ДДФайлаPDF = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	
	КоллекцияВложенийПДФ = Новый КоллекцияВложенийPDF; 
	КоллекцияВложенийПДФ.Добавить(ФайлДанных.Данные.Документ.ИмяФайла, ФайлДанных.Данные.Документ.ДвоичныеДанные,
	, ТипСвязиВложенияPDF.Данные);
	
	ЗаписьПДФ = Новый ЗаписьPDF;
	ПотокДанныхФайлаПДФ = Новый ПотокВПамяти;
	
	ЗаписьДанных = Новый ЗаписьДанных(ПотокДанныхФайлаПДФ);
	ЗаписьДанных.Записать(ДДФайлаPDF);
	ЗаписьДанных.Закрыть();

	ЗаписьПДФ.Открыть(ПотокДанныхФайлаПДФ);
	ЗаписьПДФ.ЗаписатьВложения(КоллекцияВложенийПДФ);
	ЗаписьПДФ.Закрыть();
	ДДИзмененные = ПотокДанныхФайлаПДФ.ЗакрытьИПолучитьДвоичныеДанные();
	
	ФайлДанных.Данные.Документ.ИмяФайла = СтрЗаменить(ФайлДанных.Данные.Документ.ИмяФайла, ".xml", ".pdf");
	ФайлДанных.Данные.Документ.ДвоичныеДанные = ДДИзмененные;
	
	УдалитьИзВременногоХранилища(ПараметрыФормы.РезультатПодготовкиДанных.АдресОписанияСообщения);
	
	ПараметрыФормы.РезультатПодготовкиДанных.АдресОписанияСообщения = 
		ПоместитьВоВременноеХранилище(ФайлДанных, Новый УникальныйИдентификатор);
	
	ОткрытьФормуЭлектронногоДокумента(ПараметрыФормы);

КонецПроцедуры

Процедура ЗапроситьФайлДляДоговорногоДокумента101(ОбработчикЗавершения)
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файл PDF'") + " (*.pdf)|*.pdf";
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите договорной документ'");
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикЗавершения, ПараметрыЗагрузки);
	
КонецПроцедуры

Процедура ЗапроситьФайлДляДоговорногоДокумента101Завершение(ПомещенныйФайл, ПараметрКоманды) Экспорт

	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ПараметрКоманды, ДвоичныеДанныеФайла);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДополнительныеФайлы", Соответствие);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрКоманды);
	
	СформироватьПодписатьОтправитьЭДЗавершить(МассивПараметров, ДополнительныеПараметры);

КонецПроцедуры

// Показать пользователю справку по формату PDF/A3.
// 
// Параметры:
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - будет вызвана после ответа на вопрос.
//
Процедура ПоказатьСправкуПоФорматуПДФ_А3_ЗапроситьФайл(ОписаниеОповещенияОЗавершении)
	
	ПараметрыПриложенияПДФ_А3 = ПараметрыПриложенияПДФ_А3();
	БольшеНеЗадаватьЭтотВопрос = ПараметрыПриложенияПДФ_А3.БольшеНеЗадаватьЭтотВопрос;
	
	Если НЕ БольшеНеЗадаватьЭтотВопрос Тогда
		
		ТекстВопроса = 
			НСтр("ru = 'Договорной документ составляется из двух частей:
			|1. Файла договора в формате PDF, выбираемого с компьютера.
			|2. Автоматически генерируемого XML-вложения, сформированного по данным документа учета.
			|Сейчас будет предложено выбрать файл договора в формате PDF.
			|
			|Продолжить?'");
			
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Формат договорного документа PDF/A3'");
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Истина;
		ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
		
		ИмяПроцедуры = "ПослеОтветаСправкаПоФорматуПДФ_А3";
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			ОписаниеОповещения, 
			ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет, 
			ПараметрыВопроса);
		
	Иначе

		ЗапроситьФайлДляДоговорногоДокумента101(ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры приложения по формату PDF/A3.
// 
// Возвращаемое значение:
//  см. НовыйПараметрыПриложенияПриложенияПДФ_А3
//
Функция ПараметрыПриложенияПДФ_А3()
	
	ИмяПараметра = "ЭлектронноеВзаимодействие.СправкаПоФорматуПДФ_А3";
	ПараметрыПриложенияПДФ_А3 = 
		ПараметрыПриложения[ИмяПараметра]; // см. НовыйПараметрыПриложенияПриложенияПДФ_А3
	Если ПараметрыПриложенияПДФ_А3 = Неопределено Тогда
		ПараметрыПриложенияПДФ_А3 = НовыйПараметрыПриложенияПриложенияПДФ_А3();
		ПараметрыПриложения.Вставить(ИмяПараметра, ПараметрыПриложенияПДФ_А3); // Соответствие
	КонецЕсли;
	
	Возврат ПараметрыПриложенияПДФ_А3;
	
КонецФункции

// Новые параметры приложения по формату PDF/A3.
// 
// Возвращаемое значение:
//  Структура - Новый параметры приложения по формату PDF/A3:
//    * БольшеНеЗадаватьЭтотВопрос - Булево
//
Функция НовыйПараметрыПриложенияПриложенияПДФ_А3()
	
	Параметры = Новый Структура;
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// После ответа на вопрос.
// 
// Параметры:
//  Результат - Структура:
//  * Значение - Булево
//  
//  ДополнительныеПараметры - Структура:
//  * ОписаниеОповещенияОЗавершении - ОписаниеОповещения
//
Процедура ПослеОтветаСправкаПоФорматуПДФ_А3(Результат, ДополнительныеПараметры) Экспорт

	ПараметрыПриложенияПДФ_А3 = ПараметрыПриложенияПДФ_А3();

	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Значение = КодВозвратаДиалога.Да Тогда
		
		ПараметрыПриложенияПДФ_А3.БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
		ЗапроситьФайлДляДоговорногоДокумента101(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;

КонецПроцедуры

#Область СозданиеИсходящегоЭДОИзПФ

// Обрабатывает подключаемую команду отправки по ЭДО в форме печати БСП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ПечатьДокументов
//  Команда - КомандаФормы - выполняемая команда.
//  ПродолжитьВыполнениеНаСервере - Булево - при установке значения Истина, выполнение обработчика будет продолжено в
//                                           серверном контексте в процедуре УправлениеПечатьюПереопределяемый.ПечатьДокументовПриВыполненииКоманды.
//  ДополнительныеПараметры - Произвольный - параметры, которые необходимо передать в серверный контекст.
Процедура ВыполнитьКоманду_ЭДОСформироватьПроизвольныйДокумент(Форма, Команда,
		ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры)
	
	ОбъектыПечати = Форма.Параметры.ПараметрКоманды;
	ДокументОснование = Неопределено;
	Если ЗначениеЗаполнено(ОбъектыПечати) И ТипЗнч(ОбъектыПечати) = Тип("Массив") Тогда
		ДокументОснование = ОбъектыПечати[0];
	КонецЕсли;
	
	ДанныеПечатныхФорм = ДанныеПечатныхФорм(Форма);
	
	Если ДанныеПечатныхФорм.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО();
	Контекст.ДокументОснование = ДокументОснование;
	Контекст.ДанныеПечатныхФорм = ДанныеПечатныхФорм;
	
	СуществуютЭД = ИнтеграцияЭДОВызовСервера.ЭлектронныеДокументыОбъектовУчета(ДокументОснование).Количество() <> 0;
		
	Если СуществуютЭД Тогда
		
		ОткрытьФорму("Обработка.ИнтерфейсДокументовЭДО.Форма.СписокСформированныхДокументов", Контекст, 
			Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	Если ДанныеПечатныхФорм.Количество() = 1 Тогда
		
		СформироватьНеформализованныеЭДОПоКонтекстуОтправки(Контекст);
		
	Иначе
		
		ШаблонВопроса = НСтр("ru='Будет сформировано %1 электронных документа. Продолжить?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, ДанныеПечатныхФорм.Количество());
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОФормированииМногихДокументов", 
			ЭтотОбъект, Контекст);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Формирование документов'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает собранные параметры печатных форм
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ПечатьДокументов
// 
// Возвращаемое значение:
//  Массив Из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПечатнойФормыДляНеформализованногоЭДО
Функция ДанныеПечатныхФорм(Форма)
	
	ДанныеФорм = Новый Массив();
	
	НастройкиПечатныхФорм = Форма.НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Печатать", Истина));
	
	Если НастройкиПечатныхФорм.Количество() = 0 Тогда
		Возврат ДанныеФорм;
	КонецЕсли;
	
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		
		ДанныеПечатнойФормы = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПечатнойФормыДляНеформализованногоЭДО();
		
		ТабличныйДокумент = Форма[НастройкаПечатнойФормы.ИмяРеквизита];
		
		Если ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПечатнойФормы.ТабличныйДокумент = ТабличныйДокумент;
		ДанныеПечатнойФормы.НаименованиеФайла = НастройкаПечатнойФормы.Название;
		ДанныеПечатнойФормы.Расширение = "pdf";
		ДанныеПечатнойФормы.Уникальность = НастройкаПечатнойФормы.Название;
		
		ДанныеФорм.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
	Возврат ДанныеФорм;
	
КонецФункции

// Открывает форму выбора печатной формы объекта для отправки по ЭДО
// 
// Параметры:
//  Контекст - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйКонтекстОтправкиПечатныхФормПоЭДО
//  КомандыПечати - Массив Из Структура - Коллекция команд печати
//
Процедура ВыбратьПечатнуюФормуДляОтправкиНеформализованногоЭДО(Контекст, КомандыПечати)
	
	СписокКоманд = Новый СписокЗначений();
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		СписокКоманд.Добавить(КомандаПечати, КомандаПечати.Представление);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКомандыПечатиДляОтправкиНеформализованногоЭДО",
		ЭтотОбъект, Контекст);
	СписокКоманд.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите печатную форму для формирования'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти