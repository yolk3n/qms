////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Библиотеки интеграции с 1С:Документооборотом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
//
// Параметры:
//   Описание - Структура:
//
//     * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//     * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//     * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//     * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                      Обработчики обновления таких библиотек должны быть вызваны ранее
//                                      обработчиков обновления данной библиотеки.
//                                      При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                      порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                      в процедуре ПриДобавленииПодсистем общего модуля
//                                      ПодсистемыКонфигурацииПереопределяемый.
//     * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                      последовательно в интервале от номера версии информационной базы до номера
//                                      версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                      обработки первой порции данных передает управление следующему обработчику, а после
//                                      выполнения последнего обработчика цикл повторяется заново.
//     * ЗаполнятьДанныеНовыхПодсистемПриПереходеСДругойПрограммы - Булево - если установить Истина, то при переходе с
//                                      другой программы будут автоматически выполнены обработчики начального заполнения
//                                      новых подсистем. При описании обработчика обновления можно при необходимости
//                                      отключить его выполнение, указав свойство НеВыполнятьПриПереходеСДругойПрограммы.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаИнтеграцииС1СДокументооборотом";
	Описание.Версия = "3.0.2.3";
	Описание.ИдентификаторИнтернетПоддержки = "DMIL";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                 ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия              = "1.1.0.0";
//	Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//	Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ЗаполнитьОбработчикиРазделенныхДанных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПроверитьСоответствиеПравилИнтеграцииМетаданным";
	Обработчик.Комментарий = НСтр("ru = 'Проверка правил интеграции с 1С:Документооборотом'");
	
	// Обработчик ПриОбновленииИнформационнойБазы не должен отрабатывать в режиме сервиса,
	// поэтому его регистрация отсутствует в методе ЗаполнитьОбработчикиРазделенныхДанных
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПриОбновленииИнформационнойБазы";
	Обработчик.Комментарий = НСтр("ru = 'Проверка соответствия определяемых типов и плана обмена'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПерейтиНаВерсию_1_1_6_1";
	Обработчик.Комментарий = НСтр("ru = 'Обновление правил интеграции с 1С:Документооборотом'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.8.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПерейтиНаВерсию_1_1_8_4";
	Обработчик.Комментарий = НСтр("ru = 'Обновление правил интеграции с 1С:Документооборотом'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.12.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПерейтиНаВерсию_1_1_12_2";
	Обработчик.Комментарий = НСтр("ru = 'Обновление правил интеграции с 1С:Документооборотом'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПерейтиНаВерсию_3_0_1_1";
	Обработчик.Комментарий = НСтр("ru = 'Обновление правил интеграции с 1С:Документооборотом'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПерейтиНаВерсию_3_0_2_1";
	Обработчик.Комментарий = НСтр("ru = 'Обновление правил интеграции с 1С:Документооборотом'");
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
//
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример:
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при определении режима обновления данных.
//
// Параметры:
//   РежимОбновленияДанных - Строка - режим обновления.
//   СтандартнаяОбработка - Булево - Ложь, если нужно изменить режим по умолчанию.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет обработчик разделенных данных, зависимый от изменения неразделенных данных.
//
// Параметры:
//   Параметры - Структура - структура параметров обработчиков:
//     * РазделенныеОбработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ЗаполнитьОбработчикиРазделенныхДанных(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Обработчики = Параметры.РазделенныеОбработчики;
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыБИД.ПроверитьСоответствиеПравилИнтеграцииМетаданным";
		Обработчик.Комментарий = НСтр("ru = 'Проверка правил интеграции с 1С:Документооборотом'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, проверяющий соответствие правил интеграции метаданным конфигурации.
//
Процедура ПроверитьСоответствиеПравилИнтеграцииМетаданным() Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПроверитьСоответствиеПравилИнтеграцииМетаданным();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при обновлении ИБ.
//
Процедура ПриОбновленииИнформационнойБазы() Экспорт
	
	Ошибки = Новый Массив;
	
	ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(Ошибки);
	ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(Ошибки);
	
	Если Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибок = СтрСоединить(Ошибки, Символы.ПС);
	ВызватьИсключение ТекстОшибок;
	
КонецПроцедуры

// Сверяет состав определяемых типов между собой, вызывая исключения.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(Ошибки) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(
		Ошибки,
		СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаВсеСсылки =
		Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Представление();
	ИмяТипаДокументыОбъекты =
		Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый.Представление();
	ИмяТипаСправочникиОбъекты =
		Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый.Представление();
	
	ТипыОбъектовПоддерживающихИнтеграцию =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
	Для Каждого ТипЗначения Из ТипыОбъектовПоддерживающихИнтеграцию Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ОбъектМетаданных = Неопределено
			Или (Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
				И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
				И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
				И Не ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных)
				И Не ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных)) Тогда
			
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но интеграция данного объекта с ДО не поддерживается.'"),
					ТипЗначения,
					ИмяТипаВсеСсылки));
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но в него должны быть включены только ссылочные типы.'"),
					ТипЗначения,
					ИмяТипаВсеСсылки));
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
			Тип = Тип(СтрЗаменить(ПолноеИмя, ".", "Объект."));
			Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый.Тип.СодержитТип(Тип) Тогда
				Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Справочник ""%1"" выбран в определяемом типе ""%2"", но отсутствует в типе ""%3"".'"),
					ОбъектМетаданных.Имя,
					ИмяТипаВсеСсылки,
					ИмяТипаСправочникиОбъекты));
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
			Тип = Тип(СтрЗаменить(ПолноеИмя, ".", "Объект."));
			Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый.Тип.СодержитТип(Тип) Тогда
				Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Документ ""%1"" выбран в определяемом типе ""%2"", но отсутствует в типе ""%3"".'"),
					ОбъектМетаданных.Имя,
					ИмяТипаВсеСсылки,
					ИмяТипаДокументыОбъекты));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТипЗначения Из Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый.Тип.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ОбъектМетаданных = Неопределено Или Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но в него должны быть включены только документы.'"),
					ТипЗначения,
					ИмяТипаДокументыОбъекты));
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но в него должны быть включены только типы %3.'"),
					ТипЗначения,
					ИмяТипаДокументыОбъекты,
					"ДокументОбъект"));
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Тип = Тип(СтрЗаменить(ПолноеИмя, ".", "Ссылка."));
		Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.СодержитТип(Тип) Тогда
			Ошибки.Добавить(СтрШаблон(
				НСтр("ru = 'Документ ""%1"" выбран в определяемом типе ""%2"", но отсутствует в типе ""%3"".'"),
				ОбъектМетаданных.Имя,
				ИмяТипаДокументыОбъекты,
				ИмяТипаВсеСсылки));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТипЗначения Из Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый.Тип.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ОбъектМетаданных = Неопределено Или Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но в него должны быть включены только справочники.'"),
					ТипЗначения,
					ИмяТипаСправочникиОбъекты));
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но в него должны быть включены только типы %3.'"),
					ТипЗначения,
					ИмяТипаСправочникиОбъекты,
					"СправочникОбъект"));
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Тип = Тип(СтрЗаменить(ПолноеИмя, ".", "Ссылка."));
		Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.СодержитТип(Тип) Тогда
			Ошибки.Добавить(СтрШаблон(
				НСтр("ru = 'Справочник ""%1"" выбран в определяемом типе ""%2"", но отсутствует в типе ""%3"".'"),
				ОбъектМетаданных.Имя,
				ИмяТипаСправочникиОбъекты,
				ИмяТипаВсеСсылки));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сверяет определяемые типы с планом обмена, вызывая исключения.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(Ошибки) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(
		Ошибки,
		СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаВсеСсылки =
		Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Представление();
	ИмяТипаПланОбмена =
		Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.Представление();
	
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.Состав Цикл
		
		ОбъектМетаданных = ЭлементСостава.Метаданные;
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
			
			Ошибки.Добавить(СтрШаблон(
					НСтр("ru = 'Объект ""%1"" есть в плане обмена ""%2"", но интеграция данного объекта с ДО не поддерживается.'"),
					ПолноеИмя,
					ИмяТипаПланОбмена));
			Продолжить;
		КонецЕсли;
		
		Тип = Тип(СтрЗаменить(ПолноеИмя, ".", "Ссылка."));
		Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.СодержитТип(Тип) Тогда
			Ошибки.Добавить(СтрШаблон(
				НСтр("ru = 'Объект ""%1"" есть в плане обмена ""%2"", но отсутствует в типе ""%3"".'"),
				ПолноеИмя,
				ИмяТипаПланОбмена,
				ИмяТипаВсеСсылки));
		КонецЕсли;
		
	КонецЦикла;
	
	ТипыОбъектовПоддерживающихИнтеграцию =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
	Для Каждого ТипЗначения Из ТипыОбъектовПоддерживающихИнтеграцию Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.Состав.Содержит(ОбъектМетаданных) Тогда
			Ошибки.Добавить(СтрШаблон(
				НСтр("ru = 'Тип ""%1"" выбран в определяемом типе ""%2"", но отсутствует в составе плана обмена ""%3"".'"),
				ТипЗначения,
				ИмяТипаВсеСсылки,
				ИмяТипаПланОбмена));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВыраженияВПравилахИнтеграции(МодифицированныеМетоды)
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаЗаполненияРеквизитовДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовДО КАК ПравилаЗаполненияРеквизитовДО
		|ГДЕ
		|	НЕ ПравилаЗаполненияРеквизитовДО.Ссылка.ПометкаУдаления
		|	И ПравилаЗаполненияРеквизитовДО.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПравилаЗаполненияРеквизитовИС.Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовИС КАК ПравилаЗаполненияРеквизитовИС
		|ГДЕ
		|	НЕ ПравилаЗаполненияРеквизитовИС.Ссылка.ПометкаУдаления
		|	И ПравилаЗаполненияРеквизитовИС.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)");
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	
	Пока ВыборкаПравила.Следующий() Цикл
		
		ПравилоОбъект = ВыборкаПравила.Ссылка.ПолучитьОбъект();
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		БылиИзменения = Ложь;
		
		Для Каждого Строка Из ПравилоОбъект.ПравилаЗаполненияРеквизитовДО Цикл
			Если Строка.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				ОбновитьВыражениеНаВстроенномЯзыке(
					Строка.ВычисляемоеВыражение,
					БылиИзменения,
					МодифицированныеМетоды);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ПравилоОбъект.ПравилаЗаполненияРеквизитовИС Цикл
			Если Строка.Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				ОбновитьВыражениеНаВстроенномЯзыке(
					Строка.ВычисляемоеВыражение,
					БылиИзменения,
					МодифицированныеМетоды);
			КонецЕсли;
		КонецЦикла;
		
		Если БылиИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВыражениеНаВстроенномЯзыке(ВычисляемоеВыражение, БылиИзменения, МодифицированныеМетоды)
	
	Для Каждого Метод Из МодифицированныеМетоды Цикл
		Если СтрНайти(ВычисляемоеВыражение, Метод.Ключ) Тогда
			БылиИзменения = Истина;
			ВычисляемоеВыражение = СтрЗаменить(ВычисляемоеВыражение, Метод.Ключ, Метод.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 1.1.6.1. Обновление наименований правил интеграции
// и установка реквизита Ключевой у видов документов ДО.
//
Процедура ПерейтиНаВерсию_1_1_6_1() Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПерейтиНаВерсию_1_1_6_1();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 1.1.8.4. Установка флага "Не создавать связи по ссылкам".
//
Процедура ПерейтиНаВерсию_1_1_8_4() Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПерейтиНаВерсию_1_1_8_4();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 1.1.12.2. Установка режима изменения данных проведенного документа.
//
Процедура ПерейтиНаВерсию_1_1_12_2() Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПерейтиНаВерсию_1_1_12_2();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 3.0.1.1. Замена ИнтеграцияС1СДокументооборот на
// ИнтеграцияС1СДокументооборотБазоваяФункциональность в выражениях на встроенном языке в правилах интеграции.
//
Процедура ПерейтиНаВерсию_3_0_1_1() Экспорт
	
	ОбновитьВыраженияВПравилахИнтеграции(МодифицированныеМетоды_3_0_1_1());
	
КонецПроцедуры

Функция МодифицированныеМетоды_3_0_1_1()
	
	Методы = Новый Соответствие;
	
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ВерсияСервиса(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ВыполнитьЗапрос(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьУникальныйИдентификатор(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗависимостиКонстант(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаписатьОбъекты(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъекты(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаполнитьЗначенияСвойствXDTO(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьЗначенияСвойствXDTO(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитФормыИзXDTO(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитФормыИзXDTO(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗначениеРеквизитаПоОбъектуXDTO(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.НайтиСписокОбъектов(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.НовоеИсходящееПисьмо(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.НовоеИсходящееПисьмо(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ОписаниеВебСервисов(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОписаниеВебСервисов(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПоддерживаетсяАутентификацияОС(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПоддерживаетсяАутентификацияОС(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПодходящийТип(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПодходящийТип(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПолучитьНовыйОбъект(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНовыйОбъект(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПолучитьОбъект(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПолучитьОбъекты(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъекты(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПолучитьПрокси(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьПрокси(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПользователюРазрешеноИспользованиеИнтеграции(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПометитьНаУдалениеСнятьПометку(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПометитьНаУдалениеСнятьПометкуОбъекта(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПредельноеКоличествоВыбираемыхОбъектов(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредельноеКоличествоВыбираемыхОбъектов(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПредопределенноеЗначениеДО(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПредставлениеТипаОбъектаXDTO(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредставлениеТипаОбъектаXDTO(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ПроверитьТип(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СвойствоСуществует(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СвойствоУстановлено(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СерверРаботаетПодWindows(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СерверРаботаетПодWindows(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СогласованВ1СДокументооборот(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СогласованВ1СДокументооборот(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СоздатьObjectID(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СоздатьНовыйОбъект(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьНовыйОбъект(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СоздатьОбъект(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СокращенноеНаименованиеКонфигурации(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СсылкаИзUUID(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.СсылкиПоВнешнимОбъектам(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкиПоВнешнимОбъектам(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ТекущийПользовательДокументооборота(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ТекущийПользовательДокументооборота(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЭтоОбъектноеЗначение(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЭтоОбъектноеЗначение(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЭтоОбъектноеСвойство(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЭтоОбъектноеСвойство(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязь(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ЗаписатьПредупреждение(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаписатьПредупреждение(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ИмяОбъектаМетаданныхПоТипу(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяОбъектаМетаданныхПоТипу(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ИмяТипаXDTO(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ИмяТипаИС(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаИС(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ИспользоватьИнтеграцию(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПарольИзвестен(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПарольИзвестен(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПроверитьПодключение(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ТипИС(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ТипИС(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязь(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьСвязь(");
	
	Возврат Методы;
	
КонецФункции

// Обработчик обновления БИД на версию 3.0.2.1. Замена ИнтеграцияС1СДокументооборот на
// ИнтеграцияС1СДокументооборотБазоваяФункциональность в выражениях на встроенном языке в правилах интеграции.
//
Процедура ПерейтиНаВерсию_3_0_2_1() Экспорт
	
	ОбновитьВыраженияВПравилахИнтеграции(МодифицированныеМетоды_3_0_2_1());
	
КонецПроцедуры

Функция МодифицированныеМетоды_3_0_2_1()
	
	Методы = Новый Соответствие;
	
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаполнитьXDTOПодпись(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьXDTOПодпись(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ЗаполнитьТаблицуМенеджеровПечатиОбъекта(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьТаблицуМенеджеровПечатиОбъекта(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.МенеджерыПечати(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.МенеджерыПечати(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.КомандыПечатиФормы(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.ТипФайлаСохраняемойПечатнойФормыПоУмолчанию(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ТипФайлаСохраняемойПечатнойФормыПоУмолчанию(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборот.РасширениеСохраняемойПечатнойФормы(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.РасширениеСохраняемойПечатнойФормы(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.МаксимальныйРазмерПередаваемогоФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.МаксимальныйРазмерПередаваемогоФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьФайлыКопированием(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьФайлыКопированием(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.НовыеПараметрыСозданияФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьХранимыеФайлы(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьХранимыеФайлы(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьФайлИПоместитьВХранилище(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ДвоичныеДанныеФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДвоичныеДанныеФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ДвоичныеДанныеФайлов(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДвоичныеДанныеФайлов(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ОсвободитьФайл(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОсвободитьФайл(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ЗахватитьФайл(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗахватитьФайл(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьСведенияОРедактированииФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.СохранитьСведенияОРедактированииФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьСведенияОРедактированииФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ОписаниеФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОписаниеФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПоместитьВХранилищеПодписиФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПоместитьВХранилищеПодписиФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлыПоВладельцу(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ВерсииФайла(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсииФайла(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.СделатьВерсиюАктивной(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СделатьВерсиюАктивной(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьПоляФайлаДаннымиВладельца(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьПоляФайлаДаннымиВладельца(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьСписокПодписейФайлов(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьСписокПодписейФайлов(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьСписокПодписейСервер(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаполнитьСписокПодписейСервер(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодписиНаСервере(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПроверитьПодписиНаСервере(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПодписатьДокумент(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПодписатьДокумент(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.УдалитьПодписиДокумента(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьПодписиДокумента(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьОбъектыДляПодписи(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектыДляПодписи(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьЭлектронныеЦифровыеПодписи(");
	Методы.Вставить(
		"ИнтеграцияС1СДокументооборотВызовСервера.ПрисоединитьПечатнуюФормуОбъектаКДокументу(",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрисоединитьПечатнуюФормуОбъектаКДокументу(");
	
	Возврат Методы;
	
КонецФункции

#КонецОбласти