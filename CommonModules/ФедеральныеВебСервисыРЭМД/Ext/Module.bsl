#Область ПрограммныйИнтерфейс

// Обработкичи веб-сервиса callback для РЭМД. Обрабатывают вызовы от РЭМД.
#Область ОбработчикиОперацийВебСервиса

// Обработчик вызова от РЭМД в который приходит информация о результате регистрации электронного мед. документа
// отправленого в функциии ЗарегистрироватьДокументВРЭМД().
Функция registerDocumentResult(Параметры, Заголовок) Экспорт
	
	ВходящийПакет_ = Параметры;
	
	DOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(ВходящийПакет_);
	ПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИРЭМД();
	
	// Идентификатор сообщения.
	MessageID_ = Неопределено;
	
	// Идентификатор сообщения в ответ на которое пришел запрос.
	
	Заголовок_ = "<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:" + Строка(Новый УникальныйИдентификатор) + "</MessageID>";

	relatesToMessage_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:relatesToMessage/text()");
	
	relatesToMessage_ = стрЗаменить(ВыбратьЗаполненное(relatesToMessage_, ""), "uuid:", "");

	ИдентификаторДокумента_ = Неопределено;
	ЭтоСообщениеОтРМИС_ = Ложь;
	
	Если Не ЗначениеЗаполнено(relatesToMessage_) Тогда
		Если стрНайти(ВходящийПакет_, "{localUid:") = 0 Тогда
			сообщение_ = "Не удалось получить relatesToMessage";
			ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);
			Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);
		Иначе
			// Сообщение от Региона, не от РЭМД.
			ЭтоСообщениеОтРМИС_ = Истина;
			ИдентификаторДокумента_ = ПолучитьТекстМеждуСтроками(ВходящийПакет_, "{localUid:", "}");
			
			Если Не ЗначениеЗаполнено(ИдентификаторДокумента_) Тогда
				ВызватьИсключение "В сообщении от РМИС не найден localUid ЭМД, для которого сообщение прислано.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Статус процесса регистраци ЭМД (success, error).
	Статус_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:status/text()");

	Если Не ЗначениеЗаполнено(Статус_) Тогда
		сообщение_ = "Не удалось получить status";
		ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);

		Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);
	КонецЕсли;
	

	ТекстОшибки_ = "";
	emdrId_ = Неопределено;
	Если НРег(Статус_) = "success" Тогда
	
		Если ЭтоСообщениеОтРМИС_ Тогда
		
			ИдентификаторДокументаИЭМК_ = ПолучитьТекстМеждуСтроками(ВходящийПакет_, "{ИдентификаторДокументаИЭМК:", "}");
			ИдентификаторКонтейнераДокументаИЭМК_ = ПолучитьТекстМеждуСтроками(ВходящийПакет_, "{ИдентификаторКонтейнераДокументаИЭМК:", "}");
			
			Если ЗначениеЗаполнено(ИдентификаторДокументаИЭМК_) Тогда
				Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьИдентификаторДокументаИЭМК(
					ИдентификаторДокумента_,
					ИдентификаторДокументаИЭМК_,
					ИдентификаторКонтейнераДокументаИЭМК_
				);
			КонецЕсли;

		КонецЕсли;
		
		// Присвоенный идентификатор ЭМД.
		emdrId_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:registryItem/emdrns3:emdrId/text()");
		// Присвоенный идентификатор ЭМД.
		documentVersion_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:registryItem/emdrns3:documentVersion/text()");
		// Дата регистрации ЭМД.
		registrationDate_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:registryItem/emdrns3:registrationDate/text()");
		// Хранить до.
		storeTillDate_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:registryItem/emdrns3:storeTillDate/text()");
		
		ХранитьДо_ = Неопределено;
		Если ЗначениеЗаполнено(storeTillDate_) Тогда
			Попытка
				ХранитьДо_ = ПолучитьДатуИзСтроки(storeTillDate_, Истина);
			Исключение
				ХранитьДо_ = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(relatesToMessage_) Тогда
			ИдентификаторДокумента_ = ПолучитьИдентификаторДокументаПоИдентификаторуСообщенияОРегистрацииДокумента(relatesToMessage_);

			Если ЗначениеЗаполнено(ИдентификаторДокумента_) И ЗначениеЗаполнено(emdrId_) Тогда
				Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьEmdrId(ИдентификаторДокумента_, emdrId_, documentVersion_, ХранитьДо_);
			КонецЕсли;
		КонецЕсли;
		
		// Прочитаем предупреждения, если есть.
		ДеталиОтвета_ = DOM_.ПолучитьЭлементыПоИмени("registrationWarnings");
		
		Для Каждого ДетальОтвета_ Из ДеталиОтвета_ Цикл
			ТэгиItem_ = ДетальОтвета_.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item_ Из ТэгиItem_ Цикл
				Код_ = ПолучитьСодержимоеЭлемента(Item_, "code");
				Сообщение_ = ПолучитьСодержимоеЭлемента(Item_, "message");
				
				Текст_ = стрШаблон("Предупреждение = '%1', Код = '%2'", Сообщение_, Код_);
				ЗаписатьВЖурналРегистрации(Текст_);
				
				ТекстОшибки_ = ТекстОшибки_ + ?(ЗначениеЗаполнено(ТекстОшибки_), Символы.ПС, "") + Текст_;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли НРег(Статус_) = "error" Тогда
		
		ДеталиОтвета_ = DOM_.ПолучитьЭлементыПоИмени("errors");
		
		Для Каждого ДетальОтвета_ Из ДеталиОтвета_ Цикл
			ТэгиItem_ = ДетальОтвета_.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item_ Из ТэгиItem_ Цикл
				Код_ = ПолучитьСодержимоеЭлемента(Item_, "code");
				Сообщение_ = ПолучитьСодержимоеЭлемента(Item_, "message");
				
				Текст_ = стрШаблон("Ошибка = '%1', Код = '%2'", Сообщение_, Код_);
				ЗаписатьВЖурналРегистрации(Текст_);
				
				ТекстОшибки_ = ТекстОшибки_ + ?(ЗначениеЗаполнено(ТекстОшибки_), Символы.ПС, "") + Текст_;
				
				Если ВРег(Код_) = "NOT_UNIQUE_PROVIDED_ID" И Не ЭтоСообщениеОтРМИС_ Тогда
					ИдентификаторДокумента_ = ПолучитьИдентификаторДокументаПоИдентификаторуСообщенияОРегистрацииДокумента(relatesToMessage_);
					
					Если ЗначениеЗаполнено(ИдентификаторДокумента_) Тогда
						ДанныеДокумента_ = Справочники.ФедеральныеВебСервисыЭМД.ПолучитьДанныеДокументаПоEmdrId(Неопределено, ИдентификаторДокумента_);
						
						Если ДанныеДокумента_<> Неопределено И Не ЗначениеЗаполнено(ДанныеДокумента_.emdrId) Тогда
							// Документ уже зарегистрирован в РЭМД, но в ИБ нет его emdrid (вызов на коллбэк с асинхронным ответом от РЭМД почему-то не был получен).

							// Попытаемся получить emdrid из РЭМД, что бы сохранить его в справочник.
							П_ = Новый Массив;
							П_.Добавить(ДанныеДокумента_.Ссылка);
							ИмяПроцедуры_ = "ФедеральныеВебСервисыРЭМД.НайтиДокументВРЭМД";
							ФоновыеЗадания.Выполнить(ИмяПроцедуры_, П_,, ИмяПроцедуры_);

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				

			КонецЦикла;
		КонецЦикла;
		
		Если ЭтоСообщениеОтРМИС_ Тогда
			Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьТекстОшибкиИЭМК(
				ИдентификаторДокумента_, 
				"Ошибка обмена с ИЭМК от РМИС: " + ВыбратьЗаполненное(ТекстОшибки_, "ошибка без текста")
			);
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(relatesToMessage_) Тогда
		Ошибка_ = ЗаписатьДанныеОтветаВРегистр(relatesToMessage_, ТекущаяДатаСеанса(), MessageID_, emdrId_, ТекстОшибки_, "");
		
		Если Ошибка_ <> Неопределено Тогда
			ЗаписатьВЖурналРегистрации(Ошибка_.Сообщение, УровеньЖурналаРегистрации.Ошибка);
			Возврат Новый Структура("Тело,Заголовок", СоздатьОтветСОшибкой(Ошибка_.Код, Ошибка_.Сообщение, ТекстXMLCallbackResponse(Истина)), Заголовок_);
		КонецЕсли;
	КонецЕсли;

	Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);

КонецФункции

// Обработчик вызова от РЭМД с запросом на получение электронного мед. документа.
Функция getDocumentFile(Параметры, Заголовок) Экспорт
	
	ВходящийПакет_ = Параметры;
	
	DOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(ВходящийПакет_);
	ПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИРЭМД();
	
	emdrId_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:emdrId/text()");
	localUid_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:localUid/text()");
	
	Заголовок_ = "<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:" + Строка(Новый УникальныйИдентификатор) + "</MessageID>";

	Если Не ЗначениеЗаполнено(emdrId_) и Не ЗначениеЗаполнено(localUid_) Тогда
		сообщение_ = "Не удалось получить emdrId и localUid";
		ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело,Заголовок", СоздатьОтветСОшибкой("NO_EMDRID", сообщение_, ТекстXMLGetDocumentFileResponse(Истина)), Заголовок_);
	КонецЕсли;

	ДанныеФайла_ = Справочники.ФедеральныеВебСервисыЭМД.ПолучитьДанныеДокументаПоEmdrId(emdrId_, localUid_);

	Если ДанныеФайла_ = Неопределено И ЗначениеЗаполнено(localUid_) И ЗначениеЗаполнено(emdrId_)
		И стрНайти(emdrid_, "rmis:uuid:") = 0 // идентификатор не от РМИС
	Тогда
		// Возможно РЭМД запрашивает документ, который был ранее зарегистрирован, но асинхронный ответ,
		// содержащий emdrid, не был получен и поэтому используя его документ найти сейчас не удалось. Найдем по localUid
		// и заодно запишем emdrid.
		ДанныеФайла_ = Справочники.ФедеральныеВебСервисыЭМД.ПолучитьДанныеДокументаПоEmdrId(Неопределено, localUid_);
		
		Если ДанныеФайла_ <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ДанныеФайла_.emdrId) Тогда
				documentVersion_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:documentVersion/text()");

				Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьEmdrId(ДанныеФайла_.Ссылка, emdrId_, ВыбратьЗаполненное(documentVersion_, Неопределено), Неопределено);
				
			ИначеЕсли ДанныеФайла_.emdrId <> emdrId_ Тогда
				сообщение_ = стрШаблон("Получен запрос getDocumentFile для emdrId: %1, localUid: %2, при этом у найденного документа в ИБ иной emdrid: %3", emdrId_, localUid_, ДанныеФайла_.emdrId);
				ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);
				
				ДанныеФайла_ = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеФайла_ = Неопределено Тогда
		сообщение_ = стрШаблон("Не удалось найти данные о файле по идентификаторам emdrId: %1, localUid: %2", emdrId_, localUid_);
		ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело,Заголовок", СоздатьОтветСОшибкой("RECORD_NOTFOUND_FOR_EMDRID", сообщение_, ТекстXMLGetDocumentFileResponse(Истина)), Заголовок_);
	КонецЕсли;

	РеквизитыОрганизации_ = ПолучитьOIDИНаменованиеМедицинскойОрганизации(ДанныеФайла_.ДокументИнформационнойБазы);

	Шаблон_ = ТекстXMLGetDocumentFileResponse();

	Данные_ = Новый Соответствие;
	
	Данные_["[ИДЕНТИФИКАТОР_МИС_В_РЭМД]"] = ПолучитьИдентифакаторМИС_В_РЭМД();
	Данные_["[OID_MO]"] = РеквизитыОрганизации_.КодOIDМедицинскойОрганизации;
	Данные_["[DOCUMENT_ID]"] = ДанныеФайла_.ИдентификаторДокумента;

	// Тело документа.
	ПолныйПуть_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(ДанныеФайла_.ОтносительныйПутьКФайлуЭМД);
	ДанныеДокумента_ = ПолучитьТелоФайлаИКонтрольнуюСумму(ПолныйПуть_);
	
	Данные_["[ТЕЛО_ДОКУМЕНТА]"] = ДанныеДокумента_.ТелоДокументаBase64;
	Данные_["[КОНТРОЛЬНАЯ_СУММА_ДОКУМЕНТА]"] = Формат(ДанныеДокумента_.КонтрольнаяСумма,"ЧГ=0");

	ТелоОтвета_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);
	
	Возврат Новый Структура("Тело,Заголовок", ТелоОтвета_, Заголовок_);
КонецФункции

// Обработчик вызова от РЭМД в который приходит документ ранее запрошенный из РЭМД через вызов demandContent.
Функция sendDocumentFile(Параметры, Заголовок) Экспорт
	ВходящийПакет_ = Параметры;
	
	
	//DOMЗаголовок_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(Заголовок);

	DOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(ВходящийПакет_);
	ПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИРЭМД();
	
	// Идентификатор сообщения.
	MessageID_ = Неопределено;
	//MessageID_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOMЗаголовок_, ПИ_, "/*/adr:MessageID/text()");
	
	Заголовок_ = "<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:" + Строка(Новый УникальныйИдентификатор) + "</MessageID>";

	// ???
	//MessageID_ = стрЗаменить(ВыбратьЗаполненное(MessageID_, ""), "uuid:", "");
	//
	//Если Не ЗначениеЗаполнено(MessageID_) Тогда
	//	сообщение_ = "Не удалось получить MessageID";
	//	ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);
	//	Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);
	//КонецЕсли;

	//ЗаписатьВЖурналРегистрации("MessageID = " + MessageID_);
	
	// Идентификатор сообщения в ответ на которое пришел запрос.
	relatesToMessage_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:relatesToMessage/text()");
	
	relatesToMessage_ = стрЗаменить(ВыбратьЗаполненное(relatesToMessage_, ""), "uuid:", "");

	Если Не ЗначениеЗаполнено(relatesToMessage_) Тогда
		сообщение_ = "Не удалось получить relatesToMessage";
		ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);

		Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);
	КонецЕсли;


	// Статус процесса регистраци ЭМД (success, error).
	Статус_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:status/text()");

	Если Не ЗначениеЗаполнено(Статус_) Тогда
		сообщение_ = "Не удалось получить status";
		ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);

		Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);
	КонецЕсли;
	

	ТекстОшибки_ = "";
	ПутьКФайлу_ = "";
	Если НРег(Статус_) = "success" Тогда
		
		// Тело документа в base64.
		ТелоДокументаB64_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:file/emdrns3:data/text()");
		// Контрольная сумма.
		КонтрольнаяСумма_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:file/emdrns3:checksum/text()");
		
		ДокументДД_ = Base64Значение(ТелоДокументаB64_);
		
		//ПутьКФайлу_ = "C:\1C\Федеральные регистры\temp\" + relatesToMessage_ + ".pdf";
		ПутьКХранилищу_ = Константы.ФедеральныеВебСервисыПутьКАрхивуЭМД.Получить();
		
		Если Не ЗначениеЗаполнено(ПутьКХранилищу_) Тогда
			ВызватьИсключение "Не заполнен путь к хранилищу файлов ЭМД.";
		КонецЕсли;
		
		ПутьКВременномуКаталогу_ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКХранилищу_) + "temp";
		Файл_ = Новый Файл(ПутьКВременномуКаталогу_);
		Если Не Файл_.Существует() Тогда
			СоздатьКаталог(ПутьКВременномуКаталогу_);
		КонецЕсли;
		
		// Определим это PDF или XML
		ЧтениеДанных_ = Новый ЧтениеДанных(ДокументДД_, , , , "");
		ПервыеСимволы_ = ЧтениеДанных_.ПрочитатьСимволы(4);
		
		Если ВРег(ПервыеСимволы_) = "%PDF" Тогда
			РасширениеФайла_ = "pdf";
		Иначе
			РасширениеФайла_ = "xml";
		КонецЕсли;

		ПутьКФайлу_ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКВременномуКаталогу_) + Строка(relatesToMessage_) + "." + РасширениеФайла_;
		ДокументДД_.Записать(ПутьКФайлу_);
		
	ИначеЕсли НРег(Статус_) = "error" Тогда
		
		ДеталиОтвета_ = DOM_.ПолучитьЭлементыПоИмени("errors");
		
		Для Каждого ДетальОтвета_ Из ДеталиОтвета_ Цикл
			ТэгиItem_ = ДетальОтвета_.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item_ Из ТэгиItem_ Цикл
				Код_ = ПолучитьСодержимоеЭлемента(Item_, "code");
				Сообщение_ = ПолучитьСодержимоеЭлемента(Item_, "message");
				
				Текст_ = стрШаблон("Ошибка = '%1', Код = '%2'", Сообщение_, Код_);
				ЗаписатьВЖурналРегистрации(Текст_);
				
				ТекстОшибки_ = ТекстОшибки_ + ?(ЗначениеЗаполнено(ТекстОшибки_), Символы.ПС, "") + Текст_;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	Ошибка_ = ЗаписатьДанныеОтветаВРегистр(relatesToMessage_, ТекущаяДатаСеанса(), MessageID_, Неопределено, ТекстОшибки_, ПутьКФайлу_);
	
	Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(), Заголовок_);

КонецФункции

// Обработчик вызова от РЭМД уведомляющий о появлении документа в РЭМД как-то связанного с каким-то документом в нашей МИС.
Функция sendNotice(Параметры, Заголовок) Экспорт
	
	ВходящийПакет_ = Параметры;
	
	
	DOM_ = ФедеральныеВебСервисыСервер.ПостроитьDOM(ВходящийПакет_);
	ПИ_ = ФедеральныеВебСервисыПовтИсп.РазыменовательПИРЭМД();
	
	initiatingOrg_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:initiatingOrg/text()");
	docKind_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:document/emdrns3:docKind/text()");
	emdrId_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:document/emdrns3:emdrId/text()");
	version_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:document/emdrns3:version/text()");
	isNewDoc_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:isNewDoc/text()");

	Заголовок_ = "<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:" + Строка(Новый УникальныйИдентификатор) + "</MessageID>";

	Если Не ЗначениеЗаполнено(emdrId_) Тогда
		сообщение_ = "Не удалось получить emdrId из сообщения sendNoticeRequest.";
		ЗаписатьВЖурналРегистрации(сообщение_, УровеньЖурналаРегистрации.Ошибка);
		Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(Ложь), Заголовок_);
	КонецЕсли;
	
	МассивTargetEmdrId_ = Новый Массив;
	МассивTargetType_ = Новый Массив;
	
	Номер_ = 1;
	Пока Истина Цикл
		targetEmdrId_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:association[" + Номер_ + "]/emdrns3:target/text()");
		targetType_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(DOM_, ПИ_, "/*/emdrns3:association[" + Номер_ + "]/emdrns3:type/text()");
		
		Если ЗначениеЗаполнено(targetEmdrId_) Тогда
			МассивTargetEmdrId_.Добавить(targetEmdrId_);
			МассивTargetType_.Добавить(targetType_);
		Иначе
			Прервать;
		КонецЕсли;
		
		Номер_ = Номер_ + 1;
		
	КонецЦикла;
	
	// Добавим связь в справочник ФедеральныеВебСервисыЭМД.
	Номер_ = 0;
	Для Каждого targetEmdrId_ Из МассивTargetEmdrId_ Цикл
		ДобавитьСвязьВЭМД(targetEmdrId_, emdrId_, docKind_, version_, МассивTargetType_[Номер_], initiatingOrg_);
		Номер_ = Номер_ + 1;
	КонецЦикла;
	
	Возврат Новый Структура("Тело,Заголовок", ТекстXMLCallbackResponse(Ложь), Заголовок_);
КонецФункции

#КонецОбласти

#Область Закрытый_интерфейс
/// Получение значения константы ФедеральныеВебСервисыРЭМДАдресСервисаЗапросов.
//
// Возвращаемое значение:
//   Строка - адрес веб-сервиса федерального РЭМД.
///
Функция ПолучитьАдресВебСервисаДляЗапросовВРЭМД() Экспорт
	
	ЗначениеКонстанты_ = КешСеанса.ПолучитьЗначение(
		"ФедеральныеВебСервисыСервер.ПолучитьКонстанту",
		"ФедеральныеВебСервисыРЭМДАдресСервисаЗапросов"
	);
	
	Возврат ЗначениеКонстанты_;
	
КонецФункции

// Получение значения константы ФедеральныеВебСервисыРЭМДАдрес - адрес коллбэка приема запросов от РЭМД.
Функция ПолучитьАдресКоллбэка() Экспорт
	
	ЗначениеКонстанты_ = КешСеанса.ПолучитьЗначение(
		"ФедеральныеВебСервисыСервер.ПолучитьКонстанту",
		"ФедеральныеВебСервисыРЭМДАдрес"
	);
	
	Возврат ЗначениеКонстанты_;
	
КонецФункции

/// Получение значения константы ФедеральныеВебСервисыИЭМКАдресСервисаЗапросов.
//
// Возвращаемое значение:
//   Строка - адрес веб-сервиса федерального ИЭМК (ГИП).
///
Функция ПолучитьАдресВебСервисаДляЗапросовВИЭМК() Экспорт
	
	ЗначениеКонстанты_ = КешСеанса.ПолучитьЗначение(
		"ФедеральныеВебСервисыСервер.ПолучитьКонстанту",
		"ФедеральныеВебСервисыИЭМКАдресСервисаЗапросов"
	);
	
	Возврат ЗначениеКонстанты_;
	
КонецФункции

// Получает значение настройки лимита количества запросов (значение константы ФедеральныеВебСервисыРЭМДЛимитЗапросовНаРегистрациюДокументов).
Функция ПолучитьЛимитКоличестваЗапросовНаРегистрациюДокументов() Экспорт
	
	ЗначениеКонстанты_ = КешСеанса.ПолучитьЗначение(
		"ФедеральныеВебСервисыСервер.ПолучитьКонстанту",
		"ФедеральныеВебСервисыРЭМДЛимитЗапросовНаРегистрациюДокументов"
	);
	
	Возврат ЗначениеКонстанты_;
	
КонецФункции

#КонецОбласти

// Функции для вызова федеральных веб-сервисов.
#Область ВызовФедВебСервисов

// Федеральный регистр электронных медицинских документов (РЭМД)
#Область РЭМД

// Регистрирует документ в федеральном регистре РЭМД. Операция веб-сервиса registerDocument.
//
// Параметры:
//  ЭМДСсылка  - СправочникСсылка.ФедеральныеВебСервисыЭМД - Ссылка на ЭМД в хранилище документов для РЭМД, используется для получения данных, если не передан 2й параметр.
//  ДанныеДляРегистрацииДокумента  - Соответствие - Данные для подстановки в шаблон сообщения. Ключ - имя поля в шаблоне, значение - значение для подстановки.
//
// Возвращаемое значение:
//   Булево   - Истина в случае успеха, иначе Ложь.
//
Функция ЗарегистрироватьДокументВРЭМД(ЭМДСсылка, ДанныеДляРегистрацииДокумента = Неопределено) Экспорт

	Если ДанныеДляРегистрацииДокумента = Неопределено Тогда
		ДокументСсылка_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭМДСсылка, "ДокументИнформационнойБазы");
		Если Не ЗначениеЗаполнено(ДокументСсылка_) Тогда
			ВызватьИсключение стрШаблон("В элементе ""%1"" не заполнен реквизит ДокументИнформационнойБазы", ЭМДСсылка);
		КонецЕсли;
		ДанныеДляРегистрации_ = ПолучитьДанныеДляРегистрацииДокументаВРЭМД(ДокументСсылка_, ЭМДСсылка);
	Иначе
		ДанныеДляРегистрации_ = ДанныеДляРегистрацииДокумента;
	КонецЕсли;
	
	Шаблон_ = ТекстXMLРегистрацияДокументаВРЭМД(
		ЗначениеЗаполнено(ДанныеДляРегистрации_.Получить("[PATIENT_ID]")), 
		ЗначениеЗаполнено(ДанныеДляРегистрации_.Получить("[СНИЛС_НОМЕР]")), 
		Ложь,
		ДанныеДляРегистрации_.Получить("[КОЛИЧЕСТВО_ПОДПИСЕЙ]")
	);
	
	Если ДанныеДляРегистрации_.Получить("OID_MO") = Неопределено Тогда

		ДокументСсылка_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭМДСсылка, "ДокументИнформационнойБазы");
		РеквизитыОрганизации_ = ПолучитьOIDИНаменованиеМедицинскойОрганизации(ДокументСсылка_);

		Если Не ЗначениеЗаполнено(РеквизитыОрганизации_.КодOIDМедицинскойОрганизации) Тогда
			
			ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации_.Наименование;
		КонецЕсли;

		//OID мед. организации.
		ДанныеДляРегистрации_["[OID_MO]"] = РеквизитыОрганизации_.КодOIDМедицинскойОрганизации;
	КонецЕсли;
	
	Если ДанныеДляРегистрации_.Получить("[MSG_ID]") = Неопределено Тогда
		// уникальное в пределах МО строковое значение.
		MSG_ID_ = Строка(Новый УникальныйИдентификатор());
		ДанныеДляРегистрации_["[MSG_ID]"] = MSG_ID_;
	Иначе
		MSG_ID_ = ДанныеДляРегистрации_.Получить("[MSG_ID]");
	КонецЕсли;
	
	Если ДанныеДляРегистрации_.Получить("ИДЕНТИФИКАТОР_МИС_В_РЭМД") = Неопределено Тогда
		// Идентификатор МИС в РЭМД.
		ДанныеДляРегистрации_["[ИДЕНТИФИКАТОР_МИС_В_РЭМД]"] = ПолучитьИдентифакаторМИС_В_РЭМД();
	КонецЕсли;

	Если ДанныеДляРегистрации_.Получить("ИДЕНТИФИКАТОР_МИС_В_ИПС") = Неопределено Тогда
		// Зарегистрированный идентификатор клиента.
		ИдентификаторМИС_В_ИПС_ = ПолучитьИдентификаторМИС_В_ИПС();
	Иначе
		ИдентификаторМИС_В_ИПС_ = ДанныеДляРегистрации_.Свойство("ИДЕНТИФИКАТОР_МИС_В_ИПС");
	КонецЕсли;
	
	ТелоСообщения_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, ДанныеДляРегистрации_);
	
	Адрес_ = ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес_) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;

	ЗаписатьДанныеОтправленногоСообщенияВРегистр(
		MSG_ID_, 
		ТекущаяДатаСеанса(), 
		ДанныеДляРегистрации_.Получить("[DOCUMENT_ID]")
	);

	ОтветОтСервера_ = СформироватьИОтправитьSOAPЗапрос(
		Адрес_,
		ТелоСообщения_,
		ИдентификаторМИС_В_ИПС_, // Зарегистрированный идентификатор клиента.
		MSG_ID_, // Уникальный идентификатор сообщения.
		"registerDocument"
	);
	
	ОтветСтруктурой_ = РазобратьОтветРЭМД(ОтветОтСервера_);
	
	Если ОтветСтруктурой_.ЕстьОшибка Тогда
		
		Сообщить("Ошибка при регистрации документа в РЭМД.");
		Для Каждого Деталь_ Из ОтветСтруктурой_.Детали Цикл
			Сообщить(стрШаблон("%1 %2", Деталь_.Код, Деталь_.Сообщение));
		КонецЦикла;
		
		Возврат ОтветСтруктурой_;
	Иначе
		УстановитьФлагСообщениеУспешноОтправлено(
			MSG_ID_
		);
	КонецЕсли;


	Возврат Истина;

КонецФункции

// Выполняет поиск зарегистрированных в РЭМД документов по критериям. Операция веб-сервиса searchRegistryItem.
// ДатаСозданияИлиСтруктура - Дата (дата создания документа) или Структура с реквизитами
//               ДатаСозданияДокументаНачало, ДатаСозданияДокументаОкончание, ДатаРегистрацииДокументаНачало, ДатаРегистрацииДокументаОкончание
//               причем наличие всех реквизитов не обязательно, в структуру допустимо поместить только нужные.
Функция ПоискДокументовВРЭМД(
			Знач КодOIDМедицинскойОрганизации = Неопределено,
			Знач УидДокумента = Неопределено,
			Знач КодВидаДокумента = Неопределено,
			Знач НомерДокумента = Неопределено,
			Знач ДатаСозданияИлиСтруктура = Неопределено,
			Знач УидПациента = Неопределено,
			Знач СНИЛС = Неопределено,
			Знач НомерСтраницы = Неопределено,
			Знач Директивы = ""
		) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);

	ДатаСозданияИлиСтруктура_ = Новый Структура("ДатаСозданияДокументаНачало, ДатаСозданияДокументаОкончание, ДатаРегистрацииДокументаНачало, ДатаРегистрацииДокументаОкончание");
	
	Если ТипЗнч(ДатаСозданияИлиСтруктура) = Тип("Дата") Тогда

		ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаНачало = НачалоДня(ДатаСозданияИлиСтруктура);
		ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаОкончание = КонецДня(ДатаСозданияИлиСтруктура);

	ИначеЕсли ТипЗнч(ДатаСозданияИлиСтруктура) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ДатаСозданияИлиСтруктура_, ДатаСозданияИлиСтруктура);
	КонецЕсли;
	
	
	Шаблон_ = ТекстXMLПоискДокументовВРЭМД(
		ЗначениеЗаполнено(КодOIDМедицинскойОрганизации),
		ЗначениеЗаполнено(УидДокумента),
		ЗначениеЗаполнено(КодВидаДокумента),
		ЗначениеЗаполнено(НомерДокумента),
		ЗначениеЗаполнено(УидПациента),
		ЗначениеЗаполнено(СНИЛС),
		ЗначениеЗаполнено(НомерСтраницы),
		ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаНачало),
		ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаОкончание),
		ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаРегистрацииДокументаНачало),
		ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаРегистрацииДокументаОкончание)
	);

	Данные_ = Новый Соответствие;
	
	Данные_["[OID_MO]"] = КодOIDМедицинскойОрганизации;
	Данные_["[DOCUMENT_ID]"] = УидДокумента;
	Данные_["[ВИД_ДОКУМЕНТА]"] = КодВидаДокумента;
	Данные_["[НОМЕР_ДОКУМЕНТА]"] = НомерДокумента;
	Данные_["[PATIENT_ID]"] = УидПациента;
	Данные_["[СНИЛС_НОМЕР]"] = ЗначениеСНИЛС(СНИЛС);
	Данные_["[НОМЕР_СТРАНИЦЫ]"] = НомерСтраницы;
	Данные_["[Директивы]"] = Директивы;

	Данные_["[ДАТА_СОЗДАНИЯ_ДОКУМЕНТА_НАЧАЛО]"] = "";
	Данные_["[ДАТА_СОЗДАНИЯ_ДОКУМЕНТА_ОКОНЧАНИЕ]"] = "";
	Данные_["[ДАТА_РЕГИСТРАЦИИ_ДОКУМЕНТА_НАЧАЛО]"] = "";
	Данные_["[ДАТА_РЕГИСТРАЦИИ_ДОКУМЕНТА_ОКОНЧАНИЕ]"] = "";
	
	Если ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаНачало) Тогда
		Данные_["[ДАТА_СОЗДАНИЯ_ДОКУМЕНТА_НАЧАЛО]"] = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаНачало);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаОкончание) Тогда
		Данные_["[ДАТА_СОЗДАНИЯ_ДОКУМЕНТА_ОКОНЧАНИЕ]"] = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ДатаСозданияИлиСтруктура_.ДатаСозданияДокументаОкончание);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаРегистрацииДокументаНачало) Тогда
		Данные_["[ДАТА_РЕГИСТРАЦИИ_ДОКУМЕНТА_НАЧАЛО]"] = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ДатаСозданияИлиСтруктура_.ДатаРегистрацииДокументаНачало);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаСозданияИлиСтруктура_.ДатаРегистрацииДокументаОкончание) Тогда
		Данные_["[ДАТА_РЕГИСТРАЦИИ_ДОКУМЕНТА_ОКОНЧАНИЕ]"] = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ДатаСозданияИлиСтруктура_.ДатаРегистрацииДокументаОкончание);
	КонецЕсли;

	ТелоСообщения_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);

	Адрес_ = ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес_) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;

	ОтветОтСервера_ = СформироватьИОтправитьSOAPЗапрос(
		Адрес_,
		ТелоСообщения_,
		ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
		Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
		"searchRegistryItem"
	);
	
	ОтветСтруктурой_ = РазобратьОтветРЭМД(ОтветОтСервера_);
	
	Если ОтветСтруктурой_.ЕстьОшибка Тогда
		
		Сообщить("Ошибка при выполнении поиска документов в РЭМД.");
		Для Каждого Деталь_ Из ОтветСтруктурой_.Детали Цикл
		
			ТекстСообщения_ = стрШаблон("Ошибка при выполнении поиска документов в РЭМД: %1 %2", Деталь_.Код, Деталь_.Сообщение);
			Сообщить(ТекстСообщения_);
			
			ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(ТекстСообщения_, УровеньЖурналаРегистрации.Ошибка);
		КонецЦикла;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Результат_ = РазобратьРезультатПоискаДокументов(ОтветОтСервера_);
	
	Возврат Результат_;
КонецФункции

// Получает данные о документе из РЭМД. Операция веб-сервиса getRegistryItem.
Функция ПолучитьДанныеОДокументеИзРЭМД(emdrId) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Шаблон_ = ТекстXMLПолучитьДанныеОДокументеИзРЭМД();

	Данные_ = Новый Соответствие;
	
	Данные_["[EMDRID]"] = emdrId;

	ТелоСообщения_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);

	Адрес_ = ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес_) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;

	ОтветОтСервера_ = СформироватьИОтправитьSOAPЗапрос(
		Адрес_,
		ТелоСообщения_,
		ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
		Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
		"getRegistryItem"
	);
	
	ОтветСтруктурой_ = РазобратьОтветРЭМД(ОтветОтСервера_);
	
	Если ОтветСтруктурой_.ЕстьОшибка Тогда
		Текст_ = "Ошибка при получении данных о документе из РЭМД, emdrId: "+ emdrId;
		Для Каждого Деталь_ Из ОтветСтруктурой_.Детали Цикл
			Текст_ = Текст_ + Символы.ПС + стрШаблон("%1 %2", Деталь_.Код, Деталь_.Сообщение);
		КонецЦикла;
		
		ВызватьИсключение Текст_;
	КонецЕсли;
	
	Результат_ = РазобратьРезультатЗапросаДанныхДокумента(ОтветОтСервера_);
	
	Возврат Результат_;
КонецФункции

// Отправляет запрос на асинхронное получение документа из РЭМД. Операция веб-сервиса demandContent.
Функция ЗапроситьДокументИзРЭМД(emdrId, grantingEmdrId = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Шаблон_ = ТекстXMLЗаявкаНаПолучениеДокументаИзРЭМД();

	Данные_ = Новый Соответствие;
	
	// уникальное в пределах МО строковое значение.
	MSG_ID_ = Строка(Новый УникальныйИдентификатор());
	Данные_["[MSG_ID]"] = MSG_ID_;

	Данные_["[EMDRID]"] = emdrId;
	
	Данные_["[GRANTING_EMDRID]"] = ВыбратьЗаполненное(grantingEmdrId, "");

	ТелоСообщения_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);

	Адрес_ = ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес_) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;

	ОтветОтСервера_ = СформироватьИОтправитьSOAPЗапрос(
		Адрес_,
		ТелоСообщения_,
		ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
		MSG_ID_, // Уникальный идентификатор сообщения.
		"demandContent"
	);
	
	ОтветСтруктурой_ = РазобратьОтветРЭМД(ОтветОтСервера_);
	
	Если ОтветСтруктурой_.ЕстьОшибка Тогда
		
		Сообщить("Ошибка при отправке заявки на получение документа из РЭМД.");
		Для Каждого Деталь_ Из ОтветСтруктурой_.Детали Цикл
			Сообщить(стрШаблон("%1 %2", Деталь_.Код, Деталь_.Сообщение));
		КонецЦикла;
		
		Возврат Неопределено;
	КонецЕсли;
	
	//Сообщить("Идентификатор отправленного сообщения: " + MSG_ID_);

	ЗаписатьДанныеОтправленногоСообщенияВРегистр(
		MSG_ID_, 
		ТекущаяДатаСеанса(), 
		Неопределено,
		Истина
	);
	
	Возврат MSG_ID_;
КонецФункции

// Получает метаописание документа из РЭМД. Операция веб-сервиса getMetadata.
Функция ПолучитьМетаданныеДокументаИзРЭМД(emdrId, grantingEmdrId) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Шаблон_ = ТекстXMLПолучитьМетаданныеДокументаИзРЭМД();

	Данные_ = Новый Соответствие;
	
	Данные_["[EMDRID]"] = emdrId;
	Данные_["[GRANTING_EMDRID]"] = ВыбратьЗаполненное(grantingEmdrId, "");

	ТелоСообщения_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);

	Адрес_ = ПолучитьАдресВебСервисаДляЗапросовВРЭМД();
	
	Если Не ЗначениеЗаполнено(Адрес_) Тогда
		ВызватьИсключение "Не указан адрес вызываемого веб-сервиса: РЭМД";
	КонецЕсли;

	ОтветОтСервера_ = СформироватьИОтправитьSOAPЗапрос(
		Адрес_,
		ТелоСообщения_,
		ПолучитьИдентификаторМИС_В_ИПС(), // Зарегистрированный идентификатор клиента.
		Строка(Новый УникальныйИдентификатор), // Уникальный идентификатор сообщения.
		"getMetadata"
	);
	
	ОтветСтруктурой_ = РазобратьОтветРЭМД(ОтветОтСервера_);
	
	Если ОтветСтруктурой_.ЕстьОшибка Тогда
		Текст_ = "Ошибка при получении метаданных документа из РЭМД, emdrId: "+ emdrId + ", grantingEmdrId: " + grantingEmdrId;
		Для Каждого Деталь_ Из ОтветСтруктурой_.Детали Цикл
			Текст_ = Текст_ + Символы.ПС + стрШаблон("%1 %2", Деталь_.Код, Деталь_.Сообщение);
		КонецЦикла;
		
		ВызватьИсключение Текст_;
	КонецЕсли;
	
	Результат_ = РазобратьРезультатЗапросаМетаданныхДокумента(ОтветОтСервера_);
	
	Возврат Результат_;
КонецФункции

#КонецОбласти

#КонецОбласти

// Прочие экспортные процедуры и функции
#Область ПрочийИнтерфейс

// Возвращает наименование МИС для отправляемых пакетов.
Функция ПолучитьНазваниеИнформационнойСистемы() Экспорт
	Возврат Константы.ФедеральныеВебСервисыНазваниеИнформационнойСистемы.Получить();
КонецФункции

// Код OID медицинской организации согласно реестру медицинских организаций РФ из НСИ Минздрава РФ.
Функция ПолучитьOIDИНаменованиеМедицинскойОрганизации(ДокументСсылка) Экспорт
	Возврат ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеМедицинскойОрганизацииПоДокументу(ДокументСсылка);
КонецФункции

// Возвращает сертификат для установки подписи мед. организации.
Функция ПолучитьСертификатМедицинскойОрганизации(ДокументСсылка) Экспорт
	Возврат ФедеральныеВебСервисыПереопределяемый.ПолучитьСертификатМедицинскойОрганизации(ДокументСсылка);
КонецФункции


// Присваивается РМИС/МИС при регистрации в РЭМД и передается при информационном взаимодействии.
Функция ПолучитьИдентифакаторМИС_В_РЭМД() Экспорт
	Возврат Константы.ФедеральныеВебСервисыИдентификаторИСвРЭМД.Получить();
КонецФункции

// Зарегистрированный идентификатор МИС в ИПС (Подсистема интеграции прикладных систем).
Функция ПолучитьИдентификаторМИС_В_ИПС() Экспорт
	Возврат Константы.ФедеральныеВебСервисыИдентификаторИСвИПС.Получить();
КонецФункции

// Помещает документ в хранилище электронных мед. документов для обеспечения доступа к ним из РЭМД.
// Параметры:
//  ДанныеЭлектронныхПодписей  - Массив - Массив с структур с полями (ДвоичныеДанныеПодписи,РольРЭМД,Сотрудник,ЭтоПодписьМО).
Функция ПоместитьДокументВХранилищеЭМД(Пациент, ДвоичныеДанныеДокумента, ДанныеЭлектронныхПодписей, НомерДокумента, ИдентификаторДокумента, ДокументСсылка, ФорматФайлаДляРЭМД = Неопределено, ТипРЭМД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(НомерДокумента) И ЗначениеЗаполнено(ДокументСсылка) Тогда
		ИдентификаторИНомер_ = ПолучитьИдентификаторИНомерДокументаДляРЭМД(ДокументСсылка, Истина);
		НомерДокумента = ИдентификаторИНомер_.НомерДокумента;
		ИдентификаторДокумента = ИдентификаторИНомер_.ИдентификаторДокумента;
	КонецЕсли;
	
	Если ФорматФайлаДляРЭМД = Перечисления.ФорматФайлаДляРЭМД.CDA Тогда
		ИмяФайла_ = ИдентификаторДокумента + ".xml";
	Иначе
		ИмяФайла_ = ИдентификаторДокумента + ".pdf";
	КонецЕсли;
	
	ПутиДляДокумента_ = ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайла_, ДокументСсылка);
	
	
	ДвоичныеДанныеДокумента.Записать(ПутиДляДокумента_.ПолныйПуть);
	
	ФайлыЭлектронныхПодписей_ = Новый Массив;
	Если ДанныеЭлектронныхПодписей <> Неопределено Тогда
		Номер_ = 1;
		Для Каждого Подпись_ Из ДанныеЭлектронныхПодписей Цикл
			ДвоичныеДанныеПодписи_ = Подпись_.ДвоичныеДанныеПодписи;
			
			ИмяФайлаПодписи_ = ИдентификаторДокумента + "_sign" + Строка(Номер_) + ".p7s";
			
			ПутиДляПодписи_ = ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайлаПодписи_, ДокументСсылка);
			
			ДвоичныеДанныеПодписи_.Записать(ПутиДляПодписи_.ПолныйПуть);
			
			ФайлыЭлектронныхПодписей_.Добавить(Новый Структура(
					"ОтносительныйПутьКФайлуПодписиЭМД,РольРЭМД,Сотрудник,ЭтоПодписьМО",
					ПутиДляПодписи_.ОтносительныйПуть,// путь исключая путь к хранилищу.
					Подпись_.РольРЭМД,
					Подпись_.Сотрудник,
					Подпись_.ЭтоПодписьМО
				)
			);
			
			Номер_ = Номер_ + 1;
		КонецЦикла;
	КонецЕсли;


	УдаляемыеФайлы_ = Неопределено;
	
	Ссылка_ = Справочники.ФедеральныеВебСервисыЭМД.ДобавитьДокументВСправочник(
					Пациент,
					ПутиДляДокумента_.ОтносительныйПуть,// путь исключая путь к хранилищу.
					ФайлыЭлектронныхПодписей_,
					НомерДокумента,
					ИдентификаторДокумента,
					ДокументСсылка,
					?(ЗначениеЗаполнено(ФорматФайлаДляРЭМД), ФорматФайлаДляРЭМД, Перечисления.ФорматФайлаДляРЭМД.PDF),
					ТипРЭМД,
					УдаляемыеФайлы_
	);
	
	Если УдаляемыеФайлы_ <> Неопределено Тогда
		УдалитьФайлыИзАрхиваЭМД(УдаляемыеФайлы_);
	КонецЕсли;
	
	Возврат Ссылка_;

КонецФункции

// Записывает подпись в хранилище ЭМД.
Функция ДобавитьПодписьДокументуВХранилищеЭМД(ДокументСсылка, ДанныеЭлектронныхПодписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ЭтоЭМДСсылка_ = Ложь;
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ФедеральныеВебСервисыЭМД") Тогда
		ЭтоЭМДСсылка_ = Истина;
	КонецЕсли;
	
	// Найдем ЭМД.
	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка,
		|	ФедеральныеВебСервисыЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ФедеральныеВебСервисыЭМД.ДатаСоздания КАК ДатаСоздания,
		|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы КАК ДокументИнформационнойБазы,
		|	МАКСИМУМ(ЕСТЬNULL(ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.НомерСтроки, 0)) КАК КоличествоПодписей
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД
		|		ПО ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка = ФедеральныеВебСервисыЭМД.Ссылка
		|ГДЕ
		|	ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ
		|	И ФедеральныеВебСервисыЭМД." + ?(ЭтоЭМДСсылка_, "Ссылка", "ДокументИнформационнойБазы") + " = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ФедеральныеВебСервисыЭМД.Ссылка,
		|	ФедеральныеВебСервисыЭМД.ИдентификаторДокумента";
		
	Запрос_.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Если Выборка_.Следующий() Тогда
		
		ФайлыЭлектронныхПодписей_ = Новый Массив;
		
		Номер_ = Выборка_.КоличествоПодписей + 1;
		Для Каждого Подпись_ Из ДанныеЭлектронныхПодписей Цикл
			ДвоичныеДанныеПодписи_ = Подпись_.ДвоичныеДанныеПодписи;
			
			ИмяФайлаПодписи_ = Выборка_.ИдентификаторДокумента + "_sign" + Строка(Номер_) + ".p7s";
			
			ПутиДляПодписи_ = ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайлаПодписи_, Выборка_.ДокументИнформационнойБазы, Выборка_.ДатаСоздания);
			
			ДвоичныеДанныеПодписи_.Записать(ПутиДляПодписи_.ПолныйПуть);
			
			ФайлыЭлектронныхПодписей_.Добавить(Новый Структура(
					"ОтносительныйПутьКФайлуПодписиЭМД,РольРЭМД,Сотрудник,ЭтоПодписьМО",
					ПутиДляПодписи_.ОтносительныйПуть,// путь исключая путь к хранилищу.
					Подпись_.РольРЭМД,
					Подпись_.Сотрудник,
					Подпись_.ЭтоПодписьМО
				)
			);
			
			Номер_ = Номер_ + 1;
		КонецЦикла;
		
		Ссылка_ = Справочники.ФедеральныеВебСервисыЭМД.ДобавитьДанныеПодписиВСправочник(
						Выборка_.Ссылка,
						ФайлыЭлектронныхПодписей_
		);
		
		Возврат Ссылка_;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Очищает ТЧ ЭлектронныеПодписиЭМД и удалет файлы с ЭЦП.
// 
// Параметры:
//  ПорядковыйНомер      - Число - порядковый номер подписи, начальный номер 1.
//                       - Массив - значения указанного выше типа.
//                         Если параметр Неопределено, все подписи будут удалены.
Процедура УдалитьЭлектронныеПодписи(ЭМДСсылкаИлиОбъект, Знач ПорядковыйНомер = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ТребуетсяЗапись_ = Ложь;
	
	Если ТипЗнч(ЭМДСсылкаИлиОбъект) = Тип("СправочникСсылка.ФедеральныеВебСервисыЭМД") Тогда
		ЭМДОбъект_ = ЭМДСсылкаИлиОбъект.ПолучитьОбъект();
		ТребуетсяЗапись_ = Истина;
	Иначе
		ЭМДОбъект_ = ЭМДСсылкаИлиОбъект;
	КонецЕсли;
	
	Если ПорядковыйНомер <> Неопределено Тогда
		Если ТипЗнч(ПорядковыйНомер) = Тип("Массив") Тогда
			ПорядковыеНомера_ = ПорядковыйНомер;
		Иначе
			ПорядковыеНомера_ = Новый Массив;
			ПорядковыеНомера_.Добавить(ПорядковыйНомер);
		КонецЕсли;
		
		Если ЭМДОбъект_.ЭлектронныеПодписиЭМД.Количество() = ПорядковыеНомера_.Количество() Тогда
			// Удаляем все подписи.
			ПорядковыйНомер = Неопределено;
			ПорядковыеНомера_ = Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	УдаляемыеФайлы_ = Новый Массив;
	УдаляемыеСтрокиТЧ_ = Новый Массив;
	
	Для Каждого строкаТЧ_ Из ЭМДОбъект_.ЭлектронныеПодписиЭМД Цикл
		Если ПорядковыйНомер = Неопределено Или ПорядковыеНомера_.Найти(строкаТЧ_.НомерСтроки) <> Неопределено Тогда
			
			УдаляемыеСтрокиТЧ_.Добавить(строкаТЧ_);
			
			Если ЗначениеЗаполнено(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД) Тогда
				УдаляемыеФайлы_.Добавить(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПорядковыйНомер <> Неопределено Тогда
		Для Каждого строкаТЧ_ Из УдаляемыеСтрокиТЧ_ Цикл
			ЭМДОбъект_.ЭлектронныеПодписиЭМД.Удалить(строкаТЧ_);
		КонецЦикла;
	Иначе
		ЭМДОбъект_.ЭлектронныеПодписиЭМД.Очистить();
	КонецЕсли;
	
	УдалитьФайлыИзАрхиваЭМД(УдаляемыеФайлы_);
	
	Если ТребуетсяЗапись_ Тогда
		ЭМДОбъект_.Записать();
	КонецЕсли;
	
	ФедеральныеВебСервисыПереопределяемый.УдалитьЭлектронныеПодписи(ЭМДОбъект_.ДокументИнформационнойБазы, ПорядковыйНомер);
	
КонецПроцедуры

Процедура УдалитьФайлыИзАрхиваЭМД(УдаляемыеФайлы) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Путь_ Из УдаляемыеФайлы Цикл
		Если ЗначениеЗаполнено(Путь_) Тогда // Подстрахуемся
			ПолныйПуть_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Путь_);
			Файл_ = Новый Файл(ПолныйПуть_);
			Если Файл_.Существует() И Файл_.ЭтоФайл() Тогда // Подстрахуемся, чтобы по ошибке не удалить лишнее.
				УдалитьФайлы(ПолныйПуть_);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Создает pdf/A файл для медицинского документа.
Функция СоздатьPDFAДляМедицинскогоДокумента(МДСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	П_ = Новый Структура(
		"ИмяФайла, СписокМД, Выводить, ФормироватьPDFA", 
		,
		АлгоритмыДляКоллекций.СоздатьМассив(МДСсылка), 
		Новый Структура(),
		Истина
	);
	Возврат  Обработки.ПечатьМедицинскихДокументов.СформироватьФайлPDF(П_);
КонецФункции

// Проверяет должность подписанта и количество подписей на соответсвие требованиям РЭМД.
Процедура ПроверитьВозможностьДобавитьПодписьНеНарушивТребованияКСпискуПодписейПоДокументу(ДокументСсылка, ЭтоПерваяПодпись, Сотрудник = Неопределено, РольРЭМД = Неопределено, ТипРЭМД = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Пользователь_ = Пользователи.ТекущийПользователь();
		Сотрудник_ = ПолучитьСотрудникаПриПодписанииПоДокументу(ДокументСсылка, Пользователь_);
	Иначе
		Сотрудник_ = Сотрудник;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник_) Тогда
		ВызватьИсключение стрШаблон(
			"Проверка правил РЭМД для подписания электронных медицинских документов.
			|Не удалось определить сотрудника подписывающего документ: %1", ДокументСсылка);
	КонецЕсли;
	
	Должность_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеСотрудника(Сотрудник_, "Должность").Должность;
	
	Если Не ЗначениеЗаполнено(Должность_) Тогда
		ВызватьИсключение стрШаблон(
			"Проверка правил РЭМД для подписания электронных медицинских документов.
			|Не удалось определить должность сотрудника ""%1"" подписывающего документ: %2", Сотрудник_, ДокументСсылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРЭМД) Тогда
		ТипРЭМД_ = ТипРЭМД;
	Иначе
		ТипРЭМД_ = ПолучитьТипРЭМДПоДокументу(ДокументСсылка);

		Если Не ЗначениеЗаполнено(ТипРЭМД_) Тогда
			ВызватьИсключение стрШаблон(
				"Проверка правил РЭМД для подписания электронных медицинских документов.
				|Не удалось определить тип документа РЭМД подписываемого документа: %1", ДокументСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РольРЭМД) Тогда
		РольРЭМД_ = РольРЭМД;
	Иначе
		РольРЭМД_ = ПолучитьРольСотрудникаПриПодписанииПоДокументу(ДокументСсылка, Сотрудник_);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РольРЭМД_) Тогда
		ВызватьИсключение стрШаблон(
			"Проверка правил РЭМД для подписания электронных медицинских документов.
			|Должность ""%1"" отсутствует в списке допустимых для подписании документа с типом ""%2"": %3", Должность_, ТипРЭМД_, ДокументСсылка);
	КонецЕсли;
	
	Если Не ЭтоПерваяПодпись Тогда
		// Проверим, подписывал ли уже этот сотрудник с этой же ролью.
		Запрос_ = Новый Запрос;
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.РольРЭМД КАК КоличествоПодписей
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка.ДокументИнформационнойБазы = &ДокументИнформационнойБазы
			|	И ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.РольРЭМД = &РольРЭМД
			|	И ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Сотрудник = &Сотрудник
			|	И НЕ ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.ЭтоПодписьМО
			|	И НЕ ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка.ПометкаУдаления";
		
		Запрос_.УстановитьПараметр("ДокументИнформационнойБазы", ДокументСсылка);
		Запрос_.УстановитьПараметр("РольРЭМД", РольРЭМД_);
		Запрос_.УстановитьПараметр("Сотрудник", Сотрудник_);
		
		Выборка_ = Запрос_.Выполнить().Выбрать();
		
		Если Выборка_.Следующий() Тогда
			ВызватьИсключение стрШаблон(
				"Проверка правил РЭМД для подписания электронных медицинских документов.
				|Сотрудник ""%1"" с ролью ""%2"" уже подписывал документ: %3", Сотрудник_, РольРЭМД_, ДокументСсылка);
		КонецЕсли;

		// Определим допустимое количество подписей.
		Запрос_ = Новый Запрос;
		Запрос_.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РолиПриПодписанииРЭМДПравилаПодписи.МинимальноеКоличествоПодписей КАК МинимальноеКоличествоПодписей,
			|	РолиПриПодписанииРЭМДПравилаПодписи.МаксимальноеКоличествоПодписей КАК МаксимальноеКоличествоПодписей
			|ИЗ
			|	Справочник.РолиПриПодписанииРЭМД.ПравилаПодписи КАК РолиПриПодписанииРЭМДПравилаПодписи
			|ГДЕ
			|	РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваВидаДокумента = &КодМинздраваВидаДокумента
			|	И РолиПриПодписанииРЭМДПравилаПодписи.Ссылка = &РольРЭМД";
		
		Запрос_.УстановитьПараметр("КодМинздраваВидаДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипРЭМД_, "КодМинздрава"));
		Запрос_.УстановитьПараметр("РольРЭМД", РольРЭМД_);
		
		ДопустимоеКоличествоПодписей_ = Запрос_.Выполнить().Выбрать();
		
		Если Не ДопустимоеКоличествоПодписей_.Следующий() Тогда
			// Эта ошибка может возникнуть только если есть ошибка алгоритма в ПолучитьРольСотрудникаПриПодписанииПоДокументу() вызываемой выше.
			ВызватьИсключение стрШаблон(
				"Проверка правил РЭМД для подписания электронных медицинских документов.
				|Не удалось найти данные о допустимом количестве подписей для типа документа ""%1"" и роли подписанта ""%2"": %3", ТипРЭМД_, РольРЭМД_, ДокументСсылка);
		КонецЕсли;
		
		// Определим уже установленное количество подписей в ЭМД.
		Запрос_ = Новый Запрос;
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.РольРЭМД) КАК КоличествоПодписей
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка.ДокументИнформационнойБазы = &ДокументИнформационнойБазы
			|	И ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.РольРЭМД = &РольРЭМД
			|	И НЕ ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.ЭтоПодписьМО
			|	И НЕ ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка.ПометкаУдаления";
		
		Запрос_.УстановитьПараметр("ДокументИнформационнойБазы", ДокументСсылка);
		Запрос_.УстановитьПараметр("РольРЭМД", РольРЭМД_);
		
		Выборка_ = Запрос_.Выполнить().Выбрать();
		
		Выборка_.Следующий();
		
		КоличествоПодписей_ = Выборка_.КоличествоПодписей;
		
		Если КоличествоПодписей_ + 1 > ДопустимоеКоличествоПодписей_.МаксимальноеКоличествоПодписей Тогда
			ВызватьИсключение стрШаблон(
				"Проверка правил РЭМД для подписания электронных медицинских документов.
				|С ролью подписанта ""%1"" количество уже имеющихся подписей ""%2"".
				|Добавление еще одной подписи с этой ролью приведет к привышению максимального допустимого количества подписей для этой роли ""%3"". Подписываемый документ: %4", РольРЭМД_, КоличествоПодписей_, ДопустимоеКоличествоПодписей_.МаксимальноеКоличествоПодписей, ДокументСсылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Готовит массив структур с данными подписи для функции ПоместитьДокументВХранилищеЭМД из результата
// подписания который приходит в обработчик описания оповещения, передаваемого в ЭлектроннаяПодписьКлиент.Подписать().
Функция ПолучитьДанныеЭлектронныхПодписейИзРезультатаПодписания(ДокументСсылка, РезультатПодписания, ПодписьДД = Неопределено, РольРЭМД = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ПодписьДД = Неопределено Тогда
		ПодписьДД_ = РезультатПодписания.СвойстваПодписи.Подпись;
	Иначе
		ПодписьДД_ = ПодписьДД;
	КонецЕсли;
	
	Пользователь_ = РезультатПодписания.СвойстваПодписи.УстановившийПодпись;
	
	Сотрудник_ = ПолучитьСотрудникаПриПодписанииПоДокументу(ДокументСсылка, Пользователь_);
	
	Если Не ЗначениеЗаполнено(РольРЭМД) Тогда
		РольРЭМД_ = ПолучитьРольСотрудникаПриПодписанииПоДокументу(ДокументСсылка, Сотрудник_);
	Иначе
		РольРЭМД_ = РольРЭМД;
	КонецЕсли;
	
	ДанныеЭлектронныхПодписей_ = Новый Массив;
	ДанныеЭлектронныхПодписей_.Добавить(
		Новый Структура("ДвоичныеДанныеПодписи,РольРЭМД,Сотрудник,ЭтоПодписьМО",
			ПодписьДД_, РольРЭМД_, Сотрудник_, Ложь)
	);
	
	Возврат ДанныеЭлектронныхПодписей_;

КонецФункции

// Возвращает идентификатор сотрудника из федерального регистра ФРМР.
Функция ПолучитьИдентификаторСотрудникаДляРЭМД(СотрудникСсылка) Экспорт
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		Возврат ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеСотрудника(СотрудникСсылка, "ИдентификаторСотрудника").ИдентификаторСотрудника;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает идентификатор пациента для федерального регистра ИЭМК.
Функция ПолучитьИдентификаторПациентаДляИЭМК(ПациентСсылка) Экспорт
	Возврат ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеПациента(ПациентСсылка, "ИдентификаторПациента").ИдентификаторПациента;
КонецФункции

// Возвращает идентификатор и номер документа для регистрации в РЭМД.
Функция ПолучитьИдентификаторИНомерДокументаДляРЭМД(ДокументСсылка, НовыйИдентификатор = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	emdrId_ = Неопределено;
	НомерВерсии_ = Неопределено;
	
	Если НовыйИдентификатор = Ложь Тогда
		// Попробуем найти ранее созданный идентификатор и emdrId документа.
		
		Запрос_ = Новый Запрос;
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
			|	ФедеральныеВебСервисыЭМД.emdrId КАК emdrId,
			|	ФедеральныеВебСервисыЭМД.НомерВерсии КАК НомерВерсии,
			|	ФедеральныеВебСервисыЭМД.НомерДокумента КАК НомерДокумента
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы = &ДокументСсылка
			|	И ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ";
			
		Запрос_.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Выборка_ = Запрос_.Выполнить().Выбрать();

		Если Выборка_.Следующий() Тогда
			ИдентификаторДокумента_ = Выборка_.ИдентификаторДокумента;
			emdrId_ = Выборка_.emdrId;
			НомерВерсии_ = Выборка_.НомерВерсии;
			НомерДокумента_ = Выборка_.НомерДокумента;
		Иначе

			НомерДокумента_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьНомерДокументаДляРЭМД(ДокументСсылка);

			Запрос_ = Новый Запрос;
			Запрос_.Текст =
				"ВЫБРАТЬ
				|	ФедеральныеВебСервисыЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента,
				|	ФедеральныеВебСервисыЭМД.emdrId КАК emdrId,
				|	ФедеральныеВебСервисыЭМД.НомерВерсии КАК НомерВерсии
				|ИЗ
				|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
				|ГДЕ
				|	ФедеральныеВебСервисыЭМД.НомерДокумента = &НомерДокумента
				|	И ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ";
				
			Запрос_.УстановитьПараметр("НомерДокумента", НомерДокумента_);
			Выборка_ = Запрос_.Выполнить().Выбрать();
			
			Если Выборка_.Следующий() Тогда
				ИдентификаторДокумента_ = Выборка_.ИдентификаторДокумента;
				emdrId_ = Выборка_.emdrId;
				НомерВерсии_ = Выборка_.НомерВерсии;
			Иначе
				// В хранилище записывается новый документ, присвоем ему новый идентификатор.
				ИдентификаторДокумента_ = ФедеральныеВебСервисыПереопределяемый.СоздатьИдентификаторДокументаДляРЭМД(ДокументСсылка);
			КонецЕсли;
		КонецЕсли;

	Иначе
		// В хранилище записывается новый документ, присвоем ему новый идентификатор.
		НомерДокумента_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьНомерДокументаДляРЭМД(ДокументСсылка);
		ИдентификаторДокумента_ = ФедеральныеВебСервисыПереопределяемый.СоздатьИдентификаторДокументаДляРЭМД(ДокументСсылка);
	КонецЕсли;
		
	Результат_ = Новый Структура("НомерДокумента, ИдентификаторДокумента, emdrId, НомерВерсии",
		НомерДокумента_, ИдентификаторДокумента_, emdrId_, НомерВерсии_
	);
	
	Возврат Результат_;
КонецФункции

// Преобразует относительный путь в полный.
Функция ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Путь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ПутьКХранилищу_ = Константы.ФедеральныеВебСервисыПутьКАрхивуЭМД.Получить();
	
	Если Не ЗначениеЗаполнено(ПутьКХранилищу_) Тогда
		ВызватьИсключение "Не заполнен путь к хранилищу файлов ЭМД.";
	КонецЕсли;
	
	ПолныйПуть_ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКХранилищу_)
					+ Путь;

	Возврат ПолныйПуть_;
	
КонецФункции

// Возвращает двочные данные документа находящегося в хранилище.
Функция ПолучитьДвоичныеДанныеДокументаИзХранилища(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос_ = Новый Запрос;
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ФедеральныеВебСервисыЭМД") Тогда
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыЭМД.ОтносительныйПутьКФайлуЭМД КАК ОтносительныйПутьКФайлуЭМД
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМД.Ссылка = &ДокументИнформационнойБазы";
			
		Запрос_.УстановитьПараметр("ДокументИнформационнойБазы", ДокументСсылка);
	Иначе
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыЭМД.ОтносительныйПутьКФайлуЭМД КАК ОтносительныйПутьКФайлуЭМД
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы = &ДокументИнформационнойБазы
			|	И ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ";
			
		Запрос_.УстановитьПараметр("ДокументИнформационнойБазы", ДокументСсылка);
	КонецЕсли;
	
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Если Выборка_.Следующий() Тогда
		Если стрНайти(Выборка_.ОтносительныйПутьКФайлуЭМД, "..") Тогда
			// Для безопасности.
			ВызватьИсключение "Путь не может включать каталог ""..""";
		КонецЕсли;

		Путь_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Выборка_.ОтносительныйПутьКФайлуЭМД);
		
		Возврат Новый ДвоичныеДанные(Путь_);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Проверят подлежит ли мед. документ регистрации в РЭМД.
Функция ДокументНеобходимоПоместитьВХранилищеДляРЭМД(ДокументСсылка, ФорматФайлаДляРЭМДOut = Неопределено, ТипРЭМДOut = Неопределено, НеПроверятьСтатус = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ФедеральныеВебСервисыПереопределяемый.ДокументПодлежитРегистрацииВРЭМД(ДокументСсылка) Тогда
		ТипРЭМДOut = ПолучитьТипРЭМДПоДокументу(ДокументСсылка);
		
		Если ЗначениеЗаполнено(ТипРЭМДOut) Тогда
			ФорматФайлаДляРЭМДOut = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипРЭМДOut, "ФорматФайлаДляРЭМД");
		КонецЕсли;
		
		Если НеПроверятьСтатус Тогда
			Возврат Истина;
		Иначе
			Возврат ФедеральныеВебСервисыПереопределяемый.ПроверитьГотовностьДокумента(ДокументСсылка);
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

	
КонецФункции

// Возвращает ТЗ с должностями для подписи для определенного типа РЭМД документа по ссылке на документ информационной базы.
Функция ПолучитьДолжностиДляПодписания(ДокументСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	КодТипаДокументаРЭМД_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, "КодТипаДокументаРЭМД").КодТипаДокументаРЭМД;
	
	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	РолиПриПодписанииРЭМДПравилаПодписи.МинимальноеКоличествоПодписей КАК МинимальноеКоличествоПодписей,
		|	РолиПриПодписанииРЭМДПравилаПодписи.МаксимальноеКоличествоПодписей КАК МаксимальноеКоличествоПодписей,
		|	РолиПриПодписанииРЭМДПравилаПодписи.Ссылка КАК РольРЭМД,
		|	РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваДолжности КАК КодМинздраваДолжности
		|ИЗ
		|	Справочник.РолиПриПодписанииРЭМД.ПравилаПодписи КАК РолиПриПодписанииРЭМДПравилаПодписи
		|ГДЕ
		|	РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваВидаДокумента = &КодМинздраваВидаДокумента
		|	И РолиПриПодписанииРЭМДПравилаПодписи.Ссылка.Актуальность = ИСТИНА
		|	И РолиПриПодписанииРЭМДПравилаПодписи.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Запрос_.УстановитьПараметр("КодМинздраваВидаДокумента", КодТипаДокументаРЭМД_);
	Результат_ = Запрос_.Выполнить().Выгрузить();
	
	Возврат Результат_;
КонецФункции

Функция ПолучитьСотрудникаПриПодписанииПоДокументу(ДокументСсылка, Пользователь) Экспорт
	
	Сотрудник_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьСотрудникаПодписывающегоДокумент(ДокументСсылка, Пользователь);
	
	Если Не ЗначениеЗаполнено(Сотрудник_) Тогда
		ВызватьИсключение стрШаблон("Не удалось определить сотрудника пользоватля ""%1"" подписывающего документ: %2", Пользователь, ДокументСсылка);
	КонецЕсли;
	
	Возврат Сотрудник_;
	
КонецФункции

Функция ПолучитьРольСотрудникаПриПодписанииПоДокументу(ДокументСсылка, Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	РолиПриПодписанииРЭМДПравилаПодписи.Ссылка КАК РольРЭМД
		|ИЗ
		|	Справочник.РолиПриПодписанииРЭМД.ПравилаПодписи КАК РолиПриПодписанииРЭМДПравилаПодписи
		|ГДЕ
		|	НЕ РолиПриПодписанииРЭМДПравилаПодписи.Ссылка.ПометкаУдаления
		|	И РолиПриПодписанииРЭМДПравилаПодписи.Ссылка.Актуальность = ИСТИНА
		|	И РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваВидаДокумента = &ВидДокумента
		|	И (РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваДолжности = &КодМинздраваДолжности
		|		ИЛИ РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваДолжности = &КодМинздраваГруппы)";
	
	ДанныеСотрудника_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеСотрудника(Сотрудник, "Должность");
	
	КодМинздраваДолжности_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваПоСсылке(ДанныеСотрудника_.Должность, "1.2.643.5.1.13.13.11.1002").code;
	
	КодМинздраваГруппы_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваРодителя(КодМинздраваДолжности_, "1.2.643.5.1.13.13.11.1002");
	
	Запрос_.УстановитьПараметр("КодМинздраваДолжности", КодМинздраваДолжности_);
	Запрос_.УстановитьПараметр("КодМинздраваГруппы", КодМинздраваГруппы_);
	
	ВидДокумента_ = ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, "КодТипаДокументаРЭМД").КодТипаДокументаРЭМД;
	Запрос_.УстановитьПараметр("ВидДокумента", ВидДокумента_);
	
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Если Выборка_.Следующий() Тогда
		Возврат Выборка_.РольРЭМД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает ссылку на справочник ТипыМД соответствующую документу.
Функция ПолучитьТипРЭМДПоДокументу(ДокументСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	

	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ТипыМД.Ссылка КАК ТипРЭМД
		|ИЗ
		|	Справочник.ТипыМДРегистрируемыхВРЭМД КАК ТипыМД
		|ГДЕ
		|	НЕ ТипыМД.ПометкаУдаления
		|	И ТипыМД.КодМинздрава = &КодТипаДокументаРЭМД";
		
	КодТипаДокументаРЭМД_ = ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, "КодТипаДокументаРЭМД").КодТипаДокументаРЭМД;
	Запрос_.УстановитьПараметр("КодТипаДокументаРЭМД", КодТипаДокументаРЭМД_);
		
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Если Выборка_.Следующий() Тогда
		Возврат Выборка_.ТипРЭМД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Получает информацию о ходе регистрации документа в РЭМД.
Функция ПолучитьСтатусРегистрацииДокументаВРЭМД(ДокументСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Результат_ = Новый Структура("СтатусСтрокой, КодСтатуса, Описание, ЭМДСсылка");
	
	// Соберем данные о ЭМД.
	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|ГДЕ
		|	НЕ ФедеральныеВебСервисыЭМД.ПометкаУдаления
		|	И ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы = &ДокументИнформационнойБазы";
		
	Запрос_.УстановитьПараметр("ДокументИнформационнойБазы", ДокументСсылка);
	
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	ЭМДСсылка_ = Неопределено;
	РеквизитыЭМД_ = Неопределено;
	
	Если Выборка_.Следующий() Тогда
		ЭМДСсылка_ = Выборка_.Ссылка;

		РеквизитыЭМД_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭМДСсылка_, "emdrId, ТекстПоследнейОшибки, ИдентификаторДокумента");
		
		ВыборкаОтправляемых_ = ПолучитьВыборкуОтправляемыхДокументов(ЭМДСсылка_);
		ЕстьВСпискеОтправляемых_ = ВыборкаОтправляемых_.Следующий() И УсловияГотовностиДокументаКОтправкеВыполнены(ЭМДСсылка_, ДокументСсылка);
		
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки КАК ТекстОшибки,
			|	ФедеральныеВебСервисыСообщенияРЭМД.ДатаОтвета КАК ДатаОтвета,
			|	ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения КАК ДатаСообщения,
			|	ФедеральныеВебСервисыСообщенияРЭМД.СообщениеУспешноОтправлено КАК СообщениеУспешноОтправлено
			|ИЗ
			|	РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторДокумента = &ИдентификаторДокумента
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения УБЫВ";
			
		Запрос_.УстановитьПараметр("ИдентификаторДокумента", РеквизитыЭМД_.ИдентификаторДокумента);
		
		ВыборкаЗаписиСообщения_ = Запрос_.Выполнить().Выбрать();
		ЕстьЗаписьСообщения_ = ВыборкаЗаписиСообщения_.Следующий();

		Результат_.ЭМДСсылка = ЭМДСсылка_;
	КонецЕсли;

	ПодлежитРегистрации_ = ДокументНеобходимоПоместитьВХранилищеДляРЭМД(ДокументСсылка,,,Истина);
	
	
	// Подготовим статус на основании данных об ЭМД.
	Если РеквизитыЭМД_ <> Неопределено И ЗначениеЗаполнено(РеквизитыЭМД_.emdrId) Тогда
		
		// Документ уже зарегистрирован в РЭМД.
		
		Результат_.СтатусСтрокой = "Зарегистрирован в РЭМД";
		Результат_.КодСтатуса = "ЗарегистрированВРЭМД";
		Результат_.Описание = стрШаблон("Документ зарегистрирован в РЭМД под номером ""%1"".", РеквизитыЭМД_.emdrId);
		
		ТекстПоследнейОшибки_ = "";
		ТекстОшибкиРЭМД_ = "";
		Если ЗначениеЗаполнено(РеквизитыЭМД_.ТекстПоследнейОшибки) Тогда
			ТекстПоследнейОшибки_ = стрШаблон(
				"Во время последней отправки возникла синхронная ошибка:
				|%1",
				РеквизитыЭМД_.ТекстПоследнейОшибки);
		КонецЕсли;
		
		Если ЕстьЗаписьСообщения_ И ЗначениеЗаполнено(ВыборкаЗаписиСообщения_.ТекстОшибки) Тогда
			ТекстОшибкиРЭМД_ = стрШаблон(
				"От РЭМД есть асинхронное сообщение об ошибке:
				|%1",
				ВыборкаЗаписиСообщения_.ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПоследнейОшибки_) Или ЗначениеЗаполнено(ТекстОшибкиРЭМД_) Тогда
			Результат_.СтатусСтрокой = Результат_.СтатусСтрокой + ", но есть ошибка";
			Результат_.Описание = Результат_.Описание + Символы.ПС + ТекстПоследнейОшибки_ + Символы.ПС + ТекстОшибкиРЭМД_;
		КонецЕсли;
		
	ИначеЕсли ПодлежитРегистрации_ = Ложь И ЭМДСсылка_ = Неопределено Тогда
	
		Результат_.СтатусСтрокой = "Не подлежит регистрации";
		Результат_.КодСтатуса = "НеДляРЭМД";
		Результат_.Описание = стрШаблон("В ШМД документа не заполнен тип документа РЭМД, либо документ не подлежит отправке в РЭМД по иной причине.");
		
	Иначе
		
		// Документ еще не зарегистрирован в РЭМД. Выясним причину.
		
		Если ЭМДСсылка_ = Неопределено Тогда
			Результат_.СтатусСтрокой = "Не готов к регистрации";
			Результат_.КодСтатуса = "НеГотовКРегистрации";
			Результат_.Описание = стрШаблон("Документ отсутствует в справочнике ""%1"".", Метаданные.Справочники.ФедеральныеВебСервисыЭМД.Синоним);
		Иначе
			
			Если ЕстьВСпискеОтправляемых_ Тогда
			
				СообщениеПроверкиЭЦП_ = Неопределено;
				Если Не ПроверитьЭлектронныеПодписиЭМД(ЭМДСсылка_, СообщениеПроверкиЭЦП_) Тогда
					// Документ присутствует в списке на отправку, но отправлен не будет, т.к. не пройдет проверку ЭЦП.
					Результат_.СтатусСтрокой = "Недействительная ЭЦП";
					Результат_.КодСтатуса = "ПроверкаЭЦП";
					Результат_.Описание = стрШаблон("Электронные подписи документа %1 (%2) не прошли проверку ""%3"".", ЭМДСсылка_, ДокументСсылка, СообщениеПроверкиЭЦП_);
				Иначе
					Результат_.СтатусСтрокой = "Ожидает отправки";
					Результат_.КодСтатуса = "ОжидаетОтправки";
					Результат_.Описание = стрШаблон("Регламентное задание ""%1"" попытается отправить документ на регистрацию в РЭМД." +
						" Если тип документа предполагет наличие подписи МО, а ее нету, перед отправкой будет предпринята попытка подписать автоматически сертификатом из свойств организации.", Метаданные.РегламентныеЗадания.ФедеральныеВебСервисыРЭМДОтправкаЗаявокНаРегистрацию.Синоним);
				КонецЕсли;

			Иначе
				
				Если ЕстьЗаписьСообщения_ И ВыборкаЗаписиСообщения_.СообщениеУспешноОтправлено И Не ЗначениеЗаполнено(ВыборкаЗаписиСообщения_.ДатаОтвета) Тогда
					Результат_.СтатусСтрокой = "Заявка отправлена на регистрацию ";
					Результат_.КодСтатуса = "ЗаявкаОтправлена";
					Результат_.Описание = стрШаблон("Заявка на регистрацию отправлена ""%1"", ожидаем ответа.", ВыборкаЗаписиСообщения_.ДатаСообщения);
				Иначе
				
					Запрос_.Текст =
						"ВЫБРАТЬ
						|	ОтложенноеПодписаниеЭП.ПодписываемыйОбъект КАК ПодписываемыйОбъект,
						|	ОтложенноеПодписаниеЭП.Сотрудник КАК Сотрудник,
						|	ОтложенноеПодписаниеЭП.РольПриПодписании КАК РольПриПодписании
						|ИЗ
						|	РегистрСведений.ОтложенноеПодписаниеЭП КАК ОтложенноеПодписаниеЭП
						|ГДЕ
						|	ОтложенноеПодписаниеЭП.ПодписываемыйОбъект = &ЭМДСсылка";
						
					Запрос_.УстановитьПараметр("ЭМДСсылка", ЭМДСсылка_);
					
					Выборка_ = Запрос_.Выполнить().Выбрать();
					Если Выборка_.Следующий() Тогда
						Результат_.СтатусСтрокой = "Ожидает подписание сотрудником";
						Результат_.КодСтатуса = "ОжидаетПодписаниеСотрудником";
						Результат_.Описание = стрШаблон("Документ ожидает подписание сотрудником %1 %2.", Выборка_.Сотрудник, Выборка_.РольПриПодписании);
					Иначе
				
						Причина_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьСтатусРегистрацииДокументаВРЭМД(ДокументСсылка);
						
						Если Причина_ <> Неопределено Тогда
							Результат_.СтатусСтрокой = Причина_.СтатусСтрокой;
							Результат_.КодСтатуса = Причина_.КодСтатуса;
							Результат_.Описание = Причина_.Описание;
						ИначеЕсли ЗначениеЗаполнено(РеквизитыЭМД_.ТекстПоследнейОшибки) И ЕстьЗаписьСообщения_ И ЗначениеЗаполнено(ВыборкаЗаписиСообщения_.ТекстОшибки) Тогда
						
							Результат_.СтатусСтрокой = "Синхронная и асинхронная ошибки";
							Результат_.КодСтатуса = "СинхроннаяИАсинхроннаяОшибки";
							Результат_.Описание = стрШаблон(
								"При отправке возникла синхронная ошибка:
								|%1
								|
								|От РЭМД получена асинхронная ошибка:
								|%2",
								РеквизитыЭМД_.ТекстПоследнейОшибки, ВыборкаЗаписиСообщения_.ТекстОшибки);
								
						ИначеЕсли ЗначениеЗаполнено(РеквизитыЭМД_.ТекстПоследнейОшибки) Тогда
						
							Результат_.СтатусСтрокой = "Синхронная ошибка при отправке";
							Результат_.КодСтатуса = "СинхроннаяОшибка";
							Результат_.Описание = стрШаблон(
								"При отправке возникла синхронная ошибка:
								|%1",
								РеквизитыЭМД_.ТекстПоследнейОшибки);
								
						ИначеЕсли ЕстьЗаписьСообщения_ И Не ЗначениеЗаполнено(РеквизитыЭМД_.ТекстПоследнейОшибки)
							И Не ЗначениеЗаполнено(ВыборкаЗаписиСообщения_.ТекстОшибки)
							И (ЗначениеЗаполнено(ВыборкаЗаписиСообщения_.ДатаОтвета) Или Не ВыборкаЗаписиСообщения_.СообщениеУспешноОтправлено)
						Тогда
						
							Если ВыборкаЗаписиСообщения_.СообщениеУспешноОтправлено Тогда
							
								Результат_.СтатусСтрокой = "Асинхронная ошибка при отправке без текста";
								Результат_.КодСтатуса = "АсинхроннаяОшибкаБезТекста";
								Результат_.Описание = стрШаблон(
									"При отправке возникла асинхронная ошибка, но ее текст отсутствует в регистре сообщений");
							Иначе
								Результат_.СтатусСтрокой = "Синхронная ошибка при отправке без текста";
								Результат_.КодСтатуса = "СинхроннаяОшибкаБезТекста";
								Результат_.Описание = стрШаблон(
									"При отправке возникла синхронная ошибка, но ее текст отсутствует в элементе справочника");
							КонецЕсли;
								
						Иначе
							Если ЕстьЗаписьСообщения_ И ЗначениеЗаполнено(ВыборкаЗаписиСообщения_.ТекстОшибки) Тогда
								Результат_.СтатусСтрокой = "Асинхронная ошибка от РЭМД";
								Результат_.КодСтатуса = "АсинхроннаяОшибка";
								Результат_.Описание = стрШаблон(
									"От РЭМД получено асинхронное сообщение об ошибке:
									|%1",
									ВыборкаЗаписиСообщения_.ТекстОшибки);
							Иначе
								Результат_.СтатусСтрокой = "Не готов к регистрации";
								Результат_.КодСтатуса = "НеГотовКРегистрации";

								// Подпись МО.
								ЗапросЭПМО_ = Новый Запрос;
								ЗапросЭПМО_.Текст =
									"ВЫБРАТЬ
									|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка
									|ИЗ
									|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
									|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ПодписьМО
									|		ПО ФедеральныеВебСервисыЭМД.Ссылка = ПодписьМО.Ссылка
									|			И (ПодписьМО.ЭтоПодписьМО = ИСТИНА)
									|ГДЕ
									|	ФедеральныеВебСервисыЭМД.ТипРЭМД.НеобходимаПодписьМО = ИСТИНА
									|	И ФедеральныеВебСервисыЭМД.Ссылка = &ЭМДСсылка
									|	И ПодписьМО.НомерСтроки ЕСТЬ NULL";
		
								ЗапросЭПМО_.УстановитьПараметр("ЭМДСсылка", ЭМДСсылка_);
								ВыборкаЭПМО_ = ЗапросЭПМО_.Выполнить().Выбрать();
								
								Если ВыборкаЭПМО_.Следующий() Тогда
									Результат_.Описание = стрШаблон("У документа отсутствует подпись МО.");
								Иначе
									// СНИЛС пациента.
									Запрос_.Текст =
										"ВЫБРАТЬ
										|	ЕСТЬNULL(ФедеральныеВебСервисыЭМД.ТипРЭМД.НеобходимСНИЛСПациента, ЛОЖЬ) КАК НеобходимСНИЛСПациента,
										|	ФедеральныеВебСервисыЭМД.Пациент КАК Пациент
										|ИЗ
										|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
										|ГДЕ
										|	ФедеральныеВебСервисыЭМД.Ссылка = &ЭМДСсылка";
										
									Запрос_.УстановитьПараметр("ЭМДСсылка", ЭМДСсылка_);
									
									Выборка_ = Запрос_.Выполнить().Выбрать();
									Выборка_.Следующий();
									
									Если Выборка_.НеобходимСНИЛСПациента И Не ЗначениеЗаполнено(ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеПациента(Выборка_.Пациент, "СтраховойНомерПФР").СтраховойНомерПФР) Тогда
										Результат_.Описание = стрШаблон("У пациента ""%1"" не заполнен СНИЛС.", Выборка_.Пациент);
									ИначеЕсли ДокументСсылка.ПометкаУдаления = Истина Тогда
										Результат_.Описание = стрШаблон("Документ ""%1"" помечен на удаление.", ДокументСсылка);
									ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументСсылка, "Проведен") И ДокументСсылка.Проведен = Ложь Тогда
										Результат_.Описание = стрШаблон("Документ ""%1"" не проведен.", ДокументСсылка);
									ИначеЕсли Не ЗначениеЗаполнено(Выборка_.Пациент) Тогда
										Результат_.Описание = стрШаблон("В документе ""%1"" не заполнен пациент.", ДокументСсылка);
									ИначеЕсли Не ФедеральныеВебСервисыПереопределяемый.ПроверитьГотовностьДокумента(ДокументСсылка) Тогда
										Результат_.Описание = стрШаблон("Статус документа ""%1"" отличен от значения Готов.", ДокументСсылка);
									Иначе
										Результат_.Описание = "Документ не готов к регистрации по неизвестной причине.";
									КонецЕсли;
								КонецЕсли;

							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
					
			КонецЕсли;
	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

// Создает фоновое задание для чтения записей ЖР с отбором по полю комментария.
Функция ПрочитатьЖурналРегистрацииСОтборомПоКомментарию(Комментарий, ДатаНачала,  ДатаОкончания, УникальныйИдентификаторДляВременногоХранилища) Экспорт

	ОтборЖурналаРегистрации = Новый Структура;

	Если ЗначениеЗаполнено(Комментарий) Тогда
		ОтборЖурналаРегистрации.Вставить("Комментарий", Комментарий);
	Иначе
		ВызватьИсключение "Не заполнен параметр Комментарий.";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ОтборЖурналаРегистрации.Вставить("ДатаНачала", ДатаНачала);
	Иначе
		ВызватьИсключение "Не заполнена дата начала.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОтборЖурналаРегистрации.Вставить("ДатаОкончания", ДатаОкончания + 1);
	КонецЕсли;

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ПараметрыОтчета.Вставить("КоличествоПоказываемыхСобытий", 0);
	ПараметрыОтчета.Вставить("УникальныйИдентификатор", УникальныйИдентификаторДляВременногоХранилища);
	ПараметрыОтчета.Вставить("МенеджерВладельца", Обработки.ЖурналРегистрации);
	ПараметрыОтчета.Вставить("ДобавлятьДополнительныеКолонки", Ложь);
	ПараметрыОтчета.Вставить("Журнал", Неопределено);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторДляВременногоХранилища);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // запускать сразу
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка событий обмена с РЭМД из журнала регистрации'");
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации",
		ПараметрыОтчета, ПараметрыВыполнения);
	
	Если РезультатВыполнения.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатВыполнения.КраткоеПредставлениеОшибки;
	КонецЕсли;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
КонецФункции

// Помещает документ с подписью или добавляет подпись при помещении.
Процедура ПослеДобавленияПодписей(Ссылка, ДокументДД, ОписаниеДанных, ДобавлениеПодписи) Экспорт
	
	Пациент_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Пациент");
	ДанныеЭлектронныхПодписей_ = ФедеральныеВебСервисыРЭМД.ПолучитьДанныеЭлектронныхПодписейИзРезультатаПодписания(Ссылка, ОписаниеДанных);
	
	Если ДобавлениеПодписи = Ложь Тогда
		ФедеральныеВебСервисыРЭМД.ПоместитьДокументВХранилищеЭМД(
			Пациент_,
			ДокументДД,
			ДанныеЭлектронныхПодписей_,
			Неопределено,
			Неопределено,
			Ссылка,
			Перечисления.ФорматФайлаДляРЭМД.CDA,
			ФедеральныеВебСервисыРЭМД.ПолучитьТипРЭМДПоДокументу(Ссылка)
		);
	Иначе
		ФедеральныеВебСервисыРЭМД.ДобавитьПодписьДокументуВХранилищеЭМД(
			Ссылка,
			ДанныеЭлектронныхПодписей_
		);
	КонецЕсли;

КонецПроцедуры

// Возвращает массив ссылок на справочник ФедеральныеВебСервисыЭМД элементов ожидающих отправку в РЭМД.
Функция ПолучитьМассивДокументовОжидающихОтправкуВРЭМД() Экспорт
	Выборка_ = ПолучитьВыборкуОтправляемыхДокументов();
	
	Результат_ = Новый Массив;
	
	ПрерватьОтправку_ = Ложь;
	ДопустимоеКоличествоИтераций_ = 10000;
	Пока Не ПрерватьОтправку_ Цикл
		ДопустимоеКоличествоИтераций_ = ДопустимоеКоличествоИтераций_ - 1;
		
		Если ДопустимоеКоличествоИтераций_ = 0 Тогда
			ВызватьИсключение "Обнаружено зацикливание в функции ФедеральныеВебСервисыРЭМД.ПолучитьМассивДокументовОжидающихОтправкуВРЭМД()";
		КонецЕсли;
	
		ВыборкаПуста_ = Истина;
		Пока Выборка_.Следующий() Цикл
			ВыборкаПуста_ = Ложь;
			Если УсловияГотовностиДокументаКОтправкеВыполнены(Выборка_.Ссылка, Выборка_.ДокументИнформационнойБазы) Тогда
				Результат_.Добавить(Выборка_.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Возможно ПолучитьВыборкуОтправляемыхДокументов возвращает порционно.
		Если Не ВыборкаПуста_ Тогда
			Выборка_ = ПолучитьВыборкуОтправляемыхДокументов(Неопределено, Результат_);
			Если Выборка_ = Неопределено Тогда
				ПрерватьОтправку_ = Истина;
			КонецЕсли;
		Иначе
			ПрерватьОтправку_ = Истина;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат_;
	
КонецФункции

// Возвращает массив ссылок на справочник ФедеральныеВебСервисыЭМД элементов отправленных в РЭМД, но не получивших асинхронного ответа.
Функция ПолучитьМассивДокументовОтправленныхВРЭМДБезОтвета() Экспорт

	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМД
		|		ПО ФедеральныеВебСервисыЭМД.ИдентификаторДокумента = ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМДБудущее
		|		ПО ФедеральныеВебСервисыЭМД.ИдентификаторДокумента = ФедеральныеВебСервисыСообщенияРЭМДБудущее.ИдентификаторДокумента
		|			И (ФедеральныеВебСервисыСообщенияРЭМДБудущее.ДатаСообщения > ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения)
		|ГДЕ
		|	ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ
		|	И ФедеральныеВебСервисыСообщенияРЭМДБудущее.ИдентификаторСообщения ЕСТЬ NULL
		|	И ФедеральныеВебСервисыСообщенияРЭМДБудущее.СообщениеУспешноОтправлено = ИСТИНА
		|	И ФедеральныеВебСервисыСообщенияРЭМД.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
	Результат_ = Запрос_.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Возврат Результат_;
	
КонецФункции

// Возвращает массив ссылок на справочник ФедеральныеВебСервисыЭМД элементов получивших ошибку при попытке регистрации в РЭМД.
Функция ПолучитьМассивДокументовСОшибкойПриРегистрацииВРЭМД(МассивДокументовОжидающихОтправкуВРЭМД = Неопределено) Экспорт

	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМД
		|		ПО ФедеральныеВебСервисыЭМД.ИдентификаторДокумента = ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМДБудущее
		|		ПО ФедеральныеВебСервисыЭМД.ИдентификаторДокумента = ФедеральныеВебСервисыСообщенияРЭМДБудущее.ИдентификаторДокумента
		|			И (ФедеральныеВебСервисыСообщенияРЭМДБудущее.ДатаСообщения > ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения)
		|ГДЕ
		|	ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ФедеральныеВебСервисыЭМД.Ссылка В (&МассивДокументовОжидающихОтправкуВРЭМД)
		|	И ФедеральныеВебСервисыСообщенияРЭМДБудущее.ИдентификаторСообщения ЕСТЬ NULL
		|	И ФедеральныеВебСервисыЭМД.emdrId = """"
		|	И (ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки <> """"
		|			ИЛИ НЕ ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО """")";
		
	Если МассивДокументовОжидающихОтправкуВРЭМД = Неопределено Тогда
		Запрос_.УстановитьПараметр("МассивДокументовОжидающихОтправкуВРЭМД", Новый Массив);
	Иначе
		Запрос_.УстановитьПараметр("МассивДокументовОжидающихОтправкуВРЭМД", МассивДокументовОжидающихОтправкуВРЭМД);
	КонецЕсли;
	
	Результат_ = Запрос_.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Возврат Результат_;
	
КонецФункции

// Возвращает массив ссылок на справочник ФедеральныеВебСервисыЭМД элементов ожидающих подписания ЭП.
Функция ПолучитьМассивДокументовОжидающихПодписания() Экспорт

	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтложенноеПодписаниеЭП.ПодписываемыйОбъект КАК ПодписываемыйОбъект
		|ИЗ
		|	РегистрСведений.ОтложенноеПодписаниеЭП КАК ОтложенноеПодписаниеЭП";

	Результат_ = Запрос_.Выполнить().Выгрузить().ВыгрузитьКолонку("ПодписываемыйОбъект");
		
	Возврат Результат_;
	
КонецФункции

// Создает структуру с полями для заполнения сведениями о пациенте.
// ИдентификаторПациента - строковый идентификатор пациента, который будет передаваться в РЭМД.
// ПолПациентаКодРЭМД - код минздрава пола пациента по справочнику 1.2.643.5.1.13.13.11.1040.
// СтраховойНомерПФР - СНИЛС пациента.
// ДатаРождения - тип данных Дата.
Функция СоздатьСтруктуруДанныхПациента(ЗапрашиваемыеРеквизиты = Неопределено) Экспорт
	Если ЗапрашиваемыеРеквизиты = Неопределено Тогда
		Возврат Новый Структура("ИдентификаторПациента,Фамилия,Имя,Отчество,ДатаРождения,ПолПациентаКодРЭМД,СтраховойНомерПФР");
	Иначе
		Возврат Новый Структура(ЗапрашиваемыеРеквизиты);
	КонецЕсли;
КонецФункции

// Создает структуру с полями для заполнения сведениями о сотруднике.
// ИдентификаторСотрудника - строковый идентификатор сотрудника, который будет передаваться в РЭМД.
// Подразделение - Ссылка на справочник подразделений.
// Должность - Ссылка на справочник должностей.
// Специальность - Ссылка на справочник специальностей.
// СтраховойНомерПФР - СНИЛС сотрудника.
// ДатаРождения - тип данных Дата.
Функция СоздатьСтруктуруДанныхСотрудника(ЗапрашиваемыеРеквизиты = Неопределено) Экспорт
	Если ЗапрашиваемыеРеквизиты = Неопределено Тогда
		Возврат Новый Структура("ИдентификаторСотрудника, Фамилия,Имя,Отчество,ДатаРождения,СтраховойНомерПФР,Должность,Специальность,АдресЭлектроннойПочты,Телефон,Подразделение");
	Иначе
		Возврат Новый Структура(ЗапрашиваемыеРеквизиты);
	КонецЕсли;
КонецФункции

// Создает структуру с полями для заполнения сведениями об организации.
// КодOIDМедицинскойОрганизации - Строка. OID медицинской организации.
// Наименование - Наименование медицинской организации.
Функция СоздатьСтруктуруДанныхОрганизации() Экспорт
	Возврат Новый Структура("КодOIDМедицинскойОрганизации, Наименование");
КонецФункции

// Создает структуру с полями для заполнения сведениями о документе регистрируемом в РЭМД.
// Пациент - Ссылка на пациента.
// Подразделение - Ссылка на подразделение.
// КодТипаДокументаРЭМД - код минздрава из справочника 1.2.643.5.1.13.13.99.2.41 (справочник ТипыМДРегистрируемыхВРЭМД).
// Описание - краткое строковое описание документа (титул).
// Дата - дата создания документа.
// СписокСотрудниковОбязанныхПодписать - Массив ссылок на сотрудников авторов документа, которые по логике информационной системы должны подписать документ.
//                                       Используется для формирования списка обязательных подписантов без подписи которых документ не отправится в РЭМД.
Функция СоздатьСтруктуруДанныхДокумента(ЗапрашиваемыеРеквизиты = Неопределено) Экспорт
	Если ЗапрашиваемыеРеквизиты = Неопределено Тогда
		Возврат Новый Структура("Пациент,Дата,Подразделение,КодТипаДокументаРЭМД,Описание,СписокСотрудниковОбязанныхПодписать");
	Иначе
		Возврат Новый Структура(ЗапрашиваемыеРеквизиты);
	КонецЕсли;
КонецФункции

// Создает структуру с полями для заполнения сведениями о подразделении.
// КодOIDМедицинскогоПодразделения - Строка. OID медицинского подразделения.
// Наименование - Наименование подразделения.
// Родитель - Ссылка на вышестоящее подразделение.
Функция СоздатьСтруктуруДанныхПодразделения() Экспорт
	Возврат Новый Структура("КодOIDМедицинскогоПодразделения,Наименование,Родитель");
КонецФункции

// Проверяет ЭЦП в справочнике ФедеральныеВебСервисыЭМД.
// 
// Параметры:
//  УдалятьЭлектронныеПодписи      - Булево - Удалять некорректные ЭП.
Функция ПроверитьЭлектронныеПодписиЭМД(ЭМДСсылка, OutСообщение = Неопределено, УдалятьЭлектронныеПодписи = Ложь) Экспорт
	
	Попытка
		П_ = ЭлектроннаяПодписьСлужебный.ПараметрыСозданияМенеджераКриптографии();
		П_.ПоказатьОшибку = Истина;
		МенеджерКриптографии_ = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("ПолучениеСертификатов", П_);
	Исключение
		
		Текст_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка,,,ЭМДСсылка);
		
		OutСообщение = Текст_;

		// Неудалось получить менеджер криптографии, проверка ЭЦП невозможна, но все равно вернем Истина, что бы не прерывать отправку в РЭМД.
		Возврат Истина;
	КонецПопытки;
	
	Если МенеджерКриптографии_ = Неопределено Тогда
		OutСообщение = стрШаблон("Не удалось получить менеджер криптографии для проверки ЭЦП: %1", ЭМДСсылка);
		ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(OutСообщение, УровеньЖурналаРегистрации.Ошибка,,,ЭМДСсылка);
		Возврат Истина;
	КонецЕсли;
	
	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы КАК ДокументИнформационнойБазы,
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка,
		|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.ОтносительныйПутьКФайлуПодписиЭМД КАК ОтносительныйПутьКФайлуПодписиЭМД,
		|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Сотрудник КАК Сотрудник,
		|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.ЭтоПодписьМО КАК ЭтоПодписьМО,
		|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|		ПО ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка = ФедеральныеВебСервисыЭМД.Ссылка
		|ГДЕ
		|	ФедеральныеВебСервисыЭМД.Ссылка = &Ссылка";
		
	Запрос_.УстановитьПараметр("Ссылка", ЭМДСсылка);
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	КонтрольняДата_ = ТекущаяДатаСеанса();
	
	Результат_ = Истина;
	
	OutСообщение = "";
	
	УдаляемыеПодписи_ = Новый Массив;

	Пока Выборка_.Следующий() Цикл
		ПолныйПуть_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(Выборка_.ОтносительныйПутьКФайлуПодписиЭМД);
		ДДПодписи_ = Новый ДвоичныеДанные(ПолныйПуть_);
		
		Сертификаты_ = МенеджерКриптографии_.ПолучитьСертификатыИзПодписи(ДДПодписи_);
		
		Если ТипЗнч(Сертификаты_) = Тип("Массив") Тогда

			Для Каждого СертификатКриптографии_ Из Сертификаты_ Цикл
				Если КонтрольняДата_ < СертификатКриптографии_.ДатаНачала Или КонтрольняДата_ >= СертификатКриптографии_.ДатаОкончания Тогда
					OutСообщение = ?(ЗначениеЗаполнено(OutСообщение), OutСообщение + Символы.ПС, "")  + стрШаблон(
						"Сертификат [период действия: %4 - %5], которым подписан документ %1 [%2], не актуален на дату %3",
						ЭМДСсылка,
						?(Выборка_.ЭтоПодписьМО, "Подпись МО", "Сотрудник: " + Выборка_.Сотрудник),
						КонтрольняДата_,
						СертификатКриптографии_.ДатаНачала,
						СертификатКриптографии_.ДатаОкончания
					);
					Результат_ = Ложь;
					
					УдаляемыеПодписи_.Добавить(Выборка_.НомерСтроки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдалятьЭлектронныеПодписи = Истина и УдаляемыеПодписи_.Количество() > 0 Тогда
		УдалитьЭлектронныеПодписи(ЭМДСсылка, УдаляемыеПодписи_);
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

#КонецОбласти

#Область СлужебныйИнтерфейс

// Возвращает соответствие с данными для заполнения шаблона сообщения для регистрации документа в РЭМД.
Функция ПолучитьДанныеДляРегистрацииДокументаВРЭМД(ДокументСсылка, ЭМДСсылка = Неопределено) Экспорт
	
	ВШаблон_ = Новый Соответствие();
	
	//Документ
	ДанныеДокумента_ = ПолучитьДанныеДокумента(ДокументСсылка);
	
	ДанныеCDA_ = Неопределено;
	Если ЗначениеЗаполнено(ЭМДСсылка) Тогда
		ДанныеCDA_ = ПолучитьДанныеCDA(ЭМДСсылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭМДСсылка) Тогда
		ВШаблон_["[DOCUMENT_ID]"] = ЭМДСсылка.ИдентификаторДокумента;
		ВШаблон_["[НОМЕР_ДОКУМЕНТА]"] = ЭМДСсылка.НомерДокумента;
		ВШаблон_["[ВИД_ДОКУМЕНТА]"] = ЭМДСсылка.ТипРЭМД.КодМинздрава;
	Иначе
		ВШаблон_["[DOCUMENT_ID]"] = ДанныеДокумента_.ИдентификаторДокумента;
		ВШаблон_["[НОМЕР_ДОКУМЕНТА]"] = ДанныеДокумента_.НомерДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВШаблон_["[ВИД_ДОКУМЕНТА]"]) Тогда
		ВШаблон_["[ВИД_ДОКУМЕНТА]"] = ДанныеДокумента_.ВидДокумента;
	КонецЕсли;

	Если ДанныеCDA_ <> Неопределено И ЗначениеЗаполнено(ДанныеCDA_.ДатаСозданияДокументаСтрокой) Тогда
		ВШаблон_["[ДАТАВРЕМЯ_ДОКУМЕНТА]"] = ДанныеCDA_.ДатаСозданияДокументаСтрокой;
	Иначе
		ВШаблон_["[ДАТАВРЕМЯ_ДОКУМЕНТА]"] = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ДанныеДокумента_.Дата);
	КонецЕсли;

	Если ДанныеCDA_ <> Неопределено И ЗначениеЗаполнено(ДанныеCDA_.ДатаСозданияДокумента) Тогда
		ВШаблон_["[ДАТА_ДОКУМЕНТА]"] = ДанныеCDA_.ДатаСозданияДокумента;
	Иначе
		ВШаблон_["[ДАТА_ДОКУМЕНТА]"] = Формат(ДанныеДокумента_.Дата, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	ВШаблон_["[ОПИСАНИЕ]"] = ДанныеДокумента_.Описание;

	ВШаблон_["[DEP_OID]"] = "";
	ВШаблон_["[DEP_NAME]"] = "";

	Если ЗначениеЗаполнено(ДанныеДокумента_.Подразделение) Тогда
		РеквизитыПодразделения_ = ПолучитьOidПодразделения(ДанныеДокумента_.Подразделение);
		
		Если РеквизитыПодразделения_ <> Неопределено И ЗначениеЗаполнено(РеквизитыПодразделения_.КодOIDМедицинскогоПодразделения) Тогда
			ВШаблон_["[DEP_OID]"] = РеквизитыПодразделения_.КодOIDМедицинскогоПодразделения;
			ВШаблон_["[DEP_NAME]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(РеквизитыПодразделения_.Наименование);
		КонецЕсли;
	КонецЕсли;

	// Пациент
	Если ЗначениеЗаполнено(ДанныеДокумента_.ПациентСсылка) Тогда
		ДанныеПациента_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеПациента(ДанныеДокумента_.ПациентСсылка);
		СНИЛС_ = СтрЗаменить(СтрЗаменить(ДанныеПациента_.СтраховойНомерПФР, "-", ""), " ", "");
		
		ВШаблон_["[PATIENT_ID]"] = ДанныеПациента_.ИдентификаторПациента;
		ВШаблон_["[ФАМИЛИЯ]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеПациента_.Фамилия);
		ВШаблон_["[ИМЯ]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеПациента_.Имя);
		ВШаблон_["[ОТЧЕСТВО]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеПациента_.Отчество);
		ВШаблон_["[ДАТАРОЖДЕНИЯ]"] = Формат(ДанныеПациента_.ДатаРождения, "ДФ=yyyy-MM-dd");
		ВШаблон_["[ПОЛ]"] = ДанныеПациента_.ПолПациентаКодРЭМД;
		ВШаблон_["[СНИЛС_НОМЕР]"] = СНИЛС_;
		ВШаблон_["[ЕДИНЫЙ_НОМЕР_ПОЛИСА]"] = "";
	КонецЕсли;
	
	//Сотрудники и их подписи.
	ВШаблон_["[КОЛИЧЕСТВО_ПОДПИСЕЙ]"] = 0;
	ВШаблон_["[ПОДПИСЬ_МО]"] = "";
	
	Если ЗначениеЗаполнено(ЭМДСсылка) Тогда
		
		КоличествоПодписей_ = 0;
		
		Номер_ = 1;
		Для Каждого строкаТЧ_ Из ЭМДСсылка.ЭлектронныеПодписиЭМД Цикл
		
			Если строкаТЧ_.ЭтоПодписьМО = Истина Тогда
				// Это подпись мед. организации, а не сотрудника.
				
				Если ЗначениеЗаполнено(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД) Тогда
					
					ПолныйПуть_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД);
					
					ФайлПодписи_ = ПолучитьТелоФайлаИКонтрольнуюСумму(ПолныйПуть_);

					ВШаблон_["[ПОДПИСЬ_МО]"] = ФайлПодписи_.ТелоДокументаBase64;
					ВШаблон_["[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_МО]"] = Формат(ФайлПодписи_.КонтрольнаяСумма,"ЧГ=0");
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Сотрудник_ = строкаТЧ_.Сотрудник;
			
			КоличествоПодписей_ = КоличествоПодписей_ + 1;

			ВШаблон_["[ИДЕНТИФИКАТОР_СОТРУДНИКА_" + Номер_ + "]"] = ПолучитьИдентификаторСотрудникаДляРЭМД(Сотрудник_);
			
			Если ЗначениеЗаполнено(Сотрудник_) Тогда
				ДанныеСотрудника_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеСотрудника(Сотрудник_);

				СНИЛС_ = АлгоритмыСтроковые.УдалитьСимволыКроме(ДанныеСотрудника_.СтраховойНомерПФР, "0123456789");
				КодДолжности_ = "";
				Если ЗначениеЗаполнено(ДанныеСотрудника_.Должность) Тогда 
					КодДолжности_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваПоСсылке(ДанныеСотрудника_.Должность, "1.2.643.5.1.13.13.99.2.181").code;
				КонецЕсли;
				КодСпециальности_ = "";
				Если ЗначениеЗаполнено(ДанныеСотрудника_.Специальность) Тогда 
					КодСпециальности_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваПоСсылке(ДанныеСотрудника_.Специальность).code;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(КодДолжности_) Тогда 
					ВызватьИсключение("У сотрудника не удалось определить код должности");
				КонецЕсли;
				
				Телефон_ = ДанныеСотрудника_.Телефон;
				EMail_ = ДанныеСотрудника_.АдресЭлектроннойПочты;
				
				Если ЗначениеЗаполнено(EMail_) И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(EMail_) Тогда
					ВызватьИсключение стрШаблон("EMail ""%1"" сотрудника ""%2"" не соответствует требованиям", EMail_, Сотрудник_);
				КонецЕсли;

				Если ЗначениеЗаполнено(строкаТЧ_.РольРЭМД) Тогда
					Роль_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(строкаТЧ_.РольРЭМД, "Роль");
				Иначе
					ФедеральныйКодДолжности_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваПоСсылке(ДанныеСотрудника_.Должность, "1.2.643.5.1.13.13.11.1002").code;
					Роль_ = ПолучитьРольСотрудникаПриПодписании(ДанныеДокумента_.ВидДокумента, ФедеральныйКодДолжности_);
					
					Если Не ЗначениеЗаполнено(Роль_) Тогда
						ФедеральныйКодГруппы_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваРодителя(ФедеральныйКодДолжности_, "1.2.643.5.1.13.13.11.1002");
						Роль_ = ПолучитьРольСотрудникаПриПодписании(ДанныеДокумента_.ВидДокумента, ФедеральныйКодГруппы_);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Роль_) Тогда
					ВызватьИсключение стрШаблон("Не удалось определить роль сотрудниа при подписании по виду документа ""%1"" и коду должности ""%2"".", ДанныеДокумента_.ВидДокумента, КодДолжности_);
				КонецЕсли;
				
				ВШаблон_["[РОЛЬ_СОТРУДНИКА_" + Номер_ + "]"] = Роль_;
				ВШаблон_["[ФАМИЛИЯ_СОТРУДНИКА_" + Номер_ + "]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеСотрудника_.Фамилия);
				ВШаблон_["[ИМЯ_СОТРУДНИКА_" + Номер_ + "]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеСотрудника_.Имя);
				ВШаблон_["[ОТЧЕСТВО_СОТРУДНИКА_" + Номер_ + "]"] = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеСотрудника_.Отчество);
				ВШаблон_["[ДАТАРОЖДЕНИЯ_СОТРУДНИКА_" + Номер_ + "]"] = Формат(ДанныеСотрудника_.ДатаРождения, "ДФ=yyyy-MM-dd");
				ВШаблон_["[СНИЛС_СОТРУДНИКА_" + Номер_ + "]"] = СНИЛС_;
				ВШаблон_["[КОД_ДОЛЖНОСТИ_" + Номер_ + "]"] = КодДолжности_;
				ВШаблон_["[КОД_СПЕЦИАЛЬНОСТИ_" + Номер_ + "]"] = КодСпециальности_;
				ВШаблон_["[EMAIL_СОТРУДНИКА_" + Номер_ + "]"] = EMail_;
				ВШаблон_["[ТЕЛЕФОН_СОТРУДНИКА_" + Номер_ + "]"] = Телефон_;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД) Тогда
				
				ПолныйПуть_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД);
				
				ФайлПодписи_ = ПолучитьТелоФайлаИКонтрольнуюСумму(ПолныйПуть_);

				ВШаблон_["[ПОДПИСЬ_" + Номер_ + "]"] = ФайлПодписи_.ТелоДокументаBase64;
				ВШаблон_["[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_" + Номер_ + "]"] = Формат(ФайлПодписи_.КонтрольнаяСумма,"ЧГ=0");
			КонецЕсли;
			
			Номер_ = Номер_ + 1;
		КонецЦикла;
		ВШаблон_["[КОЛИЧЕСТВО_ПОДПИСЕЙ]"] = КоличествоПодписей_;

	КонецЕсли;
	
	Возврат ВШаблон_;
КонецФункции

// Используется в регламентном задании.
Процедура ОтправитьЗаявкиНаРегистрациюДокументовВРЭМД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФедеральныеВебСервисыРЭМДОтправкаЗаявокНаРегистрацию);
	ПодготовитьИОтправитьЗаявкиНаРегистрациюДокументовВРЭМД();
КонецПроцедуры

// Используется в регламентном задании.
Процедура АвтоматическоеПодписаниеДокументовСертификатомМедОрганизации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФедеральныеВебСервисыРЭМДАвтоматическоеПодписаниеСертификатомМедОрганизации);
	ВыполнитьАвтоматическоеПодписаниеДокументовСертификатомМедОрганизации();
КонецПроцедуры

// Возвращает тело документа и контрольную сумму для отправки в РЭМД.
Функция ПолучитьТелоФайлаИКонтрольнуюСумму(Путь)
	ДД_ = Новый ДвоичныеДанные(Путь);

	РасчетКонтрольнойСуммы_ = Новый ХешированиеДанных(ХешФункция.CRC32);
	РасчетКонтрольнойСуммы_.Добавить(ДД_);

	Возврат Новый Структура ("ТелоДокументаBase64, КонтрольнаяСумма", Base64Строка(ДД_), РасчетКонтрольнойСуммы_.ХешСумма);
КонецФункции

// Используется в регламентном задании.
Процедура УдалитьСтарыеДокументыИзАрхиваЭМД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФедеральныеВебСервисыУдалениеСтарыхДокументовИзАрхиваЭМД);
	НайтиИУдалитьСтарыеДокументыИзАрхиваЭМД();
КонецПроцедуры

#КонецОбласти

// Вспомогательные процедуры и функции
#Область СлужебныеПроцедурыИФункции

// Отправляет HL7 пакет на веб-сервис.
Функция СформироватьИОтправитьSOAPЗапрос(Адрес, ТелоСообщения, ИдентификаторКлиента, ИдентификаторСообщения, ТипПакета = Неопределено) Экспорт
	
	ШаблонЗаголовка_ = ТекстXMLЗаголовокSOAP(НЕ ЗначениеЗаполнено(ТипПакета));
	ДанныеЗаголовок_ = Новый Соответствие();
	ДанныеЗаголовок_["[MSGID]"] = ИдентификаторСообщения;
	ДанныеЗаголовок_["[ACTION]"] = ТипПакета;
	ДанныеЗаголовок_["[CLIENTID]"] = ИдентификаторКлиента;
	ДанныеЗаголовок_["[ADDRESSTO]"] = Адрес;
	
	АдресОбратногоВызова_ = ПолучитьАдресКоллбэка();
	
	ДанныеЗаголовок_["АдресОбратногоВызова"] = АдресОбратногоВызова_;

	Заголовок_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(ШаблонЗаголовка_, ДанныеЗаголовок_);

	Результат_ = ФедеральныеВебСервисыСервер.ОтправитьСообщениеSOAP(ТелоСообщения, Адрес, Заголовок_);
	Если  Ложь = Результат_ Тогда 
		ТекстОшибки_ = СтрШаблон(
			"Обращение по адресу ""%1"" завершилось с ошибкой. Ошибка подключения.", // Текст ошибки менять с проверкой на использовавние. Эта ошибка должна приводить к повторной отправке в РЭМД.
			Адрес
		); 
		ВызватьИсключение(ТекстОшибки_);
	КонецЕсли;
	
	Если ТипЗнч(Результат_) = Тип("Структура") Тогда 
		Если Результат_.КодСостояния <> 200 Тогда 
			ОписаниеОшибки_ = ПолучитьТекстОшибкиSoap(Результат_.Тело);
			ТекстОшибки_ = СтрШаблон(
				"Обращение по адресу ""%1"" завершилось с ошибкой. Код ответа %2. %3", 
				Адрес,
				Результат_.КодСостояния,
				?(ЗначениеЗаполнено(ОписаниеОшибки_), "Ошибка: " + ОписаниеОшибки_, "")
			); 
			ВызватьИсключение(ТекстОшибки_);
		КонецЕсли;
		Результат_ = Результат_.Тело;
	КонецЕсли;
	Возврат Результат_;
КонецФункции

Функция РазобратьОтветHl7(ТелоОтветаОтСервера) Экспорт
	XML_ = ТелоОтветаОтСервера;

	ЧитаемXML_ = Новый ЧтениеXML;
	ЧитаемXML_.УстановитьСтроку(XML_);
	
	ПостроительDOM_ = Новый ПостроительDOM;
	DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
	
	Элементы_ = DOM_.ПолучитьЭлементыПоИмени("urn:hl7-org:v3","MCCI_IN000002UV01");
	ДеталиОтвета_ = DOM_.ПолучитьЭлементыПоИмени("urn:hl7-org:v3","acknowledgementDetail");
	
	Результат_ = Новый Структура("ЕстьОшибка,Детали", Ложь, Новый Массив);
	
	Если Элементы_.Количество() > 0 Тогда
	
		Для Каждого ДетальОтвета_ Из ДеталиОтвета_ Цикл
			Если ДетальОтвета_.ПолучитьАтрибут("typeCode") = "E" Тогда
				Результат_.ЕстьОшибка = Истина;
			КонецЕсли;
			ТэгиCode_ = ДетальОтвета_.ПолучитьЭлементыПоИмени("code");
			Если ТэгиCode_.Количество() > 0 Тогда
				Деталь_ = Новый Структура("Код, Сообщение");
				Деталь_.Код = ТэгиCode_[0].ПолучитьАтрибут("code");
				Деталь_.Сообщение = ТэгиCode_[0].ПолучитьАтрибут("displayName");
				
				Результат_.Детали.Добавить(Деталь_);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат_.ЕстьОшибка = Истина;
	КонецЕсли;
	Возврат Результат_;

КонецФункции

Функция РазобратьОтветРЭМД(ТелоОтветаОтСервера)
	XML_ = ТелоОтветаОтСервера;

	ЧитаемXML_ = Новый ЧтениеXML;
	ЧитаемXML_.УстановитьСтроку(XML_);
	
	ПостроительDOM_ = Новый ПостроительDOM;
	DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
	
	Результат_ = Новый Структура("ЕстьОшибка,Детали", Ложь, Новый Массив);

	Статус_ = ПолучитьСодержимоеЭлемента(DOM_, "status");
	
	Если НРег(Статус_) = "error" Тогда
		
		Результат_.ЕстьОшибка = Истина;
		
		ДеталиОтвета_ = DOM_.ПолучитьЭлементыПоИмени("errors");
		
		Для Каждого ДетальОтвета_ Из ДеталиОтвета_ Цикл
			ТэгиItem_ = ДетальОтвета_.ПолучитьЭлементыПоИмени("item");
			Для Каждого Item_ Из ТэгиItem_ Цикл
				Деталь_ = Новый Структура("Код, Сообщение");
				Деталь_.Код = ПолучитьСодержимоеЭлемента(Item_, "code");
				Деталь_.Сообщение = ПолучитьСодержимоеЭлемента(Item_, "message");
				
				Результат_.Детали.Добавить(Деталь_);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат_;

КонецФункции

Функция РазобратьРезультатПоискаДокументов(ТелоОтветаОтСервера)
	
	Результат_ = Новый Структура("Найденные, КоличествоЭлементовНаСтранице, ЕстьЕщеСтраницы", Новый Массив);
	
	XML_ = ТелоОтветаОтСервера;

	ЧитаемXML_ = Новый ЧтениеXML;
	ЧитаемXML_.УстановитьСтроку(XML_);
	
	ПостроительDOM_ = Новый ПостроительDOM;
	DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
	
	ТэгиItem_ = DOM_.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru/iehr/emdr/service/","item");
	
	Для Каждого item_ Из ТэгиItem_ Цикл
		Документ_ = Новый Структура;
		
		Для Каждого Узел_ Из item_.ДочерниеУзлы Цикл
			ИмяУзла_ = УбратьПрефиксИзИмени(Узел_.ИмяУзла);
			Документ_.Вставить(ИмяУзла_, Узел_.ТекстовоеСодержимое);
		КонецЦикла;
		
		Результат_.Найденные.Добавить(Документ_);
	КонецЦикла;
	
	Результат_.КоличествоЭлементовНаСтранице = ПолучитьСодержимоеЭлемента(DOM_, "itemsPerPage");
	Результат_.ЕстьЕщеСтраницы = ПолучитьСодержимоеЭлемента(DOM_, "hasNext");
	
	Возврат Результат_;
КонецФункции

Функция РазобратьРезультатЗапросаДанныхДокумента(ТелоОтветаОтСервера)
	
	Результат_ = Новый Структура("Предупреждения, emdrId, registrationDate, storeTillDate", Новый Массив);
	
	XML_ = ТелоОтветаОтСервера;

	ЧитаемXML_ = Новый ЧтениеXML;
	ЧитаемXML_.УстановитьСтроку(XML_);
	
	ПостроительDOM_ = Новый ПостроительDOM;
	DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
	
	Результат_.emdrId = ПолучитьСодержимоеЭлемента(DOM_, "emdrId");
	Результат_.registrationDate = ПолучитьСодержимоеЭлемента(DOM_, "registrationDate");
	Результат_.storeTillDate = ПолучитьСодержимоеЭлемента(DOM_, "storeTillDate");

	ТэгиRegistrationWarnings_ = DOM_.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru/iehr/emdr/service/","registrationWarnings");
	
	Если ТэгиRegistrationWarnings_.Количество() > 0 Тогда
		RegistrationWarnings_  = ТэгиRegistrationWarnings_[0];
		
		ТэгиItem_ = RegistrationWarnings_.ПолучитьЭлементыПоИмени("item");
		
		Для Каждого Item_ Из ТэгиItem_ Цикл
			Деталь_ = Новый Структура("Код, Сообщение");
			Деталь_.Код = ПолучитьСодержимоеЭлемента(Item_, "code");
			Деталь_.Сообщение = ПолучитьСодержимоеЭлемента(Item_, "message");
			
			Результат_.Предупреждения.Добавить(Деталь_);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

Функция РазобратьРезультатЗапросаМетаданныхДокумента(ТелоОтветаОтСервера)
	
	Результат_ = Новый Структура;
	
	XML_ = ТелоОтветаОтСервера;

	ЧитаемXML_ = Новый ЧтениеXML;
	ЧитаемXML_.УстановитьСтроку(XML_);
	
	ПостроительDOM_ = Новый ПостроительDOM;
	DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
	
	Найденные_ = DOM_.ПолучитьЭлементыПоИмени("http://egisz.rosminzdrav.ru/iehr/emdr/service/","metadata");
	
	Если Найденные_.Количество() > 0 Тогда
		ТэгMetadata_ = Найденные_[0];
		Dom2Структура(ТэгMetadata_, Результат_);
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

Процедура Dom2Структура(Dom, Результат) Экспорт
	Для Каждого Узел_ Из Dom.ДочерниеУзлы Цикл

		ИмяУзла_ = УбратьПрефиксИзИмени(Узел_.ИмяУзла);
		
		ЭтоМассив_ = Ложь;
		Если Результат.Свойство(ИмяУзла_) Тогда
			// В xml есть несколько тегов с одинаковым именен.
			Врем_ = Результат[ИмяУзла_];
			Результат.Вставить(ИмяУзла_, Новый Массив);
			Результат[ИмяУзла_].Добавить(Врем_);
			ЭтоМассив_ = Истина;
		КонецЕсли;

		Если Узел_.ДочерниеУзлы.Количество() > 0 И Узел_.ДочерниеУзлы[0].ИмяУзла <> "#text" Тогда
		
			ДанныеУзла_ = Новый Структура;

			Если ЭтоМассив_ Тогда
				Результат[ИмяУзла_].Добавить(ДанныеУзла_);
			Иначе
				Результат.Вставить(ИмяУзла_, ДанныеУзла_);
			КонецЕсли;
			
			Dom2Структура(Узел_, ДанныеУзла_);
			
		Иначе
			Если ЭтоМассив_ Тогда
				Результат[ИмяУзла_].Добавить(Узел_.ТекстовоеСодержимое);
			Иначе
				Результат.Вставить(ИмяУзла_, Узел_.ТекстовоеСодержимое);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьТекстОшибкиSoap(ТелоОтветаСервера)
	XML_ = ТелоОтветаСервера;

	Попытка
		ЧитаемXML_ = Новый ЧтениеXML;
		ЧитаемXML_.УстановитьСтроку(XML_);

		ПостроительDOM_ = Новый ПостроительDOM;
		DOM_ = ПостроительDOM_.Прочитать(ЧитаемXML_);
		
		FaultТэги_ = DOM_.ПолучитьЭлементыПоИмени("Fault");
		
		Результат_ = Неопределено;
		Если FaultТэги_.Количество() > 0 Тогда
			TextТэги_ = FaultТэги_[0].ПолучитьЭлементыПоИмени("Text");
			
			Если TextТэги_.Количество() > 0 Тогда
				Результат_ = TextТэги_[0].ТекстовоеСодержимое;
			Иначе
				faultcodeТэги_ = FaultТэги_[0].ПолучитьЭлементыПоИмени("faultcode");
				faultstringТэги_ = FaultТэги_[0].ПолучитьЭлементыПоИмени("faultstring");

				КодОшибки_ = Неопределено;
				Если faultcodeТэги_.Количество() > 0 Тогда
					КодОшибки_ = faultcodeТэги_[0].ТекстовоеСодержимое;
				КонецЕсли;

				ТекстОшибки_ = Неопределено;
				Если faultstringТэги_.Количество() > 0 Тогда
					ТекстОшибки_ = faultstringТэги_[0].ТекстовоеСодержимое;
				КонецЕсли;
				
				Если КодОшибки_ <> Неопределено Тогда
					Результат_ = КодОшибки_;
				КонецЕсли;

				Если ТекстОшибки_ <> Неопределено Тогда
					Результат_ = ?(КодОшибки_ <> Неопределено, КодОшибки_ + " - ", "") + ТекстОшибки_;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		Возврат Результат_;
		
	Исключение
		Возврат XML_;
	КонецПопытки;
	
КонецФункции

Функция ПовторитьКусокТекста(ЗНАЧ Количество, Строка)
	Результат_ = "";
	
	Номер_ = 1;
	Пока Номер_ <= Количество Цикл
		Кусок_ = стрЗаменить(Строка, "%НОМЕР%", Строка(Номер_));
		Результат_ = Результат_ + Кусок_;
		Номер_ = Номер_ + 1;
	КонецЦикла;
	
	Возврат Результат_;
КонецФункции

Функция ЗначениеСНИЛС(СНИЛС)
	Возврат АлгоритмыСтроковые.УдалитьСимволыКроме(СНИЛС, "0123456789");
КонецФункции

Функция ПолучитьСодержимоеЭлемента(РодительскийУзелDOM, ИмяЭлемента, Индекс = 0) Экспорт
	
	Если РодительскийУзелDOM <> Неопределено Тогда
		Результат_ = РодительскийУзелDOM.ПолучитьЭлементыПоИмени(ИмяЭлемента);

		Если Результат_.Количество() > Индекс Тогда
			Возврат Результат_[Индекс].ТекстовоеСодержимое;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция УбратьПрефиксИзИмени(ИмяУзла)
	Номер_ = стрНайти(ИмяУзла, ":");
	Если Номер_ > 0 Тогда
		Возврат Прав(ИмяУзла, стрДлина(ИмяУзла) - Номер_);
	Иначе
		Возврат ИмяУзла;
	КонецЕсли;
КонецФункции

Функция ПолучитьЭлемент(РодительскийУзелDOM, ИмяЭлемента, Индекс = 0) Экспорт
	
	Если РодительскийУзелDOM <> Неопределено Тогда
	
		Результат_ = РодительскийУзелDOM.ПолучитьЭлементыПоИмени(ИмяЭлемента);

		Если Результат_.Количество() > Индекс Тогда
			Возврат Результат_[Индекс];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьАтрибут(РодительскийУзелDOM, ИмяАтрибута) Экспорт
	Если РодительскийУзелDOM <> Неопределено Тогда
	
		Возврат РодительскийУзелDOM.ПолучитьАтрибут(ИмяАтрибута);

	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция СравнитьИмяЭлемента(Знач ИмяТэга, Знач ПроверочноеИмя) Экспорт
	Позиция_ = стрНайти(ИмяТэга, ":");
	
	Если Позиция_ > 0 Тогда
		ИмяТэга = Сред(ИмяТэга, Позиция_ + 1, стрДлина(ИмяТэга) - Позиция_);
	КонецЕсли;
	
	Возврат НРег(ИмяТэга) = НРег(ПроверочноеИмя);
КонецФункции

Функция ПолучитьДатуИзСтроки(ДатаСтрокой, ВДатеЕстьТире = Ложь) Экспорт
	
	Если ДатаСтрокой <> Неопределено Тогда
		Если стрДлина(ДатаСтрокой) >= 8 Тогда
			Если ВДатеЕстьТире = Ложь Тогда
				Возврат Дата(Число(Лев(ДатаСтрокой,4)), Число(Сред(ДатаСтрокой, 5, 2)), Число(Сред(ДатаСтрокой, 7, 2)));
			Иначе
				Возврат Дата(Число(Лев(ДатаСтрокой,4)), Число(Сред(ДатаСтрокой, 6, 2)), Число(Сред(ДатаСтрокой, 9, 2)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ЗаписатьВЖурналРегистрации(Сообщение, Уровень = Неопределено)

	ЗаписьЖурналаРегистрации(
		"EMDR",
		?(Уровень = Неопределено, УровеньЖурналаРегистрации.Информация, Уровень),
		,
		,
		Сообщение
	);
	
КонецПроцедуры

Процедура ЗаписатьДанныеОтправленногоСообщенияВРегистр(ИдентификаторСообщения, ДатаСообщения, ИдентификаторДокумента, СообщениеУспешноОтправлено = Ложь)
	Набор_ = РегистрыСведений.ФедеральныеВебСервисыСообщенияРЭМД.СоздатьНаборЗаписей();
	
	Набор_.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
	
	Набор_.Добавить();
	
	Набор_[0].ИдентификаторСообщения = ИдентификаторСообщения;
	Набор_[0].ДатаСообщения = ДатаСообщения;
	Набор_[0].ИдентификаторДокумента = ИдентификаторДокумента;
	Набор_[0].СообщениеУспешноОтправлено = СообщениеУспешноОтправлено;
	
	Набор_.Записать();
КонецПроцедуры

// Записывает Истина в реквизит СообщениеУспешноОтправлено.
Процедура УстановитьФлагСообщениеУспешноОтправлено(Знач ИдентификаторСообщения)
	Набор_ = РегистрыСведений.ФедеральныеВебСервисыСообщенияРЭМД.СоздатьНаборЗаписей();
	
	Набор_.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
	
	Набор_.Прочитать();
	
	Если Набор_.Количество() = 0 Тогда
		ВызватьИсключение стрШаблон("Не найдено сообщение в регистре ФедеральныеВебСервисыСообщенияРЭМД с идентификатором: %1", ИдентификаторСообщения);
	КонецЕсли;
	
	Набор_[0].СообщениеУспешноОтправлено = Истина;
	
	Набор_.Записать(Истина);
	
КонецПроцедуры

Функция ЗаписатьДанныеОтветаВРегистр(ИдентификаторСообщения, ДатаОтвета, ИдентификаторОтвета, emdrId, ТекстОшибки, ПутьКФайлу)
	Набор_ = РегистрыСведений.ФедеральныеВебСервисыСообщенияРЭМД.СоздатьНаборЗаписей();
	
	Набор_.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
	
	Набор_.Прочитать();
	
	Если Набор_.Количество() = 0 Тогда
		
		Возврат Новый Структура("Код,Сообщение", "UNKNOWN_MSGID","Не удалось найти сообщение, отправленное в РЭМД, с идентификатором: " + ИдентификаторСообщения);
	КонецЕсли;
	
	Набор_[0].ИдентификаторОтвета = ИдентификаторОтвета;
	Набор_[0].ДатаОтвета = ДатаОтвета;
	Набор_[0].emdrId = emdrId;
	Набор_[0].ТекстОшибки = ТекстОшибки;
	Набор_[0].ПутьКФайлу = ПутьКФайлу;
	
	Набор_.Записать(Истина);
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьИдентификаторДокументаПоИдентификаторуСообщенияОРегистрацииДокумента(ИдентификаторСообщения)
	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМД
		|ГДЕ
		|	ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторСообщения = &ИдентификаторСообщения";
	Запрос_.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Если Выборка_.Следующий() Тогда
		Возврат Выборка_.ИдентификаторДокумента;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция СоздатьОтветСОшибкой(КодОшибки, Сообщение, Шаблон)

	Данные_ = Новый Соответствие;
	
	Данные_["[КОД_ОШИБКИ]"] = КодОшибки;
	Данные_["[СООБЩЕНИЕ]"] = Сообщение;

	ТелоОтвета_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон, Данные_);

	Возврат ТелоОтвета_;
КонецФункции

Функция ПолучитьДанныеДокумента(ДокументСсылка)
	Результат_ = Новый Структура(
		"ДокументСсылка,ПациентСсылка,ВидДокумента,Дата,Описание,ИдентификаторДокумента,НомерДокумента,Подразделение,emdrId,НомерВерсии"
	);
	
	ИдентификаторИНомер_ = ПолучитьИдентификаторИНомерДокументаДляРЭМД(ДокументСсылка);

	Результат_.ИдентификаторДокумента = ИдентификаторИНомер_.ИдентификаторДокумента;
	Результат_.НомерДокумента = ИдентификаторИНомер_.НомерДокумента;
	Результат_.emdrId = ИдентификаторИНомер_.emdrId;
	Результат_.НомерВерсии = ИдентификаторИНомер_.НомерВерсии;
	
	Свойства_ = ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, "Дата,Пациент,КодТипаДокументаРЭМД,Описание,Подразделение");
	
	Результат_.Подразделение = Свойства_.Подразделение;
	Результат_.ВидДокумента = Свойства_.КодТипаДокументаРЭМД;
	Результат_.Описание = Свойства_.Описание;
	Результат_.ДокументСсылка = ДокументСсылка;
	Результат_.ПациентСсылка = Свойства_.Пациент;
	Результат_.Дата = Свойства_.Дата;

	
	Возврат Результат_;
КонецФункции

Функция ПолучитьДанныеCDA(ЭМДСсылка)
	Результат_ = Неопределено;
	
	ДанныеЭМД_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭМДСсылка, "ФорматФайлаДляРЭМД, ОтносительныйПутьКФайлуЭМД");
	
	Если ДанныеЭМД_.ФорматФайлаДляРЭМД = Перечисления.ФорматФайлаДляРЭМД.CDA Тогда
		Результат_ = Новый Структура(
			"ДатаСозданияДокументаСтрокой, ДатаСозданияДокумента"
		);
		
		ПолныйПуть_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(ДанныеЭМД_.ОтносительныйПутьКФайлуЭМД);

		// Построем DOM.
		ЧтениеXML_ = Новый ЧтениеXML;
		ЧтениеXML_.ОткрытьФайл(ПолныйПуть_);
		
		ПостроительDOM_ = Новый ПостроительDOM;
		ДокументDOM_ = ПостроительDOM_.Прочитать(ЧтениеXML_);
		
		СоответствиеПИ_ = Новый Соответствие;
		СоответствиеПИ_.Вставить("ns1", "urn:hl7-org:v3");
		ПИ_ = Новый РазыменовательПространствИменDOM(СоответствиеПИ_);
		
		// Подготовим xpath.
		effectiveTimeXPath_ = "/*/ns1:effectiveTime/@value";
		
		// Получим данные из DOM.
		ДатаСозданияДокументаСтрокой_ = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM_, ПИ_, effectiveTimeXPath_);
		
		Если ЗначениеЗаполнено(ДатаСозданияДокументаСтрокой_) Тогда
			ДатаРЭМД_ = ПреобразоватьДатуВФорматРЭМД(ДатаСозданияДокументаСтрокой_);
			Результат_.ДатаСозданияДокументаСтрокой = ДатаРЭМД_.ДатаСтрокой;
			Результат_.ДатаСозданияДокумента = ДатаРЭМД_.Дата;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

// Преобразует строковую дату в 2020-01-18T22:34:41+08:00
Функция ПреобразоватьДатуВФорматРЭМД(ДатаСЭМДСтрокой)

	ДатаСтрокой_ = ДатаСЭМДСтрокой;
	Смещение_ = "";
	ЗнакСмещения_ = "";
	
	// Определим знак смещения в дате.
	Если стрДлина(ДатаСЭМДСтрокой) >= 14 Тогда// Если в дате есть смещение, длина строки не может быть менее 14.
		Прав_ = Прав(ДатаСЭМДСтрокой, 6);// в этом кусочке возможно указано смещение.
		Конец_ = стрНайти(Прав_, "+", НаправлениеПоиска.СКонца);
		Если Конец_ > 0 Тогда
			ЗнакСмещения_ = "+";
		Иначе
			Конец_ = стрНайти(Прав_, "-", НаправлениеПоиска.СКонца);
			Если Конец_ > 0 Тогда
				ЗнакСмещения_ = "-";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗнакСмещения_) Тогда
		Конец_ = стрНайти(ДатаСЭМДСтрокой, ЗнакСмещения_, НаправлениеПоиска.СКонца);
		Если Конец_ > 0 Тогда
			// Удаляем +dddd.
			ДатаСтрокой_ = Лев(ДатаСЭМДСтрокой, Конец_ - 1);
			Смещение_ = Прав(ДатаСЭМДСтрокой, стрДлина(ДатаСЭМДСтрокой) - Конец_);
			
			Если стрНайти(Смещение_, ":") = 0 И стрДлина(Смещение_) = 4 Тогда
				Смещение_ = Лев(Смещение_, 2) + ":" + Прав(Смещение_, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Дата_ = Дата(стрЗаменить(стрЗаменить(ДатаСтрокой_, "-", ""), ":", ""));
	
	Если ЗначениеЗаполнено(Смещение_) Тогда
	
		ДатаСтрокой_ = Формат(Дата_, "ДФ=yyyy-MM-ddTHH:mm:ss") + ЗнакСмещения_ + Смещение_;
	
	Иначе
		ДатаСтрокой_ = ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Дата_);
	КонецЕсли;
	
	Возврат Новый Структура("Дата, ДатаСтрокой", Дата_, ДатаСтрокой_);

КонецФункции

Функция ПолучитьРольСотрудникаПриПодписании(КодМинздраваВидаДокумента, КодМинздраваДолжности)

	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	РолиПриПодписанииРЭМДПравилаПодписи.Ссылка КАК РольРЭМД
		|ИЗ
		|	Справочник.РолиПриПодписанииРЭМД.ПравилаПодписи КАК РолиПриПодписанииРЭМДПравилаПодписи
		|ГДЕ
		|	НЕ РолиПриПодписанииРЭМДПравилаПодписи.Ссылка.ПометкаУдаления
		|	И РолиПриПодписанииРЭМДПравилаПодписи.Ссылка.Актуальность = ИСТИНА
		|	И РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваВидаДокумента = &КодМинздраваВидаДокумента
		|	И РолиПриПодписанииРЭМДПравилаПодписи.КодМинздраваДолжности = &КодМинздраваДолжности";
	
	Запрос_.УстановитьПараметр("КодМинздраваВидаДокумента", КодМинздраваВидаДокумента);
	Запрос_.УстановитьПараметр("КодМинздраваДолжности", КодМинздраваДолжности);
	
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Если Выборка_.Следующий() Тогда
		Возврат Выборка_.РольРЭМД;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьВыборкуОтправляемыхДокументов(ЭМДСсылка = Неопределено, МассивСсылокПредыдущихПорцийДляПолученияСледующейПорции = Неопределено)
	
	// Запрос выборки могут переопределить, к примеру, если некоторые специфичные для конфигурации условия необходимо проверять именно в запросе.
	Выборка_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьВыборкуОтправляемыхДокументов(ЭМДСсылка, МассивСсылокПредыдущихПорцийДляПолученияСледующейПорции);
	
	Если Выборка_ <> Неопределено Тогда
		Возврат Выборка_;
	КонецЕсли;
	
	Если МассивСсылокПредыдущихПорцийДляПолученияСледующейПорции <> Неопределено Тогда
		// Запрос ниже возвращает все подходящие ЭМД, а не первые сколько-то, поэтому если вызывают 2й раз для получения следующей порции
		// вернем Неопределено, т.к. доступные ЭМД закончились.
		Возврат Неопределено
	КонецЕсли;
	
	// Если здесь изменяется условие отбора, то, возможно, необходимо подправить функцию ПолучитьСтатусРегистрацииДокументаВРЭМД,
	// которая возвращает текстом причину, почему документ не готов для отправки в РЭМД.

	// Отберем документы для отправки в РЭМД. 
	// Отбираем такие которым еще не присвоен emdrId и не отправлена заявка
	// или которые пытались отправить ранее через прокси РМИС, но в РМИС возникло исключение
	// или отправленные ранее, но для которых из ИПС вернулась синхронная ошибка GW-005 (Ошибка при обмене данными: SocketTimeoutException: connect timed out)
	// или отправленные ранее, но для которых из ИПС вернулась синхронная ошибка GW-007 (Неверный формат SOAP-сообщения ответа поставщика (unmarshalling): Premature end of file.)
	// или отправленные ранее, но для которых из РЭМД вернулся RUNTIME_ERROR
	// или отправленные ранее, но для которых нет ответа от РЭМД свыше заданного времени
	// или ранее зарегистрированные, но требующие обновления сведений в РЭМД
	// или те которым установили галочку Отправить.
	Запрос_ = Новый Запрос;
	// Запрос может быть ПЕРЕОПРЕДЕЛЕН!!! Изменения вносить не только здесь, но и в переопределяемом модуле.
	Запрос_.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка,
		|	ФедеральныеВебСервисыЭМД.Пациент КАК Пациент,
		|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы КАК ДокументИнформационнойБазы,
		|	ФедеральныеВебСервисыЭМД.ТипРЭМД КАК ТипРЭМД,
		|	ФедеральныеВебСервисыЭМД.Отправить КАК Отправить
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМД
		|		ПО ФедеральныеВебСервисыЭМД.ИдентификаторДокумента = ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФедеральныеВебСервисыСообщенияРЭМД КАК ФедеральныеВебСервисыСообщенияРЭМДБудущее
		|		ПО ФедеральныеВебСервисыЭМД.ИдентификаторДокумента = ФедеральныеВебСервисыСообщенияРЭМДБудущее.ИдентификаторДокумента
		|			И (ФедеральныеВебСервисыСообщенияРЭМДБудущее.ДатаСообщения > ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтложенноеПодписаниеЭП КАК ОтложенноеПодписаниеЭП
		|		ПО ФедеральныеВебСервисыЭМД.Ссылка = ОтложенноеПодписаниеЭП.ПодписываемыйОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ПодписьМО
		|		ПО ФедеральныеВебСервисыЭМД.Ссылка = ПодписьМО.Ссылка
		|			И ПодписьМО.ЭтоПодписьМО = ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ПодписьМОЕщеОдна
		|		ПО ФедеральныеВебСервисыЭМД.Ссылка = ПодписьМОЕщеОдна.Ссылка
		|			И ПодписьМОЕщеОдна.ЭтоПодписьМО = ИСТИНА
		|			И ПодписьМОЕщеОдна.НомерСтроки > ПодписьМО.НомерСтроки
		|ГДЕ
		|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы.Проведен, ИСТИНА) = ИСТИНА
		|	И ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы.ПометкаУдаления = ЛОЖЬ
		|	И ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ
		|	И ФедеральныеВебСервисыСообщенияРЭМДБудущее.ИдентификаторСообщения ЕСТЬ NULL
		|	И ПодписьМОЕщеОдна.НомерСтроки ЕСТЬ NULL
		|	И ОтложенноеПодписаниеЭП.ПодписываемыйОбъект ЕСТЬ NULL
		|	И (ФедеральныеВебСервисыЭМД.Отправить = ИСТИНА
		|			ИЛИ (ФедеральныеВебСервисыЭМД.emdrId = """" ИЛИ ФедеральныеВебСервисыЭМД.ОбновитьДанныеДокументаВРЭМД = ИСТИНА)
		|				И (ФедеральныеВебСервисыСообщенияРЭМД.ИдентификаторДокумента ЕСТЬ NULL)
		|				И ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки = """"
		|				И (ЕСТЬNULL(ФедеральныеВебСервисыЭМД.ТипРЭМД.НеобходимаПодписьМО, ЛОЖЬ) = ЛОЖЬ ИЛИ НЕ ПодписьМО.НомерСтроки ЕСТЬ NULL)
		|			ИЛИ (ФедеральныеВебСервисыЭМД.emdrId = """" ИЛИ ФедеральныеВебСервисыЭМД.ОбновитьДанныеДокументаВРЭМД = ИСТИНА)
		|				И НЕ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%Unmarshalling Error%""
		|				И (ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%RMIS_FAULT%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%Код ответа 500%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%Код ответа 403%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%Код ответа 404%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%Код ответа 408%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%Ошибка подключения.%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%превышен лимит запросов к сервису%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%RMIS_LIMIT_FAULT%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%INTERNAL_ERROR%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%GW-005%""
		|					ИЛИ ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки ПОДОБНО ""%GW-007%"")
		|			ИЛИ (ФедеральныеВебСервисыЭМД.emdrId = """" ИЛИ ФедеральныеВебСервисыЭМД.ОбновитьДанныеДокументаВРЭМД = ИСТИНА)
		|				И (ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО ""%RUNTIME_ERROR%""
		|					ИЛИ ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО ""%CA_INACCESSIBILITY%""
		|					ИЛИ ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО ""%SCHEMA_PROCESSING_ERROR%""
		|					ИЛИ (ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО ""%Внутренняя ошибка валидации СЭМД%"" И НЕ ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО ""%Код = 'VALIDATION_ERROR'%"")
		|					ИЛИ ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО ""%GET_DOCUMENT_FILE_ERROR%"")
		|				И ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки = """"
		|			ИЛИ (ФедеральныеВебСервисыЭМД.emdrId = """" ИЛИ ФедеральныеВебСервисыЭМД.ОбновитьДанныеДокументаВРЭМД = ИСТИНА)
		|				И НЕ ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения ЕСТЬ NULL
		|				И ФедеральныеВебСервисыСообщенияРЭМД.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И ФедеральныеВебСервисыСообщенияРЭМД.СообщениеУспешноОтправлено = ИСТИНА
		|				И ДОБАВИТЬКДАТЕ(ФедеральныеВебСервисыСообщенияРЭМД.ДатаСообщения, ДЕНЬ, 2) < &ТекущийДень
		|				И ФедеральныеВебСервисыЭМД.ТекстПоследнейОшибки = """"
		|				И ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО """"
		|			ИЛИ ФедеральныеВебСервисыЭМД.ОбновитьДанныеДокументаВРЭМД = ИСТИНА
		|				И ФедеральныеВебСервисыСообщенияРЭМД.ДатаОтвета <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И ФедеральныеВебСервисыСообщенияРЭМД.ТекстОшибки ПОДОБНО """"
		|				И (ЕСТЬNULL(ФедеральныеВебСервисыЭМД.ТипРЭМД.НеобходимаПодписьМО, ЛОЖЬ) = ЛОЖЬ ИЛИ НЕ ПодписьМО.НомерСтроки ЕСТЬ NULL))"
		+ ?(ЗначениеЗаполнено(ЭМДСсылка), "
		|	И ФедеральныеВебСервисыЭМД.Ссылка = &ЭМДСсылка", "");

	Запрос_.УстановитьПараметр("ТекущийДень", КонецДня(ТекущаяДатаСеанса()));
	Запрос_.УстановитьПараметр("ЭМДСсылка", ЭМДСсылка);
	
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Возврат Выборка_;
КонецФункции

Функция УсловияГотовностиДокументаКОтправкеВыполнены(ЭМДСсылка, ДокументИнформационнойБазы)
	
	РеквизитыЭМД_ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭМДСсылка, "Пациент,ТипРЭМД.НеобходимСНИЛСПациента");
	
	ПациентСНИЛС_ = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыЭМД_.Пациент) Тогда
		ПациентСНИЛС_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеПациента(РеквизитыЭМД_.Пациент, "СтраховойНомерПФР").СтраховойНомерПФР;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыЭМД_.Пациент) // В ЭМД должен быть заполнен реквизит Пациент
		И (РеквизитыЭМД_.ТипРЭМДНеобходимСНИЛСПациента = Ложь // Если СНИЛС обязателен, он должен быть заполнен.
			Или ЗначениеЗаполнено(ПациентСНИЛС_))
		И (Не ЗначениеЗаполнено(ДокументИнформационнойБазы)
			Или ФедеральныеВебСервисыПереопределяемый.ПроверитьГотовностьДокумента(ДокументИнформационнойБазы))
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Обработка очереди документов на отправку в РЭМД.
Функция ПодготовитьИОтправитьЗаявкиНаРегистрациюДокументовВРЭМД() Экспорт

	Выборка_ = ПолучитьВыборкуОтправляемыхДокументов();
	
	ИспользоватьЛимит_ = Ложь;
	
	ЛимитКоличестваЗапросов_ = ПолучитьЛимитКоличестваЗапросовНаРегистрациюДокументов();
	Если ЛимитКоличестваЗапросов_ > 0 Тогда
		ИспользоватьЛимит_ = Истина;
	КонецЕсли;

	ПроверкаПациентов_ = Новый Соответствие;
	ПрерватьОтправку_ = Ложь;
	КоличествоОтправленных_ = 0;
	ДопустимоеКоличествоИтераций_ = 10000;
	
	МассивСсылокЭМД_ = Новый Массив;
	
	Пока Не ПрерватьОтправку_ Цикл
	
		ДопустимоеКоличествоИтераций_ = ДопустимоеКоличествоИтераций_ - 1;
		
		Если ДопустимоеКоличествоИтераций_ = 0 Тогда
			ВызватьИсключение "Обнаружено зацикливание в функции ФедеральныеВебСервисыРЭМД.ПодготовитьИОтправитьЗаявкиНаРегистрациюДокументовВРЭМД()";
		КонецЕсли;
	
		ВыборкаПуста_ = Истина;

		Пока Выборка_.Следующий() Цикл
			ВыборкаПуста_ = Ложь;
		
			Если ИспользоватьЛимит_ = Истина И КоличествоОтправленных_ >= ЛимитКоличестваЗапросов_ Тогда
				ПрерватьОтправку_ = Истина;
			КонецЕсли;
			
			Если ПрерватьОтправку_ = Истина Тогда
				Прервать;
			КонецЕсли;
		
			Если МассивСсылокЭМД_.Найти(Выборка_.Ссылка) = Неопределено Тогда
				МассивСсылокЭМД_.Добавить(Выборка_.Ссылка);
			Иначе
				// Страховка на случай если выборка содержит повторяющиеся элементы ЭМД проверяем эту ситуацию, избегаем повторную обработку уже обработанного документа.
				ВызватьИсключение "Документ в выборке отправляемых присутствует более одного раза: " + Выборка_.Ссылка;
			КонецЕсли;
			
			Попытка
				ОтправитьВЛюбомСлучае_ = Выборка_.Отправить;
				
				Если ОтправитьВЛюбомСлучае_ = Ложь И Не УсловияГотовностиДокументаКОтправкеВыполнены(Выборка_.Ссылка, Выборка_.ДокументИнформационнойБазы) Тогда
					Продолжить;
				КонецЕсли;
				
				СообщениеПроверкиЭЦП_ = Неопределено;
				Если Не ПроверитьЭлектронныеПодписиЭМД(Выборка_.Ссылка, СообщениеПроверкиЭЦП_, Истина) Тогда
					ВызватьИсключение СообщениеПроверкиЭЦП_;
				КонецЕсли;
				
				emdrid_ = Неопределено;
				//Если Выборка_.ВыполнитьПоискEmdrid Тогда
				//	// Попробуем найти emdrid поиском в РЭМД. Возможно документ уже зарегистрирован в РЭМД, но получить его emdrid не удалось.
				//	emdrid_ = НайтиДокументВРЭМД(Выборка_.Ссылка);
				//КонецЕсли;
				
				Если emdrid_ = Неопределено Тогда
					Попытка
						// Если используется обмен с ИЭМК, то отметим необходимость отправки документа в веб-сервис ИЭМК.
						Попытка
							МодульФедеральныеВебСервисыИЭМК_ = ОбщегоНазначения.ОбщийМодуль("ФедеральныеВебСервисыИЭМК");
						Исключение
							МодульФедеральныеВебСервисыИЭМК_ = Неопределено;
						КонецПопытки;
						
						Если ТипЗнч(МодульФедеральныеВебСервисыИЭМК_) = Тип("ОбщийМодуль") И МодульФедеральныеВебСервисыИЭМК_.ИспользуетсяОбменСИЭМК() Тогда
							МодульФедеральныеВебСервисыИЭМК_.УстановитьОтправитьВИЭМКПриНеобходимости(Выборка_.Ссылка);
						КонецЕсли;
					Исключение
						Текст_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка,,,Выборка_.Ссылка);
					КонецПопытки;

					КоличествоОтправленных_ = КоличествоОтправленных_ + 1;

					РезультатОтРЭМД_ = ЗарегистрироватьДокументВРЭМД(Выборка_.Ссылка);
					
					Если РезультатОтРЭМД_ <> Истина Тогда
						ТекстОшибки_ = Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьТекстОшибки(Выборка_.Ссылка, РезультатОтРЭМД_);
						ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(ТекстОшибки_, УровеньЖурналаРегистрации.Ошибка,,,Выборка_.Ссылка);
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьТекстОшибки(Выборка_.Ссылка, "");
				
			Исключение
				Текст_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьТекстОшибки(Выборка_.Ссылка, Текст_);
				ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка,,,Выборка_.Ссылка);
				
				Если стрНайти(Текст_, "превышен лимит запросов к сервису") > 0 Тогда
					// Федеральный веб-сервис сообщил о превышении лимита количества запросов. Прервем отправку.
					ПрерватьОтправку_ = Истина;
					// Сообщение от Регион может содержать количество секунд которые требуется подождать прежде чем отправлять следующее сообщение.
					ВозвращаемоеЗначение_ = ПолучитьКоличествоСекундОжиданияИзСообщения(Текст_);
					Если ВозвращаемоеЗначение_ = Неопределено Тогда
						ВозвращаемоеЗначение_ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
			
		КонецЦикла;
		
		Если ИспользоватьЛимит_ = Истина И КоличествоОтправленных_ >= ЛимитКоличестваЗапросов_ Тогда
			ПрерватьОтправку_ = Истина;
		КонецЕсли;

		Если Не ВыборкаПуста_ И ПрерватьОтправку_ = Ложь Тогда
			// В выборке меньше документов, чем разрешено отправить, возможно в запросе есть выражение ПЕРВЫЕ, попробуем запросить еще
			// порцию документов.
			Выборка_ = ПолучитьВыборкуОтправляемыхДокументов(Неопределено, МассивСсылокЭМД_);
			Если Выборка_ = Неопределено Тогда
				ПрерватьОтправку_ = Истина;
			КонецЕсли;
		Иначе
			ПрерватьОтправку_ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение_;
КонецФункции



Функция ПолучитьВыборкуПодписываемыхСертификатомОрганизацииДокументов()
	
	// Запрос выборки могут переопределить.
	Выборка_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьВыборкуПодписываемыхСертификатомОрганизацииДокументов();
	
	Если Выборка_ <> Неопределено Тогда
		Возврат Выборка_;
	КонецЕсли;

	Запрос_ = Новый Запрос;
	Запрос_.Текст =
		"ВЫБРАТЬ
		|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка,
		|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы КАК ДокументИнформационнойБазы
		|ИЗ
		|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ПодписьМО
		|		ПО ФедеральныеВебСервисыЭМД.Ссылка = ПодписьМО.Ссылка
		|			И (ПодписьМО.ЭтоПодписьМО = ИСТИНА)
		|ГДЕ
		|	ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы.Проведен, ИСТИНА) = ИСТИНА
		|	И ФедеральныеВебСервисыЭМД.ДокументИнформационнойБазы.ПометкаУдаления = ЛОЖЬ
		|	И ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ
		|	И ФедеральныеВебСервисыЭМД.ТипРЭМД.НеобходимаПодписьМО = ИСТИНА
		|	И ПодписьМО.НомерСтроки ЕСТЬ NULL";
		
	Выборка_ = Запрос_.Выполнить().Выбрать();
	
	Возврат Выборка_;
КонецФункции

// Используется при автоматическом добавлении подписи МО.
Процедура ВыполнитьАвтоматическоеПодписаниеДокументовСертификатомМедОрганизации()
	
	Выборка_ = ПолучитьВыборкуПодписываемыхСертификатомОрганизацииДокументов();
	
	ПроблемныеСертификаты_ = Новый Соответствие;
	
	Пока Выборка_.Следующий() Цикл
	
		Если Не УсловияГотовностиДокументаКОтправкеВыполнены(Выборка_.Ссылка, Выборка_.ДокументИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка_.ДокументИнформационнойБазы) Тогда
			// Подпись необходима, проверим еще раз ее наличие.
			ЗапросЭПМО_ = Новый Запрос;
			ЗапросЭПМО_.Текст =
				"ВЫБРАТЬ
				|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФедеральныеВебСервисыЭМД.ЭлектронныеПодписиЭМД КАК ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД
				|ГДЕ
				|	ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.ЭтоПодписьМО = ИСТИНА
				|	И ФедеральныеВебСервисыЭМДЭлектронныеПодписиЭМД.Ссылка = &Ссылка";
			ЗапросЭПМО_.УстановитьПараметр("Ссылка", Выборка_.Ссылка);
			ВыборкаЭПМО_ = ЗапросЭПМО_.Выполнить().Выбрать();
			Если Не ВыборкаЭПМО_.Следующий() Тогда
				// Нет подписи МО, подпишем.
				Попытка
					СертификатМО_ = ПолучитьСертификатМедицинскойОрганизации(Выборка_.ДокументИнформационнойБазы);
					Если ЗначениеЗаполнено(СертификатМО_)  И ПроблемныеСертификаты_.Получить(СертификатМО_) = Неопределено Тогда
						Попытка
							ПодписатьЭМДПодписьюМО(Выборка_.Ссылка, СертификатМО_);
						Исключение
							ТекстОшибки_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Если стрНайти(ТекстОшибки_, "Ошибка подписания сертификатом") > 0 Тогда
								// Не удается подписать этим сертификатом, поэтому нет смысла пытаться подписывать им следующие документы.
								ПроблемныеСертификаты_.Вставить(СертификатМО_, Истина);
							КонецЕсли;
							ВызватьИсключение;
						КонецПопытки
					Иначе
						Продолжить;
					КонецЕсли;
				Исключение
				
					Текст_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка);

				КонецПопытки;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

// Выполняет поиск документа в РЭМД для получения его emdrid. Используется для случаев
// когда не было получено асинхронное сообщение в ответ на заявку на регистрацию документа
// в РЭМД.
Функция НайтиДокументВРЭМД(Знач ЭМДСсылка) Экспорт

	Результат_ = Неопределено;

	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
	
		ИдентификаторДокумента_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭМДСсылка, "ИдентификаторДокумента");

		РезультатПоискаСтруктурой_ = ПоискДокументовВРЭМД(
			Неопределено,
			ИдентификаторДокумента_, 
			Неопределено,
			"",
			Неопределено,
			Неопределено,
			Неопределено,
			Неопределено
		);
		
		Если РезультатПоискаСтруктурой_ <> Неопределено Тогда
			Если РезультатПоискаСтруктурой_.Найденные.Количество() > 0 Тогда
			
				Для Каждого ДокИнфо_ Из РезультатПоискаСтруктурой_.Найденные Цикл
			
					emdrid_ = ДокИнфо_.emdrid;
					Если ЗначениеЗаполнено(emdrid_)
						И стрНайти(emdrid_, "rmis:uuid:") = 0 // идентификатор не от РМИС
					Тогда
						Результат_ = emdrid_;
						
						storeTillDate_ = ДокИнфо_.storeTillDate;
						
						Если ОбщегоНазначенияКлиентсервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокИнфо_, "documentVersion") Тогда
							documentVersion_ = ДокИнфо_.documentVersion;
						Иначе
							documentVersion_ = Неопределено;
						КонецЕсли;
						
						ХранитьДо_ = Неопределено;
						Если ЗначениеЗаполнено(storeTillDate_) Тогда
							Попытка
								ХранитьДо_ = ПолучитьДатуИзСтроки(storeTillDate_, Истина);
							Исключение
								ХранитьДо_ = Неопределено;
							КонецПопытки;
						КонецЕсли;
						
						Справочники.ФедеральныеВебСервисыЭМД.ЗаписатьEmdrId(ЭМДСсылка, emdrId_, documentVersion_, ХранитьДо_);
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Текст_ = стрШаблон("В РЭМД не найден документ с идентификатором ""%1"" для документа в ответ на регистрацию которого получена синхронная ошибка NOT_UNIQUE_PROVIDED_ID либо ответ не получен.", ИдентификаторДокумента_);
				ВызватьИсключение Текст_;
			КонецЕсли;
		Иначе
			ВызватьИсключение стрШаблон("Ошибка при попытке выполнить поиск документа ""%1"" в РЭМД через вызов операции searchRegistryItem", ИдентификаторДокумента_);
		КонецЕсли;
	
	Исключение
		Текст_ = стрШаблон("Ошибка при попытке получить emdrid из РЭМД для документа ""%2"" в ответ на регистрацию которого получена синхронная ошибка NOT_UNIQUE_PROVIDED_ID либо ответ не получен. %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ИдентификаторДокумента_);
		ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка,,,ЭМДСсылка);
		
		Если ЗначениеЗаполнено(Результат_) Тогда
			Текст_ = стрШаблон("Несмотря на возникшую ошибку, удалось определить emdrid документа %1: %2", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ИдентификаторДокумента_, Результат_);
			ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка,,,ЭМДСсылка);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Результат_;


КонецФункции

Процедура ПолучитьСписокСвязанныхДокументовИзРЭМД(Знач ЭМДСсылка, XML) Экспорт

	//emdrId_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭМДСсылка, "emdrId");
	//
	//Если ЗначениеЗаполнено(emdrId_) Тогда
		//Метаданные_ = ФедеральныеВебСервисыРЭМД.ПолучитьМетаданныеДокументаИзРЭМД(emdrId_, Неопределено);
		
		Метаданные_ = РазобратьРезультатЗапросаМетаданныхДокумента(XML);
		
		Если Метаданные_.Свойство("associations") Тогда
			Если ТипЗнч(Метаданные_.associations) <> Тип("Массив") Тогда
				associations_ = Новый Массив;
				associations_.Добавить(Метаданные_.associations);
			Иначе
				associations_ = Метаданные_.associations;
			КонецЕсли;
			
			ЭМДОбъект_ = ЭМДСсылка.ПолучитьОбъект();
			ЭМДОбъект_.СвязанныеДокументы.Очистить();
			
			Для Каждого СвязанныйДокумент_ Из associations_ Цикл
				строкаТЧ_ = ЭМДОбъект_.СвязанныеДокументы.Добавить();
				строкаТЧ_.emdrId = СвязанныйДокумент_.target;
				строкаТЧ_.ТипСвязи = СвязанныйДокумент_.type;
			КонецЦикла;
			
			ЭМДОбъект_.Записать();
			
		КонецЕсли;
	//Иначе
	//	ВызватьИсключение "Получение списка связанных документов из РЭМД для документа без emdrId не возможно.";
	//КонецЕсли;

КонецПроцедуры

Функция ПолучитьНовыйПутьКФайлуВХранилище(ИмяФайла, ДокументИнформационнойБазы, ДатаДляКаталога = Неопределено)
	ПутьКХранилищу_ = Константы.ФедеральныеВебСервисыПутьКАрхивуЭМД.Получить();
	
	Если Не ЗначениеЗаполнено(ПутьКХранилищу_) Тогда
		
		ВызватьИсключение "Не заполнен путь к хранилищу файлов ЭМД.";
	КонецЕсли;
	
	РеквизитыОрганизации_ = ПолучитьOIDИНаменованиеМедицинскойОрганизации(ДокументИнформационнойБазы);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации_.КодOIDМедицинскойОрганизации) Тогда
		
		ВызватьИсключение "Не заполнен ""Код OID Медицинской организации"" у организации: " + РеквизитыОрганизации_.Наименование;
	КонецЕсли;
	
	// путь исключая путь к хранилищу.
	ОтносительныйПуть_ = РеквизитыОрганизации_.КодOIDМедицинскойОрганизации + ПолучитьРазделительПути()
				+ Формат(?(ЗначениеЗаполнено(ДатаДляКаталога), ДатаДляКаталога, ТекущаяДатаСеанса()), "ДФ=ггггММдд") + ПолучитьРазделительПути();
				
	ПолныйПуть_ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКХранилищу_)
					+ ОтносительныйПуть_;
	
	ИмяФайлаСПутем_ = ПолучитьУникальноеИмяСПутем(ПолныйПуть_, ИмяФайла);
	ПолноеИмяФайлаСПутем_ = ПолныйПуть_ + ИмяФайлаСПутем_;
	
	ИмяФайлаСОтносительнымПутем_ = ОтносительныйПуть_ + ИмяФайлаСПутем_; // путь исключая путь к хранилищу.

	Возврат Новый Структура("ПолныйПуть, ОтносительныйПуть", ПолноеИмяФайлаСПутем_, ИмяФайлаСОтносительнымПутем_);

КонецФункции

Процедура ПодписатьЭМДПодписьюМО(ЭМДСсылка, СертификатМО)
	
	Если Не ЗначениеЗаполнено(СертификатМО) Тогда
		ВызватьИсключение "Незадан сертификат медицинской организации.";
	КонецЕсли;
	
	ОтносительныйПуть_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭМДСсылка, "ОтносительныйПутьКФайлуЭМД");
	ПолныйПутьКФайлу_ = ПолучитьПолныйПутьПоОтносительномуПутиВХранилищеЭМД(ОтносительныйПуть_);
	
	ДД_ = Новый ДвоичныеДанные(ПолныйПутьКФайлу_);
	
	Если ДД_.Размер() = 0 Тогда
		ВызватьИсключение "Подписываемые данные пусты: " + ПолныйПутьКФайлу_;
	КонецЕсли;
	
	ПредставлениеСертификата_ = Строка(СертификатМО);
	Попытка
		ПодписьДД_ = ФедеральныеВебСервисыЭлектроннаяПодпись.ПодписатьДанные(ДД_, СертификатМО);
	Исключение
		ТекстОшибки_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		// Вызываем свое исключение с приставкой в тексте, чтоб в вызываемом когде можно было отличить исключение при подписании от других возможных.
		ВызватьИсключение стрШаблон("Ошибка подписания сертификатом ""%1"": %2", ПредставлениеСертификата_, ТекстОшибки_);
	КонецПопытки;
	
	ДанныеЭлектронныхПодписей_ = Новый Массив;
	ДанныеЭлектронныхПодписей_.Добавить(
		Новый Структура("ДвоичныеДанныеПодписи,РольРЭМД,Сотрудник,ЭтоПодписьМО",
			ПодписьДД_, Неопределено, Неопределено, Истина)
	);

	ДобавитьПодписьДокументуВХранилищеЭМД(ЭМДСсылка, ДанныеЭлектронныхПодписей_);
КонецПроцедуры

Процедура НайтиИУдалитьСтарыеДокументыИзАрхиваЭМД()

	Попытка
		Запрос_ = Новый Запрос;
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМД.ХранитьДо < &ТекущаяДата
			|	И ФедеральныеВебСервисыЭМД.ХранитьДо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И ФедеральныеВебСервисыЭМД.emdrId <> """"
			|	И ФедеральныеВебСервисыЭМД.ПометкаУдаления = ЛОЖЬ";
			
		Запрос_.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
		Выборка_ = Запрос_.Выполнить().Выбрать();
		
		Пока Выборка_.Следующий() Цикл
			Объект_ = Выборка_.Ссылка.ПолучитьОбъект();
			Попытка
				// Убедимся в актуальности значения реквизита ХранитьДо.
				Результат_ = ФедеральныеВебСервисыРЭМД.ПолучитьДанныеОДокументеИзРЭМД(Объект_.emdrId);
			Исключение
				Текст_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка);
				ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации("Не получить значение storeTillDate из РЭМД для документа: " + Объект_.emdrId, УровеньЖурналаРегистрации.Ошибка);
				Продолжить;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Результат_.storeTillDate) Тогда
				storeTillDate_ = ПолучитьДатуИзСтроки(Результат_.storeTillDate, Истина);
				
				Если Не ЗначениеЗаполнено(storeTillDate_) Тогда
					ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации("Не получить значение storeTillDate из РЭМД для документа: " + Объект_.emdrId, УровеньЖурналаРегистрации.Ошибка);
					Продолжить;
				КонецЕсли;
				
				Если storeTillDate_ <> Объект_.ХранитьДо Тогда
					Объект_.ХранитьДо = storeTillDate_;
					Объект_.Записать();
				КонецЕсли;
			Иначе
				ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации("Не получить значение storeTillDate из РЭМД для документа: " + Объект_.emdrId, УровеньЖурналаРегистрации.Ошибка);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект_.ХранитьДо) И Объект_.ХранитьДо < НачалоДня(ТекущаяДатаСеанса()) Тогда
				// Удалим документ.
				УдаляемыеФайлы_ = Новый Массив;
				Если ЗначениеЗаполнено(Объект_.ОтносительныйПутьКФайлуЭМД) Тогда
					УдаляемыеФайлы_.Добавить(Объект_.ОтносительныйПутьКФайлуЭМД);
				КонецЕсли;
				
				Для Каждого строкаТЧ_ Из Объект_.ЭлектронныеПодписиЭМД Цикл
					Если ЗначениеЗаполнено(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД) Тогда
						УдаляемыеФайлы_.Добавить(строкаТЧ_.ОтносительныйПутьКФайлуПодписиЭМД);
					КонецЕсли;
				КонецЦикла;
				
				Объект_.УстановитьПометкуУдаления(Истина);
				
				УдалитьФайлыИзАрхиваЭМД(УдаляемыеФайлы_);
			КонецЕсли;
			
		КонецЦикла;
	
	Исключение
		Текст_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщиеМеханизмы.ЗаписатьВЖурналРегистрации(Текст_, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;

КонецПроцедуры

Функция ДобавитьСвязьВЭМД(targetEmdrId, emdrId, docKind, version, TargetType, initiatingOrg)
	Если ЗначениеЗаполнено(targetEmdrId) И ЗначениеЗаполнено(emdrId) Тогда
		Запрос_ = Новый Запрос;
		Запрос_.Текст =
			"ВЫБРАТЬ
			|	ФедеральныеВебСервисыЭМД.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ФедеральныеВебСервисыЭМД КАК ФедеральныеВебСервисыЭМД
			|ГДЕ
			|	ФедеральныеВебСервисыЭМД.emdrId = &emdrId
			|	И НЕ ФедеральныеВебСервисыЭМД.ПометкаУдаления";
		Запрос_.УстановитьПараметр("emdrId", targetEmdrId);
		Выборка_ = Запрос_.Выполнить().Выбрать();
		
		Если Выборка_.Следующий() Тогда
			Объект_ = Выборка_.Ссылка.ПолучитьОбъект();
			Найденные_ = Объект_.СвязанныеДокументы.НайтиСтроки(Новый Структура("emdrId", emdrId));
			
			Если Найденные_.Количество() > 0 Тогда
				строкаТЧ_ = Найденные_[0];
			Иначе
				строкаТЧ_ = Объект_.СвязанныеДокументы.Добавить();
			КонецЕсли;
			
			строкаТЧ_.emdrId = emdrId;
			строкаТЧ_.КодТипаРЭМД = docKind;
			строкаТЧ_.НомерВерсии = version;
			строкаТЧ_.ТипСвязи = TargetType;
			строкаТЧ_.КодOIDОрганизацииВладельца = initiatingOrg;
			
			Объект_.Записать();
			
		Иначе
			ЗаписатьВЖурналРегистрации("Документ emdrid """ + targetEmdrId + """ не найден.", УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстМеждуСтроками(Текст, ОткрывающаяСтрока, ЗакрывающаяСтрока)
	Начало_ = стрНайти(Текст, ОткрывающаяСтрока);
	Если Начало_ > 0 Тогда
		
		Конец_ = стрНайти(Текст, ЗакрывающаяСтрока,, Начало_);
		
		Если Конец_ > 0 Тогда
			Начало_ = Начало_ + стрДлина(ОткрывающаяСтрока);
			Результат_ = Сред(Текст, Начало_, Конец_ - Начало_);
			
			Возврат Результат_;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ПолучитьКоличествоСекундОжиданияИзСообщения(ТекстСообщения)
	
	Начало_ = стрНайти(ТекстСообщения, "[");
	
	Если Начало_ > 0 Тогда
	
		Конец_ = стрНайти(ТекстСообщения, "]",, Начало_);
		
		Если Конец_ > 0 Тогда
			ЧислоСтрокой_ = Сред(ТекстСообщения, Начало_ + 1, Конец_ - Начало_ - 1);
			Если ЗначениеЗаполнено(ЧислоСтрокой_) Тогда
				Попытка
					Результат_ = Число(ЧислоСтрокой_);
					Возврат Результат_;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
КонецФункции

// Шаблоны xml пакетов
#Область ШаблоныXML

Функция ТекстXMLЗаголовокSOAP(СокращенныйЗаголовок = Ложь)
	
	РежимОтладки_ = Константы.ФедеральныеВебСервисыРЭМДРежимОтладки.Получить();
	
	Текст_ = 
		"<soap:Header xmlns:soap=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"">
		|  <transportHeader xmlns=""http://egisz.rosminzdrav.ru"">
		|    <authInfo>
		|      <clientEntityId>[CLIENTID]</clientEntityId>
		|    </authInfo>
		|  </transportHeader>"

		+ ?(Истина = РежимОтладки_, "
		|  <emdrTransportHeader xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|    <trialMode>
		|      <option>skip_end_entity_certificate_validation</option>
		|    </trialMode>
		|  </emdrTransportHeader>", "")

		+ ?(Не Истина = СокращенныйЗаголовок, "
		|  <a:Action>[ACTION]</a:Action>
		|  <a:MessageID>urn:uuid:[MSGID]</a:MessageID>
		|  <a:ReplyTo>
		|    <a:Address>{{[АдресОбратногоВызова]}иначе{http://www.w3.org/2005/08/addressing/anonymous}}</a:Address>
		|  </a:ReplyTo>
		|  <a:To>[ADDRESSTO]</a:To>", "") + "
		|</soap:Header>"
	;
	
	Возврат Текст_;
КонецФункции

// Операция федерального веб-сервиса РЭМД «registerDocument».
Функция ТекстXMLРегистрацияДокументаВРЭМД(Пациент = Истина, СНИЛС = Истина, ЕНП = Истина, КоличествоПодписей = 1)
	Текст_ =
		"<registerDocumentRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|<messageId>[MSG_ID]</messageId>
		|<localUid>[DOCUMENT_ID]</localUid>
		|<kind>[ВИД_ДОКУМЕНТА]</kind>
		|<system>[ИДЕНТИФИКАТОР_МИС_В_РЭМД]</system>
		|<organization>[OID_MO]</organization>
		|{{<department>
		|   <localId>[DEP_OID]</localId>
		|   <name>[DEP_NAME]</name>
		|</department>}}
		|<documentNumber>[НОМЕР_ДОКУМЕНТА]</documentNumber>
		|<creationDateTime>[ДАТАВРЕМЯ_ДОКУМЕНТА]</creationDateTime>"
		+ ?(Пациент, "
		|<patient>
		|   <surname>[ФАМИЛИЯ]</surname>
		|   <name>[ИМЯ]</name>
		|   {{<patrName>[ОТЧЕСТВО]</patrName>}}
		|   <birthDate>[ДАТАРОЖДЕНИЯ]</birthDate>
		|   <gender>[ПОЛ]</gender>
		|   <localId>[PATIENT_ID]</localId>"
		+ ?(СНИЛС, "
		|   <snils>[СНИЛС_НОМЕР]</snils>", "")
		+ ?(ЕНП, "
		|   <enp>[ЕДИНЫЙ_НОМЕР_ПОЛИСА]</enp>","") + "
		|</patient>", "") + "
		|{{<orgSignature>
		|      <data>[ПОДПИСЬ_МО]</data>
		|      <checksum>[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_МО]</checksum>
		|</orgSignature>}}
		|<description>[ОПИСАНИЕ]</description>"
		+ ПовторитьКусокТекста(КоличествоПодписей, "
		|<personalSignature>
		|   <signer>
		|      <localId>[ИДЕНТИФИКАТОР_СОТРУДНИКА_%НОМЕР%]</localId>
		|      <role>[РОЛЬ_СОТРУДНИКА_%НОМЕР%]</role>
		|      <surname>[ФАМИЛИЯ_СОТРУДНИКА_%НОМЕР%]</surname>
		|      <name>[ИМЯ_СОТРУДНИКА_%НОМЕР%]</name>
		|      {{<patrName>[ОТЧЕСТВО_СОТРУДНИКА_%НОМЕР%]</patrName>}}
		|      {{<birthDate>[ДАТАРОЖДЕНИЯ_СОТРУДНИКА_%НОМЕР%]</birthDate>}}
		|      <snils>[СНИЛС_СОТРУДНИКА_%НОМЕР%]</snils>
		|      <position>[КОД_ДОЛЖНОСТИ_%НОМЕР%]</position>
		|      {{<speciality>[КОД_СПЕЦИАЛЬНОСТИ_%НОМЕР%]</speciality>}}
		|      {{<email>[EMAIL_СОТРУДНИКА_%НОМЕР%]</email>}}
		|      {{<phone>[ТЕЛЕФОН_СОТРУДНИКА_%НОМЕР%]</phone>}}
		|   </signer> 
		|   <signature>
		|      <data>[ПОДПИСЬ_%НОМЕР%]</data>
		|      <checksum>[КОНТРОЛЬНАЯ_СУММА_ПОДПИСИ_%НОМЕР%]</checksum>
		|   </signature>
		|</personalSignature>")
		+ "
		|</registerDocumentRequest>";

	Возврат Текст_;
КонецФункции

// Операция федерального веб-сервиса РЭМД «searchRegistryItem».
Функция ТекстXMLПоискДокументовВРЭМД(Организация = Истина, УидДокумента = Истина, ВидДокумента = Истина, НомерДокумента = Истина, Пациент = Истина, Снилс = Истина, Страница = Истина, ДатаСозданияДокументаНачало = Истина, ДатаСозданияДокументаОкончание = Истина, ДатаРегистрацииДокументаНачало = Истина, ДатаРегистрацииДокументаОкончание = Истина)
	
	Текст_ =
		"<searchRegistryItemRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|<!-- [Директивы] -->
		|"
		+ ?(Организация, "<organization>[OID_MO]</organization>", "")
		+ ?(УидДокумента, "<localUid>[DOCUMENT_ID]</localUid>", "")
		+ ?(ВидДокумента, "<kind>[ВИД_ДОКУМЕНТА]</kind>", "")
		+ ?(НомерДокумента, "<documentNumber>[НОМЕР_ДОКУМЕНТА]</documentNumber>", "")
		+ ?(ДатаСозданияДокументаНачало, "<creationDateBegin>[ДАТА_СОЗДАНИЯ_ДОКУМЕНТА_НАЧАЛО]</creationDateBegin>", "")
		+ ?(ДатаСозданияДокументаОкончание, "<creationDateEnd>[ДАТА_СОЗДАНИЯ_ДОКУМЕНТА_ОКОНЧАНИЕ]</creationDateEnd>", "")
		+ ?(ДатаРегистрацииДокументаНачало, "<registerDateBegin>[ДАТА_РЕГИСТРАЦИИ_ДОКУМЕНТА_НАЧАЛО]</registerDateBegin>", "")
		+ ?(ДатаРегистрацииДокументаОкончание, "<registerDateEnd>[ДАТА_РЕГИСТРАЦИИ_ДОКУМЕНТА_ОКОНЧАНИЕ]</registerDateEnd>", "")
		+ ?(Пациент, "<patientId>[PATIENT_ID]</patientId>", "")
		+ ?(Снилс, "<patientSnils>[СНИЛС_НОМЕР]</patientSnils>", "")
		+ ?(Страница, "<page>[НОМЕР_СТРАНИЦЫ]</page>", "") + "
		|</searchRegistryItemRequest>";

	Возврат Текст_;
КонецФункции

// Операция федерального веб-сервиса РЭМД «getRegistryItem».
Функция ТекстXMLПолучитьДанныеОДокументеИзРЭМД()
	
	Текст_ =
		"<getRegistryItemRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|  <emdrId>[EMDRID]</emdrId>
		|</getRegistryItemRequest>";
	
	Возврат Текст_;

КонецФункции

Функция ТекстXMLCallbackResponse(Ошибка = Ложь)
	
	Если Ошибка = Ложь Тогда
		Текст_ =
			"<ns3:callbackResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|    <ns3:status>success</ns3:status>
			|</ns3:callbackResponse>";
	Иначе
		Текст_ =
			"<ns3:callbackResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|	<ns3:status>error</ns3:status>
			|	<ns3:errors>
			|		<ns3:item>
			|			<ns3:code>[КОД_ОШИБКИ]</ns3:code>
			|			<ns3:message>[СООБЩЕНИЕ]</ns3:message>
			|		</ns3:item>
			|	</ns3:errors>
			|</ns3:callbackResponse>";
	КонецЕсли;
	
	Возврат Текст_;

КонецФункции

Функция ТекстXMLGetDocumentFileResponse(Ошибка = Ложь)
	
	Если Ошибка = Ложь Тогда
		Текст_ =
			"<ns3:getDocumentFileResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|  <ns3:status>success</ns3:status>
			|    <ns3:documentFile>
			|      <ns3:system>[ИДЕНТИФИКАТОР_МИС_В_РЭМД]</ns3:system>
			|      <ns3:organization>[OID_MO]</ns3:organization>
			|      <ns3:localUid>[DOCUMENT_ID]</ns3:localUid>
			|      <ns3:file>
			|        <ns3:data>[ТЕЛО_ДОКУМЕНТА]</ns3:data>
			|        <ns3:checksum>[КОНТРОЛЬНАЯ_СУММА_ДОКУМЕНТА]</ns3:checksum>
			|      </ns3:file>
			|    </ns3:documentFile>
			|</ns3:getDocumentFileResponse>";
	Иначе
		Текст_ =
			"<ns3:getDocumentFileResponse xmlns:ns3=""http://egisz.rosminzdrav.ru/iehr/emdr/callback/"">
			|	<ns3:status>error</ns3:status>
			|	<ns3:errors>
			|		<ns3:item>
			|			<ns3:code>[КОД_ОШИБКИ]</ns3:code>
			|			<ns3:message>[СООБЩЕНИЕ]</ns3:message>
			|		</ns3:item>
			|	</ns3:errors>
			|</ns3:getDocumentFileResponse>";
	КонецЕсли;
	
	Возврат Текст_;

КонецФункции

// Операция федерального веб-сервиса РЭМД «demandContent».
Функция ТекстXMLЗаявкаНаПолучениеДокументаИзРЭМД()
	
	Текст_ =
		"<demandContentRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|  <messageId>[MSG_ID]</messageId>
		|  <emdrId>[EMDRID]</emdrId>
		|  {{<grantingEmdrId>[GRANTING_EMDRID]</grantingEmdrId>}}
		|</demandContentRequest>";
	
	Возврат Текст_;

КонецФункции

// Операция федерального веб-сервиса РЭМД «getMetadata».
Функция ТекстXMLПолучитьМетаданныеДокументаИзРЭМД()
	Текст_ =
		"<getMetadataRequest xmlns=""http://egisz.rosminzdrav.ru/iehr/emdr/service/"">
		|  <emdrId>[EMDRID]</emdrId>
		|  {{<grantingEmdrId>[GRANTING_EMDRID]</grantingEmdrId>}}
		|</getMetadataRequest>";
	
	Возврат Текст_;
КонецФункции

#КонецОбласти

// Возвращает ссылку на подразделение медицинского документа
Функция ПолучитьПодразделениеДокумента(ДокументСсылка) Экспорт 

	Подразделение_ = ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, "Подразделение").Подразделение;
	
	Возврат Подразделение_;
	
КонецФункции

// Возвращает OID подразделения медицинской организации
Функция ПолучитьOidПодразделения(Подразделение) Экспорт 
	Возврат ФедеральныеВебСервисыПереопределяемый.ПолучитьДанныеПодразделения(Подразделение);
КонецФункции

// Получает свойства документа необходимые для заполнения сообщений отправляемых в РЭМД.
Функция ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, ТребуемыеРеквизиты) Экспорт
	Возврат ФедеральныеВебСервисыПереопределяемый.ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, ТребуемыеРеквизиты);
КонецФункции

// Получить уникальное имя файла в рабочем каталоге.
//  Если есть совпадения - будет имя подобное "A1\Приказ.doc".
//
Функция ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(ИмяКаталога),
		НСтр("ru='Каталог должен быть заполнен.'"),
		"ПолучитьУникальноеИмяСПутем");
	
	ИтоговыйПуть = "";
	
	Счетчик = 0;
	ЦиклНомер = 0;
	Успешно = Ложь;
	КодБукваA = КодСимвола("A", 1);
	
	ГенераторСлучая = Неопределено;
	
#Если Не ВебКлиент Тогда
	ГенераторСлучая = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
#КонецЕсли

	КоличествоСлучайныхВариантов = 26;
	
	Пока НЕ Успешно И ЦиклНомер < 100 Цикл
		НомерКаталога = 0;
		
#Если Не ВебКлиент Тогда
		НомерКаталога = ГенераторСлучая.СлучайноеЧисло(0, КоличествоСлучайныхВариантов - 1);
#Иначе
		НомерКаталога = ТекущаяУниверсальнаяДатаВМиллисекундах() % КоличествоСлучайныхВариантов;
#КонецЕсли

		Если Счетчик > 1 И КоличествоСлучайныхВариантов < 26 * 26 * 26 * 26 * 26 Тогда
			КоличествоСлучайныхВариантов = КоличествоСлучайныхВариантов * 26;
		КонецЕсли;
		
		БуквыКаталога = "";
		КодБукваA = КодСимвола("A", 1);
		
		Пока Истина Цикл
			НомерБуквы = НомерКаталога % 26;
			НомерКаталога = Цел(НомерКаталога / 26);
			
			КодКаталога = КодБукваA + НомерБуквы;
			
			БуквыКаталога = БуквыКаталога + Символ(КодКаталога);
			Если НомерКаталога = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПодКаталог = ""; // Частичный путь.
		
		// По умолчанию вначале используется корень, если возможности нет,
		// то добавляется A, B, ... Z, .. ZZZZZ, .. AAAAA, .. AAAAAZ и т.д.
		Если  Счетчик = 0 Тогда
			ПодКаталог = "";
		Иначе
			ПодКаталог = БуквыКаталога;
			ЦиклНомер = Окр(Счетчик / 26);
			
			Если ЦиклНомер <> 0 Тогда
				ЦиклНомерСтрока = Строка(ЦиклНомер);
				ПодКаталог = ПодКаталог + ЦиклНомерСтрока;
			КонецЕсли;
			
			ПодКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПодКаталог);
		КонецЕсли;
		
		ПолныйПодКаталог = ИмяКаталога + ПодКаталог;
		
		// Создание каталога для файлов.
		КаталогНаДиске = Новый Файл(ПолныйПодКаталог);
		Если НЕ КаталогНаДиске.Существует() Тогда
			Попытка
				СоздатьКаталог(ПолныйПодКаталог);
			Исключение
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать каталог ""%1"":
						|""%2"".'"),
					ПолныйПодКаталог,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
			КонецПопытки;
		КонецЕсли;
		
		ФайлПопытки = ПолныйПодКаталог + ИмяФайла;
		Счетчик = Счетчик + 1;
		
		// Проверка, есть ли файл с таким именем.
		ФайлНаДиске = Новый Файл(ФайлПопытки);
		Если НЕ ФайлНаДиске.Существует() Тогда  // Нет такого файла.
			ИтоговыйПуть = ПодКаталог + ИмяФайла;
			Успешно = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговыйПуть;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормой

// Обработчик преднастроек форм с командами РЭМД.
// 
// Форма - Управляемая форма - форма источник вызова
// Объект - Произвольный - объект с данными формы
//
//
Процедура ПриСозданииНаСервере(Форма, Объект) Экспорт
	
	УправлениеЭлементами(Форма, Объект.Ссылка);
	
КонецПроцедуры

// Обработчик управления свойствами элементов формы с РЭМД.
// 
// Форма - Управляемая форма - форма источник вызова
// Ссылка - СправочникСсылка, ДокументСсылка - ссылка на объект РЭМД
// 
Процедура УправлениеЭлементами(Форма, Знач ДокументСсылка) Экспорт
	
	ДвоичныеДанныеДокумента_ = Неопределено;
	Если НЕ ДокументСсылка.Пустая() Тогда
		ДвоичныеДанныеДокумента_ = ФедеральныеВебСервисыРЭМД.ПолучитьДвоичныеДанныеДокументаИзХранилища(ДокументСсылка);
	КонецЕсли;
	
	СЭМДСформирован_ = (Не ДвоичныеДанныеДокумента_= Неопределено);
	
	ЭлементСформироватьДокумент_ = Форма.Элементы.Найти("ФормаОбщаяКомандаРЭМД_ДобавитьВХранилище");
	ЭлементПодписатьДокумент_ = Форма.Элементы.Найти("ФормаОбщаяКомандаРЭМД_ДобавитьПодпись");
	ЭлементПоказатьДокумент_ = Форма.Элементы.Найти("ФормаОбщаяКомандаРЭМД_Просмотр");
	
	Если НЕ ЭлементСформироватьДокумент_ = Неопределено Тогда
		ЭлементСформироватьДокумент_.Доступность = Истина;
	КонецЕсли;
	
	Если НЕ ЭлементПодписатьДокумент_ = Неопределено Тогда
		ЭлементПодписатьДокумент_.Доступность = Истина;
	КонецЕсли;
	
	Если НЕ ЭлементПоказатьДокумент_ = Неопределено Тогда
		ЭлементПоказатьДокумент_.Доступность = СЭМДСформирован_;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
