
#Область ПрограммныйИнтерфейс

Процедура ПроверитьКодыМаркировки(ПараметрыПодключения, ДанныеШтрихкодов, ОбработчикЗавершения, ИнтерактивныйРежим = Истина) Экспорт
	
	СписокКодовДляПроверки = Новый Массив;
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодов Цикл
		СписокКодовДляПроверки.Добавить(ДанныеШтрихкода.ШтрихкодBase64);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеШтрихкодов", ДанныеШтрихкодов);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ИнтерактивныйРежим", ИнтерактивныйРежим);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатОтправкиКодовНаПроверку", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьАвторизованныйЗапрос(
		ПараметрыПодключения,
		ОповещениеПриЗавершении,
		"ПроверитьКодМаркировки",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокКодовДляПроверки));
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиКодовНаПроверку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ЗавершитьПроверкуКодовМаркировки(ДополнительныеПараметры.ОбработчикЗавершения, Результат);
	КонецЕсли;
	
	ТекущееЗадание = Новый Структура;
	ТекущееЗадание.Вставить("ПараметрыПодключения", ДополнительныеПараметры.ПараметрыПодключения);
	ТекущееЗадание.Вставить("Идентификатор", Результат.ИдентификаторЗапроса);
	ТекущееЗадание.Вставить("Обработчик", Новый ОписаниеОповещения("ОбработатьРезультатПроверкиКодовМаркировки", ЭтотОбъект, ДополнительныеПараметры));
	
	ПараметрыПриложения["ТекущееЗаданиеРВ"] = ТекущееЗадание;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРезультатаВыполненияЗаданияРВ", 1, Истина);
	
КонецПроцедуры

Процедура ОтправитьСообщение(ПараметрыПодключения, Сообщение, ОповещениеПриЗавершении) Экспорт
	
	ВыполнитьАвторизованныйЗапрос(
		ПараметрыПодключения,
		ОповещениеПриЗавершении,
		"ОтправитьСообщение",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сообщение));
	
КонецПроцедуры

Процедура ПолучитьВходящиеСообщения(ПараметрыПодключения, ОповещениеПриЗавершении, ПараметрыВыполненияОбмена = Неопределено) Экспорт
	
	ВыполнитьАвторизованныйЗапрос(
		ПараметрыПодключения,
		ОповещениеПриЗавершении,
		"ПолучитьВходящиеСообщения",
		ПараметрыВыполненияОбмена);
	
КонецПроцедуры

Процедура ПолучитьРезультатВыполненияЗадания() Экспорт
	
	ТекущееЗадание = ПараметрыПриложения["ТекущееЗаданиеРВ"];
	Если ТекущееЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Транспорт = ТекущееЗадание.ПараметрыПодключения;
	РезультатЗадания = ТранспортМДЛПРВКлиентСервер.ПолучитьСтатусЗадания(Транспорт, ТекущееЗадание.Идентификатор);
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ПараметрыПриложения["ТекущееЗаданиеРВ"] = Неопределено;
		ВыполнитьОбработкуОповещения(ТекущееЗадание.Обработчик, РезультатЗадания);
	Иначе
		Данные = РезультатЗадания.Данные;
		Если Данные["status"] = "ready" Или Данные["status"] = "error" Тогда
			ВыполнитьОбработкуОповещения(ТекущееЗадание.Обработчик, РезультатЗадания);
			ПараметрыПриложения["ТекущееЗаданиеРВ"] = Неопределено;
		Иначе
			ПодключитьОбработчикОжидания("ОбработчикОжиданияРезультатаВыполненияЗаданияРВ", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьАвторизованныйЗапрос(ПараметрыПодключения, ОповещениеПриЗавершении, ИмяМетода, Параметры = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИмяМетода", ИмяМетода);
	Если Параметры <> Неопределено Тогда
		Контекст.Вставить("ПараметрыМетода", ?(ТипЗнч(Параметры) <> Тип("Массив"), ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры), Параметры));
	КонецЕсли;
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьМетодРВ_ПослеПолученияДанныхАвторизации", ЭтотОбъект, Контекст);
	ПолучитьДанныеАвторизации(ПараметрыПодключения, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаКМ

Процедура ОбработатьРезультатПроверкиКодовМаркировки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ЗавершитьПроверкуКодовМаркировки(ДополнительныеПараметры.ОбработчикЗавершения, Результат);
		
	Иначе
		
		РезультатПроверки = Результат.Данные;
		Если РезультатПроверки["status"] = "error" Тогда
			
			РезультатОшибка = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
			РезультатОшибка.Статус = "Ошибка";
			Ошибка = РезультатПроверки["error"];
			РезультатОшибка.КодОшибки = Ошибка["code"];
			РезультатОшибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1) %2", Формат(Ошибка["code"], "ЧГ=0"), Ошибка["description"]);
			
		Иначе
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Статус", "Выполнено");
			ПараметрыОбработчика.Вставить("ДанныеШтрихкодов", ДополнительныеПараметры.ДанныеШтрихкодов);
			ПараметрыОбработчика.Вставить("ОбработчикЗавершения", ДополнительныеПараметры.ОбработчикЗавершения);
			ПараметрыОбработчика.Вставить("ДанныеПроверки", РезультатПроверки["result"]["marks"]);
			ПараметрыОбработчика.Вставить("ПроверенныеШтрихкоды", Новый Массив);
			ПараметрыОбработчика.Вставить("ИнтерактивныйРежим", ДополнительныеПараметры.ИнтерактивныйРежим);
			ОбработатьКМИзРезультатаПроверки(ПараметрыОбработчика);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьПроверкуКодовМаркировки(ОбработчикЗавершения, РезультатПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус");
	Результат.Вставить("Ошибка");
	Результат.Вставить("ОписаниеОшибки");
	Результат.Вставить("ПроверенныеШтрихкоды");
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	
	ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Результат);
	
КонецПроцедуры

Процедура ОбработатьКМИзРезультатаПроверки(ПараметрыОбработчика)
	
	НепрошедшиеПроверкуКМ = Новый Соответствие;
	Для ТекущийИндекс = 0 По ПараметрыОбработчика.ДанныеШтрихкодов.Количество() - 1 Цикл
		
		ДанныеПроверки = ПараметрыОбработчика.ДанныеПроверки[Формат(ТекущийИндекс, "ЧН=0; ЧГ=0")];
		РезультатПроверки = ПолучитьРезультатПроверки(ДанныеПроверки);
		
		ДанныеШтрихкода = ПараметрыОбработчика.ДанныеШтрихкодов[ТекущийИндекс];
		ДанныеШтрихкода.Вставить("РезультатПроверки", РезультатПроверки);
		
		Если Не РезультатПроверки.Успех Тогда
			НепрошедшиеПроверкуКМ.Вставить(ТекущийИндекс, ДанныеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиКМПослеПодтвержденияПользователем", ЭтотОбъект, ПараметрыОбработчика);
	Если ПараметрыОбработчика.ИнтерактивныйРежим И НепрошедшиеПроверкуКМ.Количество() > 0 Тогда
		ЗадатьВопросПользователюОбИспользованииШтрихкодов(НепрошедшиеПроверкуКМ, Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, Новый Соответствие);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРезультатПроверки(ДанныеПроверки)
	
	Возврат ТранспортМДЛПРВКлиентСервер.СформироватьРезультатПроверкиКодаМаркировки(ДанныеПроверки);
	
КонецФункции

Процедура ОбработатьРезультатПроверкиКМПослеПодтвержденияПользователем(НеподтвержденныеПользователемКМ, ПараметрыОбработчика) Экспорт
	
	Если ЗначениеЗаполнено(НеподтвержденныеПользователемКМ) Тогда
		Для ТекущийИндекс = 0 По ПараметрыОбработчика.ДанныеШтрихкодов.Количество() - 1 Цикл
			Если НеподтвержденныеПользователемКМ[ТекущийИндекс] = Неопределено Тогда
				ПараметрыОбработчика.ПроверенныеШтрихкоды.Добавить(ПараметрыОбработчика.ДанныеШтрихкодов[ТекущийИндекс]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПараметрыОбработчика.ПроверенныеШтрихкоды = ПараметрыОбработчика.ДанныеШтрихкодов;
	КонецЕсли;
	
	ЗавершитьПроверкуКодовМаркировки(ПараметрыОбработчика.ОбработчикЗавершения, ПараметрыОбработчика);
	
КонецПроцедуры

Процедура ЗадатьВопросПользователюОбИспользованииШтрихкодов(НепрошедшиеПроверкуКМ, Обработчик)
	
	Если Не ЗначениеЗаполнено(НепрошедшиеПроверкуКМ) Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Новый Соответствие);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("НепрошедшиеПроверкуКМ", НепрошедшиеПроверкуКМ);
	Контекст.Вставить("Обработчик", Обработчик);
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветПользователя", ЭтотОбъект, Контекст);
	Если НепрошедшиеПроверкуКМ.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из НепрошедшиеПроверкуКМ Цикл
			ДанныеШтрихкода = НепрошедшиеПроверкуКМ[КлючИЗначение.Ключ];
		КонецЦикла;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Упаковка ""%1"" не прошла проверку по причине:
			|
			|%2.
			|
			|Использовать не прошедшую проверку упаковку?'"),
			ДанныеШтрихкода.sgtin,
			ДанныеШтрихкода.РезультатПроверки.Статус);
	ИначеЕсли НепрошедшиеПроверкуКМ.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Все или часть упаковок не прошла проверку.
			|Использовать не прошедшие проверку упаковки?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ОбработатьОтветПользователя(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Контекст.Обработчик, Новый Соответствие);
	Иначе
		ВыполнитьОбработкуОповещения(Контекст.Обработчик, Контекст.НепрошедшиеПроверкуКМ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьМетодРВ_ПослеПолученияДанныхАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	Если РезультатАвторизации.Статус = "Ошибка" Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатАвторизации);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения = РезультатАвторизации.ПараметрыПодключения;
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "ПараметрыМетода");
	Результат = ТранспортМДЛПРВКлиентСервер.ВыполнитьМетодРВ(ПараметрыПодключения, Контекст.ИмяМетода, ПараметрыМетода);
	Если Результат.Статус = "Ошибка" Тогда
		Если Результат.ТребуетсяАвторизация Тогда
			Оповещение = Новый ОписаниеОповещения("ВыполнитьМетодРВ_ПослеПолученияДанныхАвторизации", ЭтотОбъект, Контекст);
			ЗапроситьДанныеАвторизации(ПараметрыПодключения, Оповещение);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры

Процедура ЗапроситьДанныеАвторизации(ПараметрыПодключения, ОповещениеПриЗавершении)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Регистратор", ПараметрыПодключения.Регистратор);
	ПараметрыФормы.Вставить("Логин", ПараметрыПодключения.Логин);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Обработчик = Новый ОписаниеОповещения("ЗапроситьДанныеАвторизации_ПослеАвторизации", ЭтотОбъект, Контекст);
	ОткрытьФорму("Справочник.РегистраторыМДЛП.Форма.ЗапросПароля", ПараметрыФормы,,,,, Обработчик);
	
КонецПроцедуры

Процедура ЗапроситьДанныеАвторизации_ПослеАвторизации(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Статус", "Ошибка");
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Ошибка авторизации.'"));
	Иначе
		ПараметрыПодключения = Контекст.ПараметрыПодключения;
		ПараметрыПодключения.Вставить("Логин", Результат.Логин);
		ПараметрыПодключения.Вставить("Пароль", Результат.Пароль);
		УстановитьТекущиеДанныеАвторизации(ПараметрыПодключения, Результат.Логин, Результат.Пароль, Результат.ЗапомнитьПароль);
		Результат.Вставить("Статус", "Успех");
		Результат.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры


Процедура ПолучитьДанныеАвторизации(ПараметрыПодключения, Оповещение) Экспорт
	
	Данные = ДанныеАвторизации(ПараметрыПодключения);
	Если Данные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Данные, "Логин, Пароль");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыПодключения.Логин) Или ПустаяСтрока(ПараметрыПодключения.Пароль) Тогда
		ЗапроситьДанныеАвторизации(ПараметрыПодключения, Оповещение);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Статус", "Успех");
		Результат.Вставить("ПараметрыПодключения", ПараметрыПодключения);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеАвторизации(ПараметрыПодключения)
	
	ИмяПараметра = "ИнтеграцияМДЛП.ДанныеАвторизацииРВ";
	
	ДанныеАвторизации = ПараметрыПриложения[ИмяПараметра];
	Если ДанныеАвторизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеАвторизации[ПараметрыПодключения.Регистратор];
	
КонецФункции

Процедура УстановитьТекущиеДанныеАвторизации(ПараметрыПодключения, Логин, Пароль, ЗапомнитьПароль)
	
	ИмяПараметра = "ИнтеграцияМДЛП.ДанныеАвторизацииРВ";
	
	ДанныеАвторизации = ПараметрыПриложения[ИмяПараметра];
	Если ДанныеАвторизации = Неопределено Тогда
		ДанныеАвторизации = Новый Соответствие;
	КонецЕсли;
	
	
	Данные = Новый Структура;
	Данные.Вставить("Логин", Логин);
	Данные.Вставить("Пароль", ?(ЗапомнитьПароль, Пароль, Неопределено));
	ДанныеАвторизации[ПараметрыПодключения.Регистратор] = Данные;
	
	ПараметрыПриложения[ИмяПараметра] = ДанныеАвторизации;
	
КонецПроцедуры

#КонецОбласти
