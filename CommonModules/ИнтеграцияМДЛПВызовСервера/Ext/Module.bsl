////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияМДЛП: процедуры и функции подсистемы "Интеграция с МДЛП"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает адресные объекты ФИАС по значением полей адреса контактной информации.
//
// Параметры:
//  ЗначенияПолей - - значения полей контактной информации.
// 
// Возвращаемое значение:
//  Структура - 
//    * Успех - Булево - результат определения адресных объектов.
//    * ИдентификаторАдресногоОбъекта - aoguid.
//    * ИдентификаторДома - houseguid.
//    * Помещение - номер квартиры/офиса.
//
Функция ПолучитьАдресныеОбъекты(Знач ЗначенияПолей) Экспорт
	
	Результат = Новый Структура("Успех, ИдентификаторАдресногоОбъекта, ИдентификаторДома, Помещение", Ложь);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("ТолькоНациональныйАдрес", Истина);
		ПараметрыПроверки.Вставить("ФорматАдреса"           , "ФИАС");
		РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(ЗначенияПолей, ПараметрыПроверки);
		Если РезультатПроверки.Результат <> "Корректный" Тогда
			ТекстОшибки = НСтр("ru = 'Не корректный адрес'");
			Для Каждого Ошибка Из РезультатПроверки.СписокОшибок Цикл
				ТекстОшибки = ТекстОшибки + Символы.ПС + " - " + Ошибка.Представление;
			КонецЦикла;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
		Сведения = МодульРаботаСАдресами.СведенияОбАдресе(ЗначенияПолей);
		ПредставленияПомещений = Новый Массив;
		Для Каждого Помещение Из Сведения.Помещения Цикл
			ПредставленияПомещений.Добавить(СокрЛП(Помещение.Номер));
		КонецЦикла;
		Результат.Помещение = СтрСоединить(ПредставленияПомещений, ",");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		
		Данные = МодульАдресныйКлассификатор.КодыАдреса(ЗначенияПолей);
		Если Не ЗначениеЗаполнено(Данные.Идентификатор) Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось заполнить идентификаторы адреса'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			Результат.Успех = Истина;
			Результат.ИдентификаторАдресногоОбъекта = Данные.Идентификатор;
			Результат.ИдентификаторДома             = Данные.ИдентификаторДома;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОбменДанными

// Формирует сообщение к передаче в МДЛП.
//
// Параметры:
//  ДокументСсылка           - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие       - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП - текущее действие.
//  ДополнительныеПараметры  - Произвольный - дополнительные параметры формирования сообщения.
// 
// Возвращаемое значение:
//  Массив - сформированные сообщения
//   * Структура - см. ИнтеграцияМДЛП.СтруктураСообщенияКПередаче.
//
Функция СообщениеКПередаче(Знач ДокументСсылка, Знач ДальнейшееДействие, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	Возврат Менеджер.СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	
КонецФункции

// Регистрирует входящее сообщение к дальнейшей обработке в очереди.
//
// Параметры:
//  Сообщение                        - Строка - входящее сообщение.
//  ИдентификаторЗапроса             - Строка - идентификатор исходного запроса.
//  ИдентификаторСубъектаОбращения   - Строка - идентификатор субъекта обращения, к которому относится сообщение.
// 
// Возвращаемое значение:
//  Структура - результат выполнения операции.
//
Функция ЗарегистрироватьВходящееСообщениеКОбработке(Знач Сообщение, Знач ИдентификаторЗапроса, Знач ИдентификаторСубъектаОбращения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус");
	Результат.Вставить("ОписаниеОшибки", "");
	
	Попытка
		ДанныеСообщения = РегистрыСведений.ОчередьОбработкиВходящихДокументовМДЛП.СтруктураДанныхСообщения();
		ДанныеСообщения.Данные = Сообщение;
		ДанныеСообщения.ИдентификаторЗапроса = ИдентификаторЗапроса;
		ДанныеСообщения.ИдентификаторСубъектаОбращения = ИдентификаторСубъектаОбращения;
		Если ДополнительныеПараметры <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСообщения, ДополнительныеПараметры);
		КонецЕсли;
		РегистрыСведений.ОчередьОбработкиВходящихДокументовМДЛП.ДобавитьСообщениеВОчередь(ДанныеСообщения);
		Результат.Статус = "Обработан";
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ОписаниеОшибки());
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


// Запускает выполнение обмена.
//
// Параметры:
//  Организация               - ОпределяемыйТип.ОрганизацииМДЛП       - организация, для которой выполняется обмен.
//  МестоДеятельности         - ОпределяемыйТип.МестаДеятельностиМДЛП - место деятельности, для которого выполняется обмен.
//  ПараметрыВыполненияОбмена - Структура - дополнительные параметры выполнения обмена
//                                         (см. ИнтеграцияМДЛПКлиентСервер.ПараметрыВыполненияОбмена()).
//  ДатыПоследнегоЗапуска     - даты последнего выполнения обмена по расписания на клиенте.
// 
// Возвращаемое значение:
//  Структура - 
//    * Изменения - Массив - результат обмена на сервере.
//    * СообщенияКПередаче - Массив - сообщения к передачи на клиенте.
//    * НастройкиОбмена - Соответствие - настройки обмена на клиенте.
//    * ВыполнитьОбменПоРасписанию - Булево - признак выполнения обмена по расписанию.
//    * ПараметрыВыполненияОбмена - Структура - дополнительные параметры выполнения обмена
//                                  (см. ИнтеграцияМДЛПКлиентСервер.ПараметрыВыполненияОбмена()).
//
Функция ВыполнитьОбмен(Знач Организация = Неопределено, Знач МестоДеятельности = Неопределено, Знач ПараметрыВыполненияОбмена = Неопределено, Знач ДатыПоследнегоЗапуска = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения"                 , Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияКПередаче"        , Новый Массив);
	ВозвращаемоеЗначение.Вставить("ПараметрыВыполненияОбмена" , Новый Структура);
	ВозвращаемоеЗначение.Вставить("НастройкиОбмена"           , Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("РегистраторыВыбытия"       , Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ВыполнитьОбменПоРасписанию", Ложь);
	
	НастройкиОбмена = НастройкиОбмена(Организация, МестоДеятельности, ДатыПоследнегоЗапуска);
	
	ВозвращаемоеЗначение.НастройкиОбмена = НастройкиОбмена.ОбменНаКлиенте;
	ВозвращаемоеЗначение.РегистраторыВыбытия = НастройкиОбмена.РегистраторыВыбытия;
	//ВозвращаемоеЗначение.ВыполнитьОбменПоРасписанию =
	//	ДатыПоследнегоЗапуска <> Неопределено
	//	И НастройкиОбмена.ОбменНаКлиенте.Количество() > 0;
	
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбмена,, ПараметрыВыполненияОбмена);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Для Каждого ТранспортныйМодуль Из НастройкиОбмена.ОбменНаСервере Цикл
		Если ТранспортныйМодуль.Значение.ЗагружатьВходящиеДокументы Тогда
			ТранспортМДЛП.ПолучитьВходящиеСообщения(ТранспортныйМодуль.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиОбмена.ОбменНаСервере.Количество() > 0 Тогда
		Результат = ОбработатьВходящиеСообщения(ИнтеграцияМДЛПКлиентСервер.СубъектыОбращенияНастроекОбмена(НастройкиОбмена.ОбменНаСервере), ПараметрыВыполненияОбмена);
		Для Каждого ЭлементДанных Из Результат.Изменения Цикл
			ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
		КонецЦикла;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Для места деятельности %1 не заданы настройки подключения.'");
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбмена.БезНастроек Цикл
		Если ЗначениеЗаполнено(ОрганизацияБезНастроек.МестоДеятельности) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", ОрганизацияБезНастроек.Организация, ОрганизацияБезНастроек.МестоДеятельности);
		Иначе
			ПредставлениеОрганизации = Строка(ОрганизацияБезНастроек.Организация);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеОрганизации));
	КонецЦикла;
	
	Если ПараметрыВыполненияОбмена <> Неопределено Тогда
		ВозвращаемоеЗначение.ПараметрыВыполненияОбмена = ПараметрыВыполненияОбмена;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьЗагрузку(Знач Организация = Неопределено, Знач МестоДеятельности = Неопределено, Знач ПараметрыВыполненияОбмена = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения"                 , Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияКПередаче"        , Новый Массив);
	ВозвращаемоеЗначение.Вставить("ПараметрыВыполненияОбмена" , Новый Структура);
	ВозвращаемоеЗначение.Вставить("НастройкиОбмена"           , Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("РегистраторыВыбытия"       , Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ВыполнитьОбменПоРасписанию", Ложь);
	
	НастройкиОбмена = НастройкиОбмена(Организация, МестоДеятельности);
	
	ВозвращаемоеЗначение.НастройкиОбмена = НастройкиОбмена.ОбменНаКлиенте;
	ВозвращаемоеЗначение.РегистраторыВыбытия = НастройкиОбмена.РегистраторыВыбытия;
	//ВозвращаемоеЗначение.ВыполнитьОбменПоРасписанию =
	//	ДатыПоследнегоЗапуска <> Неопределено
	//	И НастройкиОбмена.ОбменНаКлиенте.Количество() > 0;
	
	Для Каждого ТранспортныйМодуль Из НастройкиОбмена.ОбменНаСервере Цикл
		Если ТранспортныйМодуль.Значение.ЗагружатьВходящиеДокументы Тогда
			ТранспортМДЛП.ПолучитьВходящиеСообщения(ТранспортныйМодуль.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиОбмена.ОбменНаСервере.Количество() > 0 Тогда
		Результат = ОбработатьВходящиеСообщения(ИнтеграцияМДЛПКлиентСервер.СубъектыОбращенияНастроекОбмена(НастройкиОбмена.ОбменНаСервере));
		Для Каждого ЭлементДанных Из Результат.Изменения Цикл
			ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
		КонецЦикла;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Для места деятельности %1 не заданы настройки подключения.'");
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбмена.БезНастроек Цикл
		Если ЗначениеЗаполнено(ОрганизацияБезНастроек.МестоДеятельности) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", ОрганизацияБезНастроек.Организация, ОрганизацияБезНастроек.МестоДеятельности);
		Иначе
			ПредставлениеОрганизации = Строка(ОрганизацияБезНастроек.Организация);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеОрганизации));
	КонецЦикла;
	
	Если ПараметрыВыполненияОбмена <> Неопределено Тогда
		ВозвращаемоеЗначение.ПараметрыВыполненияОбмена = ПараметрыВыполненияОбмена;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подтверждает передачу сообщения, находящегося в очереди передачи данных, и удаляет его из очереди.
//
// Параметры:
//  СообщениеКПодтверждению - СправочникСсылка.МДЛППрисоединенныеФайлы - подтверждаемое сообщение.
//  ИдентификаторЗапроса    - Строка(36) - идентификатор запроса сообщения, для связи с квитанцией.
// 
// Возвращаемое значение:
//  Структура - результат обработки.
//
Функция ПодтвердитьПередачу(Знач СообщениеКПодтверждению, Знач ИдентификаторЗапроса) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Сообщения.Ссылка                          КАК Ссылка,
	|	Сообщения.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения,
	|	Сообщения.Операция                        КАК Операция,
	|	Сообщения.ВладелецФайла                   КАК Документ,
	|	Очередь.ОбновитьСостояниеПодтверждения    КАК ОбновитьСостояниеПодтверждения,
	|	ВЫБОР
	|		КОГДА Очередь.Сообщение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                     КАК СообщениеВОчереди
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОчередьПередачиДанныхМДЛП КАК Очередь
	|	ПО
	|		Очередь.Сообщение = Сообщения.Ссылка
	|ГДЕ
	|	Сообщения.Ссылка = &Сообщение
	|");
	Запрос.УстановитьПараметр("Сообщение", СообщениеКПодтверждению);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Сообщение отсутствует в системе.'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
	
	Сообщение = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	ЗаполнитьЗначенияСвойств(Сообщение, Выборка);
	РезультатОтправки = Новый Структура;
	Если Выборка.СообщениеВОчереди Тогда
		РезультатОтправки.Вставить("Статус", "Успех");
		РезультатОтправки.Вставить("ОписаниеОшибки", "");
		РезультатОтправки.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		РезультатОтправки.Вставить("Подпись");
		РезультатОтправки.Вставить("ОтветТранспортногоМодуля", НСтр("ru = 'Отправка сообщения подтверждена пользователем.'"));
	Иначе
		РезультатОтправки.Вставить("Статус", "Ошибка");
		РезультатОтправки.Вставить("ОписаниеОшибки", НСтр("ru = 'Сообщение отсутствует в очереди передачи данных.'"));
	КонецЕсли;
	
	Возврат ОбработатьРезультатОтправкиСообщения(Сообщение, РезультатОтправки);
	
КонецФункции

Функция ОтменитьПередачуСообщения(Знач СообщениеКОтменеПередачи) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Сообщения.Ссылка                          КАК Ссылка,
	|	Сообщения.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения,
	|	Сообщения.Операция                        КАК Операция,
	|	Сообщения.ВладелецФайла                   КАК Документ,
	|	Очередь.ОбновитьСостояниеПодтверждения    КАК ОбновитьСостояниеПодтверждения,
	|	ВЫБОР
	|		КОГДА Очередь.Сообщение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                     КАК СообщениеВОчереди
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОчередьПередачиДанныхМДЛП КАК Очередь
	|	ПО
	|		Очередь.Сообщение = Сообщения.Ссылка
	|ГДЕ
	|	Сообщения.Ссылка = &Сообщение
	|");
	Запрос.УстановитьПараметр("Сообщение", СообщениеКОтменеПередачи);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Сообщение отсутствует в системе.'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
	
	Сообщение = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	ЗаполнитьЗначенияСвойств(Сообщение, Выборка);
	РезультатОтправки = Новый Структура;
	Если Выборка.СообщениеВОчереди Тогда
		РезультатОтправки.Вставить("Статус", "Успех");
		РезультатОтправки.Вставить("ОписаниеОшибки", НСтр("ru = 'Отправка сообщения отменена пользователем.'"));
		РезультатОтправки.Вставить("ОтветТранспортногоМодуля", НСтр("ru = 'Отправка сообщения отменена пользователем.'"));
	Иначе
		РезультатОтправки.Вставить("Статус", "Ошибка");
		РезультатОтправки.Вставить("ОписаниеОшибки", НСтр("ru = 'Сообщение отсутствует в очереди передачи данных.'"));
	КонецЕсли;
	
	Возврат ОбработатьРезультатОтправкиСообщения(Сообщение, РезультатОтправки);
	
КонецФункции

// Обрабатывает результат выполнения обмена.
//
// Параметры:
//  ИсходящееСообщение  - Структура - 
//  РезультатОтправки   - Структура - 
// 
// Возвращаемое значение:
//  Структура - результат обработки.
//
Функция ОбработатьРезультатОтправкиСообщения(Знач ИсходящееСообщение, Знач РезультатОтправки) Экспорт
	
	ИдентификаторСубъектаОбращения = ИсходящееСообщение.ИдентификаторСубъектаОбращения;
	ДокументСсылка = ИсходящееСообщение.Документ;
	Операция = ИсходящееСообщение.Операция;
	
	СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ИдентификаторСубъектаОбращения = ИдентификаторСубъектаОбращения;
	СтрокаРезультата.Операция              = Операция;
	СтрокаРезультата.Объект                = ДокументСсылка;
	СтрокаРезультата.ИсходящееСообщение    = ИсходящееСообщение.Ссылка;
	СтрокаРезультата.ПодготовленоКПередаче = Истина;
	
	ВходящееСообщение = Неопределено;
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные не переданы:
			           |	Документ: %1
			           |	Операция: %2
			           |По причине:
			           |%3'"),
			ДокументСсылка,
			Операция,
			РезультатОтправки.ОписаниеОшибки);
		
	Иначе
		
		ТекстСообщения = РезультатОтправки.ОтветТранспортногоМодуля;
		
		Если ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда
			СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано;
			ИдентификаторЗапроса = РезультатОтправки.ИдентификаторЗапроса;
			Подпись              = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОтправки, "Подпись", "");
		Иначе
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка;
			ИдентификаторЗапроса = "";
			Подпись              = "";
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение по документу %1 не принято:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				РезультатОтправки.ОписаниеОшибки);
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ТипСообщения"                  , Перечисления.ТипыСообщенийМДЛП.Квитанция);
		Реквизиты.Вставить("Операция"                      , Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОПринятии);
		Реквизиты.Вставить("Документ"                      , ДокументСсылка);
		Реквизиты.Вставить("СообщениеОснование"            , ИсходящееСообщение.Ссылка);
		Реквизиты.Вставить("ОперацияКвитанции"             , Операция);
		Реквизиты.Вставить("Описание"                      , РезультатОтправки.ОписаниеОшибки);
		Реквизиты.Вставить("ИдентификаторЗапроса"          , ИдентификаторЗапроса);
		Реквизиты.Вставить("ИдентификаторСубъектаОбращения", ИдентификаторСубъектаОбращения);
		Реквизиты.Вставить("СтатусОбработки"               , СтатусОбработки);
		
		НачатьТранзакцию();
		
		Попытка
			
			СтрокаРезультата.ВходящееСообщение = Справочники.МДЛППрисоединенныеФайлы.ДобавитьЗаписьВПротоколОбмена(ТекстСообщения, Реквизиты).Ссылка;
			
			РегистрыСведений.ОчередьПередачиДанныхМДЛП.УдалитьСообщениеИзОчереди(ИсходящееСообщение.Ссылка);
			
			Справочники.МДЛППрисоединенныеФайлы.ОбновитьЗаписьПротоколаОбмена(
				ИсходящееСообщение.Ссылка,
				Новый Структура("СтатусОбработки, ИдентификаторЗапроса", СтатусОбработки, ИдентификаторЗапроса));
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
			
			Если ИсходящееСообщение.ОбновитьСостояниеПодтверждения Тогда
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				МенеджерОбъекта.ОбновитьСостояниеПодтверждения(ДокументОбъект, Реквизиты.ОперацияКвитанции, ИсходящееСообщение.Ссылка, СтатусОбработки);
				ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;
			
			СтрокаРезультата.НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(Реквизиты.Документ, Операция, СтатусОбработки);
			
			СтрокаРезультата.ИдентификаторЗапроса  = ИдентификаторЗапроса;
			СтрокаРезультата.Подпись               = Подпись;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(ДокументСсылка, ИсходящееСообщение.УникальныйИдентификатор);
	
	СтрокаРезультата.ТекстОшибки  = ТекстОшибки;
	СтрокаРезультата.Передано     = Не ЗначениеЗаполнено(ТекстОшибки);
	СтрокаРезультата.Принято      = Ложь;
	
	Возврат СтрокаРезультата;
	
КонецФункции

// См. ИнтеграцияМДЛП.ОбработатьВходящиеСообщения
Функция ОбработатьВходящиеСообщения(Знач ИдентификаторСубъектаОбращения = Неопределено, Знач ПараметрыВыполненияОбмена = Неопределено) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбработатьВходящиеСообщения(ИдентификаторСубъектаОбращения, ПараметрыВыполненияОбмена);
	
КонецФункции

// Подготавливает сообщения к передачи и, при возможности, выполняет отправку.
//
// Параметры:
//  ВходящиеДанные          - Массив - данные, по которым нужно отправить сообщения.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП - выполняемое действие.
//  ДополнительныеПараметры - Произвольный - дополнительные параметры формирования сообщения.
// 
// Возвращаемое значение:
//  Структура - 
//    * Изменения - Массив - результат подготовки и отправки сообщений.
//    * СообщенияКПередаче - Массив - сообщения к передачи на клиенте.
//    * НастройкиОбмена - Соответствие - настройки обмена на клиенте.
//
Функция ПодготовитьСообщенияКПередаче(Знач ВходящиеДанные, Знач ДальнейшееДействие, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения"         , Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияКПередаче", Новый Массив);
	ВозвращаемоеЗначение.Вставить("ПараметрыВыполненияОбмена", Новый Структура);
	ВозвращаемоеЗначение.Вставить("НастройкиОбмена"   , Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("РегистраторыВыбытия", Новый Соответствие);
	
	Сообщения = Новый Массив;
	Для Каждого ДокументСсылка Из ВходящиеДанные Цикл
		
		СообщенияДокумента = СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
		Для Каждого Сообщение Из СообщенияДокумента Цикл
			Сообщения.Добавить(Сообщение);
		КонецЦикла;
		
	КонецЦикла;
	
	ОтправитьСообщенияСразу = Не Константы.ОтправлятьДанныеТолькоПриВыполненииОбменаМДЛП.Получить();
	СообщенияКПередаче = Новый Массив;
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		ТекстОшибки = Сообщение.ТекстОшибки;
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Результат = ПодготовитьСообщениеКПередаче(Сообщение);
			ТекстОшибки = Результат.ТекстОшибки;
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Сообщение.Ссылка = Результат.ИсходящееСообщение.Ссылка;
			
			Если ОтправитьСообщенияСразу Тогда
				Сообщение.ХешСумма = Результат.ИсходящееСообщение.ХешСумма;
				Сообщение.Размер   = Результат.ИсходящееСообщение.Размер;
				Сообщение.КодОперации = Перечисления.ОперацииОбменаМДЛП.КодОперации(Сообщение.Операция);
				
				СообщенияКПередаче.Добавить(Сообщение);
			Иначе
				СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ИдентификаторСубъектаОбращения = Сообщение.ИдентификаторСубъектаОбращения;
				СтрокаРезультата.Операция                       = Сообщение.Операция;
				
				СтрокаРезультата.ПодготовленоКПередаче = Истина;
				
				СтрокаРезультата.Объект             = Сообщение.Документ;
				СтрокаРезультата.ДокументОснование  = Сообщение.Основание;
				СтрокаРезультата.ИсходящееСообщение = Сообщение.Ссылка;
				
				ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			КонецЕсли;
			
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в МДЛП:
				           |%2'"),
				Сообщение.Операция,
				ТекстОшибки);
			
			СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ИдентификаторСубъектаОбращения = Сообщение.ИдентификаторСубъектаОбращения;
			СтрокаРезультата.Операция                       = Сообщение.Операция;
			
			СтрокаРезультата.ТекстОшибки = ТекстОшибки;
			
			СтрокаРезультата.Объект            = Сообщение.Документ;
			СтрокаРезультата.ДокументОснование = Сообщение.Основание;
			
			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщенияКПередаче.Количество() Тогда
		НастройкиОбмена = НастройкиОбмена();
		ВозвращаемоеЗначение.НастройкиОбмена = НастройкиОбмена.ОбменНаКлиенте;
		ВозвращаемоеЗначение.РегистраторыВыбытия = НастройкиОбмена.РегистраторыВыбытия;
		
		РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбмена, СообщенияКПередаче);
		Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
			ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
		КонецЦикла;
		Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияКПередаче Цикл
			ВозвращаемоеЗначение.СообщенияКПередаче.Добавить(ЭлементДанных);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Извлекает текст сообщения из протокола обмена.
//
// Параметры:
//  Сообщение - СправочникСсылка.МДЛППрисоединенныеФайлы - сообщение из протокола обмена.
// 
// Возвращаемое значение:
//  Строка - текст сообщения.
//
Функция ТекстСообщенияИзПротокола(Знач Сообщение) Экспорт
	
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Сообщение);
	Возврат ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	
КонецФункции

// Проверяет возможность обмена через транспорт на клиенте по расписанию.
//
Функция ДоступноВыполнениеОбменаНаКлиентеПоРасписанию() Экспорт
	
	Возврат Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.МДЛППрисоединенныеФайлы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиОбмена = НастройкиОбмена(,, Новый Соответствие);
	Если НастройкиОбмена.ОбменНаКлиенте.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПолученияФормОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ПустаяСсылка, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормМДЛППереопределяемый.ПриПолученииФормыДокумента(ПустаяСсылка.Метаданные().Имя, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Уведомление", ПустаяСсылка);
		ВыбраннаяФорма = Метаданные.Обработки.ПанельМаркировкиМДЛП.Формы.ФормаСпискаДокументов;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Уведомление", ПустаяСсылка);
		ВыбраннаяФорма = Метаданные.Обработки.ПанельМаркировкиМДЛП.Формы.ФормаВыбораДокументов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЗакрытьУведомление(Знач ДокументСсылка) Экспорт
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(
		ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка, ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

// Возвращает список возможных уведомлений для связи с основанием.
//
// Параметры:
//  ИмяУведомления - Строка - имя уведомления, возможные значения которого надо получить;
//  Основание - Ссылка - основание уведомления, для которого подбираются уведомления.
//
// Возвращаемое значение:
//  Массив - список подходящих уведомлений.
//
Функция ВозможныеУведомленияПоОснованию(Знач ИмяУведомления, Знач Основание) Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.ВозможныеУведомленияПоОснованию(Метаданные.Документы.Найти(ИмяУведомления), Основание);
	
КонецФункции

// Сохраняет связь уведомления с основанием.
//
// Параметры:
//  Уведомление - ДокументСсылка.Уведомление* - уведомление для которого устанавливается связь.
//  ДокументСсылка - ДокументСсылка - Документ основание.
//
Процедура СвязатьУведомлениеСОснованием(Уведомление, ДокументСсылка) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		УведомлениеОбъект = Уведомление.ПолучитьОбъект();
		
		УведомлениеОбъект.Заблокировать();
		
		УведомлениеОбъект.Основание = ДокументСсылка;
		
		Если УведомлениеОбъект.Проведен Тогда
			УведомлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			УведомлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Уведомление);
		
	КонецПопытки;
	
КонецПроцедуры

// Функция проверяет наличие расхождений между Уведомлением и Основанием.
//
// Параметры:
//  Уведомление - ДокументСсылка.Уведомление - проверяемое уведомление,
//  Основание - ДокументСсылка - проверяемое основание уведомления.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуУведомлениемИОснованием(Уведомление, Основание) Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.ЕстьРасхожденияМеждуУведомлениемИОснованием(Уведомление, Основание);
	
КонецФункции

// Проверяет наличие сообщения в очереди передачи данных МДЛП.
//
// Параметры:
//  Сообщение - СправочникСсылка.МДЛППрисоединенныеФайлы - сообщение очереди передачи данных МДЛП.
//
// Возвращаемое значение:
//  Булево - Истина - сообщение находится в очереди передачи данных МДЛП
//           Ложь   - сообщение отсутствует в очереди передачи данных МДЛП.
//
Функция СообщениеНаходитсяВОчередиПередачиДанныхМДЛП(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА КАК СообщениеНаходитсяВОчередиПередачиДанныхМДЛП
	|ИЗ
	|	РегистрСведений.ОчередьПередачиДанныхМДЛП КАК Очередь
	|ГДЕ
	|	Очередь.Сообщение = (&Сообщение)
	|");
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область РаботаСЧасовымиПоясами

// Возвращает дату, прочитанную из строкового представления, определенного формата даты JSON,
// приведенную к часовому поясу сеанса, учитывая смещение летнего времени.
//
// Параметры:
//  Значение - Строка - строковое представление даты.
//    Примеры:
//     "2020-04-23T13:44:09Z"          - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084Z"      - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09+01:00"     - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084+01:00" - ФорматДатыJSON.ISO
//     "new Date(1587649449084)"       - ФорматДатыJSON.JavaScript
//     "/Date(1587649449084)/"         - ФорматДатыJSON.Microsoft
//  ФорматДаты - ФорматДатыJSON - Определяет различные форматы сериализации/десериализации дат JSON-объектов.
//                                Значение по-умолчанию ФорматДатыJSON.ISO.
//   ISO        - формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ".
//   JavaScript - формат даты JavaScript вида: "new Date(1234656000000)". Указывается количество миллисекунд, прошедших с начала эры Unix.
//   Microsoft  - формат даты Microsoft вида: "/Date(123456000000)/". Указывается количество миллисекунд, прошедших с начала эры Unix.
//
// Возвращаемое значение:
//  ДатаВЧасовомПоясеСеанса - Дата - дата полученная из строкового представления и приведенная к часовому поясу сеанса, учитывая смещение летнего времени.
//
Функция СтрокаВДатуЧасовогоПоясаСеанса(Знач Значение, ФорматДаты = Неопределено) Экспорт
	
	Возврат ИнтеграцияМДЛП.СтрокаВДатуЧасовогоПоясаСеанса(Значение, ФорматДаты);
	
КонецФункции

// Возвращает дату, прочитанную из строкового представления, определенного формата даты JSON,
// приведенную к указанному часовому поясу, учитывая смещение летнего времени.
//
// Параметры:
//  Значение - Строка - строковое представление даты.
//    Примеры:
//     "2020-04-23T13:44:09Z"          - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084Z"      - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09+01:00"     - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084+01:00" - ФорматДатыJSON.ISO
//     "new Date(1587649449084)"       - ФорматДатыJSON.JavaScript
//     "/Date(1587649449084)/"         - ФорматДатыJSON.Microsoft
//  ЧасовойПояс - Строка - идентификатор часового пояса (см. описание функции платформы МестноеВремя глобального контекста).
//  ФорматДаты - ФорматДатыJSON - Определяет различные форматы сериализации/десериализации дат JSON-объектов.
//                                Значение по-умолчанию ФорматДатыJSON.ISO.
//   ISO        - формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ".
//   JavaScript - формат даты JavaScript вида: "new Date(1234656000000)". Указывается количество миллисекунд, прошедших с начала эры Unix.
//   Microsoft  - формат даты Microsoft вида: "/Date(123456000000)/". Указывается количество миллисекунд, прошедших с начала эры Unix.
//
// Возвращаемое значение:
//  ДатаВЧасовомПоясеСеанса - Дата - дата полученная из строкового представления и приведенная к указанному часовому поясу, учитывая смещение летнего времени.
//
Функция СтрокаВДатуЧасовогоПояса(Знач Значение, ЧасовойПояс, ФорматДаты = Неопределено) Экспорт
	
	Возврат ИнтеграцияМДЛП.СтрокаВДатуЧасовогоПояса(Значение, ЧасовойПояс, ФорматДаты);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьСообщениеКПередаче(Сообщение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщения = Сообщение.ТекстСообщения;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения"        , Сообщение.ТипСообщения);
	Реквизиты.Вставить("Операция"            , Сообщение.Операция);
	Реквизиты.Вставить("Документ"            , Сообщение.Документ);
	Реквизиты.Вставить("Описание"            , Сообщение.Описание);
	Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
	Реквизиты.Вставить("ИдентификаторСубъектаОбращения", Сообщение.ИдентификаторСубъектаОбращения);
	Реквизиты.Вставить("СтатусОбработки"     , Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче);
	Реквизиты.Вставить("СообщениеОснование"  , Сообщение.СообщениеОснование);
	Реквизиты.Вставить("ПередачаСведенийЧерезСКЗКМ", Сообщение.ПередачаСведенийЧерезСКЗКМ);
	Реквизиты.Вставить("ОбновитьСостояниеПодтверждения", Сообщение.ОбновитьСостояниеПодтверждения);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус");
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	Если Сообщение.ОбновитьСостояниеПодтверждения Тогда
		
		ДокументОбъект = Реквизиты.Документ.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			// Выполнить блокировку объекта не удалось, операция будет выполнена в следующей итерации.
			ВозвращаемоеЗначение.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать документ %1.'"), Реквизиты.Документ);
			Возврат ВозвращаемоеЗначение;
		КонецПопытки;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ИсходящееСообщение = Справочники.МДЛППрисоединенныеФайлы.ДобавитьЗаписьВПротоколОбмена(ТекстСообщения, Реквизиты);
		
		РегистрыСведений.ОчередьПередачиДанныхМДЛП.ДобавитьСообщениеВОчередь(ИсходящееСообщение.Ссылка, Реквизиты);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Реквизиты.Документ);
		
		Если Сообщение.ОбновитьСостояниеПодтверждения Тогда
			МенеджерОбъекта.ОбновитьСостояниеПодтверждения(ДокументОбъект, Реквизиты.Операция, ИсходящееСообщение.Ссылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче);
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			ДокументОбъект.Разблокировать();
		КонецЕсли;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(Реквизиты.Документ, Реквизиты.Операция);
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		ВозвращаемоеЗначение.НовыйСтатус        = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Реквизиты.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьОчередьПередачиДанных(НастройкиОбмена, СообщенияКПередаче = Неопределено, ПараметрыВыполненияОбмена = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения"         , Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияКПередаче", Новый Массив);
	
	СубъектыОбращения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СубъектыОбращения, ИнтеграцияМДЛПКлиентСервер.СубъектыОбращенияНастроекОбмена(НастройкиОбмена.ОбменНаКлиенте));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СубъектыОбращения, ИнтеграцияМДЛПКлиентСервер.СубъектыОбращенияНастроекОбмена(НастройкиОбмена.ОбменНаСервере));
	
	Если СубъектыОбращения.Количество() = 0 Тогда
		
		Если СообщенияКПередаче <> Неопределено Тогда
			Для Каждого Сообщение Из СообщенияКПередаче Цикл
				СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ИдентификаторСубъектаОбращения = Сообщение.ИдентификаторСубъектаОбращения;
				СтрокаРезультата.Операция               = Сообщение.Операция;
				СтрокаРезультата.Объект                 = Сообщение.Документ;
				СтрокаРезультата.ИсходящееСообщение     = Сообщение.Ссылка;
				СтрокаРезультата.ПодготовленоКПередаче  = Истина;
				СтрокаРезультата.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сообщение в МДЛП не может быть передано.
					            |Для места деятельности организации %1 не настроено подключение.'"),
					Сообщение.ИдентификаторСубъектаОбращения);
				ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			КонецЦикла;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	Если СообщенияКПередаче = Неопределено Тогда
		СообщенияКПередаче = ПолучитьСообщенияКПередаче(СубъектыОбращения, ПараметрыВыполненияОбмена);
	КонецЕсли;
	
	Для Каждого СообщениеКПередаче Из СообщенияКПередаче Цикл
		
		ТранспортныйМодуль = НастройкиОбмена.ОбменНаСервере.Получить(СообщениеКПередаче.ИдентификаторСубъектаОбращения);
		Если Не СообщениеКПередаче.ПередачаСведенийЧерезСКЗКМ И ТранспортныйМодуль <> Неопределено Тогда
			
			Если СообщениеКПередаче.ОбновитьСостояниеПодтверждения Тогда
				Попытка
					ЗаблокироватьДанныеДляРедактирования(СообщениеКПередаче.Ссылка);
				Исключение
					СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
					СтрокаРезультата.ИдентификаторСубъектаОбращения = СообщениеКПередаче.ИдентификаторСубъектаОбращения;
					СтрокаРезультата.Операция              = СообщениеКПередаче.Операция;
					СтрокаРезультата.Объект                = СообщениеКПередаче.Документ;
					СтрокаРезультата.ИсходящееСообщение    = СообщениеКПередаче.Ссылка;
					СтрокаРезультата.ПодготовленоКПередаче = Истина;
					СтрокаРезультата.ТекстОшибки           = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось заблокировать документ %1.'"), СообщениеКПередаче.Документ);
					ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
			РезультатОтправки = ТранспортМДЛП.ОтправитьСообщение(ТранспортныйМодуль, СообщениеКПередаче);
			ВозвращаемоеЗначение.Изменения.Добавить(ОбработатьРезультатОтправкиСообщения(СообщениеКПередаче, РезультатОтправки));
			
		ИначеЕсли СообщениеКПередаче.ПередачаСведенийЧерезСКЗКМ И НастройкиОбмена.РегистраторыВыбытия.Получить(СообщениеКПередаче.ИдентификаторСубъектаОбращения) <> Неопределено Тогда
			
			ДозаполнитьДанныеДляРВ(СообщениеКПередаче);
			ВозвращаемоеЗначение.СообщенияКПередаче.Добавить(СообщениеКПередаче);
			
		ИначеЕсли Не СообщениеКПередаче.ПередачаСведенийЧерезСКЗКМ И НастройкиОбмена.ОбменНаКлиенте.Получить(СообщениеКПередаче.ИдентификаторСубъектаОбращения) <> Неопределено Тогда
			
			ВозвращаемоеЗначение.СообщенияКПередаче.Добавить(СообщениеКПередаче);
			
		Иначе
			
			СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ИдентификаторСубъектаОбращения = СообщениеКПередаче.ИдентификаторСубъектаОбращения;
			СтрокаРезультата.Операция               = СообщениеКПередаче.Операция;
			СтрокаРезультата.Объект                 = СообщениеКПередаче.Документ;
			СтрокаРезультата.ИсходящееСообщение     = СообщениеКПередаче.Ссылка;
			СтрокаРезультата.ПодготовленоКПередаче  = Истина;
			СтрокаРезультата.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сообщение в МДЛП не может быть передано.
				            |Для места деятельности организации %1 не настроено подключение.'"),
				СообщениеКПередаче.ИдентификаторСубъектаОбращения);
			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСообщенияКПередаче(ИдентификаторСубъектаОбращения, ПараметрыВыполненияОбмена = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Очередь.Сообщение                                 КАК Ссылка,
	|	Очередь.Сообщение.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения,
	|	Очередь.Сообщение.Операция                        КАК Операция,
	|	Очередь.Сообщение.ВладелецФайла                   КАК Документ,
	|	Очередь.Сообщение.ХешСумма                        КАК ХешСумма,
	|	Очередь.Сообщение.Размер                          КАК Размер,
	|	Очередь.ОбновитьСостояниеПодтверждения            КАК ОбновитьСостояниеПодтверждения,
	|	Очередь.ПередачаСведенийЧерезСКЗКМ                КАК ПередачаСведенийЧерезСКЗКМ
	|ИЗ
	|	РегистрСведений.ОчередьПередачиДанныхМДЛП КАК Очередь
	|ГДЕ
	|	Очередь.Сообщение.ИдентификаторСубъектаОбращения В (&Идентификатор)
	|");
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторСубъектаОбращения);
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	Если ТипыДокументов <> Неопределено Тогда
		
		// Передаем только те типы документов, которые указаны в параметре ТипыДокументов (если параметр заполнен).
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ТИПЗНАЧЕНИЯ(Очередь.Сообщение.ВладелецФайла) В (&ТипыДокументов)");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
		
	КонецЕсли;
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	Если СписокДокументов <> Неопределено Тогда
		
		// Передаем только те документы, которые указаны в параметре СписокДокументов (если параметр заполнен).
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("Очередь.Сообщение.ВладелецФайла В (&СписокДокументов)");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
	КонецЕсли;
	
	СообщенияКПередачи = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщение = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
		ЗаполнитьЗначенияСвойств(Сообщение, Выборка);
		Сообщение.ТекстСообщения = ТекстСообщенияИзПротокола(Сообщение.Ссылка);
		Сообщение.КодОперации    = Перечисления.ОперацииОбменаМДЛП.КодОперации(Сообщение.Операция);
		Сообщение.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
		СообщенияКПередачи.Добавить(Сообщение);
	КонецЦикла;
	
	Возврат СообщенияКПередачи;
	
КонецФункции

Процедура ЗаблокироватьДокумент(Знач ДокументСсылка, Знач УникальныйИдентификатор) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ДокументСсылка,, УникальныйИдентификатор);
	
КонецПроцедуры

Процедура РазблокироватьДокумент(Знач ДокументСсылка, Знач УникальныйИдентификатор) Экспорт
	
	РазблокироватьДанныеДляРедактирования(ДокументСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач ТекстОшибки, Знач Событие = "", Знач Данные = Неопределено) Экспорт
	
	ЗаписатьСобытиеВЖурналРегистрации(ТекстОшибки, Событие, Данные, УровеньЖурналаРегистрации.Ошибка);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеВЖурналРегистрации(Знач Комментарий, Знач Событие = "", Знач Данные = Неопределено, Знач Уровень = Неопределено) Экспорт
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияМДЛП.СобытиеЖурналаРегистрации(Событие),
		Уровень,
		,
		Данные,
		Комментарий);
	
КонецПроцедуры

Функция ДокументыПоОснованию(Знач ДокументОснование) Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка  КАК Ссылка,
	|	Таблица.Дата    КАК Дата,
	|	Статусы.Статус  КАК Статус
	|ИЗ
	|	#Таблица КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.Основание = &ДокументОснование
	|	И НЕ Таблица.ПометкаУдаления
	|";
	
	ЧастиЗапроса = Новый Массив;
	ИменаДокументов = Новый Соответствие;
	ВозвращаемоеЗначение = Новый Структура;
	ТипОснования = ТипЗнч(ДокументОснование);
	Для Каждого ТипДокумента Из Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.Типы() Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		ВозвращаемоеЗначение.Вставить(МетаданныеДокумента.Имя, Новый Массив);
		Если МетаданныеДокумента.Реквизиты.Основание.Тип.СодержитТип(ТипОснования) Тогда
			ЧастиЗапроса.Добавить(СтрЗаменить(ШаблонЗапроса, "#Таблица", МетаданныеДокумента.ПолноеИмя()));
			ИменаДокументов.Вставить(ТипДокумента, МетаданныеДокумента.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Или ЧастиЗапроса.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяДокумента = ИменаДокументов.Получить(ТипЗнч(Выборка.Ссылка));
		
		Значение = Новый Структура;
		Значение.Вставить("Ссылка", Выборка.Ссылка);
		Значение.Вставить("Статус", Выборка.Статус);
		Значение.Вставить("Дата",   Выборка.Дата);
		
		ВозвращаемоеЗначение[ИмяДокумента].Добавить(Значение);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НастройкиОбмена(Организация = Неопределено, МестоДеятельности = Неопределено, ДатыПоследнегоЗапуска = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ОбменНаКлиенте", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("РегистраторыВыбытия", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("БезНастроек",    Новый Массив);
	
	Отбор = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Организация));
	КонецЕсли;
	Если ЗначениеЗаполнено(МестоДеятельности) Тогда
		Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", МестоДеятельности));
	КонецЕсли;
	
	ТранспортныеМодули = ТранспортМДЛП.ДоступныеТранспортныеМодули(Отбор);
	Если ЗначениеЗаполнено(Организация) И Не ЗначениеЗаполнено(ТранспортныеМодули) Тогда
		ВозвращаемоеЗначение.БезНастроек.Добавить(Новый Структура("Организация, МестоДеятельности", Организация, МестоДеятельности));
	Иначе
		
		Для Каждого ТранспортныйМодуль Из ТранспортныеМодули Цикл
			
			Если ТранспортныйМодуль.ОбменНаСервере Тогда
				ВозвращаемоеЗначение.ОбменНаСервере.Вставить(ТранспортныйМодуль.ИдентификаторСубъектаОбращения, ТранспортныйМодуль);
			Иначе
				ВозвращаемоеЗначение.ОбменНаКлиенте.Вставить(ТранспортныйМодуль.ИдентификаторСубъектаОбращения, ТранспортныйМодуль);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ТранспортРВ") Тогда
		МодульТранспортМДЛПРВВызовСервера = ОбщегоНазначения.ОбщийМодуль("ТранспортМДЛПРВВызовСервера");
		ТранспортныеМодули = МодульТранспортМДЛПРВВызовСервера.ДоступныеТранспортныеМодули(Отбор);
		Для Каждого ТранспортныйМодуль Из ТранспортныеМодули Цикл
			ВозвращаемоеЗначение.РегистраторыВыбытия.Вставить(ТранспортныйМодуль.ИдентификаторСубъектаОбращения, ТранспортныйМодуль);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ДозаполнитьДанныеДляРВ(СообщениеКПередаче)
	
	ТекстЗапроса = СтрЗаменить("
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерКИЗ        КАК НомерУпаковки,
	|	НомераУпаковок.ШтрихкодBase64  КАК ШтрихкодBase64
	|ИЗ
	|	#ДокументНомераУпаковок КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|", "#ДокументНомераУпаковок", СообщениеКПередаче.Документ.Метаданные().ПолноеИмя() + ".НомераУпаковок");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", СообщениеКПередаче.Документ);
	
	ТаблицаНомеров = Запрос.Выполнить().Выгрузить();
	
	РеквизитыДокумента = ТранспортМДЛПКлиентСервер.ПреобразоватьJSONВЗначение(СообщениеКПередаче.ТекстСообщения);
	Для Каждого Марка Из РеквизитыДокумента["Марки"] Цикл
		Строка = ТаблицаНомеров.Найти(Марка["НомерКИЗ"], "НомерУпаковки");
		Марка.Вставить("ШтрихкодBase64", Строка.ШтрихкодBase64);
	КонецЦикла;
	
	СообщениеКПередаче.ТекстСообщения = ТранспортМДЛПКлиентСервер.ПреобразоватьЗначениеВJSON(РеквизитыДокумента)
	
КонецПроцедуры

Функция ПолучитьОписанияРеквизитовДляВвода(Ссылка, ИменаРеквизитов, ИгнорироватьЗаполненные = Истина) Экспорт
	
	ОписанияРеквизитовДляВвода = Новый Структура;
	
	Если ИгнорироватьЗаполненные Тогда
		ЗначенияРеквизитовДляВвода = ПолучитьНезаполненныеРеквизитыОбъекта(Ссылка, ИменаРеквизитов);
	Иначе
		ЗначенияРеквизитовДляВвода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовДляВвода) Тогда
		Возврат ОписанияРеквизитовДляВвода;
	КонецЕсли;
	
	Реквизиты = Ссылка.Метаданные().Реквизиты;
	
	ИменаСвойствОписанияРеквизитов = "ЗначениеПоУмолчанию, ОписаниеТипа, Наименование";
	
	Для Каждого КлючИЗначение Из ЗначенияРеквизитовДляВвода Цикл
		
		МатаданныеРеквизита = Реквизиты[КлючИЗначение.Ключ];
		
		ОписаниеРеквизита = Новый Структура(ИменаСвойствОписанияРеквизитов);
		ОписаниеРеквизита.ЗначениеПоУмолчанию = КлючИЗначение.Значение;
		ОписаниеРеквизита.ОписаниеТипа        = МатаданныеРеквизита.Тип;
		ОписаниеРеквизита.Наименование        = МатаданныеРеквизита.Синоним;
		ОписанияРеквизитовДляВвода.Вставить(КлючИЗначение.Ключ, ОписаниеРеквизита);
		
	КонецЦикла;
	
	Возврат ОписанияРеквизитовДляВвода;
	
КонецФункции

Функция ПолучитьНезаполненныеРеквизитыОбъекта(Ссылка, ИменаРеквизитов)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
	МассивИменРеквизитов = СтрРазделить(ИменаРеквизитов, ", ", Ложь);
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Если ЗначениеЗаполнено(ЗначенияРеквизитов[ИмяРеквизита]) Тогда
			ЗначенияРеквизитов.Удалить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ОтключитьТребованиеСозданияРаспоряженияНаОформление(Основание, ПричинаОтключения) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовМДЛП.ОтключитьТребованиеСозданияРаспоряженияНаОформление(Основание, ПричинаОтключения);
	
КонецФункции

Функция ВключитьТребованиеСозданияРаспоряженияНаОформление(Основание) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовМДЛП.ВключитьТребованиеСозданияРаспоряженияНаОформление(Основание);
	
КонецФункции

Функция ПолучитьГраницуЗагрузкиОстатковПотребительскихУпаковок(ИдентификаторМестаДеятельности) Экспорт
	
	Границы = Константы.ГраницаЗагрузкиОстатковПотребительскихУпаковокМДЛП.Получить().Получить();
	Если Границы <> Неопределено Тогда
		Граница = Границы.Получить(ИдентификаторМестаДеятельности);
	Иначе
		Граница = Неопределено;
	КонецЕсли;
	
	Возврат Граница;
	
КонецФункции

#КонецОбласти
