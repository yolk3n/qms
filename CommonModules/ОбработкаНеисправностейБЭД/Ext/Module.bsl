
////////////////////////////////////////////////////////////////////////////////
// ОбработкаНеисправностейБЭД: механизм обработки неисправностей.
//
// Общий принцип использования подсистемы:
// 1. Инициализация контекста в начале выполнения операции - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики,
//    ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики.
// 2. Передача контекста по стеку вызовов через параметры методов.
// 3. При возникновении ошибки, добавление ее в контекст - см. ОбработкаНеисправностейБЭД.ДобавитьОшибку,
//    ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку.
//    Состав видов ошибок можно расширить собственными строковыми константами.
//    Пример: "ОшибкаИнтернетСоединения" или ИмяМодуля.ВидОшибкиОшибкаИнтернетСоединения() - возвращает строковый
//    идентификатор вида ошибки.
// 4. Обработка коллекции накопленных ошибок после выполнения операции -
//    см. ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки.
// 5. Обработка собственных видов ошибок происходит в переопределяемой части процедуры
//    ОбработкаНеисправностейБЭДКлиент.ПриОпределенииПараметровВидаОшибки,
//    см. пример в области ВидыОшибок общего модуля ОбработкаНеисправностейБЭДКлиентСервер.
//
// Пример:
// КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
// HTTPСоединение = Новый HTTPСоединение("1c-edo.ru");
// HTTPЗапрос = Новый HTTPЗапрос;
// Попытка
//      Ответ = HTTPСоединение.Получить(HTTPЗапрос);
// Исключение
//      Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Получение маркера'"),
//          ОбменСКонтрагентамиСлужебныйКлиентСервер.ВидОшибкиИнтернетСоединение(),
//          ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
//          НСтр("ru = 'Произошла ошибка при подключении'"));
//          ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка);
// КонецПопытки;
// ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РегистрацияОшибок

// Создает структуру, содержащую данные для диагностики.
// Используется в процедурах: ОбработкаНеисправностейБЭД.ДобавитьОшибку,
// ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку, ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки.
// В структуру нельзя помещать мутабельные объекты, т.к. она может передаваться между клиентом и сервером.
// 
// Возвращаемое значение:
//   Структура:
//      * ЗаголовокОперации   - Строка - заголовок, который будет выведен в форму мастера диагностики и в форму
//                                               вывода ошибок.
//      * Диагностика         - Структура:
//         ** Ошибки          - Массив из см. ОбработкаНеисправностейБЭД.НоваяОшибка - ошибки,
//                                               возникшие в процессе выполнения операции.
//      * ДополнительныеСвойства      - Структура - коллекция дополнительных свойств.
Функция НовыйКонтекстДиагностики() Экспорт
	
	Контекст = ОбработкаНеисправностейБЭДКлиентСервер.НовыйКонтекстДиагностики();
	Контекст.Вставить("ДатаНачалаОперации", ТекущаяДатаСеанса());
	
	ОбработкаНеисправностейБЭДСобытия.ПриИнициализацииКонтекстаДиагностики(Контекст);
		
	Возврат Контекст;
	
КонецФункции

// Инициализирует структуру, содержащую информацию об ошибке. Используется в 
// ОбработкаНеисправностейБЭД.ДобавитьОшибку,
// ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку.
//
// Параметры:
//  ВидОперации                  - Строка - наименование операции, во время выполнения которой возникла ошибка
//  ВидОшибки                    - см. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
//  ПодробноеПредставлениеОшибки - Строка - подробное представление ошибки
//  КраткоеПредставлениеОшибки   - Строка - краткое представление ошибки
//  ДополнительныеПараметры      - Структура:
//     * Сертификат              - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                                 по которому произошла ошибка.
//     * Подсистема              - Строка - см._ОбщегоНазначенияБЭД.ПодсистемыБЭД
//     * СсылкаНаОбъект          - ЛюбаяСсылка - объект, по которому возникла ошибка.
//     * ДополнительныеДанные    - Произвольный - произвольные данные.
// 
// Возвращаемое значение:
//  Структура: 
//    * ВидОперации                  - Строка - наименование операции, во время выполнения которой возникла ошибка
//    * ВидОшибки                    - см. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
//    * ПодробноеПредставлениеОшибки - Строка - подробное представление ошибки
//    * КраткоеПредставлениеОшибки   - Строка - краткое представление ошибки
//    * Сертификат              - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                                 по которому произошла ошибка.
//    * Подсистема              - Строка - см._ОбщегоНазначенияБЭД.ПодсистемыБЭД
//    * СсылкаНаОбъект          - ЛюбаяСсылка - объект, по которому возникла ошибка.
//    * ДополнительныеДанные    - Произвольный - произвольные данные.
Функция НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибка = ОбработкаНеисправностейБЭДКлиентСервер.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставлениеОшибки,
		КраткоеПредставлениеОшибки, ДополнительныеПараметры);
	
	ОбработкаНеисправностейБЭДСобытия.ПриИнициализацииОшибки(Ошибка);
	
	Возврат Ошибка;
	
КонецФункции

// Добавляет ошибку в контекст диагностики.
//
// Параметры:
//  КонтекстДиагностики   - см. НовыйКонтекстДиагностики
//  Ошибка                -  см. ОбработкаНеисправностейБЭД.НоваяОшибка
//  Подсистема                   - Строка - см. ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД
//  ЗаписыватьВЖурналРегистрации - Булево - признак записи информации об ошибке в журнал регистрации.
Процедура ДобавитьОшибку(КонтекстДиагностики, Ошибка, Подсистема, ЗаписыватьВЖурналРегистрации = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтекстДиагностики) Тогда
		СообщатьОбОшибке = Истина;
		КонтекстДиагностики = НовыйКонтекстДиагностики();
	Иначе 
		СообщатьОбОшибке = Ложь;
	КонецЕсли;
	
	ДанныеОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ЗаписыватьВЖурналРегистрации, Подсистема, СообщатьОбОшибке);
		
	КонтекстДиагностики.ДатаОкончанияОперации = ТекущаяДатаСеанса();
	
	ОбработкаНеисправностейБЭДСобытия.ПриДобавленииОшибки(КонтекстДиагностики, Ошибка);
	
	Если ДанныеОшибки.СообщениеДляПользователя <> "" Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеОшибки.СообщениеДляПользователя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает исключительные ситуации. Записывает текст ошибки в журнал регистрации и выводит сообщение пользователю,
// если заполнен параметр ТекстОшибкиДляПользователя.
//
// Параметры:
//  ВидОперации                      - Строка - вид операции при которой возникло исключение.
//  Подсистема                       - См. ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации.Подсистема .
//  ТекстОшибкиДляЖурналаРегистрации - Строка
//  ТекстОшибкиДляПользователя       - Строка
//  СсылкаНаОбъект       - ДокументСсылка, СправочникСсылка - объект с которым связано данное событие.
Процедура ОбработатьОшибку(ВидОперации, Подсистема, ТекстОшибкиДляЖурналаРегистрации, ТекстОшибкиДляПользователя = "",
	СсылкаНаОбъект = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ТекстОшибкиДляПользователя) Тогда
		
		ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);

		Если ЭтоПолноправныйПользователь И ЗначениеЗаполнено(ТекстОшибкиДляПользователя) И ЗначениеЗаполнено(ТекстОшибкиДляЖурналаРегистрации)
			И ТекстОшибкиДляЖурналаРегистрации <> ТекстОшибкиДляПользователя Тогда

			ТекстОшибкиДляПользователя = ТекстОшибкиДляПользователя + Символы.ПС
				+ НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;

		ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиДляПользователя, СсылкаНаОбъект);
	КонецЕсли;
	
	ЗаписатьОшибкуВЖурналРегистрации(ВидОперации, ТекстОшибкиДляЖурналаРегистрации, Подсистема, СсылкаНаОбъект);

КонецПроцедуры

// Выводит сообщение о нарушении прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = ОбработкаНеисправностейБЭДКлиентСервер.ТекстСообщенияОНарушенииПравДоступа();
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - Строка - код ошибки;
//  СтороннееОписаниеОшибки - Строка - описание ошибки, переданное другой системой.
//
// Возвращаемое значение:
//  Строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибкеДругойСистемы(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонСообщения = НСтр("ru = 'Код ошибки %1. %2'");
	
	СообщенияОшибок = Новый Соответствие;
	ИнициализацияСообщенийОшибок(СообщенияОшибок);
	
	СообщениеОбОшибке = СообщенияОшибок.Получить(КодОшибки);
	Если СообщениеОбОшибке = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = СтороннееОписаниеОшибки;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КодОшибки, СообщениеОбОшибке);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает представление данных для отображения в форме исправления ошибок.
// 
// Параметры:
// 	ОбработчикПолученияПредставлений - Строка - имя метода для получения представления в
// 	               формате ИмяОбщегоМодуля.ИмяМетода, метод должен возвращать значение, описанное
// 	               в возвращаемом значении данного метода.
// 	Данные - Массив из Произвольный
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//   * Ключ - Произвольный - элемент из параметра Данные
//   * Значение - Структура:
//      ** Ссылка - Произвольный - значение, которое будет открыто при двойном клике на
//                  строку, ЛюбаяСсылка, РегистрСведенийКлючЗаписи, и т.д.
//      ** Представление - Строка - представление элемента данных в списке 
Функция ПредставлениеДанныхВСписке(ОбработчикПолученияПредставлений, Данные) Экспорт
	
	ПараметрыВычисления = Новый Структура;
	ПараметрыВычисления.Вставить("Данные", Данные);
	ПредставлениеДанных = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
		ОбработчикПолученияПредставлений + "(Параметры.Данные)",
		ПараметрыВычисления);
	
	Возврат ПредставлениеДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализацияСообщенийОшибок(СообщенияОшибок)
	
	// Общие коды ошибок
	СообщенияОшибок.Вставить("001", );
	СообщенияОшибок.Вставить("002", );
	СообщенияОшибок.Вставить("003", );
	СообщенияОшибок.Вставить("004", );
	СообщенияОшибок.Вставить("005", );
	СообщенияОшибок.Вставить("006", НСтр("ru = 'Невозможно извлечь файлы из архива. Путь к файлам архива должен быть короче 256 символов.
										|Возможные способы устранения ошибки:
										| - в настройках операционной системы, в переменных среды, изменить путь к временным файлам;'"));
	СообщенияОшибок.Вставить("007", НСтр("ru = 'Невозможно записать файл. Путь к файлу должен быть короче 256 символов.
										|Возможные способы устранения ошибки:
										| - в настройках операционной системы, в переменных среды, изменить путь к временным файлам;'"));
	// Коды ошибок 1С
	СообщенияОшибок.Вставить("0", НСтр("ru = 'Одна из имеющихся в запросе подписей принадлежит неизвестному лицу.'"));
	СообщенияОшибок.Вставить("2", НСтр("ru = 'Одна из подписей неверна'"));
	СообщенияОшибок.Вставить("3", НСтр("ru = 'Должны быть представлены две разные подписи.'"));
	СообщенияОшибок.Вставить("4", НСтр("ru = 'Неверный тип содержимого: двоичный.'"));
	СообщенияОшибок.Вставить("5", НСтр("ru = 'Должна быть предоставлена хотя бы одна подпись.'"));
	СообщенияОшибок.Вставить("6", НСтр("ru = 'Не все подписи отличаются.'"));
	СообщенияОшибок.Вставить("7", НСтр("ru = 'Все подписи не обеспечивают уровень полномочий, необходимых для операции.'"));
	СообщенияОшибок.Вставить("8", НСтр("ru = 'Один из подписантов неизвестен.'"));
	СообщенияОшибок.Вставить("9", НСтр("ru = 'Содержимое типа транспортного сообщения является неправильным, ожидается: application/xml.'"));
	СообщенияОшибок.Вставить("10", НСтр("ru = 'Содержимое типа делового сообщения неверно, ожидается: application/xml.'"));
	СообщенияОшибок.Вставить("11", НСтр("ru = 'Не все подписи соответствуют одному и тому же клиенту.'"));
	СообщенияОшибок.Вставить("13", НСтр("ru = 'HTTP запрос URL неверный. Поддерживаются только запросы ресурсов и состояния.'"));
	СообщенияОшибок.Вставить("18", НСтр("ru = 'Неверная дата документа.'"));
	СообщенияОшибок.Вставить("21", НСтр("ru = 'Неразрешенная инструкция.'"));
	
	СообщенияОшибок.Вставить("100", НСтр("ru = 'Не удалось создать менеджер криптографии на компьютере.'"));
	СообщенияОшибок.Вставить("101", НСтр("ru = 'Сертификат не найден в хранилище сертификатов на компьютере.'"));
	СообщенияОшибок.Вставить("102", НСтр("ru = 'Сертификат не действителен.'"));
	СообщенияОшибок.Вставить("103", НСтр("ru = 'Не удалось выполнить операции шифрования/расшифровки на компьютере.'"));
	СообщенияОшибок.Вставить("104", НСтр("ru = 'Не удалось выполнить операции формирования/проверки ЭП на компьютере.'"));
	СообщенияОшибок.Вставить("105", НСтр("ru = 'Нет доступных сертификатов в хранилище сертификатов на компьютере.'"));
	
	СообщенияОшибок.Вставить("110", НСтр("ru = 'Не удалось создать менеджер криптографии на сервере.'"));
	СообщенияОшибок.Вставить("111", НСтр("ru = 'Сертификат не найден в хранилище сертификатов на сервере.'"));
	СообщенияОшибок.Вставить("112", НСтр("ru = 'Сертификат не действителен.'"));
	СообщенияОшибок.Вставить("113", НСтр("ru = 'Не удалось выполнить операции шифрования/расшифровки на сервере.'"));
	СообщенияОшибок.Вставить("114", НСтр("ru = 'Не удалось выполнить операции формирования/проверки ЭП на сервере.'"));
	СообщенияОшибок.Вставить("115", НСтр("ru = 'Нет доступных сертификатов в хранилище сертификатов на сервере.'"));
	
	СообщенияОшибок.Вставить("106", НСтр("ru = 'Версия платформы 1С ниже ""8.2.17"".'"));
	СообщенияОшибок.Вставить("107", НСтр("ru = 'Не удалось создать каталоги обмена.'"));
	
	СообщенияОшибок.Вставить("121", НСтр("ru = 'Не удалось соединиться с FTP сервером.'"));
	СообщенияОшибок.Вставить("122", НСтр("ru = 'Невозможно создать каталог, так как на FTP ресурсе существует файл с таким именем.'"));
	СообщенияОшибок.Вставить("123", НСтр("ru = 'Невозможно создать каталог.'"));
	СообщенияОшибок.Вставить("124", НСтр("ru = 'Невозможно открыть каталог.'"));
	СообщенияОшибок.Вставить("125", НСтр("ru = 'Произошла ошибка при поиске файлов на FTP ресурсе.'"));
	СообщенияОшибок.Вставить("126", НСтр("ru = 'Различаются данные записанного, а затем прочитанного тестового файла в каталоге.'"));
	СообщенияОшибок.Вставить("127", НСтр("ru = 'Не удалось записать файл в каталог.'"));
	СообщенияОшибок.Вставить("128", НСтр("ru = 'Не удалось прочитать файл в каталоге.'"));
	СообщенияОшибок.Вставить("129", НСтр("ru = 'Не удалось удалить файл.'"));
	
	// Коды ошибок оператора Такском.
	// Метод CertificateLogin: идентификация и авторизация.
	// Синхронный режим без обращения к БД.
	СообщенияОшибок.Вставить("2501", ); // Не указан идентификатор вендора (название параметра?) 400 0501.
	СообщенияОшибок.Вставить("3109", ); // Не указан сертификат 403 3100.
	СообщенияОшибок.Вставить("3107", ); // Некорректное тело сертификата 403 3107.
	СообщенияОшибок.Вставить("3101", ); // Сертификат просрочен 403 3101.
	СообщенияОшибок.Вставить("3102", ); // Для указанного сертификата не удалось построить цепочку доверия 403 3102.
	
	// Синхронный режим с обращением в БД.
	СообщенияОшибок.Вставить("1301", ); // Вендор с указанным идентификатором не прошел авторизацию 401 1300.
	СообщенияОшибок.Вставить("3103", НСтр("ru = 'Сертификат не привязан к ID Такском. Необходимо привязать сертификат в ручную на Админ.Такском.'")); // Сертификат не связан ни с одним абонентом Такском 403 3103
	СообщенияОшибок.Вставить("3104", ); // Сертификат связан с несколькими абонентами, но не указан идентификатор абонента (TaxcomID) 403 3104
	СообщенияОшибок.Вставить("3105", ); // Сертификат связан с несколькими абонентами, но указанный идентификатор абонента (TaxcomID) имеет неправильный формат 403 3105
	СообщенияОшибок.Вставить("3106", ); // Сертификат связан с несколькими абонентами, но указанный идентификатор абонента (TaxcomID) не связан ни с одним абонентом Такском 403 3106
	СообщенияОшибок.Вставить("1102", ); // Абоненту запрещен доступ к API 401 1100.
	СообщенияОшибок.Вставить("1101", ); // Доступ для данного абонента заблокирован 401 1101.
	СообщенияОшибок.Вставить("3108", ); // Сертификат отозван (в будущем) 403 3108.
	
	// Метод SendMessage: загрузка транспортных контейнеров
	// Синхронный режим без обращения к БД.
	СообщенияОшибок.Вставить("1201", ); // Истек 5-ти минутный срок действия токена (требуется повторная авторизация) 401 1200
	СообщенияОшибок.Вставить("2118", ); // Размер отправляемого контейнера не соответствует допустимому диапазону от 0 до (цифра!) 400 0100
	СообщенияОшибок.Вставить("2107", ); // Отправляемый контейнер не является ZIP-архивом 400 0107
	СообщенияОшибок.Вставить("2108", ); // В контейнере отсутствует необходимый файл meta.xml 400 0108
	СообщенияОшибок.Вставить("2109", ); // Файл meta.xml не является XML-файлом (стандарты?) 400 0109
	СообщенияОшибок.Вставить("2111", ); // Структура файла meta.xml не соответствует принятой схеме 400 0111
	СообщенияОшибок.Вставить("2101", ); // В файле meta.xml не указан корректный идентификатор документооборота (DocFlowID) 400 0101
	СообщенияОшибок.Вставить("2102", ); // В отправляемом контейнере обнаружены файлы, связанные более чем с одним документооборотом 400 0102
	СообщенияОшибок.Вставить("2113", ); // В данном документообороте возможна отправка только одного файла 400 0113
	СообщенияОшибок.Вставить("2103", ); // В файле meta.xml отсутствует код регламента (ReglamentCode) 400 0103
	СообщенияОшибок.Вставить("2114", ); // В файле meta.xml указан некорректный код регламента (ReglamentCode) 400 0114
	СообщенияОшибок.Вставить("2104", ); // В файле meta.xml отсутствует код транзакции (TransactionCode) 400 0104
	СообщенияОшибок.Вставить("2303", ); // Транзакция с кодом <TransactionCode> недопустима в документообороте < ReglamentCode > 400 0300
	СообщенияОшибок.Вставить("3108", ); // Файл <имя файла>, указанный в meta.xml, не найден в отправляемом контейнере 400 0105
	СообщенияОшибок.Вставить("0110", ); // Файл card.xml не является XML-файлом 400 0110
	СообщенияОшибок.Вставить("0112", ); // Структура файла card.xml не соответствует принятой схеме 400 0112
	СообщенияОшибок.Вставить("0106", НСтр("ru = 'В соглашении указан идентификатор организации некорректного формата.'")); // Неверный формат идентификатора отправителя (название параметра?) в файле card.xml 400 0106
	СообщенияОшибок.Вставить("0115", ); // Неверный формат идентификатора получателя (название параметра?) в файле card.xml 400 0115
	
	// Синхронный режим с обращением к БД
	СообщенияОшибок.Вставить("0201", ); // Идентификатор отправителя (название параметра?) соответствует учетной записи 400 0201
	СообщенияОшибок.Вставить("0401", ); // Документооборот с указанным идентификатором уже зарегистрирован (DocFlowID) 400 0401
	СообщенияОшибок.Вставить("0402", ); // Документооборот с указанным идентификатором не зарегистрирован (DocFlowID) 400 0402
	СообщенияОшибок.Вставить("0301", ); // Данная транзакция <код транзакции> уже была осуществлена для данного документооборота < DocFlowID > 400 0301
	
	// Асинхронный режим
	СообщенияОшибок.Вставить("0202", НСтр("ru = 'В соглашении указан идентификатор контрагента не зарегистрированный в Такском.'")); // Получатель с указанным идентификатором не зарегистрирован 0202
	СообщенияОшибок.Вставить("0203", ); // Получатель с указанным идентификатором не является контрагентом отправителя 0203
	СообщенияОшибок.Вставить("3200", ); // Документ не может быть отправлен в связи с ограничениями тарификации 3200
	
	// Метод GetMessageList: получение входящих транспортных контейнеров
	// Синхронный режим без обращения к БД.
	СообщенияОшибок.Вставить("0503", ); // Отсутствует обязательный параметр «метка времени (название параметра)» 400 0503
	СообщенияОшибок.Вставить("0504", ); // Некорректный формат метки времени 400 0504
	
	// Метод GetMessage: выгрузка входящих транспортных контейнеров
	// Синхронный режим без обращения к БД.
	СообщенияОшибок.Вставить("0505", ); // Отсутствует обязательный параметр идентификатор контейнера (документооборота) 400 0505
	СообщенияОшибок.Вставить("0502", ); // Неправильный формат идентификатора документооборота 400 0502
	
	// Синхронный режим с обращением к БД
	СообщенияОшибок.Вставить("4100", ); // Сообщение с данным <DocFlowID> идентификатором документооборота не найдено 404 4100
	
	// Общие ошибки сервера Такском
	СообщенияОшибок.Вставить("5101", ); // Внутренняя ошибка сервера 500 0000
	
КонецПроцедуры

Функция АрхивСИнформациейДляТехПоддержки(КонтекстДиагностики, ТехническаяИнформация) Экспорт
	
	Отбор = ОбработкаНеисправностейБЭДКлиентСервер.ОтборЖурналаРегистрации(КонтекстДиагностики);
	
	ФайлыДляТехподдержки = Новый Массив;
	
	Если Отбор <> Неопределено Тогда
		Если Отбор.ДатаНачала = Отбор.ДатаОкончания Тогда
			Отбор.ДатаОкончания = Отбор.ДатаОкончания + 1;
		КонецЕсли;
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ИмяФайлаЖурналаРегистрации = ВременныйКаталог + "EventLog.xml";
		УстановитьПривилегированныйРежим(Истина);
		ВыгрузитьЖурналРегистрации(ИмяФайлаЖурналаРегистрации, Отбор);
		УстановитьПривилегированныйРежим(Ложь);
		ФайлыДляТехподдержки.Добавить(ИмяФайлаЖурналаРегистрации);
	КонецЕсли;
	
	ИмяФайлаДополнительнаяИнформация = ВременныйКаталог + "Info.txt";
	ФайлыДляТехподдержки.Добавить(ИмяФайлаДополнительнаяИнформация);
	
	Текст = "";
	
	ОбработкаНеисправностейБЭДСобытия.ПриФормированииФайлаСИнформациейДляТехподдержки(Текст, ТехническаяИнформация);
	
	ДвоичныеДанныеДляТехподдержки = Новый Массив;
	ОбработкаНеисправностейБЭДСобытия.ПриФормированииФайловДляТехподдержки(ДвоичныеДанныеДляТехподдержки, КонтекстДиагностики);
	
	Для Каждого ОписаниеФайла Из ДвоичныеДанныеДляТехподдержки Цикл
		ОписаниеИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.ИмяФайла);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ОписаниеИмениФайла.Расширение);
		ОписаниеФайла.ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ФайлыДляТехподдержки.Добавить(ИмяВременногоФайла);
	КонецЦикла;
	
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст, ТехническаяИнформация);
	
	МассивПредставленийОшибок = Новый Массив;
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	Для каждого Ошибка Из Ошибки Цикл
		МассивПредставленийОшибок.Добавить(СтрШаблон(НСтр("ru = 'Вид операции: %1'"), Ошибка.ВидОперации));
		МассивПредставленийОшибок.Добавить(СтрШаблон(НСтр("ru = 'Краткое представление ошибки: %1'"),
			Ошибка.КраткоеПредставлениеОшибки));
		МассивПредставленийОшибок.Добавить(СтрШаблон(НСтр("ru = 'Подробное представление ошибки: %1'"),
			Ошибка.ПодробноеПредставлениеОшибки));
		МассивПредставленийОшибок.Добавить(Символы.ПС);
	КонецЦикла;
	
	Текст = Текст + Символы.ПС + НСтр("ru = 'Ошибки:'")
		+ Символы.ПС + СтрСоединить(МассивПредставленийОшибок, Символы.ПС);
	
	РаботаСФайламиБЭД.ЗаписатьТекстВФайл(Текст, ИмяФайлаДополнительнаяИнформация);
	
	ФайлыАрхива = Новый Массив;
	Для каждого ФайлДляТехподдержки Из ФайлыДляТехподдержки Цикл
		ФайлыАрхива.Добавить(ФайлДляТехподдержки);
	КонецЦикла;
	
	ДвоичныеДанныеАрхива = РаботаСФайламиБЭД.СформироватьАрхивФайлов(ФайлыАрхива);
	
	Для каждого ФайлДляТехподдержки Из ФайлыДляТехподдержки Цикл
		УдалитьФайлы(ФайлДляТехподдержки);
	КонецЦикла;
	
	Возврат ДвоичныеДанныеАрхива;
	
КонецФункции

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
//  ВидОперации - Строка - вид операции при которой возникло исключение.
//  ПодробныйТекстОшибки - Строка - описание ошибки.
//  Подсистема           - Строка - см._ОбщегоНазначенияБЭД.ПодсистемыБЭД
//  СсылкаНаОбъект       - ДокументСсылка, СправочникСсылка - объект с которым связано данное событие.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач ВидОперации, ПодробныйТекстОшибки, Подсистема,
	СсылкаНаОбъект = Неопределено)
	
	Если Прав(ВидОперации, 1) <> "." Тогда
		ВидОперации = ВидОперации + ".";
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Выполнение операции: %1
		|%2'"), ВидОперации, ПодробныйТекстОшибки);
	
	ОбъектМетаданных = Неопределено;
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбъектМетаданных = СсылкаНаОбъект.Метаданные();
	КонецЕсли;
	
	ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
	ПараметрыЗаписи.ОбъектМетаданных = ОбъектМетаданных;
	ПараметрыЗаписи.Данные = СсылкаНаОбъект;
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(
		ТекстОшибки, Подсистема,, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти
