
#Область СлужебныйПрограммныйИнтерфейс

// Заполнить структуру операции
// 
// Возвращаемое значение:
//  Структура - Данные операции принтеры этикеток:
// * Результат - Булево.
// * ТекстОшибки - Строка.
// * ПакетыДляВыгрузки - Массив из ЧтениеXML.
Функция ДанныеОперацииПринтерыЭтикеток() Экспорт
	
	ДанныеОперации = Новый Структура();
	ДанныеОперации.Вставить("Результат", Истина);
	ДанныеОперации.Вставить("ТекстОшибки");
	ДанныеОперации.Вставить("ПакетыДляВыгрузки");
	Возврат ДанныеОперации;
	
КонецФункции 

// Подготовить данные операции.
// 
// Параметры:
//  ПараметрыПодключения - Структура -Параметры подключения.
//  Команда - Строка - Выполняемая команда.
//  ПараметрыОперации - Структура - Параметры операции.
// 
// Возвращаемое значение:
//  см. ОборудованиеПринтерыЭтикетокВызовСервера.ДанныеОперацииПринтерыЭтикеток.
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт
	
	Если Команда = "PrintLabels" Тогда
		
		ДанныеОперации = ДанныеОперацииПринтерыЭтикеток();
		МассивЭтикеток = ПараметрыОперации.ДанныеДляПечати;
		ШаблонЭтикетки = ПараметрыОперации.ОписаниеЭтикеткиВXML;
		
		Если МассивЭтикеток.Количество() = 0 Тогда
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = НСтр("ru='Нет данных для печати.'");
			Возврат ДанныеОперации;
		КонецЕсли;
		
		ТекстОшибки = "";
		ОписаниеЭтикеткиВСтруктуре = Неопределено;
		Если НЕ ПолучитьОписаниеМакета(ШаблонЭтикетки, ТекстОшибки, ОписаниеЭтикеткиВСтруктуре) Тогда
			ДанныеОперации.Результат = Ложь;
			ДанныеОперации.ТекстОшибки = ТекстОшибки;
			Возврат ДанныеОперации;
		КонецЕсли;
		
		РазмерПакета = РазмерПакетаПоУмолчанию();
		ДанныеОперации.ПакетыДляВыгрузки = ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, ОписаниеЭтикеткиВСтруктуре);
		
		Возврат ДанныеОперации;
	КонецЕсли
	
КонецФункции

// Обработать данные операции.
// 
// Параметры:
//  ПараметрыПодключения - Структура - Параметры подключения.
//  Команда - Строка - Команда.
//  РезультатВыполнения - Булево - Результат выполнения.
//  ДанныеОперации - Структура - Данные операции.
Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
КонецПроцедуры
 
// Функция формирует структуру с описанием макета.
//
// Параметры:
//  Источник - Строка - источник события.
//  СообщениеОбОшибке - Строка - сообщение пользователю об ошибке
//  Результат - см. СоздатьОписаниеМакета
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
//
Функция ПолучитьОписаниеМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = СоздатьОписаниеМакета();
	
	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);
	
	ШаблонСообщенияОбОшибке = НСтр("ru='При чтении файла атрибута %1 элемента %2 произошла ошибка.'");
	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл
		
		ЗначениеАтрибута = Неопределено;
		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда
				Результат.Ширина = Число(ЗначениеАтрибута);
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Width", "Formatting");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Height", "Formatting");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Ориентация", 0);
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Scale", ЗначениеАтрибута) Тогда
				Результат.Вставить("Масштаб", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Масштаб", 1);
			КонецЕсли;
			
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			НовоеПоле = Новый Структура;
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);
			
			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "FieldName", "UserData");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда
				
				Если ЗначениеАтрибута=Неопределено Тогда
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "TypeFill", "UserData");
					Возврат Ложь;
				КонецЕсли;
				
				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);
				
				Если ЗначениеАтрибута="Parameter" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						Если ЗначениеАтрибута=Неопределено Тогда
							СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Value", "UserData");
							Возврат Ложь;
						Иначе
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;
					Иначе
						СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Value", "UserData");
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "TypeFill", "UserData");
				Возврат Ложь;
			КонецЕсли;
			
			Если НовоеПоле.Тип<>"UserData" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Left", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Top", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Width", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);
				Иначе
					СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Height", "Text");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));
				КонецЕсли;
				
				Если НовоеПоле.Тип="Text" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "FontSize", "Text");
						Возврат Ложь;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Background", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Фон", ЗначениеИзСтрокиВнутр(ЗначениеАтрибута));
					КонецЕсли;
					
				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "Type", "Barcode");
						Возврат Ложь;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;
					Иначе
						ПодписьШтрихкода = Истина;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда
							СообщениеОбОшибке = СтрШаблон(ШаблонСообщенияОбОшибке, "FontSize", "Barcode");
							ШаблонДополнение = НСтр("ru='При значении атрибута %1 = %2 указание значения атрибута %3 обязательно.'");
							СообщениеОбОшибке = СообщениеОбОшибке + Символы.НПП + СтрШаблон(ШаблонДополнение, "PrintHRI", "True", "FontSize");
							Возврат Ложь;
						КонецЕсли;
						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);
						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда
							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;
							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НовоеПоле.Тип="UserData" ИЛИ НовоеПоле.Тип="Text" Тогда
				Если ПрочитатьАтрибут(ЧтениеXML, "Format", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Формат", ЗначениеАтрибута);
				КонецЕсли;
			КонецЕсли;
			Результат.Поля.Добавить(НовоеПоле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция формирует XML-описание макета.
//
// Возвращаемое значение:
//  Строка.
//
Функция СохранитьXMLФайл(ШиринаЭтикетки, ВысотаЭтикетки, Ориентация, Поля, ЭтоКонвертацияШаблона = Ложь) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ШиринаЭтикетки);
	ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ВысотаЭтикетки);

	Если ЗначениеЗаполнено(Ориентация) Тогда
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", Ориентация);
	КонецЕсли;

	Для Каждого ТекЭлемент Из Поля Цикл

		ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

		Если ТекЭлемент.Тип <> "UserData" Тогда
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх);
			Если Не ЭтоКонвертацияШаблона Тогда
				СмещениеЛевоВерх = 1;
			Иначе
				СмещениеЛевоВерх = 0;
			КонецЕсли;
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево + СмещениеЛевоВерх);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх + СмещениеЛевоВерх);

			Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
			КонецЕсли;
			
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);
		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" Тогда

			Если ЗначениеЗаполнено(ТекЭлемент.ИмяШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
			СтильШрифта = "";

			Если ТекЭлемент.Жирный Тогда
				СтильШрифта = "Bold";
			КонецЕсли;

			Если ТекЭлемент.Наклонный Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Italic";
			КонецЕсли;

			Если ТекЭлемент.Подчеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Underline";
			КонецЕсли;

			Если ТекЭлемент.Зачеркивание Тогда
				СтильШрифта = ?(ЗначениеЗаполнено(СтильШрифта), СтильШрифта + " ", "") + "Strikeout";
			КонецЕсли;

			Если ЗначениеЗаполнено(СтильШрифта) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
			КонецЕсли;
			
			Если ЭтоКонвертацияШаблона Тогда
				Фон = Новый Цвет(255,255,255);
			Иначе
				Фон = ТекЭлемент.Фон;
			КонецЕсли;
			СтрокаЦветаФона = ЗначениеВСтрокуВнутр(Фон);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Background", СтрокаЦветаФона);
			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ТекЭлемент.ПоложениеПоГоризонтали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ТекЭлемент.ПоложениеПоВертикали);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Format", ТекЭлемент.Формат);

		ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

			Если ТекЭлемент.Тип = "Barcode" Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
			КонецЕсли;

			ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

			Если ТекЭлемент.ПодписьШтрихкода Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
			КонецЕсли;

		КонецЕсли;

		Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

			Рамка = "";

			Если ТекЭлемент.РамкаСверху Тогда
				Рамка = "Top";
			КонецЕсли;

			Если ТекЭлемент.РамкаСлева Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Left";
			КонецЕсли;

			Если ТекЭлемент.РамкаСправа Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Right";
			КонецЕсли;

			Если ТекЭлемент.РамкаСнизу Тогда
				Рамка = ?(ЗначениеЗаполнено(Рамка), Рамка + " ", "") + "Bottom";
			КонецЕсли;

			Если ЗначениеЗаполнено(Рамка) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
			КонецЕсли;

		КонецЕсли;

		ЗаписатьАтрибутЭлемента(ЗаписьXML, "TypeFill", ТекЭлемент.ТипЗаполнения);
		ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);

		Если ТекЭлемент.ТипЗаполнения<>"Constant" И ЗначениеЗаполнено(ТекЭлемент.ЗначениеПоУмолчанию) Тогда			
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueDefault", ТекЭлемент.ЗначениеПоУмолчанию);
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

// Создает описание макета.
// 
// Возвращаемое значение:
//  Структура -- структура с полями::
// * Поля - Массив - массив полей.
// * Ширина - Число - ширина макета.
// * Высота - Число - высота макета.
// * Ориентация - Число - ориентация макета.
// * Масштаб - Число - масштаб.
Функция СоздатьОписаниеМакета()
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);
	Результат.Вставить("Ширина", 0);
	Результат.Вставить("Высота", 0);
	Результат.Вставить("Ориентация", 0);
	Результат.Вставить("Масштаб", 0);
	
	Возврат Результат;
	
КонецФункции

// Функция формирует текст XML для передачи его принтеру этикеток.
//
// Возвращаемое значение:
//  ЗаписьXML
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки, РевизияИнтерфейса = 0)
	
	ФорматыПолей = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");

	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");

		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;

		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);

			Если ТекЭлемент.Тип <> "UserData" Тогда
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				КонецЕсли;

				Если МакетЭтикетки.Ориентация <> 0 Тогда
					
					Если ТекЭлемент.Свойство("Ориентация") Тогда
						Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
							ОриентацияПоля = Число(ТекЭлемент.Ориентация);
						Иначе
							ОриентацияПоля = 0;
						КонецЕсли;
					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;
					
					НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
					НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);
					
				Иначе

					Если ТекЭлемент.Свойство("Ориентация") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда
				
				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					Если ТекЭлемент.Тип = "Text"
						И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию, ТекЭлемент.Формат);
					ИначеЕсли ТекЭлемент.Тип = "Barcode" И РевизияИнтерфейса > 3002 Тогда
						ШтрихкодBase64 = МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(ТекЭлемент.ЗначениеПоУмолчанию);
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueBase64", ШтрихкодBase64);
					Иначе
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				Если ТекЭлемент.Тип = "Text" И ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение, ТекЭлемент.Формат);
				ИначеЕсли ТекЭлемент.Тип = "Barcode" И РевизияИнтерфейса > 3002 Тогда
					ШтрихкодBase64 = МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(ТекЭлемент.Значение);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueBase64", ШтрихкодBase64);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("Формат") И ЗначениеЗаполнено(ТекЭлемент.Формат) Тогда
					ФорматыПолей.Вставить("Формат" + СтрЗаменить(ТекЭлемент.Наименование, "-", ""), ТекЭлемент.Формат);
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
				
				СтильШрифта = "";
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);

				ВыравниваниеГоризонтальное = "Left";

				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда
					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ВыравниваниеГоризонтальное = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;
				КонецЕсли;

				ВыравниваниеВертикальное = "Top";

				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда
					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВыравниваниеВертикальное = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;
				КонецЕсли;

				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ВыравниваниеГоризонтальное);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВыравниваниеВертикальное);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;

				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда

					Если ВыравниваниеВертикальное="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВыравниваниеВертикальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВыравниваниеВертикальное="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;

					Если ВыравниваниеГоризонтальное="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ВыравниваниеГоризонтальное="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВыравниваниеГоризонтальное="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;

			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда

				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);

				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);

					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;

				КонецЕсли;

				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	

			КонецЕсли;

			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда

				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			ЗаписьXML.ЗаписатьКонецЭлемента();		

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");
	
	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");
		
		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;
		
		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗначениеЭлемента = Неопределено;
			Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл
				Если ТекЭлемент.Наименование = ТекПоле.ИмяПоля Тогда
					ЗначениеЭлемента = ТекЭлемент;
					Прервать;
				КонецЕсли
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			Если ФорматыПолей.Свойство("Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")) Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение, ФорматыПолей["Формат" + СтрЗаменить(ТекПоле.ИмяПоля, "-", "")]);
			Иначе
				Если РевизияИнтерфейса > 3002 И ЗначениеЭлемента <> Неопределено И ЗначениеЭлемента.Тип = "Barcode" Тогда
					ШтрихкодBase64 = МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(ТекПоле.Значение);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "ValueBase64", ШтрихкодBase64);
				Иначе
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
				КонецЕсли;
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат = ЗаписьXML.Закрыть(); 
	
	Возврат Результат;
	
КонецФункции

// Сформировать XML пакеты товаров для загрузки ТСД.
//
// Возвращаемое значение:
//  Массив
Функция ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, МакетЭтикетки = Неопределено)
	
	ПакетыДляВыгрузки = Новый Массив();  
	МассивТоваров = Новый Массив;
	
	ПервыйПакет      = Истина;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = МассивЭтикеток.Количество();
	
	Для Каждого Позиция Из МассивЭтикеток Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		МассивТоваров.Добавить(Позиция);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  
			ДанныеДляВыгрузки = СформироватьДанныеДляПринтераЭтикеток(МассивТоваров, ?(ПервыйПакет, МакетЭтикетки, Неопределено));
			ПакетыДляВыгрузки.Добавить(ДанныеДляВыгрузки);
			ЗаписьВПакете = 0;
			ПервыйПакет   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыДляВыгрузки;
	
КонецФункции

// Размер пакета в элементах передаваемой информации в драйвер.
//
// Возвращаемое значение:
// Число
Функция РазмерПакетаПоУмолчанию() 
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута, ФорматнаяСтрока="ЧРД=.; ЧН=0; ЧГ=0; БЛ=false; БИ=true")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, ФорматнаяСтрока)));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
