
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с диалогами
#Область РаботаСДиалогами

// Возвращает список значений со значениями кодов возврата диалога Да и Нет
// и представлением для этих кодов из входных параметров.
//
// Параметры
//  ЗаголовокКнопкиДа - Строка - заголовок кнопки Да
//  ЗаголовокКнопкиНет - Строка - заголовок кнопки Нет
//
// Возвращаемое значение
//  Список значений
//
Функция ПолучитьКнопкиДаНет(ЗаголовокКнопкиДа, ЗаголовокКнопкиНет) Экспорт
	
	КнопкиДиалога = Новый СписокЗначений;
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Да, ЗаголовокКнопкиДа);
	КнопкиДиалога.Добавить(КодВозвратаДиалога.Нет, ЗаголовокКнопкиНет);
	
	Возврат КнопкиДиалога;
	
КонецФункции

// Вызывает диалог ввода даты. В случае ввода пустой даты - предлагает диалог ввода даты еще раз.
//
// Параметры:
//  Дата - Дата - Начальное значение даты диалога. В эту дату будет помещен результат диалога.
//  Подсказка - Строка - Текст заголовка диалога ввода даты.
//  ЧастьДаты - ЧастиДаты
//
// Возвращаемое значение:
//  Булево - Истина - в случае если дата введена, Ложь - в случае если пользователь отказался от ввода.
//
Процедура ВвестиДатуСКонтролемПустогоЗначения(Дата, Подсказка, ЧастьДаты, Оповещение) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Дата", Дата);
	ПараметрыОповещения.Вставить("Подсказка", Подсказка);
	ПараметрыОповещения.Вставить("ЧастьДаты", ЧастьДаты);
	ПараметрыОповещения.Вставить("Оповещение", Оповещение);
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВводДаты(ОповещениеПродолжения, Дата, Подсказка, ЧастьДаты);
	
КонецПроцедуры

// Продолжение ВвестиДатуСКонтролемПустогоЗначения
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияЗавершение(Дата, Параметры) Экспорт
	
	Если Дата <> Неопределено Тогда
		
		Если Дата <> Дата('00010101000000') Тогда
			ВыполнитьОбработкуОповещения(Параметры.Оповещение, Дата);
		Иначе
			ВвестиДатуСКонтролемПустогоЗначения(Параметры.Дата, Параметры.Подсказка, Параметры.ЧастьДаты, Параметры.Оповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность реквизитов, необходимых для пересчета из валюты в валюту.
//
// Параметры
//  Документ - ДокументОбъект, для которого выполняются проверки.
//  СтараяВалюта - Предыдущая валюта документа.
//
// Возвращаемое значение
//  Булево - Ложь, если необходимые данные не заполнены.
//
Процедура ПроверитьНеобходимостьПересчетаВВалюту(Таблица, НоваяВалюта, СтараяВалюта, Оповещение) Экспорт
	
	НуженПересчет = Истина;
	Если Не ЗначениеЗаполнено(НоваяВалюта)
	 Или Не ЗначениеЗаполнено(СтараяВалюта)
	 Или СтараяВалюта = НоваяВалюта
	 Или Таблица.Итог("Сумма") = 0 Тогда
		НуженПересчет = Ложь;
	КонецЕсли;
	
	Если НуженПересчет Тогда
		ТекстСообщения = СтрЗаменить(НСтр("ru='Пересчитать суммы в документе в валюту ""%1""?'"), "%1", НоваяВалюта);
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при выборе даты актуальности или даты события.
// Изменяет значение даты актуальности или даты события в зависимости от выбранного значения.
//
// Параметры:
//	ВыбранноеЗначение - Строка - выбранное значение отбора.
//	Актуальность - Строка - строка отбора по актуальности.
//	ДатаСобытия - Дата - дата, на которую документ будет просрочен.
//
Процедура ПриВыбореАктуальности(ВыбранноеЗначение, СтандартнаяОбработка, Оповещение) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = НСтр("ru = 'Истекает на дату'") Тогда
		ПоясняющийТекст = НСтр("ru='Выберите дату для вывода просроченных документов:'") + " ";
		ОповещениеПослеВыбораДаты = Новый ОписаниеОповещения("ПриВыбореАктуальностиПослеВыбораДаты", ЭтотОбъект, Оповещение);
		ОткрытьФорму("ОбщаяФорма.ВыборДаты", Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),,,,, ОповещениеПослеВыбораДаты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ДатаСобытия = Дата(1,1,1);
		ПриВыбореАктуальностиЗавершение(ВыбранноеЗначение, ДатаСобытия, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ПриВыбореАктуальности
//
Процедура ПриВыбореАктуальностиПослеВыбораДаты(ДатаСобытия, Оповещение) Экспорт
	
	Если ЗначениеЗаполнено(ДатаСобытия) Тогда
		Актуальность    = НСтр("ru='Истекает на %Дата%'");
		Актуальность    = СтрЗаменить(Актуальность, "%Дата%", Формат(ДатаСобытия, "ДЛФ=D"));
		ПриВыбореАктуальностиЗавершение(Актуальность, ДатаСобытия, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ПриВыбореАктуальности
//
Процедура ПриВыбореАктуальностиЗавершение(Актуальность, ДатаСобытия, Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение, Новый Структура("Актуальность, ДатаСобытия", Актуальность, ДатаСобытия));
	
КонецПроцедуры

#КонецОбласти // РаботаСДиалогами

////////////////////////////////////////////////////////////////////////////////
// Оповещение пользователя о выполненных действиях
#Область ОповещениеПользователяОВыполнении

// Показывает оповещение пользователя об окончании заполнения дат поступления всех строк списка.
//
// Параметры:
//	ДатаПоступления - Дата - дата отгрузки, по которой заполнялась дата в табличной части.
//	ВыделенныеСтроки - Массив - влияет на текст сообщения.
//
Процедура ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, ЗаполнениеВыделенныхСтрок) Экспорт
	
	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата поступления заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата поступления %ДатаПоступления%'"), "%ДатаПоступления%", Формат(ДатаПоступления, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата поступления заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата поступления %ДатаПоступления%'"), "%ДатаПоступления%", Формат(ДатаПоступления, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании пересчета сумм из валюты в валюту.
//
// Параметры
//  ВалютаИсточник - СправочникСсылка.Валюты - валюта, из которой осуществлялся пересчет.
//  ВалютаПриемник - СправочникСсылка.Валюты - валюта, в которую осуществляется пересчет.
//
Процедура ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаИсточник, ВалютаПриемник) Экспорт
	
	СтрокаСообщения = НСтр("ru='Суммы в документе пересчитаны из валюты %ВалютаИсточник% в валюту %ВалютаПриемник%'");
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ВалютаИсточник%", ВалютаИсточник);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ВалютаПриемник%", ВалютаПриемник);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Суммы пересчитаны'"),
		,
		СтрокаСообщения,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти // ОповещениеПользователяОВыполнении

//////////////////////////////////////////////////////////////////////
// Обработки выбора связанных данных в документах
#Область ОбработкиВыбораСвязанныхДанныхВДокументах

// Открывает форму ввода пациентов.
//
Процедура ВвестиПациентовВТЧ(Форма, ТЧПациенты, СтрокаТЧ, Организация, Отделение, ТолькоПросмотр = Ложь, Оповещение = Неопределено) Экспорт
	
	Если СтрокаТЧ = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка, для которой необходимо ввести пациентов.'"));
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр И СтрокаТЧ.СтатусУказанияПациентов = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для текущей строки пациенты не выбраны.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана организация, для которой необходимо ввести пациентов.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отделение) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано отделение, для которого необходимо ввести пациентов.'"));
		Возврат;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)
	     Или ЗначениеЗаполнено(СтрокаТЧ.ТорговоеНаименование)
	     Или ЗначениеЗаполнено(СтрокаТЧ.ДействующиеВеществаМНН))
	 Или Не ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для ввода пациентов необходимо заполнить поля строки.'"));
		Возврат;
		
	КонецЕсли;
	
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязиПациентов;
	ИмяРеквизитаКлючаСвязи = "КлючСвязиПациентов";
	ЗаполняемыеРеквизиты = "Пациент, Количество";
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить(
		"МассивПациентов",
		ПолучитьДанныеСвязанныхСтрок(
			ТекущийКлючСвязи,
			ТЧПациенты,
			ИмяРеквизитаКлючаСвязи,
			ЗаполняемыеРеквизиты));
	ДанныеФормы.Вставить("Организация", Организация);
	ДанныеФормы.Вставить("Отделение", Отделение);
	ДанныеФормы.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
	ДанныеФормы.Вставить("ТорговоеНаименование", СтрокаТЧ.ТорговоеНаименование);
	ДанныеФормы.Вставить("ДействующиеВеществаМНН", СтрокаТЧ.ДействующиеВеществаМНН);
	ДанныеФормы.Вставить("ФормаВыпуска", СтрокаТЧ.ФормаВыпуска);
	ДанныеФормы.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмерения);
	ДанныеФормы.Вставить("Количество", СтрокаТЧ.КоличествоВЕдиницахИзмерения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеФормы", ДанныеФормы);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ТЧПациенты", ТЧПациенты);
	ПараметрыОповещения.Вставить("СтрокаТЧ", СтрокаТЧ);
	ПараметрыОповещения.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОповещения.Вставить("Оповещение", Оповещение);
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВвестиПациентовВТЧЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаПациентов", ПараметрыФормы, Форма,,,, ОповещениеПродолжения);
	
КонецПроцедуры

// Продолжение ВвестиПациентовВТЧ
//
Процедура ВвестиПациентовВТЧЗавершение(Данные, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ТЧПациенты = ДополнительныеПараметры.ТЧПациенты;
	СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
	ТолькоПросмотр = ДополнительныеПараметры.ТолькоПросмотр;
	
	Если Не ТолькоПросмотр И ТипЗнч(Данные) = Тип("Структура") Тогда
		НовыйКлючСвязи = ИзменитьСвязанныеСтрокиВТабличнойЧасти(
			ТЧПациенты,
			Данные.ИзмененныеДанные,
			СтрокаТЧ.КлючСвязиПациентов,
			"КлючСвязиПациентов",
			"Пациент, Количество");
		
		Форма.Модифицированность = Истина;
		СтрокаТЧ.КлючСвязиПациентов = НовыйКлючСвязи;
		Если НовыйКлючСвязи = 0 Тогда
			СтрокаТЧ.СтатусУказанияПациентов = 0;
		Иначе
			НайденныеПациенты = ТЧПациенты.НайтиСтроки(Новый Структура("КлючСвязиПациентов", НовыйКлючСвязи));
			Если НайденныеПациенты.Количество() = 1 Тогда
				СтрокаТЧ.СтатусУказанияПациентов = 1;
				ТекущийПациент = НайденныеПациенты[0];
				СтрокаТЧ.Пациент = ТекущийПациент.Пациент;
				СтрокаТЧ.КоличествоВЕдиницахИзмерения = ТекущийПациент.Количество;
			Иначе
				КоличествоПоПациентам = 0;
				Для Каждого ТекущийПациент Из НайденныеПациенты Цикл
					КоличествоПоПациентам = КоличествоПоПациентам + ТекущийПациент.Количество;
				КонецЦикла;
				
				СтрокаТЧ.СтатусУказанияПациентов = 2;
				СтрокаТЧ.КоличествоВЕдиницахИзмерения = КоличествоПоПациентам;
				СтрокаТЧ.Пациент = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, СтрокаТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму ввода отделений.
//
Процедура ВвестиОтделенияВТЧФормуляра(Форма, ТЧОтделения, СтрокаТЧ, Организация, ТолькоПросмотр, Оповещение = Неопределено) Экспорт
	
	Если ТолькоПросмотр И СтрокаТЧ.СтатусУказанияОтделений = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для текущей строки отделения не выбраны.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана организация, для которой необходимо ввести отделения.'"));
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка, для которой необходимо ввести отделения.'"));
		Возврат;
	КонецЕсли;
	
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязиОтделений;
	ИмяРеквизитаКлючаСвязи = "КлючСвязиОтделений";
	ЗаполняемыеРеквизиты = "Отделение";
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("МассивОтделений", ПолучитьДанныеСвязанныхСтрок(
												ТекущийКлючСвязи,
												ТЧОтделения,
												ИмяРеквизитаКлючаСвязи,
												ЗаполняемыеРеквизиты));
	ДанныеФормы.Вставить("Организация"              , Организация);
	ДанныеФормы.Вставить("Номенклатура"             , СтрокаТЧ.Номенклатура);
	ДанныеФормы.Вставить("ТорговоеНаименование"     , СтрокаТЧ.ТорговоеНаименование);
	ДанныеФормы.Вставить("ДействующиеВеществаМНН"   , СтрокаТЧ.ДействующиеВеществаМНН);
	ДанныеФормы.Вставить("ФормаВыпуска"             , СтрокаТЧ.ФормаВыпуска);
	ДанныеФормы.Вставить("ДоступЗапрещен"           , СтрокаТЧ.ДоступЗапрещен);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеФормы", ДанныеФормы);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ТЧОтделения", ТЧОтделения);
	ПараметрыОповещения.Вставить("СтрокаТЧ", СтрокаТЧ);
	ПараметрыОповещения.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОповещения.Вставить("Оповещение", Оповещение);
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВвестиОтделенияВТЧФормуляраЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("Документ.ФормулярныйСписокНоменклатуры.Форма.ФормаВводаОтделений", ПараметрыФормы, Форма,,,, ОповещениеПродолжения);
	
КонецПроцедуры

// Продолжение ВвестиОтделенияВТЧФормуляра
//
Процедура ВвестиОтделенияВТЧФормуляраЗавершение(Данные, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ТЧОтделения = ДополнительныеПараметры.ТЧОтделения;
	СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
	ТолькоПросмотр = ДополнительныеПараметры.ТолькоПросмотр;
	
	Если Не ТолькоПросмотр И ТипЗнч(Данные) = Тип("Структура") Тогда
		ДоступЗапрещен = Неопределено;
		Данные.Свойство("ДоступЗапрещен", ДоступЗапрещен);
		НовыйКлючСвязи = ИзменитьСвязанныеСтрокиВТабличнойЧасти(
			ТЧОтделения,
			Данные.ИзмененныеДанные,
			СтрокаТЧ.КлючСвязиОтделений,
			"КлючСвязиОтделений",
			"Отделение");
		
		Форма.Модифицированность = Истина;
		СтрокаТЧ.КлючСвязиОтделений = НовыйКлючСвязи;
		Если НовыйКлючСвязи = 0 Тогда
			СтрокаТЧ.СтатусУказанияОтделений = 0;
			СтрокаТЧ.ДоступЗапрещен = ДоступЗапрещен;
		Иначе
			СтрокаТЧ.СтатусУказанияОтделений = 1;
			СтрокаТЧ.ДоступЗапрещен = ДоступЗапрещен;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, СтрокаТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные строки по ключу связи.
//
// Параметры
//	КлючСвязи - Ключ связи для которого нужно получить данные.
//	ТабличнаяЧасть - таблица из которой получаются данные.
//	ИмяРеквизитаКлючаСвязи - имя реквизита таблицы ключа связи.
//	ЗаполняемыеРеквизиты - Строка - список получаемых реквизитов.
//
// Возвращаемое значение
//	Массив - отобранные данные.
//
Функция ПолучитьДанныеСвязанныхСтрок(КлючСвязи, ТабличнаяЧасть, ИмяРеквизитаКлючаСвязи, ЗаполняемыеРеквизиты)
	
	Результат = Новый Массив();
	Если КлючСвязи > 0 Тогда
		
		Для Каждого ТекСтрока Из ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяРеквизитаКлючаСвязи, КлючСвязи)) Цикл
			
			Данные = Новый Структура(ЗаполняемыеРеквизиты);
			ЗаполнитьЗначенияСвойств(Данные, ТекСтрока, ЗаполняемыеРеквизиты);
			
			Результат.Добавить(Данные);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Изменяет строки в табличной части по ключу связи.
//
// Параметры
//	ТабличнаяЧасть - таблица в которую будут добавляться строки
//	МассивДобавляемыхСтрок - Массив, содержащий добавляемые строки
//	ТекущийКлючСвязи - Число - ключ связи, который нужно установить, если 0, то 
//								будет установлен новый ключ связи.
//	ИмяРеквизитаКлючСвязи - Строка - имя реквизита ключ связи в табличной части.
//	ЗаполняемыеРеквизиты - Строка - список реквизитов, заполняемых в добавляемых строках.
//
// Возвращаемое значение
//	Число - установленный ключ связи если были добавлены строки, иначе 0.
//
Функция ИзменитьСвязанныеСтрокиВТабличнойЧасти(ТабличнаяЧасть, ДобавляемыеСтроки, ТекущийКлючСвязи, ИмяРеквизитаКлючСвязи, ЗаполняемыеРеквизиты)
	
	НовыйКлючСвязи = 0;
	
	Если ТекущийКлючСвязи <> 0 Тогда
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяРеквизитаКлючСвязи, ТекущийКлючСвязи)) Цикл
			ТабличнаяЧасть.Удалить(ТабличнаяЧасть.Индекс(СтрокаТЧ));
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДобавляемыеСтроки.Количество() = 0 Тогда
		
		НовыйКлючСвязи = 0;
		
	Иначе
		
		Если ТекущийКлючСвязи = 0 Тогда
			
			ВремКлючСвязи = 0;
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				Если ВремКлючСвязи < СтрокаТЧ[ИмяРеквизитаКлючСвязи] Тогда
					ВремКлючСвязи = СтрокаТЧ[ИмяРеквизитаКлючСвязи];
				КонецЕсли;
			КонецЦикла;
			
			НовыйКлючСвязи = ВремКлючСвязи + 1;
			
		Иначе
			НовыйКлючСвязи = ТекущийКлючСвязи;
		КонецЕсли;
		
		Для Каждого ДанныеСтроки Из ДобавляемыеСтроки Цикл
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			
			НоваяСтрока[ИмяРеквизитаКлючСвязи] = НовыйКлючСвязи;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат НовыйКлючСвязи;
	
КонецФункции

#КонецОбласти // ОбработкиВыбораСвязанныхДанныхВДокументах

////////////////////////////////////////////////////////////////////////////////
// Комиссии
#Область Комиссии

// Открывает формы выбора постоянно действующих комиссий.
//
Процедура ВыбратьПостоянноДействующуюКомиссию(Форма, Организация, Оповещение) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыВыбора = Новый Структура("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("Справочник.ПостоянноДействующиеКомиссии.ФормаВыбора", ПараметрыВыбора, Форма,,,, Оповещение);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Сначала необходимо выбрать организацию'"), 10);
	КонецЕсли;
	
КонецПроцедуры

// Открывает подбор членов комиссии.
//
// Параметры:
//  Элемент - ЭлементФормы - 
//
Процедура ОткрытьПодборЧленовКомиссии(Элемент) Экспорт
	
	ПараметрыВыбораКомиссии = Новый Структура;
	ПараметрыВыбораКомиссии.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыВыбораКомиссии.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыВыбораКомиссии, Элемент);
	
КонецПроцедуры

// Обрабатывает подбор членов комиссии.
//
Процедура ОбработатьПодборЧленовКомиссии(СоставКомиссии, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СтрокДоВыбора = СоставКомиссии.Количество();
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		НайденныеСтроки = СоставКомиссии.НайтиСтроки(Новый Структура("ЧленКомиссии", ВыбранныйЭлемент));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаФизЛица = СоставКомиссии.Добавить();
			СтрокаФизЛица.ЧленКомиссии = ВыбранныйЭлемент;
		Иначе
			ТекстСообщения = НСтр("ru='Физическое лицо %1 уже включено в состав комиссии'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ВыбранныйЭлемент);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			СтрокаФизЛица = НайденныеСтроки[0];
		КонецЕсли;
		Элемент.ТекущаяСтрока = СтрокаФизЛица.ПолучитьИдентификатор();
	
	КонецЦикла;
	
	Если СтрокДоВыбора = 0 И СоставКомиссии.Количество() > 0 Тогда
		СоставКомиссии[0].Председатель = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает начало редактирования состава комиссии
//
Процедура ОбработатьНачалоРедактированияСоставаКомиссии(СоставКомиссии, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ТекущаяСтрока.ЧленКомиссии = Неопределено;
		ТекущаяСтрока.Председатель = Ложь;
		
	ИначеЕсли НоваяСтрока Тогда
		
		Если СоставКомиссии.Количество() = 1 Тогда
			ТекущаяСтрока = Элемент.ТекущиеДанные;
			ТекущаяСтрока.Председатель = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает удаление членов комиссии.
//
Процедура ОбработатьУдалениеЧленаКомиссии(СоставКомиссии) Экспорт
	
	Если СоставКомиссии.Количество() > 0 Тогда
		
		НайденныеСтроки = СоставКомиссии.НайтиСтроки(Новый Структура("Председатель", Истина));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СоставКомиссии[0].Председатель = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение председателя комиссии.
//
Процедура ОбработатьИзменениеПредседателяКомиссии(СоставКомиссии, Элемент) Экспорт
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока.Председатель Тогда
		
		Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		Для Каждого ЧленКомиссии Из СоставКомиссии Цикл
			
			Если ЧленКомиссии.Председатель И Не ЧленКомиссии.ПолучитьИдентификатор() = Идентификатор Тогда
				ЧленКомиссии.Председатель = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		// Председатель должен быть всегда.
		ТекущаяСтрока.Председатель = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает выбор члена комиссии.
//
Процедура ОбработатьВыборЧленаКомиссии(СоставКомиссии, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока.ЧленКомиссии <> ВыбранноеЗначение Тогда
		
		НайденныеСтроки = СоставКомиссии.НайтиСтроки(Новый Структура("ЧленКомиссии", ВыбранноеЗначение));
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = НСтр("ru='Физическое лицо %1 уже включено в состав комиссии.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СокрЛП(ВыбранноеЗначение));
			ПоказатьПредупреждение(, ТекстСообщения, 10);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Комиссии

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ
#Область Прочее

// Проверяет наличие выделенных в списке ссылок и возвращает массив.
//
// Параметры:
//  Список - ДинамическийСписок
//
// Возвращаемое значение:
//  Массив - Массив выделенных с списке ссылок.
//
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("Число") Тогда
			ДанныеСтроки = Список.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеСтроки <> Неопределено Тогда
				МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		Иначе
			МассивСсылок.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта.'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Проверяет наличие записей в списке.
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//  ПредставлениеСписка - Строка - представление проверяемого списка.
//
// Возвращаемое значение:
//  Булево - Истина - список содержит записи.
//
Функция ПроверитьНаличиеСтрокВСписке(Список, ПредставлениеСписка) Экспорт
	
	Если Список.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""%ПредставлениеСписка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСписка%", ПредставлениеСписка);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // ПрограммныйИнтерфейс
