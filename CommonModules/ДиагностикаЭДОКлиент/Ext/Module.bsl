
#Область СлужебныйПрограммныйИнтерфейс

// См. ОбработкаНеисправностейБЭДСобытияКлиент.ПередФормированиемФайлаДляТехподдержки
Процедура ПередФормированиемФайлаДляТехподдержки(ТехническаяИнформация, ОповещениеОЗавершении) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТехническаяИнформация", ТехническаяИнформация);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения("ИнформацияДляТехПоддержкиПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "", Ложь);
	
КонецПроцедуры

// См. ОбработкаНеисправностейБЭДСобытияКлиент.ПриОпределенииПараметровОбращенияВТехподдержку
Процедура ПриОпределенииПараметровОбращенияВТехподдержку(ПараметрыОбращения, КонтекстДиагностики) Экспорт
	
	ОбработкаНеисправностейБЭДКлиент.ЗаполнитьДанныеСлужбыПоддержки(ПараметрыОбращения.ТелефонСлужбыПоддержки,
		ПараметрыОбращения.АдресЭлектроннойПочтыСлужбыПоддержки);
		
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	Если Ошибки.Количество() Тогда
		ТекстОбращенияВТехПоддержку = "";
		Если ОбработкаНеисправностейБЭДКлиентСервер.ЭтоОшибкаДанногоВида(Ошибки[0], СинхронизацияЭДОКлиентСервер.ВидОшибкиПовторноеПолучениеКонтейнера()) Тогда
			ТекстОбращенияВТехПоддержку = НСтр("ru = 'Требуется повторное получение транспортных контейнеров с идентификаторами:'");
		ИначеЕсли ПриглашенияЭДОКлиент.ЭтоОшибкаНенастроеннойСвязиСКонтрагентом(Ошибки[0]) Тогда
			ТекстОбращенияВТехПоддержку = НСтр("ru = 'Не настроена связь с контрагентом, распаковка транспортных контейнеров невозможна:'");
		КонецЕсли;
		ТекстыСообщений = Новый Массив;
		Для каждого Ошибка Из Ошибки Цикл
			ДополнительныеСвойстваОшибки = ДиагностикаЭДОКлиентСервер.НовыеДополнительныеСвойстваОшибки();
			Если ТипЗнч(Ошибка.ДополнительныеДанные) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеСвойстваОшибки, Ошибка.ДополнительныеДанные);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДополнительныеСвойстваОшибки.ТекстСообщения) Тогда
				ТекстыСообщений.Добавить(ДополнительныеСвойстваОшибки.ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОбращения.ТекстОбращения = ТекстОбращенияВТехПоддержку + Символы.ПС
			+ СтрСоединить(ТекстыСообщений, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет диагностику обмена электронными документами.
// В зависимости от значений свойств параметра ПараметрыВыполнения после выполнения диагностики
// либо открывает форму с отображением результатов диагностики, либо выполняет указанное в параметре оповещение.
// Виды выполняемых проверок:
//      * Интернет-соединение
//          ** Наличие интернет-соединения
//          ** Активность сервисов: работоспособны ли ресурсы: https://1c-edo.ru, https://1c-api.taxcom.ru, и т.п.
//          ** Доступность сервисов: доступны ли из клиентского приложения ресурсы: https://1c-edo.ru,
//             https://1c-api.taxcom.ru, и т.п.
//          ** Наличие корневых сертификатов сервисов: установлены ли в хранилище сертификатов корневые сертификаты ресурсов:
//             https://1c-edo.ru, https://1c-api.taxcom.ru, и т.п.
//      * Криптография
//          ** Наличие программы криптографии: установлена ли программа для защиты информации.
//          ** Наличие корневого сертификата ГУЦ: установлен ли в хранилище сертификатов сертификат
//             головного удостоверяющего центра.
//          ** Наличие сертификатов: имеются ли в программе сертификаты для работы с электронным документооборотом.
//          ** Неполученные сертификаты: имеются ли заказанные, но не полученные сертификаты для работы
//             с электронным документооборотом.
//          ** Непривязанные сертификаты: имеются ли сертификаты, не привязанные к учетным записям (требующие
//             регистрации в сервисе).
//          ** Проверки сертификатов:
//              *** Наличие сертификата в личном списке: установлен ли сертификат в личный список (личное хранилище)
//                  на компьютере.
//              *** Корректность данных сертификата: проверка данных сертификата с помощью программы электронной подписи
//                  и шифрования.
//                  Данные сертификата, загруженные из файла сертификата или другим путем, могут быть некорректны по разным
//                  причинам, но самые частые следующие:
//                  - закончился срок действия сертификата;
//                  - сертификат в списке отозванных.
//              *** Наличие программы для подписания и расшифровки: имеется ли на компьютере программа, указанная в сертификате
//                  для закрытого ключа, которая позволяет подписывать и расшифровывать данные.
//              *** Подписание данных: возможно ли подписать данные закрытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования. Требуется пароль.
//              *** Проверка созданной подписи: возможна ли проверка имеющейся подписи открытым ключом сертификата с помощью
//                  программы электронной подписи и шифрования.
//              *** Шифрование данных: возможно ли шифрование данных открытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования.
//              *** Расшифровка данных: возможна ли расшифровка данных закрытым ключом сертификата с помощью программы электронной
//                  подписи и шифрования. Требуется пароль.
//      * Работа с файлами
//          ** Длина пути к файлу: не превышает ли длина пути к файлу 256 символов.
//      * Интернет-поддержка
//          ** Внедрение БИП: внедрена ли в конфигурацию библиотека интернет-поддержки.
//          ** Корректность данных интернет-поддержки: верно ли указаны логин и пароль от сервиса интернет-поддержки.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры выполнения диагностики,
//                        см. ДиагностикаЭДОКлиентСервер.НовыеПараметрыВыполненияДиагностики.
//
// Пример:
//  // Вариант 1
//	ПараметрыВыполнения = ДиагностикаЭДОКлиентСервер.НовыеПараметрыВыполненияДиагностики();
//  ПараметрыВыполнения.ВидыДиагностики.Добавить(ДиагностикаЭДОКлиентСервер.ВидДиагностикиИнтернетСоединение());
//  ДиагностикаЭДОКлиент.ВыполнитьДиагностику(ПараметрыВыполнения);
//  // Вариант 2
//  ДиагностикаЭДОКлиент.ВыполнитьДиагностику().
//
Процедура ВыполнитьДиагностику(ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ПараметрыВыполнения = Неопределено Тогда
		ПараметрыВыполнения = ДиагностикаЭДОКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	КонецЕсли;
	
	Если ПараметрыВыполнения.ПараметрыОткрытияМастера = Неопределено Тогда
		ПараметрыВыполнения.ПараметрыОткрытияМастера = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	КонецЕсли;
	
	ПараметрыВыполнения.ОткрыватьОкноДиагностики = ПараметрыВыполнения.ОповещениеОЗавершении = Неопределено;
		
	ПодготовитьКлиентскиеДанные(ПараметрыВыполнения);
	
КонецПроцедуры

// Формирует текст предупреждения, отображаемого при контекстной обработке ошибок в форме.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	ФорматированнаяСтрока
Функция ТекстПредупреждения(КонтекстДиагностики) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	ВидыОшибок = ОбработкаНеисправностейБЭДКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ВидОшибки");
	
	ВидыДиагностики = Новый Массив;
	ДиагностикаЭДОКлиентСервер.ОшибкиДиагностируются(Ошибки, ВидыДиагностики);
	ДляВсехОшибокЕстьМастерДиагностики = ВидыОшибок.Количество() = ВидыДиагностики.Количество();
	Если ДляВсехОшибокЕстьМастерДиагностики Тогда
		Текст = НСтр("ru = 'Возникли проблемы с %1. <a style=""font: ЖирныйШрифтБЭД"" href=""Нажмите"">Нажмите</a>, чтобы провести диагностику.'");
		ТекстПредупреждения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(Текст, ДиагностикаЭДОКлиентСервер.ПредставлениеОшибок(Ошибки));
	Иначе
		Текст = НСтр("ru = 'При выполнении операции возникли проблемы. <a style=""font: ЖирныйШрифтБЭД"" href=""Нажмите"">Нажмите</a>, чтобы посмотреть список ошибок.'");
		ТекстПредупреждения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(Текст);
	КонецЕсли;
	
	Возврат ТекстПредупреждения; 
	
КонецФункции

// Открывает форму исправления ошибок со списком сертификатов. 
// 
// Параметры:
// 	Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 	ДополнительныеПараметры - Произвольный
Процедура ОткрытьСписокСертификатов(Сертификаты, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыИсправленияОшибок();
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Открыть'");
	Команда.Обработчик = "ОбработкаНеисправностейБЭДКлиент.ОткрытьЭлементТаблицы";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Ложь;
	
	ОбработкаНеисправностейБЭДКлиент.ИсправитьОшибки(Сертификаты, ПараметрыИсправленияОшибок);
	
КонецПроцедуры

// Открывает форму и выводит в нее текст ошибок.
// 
// Параметры:
// 	Заголовок - Строка
// 	Ошибки - Массив из см. ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи.ИнформацияОбОшибке
Процедура ПоказатьОшибки(Заголовок, Ошибки) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("Ошибки", Ошибки);
	ОткрытьФорму("Обработка.ДиагностикаЭДО.Форма.РасшифровкаОшибок", ПараметрыФормы);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.БазоваяФункциональность.ОбработкаНеисправностей

// Открывает мастер диагностики.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 	ПараметрыОбработкиОшибок - см. ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок
Процедура ОткрытьМастерДиагностики(КонтекстДиагностики, ПараметрыОбработкиОшибок) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	ВидыДиагностики = Новый Массив;
	ДиагностикаЭДОКлиентСервер.ОшибкиДиагностируются(Ошибки, ВидыДиагностики);
	Если ПараметрыОбработкиОшибок = Неопределено Тогда
		ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	КонецЕсли;
	
	ПараметрыОбработкиОшибок.Ошибки = Ошибки;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пояснение", КонтекстДиагностики.ЗаголовокОперации);
	ПараметрыФормы.Вставить("Ошибки", Ошибки);
	ПараметрыФормы.Вставить("ВозможенПовторДействия", ТипЗнч(ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия) = Тип("ОписаниеОповещения"));
	ПараметрыОбработкиОшибок.ПараметрыФормы = ПараметрыФормы;
	
	ПараметрыВыполнения = ДиагностикаЭДОКлиентСервер.НовыеПараметрыВыполненияДиагностики();
	
	Если ВидыДиагностики.Количество() = 1
		И ВидыДиагностики[0] = ДиагностикаЭДОКлиентСервер.ВидДиагностикиРаботаСФайлами() Тогда
		// Мастер диагностики работы с файлами может быть открыт только из формы ошибок (когда ошибка уже произошла).
		// Поэтому, длину пути к каталогу временных файлов не проверяем заново, а сразу показываем ошибку.
		ПараметрыВыполнения.ДиагностикаРаботыСФайламиВРежимеОтображенияРезультата = Истина;
	КонецЕсли;
	ПараметрыВыполнения.ПараметрыФормы = ПараметрыФормы;
	ПараметрыВыполнения.ВидыДиагностики = ВидыДиагностики;
	ПараметрыВыполнения.ПараметрыОткрытияМастера = ПараметрыОбработкиОшибок;
	
	Сертификаты = Неопределено; 
	Если ПараметрыОбработкиОшибок.Отбор.Свойство("Сертификат", Сертификаты)
		И ЗначениеЗаполнено(Сертификаты) Тогда
		ПараметрыВыполнения.Отбор.Вставить("Сертификат", Сертификаты);
	Иначе 
		Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
		УчетныеЗаписи = ОбработкаНеисправностейБЭДКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "УчетнаяЗапись");
		ПараметрыВыполнения.Отбор.Вставить("УчетнаяЗапись", УчетныеЗаписи);
	КонецЕсли;
	
	Сертификаты = ОбработкаНеисправностейБЭДКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "Сертификат");
	Для каждого Сертификат Из Сертификаты Цикл
		Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
			ПараметрыВыполнения.ДополнительныеСертификатыДляПроверки.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьДиагностику(ПараметрыВыполнения);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.БазоваяФункциональность.ОбработкаНеисправностей

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Диагностика 

Процедура ПодготовитьКлиентскиеДанные(ПараметрыВыполнения)
	
	ПараметрыВыполнения.ИнформационнаяБазаФайловая = ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая();
	#Если Не ВебКлиент Тогда
		ПараметрыВыполнения.ИмяКомпьютераКлиент = ИмяКомпьютера();
	#КонецЕсли
	НужноПолучитьКлиентскиеОтпечатки = ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография())
	Или ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации())
	Или (ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиИнтернетСоединение())
		И ПараметрыВыполнения.Отбор.УчетнаяЗапись.Количество() = 0 И ПараметрыВыполнения.Отбор.Сертификат.Количество() = 0);
		
	Если ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография())
		Или НужноПолучитьКлиентскиеОтпечатки Тогда
		
		ПараметрыКриптографии = ПараметрыКриптографии();
		
		ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ПараметрыКриптографии);
		
		Оповещение = Новый ОписаниеОповещения("ПослеСозданияМенеджераКриптографии", ЭтотОбъект, ПараметрыВыполнения);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "", Ложь);
		
	Иначе
		ПослеПодготовкиКлиентскихДанных(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодготовкиКлиентскихДанных(ПараметрыВыполнения)
	
	ПараметрыВыполненияСервер = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыВыполнения);
	ПараметрыВыполненияСервер.Удалить("ОповещениеОЗавершении");
	ПараметрыВыполненияСервер.Удалить("ПараметрыОткрытияМастера");
		
	Если ПараметрыВыполнения.ОткрыватьОкноДиагностики Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"ОбщийМодуль.ДиагностикаЭДОКлиент.ПослеПодготовкиКлиентскихДанных");
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ФормаДиагностикиЗакрытие", ЭтотОбъект, ПараметрыВыполнения);
		ОткрытьФорму("Обработка.ДиагностикаЭДО.Форма.ДиагностикаЭДО",
			ПараметрыВыполненияСервер,,,,, ОбработчикЗакрытия);
	Иначе
		ДлительнаяОперация = ДиагностикаЭДОВызовСервера.ВыполнитьДиагностику(ПараметрыВыполненияСервер);
		ПараметрыВыполнения.ДлительнаяОперация = ДлительнаяОперация;
		ПродолжитьВыполнениеДиагностики(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеДиагностики(ПараметрыВыполнения) Экспорт
	
	ДлительнаяОперация = ПараметрыВыполнения.ДлительнаяОперация;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершенииСервернойДиагностики = Новый ОписаниеОповещения("ПослеВыполненияСервернойДиагностики", ЭтотОбъект, ПараметрыВыполнения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершенииСервернойДиагностики, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеВыполненияСервернойДиагностики(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Статус = "Отменено" Тогда
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.РезультатДиагностики = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография()) Тогда
		РезультатДиагностикиКриптографии = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
			ПараметрыВыполнения.РезультатДиагностики, ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография());
		СертификатыДляПроверки = РезультатДиагностикиКриптографии.ПривязанныеКУчетнымЗаписямСертификаты;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СертификатыДляПроверки,
			ПараметрыВыполнения.ДополнительныеСертификатыДляПроверки, Истина);
		ПараметрыВыполнения.СертификатыДляПроверки = СертификатыДляПроверки;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ЗапроситьПаролиСертификатов(Контекст);
	Иначе
		ВыполнитьКлиентскуюДиагностику(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКлиентскуюДиагностику(ПараметрыВыполнения)
	
	Замер = ОценкаПроизводительностиКлиент.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ДиагностикаЭДОКлиент.ВыполнитьКлиентскуюДиагностику");
	ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте = Замер;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеВыполненияКлиентскойДиагностики", ЭтотОбъект);
	
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ДиагностикаКриптографии", ЭтотОбъект, Контекст));
	Обработчики.Добавить(Новый ОписаниеОповещения("ТестАутентификации", ЭтотОбъект, Контекст));
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклНачать(ОбработчикЗавершения, Неопределено, Обработчики, Контекст);
	
КонецПроцедуры

Процедура ПослеВыполненияКлиентскойДиагностики(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыВыполненияДляОтчета = Новый Структура;
	
	Если ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография()) Тогда
		
		РезультатДиагностикиКриптографии = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
			Контекст.ПараметрыВыполнения.РезультатДиагностики, ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография());
		ОбщийРезультат = Истина;
		Для каждого РезультатВидаДиагностики Из РезультатДиагностикиКриптографии.Результаты Цикл
			ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
		КонецЦикла; 
		РезультатДиагностикиКриптографии.Результат = ОбщийРезультат;
		
		ПараметрыВыполненияДляОтчета.Вставить("ИнформационнаяБазаФайловая");
		ПараметрыВыполненияДляОтчета.Вставить("ИмяКомпьютераКлиент");
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияДляОтчета, Контекст.ПараметрыВыполнения);
		
	КонецЕсли;
	
	РезультатДиагностикиТестАутентификации = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
		Контекст.ПараметрыВыполнения.РезультатДиагностики, ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации());
	Если РезультатДиагностикиТестАутентификации <> Неопределено Тогда
		ОбщийРезультат = Истина;
		Для каждого РезультатВидаДиагностики Из РезультатДиагностикиТестАутентификации.Результаты Цикл
			ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
		КонецЦикла; 
		РезультатДиагностикиТестАутентификации.Результат = ОбщийРезультат;
	КонецЕсли;
	
	ДиагностикаЭДОВызовСервера.ЗаполнитьОтчетыДляАдминистратора(Контекст.ПараметрыВыполнения.РезультатДиагностики,
		Контекст.ПараметрыВыполнения.ВидыДиагностики, ПараметрыВыполненияДляОтчета);
	
	ОбщийРезультат = Истина;
	Для каждого РезультатВидаДиагностики Из Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты Цикл
		ОбщийРезультат = ОбщийРезультат И РезультатВидаДиагностики.Значение.Результат <> Ложь;
	КонецЦикла;
	Контекст.ПараметрыВыполнения.РезультатДиагностики.Результат = ОбщийРезультат;
	
	Для каждого Сертификат Из Контекст.ПараметрыВыполнения.СертификатыСУстановленнымиПаролями Цикл
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Неопределено);
	КонецЦикла;
	
	Если ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография()) Тогда
		Контекст.ПараметрыВыполнения.СертификатыСУстановленнымиПаролями.Очистить();
		Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Очистить();
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗакончитьЗамерДлительнойОперации(Контекст.ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте, 1);
	
	ВыполнитьОбработкуОповещения(Контекст.ПараметрыВыполнения.ОповещениеОЗавершении, Контекст.ПараметрыВыполнения.РезультатДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область ДиагностикаКриптографии

Процедура ДиагностикаКриптографии(Результат, Контекст) Экспорт
	
	Если Не ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография()) Тогда
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
		Возврат;
	КонецЕсли;
	
	Если Контекст.ПараметрыВыполнения.ЕстьКриптографияНаКлиенте
		И Контекст.ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте Тогда
		ОпределитьНаличиеКорневогоСертификатаГУЦ(Контекст);
	Иначе
		ПослеОпределенияНаличияКорневыхСертификатовГУЦ(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьПаролиСертификатов(Контекст) 
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеЗапросаПаролейСертификатов", ЭтотОбъект, Контекст);
	ВыполнятьПроверкиСертификатовВВебКлиенте = Контекст.ПараметрыВыполнения.ВыполнятьПроверкиСертификатовВВебКлиенте;
	
	Если ДиагностикаЭДОСлужебныйКлиент.ВозможенЗапросДополнительныхРазрешений() И Не ВыполнятьПроверкиСертификатовВВебКлиенте Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Неопределено);
	Иначе 
		Сертификаты = Контекст.ПараметрыВыполнения.СертификатыДляПроверки;
		
		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("ВвестиПарольСертификата", ЭтотОбъект));
		Обработчики.Добавить(Новый ОписаниеОповещения("СохранитьРезультатВводаПароля", ЭтотОбъект));
		
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклНачать(ОбработчикЗавершения, Сертификаты, Обработчики, Контекст.ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиПарольСертификата(Сертификат, Контекст) Экспорт
	
	РезультатДиагностикиКриптографии = Контекст.РезультатДиагностики.Результаты.Криптография;
	СертификатЕстьВЛичномХранилище = РезультатДиагностикиКриптографии.СертификатыОтсутствующиеВЛичномХранилище.Найти(Сертификат) = Неопределено;
	ЭтоОблачныйСертификат = РезультатДиагностикиКриптографии.ОблачныеСертификаты.Найти(Сертификат) <> Неопределено;
	ПарольСертификата = РезультатДиагностикиКриптографии.ПаролиСертификатов[Сертификат];
	Если Не ЗначениеЗаполнено(ПарольСертификата) И Не ЭтоОблачныйСертификат
		И Контекст.СертификатыСУстановленнымиПаролями.Найти(Сертификат) = Неопределено
		И СертификатЕстьВЛичномХранилище Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сертификат", Сертификат);
		ПараметрыФормы.Вставить("Пояснение", Контекст.ПояснениеФормыВводаПароляСертификата);
		ФормаВводаПароля = ОткрытьФорму("Обработка.ДиагностикаЭДО.Форма.ВводПароляСертификата",
			ПараметрыФормы,,,,, ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклСледующийОбработчик(Контекст),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Контекст.Вставить("ФормаВводаПароля", ФормаВводаПароля);
	Иначе 
		Если ЭтоОблачныйСертификат Или Не СертификатЕстьВЛичномХранилище Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, "");
		ИначеЕсли ЗначениеЗаполнено(ПарольСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, ПарольСертификата);
		КонецЕсли;
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРезультатВводаПароля(Результат, Контекст) Экспорт
	
	Если Контекст.Свойство("ФормаВводаПароля")
		И Контекст.ФормаВводаПароля.ЗавершениеРаботыПрограммы Тогда
		Возврат;
	КонецЕсли;
	
	Сертификат = ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклТекущийЭлементДанных(Контекст);
	Если Результат = Истина Тогда
		Контекст.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Добавить(Сертификат);
		Контекст.СертификатыСУстановленнымиПаролями.Добавить(Сертификат)
	КонецЕсли;
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура ПослеЗапросаПаролейСертификатов(Результат, Контекст) Экспорт
	
	ВыполнитьКлиентскуюДиагностику(Контекст.ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ОпределитьНаличиеКорневогоСертификатаГУЦ(Контекст)
	
	ПараметрыВыполнения = Контекст.ПараметрыВыполнения;
	НаличиеКорневогоСертификатаГУЦСервер = ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер;
	Если ПараметрыВыполнения.ЕстьКриптографияНаКлиенте И ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте
		И НаличиеКорневогоСертификатаГУЦСервер.Сертификаты.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ИнициализацияСертификатаПослеСозданияМенеджераКриптографии",
			ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "", Ложь);
	Иначе
		ПослеПоискаСертификата(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияСертификатаПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияХранилищаСертификатов", ЭтотОбъект, Контекст);
		Результат.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилищаСертификатовКриптографии.КорневыеСертификаты);
	Иначе 
		ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияХранилищаСертификатов(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ХранилищеСертификатовКриптографии") Тогда
		Контекст.Вставить("ХранилищеСертификатов", Результат);
		ОбработчикЗавершения = Новый ОписаниеОповещения("ПослеОпределенияНаличияКорневыхСертификатовГУЦ", ЭтотОбъект, Контекст);
		Сертификаты = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.Результаты.НаличиеКорневогоСертификатаГУЦСервер.Сертификаты;
		Обработчики = Новый Массив;
		Обработчики.Добавить(Новый ОписаниеОповещения("НайтиСертификатПоОтпечатку", ЭтотОбъект, Контекст));
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклНачать(ОбработчикЗавершения, Сертификаты, Обработчики, Контекст);
	Иначе 
		ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоОтпечатку(Результат, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПоискаСертификата", ЭтотОбъект, Контекст);
	Контекст.ХранилищеСертификатов.НачатьПоискПоОтпечатку(Оповещение,
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклТекущийЭлементДанных(Контекст).Отпечаток);
	
КонецПроцедуры

Процедура ПослеПоискаСертификата(Результат, Контекст) Экспорт
	
	РезультатКриптография = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
		Контекст.ПараметрыВыполнения.РезультатДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография());
	ОписаниеСертификата = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклТекущийЭлементДанных(Контекст));
	Если ОписаниеСертификата <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("СертификатКриптографии") Тогда
			ОписаниеСертификата.Результат = Истина;
		Иначе
			Если ТипЗнч(Результат) = Тип("Строка") Тогда
				ШаблонОшибки = НСтр("ru = 'Ошибка при проверке наличия корневого сертификата ГУЦ: %1'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонОшибки, Результат));
			ИначеЕсли Контекст.ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте = Истина Тогда
				ОписаниеСертификата.Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦКлиент.Сертификаты.Добавить(ОписаниеСертификата);
	КонецЕсли;
	
	Если Контекст.Свойство("ИмяВременногоКаталога") Тогда
		УдаляемыйФайл = Контекст.ИмяВременногоКаталога;
	ИначеЕсли Контекст.Свойство("ИмяВременногоФайла") Тогда
		УдаляемыйФайл = Контекст.ИмяВременногоФайла;
	КонецЕсли;
	
	Если УдаляемыйФайл <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияФайлов", ЭтотОбъект, Контекст, "ПриОшибкеУдаленияФайлов", ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, УдаляемыйФайл);
	Иначе 
		ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОпределенияНаличияКорневыхСертификатовГУЦ(Результат, Контекст) Экспорт
	
	РезультатКриптография = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
		Контекст.ПараметрыВыполнения.РезультатДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография());
		
	ДиагностикаЭДОКлиентСервер.ЗаполнитьРезультатПроверкиКорневыхСертификатовГУЦ(РезультатКриптография.Результаты.НаличиеКорневогоСертификатаГУЦКлиент);
	ОпределитьНаличиеУстановленныхПрограмм(Контекст);
	
КонецПроцедуры

Процедура ПослеУдаленияФайлов(Контекст) Экспорт
	
	ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	
КонецПроцедуры

Процедура ПриОшибкеУдаленияФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст);
	
КонецПроцедуры

Процедура ПослеОпределенияНаличияКорневогоСертификатаГУЦ(Контекст) 
	
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура ОпределитьНаличиеУстановленныхПрограмм(Контекст)
	
	РезультатДиагностикиКриптографии = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография;
	Если РезультатДиагностикиКриптографии.ИспользоватьЭлектроннуюПодписьВМоделиСервиса И Не РезультатДиагностикиКриптографии.ЕстьНеоблачныеСертификаты Тогда
		РезультатПроверки = Новый Массив;
		ОписаниеПрограммы = Новый Структура;
		ОписаниеПрограммы.Вставить("ТипПрограммы", 0);
		ОписаниеПрограммы.Вставить("РезультатПроверкиНаКлиенте", "");
		ОписаниеПрограммы.Вставить("РезультатПроверкиНаСервере", НСтр("ru = 'Не установлена на сервере'"));
		РезультатПроверки.Добавить(ОписаниеПрограммы);
		ПослеПоискаУстановленныхПрограмм(РезультатПроверки, Контекст);
	Иначе 
		Оповещение = Новый ОписаниеОповещения("ПослеПоискаУстановленныхПрограмм", ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(Оповещение, Новый Массив, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПоискаУстановленныхПрограмм(Результат, Контекст) Экспорт
	
	УстановленаНаКлиенте = Ложь;
	УстановленаНаСервере = Ложь;
	Для каждого ОписаниеПрограммы Из Результат Цикл
		Если ОписаниеПрограммы.ТипПрограммы <> 1 Тогда
			УстановленаНаКлиенте = УстановленаНаКлиенте Или Не ЗначениеЗаполнено(ОписаниеПрограммы.РезультатПроверкиНаКлиенте);
			УстановленаНаСервере = УстановленаНаСервере Или Не ЗначениеЗаполнено(ОписаниеПрограммы.РезультатПроверкиНаСервере);
		КонецЕсли;
	КонецЦикла;
	РезультатыКриптография = Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Криптография.Результаты;
	Если Контекст.ПараметрыВыполнения.ЕстьКриптографияНаКлиенте Тогда
		РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Результат = УстановленаНаКлиенте;
	КонецЕсли;
	Если Контекст.ПараметрыВыполнения.ЕстьКриптографияНаСервере Тогда
		РезультатыКриптография.НаличиеПрограммыКриптографииСервер.Результат = УстановленаНаСервере;
	КонецЕсли;
	
	РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Краткая = НСтр("ru = 'Установите программу криптографии'");
	РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Подробная =
	НСтр("ru = 'Установите программу криптографии.
	|Инструкция:
	|https://its.1c.ru/db/content/metod81/src/appsolutionselffinanced/signature/i8105832.htm
	|https://its.1c.ru/db/content/metod81/src/appsolutionselffinanced/signature/i8105834.htm'");

	РезультатыКриптография.НаличиеПрограммыКриптографииСервер.Рекомендация.Краткая =
		РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Краткая;
	РезультатыКриптография.НаличиеПрограммыКриптографииСервер.Рекомендация.Подробная =
		РезультатыКриптография.НаличиеПрограммыКриптографииКлиент.Рекомендация.Подробная;
	
	ПослеОпределенияНаличияУстановленныхПрограмм(Контекст);
	
КонецПроцедуры

Процедура ПослеОпределенияНаличияУстановленныхПрограмм(Контекст) 
	
	ПроверкиСертификатов(Контекст);
	
КонецПроцедуры

Процедура ПроверкиСертификатов(Контекст)
	
	ОценкаПроизводительностиКлиент.ЗафиксироватьЗамерДлительнойОперации(Контекст.ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте,
		1, "ПередВыполнениемПроверокСертификатов");
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверкиСертификатовПослеЦикла", ЭтотОбъект, Контекст);
	Сертификаты = Контекст.ПараметрыВыполнения.СертификатыДляПроверки;
	Обработчики = Новый Массив;
	Обработчики.Добавить(Новый ОписаниеОповещения("ПроверитьСертификат", ЭтотОбъект));
	
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклНачать(ОбработчикЗавершения, Сертификаты, Обработчики, Контекст.ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПроверитьСертификат(Сертификат, Контекст) Экспорт
	
	ПараметрыПроверкиСертификата = Новый Структура;
	ПараметрыПроверкиСертификата.Вставить("ПараметрыВыполнения", Контекст);
	ПараметрыПроверкиСертификата.Вставить("БезПодтверждения", Истина);
	ПараметрыПроверкиСертификата.Вставить("ПроверкаПриВыборе", Истина);
	ПараметрыПроверкиСертификата.Вставить("Результат", Неопределено);
	ПараметрыПроверкиСертификата.Вставить("ОбработкаРезультата", Новый ОписаниеОповещения("ПослеПроверкиСертификата", ЭтотОбъект, ПараметрыПроверкиСертификата));
	ОбработкаЗавершения = Новый ОписаниеОповещения("ПослеЗакрытияФормыПроверкиСертификата", ЭтотОбъект, ПараметрыПроверкиСертификата);
	
	ПараметрыПроверкиСертификата.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	Если Контекст.РезультатДиагностики.Результаты.Криптография.СертификатыСУстановленнымиПаролями.Найти(Сертификат) <> Неопределено Тогда
		ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ПараметрыПроверкиСертификата);
	Иначе 
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Результат <> Неопределено Тогда
		ДополнительныеПараметры.Результат.ПроверкиПройдены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыПроверкиСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатДиагностики = ДополнительныеПараметры.ПараметрыВыполнения.РезультатДиагностики;
	
	РезультатПроверкиСертификата = Новый Структура;
	РезультатПроверкиСертификата.Вставить("ОбщийРезультатПроверок", Неопределено);
	РезультатПроверкиСертификата.Вставить("ПроверкиНаКлиенте", Неопределено);
	РезультатПроверкиСертификата.Вставить("ПроверкиНаСервере", Неопределено);
	РезультатПроверкиСертификата.Вставить("Рекомендации", Новый Структура);
	РезультатПроверкиСертификата.Вставить("Результат", ДополнительныеПараметры.Результат);
	
	Сертификат = ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклТекущийЭлементДанных(ДополнительныеПараметры.ПараметрыВыполнения);
	
	Если ДополнительныеПараметры.Результат = Неопределено Тогда
		РезультатДиагностики.Результаты.Криптография.Результаты.ПроверкиСертификатов.Сертификаты.Вставить(Сертификат, РезультатПроверкиСертификата);
	Иначе
		ДополнительныеПараметры.Результат.ПроверкиПройдены = Истина;
		
		ОбщийРезультатПроверок = ОбъединитьРезультатыПроверокСертификатов(ДополнительныеПараметры.Результат);
		Если ДополнительныеПараметры.Результат.ПроверкиНаКлиенте = Неопределено Тогда
			ПроверкиНаКлиенте = Неопределено;
		Иначе 
			ПроверкиНаКлиенте = ДополнительныеПараметры.Результат.ПроверкиНаКлиенте;
		КонецЕсли;
		Если ДополнительныеПараметры.Результат.ПроверкиНаСервере = Неопределено Тогда
			ПроверкиНаСервере = Неопределено;
		Иначе 
			ПроверкиНаСервере = ДополнительныеПараметры.Результат.ПроверкиНаСервере;
		КонецЕсли;
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(ОбщийРезультатПроверок);
		Если Не ВсеПроверкиУспешны Тогда
			РезультатПроверкиСертификата.ОбщийРезультатПроверок = ОбщийРезультатПроверок;
			РезультатПроверкиСертификата.ПроверкиНаКлиенте      = ПроверкиНаКлиенте;
			РезультатПроверкиСертификата.ПроверкиНаСервере      = ПроверкиНаСервере;
			РезультатПроверкиСертификата.Рекомендации           = РекомендацииПроверокСертификата();
			РезультатДиагностики.Результаты.Криптография.Результаты.ПроверкиСертификатов.Сертификаты.Вставить(
				Сертификат, РезультатПроверкиСертификата);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(ДополнительныеПараметры, ДополнительныеПараметры.ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПроверкиСертификатовПослеЦикла(Результат, Контекст) Экспорт
	
	Если (Результат.ЕстьКриптографияНаКлиенте Или Результат.ЕстьКриптографияНаСервере) И Результат.ЕстьМенеджерКриптографииНаКлиенте Тогда
		ПроверкиСертификатов = Результат.РезультатДиагностики.Результаты.Криптография.Результаты.ПроверкиСертификатов;
		ПроверкиСертификатов.Результат = ПроверкиСертификатов.Сертификаты.Количество() = 0;
	КонецЕсли;
	КоличествоДанных = Контекст.ПараметрыВыполнения.СертификатыДляПроверки.Количество();
	ОценкаПроизводительностиКлиент.ЗафиксироватьЗамерДлительнойОперации(Контекст.ПараметрыВыполнения.ЗамерДиагностикиНаКлиенте, КоличествоДанных, "ПослеВыполненияПроверокСертификатов");
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Неопределено, Контекст);
	
КонецПроцедуры

Функция ОбъединитьРезультатыПроверокСертификатов(РезультатыПроверок)
	
	ПараметрыКриптографии = ПараметрыКриптографии();
	
	Если ПараметрыКриптографии.ЕстьКриптографияНаКлиенте И Не ПараметрыКриптографии.ЕстьКриптографияНаСервере Тогда
		Возврат РезультатыПроверок.ПроверкиНаКлиенте;
	ИначеЕсли ПараметрыКриптографии.ЕстьКриптографияНаСервере И Не ПараметрыКриптографии.ЕстьКриптографияНаКлиенте Тогда
		Возврат РезультатыПроверок.ПроверкиНаСервере;
	Иначе 
		Результат = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РезультатыПроверок.ПроверкиНаКлиенте);
		ПроверятьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере();
		СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
		Для каждого КлючИЗначение Из Результат Цикл
			Если КлючИЗначение.Ключ = "ЗаконныйСертификат" Тогда
				Если РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ] Тогда
					Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
				Иначе 
					Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ]);
				КонецЕсли;
			ИначеЕсли КлючИЗначение.Ключ = "ДанныеСертификата" Тогда
				ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "НаличиеПрограммы" Тогда
				ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "НаличиеСертификата" Тогда
				ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "Подписание" Тогда
				ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "ПроверкаПодписи" Тогда
				ОбъединитьРезультатыПроверокПоФлагуПроверять(КлючИЗначение, ПроверятьЭлектронныеПодписиНаСервере, РезультатыПроверок, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "Расшифровка" Тогда
				ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат);
			ИначеЕсли КлючИЗначение.Ключ = "Шифрование" Тогда
				ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбъединитьРезультатыПроверокПоФлагамПроверятьИСоздавать(КлючИЗначение, РезультатыПроверок, Результат)
	
	Если РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]
		И РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ] Тогда
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
	Иначе 
		Если РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ] Тогда
			ПроверкиСОшибкой = РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ];
		Иначе 
			ПроверкиСОшибкой = РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ];
		КонецЕсли;
		Результат.Вставить(КлючИЗначение.Ключ, ПроверкиСОшибкой);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьРезультатыПроверокПоФлагуСоздавать(КлючИЗначение, РезультатыПроверок, СоздаватьЭлектронныеПодписиНаСервере, Результат)
	
	Если СоздаватьЭлектронныеПодписиНаСервере Тогда
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ]);
	Иначе 
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
	КонецЕсли;

КонецПроцедуры

Процедура ОбъединитьРезультатыПроверокПоФлагуПроверять(КлючИЗначение, ПроверятьЭлектронныеПодписиНаСервере, РезультатыПроверок, Результат)
	
	Если ПроверятьЭлектронныеПодписиНаСервере Тогда
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаСервере[КлючИЗначение.Ключ]);
	Иначе 
		Результат.Вставить(КлючИЗначение.Ключ, РезультатыПроверок.ПроверкиНаКлиенте[КлючИЗначение.Ключ]);
	КонецЕсли;

КонецПроцедуры

Функция ВсеПроверкиСертификатаВыполненыУспешно(РезультатПроверки) Экспорт
	
	Если РезультатПроверки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если РезультатПроверки.ПроверкиНаКлиенте = Неопределено И РезультатПроверки.ПроверкиНаСервере = Неопределено Тогда
		ВсеПроверкиУспешны = Ложь;
	ИначеЕсли РезультатПроверки.ПроверкиНаКлиенте = Неопределено Тогда
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаСервере);
	ИначеЕсли РезультатПроверки.ПроверкиНаСервере = Неопределено Тогда
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаКлиенте);
	Иначе
		ВсеПроверкиУспешны = ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаКлиенте)
		И ВидПроверкиСертификатаВыполненУспешно(РезультатПроверки.ПроверкиНаСервере);
	КонецЕсли;
	
	Возврат ВсеПроверкиУспешны;
	
КонецФункции

Функция ВидПроверкиСертификатаВыполненУспешно(Проверки)
	
	Для каждого КлючИЗначение Из Проверки Цикл
		Если Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Ошибка") И КлючИЗначение.Значение <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РекомендацииПроверокСертификата() 
	
	Рекомендации = Новый Структура;
	Рекомендации.Вставить("НаличиеСертификата", НСтр("ru = 'Установите сертификат в личный список(личное хранилище на компьютере) и свяжите его с закрытым ключом.'"));
	Рекомендации.Вставить("ДанныеСертификата",  НСтр("ru = 'Проверьте, не закончился ли срок действия сертификата, нет ли сертификата в списке отозванных.'"));
	Рекомендации.Вставить("НаличиеПрограммы",   НСтр("ru = 'Установите программу криптографии, указанную в сертификате.'"));
	Рекомендации.Вставить("Подписание",         НСтр("ru = 'Проверьте правильность введенного пароля'"));
	Рекомендации.Вставить("ПроверкаПодписи",    "");
	Рекомендации.Вставить("Шифрование",         "");
	Рекомендации.Вставить("Расшифровка",        НСтр("ru = 'Проверьте правильность введенного пароля'"));
	
	Возврат Рекомендации;
	
КонецФункции

Процедура ПослеСозданияМенеджераКриптографии(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
		ПараметрыВыполнения.ЕстьМенеджерКриптографииНаКлиенте = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковСертификатов", ЭтотОбъект, ПараметрыВыполнения);
		КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	Иначе
		ПослеПолученияОтпечатковСертификатов(КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков(),
			ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковСертификатов(Результат, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.РезультатыПолученияОтпечатков = Результат;
	ПослеПодготовкиКлиентскихДанных(ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТестАутентификации

Процедура ТестАутентификации(Результат, Контекст) Экспорт
	
	Если Не ДиагностикаЭДОКлиентСервер.ЕстьВидДиагностики(Контекст.ПараметрыВыполнения.ВидыДиагностики,
		ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации()) Тогда
		ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
		Возврат;
	КонецЕсли;
	
	УчетныеЗаписи = Новый Массив;
	Для каждого ДанныеУчетнойЗаписи Из Контекст.ПараметрыВыполнения.РезультатДиагностики.ДанныеУчетныхЗаписей Цикл
		Если Не ДанныеУчетнойЗаписи.Значение.ЭтоПрямойОбмен Тогда
			УчетныеЗаписи.Добавить(ДанныеУчетнойЗаписи.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	Оповещение = Новый ОписаниеОповещения("ТестАутентификацииПослеАвторизации", ЭтотОбъект, Контекст);
	
	ПараметрыПодписки = СинхронизацияЭДОКлиент.НовыеПараметрыПодпискиНаОперациюАвторизации();
	ПараметрыПодписки.ПослеПолученияПараметровСинхронизации = Новый ОписаниеОповещения(
		"ТестАутентификацииПослеПолученияПараметровСинхронизации", ЭтотОбъект, Контекст);
	
	СинхронизацияЭДОКлиент.АвторизоватьсяВСервисеЭлектронногоДокументооборота(
		Оповещение, КонтекстДиагностики, УчетныеЗаписи, ПараметрыПодписки);
	
КонецПроцедуры

Процедура ТестАутентификацииПослеПолученияПараметровСинхронизации(ПараметрыСинхронизации, Контекст) Экспорт
	
	ПропускаемыеКлючиСинхронизации = Новый Массив;
	
	Для Каждого КлючСинхронизации Из ПараметрыСинхронизации.КлючиСинхронизации Цикл
		КоличествоСертификатовСОтказомОтВводаПароля = 0;
		Для Каждого Сертификат Из КлючСинхронизации.Значение.Сертификаты Цикл
			Если Контекст.ПараметрыВыполнения.СертификатыСУстановленнымиПаролями.Найти(
				Сертификат.Ссылка) = Неопределено Тогда
				КоличествоСертификатовСОтказомОтВводаПароля = КоличествоСертификатовСОтказомОтВводаПароля + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоСертификатовСОтказомОтВводаПароля = КлючСинхронизации.Значение.Сертификаты.Количество() Тогда
			ПропускаемыеКлючиСинхронизации.Добавить(КлючСинхронизации.Ключ);
			Для Каждого Сертификат Из КлючСинхронизации.Значение.Сертификаты Цикл
				ДобавитьОшибкуТестаАутентификации(Контекст, КлючСинхронизации.Ключ, "", Сертификат, Ложь);
			КонецЦикла;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КлючСинхронизации.Значение.Сертификаты) Тогда
			РезультатыДиагностикиКриптографии = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
			Контекст.ПараметрыВыполнения.РезультатДиагностики,
				ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография()).Результаты;
			ЕстьПрограммаКриптографии = РезультатыДиагностикиКриптографии.НаличиеПрограммыКриптографииКлиент.Результат
				= Истина Или РезультатыДиагностикиКриптографии.НаличиеПрограммыКриптографииСервер.Результат = Истина;

			Если Не ЕстьПрограммаКриптографии Тогда
				ТекстОшибки = НСтр("ru = 'Отсутствует программа криптографии. Тест не выполнен.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.
								   |Чтобы добавить сертификат, перейдите на вкладку ""Сертификаты"" учетной записи ЭДО и нажмите кнопку ""Добавить""'");
			КонецЕсли;
			ДобавитьОшибкуТестаАутентификации(Контекст, КлючСинхронизации.Ключ, ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючСинхронизации Из ПропускаемыеКлючиСинхронизации Цикл
		ПараметрыСинхронизации.КлючиСинхронизации.Удалить(КлючСинхронизации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестАутентификацииПослеАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(РезультатАвторизации.КонтекстДиагностики);
	Для каждого Ошибка Из Ошибки Цикл
		Если Не ЗначениеЗаполнено(Ошибка.УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьОшибкуТестаАутентификации(Контекст, Ошибка.УчетнаяЗапись, Ошибка.КраткоеПредставлениеОшибки,
			Ошибка.Сертификат);
	КонецЦикла;
	
	Для Каждого КлючСинхронизации Из РезультатАвторизации.КлючиСинхронизации Цикл
		ИдентификаторЭДО = КлючСинхронизации.Ключ;
		ДанныеУчетнойЗаписи = Контекст.ПараметрыВыполнения.РезультатДиагностики.ДанныеУчетныхЗаписей[ИдентификаторЭДО];
		Если ЗначениеЗаполнено(КлючСинхронизации.Значение.МаркерРасшифрованный)
			И ДанныеУчетнойЗаписи.СпособОбменаЭД = ПредопределенноеЗначение(
				"Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
			СверитьУчетныеДанныеСОператором(Контекст, ИдентификаторЭДО,
				КлючСинхронизации.Значение.МаркерРасшифрованный, КлючСинхронизации.Значение.ВыбранныйСертификат);
		КонецЕсли;
	КонецЦикла;
	
	Если ДиагностикаЭДОКлиентСервер.СкрыватьРезультатТестаАутентификации(
		Контекст.ПараметрыВыполнения.РезультатДиагностики) Тогда
		Контекст.ПараметрыВыполнения.РезультатДиагностики.Результаты.Удалить(ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации());
	Иначе 
		РезультатДиагностикиТестАутентификации = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
			Контекст.ПараметрыВыполнения.РезультатДиагностики, ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации());
		РезультатДиагностикиТестАутентификации.Результаты.ТестАутентификации.Результат =
			РезультатДиагностикиТестАутентификации.Результаты.ТестАутентификации.УчетныеЗаписи.Количество() = 0;
	КонецЕсли;
	
	ОбщегоНазначенияБЭДКлиент.АсинхронныйЦиклВыполнитьСледующийОбработчик(Истина, Контекст);
	
КонецПроцедуры

Процедура СверитьУчетныеДанныеСОператором(Контекст, ИдентификаторЭДО, РасшифрованныйМаркер, Сертификат)
	
	УчетныеДанныеОператора = ДиагностикаЭДОВызовСервера.УчетныеДанныеАбонентаТакском(РасшифрованныйМаркер);
	Если УчетныеДанныеОператора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при получении учетных данных абонента Такском. Подробнее см. в журнале регистрации'");
		ДобавитьОшибкуТестаАутентификации(Контекст, ИдентификаторЭДО, ТекстСообщения, Сертификат);
	Иначе
		Если УчетныеДанныеОператора.ИдентификаторОрганизации <> ИдентификаторЭДО Тогда
			ШаблонСообщения = НСтр("ru = 'Идентификатор организации ""%1"", привязанный к учетной записи, отличается от указанного.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, УчетныеДанныеОператора.ИдентификаторОрганизации);
			ДобавитьОшибкуТестаАутентификации(Контекст, ИдентификаторЭДО, ТекстСообщения, Сертификат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкуТестаАутентификации(Контекст, ИдентификаторЭДО, Ошибка,
	Сертификат = Неопределено, ТестВыполнялся = Истина) 
	
	РезультатДиагностики = Контекст.ПараметрыВыполнения.РезультатДиагностики;
	РезультатДиагностикиТестАутентификации = ДиагностикаЭДОКлиентСервер.РезультатВидаДиагностики(
		РезультатДиагностики, ДиагностикаЭДОКлиентСервер.ВидДиагностикиТестАутентификации());
		
	ДанныеУчетнойЗаписи = РезультатДиагностики.ДанныеУчетныхЗаписей[ИдентификаторЭДО];
	Если ДанныеУчетнойЗаписи = Неопределено Тогда 
		НаименованиеУчетнойЗаписи = "";
	Иначе 
		НаименованиеУчетнойЗаписи = ДанныеУчетнойЗаписи.НаименованиеУчетнойЗаписи;
	КонецЕсли;
	РезультатТестаАутентификации = Новый Структура;
	РезультатТестаАутентификации.Вставить("Идентификатор",  ИдентификаторЭДО);
	РезультатТестаАутентификации.Вставить("УчетнаяЗапись",  НаименованиеУчетнойЗаписи);
	РезультатТестаАутентификации.Вставить("Сертификат",     Сертификат);
	РезультатТестаАутентификации.Вставить("Ошибка",         ?(Ошибка = "" И Не ТестВыполнялся, НСтр("ru = 'Проверка не выполнялась'"), Ошибка));
	РезультатТестаАутентификации.Вставить("ТестВыполнялся", ТестВыполнялся);
	
	РезультатДиагностикиТестАутентификации.Результаты.ТестАутентификации.УчетныеЗаписи.Добавить(РезультатТестаАутентификации);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее 

Функция СоответствиеВидовДиагностикиВидамОшибок() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(ДиагностикаЭДОКлиентСервер.ВидДиагностикиИнтернетСоединение(),
		ИнтернетСоединениеБЭДКлиентСервер.ВидОшибкиИнтернетСоединение());
	Соответствие.Вставить(ДиагностикаЭДОКлиентСервер.ВидДиагностикиКриптография(),
		КриптографияБЭДКлиентСервер.ВидОшибкиКриптография());
	Соответствие.Вставить(ДиагностикаЭДОКлиентСервер.ВидДиагностикиИнтернетПоддержка(),
		ИнтеграцияБИПБЭДКлиентСервер.ВидОшибкиИнтернетПоддержка());
	Соответствие.Вставить(ДиагностикаЭДОКлиентСервер.ВидДиагностикиРаботаСФайлами(),
		РаботаСФайламиБЭДКлиентСервер.ВидОшибкиРаботаСФайлами());
	
	Возврат Соответствие;
	
КонецФункции

Функция ДействиеПовторитьДействие() Экспорт
	
	Возврат "ПовторитьДействие";
	
КонецФункции

Процедура ФормаДиагностикиЗакрытие(РезультатЗакрытия, Контекст) Экспорт
	
	Обработчик = Неопределено;
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") Тогда
		Если РезультатЗакрытия = ДействиеПовторитьДействие() Тогда
			Обработчик = Контекст.ПараметрыОткрытияМастера.ОбработчикПовторенияДействия;
		КонецЕсли;
	Иначе 
		Обработчик = Контекст.ПараметрыОткрытияМастера.ОбработчикЗакрытия;
	КонецЕсли;
	
	ГруппаПредупреждения = Контекст.ПараметрыОткрытияМастера.ГруппаПредупреждения;
	Если РезультатЗакрытия = Истина И ГруппаПредупреждения <> Неопределено Тогда
		Если ТипЗнч(ГруппаПредупреждения) = Тип("ДекорацияФормы") Тогда
			ГруппаПредупреждения.Заголовок = "";
		Иначе 
			ГруппаПредупреждения.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Обработчик, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыКриптографии()
	
	ПроверятьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере();
	СоздаватьЭлектронныеПодписиНаСервере = ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
	
	ПараметрыКриптографии = Новый Структура;
	ПараметрыКриптографии.Вставить("ЕстьКриптографияНаСервере", ПроверятьЭлектронныеПодписиНаСервере Или СоздаватьЭлектронныеПодписиНаСервере);
	ПараметрыКриптографии.Вставить("ЕстьКриптографияНаКлиенте", Не ПроверятьЭлектронныеПодписиНаСервере Или Не СоздаватьЭлектронныеПодписиНаСервере);
	
	Возврат ПараметрыКриптографии;
	
КонецФункции
 
Процедура ИнформацияДляТехПоддержкиПослеСозданияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияИнформацииМодуляКриптографии", ЭтотОбъект, Контекст);
		МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Оповещение);
	Иначе
		ПослеПолученияИнформацииМодуляКриптографии(МенеджерКриптографии, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуля, Контекст) Экспорт
	
	Если ТипЗнч(ИнформацияМодуля) = Тип("ИнформацияМодуляКриптографии") Тогда
		Контекст.ТехническаяИнформация.Вставить("КриптопровайдерКлиент", ИнформацияМодуля.Имя);
	Иначе 
		Контекст.ТехническаяИнформация.Вставить("КриптопровайдерКлиент", ИнформацияМодуля);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.ТехническаяИнформация);
	
КонецПроцедуры

#Область ОшибкиСертификатов

Процедура ОткрытьОшибкиСертификата(Форма, Сертификат, РезультатПроверки) Экспорт
	
	ЭлектроннаяПодписьКлиент.ПоказатьРезультатПроверкиСертификата(Сертификат, РезультатПроверки, Форма,
		НСтр("ru = 'Результаты проверки сертификата'"), "ОбъединятьПоИли");
	
КонецПроцедуры

Процедура ОшибкиСертификатовВыбор(Форма, Элемент, Поле, ГруппаОшибкиСертификатов) Экспорт
	
	Если Поле = Форма.Элементы.ОшибкиСертификатовСертификат Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	ИначеЕсли Поле = Форма.Элементы.ОшибкиСертификатовОшибки Тогда
		ОткрытьОшибкиСертификата(Форма, Элемент.ТекущиеДанные.Сертификат, Элемент.ТекущиеДанные.РезультатПроверки);
	КонецЕсли;
	ГруппаОшибкиСертификатов.Скрыть();
	
КонецПроцедуры

Функция ЭтоСобытиеПроверкаСертификата(ИмяСобытия) Экспорт
	
	Возврат ИмяСобытия = ИмяСобытияПроверкаСертификата();
	
КонецФункции

Функция ИмяСобытияПроверкаСертификата()
	
	Возврат "МастерДиагностикиКриптографии_ПроверкаСертификата";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти



