
////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СЕРВИСАМИ НА ДИСКЕ ИТС:МЕДИЦИНА

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция производит попытку запуска диска ИТС:Медицина
//
// Параметры
//  ПараметрыЗапроса - Строка - параметры запрашиваемой операции (напр., путь к препарату)
//  ПараметрыЗапуска - Строка - параметры запуска (-Hidden)
//  ПутьКДискуИТС - Строка - путь к файлу запуска диска ИТС, если не указан, то будет осуществлена попытка
//                           обнаружить путь к диску ИТС.
//
Процедура ВыполнитьЗапросКСервисамИТСМедицина(ПараметрыЗапроса, ПараметрыЗапуска = "", ПутьКДискуИТС = "") Экспорт
	
#Если ВебКлиент Тогда
	ВызватьИсключение НСтр("ru = 'Работа с диском ИТС недоступна в веб-клиенте.'");
#Иначе
	
	Если ПустаяСтрока(ПутьКДискуИТС) Тогда
		ПутьКДискуИТС = ПутьЗапускаИТС();
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДискуИТС) Тогда
		ТекстОшибки = НСтр("ru='Диск ""ИТС Медицина"" не найден. Установите диск и повторите попытку'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СтрокаЗапуска = ПутьКДискуИТС + " " + ПараметрыЗапуска + " " + ПараметрыЗапроса;
	Оповещение = Новый ОписаниеОповещения("ПослеЗапускаДискаИТС", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	
#КонецЕсли
	
КонецПроцедуры

// Продолжение НайтиВБазеРЛСИнтерактивно, НайтиВБазеРЛС, ВыгрузитьСправочникиИзБазыРЛС
//
Процедура ВыполнитьЗапросКБазеРЛСНачало(ИмяФайлаЗапроса, Параметры) Экспорт
	
	ФайлЗапроса = Новый ТекстовыйДокумент;
	ФайлЗапроса.УстановитьТекст(Параметры.ТекстЗапроса);
	Попытка
		ФайлЗапроса.Записать(ИмяФайлаЗапроса);
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка при выполнении запроса к диску ""ИТС:Медицина"": не удалось создать файл запроса'")
			+ " - " + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ВыполнитьЗапросКБазеРЛС("{E6D699A2-0A2B-11d4-9346-00605203251D}::""" + ИмяФайлаЗапроса, Параметры.ПараметрыЗапуска, Параметры.ПутьКДискуИТС);
	
КонецПроцедуры

// Функция производит попытку запуска диска ИТС:Медицина с запросам к базе РЛС
//
// Параметры
//  ПараметрыЗапроса - Строка - параметры запрашиваемой операции (напр., путь к препарату)
//  ПараметрыЗапуска - Строка - параметры запуска (-Hidden)
//  ПутьКДискуИТС - Строка - путь к файлу запуска диска ИТС, если не указан, то будет осуществлена попытка
//                           обнаружить путь к диску ИТС.
//
Процедура ВыполнитьЗапросКБазеРЛС(ПараметрыЗапроса, ПараметрыЗапуска = "", ПутьКДискуИТС = "") Экспорт
	
	ПараметрыЗапроса  = "Issp://{31953A1A-03FC-4072-A57C-2ED1DC213B3E}/" + ПараметрыЗапроса;
	ВыполнитьЗапросКСервисамИТСМедицина(ПараметрыЗапроса, ПараметрыЗапуска, ПутьКДискуИТС);
	
КонецПроцедуры

// Открывает поиск в базе РЛС на диске ИТС:Медицина
//
// Параметры
//  ПараметрыПоиска  - Структура -
//      Ключ - "ИмяСправочника" или "Текст"
//      Значение - Структура со свойствами "Включить" и "Исключить"
//  СразуПоиск - Булево - произвести поиск сразу, или остаться на диске в стадии установки фильтров
//  ВыводитьСообщениеОбОтсутствииДокументов - булево, выводить сообщение "документы не найдены"
//  ПутьКДискуИТС - Строка - путь к файлу запуска диска ИТС, если не указан, то будет осуществлена попытка
//                           обнаружить путь к диску ИТС.
//
Процедура НайтиВБазеРЛСИнтерактивно(ПараметрыПоиска,
						СразуПоиск = Истина,
						ВыводитьСообщениеОбОтсутствииДокументов = Истина,
						ПутьКДискуИТС = "") Экспорт
	
	ТекстЗапроса = ИТСМедицинаКлиентСервер.СформироватьТекстЗапросаДанныхКБазеРЛС(
		ПараметрыПоиска,
		НСтр("ru='Поиск в базе РЛС.'"),
		СразуПоиск,
		ВыводитьСообщениеОбОтсутствииДокументов,
		Истина);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстЗапроса", ТекстЗапроса);
	Параметры.Вставить("ПутьКДискуИТС", ПутьКДискуИТС);
	Параметры.Вставить("ПараметрыЗапуска", "");
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросКБазеРЛСНачало", ЭтотОбъект, Параметры);
	ФайловыеФункцииБольничнаяАптекаКлиент.ИмяВременногоФайла(Оповещение, "rls");
	
КонецПроцедуры

// Открывает поиск в базе РЛС на диске ИТС:Медицина, результат поиска сохраняется в указанный файл
//
// Параметры
//  ПараметрыПоиска  - Структура -
//      Ключ - "ИмяСправочника" или "Текст"
//      Значение - Структура со свойствами "Включить" и "Исключить"
//  ИмяФайла - Строка - полное имя файла куда будет сохранен результат поиска
//  ПутьКДискуИТС - Строка - путь к файлу запуска диска ИТС, если не указан, то будет осуществлена попытка
//                           обнаружить путь к диску ИТС.
//
Процедура НайтиВБазеРЛС(ПараметрыПоиска, ИмяФайла, ПутьКДискуИТС = "") Экспорт
	
	ТекстЗапроса = ИТСМедицинаКлиентСервер.СформироватьТекстЗапросаДанныхКБазеРЛС(
		ПараметрыПоиска,
		НСтр("ru='Поиск в базе РЛС.'"),
		,
		,
		,
		ИмяФайла);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстЗапроса", ТекстЗапроса);
	Параметры.Вставить("ПутьКДискуИТС", ПутьКДискуИТС);
	Параметры.Вставить("ПараметрыЗапуска", " -Hidden");
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросКБазеРЛСНачало", ЭтотОбъект, Параметры);
	ФайловыеФункцииБольничнаяАптекаКлиент.ИмяВременногоФайла(Оповещение, "rls");
	
КонецПроцедуры

// Запрашивает справочники из базы РЛС с диска ИТС:Медицина
//
// Параметры
//  ЗапрашиваемыеСправочники - Массив - элемент массива: структура со свойствами
//      НомерСправочника - ID запрашиваемого справочника, 
//      ИмяФайла - путь к файлу, куда сохранить справочник
//      Отформатированный
//  ПутьКДискуИТС - Строка - путь к файлу запуска диска ИТС, если не указан, то будет осуществлена попытка
//                           обнаружить путь к диску ИТС.
//
Процедура ВыгрузитьСправочникиИзБазыРЛС(ЗапрашиваемыеСправочники, ПутьКДискуИТС = "") Экспорт
	
	ТекстЗапроса = ИТСМедицинаКлиентСервер.СформироватьТекстЗапросаДанныхКБазеРЛС(,,,, Ложь,,, ЗапрашиваемыеСправочники);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстЗапроса", ТекстЗапроса);
	Параметры.Вставить("ПутьКДискуИТС", ПутьКДискуИТС);
	Параметры.Вставить("ПараметрыЗапуска", " -Hidden");
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросКБазеРЛСНачало", ЭтотОбъект, Параметры);
	ФайловыеФункцииБольничнаяАптекаКлиент.ИмяВременногоФайла(Оповещение, "rls");
	
КонецПроцедуры

// Запрашивает описания в базе РЛС с диска ИТС:Медицина
//
// Параметры
//  ЗапрашиваемыеОписания  - массив с ссылка на описание в базе РЛС
//  ПутьКДискуИТС - Строка - путь к файлу запуска диска ИТС, если не указан, то будет осуществлена попытка
//                           обнаружить путь к диску ИТС.
//
Процедура ВыгрузитьОписанияПрепаратовИзБазыРЛС(ЗапрашиваемыеОписания, ПутьКДискуИТС = "") Экспорт
	
	ТекстЗапроса = "";
	Для каждого СсылкаНаОписание Из ЗапрашиваемыеОписания Цикл
		Если Не ПустаяСтрока(СсылкаНаОписание) Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС) + СокрЛП(СсылкаНаОписание);
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстОшибки = НСтр("ru='Ошибка при выполнении запроса к диску ""ИТС:Медицина"". Не заданы значения для поиска.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Каталог = КаталогОбменаДаннымиСБазойРЛС();
	Попытка
		СоздатьКаталог(Каталог);
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка при выполнении запроса к диску ""ИТС:Медицина"": не удалось создать файл запроса.'")
			+ ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ИмяФайлаЗапроса = Каталог + "\leksr_to_send";
	
	ФайлЗапроса = Новый ТекстовыйДокумент;
	ФайлЗапроса.УстановитьТекст(ТекстЗапроса);
	Попытка
		ФайлЗапроса.Записать(ИмяФайлаЗапроса);
	Исключение
		ТекстОшибки = НСтр("ru='Ошибка при выполнении запроса к диску ""ИТС Медицина"": не удалось создать файл запроса'")
			+ " - " + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ВыполнитьЗапросКБазеРЛС("src/about/send.html", " -Hidden", ПутьКДискуИТС);
	
КонецПроцедуры

// Проверяет использование диска ИТС в другой форме
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма, которая запрашивает проверку
//
// Возвращаемое значение
//  Булево - Истина, если диск ИТС никто не использует
//
Функция ДискИТССвободен() Экспорт
	
	// проверим нет ли других форм ждущих ответа с диска ИТС.
	ПараметрыДанных = Новый Структура("ЗагрузкаЗапрещена", Ложь);
	Оповестить("ИТСМедицина_ЗагрузкаДанныхСДискаИТС", ПараметрыДанных);
	
	Возврат Не ПараметрыДанных.ЗагрузкаЗапрещена;
	
КонецФункции

// Помещает набор файлов обмена данными с базой РЛС
// из локальной файловой системы во временное хранилище,
// и возвращает описание помещенных файлов.
//
// Параметры:
//  НомераРЛСЗагружаемыхФайлов - Массив - ключи поиска загружаемых файлов.
//
// Возвращаемое значение:
//  ПолученныеФайлы - Массив
//    * Структура(НомерРЛС, Файл)
//        ** НомерРЛС - Строка                   - отработанный номер РЛС.
//        ** Файл     - ОписаниеПереданногоФайла - описание помещенного во временное хранилище файла.
//
Функция ПолучитьОписанияТоваров(НомераРЛСЗагружаемыхФайлов) Экспорт
	
	КаталогЗагрузки = КаталогОбменаДаннымиСБазойРЛС();
	МаксимальноеКоличествоФайлов = 20;
	ПолученныеФайлы = Новый Массив;
	
	Для Каждого НомерРЛС Из НомераРЛСЗагружаемыхФайлов Цикл
		
		ПомещаемыеФайлы = Новый Массив;
		НайденныеФайлы = НайтиФайлы(КаталогЗагрузки, "rls" + Формат(НомерРЛС, "ЧДЦ=0; ЧГ=0"));
		Для каждого Файл Из НайденныеФайлы Цикл
			
			Если Файл.ЭтоФайл() Тогда
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя));
			КонецЕсли;
			
			Если МаксимальноеКоличествоФайлов И ПомещаемыеФайлы.Количество() = МаксимальноеКоличествоФайлов Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПомещенныеФайлы = Новый Массив;
		Если ПомещаемыеФайлы.Количество() Тогда
			
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь);
			Для каждого Файл Из ПомещенныеФайлы Цикл
				УдалитьФайлы(Файл.Имя);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Файл Из ПомещенныеФайлы Цикл
			ПолученныеФайлы.Добавить(Новый Структура("НомерРЛС, Файл", НомерРЛС, Файл));
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПолученныеФайлы;
	
КонецФункции

// Возвращает полное имя каталога обмена данными с базой РЛС.
//
// Возвращаемое значение:
//  Каталог - Строка - полное имя каталога обмена данными с базой РЛС.
//
Функция КаталогОбменаДаннымиСБазойРЛС() Экспорт
	
	Каталог = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), "itsmedtr");
	Возврат Каталог;
	
КонецФункции

// Открывает форму авторизации на сайте 1С:ИТС
//
Процедура АвторизоватьсяНаСайтеИТС(ВладелецФормы = Неопределено, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.АутентификацияНаСайтеИТС",, ВладелецФормы,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Возвращает данные аутентификации. Если данные не заданы, то может запросить данные у пользователя.
//
// Параметры:
//  ДанныеАутентификации - Структура - Возвращаемое значение, заполняется данными аутентификации.
//  ЗапросКПользователю - Булево - запросить данные у пользователя.
//  Оповещение - ОписаниеОповещения
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Булево - Истина, если данные получены.
//
Функция ПолучитьДанныеАутентификации(ДанныеАутентификации, Знач ЗапросКПользователю = Ложь, Оповещение = Неопределено, Форма = Неопределено) Экспорт
	
	Перем Логин, Пароль;
	
	Если ЗапросКПользователю Или Не ИТСМедицинаВызовСервера.ПолучитьПараметрыАутентификации(Логин, Пароль) Тогда
		АвторизоватьсяНаСайтеИТС(Форма, Оповещение);
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура("Логин ,Пароль", Логин, Пароль);
	Возврат Истина;
	
КонецФункции

// Открывает результат поиска на сайте 1с:ИТС
//
Процедура НайтиНаСайтеИТСИнтерактивно(ПараметрыПоиска) Экспорт
	
	СправочникиИТС = ИТСМедицинаКлиентСервер.ПолучитьСтруктуруСправочниковНаИТС();
	
	СтрокаПоиска = "";
	Фильтры = "";
	
	Для Каждого КлючИЗначение Из СправочникиИТС Цикл
		
		Если ПараметрыПоиска.Свойство(КлючИЗначение.Ключ) Тогда
			
			ПараметрыСправочника = КлючИЗначение.Значение;
			Идентификатор = ПараметрыСправочника.Номер;
			
			Если ПараметрыПоиска[КлючИЗначение.Ключ].Свойство("Включить") Тогда
				Для Каждого ЭлементМассива Из ПараметрыПоиска[КлючИЗначение.Ключ].Включить Цикл
					Если ПараметрыСправочника.Свойство("ПоискСначалаСтроки") Тогда
						СтрокаПоиска = СтрокаПоиска + "|" + ЭлементМассива;
					Иначе
						Фильтры = Фильтры + ?(ПустаяСтрока(Фильтры), "", "&") + "a_" + Идентификатор + "[]=" + ЭлементМассива;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПоиска.Свойство("Текст") Тогда
		
		Если ПараметрыПоиска.Текст.Свойство("Включить") Тогда
			СтрокаПоиска = СтрокаПоиска + "|" + ПараметрыПоиска.Текст.Включить;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Фильтры) Тогда
		Фильтры = "?extended=1&" + Фильтры;
	КонецЕсли;
	
	URLСтрока = СтрШаблон("https://its.1c.ru/db/leksr/search/all/%1%2", Сред(СтрокаПоиска, 2), Фильтры);
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(URLСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерактивные команды работы с диском ИТС:Медицина

// Запускает ИТС:Медицина с открытой страницей поиска товаров в базе РЛС
//
Процедура ОткрытьПоискТоваровВБазеРЛС() Экспорт
	
	Источник = ИсточникИнформации();
	Если Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.ДискИТС") Тогда
		
		// симулируем поиск по тексту
		ПараметрыПоиска = Новый Структура;
		// фильтров нет
		ПараметрыПоиска.Вставить("Текст", Новый Структура("Включить", ""));
		НайтиВБазеРЛСИнтерактивно(ПараметрыПоиска, Ложь);
		
	ИначеЕсли Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС") Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/db/leksr#extsearch::");
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает ИТС:Медицина с поиском синонимов товара в базе РЛС
//
// Параметры
//  Товар - СправочникСсылка.РегистрЛекарственныхСредств
//
Процедура НайтиСинонимыТовараВБазеРЛС(Товар) Экспорт
	
	ПараметрыПоиска = ИТСМедицинаВызовСервера.ПолучитьПараметрыПоискаСинонимовТовара(Товар);
	Если ПараметрыПоиска.Количество() Тогда
		Источник = ИсточникИнформации();
		Если Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.ДискИТС") Тогда
			НайтиВБазеРЛСИнтерактивно(ПараметрыПоиска);
		ИначеЕсли Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС") Тогда
			НайтиНаСайтеИТСИнтерактивно(ПараметрыПоиска);
		КонецЕсли;
		ПоказатьОповещениеПользователя(
			НСтр("ru='ИТС:Медицина'"),
			ПолучитьНавигационнуюСсылку(Товар),
			НСтр("ru='Открыт поиск синонимов на ИТС:Медицина'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='ИТС:Медицина'"),
			ПолучитьНавигационнуюСсылку(Товар),
			НСтр("ru='Для текущего элемента невозможен поиск синонимов на ИТС:Медицина'"),
			БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
КонецПроцедуры

// Запускает ИТС:Медицина с открытой карточкой товара из базы РЛС
//
// Параметры
//  Товар - СправочникСсылка.РегистрЛекарственныхСредств
//
Процедура ОткрытьКарточкуТовараВБазеРЛС(Товар) Экспорт
	
	СсылкаНаОписание = ИТСМедицинаВызовСервера.ПолучитьСсылкиНаОписанияТоваров(Товар);
	Если СсылкаНаОписание.Количество() Тогда  
		Источник = ИсточникИнформации();
		Если Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.ДискИТС") Тогда
			ВыполнитьЗапросКБазеРЛС("src/" + СсылкаНаОписание[0].СсылкаНаОписание);
		ИначеЕсли Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС") Тогда
			СсылкаНаСайтеИТС = СтрШаблон("https://its.1c.ru/db/leksr#content:%1:1", Формат(СсылкаНаОписание[0].НомерРЛС, "ЧГ=0"));
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаСайтеИТС);
		КонецЕсли;
		ПоказатьОповещениеПользователя(
			НСтр("ru='ИТС:Медицина'"),
			ПолучитьНавигационнуюСсылку(Товар),
			НСтр("ru='Элемент открыт на ИТС:Медицина'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='ИТС:Медицина'"),
			ПолучитьНавигационнуюСсылку(Товар),
			НСтр("ru='Элемент не привязан к ИТС:Медицина'"),
			БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму обработки для загрузки описаний товаров из базы РЛС
//
Процедура ПринятьДанныеТоваровИзБазыРЛС() Экспорт
	
	Источник = ИсточникИнформации();
	Если Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.ДискИТС") Тогда
	
		Если Не ДискИТССвободен() Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.ЗагрузкаОписанийТоваров");
		
	ИначеЕсли Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС") Тогда
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.ЗагрузкаОписанийТоваровССайтаИТС",,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает ИТС:Медицина с открытой страницей выгрузки товаров из базы РЛС и открывает
// форму загрузки описаний товаров из базы РЛС.
//
// Параметры
//  Товары - Массив(СправочникСсылка.РегистрЛекарственныхСредств) - товары, которые нужно обновить
//
Процедура ОбновитьТоварыИзБазыРЛС(Товары, ОтменятьРучныеКорректировки = Ложь) Экспорт
	
	СсылкиНаОписание = ИТСМедицинаВызовСервера.ПолучитьСсылкиНаОписанияТоваров(Товары);
	
	Если СсылкиНаОписание.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	НомераРЛС = Новый СписокЗначений;
	ПутиКДаннымНаИТС = Новый Массив;
	
	Для Каждого Данные Из СсылкиНаОписание Цикл
		НомераРЛС.Добавить(Данные.НомерРЛС);
		ПутиКДаннымНаИТС.Добавить(Данные.СсылкаНаОписание);
	КонецЦикла;
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("НомераРЛС", НомераРЛС);
	ПараметрыОбновления.Вставить("ОтменятьРучныеКорректировки", ОтменятьРучныеКорректировки);
	
	Источник = ИсточникИнформации();
	Если Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.ДискИТС") Тогда
		
		Если Не ДискИТССвободен() Тогда
			Возврат;
		КонецЕсли;
		
		ВыгрузитьОписанияПрепаратовИзБазыРЛС(ПутиКДаннымНаИТС);
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.ЗагрузкаОписанийТоваров", ПараметрыОбновления);
		
	ИначеЕсли Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС") Тогда
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.ЗагрузкаОписанийТоваровССайтаИТС", ПараметрыОбновления,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает поиск и загрузку описаний препаратов по штрихкодам
//
// Параметры:
//  Штрихкоды - Массив - список штрихкодов
//
Процедура ЗагрузитьОписанияПрепаратовПоШтрихкодам(Штрихкоды) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Штрихкоды", Штрихкоды);
	
	Источник = ИсточникИнформации();
	Если Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.ДискИТС") Тогда
		
		Если Не ДискИТССвободен() Тогда
			ПоказатьПредупреждение(, НСтр("ru='Другая форма ожидает данные с диска ИТС. Выполнение Операция невозможно.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.ЗагрузкаОписанийТоваров", ПараметрыФормы);
		
	ИначеЕсли Источник = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС") Тогда
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.ЗагрузкаОписанийТоваровССайтаИТС", ПараметрыФормы,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настроек
//
Процедура ОткрытьФормуНастроек() Экспорт
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхСИТСМедицина.Форма.Настройки");
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ИсточникИнформации()
	
	ИсточникИнформации = Неопределено;
	#Если Не ВебКлиент Тогда
		Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
			ИсточникИнформации = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().НастройкиИТСМедицина.ИсточникИнформацииРегистраЛекарственныхСредств;
		КонецЕсли;
	#КонецЕсли
	
	Если Не ЗначениеЗаполнено(ИсточникИнформации) Тогда
		ИсточникИнформации = ПредопределенноеЗначение("Перечисление.ИсточникиИнформацииРегистраЛекарственныхСредств.СайтИТС");
	КонецЕсли;
	
	Возврат ИсточникИнформации;
	
КонецФункции

// Вызывается после запуска диска ИТС:Медицина
//
Процедура ПослеЗапускаДискаИТС(КодВозврата, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение пути запуска ИТС:Медицина

Функция ПутьЗапускаИТС()
	
	ПутьКДискуИТС = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().НастройкиИТСМедицина.ПутьЗапускаИТСвТерминальномРежиме;
	Если Не ПустаяСтрока(ПутьКДискуИТС) Тогда
		Возврат ПутьКДискуИТС;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		
		ПутьКДискуИТС = ПолучитьПутьЗапускаИТСМедицинаИзРеестра();
		Если Не ПустаяСтрока(ПутьКДискуИТС) Тогда
			Возврат ПутьКДискуИТС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьПутьЗапускаИТСМедицинаИзРеестра()
	
	ПутьКДискуИТС = НайтиЗначениеРеквизитаВСистемномРеестре("HKEY_LOCAL_MACHINE\SOFTWARE", "1C\ItsMed", "EXE");
	Если ЗначениеЗаполнено(ПутьКДискуИТС) Тогда
		Возврат ПутьКДискуИТС;
	КонецЕсли;
	
	ПутьКДискуИТС =  НайтиЗначениеРеквизитаВСистемномРеестре("HKEY_LOCAL_MACHINE\SOFTWARE", "1C\Iss", "EXE");
	Если ЗначениеЗаполнено(ПутьКДискуИТС) Тогда
		Возврат ПутьКДискуИТС;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция НайтиЗначениеРеквизитаВСистемномРеестре(Знач ВеткаПоиска, Знач ВеткаПриложения, Знач КлючЗаписи)
	
	Попытка
		Шелл = Новый COMОбъект("WScript.Shell");
		ЗначениеКлюча = Шелл.RegRead(ВеткаПоиска + "\" + ВеткаПриложения + "\" + КлючЗаписи);
	Исключение
		Попытка
			ВеткаПоиска = ВеткаПоиска + "\Wow6432Node";
			ЗначениеКлюча = Шелл.RegRead(ВеткаПоиска + "\" + ВеткаПриложения + "\" + КлючЗаписи);
		Исключение
			ЗначениеКлюча = Неопределено;
		КонецПопытки;
	КонецПопытки;
	
	Возврат ЗначениеКлюча;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
