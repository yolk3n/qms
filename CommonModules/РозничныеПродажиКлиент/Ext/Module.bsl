
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Контролирует параметры текущей кассовой смены, при необходимости открывает и закрывает кассовую смену.
//
// Параметры:
//  Форма - Форма - Форма документа в которой выполняется контроль кассовой смены
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ОбработатьСостояниеСмены(Форма, ОповещениеОЗавершении) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "КассаККМ") Тогда
		КассаККМ = Форма.Объект.КассаККМ;
	Иначе
		КассаККМ = Форма.КассаККМ;
	КонецЕсли;
	
	СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
	Форма.СостояниеКассовойСмены = СостояниеКассовойСмены;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, СостояниеКассовойСмены);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "КассоваяСмена")
		   И ТипЗнч(Форма.Объект.КассоваяСмена) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Форма.Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СостояниеКассовойСмены.СменаОткрыта Тогда
		Если Форма.ПраваДоступа.ОткрытьСмену Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ОткрытьКассовуюСмену", НСтр("ru = 'Открыть смену'"));
			Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОповещениеОЗавершении);
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ДополнительныеПараметры.Вставить("ПараметрыОперации", Новый Структура("Кассир", Форма.РеквизитыКассира.Наименование));
			Оповестить = Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры);
			
			ТекстВопроса = НСтр("ru = 'Перед выполнением операции требуется открыть новую кассовую смену.'");
			ПоказатьВопрос(Оповестить, ТекстВопроса, Кнопки);
			
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Кассовая смена не открыта.'"));
		КонецЕсли;
		
	ИначеЕсли СостояниеКассовойСмены.Ошибка24Часа Тогда
		Если Форма.ПраваДоступа.ОткрытьСмену
		   И Форма.ПраваДоступа.ЗакрытьСмену Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ЗакрытьИОткрытьКассовуюСмену", НСтр("ru = 'Открыть смену'"));
			Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОповещениеОЗавершении);
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ДополнительныеПараметры.Вставить("ПараметрыОперации", Новый Структура("Кассир", Форма.РеквизитыКассира.Наименование));
			Оповестить = Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры);
			
			ТекстВопроса = НСтр("ru = 'С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.'");
			ПоказатьВопрос(Оповестить, ТекстВопроса, Кнопки);
			
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.'"));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКассовуюСмену(ПараметрыКассыККМ, ПараметрыОперации, ОповещениеОЗавершении = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПараметрыКассыККМ"    , ПараметрыКассыККМ);
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповестить = Новый ОписаниеОповещения("ОткрытиеКассовойСменыЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОткрытияСмены = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияСмены, ПараметрыОперации);
		
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КассаККМ", ПараметрыКассыККМ.КассаККМ);
		ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Оповестить,
			Новый УникальныйИдентификатор,
			ИдентификаторУстройства,
			ПараметрыОткрытияСмены,
			ДополнительныеПараметры);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповестить, Новый Структура("Результат", Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьКассовуюСмену(ПараметрыКассыККМ, ПараметрыОперации, ОповещениеОЗавершении = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПараметрыКассыККМ"    , ПараметрыКассыККМ);
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповестить = Новый ОписаниеОповещения("ЗакрытиеКассовойСменыЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыЗакрытияСмены = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ЗаполнитьЗначенияСвойств(ПараметрыЗакрытияСмены, ПараметрыОперации);
		
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповестить,
			Новый УникальныйИдентификатор,
			ИдентификаторУстройства,
			ПараметрыЗакрытияСмены);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповестить, Новый Структура("Результат", Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура НапечататьОтчетБезГашения(ПараметрыКассыККМ, ПараметрыОперации, ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПараметрыКассыККМ"    , ПараметрыКассыККМ);
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		
		ПараметрыПечатиОтчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыВыполненияОперации();
		ЗаполнитьЗначенияСвойств(ПараметрыПечатиОтчета, ПараметрыОперации);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьОтчетБезГашенияЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеОтчетаБезГашения(Оповещение, Новый УникальныйИдентификатор, ПараметрыКассыККМ.ИдентификаторУстройства, ПараметрыПечатиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнестиДенежныеСредстваВКассу(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыКассыККМ = Форма.ПараметрыКассыККМ;
	
	ЗаголовокОкна = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма внесения, %1'"), ПараметрыКассыККМ.Валюта);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма"                  , Форма);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ"      , ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Оповестить = Новый ОписаниеОповещения("ВыполнитьВнесениеДенегПослеУказанияСуммы", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(Оповестить, 0, ЗаголовокОкна, 15, 2);
	
КонецПроцедуры

Процедура ИзъятьДенежныеСредстваИзКассы(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыКассыККМ = Форма.ПараметрыКассыККМ;
	
	ЗаголовокОкна = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сумма выемки, %1'"), ПараметрыКассыККМ.Валюта);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма"                  , Форма);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ"      , ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьВыемкуДенегПослеУказанияСуммы", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(Оповещение, 0, ЗаголовокОкна, 15, 2);
	
КонецПроцедуры

// Вызывает процедуры оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура
//
Процедура ДобавитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПроведения Тогда
		
		Если ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() = 1 Тогда
			
			ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = ДополнительныеПараметры.ЭквайринговыеТерминалы[0].Значение;
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
			ДобавитьОплатуКартойВыполнитьАвторизацию(ДополнительныеПараметры);
			
		ИначеЕсли ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
			
			Для каждого Терминал Из ДополнительныеПараметры.ЭквайринговыеТерминалы Цикл
				ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
			КонецЦикла;
			
			Оповестить = Новый ОписаниеОповещения("ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала", РозничныеПродажиКлиент, ДополнительныеПараметры);
			ОткрытьФорму("Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала",ПараметрыФормы,,,,, Оповестить, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуры отмены оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура
//
Процедура ОтменитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не РезультатПроведения Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
		Возврат;
	КонецЕсли;
	
	СуммаОперации   = ТекущиеДанные.Сумма;
	НомерКарты      = ТекущиеДанные.НомерПлатежнойКарты;
	СсылочныйНомер  = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ     = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека  = "";
	
	ИдентификаторУстройстваЭТ = Неопределено;
	Для Каждого Терминал Из ДополнительныеПараметры.Форма.ЭквайринговыеТерминалы Цикл
		Если Терминал.Значение.Ссылка = ТекущиеДанные.ЭквайринговыйТерминал Тогда
			СтруктураЭквайринговыйТерминал = Терминал.Значение;
			ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) Или (СтруктураЭквайринговыйТерминал <> Неопределено И СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		ПараметрыОтмены = Новый Структура;
		ПараметрыОтмены.Вставить("СуммаОперации"          , СуммаОперации);
		ПараметрыОтмены.Вставить("СсылочныйНомер"         , СсылочныйНомер);
		ПараметрыОтмены.Вставить("НомерЧекаЭТ"            , НомерЧекаЭТ);
		ПараметрыОтмены.Вставить("СтрокаСлипЧека"         , СтрокаСлипЧека);
		ПараметрыОтмены.Вставить("ТекстОписаниеОшибки"    , "");
		ПараметрыОтмены.Вставить("СтрокаОплаты"           , ТекущиеДанные);
		ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ПараметрыОтмены.Вставить("Форма" , ДополнительныеПараметры.Форма);
		ПараметрыОтмены.Вставить("Валюта", ДополнительныеПараметры.Валюта);
		
		Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			
			ИдентификаторУстройстваФР = Неопределено;
			Если Не ДополнительныеПараметры.Форма.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
				ИдентификаторУстройстваФР = ДополнительныеПараметры.Форма.ПараметрыКассыККМ.ИдентификаторУстройства;
			КонецЕсли;
			
			ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
			ПараметрыОперации.СуммаОперации  = СуммаОперации;
			ПараметрыОперации.СсылочныйНомер = СсылочныйНомер;
			ПараметрыОперации.НомерЧека      = НомерЧекаЭТ;
			ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
			Оповещение = Новый ОписаниеОповещения("ОтменитьОплатуКартойПродолжение", ЭтотОбъект, ПараметрыОтмены);
			
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
				Оповещение,
				Новый УникальныйИдентификатор,
				ИдентификаторУстройстваЭТ,
				ПараметрыОперации,
				,
				ИдентификаторУстройстваФР);
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")  + " "+ СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")     + " "+ НомерКарты     + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'") + " "+ СсылочныйНомер + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")      + " "+ НомерЧекаЭТ    + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
			
			Оповестить = Новый ОписаниеОповещения("ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации", РозничныеПродажиКлиент, ПараметрыОтмены);
			ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для вывода на дисплей покупателя
//
// Параметры:
//  Заголовок - Строка - Заголовок выводимого на дисплей покупателя значения
//  Значение - Число, Строка - Выводимое значение (Сумма)
//
Функция ПодготовитьСтрокуКВыводуНаДисплейПокупателя(Заголовок = "", Значение = "") Экспорт
	
	Результат = "";
	
	ДлинаТекста     = 20;
	Пробелы20       = "                    ";
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	
	ЗначениеИтог = Формат(Значение, ФорматнаяСтрока);
	
	ДлинаЗначения = СтрДлина(ЗначениеИтог);
	ДлинаЗаголовка = СтрДлина(Заголовок);
	Если ДлинаЗначения + ДлинаЗаголовка > ДлинаТекста Тогда
		Результат = Лев(ЗначениеИтог, ДлинаТекста);
	ИначеЕсли ДлинаЗначения + ДлинаЗаголовка = ДлинаТекста Тогда
		Результат = Заголовок + ЗначениеИтог;
	Иначе
		Результат = Заголовок + Лев(Пробелы20, ДлинаТекста - ДлинаЗаголовка - ДлинаЗначения) + ЗначениеИтог;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Открыть форму записи журнала фискальных операций.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеЖурналаФискальныхОпераций - Структура со свойствами:
//   * ИдентификаторЗаписи - Строка - Идентификатор записи.
//   * ДокументОснование - ДокументСсылка - Ссылка на документ-основание.
//
Процедура ОткрытьЗаписьЖурналаФискальныхОпераций(Форма, ДанныеЖурналаФискальныхОпераций = Неопределено) Экспорт
	
	Если ДанныеЖурналаФискальныхОпераций = Неопределено Тогда
		ДанныеЖурналаФискальныхОпераций = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("ИдентификаторЗаписи", ДанныеЖурналаФискальныхОпераций.ИдентификаторЗаписи);
	ПараметрыЗаписи.Вставить("ДокументОснование"  , ДанныеЖурналаФискальныхОпераций.ДокументОснование);
	
	ЗначениеКлюча = Новый Массив;
	ЗначениеКлюча.Добавить(ПараметрыЗаписи);
	
	КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.ФискальныеОперации", ЗначениеКлюча);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
	
	ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открыть форму печати чека ККМ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыОперации - Структура - Структура со свойствами:
//   * ДокументСсылка;
//   * Организация;
//  РежимЗаписи - РежимЗаписиДокумента - Режим записи.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения.
//
Процедура ПробитьЧек(Форма, ПараметрыОперации, РежимЗаписи, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма"                  , Форма);
	ДополнительныеПараметры.Вставить("ПараметрыОперации"      , ПараметрыОперации);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("РежимЗаписиДокумента"   , РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись
	   И (Форма.Объект.Ссылка.Пустая() Или Форма.Модифицированность) Тогда
		
		ТекстВопроса = НСтр("ru = 'Операция возможна только после записи документа, записать документ?'");
		Оповестить = Новый ОписаниеОповещения("ПробитьЧек_ПослеОтветаНаВопросОЗаписиДокумента", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение
	   И (Не Форма.Объект.Проведен Или Форма.Модифицированность) Тогда
		
		ТекстВопроса = НСтр("ru = 'Операция возможна только после проведения документа, провести документ?'");
		Оповестить = Новый ОписаниеОповещения("ПробитьЧек_ПослеОтветаНаВопросОЗаписиДокумента", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуПечатиЧека(Форма, ПараметрыОперации, ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура УправлениеСостояниемСменыОбработкаКоманды(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "ОткрытьКассовуюСмену" Тогда
		ОткрытьКассовуюСмену(
			ДополнительныеПараметры.Форма.ПараметрыКассыККМ,
			ДополнительныеПараметры.ПараметрыОперации,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеОткрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
	Если Результат = "ЗакрытьИОткрытьКассовуюСмену" Тогда
		ЗакрытьКассовуюСмену(
			ДополнительныеПараметры.Форма.ПараметрыКассыККМ,
			ДополнительныеПараметры.ПараметрыОперации,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеЗакрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеЗакрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма.Объект, "КассаККМ") Тогда
			КассаККМ = ДополнительныеПараметры.Форма.Объект.КассаККМ;
		Иначе
			КассаККМ = ДополнительныеПараметры.Форма.КассаККМ;
		КонецЕсли;
		
		СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
		ДополнительныеПараметры.Форма.СостояниеКассовойСмены = СостояниеКассовойСмены;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, СостояниеКассовойСмены);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма.Объект, "КассоваяСмена")
			   И ТипЗнч(ДополнительныеПараметры.Форма.Объект.КассоваяСмена) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				ДополнительныеПараметры.Форма.Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СостояниеКассовойСмены.СменаОткрыта Тогда
			ОткрытьКассовуюСмену(ДополнительныеПараметры.Форма.ПараметрыКассыККМ, ДополнительныеПараметры.ПараметрыОперации, ДополнительныеПараметры.ОбработкаОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеОткрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма.Объект, "КассаККМ") Тогда
			КассаККМ = ДополнительныеПараметры.Форма.Объект.КассаККМ;
		Иначе
			КассаККМ = ДополнительныеПараметры.Форма.КассаККМ;
		КонецЕсли;
		
		СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
		ДополнительныеПараметры.Форма.СостояниеКассовойСмены = СостояниеКассовойСмены;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, СостояниеКассовойСмены);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма.Объект, "КассоваяСмена")
			   И ТипЗнч(ДополнительныеПараметры.Форма.Объект.КассоваяСмена) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				ДополнительныеПараметры.Форма.Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеКассовойСменыЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Результат = Ложь;
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыКассыККМ = ДополнительныеПараметры.ПараметрыКассыККМ;
		
		// Итоговое действие.
		ОписаниеОшибки = "";
		Результат = РозничныеПродажиВызовСервера.ОткрытьКассовуюСмену(ПараметрыКассыККМ.КассаККМ, ОписаниеОшибки);
		Если Не Результат Тогда
			
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При открытии смены произошла ошибка.
			      |Смена не открыта на фискальном регистраторе.
			      |Дополнительное описание:
			      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеКассовойСменыЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыКассыККМ = ДополнительныеПараметры.ПараметрыКассыККМ;
		СформироватьОтчетыОРозничныхПродажах(ПараметрыКассыККМ.КассаККМ, ДополнительныеПараметры.ОповещениеОЗавершении);
	
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Истина);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
			      |""%ДополнительноеОписание%""
			      |
			      |Если смена на фискальном регистраторе закрыта, то
			      |нажмите ""Да"" для формирования отчета о розничных продажах.
			      |
			      |Закрыть смену?'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		Оповестить = Новый ОписаниеОповещения("ЗакрытиеКассовойСменыПослеВопросаОЗакрытии", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповестить, ТекстСообщения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеКассовойСменыПослеВопросаОЗакрытии(Ответ, ДополнительныеПараметры) Экспорт
	
	Результат = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыКассыККМ = ДополнительныеПараметры.ПараметрыКассыККМ;
		СформироватьОтчетыОРозничныхПродажах(ПараметрыКассыККМ.КассаККМ, ДополнительныеПараметры.ОповещениеОЗавершении);
		Результат = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетыОРозничныхПродажах(КассаККМ, ОповещениеОЗавершении)
	
	ОписаниеОшибки = "";
	ОтчетыЗаСмену = РозничныеПродажиВызовСервера.ЗакрытьКассовуюСмену(КассаККМ, Ложь, ОписаниеОшибки);
	
	Для Каждого Документ Из ОтчетыЗаСмену Цикл
		ПоказатьЗначение(Неопределено, Документ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Смена закрыта на фискальном регистраторе.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, ОтчетыЗаСмену);
	
КонецПроцедуры

Процедура НапечататьОтчетБезГашенияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
		                            |%ОписаниеОшибки%
		                            |Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатВыполнения.Результат);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПробитьЧек_ПослеОтветаНаВопросОЗаписиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		
		Проведен = Ложь;
		
	Иначе
		
		РежимЗаписи = ДополнительныеПараметры.РежимЗаписиДокумента;
		Попытка
			Проведен = ДополнительныеПараметры.Форма.Записать(
				Новый Структура("РежимЗаписи", РежимЗаписи));
		Исключение
			Проведен = Ложь;
		КонецПопытки;
		
		Если Не Проведен Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось записать документ'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось провести документ'");
			КонецЕсли;
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Проведен Тогда
		
		Если ДополнительныеПараметры.ПараметрыОперации.ДокументСсылка <> Неопределено
			И Не ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыОперации.ДокументСсылка) Тогда
			ДополнительныеПараметры.ПараметрыОперации.ДокументСсылка = ДополнительныеПараметры.Форма.Объект.Ссылка;
		КонецЕсли;
		
		ОткрытьФормуПечатиЧека(
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ПараметрыОперации,
			ДополнительныеПараметры.ОповещениеПриЗавершении);
		
	Иначе
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПечатиЧека(Форма, ПараметрыОперации, ОповещениеПриЗавершении)
	
	ОткрытьФорму("Обработка.ПечатьЧека.Форма", ПараметрыОперации, Форма,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Оплата платежными картами
#Область ОплатаПлатежнымиКартами

Процедура ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(СтруктураЭквайринговыйТерминал, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЭквайринговыйТерминал = Неопределено Тогда
		// Не выбран эквайринговый терминал
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = СтруктураЭквайринговыйТерминал.ИдентификаторУстройстваЭТ;
	ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = СтруктураЭквайринговыйТерминал;
	
	ДобавитьОплатуКартойВыполнитьАвторизацию(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ДобавитьОплатуКартойВыполнитьАвторизацию(ДополнительныеПараметры)
	
	СуммаКОплате = ДополнительныеПараметры.ФормаАвторизации_Сумма;
	ПределСуммы  = ДополнительныеПараметры.ФормаАвторизации_ПределСуммы;
	ПоказыватьНомерКарты = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ВидыПлатежныхКарт = Новый СписокЗначений;
	Индекс = 0;
	Для Каждого ВидПлатежнойКарты Из ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ВидыПлатежныхКарт Цикл
		ВидыПлатежныхКарт.Добавить(Индекс, ВидПлатежнойКарты.Значение);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ВидыПлатежныхКарт", ВидыПлатежныхКарт);
	
	Оповестить = Новый ОписаниеОповещения("ДобавитьОплатуКартойПродолжение", РозничныеПродажиКлиент, ДополнительныеПараметры);
	ПодключаемоеОборудованиеКлиент.ВыполнитьАвторизациюЭТ(СуммаКОплате, ПределСуммы, ВидыПлатежныхКарт, ПоказыватьНомерКарты, Оповестить);
	
КонецПроцедуры

Процедура ДобавитьОплатуКартойПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТипКарты", Результат.ТипКарты);
	
	Если Не ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерКарты     = Результат.НомерКарты;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.НомерЧекаЭТ    = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
		ИдентификаторУстройстваФР = Неопределено;
		Если Не ДополнительныеПараметры.Форма.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
			ИдентификаторУстройстваФР = ДополнительныеПараметры.Форма.ПараметрыКассыККМ.ИдентификаторУстройства;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ДобавитьОплатуКартойПослеАвторизации", ЭтотОбъект, ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			Новый УникальныйИдентификатор,
			ИдентификаторУстройстваЭТ,
			ПараметрыОперации,
			,
			ИдентификаторУстройстваФР);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ Результат.Сумма  + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
		
		ДополнительныеПараметры.Вставить("КодАвторизации",);
		ДополнительныеПараметры.Вставить("НомерКарты"    , Результат.НомерКарты);
		ДополнительныеПараметры.Вставить("СсылочныйНомер", Результат.СсылочныйНомер);
		ДополнительныеПараметры.Вставить("НомерЧека"     , Результат.НомерЧека);
		ДополнительныеПараметры.Вставить("СуммаОперации" , Результат.Сумма);
		
		Оповестить = Новый ОписаниеОповещения("ОплатаКартойПослеВопросаОЗавершенииАвторизации", РозничныеПродажиКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(Оповестить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОплатуКартойПослеАвторизации(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	РезультатЭТ = РезультатВыполнения.Результат;
	Если РезультатЭТ Тогда
		ДополнительныеПараметры.Вставить("КодАвторизации", РезультатВыполнения.КодАвторизации);
		ДополнительныеПараметры.Вставить("НомерКарты"    , РезультатВыполнения.НомерКарты);
		ДополнительныеПараметры.Вставить("СсылочныйНомер", РезультатВыполнения.СсылочныйНомер);
		ДополнительныеПараметры.Вставить("НомерЧека"     , РезультатВыполнения.НомерЧекаЭТ);
		ДополнительныеПараметры.Вставить("СуммаОперации" , РезультатВыполнения.СуммаОперации);
	Иначе
		ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
	ОплатаКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОплатаКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
	Если Не РезультатЭТ Тогда
		ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", НСтр("ru = 'Операция отменена'"));
	КонецЕсли;
	
	ОплатаКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОплатаКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры)
	
	Если Не РезультатЭТ Тогда
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
		                            |""%ОписаниеОшибки%"".
		                            |Оплата по карте не была произведена.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ОписаниеОшибки%",
			ДополнительныеПараметры.ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Отмена оплаты платежными картами
#Область ОтменаОплатыПлатежнымиКартами

Процедура ОтменитьОплатуКартойПродолжение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	РезультатЭТ = РезультатВыполнения.Результат;
	Если РезультатЭТ Тогда
		ДополнительныеПараметры.Вставить("СсылочныйНомер", "");
		ДополнительныеПараметры.Вставить("НомерЧекаЭТ"   , "");
		ДополнительныеПараметры.Вставить("СтрокаСлипЧека", РезультатВыполнения.ТекстСлипЧека);
	Иначе
		ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
	ОтменаОплатыКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если РезультатЭТ Тогда
		
		СтрокаСлипЧека = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отменена оплата на сумму %1 %2'"),
			ДополнительныеПараметры.СуммаОперации,
			ДополнительныеПараметры.Валюта);
		ТекстОписаниеОшибки = "";
		
	Иначе
		
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаСлипЧека",      СтрокаСлипЧека);
	ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
	
	ОтменаОплатыКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтменаОплатыКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры)
	
	Если Не РезультатЭТ Тогда
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Отмена по карте не была произведена.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ОписаниеОшибки%",
			ДополнительныеПараметры.ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	Иначе
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартойЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено 
	   И РезультатВыбора.Действие = "ОтменитьОплату" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодАвторизации");
		ПараметрыОтбора.Вставить("НомерПлатежнойКарты");
		ПараметрыОтбора.Вставить("НомерСтроки");
		ПараметрыОтбора.Вставить("НомерЧекаЭТ");
		ПараметрыОтбора.Вставить("СсылочныйНомер");
		ПараметрыОтбора.Вставить("Сумма");
		ПараметрыОтбора.Вставить("ЭквайринговыйТерминал");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, РезультатВыбора.ВыбраннаяСтрока);
		
		НайденныеСтроки = ДополнительныеПараметры.Форма.Объект.ОплатаПлатежнымиКартами.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ПараметрыОтмены = Новый Структура;
			ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
			ПараметрыОтмены.Вставить("ТекущиеДанные", НайденныеСтроки[0]);
			ПараметрыОтмены.Вставить("Форма", ДополнительныеПараметры.Форма);
			ПараметрыОтмены.Вставить("Валюта", ДополнительныеПараметры.Валюта);
			
			ВыполнитьОбработкуОповещения(
				Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Внесение и выемка денежных средств
#Область ВнесениеВыемкаДенежныхСредств

Процедура ВыполнитьВнесениеДенегПослеУказанияСуммы(Сумма, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КассаККМ = ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ;
	ДокументОснование = Неопределено;
	ОписаниеОшибки = "";
	
	Результат = РозничныеПродажиВызовСервера.СоздатьДокументВнесенияДенежныхСредствВКассуККМ(КассаККМ, Сумма, ДокументОснование, ОписаниеОшибки);
	Если Результат Тогда
		
		РеквизитыКассира = РозничныеПродажиВызовСервера.РеквизитыКассира();
		
		ПараметрыИнкассации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации();
		ПараметрыИнкассации.ДокументОснование = ДокументОснование;
		ПараметрыИнкассации.Организация       = ДополнительныеПараметры.ПараметрыКассыККМ.Организация;
		ПараметрыИнкассации.ТорговыйОбъект    = КассаККМ;
		ПараметрыИнкассации.ТипИнкассации     = 1;
		ПараметрыИнкассации.Сумма             = Сумма;
		ПараметрыИнкассации.Кассир            = РеквизитыКассира.Наименование;
		ПараметрыИнкассации.КассирИНН         = РеквизитыКассира.ИНН;
		
		ДополнительныеПараметры.Вставить("ПараметрыИнкассации", ПараметрыИнкассации);
		
		Оповестить = Новый ОписаниеОповещения("ВыполнитьИнкассациюПослеОткрытияСмены", ЭтотОбъект, ДополнительныеПараметры);
		ОбработатьСостояниеСмены(ДополнительныеПараметры.Форма, Оповестить);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При внесении денежных средств в кассу ККМ произошла ошибка.
			|Дополнительное описание:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьВыемкуДенегПослеУказанияСуммы(Сумма, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КассаККМ = ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ;
	ДокументОснование = Неопределено;
	ОписаниеОшибки = "";
	
	Результат = РозничныеПродажиВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(КассаККМ, Сумма, ДокументОснование, ОписаниеОшибки);
	Если Результат Тогда
		
		ПараметрыИнкассации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации();
		ПараметрыИнкассации.ДокументОснование = ДокументОснование;
		ПараметрыИнкассации.Организация       = ДополнительныеПараметры.ПараметрыКассыККМ.Организация;
		ПараметрыИнкассации.ТорговыйОбъект    = КассаККМ;
		ПараметрыИнкассации.ТипИнкассации     = 0;
		ПараметрыИнкассации.Сумма             = Сумма;
		
		РеквизитыКассира = РозничныеПродажиВызовСервера.РеквизитыКассира();
		ПараметрыИнкассации.Кассир            = РеквизитыКассира.Наименование;
		ПараметрыИнкассации.КассирИНН         = РеквизитыКассира.ИНН;
		
		ДополнительныеПараметры.Вставить("ПараметрыИнкассации", ПараметрыИнкассации);
		
		Оповестить = Новый ОписаниеОповещения("ВыполнитьИнкассациюПослеОткрытияСмены", ЭтотОбъект, ДополнительныеПараметры);
		ОбработатьСостояниеСмены(ДополнительныеПараметры.Форма, Оповестить);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При выемке денежных средств из кассы ККМ произошла ошибка.
			|Дополнительное описание:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьИнкассациюПослеОткрытияСмены(СменаОткрыта, ДополнительныеПараметры) Экспорт
	
	Если Не СменаОткрыта Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьИнкассацию", ЭтотОбъект, ДополнительныеПараметры);
	Если Не ДополнительныеПараметры.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(
			Оповестить,
			ДополнительныеПараметры.Форма.УникальныйИдентификатор,
			ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства,
			ДополнительныеПараметры.ПараметрыИнкассации);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповестить, Новый Структура("Результат", Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьИнкассацию(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Оповестить("ОбновитьСтатусФискальныхОпераций");
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения.Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВнесениеВыемкаДенежныхСредств

#КонецОбласти // СлужебныеПроцедурыИФункции