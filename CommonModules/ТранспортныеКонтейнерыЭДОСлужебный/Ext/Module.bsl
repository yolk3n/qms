#Область СлужебныйПрограммныйИнтерфейс

// Поместить архив в контейнер.
// 
// Параметры:
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  ДвоичныеДанные - ДвоичныеДанные,
//                   Строка,
//                   Неопределено
//  ИмяФайлаБезРасширения - Строка
//  Расширение - Строка
Процедура ПоместитьАрхивВКонтейнер(ТранспортныйКонтейнер, ДвоичныеДанные, ИмяФайлаБезРасширения, Расширение) Экспорт
	
	// Так как теперь может быть несколько документов в одном контейнере, надо проверять, есть ли
	// уже присоединенные файлы к контейнеру. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		ПоляБлокировки = Новый Структура;
		ПоляБлокировки.Вставить("ВладелецФайла", ТранспортныйКонтейнер);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы",
			ПоляБлокировки);
		
		ПрисоединенныеФайлыКонтейнеров = ТранспортныеКонтейнерыЭДО.ПрисоединенныеФайлыКонтейнеров(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТранспортныйКонтейнер));

		Если ПрисоединенныеФайлыКонтейнеров[ТранспортныйКонтейнер] <> Неопределено
			И ПрисоединенныеФайлыКонтейнеров[ТранспортныйКонтейнер].Количество() > 0 Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;

		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ТранспортныйКонтейнер);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайлаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВоВременномХранилище);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование присоединенного файла транспортного контейнера ЭДО'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает транспортный контейнер ЭДО в виде zip-архива.
//
// Параметры:
//	ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ДвоичныеДанныеТранспортногоКонтейнера(ДанныеОбъектов, КонтекстДиагностики = Неопределено) Экспорт
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	АдресКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ПустаяСсылка();
	
	ДанныеФайлов = Новый Массив;
	Сч = 1;
	Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
		
		АдресПодкаталога = АдресКаталога + Сч;
		
		АдресПодкаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(АдресПодкаталога);
		СоздатьКаталог(АдресПодкаталога);
		
		// Сохраняем основной файл и дополнительный файл с подписями.
		СтруктураФайловЭД = Новый Структура;
		СтруктураФайловЭД.Вставить("ГлавныйФайл");
		СтруктураФайловЭД.Вставить("ДополнительныйФайл");
				
		// Создадим таблицу подписей для загрузки в дерево транспортной информации такском
		ТаблицаПодписей = Новый ТаблицаЗначений;
		ТаблицаПодписей.Колонки.Добавить("Имя");
		ТаблицаПодписей.Колонки.Добавить("Путь");
	
		СтруктураФайловЭД.Вставить("ГлавныйФайлПодписи", ТаблицаПодписей);
		СтруктураФайловЭД.Вставить("ДополнительныйФайлПодписи", ТаблицаПодписей);
		СтруктураФайловЭД.Вставить("Доверенности", Новый Соответствие);
		СтруктураФайловЭД.Вставить("ДоверенностиПоСсылке", Новый Соответствие);
		СтруктураФайловЭД.Вставить("Путь", Строка(Сч) + "/");
	
		Если ДанныеОбъекта.ЭтоОтветнаяПодпись Тогда
			СохранитьПоследнююПодпись(ДанныеОбъекта, АдресПодкаталога, СтруктураФайловЭД);
		Иначе
			СохранитьФайлСПодписями(ДанныеОбъекта, АдресПодкаталога, СтруктураФайловЭД);
			СохранитьФайлыДопДанныхЭД(ДанныеОбъекта, АдресПодкаталога, СтруктураФайловЭД);
		КонецЕсли;
		
		// Формируем card.xml
		СформироватьКарточку(ДанныеОбъекта.Объект, АдресПодкаталога, Ошибки, ДанныеОбъекта, КонтекстДиагностики);
		
		ДанныеФайлов.Добавить(СтруктураФайловЭД);
		СпособОбмена = ДанныеОбъекта.СпособОбмена;
		Сч = Сч + 1;
	КонецЦикла;
	
	// Формируем meta.xml.
	СформироватьТранспортнуюИнформацию(ДанныеОбъектов, ДанныеФайлов, АдресКаталога, Ошибки,
		КонтекстДиагностики);
	
	Если СинхронизацияЭДО.ПоддерживаетсяПередачаМЧДВТранспортномКонтейнере(СпособОбмена) Тогда
		// Формируем warrant.xml.
		СформироватьИнформациюПоДоверенностям(ДанныеФайлов, АдресКаталога, Ошибки, КонтекстДиагностики);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		
		ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
		
		ПараметрыАрхива = РаботаСФайламиБЭД.НовыеПараметрыФормированияАрхива();
		ПараметрыАрхива.РежимСохраненияПутей = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
		ПараметрыАрхива.РежимОбработкиПодкаталогов = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
		Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыДобавляемыеВАрхив), , ПараметрыАрхива);
		
	Иначе
		Архив = Неопределено;
		ШаблонСообщения = НСтр("ru = 'При формировании транспортного контейнера ЭДО возникли следующие ошибки:
							   |%1'");
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
	
	Возврат Архив;
	
КонецФункции

Функция ОтменитьРаспаковкуКонтейнеров(ТранспортныеКонтейнеры) Экспорт
	
	ОбработанныеКонтейнеры = Новый Массив;
	Для Каждого Контейнер Из ТранспортныеКонтейнеры Цикл
		Если ТранспортныеКонтейнерыЭДО.ИзменитьСтатусКонтейнера(Контейнер,
			Перечисления.СтатусыТранспортныхСообщенийБЭД.Отменен) Тогда
			ОбработанныеКонтейнеры.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбработанныеКонтейнеры;
	
КонецФункции

// Обработчик подписки на событие ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчетеЭДО,
// заполняет реквизит "Организация" при однофирменном учете.
//
// Параметры:
//  Источник             - ДокументОбъект.ТранспортныйКонтейнерЭДО - источник события
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка, Неопределено - Текст, используемый для заполнения документа.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОдноФирменномУчете(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИспользуетсяНесколькоОрганизаций = ИнтеграцияЭДО.ИспользуетсяНесколькоОрганизаций();
	
	Если Не ИспользуетсяНесколькоОрганизаций И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные())
		И Не ЗначениеЗаполнено(Источник.Организация) Тогда
		
		Источник.Организация = ИнтеграцияЭДО.ОрганизацияПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Источник.Организация) Тогда 
			ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
				"НедопустимыеПараметрыМетода", "ЗаполнитьЗначениеРеквизитаОрганизацияПриОдноФирменномУчете/ПроверкаПараметра/Организация");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиРегламентныхЗаданий

// Выполняет регламентное задание по пометке на удаление контейнеров
// электронных документов в статусе "Распакован" или "Отправлен".
Процедура ПометитьНаУдалениеТранспортныеКонтейнерыПоРасписанию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПометкаНаУдалениеТранспортныхКонтейнеровЭДО);
	
	Текст = НСтр("ru = 'Начато регламентное задание по пометке на удаление отработанных транспортных контейнеров ЭДО.'");
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания,
		УровеньЖурналаРегистрации.Информация);
	
	УстановитьПривилегированныйРежим(Истина);
	КоличествоДнейЖизниКонтейнера = НастройкиЭДО.СрокХраненияТранспортногоКонтейнера();
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтрольнаяДата = ТекущаяДатаСеанса() - 3600 * 24 * КоличествоДнейЖизниКонтейнера;
	
	Статусы = СтатусыОбработанногоКонтейнера();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТранспортныйКонтейнерЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
	|ГДЕ
	|	ТранспортныйКонтейнерЭДО.Статус В(&Статусы)
	|	И НЕ ТранспортныйКонтейнерЭДО.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ТранспортныйКонтейнерЭДО.ДатаОбработки > ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ТранспортныйКонтейнерЭДО.ДатаОбработки <= &КонтрольнаяДата
	|			ИНАЧЕ ТранспортныйКонтейнерЭДО.Дата <= &КонтрольнаяДата
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("КонтрольнаяДата", КонтрольнаяДата);
	Запрос.УстановитьПараметр("Статусы",         Статусы);
	
	КоличествоКонтейнеров = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Пока Не Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КонтейнерОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КонтейнерОбъект.УстановитьПометкуУдаления(Истина);
			
			КоличествоКонтейнеров = КоличествоКонтейнеров + 1;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Текст = НСтр("ru = 'Закончено регламентное задание. Помечено на удаление контейнеров: %КоличествоКонтейнеров%.'");
	Текст = СтрЗаменить(Текст, "%КоличествоКонтейнеров%", КоличествоКонтейнеров);
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().РегламентныеЗадания,
		УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

#КонецОбласти

Функция СтатусыОбработанногоКонтейнера() Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыТранспортныхСообщенийБЭД.Распакован);
	Статусы.Добавить(Перечисления.СтатусыТранспортныхСообщенийБЭД.Отправлен);
	
	Возврат Статусы;
	
КонецФункции

// Формирует присоединенный файл транспортного контейнера.
//
// Параметры:
//  ТранспортныйКонтейнер  - ДокументСсылка.ТранспортныйКонтейнерЭДО
//	ДанныеОбъектов - см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
//  Булево - Истина - извещение сформировано, иначе Ложь.
//
Функция СформироватьПрисоединенныйФайлТранспортногоКонтейнераОператораЭДО(ТранспортныйКонтейнер, ДанныеОбъектов,
	КонтекстДиагностики = Неопределено) Экспорт
		
	КонтейнерСформирован = Ложь;
	
	ИмяФайлаБезРасширения = "EDI_" + ТранспортныйКонтейнер.УникальныйИдентификатор();
	ИмяФайлаБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		ИмяФайлаБезРасширения);
	
	Попытка
		Архив = ДвоичныеДанныеТранспортногоКонтейнера(ДанныеОбъектов, КонтекстДиагностики);
		// Сохраним zip-архив в присоединенных файлах транспортного контейнера.
		ПоместитьАрхивВКонтейнер(ТранспортныйКонтейнер, Архив, ИмяФайлаБезРасширения, "zip");
		КонтейнерСформирован = Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ДополнительныеПараметрыОшибки = Новый Структура;
		ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", ТранспортныйКонтейнер);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр(
			"ru = 'Формирование транспортного контейнера ЭДО'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения, ДополнительныеПараметрыОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат КонтейнерСформирован;
	
КонецФункции

Функция СформироватьИнформациюПоДоверенностямXML(ДанныеФайлов, АдресКаталога, Ошибки, КонтекстДиагностики)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/warrant}.Warrant";
	Попытка
		ЕстьДоверенности = Ложь;
		
		ОписаниеДоверенности = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
			
			Для Каждого ДанныеМЧД Из ДанныеФайла.ДоверенностиПоСсылке Цикл
				
				КарточкаДоверенности = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard");
				Описание = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.Description");
				ДанныеДоверенности = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.Description.Meta"); 
				
				СтруктураДанныхМЧД = ДанныеМЧД.Значение;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДоверенности, "ID", ДанныеМЧД.Ключ, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДоверенности, "Issuer",
					СтруктураДанныхМЧД.СвойстваМЧД.ДоверительИНН, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДоверенности, "Link",
					СтруктураДанныхМЧД.СвойстваМЧД.СсылкаНаРеестр, Истина, Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Описание, "Meta", ДанныеДоверенности,, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КарточкаДоверенности, "Description", Описание,, Ошибки);
				
				КПодписи = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.ToSign");
				
				Для Каждого ИмяФайлаПодписи Из СтруктураДанныхМЧД.ИменаФайловПодписей Цикл
					
					ДанныеПодписи = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.ToSign.DocSign");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеПодписи, "file", ИмяФайлаПодписи, Истина, Ошибки);
					КПодписи.DocSign.Добавить(ДанныеПодписи);
					
				КонецЦикла;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КарточкаДоверенности, "ToSign", КПодписи,, Ошибки);
				
				ЗаполнитьДополнительныеПараметрыКарточкиМЧД(КарточкаДоверенности, ПутьКОписанию,
					СтруктураДанныхМЧД.СвойстваМЧД, Ошибки);
				
				ОписаниеДоверенности.WarrantCard.Добавить(КарточкаДоверенности);
				
				ЕстьДоверенности = Истина;
			КонецЦикла;
			
			Для Каждого ДанныеМЧД Из ДанныеФайла.Доверенности Цикл
				
				КарточкаДоверенности = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard");
				Описание = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.Description");
				Файлы = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.Description.Files"); 
				ДанныеДоверенности = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию
					+ ".WarrantCard.Description.Files.WarrantImage");
				ДанныеПодписи = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию
					+ ".WarrantCard.Description.Files.WarrantSignature");
				
				СтруктураДанныхМЧД = ДанныеМЧД.Значение;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеДоверенности, "Path", ДанныеМЧД.Ключ, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеПодписи, "Path", СтруктураДанныхМЧД.ФайлПодписиМЧД,
					Истина, Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файлы, "WarrantImage", ДанныеДоверенности,, Ошибки);
				Файлы.WarrantSignature.Добавить(ДанныеПодписи);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Описание, "Files", Файлы,, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КарточкаДоверенности, "Description", Описание,, Ошибки);
				
				КПодписи = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".WarrantCard.ToSign");
				
				Для Каждого ИмяФайлаПодписи Из СтруктураДанныхМЧД.ИменаФайловПодписей Цикл
					
					ДанныеПодписиФайла = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию
						+ ".WarrantCard.ToSign.DocSign");
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеПодписиФайла, "file", ИмяФайлаПодписи, Истина,
						Ошибки);
					КПодписи.DocSign.Добавить(ДанныеПодписиФайла);
					
				КонецЦикла;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КарточкаДоверенности, "ToSign", КПодписи,, Ошибки);
				
				ОписаниеДоверенности.WarrantCard.Добавить(КарточкаДоверенности);
				
				ЕстьДоверенности = Истина;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЕстьДоверенности Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписаниеДоверенности.Проверить();
		
		Возврат РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ОписаниеДоверенности, Ложь,, "Warrant");
		
	Исключение
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ДобавитьОшибкуФормированияТранспортногоКонтейнера(КонтекстДиагностики, ИнформацияОбОшибке(),, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПараметрыКарточкиМЧД(КарточкаДоверенности, ПутьКОписанию, СвойстваМЧД, Ошибки)
	
	ЗначенияДополнительныхПараметров = Новый Структура;
	ЗначенияДополнительныхПараметров.Вставить("МЧДДействительнаС", СвойстваМЧД.ДатаВыдачи);
	ЗначенияДополнительныхПараметров.Вставить("МЧДДействительнаПо", СвойстваМЧД.ДатаОкончания);
	
	ДополнительныеДанные = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию
		+ ".WarrantCard.AdditionalData");
	Для Каждого КлючИЗначение Из ЗначенияДополнительныхПараметров Цикл
		ДополнительныйПараметр = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию
			+ ".WarrantCard.AdditionalData.AdditionalParameter");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДополнительныйПараметр, "Name", КлючИЗначение.Ключ, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДополнительныйПараметр, "Value",
			XMLСтрока(КлючИЗначение.Значение) + "Z", , Ошибки);
		
		ДополнительныеДанные.AdditionalParameter.Добавить(ДополнительныйПараметр);
	КонецЦикла;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КарточкаДоверенности, "AdditionalData", ДополнительныеДанные, , Ошибки);
	
КонецПроцедуры

Процедура СформироватьИнформациюПоДоверенностям(ДанныеФайлов, АдресКаталога, Ошибки, КонтекстДиагностики)
	
	ИнформацияПоДоверенностям = СформироватьИнформациюПоДоверенностямXML(ДанныеФайлов, АдресКаталога, Ошибки,
		КонтекстДиагностики);
	Если ИнформацияПоДоверенностям <> Неопределено Тогда
		ИмяФайла = АдресКаталога + "warrant.xml";
		Если Не РаботаСФайламиБЭД.ЗаписатьДвоичныеДанные(ИнформацияПоДоверенностям, ИмяФайла, КонтекстДиагностики) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТранспортнуюИнформацию(ДанныеОбъектов, ДанныеФайлов, АдресКаталога, Ошибки,
	КонтекстДиагностики)
	
	ДеревоТранспортнойИнформации = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ТранспортнаяИнформация");
	
	// Готовим дерево данных с транспортной информацией.
	ПодготовитьДанныеПоТранспортнойИнформации(ДанныеОбъектов, ДанныеФайлов, ДеревоТранспортнойИнформации);
	
	// Выполним проверку на заполненность обязательных полей.
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоТранспортнойИнформации, Ошибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		ТранспортнаяИнформация = СформироватьТранспортнуюИнформациюCML(ДеревоТранспортнойИнформации, Ошибки,
			ДанныеОбъектов, КонтекстДиагностики);
		Если ТранспортнаяИнформация <> Неопределено Тогда
			ИмяФайла = АдресКаталога + "meta.xml";
			Если Не РаботаСФайламиБЭД.ЗаписатьДвоичныеДанные(ТранспортнаяИнформация, ИмяФайла, КонтекстДиагностики) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьКарточку(ЭлектронныйДокумент, АдресКаталога, Ошибки, ОписаниеОбъекта, КонтекстДиагностики = Неопределено)
	
	ДеревоКарточкиТакском = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.КарточкаПередаваемыхДанных");
	
	// Готовим дерево данных для карточки контейнера.
	ПодготовитьДанныеПоКарточке(ОписаниеОбъекта, ДеревоКарточкиТакском);
	
	// Выполним проверку на заполненность обязательных полей.
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоКарточкиТакском, Ошибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		Карточка = СформироватьКарточкуCML(ДеревоКарточкиТакском, Ошибки, ЭлектронныйДокумент,
			ОписаниеОбъекта.СпособОбмена, КонтекстДиагностики);
		ИмяФайла = АдресКаталога + "card.xml";
		Если Не РаботаСФайламиБЭД.ЗаписатьДвоичныеДанные(Карточка, ИмяФайла, КонтекстДиагностики) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Описание.
//
// Параметры:
// ОписаниеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
// ДеревоКарточки - ДеревоЗначений
Процедура ПодготовитьДанныеПоКарточке(ОписаниеОбъекта, ДеревоКарточки)
	
	Зашифрован = Ложь;
	
	ОтветнаяПодпись = ОписаниеОбъекта.ЭтоОтветнаяПодпись;
	Комментарий = ОписаниеОбъекта.СопроводительнаяЗаписка;
	
	ТипЭлементаРегламента = ОписаниеОбъекта.ТипЭлементаРегламента;
	
	// Добавим признак трассировки для документов, содержащих информацию о маркируемых товарах.
	ТребуетсяТрассировка = ОписаниеОбъекта.СодержитМаркируемыеТовары;
	
	ЗначенияРеквизитов = Новый Соответствие;
	
	Если ЭтоИзвещениеОПолучении(ТипЭлементаРегламента)
		Или ЭтоУведомлениеОбУточнении(ТипЭлементаРегламента)
		Или ОтветнаяПодпись Тогда
		
		ВнешнийИдентификатор = ОписаниеОбъекта.ИдентификаторСообщения;
		
		Если ЭтоИзвещениеОПолучении(ТипЭлементаРегламента)
			И ЭтоИзвещениеОПолученииДляОператора(ТипЭлементаРегламента) Тогда
			ИдентификаторОператораПолучателя = РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(
				ОписаниеОбъекта.ИдентификаторПолучателя);
			
			ЗначенияРеквизитов.Вставить("Получатель.Тип", "SpecOperator");
			ЗначенияРеквизитов.Вставить("Получатель.Наименование", ИдентификаторОператораПолучателя);
		КонецЕсли;
	Иначе
		ВнешнийИдентификатор = ОписаниеОбъекта.ИдентификаторСообщения;
	КонецЕсли;
	ЗначенияРеквизитов.Вставить("Определение.ВнешнийИдентификатор", ВнешнийИдентификатор);
	
	ТипДокументаСтрокой = ТипДокументаСтрокой(ОписаниеОбъекта);
	ЗначенияРеквизитов.Вставить("Определение.Имя", ТипДокументаСтрокой);
	ОтклонениеАннулирования = ОписаниеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ;
		
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ЗначенияРеквизитов.Вставить("Описание.Комментарий", СокрЛП(Комментарий));
	КонецЕсли;
	
	ДополнительныеДанные = Новый ТаблицаЗначений;
	ДополнительныеДанные.Колонки.Добавить("Имя");
	ДополнительныеДанные.Колонки.Добавить("Значение");
	
	Если ЗначениеЗаполнено(ОписаниеОбъекта.Доверенности)
		И СинхронизацияЭДО.ПоддерживаетсяПередачаМЧДВТранспортномКонтейнере(ОписаниеОбъекта.СпособОбмена) Тогда
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "WarrantPath";
		НоваяСтрока.Значение = "warrant.xml";
	КонецЕсли;
	
	Если Не ОписаниеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		ЗначенияРеквизитов.Вставить("Определение.ТребуетсяПовторнаяПодпись", ОписаниеОбъекта.ТребуетсяПодтверждение);
		
		МодульОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		КонецЕсли;
		
		Если ОписаниеОбъекта.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			Или (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ОписаниеОбъекта.ТипЭлементаРегламента))
			// Для ЭД вида "Уведомление об уточнении" и "Извещение о получении" необходимо сформировать
			// дополнительные данные, чтобы файл смог прочитаться на принимающей стороне.
			Или ЭтоУведомлениеОбУточнении(ОписаниеОбъекта.ТипЭлементаРегламента)
			Или ЭтоИзвещениеОПолучении(ОписаниеОбъекта.ТипЭлементаРегламента) Тогда
			
			Если ЗначениеЗаполнено(ОписаниеОбъекта.ДоговорКонтрагента) Тогда
				РеквизитНомерДоговора = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НомерДоговораКонтрагента");
				РеквизитДатаДоговора = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ДатаДоговораКонтрагента");
				
				СтрокаРеквизитов = СтрШаблон("%1,%2", РеквизитНомерДоговора, РеквизитДатаДоговора);
				
				СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ОписаниеОбъекта.ДоговорКонтрагента, 
					СтрокаРеквизитов);
				
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "НомерДоговора";
				НоваяСтрока.Значение = СтруктураДанных[РеквизитНомерДоговора];
				
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "ДатаДоговора";
				НоваяСтрока.Значение = СтруктураДанных[РеквизитДатаДоговора];
			КонецЕсли;
			
			Если ОписаниеОбъекта.ОписаниеДокумента <> Неопределено Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "Номер";
				НоваяСтрока.Значение = ОписаниеОбъекта.ОписаниеДокумента.Номер;
				
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "Сумма";
				НоваяСтрока.Значение = ОписаниеОбъекта.ОписаниеДокумента.Сумма;
			КонецЕсли;
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "Зашифрован";
			НоваяСтрока.Значение = Зашифрован;
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ВерсияБЭД";
			НоваяСтрока.Значение = ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки();
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ПрикладноеРешение";
			НоваяСтрока.Значение = Метаданные.Имя;
			
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "ВерсияПрикладногоРешения";
			НоваяСтрока.Значение = Метаданные.Версия;
			
			Если ЗначениеЗаполнено(Комментарий) Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "Комментарий";
				НоваяСтрока.Значение = СокрЛП(Комментарий);
			КонецЕсли;
			
			Если Не ОписаниеОбъекта.ТребуетсяИзвещение Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "НеТребуетсяИзвещение";
				НоваяСтрока.Значение = Истина;
			КонецЕсли;
			
			// Добавим в карточку новую версию формата ЭД.
			Если ЭтоИзвещениеОПолучении(ОписаниеОбъекта.ТипЭлементаРегламента) Тогда
				ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъекта.ТипДокумента);
				ОтборФорматов = ЭлектронныеДокументыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
				ОтборФорматов.ВидыДокументов.Добавить(ВидДокумента);
				ОтборФорматов.Действует = Истина;
				АктуальныеФорматы = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов(ОтборФорматов);
				СтрокаТаблицыЗначений = АктуальныеФорматы.Найти(ВидДокумента, "ВидДокумента");
				Если СтрокаТаблицыЗначений <> Неопределено Тогда
					НоваяСтрока = ДополнительныеДанные.Добавить();
					НоваяСтрока.Имя = "ВерсияФормата";
					НоваяСтрока.Значение = СтрокаТаблицыЗначений.ИдентификаторФормата;
				КонецЕсли;
			КонецЕсли;
			
			// Для случая прямого обмена в доп. данные добавляем реквизит "ВерсияФорматаПакета".
			ВерсияФорматаПакета = "3";
			Если ЗначениеЗаполнено(ВерсияФорматаПакета) Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "ВерсияФорматаПакета";
				НоваяСтрока.Значение = ВерсияФорматаПакета;
			КонецЕсли;
			
			// Получим актуальный тип документа (состав типов расширился, для обратной совместимости, старые типы передаются
			// по прежнему в поле тип, а для новых конфигураций - в доп.данных).
			Если Не ОтклонениеАннулирования Тогда
				ТипДокументаСтрокой = ТипДокументаСтрокой(ОписаниеОбъекта, Истина);
			КонецЕсли;
			НоваяСтрока = ДополнительныеДанные.Добавить();
			НоваяСтрока.Имя = "DocumentType";
			НоваяСтрока.Значение = ТипДокументаСтрокой;
			
			// В LinkedDocument передаются идентификаторы (НомерЭД), используются на стороне Оператора ЭДО
			// для объединения связанных документов. Документы считаются взаимосвязанными, если выполняется
			// условие: ИД документооборота (DocFlow.ID в файле meta.xml) ЭД1 = ИД указанному в LinkedDocument ЭД2.
			// Поэтому в LinkedDocument помещаем реквизит УникальныйИД, указанный в ЭД, у которого ВладелецФайла -
			// - документ ИБ с УИД = Идентификатору из ИдентификаторыОснованийВладельцаФайла.
			Для Каждого ИдентификаторДокументооборотаОснования Из ОписаниеОбъекта.ИдентификаторыДокументооборотовОснований Цикл
				СтрокаТЗ = ДополнительныеДанные.Добавить();
				СтрокаТЗ.Имя = "LinkedDocument";
				СтрокаТЗ.Значение = ИдентификаторДокументооборотаОснования; // для Такском
			КонецЦикла;
			
			// В ParentDocument передаются номера ЭД, документооборот по которым указан в LinkedDocument.
			Для каждого ИдентификаторСообщенияОснования Из ОписаниеОбъекта.ИдентификаторыСообщенийОснований Цикл
				СтрокаТЗ = ДополнительныеДанные.Добавить();
				СтрокаТЗ.Имя = "ParentDocument";
				СтрокаТЗ.Значение = ИдентификаторСообщенияОснования; // для 1С
			КонецЦикла;
			
			Если ТребуетсяТрассировка Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "TracingRequired";
				НоваяСтрока.Значение = "True";
			КонецЕсли;
		КонецЕсли;
		
		Если СинхронизацияЭДО.ЭтоПрямойОбмен(ОписаниеОбъекта.СпособОбмена) Тогда
			
			ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъекта.ТипДокумента);
			
			Запросы = Новый Массив;
			
			Отбор = НастройкиЭДО.НовыйОтборНастроекОтправки();
			Отбор.Отправитель  = "&Отправитель";
			Отбор.Получатель   = "&Получатель";
			Отбор.Договор      = "&Договор";
			Отбор.ВидДокумента = "&ВидДокумента";
			ЗапросНастроек = НастройкиЭДО.ЗапросНастроекОтправки("НастройкиОтправки", Отбор);
			
			Запросы.Добавить(ЗапросНастроек);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиОтправки.АдресОтправителя КАК АдресОтправителя
			|ИЗ
			|	НастройкиОтправки КАК НастройкиОтправки";
			
			ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
			
			ИтоговыйЗапрос.УстановитьПараметр("Отправитель", ОписаниеОбъекта.Организация);
			ИтоговыйЗапрос.УстановитьПараметр("Получатель", ОписаниеОбъекта.Контрагент);
			ИтоговыйЗапрос.УстановитьПараметр("Договор", ОписаниеОбъекта.ДоговорКонтрагента);
			ИтоговыйЗапрос.УстановитьПараметр("Отправитель", ОписаниеОбъекта.Организация);
			ИтоговыйЗапрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = ИтоговыйЗапрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий()
				И ЗначениеЗаполнено(Выборка.АдресОтправителя) Тогда
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "ReplyTo";
				НоваяСтрока.Значение = Выборка.АдресОтправителя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СокращенноеНаименованиеОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СокращенноеНаименованиеОрганизации");
	ИННОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	КППОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(СокращенноеНаименованиеОрганизации);
	МассивРеквизитов.Добавить(ИННОрганизации);
	МассивРеквизитов.Добавить(КППОрганизации);
	
	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеОбъекта.Организация, СтрСоединить(МассивРеквизитов, ","));
	ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ОписаниеОбъекта.ИдентификаторОтправителя);
	
	Если ЗначениеЗаполнено(ДанныеУчетнойЗаписи)
		И ДанныеУчетнойЗаписи.Организация <> ОписаниеОбъекта.Организация Тогда 
		
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "RealSenderKPP";
		НоваяСтрока.Значение = СтруктураДанных[КППОрганизации];
		
		НоваяСтрока = ДополнительныеДанные.Добавить();
		НоваяСтрока.Имя = "RealSenderName";
		НоваяСтрока.Значение = СтруктураДанных[СокращенноеНаименованиеОрганизации];
		
		СтруктураДанных = ИнтеграцияЭДО.ЗначенияРеквизитовОбъектаУчета(ДанныеУчетнойЗаписи.Организация,
			СтрСоединить(МассивРеквизитов, ","));
		
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("Отправитель.Наименование", СтруктураДанных[СокращенноеНаименованиеОрганизации]);
	ЗначенияРеквизитов.Вставить("Отправитель.ИНН", СтруктураДанных[ИННОрганизации]);
	ЗначенияРеквизитов.Вставить("Отправитель.КПП", СтруктураДанных[КППОрганизации]);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Отправитель.ИД",
		ОписаниеОбъекта.ИдентификаторОтправителя);
	
	Если Не ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.Тип")) Тогда
		Если ОписаниеОбъекта.СпособОбмена <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			
			НаименованиеКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
			ИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
			КППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(НаименованиеКонтрагента);
			МассивРеквизитов.Добавить(ИННКонтрагента);
			МассивРеквизитов.Добавить(КППКонтрагента);
			
			СтруктураДанных = ИнтеграцияЭДО.ЗначенияРеквизитовОбъектаУчета(ОписаниеОбъекта.Контрагент,
				СтрСоединить(МассивРеквизитов, ","));
			
			Запросы = Новый Массив;
			
			Отбор = ПриглашенияЭДО.НовыйОтборПриглашений();
			Отбор.ИдентификаторОрганизации = "&ИдентификаторОрганизации";
			Отбор.ИдентификаторКонтрагента = "&ИдентификаторКонтрагента";
			ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", Отбор);
			
			Запросы.Добавить(ЗапросПриглашений);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Приглашения.Контрагент
			|ИЗ
			|	Приглашения КАК Приглашения";
			
			ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
			ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", ОписаниеОбъекта.ИдентификаторОтправителя);
			ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторКонтрагента", ОписаниеОбъекта.ИдентификаторПолучателя);
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий()
				И Выборка.Контрагент <> ОписаниеОбъекта.Контрагент 
				И ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
				
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "RealReceiverKPP";
				НоваяСтрока.Значение = СтруктураДанных[КППКонтрагента];
				
				НоваяСтрока = ДополнительныеДанные.Добавить();
				НоваяСтрока.Имя = "RealReceiverName";
				НоваяСтрока.Значение = СтруктураДанных[НаименованиеКонтрагента];
				
				СтруктураДанных = ИнтеграцияЭДО.ЗначенияРеквизитовОбъектаУчета(Выборка.Контрагент,
					СтрСоединить(МассивРеквизитов, ","));
				
			КонецЕсли;
			
			ЗначенияРеквизитов.Вставить("Получатель.Наименование", СтруктураДанных[НаименованиеКонтрагента]);
			ЗначенияРеквизитов.Вставить("Получатель.ИНН", СтруктураДанных[ИННКонтрагента]);
			ЗначенияРеквизитов.Вставить("Получатель.КПП", СтруктураДанных[КППКонтрагента]);
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоКарточки, "Получатель.ИД",
				ОписаниеОбъекта.ИдентификаторПолучателя);

		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеОбъекта.СпособОбмена <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			ТипДокументаСтрокой = ТипДокументаСтрокой(ОписаниеОбъекта, Истина);
			МодульПодсистемы.ЗаполнитьДополнительныхДанныеКарточкиЭПД(ОписаниеОбъекта.Объект, 
																		ДополнительныеДанные, ТипДокументаСтрокой);
		КонецЕсли;
	КонецЕсли;
	
	// Удалим не заполненные дополнительные данные.
	НаУдаление = Новый Массив;
	Для каждого СтрокаДанных Из ДополнительныеДанные Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.Значение) Тогда
			НаУдаление.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаДанных Из НаУдаление Цикл
		ДополнительныеДанные.Удалить(СтрокаДанных);
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(ДеревоКарточки, ДополнительныеДанные, "Описание.ДополнительныеДанные");
	
	ЗначенияРеквизитов.Вставить("Описание.Заголовок", Строка(ОписаниеОбъекта.ВидДокумента));
	
	Дата = "";
	Если ОписаниеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		Дата = ОписаниеОбъекта.ОписаниеДокумента.Дата;
	Иначе
		Дата = ?(ОтветнаяПодпись, ТекущаяДатаСеанса(), ОписаниеОбъекта.ДатаСоздания);
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("Описание.Дата", Дата);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначенияРеквизитовВДереве(ДеревоКарточки, ЗначенияРеквизитов);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоТранспортнойИнформации(ОписаниеОбъектов, ДанныеФайлов, ДеревоТранспортнойИнформации)
	
	ТаблицаДокументооборотов = Новый ТаблицаЗначений;
	ТаблицаДокументооборотов.Колонки.Добавить("ИД");
	ТаблицаДокументооборотов.Колонки.Добавить("Документ");
	
	Сч = 1;
	Для Каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
		ОтветнаяПодпись = ОписаниеОбъекта.ЭтоОтветнаяПодпись;
		
		СтруктураФайловЭД = ДанныеФайлов[Сч - 1];
		
		СтрокаТаблицы = ТаблицаДокументооборотов.Добавить();
		ТипЭлементаРегламента = ОписаниеОбъекта.ТипЭлементаРегламента;
	
		Если ЭтоИзвещениеОПолучении(ТипЭлементаРегламента)
			ИЛИ ЭтоУведомлениеОбУточнении(ТипЭлементаРегламента)
			ИЛИ ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА
			ИЛИ ОтветнаяПодпись Тогда
			
			ИДДокументооборота     = ОписаниеОбъекта.ИдентификаторДокументооборота;
		Иначе
			ИДДокументооборота = ОписаниеОбъекта.ИдентификаторДокументооборота;
		КонецЕсли;
		СтрокаТаблицы.ИД = ИДДокументооборота;
		
		Если ОписаниеОбъекта.СпособОбмена = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			КодРегламента = "Nonformalized";
			КодТранзакции = "MainDocument";
		Иначе
			КодРегламента = ТипРегламентаСтрокой(ОписаниеОбъекта.ТипРегламента, ОписаниеОбъекта.ТипДокумента);
			КодТранзакции = ПолучитьКодТранзакции(ОписаниеОбъекта.ТипРегламента, ОписаниеОбъекта.ТипЭлементаРегламента, 
				КодРегламента, ОписаниеОбъекта.ТипДокумента, ОписаниеОбъекта.ЭтоОтветнаяПодпись);
		КонецЕсли;
		
		Документ = Новый Структура;
		Документ.Вставить("КодРегламента", КодРегламента);
		Документ.Вставить("КодТранзакции", КодТранзакции);
		
		// Загрузим файл электронного документа.
		Если СтруктураФайловЭД.Свойство("ГлавныйФайл") И ЗначениеЗаполнено(СтруктураФайловЭД.ГлавныйФайл) Тогда
			ГлавныйФайл = Новый Структура;
			ГлавныйФайл.Вставить("Путь", СтрШаблон("%1/%2", Сч, СтруктураФайловЭД.ГлавныйФайл));
			Документ.Вставить("ГлавныйФайл", ГлавныйФайл);
		КонецЕсли;
		
		// Загрузим подписи электронного документа в дерево транспортной информации.
		Если СтруктураФайловЭД.Свойство("ГлавныйФайлПодписи") И СтруктураФайловЭД.ГлавныйФайлПодписи.Количество() > 0 Тогда
			Для Каждого СтрокаПодписи Из СтруктураФайловЭД.ГлавныйФайлПодписи Цикл
				СтрокаПодписи.Путь = СтрШаблон("%1/%2", Сч, СтрокаПодписи.Путь);
			КонецЦикла;
			Документ.Вставить("ГлавныйФайлПодписи", СтруктураФайловЭД.ГлавныйФайлПодписи);
		КонецЕсли;
		
		// Загрузим файл дополнительной информации.
		Если СтруктураФайловЭД.Свойство("ДополнительныйФайл") И ЗначениеЗаполнено(СтруктураФайловЭД.ДополнительныйФайл) Тогда
			ДополнительныйФайл = Новый Структура;
			ДополнительныйФайл.Вставить("Путь", СтрШаблон("%1/%2", Сч, СтруктураФайловЭД.ДополнительныйФайл));
			Документ.Вставить("ДополнительныйФайл", ДополнительныйФайл);
		КонецЕсли;
		СтрокаТаблицы.Документ = Документ;
		Сч = Сч + 1;
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ЗагрузитьТаблицуВДерево(ДеревоТранспортнойИнформации, ТаблицаДокументооборотов,
		"Документообороты");
	
КонецПроцедуры

// Возвращает тип документа для помещения в транспортный контейнер.
//
// Параметры:
//   ОписаниеОбъекта         - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//   ДляДополнительныхДанных - Булево - состав типов был расширен, для обратной совместимости требуется передавать
//                             только старые типы (после расширения состава типов они передаются в новом реквизите
//                             карточки, а старые в дополнительных данных).
//
// Возвращаемое значение:
//   Строка
Функция ТипДокументаСтрокой(ОписаниеОбъекта, ДляДополнительныхДанных = Ложь)
	
	ТипДокумента = "Other";
	
	Таблица = ТипыДокументовТранспортнойИнформации();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипЭлементаРегламента", ОписаниеОбъекта.ТипЭлементаРегламента);
	Отбор.Вставить("ТипДокумента", ОписаниеОбъекта.ТипДокумента);
	Отбор.Вставить("ТипРегламента", ОписаниеОбъекта.ТипРегламента);
	Если ОписаниеОбъекта.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПредложениеОбАннулировании Тогда
		Отбор.Вставить("ЭтоОтветнаяПодпись", ОписаниеОбъекта.ЭтоОтветнаяПодпись);
	КонецЕсли;
	СтрокиТаблицы = Таблица.НайтиСтроки(Отбор);
	
	Если СтрокиТаблицы.Количество() Тогда
		ИмяКолонкиРезультата = ?(ДляДополнительныхДанных, "ТипДокументаДляДополнительныхДанныхСтрокой",
			"ТипДокументаСтрокой");
		ТипДокумента = СтрокиТаблицы[0][ИмяКолонкиРезультата];
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Возвращает тип документа по строке из транспортного контейнера.
//
// Параметры:
//   ТипДокументаСтрокой     - Строка
//   ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//   КодТранзакции - Строка
//   ДляДополнительныхДанных - Булево - состав типов был расширен, для обратной совместимости требуется передавать
//                             только старые типы (после расширения состава типов они передаются в новом реквизите
//                             карточки, а старые в дополнительных данных).
//
// Возвращаемое значение:
//   Неопределено, Структура:
//    * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//                   - ПеречислениеСсылка.ТипыПроизвольныхДокументовЭДО
//    * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО.
Функция ПараметрыДокумента(ТипДокументаСтрокой, ТипРегламента, КодТранзакции, ДляДополнительныхДанных = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Параметры.Вставить("ЭтоОтветнаяПодпись", Ложь);
	
	ЭтоОтветнаяПодпись = КодТранзакции = "CancellationOfferResign" Или КодТранзакции = "MainDocumentResign";
	
	Параметры.ЭтоОтветнаяПодпись = ЭтоОтветнаяПодпись;
	
	Параметры.ТипЭлементаРегламента = ПолучитьТипЭлементаРегламента(КодТранзакции);
	
	Если ТипДокументаСтрокой = "SpecificationNotice" И Параметры.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
		И ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		Параметры.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
		Возврат Параметры;
	ИначеЕсли ТипДокументаСтрокой = "SpecificationNotice" Тогда
		МодульОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		КонецЕсли;
		Если МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоУОУ(Параметры.ТипЭлементаРегламента) Тогда
			Параметры.ТипДокумента = Перечисления.ТипыДокументовЭДО.УведомлениеОбУточнении;
			Возврат Параметры;
		КонецЕсли;
	КонецЕсли;
	
	Таблица = ТипыДокументовТранспортнойИнформации();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипДокументаДляДополнительныхДанныхСтрокой", ТипДокументаСтрокой);
	Отбор.Вставить("ТипРегламента", ТипРегламента);
	ОтфильтрованнаяТаблица = Таблица.Скопировать(Отбор);
	
	КоличествоСтрок = ОтфильтрованнаяТаблица.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
		Отбор.Вставить("ТипРегламента", ТипРегламента);
		ОтфильтрованнаяТаблица = Таблица.СКопировать(Отбор);
		КоличествоСтрок = ОтфильтрованнаяТаблица.Количество();
	КонецЕсли;
	
	Если КоличествоСтрок > 0 Тогда
		Если (ТипДокументаСтрокой = "SpecificationNotice" Или ТипДокументаСтрокой = "CancellationOffer")
			И КоличествоСтрок > 1 Тогда
			СтрокаТаблицы = ОтфильтрованнаяТаблица.Найти(Параметры.ТипЭлементаРегламента);
			Если СтрокаТаблицы <> Неопределено Тогда
				Параметры.ТипДокумента = СтрокаТаблицы.ТипДокумента;
			КонецЕсли;
		ИначеЕсли ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД И КоличествоСтрок > 1 Тогда
			ТаблицаТипДокумента = ОтфильтрованнаяТаблица.Скопировать(, "ТипДокумента");
			ТаблицаТипДокумента.Свернуть("ТипДокумента");
			Если ТаблицаТипДокумента.Количество() = 1 Тогда
				Параметры.ТипДокумента = ТаблицаТипДокумента[0].ТипДокумента;
			КонецЕсли;
		Иначе
			Параметры.ТипДокумента = ОтфильтрованнаяТаблица[0]["ТипДокумента"];
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Параметры.ТипДокумента) Тогда
			Параметры.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьКодТранзакции(ТипРегламента, ТипЭлементаРегламента, КодРегламента, ТипДокумента, ОтветнаяПодпись)
	
	КодТранзакции = "";
	
	Таблица = ТаблицаТиповЭлементовРегламента();
	
	Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПОА Тогда
		Если ОтветнаяПодпись Тогда
			КодТранзакции = "CancellationOfferResign";
		Иначе
			КодТранзакции = "CancellationOffer";
		КонецЕсли;
	ИначеЕсли ЭтоУведомлениеОбУточнении(ТипЭлементаРегламента) Тогда
		МодульОбменСГИСЭПД = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		КонецЕсли;
		Если МодульОбменСГИСЭПД <> Неопределено Тогда
			КодТранзакции = МодульОбменСГИСЭПД.КодТранзакцииУОУ(ТипЭлементаРегламента);
		КонецЕсли;
		Если КодТранзакции = "" Тогда
			Если КодРегламента = "Invoice"
				Или ТипРегламента = Перечисления.ТипыРегламентовЭДО.ФормализованныйАктСверки Тогда
				КодТранзакции = "CorrectionNotice";
			Иначе
				КодТранзакции = "MainDocumentReject";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		Если КодРегламента = "Invoice" Тогда
			КодТранзакции = "Invoice";
		ИначеЕсли КодРегламента = "Formalized" Тогда 
			КодТранзакции = "VendorTitle";
		Иначе
			КодТранзакции = "MainDocument";
			Если ОтветнаяПодпись Тогда
				КодТранзакции = "MainDocumentResign";
			Иначе
				КодТранзакции = "MainDocument";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
		Если КодРегламента = "Invoice" Тогда
			КодТранзакции = "CustomerInformation";
		ИначеЕсли КодРегламента = "Formalized" Тогда 
			КодТранзакции = "CustomerTitle";
		Иначе
			КодТранзакции = "MainDocumentResign";
		КонецЕсли;

	Иначе
		СтрокаТаблицы = Таблица.Найти(ТипЭлементаРегламента, "ТипЭлементаРегламента");
		Если СтрокаТаблицы <> Неопределено Тогда
			КодТранзакции = СтрокаТаблицы.КодТранзакции;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодТранзакции;
	
КонецФункции

Функция ПолучитьТипЭлементаРегламента(КодТранзакции)
	
	ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка();
	
	Таблица = ТаблицаТиповЭлементовРегламента();
	
	СрокаТаблицы = Таблица.Найти(КодТранзакции, "КодТранзакции");
	
	Если СрокаТаблицы <> Неопределено Тогда
		ТипЭлементаРегламента = СрокаТаблицы.ТипЭлементаРегламента;
	КонецЕсли;
	
	Возврат ТипЭлементаРегламента;
	
КонецФункции

Функция ТаблицаТиповЭлементовРегламента()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("КодТранзакции");
	Таблица.Колонки.Добавить("ТипЭлементаРегламента");
	
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"MainDocument", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"MainDocumentResign", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"PostDateConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.ПДП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ReceiveNotice", Перечисления.ТипыЭлементовРегламентаЭДО.ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"MainDocumentReject", Перечисления.ТипыЭлементовРегламентаЭДО.УОУ);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"VendorTitle", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CustomerTitle", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"Invoice", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ReceiveNoticePostDateConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ReceiveNoticePostDateConfirmationReceiveNotice", Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"PostDateConfirmationReceiveNotice", Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CorrectionNotice", Перечисления.ТипыЭлементовРегламентаЭДО.УОУ);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CorrectionNoticeReceiveNotice", Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"SendConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.ПДО);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"SendConfirmationReceiveNotice", Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CustomerInformation", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CustomerInformationPostDateConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CustomerInformationPostDateConfirmationReceiveNotice",
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CancellationOffer", Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CancellationOfferResign", Перечисления.ТипыЭлементовРегламентаЭДО.ПОА);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CancellationOfferReject", Перечисления.ТипыЭлементовРегламентаЭДО.ПОА_УОУ);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ErrorMessage", Перечисления.ТипыЭлементовРегламентаЭДО.Ошибка);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"ReceiveNoticeSendConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДО);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CustomerInformationSendConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДО);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CorrectionNoticeSendConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ПДО);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CorrectionNoticePostDateConfirmation", Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ПДП);		
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"AcceptanceNotice", Перечисления.ТипыЭлементовРегламентаЭДО.УОПУ);
	ДобавитьВТаблицуТипЭлементаРегламента(Таблица,
		"CustomerInformationReceiveNotice", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ИОП);	
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ПриФормированииТаблицыТиповЭлементовРегламента(Таблица);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		МодульЭлектронноеАктированиеЕИС.ПриФормированииТаблицыТиповЭлементовРегламента(Таблица);
	КонецЕсли;
		
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьВТаблицуТипЭлементаРегламента(Таблица, КодТранзакции, ТипЭлементаРегламента)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодТранзакции = КодТранзакции;
	НоваяСтрока.ТипЭлементаРегламента = ТипЭлементаРегламента;
	
КонецПроцедуры

Функция ТипРегламентаСтрокой(ТипРегламента, ТипДокумента)
	
	Таблица = ТаблицаТиповРегламентов();
	СтрокаТаблицы = Неопределено;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ТипРегламента", ТипРегламента);
	Отбор.Вставить("ТипДокумента", ТипДокумента);
	СтрокиТаблицы = Таблица.НайтиСтроки(Отбор);
	
	Если СтрокиТаблицы.Количество() > 0 Тогда
	    СтрокаТаблицы = СтрокиТаблицы[0];
	КонецЕсли;
		
	Если СтрокаТаблицы = Неопределено Тогда
		Отбор.Удалить("ТипДокумента");
		СтрокиТаблицы = Таблица.НайтиСтроки(Отбор);
		Если СтрокиТаблицы.Количество() > 0 Тогда
		    СтрокаТаблицы = СтрокиТаблицы[0];
		КонецЕсли;
	КонецЕсли;	
		
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат СтрокаТаблицы.КодРегламента;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип регламента электронного документооборота'");
	КонецЕсли;
	
КонецФункции

Функция ТаблицаТиповРегламентов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КодРегламента");
	Таблица.Колонки.Добавить("КодДокумента");
	Таблица.Колонки.Добавить("ТипРегламента");
	Таблица.Колонки.Добавить("ТипДокумента");
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Invoice";
	НоваяСтрока.КодДокумента = "";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД;
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Formalized";
	НоваяСтрока.КодДокумента = "";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный;
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Nonformalized";
	НоваяСтрока.КодДокумента = "";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПустаяСсылка();
	
	// Акты сверок взаиморасчетов.
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Formalized";
	НоваяСтрока.КодДокумента = "FormalizedReconciliationActSender";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ФормализованныйАктСверки;
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.КодРегламента = "Formalized";
	НоваяСтрока.КодДокумента = "FormalizedReconciliationActReceiver";
	НоваяСтрока.ТипРегламента = Перечисления.ТипыРегламентовЭДО.ФормализованныйАктСверки;
	НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		МодульОбменСГИСЭПД.ПриФормированииТаблицыТиповРегламентов(Таблица);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ТипРегламентаИзСтроки(КодРегламента, КодДокумента) Экспорт
	
	Таблица = ТаблицаТиповРегламентов();
	СтрокаТаблицы = Неопределено;
	
	Отбор = Новый Структура();
	Отбор.Вставить("КодРегламента", КодРегламента);
	Отбор.Вставить("КодДокумента", КодДокумента);
	СтрокиТаблицы = Таблица.НайтиСтроки(Отбор);
	
	Если СтрокиТаблицы.Количество() > 0 Тогда
	    СтрокаТаблицы = СтрокиТаблицы[0];
	КонецЕсли;
		
	Если СтрокаТаблицы = Неопределено Тогда
		Отбор.Удалить("КодДокумента");
		СтрокиТаблицы = Таблица.НайтиСтроки(Отбор);
		Если СтрокиТаблицы.Количество() > 0 Тогда
		    СтрокаТаблицы = СтрокиТаблицы[0];
		КонецЕсли;
	КонецЕсли;	
		
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат СтрокаТаблицы.ТипРегламента;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный код регламента электронного документооборота'");
	КонецЕсли;
	
КонецФункции

Функция СформироватьКарточкуCML(ДеревоДанных, Ошибки, ЭлектронныйДокумент, СпособОбмена,
	КонтекстДиагностики = Неопределено)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	Попытка
		Карточка = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Id", "Отправитель.ИД");
		ЗначенияСвойствXDTO.Вставить("Name", "Отправитель.Наименование");
		ЗначенияСвойствXDTO.Вставить("Inn", "Отправитель.ИНН");
		ЗначенияСвойствXDTO.Вставить("Kpp", "Отправитель.КПП");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(АбонентОтправитель, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		
		Отправитель = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , Ошибки);
		
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Получатель.Тип")) Тогда
			АбонентПолучатель  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Organization");
			ЗначенияСвойствXDTO = Новый Соответствие;
			ЗначенияСвойствXDTO.Вставить("Name", "Получатель.Наименование");
			ЗначенияСвойствXDTO.Вставить("Type", "Получатель.Тип");
			РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(АбонентПолучатель, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
			ИмяСвойства = "Organization";
		ИначеЕсли СпособОбмена <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда 
			АбонентПолучатель  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");
			ЗначенияСвойствXDTO = Новый Соответствие;
			ЗначенияСвойствXDTO.Вставить("Id", "Получатель.ИД");
			ЗначенияСвойствXDTO.Вставить("Name", "Получатель.Наименование");
			ЗначенияСвойствXDTO.Вставить("Inn", "Получатель.ИНН");
			ЗначенияСвойствXDTO.Вставить("Kpp", "Получатель.КПП");
			РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(АбонентПолучатель, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
			ИмяСвойства = "Abonent";
		КонецЕсли;
		
		Получатель  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Получатель, ИмяСвойства, АбонентПолучатель, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , Ошибки);
		
		Идентификаторы = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("ExternalIdentifier", "Определение.ВнешнийИдентификатор");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Идентификаторы, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , Ошибки);
		
		Тип = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		Если СпособОбмена <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ЗначенияСвойствXDTO = Новый Соответствие;
			ЗначенияСвойствXDTO.Вставить("Name", "Определение.Имя");
			ЗначенияСвойствXDTO.Вставить("ResignRequired", "Определение.ТребуетсяПовторнаяПодпись");
			РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Тип, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		КонецЕсли;
		
		Описание = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Title", "Описание.Заголовок");
		ЗначенияСвойствXDTO.Вставить("Date", "Описание.Дата");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Описание, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		
		Комментарий = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание.Комментарий");
		Если ЗначениеЗаполнено(Комментарий) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Описание, "Comment", Комментарий, , Ошибки);
		КонецЕсли;
		
		СтрокаТаблицыДополнительныхДанных = ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(ДеревоДанных,
			"Описание.ДополнительныеДанные", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыДополнительныхДанных.Значение) Тогда
			ОписаниеДопДанные = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData");
			Для Каждого СтрокаДопДанных Из СтрокаТаблицыДополнительныхДанных.Строки Цикл
				ДопДанные = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description.AdditionalData.AdditionalParameter");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Name", "Описание.ДополнительныеДанные.НомерСтроки.Имя");
				ЗначенияСвойствXDTO.Вставить("Value", "Описание.ДополнительныеДанные.НомерСтроки.Значение");
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ДопДанные, ЗначенияСвойствXDTO, СтрокаДопДанных, Ошибки);
				ОписаниеДопДанные.AdditionalParameter.Добавить(ДопДанные);
			КонецЦикла;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Описание, "AdditionalData", ОписаниеДопДанные, , Ошибки);
		КонецЕсли;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , Ошибки);
		
		Карточка.Проверить();
		
		Возврат РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Карточка, Ложь);
	Исключение
		ДобавитьОшибкуФормированияТранспортногоКонтейнера(КонтекстДиагностики, ИнформацияОбОшибке(), ЭлектронныйДокумент);
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция СформироватьТранспортнуюИнформациюCML(ДеревоДанных, Ошибки, ОписаниеОбъектов, КонтекстДиагностики)
	
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";
	Попытка
		
		ОписаниеКонтейнера = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		СтрокаТаблицыДокументообороты = ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(ДеревоДанных,
			"Документообороты", Истина);
		Сч = 1;
		Для Каждого СтрокаДокументооборот Из СтрокаТаблицыДокументообороты.Строки Цикл
			Документооборот = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
			ЗначенияСвойствXDTO = Новый Соответствие;
			ЗначенияСвойствXDTO.Вставить("ID", "Документообороты.НомерСтроки.ИД");
			РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Документооборот, ЗначенияСвойствXDTO,
				СтрокаДокументооборот, Ошибки);
			
			ДокументыСхемы  = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
			Документ     = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 
			
			ЗначенияСвойствXDTO = Новый Соответствие;
			ЗначенияСвойствXDTO.Вставить("TransactionCode", "Документообороты.НомерСтроки.Документ.КодТранзакции");
			ЗначенияСвойствXDTO.Вставить("ReglamentCode", "Документообороты.НомерСтроки.Документ.КодРегламента");
			РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Документ, ЗначенияСвойствXDTO, СтрокаДокументооборот, Ошибки);
			
			Файлы = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
			Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				СтрокаДокументооборот, "Документообороты.НомерСтроки.Документ.ГлавныйФайл.Путь")) Тогда
				
				ФайлДанных = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
					ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Name", "Документообороты.НомерСтроки.Документ.ГлавныйФайл.Имя");
				ЗначенияСвойствXDTO.Вставить("Path", "Документообороты.НомерСтроки.Документ.ГлавныйФайл.Путь");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.ПропускаемыеНезаполненныеСвойства = "Name";
				ПараметрыЗаполнения.ОбязательныеСвойства = "Path";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФайлДанных, ЗначенияСвойствXDTO, СтрокаДокументооборот, Ошибки,
					ПараметрыЗаполнения);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , Ошибки);
				
			КонецЕсли;
			
			СтрокаТаблицыПодписейГлавногоФайла = ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(СтрокаДокументооборот,
				"Документообороты.НомерСтроки.Документ.ГлавныйФайлПодписи", Истина);
			Если ЗначениеЗаполнено(СтрокаТаблицыПодписейГлавногоФайла.Значение) Тогда
				Для Каждого СтрокаПодпись Из СтрокаТаблицыПодписейГлавногоФайла.Строки Цикл
					Подпись = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
						ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImageSignature");
					ЗначенияСвойствXDTO = Новый Соответствие;
					ЗначенияСвойствXDTO.Вставить("Name", "Документообороты.НомерСтроки.Документ.ГлавныйФайлПодписи.НомерСтроки.Имя");
					ЗначенияСвойствXDTO.Вставить("Path", "Документообороты.НомерСтроки.Документ.ГлавныйФайлПодписи.НомерСтроки.Путь");
					ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
					ПараметрыЗаполнения.ПропускаемыеНезаполненныеСвойства = "Name";
					ПараметрыЗаполнения.ОбязательныеСвойства = "Path";
					РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Подпись, ЗначенияСвойствXDTO, СтрокаПодпись, Ошибки,
						ПараметрыЗаполнения);
					Файлы.MainImageSignature.Добавить(Подпись);
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДокументооборот,
				"Документообороты.НомерСтроки.Документ.ДополнительныйФайл.Путь")) Тогда
				
				ФайлДанных = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
					ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImage");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Name", "Документообороты.НомерСтроки.Документ.ДополнительныйФайл.Имя");
				ЗначенияСвойствXDTO.Вставить("Path", "Документообороты.НомерСтроки.Документ.ДополнительныйФайл.Путь");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.ПропускаемыеНезаполненныеСвойства = "Name";
				ПараметрыЗаполнения.ОбязательныеСвойства = "Path";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФайлДанных, ЗначенияСвойствXDTO, СтрокаДокументооборот, Ошибки,
					ПараметрыЗаполнения);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файлы, "DataImage", ФайлДанных, , Ошибки);
				
				СтрокаТаблицыПодписейДополнительногоФайла = СтрокаДокументооборот.Строки.Найти(
					"Документообороты.НомерСтроки.Документ.ДополнительныйФайлПодписи", "ПолныйПуть", Истина);
				Если ЗначениеЗаполнено(СтрокаТаблицыПодписейДополнительногоФайла.Значение) Тогда
					
					Для Каждого СтрокаПодпись Из СтрокаТаблицыПодписейДополнительногоФайла.Строки Цикл
						Подпись = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(
							ПутьКОписанию + ".DocFlow.Documents.Document.Files.DataImageSignature");
						ЗначенияСвойствXDTO = Новый Соответствие;
						ЗначенияСвойствXDTO.Вставить("Name",
							"Документообороты.НомерСтроки.Документ.ДополнительныйФайлПодписи.НомерСтроки.Имя");
						ЗначенияСвойствXDTO.Вставить("Path",
							"Документообороты.НомерСтроки.Документ.ДополнительныйФайлПодписи.НомерСтроки.Путь");
						ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
						ПараметрыЗаполнения.ПропускаемыеНезаполненныеСвойства = "Name";
						ПараметрыЗаполнения.ОбязательныеСвойства = "Path";
						РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Подпись, ЗначенияСвойствXDTO, СтрокаПодпись, Ошибки,
							ПараметрыЗаполнения);
						Файлы.DataImageSignature.Добавить(Подпись);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		
			ФайлКарточки = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path",
				СтрШаблон("%1/card.xml", Сч),, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , Ошибки);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , Ошибки);
			ДокументыСхемы.Document.Добавить(Документ);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , Ошибки);
			ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
			Сч = Сч + 1;
		КонецЦикла;
		
		ОписаниеКонтейнера.Проверить();
		
		Возврат РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ОписаниеКонтейнера, Ложь);
		
	Исключение
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Для каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
			ДобавитьОшибкуФормированияТранспортногоКонтейнера(КонтекстДиагностики, ИнформацияОбОшибке(),
				ОписаниеОбъекта.ТранспортныйКонтейнер, ТекстСообщения);
		КонецЦикла;
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Добавляет в контекст операции ошибку формирования транспортного контейнера.
//
// Параметры:
//  КонтекстДиагностики        - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ИнформацияОбОшибке         - ИнформацияОбОшибке - информация об ошибке, см. синтакс-помощник.
//  СсылкаНаОбъект             - ЛюбаяСсылка - ссылка на объект ИБ, по которому формируется контейнер.
//  КраткоеПредставлениеОшибки - Строка - краткое представление ошибки, если параметр не указан, будет получено
//                               из ИнформацияОбОшибке.
//
Процедура ДобавитьОшибкуФормированияТранспортногоКонтейнера(КонтекстДиагностики, ИнформацияОбОшибке, СсылкаНаОбъект = Неопределено,
	КраткоеПредставлениеОшибки = "")
	
	Если КраткоеПредставлениеОшибки = "" Тогда
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе 
		ТекстСообщения = КраткоеПредставлениеОшибки;
	КонецЕсли;
	ДополнительныеПараметрыОшибки = Новый Структура;
	Если СсылкаНаОбъект <> Неопределено Тогда
		ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	КонецЕсли;
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
		НСтр("ru = 'Формирование транспортного контейнера ЭДО'"),
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
		ТекстСообщения, ДополнительныеПараметрыОшибки);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	
КонецПроцедуры

// Формирует присоединенный файл транспортного контейнера ЭДО.
// 
// Параметры:
// 	ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 	ОписаниеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
Процедура СформироватьПрисоединенныйФайлТранспортногоКонтейнера(ТранспортныйКонтейнер, ОписаниеОбъекта) Экспорт
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	Если ОписаниеОбъекта.ЭтоОтветнаяПодпись Тогда
		СохранитьПоследнююПодпись(ОписаниеОбъекта, АдресКаталога, СоответствиеФайлЭД);
	Иначе
		СохранитьФайлСПодписями(ОписаниеОбъекта, АдресКаталога, СоответствиеФайлЭД);
	КонецЕсли;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;
	
	ФайлыВАрхив = Новый Массив;
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
		ФайлыВАрхив.Добавить(НайденныйФайл.ПолноеИмя);
	КонецЦикла;
	
	ИмяФайла = "EDI_" + ТранспортныйКонтейнер.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	СоответствиеВложений    = ИнформацияОФайлахИПодписях(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									ТранспортныйКонтейнер,
									СоответствиеВложений,
									СоответствиеФайлЭД);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(ТекстОписанияУчастников);
	
	ФайлыВАрхив.Добавить(АдресКаталога + "packageDescription.xml");
	
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(ФайлыВАрхив);
	
	ПоместитьАрхивВКонтейнер(ТранспортныйКонтейнер, Архив, ИмяФайла, ".zip");
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
	
КонецПроцедуры

Процедура СохранитьПоследнююПодпись(ОписаниеОбъекта, АдресКаталога, СоответствиеФайлЭД)
	
	Подписи = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеОбъекта.ПодписиОсновныхДанных);
	
	Если Подписи.Количество() > 0 Тогда
		ПоследняяПодпись = Подписи[Подписи.ВГраница()];
		СохранитьПодписи(
				ОписаниеОбъекта,
				АдресКаталога,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоследняяПодпись),
				СоответствиеФайлЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлСПодписями(ОписаниеОбъекта,
								АдресКаталога,
								СоответствиеФайлЭД)
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись.
	ПолноеИмяФайла = СохранитьФайл(ОписаниеОбъекта, АдресКаталога, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	Подписи = ОписаниеОбъекта.ПодписиОсновныхДанных;
	Если Подписи.Количество() > 0 Тогда
		СохранитьПодписи(ОписаниеОбъекта, АдресКаталога, Подписи, СоответствиеФайлЭД);
	КонецЕсли;
	
КонецПроцедуры

// Сохранение файлов дополнительных данных электронного документа.
//
// Параметры:
//  ОписаниеОбъекта - СтрокаТаблицыЗначений из см. СинхронизацияЭДО.НовыеДанныеОбъектов
//  ИмяКаталога - Строка - каталог сохранения.
//  СтруктураФайловЭД - Структура - параметры файлов электронных документов.
//
Процедура СохранитьФайлыДопДанныхЭД(ОписаниеОбъекта, ИмяКаталога, СтруктураФайловЭД)
	
	ОписаниеДополнительныхДанных = ОписаниеОбъекта.ОписаниеДополнительныхДанных;
	Если ЗначениеЗаполнено(ОписаниеДополнительныхДанных.ИмяФайла) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		ИмяПолучаемогоФайла = ОписаниеДополнительныхДанных.ИмяФайла;
		ОписаниеДополнительныхДанных.ДвоичныеДанные.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьПодписи(ОписаниеОбъекта,
							АдресКаталога,
							Подписи,
							СоответствиеФайлЭД)
	
	ИмяФайла = ОписаниеОбъекта.ОписаниеДанных.ИмяФайла;
	Точка = СтрНайти(ИмяФайла, ".");
	Если Точка = 0 Тогда
		ИмяФайлаБезРасширения = ИмяФайла;
	Иначе
		ИмяФайлаБезРасширения = Лев(ИмяФайла, Точка - 1);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого Подпись Из Подписи Цикл
		ИмяФайлаПодписи = Подпись.ИмяФайла;
		
		Сч = Сч + 1;
		
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			ИмяФайлаПодписи = ИмяФайлаБезРасширения + "-" + Сч + ".p7s";
		КонецЕсли;
		
		ИмяФайлаПодписи = СтроковыеФункции.СтрокаЛатиницей(ИмяФайлаПодписи);
		ИмяФайлаПодписи = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ИмяФайлаПодписи, Истина);
		ИмяФайлаПодписи = РаботаСФайламиБЭД.ЗаменитьСимволыОтсутствующиеВКодировкеТекста(ИмяФайлаПодписи); 
		
		ПолныйПутьПодписи = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(АдресКаталога, ИмяФайлаПодписи);
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(АдресКаталога, ИмяФайлаПодписи);
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ОписаниеОбъекта.ИдентификаторСообщения);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ОписаниеОбъекта.ИдентификаторДокументооборота);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		Подпись.ДвоичныеДанные.Записать(ПолныйПутьПодписи);
		
		Если СинхронизацияЭДО.ПоддерживаетсяПередачаМЧДВТранспортномКонтейнере(ОписаниеОбъекта.СпособОбмена) Тогда
			СохранитьПодписьМЧД(ОписаниеОбъекта, АдресКаталога, СоответствиеФайлЭД, Подпись, ИмяФайлаПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьПодписьМЧД(ОписаниеОбъекта, АдресКаталога, СоответствиеФайлЭД, Подпись, ИмяФайлаПодписиДокумента)
	
	ХешПодписи = КриптографияБЭД.ХешПодписи(Подпись.ДвоичныеДанные);
	МЧД = ОписаниеОбъекта.Доверенности.Получить(ХешПодписи);
	
	Если МЧД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МЧД.ЭтоФайловаяДоверенность Тогда
	
		ИмяФайлаМЧД = МЧД.Доверенность.ИмяФайла;
		МЧД.Доверенность.ДвоичныеДанные.Записать(АдресКаталога + ИмяФайлаМЧД);
		ИмяФайлаПодписиМЧД = МЧД.Подпись.ИмяФайла;
		МЧД.Подпись.ДвоичныеДанные.Записать(АдресКаталога + ИмяФайлаПодписиМЧД);
		
	КонецЕсли;
		
	Если ТипЗнч(СоответствиеФайлЭД) = Тип("Структура") Тогда
		
		ИменаФайловПодписей = Новый Массив;
		
		Если МЧД.ЭтоФайловаяДоверенность Тогда
		
			ДанныеМЧД = СоответствиеФайлЭД.Доверенности.Получить(ИмяФайлаМЧД);
			Если ДанныеМЧД <> Неопределено Тогда
				СтруктураДанныхМЧД = ДанныеМЧД.Значение;
				ИменаФайловПодписей = СтруктураДанныхМЧД.ИменаФайловПодписей;
			КонецЕсли;
			
			ИменаФайловПодписей.Добавить(СоответствиеФайлЭД.Путь + ИмяФайлаПодписиДокумента);
			СтруктураДанныхМЧД = Новый Структура("ФайлПодписиМЧД, ИменаФайловПодписей, СвойстваМЧД",
				СоответствиеФайлЭД.Путь + ИмяФайлаПодписиМЧД, ИменаФайловПодписей, МЧД);
			СоответствиеФайлЭД.Доверенности.Вставить(СоответствиеФайлЭД.Путь + ИмяФайлаМЧД, СтруктураДанныхМЧД);
			
		Иначе
			
			ДанныеМЧД = СоответствиеФайлЭД.ДоверенностиПоСсылке.Получить(МЧД.НомерДоверенности);
			Если ДанныеМЧД <> Неопределено Тогда
				СтруктураДанныхМЧД = ДанныеМЧД.Значение;
				ИменаФайловПодписей = СтруктураДанныхМЧД.ИменаФайловПодписей;
			КонецЕсли;
			
			ИменаФайловПодписей.Добавить(СоответствиеФайлЭД.Путь + ИмяФайлаПодписиДокумента);
			СтруктураДанныхМЧД = Новый Структура("ИменаФайловПодписей, СвойстваМЧД", ИменаФайловПодписей, МЧД);
			СоответствиеФайлЭД.ДоверенностиПоСсылке.Вставить(МЧД.НомерДоверенности, СтруктураДанныхМЧД);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнформацияОФайлахИПодписях(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если НРег(Прав(ИмяФайла, 3)) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = РаботаСФайламиБЭД.ТекущееИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьXML.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьXML.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьXML.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьXML.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Шифрование по документам
	
	Контейнеры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Конверт);
	ОбъектыКонтейнера = ТранспортныеКонтейнерыЭДО.ОбъектыКонтейнеров(Контейнеры)[Конверт];
	ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из ОбъектыКонтейнера Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьXML.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьXML.ЗаписатьТекст("Да");
		Иначе
			ЗаписьXML.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьXML.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьXML.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьXML.ЗаписатьТекст(НомерЭД);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьXML.ЗаписатьТекст(УникальныйИД);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьXML.ЗаписатьТекст(Подпись);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция СохранитьФайл(ОписаниеОбъекта,
						ИмяКаталога,
						СоответствиеФайлЭД = Неопределено)
	
	ОписаниеДанных = ОписаниеОбъекта.ОписаниеДанных;
	
	ИмяПолучаемогоФайла = ОписаниеДанных.ИмяФайла;
	ДвоичныеДанныеФайла = ОписаниеДанных.ДвоичныеДанные;
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
		СтруктураПараметровЭД = Новый Структура;
		СтруктураПараметровЭД.Вставить("НомерЭД", ОписаниеОбъекта.ИдентификаторСообщения);
		СтруктураПараметровЭД.Вставить("УникальныйИД", ОписаниеОбъекта.ИдентификаторДокументооборота);
		
		СоответствиеФайлЭД.Вставить(ОписаниеДанных.ИмяФайла, СтруктураПараметровЭД);
	Иначе
		СоответствиеФайлЭД.Вставить("ГлавныйФайл", ОписаниеДанных.ИмяФайла);
	КонецЕсли;
		
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если СтрНайти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		ДатаКаноническогоВида = Формат(ИскомаяДата,"ДФ=yyyyMMddhhmmss");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

Функция ЭтоУведомлениеОбУточнении(ТипЭлементаРегламента)
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ
			Или (МодульОбменСГИСЭПД <> Неопределено И МодульОбменСГИСЭПД.ЭтоУОУ(ТипЭлементаРегламента));
	
КонецФункции

Функция ЭтоИзвещениеОПолучении(ТипЭлементаРегламента)
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.УОУ_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ИОП;
	
КонецФункции

Функция ЭтоИзвещениеОПолученииДляОператора(ТипЭлементаРегламента)
	
	Возврат ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП_ИОП
		Или ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя_ПДП_ИОП;
	
КонецФункции

Функция ТипыДокументовТранспортнойИнформации()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТипДокументаСтрокой");
	Таблица.Колонки.Добавить("ТипДокумента");
	Таблица.Колонки.Добавить("ТипЭлементаРегламента");
	Таблица.Колонки.Добавить("ТипРегламента");
	Таблица.Колонки.Добавить("ТипДокументаДляДополнительныхДанныхСтрокой");
	Таблица.Колонки.Добавить("ЭтоОтветнаяПодпись");
	
	Макет = Обработки.ТранспортныеКонтейнерыЭДО.ПолучитьМакет("ТипыДокументовТранспортнойИнформации");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	Сч = 1;
	Пока Истина Цикл
		ТипДокументаСтрокой = Макет.Область(Сч, 1, Сч, 1).Текст;
		Если Не ЗначениеЗаполнено(ТипДокументаСтрокой) Тогда
			Прервать;
		КонецЕсли;
		ТипДокументаТекст = Макет.Область(Сч, 2, Сч, 2).Текст;
		ТипДокумента = Перечисления.ТипыДокументовЭДО[ТипДокументаТекст];
		ТипЭлементаРегламентаТекст = Макет.Область(Сч, 3, Сч, 3).Текст;
		ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО[ТипЭлементаРегламентаТекст];
		ТипРегламентаТекст = Макет.Область(Сч, 4, Сч, 4).Текст;
		ТипРегламента = Перечисления.ТипыРегламентовЭДО[ТипРегламентаТекст];
		ТипДокументаДляДополнительныхДанныхСтрокой = Макет.Область(Сч, 5, Сч, 5).Текст;
		ТекстОтветнаяПодпись = Макет.Область(Сч, 6, Сч, 6).Текст;
		Если Не ЗначениеЗаполнено(ТекстОтветнаяПодпись) Тогда
			ЭтоОтветнаяПодпись = Неопределено;
		Иначе
			ЭтоОтветнаяПодпись = ТекстОтветнаяПодпись = "Истина";
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ТипДокументаСтрокой = ТипДокументаСтрокой;
		НоваяСтрока.ТипДокумента = ТипДокумента;
		НоваяСтрока.ТипЭлементаРегламента = ТипЭлементаРегламента;
		НоваяСтрока.ТипРегламента = ТипРегламента;
		НоваяСтрока.ТипДокументаДляДополнительныхДанныхСтрокой = ТипДокументаДляДополнительныхДанныхСтрокой;
		НоваяСтрока.ЭтоОтветнаяПодпись = ЭтоОтветнаяПодпись;
		Сч = Сч + 1;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ДобавитьТипыДокументовЭПД(Таблица);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти