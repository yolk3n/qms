#Область ПрограммныйИнтерфейс

/// Функция - Выполнить валидацию СЭМДНа сервисе
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ информационной базы.
//  ТелоМД - Строка - СЭМД, тело медицинского документа.
//  УровеньСообщенийОбОбОшибках - Число - число с максимально разрешенным для показа пользователю кодом ошибки. Ошибки с кодом больше этого значения не будут показаны пользователю. См. функцию ОбработатьРезультатПроверки.
//  УровеньЗаписейВЖурналРегистрации - Число - число с максимально разрешенным для записи в журнал регистрации кодом ошибки. Ошибки с кодом больше этого значения не будут записаны в ЖР. См. функцию ОбработатьРезультатПроверки.
// 
// Возвращаемое значение:
// Число - код ошибки или успеха. См. функцию ОбработатьРезультатПроверки.
///
Функция ВыполнитьПроверкуСЭМДНаСервисеВалидации(ДокументСсылка, ТелоМД, КодТипаМДРЭМД = Неопределено, УровеньСообщенийОбОбОшибках = 400, УровеньЗаписейВЖурналРегистрации = 400) Экспорт 
	СоответствиеОшибок_ = Новый Соответствие;
	Результат_ = ВыполнитьВалидациюСЭМД(ДокументСсылка, ТелоМД, КодТипаМДРЭМД, СоответствиеОшибок_);
	ОбработатьРезультатПроверки(Результат_, ДокументСсылка, СоответствиеОшибок_, УровеньСообщенийОбОбОшибках, УровеньЗаписейВЖурналРегистрации);
	Возврат Результат_;
КонецФункции

/// Выполняет проверку данных сотрудников указанных в СЭМД на сервисе 1С Федеральные регистры.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ информационной базы.
//  ТелоМД - Строка - СЭМД, тело медицинского документа.
// 
// Возвращаемое значение:
// Булево - Результат проверки, если есть ошибки, то Ложь.
///
Функция ВыполнитьПроверкуСотрудниковНаСервисе1СФР(ДокументСсылка, ТелоМД) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	АдресСервиса_ = Константы.АдресСервисаВалидацииСотрудников.Получить();
	Если Не ЗначениеЗаполнено(АдресСервиса_) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеСотрудников_ = ПодготовитьДанныеСотрудниковДляОтправки(ТелоМД);
	Ошибки_ = ОтправитьЗапросыНаВалидациюСотрудников(АдресСервиса_, ДанныеСотрудников_, ДокументСсылка);
	Если Ошибки_.Количество() <> 0 Тогда
		Сообщение_ = Новый СообщениеПользователю();
		Сообщение_.Текст = СтрСоединить(Ошибки_, Символы.ПС);
		Сообщение_.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВалидацияСЭМД

Процедура ОбработатьРезультатПроверки(КодСостоянияПроверки, ДокументСсылка, СоответствиеОшибок, УровеньСообщенийОбОшибках, УровеньЗаписейВЖурналРегистрации)
	ОписаниеОшибки_ = "";
	Если КодСостоянияПроверки = Неопределено Тогда
		ОписаниеОшибки_ = "Неизвестная ошибка.";
	ИначеЕсли КодСостоянияПроверки = 101 Тогда 
		ОписаниеОшибки_ = "Не удалось выполнить проверку, т.к. в настройках раздела ЭМК не указан адрес сервиса валидации СЭМД.";
	ИначеЕсли КодСостоянияПроверки = 102 Тогда 
		ОписаниеОшибки_ = "Сервис валидации СЭМД вернул код состояния ответа, отличный от 200.";
	ИначеЕсли КодСостоянияПроверки = 103 Тогда 
		ОписаниеОшибки_ = "Для проверяемого файла в декларации XML должна быть указана кодировка UTF-8.";
	ИначеЕсли КодСостоянияПроверки = 104 Тогда 
		ОписаниеОшибки_ = "Проверяемый файл должен иметь кодировку UTF-8 без BOM.";
	ИначеЕсли КодСостоянияПроверки = 105 Тогда 
		ОписаниеОшибки_ = "В настройках задан некорректный адрес сервиса валидации СЭМД.";
	ИначеЕсли КодСостоянияПроверки = 106 Тогда 
		ОписаниеОшибки_ = "Сервис валидации СЭМД вернул некорректный ответ. Проверьтет в настройках адрес сервиса валидации СЭМД.";
	ИначеЕсли КодСостоянияПроверки = 201 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, на сервисе валидации отсутствует XSD для данного типа СЭМД.";
	ИначеЕсли КодСостоянияПроверки = 202 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, на сервисе валидации отсутствует схематрон для данного типа СЭМД.";
	ИначеЕсли КодСостоянияПроверки = 301 Тогда 
		ОписаниеОшибки_ = "Документ не соответствует XSD.";
	ИначеЕсли КодСостоянияПроверки = 302 Тогда 
		ОписаниеОшибки_ = "Документ не соответствует схематрону.";
	ИначеЕсли КодСостоянияПроверки = 401 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, т.к. в документе не задан тип шаблона СЭМД (элемент templateId)";
	ИначеЕсли КодСостоянияПроверки = 402 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, по templateId не найдено руководство в справочнике ""Руководства по реализации и протоколы информационного взаимодействия СЭМД"".";
	ИначеЕсли КодСостоянияПроверки = 403 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, для руководства не заполнен реквизит Редакция.";
	ИначеЕсли КодСостоянияПроверки = 404 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, для типа медицинского документа, указанного в руководстве, не задан реквизит Атрибут code.";
	ИначеЕсли КодСостоянияПроверки = 405 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, для руководства не заполнен реквизит Гиперссылка.";
	ИначеЕсли КодСостоянияПроверки = 501 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, ошибка запуска Saxon на сервисе валидации.";		
	ИначеЕсли КодСостоянияПроверки = 502 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, для ШМД, с помощью которого был сформирован документ, не заполнен тип РЭМД.";
	ИначеЕсли КодСостоянияПроверки = 503 Тогда 
		ОписаниеОшибки_ = "Валидация невозможна, для не заполнено тело СЭМД.";	
	ИначеЕсли КодСостоянияПроверки = 601 Тогда 
		ОписаниеОшибки_ = "Документ соответствует XSD, на сервисе валидации отсутствует схематрон для данного типа СЭМД.";
	ИначеЕсли КодСостоянияПроверки = 602 Тогда 
		ОписаниеОшибки_ = "Документ соответствует XSD.";
	ИначеЕсли КодСостоянияПроверки = 603 Тогда 
		ОписаниеОшибки_ = "Документ соответствует схематрону.";	
	КонецЕсли;
	
	МассивСообщенийОбОшибках_ = Новый Массив();
	Если КодСостоянияПроверки = Неопределено ИЛИ КодСостоянияПроверки < УровеньСообщенийОбОшибках Тогда
		МассивСообщенийОбОшибках_.Добавить(ОписаниеОшибки_);		
		Для Каждого КлючЗначение_ Из СоответствиеОшибок Цикл
			ИмяФайла_ = КлючЗначение_.Ключ;
			МассивОшибок_ = КлючЗначение_.Значение;
			Если МассивОшибок_.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Ошибка_ Из МассивОшибок_ Цикл
				МассивСообщенийОбОшибках_.Добавить(СтрШаблон("%1: %2", ИмяФайла_, Ошибка_));
			КонецЦикла;
			
		КонецЦикла;
		Сообщение_ = Новый СообщениеПользователю();
		Сообщение_.Текст = СтрСоединить(МассивСообщенийОбОшибках_, Символы.ПС);
		Сообщение_.Сообщить();
	КонецЕсли;
	
	МассивСообщенийОбОшибках_ = Новый Массив();
	Если КодСостоянияПроверки = Неопределено ИЛИ КодСостоянияПроверки < УровеньЗаписейВЖурналРегистрации Тогда
		МассивСообщенийОбОшибках_.Добавить(ОписаниеОшибки_);		
		Для Каждого КлючЗначение_ Из СоответствиеОшибок Цикл
			ИмяФайла_ = КлючЗначение_.Ключ;
			МассивОшибок_ = КлючЗначение_.Значение;
			Если МассивОшибок_.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Ошибка_ Из МассивОшибок_ Цикл
				МассивСообщенийОбОшибках_.Добавить(СтрШаблон("%1: %2", ИмяФайла_, Ошибка_));
			КонецЦикла;
			
		КонецЦикла;
		ЗаписьЖурналаРегистрации(
			"ВалидацияСЭМД",
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДокументСсылка,
			СтрСоединить(МассивСообщенийОбОшибках_, Символы.ПС)
		);
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьВалидациюСЭМД(ДокументСсылка, ТелоМД, КодТипаМДРЭМД, OutМассивОшибок)
	УстановитьПривилегированныйРежим(Истина);
	АдресСервиса_ = Константы.АдресСервисаВалидацииСЭМД.Получить();
	Если Не ЗначениеЗаполнено(АдресСервиса_) Тогда
		Возврат 101;
	КонецЕсли;
	Если Не Прав(АдресСервиса_, СтрДлина("/verify")) = "/verify" Тогда
		Возврат 105;
	КонецЕсли;
	ТипРЭМД_ = КодТипаМДРЭМД;
	Если Не ЗначениеЗаполнено(ТипРЭМД_) Тогда
		ТипРЭМД_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, "КодТипаДокументаРЭМД").КодТипаДокументаРЭМД;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипРЭМД_) Тогда
		Возврат 502;
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(ТелоМД) И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.МедицинскийДокумент") Тогда
	//	ТелоМД = РаботаСЭП.ПолучитьCDAМедДокумента(ДокументСсылка);
	//	ТелоМД = ШаблоныМедицинскихДокументовПоликлиника.СоздатьШапкуДокументу(ТелоМД, ДокументСсылка);	
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(ТелоМД) Тогда
		Возврат 503;
	КонецЕсли;
	
	Ответ_ = ОтправитьЗапросНаВалидациюСЭМД(АдресСервиса_, ТелоМД, ТипРЭМД_);
	Возврат ОбработатьОтвет(Ответ_, OutМассивОшибок);
КонецФункции

Функция ОтправитьЗапросНаВалидациюСЭМД(АдресСервиса, ТелоМД, ТипРЭМД)
	Разделитель_ = СтрШаблон("---------------------------%1", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
	ТекстЗапроса_ = СформироватьТекстЗапроса(ТелоМД, ТипРЭМД, Разделитель_);
	НастройкиПодключения_ = НастройкиПодключения(АдресСервиса);
	Соединение_ = Новый HTTPСоединение(
		НастройкиПодключения_.Сервер,
		НастройкиПодключения_.Порт,
		НастройкиПодключения_.Пользователь,
		НастройкиПодключения_.Пароль
	);
	Запрос_ = Новый HTTPЗапрос("/" + НастройкиПодключения_.АдресРесурса);
	ИмяФайла_ = ПолучитьИмяВременногоФайла();
	Документ_ = Новый ТекстовыйДокумент;
	Документ_.ДобавитьСтроку(ТекстЗапроса_);
	Документ_.Записать(ИмяФайла_, "CESU-8");
	ДвоичныеДанные_ = Новый ДвоичныеДанные(ИмяФайла_);	
	Запрос_.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные_);
	
	Заголовки_ = Новый Соответствие();
	Заголовки_.Вставить("Content-Type","multipart/form-data; boundary=" + Разделитель_);	
	РазмерСообщения_ = Формат(ДвоичныеДанные_.Размер(), "ЧН=; ЧГ=");
	Заголовки_.Вставить("Content-Length", РазмерСообщения_);
	Запрос_.Заголовки = Заголовки_;
	Попытка
		Ответ_ = Соединение_.ОтправитьДляОбработки(Запрос_);
	Исключение
		ЗаписьЖурналаРегистрации(
			СтрШаблон("Не удалось установить соединение с сервером %1.", НастройкиПодключения_.Сервер),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение;
	КонецПопытки;	
	
	Если Лев(Ответ_.Заголовки["Content-Type"], СтрДлина("text/plain")) <> "text/plain" Тогда
		Возврат "unexpected answer";
	КонецЕсли;
	
	Если Ответ_.КодСостояния <> 200 Тогда 
		ТелоОтвета_ = Ответ_.ПолучитьТелоКакСтроку();
		ЗаписьЖурналаРегистрации(
			"ВалидацияСЭМД",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("Сервис валидации %1 вернул код состояния %2: %3.", АдресСервиса, Ответ_.КодСостояния, ТелоОтвета_)
		);
		Возврат Неопределено;
	КонецЕсли;
	
	Результат_ = Ответ_.ПолучитьТелоКакСтроку();
	Возврат Результат_;
КонецФункции

Функция ОбработатьОтвет(Ответ, OutСоответствиеОшибок)
	Если Ответ = Неопределено Тогда
		Возврат 102;
	ИначеЕсли СокрЛП(Ответ) = "XML encoding should be UTF-8" Тогда
		Возврат 103;
	ИначеЕсли СокрЛП(Ответ) = "XML should be without BOM" Тогда
		Возврат 104;
	ИначеЕсли СокрЛП(Ответ) = "unexpected answer" Тогда
		Возврат 106;
	ИначеЕсли Лев(Ответ, 6) = "no xsd" Тогда
		Возврат 201;
	ИначеЕсли СтрНайти(Ответ, "error - no files '/schematrons/") > 0 Тогда
		Возврат 202;
	ИначеЕсли СокрЛП(Ответ) = "no schematron for this semd
		|valid" Тогда
		Возврат 601;
	ИначеЕсли СокрЛП(Ответ) = "valid" Тогда
		Возврат 602;
	ИначеЕсли СтрНайти(Ответ, "Failed to create the Xslt30Processor") > 0 Тогда
		Возврат 501;
	ИначеЕсли СтрНайти(Ответ, ":ERROR:") > 0 Тогда
		OutСоответствиеОшибок.Вставить("CDA.xsd", АлгоритмыДляКоллекций.СоздатьМассив(Ответ));
		Возврат 301;
	ИначеЕсли СтрНайти(Ответ, "<svrl:schematron-output") > 0 Тогда
		DOMПостроитель_ =  Новый ПостроительDOM() ; 
		ЧтениеXML_ = Новый ЧтениеXML;
		ЧтениеXML_.УстановитьСтроку(Ответ);
		ОтветСхематрона_ = DOMПостроитель_.Прочитать(ЧтениеXML_);
		РазыменовательПИ_ = ОтветСхематрона_.СоздатьРазыменовательПИ(ОтветСхематрона_);
		
		
		
		РезультатXPath_ = ОтветСхематрона_.ВычислитьВыражениеXPath(
			"//*[local-name()='sch']", 
			ОтветСхематрона_, 
			РазыменовательПИ_, 
			ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов
		);
		Пока Истина Цикл
			УзелФайла_ = РезультатXPath_.ПолучитьСледующий();
			Если УзелФайла_ = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ИмяСхематрона_ = УзелФайла_.ПолучитьАтрибут("file");
			МассивОшибок_ = Новый Массив;
			РезультатXPath2_ = ОтветСхематрона_.ВычислитьВыражениеXPath(
				"*[local-name()='schematron-output']/*[local-name()='failed-assert']", 
				УзелФайла_, 
				РазыменовательПИ_, 
				ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов
			);
			Пока Истина Цикл
				УзелОшибки_ = РезультатXPath2_.ПолучитьСледующий();
				Если УзелОшибки_ = Неопределено Тогда
					Прервать;
				КонецЕсли;
				МассивОшибок_.Добавить(
					СтрШаблон(
						"%1: %2 (%3)", 
						УзелОшибки_.ПолучитьАтрибут("test"),
						УзелОшибки_.ПолучитьЭлементыПоИмени("text")[0].ТекстовоеСодержимое,
						УзелОшибки_.ПолучитьАтрибут("location")
					)
				);
			КонецЦикла;
			Если МассивОшибок_.Количество() > 0 Тогда
				OutСоответствиеОшибок.Вставить(ИмяСхематрона_, МассивОшибок_);
			КонецЕсли;
		КонецЦикла;
		Если OutСоответствиеОшибок.Количество() > 0 Тогда
			Возврат 302;
		КонецЕсли;
		Возврат 603;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СформироватьТекстЗапроса(ТелоМД, ТипРЭМД, Разделитель)
	ШаблонЗапроса_ = "--%1
				|Content-Disposition: form-data; name=""remdtype""
				|
				|%2
				|--%1
				|Content-Disposition: form-data; name=""verifytype""
				|
				|%3
				|--%1
				|Content-Disposition: form-data; name=""file""; filename=""test.xml""
				|Content-Type: text/xml
				|
				|%4
				|--%1--
				|";

	Возврат СтрШаблон(ШаблонЗапроса_, Разделитель, ТипРЭМД, 2, ТелоМД);
КонецФункции

Функция НастройкиПодключения(АдресСервиса)
	Результат_ = Новый Структура();
	Если НЕ ЗначениеЗаполнено(АдресСервиса) Тогда 
		ВызватьИсключение("Не указан адрес сервиса валидации СЭМД.");
	КонецЕсли;
	Результат_.Вставить("Адрес", АдресСервиса);
	СтруктураURI_ = ОбщегоНазначенияКлиентСервер.СтруктураURI(Результат_.Адрес);
	
	Результат_.Вставить("Пользователь", СтруктураURI_.Логин);
	Результат_.Вставить("Пароль",       СтруктураURI_.Пароль);
	Результат_.Вставить("Сервер",       СтруктураURI_.Хост);
	Результат_.Вставить("АдресРесурса", СтруктураURI_.ПутьНаСервере);
	Результат_.Вставить("Порт",         СтруктураURI_.Порт);
	
	Возврат Результат_;
КонецФункции

#КонецОбласти

#Область ВалидацияСотрудников

Функция ОтправитьЗапросыНаВалидациюСотрудников(АдресСервиса, ДанныеСотрудников, МДСсылка)
	МассивОшибок_ = Новый Массив;
	НастройкиПодключения_ = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	Соединение_ = Новый HTTPСоединение(
		НастройкиПодключения_.Хост,
		,
		НастройкиПодключения_.Логин,
		НастройкиПодключения_.Пароль
	);
	Для Каждого ДанныеСотрудника_ Из ДанныеСотрудников Цикл
		Запрос_ = Новый HTTPЗапрос(НастройкиПодключения_.ПутьНаСервере + ДанныеСотрудника_.Запрос);
		ЕстьСоединение_ = Истина;
		Попытка
			Ответ_ = Соединение_.Получить(Запрос_);
		Исключение
			ЗаписьЖурналаРегистрации(
				"ВалидацияСЭМД",
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				СтрШаблон("Не удалось установить соединение с сервером '%1'. %2.", АдресСервиса, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
			);
			ЕстьСоединение_ = Ложь;
		КонецПопытки;
		
		Если ЕстьСоединение_ Тогда
			Если Ответ_.КодСостояния <> 200 Тогда
				ЗаписьЖурналаРегистрации(
					"ВалидацияСЭМД",
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтрШаблон("Не удалось установить соединение с сервером %1. HTTP_code: %2", АдресСервиса, Ответ_.КодСостояния)
				);
				//об ошибке аутентификации сообщим отдельно
				Если Ответ_.КодСостояния = 401 Тогда
					МассивОшибок_.Добавить("Не удалось выполнить авторизацию пользователя, проверьте заполнение адреса (логина и пароля) сервиса валдиации сотрудников в настройках раздела ЭМК.");
					Возврат МассивОшибок_;
				КонецЕсли;
			Иначе
				Результат_ = ОбработатьОтветСервисаJSON(Ответ_.ПолучитьТелоКакСтроку(), МДСсылка, ДанныеСотрудника_.Сотрудник, ДанныеСотрудника_.Роль);
				Если Результат_ <> Неопределено Тогда
					МассивОшибок_.Добавить(Результат_);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОшибок_;
КонецФункции

Функция ОбработатьОтветСервисаJSON(СтрокаОтветаJSON, МДСсылка, Сотрудник, СотрудникРоль)
	Результат_ = Неопределено;
	Попытка
		ЧтениеJSON_ = Новый ЧтениеJSON;
		ЧтениеJSON_.УстановитьСтроку(СтрокаОтветаJSON);
		Результат_ = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON_);
		ЧтениеJSON_.Закрыть();
	Исключение
		ТекстОшибки_ = СтрШаблон(	"Неожиданный ответ сервиса валидации данных сотрудника '%1' (%2):
									|%3", Сотрудник, СотрудникРоль, СтрокаОтветаJSON);
		ЗаписьЖурналаРегистрации(
			"ВалидацияСЭМД",
			УровеньЖурналаРегистрации.Ошибка, МДСсылка,
			ТекстОшибки_
		);
		Возврат ТекстОшибки_;
	КонецПопытки;
	
	Если Результат_.result <> Истина Тогда
		ТекстОшибки_ = СтрШаблон("Ошибка валидации данных сотрудника '%1' (%2): %3.", Сотрудник, СотрудникРоль, Результат_.message);
		ЗаписьЖурналаРегистрации(
			"ВалидацияСЭМД",
			УровеньЖурналаРегистрации.Ошибка,, МДСсылка,
			ТекстОшибки_
		);
		Возврат ТекстОшибки_;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьДанныеСотрудниковДляОтправки(ТелоМД)
	ДанныеСотрудников_ = Новый Массив;
	
	ЧтениеXML_ = Новый ЧтениеXML;
	ЧтениеXML_.УстановитьСтроку(ТелоМД);
	ПостроительDOM_ = Новый ПостроительDOM;
	ДокументDOM_ = ПостроительDOM_.Прочитать(ЧтениеXML_);
	СоответствиеПространств_ = Новый Соответствие;
	СоответствиеПространств_.Вставить("h", "urn:hl7-org:v3");
	СоответствиеПространств_.Вставить("identityns", "urn:hl7-ru:identity");
	РазыменовывательПИ_ = Новый РазыменовательПространствИменDOM(СоответствиеПространств_);
	
	ДокументДатаXpath_        = "h:effectiveTime/@value";
	ДокументДата_ = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, ДокументДатаXpath_);
	Если СтрНайти(ДокументДата_, "+") > 0 Тогда
		ДокументДата_ = СтрРазделить(ДокументДата_, "+")[0];
	КонецЕсли;
	ДокументДата_             = Формат(Дата(ДокументДата_),"ДФ='yyyy-MM-dd'");
	
	authorСотрудникФамилияXpath_     = "//h:author/h:assignedAuthor/h:assignedPerson/h:name/h:family/text()";
	authorСотрудникИмяXpath_     = "//h:author/h:assignedAuthor/h:assignedPerson/h:name/h:given[1]/text()";
	authorСотрудникОтчествоXpath_     = "//h:author/h:assignedAuthor/h:assignedPerson/h:name/h:given[2]/text()";
	authorСотрудникОтчествоВариант2Xpath_     = "//h:author/h:assignedAuthor/h:assignedPerson/h:name/identityns:Patronymic/text()";
	authorСнилсXpath_         = "//h:author/h:assignedAuthor/h:id[@root='1.2.643.100.3']/@extension";
	authorДолжностьXpath_     = "//h:author/h:assignedAuthor/h:code";
	authorПодразделениеXpath_ = "//h:author/h:assignedAuthor/h:representedOrganization/h:id[not(@assigningAuthorityName)]/@extension";
	
	authorСотрудникФамилия_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authorСотрудникФамилияXpath_);
	authorСотрудникИмя_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authorСотрудникИмяXpath_);
	authorСотрудникОтчество_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authorСотрудникОтчествоXpath_);
	authorСотрудникОтчествоВариант2_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authorСотрудникОтчествоВариант2Xpath_);
	
	authorСотрудник_ = стрШаблон("%1 %2 %3", authorСотрудникФамилия_, authorСотрудникИмя_, ВыбратьЗаполненное(authorСотрудникОтчество_, authorСотрудникОтчествоВариант2_));
	authorСнилс_              = ВычислитьСНИЛС(ДокументDOM_, РазыменовывательПИ_, authorСнилсXpath_);
	authorДолжность_          = ВычислитьДолжность(ДокументDOM_, РазыменовывательПИ_, authorДолжностьXpath_);
	authorПодразделение_      = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authorПодразделениеXpath_);
	Если
		ЗначениеЗаполнено(ДокументДата_) И
		ЗначениеЗаполнено(authorСнилс_) И
		ЗначениеЗаполнено(authorДолжность_) И
		ЗначениеЗаполнено(authorПодразделение_)
	Тогда
		Запрос_ = СтрШаблон("/?oid=%1&date=%2&post=%3&snils=%4", authorПодразделение_, ДокументДата_, authorДолжность_, authorСнилс_);
		ДанныеСотрудника_ = Новый Структура("Запрос, Сотрудник, Роль", Запрос_, authorСотрудник_, "author");
		ДанныеСотрудников_.Добавить(ДанныеСотрудника_);
	КонецЕсли;
	
	authenticatorСотрудникФамилияXpath_     = "//h:authenticator/h:assignedEntity/h:assignedPerson/h:name/h:family/text()";
	authenticatorСотрудникИмяXpath_     = "//h:authenticator/h:assignedEntity/h:assignedPerson/h:name/h:given[1]/text()";
	authenticatorСотрудникОтчествоXpath_     = "//h:authenticator/h:assignedEntity/h:assignedPerson/h:name/h:given[2]/text()";
	authenticatorСотрудникОтчествоВариант2Xpath_     = "//h:authenticator/h:assignedEntity/h:assignedPerson/h:name/identityns:Patronymic/text()";

	authenticatorСнилсXpath_         = "//h:authenticator/h:assignedEntity/h:id[@root='1.2.643.100.3']/@extension";
	authenticatorДолжностьXpath_     = "//h:authenticator/h:assignedEntity/h:code";
	authenticatorПодразделениеXpath_ = "//h:authenticator/h:assignedEntity/h:representedOrganization/h:id[not(@assigningAuthorityName)]/@extension";
	
	authenticatorСотрудникФамилия_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authenticatorСотрудникФамилияXpath_);
	authenticatorСотрудникИмя_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authenticatorСотрудникИмяXpath_);
	authenticatorСотрудникОтчество_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authenticatorСотрудникОтчествоXpath_);
	authenticatorСотрудникОтчествоВариант2_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authenticatorСотрудникОтчествоВариант2Xpath_);

	authenticatorСотрудник_ = стрШаблон("%1 %2 %3", authenticatorСотрудникФамилия_, authenticatorСотрудникИмя_, ВыбратьЗаполненное(authenticatorСотрудникОтчество_, authenticatorСотрудникОтчествоВариант2_));

	authenticatorСнилс_              = ВычислитьСНИЛС(ДокументDOM_, РазыменовывательПИ_, authenticatorСнилсXpath_);
	authenticatorДолжность_          = ВычислитьДолжность(ДокументDOM_, РазыменовывательПИ_, authenticatorДолжностьXpath_);
	authenticatorПодразделение_      = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, authenticatorПодразделениеXpath_);
	Если
		ЗначениеЗаполнено(ДокументДата_) И
		ЗначениеЗаполнено(authenticatorСнилс_) И
		ЗначениеЗаполнено(authenticatorДолжность_) И
		ЗначениеЗаполнено(authenticatorПодразделение_)
	Тогда
		Запрос_ = СтрШаблон("/?oid=%1&date=%2&post=%3&snils=%4", authenticatorПодразделение_, ДокументДата_, authenticatorДолжность_, authenticatorСнилс_);
		ДанныеСотрудника_ = Новый Структура("Запрос, Сотрудник, Роль", Запрос_, authenticatorСотрудник_, "authenticator");
		ДанныеСотрудников_.Добавить(ДанныеСотрудника_);
	КонецЕсли;
	
	legalAuthenticatorСотрудникФамилияXpath_     = "//h:legalAuthenticator/h:assignedEntity/h:assignedPerson/h:name/h:family/text()";
	legalAuthenticatorСотрудникИмяXpath_     = "//h:legalAuthenticator/h:assignedEntity/h:assignedPerson/h:name/h:given[1]/text()";
	legalAuthenticatorСотрудникОтчествоXpath_     = "//h:legalAuthenticator/h:assignedEntity/h:assignedPerson/h:name/h:given[2]/text()";
	legalAuthenticatorСотрудникОтчествоВариант2Xpath_     = "//h:legalAuthenticator/h:assignedEntity/h:assignedPerson/h:name/identityns:Patronymic/text()";

	legalAuthenticatorСнилсXpath_         = "//h:legalAuthenticator/h:assignedEntity/h:id[@root='1.2.643.100.3']/@extension";
	legalAuthenticatorДолжностьXpath_     = "//h:legalAuthenticator/h:assignedEntity/h:code";
	legalAuthenticatorПодразделениеXpath_ = "//h:legalAuthenticator/h:assignedEntity/h:representedOrganization/h:id[not(@assigningAuthorityName)]/@extension";

	legalAuthenticatorСотрудникФамилия_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorСотрудникФамилияXpath_);
	legalAuthenticatorСотрудникИмя_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorСотрудникИмяXpath_);
	legalAuthenticatorСотрудникОтчество_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorСотрудникОтчествоXpath_);
	legalAuthenticatorСотрудникОтчествоВариант2_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorСотрудникОтчествоВариант2Xpath_);

	legalAuthenticatorСотрудник_ = стрШаблон("%1 %2 %3", legalAuthenticatorСотрудникФамилия_, legalAuthenticatorСотрудникИмя_, ВыбратьЗаполненное(legalAuthenticatorСотрудникОтчество_, legalAuthenticatorСотрудникОтчествоВариант2_));
	legalAuthenticatorСнилс_              = ВычислитьСНИЛС(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorСнилсXpath_);
	legalAuthenticatorДолжность_          = ВычислитьДолжность(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorДолжностьXpath_);
	legalAuthenticatorПодразделение_      = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, legalAuthenticatorПодразделениеXpath_);
	Если
		ЗначениеЗаполнено(ДокументДата_) И
		ЗначениеЗаполнено(legalAuthenticatorСнилс_) И
		ЗначениеЗаполнено(legalAuthenticatorДолжность_) И
		ЗначениеЗаполнено(legalAuthenticatorПодразделение_)
	Тогда
		Запрос_ = СтрШаблон("/?oid=%1&date=%2&post=%3&snils=%4", legalAuthenticatorПодразделение_, ДокументДата_, legalAuthenticatorДолжность_, legalAuthenticatorСнилс_);
		ДанныеСотрудника_ = Новый Структура("Запрос, Сотрудник, Роль", Запрос_, legalAuthenticatorСотрудник_, "legalAuthenticator");
		ДанныеСотрудников_.Добавить(ДанныеСотрудника_);
	КонецЕсли;
	
	//участники консилиума или врачебной комиссии
	ПредседательВКСотрудникФамилияXpath_     = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:assignedPerson/h:name/h:family/text()";
	ПредседательВКСотрудникИмяXpath_     = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:assignedPerson/h:name/h:given[1]/text()";
	ПредседательВКСотрудникОтчествоXpath_     = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:assignedPerson/h:name/h:given[2]/text()";
	ПредседательВКСотрудникОтчествоВариант2Xpath_     = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:assignedPerson/h:name/identityns:Patronymic/text()";

	ПредседательВКСнилсXpath_         = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:id[@root='1.2.643.100.3']/@extension";
	ПредседательВКДолжностьXpath_     = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:code";
	ПредседательВКПодразделениеXpath_ = "//h:performer[@typeCode='PPRF']/h:assignedEntity/h:representedOrganization/h:id[not(@assigningAuthorityName)]/@extension";

	СтрокаЧленВКСотрудникФамилияXpath_     = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:assignedPerson/h:name/h:family/text()";
	СтрокаЧленВКСотрудникИмяXpath_     = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:assignedPerson/h:name/h:given[1]/text()";
	СтрокаЧленВКСотрудникОтчествоXpath_     = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:assignedPerson/h:name/h:given[2]/text()";
	СтрокаЧленВКСотрудникОтчествоВариант2Xpath_     = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:assignedPerson/h:name/identityns:Patronymic/text()";

	СтрокаЧленВКСнилсXpath_           = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:id[@root='1.2.643.100.3']/@extension";
	СтрокаЧленВКДолжностьXpath_       = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:code";
	СтрокаЧленВКПодразделениеXpath_   = "//h:performer[@typeCode='SPRF' and position()=%1]/h:assignedEntity/h:representedOrganization/h:id[not(@assigningAuthorityName)]/@extension";

	ПредседательВКСотрудникФамилия_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, ПредседательВКСотрудникФамилияXpath_);
	ПредседательВКСотрудникИмя_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, ПредседательВКСотрудникИмяXpath_);
	ПредседательВКСотрудникОтчество_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, ПредседательВКСотрудникОтчествоXpath_);
	ПредседательВКСотрудникОтчествоВариант2_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, ПредседательВКСотрудникОтчествоВариант2Xpath_);

	ПредседательВКСотрудник_ = стрШаблон("%1 %2 %3", ПредседательВКСотрудникФамилия_, ПредседательВКСотрудникИмя_, ВыбратьЗаполненное(ПредседательВКСотрудникОтчество_, ПредседательВКСотрудникОтчествоВариант2_));

	ПредседательВКСнилс_              = ВычислитьСНИЛС(ДокументDOM_, РазыменовывательПИ_, ПредседательВКСнилсXpath_);
	ПредседательВКДолжность_          = ВычислитьДолжность(ДокументDOM_, РазыменовывательПИ_, ПредседательВКДолжностьXpath_);
	ПредседательВКПодразделение_      = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, ПредседательВКПодразделениеXpath_);
	Если
		ЗначениеЗаполнено(ДокументДата_) И
		ЗначениеЗаполнено(ПредседательВКСнилс_) И
		ЗначениеЗаполнено(ПредседательВКДолжность_) И
		ЗначениеЗаполнено(ПредседательВКПодразделение_)
	Тогда
		Запрос_ = СтрШаблон("/?oid=%1&date=%2&post=%3&snils=%4", ПредседательВКПодразделение_, ДокументДата_, ПредседательВКДолжность_, ПредседательВКСнилс_);
		ДанныеСотрудника_ = Новый Структура("Запрос, Сотрудник, Роль", Запрос_, ПредседательВКСотрудник_, "performer[1]");
		ДанныеСотрудников_.Добавить(ДанныеСотрудника_);
	КонецЕсли;
	
	Счетчик_ = 2;
	Пока Истина Цикл
		
		СтрокаЧленВКСотрудникФамилия_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКСотрудникФамилияXpath_, Счетчик_));
		СтрокаЧленВКСотрудникИмя_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКСотрудникИмяXpath_, Счетчик_));
		СтрокаЧленВКСотрудникОтчество_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКСотрудникОтчествоXpath_, Счетчик_));
		СтрокаЧленВКСотрудникОтчествоВариант2_          = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКСотрудникОтчествоВариант2Xpath_, Счетчик_));

		СтрокаЧленВКСотрудник_ = стрШаблон("%1 %2 %3", СтрокаЧленВКСотрудникФамилия_, СтрокаЧленВКСотрудникИмя_, ВыбратьЗаполненное(СтрокаЧленВКСотрудникОтчество_, СтрокаЧленВКСотрудникОтчествоВариант2_));

		СтрокаЧленВКСнилс_              = ВычислитьСНИЛС(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКСнилсXpath_, Счетчик_));
		СтрокаЧленВКДолжность_          = ВычислитьДолжность(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКДолжностьXpath_, Счетчик_));
		СтрокаЧленВКПодразделение_      = ВычислитьXPath(ДокументDOM_, РазыменовывательПИ_, СтрШаблон(СтрокаЧленВКПодразделениеXpath_, Счетчик_));
		
		Если
			ЗначениеЗаполнено(ДокументДата_) И
			ЗначениеЗаполнено(СтрокаЧленВКСнилс_) И
			ЗначениеЗаполнено(СтрокаЧленВКДолжность_) И
			ЗначениеЗаполнено(СтрокаЧленВКПодразделение_)
		Тогда
			Запрос_ = СтрШаблон("/?oid=%1&date=%2&post=%3&snils=%4", СтрокаЧленВКПодразделение_, ДокументДата_, СтрокаЧленВКДолжность_, СтрокаЧленВКСнилс_);
			ДанныеСотрудника_ = Новый Структура("Запрос, Сотрудник, Роль", Запрос_, СтрокаЧленВКСотрудник_, СтрШаблон("performer[%1]", Счетчик_));
			ДанныеСотрудников_.Добавить(ДанныеСотрудника_);
			
			Счетчик_ = Счетчик_ + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеСотрудников_;
	
КонецФункции

Функция ПолучитьСтруктуруКода(ЭлементCode)
	Результат_ = Новый Структура;
	Атрибуты_ = ЭлементCode.Атрибуты;
	ДополнитьСтруктуруАтрибутом(Результат_, Атрибуты_, "codeSystem");
	ДополнитьСтруктуруАтрибутом(Результат_, Атрибуты_, "code");
	ДополнитьСтруктуруАтрибутом(Результат_, Атрибуты_, "codeSystemVersion");
	ДополнитьСтруктуруАтрибутом(Результат_, Атрибуты_, "displayName");
	ДополнитьСтруктуруАтрибутом(Результат_, Атрибуты_, "root");
	ДополнитьСтруктуруАтрибутом(Результат_, Атрибуты_, "extension");
	Возврат Результат_;
КонецФункции

Процедура ДополнитьСтруктуруАтрибутом(Результат, Атрибуты, ИмяАтрибута)
	Атрибут_ = Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	Если Атрибут_ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Результат.Вставить(ИмяАтрибута, Атрибут_.Значение);
КонецПроцедуры

Функция ВычислитьXPath(ДокументDOM, Разыменователь = Неопределено, XPath = "")

	Если Неопределено = Разыменователь Тогда
		Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	КонецЕсли;
		
	ТипРезультата_ = ТипРезультатаDOMXPath.Строка;
	
	РезультатXPath_ = ДокументDOM.ВычислитьВыражениеXPath(
		XPath, ДокументDOM, Разыменователь, ТипРезультата_
	).ПолучитьСледующий();
	
	Возврат ?(РезультатXPath_ = Неопределено, "", РезультатXPath_.ТекстовоеСодержимое);
	
КонецФункции

Функция ВычислитьСНИЛС(ДокументDOM, Разыменователь = Неопределено, XPath = "")
	Снилс_ = ВычислитьXPath(ДокументDOM, Разыменователь, XPath);
	Если ЗначениеЗаполнено(Снилс_) И СтрДлина(Снилс_) < 11 Тогда
		Для Счетчик = СтрДлина(Снилс_) По 11 Цикл
			Снилс_ = "0" + Снилс_;
		КонецЦикла;
	КонецЕсли;
	Возврат Снилс_;
КонецФункции

Функция ВычислитьДолжность(ДокументDOM, Разыменователь = Неопределено, XPath = "")
	Должность_ = ВычислитьXPath(ДокументDOM, Разыменователь, XPath);
	
	Если ЗначениеЗаполнено(Должность_) Тогда
		// Преобразуем код должности по справочнику 1.2.643.5.1.13.13.11.1002, используемому в СЭМД-ах,
		// в код по справочнику 1.2.643.5.1.13.13.99.2.181 используемому в сервисе валидации ФРМР.
		ДолжностьСсылка_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьСсылкуПоКодуМинздрава(Должность_, "1.2.643.5.1.13.13.11.1002");
		
		Если ЗначениеЗаполнено(ДолжностьСсылка_) Тогда
			Должность_ = ФедеральныеВебСервисыПереопределяемый.ПолучитьКодМинздраваПоСсылке(ДолжностьСсылка_, "1.2.643.5.1.13.13.99.2.181").code;
		Иначе
			Сообщить(стрШаблон("В справочнике должностей не найдена должность с кодом ""%1"" по справочнику 1.2.643.5.1.13.13.11.1002", Должность_));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат Должность_;
КонецФункции

#КонецОбласти

#КонецОбласти