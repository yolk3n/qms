
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получает список выбора из хранилища общих настроек.
//
// Параметры:
//  ИмяНастройки - Строка - ключ настроек, используемый при сохранении и получении настроек из хранилища настроек.
//  СписокВыбора - СписокЗначений - список, в котором будут отображаться недавно использованные значения выбора.
//
Процедура Загрузить(ИмяНастройки, СписокВыбора)Экспорт
	
	ИсторияПоиска = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(ИмяНастройки, "");
	Если ИсторияПоиска <> Неопределено Тогда
		СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет список выбора в хранилище общих настроек.
//
// Параметры:
//  ИмяНастройки - Строка - ключ настроек, используемый при сохранении и получении настроек из хранилища настроек.
//  СписокВыбора - СписокЗначений - список, в который будут сохраняться недавно использованные значения выбора.
//
Процедура Сохранить(ИмяНастройки, СписокВыбора) Экспорт
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяНастройки, "", СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

// Вставляет значение поиска на первое место списка поиска, удалив копию элемента из истории поиска.
//
// Параметры:
//  СписокВыбора       - СписокЗначений - список, в котором будут отображаться недавно использованные значения выбора.
//  СтрокаПоиска       - Строка - значение поиска.
//  РазмерСпискаВыбора - Число - максимальное количество элементов списка, которое будет доступно для выбора пользователю.
//
Процедура ОбновитьСписокВыбора(СписокВыбора, СтрокаПоиска, РазмерСпискаВыбора = 1000) Экспорт
	
	// Удалим элемент из истории поиска если он там был
	НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		СписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	КонецЦикла;
	
	// И поставим его на первое место
	СписокВыбора.Вставить(0, СтрокаПоиска);
	Пока СписокВыбора.Количество() > РазмерСпискаВыбора Цикл
		СписокВыбора.Удалить(СписокВыбора.Количество() - 1);
	КонецЦикла;
	
КонецПроцедуры

// Находит текст в списке выбора поля формы и добавляет в данные выбора авто подбора.
// (см. АвтоПодбор)
//
// Параметры:
//  Элемент              - ПолеФормы - поле автоподбора.
//  Текст                - Строка - строка текста, введенная в поле ввода.
//  ДанныеВыбора         - СписокЗначений - список совпадений введенного текста с элементами списка выбора.
//  Ожидание             - Число - интервал в секундах после ввода текста, через который произошло событие.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	Для каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Если ЛЕВ(ВРег(ЭлементСписка.Значение), СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КоличествоНайденных = КоличествоНайденных + 1;
			Если КоличествоНайденных > 7 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс