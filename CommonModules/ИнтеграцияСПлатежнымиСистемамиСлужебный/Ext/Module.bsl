///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами".
// ОбщийМодуль.ИнтеграцияСПлатежнымиСистемамиСлужебный.
//
// Серверные процедуры обмена данными с Системой быстрых платежей:
//  - инициализация параметров подключения;
//  - обработчики обновления;
//  - обработчики интеграции с Библиотекой стандартных подсистем;
//  - обработчики интеграции с Библиотекой технологии сервиса;
//  - настройка форм интеграции;
//  - работа с настройками оплаты;
//  - обработка ошибок сервиса интеграции с платежными системами;
//  - алгоритмы настройки формы "Интернет-поддержка и сервисы".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаОбменаДанными(),
		443,
		НСтр("ru = 'Сервис интеграции с платежными системами'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.1.3";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("50df7c1c-d88d-4293-bea2-ca4b97cd3d32");
	Обработчик.Процедура          = "ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбработатьНастройкиПлатежныхСистем";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиИнтеграцииСПлатежнымиСистемами";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек интеграции с платежными системами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "ИнтеграцияСПлатежнымиСистемамиСлужебный.УстановитьДлительностьОпераций";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Заполнение настроек интеграции с платежными системами'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.2.53";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("1ff5b903-f14e-4d16-89c9-c46e6094b2dd");
	Обработчик.Процедура          = "ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбновитьНастройкиИнтеграции";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиИнтеграцииСПлатежнымиСистемами";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка пометки на удаление для настроек SWiP и обновление настроек СБП.'");
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия             = "2.6.2.63";
		Обработчик.Идентификатор      = Новый УникальныйИдентификатор("4af739e4-f403-4fb2-91ce-abe04ec46acd");
		Обработчик.Процедура          = "ИнтеграцияСПлатежнымиСистемамиСлужебный.ДобавитьЗаданиеОбновленияНастроек";
		Обработчик.РежимВыполнения    = "Отложенно";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.Комментарий        = НСтр("ru = 'Добавление задания загрузки настроек участников Системы быстрых платежей.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.3.27";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("cedeea13-ddf7-472f-aa18-46e231259102");
	Обработчик.Процедура          = "ИнтеграцияСПлатежнымиСистемамиСлужебный.ЗаменитьЗначениеПеречисленияУдалитьСБП_Промсвязьбанк";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиИнтеграцииСПлатежнымиСистемами";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек интеграции с СБП.'");
	
КонецПроцедуры

#КонецОбласти

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Если Не ИнтеграцияСПлатежнымиСистемами.НастройкаИнтеграцияДоступна() Тогда
		Форма.Элементы.БИПГруппаИнтеграцияСПлатежнымиСистемами.Видимость = Ложь;
	Иначе
		Форма.БИПДлительностьОперацииПлатежнойСистемы = Константы.ДлительностьОперацииПлатежнойСистемы.Получить();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"БИПГруппаНастройкаШаблоновСБП",
		"Видимость",
		ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений"));
	
КонецПроцедуры

#КонецОбласти

#Область БТСРаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	СтрОбработчик = Обработчики.Добавить();
	СтрОбработчик.ВидДанных      = ВидПоставляемыхДанныхПлатежныеСистемы();
	СтрОбработчик.КодОбработчика = ВидПоставляемыхДанныхПлатежныеСистемы();
	СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСПлатежнымиСистемамиСлужебный");
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ВидПоставляемыхДанныхПлатежныеСистемы() Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхПлатежныеСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЗаписатьНастройкиУчастниковСБП(
		Результат);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнена обработка поставляемых данных.
				|Поставляемые данные:
				|%1'"),
			ВидПоставляемыхДанныхПлатежныеСистемы()),
		Ложь);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			ВидПоставляемыхДанныхПлатежныеСистемы()),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область БТСОчередьЗаданий

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП();
		Если Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.ЕстьНастройкиПодключения() Тогда
			ДобавитьЗаданиеЗагрузкиСтатусовОперацийСБП();
		КонецЕсли;
	Иначе
		УдалитьЗаданияОбновленияНастроек();
		УдалитьЗаданияЗагрузкаСтатусовОперацийСБП();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ПодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "СБП";
	Вид.ИмяПодменю = "ПодменюСБП";
	Вид.Заголовок = НСтр("ru = 'СБП'");
	Вид.Картинка = БиблиотекаКартинок.ЛоготипСБПКнопка;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыСБП";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	Если Не ИнтеграцияСПлатежнымиСистемами.ИнтеграцияДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаДокументовОперации = ПолучитьИменаДокументовОперации();
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ПолноеИмя Из ИменаДокументовОперации Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТипыОбъектов) Тогда
		Возврат;
	КонецЕсли;
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "СБП";
	Команда.Идентификатор = "СБП";
	Команда.Представление = НСтр("ru = 'Оплата через СБП'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 49;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
	Команда.Картинка = БиблиотекаКартинок.ЛоготипСБПКнопка;
	Команда.ТипПараметра = ТипПараметра;
	Команда.Назначение = "ДляОбъекта";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ИнтеграцияСПлатежнымиСистемамиКлиент.ПодключаемыйОткрытьФормуПлатежнойСсылкиСБП";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ШаблоныСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОперацииСБП(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо" Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ПредставлениеСсылкиСБП";
		НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП'");
		
		Если ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
			НовыйРеквизит = Реквизиты.Добавить();
			НовыйРеквизит.Имя = "ПредставлениеСсылкиСБПQRКод";
			НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП (QR-код)'");
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ТипШаблона = "SMS" Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ПредставлениеСсылкиСБП";
		НовыйРеквизит.Представление = НСтр("ru = 'Ссылка для оплаты через СБП'");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения.
//
Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОперацииСБП(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо"
		И (Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылкиСБП") <> Неопределено
			ИЛИ Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылкиСБПQRКод") <> Неопределено)Тогда
		
			Если Сообщение.ДополнительныеПараметры.Свойство("ПлатежнаяСсылка") 
				И ЗначениеЗаполнено(Сообщение.ПараметрыШаблона.ПлатежнаяСсылка) Тогда
				
				ПлатежнаяСсылка = Сообщение.ПараметрыШаблона.ПлатежнаяСсылка;
				
			ИначеЕсли Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения)
				И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("ПлатежнаяСсылка")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка) Тогда
				
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка;
				
			Иначе
				
				ПараметрыИнтеграции = ПриОпределенииПараметровИнтеграцииДокументаОперации(ПредметСообщения);
				Если Не ЗначениеЗаполнено(ПараметрыИнтеграции) Тогда
					Возврат;
				КонецЕсли;
				РезультатОперации = ИнтеграцияСПлатежнымиСистемами.ИдентификаторОплаты(
					ПредметСообщения,
					ПараметрыИнтеграции.ПереченьТорговыхТочек[0],
					Неопределено);
				ПлатежнаяСсылка = РезультатОперации.QRКод;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ПлатежнаяСсылка) Тогда
				Возврат;
			КонецЕсли;
			
			Если ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
				И ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
				
				Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] <> Неопределено Тогда
					Если Сообщение.Вложения["ПредставлениеСсылкиСБПQRКод"] = Неопределено Тогда
						Результат = СервисИнтеграцииССБП.СоздатьQRКодОплаты(
							ПлатежнаяСсылка,
							200,
							0);
					КонецЕсли;
					
					Base64 = Base64Строка(Результат);
					Base64 = СтрЗаменить(Base64, Символы.ПС, "");
					Base64 = СтрЗаменить(Base64, Символы.ВК, "");
					
					Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБПQRКод"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<p><img alt="""" src=""data:image/png;base64,%1""></p>'"),
						Base64);
						
				КонецЕсли;
				Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] <> Неопределено Тогда
					Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '<p>Оплатить счет: <a href=""%1"">%1</a></p>'"),
						ПлатежнаяСсылка);
				КонецЕсли;
			Иначе
				Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = НСтр("ru = 'Оплатить счет:'") + Символы.ПС + ПлатежнаяСсылка;
			КонецЕсли;
			
	ИначеЕсли ПараметрыШаблона.ТипШаблона = "SMS"
		И Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылкиСБП") <> Неопределено Тогда
		
		Если Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
			И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения)
			И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("ПлатежнаяСсылка")
			И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка) Тогда
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка;
		Иначе
			ПереченьТорговыхТочек = ПриОпределенииПараметровИнтеграцииДокументаОперации(ПредметСообщения);
			Если Не ЗначениеЗаполнено(ПереченьТорговыхТочек) Тогда
				Возврат;
			КонецЕсли;
			РезультатОперации = ИнтеграцияСПлатежнымиСистемами.ИдентификаторОплаты(
				ПредметСообщения,
				ПереченьТорговыхТочек[0],
				Неопределено);
			ПлатежнаяСсылка = РезультатОперации.QRКод;
		КонецЕсли;
		
		Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиСБП"] = ПлатежнаяСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

//// Конец СтандартныеПодсистемы.ШаблоныСообщений

// ИнтернетПоддержкаПользователей.СверкаВзаиморасчетовСБПc2b

// Создает описание настроек длительного вызова. Настройки необходимо
// использовать для вызова функции ИнтеграцияСПлатежнымиСистемамиСлужебный.ВозможенВызовОперации.
//
// Параметры:
//  ДлительностьОперации - Число - количество секунд отведенных на выполнение операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    *Длительность - Число - длительность вызова операции;
//    *НачалоОперации  - Дата - период отчета длительности вызова;
//    *Ожидание - Число - частота выполнения операций;
//    *МаксимальноеКоличествоЗапросов - Число - ограничение на максимально возможное количество запросов;
//    *НакопленноеЗначениеВремени - Число - общее накопленное время за длительную операцию;
//    *КоличествоИтераций - Число - текущее количество выполненных запросов.
//
Функция НовыйИтеративныйВызовОперации(ДлительностьОперации = 0) Экспорт
	
	ДлительностьОперации = ?(
		ДлительностьОперации = 0,
		Константы.ДлительностьОперацииПлатежнойСистемы.Получить(),
		ДлительностьОперации);
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("Длительность",                   ДлительностьОперации);
	НастройкиВызова.Вставить("НачалоОперации",                 ТекущаяДатаСеанса());
	НастройкиВызова.Вставить("Ожидание",                       3);
	НастройкиВызова.Вставить("МаксимальноеКоличествоЗапросов", 300);
	НастройкиВызова.Вставить("НакопленноеЗначениеВремени",     НастройкиВызова.НачалоОперации - НастройкиВызова.Ожидание);
	НастройкиВызова.Вставить("КоличествоИтераций",             0);
	
	// Для небольшого значения длительности будет выполнен единственный
	// вызов операции.
	Если НастройкиВызова.Длительность < 3 Тогда
		НастройкиВызова.МаксимальноеКоличествоЗапросов = 1;
	КонецЕсли;
	
	Возврат НастройкиВызова;
	
КонецФункции

// Проверяет доступность вызова операции в рамках длительного вызова.
//
// Параметры:
//  НастройкиВызова - Структура - см. ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйИтеративныйВызовОперации
//
Функция ВозможенВызовОперации(НастройкиВызова) Экспорт
	
	// Прервать вызовы в случае превышения максимального
	// количества запросов.
	Если НастройкиВызова.МаксимальноеКоличествоЗапросов <= НастройкиВызова.КоличествоИтераций Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Прервать вызовы в случае превышения длительности.
	Если (НастройкиВызова.НачалоОперации + НастройкиВызова.Длительность) < ТекущаяДатаСеанса() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для первой итерации время ожидания необходимо увеличить
	// т.к. маловероятно, что при первом вызове будет получен
	// терминальный статус операции.
	Ожидание = НастройкиВызова.Ожидание;
	Если НастройкиВызова.КоличествоИтераций = 0 Тогда
		Ожидание = Ожидание + 1;
	КонецЕсли;
	
	// Ожидание истечения времени задержки между вызовами.
	// Если запросы выполнять без ограничения, возрастет нагрузка на сервис,
	// при этом пользователи не почувствуют существенного изменения времени
	// выполнения операция в платежной системе.
	ИнтернетПоддержкаПользователей.Пауза(Ожидание);
	
	НастройкиВызова.НакопленноеЗначениеВремени = ТекущаяДатаСеанса();
	НастройкиВызова.КоличествоИтераций         = НастройкиВызова.КоличествоИтераций + 1;
	
	Возврат Истина;
	
КонецФункции

// Конец ИнтернетПоддержкаПользователей.СверкаВзаиморасчетовСБПc2b

// Создает описание результат длительной операции в сервисе интеграции
// с платежными системами.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * СтатусОперации - Строка - текущее состояние операции оплаты:
//                  - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//                  - "Отменена" - оплата по оплата по ранее сформированному QR-коду не возможна;
//                  - "Выполнена" - платежная система подтвердила оплату;
//                  - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//                  - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    * ПараметрыОперации - Структура - содержит дополнительные данные по операции:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторПлатежнойСистемы - Строка - ключ контроля загрузки.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатДлительнойОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("СтатусОперации", "");
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ПараметрыОперации", НовыйОписаниеПараметровОперации());
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание результат операции в сервисе интеграции
// с платежными системами.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка() Экспорт
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Формирует настройки интеграции для выполнения запросов к платежной системе.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                        настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - настройки выполнения запросов к платежным системам:
//   * ТорговаяТочка    - Строка - идентификатор торговой точки в платежной системе;
//   * ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система торговой точки;
//   * УчетнаяЗапись    - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - учетная
//     запись интеграции с платежными системами;
//    * Используется - Булево - признак активности настройки.
//
Функция ПараметрыИнтеграции(ТорговаяТочка) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиИнтеграцииСПлатежнымиСистемами.ТорговаяТочка КАК ТорговаяТочка,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.ПлатежнаяСистема КАК ПлатежнаяСистема,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель КАК УчетнаяЗапись,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Используется КАК Используется
		|ИЗ
		|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
		|ГДЕ
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка = &ТорговаяТочка";
	
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ПараметрыИнтеграции = Новый Структура;
	ПараметрыИнтеграции.Вставить("ТорговаяТочка",       ВыборкаДетальныеЗаписи.ТорговаяТочка);
	ПараметрыИнтеграции.Вставить("ПлатежнаяСистема",    ВыборкаДетальныеЗаписи.ПлатежнаяСистема);
	ПараметрыИнтеграции.Вставить("УчетнаяЗапись",       ВыборкаДетальныеЗаписи.УчетнаяЗапись);
	ПараметрыИнтеграции.Вставить("ТорговаяТочкаСсылка", ВыборкаДетальныеЗаписи.Ссылка);
	ПараметрыИнтеграции.Вставить("Используется",        ВыборкаДетальныеЗаписи.Используется);
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

// Формирует настройки интеграции для выполнения запросов к платежной системе.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                        настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Соответствие - результат получения настроек:
//    * Ключ - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//      настройка выполнения оплаты.
//    * Значение - Структура - настройки выполнения запросов к платежным системам:
//       ** ТорговаяТочка    - Строка - идентификатор торговой точки в платежной системе;
//       ** ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система торговой точки;
//       ** УчетнаяЗапись    - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - учетная
//         запись интеграции с платежными системами;
//       ** Используется - Булево - признак активности настройки.
//
Функция ПараметрыНастроекИнтеграции(ТорговыеТочки) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Результат = Новый Соответствие;
	Если ТорговыеТочки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиИнтеграцииСПлатежнымиСистемами.ТорговаяТочка КАК ТорговаяТочка,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.ПлатежнаяСистема КАК ПлатежнаяСистема,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель КАК УчетнаяЗапись,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка,
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Используется КАК Используется
		|ИЗ
		|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
		|ГДЕ
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка В (&ТорговыеТочки)";
	
	Запрос.УстановитьПараметр("ТорговыеТочки", ТорговыеТочки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыИнтеграции = Новый Структура;
		ПараметрыИнтеграции.Вставить("ТорговаяТочка",       ВыборкаДетальныеЗаписи.ТорговаяТочка);
		ПараметрыИнтеграции.Вставить("ПлатежнаяСистема",    ВыборкаДетальныеЗаписи.ПлатежнаяСистема);
		ПараметрыИнтеграции.Вставить("УчетнаяЗапись",       ВыборкаДетальныеЗаписи.УчетнаяЗапись);
		ПараметрыИнтеграции.Вставить("ТорговаяТочкаСсылка", ВыборкаДетальныеЗаписи.Ссылка);
		ПараметрыИнтеграции.Вставить("Используется",        ВыборкаДетальныеЗаписи.Используется);
		
		Результат.Вставить(ВыборкаДетальныеЗаписи.Ссылка, ПараметрыИнтеграции);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет документы оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//                  с платежными системами;
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  Массив из ДокументОперацииБИП - документы оплат за период.
//
Функция ДокументыТорговойТочкиЗаПериод(ТорговаяТочка, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ИнтеграцияСПлатежнымиСистемами.ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	ПараметрыИнтеграции = ПараметрыИнтеграции(ТорговаяТочка);
	
	Если ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.ДокументТорговойТочкиЗаПериод(
			ПараметрыИнтеграции.ТорговаяТочка,
			НачалоПериода,
			КонецПериода);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Определяет параметры документов оплат для проведения сверки взаиморасчетов за период.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//                  с платежными системами;
//  НачалоПериода - Дата - начало периода отбора;
//  КонецПериода - Дата - окончание периода отбора;
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные документов оплат за период.
//
Функция ОперацииТорговойТочкиЗаПериод(ТорговаяТочка, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ИнтеграцияСПлатежнымиСистемами.ИнтеграцияДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в платежной системе.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	ПараметрыИнтеграции = ПараметрыИнтеграции(ТорговаяТочка);
	
	Если ЭтоПлатежнаяСистемаСБП(ПараметрыИнтеграции.ПлатежнаяСистема) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБП.ОперацииТорговойТочкиЗаПериод(
			ПараметрыИнтеграции.ТорговаяТочка,
			НачалоПериода,
			КонецПериода);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный идентификатор платежной системы: %1'"),
			ПараметрыИнтеграции.ПлатежнаяСистема);
	КонецЕсли;
	
КонецФункции

// Определяет список торговых точек, для которых доступна сверка взаиморасчетов.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - торговые точки для которых доступна
//  сверка взаиморасчетов.
//
Функция НастройкиСверкиВзаиморасчетов() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
		|ГДЕ
		|	НЕ НастройкиИнтеграцииСПлатежнымиСистемами.ЭтоГруппа
		|	И НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.ПлатежнаяСистема В(&ПлатежныеСистемы)";
	
	ПлатежныеСистемы = Новый Массив;
	СервисИнтеграцииССБП.ДобавитьПлатежныеСистемыСверкеВзаиморасчетов(ПлатежныеСистемы);
	Запрос.УстановитьПараметр("ПлатежныеСистемы", ПлатежныеСистемы);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует текущую локальную дату в UTC.
//
// Параметры:
//  Значение - Дата - исходная дата.
//
// Возвращаемое значение:
//  Дата - результат преобразования.
//
Функция ДатаВUTC(Значение) Экспорт
	
	Возврат Значение - СмещениеСтандартногоВремени(ЧасовойПоясСеанса(), Значение);
	
КонецФункции 

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения() Экспорт
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Конец ИнтернетПоддержкаПользователей.СверкаВзаиморасчетовСБПc2b

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Формирует новую структуру операций платежной системы.
//
// Возвращаемое значение:
//  Структура - информация о доступных операциях:
//    * ОтменаЗаказа - Булево - признак доступности отмены не оплаченного
//      заказа в платежной системе. Для выполнения операции
//      следует использовать метод ИнтеграцияСПлатежнымиСистемами.ОтменитьЗаказНаОплату;
//    * ОтменаОплаты - Булево - признак доступности отмены оплаченного
//      заказа (отмена транзакции) в платежной системе. Для выполнения операции
//      следует использовать метод ИнтеграцияСПлатежнымиСистемами.ОтменитьОплату;
//    * СрокЖизниQRКода - Булево - признак доступности установки максимального
//      срока действия QR-кода;
//    * ПлатежнаяСсылка - Булево - признак доступности использования платежной ссылки
//      для выполнения оплаты;
//    * ВыборПлатежнойСистемыВозврата - Булево - признак доступности возврата оплаты
//      в платежную систему отличную от исходной. Для получения списка доступных платежных систем
//      следует использовать метод ИнтеграцияСПлатежнымиСистемами.ПлатежныеСистемыВозврата;
//    * Идентификатор - Строка - строковый идентификатор платежной системы или участника СБП;
//    * СинонимСистемы - Строка - синоним платежной системы для печати;
//    * Отключена - Булево - признак активности настройки;
//    * КассовыеСсылки - Булево - признак доступности использования кассовых ссылок;
//    * ПлатежныйАгрегатор - Булево - настроена интеграция с платежным агрегатором.
//
Функция НовыйНастройкиТорговойТочки() Экспорт
	
	Операции = Новый Структура;
	Операции.Вставить("ОтменаЗаказа",                  Ложь);
	Операции.Вставить("ОтменаОплаты",                  Ложь);
	Операции.Вставить("СрокЖизниQRКода",               Ложь);
	Операции.Вставить("ПлатежнаяСсылка",               Ложь);
	Операции.Вставить("ВыборПлатежнойСистемыВозврата", Ложь);
	Операции.Вставить("Идентификатор",                 Ложь);
	Операции.Вставить("СинонимСистемы",                Ложь);
	Операции.Вставить("Используется",                  Ложь);
	Операции.Вставить("КассовыеСсылки",                Ложь);
	Операции.Вставить("ПлатежныйАгрегатор",            Ложь);
	
	Возврат Операции;
	
КонецФункции

// Создает описание результат создания заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    *QRКод - Строка - идентификатор, по которому выполняется оплата;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//                 может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатИдентификаторОплаты() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("QRКод", "");
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание результатов получения отчета по операциям из платежной системы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание результат получения отчета:
//   *ТипОперации - Строка - тип операции, оплата или возврат;
//   *ДатаОперации - Дата - дата первичного документа в 1С, который зарегистрировал операцию;
//   *Сумма - Число - сумма операции в платежной системе;
//   *СуммаКомиссии - Число - рассчитанная сумма комиссии;
//   *Идентификатор - Строка - идентификатор операции в платежной системе;
//   *ИдентификаторОплаты - Строка - идентификатор оплаты в платежной системе.
//
Функция НовыйДанныеОтчетаПоСверкеОпераций() Экспорт
	
	ДанныеОпераций = Новый ТаблицаЗначений;
	ДанныеОпераций.Колонки.Добавить("ТипОперации",         ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеОпераций.Колонки.Добавить("ДатаОперации",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеОпераций.Колонки.Добавить("Сумма",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеОпераций.Колонки.Добавить("СуммаКомиссии",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеОпераций.Колонки.Добавить("Идентификатор",       ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеОпераций.Колонки.Добавить("ИдентификаторОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	Возврат ДанныеОпераций;
	
КонецФункции

// Определяет доступность использования функциональности выполнения операций
// в платежной системе на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в платежной системе доступна.
//
Функция СлужебнаяИнтеграцияДоступна() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИдентификаторыОперацийСБП)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИдентификаторыОперацийСБП)
		И ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиИнтеграцииСПлатежнымиСистемами);
	
КонецФункции

// Определяет доступность использования функциональности подключения
// к СБП на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в платежной системе доступна.
//
Функция СлужебнаяНастройкаИнтеграцияДоступна() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиИнтеграцииСПлатежнымиСистемами)
		И ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиИнтеграцииСПлатежнымиСистемами)
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПодключениеКСБП)
		И ПравоДоступа("Использование", Метаданные.Обработки.ПодключениеКСБП);
	
КонецФункции

// Формирует новое описание параметров операции, используется в длительных операциях и переопределяемых методах.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в платежной системе:
//    * ДатаОперации - Дата - фактическая дата операции в UTC;
//    * СуммаОперации - Число - фактическая суммы возврата по документу;
//    * ИдентификаторОперации -  - Строка - ключ контроля загрузки.
//
Функция НовыйОписаниеПараметровОперации() Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДатаОперации", Дата(1, 1, 1));
	ПараметрыОперации.Вставить("СуммаОперации", Неопределено);
	ПараметрыОперации.Вставить("ИдентификаторОперации", "");
	
	Возврат ПараметрыОперации;
	
КонецФункции

#КонецОбласти

#Область УчастникиСБП

// См. ИнтеграцияСПлатежнымиСистемами.ПлатежныеСистемыВозврата.
//
Функция ПлатежныеСистемыВозврата() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыУчастниковСБП.Идентификатор КАК Идентификатор,
		|	ИдентификаторыУчастниковСБП.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.ИдентификаторыУчастниковСБП КАК ИдентификаторыУчастниковСБП";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() И Не ОбщегоНазначения.РазделениеВключено() Тогда
		ОбновлениеНастроекУчастниковСБП();
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(
			ВыборкаДетальныеЗаписи.Идентификатор,
			ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.НастройкиИнтеграции.
//
Функция НастройкиИнтеграции(БИК) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИнтеграцияДоступна", Ложь);
	Результат.Вставить("ПараметрыУчастникаСБП ", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИдентификаторыУчастниковСБП.Идентификатор КАК Идентификатор,
		|	ИдентификаторыУчастниковСБП.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыУчастниковСБП КАК ИдентификаторыУчастниковСБП
		|		ПО БИКУчастниковСБП.Идентификатор = ИдентификаторыУчастниковСБП.Идентификатор
		|ГДЕ
		|	БИКУчастниковСБП.БИК = &БИК";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ПараметрыУчастникаСБП = Новый Структура;
	ПараметрыУчастникаСБП.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	ПараметрыУчастникаСБП.Вставить("ТорговыеТочки", Новый Массив);
	ПараметрыУчастникаСБП.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
	
	УчастникСБП = СервисИнтеграцииССБП.УчастникСБППоИдентификатору(
		ВыборкаДетальныеЗаписи.Идентификатор,
		Ложь);
	
	Если ЗначениеЗаполнено(УчастникСБП) Тогда
		Результат.ИнтеграцияДоступна = Истина;
		ПараметрыУчастникаСБП.ТорговыеТочки = Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.НастройкиПодключенияУчастникаСБП(
			УчастникСБП);
	КонецЕсли;
	
	Результат.ПараметрыУчастникаСБП = ПараметрыУчастникаСБП;
	
	Возврат Результат;
	
КонецФункции

// Определяет участника СБП по БИК банка.
//
// Параметры:
//  БИК - Строка - идентификатор банка.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПлатежныеСистемы - интегрированный участник СБП.
//
Функция ИнтегрированныйУчастникСБППоБИК(БИК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БИКУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
		|ГДЕ
		|	БИКУчастниковСБП.БИК = &БИК";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат СервисИнтеграцииССБП.УчастникСБППоИдентификатору(ВыборкаДетальныеЗаписи.Идентификатор);
	
КонецФункции

Функция НастройкиУчастникаСБП(Идентификатор) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("КассовыеСсылки", Ложь);
	Настройки.Вставить("Наименование", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыУчастниковСБП.КассовыеСсылки КАК КассовыеСсылки,
		|	ИдентификаторыУчастниковСБП.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.ИдентификаторыУчастниковСБП КАК ИдентификаторыУчастниковСБП
		|ГДЕ
		|	ИдентификаторыУчастниковСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЗаполнитьЗначенияСвойств(
			Настройки,
			ВыборкаДетальныеЗаписи);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Обновляет настройки участников СБП.
//
// Параметры:
//  Настройки - Массив из Структура - см. ОперацияНастройкиУчастниковСБП.
//
Процедура ЗаписатьНастройкиУчастниковСБП(Настройки) Экспорт
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейИдентификаторы = РегистрыСведений.ИдентификаторыУчастниковСБП.СоздатьНаборЗаписей();
	НаборЗаписейБИК = РегистрыСведений.БИКУчастниковСБП.СоздатьНаборЗаписей();
	Для Каждого Настройка Из Настройки Цикл
		
		ЗаписьИдентификаторы = НаборЗаписейИдентификаторы.Добавить();
		ЗаписьИдентификаторы.Идентификатор = Настройка.memberId;
		ЗаписьИдентификаторы.Наименование = Настройка.memberName;
		ЗаписьИдентификаторы.КассовыеСсылки = Настройка.c2bCashRegisterPaymentSupported;
		Если Настройка.biks <> Неопределено Тогда
			Для Каждого БИК Из Настройка.biks Цикл
				ЗаписьБИК = НаборЗаписейБИК.Добавить();
				ЗаписьБИК.БИК = БИК;
				ЗаписьБИК.Идентификатор = Настройка.memberId;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписейИдентификаторы.Записать();
		НаборЗаписейБИК.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

// Определяет платежные системы СБП, которые поддерживают сверку взаиморасчетов.
//
// Возвращаемое значение:
//  ПлатежныеСистемы - Массив из ПеречислениеСсылка.ПлатежныеСистемы - платежные системы,
//                     поддерживающие сверку взаиморасчетов.
//
Функция ПлатежныеСистемыСверкиВзаиморасчетов() Экспорт
	
	ПлатежныеСистемы = Новый Массив;
	СервисИнтеграцииССБП.ДобавитьПлатежныеСистемыСверкеВзаиморасчетов(
		ПлатежныеСистемы);
	
	Возврат ПлатежныеСистемы;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеНастроекУчастниковСБП".
//
Процедура ОбновлениеНастроекУчастниковСБП() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Обновление настроек участников СБП в модели сервиса
			|выполняется через поставляемые данные'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП,
			,
			НСтр("ru = 'Обновление данные участников СБП при работе в автономном рабочем месте не предусмотрено.'"));
		Возврат;
	КонецЕсли;
	
	СервисИнтеграцииССБП.ОбновлениеНастроекУчастниковСБП();
	
КонецПроцедуры

// Обработчик регламентного задания фонового задания обновления настроек СБП.
//
Процедура ОбновлениеНастроекУчастниковСБППриПодключении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СервисИнтеграцииССБП.ОбновлениеНастроекУчастниковСБП();
	
КонецПроцедуры

// Обработчик регламентного задания "ЗагрузкаСтатусовОперацийСБП".
//
Процедура ЗагрузкаСтатусовОперацийСБП() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
	
	ОбработанныеОперации = СервисИнтеграцииССБП.СтатусыОперацийC2B();
	
	Если ОбработанныеОперации.Количество() <> 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загружены терминальные статусы %1 операций СБП.'"),
				ОбработанныеОперации.Количество()),
				Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеНастроекУчастниковСБП".
//
Процедура ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП()
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
		ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ЗаданияОбновления.Количество() = 0 Тогда
			
			// Чтобы не создавать пиковых нагрузок на сервис,
			// время обновления будет выбрано случайным образом
			// между 00:00 и 09:00.
			Генератор = Новый ГенераторСлучайныхЧисел;
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 32400);
			Расписание.ПериодПовтораДней = 1;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
			ПараметрыЗадания.Вставить("Расписание",    Расписание);
			ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление настроек участников СБП'"));
			
			Попытка
				РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			Исключение
				ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписатьИнформациюВЖурналРегистрации(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось создать регламентное задание Обновление настроек участников СБП по причине:
								|%1'"),
							ИнформацияОбОшибке),
						Истина);
				ВызватьИсключение ИнформацияОбОшибке;
			КонецПопытки;
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Создано регламентное задание Обновление платежных систем СБП.'"),
				Ложь);
			
			// Выполняется загрузка настроек, для корректного отображения
			// ссылок на подключение к СБП при заполнении нормативно справочной информации.
			Попытка
				ФоновыеЗадания.Выполнить(
					"ИнтеграцияСПлатежнымиСистемамиСлужебный.ОбновлениеНастроекУчастниковСБППриПодключении",
					,
					,
					НСтр("ru = 'Обновление настроек СБП.'"));
			Исключение
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					,
					Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось выполнить обновление настроек СБП.
							|%1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ОбновлениеНастроекУчастниковСБП".
//
Процедура УдалитьЗаданияОбновленияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ЗагрузкаСтатусовОперацийСБП" 
// при создании новой настройки интеграции с платежной системой.
//
Процедура ДобавитьЗаданиеЗагрузкиСтатусовОперацийСБП() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня = 60 * 60 * 3; // Попытка получения статуса выполняется каждые 3 часа.
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Загрузка статусов операций СБП'"));
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Исключение
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание Загрузка статусов операций СБП по причине:
							|%1'"),
						ИнформацияОбОшибке),
					Истина);
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание Загрузка статусов операций СБП.'"),
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ЗагрузкаСтатусовОперацийСБП".
//
Процедура УдалитьЗаданияЗагрузкаСтатусовОперацийСБП()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОперацийСБП);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет новые реквизиты справочника "НастройкиИнтеграцииСПлатежнымиСистемами"
// при переходе на версию 2.6.1.
//
Процедура ОбработатьНастройкиПлатежныхСистем(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ДлительностьОперацииПлатежнойСистемы.Получить() = 0 Тогда
		УстановитьДлительностьОпераций();
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиИнтеграцииСПлатежнымиСистемами");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.ЭтоГруппа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Идентификатор = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторSWiP());
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатЗапроса[0].Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если РезультатЗапроса[1].Пустой() Тогда
			КореньОбъект = Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.СоздатьГруппу();
			КореньОбъект.Наименование = НСтр("ru = 'SWiP'");
			КореньОбъект.Идентификатор = ИдентификаторSWiP();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				КореньОбъект,
				Ложь,
				Истина);
			КореньСсылка = КореньОбъект.Ссылка;
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			КореньСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			УчетнаяЗаписьВладелец = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			УчетнаяЗаписьВладелец.Заблокировать();
			УчетнаяЗаписьВладелец.Родитель = КореньСсылка;
			УчетнаяЗаписьВладелец.ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.SWiP;
			УчетнаяЗаписьВладелец.Идентификатор = ИдентификаторSWiP();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				УчетнаяЗаписьВладелец,
				Ложь,
				Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает значение константы ДлительностьОперацииПлатежнойСистемы.
//
Процедура УстановитьДлительностьОпераций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьДлительностьОперации(60);
	
КонецПроцедуры

// Устанавливает пометки на удаления для элементов настроек SWiP
// при переходе на версию 2.6.2.
//
Процедура ОбновитьНастройкиИнтеграции(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// 1. Пометить настройки интеграции с SWiP
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка,
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель КАК Родитель,
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Идентификатор КАК Идентификатор,
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.ПлатежнаяСистема КАК ПлатежнаяСистемаРодителя,
			|	НастройкиИнтеграцииСПлатежнымиСистемами.ПлатежнаяСистема КАК ПлатежнаяСистема
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Идентификатор = ""swip""
			|	ИЛИ НастройкиИнтеграцииСПлатежнымиСистемами.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ПлатежныеСистемы.SWiP)
			|	ИЛИ НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ПлатежныеСистемы.SWiP)";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.УстановитьПометкуУдаления(Истина);
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		// 2. Заменить родителя в настройках интеграции с СБП
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ГруппаСБП
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель = ЗНАЧЕНИЕ(Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПустаяСсылка)
			|	И НастройкиИнтеграцииСПлатежнымиСистемами.Идентификатор = ""sbp"";
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_ГруппаСБП КАК ВТ_ГруппаСБП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|		ПО ВТ_ГруппаСБП.Ссылка = НастройкиИнтеграцииСПлатежнымиСистемами.Родитель;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ГруппаСБП.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_ГруппаСБП КАК ВТ_ГруппаСБП";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.Родитель = Неопределено;
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.УстановитьПометкуУдаления(Истина);
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		// 3. Установить признак использования настроек СБП
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НЕ НастройкиИнтеграцииСПлатежнымиСистемами.ЭтоГруппа
			|	И НЕ НастройкиИнтеграцииСПлатежнымиСистемами.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.Используется = Истина;
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось установить пометки на удаление для настроек SWiP и обновить настройки СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Добавление регламентного задания обновления настроек участников СБП
// при переходе на версию 2.6.2.
//
Процедура ДобавитьЗаданиеОбновленияНастроек(Параметры) Экспорт
	
	УдалитьЗаданияОбновленияНастроек();
	ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП();
	
	Попытка
		СервисИнтеграцииССБП.ОбновлениеНастроекУчастниковСБП();
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Не удалось загрузить настройки интеграции с СБП.'"),
			Истина);
	КонецПопытки;
	
КонецПроцедуры

// Заменяет значение перечисления УдалитьСБП_Промсвязьбанк на СБП_Промсвязьбанк
// в настройках интеграции с Системой быстрых платежей при переходе на версию 2.6.3.
//
Процедура ЗаменитьЗначениеПеречисленияУдалитьСБП_Промсвязьбанк(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
			|ГДЕ
			|	НастройкиИнтеграцииСПлатежнымиСистемами.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ПлатежныеСистемы.УдалитьСБП_Промсвязьбанк)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.СБП_Промсвязьбанк;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обновить настройки интеграции с СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиАутентификацииНаФормах

// Добавляет настройки аутентификации в платежной системе на переданную форму.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  Интеграция - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//               с платежными системами;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система, для которой производится настройка;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки.
//
Процедура ДобавитьНастройкиАутентификации(
		Форма,
		Группа,
		Интеграция,
		ПлатежнаяСистема,
		ПараметрыПодсказки) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	Форма.Настройки.Вставить("ДоступнаНастройкаАутентификации", Истина);
	
	Если Не ДоступнаНастройкаПараметровАутентификации(Интеграция, ПлатежнаяСистема) Тогда
		Форма.Настройки.Вставить("ДоступнаНастройкаАутентификации", Ложь);
		Возврат;
	КонецЕсли;
	
	Настройки = НовыйНастройкиАутентификации(ПлатежнаяСистема);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(Интеграция)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	Форма.Настройки.Вставить("НастройкиАутентификации",  Настройки.Реквизиты);
	
	Если ПараметрыПодсказки.ОтобразитьПодсказку Тогда
		Форма.Элементы.ДекорацияПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			Настройки.Подсказка,
			ПараметрыПодсказки.АдресЛичногоКабинета);
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.РежимПароля = ОписаниеРеквизита.РежимПароля;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		НовыйЭлемент.Подсказка = ОписаниеРеквизита.Подсказка;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Интеграция) Тогда
		ЗначенияНастроек = ЗначениеНастроекАутентификации(
			Интеграция,
			ПлатежнаяСистема);
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Удаляет настройки аутентификации в платежной системе на переданной форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которой необходимо удалить настройки.
//
Процедура УдалитьНастройкиАутентификации(Форма) Экспорт
	
	// Если настройки не сформированы, удалять
	// ничего не нужно.
	Если Форма.Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Настройки.Свойство("НастройкиАутентификации") Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого НастройкиАутентификации Из Форма.Настройки.НастройкиАутентификации Цикл
		УдаляемыеРеквизиты.Добавить(НастройкиАутентификации.Имя);
		Форма.Элементы.Удалить(Форма.Элементы[НастройкиАутентификации.Имя]);
	КонецЦикла;
	Форма.ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
КонецПроцедуры

// Формирует декларативное описание настроек аутентификации в платежной системе.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система для которой производится настройка.
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиАутентификации(ПлатежнаяСистема)
	
	Реквизиты = Новый Массив;
	Подсказка = "";
	
	СервисИнтеграцииССБП.НастройкиАутентификации(
		ПлатежнаяСистема,
		Реквизиты,
		Подсказка);
	
	Настройки = Новый Структура;
	Настройки.Вставить("Реквизиты", Реквизиты);
	Настройки.Вставить("Подсказка", Подсказка);
	
	Возврат Настройки;
	
КонецФункции

// Производит проверку заполнения данных аутентификации в платежной системе.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для проверки настроек;
//  Отказ - Булево - если Истина, запись данные не производится.
//
Процедура ПроверитьНастройкиАутентификации(Форма, Отказ) Экспорт
	
	Если Не Форма.Настройки.ДоступнаНастройкаАутентификации Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит получение данных аутентификации из формы настройки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для получения настроек;
//
// Возвращаемое значение:
//  Структура - данные аутентификации в платежной системе.
//
Функция НастройкиАутентификацииПоДаннымФормы(Форма) Экспорт
	
	ПараметрыАутентификации = Новый Соответствие;
	
	Если Не Форма.Настройки.ДоступнаНастройкаАутентификации Тогда
		Возврат ПараметрыАутентификации;
	КонецЕсли;
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		ПараметрыАутентификации.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

// Выполняет сохранение настроек аутентификации в безопасном хранилище.
//
// Параметры:
//  Интеграция - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//               с платежными системами;
//  ПараметрыАутентификации - Соответствие - настройки аутентификации платежной системы;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система
//                     для которой производится настройка.
//
Процедура СохранитьНастройкиАутентификации(
		Интеграция,
		Знач ПараметрыАутентификации,
		ПлатежнаяСистема) Экспорт
	
	Если ЭтоПлатежнаяСистемаСБП(ПлатежнаяСистема) Тогда
		СервисИнтеграцииССБП.СохранитьНастройкиАутентификации(
			Интеграция,
			ПараметрыАутентификации,
			ПлатежнаяСистема);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
КонецПроцедуры

// Производит получение данных аутентификации в платежной системе
// из безопасного хранилища.
//
// Параметры:
//  Интеграция - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//               с платежными системами;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система
//                     для которой производится настройка.
//
// Возвращаемое значение:
//  Структура - данные аутентификации в платежной системе.
//
Функция ЗначениеНастроекАутентификации(Интеграция, ПлатежнаяСистема) Экспорт
	
	ДанныеАутентификации = Неопределено;
	Если ЭтоПлатежнаяСистемаСБП(ПлатежнаяСистема) Тогда
		ДанныеАутентификации = СервисИнтеграцииССБП.ДанныеАутентификацииНастройки(
			Интеграция,
			ПлатежнаяСистема);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестная платежная система.'");
	КонецЕсли;
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// Определяет возможность настройки аутентификации на форме.
//
// Параметры:
//  Интеграция - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//               с платежными системами;
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система
//                     для которой производится настройка.
//
// Возвращаемое значение:
//  Структура - данные аутентификации в платежной системе.
//
Функция ДоступнаНастройкаПараметровАутентификации(Интеграция, ПлатежнаяСистема)
	
	Если Интеграция <> Неопределено Тогда
		НастройкаУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Интеграция,
			"ЭтоГруппа");
		НастройкаАутентификацииВУчетнойСистеме = НастройкаАутентификацииВУчетнойЗаписи(
			ПлатежнаяСистема);
		Если (НастройкаУчетнойЗаписи И Не НастройкаАутентификацииВУчетнойСистеме)
				Или (Не НастройкаУчетнойЗаписи И НастройкаАутентификацииВУчетнойСистеме) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область НастройкиОплатыНаФормах

// Добавляет настройки оплат в платежной системе на переданную форму.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//    с платежными системами;
//
Процедура ДобавитьНастройкиОплаты(
		Форма,
		Группа,
		ТорговаяТочка,
		ДокументОперации = Неопределено) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	НастройкиИнтеграции = НастройкиИнтеграцииПрограммы();
	Реквизиты = НовыйНастройкиОплаты(НастройкиИнтеграции);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		Если ОписаниеРеквизита.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(ТорговаяТочка)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		
		Если ОписаниеРеквизита.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		
		Попытка
			НовыйЭлемент.ПараметрыВыбора = ОписаниеРеквизита.ПараметрыВыбора;
		Исключение
			// Дополнительной обработки не требуется. Исключение может возникнуть, если настройка
			// функциональных опций конфликтует с настройкой параметров выбора.
		КонецПопытки;
		
		Попытка
			НовыйЭлемент.СвязиПараметровВыбора = ОписаниеРеквизита.СвязиПараметровВыбора;
		Исключение
			// Дополнительной обработки не требуется. Исключение может возникнуть, если настройка
			// функциональных опций конфликтует с настройкой связи параметров выбора.
		КонецПопытки;
		
		НовыйЭлемент.УстановитьДействие(
			"ПриИзменении",
			"Подключаемый_ПриИзмененииНастройкиОплаты");
		
		Если ЗначениеЗаполнено(ДокументОперации) Тогда
			УникальноеЗначение = Новый УникальныйИдентификатор;
			СтруктураРеквизита = Новый Структура(ОписаниеРеквизита.Имя, УникальноеЗначение);
			ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ДокументОперации);
			Если СтруктураРеквизита[ОписаниеРеквизита.Имя] <> УникальноеЗначение
				И ОписаниеРеквизита.Тип.СодержитТип(ТипЗнч(СтруктураРеквизита[ОписаниеРеквизита.Имя]))
				И ЗначениеЗаполнено(СтруктураРеквизита[ОписаниеРеквизита.Имя]) Тогда
					Форма[ОписаниеРеквизита.Имя] = СтруктураРеквизита[ОписаниеРеквизита.Имя];
					НовыйЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Значения в структуре затираются, чтобы не провоцировать ошибку
		// сериализации значений формы.
		ПустойМассив = Новый Массив;
		ОписаниеРеквизита.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПустойМассив);
		ОписаниеРеквизита.ПараметрыВыбора = Новый ФиксированныйМассив(ПустойМассив);
		
	КонецЦикла;
	
	Форма.Настройки.Вставить("НастройкиОплаты", Реквизиты);
	
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ЗначенияНастроек = ЗначенияНастроекОплаты(
			Реквизиты,
			НастройкиИнтеграции.ОбъектМетаданных,
			ТорговаяТочка);
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует декларативное описание настроек оплат в платежной системе.
//
// Параметры:
//  НастройкиИнтеграции - Структура - настройки интеграции:
//    *ОбъектМетаданных - Метаданные.РегистрыСведений - объект метаданных регистр сведений,
//                        в котором хранятся настройки выполнения оплат. Регистр определяет
//                        связь торговой точки платежной системы и аналитики ведения учета
//                        в программах 1С. На основании данных регистра должен выполняется
//                        поиск торговой точки (настройки интеграции) при выполнении оплат и возвратов;
//    *ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//                        необходимо скрыть на форме настройки интеграции.
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиОплаты(НастройкиИнтеграции)
	
	Настройки = Новый Массив;
	
	Для Каждого Изменение Из НастройкиИнтеграции.ОбъектМетаданных.Измерения Цикл
		Если Не СтрНачинаетсяС(Изменение.Имя, "Удалить")
			И НастройкиИнтеграции.ИсключаемыеПоля.Найти(Изменение.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Изменение.Имя,
					Изменение.Тип,
					Изменение.Синоним,
					(Изменение.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Изменение.ПараметрыВыбора,
					Изменение.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из НастройкиИнтеграции.ОбъектМетаданных.Ресурсы Цикл
		Если Не СтрНачинаетсяС(Ресурс.Имя, "Удалить")
			И НастройкиИнтеграции.ИсключаемыеПоля.Найти(Ресурс.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Ресурс.Имя,
					Ресурс.Тип,
					Ресурс.Синоним,
					(Ресурс.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Ресурс.ПараметрыВыбора,
					Ресурс.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из НастройкиИнтеграции.ОбъектМетаданных.Реквизиты Цикл
		Если Не СтрНачинаетсяС(Реквизит.Имя, "Удалить")
			И НастройкиИнтеграции.ИсключаемыеПоля.Найти(Реквизит.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Реквизит.Имя,
					Реквизит.Тип,
					Реквизит.Синоним,
					(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Реквизит.ПараметрыВыбора,
					Реквизит.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  РежимПароля - Булево - признак использования режима пароля;
//  Подсказка - Строка - подсказка для поля формы.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		РежимПароля = Ложь,
		Подсказка = "") Экспорт
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип",                Тип);
	ОписаниеПоля.Вставить("Имя",                Имя);
	ОписаниеПоля.Вставить("Синоним",            Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("РежимПароля",        РежимПароля);
	ОписаниеПоля.Вставить("Подсказка",          Подсказка);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами") Тогда
		ОписаниеПоля.Вставить("ТорговаяТочка", Истина);
	Иначе
		ОписаниеПоля.Вставить("ТорговаяТочка", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  РежимПароля - Строка - признак использования режима пароля.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйРасширенноеОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		ПараметрыВыбора,
		СвязиПараметровВыбора,
		РежимПароля = Ложь)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип",                   Тип);
	ОписаниеПоля.Вставить("Имя",                   Имя);
	ОписаниеПоля.Вставить("Синоним",               Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения",    ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("ПараметрыВыбора",       ПараметрыВыбора);
	ОписаниеПоля.Вставить("СвязиПараметровВыбора", СвязиПараметровВыбора);
	ОписаниеПоля.Вставить("РежимПароля",           РежимПароля);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами") Тогда
		ОписаниеПоля.Вставить("ТорговаяТочка", Истина);
	Иначе
		ОписаниеПоля.Вставить("ТорговаяТочка", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

// Определяет настройки оплат для торговой точки.
//
// Параметры:
//  НастройкиОплаты - Структура - см. НовыйНастройкиОплаты;
//  ОбъектМетаданных - объект метаданных, который отвечает за хранение настроек;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//                  с платежными системами.
//
// Возвращаемое значение:
//  Соответствие - содержит значения настроек оплат.
//
Функция ЗначенияНастроекОплаты(
		НастройкиОплаты,
		ОбъектМетаданных,
		ТорговаяТочка)
	
	Результат  = Новый Соответствие;
	ВыборПолей = "";
	Отбор      = "";
	
	Для Каждого ОписаниеПоля Из НастройкиОплаты Цикл
		
		Если Не ОписаниеПоля.ТорговаяТочка Тогда
			Если ВыборПолей <> "" Тогда
				ВыборПолей = ВыборПолей
					+ ","
					+ Символы.ПС;
			КонецЕсли;
			
			ВыборПолей = ВыборПолей
				+ ОбъектМетаданных.Имя
				+ "."
				+ ОписаниеПоля.Имя
				+ " КАК "
				+ ОписаниеПоля.Имя;
		Иначе
			Отбор = ОбъектМетаданных.Имя + "." + ОписаниеПоля.Имя + " = &ТорговаяТочка";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	РегистрСведений.%2 КАК %3 
		|ГДЕ
		|	%4";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ВыборПолей,
		ОбъектМетаданных.Имя,
		ОбъектМетаданных.Имя,
		Отбор);
	
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ОписаниеПоля Из НастройкиОплаты Цикл
			Если ОписаниеПоля.ТорговаяТочка Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(ОписаниеПоля.Имя, ВыборкаДетальныеЗаписи[ОписаниеПоля.Имя]);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обновляет настройки оплаты для торговой точки.
//
// Параметры:
//  ПараметрыОплаты - Структура - см. ЗначенияНастроекОплаты;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - настройка интеграции
//                  с платежными системами.
//
// Возвращаемое значение:
//  Структура - результат обновления.
//
Функция ЗаписатьНастройкиОплаты(ПараметрыОплаты, ТорговаяТочка) Экспорт
	
	ОбъектМетаданных         = НастройкиИнтеграцииПрограммы().ОбъектМетаданных;
	ИмяАтрибутаТорговаяТочка = АтрибутТорговаяТочка(ОбъектМетаданных);
	ПараметрыОплаты.Вставить(ИмяАтрибутаТорговаяТочка, ТорговаяТочка);
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ",             Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	Попытка
		ИнтеграцияПодсистемБИП.ПриЗаписиНастроекИнтеграции(
			ПараметрыОплаты,
			Результат.Отказ,
			Результат.СообщениеОбОшибке);
		ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаписиНастроекИнтеграции(
			ПараметрыОплаты,
			Результат.Отказ,
			Результат.СообщениеОбОшибке);
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		Результат.Отказ             = Истина;
		Результат.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнения настройки оплаты для торговой точки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, для которой необходимо выполнить проверку;
//  Отказ - Булево - если Истина, при проверке возникли ошибки.
//
Процедура ПроверитьНастройкиОплаты(Форма, Отказ) Экспорт
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиОплаты Цикл
		
		Если ОписаниеРеквизита.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает настройки оплат из формы торговой точки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для получения настроек оплат.
//
// Возвращаемое значение:
//  Структура - настройки оплат.
//
Функция НастройкиОплатыПоДаннымФормы(Форма) Экспорт
	
	ПараметрыОплаты = Новый Соответствие;
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиОплаты Цикл
		Если ОписаниеРеквизита.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОплаты.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыОплаты;
	
КонецФункции

// Позволяет настроить элементы настройки приема оплат на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки интеграции;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки интеграции с
//    Системой быстрых платежей, которые передаются в методе ИнтеграцияСПлатежнымиСистемамиКлиент.ПодключитьИнтеграциюССБП.
//
Процедура НастроитьЭлементыФормыИнтеграции(
		Форма,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщиеЭлементы = Новый Структура;
	ОбщиеЭлементы.Вставить("Наименование", Форма.Элементы["Наименование"]);
	
	ЭлементыНастроекОплаты = Новый Структура;
	ЗначенияНастроекОплаты = Новый Структура;
	Для Каждого ЭлементНастройки Из Форма.Настройки.НастройкиОплаты Цикл
		Если ЭлементНастройки.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		ЭлементыНастроекОплаты.Вставить(ЭлементНастройки.Имя, Форма.Элементы[ЭлементНастройки.Имя]);
		ЗначенияНастроекОплаты.Вставить(ЭлементНастройки.Имя, Форма[ЭлементНастройки.Имя]);
	КонецЦикла;
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ОбщиеЭлементы", ОбщиеЭлементы);
	НастройкиФормы.Вставить("ЭлементыНастроекОплаты", ЭлементыНастроекОплаты);
	НастройкиФормы.Вставить("ЗначенияНастроекОплаты", ЗначенияНастроекОплаты);
	
	ИнтеграцияПодсистемБИП.ПриНастройкеЭлементовФормыИнтеграции(
		НастройкиФормы,
		ДополнительныеПараметры);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриНастройкеЭлементовФормыИнтеграции(
		НастройкиФормы,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Позволяет предзаполнить настройки приема платежей на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки интеграции;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки интеграции с
//    Системой быстрых платежей, которые передаются в методе ИнтеграцияСПлатежнымиСистемамиКлиент.ПодключитьИнтеграциюССБП.
//
Функция НастроитьПараметрыПодключения(
		Форма,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Наименование", Неопределено);
	
	НастройкиОплаты = Новый Структура;
	Для Каждого ЭлементНастройки Из Форма.Настройки.НастройкиОплаты Цикл
		Если ЭлементНастройки.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		НастройкиОплаты.Вставить(ЭлементНастройки.Имя, Неопределено);
	КонецЦикла;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОбщиеНастройки", ОбщиеНастройки);
	Настройки.Вставить("НастройкиОплаты", НастройкиОплаты);
	
	ИнтеграцияПодсистемБИП.ПриЗаполненииФормыИнтеграции(
		Настройки,
		ДополнительныеПараметры);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаполненииФормыИнтеграции(
		Настройки,
		ДополнительныеПараметры);
	
	Форма.Наименование = Настройки.ОбщиеНастройки.Наименование;
	Для Каждого КлючЗначение Из Настройки.НастройкиОплаты Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область НастройкаФормИнтеграции

// Создает описание параметров подсказки настройки интеграции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//   *ОтобразитьПодсказку - Булево - признак отображения подсказки;
//   *АдресЛичногоКабинета - Строка - ссылка для перехода в личный кабинет платежной системы.
//
Функция НовыйПараметрПодсказки() Экспорт
	
	ПараметрыПодсказки = Новый Структура;
	ПараметрыПодсказки.Вставить("ОтобразитьПодсказку", Ложь);
	ПараметрыПодсказки.Вставить("АдресЛичногоКабинета", "");
	
	Возврат ПараметрыПодсказки;
	
КонецФункции

// Устанавливает идентификатор торговой точки.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект.НастройкиИнтеграцииСПлатежнымиСистемами - записываемая настройка
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система, для которой производится настройка;
//  НастройкиАутентификации - Соответствие - см. ЗначениеНастроекАутентификации.
//
Процедура УстановитьИдентификаторТорговойТочки(
		ТекущийОбъект,
		ПлатежнаяСистема,
		НастройкиАутентификации) Экспорт
	
	Если ЭтоПлатежнаяСистемаСБП(ПлатежнаяСистема) Тогда
		СервисИнтеграцииССБП.УстановитьИдентификаторТорговойТочки(
			ТекущийОбъект,
			ПлатежнаяСистема,
			НастройкиАутентификации);
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность настройки аутентификации в группе (в учетной записи).
//
// Возвращаемое значение:
//  Булево - настройка в учетной записи доступна.
//
Функция НастройкаАутентификацииВУчетнойЗаписи(ПлатежнаяСистема)
	
	Возврат ПлатежнаяСистема = Перечисления.ПлатежныеСистемы.SWiP;
	
КонецФункции

// Определяет имя атрибута, в котором хранится настройка интеграции.
//
// Возвращаемое значение:
//  Строка - имя атрибута.
//
Функция АтрибутТорговаяТочка(ОбъектМетаданных)
	
	ТипНастройка = Новый ОписаниеТипов("СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами");
	Для Каждого Изменение Из ОбъектМетаданных.Измерения Цикл
		Если Изменение.Тип = ТипНастройка Тогда
			Возврат Изменение.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		Если Ресурс.Тип = ТипНастройка Тогда
			Возврат Ресурс.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип = ТипНастройка Тогда
			Возврат Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции

// Формирует идентификатор для отображения скрытых символов на форме.
//
//
// Возвращаемое значение:
//  Строка - служебный идентификатор.
//
Функция СтрокаСекретныхДанныхПоУмолчанию() Экспорт
	
	Возврат "be9a7ce7-5c24-413a-98aa-e0b370ca7e9d";
	
КонецФункции

// Определяет прикладные настройки интеграции с платежными системами.
//
// Возвращаемое значение:
//  Настройки - Структура - настройки интеграции:
//    *ОбъектМетаданных - Метаданные.РегистрыСведений - объект метаданных регистр сведений,
//                        в котором хранятся настройки выполнения оплат. Регистр определяет
//                        связь торговой точки платежной системы и аналитики ведения учета
//                        в программах 1С. На основании данных регистра должен выполняется
//                        поиск торговой точки (настройки интеграции) при выполнении оплат и возвратов;
//    *ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//                        необходимо скрыть на форме настройки интеграции. 
//
Функция НастройкиИнтеграцииПрограммы()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОбъектМетаданных", Неопределено);
	Настройки.Вставить("ИсключаемыеПоля",  Новый Массив);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииНастроекИнтеграции(
		Настройки);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции(
		Настройки);
	Если Настройки.ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан объект метаданных отвечающий за настройку параметров оплаты.'");
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СозданиеНастроекИнтеграции

// Устанавливает значение константы ДлительностьОперацииПлатежнойСистемы.
//
// Параметры:
//  Значение - Число - количество секунд.
//
Процедура УстановитьДлительностьОперации(Значение) Экспорт
	
	Константы.ДлительностьОперацииПлатежнойСистемы.Установить(Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПодключения

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом интеграции с платежными системами необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
		
	Иначе
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Добавляет в запись JSON параметры клиента.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации.
//
Процедура ЗаписатьПараметрыКлиента(ЗаписьДанныхСообщения) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientInfo");
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Создает структуру настроек подключения к сервису интеграции с платежными системами.
//
Функция ИнициализироватьПараметрыПодключения() Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиПовтИсп.ИнициализироватьПараметрыПодключения();
	
КонецФункции

// Определяет URL для вызова сервиса интеграции с платежными системами.
//
// Параметры:
//  Операция             - Строка - путь к ресурсу;
//  ИдентификаторСистемы - Строка - идентификатор платежной системы.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция, ИдентификаторСистемы) Экспорт
	
	Возврат "https://"
		+ ХостСервисаОбменаДанными()
		+ "/api/program1c/"
		+ ИдентификаторСистемы
		+ ?(ИдентификаторСистемы = ИдентификаторСБП(),
			"/v1",
			"")
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса интеграции с платежными системами.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаОбменаДанными()
	
	
	Возврат "payment-gateway.1c.ru";
	
КонецФункции

#КонецОбласти

#Область ГенерацияQRКода

// Формирование изображения QR-кодa.
//
// Параметры:
//  QRКод - Строка - строка для преобразования;
//  Размер - Число - размер QR-кода в пикселях;
//  Картинка - Картинка, Неопределено - данные картинки для вставки в QR-код.
//
// Возвращаемое значение: 
//  ДвоичныеДанные - ДвоичныеДанные - данные изображения QR-кода.
//
Функция ИзображениеQRКодa(QRКод, Размер, Картинка = Неопределено) Экспорт
	
	ПараметрыГенерации = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыГенерации.Ширина = Размер;
	ПараметрыГенерации.Высота = Размер;
	ПараметрыГенерации.ЛоготипКартинка = Картинка;
	ПараметрыГенерации.ТипКода = 16;
	ПараметрыГенерации.ЛоготипРазмерПроцентОтШК = ?(Картинка = Неопределено, 0, 30);
	ПараметрыГенерации.Штрихкод = QRКод;
	ПараметрыГенерации.УровеньКоррекцииQR = 3;
	
	Результат = ГенерацияШтрихкода.ИзображениеШтрихкода(
		ПараметрыГенерации);
	
	Возврат Результат.ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Определяет по коду состояния и коду ошибки сервиса тип ошибки для потребителей.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса;
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния) Экспорт
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 404
		Или КодСостояния = 422 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "ОтсутствуетДоступКСервису";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию
//              ИнтеграцияСПлатежнымиСистемамиСлужебный.ПереопределитьКодОшибкиСервиса.
//  ТелоJSON  - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки, ТелоJSON = "") Экспорт
	
	КодОшибкиСервиса = "";
	Если ЗначениеЗаполнено(ТелоJSON) Тогда
		КодОшибкиСервиса = ОпределитьКодОшибкиСервиса(ТелоJSON);
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И ЭтоОшибкаНеВерныйЗапросПлатежнойСистемы(КодОшибкиСервиса) Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к платежной системе.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "NOT_FOUND_PAYMENT" Тогда
		Возврат НСтр("ru = 'Оплата в платежной системе не обнаружена.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "LOW_AMOUNT_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма оплаты меньше допустимой.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "HIGH_AMOUNT_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма оплаты превышает допустимую.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "ORDER_NOT_PAID_PAYMENT" Тогда
		Возврат НСтр("ru = 'Заказ не оплачен в платежной системе.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "EXCEEDED_AMOUNT_REFUND_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма возврата превышает сумму оплаты.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И ЭтоОшибкаУжеОплаченПлатежнойСистемы(КодОшибкиСервиса) Тогда
		// Уточнение кода ошибки повторной оплаты заказа на оплату.
		КодОшибки = КодОшибкиУжеОплачен();
		Возврат НСтр("ru = 'Оплата по документу уже выполнена в платежной системе.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибки = "ORDER_ALREADY_REFUNDED_PAYMENT" Тогда
		// Уточнение кода ошибки для операции возврата.
		КодОшибки = КодОшибкиВозвратУжеВыполнен();
		Возврат НСтр("ru = 'По оплате в платежной системе уже выполнен возврат.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "CANCEL_NOT_AVAILABLE_PAYMENT" Тогда
		// Уточнение кода ошибки для ошибки отмена оплаты.
		КодОшибки = "ОтменаНеДоступна";
		Возврат НСтр("ru = 'Отмена не доступна. Оплата уже не активна в платежной системе.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "REVERSE_UNAVAILABLE__PAYMENT" Тогда
		// Уточнение кода ошибки для ошибки отмена оплаты.
		КодОшибки = "ОтменаНеДоступна";
		Возврат НСтр("ru = 'Отмена не доступна. Для отмены операции необходимо выполнить возврат.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "USER_NAME_IS_ALREADY_USED_PAYMENT" Тогда
		Возврат НСтр("ru = 'Такой логин уже используется, выберите другой.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_REFUND_DESTINATION_MEMBER_ID_1C" Тогда
		Возврат НСтр("ru = 'Неверный идентификатор платежной системы.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_PROGRAM" Тогда
		Возврат НСтр("ru = 'Неизвестный идентификатор программы. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "INTEGRATION_IS_NOT_SUPPORTED_1C" Тогда
		Возврат НСтр("ru = 'Интеграция с банком не поддерживается. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_MERCHANT" Тогда
		Возврат НСтр("ru = 'Идентификатор мерчанта не обнаружен. Проверьте настройки подключения.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
			И КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
			И ЭтоОшибкаАутентификацииПлатежнойСистемы(КодОшибкиСервиса) Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации в сервисе банка.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
			Возврат НСтр("ru = 'Ошибка авторизации. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "USER_AUTHORISATION_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
			И ЭтоОшибкаАвторизацииПлатежнойСистемы(КодОшибкиСервиса) Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису платежной системы.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
			И КодОшибкиСервиса = "MERCHANT_NOT_ACTIVE" Тогда
		Возврат НСтр("ru = 'Торговая точка не активна или находится в процессе регистрации в Системе быстрых платежей. Статус подключения необходимо уточнить у банка или платежного агрегатора, с которым заключен договор.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS_1C" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису 1С с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток"
			И ЭтоОшибкаСлишкомМногоПовторовПлатежнойСистемы(КодОшибкиСервиса) Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису платежной системы с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	КонецЕсли;
	
	Если КодОшибки = "СервисВременноНеДоступен"
		И КодОшибкиСервиса = "SERVICE_UNAVAILABLE_PAYMENT" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису платежной системы.
			|Сервис временно недоступен. Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Портала 1С:ИТС. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	КонецЕсли;
	
	Если КодОшибки = "ОшибкаСервиса" И КодОшибкиСервиса = "UNKNOWN_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Сервис банка вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" И КодОшибкиСервиса = "UNKNOWN_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Шлюз сервиса интеграции с платежными системами вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" И КодОшибкиСервиса = "BACKEND_CONNECTION_ERROR" Тогда
		Возврат НСтр("ru = 'Сервис банка не ответил в установленное время. Повторите операцию или обратитесь в техническую поддержку банка.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом Системы быстрых платежей.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Системы быстрых платежей.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
КонецФункции

// Производит чтение кода ошибки сервиса из тела ответа.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ОпределитьКодОшибкиСервиса(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  {
	//  "type": "string",
	//  "title": "string",
	//  "status": "string",
	//  "detail": "string",
	//  "instance": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		Возврат Результат.type;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Возвращает код ошибки "УжеОплачен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиУжеОплачен() Экспорт
	
	Возврат "УжеОплачен";
	
КонецФункции

// Возвращает код ошибки "ВозвратУжеВыполнен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиВозвратУжеВыполнен()
	
	Возврат "УжеОплачен";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль() Экспорт
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Проверяет код ошибки платежной системы.
//
// Возвращаемое значение:
//  Булево - был передан код ошибки аутентификации.
//
Функция ЭтоОшибкаАутентификацииПлатежнойСистемы(КодОшибкиСервиса)
	
	Возврат (КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_PAYMENT"
		Или КодОшибкиСервиса = "BAD_CREDENTIALS");
	
КонецФункции

// Проверяет код ошибки платежной системы.
//
// Возвращаемое значение:
//  Булево - был передан код ошибки авторизации.
//
Функция ЭтоОшибкаАвторизацииПлатежнойСистемы(КодОшибкиСервиса)
	
	Возврат (КодОшибкиСервиса = "USER_AUTHORISATION_EXCEPTION_PAYMENT"
		Или КодОшибкиСервиса = "AUTHORIZATION_EXCEPTION");
	
КонецФункции

// Проверяет код ошибки платежной системы.
//
// Возвращаемое значение:
//  Булево - был передан код ошибки превышено количество запросов.
//
Функция ЭтоОшибкаСлишкомМногоПовторовПлатежнойСистемы(КодОшибкиСервиса)
	
	Возврат (КодОшибкиСервиса = "TOO_MANY_REQUESTS_PAYMENT"
		Или КодОшибкиСервиса = "TOO_MANY_REQUESTS");
	
КонецФункции

// Проверяет код ошибки платежной системы.
//
// Возвращаемое значение:
//  Булево - был передан код ошибки не верный формат запроса.
//
Функция ЭтоОшибкаНеВерныйЗапросПлатежнойСистемы(КодОшибкиСервиса)
	
	Возврат (КодОшибкиСервиса = "BAD_REQUEST"
		Или КодОшибкиСервиса = "BAD_REQUEST_PAYMENT")
	
КонецФункции

// Проверяет код ошибки платежной системы.
//
// Возвращаемое значение:
//  Булево - был передан код ошибки заказ уже оплачен.
//
Функция ЭтоОшибкаУжеОплаченПлатежнойСистемы(КодОшибкиСервиса)
	
	Возврат (КодОшибкиСервиса = "ORDER_ALREADY_EXISTS_PAYMENT"
		Или КодОшибкиСервиса = "ALREADY_COMPLETED");
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Возвращает описание настроек использования подсистемы ШаблоныСообщений.
//
// Возвращаемое значение:
//  Структура - содержит описание настроек использования подсистемы ШаблоныСообщений.
//   * Существует - Булево - признак существования подсистемы ШаблоныСообщений в составе конфигурации;
//   * Используется - Булево - признак включения функциональной опции использования шаблонов сообщений.
//
Функция НастройкиШаблоновСообщений() Экспорт
	
	Настройки = Новый Структура;
	
	ЕстьШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
	ИспользуютсяШаблоныСообщений = Ложь;
	Если ЕстьШаблоныСообщений Тогда
		МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
		ИспользуютсяШаблоныСообщений = МодульШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений();
	КонецЕсли;
	
	Настройки.Вставить("Существует", ЕстьШаблоныСообщений);
	Настройки.Вставить("Используется", ИспользуютсяШаблоныСообщений);
	
	Возврат Настройки;
	
КонецФункции

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Возвращаемое значение:
// См. СоздатьПредопределенныеШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем() Экспорт
	
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	ЕстьОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	Возврат СоздатьПредопределенныеШаблоныСообщений(ЕстьОтправкаПисем, ЕстьОтправкаSMS);
	
КонецФункции

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Параметры:
//  СоздатьШаблоныПисем - Булево - признак создания шаблонов сообщений для электронной почты.
//  СоздатьШаблоныСМС - Булево - признак создания шаблонов сообщений СМС.
//
// Возвращаемое значение:
//  Массив - Массив созданных предопределенных шаблонов,
//    элементами массива являются ссылки на справочник ШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщений(СоздатьШаблоныПисем, СоздатьШаблоныСМС) Экспорт
	
	МассивСозданныхШаблонов = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	МассивПредопределенныхШаблоновСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(МассивПредопределенныхШаблоновСообщений);
	
	Если Не МассивПредопределенныхШаблоновСообщений.Количество() Тогда 
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	СоответствиеШаблоновДокументамОперации = ШаблоныСообщенийДокументовОперации();
	
	Для Каждого Шаблон Из МассивПредопределенныхШаблоновСообщений Цикл 
		
		Если Не Шаблон.Свойство("ТипШаблона") Тогда
			Продолжить;
		ИначеЕсли Врег(Шаблон.ТипШаблона) <> Врег("SMS") И Врег(Шаблон.ТипШаблона) <> Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныПисем И Врег(Шаблон.ТипШаблона) = Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныСМС И Врег(Шаблон.ТипШаблона) = Врег("SMS") Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон,
			СоответствиеШаблоновДокументамОперации);
		
		Если ШаблонСообщенийСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыШаблона,
				Шаблон,
				Истина);
			
			ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(
				Шаблон.Наименование,
				ПараметрыШаблона);
			
			МассивСозданныхШаблонов.Добавить(ШаблонСообщенийСсылка);
			
		КонецЕсли;
		
		СоответствиеШаблоновДокументамОперации[Шаблон.ТипШаблона].Вставить(
			Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСообщенийСсылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	УстановитьСоответствиеШаблоновДокументамОперации(
		СоответствиеШаблоновДокументамОперации);
	
	Возврат МассивСозданныхШаблонов;
	
КонецФункции

// Возвращает признак создания всех описанных шаблонов.
//
// Возвращаемое значение:
//  Булево - Истина, если все описанные шаблоны созданы.
//
Функция ВсеШаблоныСозданы() Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеШаблоны", Истина);
	Результат.Вставить("Письмо", Истина);
	Результат.Вставить("SMS", Истина);
	
	МассивШаблонов = Новый Массив;
	СоответствиеШаблонов = ШаблоныСообщенийДокументовОперации();
	
	МассивПредопределенныхШаблоновСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(МассивПредопределенныхШаблоновСообщений);
	
	Для Каждого Шаблон Из МассивПредопределенныхШаблоновСообщений Цикл 
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, СоответствиеШаблонов);
		Если СозданныйШаблон.Пустая() Тогда 
			Результат.ВсеШаблоны = Ложь;
			Результат[Шаблон.ТипШаблона] = Ложь;
		Иначе
			МассивШаблонов.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("МассивШаблонов", МассивШаблонов);
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие, содержащее сохраненные предопределенные шаблоны сообщений подсистемы по типу отправки.
//
// Возвращаемое значение:
//  Соответствие - результат создания заказа на оплату в платежной системе:
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Функция ШаблоныСообщенийДокументовОперации()
	
	СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщенийСБП.Получить().Получить();
	
	Если СоответствиеШаблонов = Неопределено Тогда
		СоответствиеШаблонов = Новый Соответствие;
		СоответствиеШаблонов.Вставить("Письмо", Новый Соответствие);
		СоответствиеШаблонов.Вставить("SMS", Новый Соответствие);
	КонецЕсли;
	
	Возврат СоответствиеШаблонов;
	
КонецФункции

// Записывает соответствие предопределенных шаблонов подсистемы в соответствующую константу.
//
// Параметры:
//  СоответствиеШаблонов - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Процедура УстановитьСоответствиеШаблоновДокументамОперации(СоответствиеШаблонов)
	
	Константы.ПредопределенныеШаблоныСообщенийСБП.Установить(Новый ХранилищеЗначения(СоответствиеШаблонов));
	
КонецПроцедуры

// Возвращает ссылку на элемент справочника ШаблоныСообщений по переданным параметрам.
//
// Параметры:
//  Шаблон - Структура - описание искомого шаблона:
//    * ПолноеИмяТипаНазначения - Строка - содержит полное имя типа назначения шаблона;
//    * ТипШаблона - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//  СоответствиеШаблоновДокументамОперации - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами - результат поиска, 
//    пустая ссылка, если по данной структуре шаблон не найден.
//
Функция НайтиПредопределенныйШаблонСообщений(Шаблон, СоответствиеШаблоновДокументамОперации)
	
	МенеджерШаблоновСообщений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ШаблоныСообщений");
	
	ШаблонСсылка = МенеджерШаблоновСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона = 
		СоответствиеШаблоновДокументамОперации[Шаблон.ТипШаблона].Получить(Шаблон.ПолноеИмяТипаНазначения);
		
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = МенеджерШаблоновСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НайденныйШаблон,
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(ПредопределенныеШаблоныСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(ПредопределенныеШаблоныСообщений);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		ПредопределенныеШаблоныСообщений);
	
КонецПроцедуры

// Включает функциональные опции необходимые для работы с шаблонами сообщений.
Процедура УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
	
КонецПроцедуры

// Создает описание параметров отправки сообщений.
//
// Возвращаемое значение:
//  Структура - описание параметров отправки сообщений:
//    * ПараметрыОтправкиПисем - Структура - описание отправки электронных писем.
//       ** ОтправлятьПисьмаВФорматеHTML - Неопределено - признак отправки электронных писем в формате HTML.
//
Функция НовыйПараметрыОтправкиСообщений()
	
	ПараметрыОтправкиСообщений = Новый Структура;
	
	ПараметрыОтправкиПисем = Новый Структура;
	ПараметрыОтправкиПисем.Вставить("ОтправлятьПисьмаВФорматеHTML", Неопределено);
	
	ПараметрыОтправкиСообщений.Вставить("ПараметрыОтправкиПисем", ПараметрыОтправкиПисем);
	
	Возврат ПараметрыОтправкиСообщений;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийCБП
//
Процедура ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровОтправкиСообщенийCБП(ПараметрыОтправкиСообщений);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийCБП(
		ПараметрыОтправкиСообщений);
	
КонецПроцедуры

// Возвращает признак отправки писем с использованием шаблонов СБП в формате HTML.
//
// Возвращаемое значение:
//  Булево - признак отправки писем с использованием шаблонов СБП в формате HTML.
//
Функция ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений)
	
	Попытка
		ОтправлятьПисьмаВФорматеHTML = ПараметрыОтправкиСообщений.ПараметрыОтправкиПисем.ОтправлятьПисьмаВФорматеHTML;
	Исключение
		ВызватьИсключение НСтр("ru = 'Нарушение структуры параметров отправки сообщений в переопределяемом методе
			|ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийCБП'");
	КонецПопытки;
	
	Если ОтправлятьПисьмаВФорматеHTML = Неопределено Тогда
		Возврат ИнтернетПоддержкаПользователей.ОтправлятьПисьмаВФорматеHTML();
	Иначе
		Возврат ОтправлятьПисьмаВФорматеHTML;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

// Возвращает полные имена объектов метаданных, которые могут выступать в качестве оснований платежа через СБП.
//
// Возвращаемое значение:
//  Массив Из Строка - имена объектов метаданных оснований платежа.
//
Функция ПолучитьИменаДокументовОперации()
	
	ИменаДокументовОперации = Новый Массив;
	ИнтеграцияПодсистемБИП.ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации);
	
	Возврат ИменаДокументовОперации;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаПлатежнойСсылки

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, по данным которого
//    необходимо проверить доступность настройки интеграции СБП.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * ИнтеграцияДоступна - Булево - признак доступности интеграции.
//    * СообщениеОбОшибке - Строка - текст сообщения ошибки для пользователя.
//
Функция ПриОпределенииДоступностиИнтеграцииПоДокументуОперации(ДокументОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИнтеграцияДоступна", Истина);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ИнтеграцияПодсистемБИП.ПриОпределенииДоступностиИнтеграцииПоДокументуОперации(
		ДокументОперации,
		Результат);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииДоступностиИнтеграцииПоДокументуОперации(
		ДокументОперации,
		Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииБИП - документ, по данным которого
//    необходимо получить перечень возможных торговых точек.
//
// Возвращаемое значение:
// Структура:
//    * ПереченьТорговыхТочек - Массив Из СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//      настройка интеграции с платежной системой.
//    * НастройкиПодключения - Структура - дополнительные настройки подключения СБП
//      ** БИК - Строка, Неопределено - идентификатор банка. Используется для автоматического
//         выбора участника СБП.
//      ** ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры подключения.
//         Значение будет передано в переопределяемые методы:
//           - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриЗаполненииФормыИнтеграции;
//           - ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриНастройкеЭлементовФормыИнтеграции.
//      ** ОтборУчастников - Строка, Неопределено - Параметры отбора участников СБП.
//         Допустимые значения - "Банки", "ПлатежныеАгрегаторы", "КассовыеСсылки", Неопределено.
//         Неопределено по умолчанию.
//    * ТекстВопроса - Строка, Неопределено - текст вопроса, который будет выведен пользователю
//         перед началом формирования платежной ссылки или началом подключения к СБП.
//         Вопрос не выводится, если параметр имеет значение Неопределено.
//
Функция ПриОпределенииПараметровИнтеграцииДокументаОперации(ДокументОперации) Экспорт
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("БИК", Неопределено);
	НастройкиПодключения.Вставить("ОтборУчастников", Неопределено);
	НастройкиПодключения.Вставить("ДополнительныеПараметры", Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("ПереченьТорговыхТочек", Новый Массив);
	Результат.Вставить("НастройкиПодключения", НастройкиПодключения);
	Результат.Вставить("ТекстВопроса", Неопределено);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровИнтеграцииДокументаОперации(
		ДокументОперации,
		Результат.ПереченьТорговыхТочек,
		Результат.НастройкиПодключения,
		Результат.ТекстВопроса);
	ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПараметровИнтеграцииДокументаОперации(
		ДокументОперации,
		Результат.ПереченьТорговыхТочек,
		Результат.НастройкиПодключения,
		Результат.ТекстВопроса);
	
	Возврат Результат;
	
КонецФункции

// Выполняет актуализацию статуса оплаты в платежной системе по ранее
// сформированному идентификатору оплаты (QR-коду).
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииБИП - документ, который отражает
//    продажу в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//    настройка выполнения оплаты;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы операции по документу;
//    * ИдентификаторПлатежнойСистемы - Строка - ключ контроля загрузки;
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в платежной системе:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      ИнтеграцияСПлатежнымиСистемамиКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты от платежной системы не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - платежная система подтвердила оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** QRКод- Строка - идентификатор, по которому выполняется оплата;
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** Идентификатор - Строка - идентификатор операции в платежной системе;
//        ** НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//             в момент сканирования QR-кода в мобильном приложении;
//        ** СтатусОперации - Строка - текущий статус операции;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОплаты - Строка - ключ контроля загрузки;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//          интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция АктуализироватьСтатусОплаты(ДокументОплаты, ТорговаяТочка, ПараметрыОперации) Экспорт
	
	РезультатОперации = ИнтеграцияСПлатежнымиСистемами.СтатусОплаты(
		ДокументОплаты,
		ТорговаяТочка,
		Ложь);
	РезультатОперации.Вставить("НеобходимоАктуализировать", Ложь);
		
	Если РезультатОперации.СтатусОперации <> ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется()
			И РезультатОперации.СтатусОперации <> ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОшибка() Тогда
		
		// Изменился статус операции, необходима обработка, выполним в попытке
		Попытка
			
			СтатусОперации = РезультатОперации.СтатусОперации;
			Если СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполнена() Тогда
				СтатусОперацииСервиса = СервисИнтеграцииССБП.ИдентификаторСтатусаВыполнена();
			ИначеЕсли СтатусОперации = ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииОтменена() Тогда
				СтатусОперацииСервиса = СервисИнтеграцииССБП.ИдентификаторСтатусаОтменена();
			Иначе
				РезультатОперации.КодОшибки = "НеизвестнаяОшибка";
				РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Неизвестный статус операции сервиса'");
				РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Неизвестный статус операции сервиса'");
			КонецЕсли;
			
			СервисИнтеграцииССБП.ПриЗагрузкеСтатусаОперации(
				ДокументОплаты,
				ПараметрыОперации,
				СтатусОперацииСервиса,
				РезультатОперации.СообщениеОбОшибке,
				Новый Массив);
			
		Исключение
			// Исключение не обрабатываем, ожидаем что документы прикладной логики обработаются методом СтатусыОперацийC2B
			ЗаписатьИнформациюВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				Истина);
		КонецПопытки;
		
		РезультатОперации.Вставить("QRКод", ПараметрыОперации.QRКод);
		
	ИначеЕсли РезультатОперации.СтатусОперации = 
		ИнтеграцияСПлатежнымиСистемамиКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		// Проверка изменился ли документ оплаты
		ЗаказНаОплату = СервисИнтеграцииССБП.СформироватьДанныеЗаказаНаОплатуПоДокументуОперации(
			ДокументОплаты,
			ТорговаяТочка,
			Неопределено,
			РезультатОперации);
			
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			Возврат РезультатОперации;
		КонецЕсли;
		
		ПараметрыИнтеграции = ПараметрыИнтеграции(ТорговаяТочка);
		ПараметрыОперации.Вставить("ТорговаяТочка", ПараметрыИнтеграции.ТорговаяТочка);
		
		АнализИсторическихДанных = СервисИнтеграцииССБП.АнализИсторическихДанныхОплаты(
			ДокументОплаты,
			ЗаказНаОплату,
			"",
			ПараметрыОперации.Идентификатор,
			ПараметрыОперации);
			
		Если Не АнализИсторическихДанных.ДанныеИдентичны Тогда
			РезультатОперации.Вставить("НеобходимоАктуализировать", Истина);
		КонецЕсли;
		
		РезультатОперации.Вставить("QRКод", ПараметрыОперации.QRКод);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область СохранениеНастроекСБП

// См. ИнтеграцияСПлатежнымиСистемами.ПараметрыПодключенияПоУчастникуСБП
//
Функция ПараметрыПодключенияПоУчастникуСБП(ИдентификаторУчастникаСБП) Экспорт
	
	КоллекцияРеквизитов = Метаданные.Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.Реквизиты;
	ПараметрыИнтеграции = Новый Массив;
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если Реквизит.Имя = "ТорговаяТочка" Или Реквизит.Имя = "ПлатежнаяСистема" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРеквизита = НовыйРасширенноеОписаниеРеквизита(
			Реквизит.Имя,
			Реквизит.Тип,
			Реквизит.Синоним,
			(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
			Реквизит.ПараметрыВыбора,
			Реквизит.СвязиПараметровВыбора);
		
		СтруктураРеквизита.Вставить("Значение", Реквизит.Тип.ПривестиЗначение());
		СтруктураРеквизита.Вставить(
			"ДляГруппы",
			?(Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы, Истина, Ложь));
		
		ПараметрыИнтеграции.Добавить(СтруктураРеквизита);
		
	КонецЦикла;
	
	СтруктураНаименования = НовыйРасширенноеОписаниеРеквизита(
		"Наименование",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(Метаданные.Справочники.НастройкиИнтеграцииСПлатежнымиСистемами.ДлинаНаименования)),
		НСтр("ru = 'Наименование'"),
		Истина,
		Неопределено,
		Неопределено);
	СтруктураНаименования.Вставить("Значение", "");
	СтруктураНаименования.Вставить("ДляГруппы", Ложь);
	
	ПараметрыИнтеграции.Добавить(СтруктураНаименования);
	
	СтруктураИдентификаторПлатежнойСистемы = НовыйРасширенноеОписаниеРеквизита(
		"ИдентификаторПлатежнойСистемы",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),
		НСтр("ru = 'Идентификатор платежной системы'"),
		Истина,
		Неопределено,
		Неопределено);
	СтруктураИдентификаторПлатежнойСистемы.Вставить("Значение", "");
	СтруктураИдентификаторПлатежнойСистемы.Вставить("ДляГруппы", Истина);
	
	ПараметрыИнтеграции.Добавить(СтруктураИдентификаторПлатежнойСистемы);
	
	// параметры оплат
	НастройкиИнтеграции = НастройкиИнтеграцииПрограммы();
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиИнтеграции);
	
	ПараметрыОплаты = Новый Массив;
	
	Для Каждого АтрибутОплаты Из АтрибутыОплат Цикл
		Если АтрибутОплаты.ТорговаяТочка Тогда
			Продолжить;
		КонецЕсли;
		
		АтрибутОплаты.Вставить("Значение", АтрибутОплаты.Тип.ПривестиЗначение());
		
		// Значения в структуре затираются, чтобы не провоцировать ошибку
		// сериализации значений формы.
		ПустойМассив = Новый Массив;
		АтрибутОплаты.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПустойМассив);
		АтрибутОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПустойМассив);
		
		ПараметрыОплаты.Добавить(АтрибутОплаты);
		
	КонецЦикла;
	
	// параметры аутентификации
	ПараметрыАутентификации = Новый Массив;
	НастройкиАутентификации = НовыйНастройкиАутентификации(
		СервисИнтеграцииССБП.УчастникСБППоИдентификатору(ИдентификаторУчастникаСБП));
	
	Для Каждого Реквизит Из НастройкиАутентификации.Реквизиты Цикл
		СтруктураРеквизита = НовыйОписаниеРеквизита(
			Реквизит.Имя,
			Реквизит.Тип,
			Реквизит.Синоним,
			(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
			Реквизит.РежимПароля,
			Реквизит.Подсказка);
			
		СтруктураРеквизита.Вставить("Значение", Реквизит.Тип.ПривестиЗначение());
		
		ПараметрыАутентификации.Добавить(СтруктураРеквизита);
		
	КонецЦикла;
	
	Возврат Новый Структура(
		"ПараметрыИнтеграции,
		|ПараметрыОплаты,
		|ПараметрыАутентификации",
		ПараметрыИнтеграции,
		ПараметрыОплаты,
		ПараметрыАутентификации)
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемами.ПараметрыПодключенияПоНастройке
//
Функция ПараметрыПодключенияПоНастройке(НастройкаИнтеграции) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаИнтеграции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры интеграции
	ЗапросЗначенийРеквизитов = Новый Запрос;
	ЗапросЗначенийРеквизитов.Текст = 
	"ВЫБРАТЬ
	|	*,
	|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.Идентификатор КАК Идентификатор,
	|	"""" КАК ИдентификаторПлатежнойСистемы,
	|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель.ПлатежнаяСистема КАК ПлатежнаяСистема,
	|	НастройкиИнтеграцииСПлатежнымиСистемами.Родитель КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.НастройкиИнтеграцииСПлатежнымиСистемами КАК НастройкиИнтеграцииСПлатежнымиСистемами
	|ГДЕ
	|	НастройкиИнтеграцииСПлатежнымиСистемами.Ссылка = &Ссылка";
	
	ЗапросЗначенийРеквизитов.УстановитьПараметр("Ссылка", НастройкаИнтеграции);
	
	ВыборкаЗначенийРеквизитов = ЗапросЗначенийРеквизитов.Выполнить().Выбрать();
	
	Если ВыборкаЗначенийРеквизитов.Следующий() Тогда
		ПлатежнаяСистема = ВыборкаЗначенийРеквизитов.ПлатежнаяСистема;
		ИдентификаторПлатежнойСистемы = СервисИнтеграцииССБП.ИдентификаторУчастникаСБП(ПлатежнаяСистема, Ложь);
		ПараметрыПодключения = ПараметрыПодключенияПоУчастникуСБП(ИдентификаторПлатежнойСистемы);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ПараметрИнтеграции Из ПараметрыПодключения.ПараметрыИнтеграции Цикл
		Если ПараметрИнтеграции.Имя = "ИдентификаторПлатежнойСистемы" Тогда
			ПараметрИнтеграции.Значение = ИдентификаторПлатежнойСистемы;
		Иначе
			ПараметрИнтеграции.Значение = ВыборкаЗначенийРеквизитов[ПараметрИнтеграции.Имя];
		КонецЕсли;
	КонецЦикла;
	
	// Параметры оплат
	НастройкиИнтеграции = НастройкиИнтеграцииПрограммы();
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиИнтеграции);
	
	ЗначенияНастроек = ЗначенияНастроекОплаты(
		АтрибутыОплат,
		НастройкиИнтеграции.ОбъектМетаданных,
		НастройкаИнтеграции);
		
	Для Каждого ПараметрОплаты Из ПараметрыПодключения.ПараметрыОплаты Цикл
		ПараметрОплаты.Значение = ЗначенияНастроек[ПараметрОплаты.Имя];
	КонецЦикла;
	
	// параметры аутентификации
	ЗначениеПараметровАутентификации = ЗначениеНастроекАутентификации(НастройкаИнтеграции, ПлатежнаяСистема);
		
	Если ЗначениеЗаполнено(ЗначениеПараметровАутентификации) Тогда
		Для Каждого ПараметрАутентификации Из ПараметрыПодключения.ПараметрыАутентификации Цикл
			ПараметрАутентификации.Значение = 
				ЗначениеПараметровАутентификации.Получить(ПараметрАутентификации.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

#КонецОбласти

#Область ПечатныеФормы

// См. ИнтеграцияСПлатежнымиСистемами.СформироватьКарточкуКассовойСсылки
Функция СформироватьКарточкуКассовойСсылки(ДанныеСсылки, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		ВызватьИсключение НСтр("ru = 'Не внедрена подсистема ""Печать"".'");
	КонецЕсли;
	МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	
	Если Не ПараметрыПечати.Свойство("ТипПечати") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен тип печати кассовой ссылки.'"));
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Если Не ДанныеСсылки.Свойство("КассоваяСсылка")
		Или ПустаяСтрока(ДанныеСсылки.КассоваяСсылка) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнены данные кассовой ссылки.'"));
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Если ПараметрыПечати.ТипПечати = 1 Тогда
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПФ_MXL_КассоваяСсылкаА5Широкий");
	ИначеЕсли ПараметрыПечати.ТипПечати = 2 Тогда
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПФ_MXL_КассоваяСсылкаА5ТолькоЛого");
	ИначеЕсли ПараметрыПечати.ТипПечати = 3 Тогда
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПФ_MXL_КассоваяСсылкаА5Узкий");
	ИначеЕсли ПараметрыПечати.ТипПечати = 4 Тогда
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПФ_MXL_КассоваяСсылкаА5УзкийГоризонтальный");
	ИначеЕсли ПараметрыПечати.ТипПечати = 5 Тогда
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПФ_MXL_КассоваяСсылкаА6Квадратный");
	ИначеЕсли ПараметрыПечати.ТипПечати = 6 Тогда
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы(
			"Справочник.НастройкиИнтеграцииСПлатежнымиСистемами.ПФ_MXL_КассоваяСсылкаА6Круглый");
	Иначе
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ДанныеQRКода = ИзображениеQRКодa(ДанныеСсылки.КассоваяСсылка,300);
	Макет.Рисунки.КассоваяСсылка.Картинка = Новый Картинка(ДанныеQRКода);
	
	ТабличныйДокумент.Вывести(Макет);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Проверка принадлежности платежной системе к СБП.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.ПлатежныеСистемы - платежная система для проверки.
//
// Возвращаемое значение:
//  Булево - если Истина, платежная система входит в состав СБП.
//
Функция ЭтоПлатежнаяСистемаСБП(ПлатежнаяСистема) Экспорт
	
	Возврат ЗначениеЗаполнено(ПлатежнаяСистема)
		И ПлатежнаяСистема <> ПредопределенноеЗначение("Перечисление.ПлатежныеСистемы.SWiP");
	
КонецФункции

// Определяет идентификатор группы платежных систем SWiP.
//
// Возвращаемое значение:
//  Строка - внутренний идентификатор платежной системы SWiP.
//
Функция ИдентификаторSWiP()
	
	Возврат "swip";
	
КонецФункции

// Определяет идентификатор группы платежных систем СБП.
//
// Возвращаемое значение:
//  Строка - внутренний идентификатор платежной системы СБП.
//
Функция ИдентификаторСБП() Экспорт
	
	Возврат "sbp";
	
КонецФункции

// Определяет идентификатор поставляемых данных.
//
// Возвращаемое значение:
//  Строка - идентификатор поставляемых данных.
//
Функция ВидПоставляемыхДанныхПлатежныеСистемы()
	
	Возврат "SBPIdentifiers";
	
КонецФункции

// Обрабатывает значение для отправки в службу тех поддержки.
//
// Параметры:
//  Значение - Строка, Дата - данные для обработки.
//
// Возвращаемое значение:
//  Строка - подготовленные данные.
//
Функция ОбработатьЗначениеДляТехническойПоддержки(Значение) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Значение), " " + Значение, " " + НСтр("ru = '<не заполнено>'"));
	
КонецФункции

// Получает синоним значения перечисления.
//
// Параметры:
//  ПеречислениеСсылка - ПеречислениеСсылка - значение перечисления.
//
// Возвращаемое значение:
//  Строка - синоним значения перечисления.
//
Функция СинонимЗначенияПеречисления(ПеречислениеСсылка) Экспорт
	
	ОбъектМетаданных = ПеречислениеСсылка.Метаданные();
	Индекс = Перечисления[ОбъектМетаданных.Имя].Индекс(ПеречислениеСсылка);
	Возврат ОбъектМетаданных.ЗначенияПеречисления[Индекс].Синоним;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Переводы СБП'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Проверяет является ли объект основанием платежа через СБП.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Строка - ссылка на объект или полное имя объекта метаданных для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является основанием платежа, иначе Ложь.
//
Функция ЭтоДокументОперацииСБП(Знач Объект)
	
	ПолноеИмя = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		
		ПолноеИмя = Объект;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаДокументовОперации = ПолучитьИменаДокументовОперации();
	
	Возврат (ИменаДокументовОперации.Найти(ПолноеИмя) <> Неопределено);
	
КонецФункции

#КонецОбласти

#КонецОбласти

