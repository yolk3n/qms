
#Область СлужебныеПроцедурыИФункции

#Область УстановкаСертификата

Процедура УстановитьКорневойСертификатГУЦ(АдресСертификата, ОтпечатокСертификата = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Контекст.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ТекстВопроса = НСтр("ru = 'После нажатия кнопки ""ОК"" начнется загрузка и установка с сайта Головного удостоверяющего центра в доверенное хранилище
	|операционной системы корневого сертификата Минкомсвязи России. Убедитесь в подлинности сертификата, сравните отпечаток,
	|который будет отображен в окне предупреждения о безопасности, с <a href = ""https://e-trust.gosuslugi.ru/#/portal/mainca"">информацией</a>,
	|опубликованной на портале уполномоченного федерального органа в области электронной подписи.'");
	
	Если ВозможенЗапросДополнительныхРазрешений() Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'При установке сертификата браузер может запросить дополнительные разрешения.'");
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстВопроса);
	Оповещение = Новый ОписаниеОповещения("ВопросУстановкаКорневогоСертификатаЗавершение", ЭтотОбъект, Контекст);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, НСтр("ru = 'Установка корневого сертификата'"));
	
КонецПроцедуры

Процедура ВопросУстановкаКорневогоСертификатаЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		УстановитьСертификат(Контекст.АдресСертификата, Контекст.ОтпечатокСертификата);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификат(АдресСертификата, ОтпечатокСертификата = Неопределено) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСертификатПослеСохраненияВФайл", ЭтотОбъект);
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
	Контекст.Вставить("ОписаниеОшибки", "");
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Контекст.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	Контекст.Вставить("НазначениеРасширенияДляРаботыСФайлами",
		НСтр("ru = 'Для установки сертификата на компьютер требуется
			           |установить расширение для веб-клиента 1С:Предприятия.'"));
	Контекст.Вставить("НазначениеВнешнейКомпонентыКриптографии",
		НСтр("ru = 'Для установки сертификата сертификата требуется
					|внешняя компонента «Криптография (CryptS)».'"));
	СоздатьОбъектКриптографииИСохранитьСертификатВФайл(Контекст);
	
КонецПроцедуры

Процедура УстановитьСертификатПослеСохраненияВФайл(РезультатСохранения, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановкаСертификатаЗавершение", ЭтотОбъект);
	РезультатСохранения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Если Не РезультатСохранения.Результат Тогда
		Возврат;
	КонецЕсли;
	РезультатСохранения.Криптография.НачатьВызовИмпортироватьСертификат(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеВызоваИмпортироватьСертификат", ЭтотОбъект, РезультатСохранения,
			"УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат", ЭтотОбъект),
		РезультатСохранения.ИмяФайла, "ROOT");
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Контекст.Криптография = Неопределено;
	
	Контекст.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить корневой сертификат в хранилище ОС по причине:
		           |%1'"),
		ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
	
	Контекст.Вставить("РезультатПослеВызоваИмпортироватьСертификат", Неопределено);
	УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(Неопределено, Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеВызоваИмпортироватьСертификат(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Контекст.Вставить("РезультатПослеВызоваИмпортироватьСертификат", Результат);
	
	Контекст.Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = Контекст.РезультатПослеВызоваИмпортироватьСертификат;
	
	АктивноеОкно().Активизировать();
	
	Если Результат <> Истина И Не ЗначениеЗаполнено(Контекст.ОписаниеОшибки) Тогда
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не удалось установить корневой сертификат в хранилище ОС.'");
	КонецЕсли;
	
	АктивноеОкно().Активизировать();
	
	Если Контекст.ОтпечатокСертификата = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатПослеИнициализацииСертификата", ЭтотОбъект, Контекст);
		КорневойСертификат = Новый СертификатКриптографии();
		КорневойСертификат.НачатьИнициализацию(Оповещение, Контекст.ИмяФайла);
	Иначе 
		УстановитьСертификатПослеИнициализацииСертификатаНайтиПоОтпечатку(Контекст.ОтпечатокСертификата, Контекст);
	КонецЕсли;
	
КонецПроцедуры 

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеИнициализацииСертификата(КорневойСертификат, Контекст) Экспорт
	
	УстановитьСертификатПослеИнициализацииСертификатаНайтиПоОтпечатку(КорневойСертификат.Отпечаток, Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеИнициализацииСертификатаНайтиПоОтпечатку(Отпечаток, Контекст)
	
	ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеПоискаКорневогоСертификата", ЭтотОбъект, Контекст),
		Base64Строка(Отпечаток),
		Ложь,
		Истина);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеПоискаКорневогоСертификата(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СертификатКриптографии") Тогда
		Если Результат = Неопределено Тогда
			ОшибкаПоиска =
				НСтр("ru = 'Не удалось найти корневой сертификат, установленный на компьютер.'");
		Иначе
			ОшибкаПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти корневой сертификат, установленный на компьютер по причине:
				           |%1'"),
				Результат);
		КонецЕсли;
		Контекст.ОписаниеОшибки = СокрЛ(Контекст.ОписаниеОшибки + Символы.ПС + Символы.ПС) + ОшибкаПоиска;
		УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	Контекст.ОписаниеОшибки = "";
	
	УстановитьСертификатУдалитьВременныйКаталогИЗавершить(
		Не ЗначениеЗаполнено(Контекст.ОписаниеОшибки), Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Результат, Контекст)
	
	Контекст.Вставить("Результат", Результат);
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеУдаленияВременногоКаталога", ЭтотОбъект, Контекст),
		Контекст.ВременныйКаталог);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификатПослеСохраненияВФайл.
Процедура УстановитьСертификатПослеУдаленияВременногоКаталога(Контекст) Экспорт
	
	Если Контекст.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении,
			Новый Структура("Результат, ОписаниеОшибки", Контекст.Результат, Контекст.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаСертификатаЗавершение(РезультатУстановки, Контекст) Экспорт
	
	Если Не РезультатУстановки.Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатУстановки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Сертификат установлен в хранилище операционной системы'"); 
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ПросмотрСертификата

Процедура ПосмотретьСертификат(АдресСертификата) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	Оповещение = Новый ОписаниеОповещения("ПосмотретьСертификатПослеПредупреждения", ЭтотОбъект, Контекст);
	
	Если ВозможенЗапросДополнительныхРазрешений() Тогда
		ПоказатьПредупреждение(Оповещение, НСтр("ru = 'При просмотре сертификата браузер может запросить дополнительные разрешения.'"));
	Иначе 
		ПосмотретьСертификатПослеПредупреждения(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПосмотретьСертификатПослеПредупреждения(Контекст) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьФайл(Контекст.АдресСертификата,,"cer");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССертификатами

Процедура СоздатьОбъектКриптографииИСохранитьСертификатВФайл(Контекст)
	
	СоздатьОбъектКриптографии(Новый ОписаниеОповещения(
			"ДействиеССертификатомПослеСозданияОбъектаКриптографии", ЭтотОбъект, Контекст),
			Контекст.НазначениеРасширенияДляРаботыСФайлами,
			Контекст.НазначениеВнешнейКомпонентыКриптографии);
	
КонецПроцедуры

Процедура СоздатьОбъектКриптографии(ОбработкаПродолжения, НазначениеРасширенияДляРаботыСФайлами, НазначениеВнешнейКомпонентыКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	Контекст.Вставить("НазначениеВнешнейКомпонентыКриптографии", НазначениеВнешнейКомпонентыКриптографии);
	Контекст.Вставить("Криптография", Неопределено);
	Контекст.Вставить("РаботаСДвоичнымиДанными", Неопределено);
	Контекст.Вставить("ОписаниеОшибки", "");
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПодключенияРасширенияРаботыСФайлами",
			ЭтотОбъект, Контекст),
		НазначениеРасширенияДляРаботыСФайлами,
		Ложь);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеПодключенияРасширенияРаботыСФайлами(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения,
			НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = Контекст.НазначениеВнешнейКомпонентыКриптографии;
	// Объект создается на одно действие до исключения, кэширование на время сеанса не подходит.
	ПараметрыПодключения.Кэшировать = Ложь;
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("BinaryDataS");
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("CryptS");
	
	// РаботаСДвоичнымиДанными.
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(
		Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПодключенияКомпоненты",
			ЭтотОбъект, Контекст), Неопределено,
		"Обработка.ДиагностикаЭДО.Макет.КомпонентаОбмена",
		ПараметрыПодключения);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеПодключенияКомпоненты(Результат, Контекст) Экспорт
	
	Если Результат.Подключено Тогда
		Контекст.РаботаСДвоичнымиДанными = Результат.ПодключаемыйМодуль.Получить("BinaryDataS");
		Контекст.Криптография = Результат.ПодключаемыйМодуль.Получить("CryptS");
	Иначе
		Контекст.РаботаСДвоичнымиДанными = Неопределено;
		Контекст.Криптография = Неопределено;
		
		Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			// Пользователь отказался от установки внешней компоненты.
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения,
				НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		Иначе
			ПоказатьПредупреждение(
				Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке", ЭтотОбъект, Контекст),
				Результат.ОписаниеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.Криптография.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеУстановкиНеВыводитьСообщенияОбОшибках", ЭтотОбъект, Контекст),
		Истина);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеУстановкиНеВыводитьСообщенияОбОшибках(Контекст) Экспорт
	
	ОписаниеМенеджераКриптографии = ДиагностикаЭДОКлиентСервер.ОписаниеМенеджераКриптографииWindows();
	
	Контекст.Криптография.НачатьВызовСоздатьМенеджераКриптографии(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографии", ЭтотОбъект, Контекст,
			"СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии", ЭтотОбъект),
		ОписаниеМенеджераКриптографии.ИмяПрограммы,
		ОписаниеМенеджераКриптографии.ПутьКПрограмме,
		ОписаниеМенеджераКриптографии.ТипПрограммы);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке", ЭтотОбъект, Контекст),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Программа электронной подписи не доступна через внешнюю компоненту по причине:
			           |%1'"),
			ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)));
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографии(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Контекст.Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографииПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографииПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = НовыйРезультатСозданияОбъектаКриптографии(Истина);
	ЗаполнитьЗначенияСвойств(РезультатСоздания, Контекст);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатСоздания);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
Процедура СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке(Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, НовыйРезультатСозданияОбъектаКриптографии(Ложь));
	
КонецПроцедуры

Процедура ДействиеССертификатомПослеСозданияОбъектаКриптографии(РезультатСоздания, Контекст) Экспорт
	
	Если РезультатСоздания.Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
			"ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст));
	Иначе 
		Контекст.Вставить("Криптография");
		Контекст.Вставить("РаботаСДвоичнымиДанными");
		ЗаполнитьЗначенияСвойств(Контекст, РезультатСоздания);
		ДействиеССертификатомПослеУспехаСозданияОбъектаКриптографии(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСФайлами(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не установлено расширение для работы с файлами.'");
	Иначе
		НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
			"ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не установлено расширение для работы с криптографией.'");
	Иначе
		Контекст.ОписаниеОшибки = НСтр("ru = 'Не установлена внешняя компонента.'");
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеУспехаСозданияОбъектаКриптографии(Контекст)
	
	ПолучитьКаталогВременныхФайловКомпоненты(Новый ОписаниеОповещения(
		"ДействиеССертификатомПослеПолученияКаталогаВременныхФайловКомпоненты", ЭтотОбъект, Контекст), Контекст);
	
КонецПроцедуры

// Создание каталога временных файлов компоненты ExtIntgr.
Процедура ПолучитьКаталогВременныхФайловКомпоненты(Оповещение, Контекст)
	
	Контекст.Вставить("Оповещение", Оповещение);
	
	Контекст.РаботаСДвоичнымиДанными.НачатьВызовПолучитьКаталогВременныхФайлов(Новый ОписаниеОповещения(
			"ПолучитьКаталогВременныхФайловКомпонентыПослеВызова", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьКаталогВременныхФайловКомпоненты.
Процедура ПолучитьКаталогВременныхФайловКомпонентыПослеВызова(Каталог, ПараметрыВызова, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение,
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог));
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеПолученияКаталогаВременныхФайловКомпоненты(Каталог, Контекст) Экспорт
	
	Контекст.Вставить("ВременныйКаталог", Каталог + НовыйСжатыйУникальныйИдентификатор());
	
	Контекст.ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		Контекст.ВременныйКаталог);
	
	Контекст.Вставить("ИмяФайлаКорневогоСертификата", "root.cer");
	
	Вызовы = Новый Массив;
	ДобавитьВызов(Вызовы, "НачатьСозданиеКаталога",  Контекст.ВременныйКаталог,
		Неопределено, Неопределено, Неопределено, Неопределено);
	ПолучаемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый ОписаниеПередаваемогоФайла(Контекст.ВременныйКаталог + Контекст.ИмяФайлаКорневогоСертификата,
		Контекст.АдресСертификата));
	ДобавитьВызов(Вызовы, "НачатьПолучениеФайлов", ПолучаемыеФайлы, Контекст.ВременныйКаталог,
		Ложь, Неопределено, Неопределено);
	ДобавитьВызов(Вызовы, "НачатьУдалениеФайлов",  Контекст.ВременныйКаталог,
		Неопределено, Неопределено, Неопределено, Неопределено);
	НачатьЗапросРазрешенияПользователя(Новый ОписаниеОповещения(
		"ДействиеССертификатомПослеПолученияРазрешений", ЭтотОбъект, Контекст), Вызовы);
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеПолученияРазрешений(РазрешенияПолучены, Контекст) Экспорт
	
	Если Не РазрешенияПолучены Тогда
		Контекст.ОписаниеОшибки =
			НСтр("ru = 'Сохранение сертификатов во временную папку отменено пользователем.'");
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, НовыйРезультатСозданияОбъектаКриптографии(Ложь));
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеКаталога(Новый ОписаниеОповещения(
		"ДействиеССертификатомПослеСозданияКаталога", ЭтотОбъект, Контекст), Контекст.ВременныйКаталог);
	
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеСозданияКаталога(ИмяКаталога, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ДействиеССертификатомПослеПолученияФайлов", ЭтотОбъект, Контекст);
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, Контекст.АдресСертификата,
		Контекст.ВременныйКаталог + Контекст.ИмяФайлаКорневогоСертификата, ПараметрыСохранения);
				
КонецПроцедуры

// Продолжение процедуры ДействиеССертификатомПослеСозданияОбъектаКриптографии.
Процедура ДействиеССертификатомПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохраненияФайла = Новый Структура;
	РезультатСохраненияФайла.Вставить("ИмяФайла", ПолученныеФайлы[0].ПолноеИмя);
	РезультатСохраненияФайла.Вставить("Криптография", Контекст.Криптография);
	РезультатСохраненияФайла.Вставить("РаботаСДвоичнымиДанными", Контекст.РаботаСДвоичнымиДанными);
	РезультатСохраненияФайла.Вставить("ВременныйКаталог", Контекст.ВременныйКаталог);
	РезультатСохраненияФайла.Вставить("ОписаниеОшибки", Контекст.ОписаниеОшибки);
	РезультатСохраненияФайла.Вставить("Результат", Истина);
	ОтпечатокСертификата = Неопределено;
	Контекст.Свойство("ОтпечатокСертификата", ОтпечатокСертификата);
	РезультатСохраненияФайла.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, РезультатСохраненияФайла);
	
КонецПроцедуры

Процедура ДобавитьВызов(Вызовы, Метод, П1, П2, П3, П4, П5)
	
	Вызов = Новый Массив;
	Вызов.Добавить(Метод);
	Вызов.Добавить(П1);
	Вызов.Добавить(П2);
	Вызов.Добавить(П3);
	Вызов.Добавить(П4);
	Вызов.Добавить(П5);
	
	Вызовы.Добавить(Вызов);
	
КонецПроцедуры

Функция НовыйСжатыйУникальныйИдентификатор()
	
	Возврат НРег(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
	
КонецФункции

Функция ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		Возврат Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
КонецФункции

Функция НовыйРезультатСозданияОбъектаКриптографии(Результат, Криптография = Неопределено, РаботаСДвоичнымиДанными = Неопределено) 
	
	РезультатСозданияОбъектаКриптографии = Новый Структура;
	РезультатСозданияОбъектаКриптографии.Вставить("Результат",               Результат);
	РезультатСозданияОбъектаКриптографии.Вставить("Криптография",            Криптография);
	РезультатСозданияОбъектаКриптографии.Вставить("РаботаСДвоичнымиДанными", РаботаСДвоичнымиДанными);
	
	Возврат РезультатСозданияОбъектаКриптографии;
	
КонецФункции 

#КонецОбласти

Функция ВозможенЗапросДополнительныхРазрешений() Экспорт
	
	#Если ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.16.0") < 0;
	#Иначе 
		Возврат Ложь;
	#КонецЕсли
	
КонецФункции

#КонецОбласти