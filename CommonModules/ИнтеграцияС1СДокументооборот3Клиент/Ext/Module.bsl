////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3Клиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДинамическийСписок

// Обработчик события нажатия на кнопку динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   Команда - КомандаФормы - команда формы, имя которой соответствует нажатой кнопке.
//   ТекущаяСтраница - Число - номер текущей страницы.
//   ВсегоСтраниц - Число - максимальное количество страниц.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, куда будет передан номер выбранной страницы.
//
Процедура ВыбратьСтраницуДинамическогоСписка(Форма, Команда, ТекущаяСтраница, ВсегоСтраниц, ОписаниеОповещения) Экспорт
	
	КнопкаСтраницы = Форма.Элементы[Команда.Имя];
	
	Если КнопкаСтраницы.Заголовок = "..." Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
		Параметры.Вставить("ВсегоСтраниц", ВсегоСтраниц);
		Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		Оповещение = Новый ОписаниеОповещения("ВводСтраницыВручнуюЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВводЧисла(
			Оповещение,
			ТекущаяСтраница,
			НСтр("ru= 'Страница'"),
			СтрДлина(Формат(ВсегоСтраниц, "ЧГ=0")),
			0);
	Иначе
		НоваяСтраница = Число(КнопкаСтраницы.Заголовок);
		Если НоваяСтраница <> ТекущаяСтраница Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, НоваяСтраница);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Меняет поле и направление сортировки, обновляет шапку динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ЭлементСписок - ТаблицаФормы - элемент формы, где находится динамический список.
//   ЭлементКомандаУпорядочить - КнопкаФормы - кнопка упорядочивания в контекстном меню динамического списка.
//   ПолеДляСортировки - Строка - имя реквизита динамического списка, по которому выполняется сортировка.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   ВозможныеПоляДляСортировки - Соответствие:
//     * Ключ - Строка - имя реквизита динамического списка на форме, по которому может выполняться сортировка.
//     * Значение - Строка - имя реквизита XDTO объекта, по которому нужно выполнить сортировку.
//   КлючФормы - Строка - идентификатор формы для сохранения настроек сортировки в хранилище.
//
Процедура КомандаУпорядочить(Форма, ЭлементСписок, ЭлементКомандаУпорядочить,
		ПолеДляСортировки, НаправлениеСортировкиПоля, ВозможныеПоляДляСортировки, КлючФормы) Экспорт
	
	Если ПолеДляСортировки <> "" Тогда
		ПолеЭлемент = Форма.Элементы[ПолеДляСортировки];
#Если Не ВебКлиент Тогда
		Если ПолеЭлемент.КартинкаШапки.Вид = ВидКартинки.Пустая Тогда
#КонецЕсли
			ПолеЭлемент.Заголовок = СтрШаблон("%1 %2", ПолеЭлемент.Подсказка, ДополнениеЗаголовка(ПолеЭлемент));
			ПолеЭлемент.Заголовок = СокрЛП(ПолеЭлемент.Заголовок);
#Если Не ВебКлиент Тогда
		Иначе
			ПолеЭлемент.Заголовок = "";
			ПолеЭлемент.Ширина = 1;
			ПолеЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
	Если ПолеДляСортировки = ЭлементСписок.ТекущийЭлемент.Имя Тогда
		НаправлениеСортировкиПоля = Не НаправлениеСортировкиПоля;
	Иначе
		НаправлениеСортировкиПоля = Ложь;
	КонецЕсли;
	
	ПолеДляСортировки = ЭлементСписок.ТекущийЭлемент.Имя;
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "НаправлениеСортировкиПоля");
	Элемент.Вставить("Значение", НаправлениеСортировкиПоля);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "ПолеДляСортировки");
	Элемент.Вставить("Значение", ПолеДляСортировки);
	МассивСтруктур.Добавить(Элемент);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	ОбновитьСортировкуВЗаголовкеЯчейки(
		Форма,
		ЭлементСписок,
		ЭлементКомандаУпорядочить,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки);
	
КонецПроцедуры

// Добавляет в шапку динамического списка символ направления сортировки для соответствующего поля.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ЭлементСписок - ТаблицаФормы - элемент формы, где находится динамический список.
//   ЭлементКомандаУпорядочить - КнопкаФормы - кнопка упорядочивания в контекстном меню динамического списка.
//   ПолеДляСортировки - Строка - имя реквизита динамического списка, по которому выполняется сортировка.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   ВозможныеПоляДляСортировки - Соответствие:
//     * Ключ - Строка - имя реквизита динамического списка на форме, по которому может выполняться сортировка.
//     * Значение - Строка - имя реквизита XDTO объекта, по которому нужно выполнить сортировку.
//
Процедура ОбновитьСортировкуВЗаголовкеЯчейки(Форма, ЭлементСписок, ЭлементКомандаУпорядочить,
		ПолеДляСортировки, НаправлениеСортировкиПоля, ВозможныеПоляДляСортировки) Экспорт
	
	Если НаправлениеСортировкиПоля = Ложь Тогда
		ЗаголовокНаправление = СимволВозрастание();
	Иначе
		ЗаголовокНаправление = СимволУбывание();
	КонецЕсли;
	
	ПолеЭлемент = Форма.Элементы[ПолеДляСортировки];
	
#Если Не ВебКлиент Тогда
	Если ПолеЭлемент.КартинкаШапки.Вид = ВидКартинки.Пустая Тогда
#КонецЕсли
		ПолеЭлемент.Заголовок = СтрШаблон("%1 %2 %3",
			ПолеЭлемент.Подсказка,
			ЗаголовокНаправление,
			ДополнениеЗаголовка(ПолеЭлемент));
		ПолеЭлемент.Заголовок = СокрЛП(ПолеЭлемент.Заголовок);
#Если Не ВебКлиент Тогда
	Иначе
		ПолеЭлемент.Заголовок = ЗаголовокНаправление;
		ПолеЭлемент.Ширина = 2;
		ПолеЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
#КонецЕсли
	
	ЭлементКомандаУпорядочить.Заголовок = ЗаголовокКомандыУпорядочивания(
		ЭлементСписок,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки);
	
КонецПроцедуры

// Меняет заголовок и видимость кнопки упорядочивания в контекстном меню динамического списка.
//
// Параметры:
//   ЭлементСписок - ТаблицаФормы - элемент формы, где находится динамический список.
//   ЭлементКомандаУпорядочить - КнопкаФормы - кнопка упорядочивания в контекстном меню динамического списка.
//   КлючЯчейки - Число - предотвращает зацикливание события ПриАктивизацииЯчейки.
//   ПолеДляСортировки - Строка - имя реквизита динамического списка, по которому выполняется сортировка.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   ВозможныеПоляДляСортировки - Соответствие:
//     * Ключ - Строка - имя реквизита динамического списка на форме, по которому может выполняться сортировка.
//     * Значение - Строка - имя реквизита XDTO объекта, по которому нужно выполнить сортировку.
//
Процедура СписокПриАктивизацииЯчейки(ЭлементСписок, ЭлементКомандаУпорядочить, КлючЯчейки,
		ПолеДляСортировки, НаправлениеСортировкиПоля, ВозможныеПоляДляСортировки) Экспорт
	
	ЗаголовокКоманды = ЗаголовокКомандыУпорядочивания(
		ЭлементСписок,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки);
	
	Если ЗаголовокКоманды = ЭлементКомандаУпорядочить.Заголовок Тогда
		КлючЯчейки = 0;
		Возврат;
	КонецЕсли;
	
	Если КлючЯчейки > 0 Тогда
		КлючЯчейки = 0;
		Возврат;
	КонецЕсли;
	КлючЯчейки = КлючЯчейки + 1;
	
	ЭлементКомандаУпорядочить.Заголовок = ЗаголовокКоманды;
	ЭлементКомандаУпорядочить.Видимость = (ЗаголовокКоманды <> "");
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ФормаВладелец[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора значения реквизита в таблице из списка объектов документооборота.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ТекущиеДанные - ДанныеФормыЭлементКоллекции
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСпискаВТаблице(ТипОбъектаВыбора, Реквизит, ТекущиеДанные, ФормаВладелец,
		Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаВТаблицеЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ТекущиеДанные[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Начинает процесс выбора объекта ДО указанного типа, возвращая результат вызовом оповещения.
//
// Параметры:
//   ОписаниеОповещения - ОписаниеОповещения - вызывается после завершения выбора с передачей структуры,
//      описывающей выбранный объект.
//   ТипОбъектаВыбора - Строка - тип выбираемого объекта (XDTO, например, "DMCorrespondent").
//   Отбор - Структура - накладываемый отбор.
//   ВыбранноеЗначение - Строка - идентификатор ранее выбранного значения.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызван выбор.
//
Процедура ВыбратьЗначениеПоТипуОбъекта(ОписаниеОповещения, ТипОбъектаВыбора, Отбор = Неопределено,
		ВыбранноеЗначение = "", ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("Заголовок", ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(
		ТипОбъектаВыбора, "ЗаголовокФормыВыбора"));
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ВыбранноеЗначение);
	
	Если ТипОбъектаВыбора = "DMDocument"
			Или ТипОбъектаВыбора = "DMCorrespondent"
			Или ТипОбъектаВыбора = "DMMeeting" Тогда
		ПараметрыФормы.Вставить("ИскатьСразу", Ложь);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборОбъектаПоиском",
			ПараметрыФормы,
			ФормаВладелец,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
			ПараметрыФормы,
			ФормаВладелец,
			Новый УникальныйИдентификатор,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает выполнение подключаемой команды интеграции после проверки подключения.
//
// Параметры:
//   Команда - КомандаФормы - вызванная команда.
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Источник - ДанныеФормыСтруктура
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(Команда, Форма, Источник) Экспорт
	
	Если Команда.Имя = "ИнтеграцияС1СДокументооборотом_Файлы" Тогда
		Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			Ссылка = Источник.Ссылка;
		Иначе
			Если Источник.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Ссылка = Неопределено;
			Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
				Ссылка = Источник.ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПрисоединенныеФайлы(
			Ссылка,,,
			Форма,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствие форм БИД объектам документооборота.
//
// Параметры:
//   СоответствиеФорм - Соответствие - неявно возвращаемое значение, соответствие форм.
//
Процедура ЗаполнитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//
Процедура НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ОбъектИС.Пустая() Тогда
		ТекстОшибки = НСтр("ru = 'Связанный объект интегрированной системы не задан или не записан.'");
		ПоказатьПредупреждение(,ТекстОшибки,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		Возврат
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	ПодходящиеПравилаИнтеграции = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграции(
		СписокОбъектовИС,,
		Истина);
	Правила = ПодходящиеПравилаИнтеграции[ОбъектИС];
	
	Если Правила.Количество() = 1 Тогда
		
		НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правила[0], Параметры);
		
	ИначеЕсли Правила.Количество() > 1 Тогда
		
		// несколько правил, требуется выбор пользователя
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила",
			ИнтеграцияС1СДокументооборот3Клиент,
			Параметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для объекта %1 нет подходящих правил интеграции.'"),
			ОбъектИС);
		ПоказатьПредупреждение(,ТекстОшибки,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   Результат - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//   Параметры - Структура:
//     * ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     * ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Знач Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3") Тогда
		Правило = Результат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Правило = Результат.Ссылка;
		
	КонецЕсли;
	
	ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьОбъектДОПоПравилу(
		Параметры.ОбъектИС,
		Правило);
	
	Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // сообщение об ошибке
		
		ПоказатьПредупреждение(,ОбъектДОИлиСообщение,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		
	Иначе // структура с описанием созданного объекта результата
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_ДобавлениеСвязи(
			ОбъектДОИлиСообщение.ID,
			ОбъектДОИлиСообщение.type,
			Параметры.ОбъектИС);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОбъектДОИлиСообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает интегрированную базу ДО и переходит по указанной ссылке.
//
// Параметры:
//   СсылкаНаОбъектДО - Строка - навигационная ссылка по которой требуется перейти в базе ДО.
//     Если параметр не задан, то ссылка будет браться из параметра сеанса ИнтеграцияС1СДокументооборотОбъектДО.
//
Процедура ОткрытьОбъектДО(Знач СсылкаНаОбъектДО = Неопределено) Экспорт
	
	Если СсылкаНаОбъектДО = Неопределено Тогда
		СсылкаНаОбъектДО = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьСсылкуНаОбъектДО();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
		Возврат;
	КонецЕсли;
	
	АдресКоманды = СтрШаблон("%1#%2",
		ИнтеграцияС1СДокументооборот3ВызовСервера.НавигационнаяСсылкаБазыДО(Истина),
		СсылкаНаОбъектДО);
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресКоманды);
	
КонецПроцедуры

#КонецОбласти

#Область Обработка

// Стартует обработку связанного объекта ДО. При передаче в качестве предмета ссылки на объект ИС
// создает связанный объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка
//           - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * ВнешнийОбъект - ЛюбаяСсылка
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//
Процедура НачатьОбработку(Предмет = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"НачатьОбработкуПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборот3Клиент,
		Параметры);
	
	Если ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Предмет,
			ОписаниеОповещенияПродолжение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Неопределено
//             - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   Параметры - Структура:
//     * ГлавнаяЗадача- Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//     * Предмет - ЛюбаяСсылка,
//               - Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//         ** ВнешнийОбъект - ЛюбаяСсылка
//
Процедура НачатьОбработкуПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры.Предмет = Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ИнтеграцияС1СДокументооборот3ВызовСервера.НачатьОбработку(Параметры.Предмет, ТекстОшибки) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Обработка'"),,
			СтрШаблон(НСтр("ru = 'Обработка ""%1"" успешно запущена'"), Параметры.Предмет.name),
			БиблиотекаКартинок.Информация32,
			СтатусОповещенияПользователя.Важное);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
		
	Иначе
		
		ПозицияСсылки = СтрНайти(ТекстОшибки, "Ссылка на объект в ДО: ");
		Если ПозицияСсылки > 0 Тогда
			ИнтеграцияС1СДокументооборот3ВызовСервера.УстановитьСсылкуНаОбъектДО(
				Сред(ТекстОшибки, ПозицияСсылки + 23, СтрДлина(ТекстОшибки)));
			Инфо = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = '%1
						|<a href = ""%2"">Ссылка на объект в ДО</a>'"),
					Лев(ТекстОшибки, ПозицияСсылки - 2),
					"e1cib/command/Обработка.ИнтеграцияС1СДокументооборот3.Команда.ОткрытьОбъектДО"));
		Иначе
			Инфо = ТекстОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(,Инфо,,
			НСтр("ru = 'Не удалось начать обработку'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманды

// Обработчик общей команды ИнтеграцияС1СДокументооборотНачатьОбработку
//
// Параметры:
//   МассивСсылок - Произвольный - в параметр передается значение от источника, в котором реализована команда.
//     Может содержать как единичное значение, так и массив значений.
//   ПараметрыВыполнения - ПараметрыВыполненияКоманды - в обработчике команды можно изменить значение свойств
//     параметра.
//
Процедура ОбработкаКомандыНачатьОбработку(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() > 0 Тогда
		ПараметрКоманды = МассивСсылок[0];
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьОбработкуПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

// Изменяет роли файлов.
//
// Параметры:
//   СписокФайлов - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//   ВыбраннаяРольID - Строка - идентификатор новой роли файлов.
//   ВладелецФайлов - Строка - идентификатор владельца файлов.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ЗаменитьРольФайлов(СписокФайлов, ВыбраннаяРольID, ВладелецФайлов,
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	Для Каждого Строка Из СписокФайлов Цикл
		Файл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			Строка.Наименование,
			Строка.ID,
			Строка.Тип);
		ДанныеФайлов.Добавить(Файл);
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборот3ВызовСервера.ЗаменитьРольФайлов(ДанныеФайлов, ВыбраннаяРольID);
	
	Для Каждого Строка Из СписокФайлов Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменена роль файла ""%1""'"), Строка.Наименование);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ИнформироватьОбИзмененииФайла(
			"ИзменениеРолиФайла",
			Строка.Наименование,
			Строка.ID,
			ВладелецФайлов,
			ТекстСообщения,,
			УникальныйИдентификаторФормы);
	КонецЦикла;
	
КонецПроцедуры

// Копирует присоединенные файлы объекта, хранящиеся на стороне ИС в связанный объект на стороне ДО.
//
// Параметры:
//   ПрисоединенныеФайлыВИС - Массив из ЛюбаяСсылка - список присоединенных файлов в ИС.
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//   ВладелецПредставление - Строка - представление владельца файла.
//   Владелец - ЛюбаяСсылка - владелец файла.
//   РольФайлаID - Строка - роль файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПеренестиФайлыИСвДО(ПрисоединенныеФайлыВИС, ВладелецID, ВладелецТип, ВладелецПредставление, Владелец,
		РольФайлаID = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	СозданныеФайлы = ИнтеграцияС1СДокументооборот3ВызовСервера.ПеренестиФайлыИСвДО(
		ПрисоединенныеФайлыВИС,
		ВладелецID,
		ВладелецТип,
		ВладелецПредставление,
		Владелец,
		РольФайлаID);
	
	Для Каждого Файл Из СозданныеФайлы Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан файл ""%1""'"), Файл.Наименование);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ИнформироватьОбИзмененииФайла(
			"СозданиеФайла",
			Файл.Наименование,
			Файл.ID,
			ВладелецID,
			ТекстСообщения,,
			УникальныйИдентификаторФормы);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификатор текущей роли файлов.
//
// Параметры:
//   ДеревоФайлов - ДанныеФормыДерево - дерево файлов.
//   ТекущаяСтрока - Число - идентификатор текущей строки.
//
// Возвращаемое значение:
//   Строка - текущая роль файлов.
//   Неопределено - никакая роль не найдена.
//
Функция ТекущаяРольФайла(ДеревоФайлов, ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ДеревоФайлов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Тип = "DMFileRole" И ЗначениеЗаполнено(ТекущиеДанные.ID) Тогда
				// Указатель стоит на конкретной роли.
				Возврат ТекущиеДанные.ID;
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.РольФайлаID) Тогда
				// Указатель стоит на файле с заданной ролью.
				Возврат ТекущиеДанные.РольФайлаID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Текущая строка не задана или указатель стоит на пустой роли.
	// Вернем первую обязательную роль.
	Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
		Если Строка.РольОбязательная И Строка.Тип = "DMFileRole" И ЗначениеЗаполнено(Строка.ID) Тогда
			Возврат Строка.ID;
		КонецЕсли;
	КонецЦикла;
	// Вернем первую любую роль.
	Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
		Если Строка.Тип = "DMFileRole" И ЗначениеЗаполнено(Строка.ID) Тогда
			Возврат Строка.ID;
		КонецЕсли;
	КонецЦикла;
	
	// Ничего не нашли.
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Возвращает данные по задаче, заполненные из данных формы задачи или формы списка задач.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ID - Строка - идентификатор задачи Документооборота.
//   Тип - Строка - XDTO-тип задачи Документооборота.
//   Заголовок - Строка - заголовок задачи.
//   ПараметрыОперации - Структура:
//     * РезультатВариантаНомер - Строка - имя реквизита формы, содержащего выбранный пользователем вариант
//         выполнения действия задачи.
//     * Флаг - Строка - имя флага, принимает значения перечисления DMObjectFlag (http://www.1c.ru/dm).
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
Функция ДанныеПоЗадаче(Форма, ID, Тип, Заголовок, ПараметрыОперации = Неопределено) Экспорт
	
	РезультатВариантаНомер = "";
	Флаг = "";
	Если ПараметрыОперации <> Неопределено Тогда
		ПараметрыОперации.Свойство("РезультатВариантаНомер", РезультатВариантаНомер);
		ПараметрыОперации.Свойство("Флаг", Флаг);
	КонецЕсли;
	
	ДанныеПоЗадаче = ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче(ID, Тип, Заголовок);
	
	Если ЗначениеЗаполнено(РезультатВариантаНомер) Тогда
		ДанныеПоЗадаче.РезультатДействия.ID = Форма[РезультатВариантаНомер + "ID"];
		ДанныеПоЗадаче.РезультатДействия.Тип = Форма[РезультатВариантаНомер + "Тип"];
		ДанныеПоЗадаче.РезультатДействия.Наименование = Форма[РезультатВариантаНомер];
		ДанныеПоЗадаче.РезультатДействияТекстом = Форма.РезультатДействияТекстом;
		ДанныеПоЗадаче.ВерсияДанныхДействияЗадачи = Форма.ВерсияДанныхДействияЗадачи;
	КонецЕсли;
	
	ДанныеПоЗадаче.Флаг = Флаг;
	
	Возврат ДанныеПоЗадаче;
	
КонецФункции

// Вызывается перед началом интерактивного изменения строки дерева приложений.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   Отказ - Булево - признак отказа от редактирования строки.
//
Процедура ДеревоПриложенийПередНачаломИзменения(СтрокаДереваПриложений, Отказ) Экспорт
	
	Отказ = Истина;
	ОткрытьКарточку(СтрокаДереваПриложений);
	
КонецПроцедуры

// Формирует ключ строки дерева приложений.
//
// Параметры:
//   СтрокаДереваПриложений - Структура:
//     * ПредставлениеПриложения - Строка
//     * ПриложениеID - Строка
//     * ПриложениеТип - Строка
//     * ТипСтроки - Строка
//     * РольФайлаID - Строка
//
// Возвращаемое значение:
//   Строка
//
Функция КлючСтрокиДереваПриложений(СтрокаДереваПриложений) Экспорт
	
	Если СтрокаДереваПриложений <> Неопределено Тогда
		Если СтрокаДереваПриложений.ТипСтроки = "filerole" Тогда
			Возврат СтрШаблон("%1_%2",
				СтрокаДереваПриложений.ТипСтроки,
				СтрокаДереваПриложений.РольФайлаID);
		Иначе
			Возврат СтрШаблон("%1_%2_%3",
				СтрокаДереваПриложений.ПредставлениеПриложения,
				СтрокаДереваПриложений.ПриложениеID,
				СтрокаДереваПриложений.ПриложениеТип);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Открывает карточку приложения.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//
Процедура ОткрытьКарточку(СтрокаДереваПриложений) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДереваПриложений.Ссылка) Тогда
		ПоказатьЗначение(, СтрокаДереваПриложений.Ссылка);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваПриложений.НавигационнаяСсылка)
			И (СтрокаДереваПриложений.ПриложениеТип = "DMCorrespondent"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMDocument"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMMeeting") Тогда
		ОткрытьОбъектДО(СтрокаДереваПриложений.НавигационнаяСсылка);
		
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			СтрокаДереваПриложений.ПриложениеТип,
			СтрокаДереваПриложений.ПриложениеID,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает приложение на просмотр.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ОткрытьПриложение(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДереваПриложений.Ссылка) Тогда
		ПоказатьЗначение(, СтрокаДереваПриложений.Ссылка);
		
	ИначеЕсли СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			УникальныйИдентификаторФормы);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваПриложений.НавигационнаяСсылка)
			И (СтрокаДереваПриложений.ПриложениеТип = "DMCorrespondent"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMDocument"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMMeeting") Тогда
		ОткрытьОбъектДО(СтрокаДереваПриложений.НавигационнаяСсылка);
		
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			СтрокаДереваПриложений.ПриложениеТип,
			СтрокаДереваПриложений.ПриложениеID,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Команды с этим обработчиком создаются программно согласно предметам активной задачи.
//
// Параметры:
//   Команда - КомандаФормы - команда создания на основании.
//   ОсновнойПредметID - Строка - идентификатор основного объекта задачи.
//   ОсновнойПредметТип - Строка - тип основного объекта задачи.
//
Процедура Подключаемый_СоздатьСвязанныйОбъект(Команда, ОсновнойПредметID, ОсновнойПредметТип) Экспорт
	
	ИмяКоманды = Команда.Имя;
	УИДПравила = Сред(ИмяКоманды, 9);
	УИДПравила = СтрЗаменить(УИДПравила, "_", "-");
	УИДПравила = Новый УникальныйИдентификатор(УИДПравила);
	
	ДанныеЗаполнения = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеЗаполненияИнтегрируемогоОбъекта(
		УИДПравила,
		ОсновнойПредметТип,
		ОсновнойПредметID);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьИнтегрированныйОбъектИзДанныхЗаполнения(
		ДанныеЗаполнения);
	
КонецПроцедуры

// Добавляет к приложению картинку из буфера.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыВставитьКартинкуИзБуфера(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.РольПредмета = "filledin"
			И Не ЗначениеЗаполнено(СтрокаДереваПриложений.ПриложениеТип)
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПредставлениеПриложения) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Добавить приложение задачи можно только на стороне 1С:Документооборот.'"));
		Возврат;
		
	Иначе
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлИзБуфера(
			РольФайлаИПриложение.Приложение.ID,
			РольФайлаИПриложение.Приложение.Тип,
			УникальныйИдентификаторФормы,
			РольФайлаИПриложение.Приложение.Представление,
			РольФайлаИПриложение.Владелец,
			Ложь,
			РольФайлаИПриложение.РольФайлаID);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к приложению файл с диска.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыДобавить(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.РольПредмета = "filledin"
			И Не ЗначениеЗаполнено(СтрокаДереваПриложений.ПриложениеТип)
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПредставлениеПриложения) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Добавить приложение задачи можно только на стороне 1С:Документооборот.'"));
		Возврат;
		
	Иначе
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДиска(
			РольФайлаИПриложение.Приложение.ID,
			РольФайлаИПриложение.Приложение.Тип,
			УникальныйИдентификаторФормы,
			РольФайлаИПриложение.Приложение.Представление,
			РольФайлаИПриложение.Владелец,
			Ложь,
			РольФайлаИПриложение.РольФайлаID);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет приложение.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыУдалить(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.РольПредмета = "filledin"
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПриложениеТип)
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПредставлениеПриложения) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Удалить приложение задачи можно только на стороне 1С:Документооборот.'"));
		Возврат;
		
	ИначеЕсли СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.ПриложениеТип,
			СтрокаДереваПриложений.Расширение,
			СтрокаДереваПриложений.РольФайлаID);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПометитьНаУдалениеСнятьПометкуФайлов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийФайл),
			СтрокаДереваПриложений.ПометкаУдаления,,
			РольФайлаИПриложение.Приложение.ID,
			УникальныйИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл для редактирования.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыРедактировать(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			УникальныйИдентификаторФормы,
			Ложь,,
			РольФайлаИПриложение.Приложение.ID);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Заканчивает редактирование файла, помещая его в ДО и снимая захват, если необходимо.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыЗакончитьРедактирование(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			УникальныйИдентификаторФормы,,
			РольФайлаИПриложение.Приложение.ID);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет редактирование ранее захваченного файла.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыОсвободить(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
			СтрокаДереваПриложений.ПриложениеID,,
			РольФайлаИПриложение.Приложение.ID,
			УникальныйИдентификаторФормы);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет файл ДО из файла на диске.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыОбновитьИзФайлаНаДиске(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбновитьИзФайлаНаДиске(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			СтрокаДереваПриложений.ДатаМодификации,
			УникальныйИдентификаторФормы,,
			РольФайлаИПриложение.Приложение.ID);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет файлы из дерева приложений на диск, в указанный пользователем каталог.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//
Процедура ПриложенияЗадачиФайлыСохранитьКак(СтрокаДереваПриложений, Форма) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеФайлы = Новый Массив;
	
	Если Форма.Элементы.ДеревоПриложений.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ВыбраннаяСтрока Из Форма.Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
			ДанныеСтроки = Форма.Элементы.ДеревоПриложений.ДанныеСтроки(ВыбраннаяСтрока);
			Если ДанныеСтроки.ПриложениеТип = "DMFile" Тогда
				ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
					ДанныеСтроки.Приложение,
					ДанныеСтроки.ПриложениеID,
					"DMFile",
					ДанныеСтроки.Расширение,
					ДанныеСтроки.РольФайлаID);
				ВыделенныеФайлы.Добавить(ДанныеФайла);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
			ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
				СтрокаДереваПриложений.Приложение,
				СтрокаДереваПриложений.ПриложениеID,
				"DMFile",
				СтрокаДереваПриложений.Расширение,
				СтрокаДереваПриложений.РольФайлаID);
			ВыделенныеФайлы.Добавить(ДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыделенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	Для Каждого ВыделенныйФайл Из ВыделенныеФайлы Цикл
		Если Параметры.Свойство("ТекущийФайл") Тогда
			Параметры.ОставшиесяФайлы.Добавить(ВыделенныйФайл);
		Иначе
			Параметры.Вставить("ТекущийФайл", ВыделенныйФайл);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
	Параметры.Вставить("ОписаниеОповещения", Неопределено);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьФайлыКакНачало(Параметры);
	
КонецПроцедуры

// Разворачивает дерево приложений на форме задачи.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   СостояниеДереваПриложений - см. ИнтеграцияС1СДокументооборот3Клиент.СостояниеДереваПриложений
//
Процедура РазвернутьДеревоПриложений(Форма, СостояниеДереваПриложений = Неопределено) Экспорт
	
	Если СостояниеДереваПриложений = Неопределено Тогда
		
		Для Каждого СтрокаОбъект Из Форма.ДеревоПриложений.ПолучитьЭлементы() Цикл
			
			Форма.Элементы.ДеревоПриложений.Развернуть(СтрокаОбъект.ПолучитьИдентификатор());
			
			Для Каждого СтрокаВложение Из СтрокаОбъект.ПолучитьЭлементы() Цикл
				НужноРазворачивать = Истина;
				Если СтрокаВложение.ТипСтроки = "filerole" И Не СтрокаВложение.РольОбязательная Тогда
					НужноРазворачивать = Ложь;
				КонецЕсли;
				
				Если Не НужноРазворачивать Тогда
					Продолжить;
				КонецЕсли;
				
				Форма.Элементы.ДеревоПриложений.Развернуть(СтрокаВложение.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТекущаяСтрокаДереваПриложений = Неопределено;
		РазвернутьСтрокиДереваПриложений(
			Форма,
			Форма.ДеревоПриложений.ПолучитьЭлементы(),
			СостояниеДереваПриложений.СостояниеРазвернут,
			СостояниеДереваПриложений.КлючТекущейСтрокиДереваПриложений,
			ТекущаяСтрокаДереваПриложений);
		
		Если ТекущаяСтрокаДереваПриложений <> Неопределено Тогда
			Форма.Элементы.ДеревоПриложений.ТекущаяСтрока = ТекущаяСтрокаДереваПриложений.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текущее состояние дерева приложений на форме задачи.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ТекущаяСтрока - Структура:
//     * ПредставлениеПриложения - Строка
//     * ПриложениеID - Строка
//     * ПриложениеТип - Строка
//     * ТипСтроки - Строка
//     * РольФайлаID - Строка
//
// Возвращаемое значение:
//   Структура:
//     * СостояниеРазвернут - Соответствие:
//       ** Ключ - Строка
//       ** Значение - Булево
//     * КлючТекущейСтрокиДереваПриложений - Строка
//
Функция СостояниеДереваПриложений(Форма, ТекущаяСтрока = Неопределено) Экспорт
	
	Если Форма.ДеревоПриложений.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СостояниеДереваПриложений = Новый Структура("СостояниеРазвернут, КлючТекущейСтрокиДереваПриложений");
	
	СостояниеДереваПриложений.СостояниеРазвернут = Новый Соответствие;
	ЗаполнитьСостояниеСтрокДереваПриложений(
		Форма,
		Форма.ДеревоПриложений.ПолучитьЭлементы(),
		СостояниеДереваПриложений.СостояниеРазвернут);
	
	Если ТекущаяСтрока = Неопределено Тогда
		СостояниеДереваПриложений.КлючТекущейСтрокиДереваПриложений = КлючСтрокиДереваПриложений(
			Форма.Элементы.ДеревоПриложений.ТекущиеДанные);
	Иначе
		СостояниеДереваПриложений.КлючТекущейСтрокиДереваПриложений = КлючСтрокиДереваПриложений(ТекущаяСтрока);
	КонецЕсли;
	
	Возврат СостояниеДереваПриложений;
	
КонецФункции

// Устанавливает видимость и доступность команд в дереве приложений.
//
// Параметры:
//   ТекущаяСтрока - Число - номер текущей строки дерева приложений.
//   КлючСтрокиДереваПриложений - Строка - ключ строки для предотвращения зацикливания.
//   ЗадачаID - Строка - идентификатор текущей задачи.
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ЭтоТонкийWindowsКлиент - Булево - требуется для установки доступности команды вставки из буфера обмена.
//
Процедура УстановитьДоступностьКомандПриложений(ТекущаяСтрока, КлючСтрокиДереваПриложений, ЗадачаID,
		Форма, ЭтоТонкийWindowsКлиент) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКлюч = СтрШаблон("%1_%2", ЗадачаID, ТекущаяСтрока);
	Если НовыйКлюч = КлючСтрокиДереваПриложений Тогда
		Возврат;
	КонецЕсли;
	КлючСтрокиДереваПриложений = НовыйКлюч;
	
	ЭтоФайл = Ложь;
	ЭтоЗадача = Ложь;
	ЭтоЗаполняемоеПриложение = Ложь;
	ЭтоДругоеПриложение = Ложь;
	ЭтоРольФайла = Ложь;
	ЭтоФайлПриложения = Ложь;
	
	ТекущаяЗадачаИлиДействиеЕстьДействие = Истина;
	
	ДоступноИнтерактивноеИзменениеФайлов = Ложь;
	
	РедактироватьДоступность = Истина;
	ЗакончитьРедактированиеДоступность = Истина;
	ЗаполняемоеПриложениеУказано = Ложь;
	
	ТекущиеДанные = Форма.ДеревоПриложений.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ПриложениеТип = "DMFile" Тогда
			
			РедактируетсяДругимПользователем =
				ТекущиеДанные.Редактируется
				И Не ТекущиеДанные.РедактируетсяТекущимПользователем;
			Если РедактируетсяДругимПользователем Или ТекущиеДанные.ПодписанЭП Тогда
				РедактироватьДоступность = Ложь;
			КонецЕсли;
			
			Если Не ТекущиеДанные.РедактируетсяТекущимПользователем Или ТекущиеДанные.ПодписанЭП Тогда
				ЗакончитьРедактированиеДоступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			
		КонецЕсли;
		
		ЭтоФайл = (ТекущиеДанные.ПриложениеТип = "DMFile");
		ЭтоДругоеПриложение = ЗначениеЗаполнено(ТекущиеДанные.ПриложениеТип)
			И (ТекущиеДанные.ПриложениеТип <> "DMFile");
		ЭтоЗадача = (ТекущиеДанные.ТипСтроки = "task");
		ЭтоЗаполняемоеПриложение = (ТекущиеДанные.РольПредмета = "filledin");
		ЭтоРольФайла = (ТекущиеДанные.ТипСтроки = "filerole");
		ЭтоФайлПриложения = (ТекущиеДанные.ТипСтроки = "file");
		
		ЗаполняемоеПриложениеУказано = (ТекущиеДанные.РольПредмета = "filledin")
			И ЗначениеЗаполнено(ТекущиеДанные.ПриложениеТип);
		
		Если ТекущиеДанные.ТипСтроки = "file" Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			Если ДанныеРодителя <> Неопределено И ДанныеРодителя.ТипСтроки = "filerole" Тогда
				ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
			КонецЕсли;
			
			ДоступноИнтерактивноеИзменениеФайлов = ДанныеРодителя <> Неопределено
				И ЗначениеЗаполнено(ДанныеРодителя.ПриложениеТип)
				И ДоступноИнтерактивноеИзменениеФайлов(ДанныеРодителя.ПриложениеТип);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "filerole" Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ДанныеРодителя.Приложение)
				И ДоступноИнтерактивноеИзменениеФайлов(ДанныеРодителя.ПриложениеТип);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "application" Тогда
			
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
				И ДоступноИнтерактивноеИзменениеФайлов(ТекущиеДанные.ПриложениеТип);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Доступность = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность =
		РедактироватьДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность =
		ЗакончитьРедактированиеДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Доступность =
		ЗакончитьРедактированиеДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = ЭтоФайл;
	
	Если ЭтоЗаполняемоеПриложение Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность =
			Не ЗаполняемоеПриложениеУказано;
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность =
			ЗаполняемоеПриложениеУказано;
	Иначе
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность = Истина;
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность = Истина;
	КонецЕсли;
	
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Видимость =
		ЭтоТонкийWindowsКлиент
		И ((ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов));
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюКопироватьВБуферОбмена.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик оповещения, вызываемый после ввода номера страницы пользователем.
//
// Параметры:
//   НоваяСтраница - Число - номер страницы, введенный пользователем.
//   Параметры - Структура:
//     * ТекущаяСтраница - Число - номер текущей страницы.
//     * ВсегоСтраниц - Число - максимальное количество страниц.
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, куда будет передан номер выбранной страницы.
//
Процедура ВводСтраницыВручнуюЗавершение(НоваяСтраница, Параметры) Экспорт
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтраница < 1 Тогда
		НоваяСтраница = 1;
	ИначеЕсли НоваяСтраница > Параметры.ВсегоСтраниц Тогда
		НоваяСтраница = Параметры.ВсегоСтраниц;
	КонецЕсли;
	
	Если НоваяСтраница = Параметры.ТекущаяСтраница Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, НоваяСтраница);
	
КонецПроцедуры

// Обработка выбора значения в таблице из списка.
//
// Параметры:
//   Результат - Структура:
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//   Параметры - Структура:
//     * ТекущиеДанные - ДанныеФормыЭлементКоллекции
//     * Реквизит - Строка
//     * ФормаВладелец - ФормаКлиентскогоПриложения
//
Процедура ВыбратьЗначениеИзСпискаВТаблицеЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные[Реквизит] = Результат.РеквизитПредставление;
		ТекущиеДанные[Реквизит + "ID"] = Результат.РеквизитID;
		ТекущиеДанные[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("Данные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Результат", Результат);
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ПараметрыОповещения, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора значения из списка.
//
// Параметры:
//   Результат - Структура:
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//   Параметры - Структура:
//     * ТекущиеДанные - ДанныеФормыЭлементКоллекции
//     * Реквизит - Строка
//     * ФормаВладелец - ФормаКлиентскогоПриложения
//
Процедура ВыбратьЗначениеИзСпискаЗавершение(Результат, Параметры) Экспорт
	
	ФормаВладелец = Параметры.ФормаВладелец;
	Реквизит = Параметры.Реквизит;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаЗавершение", Реквизит, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнениеЗаголовка(ПолеЭлемент)
	
	НачалоДополнения = СтрНайти(ПолеЭлемент.Заголовок, "(");
	Если НачалоДополнения > 0 Тогда
		ДополнениеЗаголовка = Сред(ПолеЭлемент.Заголовок, НачалоДополнения, СтрДлина(ПолеЭлемент.Заголовок));
	КонецЕсли;
	
	Возврат ДополнениеЗаголовка;
	
КонецФункции

// Определяет, доступно ли интерактивное изменение файлов.
//
// Параметры:
//   ПриложениеЗадачи - Строка
//
// Возвращаемое значение:
//   Булево - доступно интерактивное изменение файлов.
//
Функция ДоступноИнтерактивноеИзменениеФайлов(ПриложениеТип)
	
	ДоступноИнтерактивноеИзменениеФайлов =
		ПриложениеТип = "DMCorrespondent"
		Или ПриложениеТип = "DMDocument"
		Или ПриложениеТип = "DMMeeting";
	
	Возврат ДоступноИнтерактивноеИзменениеФайлов;
	
КонецФункции

Функция ЗаголовокКомандыУпорядочивания(ЭлементСписок, ПолеДляСортировки, НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки)
	
	Если ЭлементСписок.ТекущийЭлемент = Неопределено Тогда
		Возврат "Упорядочить";
	КонецЕсли;
	
	Если Не СортировкаПоПолюВозможна(ВозможныеПоляДляСортировки, ЭлементСписок.ТекущийЭлемент.Имя) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПолеДляСортировки = ЭлементСписок.ТекущийЭлемент.Имя Тогда
		НовоеНаправление = Не НаправлениеСортировкиПоля;
	Иначе
		НовоеНаправление = Ложь;
	КонецЕсли;
	
	Если НовоеНаправление = Ложь Тогда
		ЗаголовокНаправление = НСтр("ru = 'возрастанию'");
	Иначе
		ЗаголовокНаправление = НСтр("ru = 'убыванию'");
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru = 'Упорядочить по полю ""%1"" по %2'"),
		ЭлементСписок.ТекущийЭлемент.Подсказка,
		ЗаголовокНаправление);
	
КонецФункции

Процедура ЗаполнитьСостояниеСтрокДереваПриложений(Форма, Строки, СостояниеРазвернут)
	
	Для Каждого Строка Из Строки Цикл
		СтрокаРазвернута = Форма.Элементы.ДеревоПриложений.Развернут(Строка.ПолучитьИдентификатор());
		СостояниеРазвернут[КлючСтрокиДереваПриложений(Строка)] = СтрокаРазвернута;
		ЗаполнитьСостояниеСтрокДереваПриложений(Форма, Строка.ПолучитьЭлементы(), СостояниеРазвернут);
	КонецЦикла;
	
КонецПроцедуры

// Продолжение процедуры ОбработкаКомандыНачатьОбработку.
Процедура НачатьОбработкуПроверитьПодключениеЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат = Истина Тогда
		// авторизация успешна
		НачатьОбработку(ПараметрКоманды);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазвернутьСтрокиДереваПриложений(Форма, Строки, СостояниеРазвернут, КлючТекущейСтрокиДереваПриложений,
		ТекущаяСтрокаДереваПриложений)
	
	Для Каждого Строка Из Строки Цикл
		КлючСтроки = КлючСтрокиДереваПриложений(Строка);
		
		Если СостояниеРазвернут[КлючСтроки] = Истина Или СостояниеРазвернут[КлючСтроки] = Неопределено Тогда
			// Развернем новые строки и строки, развернутые ранее.
			Форма.Элементы.ДеревоПриложений.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
		Если КлючТекущейСтрокиДереваПриложений = КлючСтроки Тогда
			ТекущаяСтрокаДереваПриложений = Строка;
		КонецЕсли;
		
		РазвернутьСтрокиДереваПриложений(
			Форма,
			Строка.ПолучитьЭлементы(),
			СостояниеРазвернут,
			КлючТекущейСтрокиДереваПриложений,
			ТекущаяСтрокаДереваПриложений);
	КонецЦикла;
	
КонецПроцедуры

Функция РольФайлаИПриложение(ДанныеСтроки)
	
	Владелец = Неопределено;
	Приложение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО("", "");
	РольФайлаID = "";
	
	Если ДанныеСтроки.ТипСтроки = "file" Тогда
		
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		Если ДанныеРодителя <> Неопределено И ДанныеРодителя.ТипСтроки = "filerole" Тогда
			РольФайлаID = ДанныеРодителя.РольФайлаID;
			ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
		КонецЕсли;
		
		Если ДанныеРодителя <> Неопределено Тогда
			Владелец = ДанныеРодителя.Ссылка;
			Приложение.Наименование = ДанныеРодителя.Приложение;
			Приложение.ID = ДанныеРодителя.ПриложениеID;
			Приложение.Тип = ДанныеРодителя.ПриложениеТип;
			Приложение.Представление = ДанныеРодителя.ПредставлениеПриложения;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = "filerole" Тогда
		
		РольФайлаID = ДанныеСтроки.РольФайлаID;
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		
		Если ДанныеРодителя <> Неопределено Тогда
			Владелец = ДанныеРодителя.Ссылка;
			Приложение.Наименование = ДанныеРодителя.Приложение;
			Приложение.ID = ДанныеРодителя.ПриложениеID;
			Приложение.Тип = ДанныеРодителя.ПриложениеТип;
			Приложение.Представление = ДанныеРодителя.ПредставлениеПриложения;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = "application" Тогда
		
		Владелец = ДанныеСтроки.Ссылка;
		Приложение.Наименование = ДанныеСтроки.Приложение;
		Приложение.ID = ДанныеСтроки.ПриложениеID;
		Приложение.Тип = ДанныеСтроки.ПриложениеТип;
		Приложение.Представление = ДанныеСтроки.ПредставлениеПриложения;
		
		ПодчиненныеЭлементыПриложения = ДанныеСтроки.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыПриложения.Количество() > 0 Тогда
			
			ПервыйПодчиненныйЭлемент = ПодчиненныеЭлементыПриложения[0];
			Если ПервыйПодчиненныйЭлемент.ТипСтроки = "filerole" Тогда
				РольФайлаID = ПервыйПодчиненныйЭлемент.РольФайлаID;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РольФайлаИПриложение = Новый Структура("Владелец, Приложение, РольФайлаID", Владелец, Приложение, РольФайлаID);
	
	Возврат РольФайлаИПриложение;
	
КонецФункции

Функция СимволВозрастание()
	
	Возврат "↓";
	
КонецФункции

Функция СимволУбывание()
	
	Возврат "↑";
	
КонецФункции

Функция СортировкаПоПолюВозможна(ВозможныеПоляДляСортировки, ИмяПоля)
	
	Возврат (ВозможныеПоляДляСортировки[ИмяПоля] <> Неопределено);
	
КонецФункции

#КонецОбласти