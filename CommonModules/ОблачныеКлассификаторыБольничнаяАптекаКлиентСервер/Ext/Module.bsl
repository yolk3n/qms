
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с коллекцией загружаемых классификаторов
#Область РаботаСКоллекциейЗагружаемыхКлассификаторов

Функция СоздатьКоллекциюЗагружаемыхКлассификаторов() Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

Функция ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные = Неопределено) Экспорт
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("РабочиеДанные"  , ПустыеРабочиеДанные());
	ДанныеКлассификатора.Вставить("СлужебныеДанные", ПустыеСлужебныеДанные(ИмяКлассификатора, Идентификатор));
	ДанныеКлассификатора.Вставить("ИсходныеДанные" , Новый Соответствие);
	
	Если ИсходныеДанные <> Неопределено Тогда
		ДанныеКлассификатора.ИсходныеДанные = ИсходныеДанные;
	КонецЕсли;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Процедура ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеКлассификаторы, ДанныеКлассификатора) Экспорт
	
	ИмяКлассификатора = ПолучитьИмяКлассификатора(ДанныеКлассификатора);
	
	ЗагружаемыйКлассификатор = ЗагружаемыеКлассификаторы.Получить(ИмяКлассификатора);
	
	ДополнитьКоллекциюЗагружаемогоКлассификатора(ЗагружаемыйКлассификатор, ДанныеКлассификатора);
	
	ЗагружаемыеКлассификаторы.Вставить(ИмяКлассификатора, ЗагружаемыйКлассификатор);
	
КонецПроцедуры

Процедура ДополнитьКоллекциюЗагружаемогоКлассификатора(ЗагружаемыйКлассификатор, ДанныеКлассификатора) Экспорт
	
	Идентификатор = ПолучитьИдентификаторКлассификатора(ДанныеКлассификатора);
	
	Если ЗагружаемыйКлассификатор = Неопределено Тогда
		ЗагружаемыйКлассификатор = Новый Соответствие;
	КонецЕсли;
	
	СуществующиеДанныеКлассификатора = ЗагружаемыйКлассификатор.Получить(Идентификатор);
	Если СуществующиеДанныеКлассификатора = Неопределено Тогда
		
		СуществующиеДанныеКлассификатора = ДанныеКлассификатора;
		
		Если ДанныеКлассификатора.Свойство("ИсходныеДанные") Тогда
			// Исходные данные всегда конвертируем в соответствие.
			Если ТипЗнч(ДанныеКлассификатора.ИсходныеДанные) <> Тип("Соответствие") Тогда
				НовыеИсходныеДанные = Новый Соответствие;
				Для Каждого КлючИЗначение Из ДанныеКлассификатора.ИсходныеДанные Цикл
					НовыеИсходныеДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				СуществующиеДанныеКлассификатора.ИсходныеДанные = НовыеИсходныеДанные;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ДанныеКлассификатора.Свойство("ИсходныеДанные") Тогда
			Для Каждого КлючИЗначение Из ДанныеКлассификатора.ИсходныеДанные Цикл
				СуществующиеДанныеКлассификатора.ИсходныеДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагружаемыйКлассификатор.Вставить(Идентификатор, СуществующиеДанныеКлассификатора);
	
КонецПроцедуры

Функция ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеКлассификаторы, ИмяКлассификатора, Идентификатор) Экспорт
	
	ЗагружаемыйКлассификатор = ЗагружаемыеКлассификаторы.Получить(ИмяКлассификатора);
	Если ЗагружаемыйКлассификатор = Неопределено Тогда
		ДанныеКлассификатора = ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор);
		ДанныеКлассификатора.СлужебныеДанные.Сопоставлять = Ложь;
		ДанныеКлассификатора.СлужебныеДанные.Записывать = Ложь;
		Возврат ДанныеКлассификатора;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		ДанныеКлассификатора = ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор);
		ДанныеКлассификатора.СлужебныеДанные.Сопоставлять = Ложь;
		ДанныеКлассификатора.СлужебныеДанные.Записывать = Ложь;
		Возврат ДанныеКлассификатора;
	КонецЕсли;
	
	ДанныеКлассификатора = ЗагружаемыйКлассификатор.Получить(Идентификатор);
	Если ДанныеКлассификатора = Неопределено Тогда
		ДанныеКлассификатора = ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор);
		ДанныеКлассификатора.СлужебныеДанные.Сопоставлять = Ложь;
		ДанныеКлассификатора.СлужебныеДанные.Записывать = Ложь;
	КонецЕсли;
	
	ДанныеКлассификатора.Удалить("ИсходныеДанные");
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ПолучитьИмяКлассификатора(ДанныеКлассификатора) Экспорт
	
	СлужебныеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКлассификатора, "СлужебныеДанные");
	Если СлужебныеДанные = Неопределено Тогда
		Возврат СлужебныеДанные;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СлужебныеДанные, "ИмяКлассификатора");
	
КонецФункции

Функция ПолучитьИдентификаторКлассификатора(ДанныеКлассификатора) Экспорт
	
	СлужебныеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКлассификатора, "СлужебныеДанные");
	Если СлужебныеДанные = Неопределено Тогда
		Возврат СлужебныеДанные;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СлужебныеДанные, "Идентификатор");
	
КонецФункции

Функция ЗначениеСвойстваДанныхКлассификатора(ДанныеКлассификатора, ИмяСвойства) Экспорт
	
	РабочиеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКлассификатора, "РабочиеДанные");
	Если РабочиеДанные = Неопределено Тогда
		Возврат РабочиеДанные;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РабочиеДанные, ИмяСвойства);
	
КонецФункции

Процедура УстановитьЗначениеСвойстваДанныхКлассификатора(ДанныеКлассификатора, ИмяСвойства, НовоеЗначениеСвойства) Экспорт
	
	РабочиеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКлассификатора, "РабочиеДанные");
	Если РабочиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РабочиеДанные.Вставить(ИмяСвойства, НовоеЗначениеСвойства);
	
КонецПроцедуры


Функция ЭтоДанныеКлассификатора(ДанныеКлассификатора) Экспорт
	
	Возврат ТипЗнч(ДанныеКлассификатора) = Тип("Структура") И ДанныеКлассификатора.Свойство("РабочиеДанные") И ДанныеКлассификатора.Свойство("СлужебныеДанные");
	
КонецФункции

Процедура ДобавитьОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора, ПричинаОтказа) Экспорт
	
	СлужебныеДанные = ДанныеКлассификатора.СлужебныеДанные;
	СлужебныеДанные.Отказ = Истина;
	СлужебныеДанные.Загружать = Ложь;
	СлужебныеДанные.Конвертировать = Ложь;
	СлужебныеДанные.Сопоставлять = Ложь;
	СлужебныеДанные.Записывать = Ложь;
	СлужебныеДанные.ПричиныОтказа.Добавить(ПричинаОтказа);
	
КонецПроцедуры

Функция УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Экспорт
	
	Возврат ДанныеКлассификатора.СлужебныеДанные.Отказ;
	
КонецФункции

Функция СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора) Экспорт
	
	Разделитель = Символы.Таб + "- ";
	Возврат Разделитель + СтрСоединить(ДанныеКлассификатора.СлужебныеДанные.ПричиныОтказа, Символы.ПС + Разделитель);
	
КонецФункции

#КонецОбласти // РаботаСКоллекциейЗагружаемыхКлассификаторов


////////////////////////////////////////////////////////////////////////////////
// Получение данных сервиса (Выполнение методов API)
#Область ПолучениеДанныхСервиса

Функция ПолучитьКлючСессии(ПараметрыПодключения, КодАутентификации) Экспорт
	
	ЗапросТокена = ДанныеHTTPЗапроса("POST");
	ЗапросТокена.АдресЗапроса = "/its-auth/token";
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("authToken", КодАутентификации);
	
	ЗапросТокена.ТелоЗапроса = ТелоЗапроса;
	
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыПодключения, ЗапросТокена);
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		РезультатЗапроса.ОписаниеОшибки = НСтр("ru = 'Ошибка при получении ключа сессии'") + ":" + Символы.ПС + РезультатЗапроса.ОписаниеОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Результат = РезультатВыполненияОперации();
	Результат.Вставить("Данные", РезультатЗапроса.Данные);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКлючСессииПоТикету(ПараметрыПодключения, Тикет) Экспорт
	
	ЗапросТокена = ДанныеHTTPЗапроса("POST");
	ЗапросТокена.АдресЗапроса = "/auth/token/by-its-onetime-ticket";
	ЗапросТокена.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("itsOnetimeTicket", Тикет);
	
	ЗапросТокена.ТелоЗапроса = ТелоЗапроса;
	
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыПодключения, ЗапросТокена);
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		РезультатЗапроса.ОписаниеОшибки = НСтр("ru = 'Ошибка при получении ключа сессии'") + ":" + Символы.ПС + РезультатЗапроса.ОписаниеОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Результат = РезультатВыполненияОперации();
	Результат.Вставить("Данные", РезультатЗапроса.Данные);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКлючСессииПоЛогинуИПаролю(ПараметрыПодключения, ДанныеАутентификации) Экспорт
	
	Результат = РезультатВыполненияОперации();
	
	Логин  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАутентификации, "Логин");
	Пароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАутентификации, "Пароль");
	Если Не ЗначениеЗаполнено(Логин) Или Не ЗначениеЗаполнено(Пароль) Тогда
		Результат.Статус         = "Ошибка";
		Результат.КодОшибки      = "НеверныйЛогинИлиПароль";
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверный логин или пароль.'");
		Возврат Результат;
	КонецЕсли;
	
	ЗапросТокена = ДанныеHTTPЗапроса("POST");
	ЗапросТокена.АдресЗапроса = "/auth/token/by-its-credentials";
	ЗапросТокена.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("itsLogin"   , Логин);
	ТелоЗапроса.Вставить("itsPassword", Пароль);
	
	ЗапросТокена.ТелоЗапроса = ТелоЗапроса;
	
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыПодключения, ЗапросТокена);
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		РезультатЗапроса.ОписаниеОшибки = НСтр("ru = 'Ошибка при получении ключа сессии'") + ":" + Символы.ПС + РезультатЗапроса.ОписаниеОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Результат.Вставить("Данные", РезультатЗапроса.Данные);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКлючСессииПоКлючуОбновления(ПараметрыПодключения, КлючОбновления) Экспорт
	
	ЗапросТокена = ДанныеHTTPЗапроса("POST");
	ЗапросТокена.АдресЗапроса = "/auth/token/refresh";
	ЗапросТокена.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("refresh_token", КлючОбновления);
	
	ЗапросТокена.ТелоЗапроса = ТелоЗапроса;
	
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыПодключения, ЗапросТокена);
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		РезультатЗапроса.ОписаниеОшибки = НСтр("ru = 'Ошибка при получении ключа сессии'") + ":" + Символы.ПС + РезультатЗапроса.ОписаниеОшибки;
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Результат = РезультатВыполненияОперации();
	Результат.Вставить("Данные", РезультатЗапроса.Данные);
	Возврат Результат;
	
КонецФункции


Функция ПолучитьДанныеКлассификатора(ИмяКлассификатора, ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ИмяКлассификатора = ИмяКлассификатора_СМНН() Тогда
		
		Возврат ПолучитьДанныеКлассификатораСМНН(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_ДВЛП() Тогда
		
		Возврат ПолучитьДанныеКлассификатораДВЛП(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_ЛекарственныеФормы() Тогда
		
		Возврат ПолучитьДанныеКлассификатораЛекарственныеФорм(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_ГРП() Тогда
		
		Возврат ПолучитьДанныеКлассификатораГРП(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_АТХ() Тогда
		
		Возврат ПолучитьДанныеКлассификатораАТХ(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_ФТГ() Тогда
		
		Возврат ПолучитьДанныеКлассификатораФТГ(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_ЕдиницыИзмерения() Тогда
		
		Возврат ПолучитьДанныеКлассификатораЕдиницыИзмерения(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	ИначеЕсли ИмяКлассификатора = ИмяКлассификатора_ЕдиницыИзмеренияДозировки() Тогда
		
		Возврат ПолучитьДанныеКлассификатораЕдиницыИзмерения(ПараметрыПодключения, КодыКлассификатора, ИндексСтраницы, РазмерСтраницы);
		
	Иначе
		
		Результат = РезультатВыполненияОперации();
		Результат.Статус         = "Ошибка";
		Результат.ОписаниеОшибки = НСтр("ru = 'Неизвестный тип получаемого классификатора.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеКлассификатораСМНН(ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(КодыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/smnn/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("codes", КодыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/smnn";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы);
	
КонецФункции

Функция ПолучитьДанныеКлассификатораДВЛП(ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(КодыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-dvlp/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("codes", КодыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-dvlp";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы);
	
КонецФункции

Функция ПолучитьДанныеКлассификатораЛекарственныеФорм(ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(КодыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-form/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("codes", КодыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-form";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы);
	
КонецФункции

Функция ПолучитьДанныеКлассификатораГРП(ПараметрыПодключения, УИДыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(УИДыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-grp/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("uuids", УИДыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-grp";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы, "uuid");
	
КонецФункции

Функция ПолучитьДанныеКлассификатораАТХ(ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(КодыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-atc/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("codes", КодыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-atc";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы);
	
КонецФункции

Функция ПолучитьДанныеКлассификатораФТГ(ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(КодыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-ftg/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("codes", КодыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/esklp-ftg";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы);
	
КонецФункции

Функция ПолучитьДанныеКлассификатораЕдиницыИзмерения(ПараметрыПодключения, КодыКлассификатора = Неопределено, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0) Экспорт
	
	Если ЗначениеЗаполнено(КодыКлассификатора) Тогда
		ДанныеЗапроса = ДанныеHTTPЗапроса("POST");
		ДанныеЗапроса.АдресЗапроса = "references/okei/search";
		ДанныеЗапроса.ТелоЗапроса = Новый Структура("query", Новый Структура("codes", КодыКлассификатора)); // Фильтр записей
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.query.v1+json");
	Иначе
		ДанныеЗапроса = ДанныеHTTPЗапроса("GET");
		ДанныеЗапроса.АдресЗапроса = "references/okei";
		ДанныеЗапроса.Заголовки.Вставить("Content-Type", "application/vnd.1cbn.v1+json");
	КонецЕсли;
	
	ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации);
	
	Возврат ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы, "okei");
	
КонецФункции

// Выполнить HTTP запрос
//
// Параметры:
//  ПараметрыПодключения - Структура - параметры подключения к серверу
//    * Адрес   - Строка - адрес сервера без указания протокола
//    * Порт    - Число  - порт сервера
//    * Таймаут - Число  - таймаут ожидания ответа сервера
//    * ЗащищенноеСоединение - Булево, ЗащищенноеСоединениеOpenSSL - если Истина, то будет создан новый объект ЗащищенноеСоединениеOpenSSL.
//  ДанныеЗапроса - Структура - Параметры запроса на сервере
//    * ТипЗапроса - Строка - метод HTTP запроса
//    * АдресЗапроса - Строка - адрес на сервере
//    * Заголовки - Соответствие - заголовки HTTP запроса
//    * ТелоЗапроса - Строка, ДвоичныеДанные - тело HTTP запроса
//
// Возвращаемое значение:
//  Структура - результат выполнения запроса
//
Функция ВыполнитьHTTPЗапрос(ПараметрыПодключения, ДанныеЗапроса, Перенаправления = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ВыполнитьHTTPЗапрос(ПараметрыПодключения, ДанныеЗапроса);
	#Иначе
		
		HTTPЗапрос = Новый HTTPЗапрос(ДанныеЗапроса.АдресЗапроса, ДанныеЗапроса.Заголовки);
		
		Если ТипЗнч(ДанныеЗапроса.ТелоЗапроса) = Тип("Строка") И Не ПустаяСтрока(ДанныеЗапроса.ТелоЗапроса) Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеЗапроса.ТелоЗапроса);
		ИначеЕсли ТипЗнч(ДанныеЗапроса.ТелоЗапроса) = Тип("ДвоичныеДанные") И ДанныеЗапроса.ТелоЗапроса.Размер() > 0 Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДанныеЗапроса.ТелоЗапроса);
		КонецЕсли;
		
		Адрес = СокрЛП(ПараметрыПодключения.Адрес);
		Порт  = ПараметрыПодключения.Порт;
		Логин = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПодключения, "Логин", "");
		Пароль = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПодключения, "Пароль", "");
		
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПодключения, "ЗащищенноеСоединение", Ложь);
		Если ЗащищенноеСоединение = Истина Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
			ЗащищенноеСоединение = Неопределено;
			// Иначе параметр ЗащищенноеСоединение был задан в явном виде.
		КонецЕсли;
		
		Если ЗащищенноеСоединение = Неопределено Тогда
			Протокол = "HTTP";
		Иначе
			Протокол = "HTTPS";
		КонецЕсли;
		
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);
		
		Попытка
			Соединение = Новый HTTPСоединение(Адрес, Порт, Логин, Пароль, ИнтернетПрокси, ПараметрыПодключения.Таймаут, ЗащищенноеСоединение);
			HTTPОтвет = Соединение.ВызватьHTTPМетод(ДанныеЗапроса.ТипЗапроса, HTTPЗапрос);
		Исключение
			
			URL = СтрШаблон("%1://%2:%3%4", Протокол, Адрес, Формат(Порт, "ЧГ="), ДанныеЗапроса.АдресЗапроса);
			РезультатДиагностики = ОбщегоНазначенияКлиентСервер.ДиагностикаСоединения(URL);
			
			ТекстОшибки = НСтр("ru = 'Не удалось установить HTTP-соединение с сервером %1:%2
			|по причине:
			|%3
			|
			|Результат диагностики:
			|%4'");
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Адрес, Формат(Порт, "ЧГ="), ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), РезультатДиагностики.ОписаниеОшибки);
			
			ДописатьПредставлениеПеренаправлений(Перенаправления, ТекстОшибки);
			
			Результат = РезультатВыполненияОперации();
			Результат.Статус = "Ошибка";
			Результат.ОписаниеОшибки = ТекстОшибки;
			
			ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытияЖурналаРегистрации());
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если HTTPОтвет.КодСостояния = 301 // 301 Moved Permanently
		 Или HTTPОтвет.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
		 Или HTTPОтвет.КодСостояния = 303 // 303 See Other by GET
		 Или HTTPОтвет.КодСостояния = 307 // 307 Temporary Redirect
		 Или HTTPОтвет.КодСостояния = 308 Тогда // 308 Permanent Redirect
			
			Попытка
				
				Если Перенаправления = Неопределено Тогда
					Перенаправления = Новый Массив;
				КонецЕсли;
				
				Если Перенаправления.Количество() > 7 Тогда
					ВызватьИсключение НСтр("ru = 'Превышено количество перенаправлений.'");
				КонецЕсли;
				
				НовыйURL = ЗначениеПараметраОбъекта(HTTPОтвет.Заголовки, "Location");
				Если НовыйURL = Неопределено Тогда 
					ВызватьИсключение НСтр("ru = 'Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'");
				КонецЕсли;
				
				Если ПустаяСтрока(НовыйURL) Тогда
					ВызватьИсключение НСтр("ru = 'Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'");
				КонецЕсли;
				
				НовыйURL = СокрЛП(НовыйURL);
				Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Циклическое перенаправление.
						           |Попытка перейти на %1 уже выполнялась ранее.'"),
						НовыйURL);
				КонецЕсли;
				
				Перенаправления.Добавить(НовыйURL);
				
				Если Не СтрНачинаетсяС(НовыйURL, "http") Тогда
					// Локальное перенаправление
					ПутьНаСервере = НовыйURL;
					НовыеПараметрыПодключения = ПараметрыПодключения;
				Иначе
					СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(НовыйURL);
					НовыеПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыПодключения);
					НовыеПараметрыПодключения.Адрес = СтруктураURI.Хост;
					НовыеПараметрыПодключения.Порт = СтруктураURI.Порт;
					Если СтруктураURI.Схема = "https" Тогда
						ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеПараметрыПодключения, "ЗащищенноеСоединение", Ложь);
						Если ЗащищенноеСоединение = Ложь Тогда
							НовыеПараметрыПодключения.Вставить("ЗащищенноеСоединение", Истина);
						КонецЕсли;
					Иначе
						НовыеПараметрыПодключения.Вставить("ЗащищенноеСоединение", Ложь);
					КонецЕсли;
					ПутьНаСервере = "/" + СтруктураURI.ПутьНаСервере;
				КонецЕсли;
				
				НовыеДанныеЗапроса = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеЗапроса);
				НовыеДанныеЗапроса.АдресЗапроса = ПутьНаСервере;
				
			Исключение
				
				ТекстОшибки = НСтр("ru = 'Не удалось установить HTTP-соединение с сервером %1:%2
				|по причине:
				|%3'");
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Адрес, Формат(Порт, "ЧГ="), ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ДописатьПредставлениеПеренаправлений(Перенаправления, ТекстОшибки);
				
				Результат = РезультатВыполненияОперации();
				Результат.Статус = "Ошибка";
				Результат.ОписаниеОшибки = ТекстОшибки;
				
				ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытияЖурналаРегистрации());
				
				Возврат Результат;
				
			КонецПопытки;
			
			Возврат ВыполнитьHTTPЗапрос(НовыеПараметрыПодключения, НовыеДанныеЗапроса, Перенаправления)
			
		КонецЕсли;
		
		Результат = ПрочитатьОтветТранспортногоМодуля(HTTPОтвет.КодСостояния, HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8), Перенаправления);
		
		ЛогироватьЗапрос(Соединение, ДанныеЗапроса.ТипЗапроса, HTTPЗапрос, HTTPОтвет);
		
		Если Результат.Статус = "Ошибка" И Не Результат.ТребуетсяАвторизация Тогда
			
			ТекстОшибки = НСтр("ru = 'Ошибка при выполнении %1-запроса по адресу %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗапроса.ТипЗапроса, ДанныеЗапроса.АдресЗапроса);
			ТекстОшибки = ТекстОшибки + Символы.ПС + Результат.ОписаниеОшибки;
			
			Результат.ОписаниеОшибки = ТекстОшибки;
			
			ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытияЖурналаРегистрации());
			
		КонецЕсли;
		
		Возврат Результат;
	#КонецЕсли
	
КонецФункции

#КонецОбласти // ПолучениеДанныхСервиса


////////////////////////////////////////////////////////////////////////////////
// Имена загружаемых классификаторов
#Область ИменаЗагружаемыхКлассификаторов

Функция ИмяКлассификатора_ТНВЭД() Экспорт
	
	Возврат "TNVED";
	
КонецФункции

Функция ИмяКлассификатора_ОКПД2() Экспорт
	
	Возврат "OKPD2";
	
КонецФункции

Функция ИмяКлассификатора_ГРП() Экспорт
	
	Возврат "ESKLP_GRP";
	
КонецФункции

Функция ИмяКлассификатора_ФТГ() Экспорт
	
	Возврат "ESKLP_FTG";
	
КонецФункции

Функция ИмяКлассификатора_ГруппыЛекарственныхФорм()Экспорт
	
	Возврат "ГруппыЛекарственныхФорм";
	
КонецФункции

Функция ИмяКлассификатора_ЛекарственныеФормы() Экспорт
	
	Возврат "ESKLP_FORM";
	
КонецФункции

Функция ИмяКлассификатора_АТХ() Экспорт
	
	Возврат "ESKLP_ATC";
	
КонецФункции

Функция ИмяКлассификатора_ДВЛП() Экспорт
	
	Возврат "ESKLP_DVLP";
	
КонецФункции

Функция ИмяКлассификатора_ЕдиницыИзмерения() Экспорт
	
	Возврат "okei";
	
КонецФункции

Функция ИмяКлассификатора_ЕдиницыИзмеренияДозировки() Экспорт
	
	Возврат "ЕдиницыИзмеренияДозировки";
	
КонецФункции

Функция ИмяКлассификатора_МНН() Экспорт
	
	Возврат "МНН";
	
КонецФункции

Функция ИмяКлассификатора_ТорговыеНаименования() Экспорт
	
	Возврат "ТорговыеНаименования";
	
КонецФункции

Функция ИмяКлассификатора_ФормыВыпуска() Экспорт
	
	Возврат "ФормыВыпуска";
	
КонецФункции

Функция ИмяКлассификатора_УпаковкиЛекарственныхСредств() Экспорт
	
	Возврат "УпаковкиЛекарственныхСредств";
	
КонецФункции

Функция ИмяКлассификатора_Упаковки() Экспорт
	
	Возврат "Упаковки";
	
КонецФункции

Функция ИмяКлассификатора_СМНН() Экспорт
	
	Возврат "SMNN";
	
КонецФункции

Функция ИмяКлассификатора_КЛП() Экспорт
	
	Возврат "KLP";
	
КонецФункции

Функция ИмяКлассификатора_Производители() Экспорт
	
	Возврат "Производители";
	
КонецФункции

#КонецОбласти // ИменаЗагружаемыхКлассификаторов


Функция ИдентификаторСвойстваДополнительныхРеквизитовПоКоду(КодСвойстваДополнительногоРеквизита, НаименованиеСвойстваДополнительногоРеквизита = Неопределено) Экспорт
	
	Если КодСвойстваДополнительногоРеквизита = "22215" Тогда
		
		Идентификатор = "ДатаСозданияЗаписиКЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22218" Тогда
		
		Идентификатор = "КомплектностьУпаковки";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22219" Тогда
		
		Идентификатор = "НомерРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22221" Тогда
		
		Идентификатор = "ДатаРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22222" Тогда
		
		Идентификатор = "ДатаОбновленияРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22225" Тогда
		
		Идентификатор = "КоличествоЛекарственныхФормВПервичнойУпаковке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22228" Тогда
		
		Идентификатор = "КоличествоПервичныхУпаковокВоВторичной";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "22229" Тогда
		
		Идентификатор = "КодЕСКЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24778" Тогда
		
		Идентификатор = "ДатаОкончанияДействияЗаписиСМНН";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24779" Тогда
		
		Идентификатор = "ТорговоеНаименование";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24780" Тогда
		
		Идентификатор = "ВладелецРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24781" Тогда
		
		Идентификатор = "НаименованиеПервичнойУпаковкиПолное";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24782" Тогда
		
		Идентификатор = "НаименованиеПервичнойУпаковки";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24783" Тогда
		
		Идентификатор = "НаименованиеВторичнойУпаковкиПолное";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24784" Тогда
		
		Идентификатор = "НаименованиеВторичнойУпаковки";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24785" Тогда
		
		Идентификатор = "СтранаВладельцаРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24786" Тогда
		
		Идентификатор = "КодСтраныВладельцаРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24787" Тогда
		
		Идентификатор = "УникальныйИдентификаторЕСКЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "24788" Тогда
		
		Идентификатор = "ДатаОкончанияДействияЗаписиКЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31177" Тогда
		
		Идентификатор = "ИсходноеОписаниеМНН";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31178" Тогда
		
		Идентификатор = "ИсходноеОписаниеДозировки";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31179" Тогда
		
		Идентификатор = "ИсходноеОписаниеЛекарственнойФормыПолное";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31180" Тогда
		
		Идентификатор = "ПризнакДозированногоЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31181" Тогда
		
		Идентификатор = "ПричинаОкончанияДействияЗаписи";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31182" Тогда
		
		Идентификатор = "ТоварУчаствуетВМДЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31183" Тогда
		
		Идентификатор = "УсловияХранения";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31194" Тогда
		
		Идентификатор = "Признак7ВЗН";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31195" Тогда
		
		Идентификатор = "ЕдиницаИзмеренияМассыОбъемаВПервичнойУпаковкеДляДозированныхЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31196" Тогда
		
		Идентификатор = "МеждународноеНепатентованноеНаименование";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31197" Тогда
		
		Идентификатор = "НаименованиеЛекарственнойФормыПолное";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31198" Тогда
		
		Идентификатор = "ПризнакЖНВЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31199" Тогда
		
		Идентификатор = "ПризнакНаркотическогоВещества";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31312" Тогда
		
		Идентификатор = "КоличествоМассыОбъемаВПервичнойУпаковкеДляДозированныхЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31313" Тогда
		
		Идентификатор = "КоличествоПотребительскихЕдиницВПотребительскойУпаковке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31200" Тогда
		
		Идентификатор = "ДатаСозданияЗаписиСМНН";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "31201" Тогда
		
		Идентификатор = "СМННСоответствуютТовары";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33912" Тогда
		
		Идентификатор = "ПризнакЯдовитогоВещества";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33913" Тогда
		
		Идентификатор = "ПризнакСильнодействующиеВещества";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33914" Тогда
		
		Идентификатор = "ПризнакПринадлежностиКСписку4НаркотическихВеществ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33915" Тогда
		
		Идентификатор = "ПризнакРецептурногоОтпуска";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33916" Тогда
		
		Идентификатор = "ЕдиницаИзмеренияМассыОбъемаВПервичнойУпаковкеОКЕИ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33917" Тогда
		
		Идентификатор = "ДатаОкончанияДействияРУ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33930" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Кол-во вторичн. упак. в третичн. упак.") Тогда
		
		Идентификатор = "КоличествоВторичныхУпаковокВТретичной";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33931" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Название третичной. упак. (сокр.)") Тогда
		
		Идентификатор = "НаименованиеТретичнойУпаковки";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33932" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Название третичной упаковки. упак.") Тогда
		
		Идентификатор = "НаименованиеТретичнойУпаковкиПолное";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33933" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Кол-во лекформ в перв. упак. (норм.)") Тогда
		
		Идентификатор = "КоличествоЛекарственныхФормВПервичнойУпаковке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33992" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Лекарственная форма (сокр.)") Тогда
		
		Идентификатор = "НаименованиеЛекарственнойФормы";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33993" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Актуальная запись") Тогда
		
		Идентификатор = "ЗаписьАктуальная";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33994" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Международное непатентованное наименование (лат.)") Тогда
		
		Идентификатор = "МеждународноеНепатентованноеНаименованиеЛатинское";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "33995" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Международное непатентованное наименование (англ.)") Тогда
		
		Идентификатор = "МеждународноеНепатентованноеНаименованиеАнглийское";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34007" Тогда
		
		Идентификатор = "ДатаАктуальностиЕСКЛП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34008" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("DrugID для оперативного мониторинга ЛС") Тогда
		
		Идентификатор = "УникальныйКодРосздравнадзора";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34009" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Срок годности") Тогда
		
		Идентификатор = "СрокГодности";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34010" Или ВРег(НаименованиеСвойстваДополнительногоРеквизита) = ВРег("Исходное название лекарственной формы (сокр.)") Тогда
		
		Идентификатор = "ИсходноеОписаниеЛекарственнойФормы";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34177" Тогда
		
		Идентификатор = "ВерсияСправочникаСМНН_ФНСИ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34320" Тогда
		
		Идентификатор = "ГруппировочноеНаименованиеМИБПНаАнглийскомЯзыке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34321" Тогда
		
		Идентификатор = "ЗаболеваниеИлиГруппаЗаболеванийМИБП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34322" Тогда
		
		Идентификатор = "ПринадлежностьКНациональномуКалендарюПрофилактическихПрививок";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34323" Тогда
		
		Идентификатор = "ПринадлежностьККалендарюПрививокПоЭпидемическимПоказаниям";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34324" Тогда
		
		Идентификатор = "ПризнакЖивойВакцины";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34325" Тогда
		
		Идентификатор = "ПризнакАссоциированнойВакцины";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34326" Тогда
		
		Идентификатор = "КраткоеНазваниеЛекарственнойФормы";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34327" Тогда
		
		Идентификатор = "КодМКБ10";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34328" Тогда
		
		Идентификатор = "ОбщепринятоеСокращениеНазванияМИБП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34329" Тогда
		
		Идентификатор = "ТорговоеНаименованиеНаАнглийскомЯзыке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34333" Тогда
		
		Идентификатор = "КоличествоДозВПервичнойУпаковке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34331" Тогда
		
		Идентификатор = "ПроизводительНаАнглийскомЯзыке";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34332" Тогда
		
		Идентификатор = "КодМИБП";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34334" Тогда
		
		Идентификатор = "ВерсияСправочникаМИБП_ФНСИ";
		
	ИначеЕсли КодСвойстваДополнительногоРеквизита = "34341" Тогда
		
		Идентификатор = "ОбщепринятоеСокращениеНазванияМИБП";
		
	Иначе
		
		Идентификатор = КодСвойстваДополнительногоРеквизита;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ДанныеHTTPЗапроса(ТипЗапроса)
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЗапроса"          , ВРег(ТипЗапроса));
	Результат.Вставить("АдресЗапроса"        , "");
	Результат.Вставить("ТелоЗапроса"         , "");
	Результат.Вставить("Заголовки"           , Новый Соответствие);
	Результат.Вставить("ПараметрыЗапроса"    , Новый Соответствие);
	
	Если Результат.ТипЗапроса = "POST" Или Результат.ТипЗапроса = "PUT" Тогда
		Результат.Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ВыполнитьЗапросИтеративно(ПараметрыПодключения, ДанныеЗапроса, Знач ИндексСтраницы = 0, Знач РазмерСтраницы = 0, Знач ИмяПоляИдентификатора = "code")
	
	Результат = РезультатВыполненияОперации();
	Результат.Вставить("Данные", Новый Соответствие);
	
	ВыполнитьИтерацию = Истина;
	Пока ВыполнитьИтерацию Цикл
		
		УстановитьПараметрыЗапроса(ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы);
		
		РезультатЗапроса = ВыполнитьЗапрос(ПараметрыПодключения, ДанныеЗапроса);
		
		ВыполненаПереавторизация = ВыполнитьПроверкуАвторизации(ПараметрыПодключения, ДанныеЗапроса, РезультатЗапроса, Результат);
		Если ВыполненаПереавторизация Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатЗапроса.Статус = "Ошибка" Тогда
			Возврат РезультатЗапроса;
		КонецЕсли;
		
		ДополнитьРезультатаВыполненияОперации(Результат.Данные, РезультатЗапроса.Данные, ИмяПоляИдентификатора);
		
		ВыполнитьИтерацию = ВыполнитьИтерацию(РезультатЗапроса, ИндексСтраницы, РазмерСтраницы);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыЗапроса(ДанныеЗапроса, ИндексСтраницы, РазмерСтраницы)
	
	МаксимальноеКоличествоЭлементовНаСтранице = 2000;
	
	ДанныеЗапроса.ПараметрыЗапроса.Вставить("page", ИндексСтраницы);
	ДанныеЗапроса.ПараметрыЗапроса.Вставить("size", ?(ЗначениеЗаполнено(РазмерСтраницы), РазмерСтраницы, МаксимальноеКоличествоЭлементовНаСтранице));
	
КонецПроцедуры

Функция ВыполнитьИтерацию(РезультатЗапроса, ИндексСтраницы, РазмерСтраницы)
	
	Если ЗначениеЗаполнено(РазмерСтраницы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИндексСтраницы = ИндексСтраницы + 1;
	
	ИндексПоследнейСтраницы = РезультатЗапроса.Данные["page"]["totalPages"] - 1;
	
	Возврат ИндексСтраницы <= ИндексПоследнейСтраницы;
	
КонецФункции

Процедура ДополнитьРезультатаВыполненияОперации(ДанныеПриемник, ДанныеИсточник, ИмяПоляИдентификатора)
	
	ПолученныеДанные = ДанныеИсточник["_embedded"]["items"];
	Если ЗначениеЗаполнено(ПолученныеДанные) Тогда
		
		Для Каждого ПолученныйЭлементДанных Из ПолученныеДанные Цикл
			
			Идентификатор = ПолученныйЭлементДанных[ИмяПоляИдентификатора];
			
			ЭлементДанныхПриемник = ДанныеПриемник.Получить(Идентификатор);
			Если ЭлементДанныхПриемник = Неопределено Тогда
				ЭлементДанныхПриемник = Новый Структура;
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из ПолученныйЭлементДанных Цикл
				ЭлементДанныхПриемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
			ДанныеПриемник.Вставить(Идентификатор, ЭлементДанныхПриемник);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьПроверкуАвторизации(ПараметрыПодключения, ДанныеЗапроса, РезультатЗапроса, Результат)
	
	Если РезультатЗапроса.Статус = "Ошибка" Тогда
		Если РезультатЗапроса.ТребуетсяАвторизация Или РезультатЗапроса.СерверВременноНедоступен Тогда
			Если Результат.ПопытокАвторизации < 3 Тогда
				
				Результат.ПопытокАвторизации = Результат.ПопытокАвторизации + 1;
				
				ТаймаутМеждуЗапросами = 2000;
				Таймаут(ТаймаутМеждуЗапросами * Результат.ПопытокАвторизации);
				
				ПараметрыАутентификации = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПолучитьПараметрыАутентификацииНаСервереАПИ(ПараметрыПодключения,, Ложь);
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеЗапроса.Заголовки, ПараметрыАутентификации, Истина);
				
				Возврат Истина;
				
			Иначе
				
				РезультатЗапроса.ТребуетсяАвторизация = Ложь;
				РезультатЗапроса.ОписаниеОшибки = НСтр("ru = 'Превышено количество попыток выполнения запроса.'") + Символы.ПС
					+ НСтр("ru = 'Результат запроса последней попытки:'") + Символы.ПС
					+ РезультатЗапроса.ОписаниеОшибки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Результат.ПопытокАвторизации = 0;
	
	Возврат Ложь;
	
КонецФункции


Функция ВыполнитьЗапрос(ПараметрыПодключения, ДанныеЗапроса)
	
	#Если ВебКлиент Тогда
		Возврат ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ВыполнитьМетодАПИ(ПараметрыПодключения, "ВыполнитьЗапрос", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗапроса));
	#Иначе
		
		УстановитьПараметрыВАдресЗапроса(ДанныеЗапроса);
		
		ТипДанныхЗапроса = ТипЗнч(ДанныеЗапроса.ТелоЗапроса);
		Если ТипДанныхЗапроса <> Тип("Строка") И ТипДанныхЗапроса <> Тип("ДвоичныеДанные") Тогда
			ДанныеЗапроса.ТелоЗапроса = ПреобразоватьЗначениеВJSON(ДанныеЗапроса.ТелоЗапроса);
		КонецЕсли;
		
		Результат = ВыполнитьHTTPЗапрос(ПараметрыПодключения, ДанныеЗапроса);
		
		Если Результат.Статус <> "Ошибка" Тогда
			Если Не СтрНачинаетсяС(СокрЛП(Результат.ОтветТранспортногоМодуля), "<") Тогда
				Попытка
					Результат.Вставить("Данные", ПреобразоватьJSONВЗначение(Результат.ОтветТранспортногоМодуля));
				Исключение
					// вернем как есть, если должен был быть корректный JSON то ошибка возникнет там.
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	#КонецЕсли
	
КонецФункции

Процедура УстановитьПараметрыВАдресЗапроса(ДанныеЗапроса)
	
	Если Не ЗначениеЗаполнено(ДанныеЗапроса.ПараметрыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	АдресЗапросаБезПараметров = ДанныеЗапроса.АдресЗапроса;
	ПозицияПараметровЗапроса = СтрНайти(АдресЗапросаБезПараметров, "?", НаправлениеПоиска.СКонца);
	Если ПозицияПараметровЗапроса > 0 Тогда
		АдресЗапросаБезПараметров = Лев(АдресЗапросаБезПараметров, ПозицияПараметровЗапроса - 1);
	КонецЕсли;
	
	ЧастиПараметровЗапроса = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеЗапроса.ПараметрыЗапроса Цикл
		Значение = ?(ТипЗнч(КлючИЗначение.Значение) = Тип("Число"), Формат(КлючИЗначение.Значение, "ЧН=0; ЧГ=0"), КлючИЗначение.Значение);
		ЧастиПараметровЗапроса.Добавить(СтрШаблон("%1=%2", КлючИЗначение.Ключ, Значение));
	КонецЦикла;
	
	ДанныеЗапроса.АдресЗапроса = АдресЗапросаБезПараметров + "?" + СтрСоединить(ЧастиПараметровЗапроса, "&");
	
КонецПроцедуры


Функция ПрочитатьОтветТранспортногоМодуля(КодСостояния, ОтветТранспортногоМодуля, Перенаправления)
	
	Результат = РезультатВыполненияОперации();
	Результат.Вставить("ОтветТранспортногоМодуля", ОтветТранспортногоМодуля);
	
	Если КодСостояния >= 200 И КодСостояния < 300 Тогда
		
		Результат.Статус = "Успешно";
		
	Иначе
		
		Результат.Статус = "Ошибка";
		Результат.КодОшибки = КодСостояния;
		Если ЗначениеЗаполнено(КодСостояния) Тогда
			Результат.ОписаниеОшибки = РасшифровкаКодаСостоянияHTTP(КодСостояния);
			Результат.ТребуетсяАвторизация = (КодСостояния = 401);
			Результат.НедостаточноПрав     = (КодСостояния = 403);
			Результат.СерверВременноНедоступен = (КодСостояния = 503);
		Иначе
			Результат.ОписаниеОшибки = НСтр("ru = 'Запрос не отправлен.'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтветТранспортногоМодуля) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС + ОтветТранспортногоМодуля;
		КонецЕсли;
		
		ДописатьПредставлениеПеренаправлений(Перенаправления, Результат.ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДописатьПредставлениеПеренаправлений(Перенаправления, ТекстОшибки)
	
	Если Перенаправления <> Неопределено И Перенаправления.Количество() > 0 Тогда 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Выполненные перенаправления (%2):
			           |%3'"),
			ТекстОшибки,
			Перенаправления.Количество(),
			СтрСоединить(Перенаправления, Символы.ПС));
	КонецЕсли;
	
КонецПроцедуры

Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	Если КодСостояния = 304 Тогда // Not Modified
		Расшифровка = НСтр("ru = 'Нет необходимости повторно передавать запрошенные ресурсы.'");
	ИначеЕсли КодСостояния = 400 Тогда // Bad Request
		Расшифровка = НСтр("ru = 'Запрос не может быть исполнен.'");
	ИначеЕсли КодСостояния = 401 Тогда // Unauthorized
		Расшифровка = НСтр("ru = 'Требуется авторизация на сервере.'");
	ИначеЕсли КодСостояния = 402 Тогда // Payment Required
		Расшифровка = НСтр("ru = 'Требуется оплата.'");
	ИначеЕсли КодСостояния = 403 Тогда // Forbidden
		Расшифровка = НСтр("ru = 'Недостаточно прав для выполнения операции.'");
	ИначеЕсли КодСостояния = 404 Тогда // Not Found
		Расшифровка = НСтр("ru = 'Запрашиваемый ресурс не найден на сервере.'");
	ИначеЕсли КодСостояния = 405 Тогда // Method Not Allowed
		Расшифровка = НСтр("ru = 'Метод запроса не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 406 Тогда // Not Acceptable
		Расшифровка = НСтр("ru = 'Запрошенный формат данных не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 407 Тогда // Proxy Authentication Required
		Расшифровка = НСтр("ru = 'Ошибка аутентификации на прокси-сервере'");
	ИначеЕсли КодСостояния = 408 Тогда // Request Timeout
		Расшифровка = НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'");
	ИначеЕсли КодСостояния = 409 Тогда // Conflict
		Расшифровка = НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'");
	ИначеЕсли КодСостояния = 410 Тогда // Gone
		Расшифровка = НСтр("ru = 'Ресурс на сервере был перемешен.'");
	ИначеЕсли КодСостояния = 411 Тогда // Length Required
		Расшифровка = НСтр("ru = 'Сервер требует указание ""Content-length."" в заголовке запроса.'");
	ИначеЕсли КодСостояния = 412 Тогда // Precondition Failed
		Расшифровка = НСтр("ru = 'Запрос не применим к ресурсу'");
	ИначеЕсли КодСостояния = 413 Тогда // Request Entity Too Large
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком большой объем передаваемых данных.'");
	ИначеЕсли КодСостояния = 414 Тогда // Request-URL Too Long
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком длинный URL.'");
	ИначеЕсли КодСостояния = 415 Тогда // Unsupported Media-Type
		Расшифровка = НСтр("ru = 'Сервер заметил, что часть запроса была сделана в неподдерживаемом формате'");
	ИначеЕсли КодСостояния = 416 Тогда // Requested Range Not Satisfiable
		Расшифровка = НСтр("ru = 'Часть запрашиваемого ресурса не может быть предоставлена'");
	ИначеЕсли КодСостояния = 417 Тогда // Expectation Failed
		Расшифровка = НСтр("ru = 'Сервер не может предоставить ответ на указанный запрос.'");
	ИначеЕсли КодСостояния = 429 Тогда // Too Many Requests
		Расшифровка = НСтр("ru = 'Слишком много запросов за короткое время.'");
	ИначеЕсли КодСостояния = 500 Тогда // Internal Server Error
		Расшифровка = НСтр("ru = 'Внутренняя ошибка сервера.'");
	ИначеЕсли КодСостояния = 501 Тогда // Not Implemented
		Расшифровка = НСтр("ru = 'Сервер не поддерживает метод запроса.'");
	ИначеЕсли КодСостояния = 502 Тогда // Bad Gateway
		Расшифровка = НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, 
		                         |получил недействительное ответное сообщение от вышестоящего сервера.'");
	ИначеЕсли КодСостояния = 503 Тогда // Server Unavailable
		Расшифровка = НСтр("ru = 'Сервер временно не доступен.'");
	ИначеЕсли КодСостояния = 504 Тогда // Gateway Timeout
		Расшифровка = НСтр("ru = 'Сервер в роли шлюза или прокси-сервера 
		                         |не дождался ответа от вышестоящего сервера для завершения текущего запроса.'");
	ИначеЕсли КодСостояния = 505 Тогда // HTTP Version Not Supported
		Расшифровка = НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP'");
	ИначеЕсли КодСостояния = 506 Тогда // Variant Also Negotiates
		Расшифровка = НСтр("ru = 'Сервер настроен некорректно, и не способен обработать запрос.'");
	ИначеЕсли КодСостояния = 507 Тогда // Insufficient Storage
		Расшифровка = НСтр("ru = 'На сервере недостаточно места для выполнения запроса.'");
	ИначеЕсли КодСостояния = 509 Тогда // Bandwidth Limit Exceeded
		Расшифровка = НСтр("ru = 'Сервер превысил отведенное ограничение на потребление трафика.'");
	ИначеЕсли КодСостояния = 510 Тогда // Not Extended
		Расшифровка = НСтр("ru = 'Сервер требует больше информации о совершаемом запросе.'");
	ИначеЕсли КодСостояния = 511 Тогда // Network Authentication Required
		Расшифровка = НСтр("ru = 'Требуется авторизация на сервере.'");
	Иначе 
		Расшифровка = НСтр("ru = '<Неизвестный код состояния>.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '[%1] %2'"), 
		КодСостояния, 
		Расшифровка);
	
КонецФункции


Функция РезультатВыполненияОперации(РезультатОснование = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус"              , "Успешно");
	Результат.Вставить("КодОшибки");
	Результат.Вставить("ОписаниеОшибки"      , "");
	Результат.Вставить("ТребуетсяАвторизация", Ложь);
	Результат.Вставить("ПопытокАвторизации"  , 0);
	Результат.Вставить("НедостаточноПрав"    , Ложь);
	Результат.Вставить("СерверВременноНедоступен", Ложь);
	
	Если РезультатОснование <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатОснование);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ЗначениеПараметраОбъекта(Объект, ИмяПараметра) Экспорт
	
	Для Каждого КлючЗначение Из Объект Цикл
		Если СтрСравнить(СокрЛП(КлючЗначение.Ключ), ИмяПараметра) = 0 Тогда
			Возврат КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Транспорт Облачные классификаторы Больничная аптека'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции


Функция ПустыеРабочиеДанные()
	
	РабочиеДанные = Новый Структура;
	РабочиеДанные.Вставить("Ссылка", Неопределено);
	
	Возврат РабочиеДанные;
	
КонецФункции

Функция ПустыеСлужебныеДанные(ИмяКлассификатора, Идентификатор)
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ИмяКлассификатора"         , ИмяКлассификатора);
	СлужебныеДанные.Вставить("Идентификатор"             , Идентификатор);
	СлужебныеДанные.Вставить("КонтрольноеЗначениеДанныхСервиса", "");
	
	СлужебныеДанные.Вставить("Загружать"                 , Истина);
	СлужебныеДанные.Вставить("Загружены"                 , Ложь);
	
	СлужебныеДанные.Вставить("Конвертировать"            , Истина);
	СлужебныеДанные.Вставить("Конвертированы"            , Ложь);
	
	СлужебныеДанные.Вставить("Сопоставлять"              , Истина);
	СлужебныеДанные.Вставить("Сопоставлены"              , Ложь);
	
	СлужебныеДанные.Вставить("Записывать"                , Истина);
	СлужебныеДанные.Вставить("Записаны"                  , Ложь);
	СлужебныеДанные.Вставить("Модифицированы"            , Ложь);
	
	СлужебныеДанные.Вставить("Отказ"                     , Ложь);
	СлужебныеДанные.Вставить("ПричиныОтказа"             , Новый Массив);
	
	СлужебныеДанные.Вставить("ДополнительныеПараметры"   , Неопределено);
	
	Возврат СлужебныеДанные;
	
КонецФункции

Процедура Таймаут(Миллисекунды = 1000) Экспорт
	
	#Если ВебКлиент Тогда
		ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.Таймаут(Миллисекунды);
	#КонецЕсли
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		Параметры = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	#Иначе
		Параметры = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	#КонецЕсли
	
	Параметры.ДождатьсяЗавершения = Истина;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	 Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		КомандаЗапуска = СтрШаблон("ping -n 1 -w %1 127.255.255.255", Формат(Миллисекунды, "ЧДЦ=0; ЧГ="));
	Иначе
		КомандаЗапуска = СтрШаблон("sleep %1", Формат(Миллисекунды / 1000, "ЧДЦ=3; ЧРД=.; ЧГ="));
	КонецЕсли;
	
	#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, Параметры);
	#Иначе
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(КомандаЗапуска, Параметры);
	#КонецЕсли
	
	Пока (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) < Миллисекунды Цикл
		// Если нужное время не прошло, оставшееся время дождемся в цикле.
	КонецЦикла;
	
КонецПроцедуры


#Если Не ВебКлиент Тогда

Функция ПреобразоватьЗначениеВJSON(Значение, НастройкиСериализации = Неопределено) Экспорт
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Значение, НастройкиСериализации);
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПреобразоватьJSONВЗначение(Строка, ПрочитатьВСоответствие = Истина, ИменаСвойствСоЗначениямиДата = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат Строка;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Строка);
	Значение = ПрочитатьJSON(Чтение, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	
	Возврат Значение;
	
КонецФункции

Функция СтрокаВДату(Знач Значение) Экспорт
	
	Попытка
		ДанныеДаты = ПреобразоватьJSONВЗначение(ПреобразоватьЗначениеВJSON(Новый Структура("Дата", Значение)), Ложь, "Дата");
		Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДаты, "Дата");
	Исключение
		Дата = Неопределено;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(Значение);
	КонецЕсли;
	
	Возврат Дата;
	
КонецФункции

Процедура ЛогироватьЗапрос(Соединение, Метод, Запрос, Ответ)
	
	ЛогЗапроса = "";
	
	ЛогЗапроса = ЛогЗапроса + СтрШаблон("%1 %2", Метод, Запрос.АдресРесурса) + Символы.ПС;
	Порт = ?(ЗначениеЗаполнено(Соединение.Порт), Соединение.Порт, ?(Соединение.ЗащищенноеСоединение = Неопределено, 80, 443));
	ЛогЗапроса = ЛогЗапроса + СтрШаблон("Host: %1:%2", Соединение.Сервер, Формат(Порт, "ЧГ=")) + Символы.ПС;
	Для Каждого КлючЗначение Из Запрос.Заголовки Цикл
		ЛогЗапроса = ЛогЗапроса + СтрШаблон("%1: %2", КлючЗначение.Ключ, КлючЗначение.Значение) + Символы.ПС;
	КонецЦикла;
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		ЛогЗапроса = ЛогЗапроса + Символы.ПС + ТелоЗапроса + Символы.ПС;
	КонецЕсли;
	
	ЛогЗапроса = ЛогЗапроса + Символы.ПС;
	
	ЛогЗапроса = ЛогЗапроса + СтрШаблон("%1", Ответ.КодСостояния) + Символы.ПС;
	Для Каждого КлючЗначение Из Ответ.Заголовки Цикл
		ЛогЗапроса = ЛогЗапроса + СтрШаблон("%1: %2", КлючЗначение.Ключ, КлючЗначение.Значение) + Символы.ПС;
	КонецЦикла;
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		ЛогЗапроса = ЛогЗапроса + Символы.ПС + ТелоОтвета + Символы.ПС;
	КонецЕсли;
	
	ЛогЗапроса = СокрЛП(ЛогЗапроса);
	
	ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ЗаписатьИнформациюВЖурналРегистрации(ЛогЗапроса, ИмяСобытияЖурналаРегистрации());
	
КонецПроцедуры

#КонецЕсли


#КонецОбласти // СлужебныеПроцедурыИФункции
