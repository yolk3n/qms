
#Область СлужебныйПрограммныйИнтерфейс

// Получение объекта соединение.
//
// Параметры:
//  СпособОбмена             - ПеречислениеСсылка.СпособыОбменаЭД - способ обмена.
//                             - Неопределено - обмен с сервисом настроек электронного документооборота.
//  Таймаут                    - Число - таймаут для инициализации соединения.
//
// Возвращаемое значение:
//  См. СервисЭДОПовтИсп.СоединениеССервисом
//
Функция СоединениеССервисом(СпособОбмена, Таймаут = 30) Экспорт
	
	Возврат СервисЭДОПовтИсп.СоединениеССервисом(СпособОбмена, Таймаут);
	
КонецФункции

// Возвращает параметры выполнения операции сервиса.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// Возвращаемое значение:
// 	Структура - Описание:
// * РазрешенныеКодыОшибок - Массив -
// * ИдентификаторУчетнойЗаписи - Строка -
// * Таймаут - Число -
// * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД -
// * ТелоЗапроса - ДвоичныеДанные
// * ПараметрыЗапроса - Структура:
//   ** Ключ - Строка
//   ** Значение - Строка
// * Маркер - ДвоичныеДанные
// * Метод - Строка -
// * ПредставлениеОперации - Строка -
// * АдресРесурса - Строка -
// * МаскируемыеПараметрыПриЛогировании - Массив из Строка
Функция НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресРесурса", "");
	Параметры.Вставить("ПредставлениеОперации", "");
	Параметры.Вставить("Метод", "");
	Параметры.Вставить("Маркер", Неопределено);
	Параметры.Вставить("ТребуетсяМаркер", Истина);
	Параметры.Вставить("ПараметрыЗапроса", Новый Структура);
	Параметры.Вставить("Заголовки", Новый Соответствие);
	Параметры.Вставить("ТелоЗапроса", Неопределено);
	Параметры.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	Параметры.Вставить("Таймаут", АвтоматическоеОпределениеТаймаута());
	Параметры.Вставить("ИдентификаторУчетнойЗаписи", "");
	Параметры.Вставить("РазрешенныеКодыОшибок", Новый Массив);
	Параметры.Вставить("МаскируемыеПараметрыПриЛогировании", Новый Массив);
	
	Если КлючСинхронизации <> Неопределено Тогда
		Параметры.Маркер                     = КлючСинхронизации.МаркерРасшифрованный;
		Параметры.СпособОбмена               = КлючСинхронизации.СпособОбмена;
		Параметры.ИдентификаторУчетнойЗаписи = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ПараметрыОперации - см. НовыеПараметрыВыполненияОперацииСервиса
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	МаскируемыеПараметрыПриЛогировании - Массив из Строка
// Возвращаемое значение:
// 	См. НовыйРезультатВыполненияОперации
Функция ВыполнитьОперацию(ПараметрыОперации, КонтекстДиагностики,
		КлючСинхронизации = Неопределено, МаскируемыеПараметрыПриЛогировании = Неопределено) Экспорт
		
	РезультатВыполненияОперации = НовыйРезультатВыполненияОперации();
	
	Если Не ЭтоОперацияPing(ПараметрыОперации)
		И ПараметрыОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО 
		И Не ЕстьДоступКВебСервису1CЭДО(КонтекстДиагностики) Тогда
		Возврат РезультатВыполненияОперации;
	КонецЕсли;

	ОписаниеСоединения = СоединениеССервисом(ПараметрыОперации.СпособОбмена, ПараметрыОперации.Таймаут);
	
	HTTPЗапрос = ЗапросКСервису(ПараметрыОперации);
	
	ПараметрыВызова = ИнтернетСоединениеБЭД.НовыеПараметрыВызоваHTTPМетода();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыВызова.МаскируемыеПараметрыПриЛогировании,
		ПараметрыОперации.МаскируемыеПараметрыПриЛогировании);
	
	РезультатВыполненияЗапроса = ИнтернетСоединениеБЭД.ВызватьHTTPМетод(ОписаниеСоединения, HTTPЗапрос,
		ПараметрыОперации.Метод, ПараметрыОперации.ПредставлениеОперации, КонтекстДиагностики, ПараметрыВызова);
	
	Если Не РезультатВыполненияЗапроса.Успех Тогда
		Возврат РезультатВыполненияОперации;
	КонецЕсли;
	
	РезультатВыполненияОперации.Успех = РезультатВыполненияЗапроса.Ответ.КодСостояния = 200;
	РезультатВыполненияОперации.Ответ = РезультатВыполненияЗапроса.Ответ;
	Если Не РезультатВыполненияОперации.Успех Тогда
		СтандартнаяОбработкаОшибки = Истина;
		ОшибкаОператора = ПрочитатьОписаниеОшибкиОператора(РезультатВыполненияЗапроса.Ответ);
		РезультатВыполненияОперации.ОшибкаОператора = ОшибкаОператора;
		Если КлючСинхронизации <> Неопределено Тогда
			ЗаполнитьОшибкиМаркера(КлючСинхронизации, ОшибкаОператора);
		КонецЕсли;
		ЗаписыватьОшибкуВЖурналРегистрации = Истина;
		Если ИгнорироватьОшибкуВыполненияОперации(ОшибкаОператора) Тогда
			СтандартнаяОбработкаОшибки = Ложь;
			Если ТребуетсяПовторныйЗапросМаркера(ОшибкаОператора) Тогда
				// Если возникла ошибка по причине истечения времени действия маркера или его некорректности,
				// то пробуем получить новый маркер и повторить попытку получения ЭД.
				
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ОшибкаОператора.Текст,
					ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
					УровеньЖурналаРегистрации.Предупреждение);
				ЗаписыватьОшибкуВЖурналРегистрации = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если СтандартнаяОбработкаОшибки Тогда
			ОбработатьОшибкуСервиса(ПараметрыОперации, КонтекстДиагностики, ОшибкаОператора,
				ЗаписыватьОшибкуВЖурналРегистрации);
		КонецЕсли;

	КонецЕсли;

	Возврат РезультатВыполненияОперации;

КонецФункции


#Область Авторизация

// Возвращает зашифрованный маркер доступа к сервису.
//
// Параметры:
//  КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ДанныеСертификата - ДвоичныеДанные - двоичные данные сертификата
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизации
//
// Возвращаемое значение:
// - ДвоичныеДанные - зашифрованный маркер.
// - Неопределено - если маркер не удалось получить.
Функция Авторизоваться(КлючСинхронизации, КонтекстДиагностики,
	ДанныеСертификата = Неопределено, ПараметрыАвторизации = Неопределено) Экспорт
	
	Маркер = Неопределено;
	
	Если ДанныеСертификата = Неопределено Тогда
		ДвоичныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючСинхронизации.ВыбранныйСертификат, "ДанныеСертификата");
	Иначе
		ДвоичныеДанные = ДанныеСертификата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		// Аутентификация на сайте 1С Логин для сервиса 1С ЭДО.
		ИдентификаторУчетнойЗаписи = КлючСинхронизации.ИдентификаторУчетнойЗаписи;
		
		СинхронизацияЭДОКлиентСервер.УстановитьТекущуюУчетнуюЗапись(КонтекстДиагностики, ИдентификаторУчетнойЗаписи);

		Если Не ЗначениеЗаполнено(КлючСинхронизации.СпособОбмена) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан способ обмена. Получение маркера доступа к сервису электронного документооборота невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			СинхронизацияЭДОКлиентСервер.СброситьТекущуюУчетнуюЗапись(КонтекстДиагностики);
			Возврат Маркер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанныеСертификата = ДвоичныеДанные;
			Иначе
				ДвоичныеДанныеСертификата = ДвоичныеДанные.Получить();
			КонецЕсли;

			ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
			ПредставлениеОперации = НСтр("ru = 'Аутентификация в сервисе 1С-ЭДО'");
			Если КлючСинхронизации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				ПредставлениеОперации = НСтр("ru = 'Аутентификация в сервисе 1С-Такском'");
			КонецЕсли;
			ПараметрыВыполненияОперации.ПредставлениеОперации = ПредставлениеОперации;
			ПараметрыВыполненияОперации.АдресРесурса = "CertificateLogin";
			ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
			ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
			ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "edxClientId", ИдентификаторУчетнойЗаписи);
			ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "Gateway", ОповещенияОСобытияхЭДО.АдресДляУведомленийЭДО(КлючСинхронизации.СпособОбмена));
			
			ПараметрыВыполненияОперации.ТелоЗапроса = ДвоичныеДанныеСертификата;
			ПараметрыВыполненияОперации.Таймаут = 7;

			Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);

			Если Не Результат.Успех Тогда
				СинхронизацияЭДОКлиентСервер.СброситьТекущуюУчетнуюЗапись(КонтекстДиагностики);
				Возврат Маркер;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КлючСинхронизации.ДатаПервогоЗапросаМаркера) Тогда
				КлючСинхронизации.ДатаПервогоЗапросаМаркера = ТекущаяДатаСеанса();
			КонецЕсли;
			КлючСинхронизации.МаркерВалиден = Истина;
			КлючСинхронизации.МаркерПросрочен = Ложь;
			КлючСинхронизации.КоличествоЗапросовМаркера = КлючСинхронизации.КоличествоЗапросовМаркера + 1;
			
			Маркер = Результат.Ответ.ПолучитьТелоКакДвоичныеДанные();

		Иначе
			ПодробноеПредставлениеОшибки = НСтр("ru = 'Не удалось получить данные сертификата криптографии %1.'");
			ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%1", "" + КлючСинхронизации.ВыбранныйСертификат);
			ТекстСообщения = НСтр("ru = 'Ошибка аутентификации в сервисе электронного документооборота.'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Аутентификация в сервисе электронного документооборота'"), ПодробноеПредставлениеОшибки, ТекстСообщения);
			СинхронизацияЭДОКлиентСервер.СброситьТекущуюУчетнуюЗапись(КонтекстДиагностики);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указан сертификат аутентификации в сервисе электронного документооборота.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Маркер;
	
КонецФункции

// Расшифровывает маркер аутентификации на сервере для выбранного сертификата если это необходимо и доступно
// 
// Параметры:
//  КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Процедура ЗаполнитьПараметрыАутентификации(КлючиСинхронизации, КонтекстДиагностики) Экспорт
	
	КриптооперацииДоступныНаСервере = КриптографияБЭД.КриптооперацииДоступныНаСервере();
	
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		КлючСинхронизации = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(КлючСинхронизации.ВыбранныйСертификат) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСертификата = Неопределено;
		Для Каждого Сертификат Из КлючСинхронизации.Сертификаты Цикл
			Если Сертификат.Ссылка = КлючСинхронизации.ВыбранныйСертификат Тогда
				ДанныеСертификата = Сертификат;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		МаркерЗашифрованный = Неопределено;
		Если ДанныеСертификата <> Неопределено Тогда
			МаркерЗашифрованный = ДанныеСертификата.МаркерЗашифрованный;
		КонецЕсли;
		
		СертификатДоступенНаСервере = КриптооперацииДоступныНаСервере
			И ЭлектроннаяПодпись.ПолучитьСертификатПоОтпечатку(ДанныеСертификата.Отпечаток, Истина) <> Неопределено;
	
		Если ТипЗнч(МаркерЗашифрованный) = Тип("ДвоичныеДанные") Тогда
			Если ДанныеСертификата.ПарольПолучен И КриптооперацииДоступныНаСервере И СертификатДоступенНаСервере Тогда
				Программа = ДанныеСертификата.Программа;
				МаркерРасшифрованный = КриптографияБЭД.Расшифровать(МаркерЗашифрованный, ДанныеСертификата.ПарольПользователя, КонтекстДиагностики,
					Программа);
				КлючСинхронизации.МаркерРасшифрованный = МаркерРасшифрованный;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияУчетныхЗаписей

// Отправляет регистрационный пакет в сервис 1С-ЭДО.
// 
// Параметры:
// 	ДанныеПакета - см. ДанныеДляРегистрационногоПакета1СЭДО
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПараметрыАвторизации - см. НовыеПараметрыАвторизации
// Возвращаемое значение:
// 	Структура:
// 	 * ТребуетсяПодключениеИнтернетПоддержки - Булево
// 	 * ЕстьОшибки - Булево - Ложь, если регистрационный пакет отправлен успешно
// 	 * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОтправитьРегистрационныйПакет1СЭДО(ДанныеПакета, КонтекстДиагностики = Неопределено,
	ПараметрыАвторизации = Неопределено) Экспорт
	
	РегистрационныйПакет = РегистрационныйПакетДляОператораЭДО(ДанныеПакета.РеквизитыПакета,
		ДанныеПакета.ЗашифрованныеДанныеОператораЭДО, ДанныеПакета.ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДанныеПакета.ДвоичныеДанныеСоглашенияНаПодключениеЭДО,
		ДанныеПакета.ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО);
		
	// Отправка заявления на сервис 1С-ЭДО
	ТекстЗаголовкаСообщения = НСтр("ru = 'Отправка заявления о регистрации на сервисе 1С-ЭДО'");
	
	ШаблонСообщения = НСтр("ru = 'Выполнение операции: %1
								|Заявление № %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстЗаголовкаСообщения,
		ДанныеПакета.РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(
		ТекстСообщения, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, УровеньЖурналаРегистрации.Информация);
		
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Отправка регистрационного пакета 1С-ЭДО'");
	ПараметрыВыполненияОперации.АдресРесурса = "SendRequest";
	ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	
	ДобавленыПараметрыАвторизации = ДобавитьПараметрыАвторизацииЗапроса(ПараметрыВыполненияОперации,КонтекстДиагностики,
		ПараметрыАвторизации);
	
	Ответ = Новый Структура;
	Ответ.Вставить("ТребуетсяПодключениеИнтернетПоддержки", ПараметрыАвторизации.ТребуетсяПодключениеИнтернетПоддержки);
	Ответ.Вставить("ЕстьОшибки", Ложь);
	Ответ.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Если Не ДобавленыПараметрыАвторизации Тогда
		Ответ.ЕстьОшибки = Истина;
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыВыполненияОперации.ТелоЗапроса = РегистрационныйПакет;
	ПараметрыВыполненияОперации.Таймаут = ИнтернетСоединениеБЭД.ТаймаутПоРазмеруФайла(
		РегистрационныйПакет.Размер());
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
	
	Ответ.ЕстьОшибки = Не Результат.Успех;
	Ответ.КонтекстДиагностики = КонтекстДиагностики;
	
	Возврат Ответ;
	
КонецФункции

// Получает состояние заявки на регистрацию в сервисе 1С-ЭДО.
// 
// Параметры:
// 	ИдентификаторыЗаявок - Массив из Строка
// Возвращаемое значение:
// 	Структура:
// 	  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	  * СостояниеРегистрации - Соответствие из КлючИЗначение:
// 	     ** Ключ - Строка - идентификатор заявки
// 	     ** Значение - Структура:
//          ** ИдентификаторОрганизации - Строка
//          ** Результат - Булево
Функция ПолучитьСостояниеРегистрацииВСервисе1СЭДО(ИдентификаторыЗаявок) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеРегистрации", Новый Соответствие);
	
	Для Каждого ИдентификаторЗаявки Из ИдентификаторыЗаявок Цикл
	
		ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
		ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение состояние заявки на регистрацию в сервисе 1С-ЭДО'");
		ПараметрыВыполненияОперации.АдресРесурса = "v2/GetResult/" + ИдентификаторЗаявки;
		ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
		ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
		ПараметрыВыполненияОперации.Таймаут = 60;
	
		РезультатОперации = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
		
		РезультатЗаявки = РезультатОперации.Успех;
		ИдентификаторОрганизации = "";
		
		ТекстыОшибок = Новый Массив;
		Если РезультатОперации.Успех Тогда
			МассивИдентификаторов = Новый Массив;
			СтруктураОтвета = ОбщегоНазначенияБЭД.JSONЗначение(РезультатОперации.Ответ.ПолучитьТелоКакПоток());
			Для каждого Абонент Из СтруктураОтвета.abonents Цикл
				Если Абонент.Свойство("identifier") Тогда
					МассивИдентификаторов.Добавить(Абонент.identifier);
				КонецЕсли;
				Если Абонент.Свойство("error") Тогда
					РезультатЗаявки = Ложь;
					ЗаголовокОшибки = Абонент.error.title;
					Если Абонент.error.Свойство("description") Тогда
						ОписаниеОшибки = Абонент.error.description;
					ИначеЕсли Абонент.error.Свойство("text") Тогда 
						ОписаниеОшибки = Абонент.error.text;
					Иначе
						ОписаниеОшибки = НСтр("ru = 'Произошла неизвестная ошибка при обработке регистрации. Обратитесь в техническую поддержку.'");
					КонецЕсли;
					
					ТекстОшибки = СтрШаблон("%1
						|%2", ЗаголовокОшибки, ОписаниеОшибки);
					ТекстыОшибок.Добавить(ТекстОшибки);
					
					ДанныеОшибки = Новый Массив;
					Если Абонент.error.Свойство("code") Тогда
						ДанныеОшибки.Добавить(СтрШаблон(НСтр("ru = 'Код ошибки: %1'"), Абонент.error.code));
					КонецЕсли;
					Если Абонент.error.Свойство("text") Тогда
						ДанныеОшибки.Добавить(Абонент.error.text);
					КонецЕсли;
					
					ПодробныйТекстОшибки = СтрСоединить(ДанныеОшибки, Символы.ПС);
					
					Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
						ПараметрыВыполненияОперации.ПредставлениеОперации, 
						ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
						ПодробныйТекстОшибки, ТекстОшибки);
					ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
						ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
				КонецЕсли;
			КонецЦикла;
		
			Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
				ИдентификаторОрганизации = МассивИдентификаторов[0];
			КонецЕсли;
		КонецЕсли;
	
		СостояниеРегистрации = Новый Структура;
		СостояниеРегистрации.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
		СостояниеРегистрации.Вставить("Результат", РезультатЗаявки);
		СостояниеРегистрации.Вставить("ОписаниеОшибки", СтрСоединить(ТекстыОшибок, Символы.ПС));
		
		Результат.СостояниеРегистрации.Вставить(ИдентификаторЗаявки, СостояниеРегистрации);
		
	КонецЦикла;
	
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат Результат;

КонецФункции

// Возвращает пакет данных для регистрации сертификатов у оператора 1С-ЭДО.
//
// Параметры:
//   ПараметрыРегистрации - см. СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО
//   Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - если не заполнен,
//                формируется xml-файл, в котором вместо значений, зависящих от сертификата,
//                указано [БудетЗаполненоПослеПодписания]. Такой файл предусмотрен для ознакомления при подписании
//                рег. пакета.
// Возвращаемое значение:
// 	Структура:
// * РеквизитыПакета - Структура
// * ДвоичныеДанныеДляОператораЭДО - ДвоичныеДанные
// * ДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные
// * ОператорЭДОСертификат - Строка - отпечаток сертификата
// * ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные
// * ПодписанныеДвоичныеДанныеДляОператораЭДО - ДвоичныеДанные
// * ЗашифрованныеДанныеОператораЭДО - ДвоичныеДанные
// * ТекстОшибки - Строка - если заполнен, данные сформировать не удалось
Функция ДанныеДляРегистрационногоПакета1СЭДО(ПараметрыРегистрации, Сертификат = Неопределено) Экспорт
	
	ДанныеОператора = РегистрыСведений.ОператорыЭДО.АктуальныеДанныеОператораЭДО(ПараметрыРегистрации.ОператорЭДО);
	
	Ошибки = Неопределено;
	ДанныеРегистрационнойИнформации = ДанныеРегистрационнойИнформации(ПараметрыРегистрации, ДанныеОператора,
		Ошибки, Сертификат);
	
	ДанныеПакета = Новый Структура;
	ДанныеПакета.Вставить("РеквизитыПакета", ДанныеРегистрационнойИнформации.РеквизитыПакета);
	ДанныеПакета.Вставить("ДвоичныеДанныеДляОператораЭДО", ДанныеРегистрационнойИнформации.ДвоичныеДанные);
	ДанныеПакета.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДанныеПоСоглашениюНаПодключениеКЭДО());
	ДанныеПакета.Вставить("ОператорЭДОСертификат", ДанныеОператора.Сертификат);
	ДанныеПакета.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО", Неопределено);
	ДанныеПакета.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО", Неопределено);
	ДанныеПакета.Вставить("ЗашифрованныеДанныеОператораЭДО", Неопределено);
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(Ошибки) Тогда
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ШаблонСообщения = НСтр("ru = 'При формировании регистрационного пакета возникли следующие ошибки:
			|%1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
	КонецЕсли;
	ДанныеПакета.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат ДанныеПакета;
	
КонецФункции

// Возвращает информацию об учетной записи сервиса 1С-Такском.
// 
// Параметры:
// 	РасшифрованныйМаркер - ДвоичныеДанные
// Возвращаемое значение:
//  - Неопределено - если информацию об учетной записи получить не удалось
//  - Структура:
//      * ИдентификаторОрганизации - Строка.
Функция ИнформацияОбУчетнойЗаписи(РасшифрованныйМаркер) Экспорт
	
	ВидОперации = НСтр("ru = 'Получение информации об учетной записи 1С-Такском'");
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.Маркер = РасшифрованныйМаркер;
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	ПараметрыВыполненияОперации.ПредставлениеОперации = ВидОперации;
	ПараметрыВыполненияОперации.АдресРесурса = "GetMyAccountInfo";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 10;
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, Неопределено);
	
	Если Не Результат.Успех Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ИнформацияОбУчетнойЗаписи = РаботаСФайламиБЭД.ПрочитатьXDTO(Результат.Ответ.ПолучитьТелоКакПоток());
	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ТекстСообщения = НСтр("ru = 'Не удалось прочитать ответ от сервиса по причине:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			ПараметрыВыполненияОперации.ПредставлениеОперации, 
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(Неопределено, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);

		Возврат Неопределено;
		
	КонецПопытки;
	
	Результат = Неопределено;
	
	Если ИнформацияОбУчетнойЗаписи <> Неопределено Тогда
		Если ИнформацияОбУчетнойЗаписи.Свойства().Получить("TaxcomId") = Неопределено Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не обнаружено.'");
		ИначеЕсли Не ЗначениеЗаполнено(ИнформацияОбУчетнойЗаписи.TaxcomId) Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не заполнено.'");	
		Иначе
			Результат = Новый Структура;
			Результат.Вставить("ИдентификаторОрганизации", ИнформацияОбУчетнойЗаписи.TaxcomId);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО.'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеОписаниеОшибки, ТекстОшибки);	
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Приглашения

// Получает приглашения к обмену электронными документами.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	ДатаПоследнегоЗапроса - Дата - дата последнего запроса к сервису
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - см. ПриглашенияЭДО.НоваяТаблицаПриглашений
//
Функция ПолучитьПриглашения(КлючСинхронизации, ДатаПоследнегоЗапроса, КонтекстДиагностики) Экспорт
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.АдресРесурса = "GetContactListUpdates";
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение приглашений к обмену электронными документами'");
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 60;
	
	Если ЗначениеЗаполнено(ДатаПоследнегоЗапроса) Тогда
		УниверсальнаяДатаСтрокой = СтрокаИзУниверсальнойДатыВМиллисекундах(ДатаПоследнегоЗапроса,
			КлючСинхронизации.СпособОбмена);
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "date", УниверсальнаяДатаСтрокой);
	КонецЕсли;
	
	Если КлючСинхронизации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "status", "ContactStatus.Incoming");
	КонецЕсли;
	
	РезультатОперации = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики, КлючСинхронизации);
	
	Приглашения = ТаблицаПриглашенийИзОтветаОтСервиса(РезультатОперации, ДатаПоследнегоЗапроса, КлючСинхронизации.ИдентификаторУчетнойЗаписи);
	
	Возврат Приглашения;
	
КонецФункции

// Принимает приглашение к обмену электронными документами.
// 
// Параметры:
// 	ИдентификаторПриглашения - Строка
// 	ИдентификаторУчетнойЗаписи - Строка
// 	Маркер - ДвоичныеДанные
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Структура - Описание:
// * Успех - Булево - Истина, если приглашение принято успешно.
// * ТребуетсяОбновлениеСтатусов - Булево - Истина, если требуется обновить статус приглашения (статус в информационной
//                                          не совпадает со статусом в сервисе).
Функция ПринятьПриглашение(ИдентификаторПриглашения, ИдентификаторУчетнойЗаписи, Маркер, КонтекстДиагностики) Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторПриглашения", ИдентификаторПриглашения);
	ПараметрыОперации.Вставить("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);
	ПараметрыОперации.Вставить("Маркер", Маркер);
	
	Возврат ПринятьОтклонитьПриглашение(ПараметрыОперации, Истина, КонтекстДиагностики);
	
КонецФункции

// Принимает приглашение к обмену электронными документами.
// 
// Параметры:
// 	ИдентификаторПриглашения - Строка
// 	ИдентификаторУчетнойЗаписи - Строка
// 	Маркер - ДвоичныеДанные
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПричинаОтказаОтПриглашения - Строка
// Возвращаемое значение:
// 	Структура - Описание:
// * Успех - Булево - Истина, если приглашение отклонено успешно
// * ТребуетсяОбновлениеСтатусов - Булево - Истина, если требуется обновить статус приглашения (статус в информационной
//                                          не совпадает со статусом в сервисе).
Функция ОтклонитьПриглашение(ИдентификаторПриглашения, ИдентификаторУчетнойЗаписи, Маркер, КонтекстДиагностики,
	ПричинаОтказаОтПриглашения = "") Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторПриглашения", ИдентификаторПриглашения);
	ПараметрыОперации.Вставить("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);
	ПараметрыОперации.Вставить("Маркер", Маркер);
	
	Возврат ПринятьОтклонитьПриглашение(ПараметрыОперации, Ложь, КонтекстДиагностики, ПричинаОтказаОтПриглашения);
	
КонецФункции

// Отправляет приглашения к обмену электронными документами.
// 
// Параметры:
// 	Приглашения - см. НоваяТаблицаПриглашений
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево - Истина, если приглашения отправлены успешно
Функция ОтправитьПриглашения(Приглашения, КлючСинхронизации, КонтекстДиагностики) Экспорт
	
	ТелоЗапроса = ДанныеЗапросаОтправкиПриглашений(Приглашения);
	
	Если ТелоЗапроса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.ПредставлениеОперации =
		НСтр("ru = 'Отправка приглашений к обмену электронными документами'");
	ПараметрыВыполненияОперации.АдресРесурса = "SendContacts";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыВыполненияОперации.ТелоЗапроса = ТелоЗапроса;
	ПараметрыВыполненияОперации.Таймаут = ИнтернетСоединениеБЭД.ТаймаутПоРазмеруФайла(ТелоЗапроса.Размер());
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики, КлючСинхронизации);
	
	Возврат Результат.Успех;
	
КонецФункции

// Возвращает таблицу приглашений.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений:
// * Получатель - ОпределяемыйТип.КонтрагентБЭД
// * Наименование - Строка
// * ИНН - Строка
// * КПП - Строка
// * АдресЭП - Строка
// * ТекстПриглашения - Строка
// * ВнешнийКод - Строка
// * ИдентификаторОрганизации - Строка
// * ИдентификаторКонтрагента - Строка
// * ОператорЭДО - Строка
// * ИмяФайлаСкана - Строка - имя файла соглашения на роуминг
// * ДанныеФайлаСкана - ДвоичныеДанные - соглашения на роуминг
// * СоздаватьНастройкиЭДО - Булево
Функция НоваяТаблицаПриглашений() Экспорт
	
	ТаблицаПриглашений = Новый ТаблицаЗначений;
	ТаблицаПриглашений.Колонки.Добавить("Получатель");
	ТаблицаПриглашений.Колонки.Добавить("Наименование");
	ТаблицаПриглашений.Колонки.Добавить("ИНН");
	ТаблицаПриглашений.Колонки.Добавить("КПП");
	ТаблицаПриглашений.Колонки.Добавить("АдресЭП", Новый ОписаниеТипов("Строка"));
	ТаблицаПриглашений.Колонки.Добавить("ТекстПриглашения");
	ТаблицаПриглашений.Колонки.Добавить("ВнешнийКод");
	ТаблицаПриглашений.Колонки.Добавить("ИдентификаторОрганизации");
	ТаблицаПриглашений.Колонки.Добавить("ИдентификаторКонтрагента");
	ТаблицаПриглашений.Колонки.Добавить("ОператорЭДО");
	ТаблицаПриглашений.Колонки.Добавить("ИмяФайлаСкана");
	ТаблицаПриглашений.Колонки.Добавить("ДанныеФайлаСкана");
	ТаблицаПриглашений.Колонки.Добавить("СоздаватьНастройкиЭДО", Новый ОписаниеТипов("Булево"));
	ТаблицаПриглашений.Колонки.Добавить("EmailОрганизации");
	
	Возврат ТаблицаПриглашений;
	
КонецФункции

#КонецОбласти

#Область ОтправкаИПолучениеТранспортныхКонтейнеров

// Отправляет контейнер через оператора электронного документооборота.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	ОписаниеКонтейнера - см. СинхронизацияЭДО.НовоеОписаниеТранспортногоКонтейнера
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Структура:
//   * Успех - Булево
//   * Ошибка - см. СинхронизацияЭДО.НоваяОшибкаПередачи
//            - Неопределено
Функция ОтправитьКонтейнер(КлючСинхронизации, ОписаниеКонтейнера, КонтекстДиагностики) Экспорт
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Отправка электронного документа'");
	ПараметрыВыполненияОперации.АдресРесурса = "SendMessage" + "/" + СтрЗаменить(ОписаниеКонтейнера.Наименование, "-", "");
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыВыполненияОперации.ТелоЗапроса = ОписаниеКонтейнера.ДвоичныеДанные;
	ПараметрыВыполненияОперации.Таймаут = ИнтернетСоединениеБЭД.ТаймаутПоРазмеруФайла(
		ОписаниеКонтейнера.ДвоичныеДанные.Размер());
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ПередВыполнениемОперацииОтправитьКонтейнер(ПараметрыВыполненияОперации, ОписаниеКонтейнера);
	КонецЕсли;
	
	РезультатВыполненияОперации = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики, КлючСинхронизации);
	
	Успех = РезультатВыполненияОперации.Успех;
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Успех);
	Результат.Вставить("Ошибка", Неопределено);
	Если РезультатВыполненияОперации.ОшибкаОператора <> Неопределено Тогда
		Результат.Ошибка = СинхронизацияЭДО.НоваяОшибкаПередачи();
		Результат.Ошибка.Блокирующая = Ложь;
		Результат.Ошибка.Код = РезультатВыполненияОперации.ОшибкаОператора.Код;
		Результат.Ошибка.Описание = РезультатВыполненияОперации.ОшибкаОператора.Детали;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает электронные документы оператора электронного документооборота.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	ДатаПоследнегоЗапроса - Дата - дата последнего запроса к сервису
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	см. НовыйРезультатПолученияСпискаДокументов
//
Функция ПолучитьДокументыЭДО(КлючСинхронизации, ДатаПоследнегоЗапроса, КонтекстДиагностики) Экспорт
	
	Возврат ПолучитьДокументы(КлючСинхронизации, ДатаПоследнегоЗапроса, "GetMessageList", КонтекстДиагностики);
	
КонецФункции

Функция ПолучитьДокументыЭПД(КлючСинхронизации, ДатаПоследнегоЗапроса, КонтекстДиагностики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД")
		И КлючСинхронизации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		АдресРесурса = МодульОбменСГИСЭПД.АдресРесурсаПолученияСпискаСообщений();
		Возврат ПолучитьДокументы(КлючСинхронизации, 
									ДатаПоследнегоЗапроса, 
									АдресРесурса, 
									КонтекстДиагностики, 
									Перечисления.ВидыСервисовЭДО.ЭПД);
	КонецЕсли;
	
	Возврат НовыйРезультатПолученияСпискаДокументов();
	
КонецФункции

// Получает электронный документ оператора электронного документооборота.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	Документ - СтрокаТаблицыЗначений из см. НоваяТаблицаКонтейнеров
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	ДвоичныеДанные, Неопределено - если получить документ не удалось, возвращается Неопределено.
Функция ПолучитьДокумент(КлючСинхронизации, Документ, КонтекстДиагностики) Экспорт
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение электронного документа оператора электронного документооборота'");
	ПараметрыВыполненияОперации.АдресРесурса = "GetMessage" + "/" + Документ.ИДДокумента;
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "status", "deferred");
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = ТаймаутПоКодуРегламента(Документ.КодРегламента);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ПередВыполнениемОперацииПолучитьДокумент(ПараметрыВыполненияОперации.АдресРесурса, Документ);
	КонецЕсли;
	
	РезультатОперации = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики, КлючСинхронизации);
	
	Если РезультатОперации.Успех Тогда
		Возврат РезультатОперации.Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Определяет, доступна ли отправка подтверждения получения контейнера, см. ПодтвердитьПолучениеСообщения.
// 
// Параметры:
//  СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// 
// Возвращаемое значение:
//  Булево - Отправка подтверждения доступна
Функция ДоступнаОтправкаПодтвержденияПолученияКонтейнера(СпособОбмена) Экспорт
	
	Возврат СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
КонецФункции

// Отправляет запрос оператору электронного документооборота об успешном получении контейнера.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 	ИдентификаторСообщения - Строка
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево - если Истина, подтверждение отправлено успешно.
Функция ПодтвердитьПолучениеКонтейнера(КлючСинхронизации, ИдентификаторСообщения, КонтекстДиагностики) Экспорт
	
	// Для Такскома возвращается ошибка Endpoint not found.
	Если Не ДоступнаОтправкаПодтвержденияПолученияКонтейнера(КлючСинхронизации.СпособОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Подтверждение получения электронного документа оператора электронного документооборота'");
	ПараметрыВыполненияОперации.АдресРесурса = "GetMessageConfirm" + "/" + ИдентификаторСообщения;
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 10;	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики, КлючСинхронизации);
	
	Возврат Результат.Успех;
	
КонецФункции

// Проверяет наличие новых электронных документов в сервисе 1С-ЭДО.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Булево
Функция ЕстьНовыеДокументы(ИдентификаторУчетнойЗаписи) Экспорт
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Проверка наличия новых электронных документов оператора электронного документооборота'");
	ПараметрыВыполненияОперации.АдресРесурса = "IsMessagesExists";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 10;
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "query", ИдентификаторУчетнойЗаписи);
		
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, Неопределено);
	
	Если Результат.Успех Тогда
		
		ОтветСервиса = РаботаСФайламиБЭД.ПрочитатьXDTO(Результат.Ответ.ПолучитьТелоКакПоток());
		
		ЕстьНовыеДокументы = XMLЗначение(Тип("Булево"), ОтветСервиса.Result);
		Возврат ЕстьНовыеДокументы;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Уведомления

// Возвращает настройки уведомлений учетной записи в сервисе 1С-ЭДО.
// 
// Параметры:
// 	КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// Возвращаемое значение:
//  - Неопределено - если настройки уведомлений получить не удалось
//  - Структура:
//      * ПараметрыУведомлений - см. СервисЭДОКлиентСервер.НовыеПараметрыУведомлений
//      * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ПолучитьПараметрыУведомлений(КлючСинхронизации) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.СпособОбмена = КлючСинхронизации.СпособОбмена;
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение информации о свойствах подписки ЭДО'");
	ПараметрыВыполненияОперации.АдресРесурса = "GetSubscriptions/";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 30;
	
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "query", КлючСинхронизации.ИдентификаторУчетнойЗаписи);
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
	
	Если Не Результат.Успех Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ОтветСервиса = РаботаСФайламиБЭД.ПрочитатьXDTO(Результат.Ответ.ПолучитьТелоКакПоток());
	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ТекстСообщения = НСтр("ru = 'Не удалось прочитать ответ от сервиса по причине:'") + Символы.ПС
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			ПараметрыВыполненияОперации.ПредставлениеОперации, 
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);

		Возврат Неопределено;
		
	КонецПопытки;

	ПараметрыУведомлений = СервисЭДОКлиентСервер.НовыеПараметрыУведомлений();
	ПараметрыУведомлений.АдресУведомлений = ОтветСервиса.Mail;
	ПараметрыУведомлений.УведомлятьОСобытиях =
		ЗначениеСтатуса(ОтветСервиса.Total.Status);
	ПараметрыУведомлений.УведомлятьОНовыхПриглашениях =
		ЗначениеСтатуса(ОтветСервиса.NewInvitations.status);
	ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения =
		ЗначениеСтатуса(ОтветСервиса.NewInvitationResults.status);
	ПараметрыУведомлений.УведомлятьОНовыхДокументах =
		ЗначениеСтатуса(ОтветСервиса.NewMessages.status);
	ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах =
		ЗначениеСтатуса(ОтветСервиса.UnfinishedMessages.status);
	ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата =
		ЗначениеСтатуса(ОтветСервиса.CertExpiration.status);
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыУведомлений", ПараметрыУведомлений);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат Результат;
	
КонецФункции

// Обновляет настройки уведомлений учетных записей в сервисе 1C-ЭДО.
//
// Параметры:
//   ПараметрыУведомлений - см. СервисЭДОКлиентСервер.НовыеПараметрыУведомлений
//   КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// Возвращаемое значение:
// 	Структура:
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// * Результат - Булево - если Истина, настройки обновлены успешно.
Функция ОбновитьПараметрыУведомлений(ПараметрыУведомлений, КлючСинхронизации) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Установка информации о свойствах подписки ЭДО'");
	ПараметрыВыполненияОперации.АдресРесурса = "SetSubscriptions";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 30;
	
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "Total",
		XMLСтрока(ПараметрыУведомлений.УведомлятьОСобытиях));
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "NewInvitations",
		XMLСтрока(ПараметрыУведомлений.УведомлятьОНовыхПриглашениях));
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "NewInvitationResults",
		XMLСтрока(ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения));
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "NewMessages",
		XMLСтрока(ПараметрыУведомлений.УведомлятьОНовыхДокументах));
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "UnfinishedMessages",
		XMLСтрока(ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах));
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "CertExpiration",
		XMLСтрока(ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата));
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "mail",
		ПараметрыУведомлений.АдресУведомлений);
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Результат", Результат.Успех);
	СтруктураВозврата.Вставить("КонтекстДиагностики", КонтекстДиагностики);

	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ПараметрыСервисов

// Возвращает настройки сервиса 1С-Такском.
// 
// Возвращаемое значение:
//  Структура:
//   * АдресВебСервиса - Строка
//   * АдресДляПроверкиАктивности - Строка
Функция ПараметрыСервиса1СТакском() Экспорт
	
	ПараметрыСервиса = НовыеПараметрыСервиса();
	ПараметрыСервиса.АдресВебСервиса = "https://1C-api.taxcom.ru/v1.2/API/";
	ПараметрыСервиса.АдресДляПроверкиАктивности = "https://1c-api.taxcom.ru/v1.2/";
	
	Возврат ПараметрыСервиса;
	
КонецФункции

// Возвращает настройки сервиса 1С-ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//   * АдресВебСервиса - Строка
//   * АдресДляПроверкиАктивности - Строка
Функция ПараметрыСервиса1СЭДО() Экспорт
	
	ПараметрыСервиса = НовыеПараметрыСервиса();
	ПараметрыСервиса.АдресВебСервиса = "https://1c-edo.ru/API";
	ПараметрыСервиса.АдресДляПроверкиАктивности = "https://1c-edo.ru/API/GetInfo/1";
	
	Возврат ПараметрыСервиса;
	
КонецФункции

#КонецОбласти

#Область Ошибки

// Возвращает все ошибки по документам, которые добавлены на 1С:Хаб.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//    * Ключ - Строка - код ошибки
//    * Значение - Структура:
//       ** Title - Строка - заголовок ошибки
//       ** Description - Строка - описание ошибки
//       ** Blocking - Булево - блокирующая ошибка
Функция КлассификаторОшибокПередачиДокументов(КонтекстДиагностики) Экспорт
	
	КлассификаторОшибок = Новый Соответствие;
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение классификатора ошибок передачи электронных документов'");
	ПараметрыВыполненияОперации.АдресРесурса = "errors/codes/documents";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 60;
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
	
	Если Результат.Успех Тогда
		КлассификаторОшибок = ОбщегоНазначенияБЭД.JSONЗначение(Результат.Ответ.ПолучитьТелоКакПоток(), Истина);
	КонецЕсли;
	
	Возврат КлассификаторОшибок;
	
КонецФункции

// Проверяет актуальность ошибок.
// 
// Параметры:
// 	ИдентификаторыОшибок - Массив из Строка
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	 Массив из Строка - идентификаторы актуальных ошибок
//   Неопределено - не удалось проверить актуальность ошибок.
Функция ОшибкиПередачиДокументовАктуальны(ИдентификаторыОшибок, КонтекстДиагностики) Экспорт
	
	Результат = Неопределено;
	КоличествоИдентификаторов = ИдентификаторыОшибок.Количество();
	Если КоличествоИдентификаторов = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	МаксимальноеКоличествоВПорции = 10000;
	ПорцииИдентификаторов = Новый Массив;
	Если КоличествоИдентификаторов <= МаксимальноеКоличествоВПорции Тогда
		ПорцииИдентификаторов.Добавить(ИдентификаторыОшибок);
	Иначе
		Счетчик = 0;
		ПорцияИдентификаторов = Новый Массив;
		Для Каждого ИдентификаторОшибки Из ИдентификаторыОшибок Цикл
			ПорцияИдентификаторов.Добавить(ИдентификаторОшибки);
			Счетчик = Счетчик + 1;
			Если Счетчик % МаксимальноеКоличествоВПорции = 0  Или Счетчик = КоличествоИдентификаторов Тогда
				ПорцииИдентификаторов.Добавить(ПорцияИдентификаторов);
				ПорцияИдентификаторов = Новый Массив;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПорцияИдентификаторов Из ПорцииИдентификаторов Цикл
		АктуальныеОшибки = АктуальныеОшибкиПередачиДокументов(ПорцияИдентификаторов, КонтекстДиагностики);
		Если ТипЗнч(АктуальныеОшибки) = Тип("Массив") Тогда
			Если Результат = Неопределено Тогда
				Результат = Новый Массив;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, АктуальныеОшибки);
		Иначе
			Возврат Неопределено; // Если по одной из порций вернулась ошибка, считаем весь запрос неуспешным, т.к.
			// части идентификаторов не будет в результирующем массиве, что будет означать, что ошибки исправлены.
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоКодОшибкиПовторнойОтправки(КодОшибки) Экспорт
	Возврат КодОшибки = 2301 ИЛИ КодОшибки = 2401;
КонецФункции

// Определяет, является ли код ошибки кодом неизвестной ошибки.
// 
// Параметры:
//  КодОшибки - Число
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоКодНеизвестнойОшибки(КодОшибки) Экспорт
	
	Возврат КодОшибки = 0;
	
КонецФункции

// Определяет, является ли код ошибки кодом ошибки просроченного маркера.
// 
// Параметры:
//  КодОшибки - Число
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоКодОшибкиПросроченногоМаркера(КодОшибки) Экспорт
	
	Возврат КодОшибки = 1201;
	
КонецФункции

// Определяет, является ли код ошибки кодом ошибки невалидного маркера.
// 
// Параметры:
//  КодОшибки - Число
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоКодОшибкиНевалидногоМаркера(КодОшибки) Экспорт
	
	Возврат КодОшибки = 7001;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Получает операторов электронного документооборота.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	ТаблицаЗначений:
//    * Идентификатор - Строка
//    * Наименование - Строка
//    * ИНН - Строка
//    * КПП - Строка
//    * ОГРН - Строка
//    * Сертификат - Строка
Функция ПолучитьОператоровЭлектронногоДокументооборота(КонтекстДиагностики) Экспорт
	
	Операторы = Новый ТаблицаЗначений;
	Операторы.Колонки.Добавить("Идентификатор");
	Операторы.Колонки.Добавить("Наименование");
	Операторы.Колонки.Добавить("ИНН");
	Операторы.Колонки.Добавить("КПП");
	Операторы.Колонки.Добавить("ОГРН");
	Операторы.Колонки.Добавить("Сертификат");
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение данных операторов электронного документооборота'");
	ПараметрыВыполненияОперации.АдресРесурса = "GetOperators";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 60;
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
	
	Если Результат.Успех Тогда
		ОтветСервиса = РаботаСФайламиБЭД.ПрочитатьXDTO(Результат.Ответ.ПолучитьТелоКакПоток());
		ОператорыИзСервиса = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОтветСервиса, "Operator");
		Для Каждого ОператорИзСервиса Из ОператорыИзСервиса Цикл
			Оператор = Операторы.Добавить();
			Оператор.Идентификатор = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОператорИзСервиса, "ИдОперЭДО", "");
			Оператор.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОператорИзСервиса, "НаимОрг", "");
			Оператор.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОператорИзСервиса, "ИННЮЛ", "");
			Оператор.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОператорИзСервиса, "КПП", "");
			Оператор.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОператорИзСервиса, "ОГРН", "");
			Оператор.Сертификат = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОператорИзСервиса, "Сертификат", "");
		КонецЦикла;
	КонецЕсли;
	
	Возврат Операторы;
	
КонецФункции

// Возвращает дату для запросов к сервису, используемую по умолчанию.
// 
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты
Функция ДатаЗапросаПоУмолчанию() Экспорт
	
	Возврат ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(Дата(2000, 1, 1));
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений:
// * ИДПакета - Строка
// * ИДДокументооборота - Строка
// * КодТранзакции - Строка
// * КодРегламента - Строка
// * ИДДокумента - Строка
// * ДвоичныеДанные - ДвоичныеДанные
// * Приоритет - Число
// * ВидСервисаЭДО - ПеречислениеСсылка.ВидыСервисовЭДО
// * АдресРесурсаКонтрагента - Строка
Функция НоваяТаблицаКонтейнеров() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДПакета", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИДДокументооборота", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("КодТранзакции", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("КодРегламента", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИДДокумента", 	Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(80, ДопустимаяДлина.Переменная)));
	ТЗ.Колонки.Добавить("ДвоичныеДанные");
	ТЗ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ВидСервисаЭДО", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСервисовЭДО"));
	ТЗ.Колонки.Добавить("АдресРесурсаКонтрагента", Новый ОписаниеТипов("Строка"));
	
	Возврат ТЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в параметры запроса тикет аутентификации или логин/пароль интернет-поддержки.
// 
// Параметры:
//  ПараметрыВыполненияОперации - см. НовыеПараметрыВыполненияОперацииСервиса
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизации
Функция ДобавитьПараметрыАвторизацииЗапроса(ПараметрыВыполненияОперации, КонтекстДиагностики,
	ПараметрыАвторизации = Неопределено)
	
	Если ПараметрыАвторизации = Неопределено Тогда
		ПараметрыАвторизации = НовыеПараметрыАвторизации();
	КонецЕсли;
	
	Если ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
		И Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			ВидОшибки = ИнтеграцияБИПБЭДКлиентСервер.ВидОшибкиИнтернетПоддержка();
			ТекстОшибки = НСтр("ru = 'Не заполнены данные интернет-поддержки.'");
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ПараметрыВыполненияОперации.ПредставлениеОперации,
				ВидОшибки, ТекстОшибки, ТекстОшибки);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			Возврат Ложь;
		КонецЕсли;
		
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "login", ДанныеАутентификации.Логин);
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "password", ДанныеАутентификации.Пароль, Истина);
		
	Иначе
		
		ТикетАутентификации = ТикетАутентификации(КонтекстДиагностики, ПараметрыАвторизации);
		Если Не ЗначениеЗаполнено(ТикетАутентификации) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "ticket", ТикетАутентификации);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТикетАутентификации(КонтекстДиагностики, ПараметрыАвторизации = Неопределено)
	
	Если ПараметрыАвторизации = Неопределено Тогда
		ПараметрыАвторизации = НовыеПараметрыАвторизации();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	Тикет = ИнтеграцияБИПБЭД.БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена,,,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(Тикет) Тогда
		ПараметрыАвторизации.ТребуетсяПодключениеИнтернетПоддержки = ИнтернетПоддержкаПользователейПодключена
			И ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки();
			СинхронизацияЭДОКлиентСервер.СброситьТекущуюУчетнуюЗапись(КонтекстДиагностики);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тикет;
	
КонецФункции

Функция ФорматДатыЗапроса(СпособОбмена)
	
	ФорматДатыЗапроса = "ДФ='yyyy-MM-dd HH:mm:ss'";
	Если СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		ФорматДатыЗапроса = "ДФ='yyyy-MM-ddTHH:mm:ss'";
	КонецЕсли;
	
	Возврат ФорматДатыЗапроса;
	
КонецФункции

// Заполняет ошибки маркера в ключе синхронизации.
// 
// Параметры:
//  КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
//  ОшибкаОператора - см. ПрочитатьОписаниеОшибкиОператора
Процедура ЗаполнитьОшибкиМаркера(КлючСинхронизации, ОшибкаОператора)
	
	Если ЭтоКодОшибкиПросроченногоМаркера(ОшибкаОператора.Код) Тогда
		КлючСинхронизации.МаркерПросрочен = Истина;
	КонецЕсли;
	
	Если ЭтоКодОшибкиНевалидногоМаркера(ОшибкаОператора.Код) Тогда
		КлючСинхронизации.МаркерВалиден = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет, требуется ли проигнорировать ошибку выполнения операции. Например, операция, завершенная с такой ошибкой
// считается успешной, т.к. уже была выполнена ранее или будет выполнена повторно, в случае просроченного маркера.
// 
// Параметры:
//  ОшибкаОператора - см. ПрочитатьОписаниеОшибкиОператора
// 
// Возвращаемое значение:
//  Булево
Функция ИгнорироватьОшибкуВыполненияОперации(ОшибкаОператора)
	
	Возврат ЭтоКодОшибкиПовторнойОтправки(ОшибкаОператора.Код)
		Или ЭтоКодОшибкиПросроченногоМаркера(ОшибкаОператора.Код)
		Или ЭтоКодОшибкиНевалидногоМаркера(ОшибкаОператора.Код);
	
КонецФункции

// Определяет, требуется ли запросить маркер повторно, напр., из-за истечения срока его действия.
// 
// Параметры:
//  ОшибкаОператора - см. ПрочитатьОписаниеОшибкиОператора
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяПовторныйЗапросМаркера(ОшибкаОператора)
	
	Возврат ЭтоКодОшибкиПросроченногоМаркера(ОшибкаОператора.Код)
		Или ЭтоКодОшибкиНевалидногоМаркера(ОшибкаОператора.Код);
	
КонецФункции

Процедура ОбработатьОшибкуСервиса(ПараметрыОперации, КонтекстДиагностики, ОшибкаОператора,
	ЗаписыватьОшибкуВЖурналРегистрации)
	
	Если ЗначениеЗаполнено(ПараметрыОперации.ПредставлениеОперации) Тогда
		ВидОперации = ПараметрыОперации.ПредставлениеОперации;
	Иначе
		ВидОперации = НСтр("ru = 'Выполнение запроса к сервису 1С-ЭДО'");
	КонецЕсли;
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ОшибкаОператора.Текст,
		ОшибкаОператора.Описание);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ЗаписыватьОшибкуВЖурналРегистрации);
	
КонецПроцедуры

// Возвращает подготовленный HTTP запрос к сервису.
// 
// Параметры:
//  ПараметрыОперации - см. НовыеПараметрыВыполненияОперацииСервиса
// 
// Возвращаемое значение:
//  HTTPЗапрос
Функция ЗапросКСервису(ПараметрыОперации)
	
	Маркер = ПараметрыОперации.Маркер;
	МаркерСтрокой = "";
	Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
		МаркерСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Маркер);
	ИначеЕсли ТипЗнч(Маркер) = Тип("Строка") Тогда 
		МаркерСтрокой = Маркер;
	КонецЕсли;

	Если ПараметрыОперации.ТребуетсяМаркер И Не ЗначениеЗаполнено(МаркерСтрокой) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен маркер'");
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из ПараметрыОперации.ПараметрыЗапроса Цикл
		ЗначениеПараметра = КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL);
		МассивПараметров.Добавить(Параметр.Ключ + "=" + ЗначениеПараметра);
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыОперации.ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыОперации.ТелоЗапроса);
	ИначеЕсли ТипЗнч(ПараметрыОперации.ТелоЗапроса) = Тип("Строка") Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыОперации.ТелоЗапроса);
	КонецЕсли;

	АдресРесурса = ПараметрыОперации.АдресРесурса;
	Если МассивПараметров.Количество() Тогда
		АдресРесурса = АдресРесурса + "?" + СтрСоединить(МассивПараметров, "&");
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Assistant-Key", МаркерСтрокой);
	Заголовки.Вставить("Integrator-Id", ИдентификаторИнтеграционногоРешения());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Заголовки, ПараметрыОперации.Заголовки);
	
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	HTTPЗапрос.Заголовки = Заголовки;

	Возврат HTTPЗапрос;
	
КонецФункции

// Возвращает описание ошибки оператора.
// 
// Параметры:
//  Ответ - HTTPОтвет
//  ТекстОшибкиПоУмолчанию - Строка
// 
// Возвращаемое значение:
//  Структура:
// * Код - Число
// * Текст - Строка
// * Данные - Соответствие из КлючИЗначение:
//    * Ключ - Строка
//    * Значение - Строка, Число - 
// * Детали - Строка
// * Описание - Строка
// * ИстекСрокДействияМаркера - Булево
// * ДополнительныеДанные - Неопределено 
Функция ПрочитатьОписаниеОшибкиОператора(Знач Ответ, Знач ТекстОшибкиПоУмолчанию = "")
	
	Если Не ЗначениеЗаполнено(ТекстОшибкиПоУмолчанию) Тогда
		ТекстОшибкиПоУмолчанию = НСтр("ru = 'Неизвестная ошибка.'");
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("Код", 0);
	Ошибка.Вставить("Текст", ТекстОшибкиПоУмолчанию);
	Ошибка.Вставить("Данные", Новый Соответствие);
	Ошибка.Вставить("Детали", "");
	Ошибка.Вставить("Описание", "");
	Ошибка.Вставить("ИстекСрокДействияМаркера", Ложь);
	Ошибка.Вставить("ДополнительныеДанные", Неопределено);
	
	Попытка
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Ошибка.Текст = ТелоОтвета;
		Данные = ОбщегоНазначенияБЭД.JSONЗначение(ТелоОтвета, Истина); // Соответствие
		
		Ошибка.Данные = Данные;
		Ошибка.Детали = Данные["Details"];
		Ошибка.Описание = Данные["CommonDescription"];
		Ошибка.Код = Данные["ApiErrorCode"];
		Ошибка.ДополнительныеДанные = Данные["AdditionalData"];
		Ошибка.ИстекСрокДействияМаркера = ЭтоКодОшибкиПросроченногоМаркера(Ошибка.Код);
	Исключение
		
		Если Не ЗначениеЗаполнено(Ошибка.Детали) Тогда
			Ошибка.Детали = Ошибка.Текст;
		КонецЕсли;
		
	КонецПопытки;
		
	Возврат Ошибка;
	
КонецФункции


Функция АвтоматическоеОпределениеТаймаута()
	
	Возврат -1;
	
КонецФункции

#Область Приглашения

// Читает запрос приглашений от оператора электронного документооборота.
//
// Параметры:
//  РезультатВыполненияОперации - см. НовыйРезультатВыполненияОперации
//  ДатаВремяЗапроса - Дата - дата последнего запроса.
//  ИдентификаторУчетнойЗаписи - Строка - идентификатор учетной записи организации.
//
Функция ТаблицаПриглашенийИзОтветаОтСервиса(РезультатВыполненияОперации, ДатаВремяЗапроса, ИдентификаторУчетнойЗаписи)
	
	ТаблицаКонтрагентов = ПриглашенияЭДО.НоваяТаблицаПриглашений();
	Если Не РезультатВыполненияОперации.Успех Тогда
		Возврат ТаблицаКонтрагентов;
	КонецЕсли;
	
	ОтветСервиса = РезультатВыполненияОперации.Ответ;
	
	ДатаВремяЗапроса = ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(Дата(2000, 1, 1));
	
	Попытка
		
		ЭД = РаботаСФайламиБЭД.ПрочитатьXDTO(ОтветСервиса.ПолучитьТелоКакПоток());
		
		ДатаВремяЗапроса = УниверсальнаяДатаВМиллисекундахИзСтроки(ЭД.Asof);
		
		Если ЭД.Свойства().Получить("Contact") <> Неопределено Тогда
			
			Если ТипЗнч(ЭД.Contact) = Тип("СписокXDTO") Тогда
				Для Каждого Контакт Из ЭД.Contact Цикл
					ПрочитатьКонтакт(Контакт, ТаблицаКонтрагентов, ИдентификаторУчетнойЗаписи);
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭД.Contact) = Тип("ОбъектXDTO") Тогда
				ПрочитатьКонтакт(ЭД.Contact, ТаблицаКонтрагентов, ИдентификаторУчетнойЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных ответа сервиса: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВидОперации = НСтр("ru = 'Чтение приглашений к обмену электронными документами.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

// Читает контакт и добавляет его в таблицу ТаблицаКонтактов.
// 
// Параметры:
// 	Контакт - ОбъектXDTO, СписокXDTO -
// 	ТаблицаКонтактов - см. ПриглашенияЭДО.НоваяТаблицаПриглашений
// 	ИдентификаторУчетнойЗаписи - Строка - Описание
Процедура ПрочитатьКонтакт(Контакт, ТаблицаКонтактов, ИдентификаторУчетнойЗаписи)
	
	Строка = ТаблицаКонтактов.Добавить();
	Строка.НомерСтроки = ТаблицаКонтактов.Количество();
	Строка.ИдентификаторОрганизации = ИдентификаторУчетнойЗаписи;
	Строка.ИНН = ?(ТипЗнч(Контакт.Inn) = Тип("ОбъектXDTO"), "", Контакт.Inn);
	
	ДатаИзменения = СтрЗаменить(Контакт.State.Changed, " ", "T");
	Строка.Изменен = УниверсальнаяДатаВМиллисекундахИзСтроки(ДатаИзменения);
	Если Контакт.Свойства().Получить("Kpp") <> Неопределено И ТипЗнч(Контакт.Kpp) = Тип("Строка") Тогда
		Строка.КПП = Контакт.Kpp;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("ExternalContactId") <> Неопределено
		И ТипЗнч(Контакт.ExternalContactId) = Тип("Строка") Тогда
		Строка.ВнешнийИД = Контакт.ExternalContactId;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("Name") <> Неопределено И ТипЗнч(Контакт.Name) = Тип("Строка") Тогда
		Строка.Наименование = Контакт.Name;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("Comment") <> Неопределено И ТипЗнч(Контакт.Comment) = Тип("Строка") Тогда
		Строка.ТекстПриглашения = Контакт.Comment;
	КонецЕсли;
	
	Строка.Состояние = ПреобразоватьТекстСтатусаПриглашения(Контакт.State.Code);
	Если Контакт.State.Code = "Error" Тогда
		ПодробноеОписаниеОшибки = Контакт.State.Последовательность().ПолучитьТекст(0);
		Если ЗначениеЗаполнено(ПодробноеОписаниеОшибки) Тогда
			Строка.ОписаниеОшибки = ПодробноеОписаниеОшибки;
		Иначе
			Строка.ОписаниеОшибки = ПреобразоватьТекстСтатусаПриглашения(Контакт.State.ErrorCode);
		КонецЕсли;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("EDXClientId") <> Неопределено Тогда
		Строка.Идентификатор = Контакт.EDXClientId;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("RejectComment") <> Неопределено И ТипЗнч(Контакт.RejectComment) = Тип("Строка") Тогда
		Строка.ПричинаОтказаОтПриглашения = Контакт.RejectComment;
	КонецЕсли;
	
	Если Контакт.Свойства().Получить("OperatorId") <> Неопределено Тогда
		Строка.ИдентификаторОператора = Контакт.OperatorId;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьТекстСтатусаПриглашения(КодСтатуса)
	
	Если КодСтатуса = "Incoming" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыПриглашений.ТребуетсяСогласие; //"Входящий запрос";
	ИначеЕсли КодСтатуса = "Rejected" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыПриглашений.Отклонено; //"Отсоединен"
	ИначеЕсли КодСтатуса = "Accepted" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыПриглашений.Принято; //"Присоединен"
	ИначеЕсли КодСтатуса = "Sent" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыПриглашений.ОжидаемСогласия; //"Ожидаем согласия"
	ИначеЕсли КодСтатуса = "Error" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыПриглашений.Ошибка; // "Ошибка"
	
	ИначеЕсли КодСтатуса = "InvalidINN" Тогда
		ВозвращаемоеЗначение = НСтр("ru ='Неправильный ИНН'");
	ИначеЕсли КодСтатуса = "InvalidEmail" Тогда
		ВозвращаемоеЗначение = НСтр("ru ='Неправильный адрес электронной почты'");
	Иначе
		ВозвращаемоеЗначение = КодСтатуса;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Функция СписокЭлектронныхДокументовИзОтветаОтСервиса(РезультатВыполненияОперации, ДатаПоследнегоЗапроса, ВидСервисаЭДО = Неопределено)
	
	Результат = НовыйРезультатПолученияСпискаДокументов();
	Результат.ДатаПоследнегоЗапроса = ДатаПоследнегоЗапроса;
	
	Если Не РезультатВыполненияОперации.Успех Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТЗ = Результат.ЭлектронныеДокументы;
	
	СписокЭД_XML = РезультатВыполненияОперации.Ответ.ПолучитьТелоКакСтроку();
	
	ДатаВремяЗапроса = Неопределено;
	
	Если ЗначениеЗаполнено(СписокЭД_XML) Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СписокЭД_XML);
		
		ИДДокументооборота = Неопределено;
		КодТранзакции      = Неопределено;
		КодРегламента      = Неопределено;
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "ContainerDescription" Тогда
				ДатаВремяЗапроса = ЧтениеXML.ПолучитьАтрибут("LastRecordDateTime");
				ДатаВремяЗапроса = УниверсальнаяДатаВМиллисекундахИзСтроки(ДатаВремяЗапроса);
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "DocFlow" Тогда
				ИДДокументооборота = ЧтениеXML.ПолучитьАтрибут("Id");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Document" Тогда
				КодТранзакции      = ЧтениеXML.ПолучитьАтрибут("TransactionCode");
				КодРегламента      = ЧтениеXML.ПолучитьАтрибут("ReglamentCode");
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Identifiers" Тогда
				
				СтрТЗ = ТЗ.Добавить();
				СтрТЗ.ИДПакета           = ЧтениеXML.ПолучитьАтрибут("InternalDocumentGroupId");
				СтрТЗ.ИДДокументооборота = ИДДокументооборота;
				СтрТЗ.ИДДокумента        = ЧтениеXML.ПолучитьАтрибут("InternalId");
				СтрТЗ.КодТранзакции      = КодТранзакции;
				СтрТЗ.КодРегламента      = КодРегламента;
				СтрТЗ.ВидСервисаЭДО      = ВидСервисаЭДО;
				
				Если КодТранзакции = "MainDocument" Тогда
					
					СтрТЗ.Приоритет = 0;
				ИначеЕсли КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
					
					СтрТЗ.Приоритет = 1;
				ИначеЕсли КодТранзакции = "Invoice" Тогда
					
					СтрТЗ.Приоритет = 2;
				ИначеЕсли КодТранзакции = "PostDateConfirmation"
					ИЛИ КодТранзакции = "SendConfirmation"
					ИЛИ КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					
					СтрТЗ.Приоритет = 3;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					
					СтрТЗ.Приоритет = 4;
				ИначеЕсли КодТранзакции = "MainDocumentReject" Тогда
					
					СтрТЗ.Приоритет = 5;
				Иначе
					
					СтрТЗ.Приоритет = 6;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Type" Тогда
				
				ТипДокумента = ЧтениеXML.ПолучитьАтрибут("Name");
				
				Если КодТранзакции = "Invoice"
					И (ТипДокумента = "PrimaryAccountingDocumentVendor"
						ИЛИ ТипДокумента = "PrimaryAccountingDocumentVendorConsignment"
						ИЛИ ТипДокумента = "PrimaryAccountingDocumentVendorWorkResult"
						ИЛИ ТипДокумента = "PrimaryAccountingDocumentCustomer"
						ИЛИ ТипДокумента = "PrimaryAccountingDocumentCustomerConsignment"
						ИЛИ ТипДокумента = "PrimaryAccountingDocumentCustomerWorkResult"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentVendor"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentVendorConsignment"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentVendorWorkResult"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentCustomer"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentCustomerConsignment"
						ИЛИ ТипДокумента = "CorPrimaryAccountingDocumentCustomerWorkResult") Тогда
					
					СтрТЗ.Приоритет = 1;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ТЗ.Сортировать("Приоритет");
	КонецЕсли;
	
	Результат.ДатаПоследнегоЗапроса = ДатаВремяЗапроса;
	
	Возврат Результат;
	
КонецФункции

// Описание
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Успех - Булево - если Истина, операция выполнена успешно.
// * Ответ - HTTPСервисОтвет, Неопределено - ответ сервиса.
// * ОшибкаОператора - Структура
Функция НовыйРезультатВыполненияОперации()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успех", Ложь);
	РезультатВыполнения.Вставить("Ответ", Неопределено);
	РезультатВыполнения.Вставить("ОшибкаОператора", Неопределено);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Добавляет параметр запроса.
// 
// Параметры:
//  ПараметрыВыполненияОперации - см. НовыеПараметрыВыполненияОперацииСервиса
//  ИмяПараметра - Строка 
//  ЗначениеПараметра - Строка
//  МаскироватьПриЛогировании - Булево - при записи ошибки в журнал регистрации, значение параметра будет замаскировано
Процедура ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, ИмяПараметра, ЗначениеПараметра,
	МаскироватьПриЛогировании = Ложь)
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ПараметрыВыполненияОперации.ПараметрыЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
	Если МаскироватьПриЛогировании Тогда
		ПараметрыВыполненияОперации.МаскируемыеПараметрыПриЛогировании.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОперацияPing(ПараметрыОперации)
	
	Возврат ПараметрыОперации.АдресРесурса = АдресРесурсаPing();
	
КонецФункции

// Возвращает адрес ресурса для проверки доступности сервера.
// 
// Возвращаемое значение:
//  Строка - Адрес ресурса
Функция АдресРесурсаPing()
	
	Возврат "GetInfo/1";
	
КонецФункции

// Проверяет наличие доступа к веб-сервису 1С-ЭДО.
//
// Параметры:
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Булево - наличие доступа к сервису.
//
Функция ЕстьДоступКВебСервису1CЭДО(КонтекстДиагностики)
	
	РезультатПроверки = СервисЭДОПовтИспНаВызов.ПроверитьДоступКВебСервису1СЭДО();
	
	Если ЗначениеЗаполнено(РезультатПроверки.Ошибка) Тогда
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, РезультатПроверки.Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтернетСоединение);
	КонецЕсли;
	
	Возврат РезультатПроверки.Успех;
	
КонецФункции

// Возвращает результат проверки доступа к веб сервису 1C-ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - см. ОбработкаНеисправностейБЭД.НоваяОшибка
//           - Неопределено - при значении Успех равное истина
Функция ПроверитьДоступКВебСервису1СЭДО() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Успех", Ложь);
	РезультатПроверки.Вставить("Ошибка", Неопределено);
	
	ПараметрыОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыОперации.АдресРесурса = АдресРесурсаPing();
	ПараметрыОперации.ТребуетсяМаркер = Ложь;
	ПараметрыОперации.ПредставлениеОперации = НСтр("ru = 'Проверка доступа к сервису 1С-ЭДО'");
	ПараметрыОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыОперации.Таймаут = 7;
	
	ОписаниеСоединения = СервисЭДОПовтИсп.СоединениеССервисом(
		ПараметрыОперации.СпособОбмена, ПараметрыОперации.Таймаут);
	
	HTTPЗапрос = ЗапросКСервису(ПараметрыОперации);
	
	РезультатВыполненияЗапроса = ИнтернетСоединениеБЭД.ВызватьHTTPМетод(ОписаниеСоединения, HTTPЗапрос,
		ПараметрыОперации.Метод, ПараметрыОперации.ПредставлениеОперации);
	
	Если РезультатВыполненияЗапроса.Успех Тогда
		РезультатПроверки.Успех = Истина;
	Иначе
		КраткоеПредставлениеОшибки = НСтр("ru = 'Отсутствует доступ к сервису 1С-ЭДО'");
		ПодробноеПредставлениеОшибки = КраткоеПредставлениеОшибки + Символы.ПС
			 + СтрШаблон(НСтр("ru = 'Адрес ресурса: %1'"), АдресРесурсаPing());
		ВидОшибки = ИнтернетСоединениеБЭДКлиентСервер.ВидОшибкиИнтернетСоединение();
		РезультатПроверки.Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ПараметрыОперации.ПредставлениеОперации,
			ВидОшибки, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ИдентификаторИнтеграционногоРешения()

	Возврат "1C_22BFE9D5-E77D-424A-BC6D-D8A3496C05FE";

КонецФункции

// Описание
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИнтернетПоддержкаПользователейПодключена - Булево -
Функция НовыеПараметрыАвторизации()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТребуетсяПодключениеИнтернетПоддержки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ТаймаутПоКодуРегламента(КодРегламента)
	
	Если НРег(КодРегламента) = НРег("Nonformalized") Тогда
		Возврат 600;
	Иначе 
		Возврат 120; 
	КонецЕсли;
	
КонецФункции

// Описание
//
// Возвращаемое значение:
// 	Структура:
// * ДатаПоследнегоЗапроса - Дата
// * ЭлектронныеДокументы - см. НоваяТаблицаКонтейнеров 
//
Функция НовыйРезультатПолученияСпискаДокументов()
	
	Результат = Новый Структура;
	Результат.Вставить("ЭлектронныеДокументы", НоваяТаблицаКонтейнеров());
	Результат.Вставить("ДатаПоследнегоЗапроса", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаИзУниверсальнойДатыВМиллисекундах(УниверсальнаяДата, СпособОбмена) 
	
	Если УниверсальнаяДата < 0 Тогда
		УниверсальнаяДата = ДатаЗапросаПоУмолчанию();
	КонецЕсли;
	ДробнаяУниверсальнаяДата = УниверсальнаяДата / 1000;
	УниверсальнаяДатаБезМиллисекунд = Цел(ДробнаяУниверсальнаяДата);
	Дата = Дата(1970, 1, 1) + УниверсальнаяДатаБезМиллисекунд;
	ДатаСтрокой = Формат(Дата, ФорматДатыЗапроса(СпособОбмена));
	ДатаСтрокой = ДатаСтрокой + Формат(ДробнаяУниверсальнаяДата - УниверсальнаяДатаБезМиллисекунд, "ЧЦ=3; ЧДЦ=3; ЧРД=.");
	
	Возврат ДатаСтрокой;
	
КонецФункции

Функция УниверсальнаяДатаВМиллисекундахИзСтроки(Знач ДатаСтрокой)
	
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", "T");
	
	Точка = СтрНайти(ДатаСтрокой, ".");
	Если Точка > 0 Тогда
		ДатаБезМиллисекунд = XMLЗначение(Тип("Дата"), Лев(ДатаСтрокой, Точка - 1));
	Иначе
		ДатаБезМиллисекунд = XMLЗначение(Тип("Дата"), ДатаСтрокой);
	КонецЕсли;
	
	УниверсальнаяДата = ОбщегоНазначенияБЭД.УниверсальнаяДатаВМиллисекундахИзДаты(ДатаБезМиллисекунд);
	
	Если Точка > 0  Тогда
		Миллисекунды = Сред(ДатаСтрокой, Точка + 1);
		Миллисекунды = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Миллисекунды, 3,, "Справа");
		УниверсальнаяДата = УниверсальнаяДата + XMLЗначение(Тип("Число"), Миллисекунды);
	КонецЕсли;
	
	Возврат УниверсальнаяДата;
	
КонецФункции

// Преобразует бинарное значение статуса в файле xml или xdto в значение типа булево.
// Параметры:
//  ЗначениеСтатусаВФайле - Строка - значение статуса в файле xml.
// 
// Возвращаемое значение:
//  Булево - Значение статуса в файле.
Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле)
	
	Если ВРег(ЗначениеСтатусаВФайле) = ВРег("True") Тогда
		ЗначениеСтатуса = Истина;
	Иначе
		ЗначениеСтатуса = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСтатуса;
	
КонецФункции

Функция ПринятьОтклонитьПриглашение(ПараметрыОперации, Принять,
	КонтекстДиагностики, ПричинаОтказаОтПриглашения = "")
	
	ИдентификаторПриглашения = ПараметрыОперации.ИдентификаторПриглашения;
	ИдентификаторУчетнойЗаписи = ПараметрыОперации.ИдентификаторУчетнойЗаписи;
	Маркер = ПараметрыОперации.Маркер;
	
	Если Принять Тогда
		АдресРесурса = "AcceptContact";
		ПредставлениеОперации = НСтр("ru = 'Принятие приглашения к обмену электронными документами'");
	Иначе
		АдресРесурса = "RejectContact";
		ПредставлениеОперации = НСтр("ru = 'Отклонение приглашения к обмену электронными документами'");
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ИдентификаторУчетнойЗаписи);
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.СпособОбмена = ДанныеУчетнойЗаписи.СпособОбменаЭД;
	ПараметрыВыполненияОперации.Маркер = Маркер;
	ПараметрыВыполненияОперации.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
	ПараметрыВыполненияОперации.ПредставлениеОперации = ПредставлениеОперации;
	ПараметрыВыполненияОперации.АдресРесурса = АдресРесурса;
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 10;
	ПараметрыВыполненияОперации.РазрешенныеКодыОшибок.Добавить(404);
	
	ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "id", ИдентификаторПриглашения);
	Если Не Принять И ЗначениеЗаполнено(ПричинаОтказаОтПриглашения) Тогда
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "comment", ПричинаОтказаОтПриглашения);
	КонецЕсли;
	
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
	
	ТребуетсяОбновлениеСтатусов = Ложь;
	Успех = Результат.Успех;
	
	СтатусКонтактаНаСервереОператора = Перечисления.СтатусыПриглашений.ПустаяСсылка();
	Если Не Результат.Успех
		И ПараметрыВыполненияОперации.РазрешенныеКодыОшибок.Найти(Результат.ОшибкаОператора.Код) <> Неопределено Тогда
		ТелоСтрокой = Результат.Ответ.ПолучитьТелоКакСтроку();
		ФразаНачало = "Статус контакта";
		ФразаКонец = ", ожидался";
		Если СтрНайти(ТелоСтрокой, ФразаНачало) * СтрНайти(ТелоСтрокой, ФразаКонец) > 0 Тогда
			// Если пришла строка вида: "Статус контакта Accepted, ожидался Incoming" или подобная,
			// то это не ошибка, а особенность работы сервиса.
			НачалоСтатуса = СтрНайти(ТелоСтрокой, ФразаНачало) + СтрДлина(ФразаНачало) + 1;
			КонецСтатуса = СтрНайти(ТелоСтрокой, ФразаКонец);
			СтатусКонтакта = СокрЛП(Сред(ТелоСтрокой, НачалоСтатуса, КонецСтатуса - НачалоСтатуса));
			СтатусКонтакта = ПреобразоватьТекстСтатусаПриглашения(СтатусКонтакта);
			СтатусКонтактаНаСервереОператора = СтатусКонтакта;
			Если СтатусКонтакта = Перечисления.СтатусыПриглашений.Принято Тогда
				Успех = Истина;
			Иначе
				Успех = Ложь;
				ТребуетсяОбновлениеСтатусов = Истина;
			КонецЕсли;
		Иначе
			ОбработатьОшибкуСервиса(ПараметрыВыполненияОперации, КонтекстДиагностики, Результат.ОшибкаОператора,
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успех", Успех);
	РезультатВыполнения.Вставить("ТребуетсяОбновлениеСтатусов", ТребуетсяОбновлениеСтатусов);
	РезультатВыполнения.Вставить("СтатусКонтактаНаСервереОператора", СтатусКонтактаНаСервереОператора);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ДанныеЗапросаОтправкиПриглашений(Приглашения)
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/contacts}.Contacts";
	Попытка
		Контакты = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакты, "Asof", ТекущаяДатаСеанса(), , Ошибки);
		Для Каждого ТекСтрока Из Приглашения Цикл
			
			Контакт = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Contact");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Name",              ТекСтрока.Наименование, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Inn",               ТекСтрока.ИНН, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Kpp",               ТекСтрока.КПП, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Email",             ТекСтрока.АдресЭП, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Comment",           ТекСтрока.ТекстПриглашения, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "ExternalContactId", ТекСтрока.ВнешнийКод, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "OperatorId",        ТекСтрока.ОператорЭДО, , Ошибки);
			Если Не ЗначениеЗаполнено(ТекСтрока.ОператорЭДО) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "EDXClientId",
					ТекСтрока.ИдентификаторКонтрагента,, Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "ScanFilename",      ТекСтрока.ИмяФайлаСкана, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Scan",              ТекСтрока.ДанныеФайлаСкана, , Ошибки);
			Если ЗначениеЗаполнено(ТекСтрока.EmailОрганизации) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "SenderEmail", ТекСтрока.EmailОрганизации, , Ошибки);
			КонецЕсли;
			Контакты.Contact.Добавить(Контакт);
		КонецЦикла;
		Контакты.Проверить();
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Возврат РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Контакты, Ложь);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Формирование данных для запроса отправки приглашений к обмену электронными документами'"),
			ТекстОшибки,
			ТекстОшибки);
			
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция НовыеПараметрыСервиса()
	
	ПараметрыСервиса = Новый Структура;
	ПараметрыСервиса.Вставить("АдресВебСервиса", "");
	ПараметрыСервиса.Вставить("АдресДляПроверкиАктивности", "");
	
	Возврат ПараметрыСервиса;
	
КонецФункции

Функция АктуальныеОшибкиПередачиДокументов(ИдентификаторыОшибок, КонтекстДиагностики)
	
	ВидОперации = НСтр("ru = 'Проверка актуальности ошибок передачи электронных документов'");
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса();
	ПараметрыВыполненияОперации.ТребуетсяМаркер = Ложь;
	ПараметрыВыполненияОперации.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыВыполненияОперации.ПредставлениеОперации = ВидОперации;
	ПараметрыВыполненияОперации.АдресРесурса = "IsMessagesDataExist";
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().POST;
	ПараметрыВыполненияОперации.Заголовки.Вставить("Content-Type", "application/json");
	Поток = Новый ПотокВПамяти();
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьПоток(Поток);
	ЗаписатьJSON(ЗаписьJSON, ИдентификаторыОшибок);
	
	ЗаписьJSON.Закрыть();
	ТелоЗапроса = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	ПараметрыВыполненияОперации.Таймаут = ИнтернетСоединениеБЭД.ТаймаутПоРазмеруФайла(ТелоЗапроса.Размер());
	ПараметрыВыполненияОперации.ТелоЗапроса = ОбщегоНазначенияБЭД.JSONСтрока(ИдентификаторыОшибок);
	Результат = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики);
	
	АктуальныеОшибки = Неопределено;
	Если Результат.Успех Тогда
		АктуальныеОшибки = ОбщегоНазначенияБЭД.JSONЗначение(Результат.Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат АктуальныеОшибки;
	
КонецФункции

#Область ДанныеДляРегистрационногоПакета

// Формирует двоичные данные соглашения с оператором ЭДО.
// 
// Возвращаемое значение:
// 	ДвоичныеДанные
Функция ДанныеПоСоглашениюНаПодключениеКЭДО()
	
	// Подготовим данные для соглашения с оператором ЭДО
	НовыйПоток = Новый ПотокВПамяти;
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьПоток(НовыйПоток, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
	СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	Возврат НовыйПоток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Параметры:
//  ПараметрыРегистрации - см. СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО
//  ДанныеОператора - см. РегистрыСведений.ОператорыЭДО.АктуальныеДанныеОператораЭДО
//  Ошибки - Массив из Строка
//  СертификатПодписанта - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Структура:
//   * ДвоичныеДанные - ДвоичныеДанные
//   * РеквизитыПакета - Структура:
//      ** УникальныйИдентификаторЗаявки1СЭДО - Строка
//      ** НаименованиеОрганизации - Строка
//      ** ИННОрганизации - Строка
//      ** КППОрганизации - Строка
//      ** ОГРНОрганизации - Строка
//      ** ИдентификаторОрганизации - Строка
//      ** ОператорЭДО - Строка
//      ** ОператорЭДОИд - Строка
//      ** Сертификат - Массив из Строка
//      ** ЭлектроннаяПочта - Строка
//      ** Фамилия - Строка
//      ** Имя - Строка
//      ** Отчество - Строка
Функция ДанныеРегистрационнойИнформации(ПараметрыРегистрации, ДанныеОператора, Ошибки,
	СертификатПодписанта = Неопределено)
	
	УникальныйИдентификаторЗаявки1СЭДО = РаботаСФайламиБЭД.НовыйUUID();
	
	Если ЗначениеЗаполнено(ПараметрыРегистрации.АдресОрганизацииЗначение) Тогда
		СтруктураАдреса = ИнтеграцияБСПБЭД.СведенияОбАдресеПоЗначению(ПараметрыРегистрации.АдресОрганизацииЗначение);
	Иначе
		СтруктураАдреса = ИнтеграцияБСПБЭД.СведенияОбАдресеПоПредставлению(ПараметрыРегистрации.АдресОрганизации);
	КонецЕсли;
	
	// Подготовим данные для 1СЭДО
	ИмяРеквизитаИННОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = 
		ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
		
	ИмяРеквизитаНаименованиеОрганизации =
		ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"НаименованиеОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыРегистрации.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации
		+ ", " + ИмяРеквизитаОГРНОрганизации);
	
	СертификатПоУмолчанию = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
	ТекущаяДата = ТекущаяДатаСеанса();
	ПараметрыСертификатов = КриптографияБЭД.СвойстваСертификатов(ПараметрыРегистрации.СертификатыПодписейОрганизации);
	Для Каждого Сертификат Из ПараметрыРегистрации.СертификатыПодписейОрганизации Цикл
		СертификатПоУмолчанию = Сертификат;
		ПараметрыСертификата = ПараметрыСертификатов[Сертификат];
		Если ПараметрыСертификата.ДействителенДо < ТекущаяДата Тогда
			Продолжить;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСертификата = ПараметрыСертификатов[СертификатПоУмолчанию];
	
	ОсновноеЛицоБезДоверенностиФамилия = ПараметрыСертификата.Фамилия;
	ОсновноеЛицоБезДоверенностиИмя = ПараметрыСертификата.Имя;
	ОсновноеЛицоБезДоверенностиОтчество = ПараметрыСертификата.Отчество;
				
	ПараметрыОрганизацииБЭД = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ПараметрыРегистрации.Организация);
	Если ИнтеграцияЭДО.ЭтоФизЛицо(ПараметрыРегистрации.Организация) Тогда
		Если Не ПустаяСтрока(ПараметрыОрганизацииБЭД.Фамилия)
			И Не ПустаяСтрока(ПараметрыОрганизацииБЭД.Имя) Тогда
			
			Отчество = ?(ЗначениеЗаполнено(ПараметрыОрганизацииБЭД.Отчество), ПараметрыОрганизацииБЭД.Отчество, "");
			ОсновноеЛицоБезДоверенностиФамилия = ПараметрыОрганизацииБЭД.Фамилия;
			ОсновноеЛицоБезДоверенностиИмя = ПараметрыОрганизацииБЭД.Имя;
			ОсновноеЛицоБезДоверенностиОтчество = Отчество;
		КонецЕсли;
	КонецЕсли;
	
	НаименованиеОрганизации = ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации];
	ИННОрганизации = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
	КППОрганизации = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	ОГРНОрганизации = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]);
	
	РеквизитыПакета = Новый Структура;
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	РеквизитыПакета.Вставить("НаименованиеОрганизации",  НаименованиеОрганизации);
	РеквизитыПакета.Вставить("ИННОрганизации",           ИННОрганизации);
	РеквизитыПакета.Вставить("КППОрганизации",           КППОрганизации);
	РеквизитыПакета.Вставить("ОГРНОрганизации",          ОГРНОрганизации);
	РеквизитыПакета.Вставить("ИдентификаторОрганизации", ПараметрыРегистрации.ИдентификаторОрганизации);
	РеквизитыПакета.Вставить("ОператорЭДО",              ДанныеОператора.Наименование);
	РеквизитыПакета.Вставить("ОператорЭДОИд",            ДанныеОператора.Код);
	РеквизитыПакета.Вставить("Сертификат",               Новый Массив);
	РеквизитыПакета.Вставить("ЭлектроннаяПочта",         ПараметрыРегистрации.ЭлектроннаяПочта);
	РеквизитыПакета.Вставить("Фамилия",                  ОсновноеЛицоБезДоверенностиФамилия);
	РеквизитыПакета.Вставить("Имя",                      ОсновноеЛицоБезДоверенностиИмя);
	РеквизитыПакета.Вставить("Отчество",                 ОсновноеЛицоБезДоверенностиОтчество);
	
	СервисЭДОСобытия.ПриФормированииРегистрационнойИнформации(РеквизитыПакета);
	
	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.РегистрационнаяИнформация");
	
	ЗначенияРеквизитов = Новый Соответствие;
	
	// Служебные данные
	ЗначенияРеквизитов.Вставить("ИдФайл",   "registration_" + УникальныйИдентификаторЗаявки1СЭДО);
	ЗначенияРеквизитов.Вставить("ВерсПрог", "1С:Предприятие 8");
	ЗначенияРеквизитов.Вставить("ВерсФорм", "5.02");
	ЗначенияРеквизитов.Вставить("КНД",      "1115109");
	
	// Данные по налоговому органу
	ЗначенияРеквизитов.Вставить("КодНО", ПараметрыРегистрации.КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ЗначенияРеквизитов.Вставить("ОперЭДО.НаимОрг",   ДанныеОператора.Наименование);
	ЗначенияРеквизитов.Вставить("ОперЭДО.ИдОперЭДО", ДанныеОператора.Код);
	ЗначенияРеквизитов.Вставить("ОперЭДО.ИННЮЛ",     ДанныеОператора.ИНН);
	ЗначенияРеквизитов.Вставить("ОперЭДО.КПП",       ДанныеОператора.КПП);
	ЗначенияРеквизитов.Вставить("ОперЭДО.ОГРН",      ДанныеОператора.ОГРН);
	
	// Данные по абоненту
	Если ЗначениеЗаполнено(РеквизитыПакета.ИдентификаторОрганизации) Тогда 
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипЗаявления", "2");
		ЗначенияРеквизитов.Вставить("УчастЭДО.ИдУчастЭДО", РеквизитыПакета.ИдентификаторОрганизации);
	Иначе
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипЗаявления", "1");
	КонецЕсли;
	
	ФамилияБезПодчеркивания = СтрЗаменить(ОсновноеЛицоБезДоверенностиФамилия, "_", " ");
	ИмяБезПодчеркивания = СтрЗаменить(ОсновноеЛицоБезДоверенностиИмя, "_", " ");
	ОтчествоБезПодчеркивания = СтрЗаменить(ОсновноеЛицоБезДоверенностиОтчество, "_", " ");
	
	Если Не ИнтеграцияЭДО.ЭтоФизЛицо(ПараметрыРегистрации.Организация) Тогда
		
		ТипУчастника = "ЮЛ";
		
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.НаимОрг",
			НаименованиеОрганизации);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",
			ИННОрганизации);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.КПП",
			КППОрганизации);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.ОГРН",
			ОГРНОрганизации);
		
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ФамилияБезПодчеркивания);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ИмяБезПодчеркивания);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ОтчествоБезПодчеркивания);
		
	Иначе
		
		ТипУчастника = "ИП";
		
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ИП.ИННФЛ",
			ИННОрганизации);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ИП.ОГРНИП",
			ОГРНОрганизации);
		
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  ФамилияБезПодчеркивания);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      ИмяБезПодчеркивания);
		ЗначенияРеквизитов.Вставить("УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", ОтчествоБезПодчеркивания);
		
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.ДатаПодклЭДО", ТипУчастника),
		ТекущаяДатаСеанса());
	
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Индекс", ТипУчастника),
		СтруктураАдреса.Индекс);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.КодРегион", ТипУчастника),
		СтруктураАдреса.КодРегиона);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Район", ТипУчастника),
		СтруктураАдреса.Район);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Город", ТипУчастника),
		СтруктураАдреса.Город);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.НаселПункт", ТипУчастника),
		СтруктураАдреса.НаселенныйПункт);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Улица", ТипУчастника),
		СтруктураАдреса.Улица);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Дом", ТипУчастника),
		СтруктураАдреса.Дом);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Корпус", ТипУчастника),
		СтруктураАдреса.Корпус);
	ЗначенияРеквизитов.Вставить(СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Кварт", ТипУчастника),
		СтруктураАдреса.Квартира);
		
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	СертификатыПользователя.Колонки.Добавить("НомерМЧД");
	
	ТребуетсяДоверенность = ТипУчастника = "ЮЛ" Или ТипУчастника = "ИП";
	Если ТребуетсяДоверенность Тогда
		Доверенности = Новый Массив;
		Для Каждого КлючИЗначение Из ПараметрыРегистрации.Доверенности Цикл
			Доверенности.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
		НомераДоверенностей = МашиночитаемыеДоверенности.ПолучитьНомераДоверенностей(Доверенности);
	Иначе
		НомераДоверенностей = Новый Соответствие;
	КонецЕсли;
	
	МассивСертификатов = Новый Массив;
	Для каждого Сертификат Из ПараметрыРегистрации.СертификатыПодписейОрганизации Цикл
		ПараметрыСертификата = ПараметрыСертификатов[Сертификат];
		Если ПараметрыСертификата.ДействителенДо < ТекущаяДата Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СертификатыПользователя.Добавить();
		
		ТекущийСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДанныеСертификата);
		НоваяСтрока.ДатаНачСертиф = ТекущийСертификат.ДатаНачала;
		НоваяСтрока.ДатаКонСертиф = ПараметрыСертификата.ДействителенДо;
		
		Отпечаток = НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Base64Значение(ПараметрыСертификата.Отпечаток)));
		НоваяСтрока.ОтпСертиф = Отпечаток;
		СертификатТекст = Base64Строка(ПараметрыСертификата.ДанныеСертификата);
		НоваяСтрока.Сертификат = КриптографияБЭД.СертификатВСтрокуPEM(ПараметрыСертификата.ДанныеСертификата);
	
		РеквизитыПакета.Сертификат.Добавить(СертификатТекст);
		
		НоваяСтрока.Фамилия  = СтрЗаменить(ПараметрыСертификата.Фамилия, "_", " ");
		НоваяСтрока.Имя      = СтрЗаменить(ПараметрыСертификата.Имя, "_", " ");
		НоваяСтрока.Отчество = СтрЗаменить(ПараметрыСертификата.Отчество, "_", " ");
		
		Если ТребуетсяДоверенность Тогда
			Доверенность = ПараметрыРегистрации.Доверенности[Сертификат];
			Если ЗначениеЗаполнено(Доверенность) Тогда
				НомерДоверенности = НомераДоверенностей[Доверенность];
				НоваяСтрока.НомерМЧД = НомерДоверенности;
			КонецЕсли;
		КонецЕсли;
		Если МассивСертификатов.Найти(СертификатТекст) = Неопределено Тогда
			МассивСертификатов.Добавить(СертификатТекст);
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации, СертификатыПользователя,
		"УчастЭДО.СертифДолжн");
	
	Если СертификатПодписанта <> Неопределено Тогда
		ПараметрыСертификатов = КриптографияБЭД.СвойстваСертификатов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СертификатПодписанта));
		ПараметрыСертификатаПодписанта = ПараметрыСертификатов[СертификатПодписанта];

		// Данные по подписанту
		ДолжностьПодписанта = НСтр("ru = 'не указана'");
		Если ЗначениеЗаполнено(ПараметрыСертификатаПодписанта.Должность) Тогда
			ДолжностьПодписанта = ПараметрыСертификатаПодписанта.Должность;
		КонецЕсли;
		
		ФамилияПодписанта = СтрЗаменить(ПараметрыСертификатаПодписанта.Фамилия, "_", " ");
		ИмяПодписанта = СтрЗаменить(ПараметрыСертификатаПодписанта.Имя, "_", " ");
		ОтчествоПодписанта = СтрЗаменить(ПараметрыСертификатаПодписанта.Отчество, "_", " ");
	Иначе
		ПустоеЗначениеСвойстваПодписанта = "[БудетЗаполненоПослеПодписания]";
		ДолжностьПодписанта = ПустоеЗначениеСвойстваПодписанта;
		ФамилияПодписанта = ПустоеЗначениеСвойстваПодписанта;
		ИмяПодписанта = ПустоеЗначениеСвойстваПодписанта;
		ОтчествоПодписанта = ПустоеЗначениеСвойстваПодписанта;
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("Подписант.Должность",    ДолжностьПодписанта);
	ЗначенияРеквизитов.Вставить("Подписант.ФИО.Фамилия",  ФамилияПодписанта);
	ЗначенияРеквизитов.Вставить("Подписант.ФИО.Имя",      ИмяПодписанта);
	ЗначенияРеквизитов.Вставить("Подписант.ФИО.Отчество", ОтчествоПодписанта);
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначенияРеквизитовВДереве(ДеревоРегистрационнойИнформации, ЗначенияРеквизитов);
	
	Данные = Новый Структура;
	Данные.Вставить("ДвоичныеДанные",
		РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки));
	Данные.Вставить("РеквизитыПакета", РеквизитыПакета);
	
	Возврат Данные;
	
КонецФункции

Функция РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки)
	
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	
	// Выполним проверку на заполненность обязательных полей.
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоРегистрационнойИнформации, Ошибки);
	КонецЕсли;	
	
	ЭлектронныеДокументыЭДО.ПроверитьРегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации, Ошибки);	
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
	
		ДвоичныеДанныеДляОператораЭДО = СформироватьРегистрационнуюИнформациюCML(ДеревоРегистрационнойИнформации);
	
	КонецЕсли;
	
	Возврат ДвоичныеДанныеДляОператораЭДО;
	
КонецФункции

Функция СформироватьРегистрационнуюИнформациюCML(ДеревоДанных)
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	ПутьКОписанию = "{http://www.1c.ru/edo/registration}.Файл";
	Попытка
		
		// Коммерческая информация
		Файл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию);
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("ИдФайл", "ИдФайл");
		ЗначенияСвойствXDTO.Вставить("ВерсПрог", "ВерсПрог");
		ЗначенияСвойствXDTO.Вставить("ВерсФорм", "ВерсФорм");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Файл, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		
		Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("КНД", "КНД");
		ЗначенияСвойствXDTO.Вставить("КодНО", "КодНО");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Документ, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		
		ОперЭДО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.ОперЭДО");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("НаимОрг", "ОперЭДО.НаимОрг");
		ЗначенияСвойствXDTO.Вставить("ИННЮЛ", "ОперЭДО.ИННЮЛ");
		ЗначенияСвойствXDTO.Вставить("КПП", "ОперЭДО.КПП");
		ЗначенияСвойствXDTO.Вставить("ОГРН", "ОперЭДО.ОГРН");
		ЗначенияСвойствXDTO.Вставить("ИдОперЭДО", "ОперЭДО.ИдОперЭДО");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ОперЭДО, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОперЭДО", ОперЭДО, , Ошибки);
		
		УчастникЭДО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("ТипЗаявления", "УчастЭДО.ТипЗаявления");
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ИдУчастЭДО")) Тогда
			ЗначенияСвойствXDTO.Вставить("ИдУчастЭДО", "УчастЭДО.ИдУчастЭДО");
		КонецЕсли;
		ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
		ПараметрыЗаполнения.НеобязательныеСвойства = "ИдУчастЭДО";
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(УчастникЭДО, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
			ПараметрыЗаполнения);
		
		ТипУчастника = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника");
		Если ЗначениеЗаполнено(ТипУчастника) Тогда
			
			Если ТипУчастника = "ЮЛ" Тогда
				
				СвЮЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("НаимОрг", "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг");
				ЗначенияСвойствXDTO.Вставить("ИННЮЛ", "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ");
				ЗначенияСвойствXDTO.Вставить("КПП", "УчастЭДО.ТипУчастника.ЮЛ.КПП");
				ЗначенияСвойствXDTO.Вставить("ОГРН", "УчастЭДО.ТипУчастника.ЮЛ.ОГРН");
				ЗначенияСвойствXDTO.Вставить("ДатаПодклЭДО", "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО");
				
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.СвойстваСоЗначениямиДата = "ДатаПодклЭДО";
				ПараметрыЗаполнения.НеобязательныеСвойства = "ОГРН";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(СвЮЛ, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
					ПараметрыЗаполнения);
				
				ЗаполнитьАдресУчастника(ДеревоДанных, СвЮЛ, ТипУчастника, ПутьКОписанию, Ошибки);
				
				ФИООтв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ.ФИООтв");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Фамилия", "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия");
				ЗначенияСвойствXDTO.Вставить("Имя", "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя");
				ЗначенияСвойствXDTO.Вставить("Отчество", "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.НеобязательныеСвойства = "Отчество";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФИООтв, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
					ПараметрыЗаполнения);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвЮЛ, "ФИООтв", ФИООтв, , Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", СвЮЛ, , Ошибки);
			Иначе
				
				СвИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("ИННФЛ", "УчастЭДО.ТипУчастника.ИП.ИННФЛ");
				ЗначенияСвойствXDTO.Вставить("ОГРНИП", "УчастЭДО.ТипУчастника.ИП.ОГРНИП");
				ЗначенияСвойствXDTO.Вставить("ДатаПодклЭДО", "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.СвойстваСоЗначениямиДата = "ДатаПодклЭДО";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(СвИП, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
					ПараметрыЗаполнения);
				
				ЗаполнитьАдресУчастника(ДеревоДанных, СвИП, ТипУчастника, ПутьКОписанию, Ошибки);
				
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП.ФИО");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Фамилия", "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия");
				ЗначенияСвойствXDTO.Вставить("Имя", "УчастЭДО.ТипУчастника.ИП.ФИО.Имя");
				ЗначенияСвойствXDTO.Вставить("Отчество", "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.НеобязательныеСвойства = "Отчество";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФИО, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
					ПараметрыЗаполнения);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО, Истина, Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", СвИП, , Ошибки);
			КонецЕсли;
				
		КонецЕсли;
		
		СтрокаТаблицыСертификатов = ДеревоДанных.Строки.Найти("УчастЭДО.СертифДолжн", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыСертификатов.Значение) Тогда
			Для Каждого СтрСертификат Из СтрокаТаблицыСертификатов.Строки Цикл
				Сертификат = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.СертифДолжн");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("ДатаНачСертиф", "УчастЭДО.СертифДолжн.НомерСтроки.ДатаНачСертиф");
				ЗначенияСвойствXDTO.Вставить("ДатаКонСертиф", "УчастЭДО.СертифДолжн.НомерСтроки.ДатаКонСертиф");
				ЗначенияСвойствXDTO.Вставить("ОтпСертиф", "УчастЭДО.СертифДолжн.НомерСтроки.ОтпСертиф");
				ЗначенияСвойствXDTO.Вставить("Сертификат", "УчастЭДО.СертифДолжн.НомерСтроки.Сертификат");
				ЗначенияСвойствXDTO.Вставить("НомерМЧД", "УчастЭДО.СертифДолжн.НомерСтроки.НомерМЧД");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.СвойстваСоЗначениямиДата = "ДатаНачСертиф, ДатаКонСертиф";
				ПараметрыЗаполнения.НеобязательныеСвойства = "НомерМЧД";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Сертификат, ЗначенияСвойствXDTO, СтрСертификат, Ошибки,
					ПараметрыЗаполнения);
				
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.СертифДолжн.ФИО");
				ЗначенияСвойствXDTO = Новый Соответствие;
				ЗначенияСвойствXDTO.Вставить("Фамилия", "УчастЭДО.СертифДолжн.НомерСтроки.Фамилия");
				ЗначенияСвойствXDTO.Вставить("Имя", "УчастЭДО.СертифДолжн.НомерСтроки.Имя");
				ЗначенияСвойствXDTO.Вставить("Отчество", "УчастЭДО.СертифДолжн.НомерСтроки.Отчество");
				ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
				ПараметрыЗаполнения.НеобязательныеСвойства = "Отчество";
				РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФИО, ЗначенияСвойствXDTO, СтрСертификат, Ошибки,
					ПараметрыЗаполнения);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Сертификат, "ФИО", ФИО, Истина, Ошибки);
				
				УчастникЭДО.СертифДолжн.Добавить(Сертификат);
			КонецЦикла;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", УчастникЭДО, , Ошибки);
		
		Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.Подписант");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Должность", "Подписант.Должность");
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(Подписант, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки);
		
		ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.Подписант.ФИО");
		ЗначенияСвойствXDTO = Новый Соответствие;
		ЗначенияСвойствXDTO.Вставить("Фамилия", "Подписант.ФИО.Фамилия");
		ЗначенияСвойствXDTO.Вставить("Имя", "Подписант.ФИО.Имя");
		ЗначенияСвойствXDTO.Вставить("Отчество", "Подписант.ФИО.Отчество");
		ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
		ПараметрыЗаполнения.НеобязательныеСвойства = "Отчество";
		РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(ФИО, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
			ПараметрыЗаполнения);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, , Ошибки);
		
		Файл.Проверить();
		
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ВызватьИсключение ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		КонецЕсли;
		
		Возврат РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Файл, Ложь);
		
	Исключение
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Формирование данных для оператора ЭДО'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	
КонецФункции

Процедура ЗаполнитьАдресУчастника(ДеревоДанных, Участник, ТипУчастника, ПутьКОписанию, Ошибки)
	
	АдрРФ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML(ПутьКОписанию + СтрШаблон(".Документ.УчастЭДО.%1.АдрРФ", ТипУчастника));
	ЗначенияСвойствXDTO = Новый Соответствие;
	ЗначенияСвойствXDTO.Вставить("Индекс", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Индекс", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("КодРегион", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.КодРегион", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("Район", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Район", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("Город", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Город", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("НаселПункт", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.НаселПункт", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("Улица", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Улица", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("Дом", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Дом", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("Корпус", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Корпус", ТипУчастника));
	ЗначенияСвойствXDTO.Вставить("Кварт", СтрШаблон("УчастЭДО.ТипУчастника.%1.АдрРФ.Кварт", ТипУчастника));
	ПараметрыЗаполнения = РаботаСФайламиБЭД.НовыеПараметрыЗаполненияXDTO();
	ПараметрыЗаполнения.ОбязательныеСвойства = "КодРегион";
	РаботаСФайламиБЭД.ЗаполнитьСвойстваXDTOИзДерева(АдрРФ, ЗначенияСвойствXDTO, ДеревоДанных, Ошибки,
		ПараметрыЗаполнения);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Участник, "АдрРФ", АдрРФ, , Ошибки);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрационныйПакет

// Формирует архив регистрационного пакета для оператора 1С-ЭДО.
//
// Параметры:
//  РеквизитыПакета - Структура - параметры пакета.
//  ЗашифрованныеДанныеОператораЭДО - ДвоичныеДанные - данные для оператора ЭДО
//  								- Строка - адрес временного хранилища
//  ПодписанныеДвоичныеДанныеДляОператораЭДО - ДвоичныеДанные - подписанные данные для оператора.
//  ДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - данные соглашения.
//  ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - подписанные данные соглашения.
// 
// Возвращаемое значение:
//  Строка - имя файла пакета.
//
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДанныеОператораЭДО,
	ПодписанныеДвоичныеДанныеДляОператораЭДО, ДвоичныеДанныеСоглашенияНаПодключениеЭДО,
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО)
	
	АдресКаталогаРегистрации = ФайловаяСистема.СоздатьВременныйКаталог("reg");
	ИмяВременногоФайлаПакетаДляОператораЭДО            = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                       = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации         = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	Если ТипЗнч(ЗашифрованныеДанныеОператораЭДО) = Тип("ДвоичныеДанные") Тогда
		ЗашифрованныеДвоичныеДанныеОператораЭДО	= ЗашифрованныеДанныеОператораЭДО;
	Иначе
		ЗашифрованныеДвоичныеДанныеОператораЭДО = ПолучитьИзВременногоХранилища(ЗашифрованныеДанныеОператораЭДО);
	КонецЕсли;
	
	ИмяФайла = АдресКаталогаРегистрации + РаботаСФайламиБЭД.НовыйUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + РаботаСФайламиБЭД.НовыйUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодключениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаПодписи);
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайловПакетаНаПодключениеЭДО,
		ИмяВременногоФайлаПакетаДляОператораЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодключениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодключениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодключениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайловАрхиваСоглашенияНаПодключениеЭДО,
		ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МассивФайловРегистрационногоПакета = Новый Массив;
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	ДвоичныеДанныеАрхива = РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайловРегистрационногоПакета);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталогаРегистрации);
	
	Возврат ДвоичныеДанныеАрхива;

КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalData");
	
	// Наименование организации.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOrganisationName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Признак подключения организации через услугу Onboarding.
	Если РеквизитыПакета.Свойство("ПодключенПоOnboarding") Тогда
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name",  "Onboarding");
		ЭДКарточки.ЗаписатьАтрибут("Value", XMLСтрока(РеквизитыПакета.ПодключенПоOnboarding));
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	// Фамилия.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentSurname");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Фамилия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Имя.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Отчество.
	Отчество = ?(ЗначениеЗаполнено(РеквизитыПакета.Отчество), РеквизитыПакета.Отчество, "");
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentPatronymic");
	ЭДКарточки.ЗаписатьАтрибут("Value", Отчество);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// ОГРН.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOGRN");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОГРНОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	Для каждого ДанныеСертификата Из РеквизитыПакета.Сертификат Цикл
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name", "Certificate");
		ЭДКарточки.ЗаписатьАтрибут("Value", ДанныеСертификата);
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Электронная почта.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Email");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ЭлектроннаяПочта);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "OperatorID");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияБЭД");
	ЭДКарточки.ЗаписатьАтрибут("Value", ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ПрикладноеРешение");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияПрикладногоРешения");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Версия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.ИдентификаторОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Id", РеквизитыПакета.ИдентификаторОрганизации);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = РаботаСФайламиБЭД.ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог",
		ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота",
		РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента",
		РаботаСФайламиБЭД.НовыйUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

#КонецОбласти

#Область ОтправкаИПолучениеТранспортныхКонтейнеров

Функция ПолучитьДокументы(КлючСинхронизации, ДатаПоследнегоЗапроса, АдресРесурса, КонтекстДиагностики, ВидСервисаЭДО = Неопределено)
	
	ПараметрыВыполненияОперации = НовыеПараметрыВыполненияОперацииСервиса(КлючСинхронизации);
	ПараметрыВыполненияОперации.ПредставлениеОперации = НСтр("ru = 'Получение списка документов оператора электронного документооборота'");
	ПараметрыВыполненияОперации.АдресРесурса = АдресРесурса;
	Если ЗначениеЗаполнено(ДатаПоследнегоЗапроса) Тогда
		УниверсальнаяДатаСтрокой = СтрокаИзУниверсальнойДатыВМиллисекундах(ДатаПоследнегоЗапроса,
			КлючСинхронизации.СпособОбмена);
		ДобавитьПараметрЗапроса(ПараметрыВыполненияОперации, "date", УниверсальнаяДатаСтрокой);
	КонецЕсли;
	ПараметрыВыполненияОперации.Заголовки.Вставить("Error-Messages", "all");
	ПараметрыВыполненияОперации.Метод = ИнтернетСоединениеБЭД.HTTPМетоды().GET;
	ПараметрыВыполненияОперации.Таймаут = 60;	
	
	РезультатОперации = ВыполнитьОперацию(ПараметрыВыполненияОперации, КонтекстДиагностики, КлючСинхронизации);
	
	СписокЭлектронныхДокументов = СписокЭлектронныхДокументовИзОтветаОтСервиса(РезультатОперации,
		ДатаПоследнегоЗапроса, ВидСервисаЭДО);
	
	Возврат СписокЭлектронныхДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

