#Область СлужебныйПрограммныйИнтерфейс

#Область ОпределениеКомандЭДО

// Определяет и параметризирует список команд ЭДО
//
// Параметры:
//   СоставКоманд - Структура - структура состава команд ЭДО.
//    Исходящие    - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие     - Массив - состав объектов.
//    БезПодписи   - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//    Контрагенты  - Массив - состав объектов Контрагенты.
//    Организации  - Массив - состав объектов Организации.
//    Договоры     - Массив - состав объектов Договоры.
//  ПолноеИмя - Строка - имя объекта, например "Документ.РеализацияТоваровУслуг".
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭДО - параметр отбора входящих или исходящих документов.
//  КомандыЭДО - ТаблицаЗначений - подготавливаемый список команд ЭДО.
//
Процедура ПриОпределенииСпискаКомандЭДО(Знач СоставКоманд, Знач ПолноеИмя, Знач НаправлениеЭД, КомандыЭДО) Экспорт
		
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	ИспользоватьИнтеркампани = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭДМеждуОрганизациями");	
		
	ЕстьПравоПросмотраЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
	ЕстьПравоОбработкиЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоНастройкиОбмена       = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ЕстьПравоЧтенияНастройкиОбмена = НастройкиЭДО.ЕстьПравоЧтенияНастройкиОбмена();
	ЕстьПравоОбменаЭД              = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ЕстьПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	Если СоставКоманд.Договоры.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиДокументовПоДоговору";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
		КомандаЭДО.Порядок       = 40;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ЗначениеЗаполнено");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;

	Если СоставКоманд.Контрагенты.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПригласитьКОбменуЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтраженияВУчете";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиОтраженияВУчете";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отражения в учете'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиОтправкиДокументовКонтрагента";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументов";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
		КомандаЭДО.Порядок       = 30;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ИнтерфейсДокументовЭДО.ЕстьНастройкиПоКонтрагенту");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;
	
	Если СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено
		И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПодключитьКЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПодключитьКЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Подключить организацию'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодключениеБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Ложь);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьСписокУчетныхЗаписей";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "УчетныеЗаписиЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Учетные записи'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗаявлениеНаВыпускСертификатаКлюча;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;

		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьСписокМЧД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СписокМЧД";
		КомандаЭДО.Представление = НСтр("ru = 'Машиночитаемые доверенности'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.СправочникОбъект;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
		Если ИспользоватьИнтеркампани Тогда
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.НастройкиОтправкиДокументовИнтеркампани";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументовИнтеркампани";
			КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.СохранитьФайлКак;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ПригласитьКОбменуЭДО";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
		КонецЕсли;
		
	КонецЕсли;

	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭДО.Входящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;

			Если СоставКоманд.Договоры.Найти(ПолноеИмя) = Неопределено Тогда

				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
				КомандаЭДО.Порядок       = 20;
				КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
				КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
				
				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
				КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
				КомандаЭДО.Порядок       = 50;
				КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОбщее";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			Иначе
				
				КомандаЭДО = КомандыЭДО.Добавить();
				КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД_Договор";
				КомандаЭДО.СписокФорм    = "";
				КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
				КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
				КомандаЭДО.Порядок       = 20;
				КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
				КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
				КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
				КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КонецЕсли;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
			КомандаЭДО.Порядок       = 25;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоВывода И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДанныеВФайл";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ВыгрузитьДанныеВФайл";
			КомандаЭДО.Представление = НСтр("ru = 'Выгрузить документ в файл'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ВыгрузитьДанныеИзИнформационнойБазыВXMLФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
		И НаправлениеЭД <> Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ДеревоЭД";
			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
			КомандаЭДО.Порядок       = 20;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ПерезаполнитьДокумент";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;

			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
		Если ЕстьПравоОбменаЭД Тогда
			
			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ЗагрузитьДанныеИзФайла";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ЗагрузитьДанныеИзФайла";
			КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ из файла'");
			КомандаЭДО.Порядок       = 50;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Ложь;		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОбменЭД И ИспользоватьИнтеркампани И СоставКоманд.Интеркампани.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 12;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
			
	КонецЕсли;
	
	ИспользоватьВнутренниеДокументыЭДО = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
	
	Если ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
		И СоставКоманд.Внутренние.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчетаКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
		КомандаЭДО.Порядок       = 20;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДОКоманда";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
		КомандаЭДО.Порядок       = 30;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ДеревоЭД";
		КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
		КомандаЭДО.Порядок       = 25;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
		КомандаЭДО.ТолькоВоВсехДействиях = Истина;
		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
		
	КонецЕсли;
	
	Если ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
		И СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "ИнтерфейсДокументовЭДОКлиент.ОткрытьНастройкиВнутреннегоЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "НастройкиВнутреннегоЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Настройки внутреннего ЭДО'");
		КомандаЭДО.Порядок       = 40;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;

	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
	   Если ИнтеграцияБСПБЭД.ИсточникиКомандПечати().Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмя)) <> Неопределено
			И СоставКоманд.Внутренние.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Исходящие.Найти(ПолноеИмя) = Неопределено 
			И СоставКоманд.Входящие.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Интеркампани.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Контрагенты.Найти(ПолноеИмя) = Неопределено 
			И СоставКоманд.Организации.Найти(ПолноеИмя) = Неопределено
			И СоставКоманд.Договоры.Найти(ПолноеИмя) = Неопределено Тогда
		
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОтправитьПечатнуюФормуПоЭДОКоманда";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОтправитьПечатнуюФорму";
			КомандаЭДО.Представление = НСтр("ru = 'ЭДО'");
			КомандаЭДО.Порядок       = 10;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			КомандаЭДО.Отображение   = ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	 КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПросмотрЭлектронногоДокумента

Функция ДанныеФормыПросмотраЭлектронногоДокумента(ЭлектронныйДокумент, ЭтоВходящийЭДО) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаСостоянияДокумента());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаДанныхЭлементовСхемыРегламента(ЭтоВходящийЭДО));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеФормыПросмотра = Новый Структура;
	ДанныеФормыПросмотра.Вставить("ВыборкаОбъектовУчета", РезультатыЗапроса[0].Выбрать());
	ДанныеФормыПросмотра.Вставить("ВыборкаСостоянияЭДО", РезультатыЗапроса[1].Выбрать());
	
	ДанныеЭлементовСхемы = СформироватьДанныеЭлементовСхемы(РезультатыЗапроса[2].Выгрузить());
	
	ДанныеФормыПросмотра.Вставить("ДанныеЭлементовСхемы", ДанныеЭлементовСхемы);
	
	Возврат ДанныеФормыПросмотра;
	
КонецФункции

Процедура СоздатьРеквизитыИЭлементыДляПредставленияДокумента(Форма, СхемаРегламента) Экспорт
	
	НовыеРеквизитыФормы = Новый Массив;
	ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, СхемаРегламента, НовыеРеквизитыФормы);
	
	Если НовыеРеквизитыФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	Для Каждого РеквизитФормы Из НовыеРеквизитыФормы Цикл
		
		ИмяСтраницы = "Страница" + РеквизитФормы.Имя;
		Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыПредставленийДокумента);
		Страница.Вид = ВидГруппыФормы.Страница;
		Страница.ОтображатьЗаголовок = Ложь;
		Страница.Видимость = Истина;
		
		НовыйЭлемент = Форма.Элементы.Добавить(РеквизитФормы.Имя, Тип("ПолеФормы"), Страница);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПутьКДанным = РеквизитФормы.Имя;
		НовыйЭлемент.Редактирование = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Читает установленные подписи.
// 
// Параметры:
//  ЭлементСхемыРегламента - ДанныеФормыЭлементДерева
//  ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// 
// Возвращаемое значение:
//  Массив из Структура:
//   * СвойстваПодписи - См. НовыеДанныеПодписи
//   * ЭтоПодписьПоДоверенности - Булево
//   * СвойстваДоверенности - Неопределено,
//   						- см. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
//   * РезультатПроверкиПоМЧД - Неопределено, 
//   						  - см. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
//   						  
//   * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//   * ОтветнаяПодпись - Булево
//   * СообщениеЭДО - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//   
Функция УстановленныеПодписи(ЭлементСхемыРегламента, ТипРегламента) Экспорт
	
	Результат = Новый Массив();
	
	Если Не ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(ЭлементСхемыРегламента.Сообщение);
	
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Подпись Из Подписи Цикл
		СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись);
	КонецЦикла;
	
	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		
		Для Каждого Подпись Из Подписи Цикл
			
			СвойстваПодписи = Подпись.СвойстваПодписи;
			ОтветнаяПодпись = ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Подтвержден
				И ЭлементСхемыРегламента.ДатаИзмененияСтатуса < СвойстваПодписи.ДатаПодписи;
			Подпись.Вставить("ОтветнаяПодпись", ОтветнаяПодпись);
			Подпись.Вставить("СообщениеЭДО", ЭлементСхемыРегламента.Сообщение);
			Результат.Добавить(Подпись);
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПодписиПолучателя = Новый Массив;
	ЭлементСхемыИнформацияПолучателя =
		ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламента);
	
	Если ЭлементСхемыИнформацияПолучателя <> Неопределено
		И ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.Сообщение) Тогда
			
		ПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
			ЭлементСхемыИнформацияПолучателя.Сообщение);
		
	КонецЕсли;
	
	Для Каждого Подпись Из Подписи Цикл
		
		Подпись.Вставить("ОтветнаяПодпись", ЭлементСхемыРегламента.Направление = Перечисления.НаправленияЭДО.Входящий);
		Подпись.Вставить("СообщениеЭДО", ЭлементСхемыРегламента.Сообщение);
		Результат.Добавить(Подпись);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПодписиПолучателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Подпись Из ПодписиПолучателя Цикл
		
		Подпись.Вставить("ОтветнаяПодпись", ЭлементСхемыРегламента.Направление <> Перечисления.НаправленияЭДО.Входящий);
		Подпись.Вставить("СообщениеЭДО", ЭлементСхемыИнформацияПолучателя.Сообщение);
		СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись);
		Результат.Добавить(Подпись);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров визуализации документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ВыводитьДопДанные - Булево - признак включения режима вывода дополнительных данных.
// 	* ВыводитьБанковскиеРеквизиты - Булево -  признак включения режима вывода банковских реквизитов.
// 	* ВыводитьКопияВерна - Булево -  признак включения режима вывода отметки "Копия верна".
//
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
	
КонецФункции

// Запускает операцию по формированию представления.
// 
// Параметры:
// 	ЭлементСхемыРегламенты - ДанныеФормыЭлементДерева - Элемент для которого нужно найти информацию отправителя.
// 	ИдентификаторФормы - УникальныйИдентификатор - ИДентификатор формы.
// 	ПараметрыВизуализацииДокумента - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента.
// 	АдресОписанияСообщения - Строка - Адрес хранилища с описанием сообщения.
//
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеДокумента - ТабличныйДокумент, Неопределено - Табличный с представлением.
//   * Успех - Булево - Табличный документ сформирован.
//
Функция ЗапуститьФормированиеПредставленияДанныхДокумента(ЭлементСхемыРегламента, ИдентификаторФормы, ПараметрыВизуализацииДокумента, АдресОписанияСообщения = "") Экспорт
	
	ДвоичныеДанныеФайла = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено
		И ЗначениеЗаполнено(АдресОписанияСообщения) Тогда
		ОписаниеСообщения = ПолучитьИзВременногоХранилища(АдресОписанияСообщения);
		ДвоичныеДанныеФайла = ОписаниеСообщения.Данные.Документ.ДвоичныеДанные;
	КонецЕсли;
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайлаОтвета = Неопределено;
	ДвоичныеДанныеФайлаЗапроса = Неопределено;
	ЭлементСхемыИнформацияОтправителя = Неопределено;
	ЭлементСхемыИнформацияПолучателя = Неопределено;
	ЭлементСхемыПриложениеПоставщикаДляЕИС = Неопределено;
	
	Если ТипЗнч(ЭлементСхемыРегламента) <> Тип("Структура") Тогда 
		ЭлементСхемыИнформацияПолучателя = 
			ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламента);
		Если ЭлементСхемыИнформацияПолучателя <> Неопределено
			И ЗначениеЗаполнено(ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл) Тогда
			ДвоичныеДанныеФайлаОтвета = РаботаСФайлами.ДвоичныеДанныеФайла(
			ЭлементСхемыИнформацияПолучателя.ПрисоединенныйФайл);
		КонецЕсли;
		
		ЭлементСхемыИнформацияОтправителя = 
			НайтиЭлементСхемыИнформацияОтправителя(ЭлементСхемыРегламента);
		Если ЭлементСхемыИнформацияОтправителя <> Неопределено
			И ЗначениеЗаполнено(ЭлементСхемыИнформацияОтправителя.ПрисоединенныйФайл) Тогда
			ДвоичныеДанныеФайлаЗапроса = РаботаСФайлами.ДвоичныеДанныеФайла(
			ЭлементСхемыИнформацияОтправителя.ПрисоединенныйФайл);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
			СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСхемыРегламента.Сообщение, "ЭлектронныйДокумент.СпособОбмена");
			Если СпособОбмена = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСерверЕИС") Тогда
				
				ТипЭлементаРегламента = Неопределено;
				Если ЭлементСхемыРегламента.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.УПД") Тогда
					ТипЭлементаРегламента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУПДДляЕИС");
				ИначеЕсли ЭлементСхемыРегламента.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.УКД") Тогда
					ТипЭлементаРегламента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ПриложениеУКДДляЕИС");
				КонецЕсли;
				Если ТипЭлементаРегламента <> Неопределено Тогда
					ЭлементСхемыПриложениеПоставщикаДляЕИС = 
						ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыПриложениеДляЕИС(ЭлементСхемыРегламента,
							ТипЭлементаРегламента);
				КонецЕсли;		
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);

	Если ЭлементСхемыРегламента.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"ЭлектронныеДокументыЭДО.ПредставлениеДанныхВнутреннегоСообщения", 
			ДвоичныеДанныеФайла);
	Иначе
		Если ЗначениеЗаполнено(ЭлементСхемыРегламента.Сообщение) Тогда
			Если ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				
				СообщениеОтвета = Неопределено;
				Если ЭлементСхемыИнформацияПолучателя <> Неопределено
					И ЭлементСхемыПриложениеПоставщикаДляЕИС <> Неопределено Тогда
					СообщениеОтвета = Новый Массив;
					СообщениеОтвета.Добавить(ЭлементСхемыИнформацияПолучателя.Сообщение);
					СообщениеОтвета.Добавить(ЭлементСхемыПриложениеПоставщикаДляЕИС.Сообщение);
				ИначеЕсли ЭлементСхемыИнформацияПолучателя <> Неопределено Тогда	
					СообщениеОтвета = ЭлементСхемыИнформацияПолучателя.Сообщение;
				ИначеЕсли ЭлементСхемыПриложениеПоставщикаДляЕИС <> Неопределено Тогда	
					СообщениеОтвета = ЭлементСхемыПриложениеПоставщикаДляЕИС.Сообщение;	
				КонецЕсли;
				
				Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
					ЭлементСхемыРегламента.Сообщение, СообщениеОтвета, Неопределено, ПараметрыВизуализацииДокумента);
			
			ИначеЕсли ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда		
				
				Если ЭлементСхемыИнформацияОтправителя <> Неопределено Тогда
					 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
						"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
						ЭлементСхемыРегламента.Сообщение, Неопределено, ЭлементСхемыИнформацияОтправителя.Сообщение, 
						ПараметрыВизуализацииДокумента);
				Иначе
					 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
						"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
						ЭлементСхемыРегламента.Сообщение, Неопределено, Неопределено, ПараметрыВизуализацииДокумента);
				КонецЕсли;
					
			Иначе
				Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
					"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке", 
					ЭлементСхемыРегламента.Сообщение, Неопределено, Неопределено, ПараметрыВизуализацииДокумента);
			КонецЕсли;
		Иначе
			 Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
				"ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщения", 
				ЭлементСхемыРегламента.ВидДокумента, ДвоичныеДанныеФайла, ДвоичныеДанныеФайлаОтвета, ПараметрыВизуализацииДокумента);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПредставлениеИнформацииОтправителя(НомерДокумента, ДатаДокумента) Экспорт 
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D;"));
	ИначеЕсли ЗначениеЗаполнено(ДатаДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 от %2'"), Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя,
			Формат(ДатаДокумента, "ДЛФ=D;"));
	Иначе
		Представление = Строка(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	КонецЕсли;	

	Возврат Представление;

КонецФункции

#КонецОбласти

#Область АлгоритмыУсловнойВидимостиКоманд

Функция ЕстьНастройкиПоКонтрагенту(Контрагент) Экспорт
	
	Запросы = Новый Массив;
	
	Отбор = НастройкиЭДО.НовыйОтборНастроекОтправки();
	Отбор.Получатель = "&Контрагент";
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекОтправки("НастройкиОтправки", Отбор);
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Отправитель ИЗ НастройкиОтправки";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Возврат Не ИтоговыйЗапрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

// Формирует представление данных сообщения.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО - Сообщение для которого формируется представление.
// 	СообщениеОтвета - ДокументСсылка.СообщениеЭДО - Информация получателя для сообщения, переданного первым параметром.
// 	ПараметрыПечати - См. ФорматыЭДО.НовыеПараметрыВизуализацииДокумента.
//	ВыводитьШтампыПодписей - Булево - Определяет необходимость вывода штампа с подписями.
//
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеДокумента - ТабличныйДокумент, Неопределено - Табличный с представлением.
//   * Успех - Булево - Табличный документ сформирован.
//
Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено, ПараметрыПечати = Неопределено, ВыводитьШтампыПодписей = Истина) Экспорт
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(
		Сообщение, СообщениеОтвета, Сообщение, ПараметрыПечати);
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента; 
	
	Если ТабличныйДокумент <> Неопределено
		И ВыводитьШтампыПодписей Тогда
		ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(ТабличныйДокумент, Сообщение);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция КомандаПечатиОбъекта(Объект, Идентификатор) Экспорт
	
	Возврат КомандаПечатиОбъектаМетаданных(Объект.Метаданные(), Идентификатор);
	
КонецФункции

// Возвращает представление команды печати объекта.
//
// Параметры:
//  ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор объекта метаданных.
//  ИдентификаторКоманды - Строка - идентификатор команды печати.
//
// Возвращаемое значение:
//  Строка - представление команды печати.
//
Функция ПредставлениеКомандыПечатиОбъекта(ИдентификаторОбъекта, ИдентификаторКоманды) Экспорт
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта);
	
	КомандаПечати = КомандаПечатиОбъектаМетаданных(ОбъектМетаданных, ИдентификаторКоманды);
	
	Если ЗначениеЗаполнено(КомандаПечати) Тогда
		Возврат КомандаПечати.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает печатные формы электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, печатные формы которых необходимо сформировать.
//  ПараметрыСоставаПечати - см. ИнтерфейсДокументовЭДО.ПараметрыСоставаПечатиЭлектронныхДокументов().
//  ПараметрыВизуализации - см. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента().
//
// Возвращаемое значение:
//  Массив - Сформированные печатные формы. Элементы - структуры со свойствами:
//   * ИмяМакета - Строка - Уникальное имя макета.
//   * СинонимМакета - Строка - Наименование макета.
//   * ТабличныйДокумент - ТабличныйДокумент - Сформированная печатная форма.
//   * Ссылка - Ссылка на документ, по которому сформирована печатная форма.
//
Функция СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати, ПараметрыВизуализации) Экспорт
	
	ПечатныеФормы = Новый Массив;
	КоличествоФайловДокументов = Новый Соответствие;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		КоличествоФайловДокумента = 0;
		
		Сообщение = Неопределено;
		СообщениеОтвета = Неопределено;
		ТехническиеСообщения = Новый Массив;
		
		ДанныеСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
		Для каждого ЭлементСхемыРегламента Из ДанныеСхемыРегламента Цикл
			Если ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
				Или (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ЭлементСхемыРегламента.ТипЭлементаРегламента)) Тогда
				Сообщение = ЭлементСхемыРегламента.Сообщение;
			ИначеЕсли ЭлементСхемыРегламента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя
				Или (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоТитулПолучателя(ЭлементСхемыРегламента.ТипЭлементаРегламента)) Тогда
				СообщениеОтвета = ЭлементСхемыРегламента.Сообщение;
			Иначе
				ТехническиеСообщения.Добавить(ЭлементСхемыРегламента.Сообщение);
			КонецЕсли;
		КонецЦикла;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		
		ЭлектронныйДокументНапечатан = Ложь;
		
		Если ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент Тогда
			
			ТабличныйДокумент = ПредставлениеСообщения(Сообщение, СообщениеОтвета, ПараметрыВизуализации,
				ПараметрыСоставаПечати.ВыводитьШтампыПодписей);
			ИмяМакета = "ЭлектронныйДокумент" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, НСтр("ru = 'Электронный документ'")); 
			КонецЕсли;
			
			Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент) Тогда
				ЭлектронныйДокументНапечатан = Истина;
				КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		НужноПечататьКарточкуЭлектронногоДокумента = ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента;
		
		Если Не НужноПечататьКарточкуЭлектронногоДокумента Тогда
			НужноПечататьКарточкуЭлектронногоДокумента =
				ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент
				И ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент И Не ЭлектронныйДокументНапечатан;
		КонецЕсли;
		
		Если НужноПечататьКарточкуЭлектронногоДокумента Тогда
		
			ТабличныйДокумент = ПредставлениеКарточкиСообщения(Сообщение, СообщениеОтвета);
			ИмяМакета = "КарточкаДокумента" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, НСтр("ru = 'Карточка электронного документа'")); 
			КонецЕсли;
			
			Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент) Тогда
				КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции Тогда
			
			ВидыСообщений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТехническиеСообщения, "ВидСообщения");
			
			Для каждого ТехническоеСообщение Из ТехническиеСообщения Цикл
				
				ТабличныйДокумент = ПредставлениеСообщения(ТехническоеСообщение, СообщениеОтвета, ПараметрыВизуализации,
					ПараметрыСоставаПечати.ВыводитьШтампыПодписей);
				ИмяМакета = "Сообщение" + ТехническоеСообщение.УникальныйИдентификатор();
				СинонимМакета = ПредставлениеДокумента;
				Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
					Если ТехническоеСообщение = СообщениеОтвета Тогда
						ВидСообщения = НСтр("ru = 'Информация получателя'");
					Иначе
						ВидСообщения = ВидыСообщений[ТехническоеСообщение];
					КонецЕсли;
					СинонимМакета = СтрШаблон("%1 (%2)", СинонимМакета, Строка(ВидСообщения)); 
				КонецЕсли;
				
				Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент) Тогда
					КоличествоФайловДокумента = КоличествоФайловДокумента + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоличествоФайловДокументов.Вставить(ЭлектронныйДокумент, КоличествоФайловДокумента);
		
	КонецЦикла;
	
	Если ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов Тогда
		
		ТабличныйДокумент = СформироватьРеестрЭлектронныхДокументов(ЭлектронныеДокументы, КоличествоФайловДокументов);
		ИмяМакета = "РеестрЭлектронныхДокументов";
		СинонимМакета = НСтр("ru = 'Реестр электронных документов'");
		
		ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент);
		
	КонецЕсли;
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Возвращает параметры для передачи в функцию ИнтерфейсДокументовЭДО.СформироватьПечатныеФормыЭлектронныхДокументов().
//
// Возвращаемое значение:
//  Структура - параметры, определяющие состав печати электронных документов:
//   * ПечататьЭлектронныйДокумент - Булево - Нужно печатать электронные документы.
//   * ПечататьТехнологическиеКвитанции - Булево - Нужно печатать технические документы, подтверждающие
//                                                 прохождение этапов в документообороте.
//   * ПечататьКарточкуЭлектронногоДокумента - Булево - Нужно печатать карточки электронных документов.
//   * ПечататьРеестрЭлектронныхДокументов - Булево - Нужно печатать реестр электронных документов.
//   * ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент - Булево - Если не удалось напечатать электронный
//                                                                      документ, тогда печатаем карточку документа.
//   * ВыводитьШтампыПодписей - Булево - Нужно выводить штампы подписей.
//   * ДополнятьСинонимМакетаВидомПечатнойФормы - Булево - К синониму макета добавляется вид печатной формы в скобках.
//
Функция ПараметрыСоставаПечатиЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПечататьЭлектронныйДокумент", Истина);
	Результат.Вставить("ПечататьТехнологическиеКвитанции", Ложь);
	Результат.Вставить("ПечататьКарточкуЭлектронногоДокумента", Ложь);
	Результат.Вставить("ПечататьРеестрЭлектронныхДокументов", Ложь);
	Результат.Вставить("ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент", Ложь);
	Результат.Вставить("ВыводитьШтампыПодписей", Истина);
	Результат.Вставить("ДополнятьСинонимМакетаВидомПечатнойФормы", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

// Выгружает электронные документы в формате PDF в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
// Возвращаемое значение:
//  Соответствие - Данные о выгруженных файлах:
//   * Ключ - Структура - Данные файла:
//    ** ИмяФайла - Строка
//    ** ИмяБезРасширения - Строка
//    ** Расширение - Строка
//    ** Размер - Число
//   * Значение - Строка - Адрес во временном хранилище, куда помещен файл.
//
Функция СформироватьФайлыВыгрузкиЭДВФорматеPDF(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	ПараметрыСоставаПечати = ПараметрыСоставаПечатиЭлектронныхДокументов();
	ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент = Истина;
	ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции = Ложь;
	ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента = Ложь;
	ПараметрыСоставаПечати.ПечататьРеестрЭлектронныхДокументов = Ложь; // Реестр будет сформирован позже
	ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент = Ложь;
	ПараметрыСоставаПечати.ВыводитьШтампыПодписей = Истина;
	ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы = Ложь;
	
	ПараметрыВизуализации = НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
	
	ПечатныеФормы = СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати,
		ПараметрыВизуализации);
	
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	МассивФайлов = Новый Массив;
	КоличествоФайловДокументов = Новый Соответствие;
	
	Для каждого ДанныеПечатнойФормы Из ПечатныеФормы Цикл
			
		ИмяФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ДанныеПечатнойФормы.СинонимМакета, Истина);
		ПолноеИмяФайла = АдресКаталога + ИмяФайла + ".pdf";
		ПолноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(ПолноеИмяФайла);
		
		ДанныеПечатнойФормы.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
		МассивФайлов.Добавить(ПолноеИмяФайла);
		
		КоличествоФайловДокументов.Вставить(ДанныеПечатнойФормы.Ссылка, 1);
		
	КонецЦикла;
	
	ДокументыСПечатнымиФормами = Новый Массив;
	Для каждого ДанныеПечатнойФормы Из ПечатныеФормы Цикл
		ДокументыСПечатнымиФормами.Добавить(ДанныеПечатнойФормы.Ссылка);
	КонецЦикла;
	ДокументыБезПечатныхФорм = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ЭлектронныеДокументы,
		ДокументыСПечатнымиФормами);
	
	Для каждого ЭлектронныйДокумент Из ДокументыБезПечатныхФорм Цикл
		
		ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
		ДанныеФайла = ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайла(ОсновнойФайл);
		
		ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
		ПолноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(ПолноеИмяФайла);
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		
		МассивФайлов.Добавить(ПолноеИмяФайла);
		
		КоличествоФайловДокументов.Вставить(ЭлектронныйДокумент, 1);
		
	КонецЦикла;
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат СоответствиеДанныеФайлаАдресВХранилище;
	КонецЕсли;
	
	ПолноеИмяФайла = АдресКаталога + НСтр("ru = 'Реестр электронных документов'") + ".pdf";
	ТабличныйДокумент = СформироватьРеестрЭлектронныхДокументов(ЭлектронныеДокументы,
		КоличествоФайловДокументов);
	ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	МассивФайлов.Добавить(ПолноеИмяФайла);
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Выгрузка от %1'"), Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;"));
	ИмяФайлаКонтейнера = АдресКаталога + ИмяФайла + ".zip";
	
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайлов, ИмяФайлаКонтейнера);
	
	ДвоичныеДанныеКонтейнера = Новый ДвоичныеДанные(ИмяФайлаКонтейнера);
	ДанныеФайла = РаботаСФайламиБЭД.ДанныеФайла(ИмяФайлаКонтейнера);
	ДанныеФайла.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера, ИдентификаторФормы);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

// Выгружает документооборот по электронным документам в файл.
//
// Параметры:
//  ЭлектронныеДокументы - Массив - Электронные документы, которые необходимо выгрузить.
//  ИдентификаторФормы - УникальныйИдентификатор - Для передачи в ПоместитьВоВременноеХранилище().
//
// Возвращаемое значение:
//  Соответствие - Данные о выгруженных файлах:
//   * Ключ - Структура - Данные файла:
//    ** ИмяФайла - Строка
//    ** ИмяБезРасширения - Строка
//    ** Расширение - Строка
//    ** Размер - Число
//   * Значение - Строка - Адрес во временном хранилище, куда помещен файл.
//
Функция СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	ПрисоединенныеФайлыЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ПрисоединенныеФайлыЭлектронныхДокументов(ЭлектронныеДокументы);
	ПрисоединенныеФайлыЭлектронныхДокументов.Индексы.Добавить("ЭлектронныйДокумент");
	
	Если ПрисоединенныеФайлыЭлектронныхДокументов.Количество() = 0 Тогда
		Возврат СоответствиеДанныеФайлаАдресВХранилище;
	КонецЕсли;
	
	СообщенияЭДО = ПрисоединенныеФайлыЭлектронныхДокументов.ВыгрузитьКолонку("СообщениеЭДО");
	ТипыСообщенийЭДО = ЭлектронныеДокументыЭДО.ТипыСообщенийКратко(СообщенияЭДО);
	
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	АдресКаталогаФайлов = АдресКаталога + "Файлы" + ПолучитьРазделительПути();
	СоздатьКаталог(АдресКаталогаФайлов);
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		ФайлыДокумента = ПрисоединенныеФайлыЭлектронныхДокументов.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент));
		Если ФайлыДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		КаталогДокумента = АдресКаталогаФайлов + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			ПредставлениеДокумента);
		КаталогДокумента = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(КаталогДокумента, Истина)
			+ ПолучитьРазделительПути();
		СоздатьКаталог(КаталогДокумента);
		
		Для каждого ФайлДокумента Из ФайлыДокумента Цикл
			
			ПрисоединенныйФайл = ФайлДокумента.ПрисоединенныйФайл;
			
			КаталогСообщения = КаталогДокумента + ТипыСообщенийЭДО[ФайлДокумента.СообщениеЭДО];
			КаталогСообщения = РаботаСФайламиБЭДКлиентСервер.ОпределитьУникальноеИмяФайла(КаталогСообщения, Истина)
				+ ПолучитьРазделительПути();
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			
			ИмяФайла = КаталогСообщения + ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяФайла);
			
			КоллекцияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			Для каждого ВсеСвойстваПодписи Из КоллекцияПодписей Цикл
				
				КомуВыданСертификат = Лев(ВсеСвойстваПодписи.КомуВыданСертификат, Найти(
					ВсеСвойстваПодписи.КомуВыданСертификат, " ") - 1);
				Разделитель = " - ";
				ИмяФайлаПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3.%4",
					"Подпись", Разделитель, КомуВыданСертификат, РасширениеДляФайловПодписи); 	
				ВсеСвойстваПодписи.Подпись.Записать(КаталогСообщения + ИмяФайлаПодписи);
				
				ДвоичныеДанныеСертификата = ВсеСвойстваПодписи.Сертификат.Получить();
				Если ТипЗнч(ДвоичныеДанныеСертификата) = Тип("Строка") Тогда
					РасширениеСертификата = "txt";
				Иначе
					РасширениеСертификата = "cer";
				КонецЕсли;
	
				ИмяФайлаСертификата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3.%4",
					"Сертификат", Разделитель, КомуВыданСертификат, РасширениеСертификата);
				ДвоичныеДанныеСертификата.Записать(КаталогСообщения + ИмяФайлаСертификата);

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяФайла = СтрШаблон(НСтр("ru = 'Выгрузка от %1'"), Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy;"));
	ИмяФайлаКонтейнера = АдресКаталога + ИмяФайла + ".zip";
	
	МассивФайлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресКаталогаФайлов + "*");
	ПараметрыФормированияАрхива = РаботаСФайламиБЭД.НовыеПараметрыФормированияАрхива();
	ПараметрыФормированияАрхива.РежимСохраненияПутей = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	ПараметрыФормированияАрхива.РежимОбработкиПодкаталогов = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	
	РаботаСФайламиБЭД.СформироватьАрхивФайлов(МассивФайлов, ИмяФайлаКонтейнера, ПараметрыФормированияАрхива);
	
	ДвоичныеДанныеКонтейнера = Новый ДвоичныеДанные(ИмяФайлаКонтейнера);
	ДанныеФайла = РаботаСФайламиБЭД.ДанныеФайла(ИмяФайлаКонтейнера);
	ДанныеФайла.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКонтейнера, ИдентификаторФормы);
	
	СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога, "*");
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

// См. ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС().
Функция СформироватьФайлыВыгрузкиЭДДляФНС(Знач ЭлектронныеДокументы) Экспорт
	
	Возврат ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС(ЭлектронныеДокументы);
	
КонецФункции

#КонецОбласти

#Область ОбработкаПредупрежденийКомпонентов

Функция ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки) Экспорт
	
	Предупреждения = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Предупреждения, НастройкиЭДО.ПредупрежденияКомпонента(КлючНастроекОтправки));
	
	Возврат Предупреждения;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормами

Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО) Экспорт
	Возврат ДоступныеДействия[ДействиеПоЭДО] <> Неопределено
		И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
КонецФункции

#Область ПредставленияКоманд

Функция ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Подписать пакет'");
		Иначе			
			Возврат НСтр("ru = 'Подписать документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Подписать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет'");
		Иначе
			Возврат НСтр("ru = 'Отправить документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Подписать и отправить пакет'");
		Иначе			
			Возврат НСтр("ru = 'Подписать и отправить документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Согласиться с аннулированием пакета'");
		Иначе			
			Возврат НСтр("ru = 'Согласиться с аннулированием документа'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Согласиться с аннулированием'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Не согласиться с аннулированием пакета'");		
		Иначе
			Возврат НСтр("ru = 'Не согласиться с аннулированием документа'");		
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Не согласиться с аннулированием'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отклонить пакет'");
		Иначе			
			Возврат НСтр("ru = 'Отклонить документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отклонить'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтклонитьПодписание(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отказаться от подписания пакета'");
		Иначе			
			Возврат НСтр("ru = 'Отказаться от подписания документа'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отказаться от подписания'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыПереформировать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Переформировать пакет'");
		Иначе
			Возврат НСтр("ru = 'Переформировать документ'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Переформировать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат  НСтр("ru = 'Аннулировать пакет'");
		Иначе
			Возврат НСтр("ru = 'Аннулировать документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Аннулировать'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыЗакрытьПринудительно(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат  НСтр("ru = 'Закрыть принудительно пакет'");
		Иначе
			Возврат НСтр("ru = 'Закрыть принудительно документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Закрыть принудительно'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет в архив'");
		Иначе
			Возврат НСтр("ru = 'Отправить документ в архив'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить в архив'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Вернуть пакет в работу'");
		Иначе
			Возврат НСтр("ru = 'Вернуть документ в работу'");
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Вернуть в работу'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыОтправитьПовторно(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Отправить пакет повторно'");			
		Иначе
			Возврат НСтр("ru = 'Отправить документ повторно'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Отправить повторно'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеКомандыУтвердить(ПакетСоставной, СостоянияПакетаОднородно) Экспорт
	
	Если ПакетСоставной Тогда		
		Если СостоянияПакетаОднородно Тогда			
			Возврат НСтр("ru = 'Утвердить пакет'");			
		Иначе
			Возврат НСтр("ru = 'Утвердить документ'");			
		КонецЕсли;	
	Иначе
		Возврат НСтр("ru = 'Утвердить'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Процедура ИнициализироватьРазделыТекущихДел(ОписаниеРазделов) Экспорт
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Входящие", НСтр("ru = 'Входящие'"), , ОбщегоНазначения.ЭтоМобильныйКлиент());
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Обработать", НСтр("ru = 'Отразить в учете'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Утвердить", НСтр("ru = 'Утвердить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Подписать", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Исправить", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Аннулировать", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НаКонтроле", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Исходящие", НСтр("ru = 'Исходящие'"), , ОбщегоНазначения.ЭтоМобильныйКлиент());
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Сформировать", НСтр("ru = 'Создать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПодписатьИсх", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ИсправитьИсх", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "АннулироватьИсх", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НаКонтролеИсх", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Ознакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Отправить", НСтр("ru = 'Отправить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Распаковать", НСтр("ru = 'Распаковать'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Ошибки", НСтр("ru = 'Ошибки'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "Приглашения", НСтр("ru = 'Приглашения'"), , Ложь);
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ТребуетсяПригласить", НСтр("ru = 'Требуется пригласить'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ЖдемСогласия", НСтр("ru = 'Ждем согласия'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ТребуетсяСогласие", НСтр("ru = 'Требуется согласие'"));
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "ПриглашенияОзнакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела(ОписаниеРазделов, "НоменклатураКонтрагентов", НСтр("ru = 'Сопоставить'"));
	
КонецПроцедуры

#КонецОбласти

// Скрывает все элементы на форме
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - содержит коллекцию всех элементов формы клиентского приложения для прямого доступа вне зависимости от иерархии.
//
Процедура СкрытьВсеЭлементыФормы(Элементы) Экспорт
	
	Для каждого ЭлементКоллекции Из Элементы Цикл
		Если ТипЗнч(ЭлементКоллекции) <> Тип("ДекорацияФормы") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементКоллекции.Имя, "Видимость", Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Перемещает элемент на форме.
//
// Параметры:
//  Элементы -  ВсеЭлементыФормы - содержит коллекцию всех элементов формы клиентского приложения для прямого доступа вне зависимости от иерархии.
//  Элемент - Строка - имя перемещаемого элемента
//  Родитель - Строка, ФормаКлиентскогоПриложения - имя нового родителя элемента или форма
//  МестоРасположения - Строка - имя элемента, перед которым нужно разместить перемещаемый элемент. Если не задан, то перемещается в конец коллекции.
//
Процедура ПереместитьЭлемент(Элементы, Элемент, Родитель, МестоРасположения = Неопределено) Экспорт
	
	ЭлементСсылка = Элементы.Найти(Элемент);
	Если ТипЗнч(Родитель) = Тип("Строка") Тогда
		РодительСсылка = Элементы.Найти(Родитель);
	Иначе
		РодительСсылка = Родитель;
	КонецЕсли;
	
	Если МестоРасположения = Неопределено Тогда
		Если ЭлементСсылка <> Неопределено И РодительСсылка <> Неопределено Тогда
			Элементы.Переместить(ЭлементСсылка, РодительСсылка);
		КонецЕсли;
	Иначе
		МестоРасположенияСсылка = Элементы.Найти(МестоРасположения);
		Если ЭлементСсылка <> Неопределено И РодительСсылка <> Неопределено И МестоРасположенияСсылка <> Неопределено Тогда
			Элементы.Переместить(ЭлементСсылка, РодительСсылка, МестоРасположенияСсылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает видимость элементов в Истина
//
// Параметры:
//  ВсеЭлементы - ВсеЭлементыФормы - все элементы формы.
//  ВидимыеЭлементы - Строка - список элементов через запятую для включения видимости.
//
Процедура УстановитьВидимостьЭлементов(ВсеЭлементы, ВидимыеЭлементы) Экспорт
	
	МассивВидимыхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ВидимыеЭлементы, , Истина, Истина);
		
	Для каждого ЭлементКоллекции Из МассивВидимыхЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВсеЭлементы, ЭлементКоллекции, "Видимость", Истина);
	КонецЦикла;
	
КонецПроцедуры

// Формирует представления для подписей
// 
// Параметры:
//  Подписи - ДанныеФормыКоллекция
Процедура ЗаполнитьПредставлениеСостоянияПодписей(Подписи) Экспорт

	Для Каждого СтрокаПодписи Из Подписи Цикл 
		
		СтрокаПодписи.ПодписьВернаПредставление = "";
		СвойстваДоверенности = СтрокаПодписи.СвойстваДоверенности;
		ДоверенностьОпределена = СвойстваДоверенности <> Неопределено;
		ПодписьВерна = СтрокаПодписи.ПодписьВерна;
		
		Если СтрокаПодписи.ЭтоПодписьПоДоверенности Тогда
			
			Если ДоверенностьОпределена Тогда 
				
				ПротоколПроверки = Неопределено;
				ИмеетсяПротоколПроверки = Ложь;
				
				Если ЗначениеЗаполнено(СтрокаПодписи.РезультатПроверкиПоМЧД) Тогда
					ПротоколПроверки = СтрокаПодписи.РезультатПроверкиПоМЧД.ПротоколПроверки;
					ИмеетсяПротоколПроверки = ПротоколПроверки <> Неопределено;
				КонецЕсли;
				
				ДоверенностьДействует = Ложь;
				
				Если ИмеетсяПротоколПроверки И ПротоколПроверки.ВерсияПротокола = "2.0" Тогда
					ПроверкаДоверенности = ПротоколПроверки.ПроверкаМЧД;
					ДоверенностьДействует = МашиночитаемыеДоверенности.ДоверенностьПроверенаУспешно(ПроверкаДоверенности);
				Иначе
					ДоверенностьДействует = МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(
						СвойстваДоверенности, СтрокаПодписи.ДатаПодписи);
				КонецЕсли; 
				
				СтрокаПодписи.ПодписьВернаПредставление = СтрокаПодписи.ПодписьВернаПредставление
				+ ?(ДоверенностьДействует, НСтр("ru = 'Доверенность действительна'"), 
				НСтр("ru = 'Доверенность недействительна'")) 
				+ Символы.ПС; 
				
				ЛокализованныйФорматДата = НСтр("ru='ДФ=''dd.MM.yyyy'''");
				
				СтрокаПодписи.ДоверенностьПредставление = СвойстваДоверенности.НомерДоверенности 
				+ Символы.ПС 
				+ Формат(СвойстваДоверенности.ДатаВыдачи, ЛокализованныйФорматДата) 
				+ " - " 
				+ Формат(СвойстваДоверенности.ДатаОкончания, ЛокализованныйФорматДата);
			Иначе
				СтрокаПодписи.ДоверенностьПредставление = НСтр("ru = 'Доверенность не проверена'");
				СтрокаПодписи.ПодписьВернаПредставление = НСтр("ru = 'Доверенность не найдена'") + Символы.ПС;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПодписи.ДатаПроверкиПодписи) Тогда
			СтрокаПодписи.ПодписьВернаПредставление = 
				?(ПодписьВерна, НСтр("ru = 'Подпись верна'"), НСтр("ru = 'Подпись неверна'")) 
				+ Символы.ПС + СтрокаПодписи.ПодписьВернаПредставление;
			
			ЛокализованныйФорматДатаВремя = НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''");
			
			СтрокаПодписи.ПодписьВернаПредставление = СтрокаПодписи.ПодписьВернаПредставление 
			+ Формат(СтрокаПодписи.ДатаПроверкиПодписи, ЛокализованныйФорматДатаВремя);
		Иначе
			СтрокаПодписи.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'")
			+ Символы.ПС
			+ СтрокаПодписи.ПодписьВернаПредставление;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Для полей форм, в которые выбирается договор контрагента, необходимо установить связи параметров выбора.
//
// Параметры:
//  ЭлементФормы           - ПолеФормы - Поле, в которое указывается договор контрагента.
//  ПутьКДаннымОрганизация - Строка    - Путь к реквизиту "Организация" объекта формы.
//  ПутьКДаннымКонтрагент  - Строка    - Путь к реквизиту "Контрагент"  объекта формы.
//
Процедура УстановитьСвязиПараметровВыбораДоговорКонтрагента(ЭлементФормы, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент) Экспорт
	
	ИменаСвязей = ИнтеграцияЭДО.ИменаСвязейПараметровВыбораДоговорКонтрагента();
	
	НовыеСвязи = Новый Массив;
	
	Если ЗначениеЗаполнено(ИменаСвязей.ПоОрганизации) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИменаСвязей.ПоОрганизации, ПутьКДаннымОрганизация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаСвязей.ПоКонтрагенту) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИменаСвязей.ПоКонтрагенту, ПутьКДаннымКонтрагент));
	КонецЕсли;
	
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеЭлектронныеДокументы

// Возвращает параметры, используемые для определения текущих электронных документов.
//
// Возвращаемое значение:
//  Структура - параметры, определяющие текущие электронные документы:
//   * Раздел - Строка - раздел, по которому нужно получить документы. См. Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаЭДО.ИнициализироватьРазделы.
//   * Режим - Строка - режим получения документов. Доступные значения: "ВсеДокументы", "МоиДокументы", "КИсполнению".
//   * Ответственный - Массив - пользователи (СправочникСсылка.Пользователи) для отбора документов по ответственным. Актуально для режима "МоиДокументы".
//   * Отбор - Массив - отбор документов. Отбор можно выполнять по полям учетного документа для раздела "Сформировать" 
//                      и полям электронного документа для подразделов входящих/исходящих документов. По остальным разделам отбор не выполняется.
//                      Элементы должны быть представлены структурой со свойствами:
//    ** Поле - Строка - путь к данным для отбора.
//    ** ВидСравнения - ВидСравнения - вид сравнения.
//    ** Значение - Произвольный - значение для отбора.
//   * КоличествоПолучаемыхЗаписей - Число - ограничение выборки документов (соответствует оператору ПЕРВЫЕ в запросе).
//   * ОтправлятьВходящиеДокументыНаУтверждение - Булево - если Истина, то входящие документы сначала попадают в Утвердить. Если Ложь - то сразу в Подписать.
//
Функция НовыеПараметрыОпределенияТекущихЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Раздел", "Входящие");
	Результат.Вставить("Режим", "ВсеДокументы");
	Результат.Вставить("Ответственный", Новый Массив);
	Результат.Вставить("Отбор", Новый Массив);
	Результат.Вставить("КоличествоПолучаемыхЗаписей", 0);
	Результат.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество текущих электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры определения текущих документов. См. НовыеПараметрыОпределенияТекущихЭлектронныхДокументов.
//
// Возвращаемое значение:
//  Число - число текущих документов, соответствующих переданным параметрам.
//
Функция КоличествоТекущихЭлектронныхДокументов(Знач Параметры) Экспорт
	
	Запрос = ЗапросКоличестваТекущихЭлектронныхДокументов(Параметры);
	
	Количество = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка._Счетчик;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает запрос, инициализированный для получения количества текущих электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры определения текущих документов. См. НовыеПараметрыОпределенияТекущихЭлектронныхДокументов.
//
// Возвращаемое значение:
//  Запрос - запрос для получения количества документов. Количество документов представлено в результате запроса полем "_Счетчик".
//
Функция ЗапросКоличестваТекущихЭлектронныхДокументов(Параметры) Экспорт
	
	// Изменения в тексты запросов вносить согласовано с отборами по разделу в текущих делах ЭДО.
	// См. метод СоздатьОтборПоРазделу.
	
	Раздел = Параметры.Раздел;
	
	ПутьКОтбору = "";
	
	ТекстЗапроса = Неопределено;
	
	Если Раздел = "Входящие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние НЕ В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		|		)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления				
		|		И ((&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";
	
	ИначеЕсли Раздел = "Обработать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|			И НЕ СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК Контроль
		|			ГДЕ
		|				ЭлектронныйДокументВходящийЭДО.Ссылка = Контроль.ЭлектронныйДокумент)
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		| 		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУтверждение)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И ( (&РежимОтображения = ""ВсеДокументы""
		|						ИЛИ &РежимОтображения = ""МоиДокументы""
		|							И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|			ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|			И СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения),
		|				ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения <> ""МоиДокументы""
		|		ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";


	ИначеЕсли Раздел = "Исправить" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение)
		|					
		|	ГДЕ
		|		&УсловиеОтбора	
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления			
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументВходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка	
		|				И СостоянияЭДО.Состояние В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение)
		|					)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ &РежимОтображения = ""МоиДокументы""
		|					И ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Сформировать" Тогда
		
		ПутьКОтбору = "СостоянияЭД.СсылкаНаОбъект."; 
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
		|	ГДЕ
		|		&УсловиеОтбора
		|		И СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ТранспортныйКонтейнерЭДО
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД
		|		И СостоянияЭД.Вид <> """") КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Исходящие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние НЕ В (
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением)
		|		)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления	
		|		И ((&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей)))) КАК ВложенныйЗапрос";

	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения),
		|					ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению))
		|
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения <> ""МоиДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяУточнение)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И (СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования)
		|					ИЛИ СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования))
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		ПутьКОтбору = "ЭлектронныйДокументИсходящийЭДО.";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|				ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка 
		|				И СостоянияЭДО.Состояние В (
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИсправление),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждение),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение),
		|						ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению)
		|						)
		|	ГДЕ
		|		&УсловиеОтбора
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|		ИЛИ &РежимОтображения = ""МоиДокументы""
		|		И ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ошибки" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ГДЕ
		|		СостоянияЭДО.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|	ГДЕ
		|		ЭлектронныйДокументВходящийЭДО.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящийЭДО.Ответственный В (&СписокПользователей))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|	ГДЕ
		|		ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящийЭДО.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Номер КАК Номер,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаЭД,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерЭД,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента КАК СуммаДокумента,
		|	СостоянияЭДО.Состояние КАК СостояниеЭД,
		|	""КартинкаМК"" КАК КартинкаМК,
		|	ЭлектронныйДокументВходящийЭДО.Ответственный КАК Ответственный,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета КАК ИдентификаторПакета,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ПредставлениеДокументовВнеОтбора,
		|	ЛОЖЬ КАК ПервыйДокументПакета,
		|	ДанныеКоличестваДокументовВПакете.КоличествоДокументов КАК КоличествоДокументовВПакете,
		|	ПакетыДокументовЭДО.Дата КАК ДатаПакета
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|	И СостоянияЭДО.Состояние В 
		|	(
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению)
		|	)
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|				КОЛИЧЕСТВО(СоставПакетовДокументовЭДО.ЭлектронныйДокумент) КАК КоличествоДокументов
		|			ИЗ
		|				РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			СГРУППИРОВАТЬ ПО
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета) КАК ДанныеКоличестваДокументовВПакете
		|			ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ДанныеКоличестваДокументовВПакете.ИдентификаторПакета
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Дата,
		|	ЭлектронныйДокументИсходящийЭДО.Номер,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.СуммаДокумента,
		|	СостоянияЭДО.Состояние,
		|	""КартинкаМК"",
		|	ЭлектронныйДокументИсходящийЭДО.Ответственный,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)),
		|	Ложь,
		|	ДанныеКоличестваДокументовВПакете.КоличествоДокументов,
		|	ПакетыДокументовЭДО.Дата
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|	ПО СостоянияЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|	И СостоянияЭДО.Состояние В 
		|	(
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправка),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения),
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению)
		|	)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|				КОЛИЧЕСТВО(СоставПакетовДокументовЭДО.ЭлектронныйДокумент) КАК КоличествоДокументов
		|			ИЗ
		|				РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|			СГРУППИРОВАТЬ ПО
		|				СоставПакетовДокументовЭДО.ИдентификаторПакета) КАК ДанныеКоличестваДокументовВПакете
		|			ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ДанныеКоличестваДокументовВПакете.ИдентификаторПакета
		|		ПО СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыДокументовЭДО КАК ПакетыДокументовЭДО
		|		ПО СоставПакетовДокументовЭДО.ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакета
		|ГДЕ
		|	НЕ ЭлектронныйДокументИсходящийЭДО.ПометкаУдаления
		|) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ТранспортныйКонтейнерЭДО КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.ПометкаУдаления = ЛОЖЬ
		|		И ОсновнаяТаблица.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|		И &СтатусыКРаспаковке
		|) КАК ВложенныйЗапрос";
		
		СтатусыКРаспаковке = ТранспортныеКонтейнерыЭДО.СтатусыНеРаспакованныхТранспортныхСообщенийБЭД();
		
		МассивСтатусовВВидеСтрок = Новый Массив;
		Для Каждого СтатусКРаспаковке Из СтатусыКРаспаковке Цикл 
			ИмяПеречисления = ОбщегоНазначения.ИмяТаблицыПоСсылке(СтатусКРаспаковке);
			ИмяЗначенияПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(СтатусКРаспаковке); 
			МассивСтатусовВВидеСтрок.Добавить(СтрШаблон("Значение(%1.%2)", ИмяПеречисления, ИмяЗначенияПеречисления));
		КонецЦикла; 

		ТекстУсловия = "Истина";
		Если СтатусыКРаспаковке.Количество() > 0 Тогда
			СписокСтатусовВВидеСтроки = СтрСоединить(МассивСтатусовВВидеСтрок, ", ");
			ТекстУсловия = СтрШаблон("ОсновнаяТаблица.Статус В (%1)", СписокСтатусовВВидеСтроки);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусыКРаспаковке", ТекстУсловия);
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяОтправить)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ОжидаемСогласия) ИЛИ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.НастройкаРоуминга)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяСогласие)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.Ознакомиться) КАК ВложенныйЗапрос";
		
		
	ИначеЕсли Раздел = "НоменклатураКонтрагентов" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|		КонтрольСопоставленияНоменклатурыЭДО.Владелец,
		|		КонтрольСопоставленияНоменклатурыЭДО.Идентификатор
		|	ИЗ
		|		РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК КонтрольСопоставленияНоменклатурыЭДО) КАК ВложенныйЗапрос";
		
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияБЭД.СформироватьТекстИсключения(
			"НедопустимыеПараметрыМетода", "ЗапросКоличестваТекущихЭлектронныхДокументов");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РежимОтображения", Параметры.Режим);
	СписокПользователей = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Ответственный);
	Если Параметры.Режим <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	
	ИсполняемыйОтбор = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	
	НомерОтбора = 1;
	ПрефиксПараметров = "ОтборПараметр";
	Для каждого ЭлементОтбора Из ИсполняемыйОтбор Цикл
		
		ОтборПоСсылкеИзмерения = (Раздел = "Сформировать" И ЭлементОтбора.Поле = "Ссылка");
		Если НЕ ОтборПоСсылкеИзмерения Тогда
			ЭлементОтбора.Поле = ПутьКОтбору + ЭлементОтбора.Поле;
		Иначе
			ПутьКОтборуБезТочки = ПутьКОтбору;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПутьКОтборуБезТочки, 1);
			ЭлементОтбора.Поле = ПутьКОтборуБезТочки;
		КонецЕсли;
				
		Запрос.УстановитьПараметр(ПрефиксПараметров + Формат(НомерОтбора, "ЧГ=0"), ЭлементОтбора.Значение);
		НомерОтбора = НомерОтбора + 1;
	КонецЦикла;
	
	ТекстОтбора = ТекстУсловияПоОтбору(ИсполняемыйОтбор, ПрефиксПараметров);
	Если ЗначениеЗаполнено(ТекстОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ТекстОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	ТекстПервые = "";
	Если ЗначениеЗаполнено(Параметры.КоличествоПолучаемыхЗаписей) Тогда
		ТекстПервые = "ПЕРВЫЕ " + Формат(Параметры.КоличествоПолучаемыхЗаписей, "ЧГ=0");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1000", ТекстПервые);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ВидыЭлектронныхДокументовДоступныеДляОтборов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокументаЭДО
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	НЕ ВидыДокументовЭДО.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокументаЭДО");
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомЭлектронныхДокументов

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД) Экспорт
	
		Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			
			Если ЗначениеЗаполнено(Элемент.ЭлектронныйДокумент) Тогда
				
				СхемаРегламента = СхемаРегламентаЭлектронногоДокумента(Элемент.ЭлектронныйДокумент);
				ОбновитьЭлементыДереваЭлектронныхДокументов(ДеревоОбъект, СхемаРегламента, Элемент.Актуальный);
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ИнтеграцияСИнтерфейсомУчетныхДокументов

#Область ФормыСписков

// Параметры "ПриСозданииНаСервере" формы списка справочников и документов.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ИсточникКомандЭДО - ДинамическийСписок - список, в котором будут размещены кеш и настройки видимости команд ЭДО
// * КолонкаСостоянияЭДО - ПолеФормы
// * ИспользоватьОформлениеБиблиотеки - Булево
//
Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт

	ПараметрыПриСоздании = ПодключаемыеКомандыЭДО.ПараметрыРазместитьНаФормеКомандыЭДО();
	ПараметрыПриСоздании.Вставить("КолонкаСостоянияЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ИспользоватьОформлениеБиблиотеки", Истина);
	//@skip-check constructor-function-return-section
	Возврат ПараметрыПриСоздании;

КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы списка справочников и документов
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСписка
//
Процедура ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере) Экспорт

	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Направление = ПараметрыПриСозданииНаСервере.Направление;
	
	Если ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО <> Неопределено Тогда
		
		Если ПараметрыПриСозданииНаСервере.ИспользоватьОформлениеБиблиотеки Тогда
		
			КолонкаСостоянияЭДО = ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО;
		
			КолонкаСостоянияЭДО.ГиперссылкаЯчейки = Истина;
			
			ЭлементОформления = ПараметрыПриСозданииНаСервере.Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.Использование = Истина;
		    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.Имя);

			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.ПутьКДанным);
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;	
			
		КонецЕсли;
		
		Если Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ИспользоватьОбменЭД = НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами();
			ИспользоватьВнутренниеДокументыЭДО = НастройкиЭДО.ИспользуютсяВнутренниеДокументы();
			ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО.Видимость = ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// см. ПодключаемыеКомандыЭДО.ПриПолученииДанныхНаСервере
//
Процедура ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	ПодключаемыеКомандыЭДО.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область ФормыОбъектов

// Параметры "ПриСозданииНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ИсточникКомандЭДО - ДинамическийСписок - список, в котором будут размещены кеш и настройки видимости команд ЭДО
// * ДокументСсылка - ДокументСсылка
// * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент для отображения состояния ЭДО
// * ГруппаСостояниеЭДО - ГруппаФормы - владелец для размещения КонтроллерСостояниеЭДО
// * СкрыватьСостояниеПриОтсутствииЭДО - Булево
//
Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт

	ПараметрыПриСоздании = ПодключаемыеКомандыЭДО.ПараметрыРазместитьНаФормеКомандыЭДО();
	ПараметрыПриСоздании.Вставить("ДокументСсылка", Неопределено);
	ПараметрыПриСоздании.Вставить("КонтроллерСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ГруппаСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	//@skip-check constructor-function-return-section
	Возврат ПараметрыПриСоздании;

КонецФункции

// Параметры "ПриСозданииНаСервере" формы справочника.
// 
// Возвращаемое значение:
//  Структура:
// * Форма - ФормаКлиентскогоПриложения
// * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ИсточникКомандЭДО - ДинамическийСписок - список, в котором будут размещены кеш и настройки видимости команд ЭДО
// * СправочникСсылка - СправочникСсылка
// * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - элемент для отображения состояния ЭДО
// * ГруппаСостояниеЭДО - ГруппаФормы - владелец для размещения КонтроллерСостояниеЭДО
// * СкрыватьСостояниеПриОтсутствииЭДО - Булево
//
Функция ПараметрыПриСозданииНаСервере_ФормаСправочника() Экспорт

	ПараметрыПриСоздании = ПодключаемыеКомандыЭДО.ПараметрыРазместитьНаФормеКомандыЭДО();
	ПараметрыПриСоздании.Вставить("СправочникСсылка", Неопределено);
	ПараметрыПриСоздании.Вставить("КонтроллерСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("ГруппаСостояниеЭДО", Неопределено);
	ПараметрыПриСоздании.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	//@skip-check constructor-function-return-section
	Возврат ПараметрыПриСоздании;

КонецФункции

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаДокумента
//   
Процедура ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере) Экспорт
	
	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Если ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПараметрыПриСозданииНаСервере.Форма, "ПараметрыОбменаСКонтрагентами") Тогда
		
		Реквизиты.Добавить(Новый РеквизитФормы("ПараметрыОбменаСКонтрагентами", Новый ОписаниеТипов()));
		
		ПараметрыПриСозданииНаСервере.Форма.ИзменитьРеквизиты(Реквизиты);
		
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриСозданииНаСервере.ДокументСсылка);
	ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	
	ПараметрыОбменаСКонтрагентами = Новый Структура;
	ПараметрыОбменаСКонтрагентами.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчета);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("КонтекстОперации", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	Если ТипЗнч(ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыОбменаСКонтрагентами.Вставить("ПутьКДаннымКонтроллераСостояния",
			ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО.ПутьКДанным);
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами.СкрыватьСостояниеНеНачатогоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыПриСозданииНаСервере, "СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	ПараметрыПриСозданииНаСервере.Форма.ПараметрыОбменаСКонтрагентами = ПараметрыОбменаСКонтрагентами;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Обработчик события "ПриСозданииНаСервере" формы справочника.
//
// Параметры:
//  ПараметрыПриСозданииНаСервере - см. ПараметрыПриСозданииНаСервере_ФормаСправочника
//   
Процедура ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере) Экспорт
	
	ПодключаемыеКомандыЭДО.РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
	
	Если ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ПараметрыПриСозданииНаСервере.Форма, "ПараметрыОбменаСКонтрагентами") Тогда
		
		Реквизиты.Добавить(Новый РеквизитФормы("ПараметрыОбменаСКонтрагентами", Новый ОписаниеТипов()));
		
		ПараметрыПриСозданииНаСервере.Форма.ИзменитьРеквизиты(Реквизиты);
		
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриСозданииНаСервере.СправочникСсылка);
	ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	
	ПараметрыОбменаСКонтрагентами = Новый Структура;
	ПараметрыОбменаСКонтрагентами.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчета);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("КонтекстОперации", Неопределено);
	ПараметрыОбменаСКонтрагентами.Вставить("СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	Если ТипЗнч(ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыОбменаСКонтрагентами.Вставить("ПутьКДаннымКонтроллераСостояния",
			ПараметрыПриСозданииНаСервере.КонтроллерСостояниеЭДО.ПутьКДанным);
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами.СкрыватьСостояниеНеНачатогоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыПриСозданииНаСервере, "СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	
	ПараметрыПриСозданииНаСервере.Форма.ПараметрыОбменаСКонтрагентами = ПараметрыОбменаСКонтрагентами;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	
КонецПроцедуры

// Получение параметров оповещения для формы документ.
//
// Возвращаемое значение:
//  Структура - параметры, передаваемые в метод ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента:
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * ДокументСсылка - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Ссылка на документ.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, РасширениеПоляФормыДляПоляНадписи - элемент, в заголовке которого
//                                                                                   будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ГруппаФормы - элемент, которому может принадлежать КонтроллерСостояниеЭДО,
//                                         необязательный параметр.
//    * МестоРазмещенияКоманд - РасширениеГруппыФормыДляПодменю - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыПриЧтенииНаСервере_ФормаДокумента() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("ДокументСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Получение параметров оповещения для формы справочника.
//
// Возвращаемое значение:
//  Структура - параметры, для передачи в метод ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника:
//    * Форма - УправляемаяФорма - форма справочника.
//    * СправочникСсылка - СправочникСсылка
//    * КонтроллерСостояниеЭДО - ЭлементФормы - элемент формы "декорация", "поле надписи", в заголовке которого будет
//    		отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО,
//   	 	необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыПриЧтенииНаСервере_ФормаСправочника() Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма");
	ПараметрыОповещения.Вставить("СправочникСсылка");
	ПараметрыОповещения.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыОповещения.Вставить("ГруппаСостояниеЭДО");
	ПараметрыОповещения.Вставить("МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ПриЧтенииНаСервере" формы документа.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - Структура - см. ИнтерфейсДокументовЭДО.ПараметрыПриЧтенииНаСервере_ФормаДокумента.
//
Процедура ПриЧтенииНаСервере_ФормаДокумента(ПараметрыПриЧтенииНаСервере) Экспорт

	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры

// Обработчик события "ПриЧтенииНаСервере" формы справочника.
//
// Параметры:
//  ПараметрыПриЧтенииНаСервере - Структура - см. ИнтерфейсДокументовЭДО.ПараметрыПриЧтенииНаСервере_ФормаСправочника.
//
Процедура ПриЧтенииНаСервере_ФормаСправочника(ПараметрыПриЧтенииНаСервере) Экспорт

	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыПриЧтенииНаСервере);
	
КонецПроцедуры

// Функция - Параметры "ПослеЗаписиНаСервере" формы документа.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПослеЗаписиНаСервере:
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * ДокументСсылка - ДокументСсылка - ссылка на документ.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы - элемент формы "декорация", "поле формы", в заголовке которого
//                                                будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ГруппаФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО,
//                                         необязательный параметр.
//
Функция ПараметрыПослеЗаписиНаСервере() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура;
	
	ПараметрыПослеЗаписи.Вставить("Форма");
	ПараметрыПослеЗаписи.Вставить("ДокументСсылка");
	ПараметрыПослеЗаписи.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыПослеЗаписи.Вставить("ГруппаСостояниеЭДО");
	
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Функция - Параметры "ПослеЗаписиНаСервере" формы справочника.
// 
// Возвращаемое значение:
//  Структура - Параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПослеЗаписиНаСервере_ФормаСправочника:
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * СправочникСсылка - СправочникСсылка - ссылка на элемент справочника.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы - элемент формы "декорация", "поле формы", в заголовке которого
//                                                будет отображаться состояние ЭДО, необязательный параметр.
//    * ГруппаСостояниеЭДО - ГруппаФормы - элемент формы "группа", которому может принадлежать КонтроллерСостояниеЭДО,
//                                         необязательный параметр.
//
Функция ПараметрыПослеЗаписиНаСервере_ФормаСправочника() Экспорт
	
	ПараметрыПослеЗаписи = Новый Структура;
	
	ПараметрыПослеЗаписи.Вставить("Форма");
	ПараметрыПослеЗаписи.Вставить("СправочникСсылка");
	ПараметрыПослеЗаписи.Вставить("КонтроллерСостояниеЭДО");
	ПараметрыПослеЗаписи.Вставить("ГруппаСостояниеЭДО");
	
	Возврат ПараметрыПослеЗаписи;
	
КонецФункции

// Обработчик события "ПослеЗаписиНаСервере" формы документа
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - см. ПараметрыПослеЗаписиНаСервере
//
Процедура ПослеЗаписиНаСервере(ДокументОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаДокумента(ПараметрыПослеЗаписи);
	
	ДокументОбъект.ДополнительныеСвойства.Свойство("КонтекстОперации", ПараметрыПослеЗаписи.Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписиНаСервере" формы справочника
//
// Параметры:
//  СправочникОбъект - СправочникОбъект - Записываемый объект.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//  ПараметрыПослеЗаписи - см. ПараметрыПослеЗаписиНаСервере_ФормаСправочника
//
Процедура ПослеЗаписиНаСервере_ФормаСправочника(СправочникОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи) Экспорт
	
	ИнтерфейсДокументовЭДОКлиентСервер.ЗаполнитьСостояниеЭДО_ФормаСправочника(ПараметрыПослеЗаписи);
	
	СправочникОбъект.ДополнительныеСвойства.Свойство("КонтекстОперации",
		ПараметрыПослеЗаписи.Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
	
КонецПроцедуры

// Параметры для процедуры ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении.
// Если ОписаниеОбъектаУчета оставить Неопределено, тогда оно будет получено по ДокументОбъект.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передать в процедуру ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении
//    * Форма                 - УправляемаяФорма - Форма учетного документа.
//    * ДокументСсылка        - ДокументСсылка   - Ссылка на документ.
//    * ДокументОбъект        - ДокументОбъект   - Объект документа.
//    * КонтроллерСостояниеЭДО - ДекорацияФормы, ПолеФормы - контроллер состояния ЭДЛ.
//    * ГруппаСостояниеЭДО    - ГруппаФормы      - Группа, в которую входит "КонтроллерСостояниеЭДО".
//    * ОписаниеОбъектаУчета  - Неопределено, ТаблицаЗначений - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета.
//
Функция ПараметрыИзмененияКлючевыхРеквизитов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма");
	Параметры.Вставить("ДокументСсылка");
	Параметры.Вставить("ДокументОбъект");
	Параметры.Вставить("КонтроллерСостояниеЭДО");
	Параметры.Вставить("ГруппаСостояниеЭДО");
	Параметры.Вставить("ОписаниеОбъектаУчета");
	
	Возврат Параметры;
	
КонецФункции

// Обработчик события "ПриИзменении" для полей документов,
// которые содержат значения "Организация", "Контрагент", "ДоговорКонтрагента".
//
// Параметры:
//  ПараметрыПриИзменении - Структура - см. ИнтерфейсДокументовЭДО.ПараметрыИзмененияКлючевыхРеквизитов.
//
Процедура КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении(ПараметрыПриИзменении) Экспорт
	
	ПараметрыОбменаСКонтрагентами = ПараметрыПриИзменении.Форма.ПараметрыОбменаСКонтрагентами;
	
	// По незаписанным документам определить параметры не можем, поэтому не реагируем на изменение ключевых реквизитов
	Если Не ЗначениеЗаполнено(ПараметрыПриИзменении.ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриИзменении.ОписаниеОбъектаУчета = Неопределено Тогда
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ПараметрыПриИзменении.ДокументОбъект);
	Иначе
		ОписаниеОбъектаУчета = ПараметрыПриИзменении.ОписаниеОбъектаУчета;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаУчета) = Тип("ТаблицаЗначений") Тогда
		ОписаниеОбъектаУчета = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОписаниеОбъектаУчета);
	КонецЕсли;
	
	ОписаниеОбъектаУчетаИзменено = Не ОбщегоНазначения.КоллекцииИдентичны(ОписаниеОбъектаУчета,
		ПараметрыОбменаСКонтрагентами.ОписаниеОбъектаУчета);
	
	Если ОписаниеОбъектаУчетаИзменено Тогда
		
		ПараметрыПолученияСостояния = ИнтеграцияЭДО.НовыеПараметрыПолученияСостоянияНеНачатогоЭДООбъектаУчета();
		
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			СтрокаПараметровПолученияСостояния = ПараметрыПолученияСостояния.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметровПолученияСостояния, СтрокаОписания);
		КонецЦикла;
		
		ДанныеСостоянияЭДО = Неопределено;
		ИнтеграцияЭДО.ЗаполнитьСостояниеНеНачатогоЭДООбъектаУчета(ПараметрыПолученияСостояния, ДанныеСостоянияЭДО);
		
		ДанныеСостоянияЭДОТекущие = ДанныеСостоянияЭДО;
		ПредставлениеСостояния = ДанныеСостоянияЭДО.ПредставлениеСостояния;
		
	ИначеЕсли ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные <> Неопределено Тогда
		
		
		ДанныеСостоянияЭДОТекущие = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные;
		ПредставлениеСостояния = ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОИзначальные.ПредставлениеСостояния;
		
	КонецЕсли;
	
	ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие = ДанныеСостоянияЭДОТекущие;
	
	Если ТипЗнч(ПараметрыПриИзменении.КонтроллерСостояниеЭДО) = Тип("ПолеФормы") Тогда
		ПараметрыПриИзменении.Форма[ПараметрыПриИзменении.КонтроллерСостояниеЭДО.ПутьКДанным] = ПредставлениеСостояния;
	Иначе
		ПараметрыПриИзменении.КонтроллерСостояниеЭДО.Заголовок = ПредставлениеСостояния;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормаСтатусовЭлектронныхДокументов

// Возвращает статусы электронных документов объекта учета.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  УчитыватьВсеАктуальные - Булево
// 
// Возвращаемое значение:
//  см. НовыйНаборСтатусовЭлектронныхДокументов
Функция СтатусыЭлектронныхДокументовОбъектаУчета(ОписаниеОбъектаУчета, УчитыватьВсеАктуальные = Ложь) Экспорт
	
	СтатусыЭлектронныхДокументов = НовыйНаборСтатусовЭлектронныхДокументов();
	
	ПараметрыОбъектаУчета = ПараметрыОбъектаУчетаДляЗапросаСтатусов(ОписаниеОбъектаУчета);
	
	ДанныеДляЗаполнения = ДанныеДляЗаполненияСтатусовЭлектронныхДокументов(ПараметрыОбъектаУчета, УчитыватьВсеАктуальные);
	
	ЗаполнитьСтатусыПоАктуальнымДокументам(СтатусыЭлектронныхДокументов, ДанныеДляЗаполнения.ВыборкаАктуальныхДокументов);
	
	ЗаполнитьСтатусыПоНастройкам(СтатусыЭлектронныхДокументов, ДанныеДляЗаполнения.ВыборкаНастроек);
	
	Возврат СтатусыЭлектронныхДокументов;
	
КонецФункции

#КонецОбласти

#Область ФормыМЧД
// Возвращает количество подписанных электронных документов доверенностью.
//
// Параметры:
//  Доверенность - СправочникСсылка - ссылка на элемент справочника машиночитаемых доверенностей.
//
// Возвращаемое значение:
//  Число - число текущих документов, соответствующих переданным параметрам. 
//
Функция КоличествоПодписанныхЭлектронныхДокументовПоМЧД(Знач Доверенность) Экспорт
	
	Запрос = ЗапросКоличестваПодписанныхЭлектронныхДокументовПоМЧД(Доверенность);
	
	Количество = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;

КонецФункции

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

// см. УправлениеПечатьюПереопределяемый.ПриПечати
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами()
			Или Не НастройкиЭДО.ИспользуютсяВнутренниеДокументы() 
			Или ПараметрыПечати.Свойство("ИсключитьШтампы")
			Или Не ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов() Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		ПараметрыВнутреннегоЭД = Неопределено;
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектПечати.Значение);
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
				ПараметрыВнутреннегоЭД = СтрокаОписания;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыВнутреннегоЭД <> Неопределено Тогда
			
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				
				ОбластьДокумента  = ПечатнаяФорма.ТабличныйДокумент.Области.Найти(ОбъектПечати.Представление);
				
				Если ОбластьДокумента <> Неопределено Тогда
					
					МетаданныеОбъекта = ОбъектПечати.Значение.Метаданные();
					
					ПолноеИмяФормы = МетаданныеОбъекта.Формы.ФормаДокумента.ПолноеИмя();
					СписокОбъектов = Новый Массив();
					СписокОбъектов.Добавить(МетаданныеОбъекта);
					
					Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектПечати.Значение));
					КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(ПолноеИмяФормы, СписокОбъектов);
					НайденнаяКоманда = КомандыПечати.Найти(ПечатнаяФорма.ИмяМакета, "Идентификатор"); 
					
					Если Не ЗначениеЗаполнено(НайденнаяКоманда) Тогда
						Возврат;
					КонецЕсли;
					
					ВидВнутреннегоДокумента = ЭлектронныеДокументыЭДО.НайтиСоздатьВидВнутреннегоДокумента(
						Идентификатор,
						НайденнаяКоманда);
					
					АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(
						ОбъектПечати.Значение);
					
					ОтборПоВидуДокумента = Новый Структура("ВидДокумента", ВидВнутреннегоДокумента);
					АктуальныеЭлектронныеДокументыПоВиду = АктуальныеЭлектронныеДокументы.НайтиСтроки(
						ОтборПоВидуДокумента);
					
					Если АктуальныеЭлектронныеДокументыПоВиду.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					АктуальныйЭлектронныйДокумент = АктуальныеЭлектронныеДокументыПоВиду[0].ЭлектронныйДокумент;
					
					Если Не ЗначениеЗаполнено(АктуальныйЭлектронныйДокумент) Тогда
						Продолжить;
					КонецЕсли;
					
					ЭД = ЭлектронныеДокументыЭДО.СообщениеОтправителя(АктуальныйЭлектронныйДокумент);
					
					Если Не ЗначениеЗаполнено(ЭД) Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(
						ПечатнаяФорма.ТабличныйДокумент,
						ЭД);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// см. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами()
		Или Не ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;
	
	ЕстьНаправлениеЭДОВнутренний = Ложь;
	ЕстьНаправлениеЭДОВнешний = Ложь;
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектыУчета[0]);
	Для каждого ПараметрыЭД Из ОписаниеОбъектаУчета Цикл
		Если ПараметрыЭД.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			ЕстьНаправлениеЭДОВнутренний = Истина;
		Иначе
			ЕстьНаправлениеЭДОВнешний = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНаправлениеЭДОВнутренний  
		И ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО") Тогда 
		ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ЕстьНаправлениеЭДОВнешний
		И ОбъектыУчета.Количество() = 1 
		И Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(ТипЗнч(ОбъектыУчета[0])) Тогда
		ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СхемаРегламента

// Возвращает новые данные элементов схемы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Наименование - Строка
// * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// * Сообщение - ДокументСсылка.СообщениеЭДО
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
// * ДатаИзмененияСтатуса - Дата
// * ДополнительнаяИнформация - Строка
// * ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * АдресОписанияСообщения - Строка
// * Доступность - Булево
// * ИмяФайла - Строка
// * Расширение - Строка
Функция НовыеДанныеЭлементовСхемы() Экспорт
	ДанныеЭлементов = Новый ТаблицаЗначений;
	ДанныеЭлементов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("ТипЭлементаРегламента",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("ДокументСсылка.СообщениеЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ВидСообщения", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ДанныеЭлементов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыСообщенийЭДО"));
	ДанныеЭлементов.Колонки.Добавить("ДатаИзмененияСтатуса", Новый ОписаниеТипов("Дата"));
	ДанныеЭлементов.Колонки.Добавить("ДополнительнаяИнформация", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("ПрисоединенныйФайл",
		Новый ОписаниеТипов("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы"));
	ДанныеЭлементов.Колонки.Добавить("АдресОписанияСообщения", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("Доступность", Новый ОписаниеТипов("Булево"));
	ДанныеЭлементов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	ДанныеЭлементов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	Возврат ДанныеЭлементов;
КонецФункции

Процедура ЗаполнитьСхемуРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы, СхемаРегламента) Экспорт
	
	НоваяСхемаРегламента = ЭлектронныеДокументыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	
	ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(НоваяСхемаРегламента, ДанныеЭлементовСхемы);
	
	ОбновитьЭлементыСхемыРегламента(СхемаРегламента, НоваяСхемаРегламента);
	
КонецПроцедуры

Функция ИдентификаторЭлементаСхемыРегламента(ЭлементСхемыРодитель, Сообщение) Экспорт
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		Если ЭлементСхемы.Сообщение = Сообщение Тогда
			Возврат ЭлементСхемы.ПолучитьИдентификатор();
		КонецЕсли;
		ИдентификаторЭлемента = ИдентификаторЭлементаСхемыРегламента(ЭлементСхемы, Сообщение);
		Если ИдентификаторЭлемента <> Неопределено Тогда
			Возврат ИдентификаторЭлемента;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПредупрежденияКомпонентов

Процедура СформироватьПредупреждения(Форма, ГруппаПредупреждений) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Форма.Объект.Организация;
	КлючНастроекОтправки.Получатель = Форма.Объект.Контрагент;
	КлючНастроекОтправки.Договор = Форма.Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Форма.Объект.ВидДокумента;
	
	Предупреждения = ПолучитьПредупрежденияКомпонентов(КлючНастроекОтправки);
	
	Форма.АдресХранилищаПредупреждений = ПоместитьВоВременноеХранилище(Предупреждения, Форма.УникальныйИдентификатор);
	
	НеподдерживаемыйСпособОбменаВид = НастройкиЭДО.ВидыПредупреждений().НеподдерживаемыйСпособОбмена;
	ПредупрежденияНеподдерживаемыйСпособОбмена = ПредупрежденияПоВиду(Предупреждения,
		НеподдерживаемыйСпособОбменаВид);
	
	ИмяГруппыПрекращенияПрямогоОбмена = "ГруппаПрекращениеПоддержкиПрямогоОбмена";
	ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом = "ГруппПредупрежденияОбменаСКонтрагентом";
	ИмяГруппыОНеактуальномЭлектронномДокументе = "ГруппПредупрежденияОНеактуальномЭлектронномДокументе";
	
	СоздатьЭлементыОтображенияПредупрежденияПрекращенияПрямогоОбмена(Форма, ГруппаПредупреждений,
		ИмяГруппыПрекращенияПрямогоОбмена);
	СоздатьЭлементыОтображенияПредупрежденияОбменаСКонтрагентом(Форма, ГруппаПредупреждений,
		ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом);
	СоздатьЭлементыОтображенияПредупрежденияОНеактуальномЭлектронномДокументе(Форма, ГруппаПредупреждений,
		ИмяГруппыОНеактуальномЭлектронномДокументе);

	Форма.Элементы.Найти(ИмяГруппыПрекращенияПрямогоОбмена).Видимость = ЗначениеЗаполнено(
		ПредупрежденияНеподдерживаемыйСпособОбмена);
	Форма.Элементы.Найти(ИмяГруппыПрекращенияПредупрежденияОбменаСКонтрагентом).Видимость = ЗначениеЗаполнено(
		Предупреждения);
	Форма.Элементы.Найти(ИмяГруппыОНеактуальномЭлектронномДокументе).Видимость = Ложь;	
	
	МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(МассивОбъектов);
	ОбъектыУчетаЭлектронногоДокумента = ОбъектыУчетаЭлектронныхДокументов.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", Форма.Объект.Ссылка));
		
	Для Каждого СтрокаДанных Из ОбъектыУчетаЭлектронногоДокумента Цикл
		Если Не СтрокаДанных.Актуальный 
			И ТипЗнч(СтрокаДанных.ОбъектУчета) <> Тип("СправочникСсылка.НастройкиЭДО") Тогда
			
			Форма.Элементы.Найти(ИмяГруппыОНеактуальномЭлектронномДокументе).Видимость = Истина;	
	
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

// Настраивает визуальное оформление команды Переформировать.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ЭлементСхемы - СтрокаДереваЗначений
Процедура НастроитьКомандуПереформировать(Форма, ЭлементСхемы) Экспорт
	
	КнопкаПереформировать = Форма.Элементы.Переформировать;
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	Если Форма.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован 
		Или Не ЭлементСхемы.Распознан 
		Или Не ЭлектронныеДокументыЭДО.ПереформированиеДоступно(ЭлементСхемы.ТипДокумента)
		Или Не ЕстьПравоОбработкиДокументов
		Или ЕстьЭлектронныйДокумент(Форма.Основания.ВыгрузитьЗначения()) Тогда
		
		КнопкаПереформировать.Видимость = Ложь;	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПереформироватьДокумент") Тогда
			 Форма.Элементы.ПереформироватьДокумент.Видимость = Ложь;	
		КонецЕсли;
		Возврат;
	Иначе
		КнопкаПереформировать.Видимость = Истина;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПереформироватьДокумент") Тогда
			 Форма.Элементы.ПереформироватьДокумент.Видимость = Истина;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Форма.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		ПереместитьЭлемент(Форма.Элементы, Форма.Элементы.Переформировать.Имя, Форма.Элементы.ГруппаКоманды,
			Форма.Элементы.ГруппаКомандОсновные.Имя);
			
	Иначе
		ПереместитьЭлемент(Форма.Элементы, Форма.Элементы.Переформировать.Имя, Форма.Элементы.ПодменюДругиеДействия,
			Форма.Элементы.ГруппаКомандСоздатьПроизвольныйДокумент.Имя);
	КонецЕсли;
	
	Если ЭлементСхемы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
		И ЗначениеЗаполнено(Форма.Основания) Тогда
		КнопкаПереформировать.Заголовок = НСтр("ru = 'Переформировать документ'");
	ИначеЕсли ЭлементСхемы.Направление = Перечисления.НаправленияЭДО.Исходящий 
		И ЗначениеЗаполнено(Форма.Основания) Тогда
		КнопкаПереформировать.Заголовок = СтрШаблон(НСтр("ru = 'Переформировать %1'"), ЭлементСхемы.ВидДокумента);
	Иначе
		КнопкаПереформировать.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки
	
Функция НастройкиВнутреннегоЭДО(Организация, ВидДокумента) Экспорт
	
	Запросы = Новый Массив;
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ВидДокумента = "&ВидДокумента";
	Организация = Организация;		
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить())[0];
	КонецЕсли;
	
КонецФункции
	
#КонецОбласти

#Область КонтрольДоступа

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.ПроверкиЭлектронныхПодписейЭДО.Чтение.Организации
	|РегистрСведений.ПроверкиЭлектронныхПодписейЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеКонфигурации

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_9_5

#Область РегистрыСведений_ПроверкиЭлектронныхПодписейЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.5.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f000eb23-0b04-496b-885e-56944a7cad5e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПроверкиЭлектронныхПодписейЭДО,
		|РегистрСведений.ЭлектронныеПодписиПоМЧД,
		|Документ.СообщениеЭДО,
		|Справочник.СообщениеЭДОПрисоединенныеФайлы";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПроверкиЭлектронныхПодписейЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: запись проверок электронных подписей ЭДО.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ПроверкиЭлектронныхПодписейЭДО

// Записывает значения проверок электронных подписей по электронному документу из сообщения ЭДО присоединенного файла.
//
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
Процедура ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект) Экспорт
	
	Если ТипЗнч(ПодписанныйОбъект) <> Тип("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписанныйОбъект, "ВладелецФайла");
	Если ЭлектронныеДокументыЭДО.ЭтоСлужебныйСообщение(СообщениеЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(СообщениеЭДО);
	
	ЗначенияПроверок = ЗначенияПроверокЭлектронныхПодписейПоЭлектронномуДокументу(ЭлектронныйДокумент);
	РегистрыСведений.ПроверкиЭлектронныхПодписейЭДО.ЗаписатьПроверки(ЭлектронныйДокумент, ЗначенияПроверок);
	
КонецПроцедуры

// Рассчитывает значения проверок электронных подписей по электронному документу.
// Учитываем только подписи сообщений ЭДО с типами элемента регламента ИнформацияОтправителя и ИнформацияПолучателя.
// Если нет проверок, то возвращаются пустые значения.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                        ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  Структура - Значения проверок электронной подписи по электронному документу:
//   * ДатаПроверкиПодписиПоМЧД - Дата
//   * ЕстьНевалидныеПодписиПоМЧД - Булево
//
Функция ЗначенияПроверокЭлектронныхПодписейПоЭлектронномуДокументу(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЭлектронныеПодписиПоМЧД.ДатаПроверки), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПроверкиПодписиПоМЧД,
	|	НЕ ЕСТЬNULL(МИНИМУМ(ЭлектронныеПодписиПоМЧД.ПодписьВерна), ИСТИНА) КАК ЕстьНевалидныеПодписиПоМЧД
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
	|ГДЕ
	|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект.ВладелецФайла.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект.ВладелецФайла.ТипЭлементаРегламента В
	|	(ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("ДатаПроверкиПодписиПоМЧД, ЕстьНевалидныеПодписиПоМЧД");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Корректирует даты подписи на часовой пояс клиента.
// 
// Параметры:
//  Подпись - Структура, Неопределено, Произвольный - Подпись:
// * СвойстваПодписи - Структура -:
// ** Подпись - ДвоичныеДанные -
// ** УстановившийПодпись - СправочникСсылка.Пользователи -
// ** ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей -
// ** Комментарий - Строка -
// ** ИмяФайлаПодписи - Строка -
// ** ДатаПодписи - Дата -
// ** ДатаПроверкиПодписи - Дата -
// ** ПодписьВерна - Булево -
// ** ПорядковыйНомер - Число -
// ** Сертификат - ХранилищеЗначения -
// ** Отпечаток - Строка -
// ** КомуВыданСертификат - Строка -
// ** Должность - Строка -
// * ЭтоПодписьПоДоверенности - Булево -
// * СвойстваДоверенности 
// * ОтветнаяПодпись 
Процедура СкорректироватьДатыПодписиНаЧасовойПоясКлиента(Подпись) Экспорт
	
	Если Подпись.Свойство("СвойстваПодписи") Тогда
		СвойстваПодписи = Подпись.СвойстваПодписи;
	Иначе
		СвойстваПодписи = Подпись;
	КонецЕсли;		
	
	СмещениеДат = ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата();
	
	Если СмещениеДат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваПодписи.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная Тогда
		
		Если СвойстваПодписи.ДатаПодписи <> СвойстваПодписи.ДатаПроверкиПодписи Тогда
			СвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПроверкиПодписи + СмещениеДат;
		КонецЕсли;
		
	ИначеЕсли СвойстваПодписи.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
		
		СвойстваПодписи.ДатаПодписи = СвойстваПодписи.ДатаПодписи + СмещениеДат;
		СвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПроверкиПодписи + СмещениеДат;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

// Подготавливает необходимые данные для формирования пакета ЭД.
//
// Параметры:
//  Параметры - Структура - параметры для заполнения документа;
//  
//  Возвращаемое значение
//  Структура
//  *ТаблицаЭД - ТаблицаЗначений
//  *ТекстОшибки - Строка
//
Функция ПодготовитьДанныеДляЗаполненияДокументов(Параметры) Экспорт
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаЭД.Колонки.Добавить("ИмяФайла");
	ТаблицаЭД.Колонки.Добавить("НаправлениеЭД");
	ТаблицаЭД.Колонки.Добавить("Контрагент");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеПакета");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеФайла");
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(Параметры.МассивСсылокНаОбъект);
	
	РезультатФормирования = ЭлектронныеДокументыЭДО.СформироватьДанныеДокументовДляВыгрузки(ОписанияОбъектовУчета);
	ДанныеДокументов = РезультатФормирования.ДанныеДокументов;
	ТекстОшибки = РезультатФормирования.ТекстОшибки;
	
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		НоваяСтрока = ТаблицаЭД.Добавить();
		НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий;
		НоваяСтрока.ДвоичныеДанныеФайла = ДанныеДокумента.ОписаниеДанных.ДвоичныеДанные;
		НоваяСтрока.Контрагент = ДанныеДокумента.Контрагент;
		
		ДанныеПакета = СинхронизацияЭДО.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеДокумента);
		
		НоваяСтрока.ДвоичныеДанныеПакета = ДанныеПакета;
		НоваяСтрока.ПолноеИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;
		НоваяСтрока.ИмяФайла = ДанныеДокумента.ОписаниеДанных.ИмяФайла;			
	КонецЦикла;
	
	РезультатФормирования = Новый Структура("ТаблицаЭД, ТекстОшибки", ТаблицаЭД, ТекстОшибки);
	Возврат РезультатФормирования;
		
КонецФункции

Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение);
	
КонецФункции

Функция НастройкиПодбораУчетногоДокумента(ЭлектронныйДокумент, СпособОбработки = "") Экспорт
		
	Настройки = Новый Структура;
	Настройки.Вставить("СпособОбработки", СпособОбработки);
	ИмяТипа = ИнтеграцияЭДО.ИмяДокументаПоСпособуОбработки(СпособОбработки);

	Если Метаданные.Справочники.Найти(ИмяТипа) <> Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.Справочники.Найти(ИмяТипа);
		Настройки.Вставить("ИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		Настройки.Вставить("ИмяТипаСсылки", "СправочникСсылка." + ИмяТипа);
		
	ИначеЕсли Метаданные.Документы.Найти(ИмяТипа) <> Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.Документы.Найти(ИмяТипа);
		Настройки.Вставить("ИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		Настройки.Вставить("ИмяТипаСсылки", "ДокументСсылка." + ИмяТипа);

	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
	
	ИнформацияОтправителя = ДанныеЭлементовСхемыРегламента.Найти(
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, "ТипЭлементаРегламента");
		
	Если ИнформацияОтправителя <> Неопределено Тогда
	
		ПрисоединенныйФайл = ИнформацияОтправителя.ПрисоединенныйФайл;
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		
		ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
		ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		УдалитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.ИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПолноеИмяФайла");
		СодержаниеСообщения = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ОписаниеФайла);
		
		Если СодержаниеСообщения <> Неопределено Тогда
			Получатель = СодержаниеСообщения.Получатель;
			Отправитель = СодержаниеСообщения.Отправитель;
			
			ПараметрыПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашения();
			ПараметрыПриглашения.ИдентификаторОрганизации = ЭлектронныйДокумент.ИдентификаторОрганизации;
			ПараметрыПриглашения.ИдентификаторКонтрагента = ЭлектронныйДокумент.ИдентификаторКонтрагента;
			ПараметрыПриглашения.ИНН = Получатель.ИНН;
			ПараметрыПриглашения.КПП = Отправитель.КПП;
			
			ОбменМеждуСобственнымиОрганизациями = ПриглашенияЭДО.ОбменЭДМеждуОрганизациями(ПараметрыПриглашения);
			ТипОбъектаОтправителя = ?(ОбменМеждуСобственнымиОрганизациями, "Организации", "Контрагенты");
			
			Организация = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", Получатель.ИНН, Получатель.КПП);
			Контрагент = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(ТипОбъектаОтправителя, Отправитель.ИНН, Отправитель.КПП);

		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Контрагент) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "Организация, Контрагент");
		Организация = ЗначенияРеквизитов.Организация;
		Контрагент = ЗначенияРеквизитов.Контрагент;
	КонецЕсли;
	
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("Контрагент", Контрагент);
	
	Возврат Настройки;
		
КонецФункции

// Возвращает информацию отправителя.
// 
// Параметры:
// 	ЭлементСхемыРегламенты - ДанныеФормыЭлементДерева - Элемент для которого нужно найти информацию отправителя.
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева, Неопределено - Элемент информации отправителя.
//
Функция НайтиЭлементСхемыИнформацияОтправителя(ЭлементСхемыРегламенты)
	
	Результат = Неопределено;
	
	Если ЭлементСхемыРегламенты.ТипЭлементаРегламента =
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя") Тогда
		
		Для Каждого ЭлементСхемы Из ЭлементСхемыРегламенты.ПолучитьЭлементы() Цикл
			Если ЭлементСхемы.ТипЭлементаРегламента = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
				Результат = ЭлементСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			РодительскийЭлементСхемыРегламента = ЭлементСхемыРегламенты.ПолучитьРодителя();
			Если РодительскийЭлементСхемыРегламента <> Неопределено
				И РодительскийЭлементСхемыРегламента.ТипЭлементаРегламента =
					ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
				    Результат = РодительскийЭлементСхемыРегламента;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПросмотрЭлектронногоДокумента

// Возвращает пустые параметры просмотра электронного документа.
// 
// Возвращаемое значение:
// 	Структура - параметры просмотра электронного документа.
// 	* ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на основание электронного документа.
// 	* ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
// 	* ПредварительныйПросмотр - См. ПараметрыПредварительногоПросмотраЭлектронногоДокумента
// 	                          - Неопределено - если предварительный просмотр недоступен.
// 	* ПросмотрСтатусовЭлектронныхДокументов - См. ПараметрыПросмотраСтатусовЭлектронныхДокументов
//
Функция НовыеПараметрыПросмотраЭлектронногоДокумента()
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ОбъектУчета", ИнтеграцияЭДО.ПустоеОснованиеЭлектронногоДокумента());
	ПараметрыПросмотра.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	ПараметрыПросмотра.Вставить("ПредварительныйПросмотр", Неопределено);
	ПараметрыПросмотра.Вставить("ПросмотрСтатусовЭлектронныхДокументов", Неопределено);
	Возврат ПараметрыПросмотра;
КонецФункции

// Возвращает параметры просмотра электронного документа по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПросмотраЭлектронногоДокумента
//
Функция ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(ОбъектУчета, ПараметрыОткрытия) Экспорт
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОбъектУчета;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	
	СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(ОписаниеОбъектаУчета, Истина);
	
	ЗаполнитьПараметрыПросмотраПоСтатусамЭлектронныхДокументов(ПараметрыПросмотра,
		СтатусыЭлектронныхДокументов, ОписаниеОбъектаУчета, ПараметрыОткрытия);
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Возвращает параметры просмотра электронного документа по описанию электронного документа объекта учета.
// 
// Параметры:
// 	ОписаниеЭлектронногоДокументаОбъектаУчета - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета
// 	ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
// 	см. НовыеПараметрыПросмотраЭлектронногоДокумента
//
Функция ПараметрыПросмотраЭлектронногоДокументаПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета, ПараметрыОткрытия = Неопределено) Экспорт
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета;
	
	ОписанияЭлектронныхДокументовОбъектаУчета = ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета();
	
	Если ОписаниеЭлектронногоДокументаОбъектаУчета.Свойство("ВидДокумента") Тогда
		ОписанияЭлектронныхДокументовОбъектаУчета.Колонки.Добавить("ВидДокумента",
			Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
		Если ПараметрыОткрытия = Неопределено Тогда
			ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыОткрытияЭлектронногоДокумента();
		КонецЕсли;
		ПараметрыОткрытия.ВидДокумента = ОписаниеЭлектронногоДокументаОбъектаУчета.ВидДокумента;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОписанияЭлектронныхДокументовОбъектаУчета.Добавить(),
		ОписаниеЭлектронногоДокументаОбъектаУчета);
	
	СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(
		ОписанияЭлектронныхДокументовОбъектаУчета, Ложь);
	
	ЗаполнитьПараметрыПросмотраПоСтатусамЭлектронныхДокументов(ПараметрыПросмотра,
		СтатусыЭлектронныхДокументов, ОписанияЭлектронныхДокументовОбъектаУчета, ПараметрыОткрытия);
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Заполняет параметры просмотра по статусам электронных документов.
// 
// Параметры:
//  ПараметрыПросмотра - см. НовыеПараметрыПросмотраЭлектронногоДокумента
//  СтатусыЭлектронныхДокументов - см. СтатусыЭлектронныхДокументовОбъектаУчета
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
Процедура ЗаполнитьПараметрыПросмотраПоСтатусамЭлектронныхДокументов(ПараметрыПросмотра, СтатусыЭлектронныхДокументов, ОписаниеОбъектаУчета, ПараметрыОткрытия)
	
	Количество = СтатусыЭлектронныхДокументов.Количество();
	
	Если Количество > 1 Тогда
		
		ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов = ПараметрыПросмотраСтатусовЭлектронныхДокументов(
			СтатусыЭлектронныхДокументов);
		
	ИначеЕсли Количество > 0 И ЗначениеЗаполнено(СтатусыЭлектронныхДокументов[0].ЭлектронныйДокумент) Тогда
		
		ПараметрыПросмотра.ЭлектронныйДокумент = СтатусыЭлектронныхДокументов[0].ЭлектронныйДокумент;
		
	Иначе
		
		СтатусЭлектронныхДокументов = ?(ЗначениеЗаполнено(СтатусыЭлектронныхДокументов), 
			СтатусыЭлектронныхДокументов[0], 
			Неопределено); 
		ОписаниеЭлектронногоДокумента = НайтиОписаниеПоСтатусуЭлектронногоДокумента(
			ОписаниеОбъектаУчета, СтатусЭлектронныхДокументов);
		
		Если ЗначениеЗаполнено(ОписаниеЭлектронногоДокумента) Тогда
			ПараметрыПросмотра.ПредварительныйПросмотр = ПараметрыПредварительногоПросмотраЭлектронногоДокумента(
				ОписаниеЭлектронногоДокумента, ПараметрыОткрытия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОписаниеПоСтатусуЭлектронногоДокумента(ОписанияЭлектронныхДокументовОбъектаУчета, СтатусЭлектронногоДокумента)
	
	Результат = Неопределено;
	
	Если ОписанияЭлектронныхДокументовОбъектаУчета.Количество() = 1 Тогда
		Результат = ОписанияЭлектронныхДокументовОбъектаУчета[0];
		Возврат Результат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтатусЭлектронногоДокумента)
		Или СтатусЭлектронногоДокумента.ОжидаемоеДействие <> Перечисления.ДействияПоЭДО.Сформировать
		Или Не ЗначениеЗаполнено(СтатусЭлектронногоДокумента.ВидДокумента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбъектУчета, Организация, Контрагент, Договор");
	ЗаполнитьЗначенияСвойств(Отбор, СтатусЭлектронногоДокумента);
	Отбор.Договор = СтатусЭлектронногоДокумента.ДоговорКонтрагента;
	
	ЗначенияРеквизитовВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтатусЭлектронногоДокумента.ВидДокумента, "ТипДокумента, ПрикладнойТипДокумента");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отбор, ЗначенияРеквизитовВидаДокумента);
	
	ОписанияЭлектронныхДокументовПоОтбору = ОписанияЭлектронныхДокументовОбъектаУчета.НайтиСтроки(Отбор);
	Для Каждого ОписаниеЭлектронногоДокумента Из ОписанияЭлектронныхДокументовПоОтбору Цикл
		Если ОписаниеЭлектронногоДокумента.Направление <> Перечисления.НаправленияЭДО.Входящий Тогда
			Результат = ОписаниеЭлектронногоДокумента;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры предварительного просмотра электронного документа.
// 
// Параметры:
//  ОписаниеЭлектронногоДокументаОбъектаУчета - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  Структура:
// * РезультатПроверкиГотовности - См. ПроверитьГотовностьОбъектаУчетаКДокументообороту
//                               - Неопределено - если проверка не выполнялась.
// * РезультатПодготовкиВложения - См. ВложениеПроизвольногоДокумента
//                               - Неопределено - если подготовка не выполнялась.
// * РезультатПоискаНастроек     - См. НастройкиФормированияЭлектронногоДокументаОбъектаУчета
//                               - Неопределено - если поиск не выполнялся.
// * РезультатПодготовкиДанных   - См. ПодготовитьДанныеПредварительногоПросмотра
//                               - Неопределено - если подготовка не выполнялась.
Функция ПараметрыПредварительногоПросмотраЭлектронногоДокумента(ОписаниеЭлектронногоДокументаОбъектаУчета, ПараметрыОткрытия)
	
	ПредварительныйПросмотр = Новый Структура;
	ПредварительныйПросмотр.Вставить("РезультатПроверкиГотовности", Неопределено);
	ПредварительныйПросмотр.Вставить("РезультатПодготовкиВложения", Неопределено);
	ПредварительныйПросмотр.Вставить("РезультатПоискаНастроек", Неопределено);
	ПредварительныйПросмотр.Вставить("РезультатПодготовкиДанных", Неопределено);
	
	Если Не ЗначениеЗаполнено(ОписаниеЭлектронногоДокументаОбъектаУчета) Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПроверкиГотовности = ПроверитьГотовностьОбъектаУчетаКДокументообороту(
		ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета);
	Если Не ПредварительныйПросмотр.РезультатПроверкиГотовности.Успех Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПодготовкиВложения = ВложениеПроизвольногоДокумента(
		ОписаниеЭлектронногоДокументаОбъектаУчета);
	Если ПредварительныйПросмотр.РезультатПодготовкиВложения.Успех
		ИЛИ ПредварительныйПросмотр.РезультатПодготовкиВложения.Ошибка Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПоискаНастроек = НастройкиФормированияЭлектронногоДокументаОбъектаУчета(
		ОписаниеЭлектронногоДокументаОбъектаУчета, ПараметрыОткрытия.ВидДокумента);
	Если Не ПредварительныйПросмотр.РезультатПоискаНастроек.Успех Тогда
		Возврат ПредварительныйПросмотр;
	КонецЕсли;
	
	ПредварительныйПросмотр.РезультатПодготовкиДанных = ПодготовитьДанныеПредварительногоПросмотра(
		ОписаниеЭлектронногоДокументаОбъектаУчета, ПредварительныйПросмотр.РезультатПоискаНастроек.Настройки,
		ПараметрыОткрытия);
	
	Возврат ПредварительныйПросмотр;
	
КонецФункции

Функция ПараметрыПросмотраСтатусовЭлектронныхДокументов(СтатусыЭлектронныхДокументов)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("АдресДанных", "");
	
	Если ЗначениеЗаполнено(СтатусыЭлектронныхДокументов) Тогда
		ПараметрыПросмотра.АдресДанных = ПоместитьВоВременноеХранилище(СтатусыЭлектронныхДокументов);
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Проверяет готовность объекта учета к документообороту.
// 
// Параметры:
// 	ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// Возвращаемое значение:
// 	Структура - результат проверки готовности объекта учета:
// 	* Успех - Булево - признак готовности объекта учета к документообороту.
// 	* ПроверкаГотовности - Структура - см. ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту
Функция ПроверитьГотовностьОбъектаУчетаКДокументообороту(ОбъектУчета)
	
	РезультатПроверки = Новый Структура("Успех", Истина);
	
	НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	ПроверкаГотовности = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(НаборОбъектовУчета);
	Если Не ИнтеграцияЭДОКлиентСервер.ГотовностьКДокументообороту(ПроверкаГотовности) Тогда
		РезультатПроверки.Успех = Ложь;
		РезультатПроверки.Вставить("ПроверкаГотовности", ПроверкаГотовности);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет поиск настроек формирования по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - Неопределено, СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - результат поиска настройки отправки:
//  * Успех - Булево - признак наличия настроек.
//  * Настройки - Неопределено, См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета:
//  * ПараметрыПоиска - Неопределено, Структура - Описание:
//  ** Направление - ПеречислениеСсылка.НаправленияЭДО - направление электронного документа.
//  ** КлючНастроекОтправки - См. ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета
//  ** КлючОсновнойНастройкиВнутреннегоЭДО - Структура
Функция НастройкиФормированияЭлектронногоДокументаОбъектаУчета(ОписаниеОбъектаУчета, ВидДокумента)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ОбъектУчета", ОписаниеОбъектаУчета.ОбъектУчета);
	ПараметрыПоиска.Вставить("Направление", ОписаниеОбъектаУчета.Направление);
	ПараметрыПоиска.Вставить("КлючНастроекОтправки");
	ПараметрыПоиска.Вставить("КлючНастроекИнтеркампани");
	ПараметрыПоиска.Вставить("КлючОсновнойНастройкиВнутреннегоЭДО");
	ПараметрыПоиска.Вставить("ПараметрыОсновногоВидаВнутреннегоДокумента");
	
	НастройкиФормирования = ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = ОписаниеОбъектаУчета.Направление;
	
	ФормированиеЗапрещено = Ложь;
	Успех = Истина;
	УказанОсновнойВидДокумента = Истина;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО = Новый Структура("ОбъектУчета, Организация");
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			Настройки = НастройкиВнутреннегоЭДО(ОписаниеОбъектаУчета.Организация, ВидДокумента);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска.КлючОсновнойНастройкиВнутреннегоЭДО, ОписаниеОбъектаУчета);
			Настройки = НастройкиОсновногоВидаВнутреннегоДокумента(ОписаниеОбъектаУчета.Организация,
				ОписаниеОбъектаУчета.ОбъектУчета);			
			Если Не ЗначениеЗаполнено(Настройки) Тогда 
				УказанОсновнойВидДокумента = Ложь;
				НастройкиОбъектаУчета = НастройкиВнутреннегоЭДООбъектаУчета(ОписаниеОбъектаУчета.Организация, ОписаниеОбъектаУчета.ОбъектУчета);
				Если ЗначениеЗаполнено(НастройкиОбъектаУчета) Тогда
					Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НастройкиОбъектаУчета[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		НастройкиФормирования.НастройкиВнутреннегоЭДО = Настройки;
		ДоступныеКФормированиюНастройки = НастройкиВнутреннегоЭДООбъектаУчета(ОписаниеОбъектаУчета.Организация, ОписаниеОбъектаУчета.ОбъектУчета, Истина);
		ФормированиеЗапрещено = Не ЗначениеЗаполнено(ДоступныеКФормированиюНастройки);
		
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено И УказанОсновнойВидДокумента;

	ИначеЕсли ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
		ПараметрыПоиска.КлючНастроекИнтеркампани = Новый Структура("Организация");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска.КлючНастроекИнтеркампани, ОписаниеОбъектаУчета);
		
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроек.Отправитель = ОписаниеОбъектаУчета.Организация;
		КлючНастроек.Получатель = ОписаниеОбъектаУчета.Контрагент;
		КлючНастроек.Договор = ОписаниеОбъектаУчета.Договор;
		КлючНастроек.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
		
		ПараметрыПоиска.КлючНастроекОтправки = КлючНастроек;
		Настройки = НастройкиЭДО.НастройкиОтправки(ПараметрыПоиска.КлючНастроекОтправки);
		
		Если Настройки = Неопределено Тогда
			Настройки = НастройкиЭДО.СоздатьНастройкиИнтеркампани(КлючНастроек);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Настройки) Тогда
			Настройки.Договор = 
				?(ЗначениеЗаполнено(Настройки.Договор), Настройки.Договор, ОписаниеОбъектаУчета.Договор);
				
			ФормированиеЗапрещено = Не Настройки.Формировать;
		КонецЕсли;
		
		НастройкиФормирования.НастройкиОтправки = Настройки;	
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено;	
	Иначе		
		ПараметрыПоиска.КлючНастроекОтправки = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
		Настройки = НастройкиЭДО.НастройкиОтправки(ПараметрыПоиска.КлючНастроекОтправки);
		
		Если ЗначениеЗаполнено(Настройки) Тогда
			Настройки.Договор = 
				?(ЗначениеЗаполнено(Настройки.Договор), Настройки.Договор, ОписаниеОбъектаУчета.Договор);
			
			ФормированиеЗапрещено = Не Настройки.Формировать;
		КонецЕсли;
		
		НастройкиФормирования.НастройкиОтправки = Настройки;
		Успех = ЗначениеЗаполнено(Настройки) И Не ФормированиеЗапрещено;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъектаУчета) = Тип("СтрокаТаблицыЗначений") Тогда
		ОписаниеОбъектаУчетаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеОбъектаУчета);
	Иначе
		ОписаниеОбъектаУчетаСтруктурой = ОписаниеОбъектаУчета;
	КонецЕсли;
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Успех", Успех);
	РезультатПоиска.Вставить("ФормированиеЗапрещено", ФормированиеЗапрещено);
	РезультатПоиска.Вставить("Настройки", НастройкиФормирования);
	РезультатПоиска.Вставить("ПараметрыПоиска", ПараметрыПоиска);
	РезультатПоиска.Вставить("НеУказанОсновнойВидДокумента", Не УказанОсновнойВидДокумента);
	РезультатПоиска.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчетаСтруктурой);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  ПараметрыОткрытия - см. ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево - признак успешного формирования данных для просмотра.
//  * АдресДанныхДокумента - Строка - адрес временного хранилища данных для просмотра.
//  * АдресСведенийОбОшибках - Строка - адрес временного хранилища сведений о проблемах формирования документа.
Функция ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, НастройкиФормирования, ПараметрыОткрытия) Экспорт
	
	РезультатПодготовкиДанных = Новый Структура;
	РезультатПодготовкиДанных.Вставить("Ошибка", Ложь);
	РезультатПодготовкиДанных.Вставить("Основания", Новый Массив);
	РезультатПодготовкиДанных.Вставить("СвязующийОбъектУчета", Неопределено);
	РезультатПодготовкиДанных.Вставить("СвязанныеОбъектыУчета", Новый Массив);
	РезультатПодготовкиДанных.Вставить("АдресОписанияСообщения", "");
	РезультатПодготовкиДанных.Вставить("АдресСведенийОбОшибках", "");
	
	ОбъектУчета = ОписаниеОбъектаУчета.ОбъектУчета;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета,
			НастройкиФормирования.НастройкиВнутреннегоЭДО);
		РезультатПодготовкиДанных.Основания.Добавить(ОбъектУчета);
	ИначеЕсли ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета,
			НастройкиФормирования.НастройкиОтправки, ОписаниеОбъектаУчета.ПрикладнойТипДокумента);
		РезультатПодготовкиДанных.Основания.Добавить(ОбъектУчета);
	Иначе
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиФормирования.НастройкиОтправки);
		ПараметрыФормирования.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		ПараметрыФормирования.ДанныеКаталога = ПараметрыОткрытия.ДанныеКаталога;
		ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(ОбъектУчета, ПараметрыФормирования);
		
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителя(ОбъектУчета, ОписаниеДанных.Данные,
			НастройкиФормирования.НастройкиОтправки, ПараметрыОткрытия.ЗначенияДополнительныхПолей);
		
		РезультатПодготовкиДанных.Основания = ОписаниеДанных.Основания;
		РезультатПодготовкиДанных.СвязующийОбъектУчета = ОписаниеДанных.СвязующийОбъектУчета;
		РезультатПодготовкиДанных.СвязанныеОбъектыУчета = ОписаниеДанных.СвязанныеОбъектыУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных)
		Или ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗначенияДополнительныхПолей) Тогда
		
		РезультатПодготовкиДанных.Вставить("Ошибка", Истина);
		
		ОписанияОшибок = Новый Массив;
		
		Если ТипЗнч(ОписаниеОбъектаУчета) = Тип("СтрокаТаблицыЗначений") Тогда
			ОписаниеОбъектаУчетаСтруктура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеОбъектаУчета);
		Иначе
			ОписаниеОбъектаУчетаСтруктура = ОписаниеОбъектаУчета;
		КонецЕсли;
		
		ОписаниеОшибки = Новый Структура;
		ОписаниеОшибки.Вставить("ОписаниеОбъектаУчета", ОписаниеОбъектаУчетаСтруктура);
		ОписаниеОшибки.Вставить("ОшибкиДанных", ОписаниеСообщения.Данные.Ошибки);
		
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок, Новый УникальныйИдентификатор);
		
		РезультатПодготовкиДанных.Вставить("АдресСведенийОбОшибках", АдресСведенийОбОшибках);
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных.АдресОписанияСообщения = ПоместитьВоВременноеХранилище(ОписаниеСообщения,
		Новый УникальныйИдентификатор);
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

Процедура ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, ЭлементСхемыРодитель, НовыеРеквизитыФормы)
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		
		ПодготовитьНовыеРеквизитыФормыПоСхемеРегламента(Форма, ЭлементСхемы, НовыеРеквизитыФормы);
		
		Если Не ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ТабличныйДокумент" + СтрЗаменить(Строка(ЭлементСхемы.Сообщение.УникальныйИдентификатор()), "-", "");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
			ЭлементСхемы.ИмяРеквизита = ИмяРеквизита;
			Продолжить;
		КонецЕсли;
		
		ЭлементСхемы.ИмяРеквизита = ИмяРеквизита;
		РеквизитФормы = Новый РеквизитФормы(ЭлементСхемы.ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
		НовыеРеквизитыФормы.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры просмотра нового электронного документа по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОВызовСервера.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПросмотраЭлектронногоДокумента
//
Функция ПараметрыПросмотраНовогоЭлектронногоДокументаПоОбъектуУчета(ОбъектУчета, ПараметрыОткрытия) Экспорт
	
	ПараметрыПросмотра = НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОбъектУчета;
	
	ОписаниеОбъектаУчета = ЭлектронныеДокументыЭДО.ОписаниеОбъектаУчета(ОбъектУчета, ПараметрыОткрытия.ВидДокумента);
	
	КоличествоОписанийДокументовЭДО = ОписаниеОбъектаУчета.Количество();
	
	Если КоличествоОписанийДокументовЭДО > 1 Тогда
		СтатусыЭлектронныхДокументов = СтатусыЭлектронныхДокументовОбъектаУчета(
			ОписаниеОбъектаУчета, Истина);
		ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов = ПараметрыПросмотраСтатусовЭлектронныхДокументов(
			СтатусыЭлектронныхДокументов);
	ИначеЕсли КоличествоОписанийДокументовЭДО = 1 Тогда
		ПараметрыПросмотра.ПредварительныйПросмотр = ПараметрыПредварительногоПросмотраЭлектронногоДокумента(
			ОписаниеОбъектаУчета[0], ПараметрыОткрытия);
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// Возвращает новый результат подготовки вложения произвольного документа.
// 
// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * АдресОписанияФайла - Строка
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * Ошибка - Булево
// * ТекстОшибки - Строка
Функция НовыйРезультатПодготовкиВложенияПроизвольногоДокумента()
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("АдресОписанияФайла", "");
	Результат.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
КонецФункции

// Возвращает результат подготовки вложения произвольного документа.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиВложенияПроизвольногоДокумента
Функция ВложениеПроизвольногоДокумента(ОписаниеЭлектронногоДокумента)
	
	Если ОписаниеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Результат = ВложениеМашиночитаемойДоверенности(ОписаниеЭлектронногоДокумента);
	ИначеЕсли ОписаниеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО Тогда
		Результат = ВложениеСоглашенияОбЭДО(ОписаниеЭлектронногоДокумента);
	Иначе
		Результат = НовыйРезультатПодготовкиВложенияПроизвольногоДокумента();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат подготовки вложения машиночитаемой доверенности.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиВложенияПроизвольногоДокумента
Функция ВложениеМашиночитаемойДоверенности(ОписаниеЭлектронногоДокумента)
	
	Результат = НовыйРезультатПодготовкиВложенияПроизвольногоДокумента();
	
	РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьДанныеДоверенности(
		ОписаниеЭлектронногоДокумента.ОбъектУчета);
	Если РезультатВыгрузки.Ошибка Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось сформировать электронный документ по причине:'")
			+ Символы.ПС + РезультатВыгрузки.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресОписанияФайла = ПоместитьВоВременноеХранилище(РезультатВыгрузки.ОписаниеФайла);
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат подготовки вложения соглашения об ЭДО.
// 
// Параметры:
//  ОписаниеЭлектронногоДокумента - СтрокаТаблицыЗначений из см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатПодготовкиВложенияПроизвольногоДокумента
Функция ВложениеСоглашенияОбЭДО(ОписаниеЭлектронногоДокумента)
	
	Результат = НовыйРезультатПодготовкиВложенияПроизвольногоДокумента();
	
	НастройкаЭДО = НастройкиОтправкиЭДО.СсылкаНаОбъектНастройкиЭДО(
		ОписаниеЭлектронногоДокумента.Организация,
		ОписаниеЭлектронногоДокумента.Контрагент,
		ОписаниеЭлектронногоДокумента.Договор);
	
	ОписаниеФайлаСоглашения = НастройкиОтправкиЭДО.СформироватьСоглашениеПоШаблону(НастройкаЭДО);
	Если ОписаниеФайлаСоглашения = Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось сформировать соглашение по ЭДО'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.АдресОписанияФайла = ПоместитьВоВременноеХранилище(ОписаниеФайлаСоглашения);
	Результат.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеЭлектронногоДокумента.ТипДокумента);
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СхемаРегламента

// Возвращает данные элементов схемы для формы просмотра электронного документа.
// 
// Параметры:
//  ДанныеЭлементов - см. ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента
// 
// Возвращаемое значение:
//  См. НовыеДанныеЭлементовСхемы
Функция СформироватьДанныеЭлементовСхемы(ДанныеЭлементов)
	
	ДанныеЭлементовСхемы = НовыеДанныеЭлементовСхемы();
	
	Для Каждого ДанныеЭлемента Из ДанныеЭлементов Цикл
		НовыеДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДанныеЭлемента, ДанныеЭлемента);
		НовыеДанныеЭлемента.Доступность = Истина;
		Если ЗначениеЗаполнено(ДанныеЭлемента.ПолноеИмяФайла) Тогда
			СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеЭлемента.ПолноеИмяФайла);
			НовыеДанныеЭлемента.ИмяФайла = СтруктураИмениФайла.Имя;
			НовыеДанныеЭлемента.Расширение = СтруктураИмениФайла.Расширение;
		КонецЕсли;
		Если НовыеДанныеЭлемента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			НовыеДанныеЭлемента.Наименование = ПредставлениеИнформацииОтправителя(
				ДанныеЭлемента.НомерДокумента, ДанныеЭлемента.ДатаДокумента);
		Иначе
			НовыеДанныеЭлемента.Наименование = НаименованиеЭлементаСхемыРегламента(
				НовыеДанныеЭлемента.ТипЭлементаРегламента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЭлементовСхемы;
	
КонецФункции

Функция СхемаРегламентаЭлектронногоДокумента(ЭлектронныйДокумент)
	
	НастройкиСхемыРегламента = РегламентыЭДО.НовыеНастройкиСхемыРегламента();
	ЗаполнитьЗначенияСвойств(НастройкиСхемыРегламента, ЭлектронныйДокумент);

	ДанныеЭлементовСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
	
	ДанныеЭлементовСхемы = СформироватьДанныеЭлементовСхемы(ДанныеЭлементовСхемыРегламента);
	ДанныеЭлементовСхемы.Колонки.Добавить("ЭлектронныйДокумент");
	ДанныеЭлементовСхемы.ЗаполнитьЗначения(ЭлектронныйДокумент, "ЭлектронныйДокумент");

	СхемаРегламента = ЭлектронныеДокументыЭДО.НоваяСхемаРегламента(НастройкиСхемыРегламента, ДанныеЭлементовСхемы);
	ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(СхемаРегламента, ДанныеЭлементовСхемы);
	
	Возврат СхемаРегламента;
	
КонецФункции

Процедура ЗаполнитьПустыеДанныеЭлементовСхемыРегламента(СхемаРегламента, ДанныеЭлементовСхемы)
	
	КоллекцияЭлементовСхемы = ЭлектронныеДокументыЭДО.ЭлементыСхемыРегламентаБезДанных(СхемаРегламента);
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		НовыеДанныеЭлемента = ДанныеЭлементовСхемы.Добавить();
		НовыеДанныеЭлемента.ТипЭлементаРегламента = ЭлементСхемы.ТипЭлементаРегламента;
		НовыеДанныеЭлемента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован;
		НовыеДанныеЭлемента.Наименование = НаименованиеЭлементаСхемыРегламента(ЭлементСхемы.ТипЭлементаРегламента);
		ЭлементСхемы.Данные = НовыеДанныеЭлемента;
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеЭлементаСхемыРегламента(ТипЭлементаРегламента);
	
	ТипСлужебногоДокумента = ЭлектронныеДокументыЭДО.ТипСлужебногоДокумента(ТипЭлементаРегламента);
	Если ЗначениеЗаполнено(ТипСлужебногоДокумента) Тогда
		Наименование = Строка(ТипСлужебногоДокумента);
	Иначе
		Наименование = Строка(ТипЭлементаРегламента);
	КонецЕсли;
		
	Возврат Наименование;
	
КонецФункции

Процедура ОбновитьЭлементыСхемыРегламента(Приемник, Источник)
	
	КоллекцияЭлементовИсточника = Источник.Строки;
	Если КоллекцияЭлементовИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовПриемника = Приемник.ПолучитьЭлементы();
	КоличествоЭлементовПриемника = КоллекцияЭлементовПриемника.Количество();
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ЭлементИсточника Из КоллекцияЭлементовИсточника Цикл
		
		ДанныеЭлементаИсточника = ЭлементИсточника.Данные;
		
		Если ЭлементИсточника.Дополнительный
			И Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ДанныеЭлементаИсточника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя
			И НЕ (МодульОбменСГИСЭПД <> Неопределено 
				И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеЭлементаИсточника.ТипЭлементаРегламента))
			И НЕ ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Индекс < КоличествоЭлементовПриемника Тогда
			ЭлементПриемника = КоллекцияЭлементовПриемника[Индекс];
		Иначе
			ЭлементПриемника = КоллекцияЭлементовПриемника.Добавить();
		КонецЕсли;
		
		Если ЭлементПриемника.Сообщение <> ДанныеЭлементаИсточника.Сообщение
			ИЛИ ЭлементПриемника.Статус <> ДанныеЭлементаИсточника.Статус Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ДанныеЭлементаИсточника);
			ЭлементПриемника.ПредставлениеСформировано = Ложь;
			ЭлементПриемника.РаспознаниеВыполнено = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементПриемника.Сообщение)
			ИЛИ (МодульОбменСГИСЭПД <> Неопределено 
				И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ДанныеЭлементаИсточника.ТипЭлементаРегламента))
			ИЛИ ЭлементПриемника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ОбновитьЭлементыСхемыРегламента(ЭлементПриемника, ЭлементИсточника);
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПредупрежденияКомпонентов

Процедура СоздатьЭлементыОтображенияПредупрежденияПрекращенияПрямогоОбмена(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 240, 240);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;
	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПрекращениеПоддержкиПрямогоОбмена", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Прекращена поддержка прямого обмена с контрагентом (через каталог, Email, FTP). 
	|Для продолжения обмена с контрагентами необходимо использовать один из следующих вариантов:
	|• Обмен через <a href = ""ПерейтиНаСайтЭДО"">оператора ЭДО</a>.
	|• Обмен через сервис <a href = ""ПерейтиНаСайтБизнесСеть"">1С:Бизнес-сеть</a>'"));
	
	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки","Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

Процедура СоздатьЭлементыОтображенияПредупрежденияОбменаСКонтрагентом(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 240, 240);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;

	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПредупрежденияОбменаСКонтрагентом", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='По данному документу есть предупреждения. Нажмите <a href = ""ПоказатьПредупреждения"">посмотреть</a> чтобы ознакомиться с ними.'"));

	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

Процедура СоздатьЭлементыОтображенияПредупрежденияОНеактуальномЭлектронномДокументе(Форма, ГруппаПредупреждений, ИмяГруппы)	
	
	Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПредупреждений);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.ЦветФона = Новый Цвет(255, 250, 217);
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Объединенная = Истина;
	Группа.РастягиватьПоГоризонтали = Истина;

	Группа.Видимость = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НадписьПредупрежденияОНеактуальномЭлектронномДокументе", Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Электронный документ не является актуальным для указанных объектов учета. <a href = ""СделатьАктуальнымЭлектронныйДокумент"">Сделать актуальным</a>.'"));

	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");	
	
КонецПроцедуры

#КонецОбласти

#Область Переформирование

Функция ПараметрыПереформированияДокумента(Сообщение) Экспорт
	
	ПараметрыДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыДействийПоЭДО.ОбъектыДействий.Сообщения.Добавить(Сообщение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("ПричинаОтказа", "");
	Параметры.Вставить("ТребуетсяФормированиеДокумента", Ложь);
	Параметры.Вставить("ТекстВопроса", "");
	Параметры.Вставить("ПараметрыДействийПоЭДО", ПараметрыДействийПоЭДО);
	
	СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваСообщения(Сообщение,
		"Ссылка, ВидСообщения, ЭлектронныйДокумент, Направление, ТипЭлементаРегламента, Статус");
		
	Параметры.Вставить("ТипЭлементаРегламента", СвойстваДокумента.ТипЭлементаРегламента);
	Параметры.Вставить("ВидСообщения", СвойстваДокумента.ВидСообщения);
	Параметры.Вставить("ЭлектронныйДокумент", СвойстваДокумента.ЭлектронныйДокумент);
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
	КонецЕсли;
	
	Если СвойстваДокумента.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		Параметры.Отказ = Истина;
		Параметры.ПричинаОтказа = НСтр("ru = 'Входящий документ не может быть переформирован'");	
	ИначеЕсли СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя 
		Или (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоТитулОтправителя(СвойстваДокумента.ТипЭлементаРегламента)) Тогда
		ЗаполнитьПараметрыПереформированияОсновногоДокумента(Параметры, СвойстваДокумента);
	Иначе
		ЗаполнитьПараметрыПереформированияСлужебногоДокумента(Параметры, СвойстваДокумента);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПараметрыПереформированияОсновногоДокумента(Параметры, СвойстваДокумента)
	
	Если Не ЭлектронныеДокументыЭДО.СообщениеОтправлено(СвойстваДокумента.Статус) Тогда
		
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
		
		Параметры.ТребуетсяФормированиеДокумента = Истина;
		
		Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СвойстваДокумента.Ссылка);
		
		Если ЗначениеЗаполнено(Подписи) Тогда
			Параметры.ТекстВопроса = НСтр("ru = 'После переформирования документ нужно будет заново подписать. Продолжить?'");
		Иначе
			Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(СвойстваДокумента.ЭлектронныйДокумент);
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.СформироватьИсправление);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования
		ИЛИ СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
		
	ИначеЕсли СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Текущая версия документа будет аннулирована. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ПринятьАннулирование);
		
	ИначеЕсли ЭлектронныеДокументыЭДО.ЕстьОтклонениеАннулирования(СвойстваДокумента.ЭлектронныйДокумент) Тогда
		
		Параметры.ТекстВопроса = НСтр("ru = 'Запрос аннулирования текущей версии был ЗакрытСОтклонением контрагентом.
			|В случае формирования новой версии легитимность документа может быть не подтверждена. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
		
	Иначе
		
		Параметры.ТекстВопроса = НСтр("ru = 'Документ уже отправлен контрагенту. 
			|Контрагенту будет предложено аннулировать текущую версию. Продолжить?'");
		ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
			Перечисления.ДействияПоЭДО.Аннулировать);
				
		ДополнительныеПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
		ДополнительныеПараметрыДействия.Комментарий = НСтр("ru = 'Переформирование документа'");	
			
		Параметры.ПараметрыДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
			Перечисления.ДействияПоЭДО.Аннулировать, ДополнительныеПараметрыДействия);
	
	КонецЕсли;
	
	Параметры.ТребуетсяФормированиеДокумента = Истина;
		
КонецПроцедуры

Процедура ЗаполнитьПараметрыПереформированияСлужебногоДокумента(Параметры, СвойстваДокумента)
	
	Если ЭлектронныеДокументыЭДО.СообщениеОтправлено(СвойстваДокумента.Статус) Тогда
		Параметры.Отказ = Истина;
		Параметры.ПричинаОтказа = НСтр("ru = 'Переформирование служебного документа доступно до момента отправки'");
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыЭДО.ДобавитьДействие(Параметры.ПараметрыДействийПоЭДО.НаборДействий,
		Перечисления.ДействияПоЭДО.Переформировать);
	
	Подписи = ЭлектронныеДокументыЭДО.УстановленныеПодписи(СвойстваДокумента.Ссылка);
	
	Если ЗначениеЗаполнено(Подписи) Тогда
		Параметры.ТекстВопроса = НСтр("ru = 'После переформирования документ нужно будет заново подписать. Продолжить?'");
	Иначе
		Параметры.ТекстВопроса = НСтр("ru = 'Документ будет переформирован. Продолжить?'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеМеханизмаПечатиБСП

Процедура ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка)
	
	ИдентификаторПечатнойФормы = Форма.НастройкиПечатныхФорм[0].ИмяМакета;
	Если ИнтеграцияЭДО.ПечатнаяФормаЗапрещенаДляФормированияДокумента(ИдентификаторПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ЭДОСформироватьПроизвольныйДокумент");
	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'Отправить по ЭДО'");
	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
	
	ОтправитьЧерезЭДОКнопкаФормы = Форма.Элементы.Добавить(
	"СформироватьПроизвольныйДокументКнопкаФормы", 
	Тип("КнопкаФормы"),
	Форма.Элементы.ГруппаСохранитьОтправить);
	
	ОтправитьЧерезЭДОКнопкаФормы.ИмяКоманды = "ЭДОСформироватьПроизвольныйДокумент";
	ОтправитьЧерезЭДОКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	ОтправитьЧерезЭДОКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ОтправитьЧерезЭДОКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ОтправитьЧерезЭДОКнопкаФормы.Видимость = Истина;

КонецПроцедуры

Процедура ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка)
	
	ГруппаЭлементовВнутреннегоЭДО = Форма.Элементы.Вставить(
		"ГруппаЭлементовВнутреннегоЭДО", 
		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
		
	ГруппаЭлементовВнутреннегоЭДО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоВертикали = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоГоризонтали = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементовВнутреннегоЭДО.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ЭмблемаСервиса1СЭДОКартинкаПодписание = Форма.Элементы.Добавить(
	"ЭмблемаСервиса1СЭДОПодписаниеКартинка", 
	Тип("ДекорацияФормы"),
	ГруппаЭлементовВнутреннегоЭДО);
	
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Вид = ВидДекорацииФормы.Картинка;
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ЭмблемаСервиса1СЭДОКартинкаПодписание.Видимость = Ложь;
	
	ПредставлениеПрогрессаПодписанияДекорация = Форма.Элементы.Добавить(
	"ПредставлениеПрогрессаПодписанияДекорация", 
	Тип("ДекорацияФормы"), ГруппаЭлементовВнутреннегоЭДО);
	
	ПредставлениеПрогрессаПодписанияДекорация.Вид = ВидДекорацииФормы.Надпись;
	ПредставлениеПрогрессаПодписанияДекорация.РастягиватьПоГоризонтали = Истина;
	ПредставлениеПрогрессаПодписанияДекорация.АвтоМаксимальнаяШирина = Ложь;
	ПредставлениеПрогрессаПодписанияДекорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
	ПредставлениеПрогрессаПодписанияДекорация.Видимость = Ложь;
	
	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ВнутреннийЭДООтправитьНаПодпись");
	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'Отправить на подпись'");
	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
	
	ОтправитьНаПодписьКнопкаФормы = Форма.Элементы.Добавить(
	"ОтправитьНаПодписьКнопкаФормы", 
	Тип("КнопкаФормы"),
	ГруппаЭлементовВнутреннегоЭДО);
	
	ГруппаРекламыВнутреннегоЭДО = Форма.Элементы.Вставить(
		"ГруппаРекламыВнутреннегоЭДО", 
		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
		
	Форма.Элементы.ДополнительнаяИнформация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");

	ОтправитьНаПодписьКнопкаФормы.ИмяКоманды = "ВнутреннийЭДООтправитьНаПодпись";
	ОтправитьНаПодписьКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	ОтправитьНаПодписьКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
	ОтправитьНаПодписьКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	ОтправитьНаПодписьКнопкаФормы.ЦветФона = ЦветаСтиля.ЦветВажного;
	ОтправитьНаПодписьКнопкаФормы.Видимость = Ложь;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);

КонецПроцедуры

#КонецОбласти 

#Область Настройки

Функция НастройкиОсновногоВидаВнутреннегоДокумента(Организация, ОбъектУчета) Экспорт
	
	Запросы = Новый Массив;
	
	ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные().ПолноеИмя());
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	Организация = Организация;		
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО
	| ГДЕ НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса.Выгрузить())[0];
	КонецЕсли;
	
КонецФункции

Функция НастройкиВнутреннегоЭДООбъектаУчета(Организация, ОбъектУчета, ТолькоРазрешенные = Ложь)
	
	Запросы = Новый Массив;
	
	ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектУчета.Метаданные().ПолноеИмя());
	
	ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
	ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
	ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";	
	
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|ИЗ
	|	НастройкиВнутреннегоЭДО";
	
	Если ТолькоРазрешенные Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ НастройкиВнутреннегоЭДО.Формировать";
	КонецЕсли;
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат РезультатЗапроса.Выгрузить()
	
КонецФункции

#КонецОбласти 

#Область ПроизвольныйДокумент

Функция РеквизитыДокументаПоФайлу(ОписаниеФайла) Экспорт
	
	СодержаниеСообщения = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(СодержаниеСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Номер", "");
	Реквизиты.Вставить("Дата", '00010101');
	Реквизиты.Вставить("Сумма", 0);
	Реквизиты.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	
	Реквизиты.Номер = СодержаниеСообщения.НомерДокумента;
	Реквизиты.Дата = СодержаниеСообщения.ДатаДокумента;
	Реквизиты.Сумма = СодержаниеСообщения.СуммаДокумента;
	Если ЗначениеЗаполнено(СодержаниеСообщения.ПрикладнойТипДокумента) Тогда
		Реквизиты.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(
			СодержаниеСообщения.ПрикладнойТипДокумента);
	Иначе
		Реквизиты.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(СодержаниеСообщения.ТипДокумента);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

#КонецОбласти

#Область ФормаСтатусовЭлектронныхДокументов

// Возвращает новый набор статусов электронных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ПредставлениеДокумента - Строка
//  * ПредставлениеСостояния - Строка
//  * ОжидаемоеДействие - ПеречислениеСсылка.ДействияПоЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * НетНастройки - Булево
Функция НовыйНаборСтатусовЭлектронныхДокументов()
	
	ОписаниеТипаОбъектаУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	СтатусыЭлектронныхДокументов = Новый ТаблицаЗначений;
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ОбъектУчета", ОписаниеТипаОбъектаУчета);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ЭлектронныйДокумент",
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ПредставлениеДокумента", Новый ОписаниеТипов("Строка"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ПредставлениеСостояния", Новый ОписаниеТипов("Строка"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ОжидаемоеДействие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияПоЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ВидДокумента",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТипаДоговорКонтрагента);
	СтатусыЭлектронныхДокументов.Колонки.Добавить("ИдентификаторОбъекта",
		Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	СтатусыЭлектронныхДокументов.Колонки.Добавить("НетНастройки", Новый ОписаниеТипов("Булево"));
	
	Возврат СтатусыЭлектронныхДокументов;
	
КонецФункции

// Возвращает параметры объекта учета для запроса статусов электронных документов.
// 
// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Параметры объекта учета для запроса статусов:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция ПараметрыОбъектаУчетаДляЗапросаСтатусов(ОписаниеОбъектаУчета)
	
	ОписаниеТипаОбъектаУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ОбъектУчета", ОписаниеТипаОбъектаУчета);
	ТаблицаПараметров.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	ТаблицаПараметров.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ТаблицаПараметров.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ТаблицаПараметров.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ТаблицаПараметров.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	ТаблицаПараметров.Колонки.Добавить("Договор", ОписаниеТипаДоговорКонтрагента);
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторОбъекта",
		Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	ИдентификаторыОбъектовУчета = Новый Соответствие;
	Для каждого ОписаниеЭлектронногоДокументаОбъектаУчета Из ОписаниеОбъектаУчета Цикл
		
		СтрокаТаблицыПараметров = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПараметров, ОписаниеЭлектронногоДокументаОбъектаУчета);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыПараметров.ВидДокумента) Тогда
			Если ОписаниеЭлектронногоДокументаОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
				ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(
					ОписаниеЭлектронногоДокументаОбъектаУчета.ПрикладнойТипДокумента);
			ИначеЕсли ОписаниеЭлектронногоДокументаОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Внутренний Тогда
				ВидДокумента = Справочники.ВидыДокументовЭДО.ПустаяСсылка();
			Иначе
				ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
					ОписаниеЭлектронногоДокументаОбъектаУчета.ТипДокумента);
			КонецЕсли;
			СтрокаТаблицыПараметров.ВидДокумента = ВидДокумента;
		КонецЕсли;
		
		// При получении данных о статусе электронного документа для договора, некорректно анализировать настройки
		//     в разрезе этого же договора. Значения договора в электронном документе и объекта учета будут различаться.
		Если СтрокаТаблицыПараметров.ОбъектУчета = СтрокаТаблицыПараметров.Договор Тогда
			СтрокаТаблицыПараметров.Договор = Неопределено;
		КонецЕсли;
		
		СтрокаТаблицыПараметров.ИдентификаторОбъекта = ИдентификаторыОбъектовУчета[
			ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета];
		Если Не ЗначениеЗаполнено(СтрокаТаблицыПараметров.ИдентификаторОбъекта) Тогда
			ПолноеИмяОбъекта = ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета.Метаданные().ПолноеИмя();
			СтрокаТаблицыПараметров.ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
			ИдентификаторыОбъектовУчета.Вставить(ОписаниеЭлектронногоДокументаОбъектаУчета.ОбъектУчета,
				СтрокаТаблицыПараметров.ИдентификаторОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПараметров;
	
КонецФункции

// Возвращает данные для заполнения статусов электронных документов.
// 
// Параметры:
//  ПараметрыОбъектовУчета - см. ПараметрыОбъектаУчетаДляЗапросаСтатусов
//  УчитыватьВсеАктуальные - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * ВыборкаАктуальныхДокументов - ВыборкаИзРезультатаЗапроса:
//  ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - ОпределяемыйТип.УчастникЭДО
//  ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ** НаОзнакомлении - Булево
//  ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  ** НомерДокумента - Строка
//  ** ДатаДокумента - Дата
//  ** ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  ** СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  ** СтатусЭД - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  ** ЭтапПодписанияОтсутствует - Булево
//  * ВыборкаНастроек - ВыборкаИзРезультатаЗапроса
//  ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - Неопределено, ОпределяемыйТип.УчастникЭДО
//  ** ДоговорКонтрагента - Неопределено, ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ** ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  ** НетНастройки - Булево
Функция ДанныеДляЗаполненияСтатусовЭлектронныхДокументов(ПараметрыОбъектовУчета, УчитыватьВсеАктуальные)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыОбъектовУчета", ПараметрыОбъектовУчета);
	Запрос.УстановитьПараметр("ПустойВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("УчитыватьВсеАктуальные", УчитыватьВсеАктуальные);
	
	ТитулыОтправителя = Новый Массив;
	ТитулыОтправителя.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.ЗаполнитьТитулыОтправителя(ТитулыОтправителя);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ТитулыОтправителя", ТитулыОтправителя);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыОбъектовУчета.ОбъектУчета КАК Ссылка,
		|	ПараметрыОбъектовУчета.Организация КАК Организация,
		|	ПараметрыОбъектовУчета.Направление КАК Направление,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ВидДокумента КАК ВидДокумента,
		|	ПараметрыОбъектовУчета.Контрагент КАК Контрагент,
		|	ПараметрыОбъектовУчета.Договор КАК ДоговорКонтрагента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ПОМЕСТИТЬ ПараметрыОбъектовУчета
		|ИЗ
		|	&ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ПОМЕСТИТЬ АктуальныеДокументы
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ПараметрыОбъектовУчета.Ссылка
		|ГДЕ
		|	&УчитыватьВсеАктуальные
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ПараметрыОбъектовУчета.Ссылка
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Организация = ПараметрыОбъектовУчета.Организация
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента = ПараметрыОбъектовУчета.ВидДокумента
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент = ПараметрыОбъектовУчета.Контрагент
		|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента В (ПараметрыОбъектовУчета.ДоговорКонтрагента,
		|			&ПустойДоговор)
		|		И ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента
		|ГДЕ
		|	НЕ (&УчитыватьВсеАктуальные)
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = ПараметрыОбъектовУчета.Ссылка
		|		И ПараметрыОбъектовУчета.ВидДокумента = &ПустойВидДокумента
		|ГДЕ
		|	НЕ (&УчитыватьВсеАктуальные)
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктуальныеДокументы.ОбъектУчета КАК ОбъектУчета,
		|	АктуальныеДокументы.ВидДокумента КАК ВидДокумента,
		|	АктуальныеДокументы.ТипДокумента КАК ТипДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	АктуальныеДокументы.ЭлектронныйДокумент.Организация КАК Организация,
		|	АктуальныеДокументы.ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	АктуальныеДокументы.ЭлектронныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	АктуальныеДокументы.ЭлектронныйДокумент.НаОзнакомлении КАК НаОзнакомлении,
		|	АктуальныеДокументы.ЭлектронныйДокумент.СпособОбмена КАК СпособОбмена,
		|	АктуальныеДокументы.ЭлектронныйДокумент.НомерДокумента КАК НомерДокумента,
		|	АктуальныеДокументы.ЭлектронныйДокумент.ДатаДокумента КАК ДатаДокумента,
		|	АктуальныеДокументы.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	СостоянияЭДО.Состояние КАК СостояниеЭДО,
		|	СообщениеЭДО.Статус КАК СтатусЭД,
		|	СостояниеПодписанияЭД.Объект ЕСТЬ NULL КАК ЭтапПодписанияОтсутствует
		|ИЗ
		|	АктуальныеДокументы КАК АктуальныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО АктуальныеДокументы.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента В(&ТитулыОтправителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|		ПО (СообщениеЭДО.Ссылка = СостояниеПодписанияЭД.Объект)
		|		И (СостояниеПодписанияЭД.Текущий)
		|		И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияЭДО
		|		ПО СостоянияЭДО.ЭлектронныйДокумент = АктуальныеДокументы.ЭлектронныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК Контрагент,
		|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ЛОЖЬ КАК НетНастройки
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ПараметрыОбъектовУчета.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
		|		И НастройкиВнутреннегоЭДО.Организация = ПараметрыОбъектовУчета.Организация
		|		И НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ПараметрыОбъектовУчета.ВидДокумента
		|		И (ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента)
		|		И (ВидыДокументовЭДО.ИдентификаторОбъектаУчета = ПараметрыОбъектовУчета.ИдентификаторОбъекта)
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Формировать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента,
		|	НастройкиВнутреннегоЭДО.Организация,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ПараметрыОбъектовУчета.Ссылка КАК ОбъектУчета,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыДокументовЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ПО ПараметрыОбъектовУчета.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
		|		И НастройкиВнутреннегоЭДО.Организация = ПараметрыОбъектовУчета.Организация
		|		И (ПараметрыОбъектовУчета.ВидДокумента = &ПустойВидДокумента)
		|		И (ВидыДокументовЭДО.ИдентификаторОбъектаУчета = ПараметрыОбъектовУчета.ИдентификаторОбъекта)
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Формировать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыОбъектовУчета.ВидДокумента,
		|	ПараметрыОбъектовУчета.Организация,
		|	ПараметрыОбъектовУчета.Контрагент,
		|	ЕСТЬNULL(НастройкиОтправкиДокументовПоВидам.Договор, ПараметрыОбъектовУчета.ДоговорКонтрагента),
		|	ПараметрыОбъектовУчета.Ссылка,
		|	ПараметрыОбъектовУчета.ИдентификаторОбъекта,
		|	ПараметрыОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	НастройкиОтправкиДокументовПоВидам.ВидДокумента ЕСТЬ NULL
		|	И НастройкиОтправкиДокументовПоВидамПустойДоговор.ВидДокумента ЕСТЬ NULL
		|ИЗ
		|	ПараметрыОбъектовУчета КАК ПараметрыОбъектовУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиДокументовПоВидам
		|		ПО ПараметрыОбъектовУчета.Организация = НастройкиОтправкиДокументовПоВидам.Отправитель
		|		И ПараметрыОбъектовУчета.ВидДокумента = НастройкиОтправкиДокументовПоВидам.ВидДокумента
		|		И ПараметрыОбъектовУчета.Контрагент = НастройкиОтправкиДокументовПоВидам.Получатель
		|		И НастройкиОтправкиДокументовПоВидам.Договор = ПараметрыОбъектовУчета.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиДокументовПоВидамПустойДоговор
		|		ПО ПараметрыОбъектовУчета.Организация = НастройкиОтправкиДокументовПоВидамПустойДоговор.Отправитель
		|		И ПараметрыОбъектовУчета.ВидДокумента = НастройкиОтправкиДокументовПоВидамПустойДоговор.ВидДокумента
		|		И ПараметрыОбъектовУчета.Контрагент = НастройкиОтправкиДокументовПоВидамПустойДоговор.Получатель
		|		И НастройкиОтправкиДокументовПоВидамПустойДоговор.Договор = &ПустойДоговор
		|ГДЕ
		|	ПараметрыОбъектовУчета.Направление <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Входящий)
		|	И ПараметрыОбъектовУчета.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)
		|	И ПараметрыОбъектовУчета.ВидДокумента <> &ПустойВидДокумента";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ВыборкаАктуальныхДокументов", РезультатыЗапросов[2].Выбрать());
	ДанныеДляЗаполнения.Вставить("ВыборкаНастроек", РезультатыЗапросов[3].Выбрать());
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// Заполняет статусы по данным актуальных электронных документов.
//
// Параметры:
//  СтатусыЭлектронныхДокументов - см. НовыйНаборСтатусовЭлектронныхДокументов
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * НаОзнакомлении - Булево
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СтатусЭД - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * ЭтапПодписанияОтсутствует - Булево
Процедура ЗаполнитьСтатусыПоАктуальнымДокументам(СтатусыЭлектронныхДокументов, Выборка)
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваДокумента = Новый Структура;
		СвойстваДокумента.Вставить("Ссылка", Выборка.ЭлектронныйДокумент);
		СвойстваДокумента.Вставить("НаОзнакомлении", Выборка.НаОзнакомлении);
		СвойстваДокумента.Вставить("СпособОбмена", Выборка.СпособОбмена);
		СвойстваДокумента.Вставить("ВидДокумента", Выборка.ВидДокумента);
		ДоступныеДействия = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(Выборка.СостояниеЭДО, СвойстваДокумента);
		
		ОжидаемоеДействие = Неопределено;
		Если ЗначениеЗаполнено(ДоступныеДействия) Тогда
			Если ДоступныеДействия[Перечисления.ДействияПоЭДО.Сформировать] = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Сформировать;
			ИначеЕсли ДоступныеДействия[Перечисления.ДействияПоЭДО.Подписать] = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Подписать;
			ИначеЕсли ДоступныеДействия[Перечисления.ДействияПоЭДО.ПодготовитьКОтправке] = Истина
				ИЛИ ДоступныеДействия[Перечисления.ДействияПоЭДО.Отправить] = Истина Тогда
				ОжидаемоеДействие = Перечисления.ДействияПоЭДО.Отправить;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
		ПараметрыПредставления.ВидДокумента = Выборка.ВидДокумента;
		ПараметрыПредставления.НомерДокумента = Выборка.НомерДокумента;
		ПараметрыПредставления.ДатаДокумента = Выборка.ДатаДокумента;
		
		НоваяСтрока = СтатусыЭлектронныхДокументов.Добавить();
		НоваяСтрока.ОбъектУчета             = Выборка.ОбъектУчета;
		НоваяСтрока.Организация             = Выборка.Организация;
		НоваяСтрока.ЭлектронныйДокумент     = Выборка.ЭлектронныйДокумент;
		НоваяСтрока.ВидДокумента            = Выборка.ВидДокумента;
		НоваяСтрока.Контрагент              = Выборка.Контрагент;
		НоваяСтрока.ДоговорКонтрагента      = Выборка.ДоговорКонтрагента;
		НоваяСтрока.ПредставлениеДокумента  = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления);
		НоваяСтрока.ОжидаемоеДействие       = ОжидаемоеДействие;
		НоваяСтрока.ИдентификаторОбъекта    = Выборка.ИдентификаторОбъекта;
		НоваяСтрока.НетНастройки            = Ложь;
		
		Если Не ЗначениеЗаполнено(ОжидаемоеДействие) Тогда
			НоваяСтрока.ПредставлениеСостояния = СтрШаблон("<%1>", Выборка.СостояниеЭДО);
		ИначеЕсли Выборка.ЭтапПодписанияОтсутствует
			И ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Подписать Тогда
			НоваяСтрока.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
			НоваяСтрока.ПредставлениеСостояния = НСтр("ru = '<Ожидается подписание других лиц>'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет статусы по данным актуальных электронных документов.
//
// Параметры:
//  СтатусыЭлектронныхДокументов - см. НовыйНаборСтатусовЭлектронныхДокументов
//  ВыборкаНастроек - ВыборкаИзРезультатаЗапроса:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - Неопределено, ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено, ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НетНастройки - Булево
Процедура ЗаполнитьСтатусыПоНастройкам(СтатусыЭлектронныхДокументов, ВыборкаНастроек)
	
	ОбъектыУчетаПоИдентификаторам = Новый Соответствие;
	
	ЗаменяемыеВиды = ЭлектронныеДокументыЭДО.ВидыДокументовЗаменяемыеУПДУКД();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаНастроек.Контрагент) Тогда
			ОтборАктуальныхДокументовОбъекта = Новый Структура("ОбъектУчета, Организация, Контрагент");
			Если ЗначениеЗаполнено(ВыборкаНастроек.ДоговорКонтрагента) Тогда
				ОтборАктуальныхДокументовОбъекта.Вставить("ДоговорКонтрагента");
			КонецЕсли;
		Иначе
			ОтборАктуальныхДокументовОбъекта = Новый Структура("ОбъектУчета, Организация");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборАктуальныхДокументовОбъекта, ВыборкаНастроек);
		
		ОтборВидовДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаНастроек.ВидДокумента);
		
		Если ЗаменяемыеВиды.УПД.ВидДокумента = ВыборкаНастроек.ВидДокумента Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборВидовДокументов,
				ЗаменяемыеВиды.УПД.ЗаменяемыеВидыДокументов);
		ИначеЕсли ЗаменяемыеВиды.УПД.ЗаменяемыеВидыДокументов.Найти(ВыборкаНастроек.ВидДокумента) <> Неопределено Тогда 
			ОтборВидовДокументов.Добавить(ЗаменяемыеВиды.УПД.ВидДокумента);
		ИначеЕсли ЗаменяемыеВиды.УКД.ВидДокумента = ВыборкаНастроек.ВидДокумента Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборВидовДокументов,
				ЗаменяемыеВиды.УКД.ЗаменяемыеВидыДокументов);
		ИначеЕсли ЗаменяемыеВиды.УКД.ЗаменяемыеВидыДокументов.Найти(ВыборкаНастроек.ВидДокумента) <> Неопределено Тогда 
			ОтборВидовДокументов.Добавить(ЗаменяемыеВиды.УКД.ВидДокумента);
		КонецЕсли;
		
		ЕстьСведенияОСтатусе = Ложь;
		
		СтатусыАктуальныхДокументов = СтатусыЭлектронныхДокументов.НайтиСтроки(ОтборАктуальныхДокументовОбъекта);
		Для Каждого СведенияОСтатусеДокумента Из СтатусыАктуальныхДокументов Цикл
			Если ОтборВидовДокументов.Найти(СведенияОСтатусеДокумента.ВидДокумента) <> Неопределено Тогда
				ЕстьСведенияОСтатусе = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьСведенияОСтатусе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтатусыЭлектронныхДокументов.Добавить();
		НоваяСтрока.ОбъектУчета             = ВыборкаНастроек.ОбъектУчета;
		НоваяСтрока.Организация             = ВыборкаНастроек.Организация;
		НоваяСтрока.ВидДокумента            = ВыборкаНастроек.ВидДокумента;
		НоваяСтрока.Контрагент              = ВыборкаНастроек.Контрагент;
		НоваяСтрока.ДоговорКонтрагента      = ВыборкаНастроек.ДоговорКонтрагента;
		НоваяСтрока.ПредставлениеДокумента  = ВыборкаНастроек.ВидДокумента;
		НоваяСтрока.ОжидаемоеДействие       = Перечисления.ДействияПоЭДО.Сформировать;
		НоваяСтрока.ИдентификаторОбъекта    = ВыборкаНастроек.ИдентификаторОбъекта;
		Если ВыборкаНастроек.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
			НоваяСтрока.НетНастройки = ВыборкаНастроек.НетНастройки;
		КонецЕсли;
		
		Если ОбъектыУчетаПоИдентификаторам[ВыборкаНастроек.ИдентификаторОбъекта] = Неопределено Тогда
			ОбъектыУчетаПоИдентификаторам.Вставить(ВыборкаНастроек.ИдентификаторОбъекта,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаНастроек.ОбъектУчета));
		Иначе
			ОбъектыУчетаПоИдентификаторам[ВыборкаНастроек.ИдентификаторОбъекта].Добавить(ВыборкаНастроек.ОбъектУчета);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчетаПоИдентификаторам) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаРеквизитовНомерДатаОбъектовУчета(ОбъектыУчетаПоИдентификаторам);
	
	ОтборОбъектаУчета = Новый Структура("ОбъектУчета");
	
	Пока Выборка.Следующий() Цикл
		
		ОтборОбъектаУчета.ОбъектУчета = Выборка.Ссылка;
		НайденныеСтроки = СтатусыЭлектронныхДокументов.НайтиСтроки(ОтборОбъектаУчета);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.ПредставлениеДокумента = ПредставлениеНеСформированногоДокументаПоВиду(
				СтрокаТаблицы.ВидДокумента, Выборка.Номер, Выборка.Дата);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление не сформированного документа по виду.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Номер - Строка
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка - Представление не сформированного документа по виду.
Функция ПредставлениеНеСформированногоДокументаПоВиду(ВидДокумента, Номер, Дата)

	ЧастиПредставления = Новый Массив;
	ЧастиПредставления.Добавить(Строка(ВидДокумента));
	
	Если ЗначениеЗаполнено(Номер) Тогда
		ЧастиПредставления.Добавить("№");
		ЧастиПредставления.Добавить(ИнтеграцияБСПБЭД.ПредставлениеНомераОбъектаУчета(Номер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ЧастиПредставления.Добавить(НСтр("ru = 'от'"));
		ЧастиПредставления.Добавить(Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиПредставления, " ");
	
КонецФункции

#КонецОбласти

#Область ТекущиеЭлектронныеДокументы

Функция ТекстУсловияПоОтбору(Знач Отбор, Знач ПрефиксПараметров = "ЗначениеОтбора")
	
	Если Не ЗначениеЗаполнено(Отбор) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПолей = "";
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ОписаниеПоля = СтрШаблон("""Поле%1"" КАК Поле%1,", НомерОтбора);
		ТекстПолей = ТекстПолей + ОписаниеПоля;
	КонецЦикла;
	ТекстПолей = Лев(ТекстПолей, СтрДлина(ТекстПолей) - 1);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПолей
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	Построитель.ЗаполнитьНастройки();
	
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ЭлементОтбора = Отбор[НомерОтбора - 1];
		НовыйЭлементОтбора = Построитель.Отбор.Добавить("Поле" + НомерОтбора);
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ЭлементОтбора.ВидСравнения;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	ТекстЗапроса = Запрос.Текст;
	
	ИндексУсловия = СтрНайти(ТекстЗапроса, "ГДЕ");
	
	ТекстУсловия = Сред(ТекстЗапроса, ИндексУсловия + 4); // учтен перенос строки.
	
	Для НомерОтбора = 1 По Отбор.Количество() Цикл
		ЭлементОтбора = Отбор[НомерОтбора - 1];
		ТекстУсловия = СтрЗаменить(ТекстУсловия, """Поле" + НомерОтбора + """", ЭлементОтбора.Поле);
		ТекстУсловия = СтрЗаменить(ТекстУсловия, "&Параметр" + НомерОтбора, "&" + ПрефиксПараметров + НомерОтбора);
	КонецЦикла;
	
	Возврат ТекстУсловия;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомЭлектронныхДокументов

Процедура ОбновитьЭлементыДереваЭлектронныхДокументов(Приемник, Источник, Актуальный = Ложь)
	
	КоллекцияЭлементовИсточника = Источник.Строки;
	Если КоллекцияЭлементовИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовПриемника = Приемник.Строки;
	
	Для Каждого ЭлементИсточника Из КоллекцияЭлементовИсточника Цикл
		
		ДанныеЭлементаИсточника = ЭлементИсточника.Данные;
		
		Если ЭлементИсточника.Дополнительный
			И Не ЗначениеЗаполнено(ДанныеЭлементаИсточника.Сообщение) Тогда
			Продолжить;
		КонецЕсли;		
		
		ЭлементПриемника = КоллекцияЭлементовПриемника.Добавить();		
		
		Если ЭлементПриемника.Сообщение <> ДанныеЭлементаИсточника.Сообщение
			Или ЭлементПриемника.Статус <> ДанныеЭлементаИсточника.Статус Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ДанныеЭлементаИсточника);
		КонецЕсли;

		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеЭлементаИсточника.Сообщение, "Дата");
			
		ЭлементПриемника.Сообщение = ДанныеЭлементаИсточника.Сообщение;
		ЭлементПриемника.Версия = Дата;
		
		Если ЗначениеЗаполнено(ЭлементПриемника.Сообщение) 
			И ЭлементПриемника.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ЭлементПриемника.Актуальный = Актуальный;
			СостояниеЭДО = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлементПриемника.ЭлектронныйДокумент);
			СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(ЭлементПриемника.ЭлектронныйДокумент,
				"Ссылка, НаОзнакомлении, СпособОбмена, ВидДокумента");
			ДействияНаЭтапе = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеЭДО, СвойстваДокумента);
			
			Если ЗначениеЗаполнено(ДействияНаЭтапе) Тогда
				ЭлементПриемника.ОжидаемоеДействие = МассивДействийНаЭтапе(ДействияНаЭтапе)[0];	
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(ЭлементПриемника.ЭлектронныйДокумент) 
			Или ЭлементПриемника.ТипЭлементаРегламента	= Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			ОбновитьЭлементыДереваЭлектронныхДокументов(ЭлементПриемника, ЭлементИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РеестрЭлектронныхДокументов

// Формирует реестр электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КоличествоФайловДокументов - Соответствие Из КлючИЗначение:
//   * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документ.
//   * Значение - Число - Количество файлов по документу.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Сформированный реестр электронных документов.
Функция СформироватьРеестрЭлектронныхДокументов(Знач ЭлектронныеДокументы, Знач КоличествоФайловДокументов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет = Обработки.ИнтерфейсДокументовЭДО.ПолучитьМакет("РеестрЭлектронныхДокументов_ru");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ДатаСоставления = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ДанныеДокументов = ЭлектронныеДокументыЭДО.ДанныеДокументовДляРеестраЭлектронныхДокументов(ЭлектронныеДокументы);
	
	ОбъектыУчета = ИнтеграцияЭДО.ОбъектыУчетаАктуальныхЭлектронныхДокументов(ЭлектронныеДокументы);
	ОбъектыУчета.Индексы.Добавить("ЭлектронныйДокумент");
	
	НомерСтроки = 1;
	СуммаДокументов = 0;
	КоличествоФайлов = 0;
	
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		ЭлектронныйДокумент = ДанныеДокумента.Ссылка;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрока.Параметры.ДатаДокумента = ДанныеДокумента.ДатаДокумента;
		ОбластьСтрока.Параметры.Организация = ДанныеДокумента.Организация;
		ОбластьСтрока.Параметры.Контрагент = ДанныеДокумента.Контрагент;
		ОбластьСтрока.Параметры.СуммаДокумента = ДанныеДокумента.СуммаДокумента;
		
		ОбластьСтрока.Параметры.ПредставлениеДокумента = ДанныеДокумента.ПредставлениеДокумента;
		
		ОбластьСтрока.Параметры.Направление = ДанныеДокумента.НаправлениеКратко;
		
		КоличествоФайловДокумента = КоличествоФайловДокументов[ЭлектронныйДокумент];
		Если КоличествоФайловДокумента <> Неопределено Тогда
			ОбластьСтрока.Параметры.КоличествоФайлов = КоличествоФайловДокумента;
			КоличествоФайлов = КоличествоФайлов + КоличествоФайловДокумента;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		ОбъектыУчетаДокумента = ОбъектыУчета.НайтиСтроки(Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент));
		Для каждого ОбъектУчетаДокумента Из ОбъектыУчетаДокумента Цикл
			НавигационнаяСсылкаОбъектаУчета = ПолучитьНавигационнуюСсылку(ОбъектУчетаДокумента.ОбъектУчета);
			ОбластьОбъектУчета = Макет.ПолучитьОбласть("ОбъектУчета");
			ОбластьОбъектУчета.Параметры.НавигационнаяСсылкаОбъектаУчета = НавигационнаяСсылкаОбъектаУчета;
			ТабличныйДокумент.Вывести(ОбластьОбъектУчета);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		СуммаДокументов = СуммаДокументов + ДанныеДокумента.СуммаДокумента;
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.СуммаДокументов = СуммаДокументов;
	ОбластьПодвал.Параметры.КоличествоФайлов = КоличествоФайлов;
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПредупрежденийКомпонентов

// Возвращает параметры просмотра документооборота.
// 
// Параметры:
//  Предупреждения - Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента.
//  Вид - см. НастройкиЭДО.ВидыПредупреждений.
// 
// Возвращаемое значение:
//  Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеДанныеПредупрежденияКомпонента.
Функция ПредупрежденияПоВиду(Предупреждения, Вид)
	
	ПредупрежденияПоВиду = Новый Массив;
	
	Для Каждого Предупреждение Из Предупреждения Цикл
		Если Предупреждение.Вид = Вид Тогда
			ПредупрежденияПоВиду.Добавить(Предупреждение);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПредупрежденияПоВиду;
	
КонецФункции

#КонецОбласти

Функция ВыборкаРеквизитовНомерДатаОбъектовУчета(ОбъектыУчетаПоИдентификаторам)
	
	ИдентификаторыОбъектов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ОбъектыУчетаПоИдентификаторам Цикл
		ИдентификаторыОбъектов.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	КоллекцияМетаданныхОбъектов = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ИдентификаторыОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ТекстыЗапросов = Новый Массив;
	Счетчик = 0;
	
	Для Каждого ЭлементКоллекции Из КоллекцияМетаданныхОбъектов Цикл
		
		МетаданныеОбъекта = ЭлементКоллекции.Значение;
		
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитНомер = """""";
		РеквизитДата = "&ПустаяДата";
		
		Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если СтандартныйРеквизит.Имя = "Номер" Тогда
				РеквизитНомер = "Номер";
			ИначеЕсли СтандартныйРеквизит.Имя = "Дата" Тогда
				РеквизитДата = "Дата";
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(РеквизитНомер) И ПустаяСтрока(РеквизитДата) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(СтрШаблон("ВЫБРАТЬ Ссылка, %2 КАК Номер,%3 КАК Дата ИЗ %4 ГДЕ Ссылка В (&Ссылки%1)",
			Счетчик, РеквизитНомер, РеквизитДата, МетаданныеОбъекта.ПолноеИмя()));
		
		Запрос.УстановитьПараметр("Ссылки" + Счетчик, ОбъектыУчетаПоИдентификаторам[ЭлементКоллекции.Ключ]);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТексОбъединитьВсе ="
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ТексОбъединитьВсе);
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ДобавитьОписаниеРаздела(ОписаниеРазделов, Знач Имя, Знач Представление = "", Знач Видимость = Истина, Знач РассчитыватьКоличество = Истина) 
	
	НовыйРаздел = ОписаниеРазделов.Добавить();
	НовыйРаздел.Имя = Имя;
	НовыйРаздел.Представление = Представление;
	НовыйРаздел.Видимость = Видимость;
	НовыйРаздел.РассчитыватьКоличество = РассчитыватьКоличество;
	НовыйРаздел.КоличествоРассчитано = Ложь;
	
	Возврат НовыйРаздел;
	
КонецФункции

Функция КомандаПечатиОбъектаМетаданных(ОбъектМетаданных, Идентификатор)
	
	КомандыПечати = ИнтеграцияЭДО.КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных); 
	Команда = КомандыПечати.Найти(Идентификатор, "Идентификатор");
	
	Если ЗначениеЗаполнено(Команда) Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Команда);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПечатнуюФорму(ПечатныеФормы, Знач ИмяМакета, Знач СинонимМакета, Знач ТабличныйДокумент,
	Знач Ссылка = Неопределено)
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ИмяМакета", ИмяМакета);
	ПечатнаяФорма.Вставить("СинонимМакета", СинонимМакета);
	ПечатнаяФорма.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПечатнаяФорма.Вставить("Ссылка", Ссылка);
	
	ПечатныеФормы.Добавить(ПечатнаяФорма);
	
	Возврат Истина;
	
КонецФункции

Функция МассивДействийНаЭтапе(ДействияНаЭтапе)
	
	МассивДействийНаЭтапе = Новый Массив;
	Для Каждого ДействиеНаЭтапе Из ДействияНаЭтапе Цикл
		МассивДействийНаЭтапе.Добавить(ДействиеНаЭтапе.Ключ);	
	КонецЦикла;
	
	Возврат МассивДействийНаЭтапе;
	
КонецФункции
     
Функция ЗапросКоличестваПодписанныхЭлектронныхДокументовПоМЧД(Доверенность)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект.ВладелецФайла.ЭлектронныйДокумент) КАК Количество
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
	|ГДЕ
	|	ЭлектронныеПодписиПоМЧД.Доверенность = &Доверенность";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
			
КонецФункции

// Проверяет, есть ли в коллекции электронный документ.
// 
// Параметры:
//  Коллекция - Массив из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьЭлектронныйДокумент(Коллекция)
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если ЭлектронныеДокументыЭДО.ЭтоЭлектронныйДокумент(ЭлементКоллекции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти