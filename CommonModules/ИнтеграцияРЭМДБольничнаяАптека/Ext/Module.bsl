
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру поддерживаемых видов СЭМД, включая их типы.
//
// Возвращаемое значение:
//  Результат - Структура - поддерживаемые виды СЭМД.
//
// Примеры использования возвращаемого значение:
//  1. ВидыСЭМД().ОтпускПоРецепту.Имя - значение "ОтпускПоРецепту";
//  2. ВидыСЭМД().ОтпускПоРецепту.Код - значение "38";
//  3. ВидыСЭМД().ОтпускПоРецепту.ТипыСЭМД - значение Структура;
//  4. ВидыСЭМД().ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту140.Имя - значение "ОтпускПоРецепту140";
//  5. ВидыСЭМД().ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту140.КодПоКлассификатору1520 - значение "140";
//  6. ВидыСЭМД().ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту140.КодПоКлассификатору638 - значение "1.2.643.5.1.13.13.14.37.9.3";
//  7. ВидыСЭМД().ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту140.ТипСЭМД - значение СправочникСсылка;
//
Функция ВидыСЭМД() Экспорт
	
	// КодПоКлассификатору1520 - код по классификатору 1.2.643.5.1.13.13.11.1520
	//   (см. https://nsi.rosminzdrav.ru/#!/refbook/1.2.643.5.1.13.13.11.1520)
	// КодПоКлассификатору638 - код по классификатору 1.2.643.5.1.13.13.99.2.638
	//   (см https://nsi.rosminzdrav.ru/#!/refbook/1.2.643.5.1.13.13.99.2.638)
	
	ОписанияВидовСЭМД = Новый Массив;
	
	ОписаниеВидаСЭМД = Новый Структура("Имя, Код, КодыТиповСЭМД");
	ОписаниеВидаСЭМД.Имя           = "ОтпускПоРецепту";
	ОписаниеВидаСЭМД.Код           = "38";
	ОписаниеВидаСЭМД.КодыТиповСЭМД = Новый Массив;
	ОписаниеВидаСЭМД.КодыТиповСЭМД.Добавить(Новый Структура("КодПоКлассификатору1520, КодПоКлассификатору638", "60", "1.2.643.5.1.13.13.14.38.9.2"));
	ОписаниеВидаСЭМД.КодыТиповСЭМД.Добавить(Новый Структура("КодПоКлассификатору1520, КодПоКлассификатору638", "140", "1.2.643.5.1.13.13.14.38.9.3"));
	ОписанияВидовСЭМД.Добавить(ОписаниеВидаСЭМД);
	
	ОписаниеВидаСЭМД = Новый Структура("Имя, Код, КодыТиповСЭМД");
	ОписаниеВидаСЭМД.Имя           = "ЛьготныйРецепт";
	ОписаниеВидаСЭМД.Код           = "37";
	ОписаниеВидаСЭМД.КодыТиповСЭМД = Новый Массив;
	ОписаниеВидаСЭМД.КодыТиповСЭМД.Добавить(Новый Структура("КодПоКлассификатору1520, КодПоКлассификатору638", "112", "1.2.643.5.1.13.13.14.37.9.3"));
	ОписаниеВидаСЭМД.КодыТиповСЭМД.Добавить(Новый Структура("КодПоКлассификатору1520, КодПоКлассификатору638", "141", "1.2.643.5.1.13.13.14.37.9.4"));
	ОписанияВидовСЭМД.Добавить(ОписаниеВидаСЭМД);
	
	ОписаниеВидаСЭМД = Новый Структура("Имя, Код, КодыТиповСЭМД");
	ОписаниеВидаСЭМД.Имя           = "Рецепт";
	ОписаниеВидаСЭМД.Код           = "86";
	ОписаниеВидаСЭМД.КодыТиповСЭМД = Новый Массив;
	ОписаниеВидаСЭМД.КодыТиповСЭМД.Добавить(Новый Структура("КодПоКлассификатору1520, КодПоКлассификатору638", "62", "1.2.643.5.1.13.13.14.86.9.1"));
	ОписаниеВидаСЭМД.КодыТиповСЭМД.Добавить(Новый Структура("КодПоКлассификатору1520, КодПоКлассификатору638", "148", "1.2.643.5.1.13.13.14.86.9.2"));
	ОписанияВидовСЭМД.Добавить(ОписаниеВидаСЭМД);
	
	Результат = Новый Структура;
	Для Каждого ОписаниеВидаСЭМД Из ОписанияВидовСЭМД Цикл
		
		ВидСЭМД = Новый Структура("Имя, Код, ТипыСЭМД");
		ЗаполнитьЗначенияСвойств(ВидСЭМД, ОписаниеВидаСЭМД);
		ВидСЭМД.ТипыСЭМД = Новый Структура;
		
		Для Каждого ЭлеменМассива Из ОписаниеВидаСЭМД.КодыТиповСЭМД Цикл
			
			ОписаниеТипаСЭМД = Новый Структура("Имя, КодПоКлассификатору1520, КодПоКлассификатору638, ТипСЭМД");
			ОписаниеТипаСЭМД.Имя                     = ВидСЭМД.Имя + ЭлеменМассива.КодПоКлассификатору1520;
			ОписаниеТипаСЭМД.КодПоКлассификатору1520 = ЭлеменМассива.КодПоКлассификатору1520;
			ОписаниеТипаСЭМД.КодПоКлассификатору638  = ЭлеменМассива.КодПоКлассификатору638;
			ОписаниеТипаСЭМД.ТипСЭМД                 = ПолучитьТипСЭМДпоКодуТипаСЭМД(ЭлеменМассива.КодПоКлассификатору1520);
			
			ВидСЭМД.ТипыСЭМД.Вставить(ОписаниеТипаСЭМД.Имя, ОписаниеТипаСЭМД);
			
		КонецЦикла;
		
		Результат.Вставить(ВидСЭМД.Имя, ВидСЭМД);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипСЭМДпоКодуТипаСЭМД(КодВидаДокумента) Экспорт
	
	ПараметрыЗапроса = Справочники.ТипыМДРегистрируемыхВРЭМД.ПолучитьПараметрыЗапроса();
	Возврат Справочники.ТипыМДРегистрируемыхВРЭМД.НайтиПоКлючу(ПараметрыЗапроса.OID, КодВидаДокумента);
	
КонецФункции

Функция ПолучитьКодТипаСЭМДпоТипуСЭМД(ТипСЭМД) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТипыМДРегистрируемыхВРЭМД.КодМинздрава КАК КодВидаДокумента
	|ИЗ
	|	Справочник.ТипыМДРегистрируемыхВРЭМД КАК ТипыМДРегистрируемыхВРЭМД
	|ГДЕ
	|	ТипыМДРегистрируемыхВРЭМД.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ТипСЭМД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КодВидаДокумента = Выборка.КодВидаДокумента;
	Иначе
		КодВидаДокумента = Неопределено;
	КонецЕсли;
	
	Возврат КодВидаДокумента;
	
КонецФункции


Функция ЭтоЛьготныйРецепт112(ВидыСЭМД, Знач ТипСЭМД = Неопределено, Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено) Экспорт
	
	ОписаниеТипаСЭМД = ВидыСЭМД.ЛьготныйРецепт.ТипыСЭМД.ЛьготныйРецепт112;
	
	Возврат ЭтотСЭМДСоответствуетОписаниюТипаСЭМД(ОписаниеТипаСЭМД, ТипСЭМД, ТекстСЭМД, ДокументDOM, Разыменователь);
	
КонецФункции

Функция ЭтоЛьготныйРецепт141(ВидыСЭМД, Знач ТипСЭМД = Неопределено, Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено) Экспорт
	
	ОписаниеТипаСЭМД = ВидыСЭМД.ЛьготныйРецепт.ТипыСЭМД.ЛьготныйРецепт141;
	
	Возврат ЭтотСЭМДСоответствуетОписаниюТипаСЭМД(ОписаниеТипаСЭМД, ТипСЭМД, ТекстСЭМД, ДокументDOM, Разыменователь);
	
КонецФункции

Функция ЭтоОтпускПоРецепту60(ВидыСЭМД, Знач ТипСЭМД = Неопределено, Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено) Экспорт
	
	ОписаниеТипаСЭМД = ВидыСЭМД.ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту60;
	
	Возврат ЭтотСЭМДСоответствуетОписаниюТипаСЭМД(ОписаниеТипаСЭМД, ТипСЭМД, ТекстСЭМД, ДокументDOM, Разыменователь);
	
КонецФункции

Функция ЭтоОтпускПоРецепту140(ВидыСЭМД, Знач ТипСЭМД = Неопределено, Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено) Экспорт
	
	ОписаниеТипаСЭМД = ВидыСЭМД.ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту140;
	
	Возврат ЭтотСЭМДСоответствуетОписаниюТипаСЭМД(ОписаниеТипаСЭМД, ТипСЭМД, ТекстСЭМД, ДокументDOM, Разыменователь);
	
КонецФункции


Функция ПолучитьТекстВходящихСЭМД(ДокументСсылка, ТипСЭМД = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус"              , "Успешно");
	Результат.Вставить("Ошибки"              , Новый Массив);
	Результат.Вставить("ТекстСЭМДпоТипамСЭМД", Новый Соответствие);
	
	Попытка
		
		ТекстСЭМДпоТипамСЭМД = РегистрыСведений.ИдентификаторыВходящихСЭМД.ПолучитьТекстВходящихСЭМД(ДокументСсылка, ТипСЭМД);
		
		Если Не ЗначениеЗаполнено(ТекстСЭМДпоТипамСЭМД) Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить входящие электронные документы для документа ""%1"".'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Результат.ТекстСЭМДпоТипамСЭМД = ТекстСЭМДпоТипамСЭМД;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение текста входящих СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящих СЭМД по документу ""%1"" по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьИдентификаторВходящегоСЭМД(ДокументСсылка, ТипСЭМД, ИдентификаторСообщенияСЭМД) Экспорт
	
	РегистрыСведений.ИдентификаторыВходящихСЭМД.ЗаписатьИдентификаторВходящегоСЭМД(ДокументСсылка, ТипСЭМД, ИдентификаторСообщенияСЭМД);
	
КонецПроцедуры


Функция ПолучитьДанныеТекстаСЭМД(ТекстСЭМД, ТипСЭМД) Экспорт
	
	Попытка
		
		ВидыСЭМД = ВидыСЭМД();
		Если ЭтоЛьготныйРецепт112(ВидыСЭМД, ТипСЭМД, ТекстСЭМД) Тогда
			Результат = ПолучитьДанныеТекстаСЭМД_ЛьготныйРецепт112(ТекстСЭМД);
		ИначеЕсли ЭтоЛьготныйРецепт141(ВидыСЭМД, ТипСЭМД, ТекстСЭМД) Тогда
			Результат = ПолучитьДанныеТекстаСЭМД_ЛьготныйРецепт141(ТекстСЭМД);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный тип СЭМД.'");
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение данных текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат = Новый Структура;
		Результат.Вставить("Статус", "Ошибка");
		Результат.Вставить("Ошибки", Новый Массив);
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьДанныеТекстаСЭМД_ЛьготныйРецепт112(ТекстСЭМД)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Новый Структура);
	
	Попытка
		
		ДокументDOM = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДокументDOM(ТекстСЭМД);
		ПИ = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьРазыменовательПространствИменDOM();
		
		// Данные шапки
		ДанныеШапки = Новый Структура("ДокументRoot, ДокументExtension, ДокументSetIdRoot, ДокументSetIdExtension, СерияРецепта, НомерРецепта, ПризнакДействияРецепта");
		
		ДанныеШапки.ДокументRoot           = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:id/@root"));
		ДанныеШапки.ДокументExtension      = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:id/@extension"));
		ДанныеШапки.ДокументSetIdRoot      = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:setId/@root"));
		ДанныеШапки.ДокументSetIdExtension = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:setId/@extension"));
		
		ДанныеШапки.СерияРецепта = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:component/hl7ns:structuredBody/hl7ns:component/hl7ns:section/hl7ns:entry/hl7ns:observation[./hl7ns:code/@code='6001']/hl7ns:value/text()"));
		ДанныеШапки.НомерРецепта = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:component/hl7ns:structuredBody/hl7ns:component/hl7ns:section/hl7ns:entry/hl7ns:observation[./hl7ns:code/@code='6002']/hl7ns:value/text()"));
		
		//ДатаОкончанияДействияРецепта = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "/*/hl7ns:component/hl7ns:structuredBody/hl7ns:component/hl7ns:section/hl7ns:entry/hl7ns:observation[./hl7ns:code/@code='6005']/hl7ns:value/@value"));
		//ДанныеШапки.ПризнакДействияРецепта = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДатаОкончанияДействияРецепта) >= ТекущаяДатаСеанса();
		ДанныеШапки.ПризнакДействияРецепта = Истина;
		
		// Данные пациента
		РезультатПолученияДанныхПациента = ПолучитьДанныеПациента_ЛьготныйРецепт112(ТекстСЭМД, ДокументDOM, ПИ);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхПациента.Ошибки);
		Если РезультатПолученияДанныхПациента.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные пациента'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		ДанныеПациента = РезультатПолученияДанныхПациента.Данные;
		
		// Данные назначения
		ДанныеНазначения = Новый ТаблицаЗначений;
		ДанныеНазначения.Колонки.Добавить("КодЕСКЛП", ОбщегоНазначения.ОписаниеТипаСтрока(41));
		ДанныеНазначения.Колонки.Добавить("КОформлению", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		
		РезультатXPath_ = ФедеральныеВебСервисыСервер.ПолучитьРеквизитыПоXPath(ДокументDOM, ПИ, "/*/hl7ns:component/hl7ns:structuredBody/hl7ns:component/hl7ns:section/hl7ns:entry/hl7ns:substanceAdministration/.");
		substanceAdministration = РезультатXPath_.ПолучитьСледующий();
		Пока substanceAdministration <> Неопределено Цикл
			
			КодЕСКЛП = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "hl7ns:consumable/hl7ns:manufacturedProduct/hl7ns:manufacturedMaterial/hl7ns:code/@code", substanceAdministration);
			Если ЗначениеЗаполнено(КодЕСКЛП) Тогда
				СтрокаДанных = ДанныеНазначения.Добавить();
				СтрокаДанных.КодЕСКЛП = КодЕСКЛП;
				СтрокаДанных.КОформлению = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, ПИ, "hl7ns:entryRelationship/hl7ns:observation/hl7ns:value/hl7ns:translation/@value", substanceAdministration);
			КонецЕсли;
			
			substanceAdministration = РезультатXPath_.ПолучитьСледующий();
			
		КонецЦикла;
		
		Если ДанныеНазначения.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'В СЭМД не указаны коды СМНН лекарственных препаратов.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Результат.Данные.Вставить("ДанныеШапки"     , ДанныеШапки);
		Результат.Данные.Вставить("ДанныеПациента"  , ДанныеПациента);
		Результат.Данные.Вставить("ДанныеНазначения", ДанныеНазначения);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение данных текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПациента_ЛьготныйРецепт112(Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Неопределено);
	
	Попытка
		
		Если ДокументDOM <> Неопределено И Разыменователь <> Неопределено Тогда
			// В первую очередь проверяем переданы ли параметры ДокументDOM и Разыменователь.
		ИначеЕсли ЗначениеЗаполнено(ТекстСЭМД) Тогда
			// Во вторую очередь получаем ДокументDOM и Разыменователь из ТекстСЭМД.
			ДокументDOM = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДокументDOM(ТекстСЭМД);
			Разыменователь = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьРазыменовательПространствИменDOM();
		КонецЕсли;
		
		Данные = Новый Структура("Наименование, ФИО, ДатаРождения, Пол, СНИЛС, ДанныеПолисаОМС");
		
		// СНИЛС
		Данные.СНИЛС = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/hl7ns:id[@root='1.2.643.100.3']/@extension"));
		
		// ФИО
		ЧастиИмени = Новый Массив;
		ЧастиИмени.Добавить(СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/hl7ns:patient/hl7ns:name/hl7ns:family/text()"))); // Фамилия
		ЧастиИмени.Добавить(СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/hl7ns:patient/hl7ns:name/hl7ns:given[1]/text()"))); // Имя
		ЧастиИмени.Добавить(СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/hl7ns:patient/hl7ns:name/hl7ns:given[2]/text()"))); // Отчество
		Данные.Наименование = СокрЛП(СтрСоединить(ЧастиИмени, " "));
		Данные.ФИО          = Данные.Наименование;
		
		// ДатаРождения
		ДатаРожденияСтрокой = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "hl7ns:recordTarget/hl7ns:patientRole/hl7ns:patient/hl7ns:birthTime/@value"));
		Данные.ДатаРождения = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПреобразоватьСтрокуВДату(ДатаРожденияСтрокой);
		
		// Пол
		ПолКод = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "hl7ns:recordTarget/hl7ns:patientRole/hl7ns:patient/hl7ns:administrativeGenderCode/@code"));
		Если ПолКод = "1" Тогда
			Данные.Пол = Перечисления.ПолФизическогоЛица.Мужской;
		ИначеЕсли ПолКод = "2" Тогда
			Данные.Пол = Перечисления.ПолФизическогоЛица.Женский;
		КонецЕсли;
		
		// Полис ОМС
		ДанныеПолисаОМС = Новый Структура("ПолисОМСКод, ПолисОМСКодКлассификатора, ПолисОМСКодВерсия, ПолисОМССистемноеИмя, ПолисОМСОтображаемоеИмя, ПолисОМССерия, ПолисОМСНомер");
		ДанныеПолисаОМС.ПолисОМСКод               = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:InsurancePolicyType/@code"));
		ДанныеПолисаОМС.ПолисОМСКодКлассификатора = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:InsurancePolicyType/@codeSystem"));
		ДанныеПолисаОМС.ПолисОМСКодВерсия         = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:InsurancePolicyType/@codeSystemVersion"));
		ДанныеПолисаОМС.ПолисОМССистемноеИмя      = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:InsurancePolicyType/@codeSystemName"));
		ДанныеПолисаОМС.ПолисОМСОтображаемоеИмя   = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:InsurancePolicyType/@displayName"));
		ДанныеПолисаОМС.ПолисОМССерия             = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:Series/text()"));
		ДанныеПолисаОМС.ПолисОМСНомер             = СокрЛП(ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:recordTarget/hl7ns:patientRole/identity:InsurancePolicy/identity:Number/text()"));
		Данные.ДанныеПолисаОМС = ДанныеПолисаОМС;
		
		Результат.Данные = Данные;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение данных пациента текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные пациента текста СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьДанныеТекстаСЭМД_ЛьготныйРецепт141(ТекстСЭМД)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Новый Структура);
	
	Попытка
		
		// СЭМД ЛьготныйРецепт141 еще не реализован в ЕГИСЗ.
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение данных текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПациента_ЛьготныйРецепт141(Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Неопределено);
	
	Попытка
		
		// СЭМД ЛьготныйРецепт141 еще не реализован в ЕГИСЗ.
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение данных пациента текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные пациента текста СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Функция НайтиСоздатьПациента(ДанныеПациента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Пациент", Неопределено);
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	&СНИЛС <> """"
		|	И ФизическиеЛица.СНИЛС = &СНИЛС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	&Наименование <> """"
		|	И ФизическиеЛица.Наименование = &Наименование
		|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
		|	И ФизическиеЛица.Пол = &Пол
		|");
		
		Запрос.УстановитьПараметр("СНИЛС"       , ДанныеПациента.СНИЛС);
		Запрос.УстановитьПараметр("Наименование", ДанныеПациента.Наименование);
		Запрос.УстановитьПараметр("ДатаРождения", ДанныеПациента.ДатаРождения);
		Запрос.УстановитьПараметр("Пол"         , ДанныеПациента.Пол);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат.Пациент = Выборка.Ссылка;
		Иначе
			
			НовыйПациент = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйПациент, ДанныеПациента);
			НовыйПациент.Родитель = Справочники.ФизическиеЛица.Пациенты;
			НовыйПациент.Записать();
			
			Результат.Пациент = НовыйПациент.Ссылка;
			
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Поиск и создание пациента'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось найти или создать пациента по данным СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьДокументDOM(ТекстСЭМД) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСЭМД);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьРазыменовательПространствИменDOM() Экспорт
	
	СоответствиеПИ = Новый Соответствие;
	СоответствиеПИ.Вставить("hl7ns"   , "urn:hl7-org:v3");
	СоответствиеПИ.Вставить("fias"    , "urn:hl7-ru:fias");
	СоответствиеПИ.Вставить("identity", "urn:hl7-ru:identity");
	ПИ = Новый РазыменовательПространствИменDOM(СоответствиеПИ);
	
	Возврат ПИ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование СЭМД
#Область ФормированиеСЭМД

// Формирует текст со статусом формирования СЭМД по документу формы.
//
// Параметры:
//  Форма - Форма - Форма документа.
//
Процедура СформироватьТекстГиперссылкиСЭМД(Форма) Экспорт
	
	ДокументСсылка = Форма.Объект.Ссылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ТипСЭМД = ФедеральныеВебСервисыРЭМД.ПолучитьТипРЭМДПоДокументу(ДокументСсылка);
	Если Не ЗначениеЗаполнено(ТипСЭМД) Тогда
		Возврат;
	КонецЕсли;
	
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	ПравоЧтения     = ПравоДоступа("Чтение"    , МетаданныеДокумента);
	
	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеСЭМД = ФедеральныеВебСервисыРЭМД.ПолучитьДвоичныеДанныеДокументаИзХранилища(ДокументСсылка);
	Если ДвоичныеДанныеСЭМД = Неопределено И Не ПравоДобавления Тогда
		Возврат;
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	Если ДвоичныеДанныеСЭМД = Неопределено Тогда
		
		ТекстНадписи = НСтр("ru = 'Создать электронный медицинаский документ'");
		ИмяКоманды = "СоздатьСЭМД";
		ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Открыть электронный медицинаский документ'");
		ИмяКоманды = "ОткрытьСЭМД";
		ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
		
		//ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
		//
		//ТекстНадписи = НСтр("ru = 'Добавить подпись в электронный медицинаский документ'");
		//ИмяКоманды = "ДобавитьПодписьСЭМД";
		//ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
		
	КонецЕсли;
	
	Форма.ТекстСЭМД = Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецПроцедуры


// Собирает данные о пациента для заполнения шаблона.
Функция ПолучитьДанныеПациентаДляСЭМД(ДанныеПациента, Организация, Префикс = "Пациент") Экспорт
	
	Результат = Новый Соответствие;
	
	ПациентСсылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПациента, "Пациент");
	Если ЗначениеЗаполнено(ПациентСсылка) Тогда
		OIDПациента_ = Пациент2OID(ПациентСсылка, Организация);
		Результат[Префикс + "Root"]           = OIDПациента_.root;
		Результат[Префикс + "" + "Extension"] = OIDПациента_.extension;
		Результат[Префикс + "Id"]             = idТег("id", OIDПациента_.root, OIDПациента_.extension);
	КонецЕсли;
	
	// СНИЛС
	СНИЛС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПациента, "СНИЛС");
	Результат[Префикс + "СНИЛС"] = АлгоритмыСтроковые.УдалитьСимволыКроме(СНИЛС, "0123456789");
	
	// ФИО
	ФИО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПациента, "ФИО");
	Если ЗначениеЗаполнено(ФИО) Тогда
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
		Результат[Префикс + "Фамилия"]  = ЧастиИмени.Фамилия;
		Результат[Префикс + "Имя"]      = ЧастиИмени.Имя;
		Результат[Префикс + "Отчество"] = ЧастиИмени.Отчество;
	КонецЕсли;
	
	// Пол
	Пол = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПациента, "Пол");
	Если ЗначениеЗаполнено(Пол) Тогда
		КодыПола = ПолучитьОписаниеЭлементаCode_ПолФизическогоЛица(Пол);
		Результат[Префикс + "ПолКод"]                      = КодыПола.code;
		Результат[Префикс + "ПолНаименование"]             = КодыПола.displayName;
		Результат[Префикс + "ПолСтрока"]                   = Строка(Пол);
		Результат[Префикс + "ПолAdministrativeGenderCode"] = codeТегПоСтруктуре("administrativeGenderCode", КодыПола);
	Иначе
		Результат[Префикс + "ПолAdministrativeGenderCode"] = "";
	КонецЕсли;
	
	// Дата рождения
	ДатаРождения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПациента, "ДатаРождения");
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		Результат[Префикс + "ДатаРождения"] = Формат(ДатаРождения, "ДФ=yyyyMMdd");
	КонецЕсли;
	
	// Полис ОМС
	ДанныеПолисаОМС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПациента, "ДанныеПолисаОМС");
	Если ЗначениеЗаполнено(ДанныеПолисаОМС) Тогда
		Результат[Префикс + "ПолисОМСnullFlavor"]        = "NA";
		Результат[Префикс + "ПолисОМСКод"]               = ДанныеПолисаОМС.ПолисОМСКод;
		Результат[Префикс + "ПолисОМСКодКлассификатора"] = ДанныеПолисаОМС.ПолисОМСКодКлассификатора;
		Результат[Префикс + "ПолисОМСКодВерсия"]         = ДанныеПолисаОМС.ПолисОМСКодВерсия;
		Результат[Префикс + "ПолисОМССистемноеИмя"]      = ДанныеПолисаОМС.ПолисОМССистемноеИмя;
		Результат[Префикс + "ПолисОМСОтображаемоеИмя"]   = ДанныеПолисаОМС.ПолисОМСОтображаемоеИмя;
		Результат[Префикс + "ПолисОМССерия"]             = ДанныеПолисаОМС.ПолисОМССерия;
		Результат[Префикс + "ПолисОМСНомер"]             = ДанныеПолисаОМС.ПолисОМСНомер;
	КонецЕсли;
	
	// Документ удостоверяющий личность
	Результат[Префикс + "ВидДокументаТег"]          = "";
	Результат[Префикс + "ВидДокумента"]             = "";
	Результат[Префикс + "ВидДокументаКод"]          = "";
	Результат[Префикс + "ВидДокументаВерсия"]       = "";
	Результат[Префикс + "СерияДокумента"]           = "";
	Результат[Префикс + "НомерБезСерииДокумента"]   = "";
	Результат[Префикс + "НомерДокумента"]           = "";
	Результат[Префикс + "ДокументКемВыдан"]         = "";
	Результат[Префикс + "ДокументКодПодразделения"] = "";
	Результат[Префикс + "ДокументДатаВыдачи"]       = "";
	Результат[Префикс + "ДУЛId"]                    = "";
	
	// Контакты
	Результат[Префикс + "Телефон"]                  = "";
	Результат[Префикс + "МобильныйТелефон"]         = "";
	Результат[Префикс + "ЭлектроннаяПочта"]         = "";
	
	// Адрес регистрации
	ПрефиксАдресРегистрации = Префикс + "АдресРегистрации";
	Результат[ПрефиксАдресРегистрации]                                   = "";
	Результат[ПрефиксАдресРегистрации + "ИдентификаторАдресногоОбъекта"] = "";
	Результат[ПрефиксАдресРегистрации + "ИдентификаторДома"]             = "";
	Результат[ПрефиксАдресРегистрации + "Индекс"]                        = "";
	Результат[ПрефиксАдресРегистрации + "СубъектРФ"]                     = "";
	Результат[ПрефиксАдресРегистрации + "СубъектРФТег"]                  = "";
	Результат[ПрефиксАдресРегистрации + "СубъектРФCD"]                   = "";
	Результат[ПрефиксАдресРегистрации + "СубъектРФ_noCD"]                = "";
	Результат[ПрефиксАдресРегистрации + "СубъектРФCode"]                 = "";
	Результат[ПрефиксАдресРегистрации + "КодРегиона"]                    = "";
	
	// Адрес фактический
	ПрефиксАдресФактический = Префикс + "АдресФактический";
	Результат[ПрефиксАдресФактический]                                   = "";
	Результат[ПрефиксАдресФактический + "ИдентификаторАдресногоОбъекта"] = "";
	Результат[ПрефиксАдресФактический + "ИдентификаторДома"]             = "";
	Результат[ПрефиксАдресФактический + "Индекс"]                        = "";
	Результат[ПрефиксАдресФактический + "СубъектРФ"]                     = "";
	Результат[ПрефиксАдресФактический + "СубъектРФТег"]                  = "";
	Результат[ПрефиксАдресФактический + "СубъектРФCD"]                   = "";
	Результат[ПрефиксАдресФактический + "СубъектРФ_noCD"]                = "";
	Результат[ПрефиксАдресФактический + "СубъектРФCode"]                 = "";
	Результат[ПрефиксАдресФактический + "КодРегиона"]                    = "";
	
	Возврат Результат;
	
КонецФункции

// Собирает данные о сотруднике для заполнения шаблона.
Функция ПолучитьДанныеСотрудникаДляСЭМД(ДанныеСотрудника, Организация, Префикс = "") Экспорт
	
	Результат = Новый Соответствие;
	
	OIDСотрудника_ = Сотрудник2OID(ДанныеСотрудника.Сотрудник, Организация);
	Результат[Префикс + "СотрудникRoot"]      = OIDСотрудника_.root;
	Результат[Префикс + "СотрудникExtension"] = OIDСотрудника_.extension;
	Результат[Префикс + "СотрудникId"]        = idТег("id", OIDСотрудника_.root, OIDСотрудника_.extension);
	
	СНИЛС = АлгоритмыСтроковые.УдалитьСимволыКроме(ДанныеСотрудника.СНИЛС, "0123456789");
	Если ЗначениеЗаполнено(СНИЛС) Тогда
		Результат[Префикс + "СотрудникСНИЛС"] = СНИЛС;
	КонецЕсли;
	
	ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеСотрудника.ФИО);
	Результат[Префикс + "СотрудникФамилия"]   = ЧастиИмени.Фамилия;
	Результат[Префикс + "СотрудникИмя"]       = ЧастиИмени.Имя;
	Результат[Префикс + "СотрудникОтчество"]  = ЧастиИмени.Отчество;
	
	Результат[Префикс + "СотрудникКодДолжности"]                   = ДанныеСотрудника.КодДолжности1002;
	Результат[Префикс + "СотрудникНаименованиеДолжности"]          = ДанныеСотрудника.Должность1002;
	Результат[Префикс + "СотрудникВерсияКлассификатораДолжностей"] = ДанныеСотрудника.ВерсияКлассификатораДолжностей1002;
	
	Возврат Результат;
	
КонецФункции

// Собирает данные по организации для заполнения шаблона.
Функция ПолучитьДанныеОрганизацииДляСЭМД(ДанныеОрганизации, Префикс = "") Экспорт
	
	Результат = Новый Соответствие;
	Результат[Префикс + "ОрганизацияСсылка"]                             = ДанныеОрганизации.Организация;
	
	Результат[Префикс + "ОрганизацияOID"]                                = ДанныеОрганизации.КодOID;
	Результат[Префикс + "ОрганизацияНаименование"]                       = ДанныеОрганизации.Наименование;
	Результат[Префикс + "ОрганизацияОГРН"]                               = ДанныеОрганизации.ОГРН;
	Результат[Префикс + "ОрганизацияОКПО"]                               = ДанныеОрганизации.КодПоОКПО;
	Результат[Префикс + "ОрганизацияОКАТО"]                              = ДанныеОрганизации.КодПоОКАТО; 
	Результат[Префикс + "ОрганизацияОГРНИП"]                             = "";
	
	Результат[Префикс + "ОрганизацияЛицензияКонтролирующийОрган"]        = "";
	Результат[Префикс + "ОрганизацияНомерЛицензии"]                      = "";
	Результат[Префикс + "ОрганизацияДатаРегистрацииЛицензии"]            = "";
	
	Результат[Префикс + "ОрганизацияТелефон"]                            = ДанныеОрганизации.Телефон;
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Адрес) Тогда
		Результат[Префикс + "ОрганизацияАдрес"]                          = ОбщиеМеханизмы.ЭкранироватьЗначение(ДанныеОрганизации.Адрес);
	КонецЕсли;
	
	Результат[Префикс + "ОрганизацияАдресИндекс"]                        = ДанныеОрганизации.АдресИндекс;
	Результат[Префикс + "ОрганизацияАдресКодРегиона"]                    = ДанныеОрганизации.АдресКодРегиона;
	Результат[Префикс + "ОрганизацияАдресНаименованиеРегиона"]           = ДанныеОрганизации.АдресНаименованиеРегиона;
	
	Результат[Префикс + "ОрганизацияАдресКодРегионаТег"]                 = "";
	Результат[Префикс + "ОрганизацияАдресСубъектРФТег"]                  = "";
	Результат[Префикс + "ОрганизацияАдресСубъектРФCD"]                   = "";
	Результат[Префикс + "ОрганизацияАдресСубъектРФCode"]                 = "";
	
	Результат[Префикс + "ОрганизацияАдресИдентификаторАдресногоОбъекта"] = ДанныеОрганизации.АдресИдентификаторАдресногоОбъекта;
	Результат[Префикс + "ОрганизацияАдресИдентификаторДома"]             = ДанныеОрганизации.АдресИдентификаторДома;
	Результат[Префикс + "ОрганизацияАдресCode"]                          = "";
	Результат[Префикс + "ОрганизацияАдресКодАдреса"]                     = "";
	
	Результат[Префикс + "ПодразделениеOID"]                              = "";
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеЭлементаCode_ПолФизическогоЛица(ПеречислениеСсылка) Экспорт
	
	Результат = Новый Структура(
		"code, displayName, codeSystem, codeSystemName, codeSystemVersion",
		"3",
		"Неопределенный",
		"1.2.643.5.1.13.13.11.1040");
	
	Результат.codeSystemVersion = "2.1";
	Результат.codeSystemName = "Пол пациента";
	
	Если ПеречислениеСсылка = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Результат.code = "1";
		Результат.displayName = "Мужской";
	ИначеЕсли ПеречислениеСсылка = Перечисления.ПолФизическогоЛица.Женский Тогда
		Результат.code = "2";
		Результат.displayName = "Женский";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает root с OID и extension с идентификатором для документа.
//
// Параметры:
//  СсылкаИлиУИД			 - ДокументСсылка, УникальныйИентификатор	 - Ссылка или УИД
//  ОрганизацияИлиOID	 - СправочникСсылка.Организация, Строка	 - Организация или OID
//  ExetensionКакУИД	 - Булево	 - Формировать строку extension как УИД или как набор цифр.
// 
// Возвращаемое значение:
//  Структура - Структура с полями root, extension
//
Функция Документ2OID(СсылкаИлиУИД, ОрганизацияИлиOID) Экспорт
	
	Возврат СсылкаИлиУИД2OID(СсылкаИлиУИД, ОрганизацияИлиOID, ".51");
	
КонецФункции

// Возвращает root с OID и extension с идентификатором по ссылке (или УИД)
//
// Параметры:
//  СсылкаИлиУИД			 - СправочникСсылка, ДокументСсылка, УникальныйИдентификатор, Строка	 - Ссылка или УИД
//  ОрганизацияИлиOID	 - СправочникСсылка.Организация, Строка	 - Организация или OID
//  СуффикcOID				 - Строка	 - Суффикс, добавляемый к OID
//  ExetensionКакУИД	 - Булево	 - Формировать строку extension как УИД или как набор цифр.
// 
// Возвращаемое значение:
//  Структура - Структура с полями root, extension
//
Функция СсылкаИлиУИД2OID(СсылкаИлиУИД, ОрганизацияИлиOID, СуффикcOID) Экспорт
	
	Результат_ = Новый Структура("root, extension");
	
	OIDМедОрганизации_ = OIDОрганизации(ОрганизацияИлиOID);
	Результат_.root = OIDМедОрганизации_ 
		+ ".100." 
		+ ПолучитьНомерМИС() 
		+ "." 
		+ ПолучитьНомерЭкземпляраМИС() 
		+ ?(ЗначениеЗаполнено(СуффикcOID), СуффикcOID, "")
	;
	
	Если Не ЗначениеЗаполнено(СсылкаИлиУИД) Тогда
		Результат_.extension = "0";
	Иначе
		Если ТипЗнч(СсылкаИлиУИД) = Тип("Строка") Или ТипЗнч(СсылкаИлиУИД) = Тип("УникальныйИдентификатор") Тогда
			УИД_ = СсылкаИлиУИД;
		Иначе
			УИД_ = СсылкаИлиУИД.УникальныйИдентификатор();
		КонецЕсли;
		
		Результат_.extension = Строка(УИД_);
	КонецЕсли;
	
	Возврат Результат_;
	
КонецФункции

// Преобразует ссылку на организацию в строку OID по правилам минздрава.
Функция OIDОрганизации(ОрганизацияИлиOID, ПозволятьПустуюСсылку = Ложь) Экспорт
	
	Если ТипЗнч(ОрганизацияИлиOID) = Тип("Строка") Тогда
		OIDМедОрганизации_ = ОрганизацияИлиOID;
	Иначе
		Если ПозволятьПустуюСсылку И Не ЗначениеЗаполнено(ОрганизацияИлиOID) Тогда
			Возврат "0.0";
		КонецЕсли;
		
		OIDМедОрганизации_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияИлиOID, "КодOID");
		Если Не ЗначениеЗаполнено(OIDМедОрганизации_) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнен OID организации: '") + ОрганизацияИлиOID;
		КонецЕсли;
	КонецЕсли;
	
	Возврат OIDМедОрганизации_;
	
КонецФункции

// Возвращает setID root с OID и extension с идентификатором для документа.
//
// Параметры:
//  СсылкаИлиУИД			 - ДокументСсылка, УникальныйИентификатор	 - Ссылка или УИД
//  ОрганизацияИлиOID	 - СправочникСсылка.Организация, Строка	 - Организация или OID
//  ExetensionКакУИД	 - Булево	 - Формировать строку extension как УИД или как набор цифр.
// 
// Возвращаемое значение:
//  Структура - Структура с полями root, extension
//
Функция Документ2SetID(СсылкаИлиУИД, ОрганизацияИлиOID) Экспорт
	
	Возврат СсылкаИлиУИД2OID(СсылкаИлиУИД, ОрганизацияИлиOID, ".50");
	
КонецФункции

// Возвращает root с OID и extension с идентификатором по пациенту.
//
// Параметры:
//  Ссылка						 - СправочникСсылка.Пациент	 - Пациент
//  ОрганизацияИлиOID	 - СправочникСсылка.Организация, Строка	 - Организация или OID
//  ExetensionКакУИД	 - Булево	 - Формировать строку extension как УИД или как набор цифр.
// 
// Возвращаемое значение:
//  Структура - Структура с полями root, extension
//
Функция Пациент2OID(Ссылка, ОрганизацияИлиOID) Экспорт
	
	Возврат СсылкаИлиУИД2OID(Ссылка, ОрганизацияИлиOID, ".10");
	
КонецФункции

// Возвращает root с OID и extension с идентификатором по сотруднику.
//
// Параметры:
//  Ссылка						 - СправочникСсылка.Сотрудники	 - Сотрудник
//  ОрганизацияИлиOID	 - СправочникСсылка.Организация, Строка	 - Организация или OID
//  ExetensionКакУИД	 - Булево	 - Формировать строку extension как УИД или как набор цифр.
// 
// Возвращаемое значение:
//  Структура - Структура с полями root, extension
//
Функция Сотрудник2OID(Ссылка, ОрганизацияИлиOID) Экспорт
	
	Возврат СсылкаИлиУИД2OID(Ссылка, ОрганизацияИлиOID, ".70");
	
КонецФункции

// Возвращает дату в виде отформатированной строки с учетом смещения. 
// Аналог ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением, только с возможностью указать формат даты.
// В основном используется для прописывания даты в СЭМД.
//
// Параметры:
//  ЛокальнаяДата		 - Дата	 - Дата
//  ФорматнаяСтрока	 - Строка	 - Форматная строка 
// 
// Возвращаемое значение:
//  Строка - Отформатированная дата с учетом смещения
//
Функция ДатаВСтрокуСоСмещением(Дата, ФорматнаяСтрока = "ДФ=yyyyMMddHHmmss; ДП=00010101000000") Экспорт
	
	Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	
	ПредставлениеСмещения = "Z";
	Если Смещение > 0 Тогда
		ПредставлениеСмещения = "+";
	ИначеЕсли Смещение < 0 Тогда
		ПредставлениеСмещения = "-";
		Смещение = -Смещение;
	КонецЕсли;
	Если Смещение <> 0 Тогда
		ПредставлениеСмещения = ПредставлениеСмещения + Формат('00010101' + Смещение, "ДФ=HHmm");
	КонецЕсли;
	
	Возврат Формат(Дата, ФорматнаяСтрока) + ПредставлениеСмещения;
	
КонецФункции

// Возвращает строку для XML тега code (тип tns:CD) с атрибутами.
//
// Параметры:
//  ИмяТега						 - Строка	 - Наименование тега, если пустой, то будет возвращена строка только с атрибутами
//  ДанныеКодирования	 - Структура	 - Структура с полями code, codeSystem, ...
// 
// Возвращаемое значение:
//  Строка - атрибуты тега в виде строки
//
Функция codeТегПоСтруктуре(ИмяТега, ДанныеКодирования, ТипТега = Неопределено) Экспорт
	code_ = Неопределено;
	ДанныеКодирования.Свойство("code", code_);
	codeSystem_ = Неопределено;
	ДанныеКодирования.Свойство("codeSystem", codeSystem_);
	codeSystemVersion_ = Неопределено;
	ДанныеКодирования.Свойство("codeSystemVersion", codeSystemVersion_);
	codeSystemName_ = Неопределено;
	ДанныеКодирования.Свойство("codeSystemName", codeSystemName_);
	displayName_ = Неопределено;
	ДанныеКодирования.Свойство("displayName", displayName_);
	
	Возврат codeТег(ИмяТега, code_, codeSystem_, codeSystemVersion_, codeSystemName_, displayName_, ТипТега);
КонецФункции

// Возвращает строку для XML тега code (тип tns:CD) с атрибутами.
//
// Параметры:
//  ИмяТега						 - Строка	 - Наименование тега, если пустой, то будет возвращена строка только с атрибутами
//  code							 - Строка	 - code
//  codeSystem				 - Строка	 - codeSystem
//  codeSystemVersion	 - Строка	 - codeSystemVersion
//  codeSystemName		 - Строка	 - codeSystemName
//  displayName				 - Строка	 - displayName
// 
// Возвращаемое значение:
//  Строка - атрибуты тега в виде строки
//
Функция codeТег(ИмяТега, code, codeSystem, codeSystemVersion, codeSystemName, displayName, ТипТега = Неопределено) Экспорт
	Шаблон_ = 
		"{{[type] }}code='[code]' codeSystem='[codeSystem]' {{codeSystemVersion='[codeSystemVersion]' }}{{codeSystemName='[codeSystemName]' }}{{displayName='[displayName]' }}"
	;
	Данные_ = Новый Соответствие();
	Данные_["[code]"] = code;
	Данные_["[codeSystem]"] = codeSystem;
	Данные_["[codeSystemVersion]"] = codeSystemVersion;
	Данные_["[codeSystemName]"] = codeSystemName;
	Данные_["[displayName]"] = displayName;
	Данные_["[type]"] = ТипТега;
	
	Результат_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);
	
	Если ЗначениеЗаполнено(ИмяТега) Тогда 
		Если СтрНайти(ИмяТега, "%1") <> 0 Тогда 
			Результат_ = СтрШаблон(ИмяТега, Результат_);
		Иначе
			Результат_ = СтрШаблон("<%1 %2/>", ИмяТега, Результат_);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

// Возвращает строку для XML тега id (тип tns:II) с атрибутами.
//
// Параметры:
//  ИмяТега								 - Строка	 - Наименование тега, если пустой, то будет возвращена строка только с атрибутами
//  root									 - Строка	 - root
//  extension							 - Строка	 - extension
//  assigningAuthorityName - Строка	 - assigningAuthorityName
//  nullFlavor						 - Строка	 - nullFlavor
// 
// Возвращаемое значение:
//  Строка - атрибуты тега в виде строки
//
Функция idТег(ИмяТега, root, extension, assigningAuthorityName = "", nullFlavor = "") Экспорт
	Шаблон_ = 
		"{{root='[root]' }}{{extension='[extension]' }}{{assigningAuthorityName='[assigningAuthorityName]' }}{{nullFlavor='[nullFlavor]' }}"
	;
	Данные_ = Новый Соответствие();
	Данные_["[root]"] = root;
	Данные_["[extension]"] = extension;
	Данные_["[assigningAuthorityName]"] = assigningAuthorityName;
	Данные_["[nullFlavor]"] = nullFlavor;
	
	Результат_ = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон_, Данные_);
	
	Если ЗначениеЗаполнено(ИмяТега) Тогда 
		Результат_ = СтрШаблон("<%1 %2/>", ИмяТега, Результат_);
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

#КонецОбласти // ФормированиеСЭМД

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ЭтотСЭМДСоответствуетОписаниюТипаСЭМД(ОписаниеТипаСЭМД, Знач ТипСЭМД = Неопределено, Знач ТекстСЭМД = Неопределено, Знач ДокументDOM = Неопределено, Знач Разыменователь = Неопределено)
	
	Если ЗначениеЗаполнено(ТипСЭМД) Тогда
		Возврат ОписаниеТипаСЭМД.ТипСЭМД = ТипСЭМД;
	Иначе
		
		Если ДокументDOM <> Неопределено И Разыменователь <> Неопределено Тогда
			// В первую очередь проверяем переданы ли параметры ДокументDOM и Разыменователь.
		ИначеЕсли ЗначениеЗаполнено(ТекстСЭМД) Тогда
			// Во вторую очередь получаем ДокументDOM и Разыменователь из ТекстСЭМД.
			ДокументDOM = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДокументDOM(ТекстСЭМД);
			Разыменователь = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьРазыменовательПространствИменDOM();
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		КодПоКлассификатору638 = ФедеральныеВебСервисыСервер.ПолучитьСтрокуПоXPath(ДокументDOM, Разыменователь, "/*/hl7ns:code/@code");
		Возврат ОписаниеТипаСЭМД.КодПоКлассификатору638 = КодПоКлассификатору638;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерЭкземпляраМИС()
	
	НомерЭкзМИС_ = Неопределено;
	
	Попытка
		НомерЭкзМИС_ = Константы.ФедеральныеВебСервисыНомерЭкзМИС.Получить();
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(НомерЭкзМИС_) Тогда
		Возврат Строка(НомерЭкзМИС_);
	КонецЕсли;
	
	Возврат "1";
	
КонецФункции

Функция ПолучитьНомерМИС()
	
	НомерМИС_ = Неопределено;
	
	Попытка
		НомерМИС_ = Константы.ФедеральныеВебСервисыНомерМИС.Получить();
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(НомерМИС_) Тогда
		Возврат Строка(НомерМИС_);
	КонецЕсли;
	
	Возврат "1";
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
