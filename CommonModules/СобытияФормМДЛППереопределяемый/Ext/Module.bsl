
#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("МестоДеятельности");
	ИменаЭлементов.Добавить("МестоДеятельностиОтбор");
	ИменаЭлементов.Добавить("МестоДеятельностиКОформлениюОтбор");
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ЭлементМестоДеятельности = Форма.Элементы.Найти(ИмяЭлемента);
		Если ЭлементМестоДеятельности <> Неопределено И ТипЗнч(ЭлементМестоДеятельности) = Тип("ПолеФормы") И ЭлементМестоДеятельности.Вид = ВидПоляФормы.ПолеВвода Тогда
			НастройкаФормБольничнаяАптека.ДобавитьПараметрВыбора(ЭлементМестоДеятельности.ПараметрыВыбора, "Отбор.ТипСклада", Перечисления.ТипыСкладов.ТипыСкладовАптеки());
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		
		МетаданныеОбъекта = Форма.Объект.Ссылка.Метаданные();
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			
			// Видимость группы ГруппаТранспортныеУпаковки.
			ИсключаемыеТипы = Новый Массив;
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП"));
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОбОтгрузкеМДЛП"));
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП"));
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОбОприходованииМДЛП"));
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеВладельцаОбОприходованииМДЛП"));
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОПеремещенииМДЛП"));
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.УведомлениеОПеремещенииГЛОМДЛП"));
			
			Если ИсключаемыеТипы.Найти(ТипЗнч(Форма.Объект.Ссылка)) = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаТранспортныеУпаковки", "Видимость", Ложь);
			КонецЕсли;
			
			НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияМДЛПБольничнаяАптека.СоздатьКомандуРегистрацииGTINНаФорме(Форма);
	ИнтеграцияМДЛПБольничнаяАптека.СоздатьКомандуОбработатьНенайденныеШтрихкодыНаФорме(Форма);
	ИнтеграцияМДЛПБольничнаяАптека.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(Форма);
	
	// Установка доступности изменения данных номенклатуры.
	Если Форма.ИмяФормы = Метаданные.Обработки.ПолучитьСоставТранспортныхУпаковокМДЛП.Формы.ПолучитьСоставТранспортныхУпаковок.ПолноеИмя()
	 Или Форма.ИмяФормы = Метаданные.Обработки.СверкаОстатковМДЛП.Формы.СверкаОстатков.ПолноеИмя() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СгенерироватьСерии", "Видимость", ПравоДоступа("Добавление", Метаданные.Справочники.СерииНоменклатуры));
		Форма.ЗапрещенВводДанныхНоменклатуры = Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УпаковкиМДЛП);
		
	КонецЕсли;
	
	// Отметка незаполненного поля ТоварыСерия, документа УведомлениеВладельцаОбОприходованииМДЛП устанавливается в Ложь,
	// т.к. на текущий момент у документа нет основания и данные о номенклатуре необходимы только как справочная информация.
	Если Форма.ИмяФормы = Метаданные.Документы.УведомлениеВладельцаОбОприходованииМДЛП.Формы.ФормаДокумента.ПолноеИмя() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыСерия", "АвтоОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыСерия", "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
	// Заполнение основных реквизитов формы выборочного контроля КМ МДЛП.
	Если Форма.ИмяФормы = Метаданные.Обработки.ВыборочныйКонтрольКММДЛП.Формы.ВыборочныйКонтроль.ПолноеИмя() Тогда
		
		Если ТипЗнч(Форма.Параметры.ПроверяемыйДокумент) = Тип("ДокументСсылка.ЧекККМ") Тогда
			РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.Параметры.ПроверяемыйДокумент, "Организация, Склад");
			Субъект = ИнтеграцияМДЛПБольничнаяАптека.ОрганизацияМестоДеятельностиОбъекта(РеквизитыШапки.Организация, РеквизитыШапки.Склад);
			ЗаполнитьЗначенияСвойств(Форма, Субъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// БольничнаяАптека
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
	   И ОбщегоНазначения.ЭтоДокумент(Форма.Объект.Ссылка.Метаданные()) Тогда
		
		НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// БольничнаяАптека
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
	   И ОбщегоНазначения.ЭтоДокумент(Форма.Объект.Ссылка.Метаданные()) Тогда
		
		НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
		
	КонецЕсли;
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеНоменклатуры

// В процедуре требуется реализовать алгоритм обработки полученных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка,
//  ДанныеДляОбработки - Структура - подготовленные ранее данные для обработки,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
//
Процедура ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	// БольничнаяАптека
	ИнтеграцияМДЛПБольничнаяАптека.ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения)
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросИнформацииОбУпаковках

// В процедуре можно переопределить стандартный алгоритм обработки получения информации о потребительских упаковках для документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка.
//  Данные - Соответствие - данные, возвращаемые в результате функции ТранспортМДЛПАПИКлиентСервер.ПолучитьИнформациюОПотребительскихУпаковках.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработатьПолучениеИнформацииОПотребительскихУпаковках(Форма, Данные, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// В процедуре можно переопределить стандартный алгоритм обработки получения информации о транспортных упаковках для документов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка.
//  Данные - Соответствие - данные, возвращаемые в результате функции ТранспортМДЛПАПИКлиентСервер.ПолучитьИнформациюОТранспортныхУпаковках.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработатьПолучениеИнформацииОТранспортныхУпаковках(Форма, Данные, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СверкаОстатков

// Выполняет запись изменений данных упаковок по данным МДЛП в обработке СверкаОстатковМДЛП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется запись состава транспортных упаковок;
//  Объект - ДанныеФормыСтруктура - данные формы, из которых получаются изменения состава транспортных упаковок;
//  ИмяТабличнойЧасти - Строка - имя табличной части, из которой получаются изменения состава транспортных упаковок;
//  СтандартнаяОбработка - Булево - признак необходимости выполнения стандартных действий при записи изменений состава транспортных упаковок;
//
Процедура ЗаписатьРезультатСверкиОстатков(Форма, Объект, ИмяТабличнойЧасти, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	Если ИмяТабличнойЧасти = Метаданные.Обработки.СверкаОстатковМДЛП.ТабличныеЧасти.ДанныеТранспортныхУпаковок.Имя Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУпаковок = Объект[ИмяТабличнойЧасти].Выгрузить(Новый Структура("ИзмененыДанныеНоменклатуры", Истина));
	Если ДанныеУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.УпаковкиМаркируемогоТовара.ЗарегистрироватьУпаковкиМаркируемогоТовара(ДанныеУпаковок);
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти // СверкаОстатков

#Область ПолучениеСоставаТранспортныхУпаковок

// Выполняет запись изменений данных упаковок по данным МДЛП в обработке ПолучитьСоставТранспортныхУпаковокМДЛП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется запись состава транспортных упаковок;
//  Объект - ДанныеФормыСтруктура - данные формы, из которых получаются изменения состава транспортных упаковок;
//  ИмяТабличнойЧасти - Строка - имя табличной части, из которой получаются изменения состава транспортных упаковок;
//  СтандартнаяОбработка - Булево - признак необходимости выполнения стандартных действий при записи изменений состава транспортных упаковок;
//
Процедура ЗаписатьРезультатПолученияСоставаТранспортныхУпаковок(Форма, Объект, ИмяТабличнойЧасти, СтандартнаяОбработка) Экспорт
	
	// БольничнаяАптека
	ДанныеУпаковок = Объект[ИмяТабличнойЧасти].Выгрузить(Новый Структура("ИзмененыДанныеНоменклатуры", Истина));
	Если ДанныеУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.УпаковкиМаркируемогоТовара.ЗарегистрироватьУпаковкиМаркируемогоТовара(ДанныеУпаковок);
	// Конец БольничнаяАптека
	
КонецПроцедуры

#КонецОбласти // ПолучениеСоставаТранспортныхУпаковок