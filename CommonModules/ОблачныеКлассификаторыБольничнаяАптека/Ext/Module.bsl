
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Для вызова из других подсистем
#Область ДляВызоваИзДругихПодсистем

#Область КлассификаторТНВЭД

// Определение загруженных элементов ТНВЭД
// Процедура используется в форме онлайн-подбора элементов классификатора ТН ВЭД
// для установки отметок у имеющихся в базе элементов (в режиме загрузки элементов),
// а также при обновлении классификатора и в других служебных методах.
//
// Параметры:
//  Элементы - Массив - коды имеющихся в базе элементов классификатора. Элементы массива должны иметь тип Строка.
//                      Допустимо передавать коды в формате с пробелами так, как они указываются в классификаторе
//                      ("ХХХХ ХХ ХХХ Х" - 13 символов) или без ("ХХХХХХХХХХ" - 10 символов).
//
Процедура ОпределитьЗагруженныеЭлементыТНВЭД(Элементы) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Классификатор.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК Классификатор
	|");
	
	Элементы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
КонецПроцедуры

// Создание или обновление элементов ТНВЭД
//
// Параметры:
//  ДанныеСервиса - ТаблицаЗначений - данные, полученные из сервиса. Колонки:
//                    * Идентификатор           - Число  - идентификатор элемента на стороне сервиса (служебное);
//                    * Код                     - Строка - код элемента классификатора в формате "ХХХХ ХХ ХХХ Х";
//                    * КодРодителя             - Строка - код элемента, являющегося родителем, в формате с пробелами;
//                    * Порядок                 - Число  - поле для упорядочивания элементов (служебное);
//                    * ДатаНачалаДействия      - Дата   - дата начала действия элемента классификатора;
//                    * ДатаОкончанияДействия   - Дата   - дата окончания действия элемента классификатора;
//                    * Наименование            - Строка - наименование элемента;
//                    * НаименованиеПолное      - Строка - наименование элемента, включающее наименования родителей;
//                    * Описание                - Строка - описание элемента;
//                    * КодОКЕИ                 - Строка - код элемента справочника ОКЕИ;
//                    * Сырьевой                - Булево - признак, указывающий на принадлежность товаров к сырьевым;
//                    * ТаможеннаяПошлина       - Строка - ставка таможенной пошлины и дополнительная информация;
//                    * СтавкаНДС               - Строка - ставка НДС;
//                    * ПодлежитУтилизации      - Булево - признак, указывающий на необходимость утилизации товаров;
//                    * ИзменениеСоставаТоваров - Булево - признак, указывающий на изменение состава товаров,
//                                                         относящихся к элементу;
//  Отказ - Булево - если Истина, обновление будет считаться неуспешным.
//
Процедура СоздатьОбновитьЭлементыТНВЭД(ДанныеСервиса, Отказ) Экспорт
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТНВЭД();
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого ЭлементДанных Из ДанныеСервиса Цикл
		
		Идентификатор  = СтрЗаменить(ЭлементДанных.Код, " ", "");
		
		ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементДанных);
		
		ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
		
		// Все данные передаются в исходных данных. Дополнительно из сервиса загружать данные не нужно.
		УстановитьПризнак_ЗагружатьДанные(ДанныеКлассификатора, Ложь);
		УстановитьПризнак_ДанныеЗагружены(ДанныеКлассификатора, Истина);
		
		ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
		ЗагрузитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КлассификаторОКПД2

// Определение загруженных элементов ОКПД 2
// Процедура заполняет переданный параметр массивом кодов классификатора, имеющихся в базе.
// Используется в форме онлайн-подбора элементов классификатора 
// для установки отметок у имеющихся в базе элементов (в режиме загрузки элементов),
// а также при обновлении классификатора и в других служебных методах.
//
// Параметры:
//  ЭлементыКлассификатора - Массив - коды имеющихся в базе элементов классификатора. 
//        Элементы массива должны иметь тип Строка(12).
//          Форматы кодов:
//          А - Раздел;
//          ХХ - Класс;
//          ХХ.Х - Подкласс;
//          ХХ.ХХ - Группа;
//          ХХ.ХХ.Х - Подгруппа;
//          ХХ.ХХ.ХХ - Вид;
//          ХХ.ХХ.ХХ.ХХ0 - Категория;
//          ХХ.ХХ.ХХ.ХХХ - Подкатегория;
//          где Х - цифры от 0 до 9; А - буква от А до Я
//
Процедура ОпределитьЗагруженныеЭлементыОКПД2(ЭлементыКлассификатора) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Классификатор.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторОКПД2 КАК Классификатор
	|ГДЕ
	|	Классификатор.Код <> """"
	|");
	
	ЭлементыКлассификатора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
КонецПроцедуры

// Создание или обновление элементов классификатора ОКПД 2
//
// Параметры:
//  ДанныеСервиса - ТаблицаЗначений - данные, полученные из сервиса. Колонки:
//        * Идентификатор           - Число(12.0) - идентификатор элемента на стороне сервиса (служебное);
//        * Код                     - Строка(12)  - код элемента классификатора;
//        * КодРодителя             - Строка(12)  - код родителя элементов;
//        * Порядок                 - Число(14.0) - поле для упорядочивания элементов (служебное);
//        * ДатаНачалаДействия      - Дата   	  - дата начала действия элемента классификатора;
//        * ДатаОкончанияДействия   - Дата   	  - дата окончания действия элемента классификатора;
//        * Наименование            - Строка(500) - наименование элемента;
//        * Описание                - Строка(0)   - описание элемента;
//        * КодОКЕИ                 - Строка(4)   - код элемента справочника ОКЕИ;
//  Отказ - Булево - если Истина, обновление будет считаться не успешным.
//
Процедура СоздатьОбновитьЭлементыОКПД2(ДанныеСервиса, Отказ) Экспорт
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2();
	
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого ЭлементДанных Из ДанныеСервиса Цикл
		
		Если ЭлементДанных.ДатаНачалаДействия > ТекущаяДата
		 Или ЗначениеЗаполнено(ЭлементДанных.ДатаОкончанияДействия)
		   И ЭлементДанных.ДатаОкончанияДействия <= ТекущаяДата Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор  = ЭлементДанных.Код;
		
		ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементДанных);
		
		ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
		
		// Все данные передаются в исходных данных. Дополнительно из сервиса загружать данные не нужно.
		УстановитьПризнак_ЗагружатьДанные(ДанныеКлассификатора, Ложь);
		УстановитьПризнак_ДанныеЗагружены(ДанныеКлассификатора, Истина);
		
		ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
		ЗагрузитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ДляВызоваИзДругихПодсистем

Процедура ПолучитьКлассификаторы(ЗагружаемыеКлассификаторы) Экспорт
	
	КлассификаторТНВЭД                        = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТНВЭД());
	КлассификаторОКПД2                        = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2());
	КлассификаторГРП                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГРП());
	КлассификаторФТГ                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФТГ());
	КлассификаторГруппыЛекарственныхФорм      = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГруппыЛекарственныхФорм());
	КлассификаторЛекарственныеФормы           = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЛекарственныеФормы());
	КлассификаторАТХ                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ());
	КлассификаторДВЛП                         = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ДВЛП());
	КлассификаторЕдиницыИзмерения             = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмерения());
	КлассификаторЕдиницыИзмеренияДозировки    = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмеренияДозировки());
	КлассификаторМНН                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_МНН());
	КлассификаторТорговыеНаименования         = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТорговыеНаименования());
	КлассификаторФормВыпуска                  = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФормыВыпуска());
	КлассификаторУпаковкиЛекарственныхСредств = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_УпаковкиЛекарственныхСредств());
	КлассификаторУпаковки                     = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Упаковки());
	КлассификаторПроизводители                = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Производители());
	КлассификаторСМНН                         = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_СМНН());
	КлассификаторКЛП                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_КЛП());
	
	Если ЗначениеЗаполнено(КлассификаторТНВЭД) Тогда
		ПолучитьКлассификаторТНВЭД(КлассификаторТНВЭД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторОКПД2) Тогда
		ПолучитьКлассификаторОКПД2(КлассификаторОКПД2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторГРП) Тогда
		ПолучитьКлассификаторГРП(КлассификаторГРП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторФТГ) Тогда
		ПолучитьКлассификаторФТГ(КлассификаторФТГ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторГруппыЛекарственныхФорм) Тогда
		ПолучитьКлассификаторГруппыЛекарственныхФорм(КлассификаторГруппыЛекарственныхФорм);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЛекарственныеФормы) Тогда
		ПолучитьКлассификаторЛекарственныеФормы(КлассификаторЛекарственныеФормы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторАТХ) Тогда
		ПолучитьКлассификаторАТХ(КлассификаторАТХ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторДВЛП) Тогда
		ПолучитьКлассификаторДВЛП(КлассификаторДВЛП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЕдиницыИзмерения) Тогда
		ПолучитьКлассификаторЕдиницыИзмерения(КлассификаторЕдиницыИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЕдиницыИзмеренияДозировки) Тогда
		ПолучитьКлассификаторЕдиницыИзмеренияДозировки(КлассификаторЕдиницыИзмеренияДозировки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторМНН) Тогда
		ПолучитьКлассификаторМНН(КлассификаторМНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторФормВыпуска) Тогда
		ПолучитьКлассификаторФормыВыпуска(КлассификаторФормВыпуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторУпаковкиЛекарственныхСредств) Тогда
		ПолучитьКлассификаторУпаковкиЛекарственныхСредств(КлассификаторУпаковкиЛекарственныхСредств);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторУпаковки) Тогда
		ПолучитьКлассификаторУпаковки(КлассификаторУпаковки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторПроизводители) Тогда
		ПолучитьКлассификаторПроизводители(КлассификаторПроизводители);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторСМНН) Тогда
		ПолучитьКлассификаторСМНН(КлассификаторСМНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторТорговыеНаименования) Тогда
		ПолучитьКлассификаторТорговыеНаименования(КлассификаторТорговыеНаименования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторКЛП) Тогда
		ПолучитьКлассификаторКЛП(КлассификаторКЛП);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает данные набора классификаторов, объединенных по имени.
//
// Параметры:
//  ЗагружаемыеКлассификаторы - Соответствие - ключем которой является имя классификатора,
//    Значение - Соответствие - ключем которого является код классификатора,
//      Значение - Структура - новые данные классификатора.
//  ОбновлятьДанные - Булево - признак необходимости обновления данных классификатора новыми данными.
//
Процедура ЗагрузитьКлассификаторы(ЗагружаемыеКлассификаторы) Экспорт
	
	КлассификаторТНВЭД                        = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТНВЭД());
	КлассификаторОКПД2                        = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2());
	КлассификаторГРП                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГРП());
	КлассификаторФТГ                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФТГ());
	КлассификаторГруппыЛекарственныхФорм      = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГруппыЛекарственныхФорм());
	КлассификаторЛекарственныеФормы           = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЛекарственныеФормы());
	КлассификаторАТХ                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ());
	КлассификаторДВЛП                         = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ДВЛП());
	КлассификаторЕдиницыИзмерения             = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмерения());
	КлассификаторЕдиницыИзмеренияДозировки    = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмеренияДозировки());
	КлассификаторМНН                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_МНН());
	КлассификаторТорговыеНаименования         = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТорговыеНаименования());
	КлассификаторФормВыпуска                  = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФормыВыпуска());
	КлассификаторУпаковкиЛекарственныхСредств = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_УпаковкиЛекарственныхСредств());
	КлассификаторУпаковки                     = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Упаковки());
	КлассификаторПроизводители                = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Производители());
	КлассификаторСМНН                         = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_СМНН());
	КлассификаторКЛП                          = ЗагружаемыеКлассификаторы.Получить(ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_КЛП());
	
	Если ЗначениеЗаполнено(КлассификаторТНВЭД) Тогда
		ЗагрузитьКлассификаторТНВЭД(КлассификаторТНВЭД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторОКПД2) Тогда
		ЗагрузитьКлассификаторОКПД2(КлассификаторОКПД2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторГРП) Тогда
		ЗагрузитьКлассификаторГРП(КлассификаторГРП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторФТГ) Тогда
		ЗагрузитьКлассификаторФТГ(КлассификаторФТГ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторГруппыЛекарственныхФорм) Тогда
		ЗагрузитьКлассификаторГруппыЛекарственныхФорм(КлассификаторГруппыЛекарственныхФорм);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЛекарственныеФормы) Тогда
		ЗагрузитьКлассификаторЛекарственныеФормы(КлассификаторЛекарственныеФормы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторАТХ) Тогда
		ЗагрузитьКлассификаторАТХ(КлассификаторАТХ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторДВЛП) Тогда
		ЗагрузитьКлассификаторДВЛП(КлассификаторДВЛП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЕдиницыИзмерения) Тогда
		ЗагрузитьКлассификаторЕдиницыИзмерения(КлассификаторЕдиницыИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторЕдиницыИзмеренияДозировки) Тогда
		ЗагрузитьКлассификаторЕдиницыИзмеренияДозировки(КлассификаторЕдиницыИзмеренияДозировки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторМНН) Тогда
		ЗагрузитьКлассификаторМНН(КлассификаторМНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторФормВыпуска) Тогда
		ЗагрузитьКлассификаторФормыВыпуска(КлассификаторФормВыпуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторУпаковкиЛекарственныхСредств) Тогда
		ЗагрузитьКлассификаторУпаковкиЛекарственныхСредств(КлассификаторУпаковкиЛекарственныхСредств);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторУпаковки) Тогда
		ЗагрузитьКлассификаторУпаковки(КлассификаторУпаковки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторПроизводители) Тогда
		ЗагрузитьКлассификаторПроизводители(КлассификаторПроизводители);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторСМНН) Тогда
		ЗагрузитьКлассификаторСМНН(КлассификаторСМНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторТорговыеНаименования) Тогда
		ЗагрузитьКлассификаторТорговыеНаименования(КлассификаторТорговыеНаименования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлассификаторКЛП) Тогда
		ЗагрузитьКлассификаторКЛП(КлассификаторКЛП);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Классификатор ТНВЭД
#Область КлассификаторТНВЭД_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторТНВЭД(Классификатор)
	
	ПолучитьДанныеИзСервисаТНВЭД(Классификатор);
	КонвертироватьИсходныеДанныеТНВЭД(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьДанныеИзСервисаТНВЭД(Классификатор)
	
	Попытка
		
		Идентификаторы = Новый Массив;
		Для Каждого КлючИЗначение Из Классификатор Цикл
			
			Идентификатор = КлючИЗначение.Ключ;
			ДанныеОбъекта = КлючИЗначение.Значение;
			
			Если Не НужноЗагружатьДанные(ДанныеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
			
			Идентификаторы.Добавить(Идентификатор);
			
		КонецЦикла;
		
		Если Идентификаторы.Количество() > 0 Тогда
			ДанныеСервиса = ПолучитьДанныеКлассификатораТНВЭД(Идентификаторы);
			Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось получить данные классификатора из сервиса.'");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Классификатор Цикл
			
			Идентификатор = КлючИЗначение.Ключ;
			ДанныеОбъекта = КлючИЗначение.Значение;
			
			Если Не НужноЗагружатьДанные(ДанныеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеИсходныеДанные = Неопределено;
			Для Каждого ЭлементДанных Из ДанныеСервиса Цикл
				Если СтрЗаменить(КлючИЗначение.Ключ, " ", "") = СтрЗаменить(ЭлементДанных.Код, " ", "") Тогда
					НовыеИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементДанных);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НовыеИсходныеДанные <> Неопределено Тогда
				
				ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
				
				ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, НовыеИсходныеДанные);
				
				ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемогоКлассификатора(Классификатор, ДанныеКлассификатора);
				
				УстановитьПризнак_ДанныеЗагружены(ДанныеОбъекта, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Получение данных классификатора %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСобытия, ИмяКлассификатора);
		
		Текст = НСтр("ru = 'Не удалось получить данные классификатора %1 по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКлассификатора);
		Текст = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуВЖурналРегистрации(Текст, ИмяСобытия);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДанныеКлассификатораТНВЭД(КодыКлассификатора) Экспорт
	
	// Нормализация формата кодов (приведение к виду "ХХХХ ХХ ХХХ Х") и запись их в соответствие
	КодыИмеющихсяЭлементов = ПолучитьНормализованныеКодыЭлементовТНВЭД(КодыКлассификатора);
	
	// Получение обновлений
	Отказ = Ложь;
	МассивПараметров = Новый Массив;
	ТекущийПараметр = "";
	КоличествоЭлементов = 0;
	
	Для Каждого ИмеющийсяКод Из КодыИмеющихсяЭлементов Цикл
		
		ТекущийПараметр = ?(ПустаяСтрока(ТекущийПараметр), "", ТекущийПараметр + ",") + ИмеющийсяКод.Ключ;
		
		КоличествоЭлементов = КоличествоЭлементов + 1;
		
		Если КоличествоЭлементов = 100 Тогда // Максимальный размер разовой выборки из сервиса
			МассивПараметров.Добавить(ТекущийПараметр);
			ТекущийПараметр = "";
			КоличествоЭлементов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекущийПараметр) Тогда
		МассивПараметров.Добавить(ТекущийПараметр);
	КонецЕсли;
	
	ДанныеОбновления = Неопределено;
	
	Для Каждого ПараметрКоды Из МассивПараметров Цикл
		
		// Получение данных элементов
		ОписаниеПараметровЗапроса            = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаЭлементыТНВЭД();
		ОписаниеПараметровЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
		ОписаниеПараметровЗапроса.Коды       = ПараметрКоды;
		
		ПараметрыКоманды = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаЭлементыТНВЭД(ОписаниеПараметровЗапроса);
		ДанныеСервиса    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат ДанныеОбновления;
		КонецЕсли;
		
		Если ДанныеОбновления = Неопределено Тогда
			ДанныеОбновления = ДанныеСервиса.СкопироватьКолонки();
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДанныеСервиса Цикл
			Если КодыИмеющихсяЭлементов[СтрокаТаблицы.Код] <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеОбновления.Добавить(), СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОбновления;
	
КонецФункции

Функция ПолучитьНормализованныеКодыЭлементовТНВЭД(Коды)
	
	НормализованныеКоды = Новый Соответствие;
	
	Для Каждого Код Из Коды Цикл
		НормализоватьКодЭлементаТНВЭД(Код);
		НормализованныеКоды.Вставить(Код, Истина);
	КонецЦикла;
	
	Возврат НормализованныеКоды;
	
КонецФункции

Процедура НормализоватьКодЭлементаТНВЭД(Код) Экспорт
	
	Код = СокрЛП(Код);
	
	Если Не СтрНайти(Код, " ") Тогда
		
		Если СтрДлина(Код) > 4 Тогда
			Код = Лев(Код, 4) + " " + Сред(Код, 5, СтрДлина(Код));   // ХХХХХ -> ХХХХ Х
		КонецЕсли;
		
		Если СтрДлина(Код) > 7 Тогда
			Код = Лев(Код, 7) + " " + Сред(Код, 8, СтрДлина(Код));   // ХХХХ ХХХ -> ХХХХ ХХ Х
		КонецЕсли;
		
		Если СтрДлина(Код) > 11 Тогда
			Код = Лев(Код, 11) + " " + Сред(Код, 12, СтрДлина(Код)); // ХХХХ ХХ ХХХХ -> ХХХХ ХХ ХХХ Х
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеТНВЭД(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Код"                  , СтрЗаменить(ДанныеОбъекта.ИсходныеДанные.Получить("Код"), " ", ""));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"         , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"   , ДанныеОбъекта.ИсходныеДанные.Получить("НаименованиеПолное"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаОкончанияДействия", ДанныеОбъекта.ИсходныеДанные.Получить("ДатаОкончанияДействия"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторТНВЭД(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуТНВЭД(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуТНВЭД(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(13));
	ТаблицаПоиска.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.Код = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Код");;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	ТаблицаПоиска.Код            КАК Код
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                           КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.КлассификаторТНВЭД КАК Классификатор
	|		ПО
	|			Классификатор.Код = ТаблицаПоиска.Код
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторТНВЭД_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ОКПД2
#Область КлассификаторОКПД2_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторОКПД2(Классификатор)
	
	ПолучитьДанныеИзСервисаОКПД2(Классификатор);
	КонвертироватьИсходныеДанныеОКПД2(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьДанныеИзСервисаОКПД2(Классификатор)
	
	Попытка
		
		Идентификаторы = Новый Массив;
		Для Каждого КлючИЗначение Из Классификатор Цикл
			
			Идентификатор = КлючИЗначение.Ключ;
			ДанныеОбъекта = КлючИЗначение.Значение;
			
			Если Не НужноЗагружатьДанные(ДанныеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
			
			Идентификаторы.Добавить(Идентификатор);
			
		КонецЦикла;
		
		Если Идентификаторы.Количество() > 0 Тогда
			ДанныеСервиса = ПолучитьДанныеКлассификатораОКПД2(Идентификаторы);
			Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось получить данные классификатора из сервиса.'");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Классификатор Цикл
			
			Идентификатор = КлючИЗначение.Ключ;
			ДанныеОбъекта = КлючИЗначение.Значение;
			
			Если Не НужноЗагружатьДанные(ДанныеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеИсходныеДанные = Неопределено;
			Для Каждого ЭлементДанных Из ДанныеСервиса Цикл
				Если КлючИЗначение.Ключ = СтрЗаменить(ЭлементДанных.Код, " ", "") Тогда
					НовыеИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементДанных);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НовыеИсходныеДанные <> Неопределено Тогда
				
				ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
				
				ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, НовыеИсходныеДанные);
				
				ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемогоКлассификатора(Классификатор, ДанныеКлассификатора);
				
				УстановитьПризнак_ДанныеЗагружены(ДанныеОбъекта, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Получение данных классификатора %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСобытия, ИмяКлассификатора);
		
		Текст = НСтр("ru = 'Не удалось получить данные классификатора %1 по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКлассификатора);
		Текст = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуВЖурналРегистрации(Текст, ИмяСобытия);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДанныеКлассификатораОКПД2(КодыКлассификатора)
	
	Отказ = Ложь;
	
	ДанныеСервиса = ОблачныеКлассификаторыСлужебный.ОписаниеЭлементовОКПД2();
	
	Если КодыКлассификатора.Количество() = 0 Тогда
		Возврат ДанныеСервиса;
	КонецЕсли;
	
	МаксимальноеКоличествоКодов = КоличествоКодовВСтрокеПараметров();
	МассивПараметров = Новый Массив;
	СтрокаПараметров = "";
	Для Счетчик = 0 По КодыКлассификатора.Количество() - 1 Цикл
		КодВБазе = КодыКлассификатора[Счетчик];
		
		СтрокаПараметров = ?(ПустаяСтрока(СтрокаПараметров), "", СтрокаПараметров + ",") + КодВБазе;
		
		Если Счетчик%МаксимальноеКоличествоКодов = 0 И Счетчик > 1 Тогда 
			МассивПараметров.Добавить(СтрокаПараметров);
			СтрокаПараметров = "";
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПараметров) Тогда
		МассивПараметров.Добавить(СтрокаПараметров);
	КонецЕсли;
	
	Для Каждого ПараметрКоды Из МассивПараметров Цикл
		ОписаниеПараметровЗапроса                   = ОблачныеКлассификаторыСлужебный.ОписаниеПараметровЗапросаОКПД2();
		ОписаниеПараметровЗапроса.НаборПолей        = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
		ОписаниеПараметровЗапроса.Код               = ПараметрКоды;
		ОписаниеПараметровЗапроса.КоличествоЗаписей = 1000;
		
		ПараметрыКоманды        = ОблачныеКлассификаторыСлужебный.ПараметрыЗапросаЭлементыОКПД2(ОписаниеПараметровЗапроса);
		ДанныеСервисаПодразделы = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если ДанныеСервисаПодразделы = Неопределено Тогда
			Продолжить;
		ИначеЕсли Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого ЭлементКлассификатора Из ДанныеСервисаПодразделы Цикл
			НоваяСтрока = ДанныеСервиса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКлассификатора);
		КонецЦикла;
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru='Ошибка подключения к сервису.'");
	КонецЕсли;
	
	Возврат ДанныеСервиса;
	
КонецФункции

Функция КоличествоКодовВСтрокеПараметров()
	
	Возврат 100;
	
КонецФункции

Процедура КонвертироватьИсходныеДанныеОКПД2(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Код"                  , СтрЗаменить(ДанныеОбъекта.ИсходныеДанные.Получить("Код"), " ", ""));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"   , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Описание"             , ДанныеОбъекта.ИсходныеДанные.Получить("Описание"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаОкончанияДействия", ДанныеОбъекта.ИсходныеДанные.Получить("ДатаОкончанияДействия"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторОКПД2(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуОКПД2(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуОКПД2(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                           КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.КлассификаторОКПД2 КАК Классификатор
	|		ПО
	|			Классификатор.Код = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторОКПД2_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ГРП
#Область КлассификаторГРП_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторГРП(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеГРП(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеГРП(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодготовитьРодителейКЗагрузке_ГРП(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиРодителей_ГРП(ЗагружаемыеДанные, ДанныеОбъекта);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"          , ДанныеОбъекта.ИсходныеДанные.Получить("description"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "УникальныйИдентификаторЕСКЛП", ДанныеОбъекта.ИсходныеДанные.Получить("uuid"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьРодителейКЗагрузке_ГРП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГРП();
	Идентификатор = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("parentUUID");
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("uuid", Идентификатор);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиРодителей_ГРП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГРП();
	Идентификатор = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("parentUUID");
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторГРП(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуГРП(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуГРП(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                        КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ГруппыУзловСМНН.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ГруппыУзловСМНН КАК Классификатор
	|		ПО
	|			Классификатор.УникальныйИдентификаторЕСКЛП = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторГРП_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ФТГ
#Область КлассификаторФТГ_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторФТГ(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеФТГ(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеФТГ(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"          , ДанныеОбъекта.ИсходныеДанные.Получить("code"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное", ДанныеОбъекта.ИсходныеДанные.Получить("description"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторФТГ(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуФТГ(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуФТГ(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаПоиска.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.НаименованиеПолное = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное");
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор       КАК Идентификатор,
	|	ТаблицаПоиска.НаименованиеПолное  КАК НаименованиеПолное
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ ПоискПоИдентификаторам
	|ИЗ
	|	Справочник.ФармакоТерапевтическиеГруппы КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.Идентификатор = Классификатор.КодЕСКЛП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискПоИдентификаторам.Идентификатор КАК Идентификатор,
	|	ПоискПоИдентификаторам.Ссылка        КАК Ссылка
	|ПОМЕСТИТЬ НайденныеДанные
	|ИЗ
	|	ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.ФармакоТерапевтическиеГруппы КАК Классификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.НаименованиеПолное = Классификатор.НаименованиеПолное
	|			И Классификатор.НаименованиеПолное <> """"
	|			И Классификатор.КодЕСКЛП = """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|		ПО
	|			ПоискПоИдентификаторам.Ссылка = Классификатор.Ссылка
	|ГДЕ
	|	ПоискПоИдентификаторам.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                                     КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ФармакоТерапевтическиеГруппы.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НайденныеДанные КАК Классификатор
	|		ПО
	|			Классификатор.Идентификатор = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторФТГ_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ГруппыЛекарственныхФорм
#Область КлассификаторГруппыЛекарственныхФорм_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторГруппыЛекарственныхФорм(Классификатор)
	
	КонвертироватьИсходныеДанныеГруппыЛекарственныхФорм(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеГруппыЛекарственныхФорм(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"      , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное", ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторГруппыЛекарственныхФорм(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуГруппыЛекарственныхФорм(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуГруппыЛекарственныхФорм(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                                КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ГруппыЛекарственныхФорм.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ГруппыЛекарственныхФорм КАК Классификатор
	|		ПО
	|			Классификатор.Наименование = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторГруппыЛекарственныхФорм_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ЛекарственныеФормы
#Область КлассификаторЛекарственныеФормы_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторЛекарственныеФормы(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеЛекарственныеФормы(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеЛекарственныеФормы(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодготовитьГруппыЛекарственныхФормКЗагрузке_ЛекарственныеФормы(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиГруппЛекарственныхФорм_ЛекарственныеФормы(ЗагружаемыеДанные, ДанныеОбъекта);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"    , ДанныеОбъекта.ИсходныеДанные.Получить("code"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование", ДанныеОбъекта.ИсходныеДанные.Получить("nameShort"));
		
		Если Не ЗначениеЗаполнено(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование")) Тогда
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование", ДанныеОбъекта.ИсходныеДанные.Получить("name"));
		КонецЕсли;
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"         , ДанныеОбъекта.ИсходныеДанные.Получить("name"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЛатинскоеНаименование"      , ДанныеОбъекта.ИсходныеДанные.Получить("nameLat"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЛатинскоеНаименованиеПолное", ДанныеОбъекта.ИсходныеДанные.Получить("nameLat"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаИзменения"              , ДанныеОбъекта.ИсходныеДанные.Получить("modified"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СостояниеВещества"          , ДанныеОбъекта.ИсходныеДанные.Получить("stateOfMatter"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ХарактеристикаВысвобождения", ДанныеОбъекта.ИсходныеДанные.Получить("releaseCharacteristic"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьГруппыЛекарственныхФормКЗагрузке_ЛекарственныеФормы(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГруппыЛекарственныхФорм();
	Идентификатор = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("basicDoseForm");
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("Наименование", Идентификатор);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Группа", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиГруппЛекарственныхФорм_ЛекарственныеФормы(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГруппыЛекарственныхФорм();
	Идентификатор = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("basicDoseForm");
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Группа", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторЛекарственныеФормы(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуЛекарственныеФормы(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуЛекарственныеФормы(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор"                   , ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("НаименованиеПолное"              , ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("СопоставлятьТолькоПоНаименованию", Новый ОписаниеТипов("Булево"));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор                    = КлючИЗначение.Ключ;
		СтрокаТаблицы.НаименованиеПолное               = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное");
		СтрокаТаблицы.СопоставлятьТолькоПоНаименованию = Не ЗначениеЗаполнено(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"));
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                     КАК Идентификатор,
	|	ТаблицаПоиска.НаименованиеПолное                КАК НаименованиеПолное,
	|	ТаблицаПоиска.СопоставлятьТолькоПоНаименованию  КАК СопоставлятьТолькоПоНаименованию
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ ПоискПоИдентификаторам
	|ИЗ
	|	Справочник.ЛекарственныеФормы КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.Идентификатор = Классификатор.КодЕСКЛП
	|ГДЕ
	|	НЕ ТаблицаПоиска.СопоставлятьТолькоПоНаименованию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискПоИдентификаторам.Идентификатор КАК Идентификатор,
	|	ПоискПоИдентификаторам.Ссылка        КАК Ссылка
	|ПОМЕСТИТЬ НайденныеДанные
	|ИЗ
	|	ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.ЛекарственныеФормы КАК Классификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.НаименованиеПолное = Классификатор.НаименованиеПолное
	|			И Классификатор.НаименованиеПолное <> """"
	|			И Классификатор.КодЕСКЛП = """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|		ПО
	|			ПоискПоИдентификаторам.Ссылка = Классификатор.Ссылка
	|ГДЕ
	|	ПоискПоИдентификаторам.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                           КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ЛекарственныеФормы.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НайденныеДанные КАК Классификатор
	|		ПО
	|			Классификатор.Идентификатор = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторЛекарственныеФормы_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор АТХ
#Область КлассификаторАТХ_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторАТХ(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеАТХ(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеАТХ(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодготовитьРодителейКЗагрузке_АТХ(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиРодителей_АТХ(ЗагружаемыеДанные, ДанныеОбъекта);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"    , ДанныеОбъекта.ИсходныеДанные.Получить("code"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование", ДанныеОбъекта.ИсходныеДанные.Получить("code") + " " + ДанныеОбъекта.ИсходныеДанные.Получить("description"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьРодителейКЗагрузке_АТХ(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ();
	
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	ДлинаКода = СтрДлина(ИдентификаторВерхнеуровневогоОбъекта);
	Для Номер = 1 По ДлинаКода - 1 Цикл
		
		Идентификатор = Лев(ИдентификаторВерхнеуровневогоОбъекта, ДлинаКода - Номер);
		
		ИсходныеДанные = Новый Соответствие;
		ИсходныеДанные.Вставить("code", Идентификатор);
		
		ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
		
		ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиРодителей_АТХ(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ();
	
	ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель", Неопределено);
	
	ДлинаКода = СтрДлина(ИдентификаторВерхнеуровневогоОбъекта);
	Для Номер = 1 По ДлинаКода - 1 Цикл
		
		Идентификатор = Лев(ИдентификаторВерхнеуровневогоОбъекта, ДлинаКода - Номер);
		
		ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
		Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
			
			// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
			УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
			
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель", ДанныеКлассификатора);
			
			// Ближайший родитель найден. Продолжать не нужно.
			Прервать;
			
		ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
			
			ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
			ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
			ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторАТХ(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуАТХ(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуАТХ(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                         КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.АТХКлассификация.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.АТХКлассификация КАК Классификатор
	|		ПО
	|			Классификатор.КодЕСКЛП = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторАТХ_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ДВЛП
#Область КлассификаторДВЛП_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторДВЛП(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеДВЛП(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеДВЛП(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодготовитьАТХКЗагрузке_ДВЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиАТХ_ДВЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"                             , ДанныеОбъекта.ИсходныеДанные.Получить("code"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"                         , ДанныеОбъекта.ИсходныеДанные.Получить("name"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"                   , ДанныеОбъекта.ИсходныеДанные.Получить("name"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "АнглийскоеНаименование"               , ДанныеОбъекта.ИсходныеДанные.Получить("nameEn"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЛатинскоеНаименование"                , ДанныеОбъекта.ИсходныеДанные.Получить("nameLat"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЛатинскоеНаименованиеРодительныйПадеж", ДанныеОбъекта.ИсходныеДанные.Получить("nameLatGen"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ОтноситсяКМНН"                        , ДанныеОбъекта.ИсходныеДанные.Получить("type") = 1);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппаДействующегоВещества"           , Перечисления.ГруппыДействующегоВещества.Получить(ДанныеОбъекта.ИсходныеДанные.Получить("groupCode") - 1));
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодSNOMED"                            , ДанныеОбъекта.ИсходныеДанные.Получить("sctCode"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаИзменения"                        , ДанныеОбъекта.ИсходныеДанные.Получить("modified"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьАТХКЗагрузке_ДВЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ();
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АТХКлассификация", Новый Массив);
	
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("classifiers");
	Если Классификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИсходныеДанныеВложенногоКлассификатора Из Классификаторы Цикл
		
		Если ИсходныеДанныеВложенногоКлассификатора.Получить("name") = ИмяКлассификатора Тогда
			
			Идентификатор = ИсходныеДанныеВложенногоКлассификатора.Получить("code");
			
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанныеВложенногоКлассификатора);
			
			АТХКлассификация = ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АТХКлассификация");
			АТХКлассификация.Добавить(Новый Структура("АТХ", ДанныеКлассификатора));
			
			ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиАТХ_ДВЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ();
	
	ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	АТХКлассификация = ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АТХКлассификация");
	Для Каждого СтрокаДанных Из АТХКлассификация Цикл
		
		Для Каждого КлючИЗначение Из СтрокаДанных Цикл
			
			Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(КлючИЗначение.Значение);
			
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
			Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
				
				// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
				УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
				
				// Заменяем данные до конвертирования на данные после конвертирования.
				// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
				// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
				// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
				СтрокаДанных.Вставить(КлючИЗначение.Ключ, ДанныеКлассификатора);
				
			ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
				
				ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
				ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
				ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
				ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторДВЛП(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуДВЛП(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуДВЛП(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(28));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                             КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ДВЛП.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ДВЛП КАК Классификатор
	|		ПО
	|			Классификатор.КодЕСКЛП = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторДВЛП_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ЕдиницыИзмерения
#Область КлассификаторЕдиницыИзмерения_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторЕдиницыИзмерения(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеЕдиницыИзмерения(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеЕдиницыИзмерения(Классификатор)
	
	ДоступныеТипыЕдиницИзмерения = ДоступныеТипыЕдиницИзмерения();
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ТипИзмеряемойВеличины                    = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("type"));
		КодОКЕИ                                  = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("okei"));
		НаименованиеПолное                       = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("name"));
		УсловноеОбозначениеНациональное          = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("nationalSymbol"));
		УсловноеОбозначениеМеждународное         = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("internationalSymbol"));
		КодовоеБуквенноеОбозначениеНациональное  = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("nationalCodeMark"));
		КодовоеБуквенноеОбозначениеМеждународное = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("internationalCodeMark"));
		Числитель                                = ДанныеОбъекта.ИсходныеДанные.Получить("baseUnitCount");
		Знаменатель                              = ДанныеОбъекта.ИсходныеДанные.Получить("unitCount");
		
		// Тип единицы
		ТипЕдиницы = ТипЕдиницыИзмеренияПоТипуИзмеряемыйВеличины(ДоступныеТипыЕдиницИзмерения, ТипИзмеряемойВеличины);
		
		ЭтоДозы  = КодОКЕИ = "639";
		ЭтоШтуки = КодОКЕИ = "796";
		ЭтоТысячяШтук = КодОКЕИ = "798";
		
		Если Не ЗначениеЗаполнено(ТипЕдиницы) Или ЭтоДозы Или ЭтоШтуки Или ЭтоТысячяШтук Тогда
			
			Если ЭтоДозы Тогда
				ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияДоз();
			ИначеЕсли ЭтоШтуки Тогда
				ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
			ИначеЕсли ЭтоТысячяШтук Тогда
				ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
				УстановитьДополнительныеПараметрыДанныхКлассификатора(ДанныеОбъекта, "ЧислительКоэффициентаУпаковки", 1000);
			Иначе
				// Неизвестный тип приводим к штукам и изменяем коэффициент первичной упаковки.
				ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
				УстановитьДополнительныеПараметрыДанныхКлассификатора(ДанныеОбъекта, "КоэффициентУпаковки", 1);
			КонецЕсли;
			
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", ЕдиницаИзмерения);
			
			УстановитьПризнак_СопоставлятьДанные(ДанныеОбъекта, Ложь);
			УстановитьПризнак_ДанныеСопоставлены(ДанныеОбъекта, Истина);
			УстановитьПризнак_ЗаписыватьДанные(ДанныеОбъекта, Ложь);
			УстановитьПризнак_ДанныеЗаписаны(ДанныеОбъекта, Истина);
			УстановитьПризнак_ДанныеМодифицированы(ДанныеОбъекта, Ложь);
			
			Продолжить;
			
		КонецЕсли;
		
		// Наименование
		Если ЗначениеЗаполнено(УсловноеОбозначениеНациональное) Тогда
			Наименование = УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(УсловноеОбозначениеМеждународное) Тогда
			Наименование = УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = НаименованиеПолное;
		КонецЕсли;
		
		// Коэффициент
		Коэффициент = 0;
		Если ЗначениеЗаполнено(Числитель) И ЗначениеЗаполнено(Знаменатель) Тогда
			Множитель = 1;
			Если ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
				Множитель = 1000;
			ИначеЕсли ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
				Множитель = 1000;
			КонецЕсли;
			Коэффициент = Множитель * Числитель / Знаменатель;
		КонецЕсли;
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"           , Наименование);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"     , НаименованиеПолное);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "МеждународноеСокращение", УсловноеОбозначениеМеждународное);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ТипЕдиницы"             , ТипЕдиницы);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодОКЕИ"                , КодОКЕИ);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Коэффициент"            , Коэффициент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторЕдиницыИзмерения(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуЕдиницыИзмерения(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуЕдиницыИзмерения(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(4));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                         КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ЕдиницыИзмерения КАК Классификатор
	|		ПО
	|			Классификатор.КодОКЕИ = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторЕдиницыИзмерения_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ЕдиницыИзмеренияДозировки
#Область КлассификаторЕдиницыИзмеренияДозировки_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторЕдиницыИзмеренияДозировки(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеЕдиницыИзмеренияДозировки(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеЕдиницыИзмеренияДозировки(Классификатор)
	
	ДоступныеТипыЕдиницИзмерения = ДоступныеТипыЕдиницИзмерения();
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		КодОКЕИ                                  = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("okei"));
		ТипИзмеряемойВеличины                    = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("type"));
		НаименованиеПолное                       = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("name"));
		УсловноеОбозначениеНациональное          = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("nationalSymbol"));
		УсловноеОбозначениеМеждународное         = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("internationalSymbol"));
		КодовоеБуквенноеОбозначениеНациональное  = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("nationalCodeMark"));
		КодовоеБуквенноеОбозначениеМеждународное = СокрЛП(ДанныеОбъекта.ИсходныеДанные.Получить("internationalCodeMark"));
		Числитель                                = ДанныеОбъекта.ИсходныеДанные.Получить("baseUnitCount");
		Знаменатель                              = ДанныеОбъекта.ИсходныеДанные.Получить("unitCount");
		
		ЭтоДозы  = КодОКЕИ = "639";
		ЭтоШтуки = КодОКЕИ = "796";
		ЭтоЕдиницаДействия = СтрДлина(КодОКЕИ) = 4;
		
		Если ЭтоДозы Или ЭтоШтуки Тогда
			
			Если ЭтоДозы Тогда
				ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияДоз();
			Иначе
				ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
			КонецЕсли;
			
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", ЕдиницаИзмерения);
			
			УстановитьПризнак_СопоставлятьДанные(ДанныеОбъекта, Ложь);
			УстановитьПризнак_ДанныеСопоставлены(ДанныеОбъекта, Истина);
			УстановитьПризнак_ЗаписыватьДанные(ДанныеОбъекта, Ложь);
			УстановитьПризнак_ДанныеЗаписаны(ДанныеОбъекта, Истина);
			УстановитьПризнак_ДанныеМодифицированы(ДанныеОбъекта, Ложь);
			
			Продолжить;
			
		ИначеЕсли ЭтоЕдиницаДействия Тогда
			ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.ЕдиницаДействия;
		Иначе
			ТипЕдиницы = ТипЕдиницыИзмеренияПоТипуИзмеряемыйВеличины(ДоступныеТипыЕдиницИзмерения, ТипИзмеряемойВеличины);;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипЕдиницы) Тогда
			ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.ПустаяСсылка();
		КонецЕсли;
		
		// Наименование
		Если ЗначениеЗаполнено(УсловноеОбозначениеНациональное) Тогда
			Наименование = УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(УсловноеОбозначениеМеждународное) Тогда
			Наименование = УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = НаименованиеПолное;
		КонецЕсли;
		
		// Коэффициент
		Коэффициент = 0;
		Если ЗначениеЗаполнено(Знаменатель) Тогда
			Множитель = 1;
			Если ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
				Множитель = 1000;
			ИначеЕсли ТипЕдиницы = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
				Множитель = 1000;
			КонецЕсли;
			Коэффициент = Множитель * Числитель / Знаменатель;
		КонецЕсли;
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"           , Наименование);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"     , НаименованиеПолное);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "МеждународноеСокращение", УсловноеОбозначениеМеждународное);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ТипЕдиницы"             , ТипЕдиницы);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодОКЕИ"                , КодОКЕИ);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Коэффициент"            , Коэффициент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторЕдиницыИзмеренияДозировки(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуЕдиницыИзмеренияДозировки(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуЕдиницыИзмеренияДозировки(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор"     , ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("Наименование"      , ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПоиска.Колонки.Добавить("ТипЕдиницы"        , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЕдиницИзмерения"));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор      = КлючИЗначение.Ключ;
		СтрокаТаблицы.НаименованиеПолное = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное");
		СтрокаТаблицы.Наименование       = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование");
		СтрокаТаблицы.ТипЕдиницы         = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ТипЕдиницы");
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор       КАК Идентификатор,
	|	ТаблицаПоиска.НаименованиеПолное  КАК НаименованиеПолное,
	|	ТаблицаПоиска.Наименование        КАК Наименование,
	|	ТаблицаПоиска.ТипЕдиницы          КАК ТипЕдиницы
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ НайденныеДанные
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.ТипЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Концентрация)
	|			И ТаблицаПоиска.Идентификатор = Классификатор.КодОКЕИ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Концентрация)
	|			И ТаблицаПоиска.НаименованиеПолное = Классификатор.НаименованиеПолное
	|			И ТаблицаПоиска.Наименование = Классификатор.Наименование
	|			И Классификатор.МеждународноеСокращение = """"
	|			И Классификатор.КодОКЕИ = """"
	|			И Классификатор.Коэффициент = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                         КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НайденныеДанные КАК Классификатор
	|		ПО
	|			Классификатор.Идентификатор = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторЕдиницыИзмеренияДозировки_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор МНН
#Область КлассификаторМНН_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторМНН(Классификатор)
	
	КонвертироватьИсходныеДанныеМНН(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеМНН(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		ПодготовитьДВЛПКЗагрузке_МНН(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиДВЛП_МНН(ЗагружаемыеДанные, ДанныеОбъекта);
		
		АнглийскоеНаименование = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "АнглийскоеНаименование");
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеЕСКЛП" , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"      , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное", ДанныеОбъекта.ИсходныеДанные.Получить("Наименование")
			+ ?(ЗначениеЗаполнено(АнглийскоеНаименование), " (" + АнглийскоеНаименование + ")", ""));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДВЛПКЗагрузке_МНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ДВЛП();
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВещества", Новый Массив);
	
	ИсходныеДанныеДействующихВеществ = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДействующиеВещества");
	Если Не ЗначениеЗаполнено(ИсходныеДанныеДействующихВеществ) Тогда
		// ДВЛП может не быть у МНН. Например, у препарата с МНН "Экстракт ромашки" не будет действующих веществ.
		Возврат;
	КонецЕсли;
	
	Для Каждого ИсходныеДанные Из ИсходныеДанныеДействующихВеществ Цикл
		
		Идентификатор = ИсходныеДанные.Получить("code");
		
		ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
		
		ДействующиеВещества = ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВещества");
		ДействующиеВещества.Добавить(Новый Структура("ДействующееВещество", ДанныеКлассификатора));
		
		ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиДВЛП_МНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ДВЛП();
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АнглийскоеНаименование", "");
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛатинскоеНаименование" , "");
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛатинскоеНаименованиеРодительныйПадеж" , "");
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ОтноситсяКМНН"         , Ложь);
	
	ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	ДанныеДействующихВеществ = Новый Структура("ЧастиАнглийскогоНаименования, ЧастиЛатинскогоНаименования, ЧастиЛатинскогоНаименованияРодительныйПадеж, ОтноситсяКМНН", Новый Массив, Новый Массив, Новый Массив, Ложь);
	
	ДействующиеВещества = ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВещества");
	Для Каждого СтрокаДанных Из ДействующиеВещества Цикл
		
		Для Каждого КлючИЗначение Из СтрокаДанных Цикл
			
			Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(КлючИЗначение.Значение);
			
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
			Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
				
				// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
				УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
				
				// Заменяем данные до конвертирования на данные после конвертирования.
				// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
				// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
				// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
				СтрокаДанных.Вставить(КлючИЗначение.Ключ, ДанныеКлассификатора);
				
				// Расчет значений верхнеуровневого объекта, по данным текущего объекта.
				ЧастьАнглийскогоНаименования = ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "АнглийскоеНаименование");
				Если ЗначениеЗаполнено(ЧастьАнглийскогоНаименования) Тогда
					ДанныеДействующихВеществ.ЧастиАнглийскогоНаименования.Добавить(ЧастьАнглийскогоНаименования);
				КонецЕсли;
				
				ЧастьЛатинскогоНаименования = ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ЛатинскоеНаименование");
				Если ЗначениеЗаполнено(ЧастьЛатинскогоНаименования) Тогда
					ДанныеДействующихВеществ.ЧастиЛатинскогоНаименования.Добавить(ЧастьЛатинскогоНаименования);
				КонецЕсли;
				
				ЧастьЛатинскогоНаименованияРодительныйПадеж = ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ЛатинскоеНаименованиеРодительныйПадеж");
				Если ЗначениеЗаполнено(ЧастьЛатинскогоНаименованияРодительныйПадеж) Тогда
					ДанныеДействующихВеществ.ЧастиЛатинскогоНаименованияРодительныйПадеж.Добавить(ЧастьЛатинскогоНаименованияРодительныйПадеж);
				КонецЕсли;
				
				ДанныеДействующихВеществ.ОтноситсяКМНН = ДанныеДействующихВеществ.ОтноситсяКМНН Или ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ОтноситсяКМНН") = Истина;
				
			ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
				
				ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
				ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
				ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
				ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АнглийскоеНаименование"               , СтрСоединить(ДанныеДействующихВеществ.ЧастиАнглийскогоНаименования, " + "));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛатинскоеНаименование"                , СтрСоединить(ДанныеДействующихВеществ.ЧастиЛатинскогоНаименования, " + "));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛатинскоеНаименованиеРодительныйПадеж", СтрСоединить(ДанныеДействующихВеществ.ЧастиЛатинскогоНаименованияРодительныйПадеж, " + "));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ОтноситсяКМНН"                        , ДанныеДействующихВеществ.ОтноситсяКМНН);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторМНН(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуМНН(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуМНН(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор"     , ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаПоиска.Колонки.Добавить("Наименование"      , ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаПоиска.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор      = Идентификатор;
		СтрокаТаблицы.Наименование       = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование");
		СтрокаТаблицы.НаименованиеПолное = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное");
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор       КАК Идентификатор,
	|	ТаблицаПоиска.Наименование        КАК Наименование,
	|	ТаблицаПоиска.НаименованиеПолное  КАК НаименованиеПолное
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ ПоискПоИдентификаторам
	|ИЗ
	|	Справочник.ДействующиеВеществаМНН КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.Идентификатор = Классификатор.НаименованиеЕСКЛП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ ПоискПоПолнымНаименованиям
	|ИЗ
	|	Справочник.ДействующиеВеществаМНН КАК Классификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.НаименованиеПолное = ВЫРАЗИТЬ(Классификатор.НаименованиеПолное КАК СТРОКА(1000))
	|			И ВЫРАЗИТЬ(Классификатор.НаименованиеПолное КАК СТРОКА(1000)) <> """"
	|			И Классификатор.НаименованиеЕСКЛП = """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|		ПО
	|			ПоискПоИдентификаторам.Ссылка = Классификатор.Ссылка
	|ГДЕ
	|	ПоискПоИдентификаторам.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискПоИдентификаторам.Идентификатор КАК Идентификатор,
	|	ПоискПоИдентификаторам.Ссылка        КАК Ссылка
	|ПОМЕСТИТЬ НайденныеДанные
	|ИЗ
	|	ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоискПоПолнымНаименованиям.Идентификатор КАК Идентификатор,
	|	ПоискПоПолнымНаименованиям.Ссылка        КАК Ссылка
	|ИЗ
	|	ПоискПоПолнымНаименованиям КАК ПоискПоПолнымНаименованиям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.ДействующиеВеществаМНН КАК Классификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.Наименование = Классификатор.Наименование
	|			И Классификатор.Наименование <> """"
	|			И Классификатор.НаименованиеЕСКЛП = """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|		ПО
	|			ПоискПоИдентификаторам.Ссылка = Классификатор.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоПолнымНаименованиям КАК ПоискПоПолнымНаименованиям
	|		ПО
	|			ПоискПоПолнымНаименованиям.Ссылка = Классификатор.Ссылка
	|ГДЕ
	|	ПоискПоИдентификаторам.Ссылка ЕСТЬ NULL
	|	И ПоискПоПолнымНаименованиям.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                               КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НайденныеДанные КАК Классификатор
	|		ПО
	|			Классификатор.Идентификатор = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторМНН_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ФормыВыпуска
#Область КлассификаторФормыВыпуска_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторФормыВыпуска(Классификатор)
	
	КонвертироватьИсходныеДанныеФормыВыпуска(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеФормыВыпуска(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		ВыполнитьОбязательныеОбщиеПроверки_ФормыВыпуска(ДанныеОбъекта);
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		ПодготовитьЛекарственныеФормыКЗагрузке_ФормыВыпуска(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьЕдиницыИзмеренияДозировкиКЗагрузке_ФормыВыпуска(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиЛекарственныхФорм_ФормыВыпуска(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиЕдиницИзмеренияДозировки_ФормыВыпуска(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбязательныеОбщиеПроверки_ФормыВыпуска(ДанныеОбъекта)
	
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеОбъекта);
	
	ИсходныеДанные = ДанныеОбъекта.ИсходныеДанные.Получить("ЛекарственнаяФорма");
	Если Не ЗначениеЗаполнено(ИсходныеДанные) Тогда
		ПричинаОтказа = НСтр("ru = 'Для объекта Форма выпуска %1 не удалось получить данные лекарственной формы.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
	ИсходныеДанные = ДанныеОбъекта.ИсходныеДанные.Получить("Дозировка");
	Если Не ЗначениеЗаполнено(ИсходныеДанные) Тогда
		ПричинаОтказа = НСтр("ru = 'Для объекта Форма выпуска %1 не удалось получить данные дозировки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьЛекарственныеФормыКЗагрузке_ФормыВыпуска(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЛекарственныеФормы();
	
	ИсходныеДанные = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ЛекарственнаяФорма");
	
	Идентификатор = СокрЛП(ИсходныеДанные.Получить("code"));
	
	ЛекарственнаяФормаНеИдентифицирована = Не ЗначениеЗаполнено(Идентификатор);
	Если ЛекарственнаяФормаНеИдентифицирована Тогда
		Идентификатор = СокрЛП(ИсходныеДанные.Получить("name"));
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
			ПричинаОтказа = НСтр("ru = 'В объекта Форма выпуска %1 нет данных лекарственной формы.'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
			ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛекарственнаяФорма", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
	Если ЛекарственнаяФормаНеИдентифицирована Тогда
		// Если лекарственная форма не идентифицирована для СМНН, тогда исходные данные загружать не нужно, достаточно тех, которые переданы из СМНН.
		УстановитьПризнак_ЗагружатьДанные(ДанныеКлассификатора, Ложь);
		УстановитьПризнак_ДанныеЗагружены(ДанныеКлассификатора, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьЕдиницыИзмеренияДозировкиКЗагрузке_ФормыВыпуска(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмеренияДозировки();
	
	ИсходныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Дозировка"));
	
	Идентификатор = СокрЛП(ИсходныеДанные.Получить("unitOKEI"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	Если Идентификатор = "876" Тогда
		
		Идентификатор = СокрЛП(ИсходныеДанные.Получить("name"));
		
		КоличествоДействующегоВещества = ИсходныеДанные.Получить("num");
		Если КоличествоДействующегоВещества <> 1 Тогда
			
			// Единица концентрации
			ИсходныеДанные.Вставить("type", "Концентрация");
			
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
			
			УстановитьПризнак_ЗагружатьДанные(ДанныеКлассификатора, Ложь);
			УстановитьПризнак_ДанныеЗагружены(ДанныеКлассификатора, Истина);
			
		Иначе
			
			// Единица размера
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
			
			УстановитьПризнак_ЗагружатьДанные(ДанныеКлассификатора, Ложь);
			УстановитьПризнак_КонвертироватьДанные(ДанныеКлассификатора, Ложь);
			УстановитьПризнак_СопоставлятьДанные(ДанныеКлассификатора, Ложь);
			УстановитьПризнак_ЗаписыватьДанные(ДанныеКлассификатора, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиЛекарственныхФорм_ФормыВыпуска(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЛекарственныеФормы();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛекарственнаяФорма"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЛекарственнаяФорма", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиЕдиницИзмеренияДозировки_ФормыВыпуска(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмеренияДозировки();
	
	ИсходныеДанные = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Дозировка");
	
	Идентификатор = СокрЛП(ИсходныеДанные.Получить("unitOKEI"));
	
	Если Идентификатор = "876" Тогда
		
		Идентификатор = СокрЛП(ИсходныеДанные.Получить("name"));
		
		КоличествоДействующегоВещества = ИсходныеДанные.Получить("num");
		Если КоличествоДействующегоВещества <> 1 Тогда
			
			// Единица концентрации
			ЕдиницаИзмерения        = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
			Количество              = КоличествоДействующегоВещества;
			НеНормализованныеДанные = "";
			
		Иначе
			
			// Единица размера
			ЕдиницаИзмерения        = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
			Количество              = ?(ЗначениеЗаполнено(КоличествоДействующегоВещества), КоличествоДействующегоВещества, 1);
			НеНормализованныеДанные = Идентификатор;
			
		КонецЕсли;
		
	Иначе
		
		ЕдиницаИзмерения        = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
		Количество              = ИсходныеДанные.Получить("num");
		НеНормализованныеДанные = "";
		
	КонецЕсли;
	
	Если ДанныеКонвертированы(ЕдиницаИзмерения) И ЗначениеЗаполнено(Количество) Или ЗначениеЗаполнено(НеНормализованныеДанные) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// 
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЕдиницаИзмерения"       , ЕдиницаИзмерения);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Количество"             , Количество);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "НеНормализованныеДанные", НеНормализованныеДанные);
		
	Иначе
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		Если УстановленОтказОбработкиДанныхКлассификатора(ЕдиницаИзмерения) Тогда
			ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
			ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ЕдиницаИзмерения);
			ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Количество) Тогда
			ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить Количество единицы измерения дозировки %2.'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, Идентификатор);
			ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		КонецЕсли;
		
		// 
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЕдиницаИзмерения"       , ЕдиницаИзмерения);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Количество"             , Количество);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "НеНормализованныеДанные", НеНормализованныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторФормыВыпуска(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуФормыВыпуска(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуФормыВыпуска(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор"          , ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("ЛекарственнаяФорма"     , Новый ОписаниеТипов("СправочникСсылка.ЛекарственныеФормы"));
	ТаблицаПоиска.Колонки.Добавить("ЕдиницаИзмерения"       , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПоиска.Колонки.Добавить("НеНормализованныеДанные", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("Количество"             , ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор           = Идентификатор;
		СтрокаТаблицы.ЛекарственнаяФорма      = ЗначениеСвойстваДанныхОбъекта(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЛекарственнаяФорма"), "Ссылка");
		СтрокаТаблицы.ЕдиницаИзмерения        = ЗначениеСвойстваДанныхОбъекта(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЕдиницаИзмерения"), "Ссылка");
		СтрокаТаблицы.НеНормализованныеДанные = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НеНормализованныеДанные");
		СтрокаТаблицы.Количество              = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Количество");
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор            КАК Идентификатор,
	|	ТаблицаПоиска.ЛекарственнаяФорма       КАК ЛекарственнаяФорма,
	|	ТаблицаПоиска.ЕдиницаИзмерения         КАК ЕдиницаИзмерения,
	|	ТаблицаПоиска.НеНормализованныеДанные  КАК НеНормализованныеДанные,
	|	ТаблицаПоиска.Количество               КАК Количество
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                     КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ФормыВыпуска.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ФормыВыпуска КАК Классификатор
	|		ПО
	|			ТаблицаПоиска.ЛекарственнаяФорма = Классификатор.ЛекарственнаяФорма
	|			И ТаблицаПоиска.ЕдиницаИзмерения = Классификатор.ЕдиницаИзмерения
	|			И ТаблицаПоиска.НеНормализованныеДанные = Классификатор.НеНормализованныеДанные
	|			И ТаблицаПоиска.Количество = Классификатор.Количество
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторФормыВыпуска_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор УпаковкиЛекарственныхСредств
#Область КлассификаторУпаковкиЛекарственныхСредств_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторУпаковкиЛекарственныхСредств(Классификатор)
	
	КонвертироватьИсходныеДанныеУпаковкиЛекарственныхСредств(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеУпаковкиЛекарственныхСредств(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"      , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеЕСКЛП" , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное", ДанныеОбъекта.ИсходныеДанные.Получить("НаименованиеПолное"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторУпаковкиЛекарственныхСредств(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуУпаковкиЛекарственныхСредств(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуУпаковкиЛекарственныхСредств(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор"     , ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("Наименование"      , ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПоиска.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор      = Идентификатор;
		СтрокаТаблицы.Наименование       = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование");
		СтрокаТаблицы.НаименованиеПолное = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное");
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор       КАК Идентификатор,
	|	ТаблицаПоиска.Наименование        КАК Наименование,
	|	ТаблицаПоиска.НаименованиеПолное  КАК НаименованиеПолное
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ ПоискПоИдентификаторам
	|ИЗ
	|	Справочник.УпаковкиЛекарственныхСредств КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.Идентификатор = Классификатор.НаименованиеЕСКЛП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ ПоискПоНаименованиям
	|ИЗ
	|	Справочник.УпаковкиЛекарственныхСредств КАК Классификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.Наименование = Классификатор.Наименование
	|			И Классификатор.Наименование <> """"
	|			И Классификатор.НаименованиеЕСКЛП = """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|		ПО
	|			ПоискПоИдентификаторам.Ссылка = Классификатор.Ссылка
	|ГДЕ
	|	ПоискПоИдентификаторам.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоискПоИдентификаторам.Идентификатор КАК Идентификатор,
	|	ПоискПоИдентификаторам.Ссылка        КАК Ссылка
	|ПОМЕСТИТЬ НайденныеДанные
	|ИЗ
	|	ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоискПоНаименованиям.Идентификатор КАК Идентификатор,
	|	ПоискПоНаименованиям.Ссылка        КАК Ссылка
	|ИЗ
	|	ПоискПоНаименованиям КАК ПоискПоНаименованиям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЛекарственныхСредств КАК Классификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.НаименованиеПолное = Классификатор.НаименованиеПолное
	|			И Классификатор.НаименованиеПолное <> """"
	|			И Классификатор.НаименованиеЕСКЛП = """"
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоИдентификаторам КАК ПоискПоИдентификаторам
	|		ПО
	|			ПоискПоИдентификаторам.Ссылка = Классификатор.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПоискПоНаименованиям КАК ПоискПоНаименованиям
	|		ПО
	|			ПоискПоНаименованиям.Ссылка = Классификатор.Ссылка
	|ГДЕ
	|	ПоискПоИдентификаторам.Ссылка ЕСТЬ NULL
	|	И ПоискПоНаименованиям.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                                     КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЛекарственныхСредств.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НайденныеДанные КАК Классификатор
	|		ПО
	|			Классификатор.Идентификатор = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторУпаковкиЛекарственныхСредств_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор Упаковки (СправочникСсылка.ЕдиницаИзмерения)
#Область КлассификаторУпаковки_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторУпаковки(Классификатор)
	
	КонвертироватьИсходныеДанныеУпаковки(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеУпаковки(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		ВыполнитьОбязательныеОбщиеПроверки_Упаковки(ДанныеОбъекта);
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		ПодготовитьУпаковкиЛекарственныхСредствКЗагрузке_Упаковки(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьРодительскиеУпаковкиКЗагрузке_Упаковки(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьБазовыеЕдиницыИзмерения_Упаковки(ЗагружаемыеДанные, ДанныеОбъекта)
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда  // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиУпаковокЛекарственныхСредств_Упаковки(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиРодительскихУпаковок_Упаковки(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиБазовыхЕдиницИзмерения_Упаковки(ЗагружаемыеДанные, ДанныеОбъекта);
		
		ДополнитьДанныеОбъектаПрочимиДанными_Упаковки(ДанныеОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбязательныеОбщиеПроверки_Упаковки(ДанныеОбъекта)
	
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеОбъекта);
	
	СостоитИзДругихУпаковок = ДанныеОбъекта.ИсходныеДанные.Получить("СостоитИзДругихУпаковок");
	Если СостоитИзДругихУпаковок = Истина Тогда
		
		КоличествоВУпаковке = ДанныеОбъекта.ИсходныеДанные.Получить("КоличествоВУпаковке");
		Если Не ЗначениеЗаполнено(КоличествоВУпаковке) Тогда
			ПричинаОтказа = НСтр("ru = 'Для объекта Упаковка %1 не задано значение поля Количество в упаковке.'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
			ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
		КонецЕсли;
		
	ИначеЕсли СостоитИзДругихУпаковок = Ложь Тогда
		
		Коэффициент = ДанныеОбъекта.ИсходныеДанные.Получить("Коэффициент");
		Если Не ЗначениеЗаполнено(Коэффициент) Тогда
			ПричинаОтказа = НСтр("ru = 'Для объекта Упаковка %1 не задано значение поля Коэффициент.'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
			ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
		КонецЕсли;
		
	Иначе
		ПричинаОтказа = НСтр("ru = 'Не удалось определить тип упаковки для упаковки %1.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьУпаковкиЛекарственныхСредствКЗагрузке_Упаковки(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_УпаковкиЛекарственныхСредств();
	
	НаименованиеПолное = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("НаименованиеУпаковкиПолное");
	Наименование       = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("НаименованиеУпаковки");
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Наименование = НаименованиеПолное;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта Упаковка (единица измерения) %1 не удалось получить данные упаковки лекарственного средства.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
		
	КонецЕсли;
	
	Идентификатор = Наименование;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("Наименование"      , Наименование);
	ИсходныеДанные.Вставить("НаименованиеПолное", НаименованиеПолное);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Упаковка", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьРодительскиеУпаковкиКЗагрузке_Упаковки(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИсходныеДанные = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Родитель");
	Если Не ЗначениеЗаполнено(ИсходныеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Упаковки();
	
	Идентификатор = ИсходныеДанные.Получить("Идентификатор");
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьБазовыеЕдиницыИзмерения_Упаковки(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИсходныеДанные = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("БазоваяЕдиницаИзмерения");
	Если Не ЗначениеЗаполнено(ИсходныеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмерения();
	
	Идентификатор = ИсходныеДанные.Получить("okei");
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "БазоваяЕдиницаИзмерения", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиУпаковокЛекарственныхСредств_Упаковки(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_УпаковкиЛекарственныхСредств();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Упаковка"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Упаковка", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиРодительскихУпаковок_Упаковки(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	Родитель = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Родитель");
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Упаковки();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Родитель", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// Обработка дополнительных данных.
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "БазоваяЕдиницаИзмерения", ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "БазоваяЕдиницаИзмерения"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "КоличествоВУпаковке"    , ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("КоличествоВУпаковке"));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиБазовыхЕдиницИзмерения_Упаковки(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	БазоваяЕдиницаИзмерения = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("БазоваяЕдиницаИзмерения");
	Если Не ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЕдиницыИзмерения();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "БазоваяЕдиницаИзмерения"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "БазоваяЕдиницаИзмерения", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// Обработка дополнительных данных.
		КоэффициентУпаковки = ПолучитьДополнительныеПараметрыДанныхКлассификатора(ДанныеКлассификатора, "КоэффициентУпаковки");
		ЧислительКоэффициентаУпаковки = ПолучитьДополнительныеПараметрыДанныхКлассификатора(ДанныеКлассификатора, "ЧислительКоэффициентаУпаковки");
		Если ЗначениеЗаполнено(КоэффициентУпаковки) Тогда
			Коэффициент = КоэффициентУпаковки;
		Иначе
			Коэффициент = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Коэффициент");
			Если ЗначениеЗаполнено(Коэффициент) И ЗначениеЗаполнено(ЧислительКоэффициентаУпаковки) Тогда
				Коэффициент = Число(Коэффициент) * ЧислительКоэффициентаУпаковки;
			КонецЕсли;
		КонецЕсли;
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Коэффициент", Коэффициент);
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаПрочимиДанными_Упаковки(ДанныеОбъекта)
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СостоитИзДругихУпаковок", ДанныеОбъекта.ИсходныеДанные.Получить("СостоитИзДругихУпаковок"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторУпаковки(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуУпаковки(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуУпаковки(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор"          , ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаПоиска.Колонки.Добавить("ТипЕдиницы"             , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЕдиницИзмерения"));
	ТаблицаПоиска.Колонки.Добавить("Упаковка"               , Новый ОписаниеТипов("СправочникСсылка.УпаковкиЛекарственныхСредств"));
	ТаблицаПоиска.Колонки.Добавить("БазоваяЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПоиска.Колонки.Добавить("СостоитИзДругихУпаковок", Новый ОписаниеТипов("Булево"));
	ТаблицаПоиска.Колонки.Добавить("Родитель"               , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПоиска.Колонки.Добавить("Коэффициент"            , ОбщегоНазначения.ОписаниеТипаЧисло(20, 9));
	ТаблицаПоиска.Колонки.Добавить("КоличествоВУпаковке"    , ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор           = КлючИЗначение.Ключ;
		СтрокаТаблицы.ТипЕдиницы              = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ТипЕдиницы");
		СтрокаТаблицы.Упаковка                = ЗначениеСвойстваДанныхОбъекта(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Упаковка"), "Ссылка");
		СтрокаТаблицы.БазоваяЕдиницаИзмерения = ЗначениеСвойстваДанныхОбъекта(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "БазоваяЕдиницаИзмерения"), "Ссылка");
		СтрокаТаблицы.СостоитИзДругихУпаковок = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СостоитИзДругихУпаковок");
		СтрокаТаблицы.Родитель                = ЗначениеСвойстваДанныхОбъекта(ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Родитель"), "Ссылка");
		СтрокаТаблицы.Коэффициент             = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Коэффициент");
		СтрокаТаблицы.КоличествоВУпаковке     = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КоличествоВУпаковке");
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                       КАК Идентификатор,
	|	ТаблицаПоиска.ТипЕдиницы                                          КАК ТипЕдиницы,
	|	ТаблицаПоиска.Упаковка                                            КАК Упаковка,
	|	ТаблицаПоиска.БазоваяЕдиницаИзмерения                             КАК БазоваяЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ТаблицаПоиска.Родитель КАК Справочник.ЕдиницыИзмерения)  КАК Родитель,
	|	ТаблицаПоиска.СостоитИзДругихУпаковок                             КАК СостоитИзДругихУпаковок,
	|	ТаблицаПоиска.Коэффициент                                         КАК Коэффициент,
	|	ТаблицаПоиска.КоличествоВУпаковке                                 КАК КоличествоВУпаковке
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ПОМЕСТИТЬ НайденныеДанные
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			НЕ ТаблицаПоиска.СостоитИзДругихУпаковок
	|			И ТаблицаПоиска.СостоитИзДругихУпаковок = Классификатор.СостоитИзДругихУпаковок
	|			И ТаблицаПоиска.ТипЕдиницы              = Классификатор.ТипЕдиницы
	|			И ТаблицаПоиска.Упаковка                = Классификатор.Упаковка
	|			И ТаблицаПоиска.БазоваяЕдиницаИзмерения = Классификатор.БазоваяЕдиницаИзмерения
	|			И ТаблицаПоиска.Родитель                = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			И ТаблицаПоиска.Коэффициент             = Классификатор.Коэффициент
	|			И Классификатор.Номенклатура            = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор,
	|	Классификатор.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК Классификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаПоиска КАК ТаблицаПоиска
	|		ПО
	|			ТаблицаПоиска.СостоитИзДругихУпаковок
	|			И ТаблицаПоиска.СостоитИзДругихУпаковок = Классификатор.СостоитИзДругихУпаковок
	|			И ТаблицаПоиска.ТипЕдиницы              = Классификатор.ТипЕдиницы
	|			И ТаблицаПоиска.Упаковка                = Классификатор.Упаковка
	|			И ТаблицаПоиска.БазоваяЕдиницаИзмерения = Классификатор.БазоваяЕдиницаИзмерения
	|			И ТаблицаПоиска.Родитель                = Классификатор.Родитель
	|			И ТаблицаПоиска.КоличествоВУпаковке     = Классификатор.КоличествоВУпаковке
	|			И Классификатор.Номенклатура            = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                         КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НайденныеДанные КАК Классификатор
	|		ПО
	|			Классификатор.Идентификатор = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторУпаковки_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор Производители
#Область КлассификаторПроизводители_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторПроизводители(Классификатор)
	
	КонвертироватьИсходныеДанныеПроизводители(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеПроизводители(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование", ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "АнглийскоеНаименование", ДанныеОбъекта.ИсходныеДанные.Получить("АнглийскоеНаименование"));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьКлассификаторПроизводители(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуПроизводители(Классификатор);
	ЗаписатьДанные(Классификатор);
	
КонецФункции

Процедура ПолучитьСсылкуПроизводители(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                      КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Производители КАК Классификатор
	|		ПО
	|			Классификатор.Наименование = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторПроизводители_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор СМНН
#Область КлассификаторСМНН_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторСМНН(Классификатор)
	
	ПолучитьДанныеИзСервиса(Классификатор);
	КонвертироватьИсходныеДанныеСМНН(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеСМНН(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		ВыполнитьОбязательныеОбщиеПроверки_СМНН(ДанныеОбъекта);
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьИсходныеДанныеДополнительнымиРеквизитами_СМНН(ДанныеОбъекта);
		
		ПодготовитьГРПКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьФТГКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьАТХКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьФормыВыпускаКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьМННКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Или Не ДанныеЗагружены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиГРП_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиФТГ_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиАТХ_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиФормВыпуска_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиМНН_СМНН(ЗагружаемыеДанные, ДанныеОбъекта);
		
		ДополнитьДанныеОбъектаПрочимиДанными_СМНН(ДанныеОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбязательныеОбщиеПроверки_СМНН(ДанныеОбъекта)
	
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеОбъекта);
	
	Классификаторы = ДанныеОбъекта.ИсходныеДанные.Получить("classifiers");
	Если Классификаторы = Неопределено Тогда
		ПричинаОтказа = НСтр("ru = 'Для объекта СМНН %1 не удалось получить коллекцию вложенных классификаторов.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДанныеОбъекта.ИсходныеДанные.Получить("features");
	Если ДополнительныеРеквизиты = Неопределено Тогда
		ПричинаОтказа = НСтр("ru = 'Для объекта СМНН %1 не удалось получить коллекцию дополнительных реквизитов.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИсходныеДанныеДополнительнымиРеквизитами_СМНН(ДанныеОбъекта)
	
	ДополнительныеРеквизитыСМНН = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыСМНН");
	Если ДополнительныеРеквизитыСМНН = Неопределено Тогда
		ДополнительныеРеквизитыСМНН = Новый Соответствие;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДанныеОбъекта.ИсходныеДанные.Получить("features");
	Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИдентификаторСвойстваДополнительныхРеквизитовПоКоду(Формат(ДополнительныйРеквизит.Получить("featureId"), "ЧГ=0"));
		ДополнительныеРеквизитыСМНН.Вставить(Идентификатор, ДополнительныйРеквизит.Получить("value"));
	КонецЦикла;
	
	ДанныеОбъекта.ИсходныеДанные.Вставить("ДополнительныеРеквизитыСМНН", ДополнительныеРеквизитыСМНН);
	
КонецПроцедуры

Процедура ПодготовитьГРПКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГРП();
	Идентификатор = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("parentUUID");
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("uuid", Идентификатор);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ГруппаУзловСМНН", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьФТГКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФТГ();
	
	ИсходныеДанные = Неопределено;
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("classifiers");
	Для Каждого ИсходныеДанныеВложенногоКлассификатора Из Классификаторы Цикл
		Если ИсходныеДанныеВложенногоКлассификатора.Получить("name") = ИмяКлассификатора Тогда
			ИсходныеДанные = ИсходныеДанныеВложенногоКлассификатора;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИсходныеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ИсходныеДанные.Получить("code");
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФармакоТерапевтическаяГруппа", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьАТХКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ();
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АТХКлассификация", Новый Массив);
	
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("classifiers");
	Если Классификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИсходныеДанныеВложенногоКлассификатора Из Классификаторы Цикл
		
		Если ИсходныеДанныеВложенногоКлассификатора.Получить("name") = ИмяКлассификатора Тогда
			
			Идентификатор = ИсходныеДанныеВложенногоКлассификатора.Получить("code");
			
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанныеВложенногоКлассификатора);
			
			АТХКлассификация = ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АТХКлассификация");
			АТХКлассификация.Добавить(Новый Структура("АТХ", ДанныеКлассификатора));
			
			ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьФормыВыпускаКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФормыВыпуска();
	
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	// Подготовка данных лекарственной формы
	ИмяКлассификатора_ЛекарственныеФормы = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ЛекарственныеФормы();
	
	ИсходныеДанныеЛекарственнойФормы = Неопределено;
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("classifiers");
	Для Каждого ИсходныеДанныеВложенногоКлассификатора Из Классификаторы Цикл
		Если ИсходныеДанныеВложенногоКлассификатора.Получить("name") = ИмяКлассификатора_ЛекарственныеФормы Тогда
			ИсходныеДанныеЛекарственнойФормы = ИсходныеДанныеВложенногоКлассификатора;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИсходныеДанныеЛекарственнойФормы) Тогда
		
		ДополнительныеРеквизитыСМНН = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыСМНН");
		
		НаименованиеЛекарственнойФормы = ДополнительныеРеквизитыСМНН.Получить("КраткоеНазваниеЛекарственнойФормы");
		Если Не ЗначениеЗаполнено(НаименованиеЛекарственнойФормы) Тогда
			НаименованиеЛекарственнойФормы = ДополнительныеРеквизитыСМНН.Получить("НаименованиеЛекарственнойФормы");
		КонецЕсли;
		НаименованиеЛекарственнойФормыПолное = ДополнительныеРеквизитыСМНН.Получить("НаименованиеЛекарственнойФормыПолное");
		Если ЗначениеЗаполнено(НаименованиеЛекарственнойФормы) Или ЗначениеЗаполнено(НаименованиеЛекарственнойФормыПолное) Тогда
			ИсходныеДанныеЛекарственнойФормы = Новый Соответствие;
			ИсходныеДанныеЛекарственнойФормы.Вставить("nameShort", СокрЛП(НаименованиеЛекарственнойФормы));
			ИсходныеДанныеЛекарственнойФормы.Вставить("name"     , СокрЛП(НаименованиеЛекарственнойФормыПолное));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсходныеДанныеЛекарственнойФормы) Тогда
		ПричинаОтказа = НСтр("ru = 'В объекта СМНН %1 нет данных лекарственной формы.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных дозировки
	ДанныеДозировки = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("dosage");
	Если Не ЗначениеЗаполнено(ДанныеДозировки) Тогда
		ПричинаОтказа = НСтр("ru = 'В объекта СМНН %1 нет данных дозировки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	ИсходныеДанныеДозировки = ДанныеДозировки.Получить("dosageUnit");
	Если Не ЗначениеЗаполнено(ИсходныеДанныеДозировки) Тогда
		ПричинаОтказа = НСтр("ru = 'В объекта СМНН %1 нет данных дозировки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных формы выпуска
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("ЛекарственнаяФорма", ИсходныеДанныеЛекарственнойФормы);
	ИсходныеДанные.Вставить("Дозировка"         , ИсходныеДанныеДозировки);
	
	Идентификатор = СтрШаблон("Ключ_%1/%2_%3_%4", ИсходныеДанныеЛекарственнойФормы["code"], ИсходныеДанныеДозировки["unitOKEI"], ИсходныеДанныеДозировки["num"], ИсходныеДанныеДозировки["name"]);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФормаВыпуска", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьМННКЗагрузке_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_МНН();
	
	// Подготовка данных международных непатентованных наименований.
	ДополнительныеРеквизитыСМНН = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыСМНН");
	
	МеждународноеНепатентованноеНаименование = ДополнительныеРеквизитыСМНН.Получить("МеждународноеНепатентованноеНаименование");
	Если МеждународноеНепатентованноеНаименование = Неопределено Тогда
		
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта СМНН %1 не удалось получить международное непатентованное наименование.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
		
	КонецЕсли;
	
	// Подготовка данных ДВЛП.
	ИмяКлассификатора_ДВЛП = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ДВЛП();
	ИсходныеДанныеДействующихВеществ = Новый Массив;
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("classifiers");
	Для Каждого ИсходныеДанныеВложенногоКлассификатора Из Классификаторы Цикл
		Если ИсходныеДанныеВложенногоКлассификатора.Получить("name") = ИмяКлассификатора_ДВЛП Тогда
			ИсходныеДанныеДействующихВеществ.Добавить(ИсходныеДанныеВложенногоКлассификатора);
		КонецЕсли;
	КонецЦикла;
	
	// Формирование данных к загрузке.
	Идентификатор = МеждународноеНепатентованноеНаименование;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("Наименование"       , МеждународноеНепатентованноеНаименование);
	ИсходныеДанные.Вставить("ДействующиеВещества", ИсходныеДанныеДействующихВеществ);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВеществаМНН", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиГРП_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ГРП();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ГруппаУзловСМНН"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ГруппаУзловСМНН", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиФТГ_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФТГ();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФармакоТерапевтическаяГруппа"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФармакоТерапевтическаяГруппа", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиАТХ_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_АТХ();
	
	ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	АТХКлассификация = ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "АТХКлассификация");
	Для Каждого СтрокаДанных Из АТХКлассификация Цикл
		
		Для Каждого КлючИЗначение Из СтрокаДанных Цикл
			
			Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(КлючИЗначение.Значение);
			
			ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
			Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
				
				// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
				УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
				
				// Заменяем данные до конвертирования на данные после конвертирования.
				// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
				// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
				// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
				СтрокаДанных.Вставить(КлючИЗначение.Ключ, ДанныеКлассификатора);
				
			ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
				
				ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
				ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
				ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
				ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиФормВыпуска_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ФормыВыпуска();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФормаВыпуска"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФормаВыпуска", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиМНН_СМНН(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_МНН();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВеществаМНН"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВеществаМНН", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаПрочимиДанными_СМНН(ДанныеОбъекта)
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"                    , ДанныеОбъекта.ИсходныеДанные.Получить("code"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"          , ДанныеОбъекта.ИсходныеДанные.Получить("name"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаПоследнегоИзменения"     , ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СтрокаВДату(ДанныеОбъекта.ИсходныеДанные.Получить("modified")));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "УникальныйИдентификаторЕСКЛП", ДанныеОбъекта.ИсходныеДанные.Получить("uuid"));
	
	ДополнительныеРеквизитыСМНН = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыСМНН");
	
	ДатаСозданияЗаписиСМНН                            = ДополнительныеРеквизитыСМНН.Получить("ДатаСозданияЗаписиСМНН");
	ДатаОкончанияДействияЗаписиСМНН                   = ДополнительныеРеквизитыСМНН.Получить("ДатаОкончанияДействияЗаписиСМНН");
	СМННСоответствуютТовары                           = ДополнительныеРеквизитыСМНН.Получить("СМННСоответствуютТовары") = "true";
	ПризнакЖНВЛП                                      = ДополнительныеРеквизитыСМНН.Получить("ПризнакЖНВЛП") = "true";
	ПризнакРецептурногоОтпуска                        = ДополнительныеРеквизитыСМНН.Получить("ПризнакРецептурногоОтпуска") = "true";
	ПризнакСильнодействующиеВещества                  = ДополнительныеРеквизитыСМНН.Получить("ПризнакСильнодействующиеВещества") = "true";
	ПризнакЯдовитогоВещества                          = ДополнительныеРеквизитыСМНН.Получить("ПризнакЯдовитогоВещества") = "true";
	ПризнакНаркотическогоВещества                     = ДополнительныеРеквизитыСМНН.Получить("ПризнакНаркотическогоВещества") = "true";
	ПризнакПринадлежностиКСписку4НаркотическихВеществ = ДополнительныеРеквизитыСМНН.Получить("ПризнакПринадлежностиКСписку4НаркотическихВеществ") = "true";
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодМКБ10", ДополнительныеРеквизитыСМНН.Получить("КодМКБ10"));
	
	Если ЗначениеЗаполнено(ДатаСозданияЗаписиСМНН) Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаСозданияЗаписиСМНН", ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СтрокаВДату(ДатаСозданияЗаписиСМНН));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончанияДействияЗаписиСМНН) Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаОкончанияДействияЗаписиСМНН", ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СтрокаВДату(ДатаОкончанияДействияЗаписиСМНН));
	КонецЕсли;
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СМННСоответствуютТовары", СМННСоответствуютТовары);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЖНВЛП"                  , ПризнакЖНВЛП);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "БезрецептурныйОтпуск"   , Не ПризнакРецептурногоОтпуска);
	
	// Наркотические вещества
	Если ПризнакНаркотическогоВещества Тогда
		// Список 1 - запрещен в РФ.
		Если ПризнакПринадлежностиКСписку4НаркотическихВеществ Тогда
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наркотические", Перечисления.СпискиНаркотическихВеществ.Список4);
		Иначе
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наркотические", Перечисления.СпискиНаркотическихВеществ.Список2или3);
		КонецЕсли;
	Иначе
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наркотические", Перечисления.СпискиНаркотическихВеществ.ПустаяСсылка());
	КонецЕсли;
	
	// СильнодействующиеИЯды
	Если ПризнакСильнодействующиеВещества Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СильнодействующиеИЯды", Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Сильнодействующие);
	ИначеЕсли ПризнакЯдовитогоВещества Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СильнодействующиеИЯды", Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Яды);
	Иначе
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СильнодействующиеИЯды", Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.ПустаяСсылка());
	КонецЕсли;
	
	// МИБП
	ПринадлежностьКНациональномуКалендарюПрофилактическихПрививок = ДополнительныеРеквизитыСМНН.Получить("ПринадлежностьКНациональномуКалендарюПрофилактическихПрививок") = "true";
	ПринадлежностьККалендарюПрививокПоЭпидемическимПоказаниям     = ДополнительныеРеквизитыСМНН.Получить("ПринадлежностьККалендарюПрививокПоЭпидемическимПоказаниям") = "true";
	ПризнакЖивойВакцины                                           = ДополнительныеРеквизитыСМНН.Получить("ПризнакЖивойВакцины") = "true";
	ПризнакАссоциированнойВакцины                                 = ДополнительныеРеквизитыСМНН.Получить("ПризнакАссоциированнойВакцины") = "true";
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппировочноеНаименованиеМИБПНаАнглийскомЯзыке", ДополнительныеРеквизитыСМНН.Получить("ГруппировочноеНаименованиеМИБПНаАнглийскомЯзыке"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЗаболеваниеИлиГруппаЗаболеванийМИБП"            , ДополнительныеРеквизитыСМНН.Получить("ЗаболеваниеИлиГруппаЗаболеванийМИБП"));
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ВНациональномКалендареПрививок"             , ПринадлежностьКНациональномуКалендарюПрофилактическихПрививок);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ВКалендареПрививокПоЭпидемическимПоказаниям", ПринадлежностьККалендарюПрививокПоЭпидемическимПоказаниям);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ПризнакЖивойВакцины"                        , ПризнакЖивойВакцины);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ПризнакАссоциированнойВакцины"              , ПризнакАссоциированнойВакцины);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторСМНН(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуСМНН(Классификатор);
	ЗаписатьДанные(Классификатор, Новый Структура("ПропуститьОбновлениеЛекарственныхСредств"));
	
КонецПроцедуры

Процедура ПолучитьСсылкуСМНН(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(41));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                             КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.СМНН.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.СМНН КАК Классификатор
	|		ПО
	|			Классификатор.КодЕСКЛП = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторСМНН_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор ТорговыеНаименования
#Область КлассификаторТорговыеНаименования_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторТорговыеНаименования(Классификатор)
	
	КонвертироватьИсходныеДанныеТорговыеНаименования(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеТорговыеНаименования(Классификатор)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование", ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "АнглийскоеНаименование", ДанныеОбъекта.ИсходныеДанные.Получить("АнглийскоеНаименование"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторТорговыеНаименования(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуТорговыеНаименования(Классификатор);
	ЗаписатьДанные(Классификатор, Новый Структура("ПропуститьОбновлениеЛекарственныхСредств"));
	
КонецПроцедуры

Процедура ПолучитьСсылкуТорговыеНаименования(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                                             КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ТорговыеНаименования КАК Классификатор
	|		ПО
	|			Классификатор.Наименование = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КлассификаторТорговыеНаименования_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Классификатор КЛП
#Область КлассификаторКЛП_СлужебныйИнтерфейс

Процедура ПолучитьКлассификаторКЛП(Классификатор)
	
	КонвертироватьИсходныеДанныеКЛП(Классификатор);
	
КонецПроцедуры

Процедура КонвертироватьИсходныеДанныеКЛП(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		ВыполнитьОбязательныеОбщиеПроверки_КЛП(ДанныеОбъекта);
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		ДополнитьИсходныеДанныеДополнительнымиРеквизитами_КЛП(ДанныеОбъекта);
		
		ПодготовитьОКПД2КЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьСМННКЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьТорговыеНаименованияКЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьУпаковкиКЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьДанныеПроизводителяЛС_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ПодготовитьДанныеВладельцаРУ_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ПолучитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноКонвертироватьДанные(ДанныеОбъекта) Тогда // ДанныеЗагружены(ДанныеОбъекта) - не проверяется, т.к. данные для объекта из сервиса не загружаются.
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Истина);
		
		ДополнитьДанныеОбъектаДаннымиОКПД2_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиСМНН_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиТорговыхНаименований_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиУпаковок_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиПроизводителяЛС_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		ДополнитьДанныеОбъектаДаннымиВладельцаРУ_КЛП(ЗагружаемыеДанные, ДанныеОбъекта);
		
		ДополнитьДанныеОбъектаСрокомГодности_КЛП(ДанныеОбъекта);
		
		ДополнитьДанныеОбъектаПрочимиДанными_КЛП(ДанныеОбъекта);
		
		УстановитьКонтрольноеЗначениеДанныхКлассификатора(ДанныеОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбязательныеОбщиеПроверки_КЛП(ДанныеОбъекта)
	
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеОбъекта);
	
	Классификаторы = ДанныеОбъекта.ИсходныеДанные.Получить("Классификаторы");
	Если Классификаторы = Неопределено Тогда
		ПричинаОтказа = НСтр("ru = 'Для объекта КЛП %1 не удалось получить коллекцию вложенных классификаторов.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизиты");
	Если ДополнительныеРеквизиты = Неопределено Тогда
		ПричинаОтказа = НСтр("ru = 'Для объекта КЛП %1 не удалось получить коллекцию дополнительных реквизитов.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, Идентификатор);
		ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИсходныеДанныеДополнительнымиРеквизитами_КЛП(ДанныеОбъекта)
	
	ДополнительныеРеквизитыКЛП = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	Если ДополнительныеРеквизитыКЛП = Неопределено Тогда
		ДополнительныеРеквизитыКЛП = Новый Соответствие;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизиты");
	ДополнительныеРеквизиты.Сортировать("Идентификатор");
	Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИдентификаторСвойстваДополнительныхРеквизитовПоКоду(Формат(ДополнительныйРеквизит.Идентификатор, "ЧГ=0"), СокрЛП(ДополнительныйРеквизит.Наименование));
		ДополнительныеРеквизитыКЛП.Вставить(Идентификатор, ДополнительныйРеквизит.Значение);
	КонецЦикла;
	
	ДанныеОбъекта.ИсходныеДанные.Вставить("ДополнительныеРеквизитыКЛП", ДополнительныеРеквизитыКЛП);
	
КонецПроцедуры

Процедура ПодготовитьОКПД2КЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2();
	
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Классификаторы");
	СтрокаТаблицы = Классификаторы.Найти(ИмяКлассификатора, "Наименование");
	Если СтрокаТаблицы = Неопределено Тогда
		
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта КЛП %1 не удалось получить данные ОКПД2.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
		
	КонецЕсли;
	
	Идентификатор = СтрокаТаблицы.Идентификатор;
	ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ОКПД2", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьСМННКЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_СМНН();
	
	Классификаторы = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Классификаторы");
	СтрокаТаблицы = Классификаторы.Найти(ИмяКлассификатора, "Наименование");
	Если СтрокаТаблицы = Неопределено Тогда
		
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта КЛП %1 не удалось получить данные СМНН.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
		
	КонецЕсли;
	
	Идентификатор = СтрокаТаблицы.Идентификатор;
	ИсходныеДанные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СМНН", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьТорговыеНаименованияКЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТорговыеНаименования();
	
	ДополнительныеРеквизитыКЛП = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	ТорговоеНаименование = ДополнительныеРеквизитыКЛП.Получить("ТорговоеНаименование");
	Если ТорговоеНаименование = Неопределено Тогда
		
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта КЛП %1 не удалось получить данные торгового наименования.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
		
	КонецЕсли;
	
	Идентификатор = ТорговоеНаименование;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("Наименование", ТорговоеНаименование);
	ИсходныеДанные.Вставить("АнглийскоеНаименование", ДополнительныеРеквизитыКЛП.Получить("ТорговоеНаименованиеНаАнглийскомЯзыке"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ТорговоеНаименование", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьУпаковкиКЗагрузке_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Упаковки();
	
	ДополнительныеРеквизитыКЛП = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
	
	НаименованиеТретичнойУпаковкиПолное   = ДополнительныеРеквизитыКЛП.Получить("НаименованиеТретичнойУпаковкиПолное");
	НаименованиеТретичнойУпаковки         = ДополнительныеРеквизитыКЛП.Получить("НаименованиеТретичнойУпаковки");
	КоличествоВторичныхУпаковокВТретичной = ДополнительныеРеквизитыКЛП.Получить("КоличествоВторичныхУпаковокВТретичной");
	
	НаименованиеВторичнойУпаковкиПолное    = ДополнительныеРеквизитыКЛП.Получить("НаименованиеВторичнойУпаковкиПолное");
	НаименованиеВторичнойУпаковки          = ДополнительныеРеквизитыКЛП.Получить("НаименованиеВторичнойУпаковки");
	КоличествоПервичныхУпаковокВоВторичной = ДополнительныеРеквизитыКЛП.Получить("КоличествоПервичныхУпаковокВоВторичной");
	
	НаименованиеПервичнойУпаковкиПолное       = ДополнительныеРеквизитыКЛП.Получить("НаименованиеПервичнойУпаковкиПолное");
	НаименованиеПервичнойУпаковки             = ДополнительныеРеквизитыКЛП.Получить("НаименованиеПервичнойУпаковки");
	КоличествоБазовыхЕдиницВПервичнойУпаковке = ДополнительныеРеквизитыКЛП.Получить("КоличествоЛекарственныхФормВПервичнойУпаковке");
	
	Вес            = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Вес").ЕдиницаИзмерения;
	Объем          = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Объем").ЕдиницаИзмерения;
	КоличествоШтук = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("КоличествоВУпаковке").ЕдиницаИзмерения;
	
	ТретичнаяУпаковкаЗаполнена = ЗначениеЗаполнено(НаименованиеТретичнойУпаковкиПолное) И ЗначениеЗаполнено(КоличествоВторичныхУпаковокВТретичной);
	Если Не ТретичнаяУпаковкаЗаполнена И (ЗначениеЗаполнено(НаименованиеТретичнойУпаковкиПолное) Или ЗначениеЗаполнено(КоличествоВторичныхУпаковокВТретичной)) Тогда
		// Не заполнено что-то одно. Если не заполнены оба значения - значит просто не указана третичная упаковка, это не ошибка.
		ПричинаОтказа = НСтр("ru = 'У объекта КЛП %1 некорректные данные третичной упаковки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	ВторичнаяУпаковкаЗаполнена = ЗначениеЗаполнено(НаименованиеВторичнойУпаковкиПолное) И ЗначениеЗаполнено(КоличествоПервичныхУпаковокВоВторичной);
	Если Не ВторичнаяУпаковкаЗаполнена Тогда
		// Вторичная упаковка должна быть заполнена полностью и корректно.
		ПричинаОтказа = НСтр("ru = 'У объекта КЛП %1 некорректные данные вторичной упаковки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	ПервичнаяУпаковкаЗаполнена = ЗначениеЗаполнено(НаименованиеПервичнойУпаковкиПолное) И ЗначениеЗаполнено(КоличествоБазовыхЕдиницВПервичнойУпаковке);
	Если Не ПервичнаяУпаковкаЗаполнена Тогда
		// Первичная упаковка должна быть заполнена полностью и корректно.
		ПричинаОтказа = НСтр("ru = 'У объекта КЛП %1 некорректные данные первичной упаковки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	БазоваяЕдиницаИзмеренияЗаполнена = ЗначениеЗаполнено(Вес.ОКЕИ) Или ЗначениеЗаполнено(Объем.ОКЕИ) Или ЗначениеЗаполнено(КоличествоШтук.ОКЕИ);
	Если Не БазоваяЕдиницаИзмеренияЗаполнена Тогда
		// Базовая единица измерения упаковки должна быть заполнена полностью и корректно.
		ПричинаОтказа = НСтр("ru = 'У объекта КЛП %1 некорректные данные базовой единицы измерения упаковки.'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИдентификаторВерхнеуровневогоОбъекта);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		Возврат;
	КонецЕсли;
	
	ЧастиИдентификатора = Новый Массив;
	
	// Базовые единицы измерения
	ИсходныеДанныеБазовойЕдиницыИзмерения = Новый Соответствие;
	Если ЗначениеЗаполнено(Вес.ОКЕИ) Тогда
		
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("okei"    , СокрЛП(Вес.ОКЕИ));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("name"    , СокрЛП(Вес.Наименование));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("unitName", СокрЛП(Вес.Наименование));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("type"    , "Вес");
		
		ЧастиИдентификатора.Добавить("ОКЕИ_" + Вес.ОКЕИ);
		
	ИначеЕсли ЗначениеЗаполнено(Объем.ОКЕИ) Тогда
		
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("okei"    , СокрЛП(Объем.ОКЕИ));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("name"    , СокрЛП(Объем.Наименование));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("unitName", СокрЛП(Объем.Наименование));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("type"    , "Объем");
		
		ЧастиИдентификатора.Добавить("ОКЕИ_" + Объем.ОКЕИ);
		
	ИначеЕсли ЗначениеЗаполнено(КоличествоШтук.ОКЕИ) Тогда
		
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("okei"    , СокрЛП(КоличествоШтук.ОКЕИ));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("name"    , СокрЛП(КоличествоШтук.Наименование));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("unitName", СокрЛП(КоличествоШтук.Наименование));
		ИсходныеДанныеБазовойЕдиницыИзмерения.Вставить("type"    , "Количество штук");
		
		ЧастиИдентификатора.Добавить("ОКЕИ_" + КоличествоШтук.ОКЕИ);
		
	КонецЕсли;
	
	// Первичная упаковка
	ЧастиИдентификатора.Вставить(0, НаименованиеПервичнойУпаковкиПолное + "_" + КоличествоБазовыхЕдиницВПервичнойУпаковке);
	ИсходныеДанныеПервичнойУпаковки = Новый Соответствие;
	ИсходныеДанныеПервичнойУпаковки.Вставить("СостоитИзДругихУпаковок"   , Ложь);
	ИсходныеДанныеПервичнойУпаковки.Вставить("НаименованиеУпаковкиПолное", НаименованиеПервичнойУпаковкиПолное);
	ИсходныеДанныеПервичнойУпаковки.Вставить("НаименованиеУпаковки"      , ?(ЗначениеЗаполнено(НаименованиеПервичнойУпаковки), НаименованиеПервичнойУпаковки, НаименованиеПервичнойУпаковкиПолное));
	ИсходныеДанныеПервичнойУпаковки.Вставить("БазоваяЕдиницаИзмерения"   , ИсходныеДанныеБазовойЕдиницыИзмерения);
	ИсходныеДанныеПервичнойУпаковки.Вставить("Коэффициент"               , КоличествоБазовыхЕдиницВПервичнойУпаковке);
	ИсходныеДанныеПервичнойУпаковки.Вставить("Идентификатор"             , СтрСоединить(ЧастиИдентификатора, "_"));
	ИсходныеДанные = ИсходныеДанныеПервичнойУпаковки;
	
	// Вторичная упаковка
	// В данных сервиса, у первичной упаковки всегда есть вторичная, даже если физически ее нет. Вторичной, в таком случае, указывается та же первичная упаковка, с количеством в упаковке = 1.
	// Например, "Бутылка стеклянная" со спиртом. В сервисе у "Бутылки стеклянной"(первичной упаковки) будет "Бутилка стеклянная" (вторичная упаковка).
	// Но если задана третичная упаковка, то должна быть, обязательно и вторичная.
	Если ТретичнаяУпаковкаЗаполнена Или Не (НаименованиеВторичнойУпаковкиПолное = НаименованиеПервичнойУпаковкиПолное И КоличествоПервичныхУпаковокВоВторичной = 1) Тогда
		ЧастиИдентификатора.Вставить(0, НаименованиеВторичнойУпаковкиПолное + "_" + КоличествоПервичныхУпаковокВоВторичной);
		ИсходныеДанныеВторичнойУпаковки = Новый Соответствие;
		ИсходныеДанныеВторичнойУпаковки.Вставить("СостоитИзДругихУпаковок"   , Истина);
		ИсходныеДанныеВторичнойУпаковки.Вставить("НаименованиеУпаковкиПолное", НаименованиеВторичнойУпаковкиПолное);
		ИсходныеДанныеВторичнойУпаковки.Вставить("НаименованиеУпаковки"      , ?(ЗначениеЗаполнено(НаименованиеВторичнойУпаковки), НаименованиеВторичнойУпаковки, НаименованиеВторичнойУпаковкиПолное));
		ИсходныеДанныеВторичнойУпаковки.Вставить("Родитель"                  , ИсходныеДанные);
		ИсходныеДанныеВторичнойУпаковки.Вставить("КоличествоВУпаковке"       , КоличествоПервичныхУпаковокВоВторичной);
		ИсходныеДанныеВторичнойУпаковки.Вставить("Идентификатор"             , СтрСоединить(ЧастиИдентификатора, "_"));
		ИсходныеДанные = ИсходныеДанныеВторичнойУпаковки;
	КонецЕсли;
	
	// Третичная упаковка
	Если ТретичнаяУпаковкаЗаполнена Тогда
		ЧастиИдентификатора.Вставить(0, НаименованиеТретичнойУпаковкиПолное + "_" + КоличествоВторичныхУпаковокВТретичной);
		ИсходныеДанныеТретичнойУпаковки = Новый Соответствие;
		ИсходныеДанныеТретичнойУпаковки.Вставить("СостоитИзДругихУпаковок"   , Истина);
		ИсходныеДанныеТретичнойУпаковки.Вставить("НаименованиеУпаковкиПолное", НаименованиеТретичнойУпаковкиПолное);
		ИсходныеДанныеТретичнойУпаковки.Вставить("НаименованиеУпаковки"      , ?(ЗначениеЗаполнено(НаименованиеТретичнойУпаковки), НаименованиеТретичнойУпаковки, НаименованиеТретичнойУпаковкиПолное));
		ИсходныеДанныеТретичнойУпаковки.Вставить("Родитель"                  , ИсходныеДанные);
		ИсходныеДанныеТретичнойУпаковки.Вставить("КоличествоВУпаковке"       , КоличествоВторичныхУпаковокВТретичной);
		ИсходныеДанныеТретичнойУпаковки.Вставить("Идентификатор"             , СтрСоединить(ЧастиИдентификатора, "_"));
		ИсходныеДанные = ИсходныеДанныеТретичнойУпаковки;
	КонецЕсли;
	
	Идентификатор = СтрСоединить(ЧастиИдентификатора, "_");
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Упаковка", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПроизводителяЛС_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Производители();
	
	ДанныеПроизводителя = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Производитель");
	Если Не ЗначениеЗаполнено(ДанныеПроизводителя) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизитыКЛП = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	Идентификатор = ДанныеПроизводителя.Наименование;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("Наименование", ДанныеПроизводителя.Наименование);
	ИсходныеДанные.Вставить("АнглийскоеНаименование", ДополнительныеРеквизитыКЛП.Получить("ПроизводительНаАнглийскомЯзыке"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФирмаПроизводитель", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ПодготовитьДанныеВладельцаРУ_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Производители();
	
	ДополнительныеРеквизитыКЛП = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	ВладелецРУ = ДополнительныеРеквизитыКЛП.Получить("ВладелецРУ");
	Если ВладелецРУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ВладелецРУ;
	
	ИсходныеДанные = Новый Соответствие;
	ИсходныеДанные.Вставить("Наименование", ВладелецРУ);
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, ИсходныеДанные);
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФирмаРегистратор", ДанныеКлассификатора);
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ДанныеКлассификатора);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиОКПД2_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ОКПД2();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ОКПД2"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ОКПД2", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиСМНН_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_СМНН();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СМНН"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СМНН", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// Обработка дополнительных данных.
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ДействующиеВеществаМНН"      , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ДействующиеВеществаМНН"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФормаВыпуска"                , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ФормаВыпуска"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФармакоТерапевтическаяГруппа", ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ФармакоТерапевтическаяГруппа"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "БезрецептурныйОтпуск"        , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "БезрецептурныйОтпуск"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СильнодействующиеИЯды"       , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "СильнодействующиеИЯды"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "КодМКБ10"                    , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "КодМКБ10"));
		
		// МИБП
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ГруппировочноеНаименованиеМИБПНаАнглийскомЯзыке", ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ГруппировочноеНаименованиеМИБПНаАнглийскомЯзыке"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ЗаболеваниеИлиГруппаЗаболеванийМИБП"            , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ЗаболеваниеИлиГруппаЗаболеванийМИБП"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ВНациональномКалендареПрививок"                 , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ВНациональномКалендареПрививок"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ВКалендареПрививокПоЭпидемическимПоказаниям"    , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ВКалендареПрививокПоЭпидемическимПоказаниям"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ПризнакЖивойВакцины"                            , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ПризнакЖивойВакцины"));
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ПризнакАссоциированнойВакцины"                  , ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "ПризнакАссоциированнойВакцины"));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиТорговыхНаименований_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_ТорговыеНаименования();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ТорговоеНаименование"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ТорговоеНаименование", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиУпаковок_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Упаковки();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Упаковка"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "Упаковка", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// Обработка дополнительных данных.
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "БазоваяЕдиницаИзмеренияКАТ", ЗначениеСвойстваДанныхОбъекта(ДанныеКлассификатора, "БазоваяЕдиницаИзмерения"));
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиПроизводителяЛС_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ДанныеПроизводителя = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("Производитель");
	Если Не ЗначениеЗаполнено(ДанныеПроизводителя) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Производители();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФирмаПроизводитель"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФирмаПроизводитель", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// Обработка дополнительных данных.
		КодСтраныПроизводителя = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("КодСтраныПроизводителя");
		Если ЗначениеЗаполнено(КодСтраныПроизводителя) Тогда
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СтранаПроизводителя", УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраныПроизводителя));
		Иначе
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СтранаПроизводителя", Справочники.СтраныМира.ПустаяСсылка());
		КонецЕсли;
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаДаннымиВладельцаРУ_КЛП(ЗагружаемыеДанные, ДанныеВерхнеуровневогоОбъекта)
	
	ДополнительныеРеквизитыКЛП = ДанныеВерхнеуровневогоОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	ВладелецРУ = ДополнительныеРеквизитыКЛП.Получить("ВладелецРУ");
	Если ВладелецРУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ИмяКлассификатора_Производители();
	Идентификатор = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФирмаРегистратор"));
	
	ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКоллекцииЗагружаемыхКлассификаторов(ЗагружаемыеДанные, ИмяКлассификатора, Идентификатор);
	
	// Заменяем данные до конвертирования на данные после конвертирования.
	// В коллекцию данных, сформированную до конвертирования, могут не быть помещены конвертированные данные,
	// т.к. в разных верхнеуровневых объектах могут быть одни и те же вложенные объекты,
	// при этом коллекция Рабочих данных заполниться только для одного верхнеуровневого объекта.
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "ФирмаРегистратор", ДанныеКлассификатора);
	
	Если ДанныеКонвертированы(ДанныеКлассификатора) Тогда
		
		// Данные объекта считаются конвертированными, если сам он конвертирован и все вложенные объекты конвертированы.
		УстановитьПризнак_ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта, ДанныеКонвертированы(ДанныеВерхнеуровневогоОбъекта));
		
		// Обработка дополнительных данных.
		КодСтраныВладельцаРУ = ДополнительныеРеквизитыКЛП.Получить("КодСтраныВладельцаРУ");
		Если ЗначениеЗаполнено(КодСтраныВладельцаРУ) Тогда
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СтранаРегистратора", УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраныВладельцаРУ));
		Иначе
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеВерхнеуровневогоОбъекта, "СтранаРегистратора", Справочники.СтраныМира.ПустаяСсылка());
		КонецЕсли;
		
	ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(ДанныеКлассификатора) Тогда
		
		ИмяКлассификатораВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеВерхнеуровневогоОбъекта);;
		ИдентификаторВерхнеуровневогоОбъекта = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(ДанныеВерхнеуровневогоОбъекта);
		
		ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатораВерхнеуровневогоОбъекта, ИдентификаторВерхнеуровневогоОбъекта, ИмяКлассификатора, Идентификатор);
		ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(ДанныеКлассификатора);
		ДобавитьОтказ(ДанныеВерхнеуровневогоОбъекта, ПричинаОтказа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаСрокомГодности_КЛП(ДанныеОбъекта)
	
	ДополнительныеРеквизитыКЛП = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	СрокГодностиСтрокой = ДополнительныеРеквизитыКЛП.Получить("СрокГодности");
	Если Не ЗначениеЗаполнено(СрокГодностиСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиСтрокиСрокаГодности = СтрРазделить(СрокГодностиСтрокой, " ", Ложь);
	Если ЧастиСтрокиСрокаГодности.Количество() < 2 Тогда
		// Срок годности может иметь значение, например, "1.5 года после приготовления - 24 ч (в холодильнике)".
		// В этом случае интересует только значение "1.5 года", т.к. есть количество и единица измерения срока годности.
		Возврат;
	КонецЕсли;
	
	// Описание типа см. в реквизите СрокГодности, справочника КЛП.
	ОписаниеТипаСрокаГодности = ОбщегоНазначения.ОписаниеТипаЧисло(6, 2, ДопустимыйЗнак.Неотрицательный);
	СрокГодности = ОписаниеТипаСрокаГодности.ПривестиЗначение(ЧастиСтрокиСрокаГодности[0]);
	Если СрокГодности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеЕдиницыИзмерения = Новый Соответствие;
	ДопустимыеЕдиницыИзмерения.Вставить("год"  , Перечисления.ЕдиницыИзмеренияВремени.Год);
	ДопустимыеЕдиницыИзмерения.Вставить("лет"  , Перечисления.ЕдиницыИзмеренияВремени.Год);
	ДопустимыеЕдиницыИзмерения.Вставить("месяц", Перечисления.ЕдиницыИзмеренияВремени.Месяц);
	ДопустимыеЕдиницыИзмерения.Вставить("день" , Перечисления.ЕдиницыИзмеренияВремени.День);
	ДопустимыеЕдиницыИзмерения.Вставить("дня"  , Перечисления.ЕдиницыИзмеренияВремени.День);
	ДопустимыеЕдиницыИзмерения.Вставить("дней" , Перечисления.ЕдиницыИзмеренияВремени.День);
	
	ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
	Для Каждого КлючИЗначение Из ДопустимыеЕдиницыИзмерения Цикл
		Если СтрНайти(ЧастиСтрокиСрокаГодности[1], КлючИЗначение.Ключ) Тогда
			ЕдиницаИзмеренияСрокаГодности = КлючИЗначение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаГодности) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СрокГодности"                 , СрокГодности);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЕдиницаИзмеренияСрокаГодности", ЕдиницаИзмеренияСрокаГодности);
	
КонецПроцедуры

Процедура ДополнитьДанныеОбъектаПрочимиДанными_КЛП(ДанныеОбъекта)
	
	ДополнительныеРеквизитыКЛП = ДанныеОбъекта.ИсходныеДанные.Получить("ДополнительныеРеквизитыКЛП");
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодЕСКЛП"               , ДополнительныеРеквизитыКЛП.Получить("КодЕСКЛП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наименование"           , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеПолное"     , ДанныеОбъекта.ИсходныеДанные.Получить("Наименование"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаПоследнегоИзменения", ДанныеОбъекта.ИсходныеДанные.Получить("ДатаИзменения"));
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "УсловияХранения"               , ДополнительныеРеквизитыКЛП.Получить("УсловияХранения"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "РегистрационныйНомер"          , ДополнительныеРеквизитыКЛП.Получить("НомерРУ"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаРегистрации"               , ДополнительныеРеквизитыКЛП.Получить("ДатаРУ"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаОкончанияДействия"         , ДополнительныеРеквизитыКЛП.Получить("ДатаОкончанияДействияРУ"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ТоварУчаствуетВМДЛП"           , ДополнительныеРеквизитыКЛП.Получить("ТоварУчаствуетВМДЛП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаСозданияЗаписиКЛП"         , ДополнительныеРеквизитыКЛП.Получить("ДатаСозданияЗаписиКЛП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаОкончанияДействияЗаписиКЛП", ДополнительныеРеквизитыКЛП.Получить("ДатаОкончанияДействияЗаписиКЛП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "УникальныйИдентификаторЕСКЛП"  , ДополнительныеРеквизитыКЛП.Получить("УникальныйИдентификаторЕСКЛП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ВКомплекте"                    , ДополнительныеРеквизитыКЛП.Получить("КомплектностьУпаковки"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ПринадлежностьК7ВЗН"           , ДополнительныеРеквизитыКЛП.Получить("Признак7ВЗН"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "УникальныйКодРосздравнадзора"  , ДополнительныеРеквизитыКЛП.Получить("УникальныйКодРосздравнадзора"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КоличествоДозВПервичнойУпаковке", ДополнительныеРеквизитыКЛП.Получить("КоличествоДозВПервичнойУпаковке"));
	
	// МИБП
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "КодМИБП"                               , ДополнительныеРеквизитыКЛП.Получить("КодМИБП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ОбщепринятоеСокращениеНаименованиеМИБП", ДополнительныеРеквизитыКЛП.Получить("ОбщепринятоеСокращениеНазванияМИБП"));
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ВерсияСправочникаМИБП_ФНСИ"            , ДополнительныеРеквизитыКЛП.Получить("ВерсияСправочникаМИБП_ФНСИ"));
	
	// Срок годности
	СрокГодности = ДополнительныеРеквизитыКЛП.Получить("СрокГодности");
	Если ЗначениеЗаполнено(СрокГодности) Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СрокГодности"                 , СрокГодности);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЕдиницаИзмеренияСрокаГодности", Перечисления.ЕдиницыИзмеренияВремени.Месяц);
	КонецЕсли;
	
	// Исходное название Формы выпуска (ГРЛС)
	НаименованиеЛекарственнойФормыГРЛС = ДополнительныеРеквизитыКЛП.Получить("ИсходноеОписаниеЛекарственнойФормы");
	Если Не ЗначениеЗаполнено(НаименованиеЛекарственнойФормыГРЛС) Тогда
		НаименованиеЛекарственнойФормыГРЛС = ДополнительныеРеквизитыКЛП.Получить("ИсходноеОписаниеЛекарственнойФормыПолное");
	КонецЕсли;
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "НаименованиеЛекарственнойФормыГРЛС", НаименованиеЛекарственнойФормыГРЛС);
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ОписаниеДозировкиГРЛС"             , ДополнительныеРеквизитыКЛП.Получить("ИсходноеОписаниеДозировки"));
	
	// Исходное название Действующего вещества МНН (ГРЛС)
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДействующиеВеществаМННГРЛС", ДополнительныеРеквизитыКЛП.Получить("ИсходноеОписаниеМНН"));
	
	// Статус действия
	ДатаОкончанияДействия = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ДатаОкончанияДействия");
	Если ТипЗнч(ДатаОкончанияДействия) = Тип("Дата") И ДатаОкончанияДействия < ТекущаяДатаСеанса() Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СтатусДействия", 2);
	Иначе
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СтатусДействия", 1);
	КонецЕсли;
	
	// Принадлежность к спискам
	ПризнакЖНВЛП                                      = ДополнительныеРеквизитыКЛП.Получить("ПризнакЖНВЛП") = Истина;
	ТаблицаПредельныхОтпускныхЦен                     = ДанныеОбъекта.ИсходныеДанные.Получить("ПредельныеОтпускныеЦены");
	ПризнакНаркотическогоВещества                     = ДополнительныеРеквизитыКЛП.Получить("ПризнакНаркотическогоВещества") = Истина;
	ПризнакПринадлежностиКСписку4НаркотическихВеществ = ДополнительныеРеквизитыКЛП.Получить("ПризнакПринадлежностиКСписку4НаркотическихВеществ") = Истина;
	МеждународноеНепатентованноеНаименование          = ДополнительныеРеквизитыКЛП.Получить("МеждународноеНепатентованноеНаименование");
	
	// ЖНВЛП
	Если ПризнакЖНВЛП = Истина Тогда
		Если ЗначениеЗаполнено(ТаблицаПредельныхОтпускныхЦен) Тогда
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЖНВЛП", Перечисления.СпискиЖНВЛП.ВключеноВКонтрольЦен);
		Иначе
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЖНВЛП", Перечисления.СпискиЖНВЛП.НеВключеноВКонтрольЦен);
		КонецЕсли;
	Иначе
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЖНВЛП", Перечисления.СпискиЖНВЛП.ПустаяСсылка());
	КонецЕсли;
	
	// Наркотические вещества
	Если ПризнакНаркотическогоВещества Тогда
		// Список 1 - запрещен в РФ.
		Если ПризнакПринадлежностиКСписку4НаркотическихВеществ Тогда
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наркотические", Перечисления.СпискиНаркотическихВеществ.Список4);
		Иначе
			УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наркотические", Перечисления.СпискиНаркотическихВеществ.Список2или3);
		КонецЕсли;
	Иначе
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Наркотические", Перечисления.СпискиНаркотическихВеществ.ПустаяСсылка());
	КонецЕсли;
	
	// Группа ПКУ
	Если ПризнакНаркотическогоВещества Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппаПКУ", Справочники.ГруппыПКУ.Наркотики);
	ИначеЕсли ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СильнодействующиеИЯды") = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Сильнодействующие Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппаПКУ", Справочники.ГруппыПКУ.Сильнодействующие);
	ИначеЕсли ЗначениеЗаполнено(МеждународноеНепатентованноеНаименование) И СтрНайти(ВРег(МеждународноеНепатентованноеНаименование), НСтр("ru = 'ЭТАНОЛ'")) Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппаПКУ", Справочники.ГруппыПКУ.Спирты);
	ИначеЕсли ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "СильнодействующиеИЯды") = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Яды Тогда
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппаПКУ", Справочники.ГруппыПКУ.Яды);
	Иначе
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ГруппаПКУ", Справочники.ГруппыПКУ.ПрочиеЛС);
	КонецЕсли;
	
	// Предельные отпускные цены
	ТипЦены_ЦенаМДЛП  = ВРег("Предельная зарегистрированная цена по данным МДЛП");
	ТипЦены_ЦенаЕСКЛП = ВРег("Предельная отпускная цена");
	
	ПредельныеОтпускныеЦены = Новый Массив;
	Для Каждого СтрокаПредельныхОтпускныхЦен Из ТаблицаПредельныхОтпускныхЦен Цикл
		
		ЭтоПриоритетныйТипЦены = СтрНайти(ВРег(СтрокаПредельныхОтпускныхЦен.ТипЦены), ТипЦены_ЦенаМДЛП) > 0;
		
		ДатаРегистрации  = Дата(1,1,1);
		НомерРегистрации = "";
		Для Каждого СтрокаДанных Из СтрокаПредельныхОтпускныхЦен.ДополнительныеРеквизиты Цикл
			Если СтрокаДанных.Наименование = "reg_date" Тогда
				ДатаРегистрации = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СтрокаВДату(СтрокаДанных.Значение);
			ИначеЕсли СтрокаДанных.Наименование = "reg_num" Тогда
				НомерРегистрации = СтрокаДанных.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если Не (ЗначениеЗаполнено(ДатаРегистрации)
			И ЗначениеЗаполнено(СтрокаПредельныхОтпускныхЦен.Цена)
			И ЗначениеЗаполнено(СтрокаПредельныхОтпускныхЦен.КодВалюты)) Тогда
			// Записи, у которых не заполнены ключевые поля - игнорируем.
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ДатаРегистрации, НомерРегистрации, Цена, КодВалюты", ДатаРегистрации, НомерРегистрации);
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПредельныхОтпускныхЦен);
		ПредельнаяОтпускнаяЦена = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.НайтиВМассивеСтруктур(ПредельныеОтпускныеЦены, Отбор);
		Если ПредельнаяОтпускнаяЦена <> Неопределено Тогда
			// Цена с аналогичными свойствами уже добавлена.
			Продолжить;
		КонецЕсли;
		
		Отбор.Удалить("НомерРегистрации");
		ПредельнаяОтпускнаяЦена = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.НайтиВМассивеСтруктур(ПредельныеОтпускныеЦены, Отбор);
		Если ПредельнаяОтпускнаяЦена <> Неопределено Тогда
			// Все свойства совпадают, кроме НомерРегистрации.
			// НомерРегистрации переносим из текущей записи в существующую, если:
			//  1. Приоритет текущей записи выше (определяем по Типу цены).
			//  2. Если НомерРегистрации не заполнен у существующей записи.
			Если ЗначениеЗаполнено(НомерРегистрации) И (ЭтоПриоритетныйТипЦены Или Не ЗначениеЗаполнено(ПредельнаяОтпускнаяЦена.НомерРегистрации)) Тогда
				ПредельнаяОтпускнаяЦена.НомерРегистрации = НомерРегистрации;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Отбор.Удалить("Цена");
		Отбор.Удалить("КодВалюты");
		ПредельнаяОтпускнаяЦена = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.НайтиВМассивеСтруктур(ПредельныеОтпускныеЦены, Отбор);
		Если ПредельнаяОтпускнаяЦена <> Неопределено Тогда
			// Дата совпадает, цены - нет. На одну дату может быть зарегистрирована только одна цена.
			// Цены устанавливаются по приоритету (определяем по Типу цены).
			Если ЭтоПриоритетныйТипЦены Тогда
				ПредельнаяОтпускнаяЦена.Цена      = СтрокаПредельныхОтпускныхЦен.Цена;
				ПредельнаяОтпускнаяЦена.КодВалюты = СтрокаПредельныхОтпускныхЦен.КодВалюты;
			КонецЕсли;
			// Если дата регистрации совпадает, то номер регистрации тоже должен совпадать.
			// НомерРегистрации переносим из текущей записи в существующую, если:
			//  1. Приоритет текущей записи выше (определяем по Типу цены).
			//  2. Если НомерРегистрации не заполнен у существующей записи.
			Если ЗначениеЗаполнено(НомерРегистрации) И (ЭтоПриоритетныйТипЦены Или Не ЗначениеЗаполнено(ПредельнаяОтпускнаяЦена.НомерРегистрации)) Тогда
				ПредельнаяОтпускнаяЦена.НомерРегистрации = НомерРегистрации;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Если существующих записей не нашли - добавляем новую.
		ПредельнаяОтпускнаяЦена = Новый Структура("ДатаРегистрации, НомерРегистрации, ТипЦены, Цена, КодВалюты");
		ЗаполнитьЗначенияСвойств(ПредельнаяОтпускнаяЦена, СтрокаПредельныхОтпускныхЦен);
		ПредельнаяОтпускнаяЦена.ДатаРегистрации  = ДатаРегистрации;
		ПредельнаяОтпускнаяЦена.НомерРегистрации = НомерРегистрации;
		
		ПредельныеОтпускныеЦены.Добавить(ПредельнаяОтпускнаяЦена);
		
	КонецЦикла;
	
	УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ПредельныеОтпускныеЦены", ПредельныеОтпускныеЦены);
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторКЛП(Классификатор)
	
	СопоставитьДанные(Классификатор);
	ПолучитьСсылкуКЛП(Классификатор);
	ЗаписатьДанные(Классификатор, Новый Структура("ПропуститьОбновлениеДанныхНоменклатуры"));
	ПослеЗагрузкиДанныхКлассификатораКЛП(Классификатор);
	
КонецПроцедуры

Процедура ПолучитьСсылкуКЛП(Классификатор)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(41));
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПоиска.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор  КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоиска.Идентификатор                                            КАК Идентификатор,
	|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник.КЛП.ПустаяСсылка))  КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.КЛП КАК Классификатор
	|		ПО
	|			Классификатор.КодЕСКЛП = ТаблицаПоиска.Идентификатор
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеОбъекта = Классификатор.Получить(Выборка.Идентификатор);
		УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка", Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанныхКлассификатораКЛП(Классификатор)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЦеныЖНВЛП = Неопределено;
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не ДанныеЗаписаны(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		КАТ                     = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "Ссылка");
		ЖНВЛП                   = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ЖНВЛП");
		ПредельныеОтпускныеЦены = ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, "ПредельныеОтпускныеЦены");
		
		Если Не ЗначениеЗаполнено(КАТ) Или ЖНВЛП <> Перечисления.СпискиЖНВЛП.ВключеноВКонтрольЦен Или Не ЗначениеЗаполнено(ПредельныеОтпускныеЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЦеныЖНВЛП = Неопределено Тогда
			
			МетаданныеРегистра = Метаданные.РегистрыСведений.ЦеныЛекарственныхСредствЖНВЛП;
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя());
			МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
			СтруктураДанныхРегистра = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
			
			ЦеныЖНВЛП = Новый ТаблицаЗначений;
			Для Каждого КлючИЗначение Из СтруктураДанныхРегистра Цикл
				ЦеныЖНВЛП.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(КлючИЗначение.Значение))));
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ПредельнаяОтпускнаяЦена Из ПредельныеОтпускныеЦены Цикл
			
			ЦенаЖНВЛП = ЦеныЖНВЛП.Добавить();
			ЦенаЖНВЛП.КАТ          = КАТ;
			ЦенаЖНВЛП.Период       = ПредельнаяОтпускнаяЦена.ДатаРегистрации;
			ЦенаЖНВЛП.НомерПриказа = ПредельнаяОтпускнаяЦена.НомерРегистрации;
			ЦенаЖНВЛП.Цена         = ПредельнаяОтпускнаяЦена.Цена;
			
			ЦенаЖНВЛП.Валюта = Справочники.Валюты.НайтиПоКоду(ПредельнаяОтпускнаяЦена.КодВалюты);
			Если Не ЗначениеЗаполнено(ЦенаЖНВЛП.Валюта) Тогда
				Валюты = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве());
				Если ЗначениеЗаполнено(Валюты) Тогда
					ЦенаЖНВЛП.Валюта = Валюты[0];
				КонецЕсли;
			КонецЕсли;
			
			Если ЦенаЖНВЛП.Валюта = ВалютаРегламентированногоУчета Тогда
				ЦенаЖНВЛП.ЦенаРуб = ЦенаЖНВЛП.Цена;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЦеныЖНВЛП) Тогда
		РегистрыСведений.ЦеныЛекарственныхСредствЖНВЛП.ОбновитьЦеныЖНВЛП(ЦеныЖНВЛП);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // КлассификаторКЛП_СлужебныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Универсальные механизмы
#Область УниверсальныеМеханизмы

Процедура ПолучитьДанныеИзСервиса(Классификатор)
	
	Попытка
		
		Идентификаторы = Новый Массив;
		Для Каждого КлючИЗначение Из Классификатор Цикл
			
			Идентификатор = КлючИЗначение.Ключ;
			ДанныеОбъекта = КлючИЗначение.Значение;
			
			Если Не НужноЗагружатьДанные(ДанныеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
			
			Идентификаторы.Добавить(Идентификатор);
			
		КонецЦикла;
		
		Если Идентификаторы.Количество() > 0 Тогда
			ПараметрыПодключения = ОблачныеКлассификаторыБольничнаяАптекаВызовСервера.ПараметрыСервераАПИ();
			РезультатПолученияДанных = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьДанныеКлассификатора(ИмяКлассификатора, ПараметрыПодключения, Идентификаторы);
			Если РезультатПолученияДанных.Статус <> "Успешно" Тогда
				ВызватьИсключение РезультатПолученияДанных.ОписаниеОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Классификатор Цикл
			
			Идентификатор = КлючИЗначение.Ключ;
			ДанныеОбъекта = КлючИЗначение.Значение;
			
			Если Не НужноЗагружатьДанные(ДанныеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеИсходныеДанные = РезультатПолученияДанных.Данные.Получить(Идентификатор);
			Если НовыеИсходныеДанные <> Неопределено Тогда
				
				ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
				
				ДанныеКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПустыеДанныеКлассификатора(ИмяКлассификатора, Идентификатор, НовыеИсходныеДанные);
				
				ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемогоКлассификатора(Классификатор, ДанныеКлассификатора);
				
				УстановитьПризнак_ДанныеЗагружены(ДанныеОбъекта, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Получение данных классификатора %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСобытия, ИмяКлассификатора);
		
		Текст = НСтр("ru = 'Не удалось получить данные классификатора %1 по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКлассификатора);
		Текст = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуВЖурналРегистрации(Текст, ИмяСобытия);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СопоставитьДанные(Классификатор)
	
	ЗагружаемыеДанные = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СоздатьКоллекциюЗагружаемыхКлассификаторов();
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого НовоеСвойствоОбъекта Из ДанныеОбъекта.РабочиеДанные Цикл
			
			ИмяСвойства = НовоеСвойствоОбъекта.Ключ;
			
			Если ИмяСвойства = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеЗначениеСвойства = НовоеСвойствоОбъекта.Значение;
			
			Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначениеСвойства) Тогда
				
				ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, НовоеЗначениеСвойства);
				
			ИначеЕсли ТипЗнч(НовоеЗначениеСвойства) = Тип("Массив") Тогда
				
				Для Каждого НоваяСтрокаДанных Из НовоеЗначениеСвойства Цикл
					
					Для Каждого НовоеСвойствоСтрокиДанных Из НоваяСтрокаДанных Цикл
						
						НовоеЗначениеСвойстваСтрокиДанных = НовоеСвойствоСтрокиДанных.Значение;
						
						Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначениеСвойстваСтрокиДанных) Тогда
							
							ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДополнитьКоллекциюЗагружаемыхКлассификаторов(ЗагружаемыеДанные, НовоеЗначениеСвойстваСтрокиДанных);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗагружаемыеДанные.Количество() > 0 Тогда
		ЗагрузитьКлассификаторы(ЗагружаемыеДанные);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
		
		Если Не НужноСопоставлятьДанные(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		// Начально значение, которое измениться, если вложенные объекты не были сопоставлены.
		УстановитьПризнак_ДанныеСопоставлены(ДанныеОбъекта, Истина);
		
		Для Каждого НовоеСвойствоОбъекта Из ДанныеОбъекта.РабочиеДанные Цикл
			
			ИмяСвойства = НовоеСвойствоОбъекта.Ключ;
			
			Если ИмяСвойства = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеЗначениеСвойства = НовоеСвойствоОбъекта.Значение;
			
			Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначениеСвойства) Тогда
				
				Если ДанныеСопоставлены(НовоеЗначениеСвойства) Тогда
					
					// Данные объекта считаются сопоставленными, если сам он сопоставлен и все вложенные объекты сопоставлены.
					УстановитьПризнак_ДанныеСопоставлены(ДанныеОбъекта, ДанныеСопоставлены(ДанныеОбъекта));
					
				ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(НовоеЗначениеСвойства) Тогда
					
					ИмяВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(НовоеЗначениеСвойства);
					ИдентификаторВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(НовоеЗначениеСвойства);
					
					ПричинаОтказа = НСтр("ru = 'Для объекта %1 %2 не удалось получить данные объекта %3 %4 по причине:'");
					ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатора, Идентификатор, ИмяВложенногоКлассификатора, ИдентификаторВложенногоКлассификатора);
					ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(НовоеЗначениеСвойства);
					ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(НовоеЗначениеСвойства) = Тип("Массив") Тогда
				
				Для Каждого НоваяСтрокаДанных Из НовоеЗначениеСвойства Цикл
					
					Для Каждого НовоеСвойствоСтрокиДанных Из НоваяСтрокаДанных Цикл
						
						НовоеЗначениеСвойстваСтрокиДанных = НовоеСвойствоСтрокиДанных.Значение;
						
						Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначениеСвойстваСтрокиДанных) Тогда
							
							Если ДанныеСопоставлены(НовоеЗначениеСвойстваСтрокиДанных) Тогда
								
								// Данные объекта считаются сопоставленными, если сам он сопоставлен и все вложенные объекты сопоставлены.
								УстановитьПризнак_ДанныеСопоставлены(ДанныеОбъекта, ДанныеСопоставлены(ДанныеОбъекта));
								
							ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(НовоеЗначениеСвойстваСтрокиДанных) Тогда
								
								ИмяВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(НовоеЗначениеСвойстваСтрокиДанных);
								ИдентификаторВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(НовоеЗначениеСвойстваСтрокиДанных);
								
								ПричинаОтказа = НСтр("ru = 'Для объекта %1 ""%2"" не удалось получить данные %3 ""%4"" по причине:'");
								ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатора, Идентификатор, ИмяВложенногоКлассификатора, ИдентификаторВложенногоКлассификатора);
								ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(НовоеЗначениеСвойстваСтрокиДанных);
								ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанные(Классификатор, ДополнительныеСвойства = Неопределено)
	
	Для Каждого КлючИЗначение Из Классификатор Цикл
		
		Идентификатор = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		ИмяКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(ДанныеОбъекта);
		
		Если Не НужноЗаписыватьДанные(ДанныеОбъекта) Или Не ДанныеСопоставлены(ДанныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			РабочиеДанные = ДанныеОбъекта.РабочиеДанные;
			
			Если ЗначениеЗаполнено(РабочиеДанные.Ссылка) Тогда
				Объект = РабочиеДанные.Ссылка.ПолучитьОбъект();
				ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(Объект);
			Иначе
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РабочиеДанные.Ссылка);
				Объект = Менеджер.СоздатьЭлемент();
			КонецЕсли;
			
			КонтрольноеЗначениеДанныхСервиса = КонтрольноеЗначениеДанныхКлассификатора(ДанныеОбъекта);
			ЕстьРеквизитКонтрольноеЗначениеДанныхСервиса = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КонтрольноеЗначениеДанныхСервиса");
			КонтрольныеЗначенияИдентичны = ЗначениеЗаполнено(КонтрольноеЗначениеДанныхСервиса)
				И ЕстьРеквизитКонтрольноеЗначениеДанныхСервиса
				И Объект.КонтрольноеЗначениеДанныхСервиса = КонтрольноеЗначениеДанныхСервиса;
			
			Если Не КонтрольныеЗначенияИдентичны Тогда
				
				Если ЕстьРеквизитКонтрольноеЗначениеДанныхСервиса Тогда
					Объект.КонтрольноеЗначениеДанныхСервиса = КонтрольноеЗначениеДанныхСервиса;
				КонецЕсли;
				
				Для Каждого КлючИЗначение Из РабочиеДанные Цикл
					
					ИмяСвойства = КлючИЗначение.Ключ;
					Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяСвойства) Или ИмяСвойства = "Ссылка" Тогда
						Продолжить;
					КонецЕсли;
					
					НовоеЗначениеСвойства = КлючИЗначение.Значение;
					СтароеЗначениеСвойства = Объект[ИмяСвойства];
					
					Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначениеСвойства) Тогда
						
						Если ДанныеЗаписаны(НовоеЗначениеСвойства) Тогда
							
							СсылкаНовогоЗначения = ЗначениеСвойстваДанныхОбъекта(НовоеЗначениеСвойства, "Ссылка");
							Если (ЗначениеЗаполнено(СтароеЗначениеСвойства) Или ЗначениеЗаполнено(СсылкаНовогоЗначения)) И СтароеЗначениеСвойства <> СсылкаНовогоЗначения Тогда
								Объект[ИмяСвойства] = СсылкаНовогоЗначения;
							КонецЕсли;
							
						ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(НовоеЗначениеСвойства) Тогда
							
							ИмяВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(НовоеЗначениеСвойства);
							ИдентификаторВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(НовоеЗначениеСвойства);
							
							ПричинаОтказа = НСтр("ru = 'Для объекта %1 %2 не удалось записать данные объекта %3 %4 по причине:'");
							ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатора, Идентификатор, ИмяВложенногоКлассификатора, ИдентификаторВложенногоКлассификатора);
							ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(НовоеЗначениеСвойства);
							ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
							
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(НовоеЗначениеСвойства) = Тип("Массив") Тогда
						
						Если ЗначениеЗаполнено(СтароеЗначениеСвойства) Или ЗначениеЗаполнено(НовоеЗначениеСвойства) Тогда
							
							СтароеЗначениеСвойства.Очистить();
							
							Для Каждого НоваяСтрокаДанных Из НовоеЗначениеСвойства Цикл
								
								СтараяСтрокаДанных = СтароеЗначениеСвойства.Добавить();
								
								Для Каждого КлючИЗначение Из НоваяСтрокаДанных Цикл
									
									ИмяСвойстваСтрокиДанных = КлючИЗначение.Ключ;
									Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтараяСтрокаДанных, ИмяСвойстваСтрокиДанных) Тогда
										Продолжить;
									КонецЕсли;
									
									НовоеЗначениеСвойстваСтрокиДанных = КлючИЗначение.Значение;
									
									Если ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЭтоДанныеКлассификатора(НовоеЗначениеСвойстваСтрокиДанных) Тогда
										
										Если ДанныеЗаписаны(НовоеЗначениеСвойстваСтрокиДанных) Тогда
											
											СсылкаНовогоЗначения = ЗначениеСвойстваДанныхОбъекта(НовоеЗначениеСвойстваСтрокиДанных, "Ссылка");
											СтараяСтрокаДанных[ИмяСвойстваСтрокиДанных] = СсылкаНовогоЗначения;
											
										ИначеЕсли УстановленОтказОбработкиДанныхКлассификатора(НовоеЗначениеСвойстваСтрокиДанных) Тогда
											
											ИмяВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИмяКлассификатора(НовоеЗначениеСвойстваСтрокиДанных);
											ИдентификаторВложенногоКлассификатора = ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ПолучитьИдентификаторКлассификатора(НовоеЗначениеСвойстваСтрокиДанных);
											
											ПричинаОтказа = НСтр("ru = 'Для объекта %1 %2 не удалось записать данные объекта %3 %4 по причине:'");
											ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатора, Идентификатор, ИмяВложенногоКлассификатора, ИдентификаторВложенногоКлассификатора);
											ПричинаОтказа = ПричинаОтказа + Символы.ПС + СформироватьТекстИсключенияИзПричинОтказа(НовоеЗначениеСвойстваСтрокиДанных);
											ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
											
										КонецЕсли;
										
									Иначе
										
										СтараяСтрокаДанных[ИмяСвойстваСтрокиДанных] = НовоеЗначениеСвойстваСтрокиДанных;
										
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЦикла;
							
						КонецЕсли;
						
					Иначе
						
						Если (ЗначениеЗаполнено(СтароеЗначениеСвойства) Или ЗначениеЗаполнено(НовоеЗначениеСвойства)) И СтароеЗначениеСвойства <> НовоеЗначениеСвойства Тогда
							Объект[ИмяСвойства] = НовоеЗначениеСвойства;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если УстановленОтказОбработкиДанныхКлассификатора(ДанныеОбъекта) Тогда
				ВызватьИсключение СформироватьТекстИсключенияИзПричинОтказа(ДанныеОбъекта);
			КонецЕсли;
			
			Если Объект.Модифицированность() Тогда
				Если ДополнительныеСвойства <> Неопределено Тогда
					Для Каждого КлючИЗначение Из ДополнительныеСвойства Цикл
						Объект.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
					КонецЦикла;
				КонецЕсли;
				Объект.Записать();
				УстановитьПризнак_ДанныеМодифицированы(ДанныеОбъекта, Истина);
			КонецЕсли;
			
			Объект.Разблокировать();
			
			УстановитьПризнак_ДанныеЗаписаны(ДанныеОбъекта, Истина);
			
			РабочиеДанные.Вставить("Ссылка", Объект.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПричинаОтказа = НСтр("ru = 'Не удалось записать объект %1 ""%2"" по причине:'");
			ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПричинаОтказа, ИмяКлассификатора, Идентификатор);
			ПричинаОтказа = ПричинаОтказа + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа);
			
			ИмяСобытия = НСтр("ru = 'Запись загружаемого объекта %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСобытия, ИмяКлассификатора);
			
			Текст = НСтр("ru = 'Не удалось записать объект %1 ""%2"" по причине:'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКлассификатора, Идентификатор);
			Текст = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Текст, ИмяСобытия, РабочиеДанные.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


Функция ЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, ИмяСвойства)
	
	Возврат ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ЗначениеСвойстваДанныхКлассификатора(ДанныеОбъекта, ИмяСвойства);
	
КонецФункции

Процедура УстановитьЗначениеСвойстваДанныхОбъекта(ДанныеОбъекта, ИмяСвойства, НовоеЗначениеСвойства)
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановитьЗначениеСвойстваДанныхКлассификатора(ДанныеОбъекта, ИмяСвойства, НовоеЗначениеСвойства);
	
КонецПроцедуры

#КонецОбласти // УниверсальныеМеханизмы


////////////////////////////////////////////////////////////////////////////////
// Признаки служебных данных
#Область ПризнакиСлужебныхДанных

Процедура УстановитьПризнак_ЗагружатьДанные(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Загружать = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_КонвертироватьДанные(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Конвертировать = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_СопоставлятьДанные(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Сопоставлять = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_ЗаписыватьДанные(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Записывать = Признак;
	
КонецПроцедуры


Процедура УстановитьПризнак_ДанныеЗагружены(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Загружены = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_ДанныеКонвертированы(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Конвертированы = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_ДанныеСопоставлены(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Сопоставлены = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_ДанныеЗаписаны(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Записаны = Признак;
	
КонецПроцедуры

Процедура УстановитьПризнак_ДанныеМодифицированы(ДанныеОбъекта, Признак)
	
	ДанныеОбъекта.СлужебныеДанные.Модифицированы = Признак;
	
КонецПроцедуры


Функция НужноЗагружатьДанные(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Загружать;
	
КонецФункции

Функция НужноКонвертироватьДанные(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Конвертировать;
	
КонецФункции

Функция НужноСопоставлятьДанные(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Сопоставлять;
	
КонецФункции

Функция НужноЗаписыватьДанные(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Записывать;
	
КонецФункции


Функция ДанныеЗагружены(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Загружены;
	
КонецФункции

Функция ДанныеКонвертированы(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Конвертированы;
	
КонецФункции

Функция ДанныеСопоставлены(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Сопоставлены;
	
КонецФункции

Функция ДанныеЗаписаны(ДанныеОбъекта)
	
	Возврат ДанныеОбъекта.СлужебныеДанные.Записаны;
	
КонецФункции


Процедура ДобавитьОтказ(ДанныеОбъекта, ПричинаОтказа)
	
	ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.ДобавитьОтказОбработкиДанныхКлассификатора(ДанныеОбъекта, ПричинаОтказа);
	
КонецПроцедуры

Функция УстановленОтказОбработкиДанныхКлассификатора(ДанныеОбъекта)
	
	Возврат ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.УстановленОтказОбработкиДанныхКлассификатора(ДанныеОбъекта);
	
КонецФункции

Функция СформироватьТекстИсключенияИзПричинОтказа(ДанныеОбъекта)
	
	Возврат ОблачныеКлассификаторыБольничнаяАптекаКлиентСервер.СформироватьТекстИсключенияИзПричинОтказа(ДанныеОбъекта);
	
КонецФункции


Процедура УстановитьКонтрольноеЗначениеДанныхКлассификатора(ДанныеОбъекта)
	
	РабочиеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "РабочиеДанные");
	Если РабочиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ОбщегоНазначения.ЗначениеВСтрокуXML(РабочиеДанные);
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(СтрокаДанных);
	
	ХешСумма = ХешированиеДанных.ХешСумма;
	Если ТипЗнч(ХешСумма) = Тип("ДвоичныеДанные") Тогда
		ХешСуммаСтрокой = ПолучитьHexСтрокуИзДвоичныхДанных(ХешСумма);
	Иначе
		ХешСуммаСтрокой = Строка(ХешСумма);
	КонецЕсли;
	
	ДанныеОбъекта.СлужебныеДанные.КонтрольноеЗначениеДанныхСервиса = ХешСуммаСтрокой;
	
КонецПроцедуры

Функция КонтрольноеЗначениеДанныхКлассификатора(ДанныеОбъекта) Экспорт
	
	Возврат ДанныеОбъекта.СлужебныеДанные.КонтрольноеЗначениеДанныхСервиса;
	
КонецФункции


Процедура УстановитьДополнительныеПараметрыДанныхКлассификатора(ДанныеОбъекта, ИмяПараметра, ЗначениеПараметра)
	
	ДополнительныеПараметры = ДанныеОбъекта.СлужебныеДанные.ДополнительныеПараметры;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	ДанныеОбъекта.СлужебныеДанные.ДополнительныеПараметры = ДополнительныеПараметры;
	
КонецПроцедуры

Функция ПолучитьДополнительныеПараметрыДанныхКлассификатора(ДанныеОбъекта, ИмяПараметра)
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта.СлужебныеДанные.ДополнительныеПараметры, ИмяПараметра);
	
КонецФункции

#КонецОбласти // ПризнакиСлужебныхДанных


////////////////////////////////////////////////////////////////////////////////
// Работа с Журналом регистрации
#Область РаботаСЖурналомРегистрации

Процедура ЗаписатьОшибкуВЖурналРегистрации(Текст, ИмяСобытия = "", Данные = Неопределено) Экспорт
	
	ЗаписатьСобытиеВЖурналРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ИмяСобытия, Данные);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Текст, ИмяСобытия = "", Данные = Неопределено) Экспорт
	
	ЗаписатьСобытиеВЖурналРегистрации(Текст, УровеньЖурналаРегистрации.Информация, ИмяСобытия, Данные);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеВЖурналРегистрации(Текст, Уровень, Уточнение = "", Данные = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Облачные классификаторы Больничная аптека'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если Не ПустаяСтрока(Уточнение) Тогда
		ИмяСобытия = ИмяСобытия + "." + Уточнение;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,, Данные, Текст);
	
КонецПроцедуры

#КонецОбласти // РаботаСЖурналомРегистрации


////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция ДоступныеТипыЕдиницИзмерения()
	
	ДоступныеТипыЕдиницИзмерения = Новый Соответствие;
	Для Каждого Значение Из Перечисления.ТипыЕдиницИзмерения Цикл
		ДоступныеТипыЕдиницИзмерения.Вставить(Строка(Значение), Значение);
	КонецЦикла;
	
	Возврат ДоступныеТипыЕдиницИзмерения;
	
КонецФункции

Функция ТипЕдиницыИзмеренияПоТипуИзмеряемыйВеличины(ДоступныеТипыЕдиницИзмерения, ТипИзмеряемойВеличины)
	
	ТипЕдиницы = Неопределено;
	Если ЗначениеЗаполнено(ТипИзмеряемойВеличины) Тогда
		ТипЕдиницы = ДоступныеТипыЕдиницИзмерения.Получить(ТипИзмеряемойВеличины);
	КонецЕсли;
	
	Возврат ТипЕдиницы;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции
