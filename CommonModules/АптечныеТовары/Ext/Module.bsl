////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Заполнение элемента регистра лекарственных средств
#Область ЗаполнениеЭлементаРегистраЛекарственныхСредств

// Процедура заполняет элемент справочника КАТ из структуры
//
// Параметры:
//  Объект                                  - элемент справочника КАТ
//  СтруктураЗаполнения                     - структура значений полей КАТ
//  ИзменятьКлючевыеПоляЗаписанногоЭлемента - Булево - признак перезаписи основных полей препарата
//                                                     (торговое наименование, действующие вещества, и т.д.).
//
Процедура ЗаполнитьЭлементСправочникаКАТИзСтруктуры(Объект, СтруктураЗаполнения, ИзменятьКлючевыеПоляЗаписанногоЭлемента = Ложь) Экспорт
	
	Если Не СтруктураЗаполнения.Свойство("НомерРЛС") Тогда
		СтруктураЗаполнения.Вставить("НомерРЛС", 0);
	КонецЕсли;
	Если Не СтруктураЗаполнения.Свойство("ДатаОбновления") Тогда
		СтруктураЗаполнения.Вставить("ДатаОбновления", '00010101');
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаОбновления) > НачалоДня(СтруктураЗаполнения.ДатаОбновления) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НомерРЛС = СтруктураЗаполнения.НомерРЛС;
	Объект.ДатаОбновления = СтруктураЗаполнения.ДатаОбновления;
	Объект.СсылкаНаОписаниеВБазеРЛС = СтруктураЗаполнения.СсылкаНаОписаниеВБазеРЛС;
	Объект.Наименование = СтруктураЗаполнения.Наименование;
	Объект.НаименованиеПолное = СтруктураЗаполнения.Наименование;
	
	СозданиеНового = Объект.ЭтоНовый();
	ИзменятьКлючевыеПоля = СозданиеНового Или ИзменятьКлючевыеПоляЗаписанногоЭлемента;
	
	Если ИзменятьКлючевыеПоля Тогда
		ЗаполнитьОсновныеПоляПрепарата(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
	ЗаполнитьДополнительныеПоляПрепарата(Объект, СтруктураЗаполнения);
	ЗаполнитьПринадлежностьКСпискам(Объект, СтруктураЗаполнения);
	ЗаполнитьДанныеРегистрационногоУдостоверения(Объект, СтруктураЗаполнения);
	
	Если СозданиеНового Тогда
		ЗаполнитьГруппуПКУПрепарата(Объект, СтруктураЗаполнения)
	КонецЕсли;
	
КонецПроцедуры

// Функция находит/создает элемент справочника
//
// Параметры:
//  МетаданныеСправочника - метаданные справочника, для которого требуется вернуть элемент
//  Отбор - структура поиска элемента справочника, ключи структуры должны совпадать
//          с именами реквизитов справочника.
//  ПоляНовогоЭлемента - структура заполнения полей нового элемента справочника, используется, если 
//                       элемент не найден.
// Возвращаемое значение:
//  СправочникСсылка - элемент справочника
//
Функция НайтиСоздатьЭлементСправочника(МетаданныеСправочника, Отбор, ПоляНовогоЭлемента = Неопределено) Экспорт
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	СправочникМенеджер = Справочники[ИмяСправочника];
	
	Результат = СправочникМенеджер.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник
	|ГДЕ
	|";
	
	ТекстОтбора = "";
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") Тогда
			ТекстОтбора = ТекстОтбора + " И Справочник." + ЭлементОтбора.Ключ + " В (&" + ЭлементОтбора.Ключ + ")";
		Иначе
			ТекстОтбора = ТекстОтбора + " И Справочник." + ЭлементОтбора.Ключ + " = &" + ЭлементОтбора.Ключ;
		КонецЕсли;
		Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + Сред(ТекстОтбора, 3);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьЭлемент = Не РезультатЗапроса.Пустой();
	Если ЕстьЭлемент Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	ИначеЕсли ПоляНовогоЭлемента <> Неопределено Тогда
		НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
		Если ТипЗнч(ПоляНовогоЭлемента) = Тип("Структура") 
			ИЛИ ТипЗнч(ПоляНовогоЭлемента) = Тип("Соответствие") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПоляНовогоЭлемента);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовыйЭлемент.Код) И Не МетаданныеСправочника.Автонумерация Тогда
			НовыйЭлемент.УстановитьНовыйКод();
		КонецЕсли;
		Попытка
			Если НовыйЭлемент.ПроверитьЗаполнение() Тогда
				НовыйЭлемент.Записать();
				Результат = НовыйЭлемент.Ссылка;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru='Создание элемента справочника %Наименование%:'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", МетаданныеСправочника.Синоним);
			ВызватьИсключение ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция находит/создает элемент справочника по коду
//
// Параметры:
//  КодСправочника - код справочника
//  МетаданныеСправочника - метаданные справочника, для которого требуется вернуть элемент
//  СоздаватьИзКлассификатора - признак использования классификатора
//  ПЗ - построитель отчета с данными классификатора, если не указан,
//       то создается на основании макета "Классификатор" справочника.
//
// Возвращаемое значение:
//  СправочникСсылка - элемент справочника или пустая ссылка
//
Функция ПолучитьСоздатьЭлементСправочникаПоКоду(Знач КодСправочника, МетаданныеСправочника, СоздаватьИзКлассификатора = Ложь, ПЗ = Неопределено) Экспорт
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	СправочникМенеджер = Справочники[ИмяСправочника];
	
	Результат = СправочникМенеджер.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(КодСправочника) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДлинаКода = МетаданныеСправочника.ДлинаКода;
	
	КодСправочникаДляПоиска = СокрЛП(КодСправочника);
	Пока СтрДлина(КодСправочникаДляПоиска) < ДлинаКода Цикл
		КодСправочникаДляПоиска = "0" + КодСправочникаДляПоиска;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодСправочникаДляПоиска);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник
	|ГДЕ
	|	Справочник.Код = &Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьЭлемент = Не РезультатЗапроса.Пустой();
	Если ЕстьЭлемент Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	ИначеЕсли СоздаватьИзКлассификатора Тогда	
		Если ПЗ = Неопределено Тогда
			Шаблон = СправочникМенеджер.ПолучитьМакет("Классификатор");
			
			ПЗ = Новый ПостроительОтчета;
			
			ТаблицаШаблона = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Шаблон.ПолучитьТекст()).Данные;
			ТаблицаШаблона.Колонки.Код.Имя = "Код1";
			
			КС = Новый КвалификаторыСтроки(ДлинаКода);
			
			ТаблицаШаблона.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",, КС));
			ТаблицаШаблона.ЗагрузитьКолонку(ТаблицаШаблона.ВыгрузитьКолонку("Код1"), "Код");
			
			ТаблицаШаблона.Колонки.Удалить("Код1");
			
			ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаШаблона);
			ПЗ.Отбор.Добавить("Код");
		КонецЕсли;
		
		ПЗ.Отбор.Код.Установить(КодСправочника);
		ПЗ.Выполнить();
		Если ПЗ.Результат.Пустой() Тогда
			// Может создать новый элемент???
		Иначе
			Выборка = ПЗ.Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				
				Если ЗначениеЗаполнено(Выборка.КодРодителя) Тогда
					Родитель = ПолучитьСоздатьЭлементСправочникаПоКоду(Выборка.КодРодителя, МетаданныеСправочника, СоздаватьИзКлассификатора, ПЗ);
				Иначе
					Родитель = СправочникМенеджер.ПустаяСсылка();
				КонецЕсли;
				Спр = СправочникМенеджер.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(Спр, Выборка);
				Спр.Родитель = Родитель;
				Спр.Код = КодСправочникаДляПоиска;
				Попытка
					Спр.Записать();
				Исключение
					ТекстСообщения = НСтр("ru='Создание элемента справочника %Наименование%:'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", МетаданныеСправочника.Синоним);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
				Результат = Спр.Ссылка;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Может создать новый элемент???
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция преобразует полученное значение принадлежности к спискам в перечисление
//
// Параметры:
//  ИмяПоля      - Строка - имя списка
//  ЗначениеПоля - Строка - значение из списка
//
// Возвращаемое значение:
//  Значение - ПеречислениеСсылка, Неопределено
//
Функция ПолучитьОписаниеПринадлежностиКСпискам(ИмяПоля, ЗначениеПоля) Экспорт
	
	Врем1 = СокрЛП(ВРег(ИмяПоля));
	Ответ = Неопределено;
	Если Врем1 = "STRONG" Тогда
		Ответ = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.ПустаяСсылка();
		Если Найти(ЗначениеПоля,"1")> 0 Тогда
			Ответ = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Сильнодействующие;
		ИначеЕсли Найти(ЗначениеПоля,"2")> 0 Тогда
			Ответ = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Яды;
		КонецЕсли;
	ИначеЕсли Врем1 = "NORECIPE" Тогда
		Ответ = (ЗначениеПоля = "1");
	ИначеЕсли Врем1 = "DLO" Тогда
		Ответ = (ЗначениеПоля = "1");
	ИначеЕсли Врем1 = "JNVLS" Тогда
		Ответ = Перечисления.СпискиЖНВЛП.ПустаяСсылка();
		Если ЗначениеПоля = "1" Тогда
			Ответ = Перечисления.СпискиЖНВЛП.НеВключеноВКонтрольЦен;
		ИначеЕсли ЗначениеПоля = "2" Тогда
			Ответ = Перечисления.СпискиЖНВЛП.ВключеноВКонтрольЦен;
		КонецЕсли;
	ИначеЕсли Врем1 = "NARCO" Тогда
		Ответ = Перечисления.СпискиНаркотическихВеществ.ПустаяСсылка();
		Если Найти(ЗначениеПоля,"1") > 0 Тогда
			Ответ = Перечисления.СпискиНаркотическихВеществ.Список1;
		ИначеЕсли Найти(ЗначениеПоля,"2") > 0 Тогда
			Ответ = Перечисления.СпискиНаркотическихВеществ.Список2;
		ИначеЕсли Найти(ЗначениеПоля,"3") > 0 Тогда
			Ответ = Перечисления.СпискиНаркотическихВеществ.Список3;
		ИначеЕсли Найти(ЗначениеПоля,"4") > 0 Тогда
			Ответ = Перечисления.СпискиНаркотическихВеществ.Список4;
		КонецЕсли;	
	ИначеЕсли Врем1 = "LISTTYPE" Тогда
		Ответ = Перечисления.СпискиАиБ.ПустаяСсылка();
		Если Найти(ЗначениеПоля,"1") > 0 Тогда
			Ответ = Перечисления.СпискиАиБ.СписокА;
		ИначеЕсли Найти(ЗначениеПоля,"2") > 0 Тогда
			Ответ = Перечисления.СпискиАиБ.СписокБ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает существующий или создает новый объект в базе по номеру РЛС.
//
// Параметры:
//  НомерРЛС - Число - номер РЛС
//  Объект - СправочникОбъект.РегистрЛекарственныхСредств - если параметр заполнить проверяется,
//           что других объектов с "НомеромРЛС" нет в базе и возвращается этот объект.
//  СозданНовыйОбъект - Возвращает Истина, если возвращен новый объект.
//
// Возвращаемое значение:
//  СправочникОбъект.РегистрЛекарственныхСредств
//
Функция ПолучитьОбъектПоНомеруРЛС(НомерРЛС, Объект = Неопределено, СозданНовыйОбъект = Ложь) Экспорт
	Перем ОбъектКАТ;
	
	ЭлементКАТ = Справочники.РегистрЛекарственныхСредств.НайтиПоРеквизиту("НомерРЛС", НомерРЛС);
	Если Объект = Неопределено Тогда
		
		Если ЭлементКАТ.Пустая() Тогда
			ОбъектКАТ = Справочники.РегистрЛекарственныхСредств.СоздатьЭлемент();
			СозданНовыйОбъект = Истина;
		Иначе
			ОбъектКАТ = ЭлементКАТ.ПолучитьОбъект();
		КонецЕсли;
			
	Иначе
		
		Если ЭлементКАТ.Пустая() Или Объект.Ссылка = ЭлементКАТ Тогда
			
			ОбъектКАТ = Объект;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Элемент с номером РЛС ""%1"" уже существует в базе. Присоединение невозможно.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НомерРЛС);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектКАТ;
	
КонецФункции

#КонецОбласти // ЗаполнениеЭлементаРегистраЛекарственныхСредств

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с РЛС и ЕСКЛП
#Область ПроцедурыРаботыСРЛСиЕСКЛП

// Создают элемент справочника номенклатуры на основании элементов КАТ
//
// Параметры:
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - данные для заполнения создаваемого объекта
//  СписокСсылок    - Массив ссылок элементов КАТ
// Возвращаемое значение:
//  Число - количество обработанных элементов
//
Функция СоздатьНоменклатуруПоКлассификатору(ВидНоменклатуры, СписокСсылок) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КлассификаторАптечныхТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрЛекарственныхСредств КАК КлассификаторАптечныхТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК СписокНоменклатуры
	|		ПО
	|			СписокНоменклатуры.ЭлементКАТ = КлассификаторАптечныхТоваров.Ссылка
	|			И СписокНоменклатуры.ЭтоЛекарственноеСредство
	|ГДЕ
	|	КлассификаторАптечныхТоваров.Ссылка В (&СписокСсылок)
	|	И СписокНоменклатуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторАптечныхТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КЛП КАК КлассификаторАптечныхТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК СписокНоменклатуры
	|		ПО
	|			СписокНоменклатуры.ЭлементКАТ = КлассификаторАптечныхТоваров.Ссылка
	|			И СписокНоменклатуры.ЭтоЛекарственноеСредство
	|ГДЕ
	|	КлассификаторАптечныхТоваров.Ссылка В (&СписокСсылок)
	|	И СписокНоменклатуры.Ссылка ЕСТЬ NULL
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	КоличествоОбработанных = 0;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлементКАТ = Выборка.Ссылка;
		
		Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		Номенклатура.Заполнить(Новый Структура("ВидНоменклатуры, ЭлементКАТ", ВидНоменклатуры, ЭлементКАТ));
		
		Попытка
			Если Номенклатура.ПроверитьЗаполнение() Тогда
				Номенклатура.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Иначе
				ТекстОшибки = НСтр("ru='Ошибка создания элемента справочника ""Номенклатура"" на основании элемента ""%1"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", СокрЛП(ЭлементКАТ));
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭлементКАТ);
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка записи элемента справочника ""Номенклатура"":'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки + " " + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции


// Заполняет Группу ПКУ на основании данных СтруктурыЗаполнения
//
// Параметры:
//  Объект - СправочникОбъект.КлассификаторАптечныхТоваров
//  СтруктураЗаполнения - Структура с полями "НаркотическоеВещество" и "СильнодействующиеИЯды"
//
Процедура ЗаполнитьГруппуПКУПрепарата(Объект, СтруктураЗаполнения) Экспорт
	
	Если СтруктураЗаполнения.Свойство("Наркотические") И ЗначениеЗаполнено(СтруктураЗаполнения.Наркотические) Тогда
		ГруппаПКУ = Справочники.ГруппыПКУ.Наркотики;
	ИначеЕсли СтруктураЗаполнения.СильнодействующиеИЯды = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Сильнодействующие Тогда
		ГруппаПКУ = Справочники.ГруппыПКУ.Сильнодействующие;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДействующиеВеществаМНН) И Найти(ВРег(Объект.ДействующиеВеществаМНН), НСтр("ru = 'ЭТАНОЛ'")) Тогда
		ГруппаПКУ = Справочники.ГруппыПКУ.Спирты;
	ИначеЕсли СтруктураЗаполнения.СильнодействующиеИЯды = Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.Яды Тогда
		ГруппаПКУ = Справочники.ГруппыПКУ.Яды;
	Иначе
		ГруппаПКУ = Справочники.ГруппыПКУ.ПрочиеЛС;
	КонецЕсли;
	
	Объект.ГруппаПКУ = ГруппаПКУ;
	
КонецПроцедуры

// Получить текущее состояние принадлежности к спискам по ссылке справочника Регистр аптечных товаров.
//
// Параметры:
//  АптечныйТовар - СправочникСсылка.КЛП, СправочникСсылка.РегистрЛекарственныхСредств - ссылка, по которой получается
//                  текущее состояние принадлежности к спискам.
//
// Возвращаемое значение:
//  ПринадлежностьКСпискам - Структура - текущее состояние принадлежности к спискам
//
Функция ПолучитьПринадлежностьКСпискам(АптечныйТовар) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("БезрецептурныйОтпуск" , Ложь);
	Результат.Вставить("ЖНВЛП"                , Перечисления.СпискиЖНВЛП.ПустаяСсылка());
	Результат.Вставить("Наркотические"        , Перечисления.СпискиНаркотическихВеществ.ПустаяСсылка());
	Результат.Вставить("СильнодействующиеИЯды", Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.ПустаяСсылка());
	Результат.Вставить("ПринадлежностьК7ВЗН"  , Ложь);
	Результат.Вставить("СпискиАиБ"            , Перечисления.СпискиАиБ.ПустаяСсылка());
	Результат.Вставить("ДЛО"                  , Ложь);
	
	Результат.Вставить("ВНациональномКалендареПрививок"             , Ложь);
	Результат.Вставить("ВКалендареПрививокПоЭпидемическимПоказаниям", Ложь);
	
	Если ЗначениеЗаполнено(АптечныйТовар) Тогда
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("БезрецептурныйОтпуск");
		Реквизиты.Добавить("ЖНВЛП");
		Реквизиты.Добавить("Наркотические");
		Реквизиты.Добавить("СильнодействующиеИЯды");
		Если ТипЗнч(АптечныйТовар) = Тип("СправочникСсылка.КЛП") Тогда
			Реквизиты.Добавить("ПринадлежностьК7ВЗН");
			Реквизиты.Добавить("ВНациональномКалендареПрививок");
			Реквизиты.Добавить("ВКалендареПрививокПоЭпидемическимПоказаниям");
		ИначеЕсли ТипЗнч(АптечныйТовар) = Тип("СправочникСсылка.РегистрЛекарственныхСредств") Тогда
			Реквизиты.Добавить("СпискиАиБ");
			Реквизиты.Добавить("ДЛО");
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АптечныйТовар, Реквизиты);
		Если ЗначенияРеквизитов.БезрецептурныйОтпуск <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПринадлежностьКСпискам(Объект, СтруктураЗаполнения) Экспорт
	
	НовоеСостояние =  Новый Структура;
	НовоеСостояние.Вставить("БезрецептурныйОтпуск" , Ложь);
	НовоеСостояние.Вставить("ДЛО"                  , Ложь);
	НовоеСостояние.Вставить("ПринадлежностьК7ВЗН"  , Ложь);
	НовоеСостояние.Вставить("ЖНВЛП"                , Перечисления.СпискиЖНВЛП.ПустаяСсылка());
	НовоеСостояние.Вставить("Наркотические"        , Перечисления.СпискиНаркотическихВеществ.ПустаяСсылка());
	НовоеСостояние.Вставить("СильнодействующиеИЯды", Перечисления.СпискиСильнодействующихИЯдовитыхВеществ.ПустаяСсылка());
	НовоеСостояние.Вставить("СпискиАиБ"            , Перечисления.СпискиАиБ.ПустаяСсылка());
	
	НовоеСостояние.Вставить("ВНациональномКалендареПрививок"             , Ложь);
	НовоеСостояние.Вставить("ВКалендареПрививокПоЭпидемическимПоказаниям", Ложь);
	
	ЗаполнитьЗначенияСвойств(НовоеСостояние, СтруктураЗаполнения);
	
	ЗаполнитьЗначенияСвойств(Объект, НовоеСостояние);
	
КонецПроцедуры

// Возвращает возможные статусы действия препаратов.
//
// Возвращаемое значение:
//  Соответствие - список статусов. Ключ - код статуса, Значение - представление.
//
Функция ВозможныеСтатусыДействияПрепарата() Экспорт
	
	Статусы = Новый Соответствие;
	Статусы.Вставить(1 , НСтр("ru = 'Действует'"));
	Статусы.Вставить(2 , НСтр("ru = 'Истек срок'"));
	Статусы.Вставить(3 , НСтр("ru = 'Аннулирована регистрация'"));
	Статусы.Вставить(4 , НСтр("ru = 'Снято по просьбе фирмы'"));
	Статусы.Вставить(5 , НСтр("ru = 'Заменено'"));
	Статусы.Вставить(10, НСтр("ru = 'Процесс регистрации'"));
	Статусы.Вставить(99, НСтр("ru = 'Фиктивная регистрация'"));
	
	Возврат Статусы;
	
КонецФункции

// Избавляется от дублей Элементов КАТ и заменяет ссылки
// соответствующих элементов справочника Номенклатура.
//
// Параметры:
//  ЭлементКАТ - СправочникСсылка.КЛП, СправочникСсылка.РегистрЛекарственныхСредств - ссылка элемента КАТ
//  ДубльКАТ   - СправочникСсылка.КЛП, СправочникСсылка.РегистрЛекарственныхСредств - дубль ссылки элемента КАТ
//
Процедура ОбработатьДубльЭлементаКАТ(ЭлементКАТ, ДубльКАТ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = ДубльКАТ.ПолучитьОбъект();
	Объект.УстановитьПометкуУдаления(Истина, Истина);
	
	НоменклатураДубля = ПолучитьНоменклатуруПоЭлементуКАТ(ДубльКАТ);
	Если ЗначениеЗаполнено(НоменклатураДубля) Тогда
		
		Номенклатура = ПолучитьНоменклатуруПоЭлементуКАТ(ЭлементКАТ);
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			СоответствиеЭлементов = Новый Соответствие;
			СоответствиеЭлементов.Вставить(НоменклатураДубля, Номенклатура);
			
			ПараметрыЗамены = ОбщегоНазначения.ПараметрыЗаменыСсылок();
			ПараметрыЗамены.СпособУдаления = "Пометка";
			ПараметрыЗамены.ВключатьБизнесЛогику = Ложь;
			
			ОбщегоНазначения.ЗаменитьСсылки(СоответствиеЭлементов, ПараметрыЗамены);
			
		Иначе
			
			НоменклатураОбъект = НоменклатураДубля.ПолучитьОбъект();
			НоменклатураОбъект.ЭлементКАТ = ЭлементКАТ;
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			НоменклатураОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Определяет одинаковость описаний препаратов
//
// Параметры:
//  ПервоеОписаниеПрепарата - Структура - описание сравниваемого препарата
//  ВтороеОписаниеПрепарата - Структура - описание сравниваемого препарата
//
// Возвращаемое значение
//  Булево
//    Истина - препараты синонимичны
//    Ложь   - препараты не синонимичны
//
Функция ПрепаратыСинонимичны(ПервоеОписаниеПрепарата, ВтороеОписаниеПрепарата) Экспорт
	
	Совпадают = (ЗначениеЗаполнено(ПервоеОписаниеПрепарата.ТорговоеНаименование)
					И ЗначениеЗаполнено(ВтороеОписаниеПрепарата.ТорговоеНаименование)
					И ПервоеОписаниеПрепарата.ТорговоеНаименование = ВтороеОписаниеПрепарата.ТорговоеНаименование);
	Совпадают = Совпадают
		Или (ЗначениеЗаполнено(ПервоеОписаниеПрепарата.ДействующиеВеществаМНН)
			И ЗначениеЗаполнено(ВтороеОписаниеПрепарата.ДействующиеВеществаМНН)
			И ПервоеОписаниеПрепарата.ДействующиеВеществаМНН = ВтороеОписаниеПрепарата.ДействующиеВеществаМНН);
		
	Совпадают = Совпадают И ФормыВыпускаСовпадают(ПервоеОписаниеПрепарата.ФормаВыпуска, ВтороеОписаниеПрепарата.ФормаВыпуска);
	
	Возврат Совпадают;
	
КонецФункции

// Возвращает результат сравнения форм выпуска препарата
//
// Параметры:
//  ПерваяФормаВыпуска - СправочникСсылка.ФормыВыпуска - сравниваемая форма выпуска
//  ВтораяФормаВыпуска - СправочникСсылка.ФормыВыпуска - сравниваемая форма выпуска
//
// Возвращаемое значение:
//  Булево
//    Истина - формы выпуска совпадают
//    Ложь   - формы выпуска не совпадают
//
Функция ФормыВыпускаСовпадают(Знач ПерваяФормаВыпуска, Знач ВтораяФормаВыпуска) Экспорт
	
	Если ПерваяФормаВыпуска = ВтораяФормаВыпуска Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерваяФормаВыпуска", ПерваяФормаВыпуска);
	Запрос.УстановитьПараметр("ВтораяФормаВыпуска", ВтораяФормаВыпуска);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ФормыВыпуска КАК ПерваяФормаВыпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ФормыВыпуска КАК ВтораяФормаВыпуска
	|			ПО
	|				ПерваяФормаВыпуска.Ссылка = &ПерваяФормаВыпуска
	|				И ВтораяФормаВыпуска.Ссылка = &ВтораяФормаВыпуска
	|			И (ПерваяФормаВыпуска.Ссылка = ВтораяФормаВыпуска.Ссылка
	|				ИЛИ(
	|				(ПерваяФормаВыпуска.ЛекарственнаяФорма = ВтораяФормаВыпуска.ЛекарственнаяФорма
	|						ИЛИ (НЕ ПерваяФормаВыпуска.ЛекарственнаяФорма.Группа = ЗНАЧЕНИЕ(Справочник.ГруппыЛекарственныхФорм.ПустаяСсылка)
	|								И ПерваяФормаВыпуска.ЛекарственнаяФорма.Группа = ВтораяФормаВыпуска.ЛекарственнаяФорма.Группа))
	|				И (ПерваяФормаВыпуска.ЕдиницаИзмерения = ВтораяФормаВыпуска.ЕдиницаИзмерения
	|						И ПерваяФормаВыпуска.Количество = ВтораяФормаВыпуска.Количество
	|					ИЛИ
	|						ВЫБОР
	|							КОГДА ПерваяФормаВыпуска.ЕдиницаИзмерения.ТипЕдиницы = ВтораяФормаВыпуска.ЕдиницаИзмерения.ТипЕдиницы
	|								ТОГДА ВЫБОР
	|										КОГДА ПерваяФормаВыпуска.ЕдиницаИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|											ТОГДА ПерваяФормаВыпуска.Количество * ПерваяФормаВыпуска.ЕдиницаИзмерения.Коэффициент
	|													= ВтораяФормаВыпуска.Количество * ВтораяФормаВыпуска.ЕдиницаИзмерения.Коэффициент
	|										ИНАЧЕ ПерваяФормаВыпуска.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения = ВтораяФормаВыпуска.ЕдиницаИзмерения
	|												И ПерваяФормаВыпуска.Количество * ПерваяФормаВыпуска.ЕдиницаИзмерения.Коэффициент =
	|													ВтораяФормаВыпуска.Количество
	|											ИЛИ
	|												ПерваяФормаВыпуска.ЕдиницаИзмерения = ВтораяФормаВыпуска.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения
	|												И ПерваяФормаВыпуска.Количество =
	|													ВтораяФормаВыпуска.Количество * ВтораяФормаВыпуска.ЕдиницаИзмерения.Коэффициент
	|											ИЛИ
	|												ПерваяФормаВыпуска.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения = ВтораяФормаВыпуска.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения
	|												И ПерваяФормаВыпуска.Количество * ПерваяФормаВыпуска.ЕдиницаИзмерения.Коэффициент =
	|													ВтораяФормаВыпуска.Количество * ВтораяФормаВыпуска.ЕдиницаИзмерения.Коэффициент
	|									КОНЕЦ
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				)
	|				И ПерваяФормаВыпуска.НеНормализованныеДанные = ВтораяФормаВыпуска.НеНормализованныеДанные))
	|";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


// Функция получает реквизиты ФормыВыпуска
//
// Параметры
//  Номенклатура - ссылка на элемент справочника Номенклатура
//  ИменаРеквизитов - строка, имена реквизитов, которые требуется получить
//
// Возвращаемое значение
//  Структура - значения реквизитов
//
Функция ПолучитьРеквизитыФормыВыпуска(Знач ФормаВыпуска) Экспорт
	
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("ЛекарственнаяФорма"       );
	ЗапрашиваемыеПоля.Вставить("ГруппаЛекарственныхФорм", "ЛекарственнаяФорма.Группа");
	ЗапрашиваемыеПоля.Вставить("ЕдиницаИзмерения"         );
	ЗапрашиваемыеПоля.Вставить("Количество"               );
	ЗапрашиваемыеПоля.Вставить("НеНормализованныеДанные"  );
	ЗапрашиваемыеПоля.Вставить("Характеристика"           );
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФормаВыпуска, ЗапрашиваемыеПоля)
	
КонецФункции

// Возвращает описание препарата (ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска).
//
// Параметры
//  Препарат - СправочникСсылка.КЛП, СправочникСсылка.РегистрЛекарственныхСредств
//
// Возвращаемое значение
//  Структура
//
Функция ОписаниеПрепарата(Знач Препарат) Экспорт
	
	Описание = Новый Структура;
	
	ЗапрашиваемыеРеквизиты = Новый Структура;
	ЗапрашиваемыеРеквизиты.Вставить("ТорговоеНаименование");
	ЗапрашиваемыеРеквизиты.Вставить("ДействующиеВеществаМНН", "ДействующиеВеществаМНН");
	ЗапрашиваемыеРеквизиты.Вставить("ФормаВыпуска");
	
	РеквизитыПрепарата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Препарат, ЗапрашиваемыеРеквизиты);
	Описание.Вставить("ТорговоеНаименование", РеквизитыПрепарата.ТорговоеНаименование);
	Описание.Вставить("ДействующиеВеществаМНН", РеквизитыПрепарата.ДействующиеВеществаМНН);
	Описание.Вставить("ФормаВыпуска", РеквизитыПрепарата.ФормаВыпуска);
	
	Возврат Описание;
	
КонецФункции

// Функция получает элемент справочника номенклатура по элементу КАТ
//
// Параметры:
//  ЭлементКАТ - элемент справочника КАТ
//
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура
//
Функция ПолучитьНоменклатуруПоЭлементуКАТ(Знач ЭлементКАТ) Экспорт
	
	Результат = Справочники.Номенклатура.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ЭлементКАТ) Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоЛекарственноеСредство
		|	И Номенклатура.ЭлементКАТ = &ЭлементКАТ
		|");
		
		Запрос.УстановитьПараметр("ЭлементКАТ", ЭлементКАТ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет поля номенклатуры по умолчанию на основании КАТ
//
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - Заполняемая номенклатура
//  Препарат     - СправочникСсылка.КЛП, СправочникСсылка.РегистрЛекарственныхСредств - аптечный товар, по которому заполняется номенклатура.
//  ДополнительныеПараметры - Структура - дополнительные параметры заполнения полей номенклатуры по аптечному товару.
//
Процедура ЗаполнитьПоляНоменклатурыПоАптечномуТовару(Номенклатура, Знач Препарат, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеРеквизиты = Новый Структура;
	ЗапрашиваемыеРеквизиты.Вставить("ЭлементКАТ", "Ссылка");
	ЗапрашиваемыеРеквизиты.Вставить("ТорговоеНаименование");
	ЗапрашиваемыеРеквизиты.Вставить("ДействующиеВеществаМНН");
	ЗапрашиваемыеРеквизиты.Вставить("ЕдиницаИзмерения"              , "БазоваяЕдиницаИзмеренияКАТ");
	ЗапрашиваемыеРеквизиты.Вставить("ГруппаПКУ");
	ЗапрашиваемыеРеквизиты.Вставить("ОКПД2");
	ЗапрашиваемыеРеквизиты.Вставить("Производитель"                 , "ФирмаПроизводитель");
	ЗапрашиваемыеРеквизиты.Вставить("Упаковка");
	ЗапрашиваемыеРеквизиты.Вставить("СрокГодности");
	ЗапрашиваемыеРеквизиты.Вставить("ЕдиницаИзмеренияСрокаГодности");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Препарат, ЗапрашиваемыеРеквизиты);
	
	Если Номенклатура.ТипНоменклатурыРасширенный <> Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru='Аптечный товар не может указываться для вида номенклатуры ""%1""'"), "%1", Номенклатура.ВидНоменклатуры);
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(Реквизиты.СрокГодности) И ЗначениеЗаполнено(Реквизиты.ЕдиницаИзмеренияСрокаГодности)) Тогда
		Реквизиты.Удалить("СрокГодности");
		Реквизиты.Удалить("ЕдиницаИзмеренияСрокаГодности");
	КонецЕсли;
	
	НеИзменятьМернуюБазовуюЕдиницуИзмерения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "НеИзменятьМернуюБазовуюЕдиницуИзмерения", Ложь);
	Если НеИзменятьМернуюБазовуюЕдиницуИзмерения Тогда
		Если Справочники.ЕдиницыИзмерения.МерныеТипыЕдиницИзмерений().Найти(Реквизиты.ЕдиницаИзмерения.ТипЕдиницы) <> Неопределено Тогда
			Реквизиты.Удалить("ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Номенклатура, Реквизиты);
	
	НеИзменятьМинимальнуюЕдиницуОтпускаИзАптеки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "НеИзменятьМинимальнуюЕдиницуОтпускаИзАптеки", Ложь);
	НеИзменятьОсновнуюЕдиницуУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "НеИзменятьОсновнуюЕдиницуУчета", Ложь);
	
	Если Не (НеИзменятьМинимальнуюЕдиницуОтпускаИзАптеки И НеИзменятьОсновнуюЕдиницуУчета) Тогда
		
		ВариантыЗаполненияЕдиницУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Номенклатура.ВидНоменклатуры,
			"ВариантЗаполненияМинимальнойЕдиницыОтпуска, ВариантЗаполненияОсновнойЕдиницыУчета");
		
		Если Не НеИзменятьМинимальнуюЕдиницуОтпускаИзАптеки Тогда
			Если ЗначениеЗаполнено(ВариантыЗаполненияЕдиницУчета.ВариантЗаполненияМинимальнойЕдиницыОтпуска) Тогда
				Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки = ПолучитьУпаковкуПоВариантуЗаполнения(Номенклатура, ВариантыЗаполненияЕдиницУчета.ВариантЗаполненияМинимальнойЕдиницыОтпуска);
			Иначе
				Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НеИзменятьОсновнуюЕдиницуУчета Тогда
			Если ЗначениеЗаполнено(ВариантыЗаполненияЕдиницУчета.ВариантЗаполненияОсновнойЕдиницыУчета) Тогда
				Номенклатура.ОсновнаяЕдиницаУчета = ПолучитьУпаковкуПоВариантуЗаполнения(Номенклатура, ВариантыЗаполненияЕдиницУчета.ВариантЗаполненияОсновнойЕдиницыУчета);
			Иначе
				Номенклатура.ОсновнаяЕдиницаУчета = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Номенклатура.ОКПД2 = Справочники.КлассификаторОКПД2.НайтиПоКоду(Реквизиты.ОКПД2);
	
	Справочники.Номенклатура.ОтработатьЛогикуСвязиРеквизитов(Номенклатура);
	
КонецПроцедуры

#КонецОбласти // ПроцедурыРаботыСРЛСиЕСКЛП

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с единицами измерения
#Область ПроцедурыРаботыСЕдиницамиИзмерения

// Функция получает все упаковки элемента КАТ
//
// Параметры:
//  ЭлементКАТ - ссылка на элемент справочника КАТ
//
// Возвращаемое значение:
//  Массив - массив упаковок элемента справочника КАТ
//
Функция ПолучитьУпаковкиКАТ(ЭлементКАТ) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭлементКАТ);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Упаковки.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиЛекарственныхСредств КАК Упаковки
	|ГДЕ
	|	Упаковки.КАТ = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерУпаковки УБЫВ
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Упаковка");
	
	Возврат Результат;
	
КонецФункции

// Возвращает основную единицу измерения препарата по описанию.
//
// Параметры:
//  ОписаниеПрепарата - Структура
//    ТорговоеНаименование   - СправочникСсылка.ТорговыеНаименования
//    ДействующиеВеществаМНН - СправочникСсылка.ДействующиеВеществаМНН
//    ФормаВыпуска           - СправочникСсылка.ФормыВыпуска
//
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмерения - если основную единицу измерения определить не удалось, то ПустаяСсылка.
//
Функция ОсновнаяЕдиницаИзмерения(ОписаниеПрепарата) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.Упаковка     КАК Упаковка,
	|	ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ  КАК БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|				ИЛИ ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                     КАК ШтучныйТовар,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                     КАК ВесовойТовар,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                     КАК ОбъемныйТовар
	|ПОМЕСТИТЬ ВТПервичныеУпаковки
	|ИЗ
	|	Справочник.КЛП КАК ОписанияЛекарственныхСредств
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК Упаковки
	|	ПО
	|		Упаковки.КАТ = ОписанияЛекарственныхСредств.Ссылка
	|		И Упаковки.НомерУпаковки = 1
	|ГДЕ
	|	ВЫБОР
	|		КОГДА (&ТорговоеНаименование <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = &ТорговоеНаименование
	|		КОГДА (&ДействующиеВеществаМНН <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ДействующиеВеществаМНН = &ДействующиеВеществаМНН
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ОписанияЛекарственныхСредств.ФормаВыпуска = &ФормаВыпуска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.Упаковка     КАК Упаковка,
	|	ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ  КАК БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|				ИЛИ ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                     КАК ШтучныйТовар,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                     КАК ВесовойТовар,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                     КАК ОбъемныйТовар
	|ИЗ
	|	Справочник.РегистрЛекарственныхСредств КАК ОписанияЛекарственныхСредств
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК Упаковки
	|	ПО
	|		Упаковки.КАТ = ОписанияЛекарственныхСредств.Ссылка
	|		И Упаковки.НомерУпаковки = 1
	|ГДЕ
	|	ВЫБОР
	|		КОГДА (&ТорговоеНаименование <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = &ТорговоеНаименование
	|		КОГДА (&ДействующиеВеществаМНН <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ДействующиеВеществаМНН = &ДействующиеВеществаМНН
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ОписанияЛекарственныхСредств.ФормаВыпуска = &ФормаВыпуска
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1                                                 КАК Приоритет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПервичныеУпаковки.Упаковка)  КАК КоличествоЕдиниц,
	|	МАКСИМУМ(ПервичныеУпаковки.Упаковка)              КАК ОсновнаяЕдиницаИзмерения,
	|	МАКСИМУМ(ПервичныеУпаковки.ШтучныйТовар)          КАК ШтучныйТовар,
	|	МАКСИМУМ(ПервичныеУпаковки.ВесовойТовар)          КАК ВесовойТовар,
	|	МАКСИМУМ(ПервичныеУпаковки.ОбъемныйТовар)         КАК ОбъемныйТовар
	|ИЗ
	|	ВТПервичныеУпаковки КАК ПервичныеУпаковки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                             КАК Приоритет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БазовыеЕдиницы.БазоваяЕдиницаИзмерения)  КАК КоличествоЕдиниц,
	|	МАКСИМУМ(БазовыеЕдиницы.БазоваяЕдиницаИзмерения)              КАК ОсновнаяЕдиницаИзмерения,
	|	МАКСИМУМ(БазовыеЕдиницы.ШтучныйТовар)                         КАК ШтучныйТовар,
	|	МАКСИМУМ(БазовыеЕдиницы.ВесовойТовар)                         КАК ВесовойТовар,
	|	МАКСИМУМ(БазовыеЕдиницы.ОбъемныйТовар)                        КАК ОбъемныйТовар
	|ИЗ
	|	ВТПервичныеУпаковки КАК БазовыеЕдиницы
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоЕдиниц,
	|	Приоритет
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТорговоеНаименование"  , ?(ЗначениеЗаполнено(ОписаниеПрепарата.ТорговоеНаименование), ОписаниеПрепарата.ТорговоеНаименование, Неопределено));
	Запрос.УстановитьПараметр("ДействующиеВеществаМНН", ?(ЗначениеЗаполнено(ОписаниеПрепарата.ДействующиеВеществаМНН), ОписаниеПрепарата.ДействующиеВеществаМНН, Неопределено));
	Запрос.УстановитьПараметр("ФормаВыпуска"          , ОписаниеПрепарата.ФормаВыпуска);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ОсновнаяЕдиницаИзмерения) Тогда
		Если Выборка.КоличествоЕдиниц = 1 Тогда
			Возврат Выборка.ОсновнаяЕдиницаИзмерения;
		ИначеЕсли Не Выборка.ШтучныйТовар Тогда
			Если Выборка.ВесовойТовар Тогда
				Возврат Константы.ЕдиницаИзмеренияВеса.Получить();
			Иначе
				Возврат Константы.ЕдиницаИзмеренияОбъема.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции

// Возвращает единицы измерения препарата по описанию
//
// Параметры:
//  ОписаниеПрепарата - Структура
//    ТорговоеНаименование   - СправочникСсылка.ТорговыеНаименования
//    ДействующиеВеществаМНН - СправочникСсылка.ДействующиеВеществаМНН
//    ФормаВыпуска           - СправочникСсылка.ФормыВыпуска
//
// Возвращаемое значение:
//  Массив(СправочникСсылка.ЕдиницыИзмерения)
//
Функция ЕдиницыИзмеренияПрепарата(ОписаниеПрепарата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыбораЕдиницАптечногоТовара();
	Запрос.УстановитьПараметр("ТорговоеНаименование"  , ?(ЗначениеЗаполнено(ОписаниеПрепарата.ТорговоеНаименование), ОписаниеПрепарата.ТорговоеНаименование, Неопределено));
	Запрос.УстановитьПараметр("ДействующиеВеществаМНН", ?(ЗначениеЗаполнено(ОписаниеПрепарата.ДействующиеВеществаМНН), ОписаниеПрепарата.ДействующиеВеществаМНН, Неопределено));
	Запрос.УстановитьПараметр("ФормаВыпуска"          , ОписаниеПрепарата.ФормаВыпуска);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Функция получает текст запроса для формы выбора единицы аптечного товара
//
// Возвращаемое значение:
//  Текст - текст запроса
//
Функция ТекстЗапросаВыбораЕдиницАптечногоТовара(ИмяВременнойТаблицы = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.НомерУпаковки                                   КАК НомерУпаковки,
	|	Упаковки.Упаковка                                        КАК Упаковка,
	|	ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ  КАК БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|				ИЛИ ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                    КАК ШтучныйТовар
	|ПОМЕСТИТЬ ВТУпаковкиПрепарата
	|ИЗ
	|	Справочник.КЛП КАК ОписанияЛекарственныхСредств
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК Упаковки
	|	ПО
	|		Упаковки.КАТ = ОписанияЛекарственныхСредств.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА (&ТорговоеНаименование <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = &ТорговоеНаименование
	|		КОГДА (&ДействующиеВеществаМНН <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ДействующиеВеществаМНН = &ДействующиеВеществаМНН
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ОписанияЛекарственныхСредств.ФормаВыпуска = &ФормаВыпуска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.НомерУпаковки                                   КАК НомерУпаковки,
	|	Упаковки.Упаковка                                        КАК Упаковка,
	|	ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ  КАК БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|				ИЛИ ОписанияЛекарственныхСредств.БазоваяЕдиницаИзмеренияКАТ.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                    КАК ШтучныйТовар
	|ИЗ
	|	Справочник.РегистрЛекарственныхСредств КАК ОписанияЛекарственныхСредств
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиЛекарственныхСредств КАК Упаковки
	|	ПО
	|		Упаковки.КАТ = ОписанияЛекарственныхСредств.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА (&ТорговоеНаименование <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = &ТорговоеНаименование
	|		КОГДА (&ДействующиеВеществаМНН <> НЕОПРЕДЕЛЕНО)
	|			ТОГДА ОписанияЛекарственныхСредств.ДействующиеВеществаМНН = &ДействующиеВеществаМНН
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ОписанияЛекарственныхСредств.ФормаВыпуска = &ФормаВыпуска
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ПОМЕСТИТЬ ВТЕдиницаМассыОбъемнаяЕдиница
	|ИЗ
	|	ВТУпаковкиПрепарата КАК Упаковки
	|ГДЕ
	|	НЕ Упаковки.ШтучныйТовар
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	10 - УпаковкиПрепарата.НомерУпаковки  КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка               КАК Ссылка,
	|	ЕдиницыИзмерения.Наименование         КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное   КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент          КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТУпаковкиПрепарата КАК УпаковкиПрепарата
	|	ПО
	|		УпаковкиПрепарата.Упаковка = ЕдиницыИзмерения.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	20                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТУпаковкиПрепарата КАК УпаковкиПрепарата
	|	ПО
	|		УпаковкиПрепарата.ШтучныйТовар
	|		И УпаковкиПрепарата.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	30                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТЕдиницаМассыОбъемнаяЕдиница КАК ЕдиницаМассыОбъемнаяЕдиница
	|	ПО
	|		ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Вес)
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	40                                   КАК Порядок,
	|	ЕдиницыИзмерения.Ссылка              КАК Ссылка,
	|	ЕдиницыИзмерения.Наименование        КАК Наименование,
	|	ЕдиницыИзмерения.НаименованиеПолное  КАК НаименованиеПолное,
	|	ЕдиницыИзмерения.Коэффициент         КАК Коэффициент
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТЕдиницаМассыОбъемнаяЕдиница КАК ЕдиницаМассыОбъемнаяЕдиница
	|	ПО
	|		ЕдиницыИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Объем)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Коэффициент УБЫВ,
	|	НаименованиеПолное УБЫВ
	|";
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ПоследнийЗапрос.Порядок.Очистить();
		ПоследнийЗапрос.ТаблицаДляПомещения = ИмяВременнойТаблицы;
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ПроцедурыРаботыСЕдиницамиИзмерения

////////////////////////////////////////////////////////////////////////////////
// Функции генерации наименования номенклатуры
#Область ФункцииГенерацииНаименованияНоменклатуры

// Функция формирует наименование аптечного товара
//
// Параметры:
//  Объект - СправочникОбъект.РегистрЛекарственныхСредств,
//           СправочникОбъект.КЛП - объект,
//           из данных которого формируется наименование аптечного товара.
//
// Возвращаемое значение:
//  Результат - Строка - наименование аптечного товара
//
Функция ПолучитьНаименованияАптечногоТовара(Объект) Экспорт
	
	Результат = "";
	Если ЗначениеЗаполнено(Объект.ТорговоеНаименование) Тогда
		Результат = Результат + СокрЛП(Объект.ТорговоеНаименование);
	ИначеЕсли ЗначениеЗаполнено(Объект.ДействующиеВеществаМНН) Тогда
		НаименованиеДействующегоВещества = СокрЛП(Объект.ДействующиеВеществаМНН);
		НачПоз = СтрНайти(НаименованиеДействующегоВещества, "(");
		Если НачПоз > 0 Тогда
			НаименованиеДействующегоВещества = Лев(НаименованиеДействующегоВещества, НачПоз - 1);
		КонецЕсли;
		Результат = Результат + СокрЛП(НаименованиеДействующегоВещества);
	КонецЕсли;
	
	Результат = Результат + ", " + СокрЛП(Объект.ФормаВыпуска);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВКомплекте") И ЗначениеЗаполнено(Объект.ВКомплекте) Тогда
		Результат = Результат + ", " + СокрЛП(Объект.ВКомплекте);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КоличествоДозВУпаковке) Тогда
		Результат = Результат + ", " + Объект.КоличествоДозВУпаковке + " " + НСтр("ru = 'доз(а)'");
	КонецЕсли;
	
	Результат = Результат + ", " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Упаковка, "НаименованиеПолное"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает латинское представление номенклатуры,
// если это лекарственное средство.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - лекарственное средство
//
// Возвращаемое значение:
//  ЛатинскаяТранскрипция - Строка - латинское представление номенклатуры
//
Функция ЛатинскоеПредставлениеНоменклатуры(Номенклатура, ВыводитьИмяИзДействующегоВещества = Ложь, ВыводитьИмяИзТорговогоНаименования = Ложь) Экспорт
	
	Описание = НоменклатураСервер.ОписаниеНоменклатуры(Номенклатура);
	
	ЛатинскаяТранскрипция = "";
	Если Описание.ЭтоЛекарственноеСредство Тогда
		Если ЗначениеЗаполнено(Описание.ТорговоеНаименование) И ВыводитьИмяИзТорговогоНаименования Тогда
			ЛатинскаяТранскрипция = ЛатинскоеПредставлениеТорговогоНаименования(Описание.ТорговоеНаименование, Описание.ФормаВыпуска);
		ИначеЕсли ЗначениеЗаполнено(Описание.ДействующиеВеществаМНН) И ВыводитьИмяИзДействующегоВещества Тогда
			ЛатинскаяТранскрипция = ЛатинскоеПредставлениеДействующихВеществМНН(Описание.ДействующиеВеществаМНН, Описание.ФормаВыпуска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЛатинскаяТранскрипция;
	
КонецФункции

// Возвращает латинское представление действующих веществ препарата
//
// Параметры:
//  ДействующиеВеществаМНН - СправочникСсылка.ДействующиеВеществаМНН - для которых будет получаться латинское представление
//  ФормаВыпуска           - СправочникСсылка.ФормаВыпуска           - для которой будет получаться латинское представление
//
// Возвращаемое значение:
//  ЛатинскаяТранскрипция - Строка - латинское представление действующих веществ препарата
//
Функция ЛатинскоеПредставлениеДействующихВеществМНН(ДействующиеВеществаМНН, ФормаВыпуска) Экспорт
	
	ЗапрашиваемыеРеквизиты = Новый Структура;
	ЗапрашиваемыеРеквизиты.Вставить("ЛатинскоеНаименование");
	ЗапрашиваемыеРеквизиты.Вставить("ЛатинскоеНаименованиеРодительныйПадеж");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействующиеВеществаМНН, ЗапрашиваемыеРеквизиты);
	
	ЛатинскаяТранскрипция = "";
	Если ЗначениеЗаполнено(Реквизиты.ЛатинскоеНаименованиеРодительныйПадеж) Тогда
		ЛатинскаяТранскрипция = Реквизиты.ЛатинскоеНаименованиеРодительныйПадеж;
	Иначе
		ЛатинскаяТранскрипция = Реквизиты.ЛатинскоеНаименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛатинскаяТранскрипция) Тогда
		ПредставлениеФормыВыпуска = ПолучитьЛатинскоеПредставлениеФормыВыпуска(ФормаВыпуска);
		Если ЗначениеЗаполнено(ПредставлениеФормыВыпуска) Тогда
			ЛатинскаяТранскрипция = ЛатинскаяТранскрипция + ", " + ПредставлениеФормыВыпуска;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЛатинскаяТранскрипция;
	
КонецФункции

// Возвращает латинское представление торгового наименования
//
// Параметры:
//  ТорговоеНаименование - СправочникСсылка.ТорговыеНаименования - для которого будет получаться латинское представление
//  ФормаВыпуска         - СправочникСсылка.ФормаВыпуска         - для которой будет получаться латинское представление
//
// Возвращаемое значение:
//  ЛатинскаяТранскрипция - Строка - латинское представление торгового наименования
//
Функция ЛатинскоеПредставлениеТорговогоНаименования(ТорговоеНаименование, ФормаВыпуска) Экспорт
	
	ЗапрашиваемыеРеквизиты = Новый Структура;
	ЗапрашиваемыеРеквизиты.Вставить("ДействующиеВеществаМНН");
	ЗапрашиваемыеРеквизиты.Вставить("АнглийскоеНаименование");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТорговоеНаименование, ЗапрашиваемыеРеквизиты);
	
	ЛатинскаяТранскрипция = Реквизиты.АнглийскоеНаименование;
	Если ЗначениеЗаполнено(ЛатинскаяТранскрипция) Тогда
		ПредставлениеФормыВыпуска = ПолучитьЛатинскоеПредставлениеФормыВыпуска(ФормаВыпуска);
		Если ЗначениеЗаполнено(ПредставлениеФормыВыпуска) Тогда
			ЛатинскаяТранскрипция = ЛатинскаяТранскрипция + ", " + ПредставлениеФормыВыпуска;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДействующиеВеществаМНН) Тогда
		ЛатинскаяТранскрипция = ЛатинскоеПредставлениеДействующихВеществМНН(Реквизиты.ДействующиеВеществаМНН, ФормаВыпуска)
	КонецЕсли;
	
	Возврат ЛатинскаяТранскрипция;
	
КонецФункции

// Возвращает латинское представление формы выпуска препарата
//
// Параметры:
//  ФормаВыпуска - СправочникСсылка.ФормаВыпуска - для которой будет получаться латинское представление
//
// Возвращаемое значение:
//  ЛатинскаяТранскрипция - Строка - латинское представление формы выпуска препарата
//
Функция ПолучитьЛатинскоеПредставлениеФормыВыпуска(ФормаВыпуска) Экспорт
	
	СписокРеквизитов = Новый Структура;
	СписокРеквизитов.Вставить("ЛекарственнаяФорма_Латиница"     , "ЛекарственнаяФорма.ЛатинскоеНаименование");
	СписокРеквизитов.Вставить("ГруппаЛекарственныхФорм_Латиница", "ЛекарственнаяФорма.Группа.ЛатинскоеНаименование");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФормаВыпуска, СписокРеквизитов);
	
	ЛатинскаяТранскрипция = "";
	Если ЗначениеЗаполнено(Реквизиты.ЛекарственнаяФорма_Латиница) Тогда
		ЛатинскаяТранскрипция = Реквизиты.ЛекарственнаяФорма_Латиница;
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ГруппаЛекарственныхФорм_Латиница) Тогда
		ЛатинскаяТранскрипция = Реквизиты.ГруппаЛекарственныхФорм_Латиница;
	КонецЕсли;
	
	Возврат ЛатинскаяТранскрипция;
	
КонецФункции

#КонецОбласти // ФункцииГенерацииНаименованияНоменклатуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// Процедура заполняет основные поля препарата из структуры заполнения
//
// Параметры:
//  Объект - объект справочника Классификатор аптечных товаров
//  СтруктураЗаполнения - структура заполнения
//
Процедура ЗаполнитьОсновныеПоляПрепарата(Объект, СтруктураЗаполнения)
	
	Объект.ДействующиеВеществаМНН = ПолучитьДействующиеВеществаМННПоОписанию(СтруктураЗаполнения);
	НужноОбновитьЛекарственныеСредства = Неопределено;
	Объект.ТорговоеНаименование = ПолучитьТорговоеНаименование(СтруктураЗаполнения, Объект.ДействующиеВеществаМНН, НужноОбновитьЛекарственныеСредства);
	
	Если НужноОбновитьЛекарственныеСредства Тогда
		Справочники.ТорговыеНаименования.ОбновитьЛекарственныеСредства(Объект.ТорговоеНаименование, Объект.Ссылка);
	КонецЕсли;
	
	ЗаполнитьФормуВыпускаПрепарата(Объект, СтруктураЗаполнения);
	ЗаполнитьУпаковкиПрепарата(Объект, СтруктураЗаполнения);
	
КонецПроцедуры

Функция ПолучитьДействующиеВеществаМННПоОписанию(СтруктураЗаполнения)
	
	Если Не ПустаяСтрока(СтруктураЗаполнения.ДействующиеВеществаМНН) Тогда
		
		ПолноеНаименованиеДействующегоВещества = СтруктураЗаполнения.ДействующиеВеществаМНН;
		
		ЭтоМНН = (СтрНайти(ПолноеНаименованиеДействующегоВещества, "*") > 0);
		
		Наименование                          = СтруктураЗаполнения.ДействующиеВеществаМНН_Наименование;
		АнглийскоеНаименование                = СтруктураЗаполнения.ДействующиеВеществаМНН_АнглийскоеНаименование;
		ЛатинскоеНаименование                 = СтруктураЗаполнения.ДействующиеВеществаМНН_ЛатинскоеНаименование;
		ЛатинскоеНаименованиеРодительныйПадеж = СтруктураЗаполнения.ДействующиеВеществаМНН_ЛатинскоеНаименованиеРодительныйПадеж;
		
		Если ПустаяСтрока(Наименование)Тогда
			
			НачПозиция = СтрНайти(ПолноеНаименованиеДействующегоВещества, "(");
			КонПозиция = СтрНайти(ПолноеНаименованиеДействующегоВещества, ")");
			
			АнглийскоеНаименование = "";
			Наименование = ПолноеНаименованиеДействующегоВещества;
			Если НачПозиция > 0 И НачПозиция < КонПозиция Тогда
				
				Наименование = СокрЛП(Лев(ПолноеНаименованиеДействующегоВещества, НачПозиция - 1));
				
				АнглийскоеНаименование = СокрЛП(Сред(ПолноеНаименованиеДействующегоВещества, НачПозиция + 1, КонПозиция - НачПозиция - 1));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("Наименование"                         , Наименование);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное"                   , ПолноеНаименованиеДействующегоВещества);
		ПоляНовогоЭлемента.Вставить("ОтноситсяКМНН"                        , ЭтоМНН);
		ПоляНовогоЭлемента.Вставить("АнглийскоеНаименование"               , АнглийскоеНаименование);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименование"                , ЛатинскоеНаименование);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименованиеРодительныйПадеж", ЛатинскоеНаименованиеРодительныйПадеж);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка,
		|	АнглийскоеНаименование,
		|	ЛатинскоеНаименование,
		|	ЛатинскоеНаименованиеРодительныйПадеж
		|ИЗ
		|	Справочник.ДействующиеВеществаМНН
		|ГДЕ
		|	НаименованиеПолное ПОДОБНО &НаименованиеПолное СПЕЦСИМВОЛ ""~""
		|";
		Запрос.УстановитьПараметр("НаименованиеПолное", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ПолноеНаименованиеДействующегоВещества));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка;
			ЭлементОбъект = Неопределено;
			Если ЗначениеЗаполнено(АнглийскоеНаименование) И Выборка.АнглийскоеНаименование <> АнглийскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЛатинскоеНаименование) И Выборка.ЛатинскоеНаименование <> ЛатинскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименование = ЛатинскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ЛатинскоеНаименованиеРодительныйПадеж) И Выборка.ЛатинскоеНаименованиеРодительныйПадеж <> ЛатинскоеНаименованиеРодительныйПадеж Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименованиеРодительныйПадеж = ЛатинскоеНаименованиеРодительныйПадеж;
			КонецЕсли;
			
			ЗавершитьРедактированиеОбъекта(ЭлементОбъект);
			
		Иначе
			
			ЭлементОбъект = Справочники.ДействующиеВеществаМНН.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЭлементОбъект, ПоляНовогоЭлемента);
			ЭлементОбъект.Записать();
			Элемент = ЭлементОбъект.Ссылка;
			
		КонецЕсли;
		
		Возврат Элемент;
		
	КонецЕсли;
	
	Возврат Справочники.ДействующиеВеществаМНН.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьТорговоеНаименование(СтруктураЗаполнения, ДействующиеВеществаМНН, НужноОбновитьЛекарственныеСредства);
	
	НужноОбновитьЛекарственныеСредства = Ложь;
	Если Не ПустаяСтрока(СтруктураЗаполнения.ТорговоеНаименование) Тогда
		
		АнглийскоеНаименование = СтруктураЗаполнения.ТорговоеНаименование_АнглийскоеНаименование;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка,
		|	ДействующиеВеществаМНН,
		|	АнглийскоеНаименование
		|ИЗ
		|	Справочник.ТорговыеНаименования
		|ГДЕ
		|	Наименование = &Наименование
		|");
		Запрос.УстановитьПараметр("Наименование", СтруктураЗаполнения.ТорговоеНаименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка;
			ЭлементОбъект = Неопределено;
			Если ЗначениеЗаполнено(АнглийскоеНаименование) И АнглийскоеНаименование <> Выборка.АнглийскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДействующиеВеществаМНН) И ДействующиеВеществаМНН <> Выборка.ДействующиеВеществаМНН Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(Элемент, ЭлементОбъект);
				ЭлементОбъект.ДействующиеВеществаМНН = ДействующиеВеществаМНН;
				ЭлементОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеЛекарственныхСредств");
				НужноОбновитьЛекарственныеСредства = Истина;
			КонецЕсли;
			
			ЗавершитьРедактированиеОбъекта(ЭлементОбъект);
			
		Иначе
			
			ЭлементОбъект = Справочники.ТорговыеНаименования.СоздатьЭлемент();
			ЭлементОбъект.Наименование = СтруктураЗаполнения.ТорговоеНаименование;
			ЭлементОбъект.ДействующиеВеществаМНН = ДействующиеВеществаМНН;
			ЭлементОбъект.АнглийскоеНаименование = АнглийскоеНаименование;
			ЭлементОбъект.Записать();
			Элемент = ЭлементОбъект.Ссылка;
			
		КонецЕсли;
		
		Возврат Элемент;
		
	КонецЕсли;
	
	Возврат Справочники.ТорговыеНаименования.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьДанныеПроизводителя(СтруктураЗаполнения, ИмяРеквизитаПроизводитель)
	Перем Производитель, Страна;
	
	ДанныеПроизводителя = Новый Структура;
	ДанныеПроизводителя.Вставить("Контрагент", Справочники.Производители.ПустаяСсылка());
	ДанныеПроизводителя.Вставить("Страна"    , Справочники.СтраныМира.ПустаяСсылка());
	
	Если СтруктураЗаполнения.Свойство(ИмяРеквизитаПроизводитель, Производитель) И ЗначениеЗаполнено(Производитель) Тогда
		
		Если ТипЗнч(Производитель) = Тип("Массив") Тогда
			Производитель = Производитель[0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Производитель) Тогда
			
			Отбор = Новый Структура("НаименованиеРЛС", Производитель);
			ЗаполнениеНового = Новый Структура("Наименование, НаименованиеРЛС", Производитель, Производитель);
			Элемент = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.Производители, Отбор, ЗаполнениеНового);
			ДанныеПроизводителя.Контрагент = Элемент;
			
			Если СтруктураЗаполнения.Свойство(ИмяРеквизитаПроизводитель + "_Страна", Страна) И ЗначениеЗаполнено(Страна) Тогда
				
				Если ТипЗнч(Страна) = Тип("Массив") Тогда
					Страна = Страна[0];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Страна) Тогда
					Страна = НаименованиеСтраныДляПоиска(Страна);
					Элемент = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Страна);
					ДанныеПроизводителя.Страна = Элемент;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПроизводителя;
	
КонецФункции

Функция НаименованиеСтраныДляПоиска(Наименование)
	
	СоответствиеСтран = Новый Соответствие;
	СоответствиеСтран.Вставить("Великобритания"       , "СОЕДИНЕННОЕ КОРОЛЕВСТВО");
	СоответствиеСтран.Вставить("Иран"                 , "ИРАН, ИСЛАМСКАЯ РЕСПУБЛИКА");
	СоответствиеСтран.Вставить("КНДР"                 , "КОРЕЯ, НАРОДНО-ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА");
	СоответствиеСтран.Вставить("Корея"                , "КОРЕЯ, РЕСПУБЛИКА");
	СоответствиеСтран.Вставить("Кыргызская республика", "КИРГИЗИЯ");
	СоответствиеСтран.Вставить("ОАЭ"                  , "ОБЪЕДИНЕННЫЕ АРАБСКИЕ ЭМИРАТЫ");
	СоответствиеСтран.Вставить("Республика Беларусь"  , "БЕЛАРУСЬ");
	СоответствиеСтран.Вставить("Республика Казахстан" , "КАЗАХСТАН");
	СоответствиеСтран.Вставить("Республика Корея"     , "КОРЕЯ, РЕСПУБЛИКА");
	СоответствиеСтран.Вставить("Республика Маврикий"  , "МАВРИКИЙ");
	СоответствиеСтран.Вставить("Республика Молдова"   , "МОЛДОВА, РЕСПУБЛИКА");
	СоответствиеСтран.Вставить("Республика Хорватия"  , "ХОРВАТИЯ");
	СоответствиеСтран.Вставить("США"                  , "СОЕДИНЕННЫЕ ШТАТЫ");
	СоответствиеСтран.Вставить("Сирия"                , "СИРИЙСКАЯ АРАБСКАЯ РЕСПУБЛИКА");
	СоответствиеСтран.Вставить("Словацкая Республика" , "СЛОВАКИЯ");
	СоответствиеСтран.Вставить("Тайвань"              , "ТАЙВАНЬ (КИТАЙ)");
	СоответствиеСтран.Вставить("ЮАР"                  , "ЮЖНАЯ АФРИКА");
	
	СоответствующееНаименование = СоответствиеСтран.Получить(Наименование);
	Если СоответствующееНаименование = Неопределено Тогда
		Возврат ВРег(Наименование);
	КонецЕсли;
	
	Возврат СоответствующееНаименование;
	
КонецФункции

Функция ПолучитьОбъектДляРедактирования(Ссылка, Объект)
	
	Если Объект <> Неопределено Тогда
		Возврат Объект;
	КонецЕсли;
	
	ОбъектСсылка = Ссылка.ПолучитьОбъект();
	ОбъектСсылка.Заблокировать();
	Возврат ОбъектСсылка;
	
КонецФункции

Процедура ЗавершитьРедактированиеОбъекта(Объект)
	
	Если Объект <> Неопределено Тогда
		Объект.Записать();
		Объект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляПрепарата(Объект, СтруктураЗаполнения)
	Перем ЗначениеИзСтруктуры;
	
	Производитель = ПолучитьДанныеПроизводителя(СтруктураЗаполнения, "Производитель");
	Объект.ФирмаПроизводитель = Производитель.Контрагент;
	Объект.СтранаПроизводителя = Производитель.Страна;
	
	Регистратор = ПолучитьДанныеПроизводителя(СтруктураЗаполнения, "Регистратор");
	Объект.ФирмаРегистратор = Регистратор.Контрагент;
	Объект.СтранаРегистратора = Регистратор.Страна;
	
	Упаковщик = ПолучитьДанныеПроизводителя(СтруктураЗаполнения, "Упаковщик");
	Объект.ФирмаУпаковщик = Упаковщик.Контрагент;
	Объект.СтранаУпаковщика = Упаковщик.Страна;
	
	// Заполним поля в комплекте
	Объект.ВКомплекте = СтруктураЗаполнения.Комплектация;
	Объект.ВКомплектеПолное = СтруктураЗаполнения.Комплектация_НаименованиеПолное;
	Объект.УсловияХранения = СтруктураЗаполнения.УсловияХранения;
	
	Если ЗначениеЗаполнено(СтруктураЗаполнения.СрокГодности) Тогда
		Объект.СрокГодности = СтруктураЗаполнения.СрокГодности;
		Объект.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Месяц;
	Иначе
		Объект.СрокГодности = 0;
		Объект.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним поле "Товары фарм рынка"
	Если Не ПустаяСтрока(СтруктураЗаполнения.ТоварыФармРынка) Тогда 
		Объект.ТоварыФармРынка = Справочники.ТоварыФармацевтическогоРынка.ПустаяСсылка();
		// проверим на вариант
		Врем = СокрЛП(СтруктураЗаполнения.ТоварыФармРынка);
		СтарыйВариант = Ложь;
		Для стр = 1 По стрДлина(Врем) Цикл
			Если Найти("0123456789",Сред(Врем,стр,1)) = 0 Тогда
				СтарыйВариант = Истина; //в строке название,, а не код
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтарыйВариант Тогда
			Элемент = Справочники.ТоварыФармацевтическогоРынка.НайтиПоНаименованию(СтруктураЗаполнения.ТоварыФармРынка, Истина);
		Иначе
			// поиск по коду
			Отбор = Новый Структура("Код", СтруктураЗаполнения.ТоварыФармРынка);
			Элемент = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ТоварыФармацевтическогоРынка, Отбор);
		КонецЕсли;
		Объект.ТоварыФармРынка = Элемент;
	Иначе
		Объект.ТоварыФармРынка = Справочники.ТоварыФармацевтическогоРынка.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним поле "АТХ"
	Если СтруктураЗаполнения.Свойство("АТХ", ЗначениеИзСтруктуры) И ЗначениеЗаполнено(ЗначениеИзСтруктуры) Тогда
		
		Отбор = Новый Структура("Код", ЗначениеИзСтруктуры);
		Элемент = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.АТХКлассификация, Отбор);
		Объект.АТХ = Элемент;
		
	Иначе
		Объект.АТХ = Справочники.АТХКлассификация.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним поле "Фармдействие"
	Если СтруктураЗаполнения.Свойство("Фармдействие", ЗначениеИзСтруктуры) И ЗначениеЗаполнено(ЗначениеИзСтруктуры) Тогда
		
		Отбор = Новый Структура("Код", ЗначениеИзСтруктуры);
		Элемент = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.Фармдействия, Отбор);
		Объект.Фармдействие = Элемент;
		
	Иначе
		Объект.Фармдействие = Справочники.Фармдействия.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним табличную часть "Фармакологические группы"
	Объект.ФармакологическиеГруппы.Очистить();
	Если Не ПустаяСтрока(СтруктураЗаполнения.ФармакологическиеГруппы) Тогда
		МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураЗаполнения.ФармакологическиеГруппы,",");
		Для Каждого стрКод Из МассивКодов Цикл
			Отбор = Новый Структура("Код", стрКод);
			Элемент = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ФармакологическиеГруппы, Отбор);
			Если Не Элемент.Пустая() Тогда
				стр = Объект.ФармакологическиеГруппы.Добавить();
				стр.ФармакологическаяГруппа = Элемент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураЗаполнения.Штрихкод) Тогда
		Объект.Штрихкод = СтруктураЗаполнения.Штрихкод;
	Иначе
		Объект.Штрихкод = "";
	КонецЕсли;
	
	// Код росздравнадзора
	Если Не ПустаяСтрока(СтруктураЗаполнения.КодРосздравнадзора) Тогда
		Объект.КодРосздравнадзора = СтруктураЗаполнения.КодРосздравнадзора;
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураЗаполнения.УникальныйКодРосздравнадзора) Тогда
		Объект.УникальныйКодРосздравнадзора = СтруктураЗаполнения.УникальныйКодРосздравнадзора;
	КонецЕсли;
	
	// Код ОКПД2
	Если Не ПустаяСтрока(СтруктураЗаполнения.ОКПД2) Тогда
		Объект.ОКПД2 = СтруктураЗаполнения.ОКПД2;
	Иначе
		Объект.ОКПД2 = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураЗаполнения.ФармакоТерапевтическаяГруппа) Тогда
		Отбор = Новый Структура("КодРЛС", СтруктураЗаполнения.ФармакоТерапевтическаяГруппа);
		Элемент = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ФармакоТерапевтическиеГруппы, Отбор);
		Объект.ФармакоТерапевтическаяГруппа = Элемент;
	Иначе
		Объект.ФармакоТерапевтическаяГруппа = Неопределено;;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРегистрационногоУдостоверения(Объект, СтруктураЗаполнения) Экспорт
	
	СтруктураКонтрольная =  Новый Структура;
	СтруктураКонтрольная.Вставить("СтатусДействия"       , 1);
	СтруктураКонтрольная.Вставить("ДатаОкончанияДействия", '00010101');
	СтруктураКонтрольная.Вставить("РегистрационныйНомер" , "");
	СтруктураКонтрольная.Вставить("НормативныйДокумент"  , "");
	СтруктураКонтрольная.Вставить("ДатаРегистрации"      , '00010101');
	
	НовыеДанные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураКонтрольная);
	
	ЗаполнитьЗначенияСвойств(НовыеДанные, Объект); // было
	Для Каждого КлючЗначение Из СтруктураКонтрольная Цикл // стало
		Значение = Неопределено;
		Если СтруктураЗаполнения.Свойство(КлючЗначение.Ключ, Значение) Тогда
			Если ТипЗнч(Значение) = Тип("Массив") Тогда
				Если Значение.Количество() > 0 Тогда
					Значение = Значение[0];
				Иначе
					Значение = КлючЗначение.Значение;
				КонецЕсли;
			КонецЕсли;
			НовыеДанные[КлючЗначение.Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Объект, НовыеДанные);
	
КонецПроцедуры

// Процедура заполняет поля формы выпуска препарата из структуры заполнения
//
// Параметры:
//  Объект - объект справочника Классификатор аптечных товаров
//  СтруктураЗаполнения - структура заполнения
//
Процедура ЗаполнитьФормуВыпускаПрепарата(Объект, СтруктураЗаполнения)
	
	// Заполним поле "Лекарственная форма"
	ГруппаЛекарственнойФормы = Справочники.ГруппыЛекарственныхФорм.ПустаяСсылка();
	Если Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_Группа) Тогда
		
		Отбор = Новый Структура("Наименование", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_Группа);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_Группа);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_Группа);
		
		ГруппаЛекарственнойФормы = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ГруппыЛекарственныхФорм, Отбор, ПоляНовогоЭлемента);
		
	КонецЕсли;
	
	ЛекарственнаяФорма = Справочники.ЛекарственныеФормы.ПустаяСсылка();
	Если Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма) Тогда
		
		Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма);
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_НаименованиеПолное);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименование", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_ЛатинскоеНаименование);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименованиеПолное", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_ЛатинскоеНаименованиеПолное);
		ПоляНовогоЭлемента.Вставить("ЛатинскоеНаименованиеРодительныйПадеж", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма_ЛатинскоеНаименованиеРодительныйПадеж);
		ПоляНовогоЭлемента.Вставить("Группа"            , ГруппаЛекарственнойФормы);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛекарственныеФормы.Ссылка                                 КАК Ссылка,
		|	ЛекарственныеФормы.ЛатинскоеНаименование                  КАК ЛатинскоеНаименование,
		|	ЛекарственныеФормы.ЛатинскоеНаименованиеПолное            КАК ЛатинскоеНаименованиеПолное,
		|	ЛекарственныеФормы.ЛатинскоеНаименованиеРодительныйПадеж  КАК ЛатинскоеНаименованиеРодительныйПадеж
		|ИЗ
		|	Справочник.ЛекарственныеФормы КАК ЛекарственныеФормы
		|ГДЕ
		|	ЛекарственныеФормы.НаименованиеРЛС = &НаименованиеРЛС
		|");
		Запрос.УстановитьПараметр("НаименованиеРЛС", ПоляНовогоЭлемента.НаименованиеРЛС);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЛекарственнаяФорма = Выборка.Ссылка;
			ЭлементОбъект = Неопределено;
			Если ЗначениеЗаполнено(ПоляНовогоЭлемента.ЛатинскоеНаименование) И Выборка.ЛатинскоеНаименование <> ПоляНовогоЭлемента.ЛатинскоеНаименование Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(ЛекарственнаяФорма, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименование = ПоляНовогоЭлемента.ЛатинскоеНаименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПоляНовогоЭлемента.ЛатинскоеНаименованиеПолное) И Выборка.ЛатинскоеНаименованиеПолное <> ПоляНовогоЭлемента.ЛатинскоеНаименованиеПолное Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(ЛекарственнаяФорма, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименованиеПолное = ПоляНовогоЭлемента.ЛатинскоеНаименованиеПолное;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПоляНовогоЭлемента.ЛатинскоеНаименованиеРодительныйПадеж) И Выборка.ЛатинскоеНаименованиеРодительныйПадеж <> ПоляНовогоЭлемента.ЛатинскоеНаименованиеРодительныйПадеж Тогда
				ЭлементОбъект = ПолучитьОбъектДляРедактирования(ЛекарственнаяФорма, ЭлементОбъект);
				ЭлементОбъект.ЛатинскоеНаименованиеРодительныйПадеж = ПоляНовогоЭлемента.ЛатинскоеНаименованиеРодительныйПадеж;
			КонецЕсли;
			
			ЗавершитьРедактированиеОбъекта(ЭлементОбъект);
			
		Иначе
			
			ЭлементОбъект = Справочники.ЛекарственныеФормы.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЭлементОбъект, ПоляНовогоЭлемента);
			Если ЭлементОбъект.ПроверитьЗаполнение() Тогда
				ЭлементОбъект.Записать();
			Иначе
				ТекстСообщения = СтрЗаменить(НСтр("ru = 'Не удалось создать лек. форму: %1'"), "%1", СтруктураЗаполнения.ФормаВыпуска_ЛекарственнаяФорма);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			ЛекарственнаяФорма = ЭлементОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Количество = 0;
	НеНормализованныеДанные = "";
	
	// Заполним поля массы лекарственной формы
	Если СтруктураЗаполнения.ФормаВыпуска_Масса <> 0
	   И Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_ЕдиницаМассы) Тогда
		
		ЕдиницаИзмерения = ЕдиницаИзмеренияПоКлассификатору(СтруктураЗаполнения.ФормаВыпуска_ЕдиницаМассы, Перечисления.ТипыЕдиницИзмерения.Вес);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Отбор = Новый Структура(
				"Наименование, ТипЕдиницы",
				СтруктураЗаполнения.ФормаВыпуска_ЕдиницаМассы,
				Перечисления.ТипыЕдиницИзмерения.Вес);
			ПоляНовогоЭлемента = Новый Структура(
				"Наименование, НаименованиеПолное, ТипЕдиницы",
				СтруктураЗаполнения.ФормаВыпуска_ЕдиницаМассы,
				СтруктураЗаполнения.ФормаВыпуска_ЕдиницаМассы_НаименованиеПолное,
				Перечисления.ТипыЕдиницИзмерения.Вес);
			ЕдиницаИзмерения = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, ПоляНовогоЭлемента);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ТекстСообщения = СтрЗаменить(НСтр("ru = 'Не удалось создать единицу лек. формы: %1'"), "%1", СтруктураЗаполнения.ФормаВыпуска_ЕдиницаМассы);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Количество = СтруктураЗаполнения.ФормаВыпуска_Масса;
		
	КонецЕсли;
	
	// Заполним поля концентрации лекарственной формы
	Если Количество = 0
	   И СтруктураЗаполнения.ФормаВыпуска_Концентрация <> 0
	   И Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_ЕдиницаКонцентрации) Тогда
		
		Отбор = Новый Структура(
			"Наименование, ТипЕдиницы",
			СтруктураЗаполнения.ФормаВыпуска_ЕдиницаКонцентрации,
			Перечисления.ТипыЕдиницИзмерения.Концентрация);
		ПоляНовогоЭлемента = Новый Структура(
			"Наименование, НаименованиеПолное, ТипЕдиницы",
			СтруктураЗаполнения.ФормаВыпуска_ЕдиницаКонцентрации,
			СтруктураЗаполнения.ФормаВыпуска_ЕдиницаКонцентрации_НаименованиеПолное,
			Перечисления.ТипыЕдиницИзмерения.Концентрация);
		
		ЕдиницаИзмерения = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, ПоляНовогоЭлемента);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ТекстСообщения = СтрЗаменить(НСтр("ru = 'Не удалось создать единицу лек. формы: %1'"), "%1", СтруктураЗаполнения.ФормаВыпуска_ЕдиницаКонцентрации);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Количество = СтруктураЗаполнения.ФормаВыпуска_Концентрация;
		
	КонецЕсли;
	
	// Заполним поля единиц действия лекарственной формы
	Если Количество = 0
	   И СтруктураЗаполнения.ФормаВыпуска_ЕдиницДействия <> 0
	   И Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_ЕдиницаДействия) Тогда
		
		Отбор = Новый Структура(
			"Наименование, ТипЕдиницы",
			СтруктураЗаполнения.ФормаВыпуска_ЕдиницаДействия,
			Перечисления.ТипыЕдиницИзмерения.ЕдиницаДействия);
		ПоляНовогоЭлемента = Новый Структура(
			"Наименование, НаименованиеПолное, ТипЕдиницы",
			СтруктураЗаполнения.ФормаВыпуска_ЕдиницаДействия,
			СтруктураЗаполнения.ФормаВыпуска_ЕдиницаДействия_НаименованиеПолное,
			Перечисления.ТипыЕдиницИзмерения.ЕдиницаДействия);
		
		ЕдиницаИзмерения = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, ПоляНовогоЭлемента);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ТекстСообщения = СтрЗаменить(НСтр("ru = 'Не удалось создать единицу лек. формы: %1'"), "%1", СтруктураЗаполнения.ФормаВыпуска_ЕдиницаДействия);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Количество = СтруктураЗаполнения.ФормаВыпуска_ЕдиницДействия;
		
	КонецЕсли;
	
	// Заполним поля размера лекарственной формы
	Если Количество = 0
	   И Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_Размер) Тогда
		
		НеНормализованныеДанные = СтруктураЗаполнения.ФормаВыпуска_Размер;
		Если Не ПустаяСтрока(СтруктураЗаполнения.ФормаВыпуска_ЕдиницаРазмера) Тогда
			НеНормализованныеДанные = НеНормализованныеДанные + " " + СтруктураЗаполнения.ФормаВыпуска_ЕдиницаРазмера;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним поля характеристики лекарственной формы
	ХарактеристикаЛекарственнойФормы = Справочники.ХарактеристикиЛекарственныхФорм.ПустаяСсылка();
	Если Не ПустаяСтрока(СтруктураЗаполнения.ХарактеристикиЛФ) Тогда
		
		Отбор = Новый Структура("Наименование", СтруктураЗаполнения.ХарактеристикиЛФ);
		ПоляНовогоЭлемента = Новый Структура(
			"Наименование, НаименованиеПолное",
			СтруктураЗаполнения.ХарактеристикиЛФ,
			СтруктураЗаполнения.ХарактеристикиЛФ_НаименованиеПолное);
			
		ХарактеристикаЛекарственнойФормы = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ХарактеристикиЛекарственныхФорм, Отбор, ПоляНовогоЭлемента);
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЛекарственнаяФорма"     , ЛекарственнаяФорма);
	Отбор.Вставить("Характеристика"         , ХарактеристикаЛекарственнойФормы);
	Отбор.Вставить("Количество"             , Количество);
	Отбор.Вставить("ЕдиницаИзмерения"       , ЕдиницаИзмерения);
	Отбор.Вставить("НеНормализованныеДанные", НеНормализованныеДанные);
	
	Объект.ФормаВыпуска = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ФормыВыпуска, Отбор, Отбор);
	
КонецПроцедуры

// Процедура заполняет поля упаковок препарата из структуры заполнения
//
// Параметры:
//  Объект - объект справочника Классификатор аптечных товаров
//  СтруктураЗаполнения - структура заполнения
//
Процедура ЗаполнитьУпаковкиПрепарата(Объект, СтруктураЗаполнения)
	
	ПервичнаяУпаковка = Неопределено;
	ВторичнаяУпаковка = Неопределено;
	
	Если ПустаяСтрока(СтруктураЗаполнения.Упаковка1) Тогда
		
		ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
		
	Иначе // Заполним поля упаковки 1
		
		Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.Упаковка1);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.Упаковка1);
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.Упаковка1);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.Упаковка1_НаименованиеПолное);
		
		Упаковка = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.УпаковкиЛекарственныхСредств, Отбор, ПоляНовогоЭлемента);
		
		Если СтруктураЗаполнения.Упаковка1_Масса <> 0
		   И Не ПустаяСтрока(СтруктураЗаполнения.Упаковка1_ЕдиницаМассы) Тогда
			
			ЕдиницаИзмерения = ЕдиницаИзмеренияПоКлассификатору(СтруктураЗаполнения.Упаковка1_ЕдиницаМассы, Перечисления.ТипыЕдиницИзмерения.Вес);
			Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Наименование", СтруктураЗаполнения.Упаковка1_ЕдиницаМассы);
				Отбор.Вставить("ТипЕдиницы"  , Перечисления.ТипыЕдиницИзмерения.Вес);
				
				ПоляНовогоЭлемента = Новый Структура;
				ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.Упаковка1_ЕдиницаМассы);
				ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.Упаковка1_ЕдиницаМассы_НаименованиеПолное);
				ПоляНовогоЭлемента.Вставить("ТипЕдиницы"        , Перечисления.ТипыЕдиницИзмерения.Вес);
				
				ЕдиницаИзмерения = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, ПоляНовогоЭлемента);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ТекстСообщения = СтрЗаменить(НСтр("ru = 'Не удалось создать базовую единицу измерения препарата: %1'"), "%1", СтруктураЗаполнения.Упаковка1_ЕдиницаМассы);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			КоличествоВУпаковке = СтруктураЗаполнения.Упаковка1_Масса;
			СтруктураЗаполнения.Свойство("Упаковка1_КоличествоДоз", Объект.КоличествоДозВУпаковке);
			
		ИначеЕсли СтруктураЗаполнения.Упаковка1_Объем <> 0
				И Не ПустаяСтрока(СтруктураЗаполнения.Упаковка1_ЕдиницаОбъема) Тогда
			
			ЕдиницаИзмерения = ЕдиницаИзмеренияПоКлассификатору(СтруктураЗаполнения.Упаковка1_ЕдиницаОбъема, Перечисления.ТипыЕдиницИзмерения.Объем);
			Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Наименование", СтруктураЗаполнения.Упаковка1_ЕдиницаОбъема);
				Отбор.Вставить("ТипЕдиницы"  , Перечисления.ТипыЕдиницИзмерения.Объем);
				
				ПоляНовогоЭлемента = Новый Структура;
				ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.Упаковка1_ЕдиницаОбъема);
				ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.Упаковка1_ЕдиницаОбъема_НаименованиеПолное);
				ПоляНовогоЭлемента.Вставить("ТипЕдиницы"        , Перечисления.ТипыЕдиницИзмерения.Объем);
				
				ЕдиницаИзмерения = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, ПоляНовогоЭлемента);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ТекстСообщения = СтрЗаменить(НСтр("ru = 'Не удалось создать базовую единицу измерения препарата: %1'"), "%1", СтруктураЗаполнения.Упаковка1_ЕдиницаОбъема);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			КоличествоВУпаковке = СтруктураЗаполнения.Упаковка1_Объем;
			СтруктураЗаполнения.Свойство("Упаковка1_КоличествоДоз", Объект.КоличествоДозВУпаковке);
			
		ИначеЕсли СтруктураЗаполнения.Упаковка1_КоличествоДоз <> 0 Тогда
			
			ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияДоз();
			КоличествоВУпаковке = СтруктураЗаполнения.Упаковка1_КоличествоДоз;
			
		ИначеЕсли СтруктураЗаполнения.Упаковка1_Коэффициент01 <> 0 Тогда
			
			ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
			КоличествоВУпаковке = СтруктураЗаполнения.Упаковка1_Коэффициент01;
		
		Иначе
			
			ЕдиницаИзмерения = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьЕдиницуИзмеренияШтук();
			КоличествоВУпаковке = 1;
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Упаковка"               , Упаковка);
		Отбор.Вставить("СостоитИзДругихУпаковок", Ложь);
		Отбор.Вставить("БазоваяЕдиницаИзмерения", ЕдиницаИзмерения);
		Отбор.Вставить("Коэффициент"            , КоличествоВУпаковке);
		Отбор.Вставить("ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
		Отбор.Вставить("Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
		
		ПервичнаяУпаковка = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, Отбор);
		Если Не ЗначениеЗаполнено(ПервичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать первичную упаковку препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПоследняяУпаковка = ПервичнаяУпаковка;
		
	КонецЕсли;
	
	Объект.БазоваяЕдиницаИзмеренияКАТ = ЕдиницаИзмерения;
	
	// Заполним поля упаковки 2
	Если Не ПустаяСтрока(СтруктураЗаполнения.Упаковка2) Тогда
		
		Если Не ЗначениеЗаполнено(ПервичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена первичная упаковка препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.Упаковка2);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.Упаковка2);
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.Упаковка2);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.Упаковка2_НаименованиеПолное);
		
		Упаковка = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.УпаковкиЛекарственныхСредств, Отбор, ПоляНовогоЭлемента);
		
		Если СтруктураЗаполнения.Упаковка2_Коэффициент12 <> 0 Тогда
			КоличествоВУпаковке = СтруктураЗаполнения.Упаковка2_Коэффициент12;
		Иначе
			КоличествоВУпаковке = 1;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Упаковка"               , Упаковка);
		Отбор.Вставить("СостоитИзДругихУпаковок", Истина);
		Отбор.Вставить("Родитель"               , ПервичнаяУпаковка);
		Отбор.Вставить("КоличествоВУпаковке"    , КоличествоВУпаковке);
		Отбор.Вставить("ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
		Отбор.Вставить("Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
		
		ВторичнаяУпаковка = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, Отбор);
		Если Не ЗначениеЗаполнено(ВторичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать вторичную упаковку препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПоследняяУпаковка = ВторичнаяУпаковка;
		
	КонецЕсли;
	
	// Заполним поля упаковки 3
	Если Не ПустаяСтрока(СтруктураЗаполнения.Упаковка3) Тогда
		
		Если Не ЗначениеЗаполнено(ВторичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена вторичная упаковка препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Отбор = Новый Структура("НаименованиеРЛС", СтруктураЗаполнения.Упаковка3);
		
		ПоляНовогоЭлемента = Новый Структура;
		ПоляНовогоЭлемента.Вставить("НаименованиеРЛС"   , СтруктураЗаполнения.Упаковка3);
		ПоляНовогоЭлемента.Вставить("Наименование"      , СтруктураЗаполнения.Упаковка3);
		ПоляНовогоЭлемента.Вставить("НаименованиеПолное", СтруктураЗаполнения.Упаковка3_НаименованиеПолное);
		
		Упаковка = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.УпаковкиЛекарственныхСредств, Отбор, ПоляНовогоЭлемента);
		
		Если СтруктураЗаполнения.Свойство("Упаковка3_Коэффициент23") И СтруктураЗаполнения.Упаковка3_Коэффициент23 <> 0 Тогда
			КоличествоВУпаковке = СтруктураЗаполнения.Упаковка3_Коэффициент23;
		Иначе
			КоличествоВУпаковке = 1;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Упаковка"               , Упаковка);
		Отбор.Вставить("СостоитИзДругихУпаковок", Истина);
		Отбор.Вставить("Родитель"               , ВторичнаяУпаковка);
		Отбор.Вставить("КоличествоВУпаковке"    , КоличествоВУпаковке);
		Отбор.Вставить("ТипЕдиницы"             , Перечисления.ТипыЕдиницИзмерения.Упаковка);
		Отбор.Вставить("Номенклатура"           , Справочники.Номенклатура.ПустаяСсылка());
		
		ТретичнаяУпаковка = НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, Отбор);
		Если Не ЗначениеЗаполнено(ВторичнаяУпаковка) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось создать третичную упаковку препарата'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПоследняяУпаковка = ТретичнаяУпаковка;
		
	КонецЕсли;
	
	Объект.Упаковка = ПоследняяУпаковка;
	
КонецПроцедуры

Функция ЕдиницаИзмеренияПоКлассификатору(Знач НаименованиеЕдиницы, ТипИзмеряемойВеличины)
	
	КодЕдиницы = "";
	НаименованиеЕдиницы = НРег(НаименованиеЕдиницы);
	Если ТипИзмеряемойВеличины = Перечисления.ТипыЕдиницИзмерения.Вес Тогда
		Если НаименованиеЕдиницы = "мг" Тогда
			КодЕдиницы = "161";
		ИначеЕсли НаименованиеЕдиницы = "г" Тогда
			КодЕдиницы = "163";
		ИначеЕсли НаименованиеЕдиницы = "кг" Тогда
			КодЕдиницы = "166";
		ИначеЕсли НаименованиеЕдиницы = "т" Тогда
			КодЕдиницы = "168";
		КонецЕсли;
	ИначеЕсли ТипИзмеряемойВеличины = Перечисления.ТипыЕдиницИзмерения.Объем Тогда
		Если НаименованиеЕдиницы = "мл" Тогда
			КодЕдиницы = "111";
		ИначеЕсли НаименованиеЕдиницы = "л" Тогда
			КодЕдиницы = "112";
		ИначеЕсли НаименованиеЕдиницы = "куб. м" Тогда
			КодЕдиницы = "113";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодЕдиницы) Тогда
		Возврат Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодЕдиницы))[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьУпаковкуПоВариантуЗаполнения(Номенклатура, ВариантЗаполнения)
	
	Если ВариантЗаполнения = Перечисления.ВариантыЗаполненияЕдиницыИзмеренияЛекарственнойФормы.МинимальнаяЕдиницаОтпускаИзАптеки Тогда
		Возврат Номенклатура.МинимальнаяЕдиницаОтпускаИзАптеки;
	КонецЕсли;
	
	УпаковкиПрепарата = ПолучитьИерархиюУпаковокПрепарата(Номенклатура.Упаковка);
	Если ВариантЗаполнения = Перечисления.ВариантыЗаполненияЕдиницыИзмеренияЛекарственнойФормы.ПоследняяУпаковка Тогда
		ИндексУпаковки = 0;
	Иначе
		ИндексУпаковки = УпаковкиПрепарата.ВГраница();
	КонецЕсли;
	
	Возврат УпаковкиПрепарата[ИндексУпаковки];
	
КонецФункции

Функция ПолучитьИерархиюУпаковокПрепарата(ПоследняяУпаковка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Упаковка", ПоследняяУпаковка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УпаковкаПрепарата.Ссылка КАК ТретичнаяУпаковка,
	|	УпаковкаПрепарата.Родитель КАК ВторичнаяУпаковка,
	|	УпаковкаПрепарата.Родитель.Родитель КАК ПервичнаяУпаковка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК УпаковкаПрепарата
	|ГДЕ
	|	УпаковкаПрепарата.Ссылка = &Упаковка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Упаковки = Новый Массив;
	Упаковки.Добавить(Выборка.ТретичнаяУпаковка);
	Если ЗначениеЗаполнено(Выборка.ВторичнаяУпаковка) Тогда
		Упаковки.Добавить(Выборка.ВторичнаяУпаковка);
		Если ЗначениеЗаполнено(Выборка.ПервичнаяУпаковка) Тогда
			Упаковки.Добавить(Выборка.ПервичнаяУпаковка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Упаковки;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
