////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// Начинает асинхронное подключение к Документообороту, если известны настройки авторизации. Не
// запрашивает имя пользователя и пароль, если они неизвестны. Для вывода окна авторизации и для
// оповещения о результате следует использовать процедуру ПроверитьПодключение.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиАвторизацииИзБазы = Новый Структура("ИмяПользователя, ПарольСохранен, Пароль,
		|ИспользуетсяАутентификацияОССтароеЗначение, ИспользуетсяАутентификацияJWTСтароеЗначение");
	ПрочитатьНастройкиАвторизации(
		НастройкиАвторизацииИзБазы.ИмяПользователя,
		НастройкиАвторизацииИзБазы.ПарольСохранен,
		НастройкиАвторизацииИзБазы.Пароль,
		НастройкиАвторизацииИзБазы.ИспользуетсяАутентификацияОССтароеЗначение,
		НастройкиАвторизацииИзБазы.ИспользуетсяАутентификацияJWTСтароеЗначение);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПослеНачалаРаботыСистемыЗавершение",
		ЭтотОбъект,
		НастройкиАвторизацииИзБазы);
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПодключитьсяИПолучитьВерсиюСервисаАсинхронно(
		НастройкиАвторизацииИзБазы.ИмяПользователя,
		НастройкиАвторизацииИзБазы.Пароль);
	ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Возвращает сохраненный ранее признак состоявшегося показа окна авторизации.
//
// Возвращаемое значение:
//   Булево - Истина, если авторизация была предложена в этом сеансе, и Ложь в противном случае.
//
Функция АвторизацияПредложена() Экспорт
	
	Результат = (ПараметрыПриложения["ИнтеграцияС1СДокументооборот.АвторизацияПредложена"] = Истина);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриОпределенииПредложенияАвторизации(
		Результат);
	
	Возврат Результат;
	
КонецФункции

// Открывает форму для указания значения дополнительного реквизита.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой осуществляется работа с дополнительным реквизитом
//     и из которой вызывается форма заполнения.
//   Элемент - ПолеФормы - элемент формы, в который будет помещено указанной значение.
//   СтандартнаяОбработка - Булево - параметр обработки, используемый в обработчике на форме,
//     из которой вызывается заполнение значения доп. реквизита.
//
Процедура ВыбратьЗначениеДополнительногоРеквизита(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = Элемент.Родитель.ТекущиеДанные.СписокДоступныхТипов;
	
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхТипов.Количество() > 1 Тогда
		
		ЗаголовокФормы = НСтр("ru = 'Тип реквизита ""%Свойство%""'");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы,"%Свойство%",Элемент.Родитель.ТекущиеДанные.Свойство);
		ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы",
			СписокДоступныхТипов,
			ЗаголовокФормы);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеДополнительногоРеквизитаВыборТипаЗавершение",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			ПараметрыОповещения);
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОдногоТипаИзСоставногоТипа";
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма,,,, Оповещение);
		
	Иначе
		
		ИмяТипа = СписокДоступныхТипов[0].Значение.XDTOClassName;
		ВыбратьЗначениеДополнительногоРеквизитаОбработка(ИмяТипа, Форма, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Универсальный метод для выбора произвольного значения в поле ввода.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Элемент - ПолеФормы - поле, куда должно быть помещено выбранное значение.
//   Типы - СписокЗначений - тип значения, которое требуется выбрать.
//   Представление - Строка - представление реквизита, для которого выбирается значение.
//   ЗначениеРеквизита - Строка - текущее значение в поле ввода.
//   ЗначениеРеквизитаID - Строка - текущее значение в поле ввода.
//   ЗначениеРеквизитаТип - Строка - текущее значение в поле ввода.
//   Оповещение - ОписаниеОповещения - вызывает процедуру формы, в которую передается выбранное значение.
//
Процедура ВыбратьЗначениеРеквизитаДО(Форма, Элемент, Типы, Представление, ЗначениеРеквизита,
		ЗначениеРеквизитаID, ЗначениеРеквизитаТип, Оповещение) Экспорт
	
	ПараметрыВыбратьЗначение = Новый Структура;
	ПараметрыВыбратьЗначение.Вставить("ТекстРедактирования", Элемент.ТекстРедактирования);
	ПараметрыВыбратьЗначение.Вставить("Представление", Представление);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизитаID", ЗначениеРеквизитаID);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизитаТип", ЗначениеРеквизитаТип);
	ПараметрыВыбратьЗначение.Вставить("Оповещение", Оповещение);
	
	Если Типы.Количество() = 1 Тогда
		Если ТипЗнч(Типы) = Тип("Массив") Тогда
			Значение = Типы[0];
		Иначе
			Значение = Типы[0].Значение;
		КонецЕсли;
		ВыбратьЗначениеРеквизитаДОЗавершение(Значение, ПараметрыВыбратьЗначение);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаДОЗавершение",
			ЭтотОбъект,
			ПараметрыВыбратьЗначение);
		Если ТипЗнч(Типы) = Тип("Массив") Тогда
			СписокТипов = Новый СписокЗначений;
			СписокТипов.ЗагрузитьЗначения(Типы);
		Иначе
			СписокТипов = Типы;
		КонецЕсли;
		
		Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТипов, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Универсальный метод для выбора произвольного значения в поле ввода.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Элемент - ПолеФормы - поле, куда должно быть помещено выбранное значение.
//   Тип - ОписаниеТипов - тип значения, которое требуется выбрать.
//   Представление - Строка - представление реквизита, для которого выбирается значение.
//   ЗначениеРеквизита - Произвольный - текущее значение в поле ввода.
//   Оповещение - ОписаниеОповещения - вызывает процедуру формы, в которую передается выбранное значение.
//
Процедура ВыбратьЗначениеРеквизитаИС(Форма, Элемент, Тип, Представление, ЗначениеРеквизита, Оповещение) Экспорт
	
	Типы = Тип.Типы();
	
	ПараметрыВыбратьЗначение = Новый Структура;
	ПараметрыВыбратьЗначение.Вставить("ОписаниеТипа", Тип);
	ПараметрыВыбратьЗначение.Вставить("ТекстРедактирования", Элемент.ТекстРедактирования);
	ПараметрыВыбратьЗначение.Вставить("Представление", Представление);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);
	ПараметрыВыбратьЗначение.Вставить("Оповещение", Оповещение);
	
	Если Типы.Количество() = 1 Тогда
		ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа(Типы[0], ПараметрыВыбратьЗначение);
	Иначе
		ОповещениеВыбратьЗначение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа",
			ЭтотОбъект,
			ПараметрыВыбратьЗначение);
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(Типы);
		Форма.ПоказатьВыборИзСписка(ОповещениеВыбратьЗначение, СписокТипов, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Начинает длительную операцию запроса к сервису 1С:Документооборот, а также отображает на форме признак выполнения
// длительной операции.
//
// Параметры:
//   Владелец - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//            - ОбщийМодуль - клиентский модуль, из которого вызывается команда.
//   ДлительнаяОперация - Структура - см. ДлительныеОперации.ВыполнитьВФоне
//   ОповещениеОЗавершении - ОписаниеОповещения - вызывает процедуру формы, в которую передается результат запроса.
//   ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//   ТекстСообщения - Строка - текст сообщения, выводимый на форме ожидания.
//   СкрыватьИнтерфейс - Булево - если окно ожидания не выводится, то данный параметр указывает нужно ли использовать
//     переключение страниц, который скроет весь интерфейс, либо же нужно не скрывать интерфейс, а сделать видимой
//     группу элементов длительной операции.
//
Процедура ВыполнитьЗапросАсинхронно(Владелец, ДлительнаяОперация, ОповещениеОЗавершении,
		ВыводитьОкноОжидания = Ложь, ТекстСообщения = Неопределено, СкрыватьИнтерфейс = Истина) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Выполняется" И ДлительнаяОперация.ИдентификаторЗадания = Неопределено Тогда
		// К идентификатору привязаны обработчики ожидания завершения фонового задания.
		ДлительнаяОперация.ИдентификаторЗадания = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Владелец) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Владелец);
		Элементы = Владелец.Элементы;
		Если Не ВыводитьОкноОжидания Тогда
			
			Если СкрыватьИнтерфейс И (Элементы.Найти("ГруппаСтраницыПодключения") <> Неопределено) Тогда
				
				Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаЗагрузкаИзДО;
				Если ЗначениеЗаполнено(ТекстСообщения) Тогда
					СтарыйЗаголовок = Элементы.ОписаниеЗагрузкаИзДОСтраница.Заголовок;
					Элементы.ОписаниеЗагрузкаИзДОСтраница.Заголовок = СтрШаблон("%1..", ТекстСообщения);
				КонецЕсли;
				
			ИначеЕсли Элементы.Найти("ГруппаЗагрузкаИзДО") <> Неопределено Тогда
				
				Элементы.ГруппаЗагрузкаИзДО.Видимость = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПараметрыОжидания.ТекстСообщения = ТекстСообщения;
	Иначе
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение данных из 1С:Документооборот.'");
	КонецЕсли;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	
	ОповещениеДлительнойОперации = Новый ОписаниеОповещения(
		"ВыполнитьЗапросАсинхронноЗавершение",
		ЭтотОбъект,
		ДлительнаяОперация.ИдентификаторЗадания);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", Владелец);
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыОповещения.Вставить("ВыводитьОкноОжидания", ВыводитьОкноОжидания);
	ПараметрыОповещения.Вставить("СкрыватьИнтерфейс", СкрыватьИнтерфейс);
	ПараметрыОповещения.Вставить("СтарыйЗаголовок", СтарыйЗаголовок);
	
	ОбработчикиОжидания = АктивныеОбработчикиОжиданияФоновогоЗадания();
	ОбработчикиОжиданияЗадания = ОбработчикиОжидания[ДлительнаяОперация.ИдентификаторЗадания];
	Если ОбработчикиОжиданияЗадания = Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыОповещения);
		ОбработчикиОжидания.Вставить(ДлительнаяОперация.ИдентификаторЗадания, МассивПараметров)
	Иначе
		ОбработчикиОжиданияЗадания.Добавить(ПараметрыОповещения);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеДлительнойОперации, ПараметрыОжидания);
	
КонецПроцедуры

// Выполняет подключаемую команду интеграции с 1С:Документооборотом из формы объекта или списка.
//
// Параметры:
//   Команда - КомандаФормы - вызванная команда.
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Источник - ДанныеФормыСтруктура, ДанныеФормыКоллекция - данные, уточняющие параметр команды.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Источник) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Команда", Команда);
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("Источник", Источник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение",
		ЭтотОбъект,
		Параметры);
	ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

// Продолжает выполнение подключаемой команды интеграции после проверки подключения.
//
// Параметры:
//   Результат - Булево - Истина, если подключение успешно.
//   Параметры - Структура:
//     * Команда - КомандаФормы - вызванная команда.
//     * Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//     * Источник - ДанныеФормыСтруктура:
//         ** Ссылка - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый
//                - ДанныеФормыКоллекция
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Параметры.Команда;
	Форма = Параметры.Форма;
	Источник = Параметры.Источник;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотКлиент");
		МодульИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(
			Команда,
			Форма,
			Источник);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборот3Клиент");
		МодульИнтеграцияС1СДокументооборот3Клиент.ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(
			Команда,
			Форма,
			Источник);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет записан ли объект интегрированной системы. Если не записан - предлагает пользователю записать.
//
// Параметры:
//   СсылкаНаОбъектИС - ЛюбаяСсылка - проверяемый объект ИС.
//   ФормаОбъектаИС - ФормаКлиентскогоПриложения - форма, из которой вызвана команда.
//   ОповещениеПродолжения - ОписаниеОповещения - действие, вызываемое после проверки.
//   Действие - Строка - наименование действия.
//
Процедура ВыполнитьПроверкуЗаписиИПродолжить(СсылкаНаОбъектИС, ФормаОбъектаИС, ОповещениеПродолжения, Действие) Экспорт
	
	Если СсылкаНаОбъектИС.Пустая() Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""%1"" возможно только после записи данных.'"),
			Действие);
		
		МожноЗадатьВопрос = Истина;
		Если ФормаОбъектаИС = Неопределено Тогда
			МожноЗадатьВопрос = Ложь;
		Иначе
			// Проверим можем ли определить основной реквизит формы.
			РеквизитыФормы = Новый Структура("Объект", Неопределено);
			ЗаполнитьЗначенияСвойств(РеквизитыФормы, ФормаОбъектаИС);
			Если РеквизитыФормы.Объект = Неопределено Тогда
				МожноЗадатьВопрос = Ложь;
			ИначеЕсли ТипЗнч(РеквизитыФормы.Объект.Ссылка) <> ТипЗнч(СсылкаНаОбъектИС) Тогда
				МожноЗадатьВопрос = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если МожноЗадатьВопрос = Ложь Тогда
			// Ничего сделать не сможем.
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		// Предложим пользователю автоматически записать объект ИС и продолжить.
		ДополнительныеПараметры = Новый Структура("ФормаОбъектаИС, ОповещениеПродолжения",
			ФормаОбъектаИС,
			ОповещениеПродолжения);
		ОповещениеВопросаЗаписи = Новый ОписаниеОповещения(
			"ВопросЗаписиЗавершение",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			ДополнительныеПараметры);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = '%1
			|Данные будут записаны.'"),
			ТекстПредупреждения);
		ПоказатьВопросДаНет(
			ОповещениеВопросаЗаписи,
			ТекстВопроса,
			НСтр("ru = 'ОК'"),
			НСтр("ru = 'Отмена'"),
			КодВозвратаДиалога.Да);
		
	Иначе
		// Вопрос пользователю не нужен.
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, СсылкаНаОбъектИС);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 2.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО2() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции2");
	
КонецФункции

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО3() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции3");
	
КонецФункции

// Выполняет поиск связанного объекта ДО, при необходимости создавая его на основании объекта ИС
// с заполнением по правилам интеграции, если подходящее правило существует.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, для которого разыскивается связанный объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания с
//     передачей в качестве параметра Структуры (ID, type, name).
//
Процедура НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения) Экспорт
	
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		ОбъектИС);
	
	Если СвязанныйОбъектДО <> Неопределено Тогда // найден
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СвязанныйОбъектДО);
		Возврат;
	КонецЕсли;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотКлиент");
		МодульИнтеграцияС1СДокументооборотКлиент.НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборот3Клиент");
		МодульИнтеграцияС1СДокументооборот3Клиент.НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы по выбранному значению.
//
// Параметры:
//   Реквизит - Строка - строка с именем реквизита формы.
//   ВыбранноеЗначение - Строка, Структура - выбранное значение.
//   СтандартнаяОбработка - Булево - признак стандартной обработки выбора.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, содержащая заполняемый реквизит.
//   ЭтоТаблица - Булево - признак, указывающий на то что заполнить требуется реквизит строки табличной части.
//   Элемент - ПолеФормы - поле табличной части, в которое пользователь вводит значение.
//   УстанавливатьМодифицированность - Булево - устанавливать модифицированность формы-владельца.
//
Процедура ОбработкаВыбораДанныхДляАвтоПодбора(Реквизит, ВыбранноеЗначение, СтандартнаяОбработка, ФормаВладелец,
		ЭтоТаблица = Ложь, Элемент = Неопределено, УстанавливатьМодифицированность = Истина) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение.name;
			ФормаВладелец[Реквизит + "ID"] = ВыбранноеЗначение.ID;
			ФормаВладелец[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение.name;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = ВыбранноеЗначение.ID;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		КонецЕсли;
		
		Если УстанавливатьМодифицированность Тогда
			ФормаВладелец.Модифицированность = Истина;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("ЭтоТаблица", ЭтоТаблица);
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		Оповестить("Документооборот_ВыборДанныхДляАвтоПодбора",
			ПараметрыОповещения, ФормаВладелец);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение;
		КонецЕсли;
		
		Если УстанавливатьМодифицированность Тогда
			ФормаВладелец.Модифицированность = Истина;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("ЭтоТаблица", ЭтоТаблица);
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		Оповестить("Документооборот_ВыборДанныхДляАвтоПодбора",
			ПараметрыОповещения, ФормаВладелец);
	КонецЕсли;
	
КонецПроцедуры

// Создает оповещение при добавлении связи на клиенте.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект системы.
//
Процедура Оповестить_ДобавлениеСвязи(ID, Тип, СсылкаНаОбъект) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Объект", СсылкаНаОбъект);
	
	Оповестить("Документооборот_ДобавлениеСвязи", ПараметрыОповещения);
	
КонецПроцедуры

// Создает оповещение при удалении связи на клиенте.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект системы.
//
Процедура Оповестить_УдалениеСвязи(ID, Тип, СсылкаНаОбъект) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Объект", СсылкаНаОбъект);
	
	Оповестить("Документооборот_УдалениеСвязи", ПараметрыОповещения);
	
КонецПроцедуры

// Устанавливает отбор при выборе объекта ДО, связанного с объектом ИС.
//
// Параметры:
//   СвязываемыйОбъект - ЛюбаяСсылка - объект ИС, связываемый с объектом ДО.
//   ТипОбъектаДокументооборота - Строка - тип выбираемого объекта ДО.
//   ВидДокументаДО - Структура - заполняется для объектов ДО типа Документ:
//     * Значение - Строка - наименование вида документа
//     * ЗначениеID - Строка - идентификатор вида документа
//
// Возвращаемое значение:
//   Структура
//   Неопределено - структура отбора, накладываемого перед предъявлением пользователю.
//
Функция ОтборПриВыбореСвязанногоОбъекта(СвязываемыйОбъект, ТипОбъектаДокументооборота,
		ВидДокументаДО = Неопределено) Экспорт
	
	Отбор = Неопределено;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриУстановкеОтбораПриВыбореСвязанногоОбъекта(
		СвязываемыйОбъект,
		ТипОбъектаДокументооборота,
		Отбор);
	
	Если ЗначениеЗаполнено(ВидДокументаДО) Тогда
		Если Отбор = Неопределено Тогда
			Отбор = Новый Структура;
		КонецЕсли;
		Отбор.Вставить("documentType", ВидДокументаДО);
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

// Открывает нужную версию формы "Задачи мне", в зависимости от того какая редакция 1С:Документооборот используется.
//
// Параметры:
//   Владелец - ОкноКлиентскогоПриложения , ФормаКлиентскогоПриложения - форма или элемент управления другой формы.
//   Уникальность - Произвольный - ключ, значение которого будет использоваться для поиска уже открытых форм.
//   Окно - ОкноКлиентскогоПриложения - окно приложения, в котором будет открыта форма.
//
Процедура ОткрытьЗадачиМне(Владелец, Уникальность, Окно) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ЗадачиМне";
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот3.Форма.ЗадачиМне";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы,, Владелец, Уникальность, Окно);
	
КонецПроцедуры

// Открывает объект Документооборота.
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта XDTO Документооборота.
//   ID - Строка - идентификатор объекта Документооборота.
//   ВладелецФормы - Произвольный - произвольное значение, устанавливаемое в качестве владельца формы.
//   ДополнительныеПараметры - Структура - параметры, передаваемые в открываемый объект.
//   Оповещение - ОписаниеОповещения - оповещение при закрытии формы.
//
Процедура ОткрытьОбъект(ТипОбъекта, ID, ВладелецФормы = Неопределено, ДополнительныеПараметры = Неопределено,
		Оповещение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникФормыБазовая = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.";
	
	СоответствиеФормБазовая = Новый Соответствие;
	СоответствиеФормБазовая.Вставить("DMFile", "Файл");
	
	ИмяФормы = СоответствиеФормБазовая.Получить(ТипОбъекта);
	
	Если ЗначениеЗаполнено(ИмяФормы) Тогда
		
		ПараметрыФормы = Новый Структура("ID, type", ID, ТипОбъекта);
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			Для Каждого Элемент Из ДополнительныеПараметры Цикл
				ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ОткрытьФорму(ИсточникФормыБазовая + ИмяФормы, ПараметрыФормы, ВладелецФормы, ID,,, Оповещение);
		
	Иначе
		
		СоответствиеФорм = Новый Соответствие;
		
		Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			ИсточникФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.";
			МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
				"ИнтеграцияС1СДокументооборотКлиент");
			МодульИнтеграцияС1СДокументооборотКлиент.ЗаполнитьСоответствиеФорм(СоответствиеФорм);
		ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
			ИсточникФормы = "Обработка.ИнтеграцияС1СДокументооборот3.Форма.";
			МодульИнтеграцияС1СДокументооборот3Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
				"ИнтеграцияС1СДокументооборот3Клиент");
			МодульИнтеграцияС1СДокументооборот3Клиент.ЗаполнитьСоответствиеФорм(СоответствиеФорм);
		КонецЕсли;
		
		ИмяФормы = СоответствиеФорм.Получить(ТипОбъекта);
		
		Если ЗначениеЗаполнено(ИмяФормы) Тогда
			
			ПараметрыФормы = Новый Структура("ID, type", ID, ТипОбъекта);
			Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
				Для Каждого Элемент Из ДополнительныеПараметры Цикл
					ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ОткрытьФорму(ИсточникФормы + ИмяФормы, ПараметрыФормы, ВладелецФормы, ID,,, Оповещение);
			
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru='Просмотр объектов такого типа не поддерживается в этой версии 1С:Документооборота.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает вопрос "Да" / "Нет", принимая Esc и закрытие формы крестиком как ответ "Нет".
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия с
//     передачей параметра КодВозвратаДиалога.Да или КодВозвратаДиалога.Нет.
//   ТекстВопроса - Строка - текст задаваемого вопроса.
//   ТекстКнопкиДа - Строка - необязательный, текст кнопки "Да".
//   ТекстКнопкиНет - Строка - необязательный, текст кнопки "Нет".
//   КнопкаПоУмолчанию - РежимДиалогаВопрос - необязательный, кнопка по умолчанию.
//   Заголовок - Строка - необязательный, содержит заголовок окна вопроса.
//
Процедура ПоказатьВопросДаНет(ОписаниеОповещенияОЗавершении, ТекстВопроса,
		ТекстКнопкиДа = Неопределено, ТекстКнопкиНет = Неопределено,
		КнопкаПоУмолчанию = Неопределено, Заголовок = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьВопросДаНетЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		ОписаниеОповещенияОЗавершении);
	
	Кнопки = Новый СписокЗначений;
	Если ТекстКнопкиДа = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Да'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.ОК, ТекстКнопкиДа);
	КонецЕсли;
	Если ТекстКнопкиНет = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, ТекстКнопкиНет);
	КонецЕсли;
	
	Если КнопкаПоУмолчанию = Неопределено Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,,Заголовок);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Да Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.ОК, Заголовок);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Нет Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена, Заголовок);
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Недопустимое значение кнопки по умолчанию: %1'"), КнопкаПоУмолчанию);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после закрытия окна с вопросом "Да" / "Нет" и вызывает ранее переданный обработчик
// оповещения с передачей ответа пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя,
//     КодВозвратаДиалога.ОК или КодВозвратаДиалога.Отмена.
//   ОписаниеОповещения - ОписаниеОповещения - описание вызываемого оповещения.
//
Процедура ПоказатьВопросДаНетЗавершение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Управляет активностью обработчика обновления токена доступа в ДО.
//
// Параметры:
//   ИспользуетсяАутентификацияJWT - Булево - текущий пользователь использует авторизацию через JWT-токен.
//
Процедура ПриАвторизации(ИспользуетсяАутентификацияJWT) Экспорт
	
	Если ИспользуетсяАутентификацияJWT Тогда
		ПодключитьОбработчикОжидания(
			"ПриИстеченииВремениЖизниТокенаДоступа",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВремяЖизниТокенаДоступа());
	Иначе
		ОтключитьОбработчикОжидания("ПриИстеченииВремениЖизниТокенаДоступа");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет подключение к 1С:Документообороту, при необходимости запрашивая имя пользователя и пароль.
//
// Параметры:
//
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого после проверки подключения с параметром
//     типа Булево.
//   Владелец - ФормаКлиентскогоПриложения - форма, в которой следует вызвать повторную попытку подключения.
//            - ОбщийМодуль - клиентский модуль, из которого вызывается команда.
//   ПовторноПоказыватьОкноАвторизации - Булево - Истина, если при отсутствии подключения необходимо
//     повторно показать окно авторизации, даже если оно было показано ранее.
//   ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//   СкрыватьИнтерфейс - Булево - если окно ожидания не выводится, то данный параметр указывает нужно ли использовать
//     переключение страниц, который скроет весь интерфейс, либо же нужно не скрывать интерфейс, а сделать видимой
//     группу элементов длительной операции.
//
Процедура ПроверитьПодключение(ОписаниеОповещения, Владелец, ПовторноПоказыватьОкноАвторизации = Ложь,
		ВыводитьОкноОжидания = Истина, СкрыватьИнтерфейс = Ложь) Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПарольИзвестен() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ИмяПользователя, ПарольСохранен, Пароль,
		|ИспользуетсяАутентификацияОССтароеЗначение, ИспользуетсяАутентификацияJWTСтароеЗначение");
	ПрочитатьНастройкиАвторизации(
		ПараметрыОповещения.ИмяПользователя,
		ПараметрыОповещения.ПарольСохранен,
		ПараметрыОповещения.Пароль,
		ПараметрыОповещения.ИспользуетсяАутентификацияОССтароеЗначение,
		ПараметрыОповещения.ИспользуетсяАутентификацияJWTСтароеЗначение);
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОповещения.Вставить("Владелец", Владелец);
	ПараметрыОповещения.Вставить("ПовторноПоказыватьОкноАвторизации", ПовторноПоказыватьОкноАвторизации);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	Если ТипЗнч(Владелец) = Тип("ФормаКлиентскогоПриложения") Тогда
		УникальныйИдентификатор = Владелец.УникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = Неопределено;
	КонецЕсли;
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПодключитьсяИПолучитьВерсиюСервисаАсинхронно(
		ПараметрыОповещения.ИмяПользователя,
		ПараметрыОповещения.Пароль,
		УникальныйИдентификатор);
	ВыполнитьЗапросАсинхронно(
		Владелец,
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ВыводитьОкноОжидания,
		НСтр("ru = 'Подключение к 1С:Документооборот.'"),
		СкрыватьИнтерфейс);
	
КонецПроцедуры

// Вызывается после закрытия окна авторизации. Вызывает обработчик, переданный вызвавшей формой.
//
// Параметры:
//   Результат - Булево - Истина, если в окне авторизации нажата ОК и подключение успешно.
//   Параметры - Структура:
//     ОписаниеОповещения - ОписаниеОповещения - обработчик вызвавшей формы.
//
Процедура ПроверитьПодключениеПослеОкнаАвторизации(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда // успех, настройки авторизации сохранены в параметрах сеанса
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
		
	Иначе // подключиться не удалось, или пользователь отказался от попытки авторизации
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса("0.0.0.0");
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Получает имя пользователя и пароль для доступа к 1С:Документообороту.
// В веб-клиенте возвращается только имя пользователя. Только имя пользователя возвращается и
// тогда, когда в предыдущий раз настройки были сохранены в веб-клиенте или на другом компьютере.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   ПарольСохранен - Булево - Истина, если пароль сохранен пользователем.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация ОС.
//   ИспользуетсяАутентификацияJWT - Булево - Истина, если используется аутентификация JWT.
//
Процедура ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль,
		ИспользуетсяАутентификацияОС = Ложь, ИспользуетсяАутентификацияJWT = Ложь) Экспорт
	
	Пароль = Неопределено;
	ЧастьПароляВИБ = Неопределено;
	ИмяВременногоФайла = Неопределено;
	
#Если ВебКлиент Тогда
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизации(
		ИмяПользователя,,,,,
		ИспользуетсяАутентификацияОС,
		ИспользуетсяАутентификацияJWT);
	ПарольСохранен = Ложь;
#Иначе
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизации(
		ИмяПользователя,
		ИмяКомпьютера(),
		ПарольСохранен,
		ЧастьПароляВИБ,
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС,
		ИспользуетсяАутентификацияJWT);
#КонецЕсли
	
	Если ИспользуетсяАутентификацияОС Или ИспользуетсяАутентификацияJWT Тогда
		Возврат;
		
	ИначеЕсли ПарольСохранен Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			РазделенныйПароль = Новый Массив;
			РазделенныйПароль.Добавить(ЧастьПароляВИБ);
			РазделенныйПароль.Добавить(ТекстовыйДокумент.ПолучитьТекст());
			Пароль = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СобратьПароль(РазделенныйПароль);
			ПарольСохранен = (Пароль <> Неопределено);
		Исключение
			// Файл удален или поврежден.
			ПарольСохранен = Ложь;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаписатьПредупреждение(
				НСтр("ru = 'Не найдены сохраненные учетные данные пользователя 1С:Документооборота'"));
		КонецПопытки;
		Если ПарольСохранен
				И ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЭтоПользовательЗаданияОбмена() Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(
				ИмяПользователя,
				Пароль);
		КонецЕсли;
		
	Иначе
		// Пароль не сохранен.
		// Получим настройки из старого хранилища общих настроек, сохраним их в новом и удалим.
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(
			ИмяПользователя,
			Пароль,
			ПарольСохранен);
		Если ИмяПользователя <> "" И ПарольСохранен = Истина Тогда
			СохранитьНастройкиАвторизации(ИмяПользователя, Пароль);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЭтоПользовательЗаданияОбмена() Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(
					ИмяПользователя,
					Пароль);
			КонецЕсли;
#Если Не ВебКлиент Тогда
			// В веб-клиенте пароль не сохранился, и удаление преждевременно.
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек();
#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект ИС, заполняет его по переданным данным и устанавливает связь.
//
// Параметры:
//   ДанныеЗаполнения - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеЗаполненияИнтегрируемогоОбъекта
//   Форма - ФормаКлиентскогоПриложения - форма объекта ДО или иная форма, требующая оповещения.
//
Процедура СоздатьИнтегрированныйОбъектИзДанныхЗаполнения(ДанныеЗаполнения, Форма = Неопределено) Экспорт
	
	Основание = Новый Структура;
	Для Каждого Элемент Из ДанныеЗаполнения Цикл
		Основание.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	Для Каждого Элемент Из ДанныеЗаполнения.ЗначенияРеквизитов Цикл
		Основание.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения.ЗначенияРеквизитов);
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
		ДанныеЗаполнения.Объект1СДокументооборота.Тип);
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
		ДанныеЗаполнения.Объект1СДокументооборота.ID);
	
	Уникальность = Новый УникальныйИдентификатор();
	
	ФормаОбъекта = ОткрытьФорму(
		ДанныеЗаполнения.ИмяФормы,
		ПараметрыФормы,
		Форма,
		Уникальность,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
	Если ФормаОбъекта = Неопределено Тогда
		Инфо = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
			СтрШаблон(
				НСтр("ru = 'Не удалось заполнить объект по данным из 1С:Документооборот.
					|Проверьте <a href = ""%1"">правило интеграции</a>.'"),
				ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.ПравилоИнтеграции)));
		ПоказатьПредупреждение(, Инфо);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект1СДокументооборота", ДанныеЗаполнения.Объект1СДокументооборота);
	ПараметрыОповещения.Вставить("ФормаОбъекта", ФормаОбъекта);
	ПараметрыОповещения.Вставить("НаличиеПрисоединенныхФайлов", ДанныеЗаполнения.НаличиеПрисоединенныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьИнтегрированныйОбъектЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		ПараметрыОповещения);
	
	ФормаОбъекта.ОписаниеОповещенияОЗакрытии = Оповещение;
	
КонецПроцедуры

// Запоминает факт показа окна авторизации, чтобы больше не беспокоить пользователя в пределах сеанса.
//
Процедура СохранитьАвторизацияПредложена() Экспорт
	
	Если ПараметрыПриложения["ИнтеграцияС1СДокументооборот.АвторизацияПредложена"] = Неопределено Тогда
		ПараметрыПриложения.Вставить("ИнтеграцияС1СДокументооборот.АвторизацияПредложена", Истина);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриСохраненииПредложенияАвторизации();
	
КонецПроцедуры

// Сохраняет имя пользователя и пароль для доступа к 1С:Документообороту.
// В веб-клиенте сохраняется только имя пользователя.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - необязательный, пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//   ИспользуетсяАутентификацияJWT - Булево - Истина, если используется аутентификация через JWT-токены.
//
Процедура СохранитьНастройкиАвторизации(ИмяПользователя, Пароль = "", ИспользуетсяАутентификацияОС = Ложь,
		ИспользуетсяАутентификацияJWT = Ложь) Экспорт
	
#Если ВебКлиент Тогда
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизации(
		ИмяПользователя,
		Пароль,,,,
		ИспользуетсяАутентификацияОС,
		ИспользуетсяАутентификацияJWT);
#Иначе
	ИмяСтарогоВременногоФайла = Неопределено;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизации(,,,,
		ИмяСтарогоВременногоФайла);
	Если ЗначениеЗаполнено(ИмяСтарогоВременногоФайла) Тогда
		Файл = Новый Файл(ИмяСтарогоВременногоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(ИмяСтарогоВременногоФайла);
		КонецЕсли;
	КонецЕсли;
	
	ЧастьПароляВИБ = "";
	ИмяВременногоФайла = "";
	
	Если Не ИспользуетсяАутентификацияОС И Не ИспользуетсяАутентификацияJWT Тогда
		РазделенныйПароль = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РазделитьПароль(Пароль);
		
		ЧастьПароляВИБ = РазделенныйПароль[0];
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		// В сеансе подключения к удаленному рабочему столу Windows каталог временных файлов может быть временным
		// подкаталогом, создаваемым на время сеанса. В этом случае создадим файл в общем каталоге пользователя.
		ПозицияОбщегоКаталога = СтрНайти(ВРег(ИмяВременногоФайла), "\TEMP\", НаправлениеПоиска.СКонца);
		Если ПозицияОбщегоКаталога <> 0 Тогда
			ПозицияПредпоследнегоРазделителя = ПозицияОбщегоКаталога + СтрДлина("\TEMP");
			ПозицияПоследнегоРазделителя = СтрНайти(ИмяВременногоФайла, "\", НаправлениеПоиска.СКонца);
			Если ПозицияПоследнегоРазделителя > ПозицияПредпоследнегоРазделителя Тогда
				ИмяВременногоФайла = Лев(ИмяВременногоФайла, ПозицияПредпоследнегоРазделителя - 1)
					+ Сред(ИмяВременногоФайла, ПозицияПоследнегоРазделителя);
			КонецЕсли;
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(РазделенныйПароль[1]);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизации(
		ИмяПользователя,
		Пароль,
		ИмяКомпьютера(),
		ЧастьПароляВИБ,
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС,
		ИспользуетсяАутентификацияJWT);
#КонецЕсли
	
КонецПроцедуры

// Открывает форму выбора объекта метаданных интегрированной системы.
//
// Параметры:
//   ТипОбъектаИС - Строка - текущий тип объекта метаданных интегрированной системы.
//   ОписаниеОповещения - ОписаниеОповещения - описание вызываемого оповещения.
//
Процедура ТипОбъектаИСНачалоВыбора(ТипОбъектаИС, ОписаниеОповещения) Экспорт
	
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("ТекущаяСтрока", ТипОбъектаИС);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОбъектаМетаданных",
		ПараметрФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Вызывается при открытии форм связанных данных ДО и устанавливает заголовок согласно владельцу.
//
// Параметры:
//   Форма - РасширениеФормыКлиентскогоПриложенияДляОбъектов - форма, заголовок которой следует уточнить из владельца:
//     * Заголовок - Строка
//     * ВладелецФормы - ФормаКлиентскогоПриложения:
//         ** Заголовок - Строка
//
Процедура УстановитьЗаголовокПриОткрытии(Форма) Экспорт
	
	Если Форма.Окно = Неопределено
			И ТипЗнч(Форма.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
			И ЗначениеЗаполнено(Форма.ВладелецФормы.Заголовок) Тогда
		
		Если ЗначениеЗаполнено(Форма.Заголовок) Тогда
			Форма.Заголовок = СтрШаблон("%1 (%2)", Форма.Заголовок, Форма.ВладелецФормы.Заголовок);
		Иначе
			Форма.Заголовок = Форма.ВладелецФормы.Заголовок;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет массив пользовательских настроек МассивСтруктур.
// Может применяться для случаев вызова с клиента.
//
// Параметры:
//   МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//   НужноОбновитьПовторноИспользуемыеЗначения - Булево - требуется обновить повторно используемые значения
//
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриСохраненииНастроекПользователя(
		МассивСтруктур,
		НужноОбновитьПовторноИспользуемыеЗначения,
		СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбщегоНазначенияВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияВызовСервера");
	МодульОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьМассив(
		МассивСтруктур,
		НужноОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

// Возвращает выделенные в таблице файлы, игнорируя роли файлов.
//
// Параметры:
//   КоллекцияФайлы - ДанныеФормыКоллекция - таблица или дерево файлов.
//   ВыделенныеСтроки - Массив из Число - идентификаторы выделенных строк коллекции.
//
// Возвращаемое значение:
//   Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//
Функция ВыделенныеФайлы(КоллекцияФайлы, ВыделенныеСтроки) Экспорт
	
	ВыделенныеФайлы = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Данные = КоллекцияФайлы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		РольФайлаID = Неопределено;
		Если Данные.Свойство("РольФайлаID") Тогда
			РольФайлаID = Данные.РольФайлаID;
		КонецЕсли;
		Тип = "";
		Если Данные.Свойство("Тип") Тогда
			Тип = Данные.Тип;
		КонецЕсли;
		Если Тип <> "DMFileRole" Тогда
			ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
				Данные.Наименование,
				Данные.ID,
				"DMFile",
				Данные.Расширение,
				РольФайлаID);
			ВыделенныеФайлы.Добавить(ДанныеФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыделенныеФайлы;
	
КонецФункции

// Заканчивает редактирование файла, помещая его в ДО и снимая захват, если необходимо.
//
// Параметры:
//   ID - Строка - идентификатор файла ДО.
//   Наименование - Строка - имя редактируемого файла.
//   Расширение - Строка - расширение редактируемого файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный, вызывается при успешном завершении.
//   ВладелецID - Строка - идентификатор владельца файла.
//
Процедура ЗакончитьРедактированиеФайла(ID, Наименование, Расширение, УникальныйИдентификаторФормы,
		ОписаниеОповещенияОЗавершении = Неопределено, ВладелецID = "") Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFile",
		Расширение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗакончитьРедактированиеБезРасширенияПослеПомещения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,,,Истина, УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось сохранить изменения по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗакончитьРедактированиеCРасширениемПослеВопросаОбОсвобождении",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	// Проверим, можно ли вообще выполнить операцию (на стороне ДО ситуация могла измениться).
	СведенияОРедактировании =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
			ID,
			"DMFile");
	Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
	Если Не СведенияОРедактировании.Сохранен Или СведенияОРедактировании.НаЧтение Тогда
		ПоказатьВопросДаНет(
			ОписаниеОповещения,
			НСтр("ru = 'Файл не найден в рабочем каталоге. Освободить его?'"));
		Возврат;
	КонецЕсли;
	
	// Проверим, существует ли файл в указанном месте.
	Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
	Параметры.Вставить("Файл", Файл);
	Если Не Файл.Существует() Тогда
		ПоказатьВопросДаНет(
			ОписаниеОповещения,
			НСтр("ru = 'Файл не найден в рабочем каталоге. Освободить его?'"));
		Возврат;
	КонецЕсли;
	
	Параметры.ТекущийФайл.Размер = Файл.Размер();
	Параметры.ТекущийФайл.ДатаМодификации = Файл.ПолучитьВремяИзменения();
	Параметры.ТекущийФайл.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	// Все нормально, поместим файл в ДО и освободим его.
	ТекстПояснения = СтрШаблон(НСтр("ru = 'Идет сохранение файла ""%1"" (%2). Пожалуйста, подождите...'"),
		СведенияОРедактировании.ПолныйПуть,
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.КраткоеПредставлениеРазмера(
			Параметры.ТекущийФайл.Размер));
	Состояние(ТекстПояснения);
	
	ОповещениеПослеПомещенияФайла = Новый ОписаниеОповещения(
		"ЗакончитьРедактированиеСРасширениемПослеПомещения",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	Параметры.Вставить("ОповещениеПослеПомещенияФайла", ОповещениеПослеПомещенияФайла);
	
	Если СведенияОРедактировании.Свойство("КомментарийКВерсии") Тогда
		ОповещениеПослеВводаКомментария = Новый ОписаниеОповещения(
			"ПослеВводаОписанияВнесенныхИзменений",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ФормаВозвратаФайла",,,,,,
			ОповещениеПослеВводаКомментария,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПослеВводаОписанияВнесенныхИзменений(КодВозвратаДиалога.ОК, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Извлекает текст из файла и возвращает его в виде строки.
//
// Параметры:
//   ПолноеИмяФайла - Строка - полное имя файла.
//
// Возвращаемое значение:
//   Строка - извлеченный текст.
//
Функция ИзвлечьТекст(ПолноеИмяФайла) Экспорт
	
	ИзвлеченныйТекст = "";
	
	Попытка
		Файл = Новый Файл(ПолноеИмяФайла);
		Если Не Файл.Существует() Тогда
			Возврат ИзвлеченныйТекст;
		КонецЕсли;
	Исключение
		Возврат ИзвлеченныйТекст;
	КонецПопытки;
	
	Прекратить = Ложь;
	Отказ = Ложь;
	
	ОбщиеНастройки = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ОбщиеНастройкиРаботыСФайлами;
	
#Если Не ВебКлиент И Не МобильныйКлиент Тогда
	
	РасширениеИмениФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
	
	РасширениеФайлаВСписке = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РасширениеФайлаВСписке(
		ОбщиеНастройки.СписокРасширенийТекстовыхФайлов,
		РасширениеИмениФайла);
	
	Если РасширениеФайлаВСписке Тогда
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ИзвлечьТекстИзТекстовогоФайла(
			ПолноеИмяФайла,
			Неопределено,
			Отказ);
	КонецЕсли;
	
	Попытка
		Извлечение = Новый ИзвлечениеТекста(ПолноеИмяФайла);
		ИзвлеченныйТекст = Извлечение.ПолучитьТекст();
	Исключение
		// Когда текст некому извлечь исключение не требуется. Это нормальный случай.
		ИзвлеченныйТекст = "";
		Прекратить = Истина;
	КонецПопытки;
	
#КонецЕсли
	
	Если ПустаяСтрока(ИзвлеченныйТекст) Тогда
		
		РасширениеИмениФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПолноеИмяФайла);
		
		РасширениеФайлаВСписке = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РасширениеФайлаВСписке(
			ОбщиеНастройки.СписокРасширенийФайловOpenDocument,
			РасширениеИмениФайла);
		
		Если РасширениеФайлаВСписке Тогда
			Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ИзвлечьТекстOpenDocument(
				ПолноеИмяФайла,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Прекратить Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ИзвлеченныйТекст;
	
КонецФункции

// Получается индекс пиктограммы файла - индекс в картинке КоллекцияПиктограммФайлов.
//
// Параметры:
//   Расширение - Строка - расширение файла.
//   ПометкаУдаления - Булево - файл помечен на удаление.
//
// Возвращаемое значение:
//   Число
//
Функция ИндексПиктограммыФайла(Расширение, ПометкаУдаления = Ложь) Экспорт
	
	ИндексКартинки = 0;
	
	ИмяПодсистемы = "СтандартныеПодсистемы.РаботаСФайлами";
	ПодсистемаРаботаСФайламиСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует(ИмяПодсистемы);
	
	Если ПодсистемаРаботаСФайламиСуществует Тогда
		МодульРаботаСФайламиСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"РаботаСФайламиСлужебныйКлиентСервер");
		ИндексКартинки = МодульРаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ИндексКартинки = ИндексКартинки + 1;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

// По окончании подписания создает оповещение о подписании файла.
//
// Параметры:
//   Событие - Строка - имя события, произошедшего с файлом.
//   ИмяФайла - Строка - имя файла для вывода в сообщение.
//   ИдентификаторФайла - Строка - идентификатор файла Документооборота.
//   ВладелецФайла - Строка - идентификатор владельца файла.
//   ТекстСообщения - Строка - текст состояния.
//   ОповещатьКарточкуДокумента - Булево - требуется ли вызывать обработку оповещения в карточке документа.
//     Например, если изменение произошло в карточке файла - вызвать оповещение в карточке документа нужно.
//     Если, например, из самой карточки документа идет групповое подписание 10 файлов - дополнительно 10 раз
//     вызывать оповещение в карточке документа не нужно.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ИнформироватьОбИзмененииФайла(Событие, ИмяФайла, ИдентификаторФайла, ВладелецФайла,
		ТекстСообщения = "", ОповещатьКарточкуДокумента = Истина, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ПараметрыОповещенияЗаписьФайл = Новый Структура;
	ПараметрыОповещенияЗаписьФайл.Вставить("Событие", Событие);
	ПараметрыОповещенияЗаписьФайл.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыОповещенияЗаписьФайл.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	ПараметрыОповещенияЗаписьФайл.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыОповещенияЗаписьФайл.Вставить("ОповещатьКарточкуДокумента", ОповещатьКарточкуДокумента);
	ПараметрыОповещенияЗаписьФайл.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещенияЗаписьФайл);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Состояние(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Отправляет файлы на печать.
//
// Параметры:
//   КоллекцияФайлы - ДанныеФормыКоллекция - таблица или дерево файлов.
//   ВыделенныеСтроки - Массив из Число - идентификаторы выделенных строк коллекции.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура НапечататьФайлы(КоллекцияФайлы, ВыделенныеСтроки, УникальныйИдентификаторФормы) Экспорт
	
	ВыделенныеФайлы = ВыделенныеФайлы(КоллекцияФайлы, ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НапечататьФайлыПослеПолучения",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент);
	
	ПолучитьФайлыИПродолжить(
		ВыделенныеФайлы,
		УникальныйИдентификаторФормы,
		ОписаниеОповещения);
	
КонецПроцедуры

// Начинает сохранение выделенных файлов.
//
// Параметры:
//   КоллекцияФайлы - ДанныеФормыКоллекция - таблица файлов с колонками ID, Наименование, Расширение.
//   ВыделенныеСтроки - Массив из Число - идентификаторы выделенных строк коллекции.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещения - ОписаниеОповещения - необязательный, обработчик, вызываемый с передачей имени файла
//     после его сохранения.
//
Процедура НачатьСохранениеВыделенныхФайлов(КоллекцияФайлы, ВыделенныеСтроки, УникальныйИдентификаторФормы,
		ОписаниеОповещения = Неопределено) Экспорт
	
	ВыделенныеФайлы = ВыделенныеФайлы(КоллекцияФайлы, ВыделенныеСтроки);
	
	Если ВыделенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	Для Каждого ВыделенныйФайл Из ВыделенныеФайлы Цикл
		Если Параметры.Свойство("ТекущийФайл") Тогда
			Параметры.ОставшиесяФайлы.Добавить(ВыделенныйФайл);
		Иначе
			Параметры.Вставить("ТекущийФайл", ВыделенныйФайл);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	СохранитьФайлыКакНачало(Параметры);
	
КонецПроцедуры

// Обновляет файл ДО из файла на диске.
//
// Параметры:
//   ID - Строка - Идентификатор файла ДО.
//   Наименование - Строка - имя редактируемого файла.
//   Расширение - Строка - расширение редактируемого файла.
//   ДатаМодификации - Дата - дата модификации редактируемого файла. Местное время.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный, вызывается при успешном завершении.
//   ВладелецID - Строка - идентификатор владельца файла.
//
Процедура ОбновитьИзФайлаНаДиске(ID, Наименование, Расширение, ДатаМодификации, УникальныйИдентификаторФормы,
		ОписаниеОповещенияОЗавершении = Неопределено, ВладелецID = "") Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFile",
		Расширение);
	ТекущийФайл.ДатаМодификации = ДатаМодификации;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Ложь);
	
	Фильтр = НСтр("ru = 'Файл (*.%1)|*.%1|Все файлы (*.*)|*.*'");
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Фильтр = СтрШаблон(Фильтр, Расширение);
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбновитьИзФайлаНаДискеПослеПомещенияФайлаБезРасширения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		Попытка
			НачатьПомещениеФайлаНаСервер(
				ОписаниеОповещения,,,,
				ПараметрыДиалога,
				Параметры.УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить файл по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		СведенияОРедактировании =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
				ID,
				"DMFile");
		Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьИзФайлаНаДискеПослеПомещенияФайлаСРасширением",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	Попытка
		НачатьПомещениеФайлаНаСервер(
			ОписаниеОповещения,,,,
			ПараметрыДиалога,
			Параметры.УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Не удалось обновить файл по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

// Открывает версию файла для просмотра.
//
// Параметры:
//   ID - Строка - идентификатор версии в ДО.
//   Наименование - Строка - имя версии.
//   Расширение - Строка - расширение версии.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ОткрытьВерсиюФайла(ID, Наименование, Расширение, УникальныйИдентификаторФормы) Экспорт
	
	ДанныеВерсииФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFileVersion",
		Расширение);
	
	Параметры = Новый Структура("НаЧтение, УникальныйИдентификаторФормы", Истина, УникальныйИдентификаторФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФайлыПослеПолучения",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	ПолучитьФайлыИПродолжить(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеВерсииФайла),
		УникальныйИдентификаторФормы,
		ОписаниеОповещения,
		Истина);
	
КонецПроцедуры

// Открывает каталог файла, в котором он сохранен на просмотр или редактирование.
//
// Параметры:
//   ID - Строка - идентификатор файла в ДО.
//
Процедура ОткрытьКаталогФайла(ID) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Открывать каталог файла можно только после подключения
			|расширения для работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	СведенияОРедактировании =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
			ID,
			"DMFile");
	Если СведенияОРедактировании.Сохранен Тогда
		Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
		Если Файл.Существует() Тогда
			ФайловаяСистемаКлиент.ОткрытьПроводник(СведенияОРедактировании.ПолныйПуть);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Открывает список файлов, присоединенных к объекту ИС.
//
// Параметры:
//   ВладелецФайла - ЛюбаяСсылка - источник команды, объект ИС-владелец файлов.
//   ТекущийФайл - Строка - идентификатор текущего файла, на котором нужно спозиционировать список.
//   ТолькоПросмотр - Булево - режим открытия формы.
//   ВладелецФормы - ФормаКлиентскогоПриложения - форма, из которой вызвана команда.
//   Уникальность - Произвольный - ключ уникальности, с которым должна быть открыта форма присоединенных файлов.
//   Окно - ОкноКлиентскогоПриложения - необязательный параметр, окно формы-владельца.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом
//                     - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - подходящее правило интеграции.
//   ВладелецФайлаID - Строка - идентификатор объекта ДО, являющегося владельцем файла.
//   ВладелецФайлаТип - Строка - тип объекта ДО, являющегося владельцем файла.
//
Процедура ОткрытьПрисоединенныеФайлы(ВладелецФайла, ТекущийФайл = Неопределено, ТолькоПросмотр = Ложь,
		ВладелецФормы = Неопределено, Уникальность = Неопределено, Окно = Неопределено,
		ПравилоИнтеграции = Неопределено, ВладелецФайлаID = "", ВладелецФайлаТип = "") Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Параметры.Вставить("ВладелецФормы", ВладелецФормы);
	Параметры.Вставить("Уникальность", Уникальность);
	Параметры.Вставить("Окно", Окно);
	Параметры.Вставить("ПравилоИнтеграции", ПравилоИнтеграции);
	Параметры.Вставить("ВладелецФайлаID", ВладелецФайлаID);
	Параметры.Вставить("ВладелецФайлаТип", ВладелецФайлаТип);
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ОткрытьПрисоединенныеФайлыЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	Если ВладелецФайла = Неопределено Тогда
		
		ОткрытьПрисоединенныеФайлыЗавершение(ВладелецФайла, Параметры);
		
	Иначе
		
		ВыполнитьПроверкуЗаписиИПродолжить(
			ВладелецФайла,
			ВладелецФормы,
			ОповещениеПродолжения,
			НСтр("ru = 'Присоединенные файлы'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл для просмотра или редактирования.
//
// Параметры:
//   ID - Строка - идентификатор файла в ДО.
//   Наименование - Строка - имя файла.
//   Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   НаЧтение - Булево - Истина, если файл открывается для чтения, и Ложь, если для редактирования.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - вызывается при успешном открытии файла.
//   ВладелецID - Строка - идентификатор владельца файла.
//
Процедура ОткрытьФайл(ID, Наименование, Расширение, УникальныйИдентификаторФормы,
		НаЧтение = Истина, ОписаниеОповещенияОЗавершении = Неопределено, ВладелецID = "") Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFile",
		Расширение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("НаЧтение", НаЧтение);
	Параметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФайлыПослеПолучения",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	ПолучитьФайлыИПродолжить(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийФайл),
		УникальныйИдентификаторФормы,
		ОписаниеОповещения,
		НаЧтение);
	
КонецПроцедуры

// Отменяет редактирование ранее захваченного файла.
//
// Параметры:
//   ID - Строка - идентификатор файла в ДО.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный параметр, описание оповещения,
//     вызываемого после отмены.
//   ВладелецID - Строка - идентификатор владельца файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ОтменитьРедактированиеФайла(ID, ОписаниеОповещенияОЗавершении = Неопределено, ВладелецID = "",
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Неопределено,
		ID,
		"DMFile",
		Неопределено);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтменитьРедактированиеФайлаПослеВопроса",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	ПоказатьВопросДаНет(
		ОписаниеОповещения,
		НСтр("ru = 'Отмена редактирования файла может привести к потере изменений. Продолжить?'"));
	
КонецПроцедуры

// Изменяет пометку удаления файлов.
//
// Параметры:
//   ВыделенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//   ТекущаяПометкаУдаления - Булево - текущее значение пометки удаления файлов, которую нужно
//     изменить на противоположную.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный параметр, описание оповещения,
//     вызываемого после отмены.
//   ВладелецID - Строка - идентификатор владельца файлов.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПометитьНаУдалениеСнятьПометкуФайлов(ВыделенныеФайлы, ТекущаяПометкаУдаления,
		ОписаниеОповещенияОЗавершении = Неопределено, ВладелецID = "",
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ВыделенныеФайлыКоличество = ВыделенныеФайлы.Количество();
	
	ТекстВопроса = "";
	Если ВыделенныеФайлыКоличество = 0 Тогда
		Возврат;
		
	ИначеЕсли ВыделенныеФайлыКоличество = 1 Тогда
		Если ТекущаяПометкаУдаления = Истина Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ВыделенныеФайлы[0].Наименование);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), ВыделенныеФайлы[0].Наименование);
		КонецЕсли;
		
	Иначе
		Если ТекущаяПометкаУдаления = Истина Тогда
			ТекстВопроса = НСтр("ru='Снять с выделенных файлов пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru='Пометить выделенные файлы на удаление?'");
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВыделенныеФайлы", ВыделенныеФайлы);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПометитьНаУдалениеСнятьПометкуФайловЗавершение",
		ЭтотОбъект,
		Параметры);
	
	ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

// Проверяет можно ли добавить только скан-копию и задает вопрос пользователю.
//
// Параметры:
//   СостояниеРазрешаетДобавлениеСканКопии - Булево - можно добавить скан-копию.
//   СостояниеРазрешаетДобавлениеФайла - Булево - можно добавить файл.
//   ОповещениеПродолжение - ОписаниеОповещения - описание оповещения, вызываемого далее.
//
Процедура ПроверитьНеобходимостьДобавленияСканКопииИПродолжить(СостояниеРазрешаетДобавлениеСканКопии,
		СостояниеРазрешаетДобавлениеФайла, ОповещениеПродолжение) Экспорт
	
	Если СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла Тогда
		ТекстВопроса = НСтр("ru = 'В текущем состоянии можно добавить только скан-копию оригинала документа. Продолжить?'");
		ЗаголовокВопроса = НСтр("ru = 'Добавление файла'");
		
		ПоказатьВопросДаНет(
			ОповещениеПродолжение,
			ТекстВопроса,
			КодВозвратаДиалога.Да,,,
			ЗаголовокВопроса);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Раскладывает полное имя файла на составляющие.
//
// Параметры:
//   ПолноеИмяФайла - Строка - полный путь к файлу.
//   ЭтоПапка - Булево - признак того, что требуется разложить полное имя папки, а не файла.
//
// Возвращаемое значение:
//   Структура:
//     * ПолноеИмя - Строка - Содержит полный путь к файлу, т.е. соответствует входному параметру ПолноеИмяФайла.
//     * Путь - Строка - Содержит путь к каталогу, в котором лежит файл.
//     * Имя - Строка - Содержит имя файла с расширением, без пути к файлу.
//     * Расширение - Строка - Содержит расширение файла.
//     * ИмяБезРасширения - Строка - Содержит имя файла без расширения и без пути к файлу.
//
Функция РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоПапка = Ложь) Экспорт
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла, ЭтоПапка);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриРазложенииПолногоИмениФайла(
		СтруктураИмениФайла);
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

// Делает активной указанную версию файла.
//
// Параметры:
//   ИмяФайла - Строка - имя файла-владельца версии.
//   ИдентификаторФайла - Строка - идентификатор .
//   ВладелецФайла - Строка - идентификатор владельца файла-владельца версии.
//   ИдентификаторВерсии - Строка - идентификатор версии, которую следует сделать активной.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при успешном изменении.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура СделатьВерсиюАктивной(ИмяФайла, ИдентификаторФайла, ВладелецФайла, ИдентификаторВерсии,
		ОписаниеОповещения = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ТекстСообщения = "";
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СделатьВерсиюАктивной(
			ИдентификаторФайла, ИдентификаторВерсии, ТекстСообщения) Тогда
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru = 'Активная версия изменена.'");
		КонецЕсли;
		
		ИнформироватьОбИзмененииФайла(
			"ИзменениеАктивнойВерсииФайла",
			ИмяФайла,
			ИдентификаторФайла,
			ВладелецФайла,
			ТекстСообщения,,
			УникальныйИдентификаторФормы);
		
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИдентификаторВерсии);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Создает файл копированием.
//
// Параметры:
//   ОригиналID - Строка - идентификатор оригинала файла.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при успешном создании файла.
//
Процедура СоздатьФайлКопированием(ОригиналID, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОригиналID", ОригиналID);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.Файл",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Начало создания файла из картинки из буфера.
//
// Параметры:
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ВладелецПредставление - Строка - представление владельца файла.
//   Владелец - ЛюбаяСсылка - владелец файла.
//   ЯвляетсяСканКопией - Булево - признак скан-копии.
//   РольФайлаID - Строка - роль файла.
//   ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлИзБуфера(ВладелецID, ВладелецТип, УникальныйИдентификаторФормы,
		ВладелецПредставление = "", Владелец = Неопределено,
		ЯвляетсяСканКопией = Ложь, РольФайлаID = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Неопределено,
		Неопределено,
		"DMFile",
		Неопределено,
		РольФайлаID);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("Владелец", Владелец);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("ВладелецТип", ВладелецТип);
	Параметры.Вставить("ВладелецПредставление", ВладелецПредставление);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ЯвляетсяСканКопией", ЯвляетсяСканКопией);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("ПомещенныеФайлы", Новый Массив);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	Если ПроинициализироватьКомпоненту() Тогда
		ВставитьКартинкуИзБуфераЗавершение(Истина, Параметры);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект, Параметры);
		УстановитьКомпоненту(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

// Начало создания файла из файла на диске.
//
// Параметры:
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ВладелецПредставление - Строка - представление владельца файла.
//   Владелец - ЛюбаяСсылка - владелец файла.
//   ЯвляетсяСканКопией - Булево - признак скан-копии.
//   РольФайлаID - Строка - роль файла.
//   ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДиска(ВладелецID, ВладелецТип, УникальныйИдентификаторФормы,
		ВладелецПредставление = "", Владелец = Неопределено,
		ЯвляетсяСканКопией = Ложь, РольФайлаID = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Неопределено,
		Неопределено,
		"DMFile",
		Неопределено,
		РольФайлаID);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("Владелец", Владелец);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("ВладелецТип", ВладелецТип);
	Параметры.Вставить("ВладелецПредставление", ВладелецПредставление);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ЯвляетсяСканКопией", ЯвляетсяСканКопией);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("ПомещенныеФайлы", Новый Массив);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПодключенияРасширения",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры));
	
КонецПроцедуры

// Начало создания файла из файла на диске.
//
// Параметры:
//   Файл - Файл - перетаскиваемый файл.
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ВладелецПредставление - Строка - представление владельца файла.
//   Владелец - ЛюбаяСсылка - владелец файла.
//   ЯвляетсяСканКопией - Булево - признак скан-копии.
//   РольФайлаID - Строка - роль файла.
//   ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПеретаскиванием(Файл, ВладелецID, ВладелецТип, УникальныйИдентификаторФормы,
		ВладелецПредставление = "", Владелец = Неопределено,
		ЯвляетсяСканКопией = Ложь, РольФайлаID = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Неопределено,
		Неопределено,
		"DMFile",
		Неопределено,
		РольФайлаID);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Файл", Файл);
	Параметры.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("Владелец", Владелец);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("ВладелецТип", ВладелецТип);
	Параметры.Вставить("ВладелецПредставление", ВладелецПредставление);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ЯвляетсяСканКопией", ЯвляетсяСканКопией);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("ПомещенныеФайлы", Новый Массив);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	Файл.НачатьПолучениеРазмера(
		Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеПолученияРазмера",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры));
	
КонецПроцедуры

// Сохраняет версию файла на диск в указанный пользователем каталог.
//
// Параметры:
//   ID - Строка - идентификатор версии Документооборота.
//   Наименование - Строка - имя версии файла.
//   Расширение - Строка - расширение версии файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещения - ОписаниеОповещения - необязательный, обработчик, вызываемый с передачей имени файла
//     после его сохранения.
//
Процедура СохранитьВерсиюКак(ID, Наименование, Расширение, УникальныйИдентификаторФормы,
		ОписаниеОповещения = Неопределено) Экспорт
	
	ДанныеВерсииФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFileVersion",
		Расширение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ДанныеВерсииФайла);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	
	СохранитьФайлыКакНачало(Параметры);
	
КонецПроцедуры

// Сохраняет изменения файла в ДО, не снимая захвата.
//
// Параметры:
//   ID - Строка - Идентификатор файла ДО.
//   Наименование - Строка - имя редактируемого файла.
//   Расширение - Строка - расширение редактируемого файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный, вызывается при успешном завершении.
//   ВладелецID - Строка - идентификатор владельца файла.
//
Процедура СохранитьИзмененияРедактируемогоФайла(ID, Наименование, Расширение,
		УникальныйИдентификаторФормы, ОписаниеОповещенияОЗавершении = Неопределено, ВладелецID = "") Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFile",
		Расширение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("ВладелецID", ВладелецID);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьИзмененияБезРасширенияПослеПомещения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,,,Истина, УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось сохранить изменения по причине:
					|%1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	// Проверим, можно ли вообще выполнить операцию (на стороне ДО ситуация могла измениться).
	СведенияОРедактировании =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
			ID,
			"DMFile");
	Если Не СведенияОРедактировании.Сохранен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось сохранить изменения файла,
			|так как он сейчас не захвачен на редактирование.'"));
		Возврат;
	КонецЕсли;
	Если СведенияОРедактировании.НаЧтение Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось сохранить изменения файла,
			|так как он сейчас сохранен только для просмотра.'"));
		Возврат;
	КонецЕсли;
	Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
	
	// Проверим, существует ли файл в указанном месте.
	Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
	Параметры.Вставить("Файл", Файл);
	Если Не Файл.Существует() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьИзмененияCРасширениемПослеВопросаОбОсвобождении",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		ПоказатьВопросДаНет(
			ОписаниеОповещения,
			НСтр("ru = 'Файл не найден в рабочем каталоге. Освободить его?'"));
		Возврат;
	КонецЕсли;
	
	Параметры.ТекущийФайл.Размер = Файл.Размер();
	Параметры.ТекущийФайл.ДатаМодификации = Файл.ПолучитьВремяИзменения();
	Параметры.ТекущийФайл.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	// Все нормально, поместим файл в ДО и освободим его.
	ТекстПояснения = СтрШаблон(НСтр("ru = 'Идет сохранение файла ""%1"" (%2). Пожалуйста, подождите...'"),
		СведенияОРедактировании.ПолныйПуть,
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.КраткоеПредставлениеРазмера(
			Параметры.ТекущийФайл.Размер));
	Состояние(ТекстПояснения);
	
	ОповещениеПослеПомещенияФайла = Новый ОписаниеОповещения(
		"СохранитьИзмененияСРасширениемПослеПомещения",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	Параметры.Вставить("ОповещениеПослеПомещенияФайла", ОповещениеПослеПомещенияФайла);
	
	Если СведенияОРедактировании.Свойство("КомментарийКВерсии") Тогда
		ОповещениеПослеВводаКомментария = Новый ОписаниеОповещения(
			"ПослеВводаОписанияВнесенныхИзменений",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ФормаВозвратаФайла",,,,,,
			ОповещениеПослеВводаКомментария,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПослеВводаОписанияВнесенныхИзменений(КодВозвратаДиалога.ОК, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет файл на диск в указанный пользователем каталог.
//
// Параметры:
//   ID - Строка - идентификатор файла Документооборота.
//   Наименование - Строка - имя файла.
//   Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещения - ОписаниеОповещения - необязательный, обработчик, вызываемый с передачей имени файла
//     после его сохранения.
//
Процедура СохранитьФайлКак(ID, Наименование, Расширение, УникальныйИдентификаторФормы,
		ОписаниеОповещения = Неопределено) Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFile",
		Расширение);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	
	СохранитьФайлыКакНачало(Параметры);
	
КонецПроцедуры

// Сохраняет файл или версию на диск в указанный пользователем каталог. Общая точка входа для файла и версии.
//
// Параметры:
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызов не требуется.
//
Процедура СохранитьФайлыКакНачало(Параметры) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"". Пожалуйста, подождите...'"),
			Параметры.ИмяФайла);
		Состояние(ТекстПояснения);
		
		Если Параметры.Тип = "DMFile" Тогда
			Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
				Параметры.ТекущийФайл.ID,
				Параметры.УникальныйИдентификаторФормы,,
				Параметры.ТекущийФайл.Размер,
				Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		Иначе // версия
			Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(
				Параметры.ТекущийФайл.ID,
				Параметры.УникальныйИдентификаторФормы,
				Параметры.ТекущийФайл.Размер,
				Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		КонецЕсли;
		Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
		
		ПолучитьФайл(Параметры.АдресВременногоХранилища, Параметры.ТекущийФайл.ИмяФайла, Истина);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьКакПослеДиалогаВыбораФайла",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	Если Параметры.ОставшиесяФайлы.Количество() = 0 Тогда
		Параметры.Вставить("РежимДиалогаВыбораФайла", РежимДиалогаВыбораФайла.Сохранение);
		Диалог = Новый ДиалогВыбораФайла(Параметры.РежимДиалогаВыбораФайла);
		Диалог.ПолноеИмяФайла = Параметры.ТекущийФайл.ИмяФайла;
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Параметры.ТекущийФайл.Расширение, Параметры.ТекущийФайл.Расширение);
	Иначе
		Параметры.Вставить("РежимДиалогаВыбораФайла", РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог = Новый ДиалогВыбораФайла(Параметры.РежимДиалогаВыбораФайла);
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Параметры.ТекущийФайл.Расширение, Параметры.ТекущийФайл.Расширение);
	КонецЕсли;
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

// Получает таблицу значений выделенных строк подписей по выделенным срокам.
//
// Параметры:
//   ВыделенныеСтроки - Массив из Число - массив индексов выделенных строк подписей.
//   ТаблицаПодписей - ДанныеФормыКоллекция - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   ОбъектID - Строка - идентификатор объекта-владельца подписей.
//
// Возвращаемое значение:
//   Массив из Структура:
//     * НомерСтроки - Число
//     * ОбъектID - Строка
//
Функция ВыделенныеПодписи(ВыделенныеСтроки, ТаблицаПодписей, ОбъектID = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если Не ПустаяСтрока(ДанныеСтроки.ОбъектИд) Тогда
			
			ВыделеннаяСтрока = Новый Структура("НомерСтроки, ОбъектID");
			
			ВыделеннаяСтрока.НомерСтроки = ДанныеСтроки.НомерСтроки;
			Если ОбъектID = Неопределено Тогда
				ВыделеннаяСтрока.ОбъектID = ДанныеСтроки.ОбъектИд;
			Иначе
				ВыделеннаяСтрока.ОбъектID = ОбъектID;
			КонецЕсли;
			
			Результат.Добавить(ВыделеннаяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует таблицу подписей на форме в массив структурированных данных подписей.
//
// Параметры:
//   ТаблицаПодписей - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//
// Возвращаемое значение:
//   Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//
Функция ДанныеПодписей(ТаблицаПодписей) Экспорт
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи.
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		ДвоичныеДанныеСертификата = Неопределено;
		Если ЗначениеЗаполнено(ДанныеСтроки.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		КонецЕсли;
		ДанныеПодписи = ДанныеПодписи(
			ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи),
			ДвоичныеДанныеСертификата,
			ДанныеСтроки);
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
	КонецЦикла;
	
	Возврат МассивДанныхПодписей;
	
КонецФункции

// Возвращает данные, из которых будет формироваться XDTO объект DMSignature, для передачи в ДО.
//
// Параметры:
//   Подпись - ДвоичныеДанные - двоичные данные подписи.
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - двоичные данные сертификата.
//   СвойстваПодписи - Структура - тут может быть или структура СвойстваПодписи, которую возвращает БСП при
//     добавлении новой подписи, или строка таблицы подписей, если это уже существующая на стороне ДО подпись.
//
// Возвращаемое значение:
//   Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураПодписи
//
Функция ДанныеПодписи(Подпись, ДвоичныеДанныеСертификата, СвойстваПодписи) Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи(
		Подпись,
		ДвоичныеДанныеСертификата,
		СвойстваПодписи);
	
КонецФункции

// По окончании подписания отображает состояние установки подписи объекту.
//
// Параметры:
//   Представление - Строка - представление подписанного объекта для информирования пользователя о подписании.
//   ДобавленныеПодписиОбъектов - Соответствие:
//     * Ключ - Строка - идентификатор объекта ДО, являющегося владельцем подписи.
//     * Значение - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
//   ДокументID - Строка - идентификатор подписанного документа.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ИнформироватьОПодписании(Представление, ДобавленныеПодписиОбъектов, ДокументID,
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Состояние(СтрШаблон(НСтр("ru = 'Установлена подпись для ""%1""'"), Представление));
	
	Для Каждого Элемент Из ДобавленныеПодписиОбъектов Цикл
		ДанныеВладельцаПодписи = Элемент.Значение;
		Если ДанныеВладельцаПодписи.Тип <> "DMFile" Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлена подпись для ""%1""'"), ДанныеВладельцаПодписи.Наименование);
		ИнформироватьОбИзмененииФайла(
			"ИзменениеЭПФайла",
			ДанныеВладельцаПодписи.Наименование,
			ДанныеВладельцаПодписи.ID,
			ДокументID,
			ТекстСообщения,
			Ложь,
			УникальныйИдентификаторФормы);
	КонецЦикла;
	
КонецПроцедуры

// Преобразует 2-уровневое дерево в массив.
//
// Параметры:
//   ДеревоПодписей - ДанныеФормыДерево - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//
// Возвращаемое значение:
//   Массив из Число - идентификаторы строк подписей.
//
Функция МассивПодписей(ДеревоПодписей) Экспорт
	
	МассивПодписей = Новый Массив;
	
	ЭлементыПервогоУровня = ДеревоПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			МассивПодписей.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивПодписей;
	
КонецФункции

// Добавляет подпись из файла.
//
// Параметры:
//   СвойстваФайла - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СвойстваФайла
//
Процедура НачатьДобавлениеЭПИзФайла(СвойстваФайла) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("СвойстваФайла", СвойстваФайла);
	
	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения(
			"НачатьДобавлениеЭПИзФайлаПослеПодключенияРасширения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры));
	
КонецПроцедуры

// Сохраняет файл и подпись на диск.
//
// Параметры:
//   ID - Строка - идентификатор файла Документооборота.
//   Расширение - Строка - расширение файла.
//   Наименование - Строка - имя файла.
//   Размер - Число - размер файла в байтах.
//   ДатаМодификацииУниверсальная - Дата - дата модификации файла универсальная.
//   УникальныйИдентификаторФормы - Строка - идентификатор вызвавшей формы.
//   Подписи - Массив - содержит структуры существующих подписей файла.
//
Процедура НачатьСохранениеВместеСЭП(ID, Расширение, Наименование, Размер, ДатаМодификацииУниверсальная,
		УникальныйИдентификаторФормы, Подписи = Неопределено) Экспорт
	
	ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
		Наименование,
		ID,
		"DMFile",
		Расширение);
	ТекущийФайл.Размер = Размер;
	ТекущийФайл.ДатаМодификацииУниверсальная = ДатаМодификацииУниверсальная;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийФайл", ТекущийФайл);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("Подписи", Подписи);
	
	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения(
			"НачатьСохранениеВместеСЭППослеПодключенияРасширения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры));
	
КонецПроцедуры

// Формирует подпись для объекта Документооборот и всех его вложенных файлов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения:
//     * Наименование - Строка
//     * Файлы - ДанныеФормыКоллекция
//   ОписаниеОповещенияОЗакрытии - ОписаниеОповещения:
//     * ДополнительныеПараметры - Структура:
//         ** МассивАдресов - Массив
//         ** МассивДанныхДляЗанесенияВБазу - Массив
//
Процедура НачатьФормированиеПодписиОбъекта(Форма, ОписаниеОповещенияОЗакрытии) Экспорт
	
	МассивДанныхДляЗанесенияВБазу = ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.МассивДанныхДляЗанесенияВБазу;
	МассивФайлов = Новый Массив;
	Для Каждого Файл Из Форма.Файлы Цикл
		МассивФайлов.Добавить(Файл.ID);
	КонецЦикла;
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(Форма.АдресСлепкаДокумента);
	МассивОбъектовДляПодписи = Новый Массив;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьОбъектыДляПодписи(
		Форма.Наименование,
		Форма.ID,
		Форма.Тип,
		МассивОбъектовДляПодписи,
		МассивФайлов,
		ДвоичныеДанныеДокумента);
	
	НаборДанных = Новый Массив;
	Для Каждого ОбъектДляПодписи Из МассивОбъектовДляПодписи Цикл
		ДанныеДляПодписи = Новый Структура;
		ДанныеДляПодписи.Вставить("Данные", ОбъектДляПодписи.ДвоичныеДанные);
		Если ОбъектДляПодписи.ОбъектСсылкаДляПодписи = Форма.ID Тогда
			ДанныеДляПодписи.Вставить("Представление",
				Новый Структура("Значение, Представление", Форма.Заголовок, Форма.Заголовок));
		ИначеЕсли ОбъектДляПодписи.ОбъектТип = "DMFile" Тогда
			Строки = Форма.Файлы.НайтиСтроки(Новый Структура("ID", ОбъектДляПодписи.ОбъектСсылкаДляПодписи));
			Если Строки.Количество() = 1 Тогда
				ПредставлениеФайла = СтрШаблон(НСтр("ru = 'Файл: %1'"), Строки[0].Наименование);
				ДанныеДляПодписи.Вставить("Представление",
					Новый Структура("Значение, Представление", ПредставлениеФайла, ПредставлениеФайла));
			Иначе
				ДанныеДляПодписи.Вставить("Представление", ОбъектДляПодписи.ОбъектТип);
			КонецЕсли;
		Иначе
			ДанныеДляПодписи.Вставить("Представление", ОбъектДляПодписи.ОбъектТип);
		КонецЕсли;
		НаборДанных.Добавить(ДанныеДляПодписи);
		МассивДанныхДляЗанесенияВБазу.Добавить(
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи(
				ОбъектДляПодписи.ОбъектНаименование,
				ОбъектДляПодписи.ОбъектСсылкаДляПодписи,
				ОбъектДляПодписи.ОбъектТип,
				ОбъектДляПодписи.Зашифрован));
	КонецЦикла;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание документа'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Документ'"));
	ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
	ОписаниеДанных.Вставить("Представление", Форма.Наименование);
	ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Объекты (%1)'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"НачатьФормированиеПодписиОбъектаЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		ПараметрыОповещения);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Неопределено, ОбработчикЗавершения);
	
КонецПроцедуры

// Открывает форму просмотра подписи ЭП.
//
// Параметры:
//   ТаблицаПодписейТекущиеДанные - ДанныеФормыЭлементКоллекции - строка текущей подписи.
//
Процедура ОткрытьПодпись(ТаблицаПодписейТекущиеДанные) Экспорт
	
	Если ТаблицаПодписейТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(ТаблицаПодписейТекущиеДанные);
	
КонецПроцедуры

// Подписывает файл в Документообороте.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор объекта Документооборота.
//   ИмяФайла - Строка - имя файла.
//   ВладелецФайла - Строка - идентификатор владельца файла.
//   Редактируется - Булево - признак редактирования файла.
//   Зашифрован - Булево - признак шифрования файла.
//   ОписаниеФайла - Строка - описание файла.
//   ДанныеПодписейФайла - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПодписатьФайл(ИдентификаторФайла, ИмяФайла, ВладелецФайла, Редактируется, Зашифрован, ОписаниеФайла,
		ДанныеПодписейФайла, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Если Редактируется Тогда
		ПоказатьПредупреждение(,
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла());
		Возврат;
	КонецЕсли;
	
	Если Зашифрован Тогда
		ПоказатьПредупреждение(,
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла());
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДвоичныеДанныеФайла(ИдентификаторФайла));
	ОписаниеДанных.Вставить("Представление", ИмяФайла);
	ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
	ОписаниеДанных.СписокПредставлений.Добавить(, ИмяФайла);
	
	СвойстваФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СвойстваФайла();
	СвойстваФайла.ИдентификаторФайла = ИдентификаторФайла;
	СвойстваФайла.ИмяФайла = ИмяФайла;
	СвойстваФайла.ОписаниеФайла = ОписаниеФайла;
	СвойстваФайла.Редактируется = Редактируется;
	СвойстваФайла.Зашифрован = Зашифрован;
	СвойстваФайла.ДанныеПодписейФайла = ДанныеПодписейФайла;
	СвойстваФайла.УникальныйИдентификатор = Неопределено;
	СвойстваФайла.ВладелецФайла = ВладелецФайла;
	СвойстваФайла.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"ПодписатьФайлЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		СвойстваФайла);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Неопределено, ОбработчикЗавершения);
	
КонецПроцедуры

// Проверяет все выделенные подписи.
//
// Параметры:
//   ТаблицаПодписей - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещения - ОписаниеОповещения - необязательный, обработчик, вызываемый после проверки подписей.
//   ВыделенныеПодписи - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи
//   АдресСлепкаДокумента - Строка - адрес временного хранилища двоичных данных документа Документооборота.
//
Процедура ПроверитьПодписи(ТаблицаПодписей, УникальныйИдентификаторФормы, ОписаниеОповещения = Неопределено,
		ВыделенныеПодписи = Неопределено, АдресСлепкаДокумента = Неопределено) Экспорт
	
	НастройкиЭП = ОбщиеНастройкиЭП();
	Если НастройкиЭП.ПроверятьЭлектронныеПодписиНаСервере Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПроверитьПодписи(
			ТаблицаПодписей,
			УникальныйИдентификаторФормы,
			ВыделенныеПодписи,
			АдресСлепкаДокумента);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ТаблицаПодписей);
		КонецЕсли;
		
	Иначе
		
		Параметры = Новый Структура;
		Параметры.Вставить("ТаблицаПодписей", ТаблицаПодписей);
		Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
		Параметры.Вставить("АдресСлепкаДокумента", АдресСлепкаДокумента);
		Параметры.Вставить("ВыделенныеПодписи", ВыделенныеПодписи);
		Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверитьПодписиПослеСозданияМенеджера",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПроверкаПодписи");
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет подпись на диск.
//
// Параметры:
//   ТаблицаПодписейТекущиеДанные - ДанныеФормыЭлементКоллекции - строка текущей подписи.
//
Процедура СохранитьПодпись(ТаблицаПодписейТекущиеДанные) Экспорт
	
	Если ТаблицаПодписейТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТаблицаПодписейТекущиеДанные.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.СохранитьПодпись(ТаблицаПодписейТекущиеДанные.АдресПодписи);
	
КонецПроцедуры

// Удаляет подписи документа и его файлов.
//
// Параметры:
//   УдаленныеСтроки - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи
//   ТаблицаПодписей - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   ВладелецФайла - Строка - идентификатор общего владельца всех файлов, входящих в таблицу подписей.
//   ОписаниеОповещения - ОписаниеОповещения - необязательный, обработчик, вызываемый после удаления подписей.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура УдалитьПодписи(УдаленныеСтроки, ТаблицаПодписей, ВладелецФайла, ОписаниеОповещения = Неопределено,
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Если УдаленныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("УдаленныеСтроки", УдаленныеСтроки);
	Параметры.Вставить("ТаблицаПодписей", ТаблицаПодписей);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	ОповещениеПослеВопроса = Новый ОписаниеОповещения(
		"УдалитьПодписьЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	ПоказатьВопросДаНет(
		ОповещениеПослеВопроса,
		ТекстВопроса,
		НСтр("ru='Удалить'"),
		НСтр("ru='Не удалять'"));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКартинками

// Устанавливает компоненту сканирования.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения
//
Процедура УстановитьКомпоненту(ОбработчикРезультата) Экспорт
	
	Если ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"] = Неопределено Тогда
		КодВозврата = ПодключитьВнешнююКомпоненту(
			"ОбщийМакет.ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера",
			"ImageFromClipboard",
			ТипВнешнейКомпоненты.Native);
		
		Если КодВозврата Тогда
			Состояние(НСтр("ru = 'Компонента сканирования уже установлена.'"));
		Иначе
			
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"НачатьУстановкуВнешнейКомпонентыПродолжение",
				ЭтотОбъект,
				ПараметрыВыполнения);
			НачатьУстановкуВнешнейКомпоненты(
				ОписаниеОповещения,
				"ОбщийМакет.ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера");
			Возврат;
			
		КонецЕсли;
		ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"] =
			Новый("AddIn.ImageFromClipboard.AddInNativeExtension");
	Иначе
		Состояние(НСтр("ru = 'Компонента сканирования уже установлена.'"));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение установки компоненты.
//
// Параметры:
//   ПараметрыВыполнения - Структура:
//     * ОбработчикРезультата - ОписаниеОповещения
//
Процедура НачатьУстановкуВнешнейКомпонентыПродолжение(ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияДляПодключения = Новый Структура;
	ПараметрыВыполненияДляПодключения.Вставить("ОбработчикРезультата", ПараметрыВыполнения.ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьПодключениеВнешнейКомпонентыПродолжение",
		ЭтотОбъект,
		ПараметрыВыполненияДляПодключения);
	
	НачатьПодключениеВнешнейКомпоненты(
		ОписаниеОповещения,
		"ОбщийМакет.ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера",
		"ImageFromClipboard",
		ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

// Продолжение установки компоненты.
//
// Параметры:
//   Подключена - Булево - компонента подключена.
//   ПараметрыВыполнения - Структура:
//     * ОбработчикРезультата - ОписаниеОповещения
//
Процедура НачатьПодключениеВнешнейКомпонентыПродолжение(Подключена, ПараметрыВыполнения) Экспорт
	
	Если Подключена Тогда
		
		ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"] =
			Новый("AddIn.ImageFromClipboard.AddInNativeExtension");
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Подключена);
		
	КонецЕсли;
	
КонецПроцедуры

// Проинициализировать компоненту сканирования.
//
// Возвращаемое значение:
//   Булево
//
Функция ПроинициализироватьКомпоненту() Экспорт
	
	Если ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"] = Неопределено Тогда
		КодВозврата = ПодключитьВнешнююКомпоненту(
			"ОбщийМакет.ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера",
			"ImageFromClipboard",
		ТипВнешнейКомпоненты.Native);
		
		Если Не КодВозврата Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"] =
			Новый("AddIn.ImageFromClipboard.AddInNativeExtension");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вернет версию компоненты сканирования.
//
// Возвращаемое значение:
//   Строка
//
Функция ВерсияКомпоненты() Экспорт
	
	Если Не ПроинициализироватьКомпоненту() Тогда
		Возврат НСтр("ru= 'Компонента не установлена'");
	КонецЕсли;
	
	Возврат ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"].Версия();
	
КонецФункции

#КонецОбласти

#Область Задачи

// Открывает формы получения объектов адресации роли.
//
// Параметры:
//   ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии.
//   ИмяРоли - Строка - имя роли для получения объектов адресации.
//   ТипРоли - Строка - тип роли для получения объектов адресации.
//   IDРоли - Строка - идентификатор роли в Документообороте.
//   ФормаВладелец - ФормаКлиентскогоПриложения - управляемая форма, на которой выбирается роль.
//
Процедура ПоказатьПолучениеОбъектовАдресацииРоли(ОписаниеОповещенияОЗакрытии, ИмяРоли, ТипРоли, IDРоли,
		ФормаВладелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Роль", ИмяРоли);
	ПараметрыФормы.Вставить("РольID", IDРоли);
	ПараметрыФормы.Вставить("РольТип", ТипРоли);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	ПараметрыОповещения.Вставить("ИмяРоли", ИмяРоли);
	ПараметрыОповещения.Вставить("ТипРоли", ТипРоли);
	ПараметрыОповещения.Вставить("IDРоли", IDРоли);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьПолучениеОбъектовАдресацииРолиЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		ПараметрыОповещения);
	
	ФормаВыбора = ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборРолиИсполнителя",
		ПараметрыФормы,
		ФормаВладелец,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если ФормаВыбора = Неопределено Тогда
		Результат = Новый Структура("Результат", "БезОбъектовАдресации");
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаОповещения

#Область ОбработкаОповещенияФайлы

Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу =
			ПараметрыПриложения["ИнтеграцияС1СДокументооборотКомпонентаПолученияКартинкиИзБуфера"].ПолучитьКартинкуИзБуфера();
		
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			Параметры.Вставить("ПолноеИмяФайла", ПутьКФайлу);
			Параметры.Вставить("УдалитьФайлПослеПомещения", Истина);
			
			Файл = Новый Файл(ПутьКФайлу);
			Параметры.Вставить("Файл", Файл);
			
			Файл.НачатьПолучениеРазмера(
				Новый ОписаниеОповещения(
					"СоздатьФайлСДискаПослеПолученияРазмера",
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
					Параметры));
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Буфер обмена не содержит картинки'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет освобождение файла в ДО после разрешения пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ЗакончитьРедактированиеCРасширениемПослеВопросаОбОсвобождении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОсвободитьФайл(
		Параметры.ТекущийФайл.ID);
	
	// Удалим сведения о редактировании файла.
	СведенияОРедактировании = Параметры.СведенияОРедактировании;
	СведенияОРедактировании.Сохранен = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьСведенияОРедактированииФайла(
		СведенияОРедактировании);
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Файл %1 обновлен и освобожден.'"),
		Параметры.ТекущийФайл.Наименование);
	Состояние(ТекстСообщения);
	ИнформироватьОбИзмененииФайла(
		"РедактированиеФайлаЗавершено",
		Параметры.ТекущийФайл.Наименование,
		Параметры.ТекущийФайл.ID,
		Параметры.ВладелецID,
		ТекстСообщения,,
		Параметры.УникальныйИдентификаторФормы);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры.ТекущийФайл);
	КонецЕсли;
	
КонецПроцедуры

// Завершает помещение файла в ДО без использования расширения работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ЗакончитьРедактированиеБезРасширенияПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Истина);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Получим расширение: оно могло измениться.
	СтруктураИмени = РазложитьПолноеИмяФайла(ПолныйПуть);
	Параметры.ТекущийФайл.Расширение = СтруктураИмени.Расширение;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
			Параметры) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Файл %1 обновлен и освобожден.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайлаЗавершено",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ТекущийФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершает помещение файла в ДО с использованием расширения для работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * Файл - Файл - помещаемый файл в рабочем каталоге.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ЗакончитьРедактированиеСРасширениемПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Истина);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Извлечем текст, если необходимо.
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		Параметры.ТекущийФайл.Текст = ИзвлечьТекст(Параметры.СведенияОРедактировании.ПолныйПуть);
	КонецЕсли;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	Файл = Параметры.Файл;
	Параметры.Удалить("Файл");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
			Параметры) Тогда
		Если Не Файл.ПолучитьТолькоЧтение() Тогда
			Файл.УстановитьТолькоЧтение(Истина);
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Файл %1 обновлен и освобожден.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайлаЗавершено",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ТекущийФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после получения файлов и отправляет их на печать.
//
// Параметры:
//   ПолныеИменаФайлов - Массив из Строка - массив строк, содержащий полные имена полученных файлов.
//   Параметры - Произвольный - не используется.
//
Процедура НапечататьФайлыПослеПолучения(ПолныеИменаФайлов, Параметры) Экспорт
	
	Для Каждого ПолноеИмяФайла Из ПолныеИменаФайлов Цикл
		НапечататьФайлПриложением(ПолноеИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в ходе обновления из файла на диске после помещения файла без использования расширения.
//
// Параметры:
//   ОписаниеПомещенногоФайла - ОписаниеПомещенногоФайла - содержит описание помещенного во временное хранилище файла.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОсвободитьФайл - Булево - указывает нужно ли освободить файл.
//     * ОбновитьСведенияОРедактировании - Булево - указывает нужно ли обновить сведения о редактировании.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ОбновитьИзФайлаНаДискеПослеПомещенияФайлаБезРасширения(ОписаниеПомещенногоФайла, Параметры) Экспорт
	
	Если ОписаниеПомещенногоФайла = Неопределено Или ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", ОписаниеПомещенногоФайла.Адрес);
	Параметры.ТекущийФайл.Расширение = ОписаниеПомещенногоФайла.СсылкаНаФайл.Файл.Расширение;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
			Параметры) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Файл %1 обновлен.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайла",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ТекущийФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе обновления из файла на диске после помещения файла с использованием расширения.
//
// Параметры:
//   ОписаниеПомещенногоФайла - ОписаниеПомещенногоФайла - содержит описание помещенного во временное хранилище файла.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОсвободитьФайл - Булево - указывает нужно ли освободить файл.
//     * ОбновитьСведенияОРедактировании - Булево - указывает нужно ли обновить сведения о редактировании.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ОбновитьИзФайлаНаДискеПослеПомещенияФайлаСРасширением(ОписаниеПомещенногоФайла, Параметры) Экспорт
	
	Если ОписаниеПомещенногоФайла = Неопределено Или ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", ОписаниеПомещенногоФайла.Адрес);
	ПолныйПуть = ОписаниеПомещенногоФайла.СсылкаНаФайл.Файл.ПолноеИмя;
	Параметры.ТекущийФайл.Расширение = ОписаниеПомещенногоФайла.СсылкаНаФайл.Файл.Расширение;
	
	Файл = Новый Файл(ПолныйПуть);
	ВремяИзмененияВыбранное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ДатаМодификацииВыбранная = МестноеВремя(ВремяИзмененияВыбранное);
	
	Если ДатаМодификацииВыбранная < Параметры.ТекущийФайл.ДатаМодификации Тогда // В хранилище более новый.
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Файл ""%1""
				|в хранилище файлов имеет более позднюю дату изменения (%2),
				|чем выбранный файл (%3).
				|
				|Операция прервана.'"),
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ДатаМодификации,
			ДатаМодификацииВыбранная);
		
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Параметры.ТекущийФайл.Размер = Файл.Размер();
	Параметры.ТекущийФайл.ДатаМодификации = Файл.ПолучитьВремяИзменения();
	Параметры.ТекущийФайл.ДатаМодификацииУниверсальная = ВремяИзмененияВыбранное;
	
	// Извлечем текст, если необходимо.
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		Параметры.ТекущийФайл.Текст = ИзвлечьТекст(ПолныйПуть);
	КонецЕсли;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
			Параметры) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Файл %1 обновлен.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайла",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ТекущийФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПолучениеФайлаПослеПолученияИзДокументооборота.
//
// Параметры:
//   ПолучаемыеФайлы - Массив из ОписаниеПереданногоФайла
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//     * ПолныеИменаФайлов - Массив из Строка - полные имена уже полученных файлов.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * КаталогВременныхФайлов - Строка - каталог для сохранения временного файла.
//     * ИмяВременногоФайла - Строка - имя, под которым будет сохранен файл.
//     * АдресВременногоХранилищаФайла - Строка - адрес, где хранится полученный из ДО файл.
//
Процедура ОбработатьФайлПослеПолученияИзДокументооборота(ПолучаемыеФайлы, Параметры) Экспорт
	
	// Удаляем файл из временного хранилища после записи на диск.
	Если ЭтоАдресВременногоХранилища(Параметры.АдресВременногоХранилищаФайла) Тогда
		УдалитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	СведенияОРедактировании = Неопределено;
	Если Параметры.Свойство("СведенияОРедактировании", СведенияОРедактировании) Тогда // обновим их
		
		СведенияОРедактировании.Вставить("Сохранен", Истина);
		СведенияОРедактировании.Вставить("ПолныйПуть", Параметры.ИмяВременногоФайла);
		СведенияОРедактировании.Вставить("ДатаСохранения", ТекущаяДата()); // Использование оправдано: фиксируется дата-время на клиенте.
		Если Не СведенияОРедактировании.Свойство("НаЧтение") Тогда
			СведенияОРедактировании.Вставить("НаЧтение", Параметры.НаЧтение);
		Иначе
			СведенияОРедактировании.НаЧтение = СведенияОРедактировании.НаЧтение И Параметры.НаЧтение;
		КонецЕсли;
		СведенияОРедактировании.Вставить("ДатаМодификацииУниверсальная", Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		СведенияОРедактировании.Вставить("Размер", Параметры.ТекущийФайл.Размер);
		
		// При сохранении передаем полученный ранее идентификатор текущей версии, а не файла.
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьСведенияОРедактированииФайла(
			СведенияОРедактировании);
		
	КонецЕсли;
	
	Файл = Новый Файл(Параметры.ИмяВременногоФайла);
	Файл.УстановитьУниверсальноеВремяИзменения(Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
	Если Параметры.НаЧтение Тогда
		Файл.УстановитьТолькоЧтение(Истина);
	КонецЕсли;
	
	Параметры.ПолныеИменаФайлов.Добавить(Параметры.ИмяВременногоФайла);
	ПолучитьФайлыНачало(Параметры);
	
КонецПроцедуры

// Продолжение процедуры открытия списка файлов.
//
// Параметры:
//   ВладелецФайла - ЛюбаяСсылка - источник команды, объект ИС-владелец файлов.
//   Параметры - Структура:
//     * ТекущийФайл - Строка - идентификатор текущего файла, на котором нужно спозиционировать список.
//     * ТолькоПросмотр - Булево - режим открытия формы.
//     * ВладелецФормы - ФормаКлиентскогоПриложения - форма, из которой вызвана команда.
//     * Уникальность - Произвольный - ключ уникальности, с которым должна быть открыта форма присоединенных файлов.
//     * Окно - ОкноКлиентскогоПриложения - необязательный параметр, окно формы-владельца.
//     * ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом
//                         - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - подходящее правило интеграции.
//
Процедура ОткрытьПрисоединенныеФайлыЗавершение(ВладелецФайла, Параметры) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрисоединенныеФайлы";
		Если ВладелецФайла = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан владелец файла в интегрированной системе.'"));
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот3.Форма.ПрисоединенныеФайлы";
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	ВладелецФормы = Параметры.ВладелецФормы;
	Параметры.Удалить("ВладелецФормы");
	
	Окно = Параметры.Окно;
	Параметры.Удалить("Окно");
	
	ОткрытьФорму(
		ИмяФормы,
		Параметры,
		ВладелецФормы,
		Параметры.Уникальность,
		Окно);
	
КонецПроцедуры

// Открывает файлы приложением после их получения.
//
// Параметры:
//   ПолныеИменаФайлов - Массив из Строка - массив полных имен полученных из ДО файлов.
//   Параметры - Структура - может содержать ОписаниеОповещения, вызываемое после завершения.
//
Процедура ОткрытьФайлыПослеПолучения(ПолныеИменаФайлов, Параметры) Экспорт
	
	Для Каждого ПолноеИмяФайла Из ПолныеИменаФайлов Цикл
		ОткрытьФайлПриложением(ПолноеИмяФайла);
	КонецЦикла;
	
	Если Параметры.НаЧтение = Ложь Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Начато редактирование файла %1.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайла",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("ОписаниеОповещенияОЗавершении")
			И Параметры.ОписаниеОповещенияОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияОЗавершении, Параметры.ТекущийФайл);
	КонецЕсли;
	
КонецПроцедуры

// Завершает процесс отмены редактирования после ответа пользователя на вопрос.
//
// Параметры:
//   Результат - КодВозвратаДиалога - результат выбора пользователя.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ОтменитьРедактированиеФайлаПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОсвободитьФайл(Параметры.ТекущийФайл.ID);
	Если РасширениеРаботыСФайламиПодключено() Тогда
		СведенияОРедактировании =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
				Параметры.ТекущийФайл.ID,
				"DMFile");
		Если СведенияОРедактировании.Сохранен И Не СведенияОРедактировании.НаЧтение Тогда
			Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
			Если Файл.Существует() Тогда
				Если Не Файл.ПолучитьТолькоЧтение() Тогда
					Файл.УстановитьТолькоЧтение(Истина);
				КонецЕсли;
				СведенияОРедактировании.НаЧтение = Истина;
				СведенияОРедактировании.Размер = Файл.Размер();
				СведенияОРедактировании.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
			Иначе
				СведенияОРедактировании.Сохранен = Ложь;
			КонецЕсли;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьСведенияОРедактированииФайла(
				СведенияОРедактировании);
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Файл %1 освобожден.'"),
		Параметры.ТекущийФайл.Наименование);
	Состояние(ТекстСообщения);
	ИнформироватьОбИзмененииФайла(
		"РедактированиеФайлаЗавершено",
		Параметры.ТекущийФайл.Наименование,
		Параметры.ТекущийФайл.ID,
		Параметры.ВладелецID,
		ТекстСообщения,,
		Параметры.УникальныйИдентификаторФормы);
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры.ТекущийФайл);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе получения файла после выбора источника: взять из ДО или использовать существующий.
//
// Параметры:
//   Результат - Строка - "ВзятьИзДокументооборота" или "ИспользоватьСуществующий".
//             - Неопределено - если пользователь отказался от выбора.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//     * ПолныеИменаФайлов - Массив из Строка - полные имена уже полученных файлов.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * КаталогВременныхФайлов - Строка - каталог для сохранения временного файла.
//     * ИмяВременногоФайла - Строка - имя, под которым будет сохранен файл.
//     * ОбновитьСведенияОРедактировании - Булево
//
Процедура ПолучениеФайлаПослеВыбораИсточника(Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда // отмена
		Возврат;
	КонецЕсли;
	
	Если Результат = "ВзятьИзДокументооборота" Тогда
		
		// Получим файл из ДО на сервере.
		Если Параметры.ТекущийФайл.Тип = "DMFile" Тогда
			Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
				Параметры.ТекущийФайл.ID,
				Параметры.УникальныйИдентификаторФормы,
				?(Параметры.НаЧтение, Неопределено, ТекущаяДата()), // Использование оправдано: фиксируется дата-время на клиенте.
				Параметры.ТекущийФайл.Размер,
				Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		Иначе // версия
			Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(
				Параметры.ТекущийФайл.ID,
				Параметры.УникальныйИдентификаторФормы,
				Параметры.ТекущийФайл.Размер,
				Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		КонецЕсли;
		Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
		
		Файл = Новый Файл(Параметры.ИмяВременногоФайла);
		Попытка
			Файл.УстановитьТолькоЧтение(Ложь);
		Исключение
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не удалось заменить файл на диске файлом из 1С:Документооборота.
					|Возможно, он заблокирован другим приложением.'"));
			Возврат;
		КонецПопытки;
		
		ПолучениеФайлаПослеПолученияИзДокументооборота(Параметры);
		
	ИначеЕсли Результат = "ИспользоватьСуществующий" Тогда
		
		Если Параметры.СведенияОРедактировании.НаЧтение И Не Параметры.НаЧтение Тогда
			Параметры.СведенияОРедактировании.НаЧтение = Ложь;
			Параметры.ОбновитьСведенияОРедактировании = Истина;
			Файл = Новый Файл(Параметры.ИмяВременногоФайла);
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
			Исключение
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось открыть файл для редактирования. Возможно,
						|он заблокирован другим приложением.'"));
				ПолучитьФайлыНачало(Параметры);
			КонецПопытки;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗахватитьФайл(
				Параметры.ТекущийФайл.ID,
				ТекущаяДата()); // Использование оправдано: фиксируется дата-время на клиенте.
		КонецЕсли;
		Если Параметры.ОбновитьСведенияОРедактировании Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьСведенияОРедактированииФайла(
				Параметры.СведенияОРедактировании);
		КонецЕсли;
		
		Параметры.ПолныеИменаФайлов.Добавить(Параметры.ИмяВременногоФайла);
		ПолучитьФайлыНачало(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает процесс изменения пометки удаления файлов после ответа пользователя на вопрос.
//
// Параметры:
//   Результат - КодВозвратаДиалога - результат выбора пользователя.
//   Параметры - Структура:
//     * ВыделенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПометитьНаУдалениеСнятьПометкуФайловЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПометитьНаУдалениеСнятьПометкуОбъектов(
		Параметры.ВыделенныеФайлы);
	
	Для Каждого Файл Из Параметры.ВыделенныеФайлы Цикл
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Файл %1 удален.'"),
			Файл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"УдалениеФайла",
			Файл.Наименование,
			Файл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		
	КонецЦикла;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры.ВыделенныеФайлы);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после ввода комментария к версии файла.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя.
//   Параметры - Структура:
//     * ОповещениеПослеПомещенияФайла - ОписаниеОповещения - описание процедуры,
//         которая будет вызвана в случае успешного помещения файлов.
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * Файл - Файл - помещаемый файл в рабочем каталоге.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ПослеВводаОписанияВнесенныхИзменений(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеПомещенияФайла = Параметры.ОповещениеПослеПомещенияФайла;
	Параметры.Удалить("ОповещениеПослеПомещенияФайла");
	
	Попытка
		НачатьПомещениеФайла(
			ОповещениеПослеПомещенияФайла,,
			Параметры.СведенияОРедактировании.ПолныйПуть,
			Ложь,
			Параметры.УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Не удалось сохранить изменения по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

// Продолжение процедуры СохранитьКакПослеВыбораИсточника.
//
// Параметры:
//   ПолучаемыеФайлы - Массив из ОписаниеПереданногоФайла
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ПолныйПуть - Строка - полный путь к файлу в выбранном пользователем каталоге.
//     * ПолноеИмяФайла - Строка - полный путь к файлу в выбранном пользователем каталоге.
//     * Каталог - Строка - каталог, куда нужно сохранить файлы.
//     * ИмяВременногоФайла - Строка - имя временного файла.
//     * РежимДиалогаВыбораФайла - РежимДиалогаВыбораФайла - режим диалога выбора файла.
//     * РежимПолучения - Строка - режим получения.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура ПродолжитьСохранитьКакПослеВыбораИсточника(ПолучаемыеФайлы, Параметры) Экспорт
	
	Если Параметры.РежимПолучения = "ВзятьИзДокументооборота" Тогда
		УдалитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаФайла);
		
		Файл = Новый Файл(Параметры.ПолныйПуть);
		Файл.УстановитьУниверсальноеВремяИзменения(Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Файл сохранен.'"), , Параметры.ПолныйПуть);
	
	Если Параметры.ОставшиесяФайлы.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(Параметры.ТекущийФайл, Параметры.ОставшиесяФайлы[0]);
		ВыбранныеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Каталог);
		Параметры.ОставшиесяФайлы.Удалить(0);
		СохранитьКакПослеДиалогаВыбораФайла(ВыбранныеФайлы, Параметры);
	ИначеЕсли Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после диалога выбора файла.
//
// Параметры:
//   ВыбранныеФайлы - Массив из Строка - имена выбранных файлов.
//                  - Неопределено - если пользователь отказался от выбора.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеДиалогаВыбораФайла(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ПолныеИменаФайлов = ВыбранныеФайлы;
	Параметры.Вставить("ПолноеИмяФайла", Параметры.ПолныеИменаФайлов[0]);
	Параметры.ПолныеИменаФайлов.Удалить(0);
	
	Файл = Новый Файл(Параметры.ПолноеИмяФайла);
	
	Если Параметры.ЯвляетсяСканКопией Тогда
		НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ПолучитьНастройки();
		СписокРасширенийСканКопийОригиналов = НастройкиДО.СписокРасширенийСканКопийОригиналов;
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ЭтоРасширениеСканКопии(
				Файл.Расширение, СписокРасширенийСканКопийОригиналов) Тогда
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru='Файл ""%1"" не является скан-копией. Выберите файл с расширением: %2.'"),
				Файл.Имя,
				СписокРасширенийСканКопийОригиналов);
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("Файл", Файл);
	
	Файл.НачатьПолучениеРазмера(
		Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеПолученияРазмера",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры));
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после подключения расширения.
//
// Параметры:
//   Подключено - Булево - Истина, если расширение подключено.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеПодключенияРасширения(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		ВыборФайла.Показать(
			Новый ОписаниеОповещения(
				"СоздатьФайлСДискаПослеДиалогаВыбораФайла",
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
				Параметры));
		
	Иначе // веб-клиент без расширения
		
		Попытка
			НачатьПомещениеФайла(
				Новый ОписаниеОповещения(
					"СоздатьФайлСДискаПослеПомещенияФайлаБезРасширения",
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
					Параметры),,,
				Истина,
				Параметры.УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось создать файл по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после получения времени изменения.
//
// Параметры:
//   ВремяИзменения - Дата - дата и время изменения файла на диске.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Файл - Файл - инициализированный файл.
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолноеИмяФайла - Строка - полное имя выбранного пользователем файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеПолученияВремениИзменения(ВремяИзменения, Параметры) Экспорт
	
	Параметры.ТекущийФайл.ДатаМодификации = ВремяИзменения;
	Параметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(
		Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеПолученияУниверсальногоВремениИзменения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры));
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после получения размера.
//
// Параметры:
//   Размер - Число - размер файла.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Файл - Файл - инициализированный файл.
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолноеИмяФайла - Строка - полное имя выбранного пользователем файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеПолученияРазмера(Размер, Параметры) Экспорт
	
	МаксРазмерФайла =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.МаксимальныйРазмерПередаваемогоФайла();
	
	ТекстПредупреждения = "";
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РазмерФайлаПревышаетМаксимальноДопустимый(
			МаксРазмерФайла, Размер, Параметры.ПолноеИмяФайла, Ложь, ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Параметры.ТекущийФайл.Размер = Размер;
	Параметры.Файл.НачатьПолучениеВремениИзменения(
		Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеПолученияВремениИзменения",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры));
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после получения универсального времени изменения.
//
// Параметры:
//   ВремяИзмененияУниверсальное - Дата - универсальные дата и время изменения файла на диске.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Файл - Файл - инициализированный файл.
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолноеИмяФайла - Строка - полное имя выбранного пользователем файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеПолученияУниверсальногоВремениИзменения(ВремяИзмененияУниверсальное, Параметры) Экспорт
	
	Параметры.ТекущийФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ТекстПояснения = СтрШаблон(НСтр("ru = 'Идет сохранение файла ""%1"" (%2). Пожалуйста, подождите...'"),
		Параметры.ПолноеИмяФайла,
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.КраткоеПредставлениеРазмера(
			Параметры.ТекущийФайл.Размер));
	Состояние(ТекстПояснения);
	
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Параметры.ПолноеИмяФайла, "");
	Попытка
		НачатьПомещениеФайлов(
			Новый ОписаниеОповещения(
				"СоздатьФайлСДискаПослеПомещенияФайла",
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
				Параметры),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПомещаемыйФайл),,
			Ложь,
			Параметры.УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Не удалось создать файл по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после помещения файла (тонкий и веб с расширением).
//
// Параметры:
//   ПомещенныеФайлы - Массив из ОписаниеПередаваемогоФайла
//                   - Неопределено
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Файл - Файл - инициализированный файл.
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолноеИмяФайла - Строка - полное имя выбранного пользователем файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеПомещенияФайла(ПомещенныеФайлы, Параметры) Экспорт
	
	Состояние();
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", ПомещенныеФайлы[0].Хранение);
	
	Если Параметры.Свойство("УдалитьФайлПослеПомещения") И Параметры.УдалитьФайлПослеПомещения Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Параметры.Файл.ПолноеИмя);
		Параметры.Файл = Неопределено;
	КонецЕсли;
	
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		Параметры.ТекущийФайл.Текст = ИзвлечьТекст(Параметры.ПолноеИмяФайла);
	КонецЕсли;
	
	СоздатьФайлСДискаЗавершение(Параметры);
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после помещения файла (веб без расширения).
//
// Параметры:
//   Помещен - Булево - Истина, если файл помещен, и Ложь, если пользователь отказался.
//   АдресВременногоХранилищаФайла - Строка - адрес данных файла в хранилище.
//   ВыбранноеИмяФайла - Строка - полное имя выбранного файла.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаПослеПомещенияФайлаБезРасширения(Помещен, АдресВременногоХранилищаФайла,
		ВыбранноеИмяФайла, Параметры) Экспорт
	
	Если Не Помещен Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	Параметры.Вставить("ПолноеИмяФайла", ВыбранноеИмяФайла);
	
	Файл = Новый Файл(ВыбранноеИмяФайла);
	Параметры.Вставить("Файл", Файл);
	
	СоздатьФайлСДискаЗавершение(Параметры);
	
КонецПроцедуры

// Выполняет освобождение файла в ДО после разрешения пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - результат выбора пользователя.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * Файл - Файл - помещаемый файл в рабочем каталоге.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СохранитьИзмененияCРасширениемПослеВопросаОбОсвобождении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОсвободитьФайл(Параметры.ТекущийФайл.ID);
	
	// Удалим сведения о редактировании файла.
	СведенияОРедактировании = Параметры.СведенияОРедактировании;
	СведенияОРедактировании.Сохранен = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьСведенияОРедактированииФайла(
		СведенияОРедактировании);
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Изменения файла %1 сохранены.'"),
		Параметры.ТекущийФайл.Наименование);
	Состояние(ТекстСообщения);
	ИнформироватьОбИзмененииФайла(
		"РедактированиеФайлаЗавершено",
		Параметры.ТекущийФайл.Наименование,
		Параметры.ТекущийФайл.ID,
		Параметры.ВладелецID,
		ТекстСообщения,,
		Параметры.УникальныйИдентификаторФормы);
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры.ТекущийФайл);
	КонецЕсли;
	
КонецПроцедуры

// Завершает сохранение изменений в ДО без использования расширения работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СохранитьИзмененияБезРасширенияПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Получим расширение: оно могло измениться.
	СтруктураИмени = РазложитьПолноеИмяФайла(ПолныйПуть);
	Параметры.ТекущийФайл.Расширение = СтруктураИмени.Расширение;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
			Параметры) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Изменения файла %1 сохранены.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайла",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ТекущийФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершает сохранение изменений в ДО с использованием расширения для работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ВладелецID - Строка - идентификатор владельца файла.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * Файл - Файл - помещаемый файл в рабочем каталоге.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СохранитьИзмененияСРасширениемПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Извлечем текст, если необходимо.
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		ИзвлеченныйТекст = ИзвлечьТекст(Параметры.СведенияОРедактировании.ПолныйПуть);
		Параметры.ТекущийФайл.Текст = ИзвлеченныйТекст;
	КонецЕсли;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	Параметры.Удалить("Файл");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
			Параметры) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Изменения файла %1 сохранены.'"),
			Параметры.ТекущийФайл.Наименование);
		Состояние(ТекстСообщения);
		ИнформироватьОбИзмененииФайла(
			"РедактированиеФайла",
			Параметры.ТекущийФайл.Наименование,
			Параметры.ТекущийФайл.ID,
			Параметры.ВладелецID,
			ТекстСообщения,,
			Параметры.УникальныйИдентификаторФормы);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ТекущийФайл);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе сохранения файла на диск после выбора источника (или в отсутствие файла на диске).
//
// Параметры:
//   Результат - Строка - если "ВзятьИзДокументооборота", то взять файл из ДО, если "ИспользоватьСуществующий",
//     то взять файл из каталога временных.
//             - Неопределено - ничего не делать.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ПолныйПуть - Строка - полный путь к файлу в выбранном пользователем каталоге.
//     * ПолноеИмяФайла - Строка - полный путь к файлу в выбранном пользователем каталоге.
//     * Каталог - Строка - каталог, куда нужно сохранить файлы.
//     * ИмяВременногоФайла - Строка - имя временного файла.
//     * РежимДиалогаВыбораФайла - РежимДиалогаВыбораФайла - режим диалога выбора файла.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СохранитьКакПослеВыбораИсточника(Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда // отмена
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Параметры.ПолныйПуть);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(Параметры.ПолныйПуть);
	КонецЕсли;
	
	Параметры.Вставить("РежимПолучения", Результат);
	
	Если Результат = "ВзятьИзДокументооборота" Тогда
		
		// Получим файл из ДО на сервере.
		Если Параметры.ТекущийФайл.Тип = "DMFile" Тогда
			Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
				Параметры.ТекущийФайл.ID,
				Параметры.УникальныйИдентификаторФормы,,
				Параметры.ТекущийФайл.Размер,
				Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		Иначе // версия
			Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(
				Параметры.ТекущийФайл.ID,
				Параметры.УникальныйИдентификаторФормы,
				Параметры.ТекущийФайл.Размер,
				Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
		КонецЕсли;
		Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
		
		// Соберем описание получаемого файла и получим его.
		ПолучаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(
			Параметры.ПолныйПуть,
			Параметры.АдресВременногоХранилищаФайла);
		ПолучаемыеФайлы.Добавить(Описание);
		
		НачатьПолучениеФайлов(
			Новый ОписаниеОповещения(
				"ПродолжитьСохранитьКакПослеВыбораИсточника",
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
				Параметры),
			ПолучаемыеФайлы,,
			Ложь);
		
	ИначеЕсли Результат = "ИспользоватьСуществующий" Тогда
		
		Попытка
			КопироватьФайл(Параметры.ИмяВременногоФайла, Параметры.ПолныйПуть);
			Файл = Новый Файл(Параметры.ПолныйПуть);
			Файл.УстановитьТолькоЧтение(Ложь);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось скопировать файл (""%1"").'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
		
		ПродолжитьСохранитьКакПослеВыбораИсточника(ПолучаемыеФайлы, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе сохранения файла после выбора каталога и имени пользователем.
//
// Параметры:
//   Результат - Массив из Строка - массив с именем файла, если файл выбран.
//             - Неопределено - если пользователь отказался от выбора.
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * РежимДиалогаВыбораФайла - РежимДиалогаВыбораФайла - режим диалога выбора файла.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СохранитьКакПослеДиалогаВыбораФайла(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимДиалогаВыбораФайла = РежимДиалогаВыбораФайла.Сохранение Тогда
		Параметры.Вставить("ПолныйПуть", Результат[0]);
	Иначе
		Параметры.Вставить("Каталог", Результат[0]);
		Параметры.Вставить("ПолныйПуть", Параметры.Каталог + ПолучитьРазделительПути() + Параметры.ТекущийФайл.ИмяФайла);
	КонецЕсли;
	
	Параметры.Вставить("ПолноеИмяФайла", Параметры.ПолныйПуть); // Параметр ПолноеИмяФайла используется в методах БСП.
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1")
			И Параметры.ТекущийФайл.Тип <> "DMFileVersion" Тогда
		
		СведенияОРедактировании =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
				Параметры.ТекущийФайл.ID,
				Параметры.ТекущийФайл.Тип);
		
		Если НуженВыборДействийПриОбнаруженииОтличийФайла(
				СведенияОРедактировании,
				Параметры,
				"СохранитьКакПослеВыбораИсточника",
				Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выбора нет: файл должен быть получен из ДО.
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьКакПослеВыбораИсточника",
		ЭтотОбъект,
		Параметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, "ВзятьИзДокументооборота");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещенияЭлектронныеПодписи

Процедура НачатьДобавлениеЭПИзФайлаЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	ОписаниеДанных = Результат.ОписаниеДанных;
	
	Если Не ОписаниеДанных.Свойство("Подписи") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФайла = ПараметрыОповещения.СвойстваФайла;
	Подписи = ОписаниеДанных.Подписи;
	
	Если ТипЗнч(Подписи) <> Тип("Массив") Или Подписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодписей = Новый Массив;
	Для Каждого Подпись Из Подписи Цикл
		Если ТипЗнч(Подпись) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Подпись);
		Иначе
			СвойстваПодписи = Подпись;
		КонецЕсли;
		МассивПодписей.Добавить(
			ДанныеПодписи(
				СвойстваПодписи.Подпись,
				СвойстваПодписи.Сертификат,
				СвойстваПодписи));
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодписей, СвойстваФайла.ДанныеПодписейФайла);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
		СвойстваФайла.ИмяФайла,
		СвойстваФайла.ИдентификаторФайла,
		"DMFile",
		СвойстваФайла.Зашифрован,
		МассивПодписей);
	
	Если МассивПодписей.Количество() = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1""'"), СвойстваФайла.ИмяФайла);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1""'"), СвойстваФайла.ИмяФайла);
	КонецЕсли;
	ИнформироватьОбИзмененииФайла(
		"ИзменениеЭПФайла",
		СвойстваФайла.ИмяФайла,
		СвойстваФайла.ИдентификаторФайла,
		СвойстваФайла.ВладелецФайла,
		ТекстСообщения,,
		СвойстваФайла.УникальныйИдентификатор);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Новый Структура);
	
КонецПроцедуры

// Вызывается в ходе добавления подписи из файла после подключения расширения.
//
Процедура НачатьДобавлениеЭПИзФайлаПослеПодключенияРасширения(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"НачатьДобавлениеЭПИзФайлаЗавершение",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл");
		ОписаниеДанных.Вставить("Объект", Оповещение);
		ОписаниеДанных.Вставить("Представление", Параметры.СвойстваФайла.ИмяФайла);
		ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
		ОписаниеДанных.СписокПредставлений.Добавить(, Параметры.СвойстваФайла.ИмяФайла);
		
		ЭлектроннаяПодписьКлиент.ДобавитьПодписьИзФайла(ОписаниеДанных);
		
	Иначе // веб-клиент без расширения
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения операции нужно установить расширение работы с файлами.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе сохранения файла с ЭП после подключения расширения.
//
// Параметры:
//   Подключено - Булево
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * Подписи - Массив - содержит структуры существующих подписей файла.
//
Процедура НачатьСохранениеВместеСЭППослеПодключенияРасширения(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл");
		ОписаниеДанных.Вставить("Представление", Параметры.ТекущийФайл.Наименование);
		ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
		ОписаниеДанных.СписокПредставлений.Добавить(, Параметры.ТекущийФайл.Наименование);
		Если Параметры.Подписи = Неопределено Тогда
			АдресВХранилище = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПоместитьВХранилищеПодписиФайла(
				Параметры.ТекущийФайл.ID);
		Иначе
			АдресВХранилище = ПоместитьВоВременноеХранилище(Параметры.Подписи);
		КонецЕсли;
		ОписаниеДанных.Вставить("Объект", АдресВХранилище);
		ОписаниеДанных.Вставить("Данные",
			Новый ОписаниеОповещения(
				"СохранитьВместеСЭПСохранитьФайл",
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
				Параметры));
		ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью(ОписаниеДанных);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения операции нужно установить расширение работы с файлами.'"));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "НачатьФормированиеПодписиОбъектаЗавершение".
//
// Параметры:
//   ОписаниеДанных - Структура:
//     * ВыбранныйСертификат - Структура:
//         ** Данные - Строка
//         ** Отпечаток - Строка
//         ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     * ЗаголовокДанных - Строка
//     * НаборДанных - Массив из Структура:
//         ** Данные - ДвоичныеДанные
//         ** Представление - Структура:
//              *** Значение - Строка
//              *** Представление - Строка
//         ** СвойстваПодписи - Структура:
//              *** ДатаПодписи - Дата
//              *** ДатаПроверкиПодписи - Дата
//              *** ИмяФайлаПодписи - Строка
//              *** Комментарий - Строка
//              *** КомуВыданСертификат - Строка
//              *** Отпечаток - Строка
//              *** Подпись - ДвоичныеДанные
//              *** ПодписьВерна - Булево
//              *** Сертификат - ДвоичныеДанные
//              *** УстановившийПодпись - СправочникСсылка.Пользователи
//     * Операция - Строка
//     * Отказ - Булево
//     * ПользовательНажалКнопкуПодписать - Булево
//     * Представление - Строка
//     * ПредставлениеНабора - Строка
//     * ТекущийЭлементНабораДанных - Структура:
//         ** Данные - ДвоичныеДанные
//         ** Представление - Структура:
//              *** Значение - Строка
//              *** Представление - Строка
//         ** СвойстваПодписи - Структура:
//              *** ДатаПодписи - Дата
//              *** ДатаПроверкиПодписи - Дата
//              *** ИмяФайлаПодписи - Строка
//              *** Комментарий - Строка
//              *** КомуВыданСертификат - Строка
//              *** Отпечаток - Строка
//              *** Подпись - ДвоичныеДанные
//              *** ПодписьВерна - Булево
//              *** Сертификат - ДвоичныеДанные
//              *** УстановившийПодпись - СправочникСсылка.Пользователи
//     * Успех - Булево
//   ПараметрыОповещения - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * ОписаниеОповещенияОЗакрытии - ОписаниеОповещения
//
Процедура НачатьФормированиеПодписиОбъектаЗавершение(ОписаниеДанных, ПараметрыОповещения) Экспорт
	
	Если Не ОписаниеДанных.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = ПараметрыОповещения.ОписаниеОповещенияОЗакрытии;
	МассивДанныхДляЗанесенияВБазу = ОписаниеОповещения.ДополнительныеПараметры.МассивДанныхДляЗанесенияВБазу;
	
	ДобавленныеПодписиОбъектов = Новый Соответствие;
	
	Для НомерПодписываемогоОбъекта = 0 По ОписаниеДанных.НаборДанных.Количество() - 1 Цикл
		// Порядок данных для подписи, переданных в Подписать(), совпадает с порядком
		// объектов для помещения в базу, переданных в параметрах оповещения.
		ДанныеДляПодписи = ОписаниеДанных.НаборДанных[НомерПодписываемогоОбъекта];
		СвойстваПодписи = Неопределено;
		Если Не ДанныеДляПодписи.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ДанныеПодписи = ДанныеПодписи(
			СвойстваПодписи.Подпись,
			СвойстваПодписи.Сертификат,
			СвойстваПодписи);
		
		ДанныеВладельцаПодписи = МассивДанныхДляЗанесенияВБазу[НомерПодписываемогоОбъекта];
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
			ДобавленныеПодписиОбъектов,
			ДанныеВладельцаПодписи.Наименование,
			ДанныеВладельцаПодписи.ID,
			ДанныеВладельцаПодписи.Тип,
			ДанныеВладельцаПодписи.Зашифрован,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписи));
	КонецЦикла;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ДобавленныеПодписиОбъектов", ДобавленныеПодписиОбъектов);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПодписатьФайлЗавершение(ОписаниеДанных, СвойстваФайла) Экспорт
	
	СвойстваПодписи = Неопределено;
	Если ТипЗнч(ОписаниеДанных) = Тип("Структура") И ОписаниеДанных.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
		
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		МассивПодписей = Новый Массив;
		МассивПодписей.Добавить(
			ДанныеПодписи(
				СвойстваПодписи.Подпись,
				СвойстваПодписи.Сертификат,
				СвойстваПодписи));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодписей, СвойстваФайла.ДанныеПодписейФайла);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
			СвойстваФайла.ИмяФайла,
			СвойстваФайла.ИдентификаторФайла,
			"DMFile",
			СвойстваФайла.Зашифрован,
			МассивПодписей);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлена подпись для ""%1""'"), СвойстваФайла.ИмяФайла);
		ИнформироватьОбИзмененииФайла(
			"ИзменениеЭПФайла",
			СвойстваФайла.ИмяФайла,
			СвойстваФайла.ИдентификаторФайла,
			СвойстваФайла.ВладелецФайла,
			ТекстСообщения,,
			СвойстваФайла.УникальныйИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе проверки подписи после создания менеджера криптографии.
//
// Параметры:
//   МенеджерКриптографии - МенеджерКриптографии
//   Параметры - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодписи
//
Процедура ПроверитьПодписиПослеСозданияМенеджера(МенеджерКриптографии, Параметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;
	
	Для Каждого ДанныеСтроки Из Параметры.ТаблицаПодписей Цикл
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПодписьВыделена(
				Параметры.ВыделенныеПодписи, ДанныеСтроки) Тогда
			ПроверитьОднуПодпись(
				ДанныеСтроки,
				МенеджерКриптографии,
				Параметры.УникальныйИдентификаторФормы,
				СоответствиеИдОбъектаИДвоичныхДанных,
				Параметры.АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры.ТаблицаПодписей);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе сохранения ЭП вместе с файлом, сохраняет файл и вызывает обработчик, передав ему полное имя файла.
//
// Параметры:
//   Результат - Произвольный
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * Подписи - Массив - содержит структуры существующих подписей файла.
//
Процедура СохранитьВместеСЭПСохранитьФайл(Результат, Параметры) Экспорт
	
	СохранитьФайлКак(
		Параметры.ТекущийФайл.ID,
		Параметры.ТекущийФайл.Наименование,
		Параметры.ТекущийФайл.Расширение,
		Параметры.УникальныйИдентификаторФормы,
		Результат.Оповещение);
	
КонецПроцедуры

// Продолжает удаление подписей после вопроса.
//
Процедура УдалитьПодписьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПодписиОбъектов = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьПодписи(
		Параметры.УдаленныеСтроки,
		Параметры.ТаблицаПодписей);
	
	ЕстьОтдельноеОповещение = (Параметры.ОписаниеОповещения <> Неопределено);
	ОповещатьКарточкуДокументаОбИзмененииФайла = Не ЕстьОтдельноеОповещение;
	
	Для Каждого ЭлементСоответствия Из ПодписиОбъектов Цикл
		ДанныеВладельцаПодписи = ЭлементСоответствия.Значение;
		Если ДанныеВладельцаПодписи.Тип <> "DMFile" Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Удалена подпись файла ""%1""'"), ДанныеВладельцаПодписи.Наименование);
		ИнформироватьОбИзмененииФайла(
			"ИзменениеЭПФайла",
			ДанныеВладельцаПодписи.Наименование,
			ДанныеВладельцаПодписи.ID,
			Параметры.ВладелецФайла,
			ТекстСообщения,
			ОповещатьКарточкуДокументаОбИзмененииФайла,
			Параметры.УникальныйИдентификаторФормы);
	КонецЦикла;
	
	Если ЕстьОтдельноеОповещение Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Продолжение вопроса о необходимости записи.
//
// Параметры:
//   Ответ - КодВозвратаДиалога
//   ДополнительныеПараметры - Структура:
//     * ФормаОбъектаИС - ФормаКлиентскогоПриложения - форма, из которой вызвана команда.
//     * ОповещениеПродолжения - ОписаниеОповещения - действие, вызываемое после проверки.
//
Процедура ВопросЗаписиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Форма = ДополнительныеПараметры.ФормаОбъектаИС;
		Форма.Записать();
		Если Не Форма.Объект.Ссылка.Пустая() И Не Форма.Модифицированность Тогда
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОповещениеПродолжения,
				Форма.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ВыбратьЗначениеДополнительногоРеквизитаВводЗначенияЗавершение".
//
// Параметры:
//   Результат - Произвольный
//   ПараметрыОповещения - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * Элемент - ТаблицаФормы
//
Процедура ВыбратьЗначениеДополнительногоРеквизитаВводЗначенияЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения.Элемент.Родитель.ТекущиеДанные.Значение = Результат;
		ПараметрыОповещения.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ВыбратьЗначениеДополнительногоРеквизитаВыборТипаЗавершение".
//
// Параметры:
//   ИмяТипа - Произвольный
//   ПараметрыОповещения - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * Элемент - ТаблицаФормы
//
Процедура ВыбратьЗначениеДополнительногоРеквизитаВыборТипаЗавершение(ИмяТипа, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	Элемент = ПараметрыОповещения.Элемент;
	
	Если ИмяТипа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыбратьЗначениеДополнительногоРеквизитаОбработка(ИмяТипа, Форма, Элемент)
	
КонецПроцедуры

// Обработчик оповещения "ВыбратьЗначениеДополнительногоРеквизитаЗавершение".
//
// Параметры:
//   Результат - Произвольный
//   ПараметрыОповещения - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * Элемент - ТаблицаФормы
//
Процедура ВыбратьЗначениеДополнительногоРеквизитаЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Элемент = ПараметрыОповещения.Элемент;
	Форма = ПараметрыОповещения.Форма;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Элемент.Родитель.ТекущиеДанные.ЗначениеID = Результат.РеквизитID;
		Элемент.Родитель.ТекущиеДанные.ЗначениеТип = Результат.РеквизитТип;
		Элемент.Родитель.ТекущиеДанные.Значение = Результат.РеквизитПредставление;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа".
//
// Параметры:
//   ЗначениеТипа - Тип
//                - ЭлементСпискаЗначений
//   ПараметрыВыбратьЗначение - Структура:
//     * ОписаниеТипа - ОписаниеТипов
//     * ТекстРедактирования - Строка
//     * Представление - Строка
//     * ЗначениеРеквизита - Строка
//     * ЗначениеРеквизитаID - Строка
//     * ЗначениеРеквизитаТип - Строка
//     * Оповещение - ОписаниеОповещения
//
Процедура ВыбратьЗначениеРеквизитаДОЗавершение(ЗначениеТипа, ПараметрыВыбратьЗначение) Экспорт
	
	Если ТипЗнч(ЗначениеТипа) = Тип("ЭлементСпискаЗначений") Тогда
		ЗначениеТипа = ЗначениеТипа.Значение;
	КонецЕсли;
	
	Если ЗначениеТипа = "Строка" Тогда
		ПоказатьВводСтроки(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ТекстРедактирования,
			ПараметрыВыбратьЗначение.Представление,,
			Истина);
		
	ИначеЕсли ЗначениеТипа = "Число" Тогда
		ПоказатьВводЧисла(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			15,
			5);
		
	ИначеЕсли ЗначениеТипа = "Дата" Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ЧастиДаты.Дата);
		
	ИначеЕсли ЗначениеТипа = "ДатаВремя" Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ЧастиДаты.ДатаВремя);
		
	ИначеЕсли ЗначениеТипа = "Время" Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ЧастиДаты.Время);
		
	ИначеЕсли ЗначениеТипа = "Булево" Тогда
		ПоказатьВводЗначения(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			Тип("Булево"));
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеТипа) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ЗначениеТипа);
		Если ЗначениеЗаполнено(ПараметрыВыбратьЗначение.ЗначениеРеквизитаID)
				И ЗначениеТипа = ПараметрыВыбратьЗначение.ЗначениеРеквизитаТип Тогда
			ПараметрыФормы.Вставить("ВыбранныйЭлемент", ПараметрыВыбратьЗначение.ЗначениеРеквизитаID);
		КонецЕсли;
		
		Если ЗначениеТипа = "DMDocument" Или ЗначениеТипа = "DMCorrespondent" Или ЗначениеТипа = "DMMeeting" Тогда
			
			// объектов ДО потенциально много, нужен выбор поиском
			Отбор = Новый Структура;
			Если ЗначениеЗаполнено(ПараметрыВыбратьЗначение.ЗначениеРеквизита) Тогда
				Отбор.Вставить("name", СокрЛП(ПараметрыВыбратьЗначение.ЗначениеРеквизита));
				ПараметрыФормы.Вставить("ИскатьСразу", Ложь);
			КонецЕсли;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			
			Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОбъектаПоиском";
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборОбъектаПоиском";
			Иначе
				Возврат;
			КонецЕсли;
			
			ОткрытьФорму(ИмяФормы,
				ПараметрыФормы,
				ЭтотОбъект,
				Новый УникальныйИдентификатор,,,
				ПараметрыВыбратьЗначение.Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Иначе
			
			// обычный выбор из списка
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
				ПараметрыФормы,
				ЭтотОбъект,
				Новый УникальныйИдентификатор,,,
				ПараметрыВыбратьЗначение.Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа".
//
// Параметры:
//   ЗначениеТипа - Тип
//                - ЭлементСпискаЗначений
//   ПараметрыВыбратьЗначение - Структура:
//     * ОписаниеТипа - ОписаниеТипов
//     * ТекстРедактирования - Строка
//     * Представление - Строка
//     * ЗначениеРеквизита - Произвольный
//     * Оповещение - ОписаниеОповещения
//
Процедура ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа(ЗначениеТипа, ПараметрыВыбратьЗначение) Экспорт
	
	Если ЗначениеТипа = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ЗначениеТипа) = Тип("ЭлементСпискаЗначений") Тогда
		ЗначениеТипа = ЗначениеТипа.Значение;
	КонецЕсли;
	
	ОписаниеТипа = ПараметрыВыбратьЗначение.ОписаниеТипа;
	
	Если ЗначениеТипа = Тип("Строка") Тогда
		Если ОписаниеТипа.КвалификаторыСтроки.Длина = 0 Или ОписаниеТипа.КвалификаторыСтроки.Длина > 40 Тогда
			Многострочность = Истина;
		Иначе
			Многострочность = Ложь;
		КонецЕсли;
		
		ПоказатьВводСтроки(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ТекстРедактирования,
			ПараметрыВыбратьЗначение.Представление,
			ОписаниеТипа.КвалификаторыСтроки.Длина,
			Многострочность);
		
	ИначеЕсли ЗначениеТипа = Тип("Число") Тогда
		ПоказатьВводЧисла(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ОписаниеТипа.КвалификаторыЧисла.Разрядность,
			ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти);
		
	ИначеЕсли ЗначениеТипа = Тип("Дата") Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ОписаниеТипа.КвалификаторыДаты.ЧастиДаты);
		
	ИначеЕсли ЗначениеТипа = Тип("Булево") Тогда
		ПоказатьВводЗначения(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			Тип("Булево"));
		
	ИначеЕсли ЗначениеТипа <> Неопределено Тогда
		ИмяОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяОбъектаМетаданныхПоТипу(
			ЗначениеТипа);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыВыбратьЗначение.ЗначениеРеквизита);
		ОткрытьФорму(ИмяОбъекта + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,
			ПараметрыВыбратьЗначение.Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ожидания, который вызывается при завершении длительной операции выполнения запроса.
//
// Параметры:
//   Результат - Структура - см. ДлительныеОперации.ОперацияВыполнена.
//   Параметры - Структура:
//     * Владелец - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//     * ОповещениеОЗавершении - ОписаниеОповещения - вызывает процедуру формы, в которую передается результат запроса.
//     * ВыводитьОкноОжидания - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//     * СкрыватьИнтерфейс - Булево - если окно ожидания не выводится, то данный параметр указывает нужно ли использовать
//         переключение страниц, который скроет весь интерфейс, либо же нужно не скрывать интерфейс, а сделать видимой
//         группу элементов длительной операции.
//
Процедура ВыполнитьЗапросАсинхронноЗавершение(Результат, ИдентификаторЗадания) Экспорт
	
	ОбработчикиОжидания = АктивныеОбработчикиОжиданияФоновогоЗадания();
	ОбработчикиОжиданияЗадания = ОбработчикиОжидания[ИдентификаторЗадания];
	Если ОбработчикиОжиданияЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметры Из ОбработчикиОжиданияЗадания Цикл
		
		Если Не Параметры.ВыводитьОкноОжидания И ТипЗнч(Параметры.Владелец) = Тип("ФормаКлиентскогоПриложения") Тогда
			
			Элементы = Параметры.Владелец.Элементы;
			Если Параметры.СкрыватьИнтерфейс И (Элементы.Найти("ГруппаСтраницыПодключения") <> Неопределено) Тогда
				
				Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
				Если ЗначениеЗаполнено(Параметры.СтарыйЗаголовок) Тогда
					Элементы.ОписаниеЗагрузкаИзДОСтраница.Заголовок = Параметры.СтарыйЗаголовок;
				КонецЕсли;
				
			ИначеЕсли Элементы.Найти("ГруппаЗагрузкаИзДО") <> Неопределено Тогда
				
				Элементы.ГруппаЗагрузкаИзДО.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Если Результат.Статус = "Выполнено" Тогда
				Результат.Вставить("РезультатДлительнойОперации", ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
			ИначеЕсли Результат.Статус = "Ошибка" Тогда
				ВерсияСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса(
					ВерсияСервиса);
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеОЗавершении, Результат);
		
	КонецЦикла;
	
	ОбработчикиОжидания.Удалить(ИдентификаторЗадания);
	
КонецПроцедуры

Процедура ПоказатьПолучениеОбъектовАдресацииРолиЗавершение(РезультатЗаполнения, ПараметрыОповещения) Экспорт
	
	ОписаниеОповещенияОЗакрытии = ПараметрыОповещения.ОписаниеОповещенияОЗакрытии;
	ИмяРоли = ПараметрыОповещения.ИмяРоли;
	ТипРоли = ПараметрыОповещения.ТипРоли;
	IDРоли = ПараметрыОповещения.IDРоли;
	
	ДанныеВозврата = Новый Структура;
	
	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		
		Если РезультатЗаполнения.Результат = "ОК" Тогда
			
			ДанныеВозврата.Вставить("Исполнитель", РезультатЗаполнения.Исполнитель);
			ДанныеВозврата.Вставить("ИсполнительID", РезультатЗаполнения.ИсполнительID);
			ДанныеВозврата.Вставить("ИсполнительТип", РезультатЗаполнения.ИсполнительТип);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", РезультатЗаполнения.ОсновнойОбъектАдресации);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", РезультатЗаполнения.ОсновнойОбъектАдресацииID);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", РезультатЗаполнения.ОсновнойОбъектАдресацииТип);
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", РезультатЗаполнения.ДополнительныйОбъектАдресации);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", РезультатЗаполнения.ДополнительныйОбъектАдресацииID);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", РезультатЗаполнения.ДополнительныйОбъектАдресацииТип);
			
		ИначеЕсли РезультатЗаполнения.Результат = "БезОбъектовАдресации" Тогда
			
			ДанныеВозврата.Вставить("Исполнитель", ИмяРоли);
			ДанныеВозврата.Вставить("ИсполнительID", IDРоли);
			ДанныеВозврата.Вставить("ИсполнительТип", ТипРоли);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", "");
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", "");
			
		Иначе
			
			ДанныеВозврата = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеВозврата = Неопределено;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ДанныеВозврата);
	
КонецПроцедуры

// Обработчик ожидания, который вызывается при завершении длительной операции подключения к ДО после
// начала работы системы.
//
// Параметры:
//   Результат - Структура:
//     * АдресДополнительногоРезультата - Строка
//     * АдресРезультата - Строка
//     * КраткоеПредставлениеОшибки - Строка
//     * ПодробноеПредставлениеОшибки - Строка
//     * Сообщения - Массив из СообщениеПользователю
//     * Статус - Строка
//     * РезультатДлительнойОперации - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыДлительнойОперации
//   НастройкиАвторизацииИзБазы - Структура:
//     * ИмяПользователя - Строка
//     * Пароль - Строка
//     * ПарольСохранен - Булево
//     * ИспользуетсяАутентификацияОССтароеЗначение - Булево
//     * ИспользуетсяАутентификацияJWTСтароеЗначение - Булево
//
Процедура ПослеНачалаРаботыСистемыЗавершение(Результат, НастройкиАвторизацииИзБазы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Параметры = Результат.РезультатДлительнойОперации;
		
		ВерсияСервиса = Параметры.ИнтеграцияС1СДокументооборотВерсияСервиса;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса(
			ВерсияСервиса);
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
			// Подключение выполнено успешно, сервис ДО доступен.
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
				Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
				Параметры.ИнтеграцияС1СДокументооборотПароль,
				Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
				Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT,
				Параметры.ИнтеграцияС1СДокументооборотWSОпределения,
				Параметры.ИнтеграцияС1СДокументооборотМестоположениеПрокси);
			ПриАвторизации(Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
			
#Если ВебКлиент Тогда
			ИмяКомпьютера = Неопределено;
#Иначе
			ИмяКомпьютера = ИмяКомпьютера();
#КонецЕсли
			Если Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС <>
					НастройкиАвторизацииИзБазы.ИспользуетсяАутентификацияОССтароеЗначение Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(
					ИмяКомпьютера,
					Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
			КонецЕсли;
			Если Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT <>
					НастройкиАвторизацииИзБазы.ИспользуетсяАутентификацияJWTСтароеЗначение Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииJWT(
					ИмяКомпьютера,
					Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаписатьОшибку(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ожидания, который вызывается при завершении длительной операции подключения к ДО,
// из процедуры ПроверитьПодключение.
//
// Параметры:
//   Результат - Структура:
//     * АдресДополнительногоРезультата - Строка
//     * АдресРезультата - Строка
//     * КраткоеПредставлениеОшибки - Строка
//     * ПодробноеПредставлениеОшибки - Строка
//     * Сообщения - Массив из СообщениеПользователю
//     * Статус - Строка
//     * РезультатДлительнойОперации - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыДлительнойОперации
//   ПараметрыОповещения - Структура:
//     * ИмяПользователя - Строка
//     * Пароль - Строка
//     * ПарольСохранен - Булево
//     * ИспользуетсяАутентификацияОССтароеЗначение - Булево
//     * ИспользуетсяАутентификацияJWTСтароеЗначение - Булево
//     * ОписаниеОповещения - ОписаниеОповещения
//     * Владелец - Владелец - ФормаКлиентскогоПриложения - форма, в которой следует вызвать повторную попытку подключения.
//                - ОбщийМодуль - клиентский модуль, из которого вызывается команда.
//     * ПовторноПоказыватьОкноАвторизации - Булево
//
Процедура ПроверитьПодключениеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяАутентификацияОС = Ложь;
	ИспользуетсяАутентификацияJWT = Ложь;
	АвторизовалсяРанее = ПараметрыОповещения.ПарольСохранен
		Или ПараметрыОповещения.ИспользуетсяАутентификацияОССтароеЗначение
		Или ПараметрыОповещения.ИспользуетсяАутентификацияJWTСтароеЗначение;
	УспешноеПодключение = Ложь;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Параметры = Результат.РезультатДлительнойОперации;
		
		ВерсияСервиса = Параметры.ИнтеграцияС1СДокументооборотВерсияСервиса;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса(
			ВерсияСервиса);
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
				Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
				Параметры.ИнтеграцияС1СДокументооборотПароль,
				Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
				Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT,
				Параметры.ИнтеграцияС1СДокументооборотWSОпределения,
				Параметры.ИнтеграцияС1СДокументооборотМестоположениеПрокси);
			ПриАвторизации(Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
			
			УспешноеПодключение = Истина;
			ПараметрыОповещения.ПовторноПоказыватьОкноАвторизации = Ложь;
			ИспользуетсяАутентификацияОС = Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
			ИспользуетсяАутентификацияJWT = Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT;
			
#Если ВебКлиент Тогда
			ИмяКомпьютера = Неопределено;
#Иначе
			ИмяКомпьютера = ИмяКомпьютера();
#КонецЕсли
			Если ИспользуетсяАутентификацияОС <> ПараметрыОповещения.ИспользуетсяАутентификацияОССтароеЗначение Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(
					ИмяКомпьютера,
					ИспользуетсяАутентификацияОС);
			КонецЕсли;
			Если ИспользуетсяАутентификацияJWT <> ПараметрыОповещения.ИспользуетсяАутентификацияJWTСтароеЗначение Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииJWT(
					ИмяКомпьютера,
					ИспользуетсяАутентификацияJWT);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	// Предлагаем окно авторизации, лишь если из контекста вызова известно, что пользователь явно
	// инициировал обращение к функционалу ДО.
	Если Не УспешноеПодключение
			И (ПараметрыОповещения.ПовторноПоказыватьОкноАвторизации
				Или ((ПараметрыОповещения.ИмяПользователя = Неопределено Или Не АвторизовалсяРанее)
					И Не АвторизацияПредложена())) Тогда
		
		СохранитьАвторизацияПредложена();
		
		ПараметрыФормыАвторизации = Новый Структура;
		ПараметрыФормыАвторизации.Вставить("ИмяПользователя", ПараметрыОповещения.ИмяПользователя);
		ПараметрыФормыАвторизации.Вставить("ПарольСохранен", ПараметрыОповещения.ПарольСохранен);
		ПараметрыФормыАвторизации.Вставить("Пароль", ПараметрыОповещения.Пароль);
		ПараметрыФормыАвторизации.Вставить("АвтоматическийВызовПриПроверкеПодключения", Истина);
		
		ПараметрыПроверкиПодключения = Новый Структура;
		ПараметрыПроверкиПодключения.Вставить("ОписаниеОповещения", ПараметрыОповещения.ОписаниеОповещения);
		
		ОписаниеОповещенияПроверкиПодключения = Новый ОписаниеОповещения(
			"ПроверитьПодключениеПослеОкнаАвторизации",
			ЭтотОбъект,
			ПараметрыПроверкиПодключения);
		
		ФормаАвторизации = ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот",
			ПараметрыФормыАвторизации,
			ПараметрыОповещения.Владелец,,,,
			ОписаниеОповещенияПроверкиПодключения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		// В случае успешной аутентификации ОС форма не откроется.
		Если ФормаАвторизации = Неопределено Тогда
			
			УспешноеПодключение = Истина;
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизацииИзПараметровСеанса(
				ИспользуетсяАутентификацияОС,
				ИспользуетсяАутентификацияJWT);
			Если ИспользуетсяАутентификацияОС <> ПараметрыОповещения.ИспользуетсяАутентификацияОССтароеЗначение Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(
					ИмяКомпьютера,
					ИспользуетсяАутентификацияОС);
			КонецЕсли;
			Если ИспользуетсяАутентификацияJWT <> ПараметрыОповещения.ИспользуетсяАутентификацияJWTСтароеЗначение Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииJWT(
					ИмяКомпьютера,
					ИспользуетсяАутентификацияJWT);
			КонецЕсли;
			
		Иначе // открылась форма авторизации
			Возврат; // с асинхронным продолжением после нажатия ОК.
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОписаниеОповещения, УспешноеПодключение);
	
КонецПроцедуры

// Обработчик оповещения "СоздатьИнтегрированныйОбъектЗавершение".
//
// Параметры:
//   Результат - Произвольный
//   ПараметрыОповещения - Структура:
//     * Объект1СДокументооборота - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * ФормаОбъекта - ФормаКлиентскогоПриложения:
//         ** Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//                   - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//     * НаличиеПрисоединенныхФайлов - Булево
//
Процедура СоздатьИнтегрированныйОбъектЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	СсылкаНаОбъект = ПараметрыОповещения.ФормаОбъекта.Объект.Ссылка;
	ПараметрыОповещения.ФормаОбъекта = Неопределено;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ID = ПараметрыОповещения.Объект1СДокументооборота.ID;
	Тип = ПараметрыОповещения.Объект1СДокументооборота.Тип;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
		ID,
		Тип,
		СсылкаНаОбъект,
		ПараметрыОповещения.НаличиеПрисоединенныхФайлов);
	Оповестить_ДобавлениеСвязи(ID, Тип, СсылкаНаОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФайлы

Функция ИмяФайлаССуффиксом(КаталогССуффиксом, ТекущийФайл)
	
	ИмяФайлаССуффиксом = КаталогССуффиксом
		+ ПолучитьРазделительПути()
		+ ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ИмяСРасширением(
			ТекущийФайл.Наименование,
			ТекущийФайл.Расширение);
	
	МаксимальнаяДлинаПолногоПути = 260;
	Если НРег(ТекущийФайл.Расширение) = "xls" Или НРег(ТекущийФайл.Расширение) = "xlsx" Тогда
		// Excel длина имени файла вместе с путем не должна превышать 218 знаков.
		МаксимальнаяДлинаПолногоПути = 218;
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	
	ДлинаИмяФайлаССуффиксом = СтрДлина(ИмяФайлаССуффиксом);
	
	Если ДлинаИмяФайлаССуффиксом > МаксимальнаяДлинаПолногоПути Тогда
		
		МаксимальнаяДлинаСПутем = МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
		СколькоНадоОтрезать = ДлинаИмяФайлаССуффиксом - МаксимальнаяДлинаСПутем + 1;
		
		// Урезаем.
		ТекущийФайл.Наименование = Лев(ТекущийФайл.Наименование, СтрДлина(ТекущийФайл.Наименование) - СколькоНадоОтрезать);
		ТекущийФайл.Наименование = СокрЛП(ТекущийФайл.Наименование);
		ТекущийФайл.ИмяФайла = СтрШаблон("%1.%2", ТекущийФайл.Наименование, ТекущийФайл.Расширение);
		
		ИмяФайлаССуффиксом = КаталогССуффиксом
			+ ПолучитьРазделительПути()
			+ ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ИмяСРасширением(
				ТекущийФайл.Наименование,
				ТекущийФайл.Расширение);
		
	КонецЕсли;
	
#КонецЕсли
	
	Возврат ИмяФайлаССуффиксом;
	
КонецФункции

// Выполняет печать файла внешним приложением.
//
Процедура НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла)
	
#Если Не МобильныйКлиент Тогда
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		
		Shell = Новый COMОбъект("Shell.Application");
		Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "print", 1);
		
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

// Начинает печать файла во внешним приложением или, для некоторых видов файлов - средствами платформы.
//
Процедура НапечататьФайлПриложением(ПолноеИмяФайла)
	
#Если МобильныйКлиент Тогда
	
	ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов данного типа не поддерживается в мобильном клиенте.'"));
	Возврат;
	
#Иначе
	
	РасширенияИсключения =
		"m3u, m4a, mID, mIDi, mp2, mp3, mpa, rmi, wav, wma,
		|3g2, 3gp, 3gp2, 3gpp, asf, asx, avi, m1v, m2t, m2ts,
		|m2v, m4v, mkv, mov, mp2v, mp4, mp4v, mpe, mpeg, mts,
		|vob, wm, wmv, wmx, wvx, 7z, zip, rar, arc, arh, arj,
		|ark, p7m, pak, package, app, com, exe, jar, dll, res,
		|iso, isz, mdf, mds, cf, dt, epf, erf";
	РасширенияИсключенияМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		РасширенияИсключения,
		",",
		Истина,
		Истина);
	
	ПозицияТочки = СтрНайти(ПолноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки <> 0 Тогда
		Расширение = НРег(Сред(ПолноеИмяФайла, ПозицияТочки + 1));
	Иначе
		Расширение = "";
	КонецЕсли;
	
	Расширение = НРег(Расширение);
	Если РасширенияИсключенияМассив.Найти(Расширение) <> Неопределено Тогда
		Возврат;
	
	ИначеЕсли Расширение = "grs" Тогда
		Схема = Новый ГрафическаяСхема;
		Схема.Прочитать(ПолноеИмяФайла);
		Схема.Напечатать();
	
	ИначеЕсли Расширение = "mxl" Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
		ТабличныйДокумент.Напечатать();
		
	Иначе
		
		Попытка
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
					Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
			КонецЕсли;
			НапечататьИзПриложенияПоИмениФайла(ПолноеИмяФайла);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Описание=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо)));
		КонецПопытки;
		
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

// Открывает файл соответствующим ему приложением.
//
// Параметры:
//   ПолноеИмяФайла - Строка - полный путь к открываемому файлу.
//
// Возвращаемое значение:
//   Булево - Истина, если файл успешно открыт.
//
Функция ОткрытьФайлПриложением(ПолноеИмяФайла)
	
	Попытка
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
				Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
		КонецЕсли;
		ФайловаяСистемаКлиент.ОткрытьФайл(ПолноеИмяФайла);
	Исключение
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Описание=""%1""'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Начинает получение одного файла из Документооборота.
//
// Параметры:
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//     * ПолныеИменаФайлов - Массив из Строка - полные имена уже полученных файлов.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПолучениеФайлаНачало(Параметры)
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		
		Если Параметры.ТекущийФайл.Тип = "DMFile" Тогда
			АдресВременногоХранилища =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
					Параметры.ТекущийФайл.ID,
					Параметры.УникальныйИдентификаторФормы);
		Иначе // DMFileVersion
			АдресВременногоХранилища =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(
					Параметры.ТекущийФайл.ID,
					Параметры.УникальныйИдентификаторФормы);
		КонецЕсли;
		
		ПолучитьФайл(АдресВременногоХранилища, Параметры.ТекущийФайл.ИмяФайла, Истина);
		
		Параметры.ПолныеИменаФайлов.Добавить(Параметры.ТекущийФайл.ИмяФайла);
		ПолучитьФайлыНачало(Параметры);
		
		Возврат;
		
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		
		СведенияОРедактировании =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла(
				Параметры.ТекущийФайл.ID,
				Параметры.ТекущийФайл.Тип);
		Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
		
		Если НуженВыборДействийПриОбнаруженииОтличийФайла(
				СведенияОРедактировании,
				Параметры,
				"ПолучениеФайлаПослеВыбораИсточника",
				Истина) Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметры.ИспользоватьСуществующий Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучениеФайлаПослеВыбораИсточника",
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
				Параметры);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, "ИспользоватьСуществующий");
			Возврат;
		КонецЕсли;
		
		// Если в ДО указана рабочая папка, попытаемся ее использовать.
		Если ЗначениеЗаполнено(СведенияОРедактировании.РекомендуемаяПапка) Тогда
			Файл = Новый Файл(СведенияОРедактировании.РекомендуемаяПапка);
			Если Файл.Существует() И Файл.ЭтоКаталог() Тогда // используем указанную папку.
				КаталогВременныхФайлов = СведенияОРедактировании.РекомендуемаяПапка;
			ИначеЕсли Файл.Существует() И Файл.ЭтоФайл() Тогда // использовать ее невозможно.
				КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
			Иначе // попытаемся создать эту папку
				Попытка
					СоздатьКаталог(СведенияОРедактировании.РекомендуемаяПапка);
					КаталогВременныхФайлов = СведенияОРедактировании.РекомендуемаяПапка;
				Исключение // нет доступа или иные проблемы.
					КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаписатьПредупреждение(
						СтрШаблон(
							НСтр("ru = 'Нет доступа к рабочей папке: %1'"),
							СведенияОРедактировании.РекомендуемаяПапка));
				КонецПопытки;
			КонецЕсли;
		Иначе // рекомендуемый каталог не указан
			КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
		КонецЕсли;
		
	Иначе // веб-сервис этой версии не поддерживает расширенную работу с файлами.
		КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
	КонецЕсли;
	
	Если Прав(КаталогВременныхФайлов, 1) = ПолучитьРазделительПути() Тогда
		КаталогВременныхФайлов = Лев(КаталогВременныхФайлов, СтрДлина(КаталогВременныхФайлов) - 1);
	КонецЕсли;
	
	// Получим имя временного файла, не совпадающее с именем файла, существующего во временном каталоге,
	// создав, если нужно, подкаталог вида A...Z, A0...Z9.
	СчетчикПопыток = 0;
	Успех = Ложь;
#Если Не ВебКлиент Тогда
	Генератор = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДата())); // Использование оправдано: ГСЧ.
#КонецЕсли
	Пока СчетчикПопыток < 100 Цикл
		СчетчикПопыток = СчетчикПопыток + 1;
#Если Не ВебКлиент Тогда
		Если СчетчикПопыток = 1 Тогда
			Суффикс = "";
		Иначе
			Суффикс = Символ(КодСимвола("A") + Генератор.СлучайноеЧисло(0, 25));
			Если СчетчикПопыток > 13 Тогда // пора усложнить суффикс
				Суффикс = Суффикс + Строка(Генератор.СлучайноеЧисло(0, 9));
			КонецЕсли;
		КонецЕсли;
#Иначе
		Если СчетчикПопыток = 1 Тогда
			Суффикс = "";
		Иначе
			Суффикс = Символ(КодСимвола("A") + (Секунда(ТекущаяДата()) + СчетчикПопыток) % 26); // Использование оправдано: ГСЧ.
			Если СчетчикПопыток > 13 Тогда // пора усложнить суффикс
				Суффикс = Суффикс + Строка((Секунда(ТекущаяДата()) + СчетчикПопыток) % 10);// Использование оправдано: ГСЧ
			КонецЕсли;
		КонецЕсли;
#КонецЕсли
		КаталогССуффиксом = КаталогВременныхФайлов + ?(Суффикс = "",
			"",
			ПолучитьРазделительПути() + Суффикс);
		Файл = Новый Файл(КаталогССуффиксом);
		Если Файл.Существует() Тогда
			Если Файл.ЭтоФайл() Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Попытка
				СоздатьКаталог(КаталогССуффиксом);
			Исключение
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при создании каталога ""%1"":
						|""%2"".'"),
					КаталогССуффиксом,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
			КонецПопытки;
		КонецЕсли;
		
		ИмяФайлаССуффиксом = ИмяФайлаССуффиксом(КаталогССуффиксом, Параметры.ТекущийФайл);
		Файл = Новый Файл(ИмяФайлаССуффиксом);
		Если Не Файл.Существует() Тогда
			Успех = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не Успех Тогда
		ВызватьИсключение НСтр("ru = 'Не удается создать файл в каталоге временных файлов.'");
	КонецЕсли;
	Параметры.Вставить("КаталогВременныхФайлов", КаталогССуффиксом);
	Параметры.Вставить("ИмяВременногоФайла", ИмяФайлаССуффиксом);
	
	// Получим файл из ДО на сервере.
	Если Параметры.ТекущийФайл.Тип = "DMFile" Тогда
		Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьФайлИПоместитьВХранилище(
			Параметры.ТекущийФайл.ID,
			Параметры.УникальныйИдентификаторФормы,
			?(Параметры.НаЧтение, Неопределено, ТекущаяДата()), // Использование оправдано: фиксируется дата-время на клиенте.
			Параметры.ТекущийФайл.Размер,
			Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
	Иначе
		Адрес = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(
			Параметры.ТекущийФайл.ID,
			Параметры.УникальныйИдентификаторФормы,
			Параметры.ТекущийФайл.Размер,
			Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
	КонецЕсли;
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	
	ПолучениеФайлаПослеПолученияИзДокументооборота(Параметры);
	
КонецПроцедуры

// Начинает получение файлов, вызывая оповещение после получения всех файлов.
//
// Параметры:
//   Параметры - Структура:
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//     * ПолныеИменаФайлов - Массив из Строка - полные имена уже полученных файлов.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПолучитьФайлыНачало(Параметры)
	
	// Получены ли все файлы?
	Если Параметры.ОставшиесяФайлы.Количество() = 0  Тогда
		
		Если Параметры.ПолныеИменаФайлов.Количество() <> 0 Тогда
			ВыполнитьОбработкуОповещения(
				Параметры.ОписаниеОповещения,
				Параметры.ПолныеИменаФайлов);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("ТекущийФайл", Параметры.ОставшиесяФайлы[0]);
	Параметры.ОставшиесяФайлы.Удалить(0);
	
	ПолучениеФайлаНачало(Параметры);
	
КонецПроцедуры

Функция НуженВыборДействийПриОбнаруженииОтличийФайла(СведенияОРедактировании, Параметры,
		ПроцедураПродолжения, ВыполняетсяОткрытиеФайла)
	
	Параметры.Вставить("ИспользоватьСуществующий", Ложь);
	
	Если Не СведенияОРедактировании.Сохранен Или Параметры.ТекущийФайл.Тип = "DMFileVersion" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ИмяВременногоФайла", СведенияОРедактировании.ПолныйПуть);
	Параметры.Вставить("КаталогВременныхФайлов", СведенияОРедактировании.РекомендуемаяПапка);
	
	Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим дату-время существующего файла.
	ДатаВремяНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
	ДатаВремяВДокументообороте = Дата(СведенияОРедактировании.ДатаМодификацииУниверсальная);
	РазмерНаДиске = Файл.Размер();
	РазмерВДокументообороте = СведенияОРедактировании.Размер;
	РазницаДат = ДатаВремяНаДиске - ДатаВремяВДокументообороте;
	
	// Определим необходимость обновления сведений о редактировании.
	Если Параметры.Свойство("СведенияОРедактировании") И Параметры.Свойство("НаЧтение") Тогда
		Если РазницаДат <> 0 Или (СведенияОРедактировании.НаЧтение И Не Параметры.НаЧтение) Тогда
			Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
			Параметры.СведенияОРедактировании.Вставить("ДатаМодификацииУниверсальная", ДатаВремяНаДиске);
			Параметры.СведенияОРедактировании.Вставить("Размер", РазмерНаДиске);
		Иначе
			Параметры.Вставить("ОбновитьСведенияОРедактировании", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Определим, следует ли задавать вопрос пользователю, или же решение очевидно.
	РазмерИДатаСовпадают = (РазницаДат >= -1 И РазницаДат <= 1 И РазмерВДокументообороте = РазмерНаДиске);
	ФайлНаРедактировании = (РазницаДат > 0 И СведенияОРедактировании.НаЧтение = Ложь);
	
	Если ВыполняетсяОткрытиеФайла Тогда
		
		// При открытии файла, если временный файл совпадает с файлом ДО, или если прямо сейчас файл
		// находится на редактировании - ничего спрашивать не нужно, используем существующий временный файл.
		Если (РазмерИДатаСовпадают Или ФайлНаРедактировании) Тогда
			Параметры.ИспользоватьСуществующий = Истина;
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		// При сохранении файла на диск, если временный файл совпадает с файлом ДО - ничего спрашивать не нужно,
		// для сохранения возьмем файл из ДО. Если временный файл отличается от файла ДО - спросим
		// какой именно файл требуется сохранить на диск.
		Если РазмерИДатаСовпадают Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// уверенности нет, требуется вмешательство пользователя
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПолныйПуть", СведенияОРедактировании.ПолныйПуть);
	ПараметрыФормы.Вставить("ДатаВремяНаДиске", ДатаВремяНаДиске);
	ПараметрыФормы.Вставить("ДатаВремяВДокументообороте", ДатаВремяВДокументообороте);
	ПараметрыФормы.Вставить("РазмерНаДиске", РазмерНаДиске);
	ПараметрыФормы.Вставить("РазмерВДокументообороте", РазмерВДокументообороте);
	
	// Сформулируем вопрос в зависимости от того, какой из файлов свежее.
	Если РазницаДат > 0 Тогда
		// файл на диске свежее
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'На диске новый файл'"));
		ПараметрыФормы.Вставить("Сообщение",
			НСтр("ru = 'Файл на диске новее, чем файл в 1С:Документообороте.
				|Возможно, он был изменен.
				|
				|Использовать существующий файл или заменить его на файл из 1С:Документооборота,
				|возможно, с потерей изменений?'"));
	Иначе
		// файл на диске старше
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'В 1С:Документообороте новый файл'"));
		ПараметрыФормы.Вставить("Сообщение",
			НСтр("ru = 'Файл в 1С:Документообороте новее, чем файл на диске.
				|Возможно, он был изменен.
				|
				|Взять файл из 1С:Документооборота, заменив файл на диске с потерей
				|изменений, или использовать существующий файл?'"));
	КонецЕсли;
	
	ОповещениеПродолжение = Новый ОписаниеОповещения(
		ПроцедураПродолжения,
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		Параметры);
	
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборДействийПриОбнаруженииОтличийФайла",
		ПараметрыФормы,,,,,
		ОповещениеПродолжение,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	Возврат Истина;
	
КонецФункции

// Вызывается в ходе получения файла после получения файла из ДО.
//
// Параметры:
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ОставшиесяФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//     * ПолныеИменаФайлов - Массив из Строка - полные имена уже полученных файлов.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * КаталогВременныхФайлов - Строка - каталог для сохранения временного файла.
//     * ИмяВременногоФайла - Строка - имя, под которым будет сохранен файл.
//     * АдресВременногоХранилищаФайла - Строка - адрес, где хранится полученный из ДО файл.
//
Процедура ПолучениеФайлаПослеПолученияИзДокументооборота(Параметры)
	
	// Соберем описание получаемого файла и получим его.
	ПолучаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(
		Параметры.ИмяВременногоФайла,
		Параметры.АдресВременногоХранилищаФайла);
	ПолучаемыеФайлы.Добавить(Описание);
	
	НачатьПолучениеФайлов(
		Новый ОписаниеОповещения(
			"ОбработатьФайлПослеПолученияИзДокументооборота",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			Параметры),
		ПолучаемыеФайлы,,
		Ложь);
	
КонецПроцедуры

// Получает файлы из ДО в каталог временных файлов и передает их на дальнейшую обработку.
//
// Параметры:
//   Файлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//   НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//
Процедура ПолучитьФайлыИПродолжить(Файлы, УникальныйИдентификаторФормы, ОписаниеОповещенияОЗавершении,
		НаЧтение = Истина)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОставшиесяФайлы", Файлы);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("НаЧтение", НаЧтение);
	
	ПолучитьФайлыНачало(Параметры);
	
КонецПроцедуры

// Возвращает результат подключения расширения работы с файлами.
//
// Возвращаемое значение:
//   Булево - в тонком клиенте всегда Истина, в браузере Google Chrome - всегда Ложь.
//
Функция РасширениеРаботыСФайламиПодключено()
	
	Если КлиентПоддерживаетСинхронныеВызовы() Тогда
		Возврат ПодключитьРасширениеРаботыСФайлами();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Выполняется в ходе создания файла с диска после помещения файла (универсальное завершение).
//
// Параметры:
//   Параметры - Структура:
//     * ТекущийФайл - Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * АдресВременногоХранилищаФайла - Строка - адрес временного хранилища файла.
//     * Файл - Файл - инициализированный файл.
//     * Владелец - ЛюбаяСсылка - владелец файла.
//     * ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//     * ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//     * ВладелецПредставление - Строка - представление владельца файла.
//     * ПолноеИмяФайла - Строка - полное имя выбранного пользователем файла.
//     * ПолныеИменаФайлов - Массив из Строка - имена добавленных файлов.
//     * ПомещенныеФайлы - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * ЯвляетсяСканКопией - Булево - признак скан-копии.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении.
//                          - Неопределено - вызывать ничего не нужно.
//
Процедура СоздатьФайлСДискаЗавершение(Параметры)
	
	// Разберем полный путь на имя и расширение.
	СтруктураИмени = РазложитьПолноеИмяФайла(Параметры.ПолноеИмяФайла);
	Параметры.ТекущийФайл.Наименование = СтруктураИмени.ИмяБезРасширения;
	Параметры.ТекущийФайл.Расширение = СтруктураИмени.Расширение;
	
	ПараметрыСоздания = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(
		Параметры.ТекущийФайл);
	ПараметрыСоздания.АдресВременногоХранилищаФайла = Параметры.АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Владелец = Параметры.Владелец;
	ПараметрыСоздания.ЯвляетсяСканКопией = Параметры.ЯвляетсяСканКопией;
	
	Параметры.ТекущийФайл.ID =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьФайлВДокументообороте(
			ПараметрыСоздания,
			Параметры.ВладелецID,
			Параметры.ВладелецТип,
			Параметры.ВладелецПредставление);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан файл ""%1""'"), Параметры.ТекущийФайл.Наименование);
	ИнформироватьОбИзмененииФайла(
		"СозданиеФайла",
		Параметры.ТекущийФайл.Наименование,
		Параметры.ТекущийФайл.ID,
		Параметры.ВладелецID,
		ТекстСообщения,,
		Параметры.УникальныйИдентификаторФормы);
	
	Параметры.ПомещенныеФайлы.Добавить(Параметры.ТекущийФайл);
	
	// Все ли файлы помещены?
	Если Параметры.ПолныеИменаФайлов.Количество() = 0 Тогда
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда // оповестим, передав описания
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры.ПомещенныеФайлы);
		КонецЕсли;
	Иначе
		// продолжим создание
		Параметры.ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			Неопределено,
			Неопределено,
			Параметры.ТекущийФайл.Тип,
			Неопределено,
			Параметры.ТекущийФайл.РольФайлаID);
		СоздатьФайлСДискаПослеДиалогаВыбораФайла(Параметры.ПолныеИменаФайлов, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭлектронныеПодписи

// Проверяет, поддерживает ли клиент синхронные вызовы.
//
Функция КлиентПоддерживаетСинхронныеВызовы()
	
#Если ВебКлиент Тогда
	// В Chrome расширение не подключается.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияПрограммыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СистемнаяИнформация.ИнформацияПрограммыПросмотра, " ");
	
	Для Каждого ИнформацияПрограммы Из ИнформацияПрограммыМассив Цикл
		Если Найти(ИнформацияПрограммы, "Chrome") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

// Возвращает общие настройки электронной подписи.
//
// Возвращаемое значение:
//   Структура:
//     * ИспользоватьЭлектронныеПодписи - Булево - если Истина, то электронный подписи используются.
//     * ИспользоватьШифрование - Булево - если Истина, то шифрование используются.
//     * ПроверятьЭлектронныеПодписиНаСервере - Булево - если Истина, то электронные подписи и
//         сертификаты проверяются на сервере.
//     * СоздаватьЭлектронныеПодписиНаСервере - Булево - если Истина, то электронные подписи создаются
//         сначала на сервере, а в случае неудачи на клиенте.
//     * ОписанияПрограмм - Массив из см. ЭлектроннаяПодписьСлужебныйПовтИсп.ОписаниеПрограммы - сведения о
//         поддерживаемых программах криптографии.
//
Функция ОбщиеНастройкиЭП()
	
	Возврат СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ЭлектроннаяПодпись.ОбщиеНастройки;
	
КонецФункции

// Проверяет одну электронно-цифровую подпись.
//
// Параметры:
//   ДанныеСтроки - ДанныеФормыЭлементДерева - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   МенеджерКриптографии - МенеджерКриптографии - объект Менеджера криптографии.
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор управляемой формы объекта Документооборота.
//   СоответствиеИдОбъектаИДвоичныхДанных - Соответствие - соответствие идентификаторов объектов и их двоичных данных.
//   АдресСлепкаДокумента - Строка - адрес временного хранилища двоичных данных документа Документооборота.
//
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор,
		СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента)
	
	ПараметрыПроверкиЭП = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПараметрыПроверкиЭП(
		ДанныеСтроки,
		СоответствиеИдОбъектаИДвоичныхДанных,
		АдресСлепкаДокумента);
	Если ПараметрыПроверкиЭП.Подпись = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеДатыПроверки = Формат(
		ТекущаяДата(),
		ПараметрыПроверкиЭП.ФорматДатыПроверки); // Использование оправдано: фиксируется дата-время на клиенте.
	
	Попытка
		Неверна = Ложь;
		Сертификат = Неопределено;
		МенеджерКриптографии.ПроверитьПодпись(
			ПараметрыПроверкиЭП.ДвоичныеДанныеОбъекта,
			ПараметрыПроверкиЭП.Подпись,
			Сертификат);
		МассивРежимовПроверки = Новый Массив;
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		Статус = НСтр("ru = 'Действительна (%1)'");
	Исключение
		Неверна = Истина;
		Статус = НСтр("ru = 'Недействительна (%1)'");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			Статус = Статус + ": " + Инфо.Причина.Описание;
		КонецЕсли;
	КонецПопытки;
	
	ДанныеСтроки.Статус = СтрШаблон(Статус, ПредставлениеДатыПроверки);
	ДанныеСтроки.Неверна = Неверна;
	ДанныеСтроки.ПодписьВерна = Не Неверна;
	ДанныеСтроки.КомуВыданСертификатИСтатус = ДанныеСтроки.КомуВыданСертификат + Символы.ПС + ДанныеСтроки.Статус;
	
КонецПроцедуры

#КонецОбласти

Функция АктивныеОбработчикиОжиданияФоновогоЗадания()
	
	ИмяПараметра = "ИнтеграцияС1СДокументооборотом.АктивныеОбработчикиОжиданияФоновогоЗадания";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		Обработчики = Новый Соответствие;
		ПараметрыПриложения.Вставить(ИмяПараметра, Обработчики);
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра];
	
КонецФункции

Процедура ВыбратьЗначениеДополнительногоРеквизитаОбработка(ИмяТипа, Форма, Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ИмяТипа = "integer"
			Или ИмяТипа = "boolean"
			Или ИмяТипа = "string"
			Или ИмяТипа = "date" Тогда
		
		Если ИмяТипа = "integer" Тогда
			ТипЗначения = Тип("Число");
		ИначеЕсли ИмяТипа = "boolean" Тогда
			ТипЗначения = Тип("Булево");
		ИначеЕсли ИмяТипа = "string" Тогда
			ТипЗначения = Тип("Строка");
		ИначеЕсли ИмяТипа = "date" Тогда
			ТипЗначения = Тип("Дата");
		КонецЕсли;
		// Ввод значения примитивного типа - строка, число и т.п.
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		ПараметрыОповещения.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеДополнительногоРеквизитаВводЗначенияЗавершение",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			ПараметрыОповещения);
		ПоказатьВводЗначения(Оповещение, ТекущиеДанные.Значение, ТекущиеДанные.Свойство, ТипЗначения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		
		Владелец = Новый Структура;
		Владелец.Вставить("ID", ТекущиеДанные.СвойствоID);
		Владелец.Вставить("type", ТекущиеДанные.СвойствоТип);
		
		Отбор = Новый Структура;
		Если ИмяТипа = "DMObjectPropertyValue"
			Или ИмяТипа = "DMObjectPropertyValueHierarchy" Тогда
			Отбор.Вставить("additionalProperty", Владелец);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ИмяТипа);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		ПараметрыОповещения.Вставить("Форма", Форма);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеДополнительногоРеквизитаЗавершение",
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
			ПараметрыОповещения);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка", ПараметрыФормы, Форма,,,, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти