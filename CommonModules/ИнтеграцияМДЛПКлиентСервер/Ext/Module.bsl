
#Область ПрограммныйИнтерфейс

#Область ШтрихкодированиеУпаковок

Функция РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов) Экспорт
	
	ШтрихкодыПоТипам = Новый Структура;
	ШтрихкодыПоТипам.Вставить("НомераКиЗ"                 , Новый Массив);
	ШтрихкодыПоТипам.Вставить("НомераТранспортныхУпаковок", Новый Массив);
	ШтрихкодыПоТипам.Вставить("НеизвестныеШтрихкоды"      , Новый Массив);
	
	Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодов Цикл
		Штрихкод = ДанныеШтрихкода.Штрихкод;
		Попытка
			Данные = ДанныеШтрихкода(Штрихкод);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Данные, ДанныеШтрихкода, Ложь);
			Если Данные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка") Тогда
				ШтрихкодыПоТипам.НомераТранспортныхУпаковок.Добавить(Данные);
			Иначе
				ШтрихкодыПоТипам.НомераКиЗ.Добавить(Данные);
			КонецЕсли;
		Исключение
			ШтрихкодыПоТипам.НеизвестныеШтрихкоды.Добавить(ДанныеШтрихкода);
		КонецПопытки;
	КонецЦикла;
	
	Возврат ШтрихкодыПоТипам;
	
КонецФункции

// Возвращает данные из штрихкода в формате GS1.
//
// Параметры:
//  Штрихкод - Строка - 
//
// Возвращаемое значение:
//  Структура - данные из штрихкода
//    * SSCC - Строка(18)
//   ИЛИ
//    * GTIN - Строка(14)
//    * СерийныйНомерУпаковки - Строка(13)
//    * sgtin - Строка(27)
//    * КодТНВЭД - Строка(4) - (необязательный)
//    * Серия - Строка - (необязательный)
//    * ГоденДо - Дата - (необязательный)
//
Функция ДанныеШтрихкода(Знач Штрихкод) Экспорт
	
	Данные = РазобратьКакШтрихкодГС1(Штрихкод);
	Если Данные = Неопределено Тогда
		Данные = РазобратьКакШтрихкодГрупповойУпаковки(Штрихкод);
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Штрихкод не являет штрихкодом упаковки лекарственного препарата или групповой упаковки.'");
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Возвращает разделитель полей штрихкода GS1
// 
// Возвращаемое значение:
//  Символ 
//
Функция РазделительGS1() Экспорт
	Возврат Символ(29);
КонецФункции

// Возвращает представление разделителя полей штрихкода GS1
// 
// Возвращаемое значение:
//  Строка 
//
Функция ПредставлениеРазделителяGS1() Экспорт
	Возврат "\x1d";
КонецФункции

Функция РазобратьКакШтрихкодГС1(Штрихкод)
	
	Попытка
		ДанныеРазбора = РазобратьСтрокуШтрихкодаГС1(Штрихкод);
	Исключение
		Возврат Неопределено
	КонецПопытки;
	
	ДанныеШтрихкода = ДанныеРазбора.ДанныеШтрихкода;
	Если ДанныеШтрихкода.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Неопределено;
	
	Если ДанныеШтрихкода[0].ИдентификаторПрименения = "00" Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Штрихкод"       , ДанныеРазбора.ПредставлениеШтрихкода);
		Данные.Вставить("ШтрихкодBase64" , ДанныеРазбора.ШтрихкодBase64);
		Данные.Вставить("ДанныеШтрихкода", ДанныеШтрихкода);
		Данные.Вставить("ТипУпаковки"    , ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка"));
		Данные.Вставить("SSCC"           , ДанныеШтрихкода[0].Значение);
		
		Если МенеджерОборудованияКлиентСервер.РассчитатьКонтрольныйСимволGTIN(Данные.SSCC) <> Прав(Данные.SSCC, 1) Тогда
			Если Не ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный код групповой упаковки %1.'"), Данные.SSCC);
				ИнтеграцияМДЛПВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Текст, НСтр("ru = 'Разбор штрихкода'"));
				//ВызватьИсключение НСтр("ru = 'Некорректный код групповой упаковки.'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДанныеШтрихкода[0].ИдентификаторПрименения = "01" Тогда
		
		GTIN = ДанныеШтрихкода[0].Значение;
		Если Не МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Если Не ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный GTIN %1.'"), GTIN);
				ИнтеграцияМДЛПВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Текст, НСтр("ru = 'Разбор штрихкода'"));
				//ВызватьИсключение НСтр("ru = 'Некорректный GTIN.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.Количество() < 2 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = Новый Структура;
		Данные.Вставить("Штрихкод"       , ДанныеРазбора.ПредставлениеШтрихкода);
		Данные.Вставить("ШтрихкодBase64" , ДанныеРазбора.ШтрихкодBase64);
		Данные.Вставить("ДанныеШтрихкода", ДанныеШтрихкода);
		Данные.Вставить("GTIN"           , GTIN);
		
		Для Индекс = 1 По ДанныеШтрихкода.ВГраница() Цикл
			
			Если ДанныеШтрихкода[Индекс].ИдентификаторПрименения = "21" Тогда
				
				Данные.Вставить("СерийныйНомерУпаковки", ДанныеШтрихкода[Индекс].Значение);
				Если СтрДлина(Данные.СерийныйНомерУпаковки) = 13 Тогда
					Данные.Вставить("SGTIN", GTIN + Данные.СерийныйНомерУпаковки);
					Данные.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.МаркированныйТовар"));
				ИначеЕсли СтрДлина(Данные.СерийныйНомерУпаковки) = 18 Тогда
					Данные.Вставить("SSCC", Данные.СерийныйНомерУпаковки);
					Данные.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка"));
				Иначе
					ВызватьИсключение НСтр("ru = '(21)Некорректный серийный номер упаковки.'");
				КонецЕсли;
			
			ИначеЕсли ДанныеШтрихкода[Индекс].ИдентификаторПрименения = "10" Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(10)Штрихкод не соответствует структуре и формату средства идентификации: Штрихкод содержит информацию о номере серии %1.'"), ДанныеШтрихкода[Индекс].Значение);
				ИнтеграцияМДЛПВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Текст, НСтр("ru = 'Разбор штрихкода'"));
				
				#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
					ОбщегоНазначения.СообщитьПользователю(Текст);
				#Иначе
					ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
				#КонецЕсли
				
				Данные.Вставить("Серия", ДанныеШтрихкода[Индекс].Значение);
				
			ИначеЕсли ДанныеШтрихкода[Индекс].ИдентификаторПрименения = "17" Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(17)Штрихкод не соответствует структуре и формату средства идентификации: Штрихкод содержит информацию о сроке годности %1.'"), ДанныеШтрихкода[Индекс].Значение);
				ИнтеграцияМДЛПВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Текст, НСтр("ru = 'Разбор штрихкода'"));
				
				#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
					ОбщегоНазначения.СообщитьПользователю(Текст);
				#Иначе
					ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
				#КонецЕсли
				
				ГоденДоСтрокой = ДанныеШтрихкода[Индекс].Значение;
				Год = "20" + Сред(ГоденДоСтрокой, 1, 2);
				Месяц = Сред(ГоденДоСтрокой, 3, 2);
				День = Сред(ГоденДоСтрокой, 5, 2);
				Попытка
					Если День = "00" Тогда
						ГоденДо = НачалоДня(КонецМесяца(Дата(Год + Месяц + "01000000")));
					Иначе
						ГоденДо = Дата(Год + Месяц + День + "000000");
					КонецЕсли;
				Исключение
					ВызватьИсключение НСтр("ru = '(17)Некорректный срок годности.'");
				КонецПопытки;
				
				Данные.Вставить("ГоденДо", ГоденДо);
				
			ИначеЕсли ДанныеШтрихкода[Индекс].ИдентификаторПрименения = "240" Тогда
				
				Данные.Вставить("КодТНВЭД", ДанныеШтрихкода[Индекс].Значение);
				Если СтрДлина(Данные.КодТНВЭД) <> 4 Тогда
					ВызватьИсключение НСтр("ru = '(240)Некорректный код ТН ВЭД.'");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Данные.Свойство("SGTIN") И Не Данные.Свойство("SSCC") Тогда
			Данные = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция РазобратьКакШтрихкодГрупповойУпаковки(Штрихкод)
	
	ДлинаИдентификатораРасширенияУпаковки = 1;
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(Штрихкод, ДлинаИдентификатораРасширенияУпаковки)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДлинаИдентификатораОрганизации = 14;
	ИдентификаторОрганизации = Сред(Штрихкод, ДлинаИдентификатораРасширенияУпаковки + 1, ДлинаИдентификатораОрганизации);
	
	Если СтрДлина(ИдентификаторОрганизации) <> 14
	 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИдентификаторОрганизации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторПрименения = "999";
	ДлинаИдентификатораПрименения = СтрДлина(ИдентификаторПрименения);
	Если Сред(Штрихкод, ДлинаИдентификатораРасширенияУпаковки + ДлинаИдентификатораОрганизации + 1, ДлинаИдентификатораПрименения) <> ИдентификаторПрименения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерУпаковки = Сред(Штрихкод, ДлинаИдентификатораРасширенияУпаковки + ДлинаИдентификатораОрганизации + ДлинаИдентификатораПрименения + 1);
	Если СтрДлина(НомерУпаковки) <> 18 Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерУпаковки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Штрихкод"   , Штрихкод);
	Данные.Вставить("ТипУпаковки", ПредопределенноеЗначение("Перечисление.ТипыУпаковокМДЛП.ГрупповаяУпаковка"));
	Данные.Вставить("SSCC"       , НомерУпаковки);
	Данные.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Возврат Данные;
	
КонецФункции

// Разбирает произвольный штрихкод в формате GS1.
//
// Параметры:
//  Штрихкод - Строка - штрихкод GS1 полученный со сканера или представление штрихкода.
//
// Возвращаемое значение:
//  Структура - данные штрихкода
//    - ПредставлениеШтрихкода - Строка - представление штрихкода GS1, где идентификаторы применения заключены в скобки;
//    - ДанныеШтрихкода - Массив(Структура) - список считанных значений в порядке их следования в штрихкоде;
//
Функция РазобратьСтрокуШтрихкодаГС1(Знач Штрихкод) Экспорт
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ПредставлениеШтрихкода", "");
	РезультатРазбора.Вставить("ШтрихкодBase64", "");
	РезультатРазбора.Вставить("ДанныеШтрихкода", Новый Массив);
	
	КодыГС1 = КодыГС1();
	
	Если ШтрихкодВЧеловекоЧитаемомВиде(Штрихкод) Тогда
		РазобратьСтрокуШтрихкодаГС1СоСкобками(Штрихкод, КодыГС1, РезультатРазбора);
	Иначе
		РазобратьСтрокуШтрихкодаГС1СРазделителями(Штрихкод, КодыГС1, РезультатРазбора);
	КонецЕсли;
	
	Возврат РезультатРазбора;
	
КонецФункции

Процедура РазобратьСтрокуШтрихкодаГС1СоСкобками(Штрихкод, КодыГС1, РезультатРазбора)
	
	РезультатРазбора.ПредставлениеШтрихкода = Штрихкод;
	
	ШтрихкодСРазделителями = "";
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	МинимальнаяДлинаИдентификатораПрименения = 2;
	МаксимальнаяДлинаИдентификатораПрименения = 4;
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		Если Сред(Штрихкод, НомерСимвола, 1) <> "(" Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Отсутствует ""("".'"),
				НомерСимвола);
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
		
		Позиция = СтрНайти(Штрихкод, ")",, НомерСимвола);
		Если Позиция = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Отсутствует "")"".'"),
				НомерСимвола);
		КонецЕсли;
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, Позиция - НомерСимвола);
		ДлинаИдентификатора = СтрДлина(ИдентификаторПрименения);
		Если ДлинаИдентификатора < МинимальнаяДлинаИдентификатораПрименения Или ДлинаИдентификатора > МаксимальнаяДлинаИдентификатораПрименения Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Неизвестный идентификатор применения(AI) %2.'"),
				НомерСимвола,
				ИдентификаторПрименения);
		КонецЕсли;
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		ОписаниеКода = КодыГС1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			Если ДлинаИдентификатора = МаксимальнаяДлинаИдентификатораПрименения Тогда
				ОписаниеКода = КодыГС1[Лев(ИдентификаторПрименения, МаксимальнаяДлинаИдентификатораПрименения - 1)];
				ПоложениеДесятичнойТочкиСтрокой = Прав(ИдентификаторПрименения, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеКода = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Неизвестный идентификатор применения(AI) %2.'"),
				НомерСимвола,
				ИдентификаторПрименения);
		КонецЕсли;
		
		НомерСимвола = Позиция + 1;
		
		ЗначениеФиксированное = ПолучитьФиксированнуюЧастьКода(Штрихкод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		ЗначениеПеременное = ПолучитьПеременнуюЧастьКода(Штрихкод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		
		ИсходноеЗначение = ЗначениеФиксированное + ЗначениеПеременное;
		Значение = ИсходноеЗначение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ИсходноеЗначение", ИдентификаторПрименения + ИсходноеЗначение);
		ОписаниеДанных.Вставить("ИдентификаторПрименения" , ОписаниеКода.Код);
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Добавить(ОписаниеДанных);
		
		ШтрихкодСРазделителями = ШтрихкодСРазделителями + ОписаниеДанных.ИсходноеЗначение + ?(ОписаниеКода.ТребуетсяРазделитель, РазделительGS1(), "");
		
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(ШтрихкодСРазделителями, РазделительGS1()) Тогда
		ШтрихкодСРазделителями = Лев(ШтрихкодСРазделителями, СтрДлина(ШтрихкодСРазделителями) - 1);
	КонецЕсли;
	
	РезультатРазбора.ШтрихкодBase64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ШтрихкодСРазделителями));
	
КонецПроцедуры

Функция КодыГС1()
	
	Коды = Новый Соответствие;
	ДобавитьКодГС1(Коды, "00"  , "SSCC"                      , 18);
	ДобавитьКодГС1(Коды, "01"  , "GTIN"                      , 14);
	ДобавитьКодГС1(Коды, "02"  , "CONTENT"                   , 14);
	ДобавитьКодГС1(Коды, "10"  , "BATCH_LOT"                 ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "11"  , "PROD_DATE"                 ,  6);
	ДобавитьКодГС1(Коды, "12"  , "DUE_DATE"                  ,  6);
	ДобавитьКодГС1(Коды, "13"  , "PACK_DATE"                 ,  6);
	ДобавитьКодГС1(Коды, "15"  , "BEST_BEFORE"               ,  6);
	ДобавитьКодГС1(Коды, "16"  , "SELL_BY"                   ,  6);
	ДобавитьКодГС1(Коды, "17"  , "EXPIRE"                    ,  6);
	ДобавитьКодГС1(Коды, "20"  , "VARIANT"                   ,  2);
	ДобавитьКодГС1(Коды, "21"  , "SERIAL"                    ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "22"  , "CPV"                       ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "240" , "ADDITIONAL_ID"             ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "241" , "CUSTOMER_PART_NO"          ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "242" , "MTO_VARIANT"               ,   ,  6);
	ДобавитьКодГС1(Коды, "243" , "PCN"                       ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "250" , "SECONDARY_SERIAL"          ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "251" , "REF_TO_SOURCE"             ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "253" , "GDTI"                      , 13, 17,  ТипГС1Число(), ТипГС1Строка());
	ДобавитьКодГС1(Коды, "254" , "GLN_EXTENSION_COMPONENT"   ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "255" , "GСТ"                       , 13, 12);
	ДобавитьКодГС1(Коды, "30"  , "VAR_COUNT"                 ,   , 8);
	ДобавитьКодГС1(Коды, "310n", "NET_WEIGHT_kg"             ,  6);
	ДобавитьКодГС1(Коды, "311n", "LENGTH_m"                  ,  6);
	ДобавитьКодГС1(Коды, "312n", "WIDTH_m"                   ,  6);
	ДобавитьКодГС1(Коды, "313n", "HEIGHT_m"                  ,  6);
	ДобавитьКодГС1(Коды, "314n", "AREA_m2"                   ,  6);
	ДобавитьКодГС1(Коды, "315n", "NET_VOLUME_l"              ,  6);
	ДобавитьКодГС1(Коды, "316n", "NET_VOLUME_m3"             ,  6);
	ДобавитьКодГС1(Коды, "320n", "NET_WEIGHT_lb"             ,  6);
	ДобавитьКодГС1(Коды, "321n", "LENGTH_i"                  ,  6);
	ДобавитьКодГС1(Коды, "322n", "LENGTH_f"                  ,  6);
	ДобавитьКодГС1(Коды, "323n", "LENGTH_y"                  ,  6);
	ДобавитьКодГС1(Коды, "324n", "WIDTH_i"                   ,  6);
	ДобавитьКодГС1(Коды, "325n", "WIDTH_f"                   ,  6);
	ДобавитьКодГС1(Коды, "326n", "WIDTH_y"                   ,  6);
	ДобавитьКодГС1(Коды, "327n", "HEIGHT_i"                  ,  6);
	ДобавитьКодГС1(Коды, "328n", "HEIGHT_f"                  ,  6);
	ДобавитьКодГС1(Коды, "329n", "HEIGHT_y"                  ,  6);
	ДобавитьКодГС1(Коды, "330n", "GROSS_WEIGHT_kg"           ,  6);
	ДобавитьКодГС1(Коды, "331n", "LENGTH_m_log"              ,  6);
	ДобавитьКодГС1(Коды, "332n", "WIDTH_m_log"               ,  6);
	ДобавитьКодГС1(Коды, "333n", "HEIGHT_m_log"              ,  6);
	ДобавитьКодГС1(Коды, "334n", "AREA_m2_log"               ,  6);
	ДобавитьКодГС1(Коды, "335n", "VOLUME_l_log"              ,  6);
	ДобавитьКодГС1(Коды, "336n", "VOLUME_m3_log"             ,  6);
	ДобавитьКодГС1(Коды, "337n", "KG_PER_m2"                 ,  6);
	ДобавитьКодГС1(Коды, "340n", "GROSS_WEIGHT_lb"           ,  6);
	ДобавитьКодГС1(Коды, "341n", "LENGTH_i_log"              ,  6);
	ДобавитьКодГС1(Коды, "342n", "LENGTH_f_log"              ,  6);
	ДобавитьКодГС1(Коды, "343n", "LENGTH_y_log"              ,  6);
	ДобавитьКодГС1(Коды, "344n", "WIDTH_i_log"               ,  6);
	ДобавитьКодГС1(Коды, "345n", "WIDTH_f_log"               ,  6);
	ДобавитьКодГС1(Коды, "346n", "WIDTH_y_log"               ,  6);
	ДобавитьКодГС1(Коды, "347n", "HEIGHT_i_log"              ,  6);
	ДобавитьКодГС1(Коды, "348n", "HEIGHT_f_log"              ,  6);
	ДобавитьКодГС1(Коды, "349n", "HEIGHT_y_log"              ,  6);
	ДобавитьКодГС1(Коды, "350n", "AREA_i2"                   ,  6);
	ДобавитьКодГС1(Коды, "351n", "AREA_f2"                   ,  6);
	ДобавитьКодГС1(Коды, "352n", "AREA_y2"                   ,  6);
	ДобавитьКодГС1(Коды, "353n", "AREA_i2_log"               ,  6);
	ДобавитьКодГС1(Коды, "354n", "AREA_f2_log"               ,  6);
	ДобавитьКодГС1(Коды, "355n", "AREA_y2_log"               ,  6);
	ДобавитьКодГС1(Коды, "356n", "NET_WEIGHT_t"              ,  6);
	ДобавитьКодГС1(Коды, "357n", "NET_VOLUME_oz"             ,  6);
	ДобавитьКодГС1(Коды, "360n", "NET_VOLUME_q"              ,  6);
	ДобавитьКодГС1(Коды, "361n", "NET_VOLUME_g"              ,  6);
	ДобавитьКодГС1(Коды, "362n", "VOLUME_q"                  ,  6);
	ДобавитьКодГС1(Коды, "363n", "VOLUME_g"                  ,  6);
	ДобавитьКодГС1(Коды, "364n", "VOLUME_i3"                 ,  6);
	ДобавитьКодГС1(Коды, "365n", "VOLUME_f3"                 ,  6);
	ДобавитьКодГС1(Коды, "366n", "VOLUME_y3"                 ,  6);
	ДобавитьКодГС1(Коды, "367n", "VOLUME_i3_log"             ,  6);
	ДобавитьКодГС1(Коды, "368n", "VOLUME_f3_log"             ,  6);
	ДобавитьКодГС1(Коды, "369n", "VOLUME_y3_log"             ,  6);
	ДобавитьКодГС1(Коды, "37"  , "COUNT"                     ,   ,  8);
	ДобавитьКодГС1(Коды, "390n", "AMOUNT"                    ,   , 15);
	ДобавитьКодГС1(Коды, "391n", "AMOUNT_ISO"                ,  3, 15);
	ДобавитьКодГС1(Коды, "392n", "PRICE"                     ,   , 15);
	ДобавитьКодГС1(Коды, "393n", "PRICE_ISO"                 ,  3, 15);
	ДобавитьКодГС1(Коды, "394n", "PRCNT_OFF"                 ,  4,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "400" , "ORDER_NUMBER"              ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "401" , "GINC"                      ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "402" , "GSIN"                      , 17,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "403" , "ROUTE"                     ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "410" , "SHIP_TO_LOC"               , 13);
	ДобавитьКодГС1(Коды, "411" , "BILL_TO"                   , 13);
	ДобавитьКодГС1(Коды, "412" , "PURCHASE_FROM"             , 13);
	ДобавитьКодГС1(Коды, "413" , "SHIP_FOR_LOC"              , 13);
	ДобавитьКодГС1(Коды, "414" , "LOC_No"                    , 13);
	ДобавитьКодГС1(Коды, "415" , "PAY_TO"                    , 13);
	ДобавитьКодГС1(Коды, "416" , "PROD_SERV_LOC"             , 13);
	ДобавитьКодГС1(Коды, "420" , "SHIP_TO_POST"              ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "421" , "SHIP_TO_POST_ISO"          ,  3,  9,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "422" , "ORIGIN"                    ,  3,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "423" , "CONTRY_INITIAL_PROCESS"    ,  3, 12);
	ДобавитьКодГС1(Коды, "424" , "CONTRY_PROCESS"            ,  3,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "425" , "CONTRY_DISASSEMBLY"        ,  3, 12);
	ДобавитьКодГС1(Коды, "426" , "CONTRY_FULL_PROCESS"       ,  3,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "427" , "ORIGIN_SUBDIVISION"        ,   ,  3,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7001", "NSN"                       , 13,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "7002", "MEAT_CUT"                  ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7003", "EXPIRY_TIME"               , 10,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "7004", "ACTIVE_POTENCY"            ,   ,  4);
	ДобавитьКодГС1(Коды, "7005", "CATCH_AREA"                ,   , 12,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7006", "FIRST_FREEZE_DATE"         ,  6,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "7007", "HARVEST_DATE"              ,  6,  6);
	ДобавитьКодГС1(Коды, "7008", "AQUATIC_SPECIES"           ,   ,  3,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7009", "FISHING_GEAR_TYPE"         ,   , 10,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7010", "PROD_METHOD"               ,   ,  2,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7020", "REFURB_LOT"                ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7021", "FUNC_STAT"                 ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7022", "REV_STAT"                  ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "7023", "GIAI_ASSEMBLY"             ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "703s", "PROCESSOR_s"               ,  3, 27,  ТипГС1Число(), ТипГС1Строка());
	ДобавитьКодГС1(Коды, "710" , "NHRN_PZN"                  ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "711" , "NHRN_CIP"                  ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "712" , "NHRN_CN"                   ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "713" , "NHRN_DRN"                  ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8001", "DIMENSIONS"                , 14,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "8002", "CMT_No"                    ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8003", "GRAI"                      , 14, 16,  ТипГС1Число(), ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8004", "GIAI"                      ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8005", "PRICE_PER_UNIT"            ,  6,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "8006", "ITIP_or_GCTIN"             , 18,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "8007", "IBAN"                      ,   , 34,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8008", "PROD_TIME"                 ,  8, 4,               ,                , Истина);
	ДобавитьКодГС1(Коды, "8010", "CPID"                      ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8011", "CPID_SERIAL"               ,   , 12);
	ДобавитьКодГС1(Коды, "8012", "VERSION"                   ,   , 20,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8017", "GSRN_PROVIDER"             , 18,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "8018", "GSRN_RECIPIENT"            , 18,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "8019", "SRIN"                      ,   , 10);
	ДобавитьКодГС1(Коды, "8020", "REF_No"                    ,   , 25,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8110", "COUPON_CODE_ID"            ,   , 70,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8111", "POINTS"                    ,  4,   ,               ,               , Истина);
	ДобавитьКодГС1(Коды, "8112", "PAPPERLESS_COUPON_CODE_ID" ,   , 70,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "8200", "PRODUCT_URL"               ,   , 70,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "90"  , "INTERNAL"                  ,   , 30,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "91"  , "INTERNAL1"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "92"  , "INTERNAL2"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "93"  , "INTERNAL3"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "94"  , "INTERNAL4"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "95"  , "INTERNAL5"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "96"  , "INTERNAL6"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "97"  , "INTERNAL7"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "98"  , "INTERNAL8"                 ,   , 90,               , ТипГС1Строка());
	ДобавитьКодГС1(Коды, "99"  , "INTERNAL9"                 ,   , 90,               , ТипГС1Строка());
	
	Возврат Коды
	
КонецФункции

Процедура ДобавитьКодГС1(Коды, Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ТребуетсяРазделитель = Ложь)
	
	ВставляемыеКоды = Новый Массив;
	ПоследнийСимволКода = Прав(Код, 1);
	Если СтрНайти("0123456789", ПоследнийСимволКода) = 0 Тогда
		КодБезПоследнегоСимвола = Лев(Код, СтрДлина(Код) - 1);
		Если ПоследнийСимволКода = "n" Тогда
			Описание = ОписаниеКода(КодБезПоследнегоСимвола, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ТребуетсяРазделитель);
			Описание.ЕстьПоложениеДесятичнойТочки = Истина;
			Коды.Вставить(КодБезПоследнегоСимвола, Описание);
		Иначе
			Для Индекс = 0 По 9 Цикл
				НовыйКод = КодБезПоследнегоСимвола + Строка(Индекс);
				Коды.Вставить(НовыйКод, ОписаниеКода(НовыйКод, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ТребуетсяРазделитель));
			КонецЦикла;
		КонецЕсли;
	Иначе
		Коды.Вставить(Код, ОписаниеКода(Код, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ТребуетсяРазделитель));
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеКода(Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ТребуетсяРазделитель = Ложь);
	
	ОписаниеКода = Новый Структура;
	ОписаниеКода.Вставить("Код", Код);
	ОписаниеКода.Вставить("Имя", Имя);
	ОписаниеКода.Вставить("ФиксированнаяДлина", ФиксированнаяДлина);
	Если ФиксированнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипФиксированногоЗначения", ?(ТипФиксированногоЗначения = Неопределено, ТипГС1Число(), ТипФиксированногоЗначения));
	КонецЕсли;
	ОписаниеКода.Вставить("ПеременнаяДлина", ПеременнаяДлина);
	Если ПеременнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипПеременногоЗначения", ?(ТипПеременногоЗначения = Неопределено, ТипГС1Число(), ТипПеременногоЗначения));
	КонецЕсли;
	ОписаниеКода.Вставить("ТребуетсяРазделитель", ТребуетсяРазделитель Или ПеременнаяДлина > 0);
	ОписаниеКода.Вставить("ЕстьПоложениеДесятичнойТочки", Ложь);
	
	Возврат ОписаниеКода;
	
КонецФункции

Функция ТипГС1Число()
	Возврат "N";
КонецФункции

Функция ТипГС1Строка()
	Возврат "X";
КонецФункции

Процедура РазобратьСтрокуШтрихкодаГС1СРазделителями(Штрихкод, КодыГС1, РезультатРазбора)
	
	РезультатРазбора.ШтрихкодBase64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Штрихкод));
	
	ЧастиШтрихкода = СтрРазделить(Штрихкод, РазделительGS1(), Ложь);
	Для Каждого ЧастьБезРазделителей Из ЧастиШтрихкода Цикл
		РазобратьСтрокуШтрихкодаГС1БезРазделителей(ЧастьБезРазделителей, КодыГС1, РезультатРазбора);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьСтрокуШтрихкодаГС1БезРазделителей(Штрихкод, КодыГС1, РезультатРазбора);
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ПредставлениеШтрихкода = "";
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 2);
		ОписаниеКода = КодыГС1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 3);
			ОписаниеКода = КодыГС1[ИдентификаторПрименения];
			Если ОписаниеКода = Неопределено Тогда
				ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 4);
				ОписаниеКода = КодыГС1[ИдентификаторПрименения];
				Если ОписаниеКода = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неизвестный идентификатор применения(AI) %1.'"),
						ИдентификаторПрименения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			ПоложениеДесятичнойТочкиСтрокой = Сред(Штрихкод, НомерСимвола, 1);
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		ЗначениеФиксированное = ПолучитьФиксированнуюЧастьКода(Штрихкод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		ЗначениеПеременное = ПолучитьПеременнуюЧастьКода(Штрихкод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		
		ИсходноеЗначение = ЗначениеФиксированное + ЗначениеПеременное;
		
		Значение = ИсходноеЗначение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ИсходноеЗначение", ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ИсходноеЗначение);
		ОписаниеДанных.Вставить("ИдентификаторПрименения" , ОписаниеКода.Код);
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Добавить(ОписаниеДанных);
		
		ПредставлениеШтрихкода = ПредставлениеШтрихкода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + ИсходноеЗначение;
		
	КонецЦикла;
	
	РезультатРазбора.ПредставлениеШтрихкода = РезультатРазбора.ПредставлениеШтрихкода + ПредставлениеШтрихкода;
	
КонецПроцедуры

Функция ПолучитьФиксированнуюЧастьКода(Штрихкод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола)
	
	ЗначениеФиксированное = "";
	Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
		ЗначениеФиксированное = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
		Если СтрДлина(ЗначениеФиксированное) <> ОписаниеКода.ФиксированнаяДлина Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %5. Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)'"),
				ИдентификаторПрименения,
				ОписаниеКода.Имя,
				СтрДлина(ЗначениеФиксированное),
				ОписаниеКода.ФиксированнаяДлина,
				НомерСимвола);
		КонецЕсли;
		Если ОписаниеКода.ТипФиксированногоЗначения = ТипГС1Число() Тогда
			Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеФиксированное) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
					ИдентификаторПрименения,
					ОписаниеКода.Имя,
					СтрДлина(ЗначениеФиксированное),
					НомерСимвола);
			КонецЕсли;
		КонецЕсли;
		НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
	КонецЕсли;
	
	Возврат ЗначениеФиксированное
	
КонецФункции

Функция ПолучитьПеременнуюЧастьКода(Штрихкод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола)
	
	ЗначениеПеременное = "";
	Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
		
		ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, НомерСимвола);
		
		ДлинаШтрихкода = СтрДлина(Штрихкод);
		
		ПравильныйИдентификатор = Ложь;
		Пока ПозицияСледующегоИдентификатора > 0 И Не ПравильныйИдентификатор Цикл
			ПозицияЗакрывающегоИдентификатора = СтрНайти(Штрихкод, ")", , ПозицияСледующегоИдентификатора);
			ПредполагаемыйИдентификатор = Сред(Штрихкод, ПозицияСледующегоИдентификатора + 1,ПозицияЗакрывающегоИдентификатора - ПозицияСледующегоИдентификатора - 1);
			ПравильныйИдентификатор = СтрДлина(ПредполагаемыйИдентификатор) > 1 И СтрДлина(ПредполагаемыйИдентификатор) < 5 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредполагаемыйИдентификатор);
			Если ПозицияСледующегоИдентификатора >= ДлинаШтрихкода Тогда
				ПозицияСледующегоИдентификатора = 0
			ИначеЕсли Не ПравильныйИдентификатор Тогда
				ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, ПозицияСледующегоИдентификатора + 1);
			КонецЕсли;
		КонецЦикла;
		
		Если ПозицияСледующегоИдентификатора > 0 Тогда
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола, ПозицияСледующегоИдентификатора - НомерСимвола);
		Иначе
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
		КонецЕсли;
		
		Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %5. Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)'"),
				ИдентификаторПрименения,
				ОписаниеКода.Имя,
				СтрДлина(ЗначениеПеременное),
				ОписаниеКода.ПеременнаяДлина,
				НомерСимвола);
		КонецЕсли;
		Если ОписаниеКода.ТипПеременногоЗначения = ТипГС1Число() Тогда
			Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
					ИдентификаторПрименения,
					ОписаниеКода.Имя,
					СтрДлина(ЗначениеПеременное),
					НомерСимвола);
			КонецЕсли;
		КонецЕсли;
		НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
	КонецЕсли;
	
	Возврат ЗначениеПеременное;
	
КонецФункции

Функция ШтрихкодВЧеловекоЧитаемомВиде(Штрихкод)
	Возврат СтрНачинаетсяС(Штрихкод, "(");
КонецФункции

#КонецОбласти

Функция ПолучитьКлючУпаковки(НомерУпаковки) Экспорт
	
	Возврат Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(НомерУпаковки));
	
КонецФункции

Функция НеВыполнялисьПроверкаИПодбор(СтатусПроверкиИПодбора, СтатусМДЛП) Экспорт
	
	Если СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораМДЛП.НеВыполнялось") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатусПроверкиИПодбора)
	   И (СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.ПринятоИзМДЛП")
	   Или СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.Черновик")
	   Или СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.ЧастичноПринято")
	   Или СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.ЧастичноПередано")
	   Или СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.Отклонено")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыполняютсяПроверкаИПодбор(СтатусПроверкиИПодбора) Экспорт
	
	Возврат СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораМДЛП.Выполняется");
	
КонецФункции

Функция ЗавершеныПроверкаИПодбор(СтатусПроверкиИПодбора) Экспорт
	
	Возврат СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораМДЛП.Завершено");
	
КонецФункции

Функция ВозможноВозобновитьПроверкуИПодбор(СтатусПроверкиИПодбора, СтатусМДЛП) Экспорт
	
	Если Не ЗавершеныПроверкаИПодбор(СтатусПроверкиИПодбора) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.ПринятоИзМДЛП")
	 Или СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.Черновик") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВозможноСброситьПроверкуИПодбор(СтатусПроверкиИПодбора, СтатусМДЛП) Экспорт
	
	Если Не ЗавершеныПроверкаИПодбор(СтатусПроверкиИПодбора) И Не ВыполняютсяПроверкаИПодбор(СтатусПроверкиИПодбора) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.ПринятоИзМДЛП")
	 Или СтатусМДЛП = ПредопределенноеЗначение("Перечисление.СтатусыИнформированияМДЛП.Черновик") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область СтатусыКИЗ

// Возвращает список статусов КИЗ, как они описаны в системе МДЛП.
//
// Возвращаемое значение:
//  Список - СписокЗначений - список статусов КИЗ, состоящий из статуса и представления.
//
Функция СписокСтатусовКИЗвМДЛП() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("marked"                               , НСтр("ru = 'Ожидает выпуска'"));
	Список.Добавить("lp_sampled"                           , НСтр("ru = 'Отобран образец'"));
	Список.Добавить("moved_for_disposal"                   , НСтр("ru = 'Передан на уничтожение'"));
	Список.Добавить("disposed"                             , НСтр("ru = 'Уничтожен'"));
	Список.Добавить("out_of_circulation"                   , НСтр("ru = 'Выведен из оборота'"));
	Список.Добавить("transfered_to_owner"                  , НСтр("ru = 'Ожидает подтверждения получения собственником'"));
	Список.Добавить("shipped"                              , НСтр("ru = 'Отгружен в РФ'"));
	Список.Добавить("arrived"                              , НСтр("ru = 'Ввезен на территорию РФ'"));
	Список.Добавить("declared"                             , НСтр("ru = 'Задекларирован'"));
	Список.Добавить("in_circulation"                       , НСтр("ru = 'В обороте'"));
	Список.Добавить("in_realization"                       , НСтр("ru = 'Отгружен'"));
	Список.Добавить("paused_circulation"                   , НСтр("ru = 'Оборот приостановлен'"));
	Список.Добавить("in_sale"                              , НСтр("ru = 'Продан в розницу'"));
	Список.Добавить("in_discount_prescription_sale"        , НСтр("ru = 'Отпущен по льготному рецепту'"));
	Список.Добавить("in_medical_use"                       , НСтр("ru = 'Выдан для медицинского применения'"));
	Список.Добавить("relabeled"                            , НСтр("ru = 'Перемаркирован'"));
	Список.Добавить("reexported"                           , НСтр("ru = 'Реэкспорт'"));
	Список.Добавить("released_contract"                    , НСтр("ru = 'Ожидает передачи собственнику'"));
	Список.Добавить("released_foreign"                     , НСтр("ru = 'Ожидает отгрузки в РФ/Маркирован в ЗТК'"));
	Список.Добавить("moved_to_unregistered"                , НСтр("ru = 'Отгружен на незарегистрированное место деятельности'"));
	Список.Добавить("expired"                              , НСтр("ru = 'Срок годности истек'"));
	Список.Добавить("change_owner"                         , НСтр("ru = 'Ожидает подтверждения смены собственника'"));
	Список.Добавить("change_owner_state_gov"               , НСтр("ru = 'Ожидает подтверждения получения новым владельцем'"));
	Список.Добавить("confirm_return_paused"                , НСтр("ru = 'Ожидает подтверждения возврата приостановленных лекарственных препаратов'"));
	Список.Добавить("experiment_outbound"                  , НСтр("ru = 'Выведен из оборота (накопленный в рамках эксперимента)'"));
	Список.Добавить("in_partial_medical_use"               , НСтр("ru = 'Частично выдан для медицинского применения'"));
	Список.Добавить("in_partial_sale"                      , НСтр("ru = 'Частично продан в розницу'"));
	Список.Добавить("in_partial_discount_prescription_sale", НСтр("ru = 'Частично отпущен по льготному рецепту'"));
	Список.Добавить("moved_to_eeu"                         , НСтр("ru = 'Отгружен в ЕАЭС'"));
	Список.Добавить("moved_to_warehouse"                   , НСтр("ru = 'Принят на склад из ЗТК'"));
	Список.Добавить("emission"                             , НСтр("ru = 'Эмитирован'"));
	Список.Добавить("ofd_retail_error"                     , НСтр("ru = 'Продан в розницу с отклонением от требований в части выбытия ЛП'"));
	Список.Добавить("ofd_discount_prescription_error"      , НСтр("ru = 'Отпущен по льготному рецепту с использованием ККТ с ошибкой'"));
	Список.Добавить("transferred_for_release"              , НСтр("ru = 'Ожидает подтверждения получения собственником до ввода в оборот'"));
	Список.Добавить("waiting_for_release"                  , НСтр("ru = 'Ожидает ввода в оборот собственником'"));
	Список.Добавить("emitted"                              , НСтр("ru = 'Эмитирован'"));
	Список.Добавить("marked_not_paid"                      , НСтр("ru = 'Ожидает выпуска, не оплачен'"));
	Список.Добавить("released_foreign_not_paid"            , НСтр("ru = 'Ожидает отгрузки в РФ (не оплачен)/Маркирован в ЗТК (не оплачен)'"));
	Список.Добавить("expired_not_paid"                     , НСтр("ru = 'Истек срок ожидания оплаты'"));
	Список.Добавить("emitted_paid"                         , НСтр("ru = 'Эмитирован, готов к использованию'"));
	Список.Добавить("discount_prescription_error"          , НСтр("ru = 'Отпущен по льготному рецепту с отклонением от требований в части выбытия ЛП'"));
	Список.Добавить("med_care_error"                       , НСтр("ru = 'Отпущен для медицинского применения с отклонением от требований в части выбытия ЛП'"));
	Список.Добавить("declared_warehouse"                   , НСтр("ru = 'Принят на склад из ЗТК'"));
	Список.Добавить("transferred_to_customs"               , НСтр("ru = 'Передан для маркировки в ЗТК'"));
	Список.Добавить("transferred_to_importer"              , НСтр("ru = 'Ожидает подтверждения импортером'"));
	Список.Добавить("in_arbitration"                       , НСтр("ru = 'В арбитраже'"));
	Список.Добавить("waiting_confirmation"                 , НСтр("ru = 'Ожидает подтверждения'"));
	Список.Добавить("transfer_to_production"               , НСтр("ru = 'Ожидает подтверждения возврата'"));
	Список.Добавить("waiting_change_property"              , НСтр("ru = 'Ожидает подтверждения корректировки'"));
	Список.Добавить("eliminated"                           , НСтр("ru = 'Не использован'"));
	Список.Добавить("transferred_to_agent"                 , НСтр("ru = 'Отгружен по агентскому договору'"));
	Список.Добавить("awaiting_return_confirmation"         , НСтр("ru = 'Ожидает подтверждения возврата иностранного ЛП'"));
	Список.Добавить("dispensing_by_document"               , НСтр("ru = 'Выдан по документам'"));
	Список.Добавить("in_partial_dispensing_by_document"    , НСтр("ru = 'Частично выдан по документам'"));
	Список.Добавить("ooc_part_sale"                        , НСтр("ru = 'Частичная продажа, остаток списан'"));
	Список.Добавить("ooc_part_prescription_sale"           , НСтр("ru = 'Частичный отпуск по ЛР, остаток списан'"));
	Список.Добавить("ooc_рart_medical_use"                 , НСтр("ru = 'Частичное медицинское применение, остаток списан'"));
	Список.Добавить("ooc_part_dispensing_by_doc"           , НСтр("ru = 'Частично выдан по документам, остаток списан'"));
	Список.Добавить("in_partial_ooc"                       , НСтр("ru = 'Частично выведен из оборота'"));
	
	Возврат Список;
	
КонецФункции

// Возвращает соответствие внутренних статусов КИЗ, статусам КИЗ в ИС МДЛП.
//
// Возвращаемое значение:
//  Связь - Соответствие - соответствие внутренних статусов КИЗ, статусам КИЗ в ИС МДЛП.
//
Функция СоответствиеВнутреннихСтатусовКИЗСтатусамМДЛП() Экспорт
	
	Связь = Новый Соответствие;
	Связь.Вставить("marked"                               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетВыпуска"));
	Связь.Вставить("lp_sampled"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("moved_for_disposal"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПереданаНаУничтожение"));
	Связь.Вставить("disposed"                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Уничтожена"));
	Связь.Вставить("out_of_circulation"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("transfered_to_owner"                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("shipped"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОтгруженВРФ"));
	Связь.Вставить("arrived"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ"));
	Связь.Вставить("declared"                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Задекларирована"));
	Связь.Вставить("in_circulation"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("in_realization"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("paused_circulation"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОборотПриостановлен"));
	Связь.Вставить("in_sale"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_discount_prescription_sale"        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_medical_use"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("relabeled"                            , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Перемаркирована"));
	Связь.Вставить("reexported"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Реэкспорт"));
	Связь.Вставить("released_contract"                    , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетВыпуска"));
	Связь.Вставить("released_foreign"                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ"));
	Связь.Вставить("moved_to_unregistered"                , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("expired"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("change_owner"                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника"));
	Связь.Вставить("change_owner_state_gov"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("confirm_return_paused"                , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("experiment_outbound"                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_partial_medical_use"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("in_partial_sale"                      , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("in_partial_discount_prescription_sale", ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("moved_to_eeu"                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("moved_to_warehouse"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("emission"                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Эмитирована"));
	Связь.Вставить("ofd_retail_error"                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("ofd_discount_prescription_error"      , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("transferred_for_release"              , Неопределено);
	Связь.Вставить("waiting_for_release"                  , Неопределено);
	Связь.Вставить("emitted"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Эмитирована"));
	Связь.Вставить("marked_not_paid"                      , Неопределено);
	Связь.Вставить("released_foreign_not_paid"            , Неопределено);
	Связь.Вставить("expired_not_paid"                     , Неопределено);
	Связь.Вставить("emitted_paid"                         , Неопределено);
	Связь.Вставить("discount_prescription_error"          , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("med_care_error"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("declared_warehouse"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК"));
	Связь.Вставить("transferred_to_customs"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПереданаДляМаркировкиВЗТК"));
	Связь.Вставить("transferred_to_importer"              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером"));
	Связь.Вставить("in_arbitration"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("waiting_confirmation"                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("transfer_to_production"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("waiting_change_property"              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("eliminated"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.НеИспользована"));
	Связь.Вставить("transferred_to_agent"                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("awaiting_return_confirmation"         , Неопределено);
	Связь.Вставить("dispensing_by_document"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_partial_dispensing_by_document"    , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("ooc_part_sale"                        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("ooc_part_prescription_sale"           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("ooc_рart_medical_use"                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("ooc_part_dispensing_by_doc"           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_partial_ooc"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	
	Возврат Связь;
	
КонецФункции

// Возвращает соответствие внутренних статусов КИЗ по представлениям статусов КИЗ в ИС МДЛП.
//
// Возвращаемое значение:
//  Связь - Соответствие - соответствие внутренних статусов КИЗ по представлениям статусов КИЗ в ИС МДЛП.
//
Функция СоответствиеВнутреннихСтатусовКИЗПредставлениямСтатусовМДЛП() Экспорт
	
	Связь = Новый Соответствие;
	Связь.Вставить("Ожидает выпуска"                                                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетВыпуска"));
	Связь.Вставить("Отобран образец"                                                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Передан на уничтожение"                                                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПереданаНаУничтожение"));
	Связь.Вставить("Уничтожен"                                                               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Уничтожена"));
	Связь.Вставить("Выведен из оборота"                                                      , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Ожидает подтверждения получения собственником"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("Отгружен в РФ"                                                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОтгруженВРФ"));
	Связь.Вставить("Ввезен на территорию РФ"                                                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ"));
	Связь.Вставить("Задекларирован"                                                          , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Задекларирована"));
	Связь.Вставить("В обороте"                                                               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Отгружен"                                                                , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("Оборот приостановлен"                                                    , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОборотПриостановлен"));
	Связь.Вставить("Продан в розницу"                                                        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Отпущен по льготному рецепту"                                            , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Выдан для медицинского применения"                                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Перемаркирован"                                                          , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Перемаркирована"));
	Связь.Вставить("Реэкспорт"                                                               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Реэкспорт"));
	Связь.Вставить("Ожидает передачи собственнику"                                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетВыпуска"));
	Связь.Вставить("Ожидает отгрузки в РФ/Маркирован в ЗТК"                                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ"));
	Связь.Вставить("Отгружен на незарегистрированное место деятельности"                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Срок годности истек"                                                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Ожидает подтверждения смены собственника"                                , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника"));
	Связь.Вставить("Ожидает подтверждения получения новым владельцем"                        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("Ожидает подтверждения возврата приостановленных лекарственных препаратов", ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Связь.Вставить("Выведен из оборота (накопленный в рамках эксперимента)"                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частично выдан для медицинского применения"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Частично продан в розницу"                                               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Частично отпущен по льготному рецепту"                                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Отгружен в ЕАЭС"                                                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Принят на склад из ЗТК"                                                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Эмитирован"                                                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Эмитирована"));
	Связь.Вставить("Продан в розницу с отклонением от требований в части выбытия ЛП"         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("Отпущен по льготному рецепту с использованием ККТ с ошибкой"             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("Ожидает подтверждения получения собственником до ввода в оборот"         , Неопределено);
	Связь.Вставить("Ожидает ввода в оборот собственником"                                    , Неопределено);
	Связь.Вставить("Эмитирован"                                                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Эмитирована"));
	Связь.Вставить("Ожидает выпуска, не оплачен"                                             , Неопределено);
	Связь.Вставить("Ожидает отгрузки в РФ (не оплачен)/Маркирован в ЗТК (не оплачен)"        , Неопределено);
	Связь.Вставить("Истек срок ожидания оплаты"                                              , Неопределено);
	Связь.Вставить("Эмитирован, готов к использованию"                                       , Неопределено);
	Связь.Вставить("Отпущен по льготному рецепту с отклонением от требований в части выбытия ЛП", ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("Отпущен для медицинского применения с отклонением от требований в части выбытия ЛП", ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("Принят на склад из ЗТК"                                                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК"));
	Связь.Вставить("Передан для маркировки в ЗТК"                                            , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПереданаДляМаркировкиВЗТК"));
	Связь.Вставить("Ожидает подтверждения импортером"                                        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером"));
	Связь.Вставить("В арбитраже"                                                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Ожидает подтверждения"                                                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Ожидает подтверждения возврата"                                          , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Ожидает подтверждения корректировки"                                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Не использован"                                                          , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.НеИспользована"));
	Связь.Вставить("Отгружен по агентскому договору"                                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("Ожидает подтверждения возврата иностранного ЛП"                          , Неопределено);
	Связь.Вставить("Выдан по документам"                                                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частично выдан по документам"                                            , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частичная продажа, остаток списан"                                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частичный отпуск по ЛР, остаток списан"                                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частичное медицинское применение, остаток списан"                        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частично выдан по документам, остаток списан"                            , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("Частично выведен из оборота"                                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	
	Возврат Связь;
	
КонецФункции

// Возвращает статусы, при которых КИЗ считается выведенным из оборота.
//
// Возвращаемое значение:
//  Статусы - Массив
//
Функция СтатусыУпаковокВыведенаИзОборота() Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Уничтожена"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Реэкспорт"));
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы, при которых КИЗ считается в резерве.
//
// Возвращаемое значение:
//  Статусы - Массив
//
Функция СтатусыУпаковокВРезерве() Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.КПоступлению"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОтгруженВРФ"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером"));
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника"));
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировки

// Возвращает имя раздела Производство.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделПроизводство() Экспорт
	Возврат "ГруппаПроизводство";
КонецФункции

// Возвращает имя раздела Закупки.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделЗакупки() Экспорт
	Возврат "ГруппаЗакупки";
КонецФункции

// Возвращает имя раздела Склад.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделСклад() Экспорт
	Возврат "ГруппаСклад";
КонецФункции

// Возвращает имя раздела Продажи.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделПродажи() Экспорт
	Возврат "ГруппаПродажи";
КонецФункции

// Возвращает имя раздела Инвентаризация.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделИнвентаризация() Экспорт
	Возврат "ГруппаИнвентаризация";
КонецФункции

// Возвращает имя раздела Импорт/Экспорт.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделИмпортЭкспорт() Экспорт
	Возврат "ГруппаИмпортЭкспорт";
КонецФункции

// Возвращает имя раздела Импорт.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделИмпорт() Экспорт
	Возврат "ГруппаИмпорт";
КонецФункции

// Возвращает имя раздела Устаревшие.
// 
// Возвращаемое значение:
//  Строка - имя раздела
//
Функция ПанельМаркировкаРазделУстаревшие() Экспорт
	Возврат "ГруппаУстаревшие";
КонецФункции

#КонецОбласти

#Область РаботаС_ККТ

////////////////////////////////////////////////////////////////////////////////
// ФФД 1.2
#Область ФФД_1_2

// Структура данных для заполнения параметра ЗначениеОтраслевогоРеквизита (тег 1265).
//
// Возвращаемое значение:
//  ОписаниеДанных - Структура - данные для формирования значения
//                   параметра фискализации ЗначениеОтраслевогоРеквизита (тег 1265).
//    * ПроцентЛьготы                      - Число - процент льготы.
//    * СуммаЛьготы                        - Число - сумма льготы.
//    * НомерСерииЛьготногоРецепта         - Строка - номер серии льготного рецепта.
//    * НомерЛьготногоРецепта              - Строка - номер льготного рецепта.
//    * ДатаРегистрацииЛьготногоРецепта    - Дата - дата регистрации льготного рецепта.
//    * НомерСерииРецепта                  - Строка - номер серии рецепта, используется при ПроцентЛьготы = 0.
//    * НомерРецепта                       - Строка - номер рецепта, используется при ПроцентЛьготы = 0.
//    * ДатаРегистрацииРецепта             - Дата - дата регистрации рецепта, используется при ПроцентЛьготы = 0.
//    * ИдентификаторМестаДеятельностиМДЛП - Строка - идентификатор места деятельности субъекта обращения в ИС МДЛП.
//
Функция ОписаниеДанныхПараметраЗначениеОтраслевогоРеквизитаМДЛП() Экспорт
	
	ОписаниеДанных = Новый Структура;
	
	ОписаниеДанных.Вставить("ПроцентЛьготы"                     , 0);
	ОписаниеДанных.Вставить("СуммаЛьготы"                       , 0);
	ОписаниеДанных.Вставить("НомерСерииЛьготногоРецепта"        , "");
	ОписаниеДанных.Вставить("НомерЛьготногоРецепта"             , "");
	ОписаниеДанных.Вставить("ДатаРегистрацииЛьготногоРецепта"   , Дата(1,1,1));
	
	ОписаниеДанных.Вставить("НомерСерииРецепта"                 , "");
	ОписаниеДанных.Вставить("НомерРецепта"                      , "");
	ОписаниеДанных.Вставить("ДатаРегистрацииРецепта"            , Дата(1,1,1));
	
	ОписаниеДанных.Вставить("ИдентификаторМестаДеятельностиМДЛП", "");
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Формирует значение тега 1265 (ЗначениеРеквизита) параметров фискализации для целей МДЛП.
//
// Параметры:
//  Параметры - Структура - заполненная структура ОписаниеДанныхПараметраЗначениеОтраслевогоРеквизитаМДЛП.
//
// Возвращаемое значение:
//  ЗначениеОтраслевогоРеквизита - Строка - значение, для заполнения параметра ЗначениеРеквизита (тег 1265)
//                                 тега 1260 (ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОтраслевойРеквизит).
//
//Пример 1:
//
//  ПроцентЛьготы                      = 0;
//  СуммаЛьготы                        = 0;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '00010101';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1265: "tm=mdlp&sid=71752852194630&"
//
//Пример 2:
//Данные по льготным рецептам имеют больший приоритет, чем по обычным.
//Теги обычного рецепта при наличии льготного - не передаются.
//
//  ПроцентЛьготы                      = 50;
//  СуммаЛьготы                        = 123.00;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '20191124';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1265: "tm=mdlp&ps=45102&dn=АБV492&&781&dd=191023&sid=71752852194630&ss=12300&";
//
//Пример 3:
//Данные по льготным рецептам имеют больший приоритет, чем по обычным.
//Теги обычного рецепта при наличии льготного - не передаются.
//
//  ПроцентЛьготы                      = 100;
//  СуммаЛьготы                        = 0;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '20191124';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1265: "tm=mdlp&tr=3108805&ps=45102&dn=АБV492&&781&dd=191023&sid=71752852194630&";
//
//Пример 4:
//
//  ПроцентЛьготы                      = 0;
//  СуммаЛьготы                        = 0;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '20191124';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1265: "tm=mdlp&ps=54345&dn=RCP157&&222&dd=191124&sid=71752852194630&";
//
Функция СформироватьПараметрЗначениеОтраслевогоРеквизитаМДЛП(Параметры) Экспорт
	
	ИмяРеквизита_Префикс                            = "tm";
	Префикс                                         = "mdlp";
	// Льготный рецепт
	ИмяРеквизита_СуммаЛьготы                        = "ss";
	ФорматЗначения_СуммаЛьготы                      = "ЧС=-2; ЧГ=0";
	ИмяРеквизита_ПризнакПолнойЛьготы                = "tr";
	ПризнакПолнойЛьготы                             = "3108805"; // Код ОКУД формы льготного рецепта, как признак льготного рецепта со 100% дотированием.
	ИмяРеквизита_НомерСерииЛьготногоРецепта         = "ps";
	ИмяРеквизита_НомерЛьготногоРецепта              = "dn";
	ИмяРеквизита_ДатаРегистрацииЛьготногоРецепта    = "dd";
	ФорматЗначения_ДатаРегистрацииЛьготногоРецепта  = "ДФ=yyMMdd";
	// Обычный рецепт
	ИмяРеквизита_НомерСерииРецепта                  = "ps";
	ИмяРеквизита_НомерРецепта                       = "dn";
	ИмяРеквизита_ДатаРегистрацииРецепта             = "dd";
	ФорматЗначения_ДатаРегистрацииРецепта           = "ДФ=yyMMdd";
	
	ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП = "sid";
	ДлинаИдентификатораСубъектаОбращенияМДЛП        = 14;
	Разделитель                                     = "&";
	
	ТекстОшибки = НСтр("ru = 'Ошибка при заполнении параметров пробития чека:'");
	
	СоставЗначенияОтраслевогоРеквизита = Новый Массив;
	СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_Префикс, Префикс));
	
	// Признак 100% льготы
	Если Параметры.ПроцентЛьготы = 100 Тогда
		СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_ПризнакПолнойЛьготы, ПризнакПолнойЛьготы));
	КонецЕсли;
	
	// Параметры льготного рецепта
	Если Параметры.ПроцентЛьготы > 0 Тогда
		СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_НомерСерииЛьготногоРецепта, СтрЗаменить(Параметры.НомерСерииЛьготногоРецепта, Разделитель, Разделитель + Разделитель)));
		СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_НомерЛьготногоРецепта, СтрЗаменить(Параметры.НомерЛьготногоРецепта, Разделитель, Разделитель + Разделитель)));
		СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_ДатаРегистрацииЛьготногоРецепта, Формат(Параметры.ДатаРегистрацииЛьготногоРецепта, ФорматЗначения_ДатаРегистрацииЛьготногоРецепта)));
	ИначеЕсли ЗначениеЗаполнено(Параметры.ДатаРегистрацииРецепта) Тогда
		СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_ДатаРегистрацииРецепта, Формат(Параметры.ДатаРегистрацииРецепта, ФорматЗначения_ДатаРегистрацииРецепта)));
		
		Если ЗначениеЗаполнено(Параметры.НомерСерииРецепта) И ЗначениеЗаполнено(Параметры.НомерРецепта) Тогда
			СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_НомерСерииРецепта, СтрЗаменить(Параметры.НомерСерииРецепта, Разделитель, Разделитель + Разделитель)));
			СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_НомерРецепта, СтрЗаменить(Параметры.НомерРецепта, Разделитель, Разделитель + Разделитель)));
		КонецЕсли;
		
	КонецЕсли;
	
	// Место деятельности
	Если Не ЗначениеЗаполнено(Параметры.ИдентификаторМестаДеятельностиМДЛП) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Недопустимое значение реквизита ""%Идентификатор%"" <идентификатор места деятельности субъекта обращения в ИС МДЛП> тега 1265'"), "%Идентификатор%", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП);
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Идентификатор места деятельности субъекта обращения в ИС МДЛП не заполнен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если СтрДлина(Параметры.ИдентификаторМестаДеятельностиМДЛП) <> ДлинаИдентификатораСубъектаОбращенияМДЛП Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Недопустимое значение реквизита ""%Идентификатор%"" <идентификатор места деятельности субъекта обращения в ИС МДЛП> тега 1265'"), "%Идентификатор%", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП);
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Недопустимая длина идентификатора места деятельности субъекта обращения в ИС МДЛП.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Идентификатор должен состоять из %ДлинаИдентификатора% символов.'"), "%ДлинаИдентификатора%", ДлинаИдентификатораСубъектаОбращенияМДЛП);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ОписаниеЧислаИдентификатор = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ДлинаИдентификатораСубъектаОбращенияМДЛП, 0, ДопустимыйЗнак.Неотрицательный));
	Если Не ЗначениеЗаполнено(ОписаниеЧислаИдентификатор.ПривестиЗначение(Параметры.ИдентификаторМестаДеятельностиМДЛП)) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Недопустимое значение реквизита ""%Идентификатор%"" <идентификатор места деятельности субъекта обращения в ИС МДЛП> тега 1265'"), "%Идентификатор%", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП);
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Идентификатор места деятельности субъекта обращения в ИС МДЛП должен состоять только из цифр.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП, Параметры.ИдентификаторМестаДеятельностиМДЛП));
	
	// Заполнение реквизита ss <сумма субсидий>.
	// Значение реквизита ss - строка, в которой допустимы только символы [0..9],
	// которая интерпритируется как десятичное число с фиксированной точностью 2 знака после десятичного разделителя целой и дробной части.
	// Заполняется только для частичного дотирования.
	Если Параметры.ПроцентЛьготы > 0 И Параметры.ПроцентЛьготы < 100 Тогда
		Если ЗначениеЗаполнено(Параметры.СуммаЛьготы) Тогда
			СоставЗначенияОтраслевогоРеквизита.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_СуммаЛьготы, Формат(Окр(Параметры.СуммаЛьготы, 2), ФорматЗначения_СуммаЛьготы)));
		Иначе
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Недопустимое значение реквизита ""ss"" <сумма субсидий> тега 1265.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Не заполнена сумма льготы, при использовании частичной льготы.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Соединение частей значения отраслевого реквизита
	ЗначениеОтраслевогоРеквизита = СтрСоединить(СоставЗначенияОтраслевогоРеквизита, Разделитель);
	
	// Завершающий символ
	ЗначениеОтраслевогоРеквизита = ЗначениеОтраслевогоРеквизита + Разделитель;
	
	Возврат ЗначениеОтраслевогоРеквизита;
	
КонецФункции

// Формирует значение тега 1260 (ПараметрыОтраслевойРеквизит) параметров фискализации для целей МДЛП.
//
// Параметры:
//  ЗначениеОтраслевогоРеквизита - Строка - результат выполнения функции СформироватьПараметрЗначениеОтраслевогоРеквизитаМДЛП.
//
// Возвращаемое значение:
//  ОтраслевойРеквизит - Структура - данные для формирования значения
//                       параметра фискализации (тег 1260)
//                       (см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОтраслевойРеквизит).
//
Функция СформироватьПараметрОтраслевойРеквизитМДЛП(Знач ЗначениеОтраслевогоРеквизита) Экспорт
	
	#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#Иначе
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#КонецЕсли
	
	ОтраслевойРеквизит = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОтраслевойРеквизит();
	
	// Фиксированные значения (см. документацию ИС МДЛП).
	ИдентификаторФОИВ_МинздравРФ                                = "020";
	ДатаНормативногоАктаФедеральногоОрганаИсполнительнойВласти  = Дата("2018", "12", "14");
	НомерНормативногоАктаФедеральногоОрганаИсполнительнойВласти = "1556";
	
	ОтраслевойРеквизит.ИдентификаторФОИВ       = ИдентификаторФОИВ_МинздравРФ;
	ОтраслевойРеквизит.ДатаДокументаОснования  = ДатаНормативногоАктаФедеральногоОрганаИсполнительнойВласти;
	ОтраслевойРеквизит.НомерДокументаОснования = НомерНормативногоАктаФедеральногоОрганаИсполнительнойВласти;
	ОтраслевойРеквизит.ЗначениеРеквизита       = ЗначениеОтраслевогоРеквизита;
	
	Возврат ОтраслевойРеквизит;
	
КонецФункции

// Структура данных для заполнения параметра ДробноеКоличество (тег 1291).
//
// Возвращаемое значение:
//  ОписаниеДанных - Структура - данные для формирования значения
//                   параметра фискализации ДробноеКоличество (тег 1291).
//    * КоличествоОтпущенныхПервичныхУпаковок           - Число - (необязательный) значение реквизита "числитель" (тег 1293).
//    * КоличествоПервичныхУпаковокВМаркируемойУпаковке - Число - (необязательный) значение реквизита "знаменатель" (тег 1294).
//
Функция ОписаниеДанныхПараметраДробноеКоличествоТовараМДЛП() Экспорт
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("КоличествоОтпущенныхПервичныхУпаковок"          , 0);
	ОписаниеДанных.Вставить("КоличествоПервичныхУпаковокВМаркируемойУпаковке", 0);
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Формирует значение тега 1291 (ДробноеКоличество) параметров фискализации для целей МДЛП.
//
// Параметры:
//  Параметры - Структура - заполненная структура ОписаниеДанныхПараметраДробноеКоличествоТовараМДЛП.
//
// Возвращаемое значение:
//  ДробноеКоличество - Структура - данные для формирования значения
//                       параметра фискализации (тег 1291)
//                       (см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДробноеКоличество).
//
Функция СформироватьПараметрыДробногоКоличестваТовараМДЛП(Параметры) Экспорт
	
	#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#Иначе
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#КонецЕсли
	
	ДробноеКоличество = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДробноеКоличество();
	
	Числитель   = Параметры.КоличествоОтпущенныхПервичныхУпаковок;
	Знаменатель = Параметры.КоличествоПервичныхУпаковокВМаркируемойУпаковке;
	
	ЧислительЗаполнен   = ЗначениеЗаполнено(Числитель);
	ЗнаменательЗаполнен = ЗначениеЗаполнено(Знаменатель);
	
	ТекстОшибки = НСтр("ru = 'Ошибка при заполнении параметров пробития чека:'");
	
	Если Не ЧислительЗаполнен И ЗнаменательЗаполнен
	 Или ЧислительЗаполнен И Не ЗнаменательЗаполнен
	 Или Цел(Числитель) <> Числитель Или Цел(Знаменатель) <> Знаменатель Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Недопустимое значение тега 1291 <дробное количество маркированного товара>.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Количество отпущенных первичных упаковок или количество первичных упаковок в маркируемой упаковке не заполнено или заполнено некорректно'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДробноеКоличество.Числитель   = Числитель;
	ДробноеКоличество.Знаменатель = Знаменатель;
	
	Возврат ДробноеКоличество;
	
КонецФункции

#КонецОбласти // ФФД_1_2

////////////////////////////////////////////////////////////////////////////////
// ФФД 1.1 и ФФД 1.0.5
#Область ФФД_1_1_ФФД_1_0_5

// Структура данных для заполнения параметра ДополнительныйРеквизит (тег 1191).
//
// Возвращаемое значение:
//  ОписаниеДанных - Структура - данные для формирования значения
//                   параметра фискализации ДополнительныйРеквизит (тег 1191).
//    * КоличествоОтпущенныхПервичныхУпаковок           - Число - (необязательный) числитель реквизита sp <часть потребительской (маркорованной) упаковки, подлежащая выводу из оборота>.
//                                                        Если реквизит sp не заполнен, упаковка считается выведенной из оборота полностью.
//    * КоличествоПервичныхУпаковокВМаркируемойУпаковке - Число - (необязательный) знаменатель реквизита sp <часть потребительской (маркорованной) упаковки, подлежащая выводу из оборота>.
//                                                        Если реквизит sp не заполнен, упаковка считается выведенной из оборота полностью.
//    * ПроцентЛьготы                                   - Число - процент льготы.
//    * СуммаЛьготы                                     - Число - реквизит ss <сумма субсидий>.
//
Функция ОписаниеДанныхПараметраДополнительныйРеквизитПредметаРасчетаМДЛП() Экспорт
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("КоличествоОтпущенныхПервичныхУпаковок"          , 0); // Числитель реквизита sp <часть потребительской (маркорованной) упаковки, подлежащая выводу из оборота>.
	ОписаниеДанных.Вставить("КоличествоПервичныхУпаковокВМаркируемойУпаковке", 0); // Знаменатель реквизита sp <часть потребительской (маркорованной) упаковки, подлежащая выводу из оборота>.
	ОписаниеДанных.Вставить("ПроцентЛьготы"                                  , 0); // Процент льготы.
	ОписаниеДанных.Вставить("СуммаЛьготы"                                    , 0); // Реквизит ss <сумма субсидий>. Заполняется только для частичной льготы.
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Формирует значение тега 1191 (ДополнительныйРеквизит) параметров фискализации предмета расчета для целей МДЛП.
//
// Параметры:
//  Параметры - Структура - заполненная структура ОписаниеДанныхПараметраДополнительныйРеквизитПредметаРасчетаМДЛП.
//
// Возвращаемое значение:
//  Результат - Строка - значение тега 1191 (ДополнительныйРеквизит) параметров фискализации предмета расчета для целей МДЛП.
//
// Пример:
//
//  При продаже 2 блистеров из маркируемой упаковки, состоящей из 12 блистеров, при субсидии 123,00 р.:
//    "mdlp2/12&12300&"
//
//  При продаже 2 блистеров из маркируемой упаковки, состоящей из 12 блистеров, без субсидии:
//    "mdlp2/12&"
//
//  При продаже целой упаковки, при субсидии 123,00 р.:
//    "mdlp&12300&"
//
//  При продаже целой упаковки, без субсидий:
//    "mdlp"
//
Функция СформироватьПараметрДополнительныйРеквизитПредметаРасчетаМДЛП(Параметры) Экспорт
	
	Префикс     = "mdlp";
	Разделитель = "&";
	
	ТекстОшибки = НСтр("ru = 'Ошибка при заполнении параметров пробития чека:'");
	
	Результат = Префикс;
	
	// Заполнение реквизита sp <часть потребительской (маркорованной) упаковки, подлежащая выводу из оборота>.
	// Если реквизит sp не заполнен, упаковка считается выведенной из оборота полностью.
	Числитель   = Параметры.КоличествоОтпущенныхПервичныхУпаковок;
	Знаменатель = Параметры.КоличествоПервичныхУпаковокВМаркируемойУпаковке;
	
	ЧислительЗаполнен   = ЗначениеЗаполнено(Числитель);
	ЗнаменательЗаполнен = ЗначениеЗаполнено(Знаменатель);
	
	Если Не ЧислительЗаполнен И ЗнаменательЗаполнен
	 Или ЧислительЗаполнен И Не ЗнаменательЗаполнен
	 Или Цел(Числитель) <> Числитель Или Цел(Знаменатель) <> Знаменатель Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Недопустимое значение реквизита ""sp"" <часть потребительской (маркированной) упаковки, подлежащая выводу из оборота> тега 1191.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Количество отпущенных первичных упаковок или количество первичных упаковок в маркируемой упаковке не заполнено.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ЧислительЗаполнен И ЗнаменательЗаполнен Тогда
		Результат = Результат + СтрШаблон("%1/%2", Формат(Числитель, "ЧГ=0"), Формат(Знаменатель, "ЧГ=0"));
	КонецЕсли;
	
	// Заполнение реквизита ss <сумма субсидий>.
	// Значение реквизита ss - строка, в которой допустимы только символы [0..9],
	// которая интерпритируется как десятичное число с фиксированной точностью 2 знака после десятичного разделителя целой и дробной части.
	Если Параметры.ПроцентЛьготы > 0 И Параметры.ПроцентЛьготы < 100 Тогда
		Если ЗначениеЗаполнено(Параметры.СуммаЛьготы) Тогда
			Результат = Результат + Разделитель + Формат(Окр(Параметры.СуммаЛьготы, 2), "ЧС=-2; ЧГ=0");
		Иначе
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Недопустимое значение реквизита ""ss"" <сумма субсидий> тега 1191.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Не заполнена сумма льготы, при использовании частичной льготы.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Завершающий символ
	Результат = Результат + ?(Результат <> Префикс, Разделитель, "");
	
	Возврат Результат;
	
КонецФункции

// Структура данных для заполнения параметра ДополнительныйРеквизитПользователя (тег 1084).
//
// Возвращаемое значение:
//  ОписаниеДанных - Структура - данные для формирования значения
//                   параметра фискализации ДополнительныйРеквизитПользователя (тег 1084).
//    * ПроцентЛьготы                      - Число - процент льготы.
//    * НомерСерииЛьготногоРецепта         - Строка - номер серии льготного рецепта.
//    * НомерЛьготногоРецепта              - Строка - номер льготного рецепта.
//    * ДатаРегистрацииЛьготногоРецепта    - Дата - дата регистрации льготного рецепта.
//    * НомерСерииРецепта                  - Строка - номер серии рецепта, используется при ПроцентЛьготы = 0.
//    * НомерРецепта                       - Строка - номер рецепта, используется при ПроцентЛьготы = 0.
//    * ДатаРегистрацииРецепта             - Дата - дата регистрации рецепта, используется при ПроцентЛьготы = 0.
//    * ИдентификаторМестаДеятельностиМДЛП - Строка - идентификатор места деятельности субъекта обращения в ИС МДЛП.
//
Функция ОписаниеДанныхПараметраДополнительныйРеквизитПользователяМДЛП() Экспорт
	
	ОписаниеДанных = Новый Структура;
	
	ОписаниеДанных.Вставить("ПроцентЛьготы"                     , 0);
	ОписаниеДанных.Вставить("НомерСерииЛьготногоРецепта"        , "");
	ОписаниеДанных.Вставить("НомерЛьготногоРецепта"             , "");
	ОписаниеДанных.Вставить("ДатаРегистрацииЛьготногоРецепта"   , Дата(1,1,1));
	
	ОписаниеДанных.Вставить("НомерСерииРецепта"                 , "");
	ОписаниеДанных.Вставить("НомерРецепта"                      , "");
	ОписаниеДанных.Вставить("ДатаРегистрацииРецепта"            , Дата(1,1,1));
	
	ОписаниеДанных.Вставить("ИдентификаторМестаДеятельностиМДЛП", "");
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Формирует значение тега 1084 (ДополнительныйРеквизитПользователя) параметров фискализации для целей МДЛП.
//
// Параметры:
//  Параметры - Структура - заполненная структура ОписаниеДанныхПараметраДополнительныйРеквизитПользователяМДЛП.
//
// Возвращаемое значение:
//  ДополнительныйРеквизитПользователя - Структура - заполненная структура ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДополнительногоРеквизитаПользователя()
//
//Пример 1:
//
//  ПроцентЛьготы                      = 0;
//  СуммаЛьготы                        = 0;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '00010101';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1085: "mdlp"
//  Тег 1086: "sid71752852194630&"
//
//Пример 2:
//Данные по льготным рецептам имеют больший приоритет, чем по обычным.
//Теги обычного рецепта при наличии льготного - не передаются.
//
//  ПроцентЛьготы                      = 50;
//  СуммаЛьготы                        = 123.00;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '20191124';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1085: "mdlp"
//  Тег 1086: "ps45102&dnАБV492&&781&dd191023&sid71752852194630&"
//
//Пример 3:
//Данные по льготным рецептам имеют больший приоритет, чем по обычным.
//Теги обычного рецепта при наличии льготного - не передаются.
//
//  ПроцентЛьготы                      = 100;
//  СуммаЛьготы                        = 0;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '20191124';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1085: "mdlp3108805"
//  Тег 1086: "ps45102&dnАБV492&&781&dd191023&sid71752852194630&"
//
//Пример 4:
//
//  ПроцентЛьготы                      = 0;
//  СуммаЛьготы                        = 0;
//  НомерСерииЛьготногоРецепта         = "45102";
//  НомерЛьготногоРецепта              = "АБV492&781";
//  ДатаРегистрацииЛьготногоРецепта    = '20191023';
//  НомерСерииРецепта                  = "54345";
//  НомерРецепта                       = "RCP157&222";
//  ДатаРегистрацииРецепта             = '20191124';
//  ИдентификаторМестаДеятельностиМДЛП = "71752852194630";
//
//  Тег 1085: "mdlp"
//  Тег 1086: "ps54345&dnRCP157&&222&dd191124&sid71752852194630&"
//
Функция СформироватьПараметрДополнительныйРеквизитПользователяМДЛП(Параметры) Экспорт
	
	#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#Иначе
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#КонецЕсли
	
	ДополнительныйРеквизитПользователя = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДополнительногоРеквизитаПользователя();
	
	Префикс                                         = "mdlp";
	// Льготный рецепт
	ПризнакПолнойЛьготы                             = "3108805"; // Код ОКУД формы льготного рецепта, как признак льготного рецепта со 100% дотированием.
	ИмяРеквизита_НомерСерииЛьготногоРецепта         = "ps";
	ИмяРеквизита_НомерЛьготногоРецепта              = "dn";
	ИмяРеквизита_ДатаРегистрацииЛьготногоРецепта    = "dd";
	ФорматЗначения_ДатаРегистрацииЛьготногоРецепта  = "ДФ=yyMMdd";
	// Обычный рецепт
	ИмяРеквизита_НомерСерииРецепта                  = "ps";
	ИмяРеквизита_НомерРецепта                       = "dn";
	ИмяРеквизита_ДатаРегистрацииРецепта             = "dd";
	ФорматЗначения_ДатаРегистрацииРецепта           = "ДФ=yyMMdd";
	
	ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП = "sid";
	ДлинаИдентификатораСубъектаОбращенияМДЛП        = 14;
	Разделитель                                     = "&";
	
	ТекстОшибки = НСтр("ru = 'Ошибка при заполнении параметров пробития чека:'");
	
	// Тег 1085
	ДополнительныйРеквизитПользователя.Наименование = Префикс;
	
	Если Параметры.ПроцентЛьготы = 100 Тогда
		ДополнительныйРеквизитПользователя.Наименование = ДополнительныйРеквизитПользователя.Наименование + ПризнакПолнойЛьготы;
	КонецЕсли;
	
	// Тег 1086
	Значение = Новый Массив;
	Если Параметры.ПроцентЛьготы > 0 Тогда
		Значение.Добавить(СтрШаблон("%1%2", ИмяРеквизита_НомерСерииЛьготногоРецепта, СтрЗаменить(Параметры.НомерСерииЛьготногоРецепта, Разделитель, Разделитель + Разделитель)));
		Значение.Добавить(СтрШаблон("%1%2", ИмяРеквизита_НомерЛьготногоРецепта, СтрЗаменить(Параметры.НомерЛьготногоРецепта, Разделитель, Разделитель + Разделитель)));
		Значение.Добавить(СтрШаблон("%1%2", ИмяРеквизита_ДатаРегистрацииЛьготногоРецепта, Формат(Параметры.ДатаРегистрацииЛьготногоРецепта, ФорматЗначения_ДатаРегистрацииЛьготногоРецепта)));
	ИначеЕсли ЗначениеЗаполнено(Параметры.ДатаРегистрацииРецепта) Тогда
		Значение.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_ДатаРегистрацииРецепта, Формат(Параметры.ДатаРегистрацииРецепта, ФорматЗначения_ДатаРегистрацииРецепта)));
		
		Если ЗначениеЗаполнено(Параметры.НомерСерииРецепта) И ЗначениеЗаполнено(Параметры.НомерРецепта) Тогда
			Значение.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_НомерСерииРецепта, СтрЗаменить(Параметры.НомерСерииРецепта, Разделитель, Разделитель + Разделитель)));
			Значение.Добавить(СтрШаблон("%1=%2", ИмяРеквизита_НомерРецепта, СтрЗаменить(Параметры.НомерРецепта, Разделитель, Разделитель + Разделитель)));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ИдентификаторМестаДеятельностиМДЛП) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Недопустимое значение реквизита ""%Идентификатор%"" <идентификатор места деятельности субъекта обращения в ИС МДЛП> тега 1086'"), "%Идентификатор%", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП);
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Идентификатор места деятельности субъекта обращения в ИС МДЛП не заполнен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если СтрДлина(Параметры.ИдентификаторМестаДеятельностиМДЛП) <> ДлинаИдентификатораСубъектаОбращенияМДЛП Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Недопустимое значение реквизита ""%Идентификатор%"" <идентификатор места деятельности субъекта обращения в ИС МДЛП> тега 1086'"), "%Идентификатор%", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП);
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Недопустимая длина идентификатора места деятельности субъекта обращения в ИС МДЛП.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Идентификатор должен состоять из %ДлинаИдентификатора% символов.'"), "%ДлинаИдентификатора%", ДлинаИдентификатораСубъектаОбращенияМДЛП);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ОписаниеЧислаИдентификатор = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ДлинаИдентификатораСубъектаОбращенияМДЛП, 0, ДопустимыйЗнак.Неотрицательный));
	Если Не ЗначениеЗаполнено(ОписаниеЧислаИдентификатор.ПривестиЗначение(Параметры.ИдентификаторМестаДеятельностиМДЛП)) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрЗаменить(НСтр("ru = 'Недопустимое значение реквизита ""%Идентификатор%"" <идентификатор места деятельности субъекта обращения в ИС МДЛП> тега 1086'"), "%Идентификатор%", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП);
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Идентификатор места деятельности субъекта обращения в ИС МДЛП должен состоять только из цифр.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Значение.Добавить(СтрШаблон("%1%2", ИмяРеквизита_ИдентификаторМестаДеятельностиМДЛП, Параметры.ИдентификаторМестаДеятельностиМДЛП));
	
	ДополнительныйРеквизитПользователя.Значение = СтрСоединить(Значение, Разделитель);
	
	// Завершающий символ
	ДополнительныйРеквизитПользователя.Значение = ДополнительныйРеквизитПользователя.Значение + Разделитель;
	
	Возврат ДополнительныйРеквизитПользователя;
	
КонецФункции

// Формирует значение тега 1162 (ДанныеКодаТоварнойНоменклатуры) параметров фискализации для целей МДЛП.
//
// Параметры:
//  SGTIN              - Строка - уникальный номер упаковки.
//  РеквизитКодаТовара - Строка, Неопределено - (не обязательный). Значение реквизита кода товара (Значение тэга 1162). Кодируется текстом в кодировке Base64.
//                       Если не предавать, будет рассчитан по данным переданного SGTIN.
//
// Возвращаемое значение:
//  ДанныеКодаТоварнойНоменклатуры - Структура - заполненная структура ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеКодаТоварнойНоменклатуры()
//
Функция СформироватьПараметрДанныеКодаТоварнойНоменклатуры(Знач SGTIN, Знач РеквизитКодаТовара = Неопределено) Экспорт
	
	#Если Сервер Или ТолстыйКлиент Или ВнешнееСоединение Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#Иначе
		МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
	#КонецЕсли
	
	GTIN          = Лев(SGTIN, 14);
	СерийныйНомер = СтрЗаменить(SGTIN, GTIN, "");
	
	Если РеквизитКодаТовара = Неопределено Тогда
		
		Префикс = ПрефиксКодированияРеквизита(ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1"));
		
		Тело = Новый ПотокВПамяти();
		ЗаписьДанных = Новый ЗаписьДанных(Тело);
		ЗаписьДанных.ЗаписатьЦелое64(Число(GTIN), ПорядокБайтов.BigEndian);
		ЗаписьДанных.ЗаписатьСимволы(СерийныйНомер);
		ЗаписьДанных.Закрыть();
		
		Тело.Перейти(0, ПозицияВПотоке.Начало);
		ЗаписьДанных = Новый ЗаписьДанных(Тело);
		ЗаписьДанных.ЗаписатьЦелое16(Префикс, ПорядокБайтов.BigEndian);
		ЗаписьДанных.Закрыть();
		
		РеквизитКодаТовара = Base64Строка(Тело.ЗакрытьИПолучитьДвоичныеДанные());
		
	КонецЕсли;
	
	ДанныеКодаТоварнойНоменклатуры = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеКодаТоварнойНоменклатуры();
	ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты");
	ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = GTIN;
	ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = СерийныйНомер;
	ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара                     = РеквизитКодаТовара;
	
	Возврат ДанныеКодаТоварнойНоменклатуры;
	
КонецФункции

// Префикс кодирования реквизита.
// 
// Параметры:
//  ТипыИдентификаторовТовараККТ - ПеречислениеСсылка.ТипыИдентификаторовТовараККТ - Типы идентификаторов товара ККТ
// 
// Возвращаемое значение:
//  Число - Префикс кодирования реквизита
//
Функция ПрефиксКодированияРеквизита(Знач ТипыИдентификаторовТовараККТ)
	
	Если ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеEAN8") Тогда
		Результат = 17672; // 45h 08h - Код товара в формате EAN-8, UPC-E.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеEAN13") Тогда
		Результат = 17677; // 45h 0Dh - Код товара в формате EAN-13, UPC-A.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеITF14") Тогда
		Результат = 18702; // 49h 0Eh - Код товара в формате EAN-13, UPC-A.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
		Результат = 17485; // 44h 4Dh - Код товара в формате GS1 Data Matrix или Data Matrix маркировки.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха") Тогда
		Результат = 21062; // 52h 46h - Код товара средства идентификации мехового изделия.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2") Тогда
		Результат = 50452; // C5h 14h - Код товара в кодировке ЕГАИС 2.0 в формате PDF417.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3") Тогда
		Результат = 50462; // C5h 1Eh - Код товара в кодировке ЕГАИС 3.0 в формате Data Matrix.
	Иначе 
		Результат = 0; // 00h 00h - Код товара, который не распознан.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ФФД_1_1_ФФД_1_0_5

#КонецОбласти // РаботаС_ККТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если Сообщение.ТекстОшибки = "" Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("ИдентификаторСубъектаОбращения");
	СтруктураИзменения.Вставить("Операция");
	
	СтруктураИзменения.Вставить("ТекстОшибки", "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано", Ложь);
	СтруктураИзменения.Вставить("Принято", Ложь);
	
	СтруктураИзменения.Вставить("ОбъектНеПопалВОтбор", Ложь);
	
	СтруктураИзменения.Вставить("ИсходящееСообщение");
	СтруктураИзменения.Вставить("ВходящееСообщение");
	
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	СтруктураИзменения.Вставить("НовыйСтатус");
	
	// Результат чека
	СтруктураИзменения.Вставить("ИдентификаторЗапроса");
	СтруктураИзменения.Вставить("Подпись");
	
	Возврат СтруктураИзменения;
	
КонецФункции

Функция СубъектыОбращенияНастроекОбмена(НастройкиОбмена) Экспорт
	
	СубъектыОбращения = Новый Массив;
	Для Каждого КлючЗначение Из НастройкиОбмена Цикл
		СубъектыОбращения.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат СубъектыОбращения;
	
КонецФункции

// Возвращает структуру параметров заполнения табличной части.
//
Функция ПараметрыЗаполненияТабличнойЧасти() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПересчитатьСумму"              , Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьЦену"               , Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц"   , Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок" , Ложь);
	ПараметрыЗаполнения.Вставить("ОбработатьУпаковки"            , Истина);
	ПараметрыЗаполнения.Вставить("ПроверитьСериюРассчитатьСтатус", Ложь);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий"        , Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Параметры, позволяющие регулировать выполнение обмена с ИС МДЛП,
// при передаче данных, при получении квитанций, при получении информации об упаковках или при выполнении обмена.
//
// Возвращаемое значение:
//  ПараметрыВыполненияОбмена - Структура - дополнительные параметры выполнения обмена:
//    * СписокДокументов   - список документов по которым необходимо выполнить обмен.
//                           Применяется если необходимо выполнить обработку только тех документов, которые указаны в списке.
//                           Например, при выполнении обмена из формы протокола обмена (Справочник.МДЛППрисоединенныеФайлы.ПротоколОбмена)
//                           или при получении квитанции документа (ИнтеграцияМДЛПСлужебныйКлиент.ОбработатьНавигационнуюСсылкуСтатуса, НавигационнаяСсылка = "ПолучитьКвитанциюОФиксации").
//    * ТипыДокументов     - список типов документов по которым необходимо выполнить обмен.
//                           Применяется если необходимо выполнить обработку только тех типов документов, которые указаны в списке.
//                           Например, при выполнении обмена из формы списка документов (Обработка.ПанельМаркировкиМДЛП.ФормаСпискаДокументов).
//    * ДальнейшееДействие - действие, выполняемое пользователем (например Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации), ограничивающее другие действия выполнения обмена.
//                           Применяется, если необходимо чтобы не выполнялись другие действия, при выполнении обмена.
//                           Например, при получении квитанции документа (ИнтеграцияМДЛПСлужебныйКлиент.ОбработатьНавигационнуюСсылкуСтатуса, НавигационнаяСсылка = "ПолучитьКвитанциюОФиксации").
//
Функция ПараметрыВыполненияОбмена() Экспорт
	
	ПараметрыВыполненияОбмена = Новый Структура;
	ПараметрыВыполненияОбмена.Вставить("СписокДокументов"  , Неопределено);
	ПараметрыВыполненияОбмена.Вставить("ТипыДокументов"    , Неопределено);
	ПараметрыВыполненияОбмена.Вставить("ДальнейшееДействие", Неопределено);
	
	Возврат ПараметрыВыполненияОбмена;
	
КонецФункции

#КонецОбласти
