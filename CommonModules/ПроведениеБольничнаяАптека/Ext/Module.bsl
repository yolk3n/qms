
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Выполняет формирование движений по регистрам документа
//
// Параметры:
//  Документ        - ДокументОбъект - проводимый документ.
//  Отказ           - Булево - признак отказа от проведения документа.
//  РежимПроведения - РежимПроведенияДокумента - определяет набор режимов проведения документа.
//
Процедура СформироватьДвиженияПоРегистрам(Документ, Отказ, РежимПроведения = Неопределено) Экспорт
	
	ДополнительныеСвойства = Документ.ДополнительныеСвойства;
	
	ИнициализироватьДополнительныеСвойстваДляПроведения(Документ.Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.Ссылка);
		МенеджерДокумента.СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства);
	КонецЕсли;
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ);
	
	ОтразитьДвиженияПоРегистрам(Документ, Отказ);
	
	ЗаписатьНаборыЗаписей(Документ);
	ВыполнитьКонтрольРезультатовПроведения(Документ, Отказ);
	
	ОчиститьДополнительныеСвойстваДляПроведения(Документ);
	
КонецПроцедуры

// Добавление описание таблицы запроса, которая будет использована для формирования движений
//
// Параметры:
//  ДополнительныеСвойства       - "ДополнительныеСвойства" объекта
//  ТекстЗапроса                 - Строка
//  РегистрДвиженияИлиИмяТаблицы - ОбъектМетаданных, Строка - РегистрСведений или РегистрНакопления, в который будут помещены данные из таблицы запроса
//
Процедура ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапроса, РегистрДвиженияИлиИмяТаблицы = "") Экспорт
	
	Если ТипЗнч(РегистрДвиженияИлиИмяТаблицы) = Тип("ОбъектМетаданных") Тогда
		
		Если Не ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения.Содержит(РегистрДвиженияИлиИмяТаблицы) Тогда
			ВызватьИсключение СтрЗаменить(НСтр("ru = 'Регистр ""%1"" не входит в коллекцию движений документа'"), "%1", РегистрДвиженияИлиИмяТаблицы.ПолноеИмя());
		КонецЕсли;
		
		ДобавитьТекстЗапроса(ДополнительныеСвойства, ТекстЗапроса, РегистрДвиженияИлиИмяТаблицы.Имя, Истина);
		
	Иначе
		
		ДобавитьТекстЗапроса(ДополнительныеСвойства, ТекстЗапроса, РегистрДвиженияИлиИмяТаблицы, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает полный текст запроса, составленный из текстов запросов, добавленных методами 
// ДобавитьТекстЗапросаДвижений и ДобавитьВспомогательнойТекстЗапросаДвижений
//
// Параметры:
//  ДополнительныеСвойства
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Регистры) Тогда
		Возврат ДополнительныеСвойства.ДляПроведения.СхемаЗапроса.ПолучитьТекстЗапроса();
	Иначе
		
		СвойстваТаблицВЗапросе = ДополнительныеСвойства.ДляПроведения.СвойстваТаблицВЗапросе;
		ИспользуемыеТаблицы = Новый Структура;
		ОпределитьИспользуемыеТаблицы(Регистры, СвойстваТаблицВЗапросе, ИспользуемыеТаблицы);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ДополнительныеСвойства.ДляПроведения.СхемаЗапроса.ПолучитьТекстЗапроса());
		Для Каждого СвойстваТаблицы Из СвойстваТаблицВЗапросе Цикл
			
			Если Не ИспользуемыеТаблицы.Свойство(СвойстваТаблицы.Ключ) Тогда
				СхемаЗапроса.ПакетЗапросов[СвойстваТаблицы.Значение.НомерТаблицы].УстановитьТекстЗапроса("ВЫБРАТЬ 1");
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
КонецФункции

// Возвращает по имени таблицы ее индекс в результатах запроса.
// Если таблицы с запрашиваемым именем не найдено, то вызывается исключение
//
// Параметры:
//  ДополнительныеСвойства - "ДополнительныеСвойства" объекта
//  ИмяТаблицы             - Строка
//
// Возвращаемое значение:
//  Число
//
Функция ПолучитьНомерТаблицыЗапросаДвижений(ДополнительныеСвойства, ИмяТаблицы) Экспорт
	
	СвойстваТаблицы = Неопределено;
	Если ДополнительныеСвойства.ДляПроведения.СвойстваТаблицВЗапросе.Свойство(ИмяТаблицы, СвойстваТаблицы) Тогда
		Возврат СвойстваТаблицы.НомерТаблицы;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Таблица ""%1"" отсутствует.'"), ИмяТаблицы);
	
КонецФункции

// Заполняет таблицы для движений
//
// Параметры:
//  ДополнительныеСвойства - "ДополнительныеСвойства" объекта.
//  ТаблицыЗапроса         - описывает таблицы, которые нужно получить из результатов запроса.
//  РезультатыЗапроса      - результаты запроса для получения таблиц движений.
//
Процедура ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, РезультатыЗапроса, Регистры = Неопределено) Экспорт
	
	Если ТипЗнч(Регистры) = Тип("Строка") Тогда
		СписокРегистров = Новый Структура(Регистры);
	ИначеЕсли ТипЗнч(Регистры) = Тип("Массив") Тогда
		СписокРегистров = Новый Структура(СтрСоединить(Регистры, ","));
	Иначе
		СписокРегистров = Регистры;
	КонецЕсли;
	
	СвойстваТаблицВЗапросе = ДополнительныеСвойства.ДляПроведения.СвойстваТаблицВЗапросе;
	Для Каждого СвойстваТаблицы Из СвойстваТаблицВЗапросе Цикл
		
		Если ЗначениеЗаполнено(СписокРегистров) И Не СписокРегистров.Свойство(СвойстваТаблицы.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвойстваТаблицы.Значение.ФормироватьДвижения Тогда
			ИмяТаблицы = СвойстваТаблицы.Ключ;
			Индекс = СвойстваТаблицы.Значение.НомерТаблицы;
			ДополнительныеСвойства.ТаблицыДляДвижений.Вставить(ИмяТаблицы, РезультатыЗапроса[Индекс].Выгрузить());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Для проведенных документов устанавливает режим проведения "Неоперативный"
//
Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьИменаИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;
	
	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;
	
	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл
		
		СчетчикДвижений = СчетчикДвижений + 1;
		
		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;
		
		Если Не ПропуститьРегистр Тогда
			
			Если СчетчикТаблиц > 0 Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
			КонецЕсли;
			
			СчетчикТаблиц = СчетчикТаблиц + 1;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";
			
		КонецЕсли;
		
		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда
			
			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если Результат.Количество() = 0 Тогда
				
				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;
	
	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;
	
КонецФункции

// Возвращает ссылку на документ, который проводится
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства документа
//
// Возвращаемое значение:
//  ДокументСсылка
//
Функция ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства) Экспорт
	
	Возврат ДополнительныеСвойства.ДляПроведения.Ссылка;
	
КонецФункции

// Возвращает МенеджерВременныхТаблиц
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства документа
//
// Возвращаемое значение:
//  МенеджерВременныхТаблиц
//
Функция ПолучитьМенеджерВременныхТаблицДляКонтроляПроведения(ДополнительныеСвойства) Экспорт
	
	Возврат ДополнительныеСвойства.ДляПроведения.ПараметрыКонтроляПроведения.МенеджерВременныхТаблиц;
	
КонецФункции

// Добавляет новый обработчик контроля проведения по регистрам
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства набора записей регистра
//  ТекстЗапросаПроверки - Строка - текст запроса проверки данных регистра
//  ОбработчикОшибок - Менеджер - менеджер, у которого будет вызван метод СообщитьОбОшибкахПроведения(Объект, Отказ, РезультатЗапроса)
//                                для обработки результатов запроса проверки проведения.
//  ПараметрыЗапроса - Структура - Значения параметров запроса
//
Процедура ДобавитьПараметрыКонтроля(ДополнительныеСвойства, ТекстЗапросаПроверки, ОбработчикОшибок, ПараметрыЗапроса = Неопределено) Экспорт
	
	Проверка = ДополнительныеСвойства.ДляПроведения.ПараметрыКонтроляПроведения.СписокКонтроля.Добавить();
	Проверка.ТекстЗапроса = ТекстЗапросаПроверки;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаПроверки);
	
	Проверка.КоличествоТаблицВЗапросе = СхемаЗапроса.ПакетЗапросов.Количество();
	Если ПараметрыЗапроса <> Неопределено Тогда
		Проверка.ПараметрыЗапроса = ПараметрыЗапроса;
	КонецЕсли;
	Проверка.ОбработчикОшибокПроведения = ОбработчикОшибок;
	
КонецПроцедуры

// Возвращает признак, что запись происходит из документа в режиме проведения
//
Функция ЭтоПроведениеДокумента(ДополнительныеСвойства) Экспорт
	
	Возврат ДополнительныеСвойства.Свойство("ДляПроведения");
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////////
// Подготовка и запись движений документа.
#Область ПодготовкаИЗаписьДвиженийДокумента

// Процедура инициализирует дополнительные свойства для проведения документа.
//
// Параметры:
//  ДокументСсылка - ссылка на документ, которые планируется проводить
//  СтруктураДополнительныеСвойства - "ДополнительныеСвойства" объекта
//  РежимПроведения - режим проведения документа
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц",
	// в значении которого хранится менеджер временных таблиц.
	ДополнительныеСвойства.ДляПроведения.Вставить(
		"ПараметрыКонтроляПроведения",
		Новый Структура("МенеджерВременныхТаблиц, СписокКонтроля" , Новый МенеджерВременныхТаблиц, НоваяТаблицаКонтроляПроведения()));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения"       , РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента"   , ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка"                , ДокументСсылка);
	ДополнительныеСвойства.ДляПроведения.Вставить("СхемаЗапроса"          , Новый СхемаЗапроса);
	ДополнительныеСвойства.ДляПроведения.Вставить("СвойстваТаблицВЗапросе", Новый Структура);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапроса(ДополнительныеСвойства, ТекстЗапроса, ИмяТаблицы, ФормироватьДвижения)
	
	ПакетЗапросов = ДополнительныеСвойства.ДляПроведения.СхемаЗапроса.ПакетЗапросов;
	СвойстваТаблицПакета = ДополнительныеСвойства.ДляПроведения.СвойстваТаблицВЗапросе;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	Для НомерЗапроса = 1 По КоличествоЗапросов Цикл
		
		Запрос = СхемаЗапроса.ПакетЗапросов[НомерЗапроса - 1];
		ТипЗапроса = ТипЗнч(Запрос);
		ЗапросПакета = ПакетЗапросов.Добавить(ТипЗапроса);
		Если ТипЗапроса = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			ЭтоОсновнаяТаблица = ПустаяСтрока(Запрос.ТаблицаДляПомещения);
			ИмяТаблицыЗапроса = ?(ЭтоОсновнаяТаблица, ИмяТаблицы, Запрос.ТаблицаДляПомещения);
			Если ПустаяСтрока(ИмяТаблицыЗапроса) Тогда
				ВызватьИсключение НСтр("ru = 'Не задано имя основной таблицы'");
			КонецЕсли;
			Если СвойстваТаблицПакета.Свойство(ИмяТаблицыЗапроса) Тогда
				ВызватьИсключение СтрЗаменить(НСтр("ru = 'Добавляемая таблица (%1) уже существует'"), "%1", ИмяТаблицыЗапроса);
			КонецЕсли;
			
			ИспользуемыеВременныеТаблицы = Новый Массив;
			ЗаполнитьИспользуемыеВременныеТаблицыЗапроса(Запрос, ИспользуемыеВременныеТаблицы);
			
			Для Каждого ИмяВременнойТаблицы Из ИспользуемыеВременныеТаблицы Цикл
				Если Не СвойстваТаблицПакета.Свойство(ИмяВременнойТаблицы) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не задана временная таблица %1 используемая при формировании запроса %2'"),
						ИмяВременнойТаблицы,
						ИмяТаблицыЗапроса);
				КонецЕсли;
			КонецЦикла;
			
			ЗапросПакета.УстановитьТекстЗапроса(Запрос.ПолучитьТекстЗапроса());
			
			СвойстваТаблицы = Новый Структура;
			СвойстваТаблицы.Вставить("НомерТаблицы", ПакетЗапросов.Количество() - 2); // Для получения индекса запроса отнимаем 2, так как первый запрос в пакете пустой
			СвойстваТаблицы.Вставить("ФормироватьДвижения", ?(ЭтоОсновнаяТаблица, ФормироватьДвижения, Ложь));
			СвойстваТаблицы.Вставить("ИспользуемыеВременныеТаблицы", ИспользуемыеВременныеТаблицы);
			
			СвойстваТаблицПакета.Вставить(ИмяТаблицыЗапроса, СвойстваТаблицы);
			
		ИначеЕсли ТипЗапроса = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			ЗапросПакета.ИмяТаблицы = Запрос.ИмяТаблицы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИспользуемыеВременныеТаблицыЗапроса(Запрос, ИспользуемыеВременныеТаблицы)
	
	Для Каждого ОператорВыбора Из Запрос.Операторы Цикл
		Для Каждого ИсточникДанных Из ОператорВыбора.Источники Цикл
			ТипИсточника = ТипЗнч(ИсточникДанных.Источник);
			Если ТипИсточника = Тип("ТаблицаСхемыЗапроса")
			 Или ТипИсточника = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				ИмяТаблицы = ИсточникДанных.Источник.ИмяТаблицы;
				Если СтрНайти(ИмяТаблицы, ".") = 0 И ИспользуемыеВременныеТаблицы.Найти(ИмяТаблицы) = Неопределено Тогда
					ИспользуемыеВременныеТаблицы.Добавить(ИмяТаблицы);
				КонецЕсли;
			ИначеЕсли ТипИсточника = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				ЗаполнитьИспользуемыеВременныеТаблицыЗапроса(ИсточникДанных.Источник.Запрос, ИспользуемыеВременныеТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьИспользуемыеТаблицы(Регистры, СвойстваТаблицВЗапросе, ИспользуемыеТаблицы)
	
	Если ТипЗнч(Регистры) = Тип("Строка") Тогда
		СписокРегистров = Новый Структура(Регистры);
	ИначеЕсли ТипЗнч(Регистры) = Тип("Массив") Тогда
		СписокРегистров = Новый Структура(СтрСоединить(Регистры, ","));
	Иначе
		СписокРегистров = Регистры;
	КонецЕсли;
	
	Для Каждого ИмяТаблицы Из СписокРегистров Цикл
		Если ИспользуемыеТаблицы.Свойство(ИмяТаблицы.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваТаблицы = Неопределено;
		Если Не СвойстваТаблицВЗапросе.Свойство(ИмяТаблицы.Ключ, СвойстваТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемыеТаблицы.Вставить(ИмяТаблицы.Ключ);
		ОпределитьИспользуемыеТаблицы(СвойстваТаблицы.ИспользуемыеВременныеТаблицы, СвойстваТаблицВЗапросе, ИспользуемыеТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура подготавливает наборы записей документа к регистрации движений
//
// Параметры:
//  Документ - ДокументОбъект, для которого будут регистрироваться движения
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ)
	
	Для Каждого НаборЗаписей Из Документ.Движения Цикл
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Документ.ДополнительныеСвойства.ЭтоНовый Тогда
		
		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		
		ИменаИспользуемыхРегистров = ПолучитьИменаИспользуемыхРегистров(
			Документ.Ссылка,
			Документ.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения,
			ИсключаемыеРегистры);
		
		Для каждого ИмяРегистра Из ИменаИспользуемыхРегистров Цикл
			Документ.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает движения в наборы записей регистров документа
//
// Параметры:
//  Документ - ДокументОбъект
//  Отказ - Булево - признак отказа от операции
//
Процедура ОтразитьДвиженияПоРегистрам(Документ, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Таблица Из Документ.ДополнительныеСвойства.ТаблицыДляДвижений Цикл
		
		Если Таблица.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = Документ.Движения[Таблица.Ключ];
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Загрузить(Таблица.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
//
// Параметры:
//  Документ - ДокументОбъект
//
Процедура ЗаписатьНаборыЗаписей(Документ)
	
	Для Каждого Движение Из Документ.Движения Цикл
		
		Движение.ДополнительныеСвойства.Вставить("ЭтоНовый", Документ.ДополнительныеСвойства.ЭтоНовый);
		Движение.ДополнительныеСвойства.Вставить("РежимЗаписи", Документ.ДополнительныеСвойства.РежимЗаписи);
		
		// Структура для передачи данных в модули наборов записей.
		Движение.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
		Движение.ДополнительныеСвойства.ДляПроведения.Вставить("ПараметрыКонтроляПроведения", Документ.ДополнительныеСвойства.ДляПроведения.ПараметрыКонтроляПроведения);
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	РегистрыДляКонтроля = Документ.СписокРегистровДляКонтроля();
	Если РегистрыДляКонтроля <> Неопределено Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда
				
				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Документ.Движения.Записать();
	
КонецПроцедуры

// Процедура очищает дополнительные свойства для проведения
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(Документ)
	
	Документ.ДополнительныеСвойства.Удалить("ДляПроведения");
	Для Каждого НаборЗаписей Из Документ.Движения Цикл
		НаборЗаписей.ДополнительныеСвойства.Очистить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПодготовкаИЗаписьДвиженийДокумента

///////////////////////////////////////////////////////////////////////////////////
// Процедуры контроля остатков по регистрам.
#Область ПроцедурыКонтроляОстатковПоРегистрам

Функция ДатаАктуальныхОстатков() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

// Процедура выполняет контроль результатов проведения
//
// Параметры
//	Объект - ДокументОбъект, результаты проведения которого контролируются
//	Отказ - признак отказа от проведения
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ)
	
	ДанныеТаблиц = Объект.ДополнительныеСвойства.ДляПроведения.ПараметрыКонтроляПроведения;
	
	СписокКонтроля = ДанныеТаблиц.СписокКонтроля;
	Если СписокКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазделительЗапросов =
	"
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	ПакетЗапросов = Новый Запрос;
	
	ТекстЗапроса = "";
	Для Каждого ДанныеКонтроля Из СписокКонтроля Цикл
		
		ТекстЗапроса =
			ТекстЗапроса
			+ ?(ПустаяСтрока(ТекстЗапроса), "", РазделительЗапросов)
			+ ДанныеКонтроля.ТекстЗапроса;
			
		Для Каждого Параметр Из ДанныеКонтроля.ПараметрыЗапроса Цикл
			ПакетЗапросов.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	РезультатЗапроса = ПакетЗапросов.ВыполнитьПакет();
	
	Итератор = -1;
	Для Каждого ДанныеКонтроля Из СписокКонтроля Цикл
		
		Итератор = Итератор + ДанныеКонтроля.КоличествоТаблицВЗапросе;
		
		Результат = РезультатЗапроса[Итератор];
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКонтроля.ОбработчикОшибокПроведения.СообщитьОбОшибкахПроведения(Объект, Отказ, Результат);
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено %1'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена %1'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(Объект)),
			Объект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПроцедурыКонтроляОстатковПоРегистрам

///////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры
#Область ПрочиеПроцедуры

Функция НоваяТаблицаКонтроляПроведения()
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("ТекстЗапроса", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("КоличествоТаблицВЗапросе", Новый ОписаниеТипов("Число"));
	Обработчики.Колонки.Добавить("ОбработчикОшибокПроведения");
	Обработчики.Колонки.Добавить("ПараметрыЗапроса", Новый ОписаниеТипов("Структура"));
	Возврат Обработчики;
	
КонецФункции

#КонецОбласти // ПрочиеПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
