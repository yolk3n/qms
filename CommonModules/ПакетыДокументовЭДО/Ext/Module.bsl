// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

// Параметры:
//  Форма - РасширениеУправляемойФормыДляДокумента,ФормаКлиентскогоПриложения:
//  * Объект - ДанныеФормыСтруктура:
//  ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * СоставПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * КоличествоОтображаемыхДокументовПакета - Число
//  НавигационнаяСсылка - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * СоставМенюВыбора - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
Функция СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Форма, НавигационнаяСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СоставМенюВыбора", Новый СписокЗначений);
	
	Если СтрНайти(НавигационнаяСсылка, "Open_") > 0 Тогда
		
		ИндексДокумента = Число(СтрЗаменить(НавигационнаяСсылка, "Open_", ""));
		
		Документ = Форма.СоставПакета[ИндексДокумента -1].Значение;
		ОбъектДокумента = Документ.ПолучитьОбъект();
		ЗначениеВДанныеФормы(ОбъектДокумента, Форма.Объект);
		Форма.Прочитать();
		
	ИначеЕсли НавигационнаяСсылка = "Show" Тогда
		
		СоставМеню = Результат.СоставМенюВыбора; // СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		ГраницыВывода = ГраницыВыводаДокументовПакета(Форма.СоставПакета, Форма.Объект.Ссылка,
			Форма.КоличествоОтображаемыхДокументовПакета);
		
		ИндексДокумента = 0;
		
		ДокументыДляПредставления = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		Для Каждого ЭлементСписка Из Форма.СоставПакета Цикл
			ИндексДокумента = ИндексДокумента + 1;
			Если ИндексДокумента >= ГраницыВывода.ИндексНачалоВыводаЭлементов 
				И ИндексДокумента <= ГраницыВывода.ИндексКонцаВыводаЭлементов Тогда
				Продолжить;
			КонецЕсли;
			ЭлектронныйДокумент = ЭлементСписка.Значение;
			ДокументыДляПредставления.Добавить(ЭлектронныйДокумент);
		КонецЦикла;
		
		СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(ДокументыДляПредставления);
		Для Каждого СвойстваПоДокументу Из СвойстваДокументов Цикл
			Представление = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваПоДокументу.Значение);
			СоставМеню.Добавить(СвойстваПоДокументу.Ключ, Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  МестоРазмещения - ГруппаФормы,РасширениеГруппыФормыДляОбычнойГруппы
//  КоличествоОтображаемыхДокументовПакета - Число
//  Направление - ПеречислениеСсылка.НаправленияЭДО
Процедура СформироватьПанельСоставаПакета(Форма, МестоРазмещения, КоличествоОтображаемыхДокументовПакета, Направление) Экспорт
	
	Если МестоРазмещения.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МестоРазмещения.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	МестоРазмещения.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	МестоРазмещения.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	МестоРазмещения.Видимость = Ложь;
		
	Для ПорядковыйНомерЭлемента = 1 По КоличествоОтображаемыхДокументовПакета Цикл 
		
		// Закладка
		ГруппаЗакладка = Форма.Элементы.Добавить("ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента), Тип("ГруппаФормы"), МестоРазмещения);
		ГруппаЗакладка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗакладка.ОтображатьЗаголовок = Ложь;
		ГруппаЗакладка.ЦветФона = ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
		ГруппаЗакладка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗакладка.Объединенная = Истина;
		ГруппаЗакладка.РастягиватьПоГоризонтали = Ложь;
		ГруппаЗакладка.РастягиватьПоВертикали = Ложь;
		ГруппаЗакладка.Видимость = Ложь;
		ГруппаЗакладка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		ГруппаЗакладка.ГоризонтальноеПоложениеВГруппе  = ГоризонтальноеПоложениеЭлемента.Центр;

		// Текст закладки (наименование документа)
		ЭлементУправления_ТекстЗакладки = Форма.Элементы.Добавить(
			"ЭлементУправления_ТекстЗакладки_" + Строка(ПорядковыйНомерЭлемента), 
			Тип("ДекорацияФормы"), ГруппаЗакладка);
		
		ЭлементУправления_ТекстЗакладки.Вид = ВидДекорацииФормы.Надпись;
		ЭлементУправления_ТекстЗакладки.УстановитьДействие("ОбработкаНавигационнойСсылки",
			"Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки");
		ЭлементУправления_ТекстЗакладки.РастягиватьПоГоризонтали = Истина;
		ЭлементУправления_ТекстЗакладки.АвтоМаксимальнаяШирина = Ложь;
		ЭлементУправления_ТекстЗакладки.Высота = 1;
		
		Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
			// Разделитель
			ЭлементУправления_Разделитель = Форма.Элементы.Добавить(
				"ЭлементУправления_Разделитель_" + Строка(ПорядковыйНомерЭлемента), 
				Тип("ДекорацияФормы"), ГруппаЗакладка);
			
			ЭлементУправления_Разделитель.Вид = ВидДекорацииФормы.Надпись;
			ЭлементУправления_Разделитель.Заголовок = Символы.НПП;
			// Кнопка удаления из пакета 
			ЭлементУправленияПакета_УдалитьДокумент = Форма.Элементы.Добавить(
				"ЭлементУправленияПакета_УдалитьДокумент_" + Строка(ПорядковыйНомерЭлемента), 
				Тип("ДекорацияФормы"), ГруппаЗакладка);
			
			ЭлементУправленияПакета_УдалитьДокумент.Вид = ВидДекорацииФормы.Картинка;
			ЭлементУправленияПакета_УдалитьДокумент.Картинка = БиблиотекаКартинок.Закрыть;
			ЭлементУправленияПакета_УдалитьДокумент.УстановитьДействие("Нажатие",
				"Подключаемый_СоставПакета_Нажатие");
			ЭлементУправленияПакета_УдалитьДокумент.Гиперссылка = Истина;
	
		КонецЕсли;
		
	КонецЦикла;
	
	// Закладка
	ГруппаДопЭлементы = Форма.Элементы.Добавить("ПанельСоставаПакета_ГруппаДопЭлементы", Тип(
		"ГруппаФормы"), МестоРазмещения);
	ГруппаДопЭлементы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДопЭлементы.ОтображатьЗаголовок = Ложь;
	ГруппаДопЭлементы.ЦветФона = ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
	ГруппаДопЭлементы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаДопЭлементы.Объединенная = Истина;
	ГруппаДопЭлементы.РастягиватьПоГоризонтали = Истина;
	ГруппаДопЭлементы.РастягиватьПоВертикали = Ложь;
	ГруппаДопЭлементы.Видимость = Истина;
	ГруппаДопЭлементы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаДопЭлементы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	
	// ссылка списка остальных документов пакета 
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы = Форма.Элементы.Добавить(
		"ЭлементУправленияПакета_ПоказатьОстальныеДокументы", Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);
	
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.Вид = ВидДекорацииФормы.Надпись;
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.УстановитьДействие("ОбработкаНавигационнойСсылки",
		"Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки");
	ЭлементУправленияПакета_ПоказатьОстальныеДокументы.Высота = 1;
	
	ЭлементУправления_Разделитель = Форма.Элементы.Добавить(
		"ЭлементУправления_Разделитель_" + Строка(ПорядковыйНомерЭлемента), Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);
	
	ЭлементУправления_Разделитель.Вид = ВидДекорацииФормы.Надпись;
	ЭлементУправления_Разделитель.Заголовок = Символы.НПП;
	
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		// Кнопка добавления документа в пакет 
		ЭлементУправленияПакета_ДобавитьДокумент = Форма.Элементы.Добавить(
			"ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент", Тип(
			"ДекорацияФормы"), ГруппаДопЭлементы);
	
		ЭлементУправленияПакета_ДобавитьДокумент.Вид = ВидДекорацииФормы.Картинка;
		ЭлементУправленияПакета_ДобавитьДокумент.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		ЭлементУправленияПакета_ДобавитьДокумент.УстановитьДействие("Нажатие",
			"Подключаемый_СоставПакета_Нажатие");
		ЭлементУправленияПакета_ДобавитьДокумент.Гиперссылка = Истина;
	КонецЕсли;
	
	// Пустышка
	ЭлементУправленияПакета_Пустышка = Форма.Элементы.Добавить(
		"ЭлементУправленияПакета_Пустышка", Тип("ДекорацияФормы"),
		ГруппаДопЭлементы);
	
	ЭлементУправленияПакета_Пустышка.Вид = ВидДекорацииФормы.Картинка;
	ЭлементУправленияПакета_Пустышка.Высота = 1;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * Объект - ДанныеФормыСтруктура:
//  ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * СоставПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ОтображаемыеДокументыПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * КоличествоОтображаемыхДокументовПакета - Число
//  * ДоступноИзменениеПакета - Булево
Процедура ЗаполнитьПанельСоставаПакета(Форма) Экспорт
	
	КоличествоОтображаемыхДокументовПакета = Форма.КоличествоОтображаемыхДокументовПакета;
	КоличествоДокументовВПакете = Форма.СоставПакета.Количество();
	
	Если КоличествоДокументовВПакете <= 1 Тогда
		Форма.Элементы.ГруппаСоставПакета.Видимость = Ложь;
		Форма.Элементы.ГруппаШапка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаШапка.ЦветФона = ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
	Форма.Элементы.ГруппаСоставПакета.Видимость = Истина;
	ГраницыВывода = ГраницыВыводаДокументовПакета(Форма.СоставПакета, Форма.Объект.Ссылка,
		Форма.КоличествоОтображаемыхДокументовПакета);
	
	ПорядковыйНомерЭлемента = 1;
	
	ОтображаемыеДокументыПакета = Форма.ОтображаемыеДокументыПакета;
	
	ОтображаемыеДокументыПакета.Очистить();
	
	СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(
		Форма.СоставПакета.ВыгрузитьЗначения());

	Для ИндексДокумента = ГраницыВывода.ИндексНачалоВыводаЭлементов 
		По ГраницыВывода.ИндексКонцаВыводаЭлементов Цикл
		
		ТекущийДокументПакета = Форма.СоставПакета[ИндексДокумента - 1].Значение;
		
		СвойстваДокумента = СвойстваДокументов.Получить(ТекущийДокументПакета);
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
		
		ТекстЗакладки = ""; // Строка,ФорматированнаяСтрока
		
		Если Форма.Объект.Ссылка <> ТекущийДокументПакета Тогда
			ТекстЗакладки = Новый ФорматированнаяСтрока(Строка(ПредставлениеДокумента),
				,,, "Open_" + Формат(ИндексДокумента, "ЧГ=;"));
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].ЦветФона = 
				ЦветаСтиля.ЦветФонаШапкиПакетаДокументовЭДО;
		Иначе
			ТекстЗакладки = ПредставлениеДокумента;
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].ЦветФона =
				ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
		
		Форма.Элементы["ЭлементУправления_ТекстЗакладки_" + Строка(ПорядковыйНомерЭлемента)].Заголовок = ТекстЗакладки;
		Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].Видимость = Истина; 
		
		ПорядковыйНомерЭлемента = ПорядковыйНомерЭлемента + 1; 
		
		ОтображаемыеДокументыПакета.Добавить(ТекущийДокументПакета);
		
	КонецЦикла;

	Если КоличествоДокументовВПакете <= КоличествоОтображаемыхДокументовПакета Тогда
		
		Для ПорядковыйНомерЭлемента = КоличествоДокументовВПакете + 1 По КоличествоОтображаемыхДокументовПакета Цикл
			
			Форма.Элементы["ПанельСоставаПакета_Закладка_" + Строка(ПорядковыйНомерЭлемента)].Видимость = Ложь; 
			
		КонецЦикла;
		
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Видимость = Ложь;
	
	Иначе
		
		КоличествоСкрытыхДокументов = КоличествоДокументовВПакете - КоличествоОтображаемыхДокументовПакета;
		
		ПредставлениеСкрытыхДокументов = СтрШаблон(
			"%1%2%3",
			НСтр("ru = 'и еще'"),
			Символы.НПП,
			Строка(КоличествоСкрытыхДокументов));
		
		ФорматированноеПредставлениеСкрытыхДокументов = Новый ФорматированнаяСтрока(
			ПредставлениеСкрытыхДокументов,
			,
			,
			,
			"Show");
				
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Заголовок =
			ФорматированноеПредставлениеСкрытыхДокументов;
		
		Форма.Элементы["ЭлементУправленияПакета_ПоказатьОстальныеДокументы"].Видимость = Истина;
		
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Форма.СоставПакета) Или Не Форма.ДоступноИзменениеПакета) 
		И Не ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(Форма.Объект.Ссылка) Тогда
		Форма.Элементы["ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КоличествоДокументов - Число
// 
// Возвращаемое значение:
//  Строка
Функция ЗаголовокОтображенияПакетов(КоличествоДокументов) Экспорт
	Если КоличествоДокументов Тогда
		ШаблонСтроки = НСтр("ru = ';Пакет из %1 документа;;Пакет из %1 документов;Пакет из %1 документов;Пакет из %1 документов'");
		Возврат СтрокаСЧислом(ШаблонСтроки, КоличествоДокументов, ВидЧисловогоЗначения.Количественное);
	КонецЕсли;
КонецФункции

// Возвращаемое значение:
//  Строка - Заголовок нового произвольного документа
Функция ЗаголовокНовогоПроизвольногоДокумента() Экспорт
	Возврат НСтр("ru = 'Новый произвольный документ (создание)'");
КонецФункции

#КонецЕсли

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  - Неопределено - если документ не входит в пакет.
//  - УникальныйИдентификатор
Функция ИдентификаторПакетаДокумента(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаИдентификатораПакетаДокумента());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ИдентификаторПакета;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакета(ИдентификаторПакета) Экспорт
	
	Возврат РезультатЗапросаДокументовПакета(ИдентификаторПакета).Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено - если пакет не удалось создать.
//  - УникальныйИдентификатор
Функция СоздатьПакетДокументов(ЭлектронныеДокументы, КонтекстДиагностики) Экспорт
	
	ИдентификаторПакета = Неопределено;
	
	Если ЭлектронныеДокументы.Количество() < 2 Тогда
		Возврат ИдентификаторПакета;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЭтоВходящийЭДО = Неопределено;
		
		Блокировка = Новый БлокировкаДанных;
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			Если ЭтоВходящийЭДО = Неопределено Тогда
				ЭтоВходящийЭДО = ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
			ИначеЕсли ЭтоВходящийЭДО Тогда
				ОтменитьТранзакцию();
				Возврат ИдентификаторПакета;
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовДокументовЭДО");
			ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		ИдентификаторыПакетовДокументов = ИдентификаторыПакетовДокументов(ЭлектронныеДокументы);
		
		Если ЗначениеЗаполнено(ИдентификаторыПакетовДокументов) Тогда
			ОтменитьТранзакцию();
			ДокументыВСоставеДругогоПакета = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыПакетовДокументов, "Ключ");
			ДобавитьОшибкуДокументыВСоставеДругогоПакета(ДокументыВСоставеДругогоПакета, КонтекстДиагностики);
			Возврат ИдентификаторПакета;
		КонецЕсли;
		
		СостоянияДокументовПоЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ЭлектронныеДокументы);
		
		Если ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики) Тогда
			ОтменитьТранзакцию();
			Возврат ИдентификаторПакета;
		КонецЕсли;
		
		ИдентификаторПакета = НовыйИдентификаторПакета();
		
		СвойстваДокументовДляОписанияПакетов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов(
			ЭлектронныеДокументы);
		Если ЗначениеЗаполнено(СвойстваДокументовДляОписанияПакетов) Тогда
			СвойстваДокументовДляОписанияПакетов.Сортировать("Дата");
			СвойстваПервогоДокумента = СвойстваДокументовДляОписанияПакетов[0];
			НоваяЗаписьПакета = РегистрыСведений.ПакетыДокументовЭДО.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьПакета, СвойстваПервогоДокумента);
			НоваяЗаписьПакета.ИдентификаторПакета = ИдентификаторПакета;
			НоваяЗаписьПакета.Записать();
		Иначе
			ОтменитьТранзакцию();
			ИдентификаторПакета = Неопределено;
			Возврат ИдентификаторПакета;
		КонецЕсли;
		
		НаборЗаписейСоставаПакета = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			НоваяЗаписьСоставаПакета = НаборЗаписейСоставаПакета.Добавить();
			НоваяЗаписьСоставаПакета.ЭлектронныйДокумент = ЭлектронныйДокумент;
			НоваяЗаписьСоставаПакета.ИдентификаторПакета = ИдентификаторПакета;
		КонецЦикла;
		НаборЗаписейСоставаПакета.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИдентификаторПакета = Неопределено;
		
		ВидОперации = НСтр("ru = 'Создание пакета документов'");
		ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
		
		ЗаголовокОшибки = НСтр("ru = 'Не удалось создать пакет документов'");
		
		КраткоеПредставление = ЗаголовокОшибки + Символы.ПС
			+ ОбщегоНазначенияБЭД.КраткоеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		
		СвойстваДокументовДляПредставления = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(
			ЭлектронныеДокументы);
		
		ПредставленияДокументов = Новый Массив; // Массив из Строка
		Для Каждого СвойстваДокументаДляПредставления Из СвойстваДокументовДляПредставления Цикл
			ПредставленияДокументов.Добавить(ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(
				СвойстваДокументаДляПредставления.Значение));
		КонецЦикла;
	
		МассивСтрок = Новый Массив; // Массив из Строка
		МассивСтрок.Добавить(ЗаголовокОшибки);
		МассивСтрок.Добавить(СтрСоединить(ПредставленияДокументов, ", "));
		МассивСтрок.Добавить(ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке()));
		ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецПопытки;
	
	Возврат ИдентификаторПакета;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = Ложь;
	ВидОперации = НСтр("ru = 'Удаление электронного документа из пакета'");
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		ДобавитьОшибкуИзмененияСоставаПакетаВходящегоЭДО(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент);
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаПакетаДокументов(ИдентификаторПакета).Заблокировать();
		
		ДокументыПакета = ДокументыПакета(ИдентификаторПакета);
		
		СостоянияДокументовПоЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыПакета);
		
		Если Не ЗначениеЗаполнено(СостоянияДокументовПоЭДО)
			ИЛИ СостоянияДокументовПоЭДО[ЭлектронныйДокумент] = Неопределено Тогда
			Результат = Истина;
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		ИначеЕсли ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Если СостоянияДокументовПоЭДО.Количество() > 2 Тогда
			НаборЗаписейСоставаПакета = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
			НаборЗаписейСоставаПакета.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
			НаборЗаписейСоставаПакета.Записать();
			
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ДокументыПакета, ЭлектронныйДокумент);
			
			СвойстваДокументовДляОписанияПакета = ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов(
				ДокументыПакета);
			
			Если ЗначениеЗаполнено(СвойстваДокументовДляОписанияПакета) Тогда
				СвойстваДокументовДляОписанияПакета.Сортировать("Дата");
				ОписаниеПакета = НовоеОписаниеПакета();
				ЗаполнитьЗначенияСвойств(ОписаниеПакета, СвойстваДокументовДляОписанияПакета[0]);
				ОбновитьОписаниеПакета(ОписаниеПакета);
			КонецЕсли;
		Иначе
			НаборЗаписейПакета = РегистрыСведений.ПакетыДокументовЭДО.СоздатьНаборЗаписей();
			НаборЗаписейПакета.Отбор.ИдентификаторПакета.Установить(ИдентификаторПакета);
			НаборЗаписейПакета.Записать();
			
			Для Каждого СостояниеДокумента Из СостоянияДокументовПоЭДО Цикл
				НаборЗаписейСоставаПакета = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
				НаборЗаписейСоставаПакета.Отбор.ЭлектронныйДокумент.Установить(СостояниеДокумента.Ключ);
				НаборЗаписейСоставаПакета.Записать();
			КонецЦикла; 
		КонецЕсли;
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		ДобавитьОшибкуИзмененияСоставаПакетаИсходящегоЭДО(КонтекстДиагностики, ВидОперации,
			ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки);
	КонецПопытки;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Добавить документ в пакет
Функция ДобавитьДокументВПакет(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	Результат = Ложь;
	ВидОперации = НСтр("ru = 'Добавление электронного документа в пакет'");
	
	Если ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
		ДобавитьОшибкуИзмененияСоставаПакетаВходящегоЭДО(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент);
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаПакетаДокументов(ИдентификаторПакета).Заблокировать();
		
		ДокументыПакета = ДокументыПакета(ИдентификаторПакета);
		ДокументыПакета.Добавить(ЭлектронныйДокумент);
		
		СостоянияДокументовПоЭДО = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыПакета);
		
		Если ЗначениеЗаполнено(СостоянияДокументовПоЭДО)
			И ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики) Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		Иначе
			
			СвойстваДокументовДляОписанияПакета = ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов(
				ДокументыПакета);
			
			Если ЗначениеЗаполнено(СвойстваДокументовДляОписанияПакета) Тогда
				СвойстваДокументовДляОписанияПакета.Сортировать("Дата");
				ОписаниеПакета = НовоеОписаниеПакета();
				ЗаполнитьЗначенияСвойств(ОписаниеПакета, СвойстваДокументовДляОписанияПакета[0]);
				ОбновитьОписаниеПакета(ОписаниеПакета);
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьМенеджерЗаписи();
		НоваяЗапись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НоваяЗапись.ИдентификаторПакета = ИдентификаторПакета;
		НоваяЗапись.Записать();
		
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВидОперации = НСтр("ru = 'Добавление электронного документа из пакета'");
		ТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		ДобавитьОшибкуИзмененияСоставаПакетаИсходящегоЭДО(КонтекстДиагностики, ВидОперации,
			ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция СостоянияДокументовПакета(ИдентификаторПакета) Экспорт
	
	ДокументыПакета = ДокументыПакета(ИдентификаторПакета);
	
	СостоянияПоДокументам = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыПакета);
	
	СостоянияДокументовПоЭДО = ОбщегоНазначения.ВыгрузитьКолонку(СостоянияПоДокументам, "Значение");
	
	Возврат СостоянияДокументовПоЭДО;
	
КонецФункции

// Параметры:
//  СостоянияДокументовПоЭДО - см. СостоянияДокументовПакета
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументовЭДО
//
Функция СостояниеПакета(СостоянияДокументовПоЭДО) Экспорт
	
	Возврат СводноеСостояниеПакета(СостоянияДокументовПоЭДО);
	
КонецФункции

// Параметры:
//  СостоянияДокументовПоЭДО - см. СостоянияДокументовПакета
// 
// Возвращаемое значение:
//  Булево
//
Функция ДоступноИзменениеПакета(СостоянияДокументовПоЭДО) Экспорт
	
	Результат = Истина;
	
	Для Каждого Состояние Из СостоянияДокументовПоЭДО Цикл
		
		Если Состояние <> Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
			И Состояние <> Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
			И Состояние <> Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  МассивСостояний - Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
//  ИдентификаторПакета - УникальныйИдентификатор
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция СостоянияДокументовПакетаОднородны(МассивСостояний, ИдентификаторПакета, Действие, КонтекстДиагностики) Экспорт
	
	Если СводноеСостояниеПакета(МассивСостояний) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПредставлениеДействия = НРег(Строка(Действие));
	ВидОперации =  СтрШаблон(НСтр("ru = 'Действие %1'"), ПредставлениеДействия);
	ВидОшибки = ВидОшибкиСостоянияДокументовПакетаНеоднородны();
	
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Операция ""%1"" недоступна для документов пакета.
		|Состояния документов пакета неоднородны.'"), ПредставлениеДействия);
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаПакетаДокументов(ИдентификаторПакета) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПакетыДокументовЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторПакета", ИдентификаторПакета);
	Возврат Блокировка;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаСоставаПакетаДокумента(ЭлектронныйДокумент) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовДокументовЭДО");
	ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Возврат Блокировка;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДополнитьДокументамиПакетов(ЭлектронныеДокументы) Экспорт
	
	ИдентификаторыПакетовДокументов = ИдентификаторыПакетовДокументов(ЭлектронныеДокументы);
	ИдентификаторыПакетов = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыПакетовДокументов, "Значение", Истина);
	ДокументыПакетов = ДокументыПакетов(ИдентификаторыПакетов);
	
	Для Каждого ДокументыПоПакету Из ДокументыПакетов Цикл
		ДокументыПакета = ДокументыПоПакету.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеДокументы, ДокументыПакета, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СвойстваДокументовДляОписанияПакета - см. ЭлектронныеДокументыЭДО.СвойстваДокументовДляОписанияПакетов
Процедура ЗагрузитьДокументыПакета(СвойстваДокументовДляОписанияПакета) Экспорт
	
	ЭлектронныеДокументы = СвойстваДокументовДляОписанияПакета.ВыгрузитьКолонку("Ссылка"); // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаСоставаПакетаДокументов(СвойстваДокументовДляОписанияПакета, "Ссылка").Заблокировать();
		
		ИдентификаторыПакетовДокументов = ИдентификаторыПакетовДокументов(ЭлектронныеДокументы);
		
		ИдентификаторПакета = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		НовыеДокументыПакета = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
			ИдентификаторПакетаДокумента = ИдентификаторыПакетовДокументов[ЭлектронныйДокумент];
			Если ЗначениеЗаполнено(ИдентификаторПакетаДокумента) Тогда
				ИдентификаторПакета = ИдентификаторПакетаДокумента;
			Иначе
				НовыеДокументыПакета.Добавить(ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ИдентификаторПакета = НовыйИдентификаторПакета();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваДокументовДляОписанияПакета) Тогда
			СвойстваДокументовДляОписанияПакета.Сортировать("Дата");
			СвойстваПервогоДокумента = СвойстваДокументовДляОписанияПакета[0];
			НоваяЗаписьПакета = РегистрыСведений.ПакетыДокументовЭДО.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьПакета, СвойстваПервогоДокумента);
			НоваяЗаписьПакета.ИдентификаторПакета = ИдентификаторПакета;
			НоваяЗаписьПакета.Записать();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НовыеДокументыПакета) Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СоставПакета = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
		Для Каждого ЭлектронныйДокумент Из НовыеДокументыПакета Цикл
			НоваяЗаписьСоставаПакета = СоставПакета.Добавить();
			НоваяЗаписьСоставаПакета.ЭлектронныйДокумент = ЭлектронныйДокумент;
			НоваяЗаписьСоставаПакета.ИдентификаторПакета = ИдентификаторПакета;
		КонецЦикла;
		СоставПакета.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаИдентификатораПакетаДокумента()
	Возврат 
		"ВЫБРАТЬ
		|	СоставПакетовЭлектронныхДокументов.ИдентификаторПакета КАК ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовЭлектронныхДокументов
		|ГДЕ
		|	СоставПакетовЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент";
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  РезультатЗапроса
Функция РезультатЗапросаДокументовПакета(ИдентификаторПакета)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПакета", ИдентификаторПакета);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовЭлектронныхДокументов.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовЭлектронныхДокументов
		|ГДЕ
		|	СоставПакетовЭлектронныхДокументов.ИдентификаторПакета = &ИдентификаторПакета";
	Возврат Запрос.Выполнить();
КонецФункции

// Параметры:
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики = Неопределено)
	Возврат ЭлектронныеДокументыЭДО.ВыполнениеДействийПоЭДОЗапрещено(КонтекстДиагностики);
КонецФункции

// Параметры:
//  СостоянияДокументовПоЭДО - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево - Изменение состава пакета недоступно
Функция ИзменениеСоставаПакетаНедоступно(СостоянияДокументовПоЭДО, КонтекстДиагностики = Неопределено)
	
	Результат = Ложь;
	
	СостоянияИзмененияПакета = СостоянияДокументовДляИзмененияПакета();
	
	БлокирующиеДокументы = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	
	Для Каждого СостояниеДокумента Из СостоянияДокументовПоЭДО Цикл
		Если СостоянияИзмененияПакета.Найти(СостояниеДокумента.Значение) = Неопределено Тогда
			Результат = Истина;
			БлокирующиеДокументы.Добавить(СостояниеДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если КонтекстДиагностики <> Неопределено И Результат Тогда
		СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(БлокирующиеДокументы);
		ПредставленияДокументов = Новый Массив; // Массив из Строка
		Для Каждого СвойстваДокумента Из СвойстваДокументов Цикл
			ПредставленияДокументов.Добавить(ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(
				СвойстваДокумента.Значение));
		КонецЦикла;
		ВидОперации = НСтр("ru = 'Изменение состава пакета документов'");
		КраткоеПредставление = НСтр("ru = 'Изменение состава пакета недоступно.'");
		ПодробноеПредставление = СтрШаблон(
			НСтр("ru = 'Изменение состава пакета доступно для документов в состоянии: %1.
			|Документы %2 находятся в другом состоянии.'"),
			СтрСоединить(СостоянияИзмененияПакета, ", "),
			СтрСоединить(ПредставленияДокументов, ", "));
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибкиИзменениеСоставаПакетаНедоступно(),
			ПодробноеПредставление, КраткоеПредставление);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостоянияДокументовДляИзмененияПакета()
	СостоянияИзмененияПакета = Новый Массив; //  Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
	СостоянияИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияИзмененияПакета.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
	Возврат СостоянияИзмененияПакета;
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиИзменениеСоставаПакетаНедоступно()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ИзменениеСоставаПакетаНедоступно";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Изменение пакета недоступно'");
	Возврат ВидОшибки;
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиДокументыВСоставеДругогоПакета()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыВСоставеДругогоПакета";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы в составе другого пакета'");
	Возврат ВидОшибки;
КонецФункции

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиСостоянияДокументовПакетаНеоднородны()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "СостоянияДокументовПакетаНеоднородны";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Состояние документов пакета неоднородно'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Выполнить действие отдельно для электронного документа'");
	Возврат ВидОшибки;
КонецФункции

// Параметры:
//  ДокументыВСоставеДругогоПакета - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОшибкуДокументыВСоставеДругогоПакета(ДокументыВСоставеДругогоПакета, КонтекстДиагностики)
	
	ВидОперации = НСтр("ru = 'Создание пакета документов'");
	
	ВидОшибки = ВидОшибкиДокументыВСоставеДругогоПакета();
	
	КраткоеПредставление = НСтр("ru = 'Не удалось создать пакет документов по причине:
		|электронные документы входят в состав другого пакета.'");
	
	СвойстваПоДокументам = ЭлектронныеДокументыЭДО.СвойстваДокументовДляПредставления(ДокументыВСоставеДругогоПакета);
	
	ПредставленияДокументов = Новый Массив; // Массив из Строка
	Для Каждого СвойстваПоДокументу Из СвойстваПоДокументам Цикл
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваПоДокументу.Значение);
		ПредставленияДокументов.Добавить(ПредставлениеДокумента);
	КонецЦикла;
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрСоединить(ПредставленияДокументов, ", "));
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - Неопределено - ошибка не добавляется в контекст.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка - текстовое описание операции.
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДобавитьОшибкуИзмененияСоставаПакетаВходящегоЭДО(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент)
		
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОшибки = ВидОшибкиИзменениеСоставаПакетаНедоступно();
	
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось выполнить %1 для %2.'"),
		НРег(ВидОперации), ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент));
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(НСтр("ru = 'Изменение состава пакета входящих документов недоступно.'"));
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуИзмененияСоставаПакетаИсходящегоЭДО(КонтекстДиагностики, ВидОперации, ИдентификаторПакета, ЭлектронныйДокумент, ТекстОшибки)
	
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторДокументооборота, Номер");
	КраткоеПредставление = СтрШаблон(НСтр("ru = 'Не удалось выполнить %1 для %2.'"),
		НРег(ВидОперации), ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента));
	
	МассивСтрок = Новый Массив; // Массив из Строка
	МассивСтрок.Добавить(КраткоеПредставление);
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор пакета: %1'"), ИдентификаторПакета));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Внутренний номер документа: %1'"), СвойстваДокумента.Номер));
	МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор документооборота: %1'"),
		СвойстваДокумента.ИдентификаторДокументооборота));
	МассивСтрок.Добавить(ТекстОшибки);
	ПодробноеПредставление = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ПодробноеПредставление, КраткоеПредставление);
	ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, ПодсистемыБЭД.ОбменСКонтрагентами);
	
КонецПроцедуры

// Параметры:
//  СоставПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТекущийДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КоличествоОтображаемыхДокументовПакета - Число
// 
// Возвращаемое значение:
//  Структура:
//  * ИндексНачалоВыводаЭлементов - Число
//  * ИндексКонцаВыводаЭлементов - Число
Функция ГраницыВыводаДокументовПакета(СоставПакета, ТекущийДокумент, КоличествоОтображаемыхДокументовПакета)
	
	ИндексДокумента = 1;
	
	Для Каждого Документ Из СоставПакета Цикл
		Если Документ.Значение = ТекущийДокумент Тогда
			Прервать;
		КонецЕсли;
		ИндексДокумента = ИндексДокумента + 1;
	КонецЦикла;
	
	ВсегоДокументов = СоставПакета.Количество();
	КоличествоОтображаемыхДокументов = ?(ВсегоДокументов < КоличествоОтображаемыхДокументовПакета, ВсегоДокументов,
		КоличествоОтображаемыхДокументовПакета);
	КоличествоДокументовСправа = ВсегоДокументов - ИндексДокумента;
	
	ПозицияДокументаНаПанели = ?(КоличествоОтображаемыхДокументов - КоличествоДокументовСправа
		< КоличествоОтображаемыхДокументов - 1, 1, КоличествоОтображаемыхДокументов - КоличествоДокументовСправа);	
	ДополнительноВыводимыхСправа = КоличествоОтображаемыхДокументов - ПозицияДокументаНаПанели;	
	ДополнительноВыводимыхСлева = ПозицияДокументаНаПанели - 1;
	
	Результат = Новый Структура;
	Результат.Вставить("ИндексНачалоВыводаЭлементов", ИндексДокумента - ДополнительноВыводимыхСлева);
	Результат.Вставить("ИндексКонцаВыводаЭлементов", ИндексДокумента + ДополнительноВыводимыхСправа);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИсточникДанных - ТаблицаЗначений
//  ПолеИсточника - Строка - Имя колонки с электронными документами.
// 
// Возвращаемое значение:
//  БлокировкаДанных
Функция БлокировкаСоставаПакетаДокументов(ИсточникДанных, ПолеИсточника)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовДокументовЭДО");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЭлектронныйДокумент", ПолеИсточника);
	Возврат Блокировка;
КонецФункции

// Возвращаемое значение:
//  УникальныйИдентификатор
Функция НовыйИдентификаторПакета()
	Возврат Новый УникальныйИдентификатор;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * ИдентификаторПакета - УникальныйИдентификатор
// * Организация - Неопределено,ОпределяемыйТип.Организация
// * Контрагент - Неопределено,ОпределяемыйТип.КонтрагентБЭД
// * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// * Дата - Дата
Функция НовоеОписаниеПакета()
	ОписаниеПакета = Новый Структура;
	ОписаниеПакета.Вставить("ИдентификаторПакета", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	ОписаниеПакета.Вставить("Организация", Неопределено);
	ОписаниеПакета.Вставить("Контрагент", Неопределено);
	ОписаниеПакета.Вставить("ДоговорКонтрагента", Неопределено);
	ОписаниеПакета.Вставить("Дата", '00010101');
	Возврат ОписаниеПакета;
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - УникальныйИдентификатор
Функция ИдентификаторыПакетовДокументов(ЭлектронныеДокументы)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ЭлектронныйДокумент, Выборка.ИдентификаторПакета);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторыПакетов - Массив из УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - УникальныйИдентификатор
//  * Значение - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПакетов(ИдентификаторыПакетов)
	
	ДокументыПакетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ИдентификаторыПакетов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ИдентификаторыПакетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДокументыПакетов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыПакета = ДокументыПакетов[Выборка.ИдентификаторПакета]; // Неопределено,Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		Если ДокументыПакета = Неопределено Тогда
			ДокументыПакета = Новый Массив;
			ДокументыПакетов.Вставить(Выборка.ИдентификаторПакета, ДокументыПакета);
		КонецЕсли;
		
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент; // ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		ДокументыПакета.Добавить(ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Возврат ДокументыПакетов;
	
КонецФункции

// Параметры:
//  ОписаниеПакета - см. НовоеОписаниеПакета
Процедура ОбновитьОписаниеПакета(ОписаниеПакета)
	НоваяЗапись = РегистрыСведений.ПакетыДокументовЭДО.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ОписаниеПакета);
	НоваяЗапись.Записать();
КонецПроцедуры

#Область СостояниеПакета

// Параметры:
//  МассивСостояний - Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
// Возвращаемое значение:
//  - Неопределено - если состояние неоднородно.
//  - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние пакета документа.
//
Функция СводноеСостояниеПакета(МассивСостояний)
	
	СостояниеПакета = Неопределено;
	
	ПорядокСостояний = Новый ТаблицаЗначений;
	ПорядокСостояний.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ПорядокСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументовЭДО"));
	
	ТолькоОсновной = Ложь;
	ТолькоОтклонение = Ложь;
	ТолькоАннулирование = Ложь;
	СостоянияОдинаковы = Истина;
	
	ЭтоПерваяИтерация = Истина;
	ПредыдущееСостояние = Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
	Для Каждого Состояние Из МассивСостояний Цикл
		
		Если Не ЭтоПерваяИтерация Тогда
			Если ПредыдущееСостояние <> Состояние Тогда
				СостоянияОдинаковы = Ложь
			КонецЕсли;
			Если Не (СостоянияОдинаковы ИЛИ ТолькоОсновной ИЛИ ТолькоОтклонение ИЛИ ТолькоАннулирование) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущееСостояние = Состояние;
		
		Если ТолькоОсновной ИЛИ ЭтоПерваяИтерация Тогда
			
			Порядок = ПорядокСостоянияОсновной(Состояние);
			Если Порядок > 0 Тогда
				ТолькоОсновной = Истина;
				ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние);
				ЭтоПерваяИтерация = Ложь;
				Продолжить;
			ИначеЕсли ТолькоОсновной Тогда
				ТолькоОсновной = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТолькоОтклонение ИЛИ ЭтоПерваяИтерация Тогда
			
			Порядок = ПорядокСостоянияОтклонение(Состояние);
			Если Порядок > 0 Тогда
				ТолькоОтклонение = Истина;
				ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние);
				ЭтоПерваяИтерация = Ложь;
				Продолжить;
			ИначеЕсли ТолькоОтклонение Тогда
				ТолькоОтклонение = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТолькоАннулирование ИЛИ ЭтоПерваяИтерация Тогда
			
			Порядок = ПорядокСостоянияАннулирование(Состояние);
			Если Порядок > 0 Тогда
				ТолькоАннулирование = Истина;
				ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние);
				ЭтоПерваяИтерация = Ложь;
				Продолжить;
			ИначеЕсли ТолькоАннулирование Тогда
				ТолькоАннулирование = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Если СостоянияОдинаковы Тогда
		СостояниеПакета = ПредыдущееСостояние;
	ИначеЕсли ЗначениеЗаполнено(ПорядокСостояний)
		И (ТолькоОсновной ИЛИ ТолькоОтклонение ИЛИ ТолькоАннулирование) Тогда
		ПорядокСостояний.Сортировать("Порядок");
		СостояниеПакета = ПорядокСостояний[0].Состояние;
	КонецЕсли;
	
	Возврат СостояниеПакета;
	
КонецФункции

// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Число
//
Функция ПорядокСостоянияОсновной(Состояние)
	Порядок = 0;
	Если Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		Порядок = 1;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		Порядок = 2;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		Порядок = 3;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		Порядок = 4;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		Порядок = 5;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		Порядок = 6;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		Порядок = 7;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		Порядок = 8;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		Порядок = 9;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		Порядок = 10;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		Порядок = 11;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		Порядок = 12;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		Порядок = 13;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		Порядок = 14;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		Порядок = 15;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Число
//
Функция ПорядокСостоянияОтклонение(Состояние)
	Порядок = 0;
	Если Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		Порядок = 1;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		Порядок = 2;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		Порядок = 3;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		Порядок = 4;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		Порядок = 5;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		Порядок = 6;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		Порядок = 7;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		Порядок = 8;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		Порядок = 9;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
// Возвращаемое значение:
//  Число
//
Функция ПорядокСостоянияАннулирование(Состояние)
	Порядок = 0;
	Если Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		Порядок = 1;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		Порядок = 2;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		Порядок = 3;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		Порядок = 4;
	ИначеЕсли Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		Порядок = 5;
	КонецЕсли;
	Возврат Порядок;
КонецФункции

// Параметры:
//  ПорядокСостояний - ТаблицаЗначений:
//  * Порядок - Число
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  Порядок - Число
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//
Процедура ДобавитьПорядокСостояния(ПорядокСостояний, Порядок, Состояние)
	НоваяСтрока = ПорядокСостояний.Добавить();
	НоваяСтрока.Порядок = Порядок;
	НоваяСтрока.Состояние = Состояние;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
