
#Область СлужебныйПрограммныйИнтерфейс

#Область СервисЭДО

// Выполняет авторизацию в сервисе электронного документооборота.
// 
// Параметры:
// 	Оповещение - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после авторизации
//               со следующими параметрами:
//                  * Результат - см. ЗаполненныйРезультатАвторизации .
//                  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании 
//                                              объекта ОписаниеОповещения.
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 	УчетныеЗаписи - Массив из Строка - идентификаторы учетных записей, если не задан, авторизация выполняется по всем
//                                     доступным учетным записям.
// 	ПараметрыПодписки - см. НовыеПараметрыПодпискиНаОперациюАвторизации
Процедура АвторизоватьсяВСервисеЭлектронногоДокументооборота(Оповещение, КонтекстДиагностики,
	УчетныеЗаписи = Неопределено, ПараметрыПодписки = Неопределено) Экспорт
	
	Если ПараметрыПодписки = Неопределено Тогда
		ПараметрыПодписки = НовыеПараметрыПодпискиНаОперациюАвторизации();
	КонецЕсли;
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикЗавершения", Оповещение);
	Контекст.Вставить("ПараметрыПодписки", ПараметрыПодписки);
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	Контекст.Вставить("ОтпечаткиСертификатов", КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков());
	Контекст.Вставить("УчетныеЗаписи", УчетныеЗаписи);
	Контекст.Вставить("КлючиСинхронизации", СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект, Контекст);
	КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	
КонецПроцедуры

// Возвращает параметры подписки на процесс выполнения авторизации, см. АвторизоватьсяВСервисеЭлектронногоДокументооборота.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПослеПолученияОтпечатков - ОписаниеОповещения - содержит описание процедуры, которая
//             будет вызвана после получения отпечатков сертификатов со следующими параметрами:
//               * РезультатПолученияОтпечатков - см. КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков
//               * СтандартнаяОбработка - Булево - если Истина, то при возникновении ошибки, она будет добавлена
//                 в КонтекстДиагностики.
//               * ОшибкаПолученияОтпечатков - Строка
// * ПослеПолученияПараметровСинхронизации - ОписаниеОповещения - содержит описание процедуры, которая
//             будет вызвана после получения параметров синхронизации со следующими параметрами:
//               * КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
//               * ПараметрыСинхронизации - см. СинхронизацияЭДОСлужебный.ПараметрыСинхронизации - (служебное свойство).
//               * ПрерватьАвторизацию - Булево - если присвоить параметру значение Истина, авторизация будет прервана.
Функция НовыеПараметрыПодпискиНаОперациюАвторизации() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПослеПолученияОтпечатков", Неопределено);
	Параметры.Вставить("ПослеПолученияПараметровСинхронизации", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Определяет отказ пользователя от аутентификации
// 
// Параметры:
// 	РезультатАвторизации - см. ЗаполненныйРезультатАвторизации
// 	УчетнаяЗапись - Строка
// Возвращаемое значение:
// 	Булево
Функция ПользовательОтказалсяОтАутентификации(РезультатАвторизации, УчетнаяЗапись) Экспорт
	
	ОтказОтАутентификации = Ложь;
	Если ТипЗнч(РезультатАвторизации) = Тип("Структура") И РезультатАвторизации.Свойство("ОбработанныеУчетныеЗаписи") Тогда
		РезультатОперацииПоУчетнойЗаписи = РезультатАвторизации.ОбработанныеУчетныеЗаписи[УчетнаяЗапись];
		Если РезультатОперацииПоУчетнойЗаписи <> Неопределено 
			И РезультатОперацииПоУчетнойЗаписи.ПользовательОтказалсяОтОперации Тогда
			ОтказОтАутентификации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтказОтАутентификации;
	
КонецФункции

#КонецОбласти

#Область Приглашения

// См. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
Функция НовоеВходящееПриглашение(КлючПриглашения = "") Экспорт
	
	Возврат ПриглашенияЭДОКлиент.НовоеВходящееПриглашение(КлючПриглашения);
	
КонецФункции

// См. ПриглашенияЭДОКлиент.ОткрытьПриглашение
Процедура ОткрытьПриглашение(ИдентификаторОрганизации, ИдентификаторКонтрагента, Владелец = Неопределено,
	Организация = Неопределено, Контрагент = Неопределено) Экспорт
	
	КлючПриглашения = ПриглашенияЭДОКлиентСервер.КлючПриглашенияНаИдентификатор();
	КлючПриглашения.ИдентификаторОрганизации = ИдентификаторОрганизации;
	КлючПриглашения.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
	ПриглашенияЭДОКлиент.ОткрытьПриглашение(КлючПриглашения, Владелец, Организация, Контрагент);
	
КонецПроцедуры

// Открывает помощник отправки приглашения.
// 
// Параметры:
// 	ПараметрыОткрытия - см. НовыеПараметрыОткрытияПомощникаОтправкиПриглашения
// 	Оповещение - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после закрытия формы
//                                    со следующими параметрами:
//               * РезультатОтправки - Неопределено, Структура - если Неопределено, - приглашение не было отправлено,
//               иначе - структура с ключами:
//                   ** ИдентификаторОрганизации - Строка
//                   ** ИдентификаторКонтрагента - Строка
//               * ДополнительныеПараметры - Произвольный - содержит значение, которое было указано при создании
//                                                          объекта ОписаниеОповещения.
Процедура ОткрытьПомощникОтправкиПриглашения(ПараметрыОткрытия, Оповещение = Неопределено) Экспорт
	
	ПриглашенияЭДОКлиент.ОткрытьПомощникОтправкиПриглашения(ПараметрыОткрытия, Оповещение);
	
КонецПроцедуры

// Возвращает параметры открытия помощника отправки приглашения.
// 
// Возвращаемое значение:
// 	Структура:
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД
// * ИдентификаторОрганизации - Строка
// * ИдентификаторКонтрагента - Строка
Функция НовыеПараметрыОткрытияПомощникаОтправкиПриглашения() Экспорт
	
	Возврат ПриглашенияЭДОКлиент.НовыеПараметрыОткрытияПомощникаОтправкиПриглашения();
	
КонецФункции

// Отправляет приглашения к обмену электронными документами.
// 
// Параметры:
// 	Приглашения - Массив из см. НовоеПриглашениеНаИдентификатор
// 	            - Массив из см. НовоеШироковещательноеПриглашение
// 	            - Массив из см. НоваяЗаявкаНаРоуминг
// 	Форма - см. ПриглашенияЭДОКлиент.ОтправитьПриглашения.Форма
// 	Оповещение - см. ПриглашенияЭДОКлиент.ОтправитьПриглашения.Оповещение
Процедура ОтправитьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	Для Каждого Приглашение Из Приглашения Цикл
		Приглашение.СоздаватьНастройкиЭДО = Истина;
	КонецЦикла;
	
	ПриглашенияЭДОКлиент.ОтправитьПриглашения(Приглашения, Форма, Оповещение);
	
КонецПроцедуры

// См. ПриглашенияЭДОКлиент.ПринятьПриглашения
Процедура ПринятьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	ПриглашенияЭДОКлиент.ПринятьПриглашения(Приглашения, Форма, Оповещение);
	
КонецПроцедуры

// См. ПриглашенияЭДОКлиент.ОтклонитьПриглашения
Процедура ОтклонитьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	ПриглашенияЭДОКлиент.ОтклонитьПриглашения(Приглашения, Форма, Оповещение);
	
КонецПроцедуры

// См. ПриглашенияЭДОКлиент.ОтозватьПриглашения
Процедура ОтозватьПриглашения(Приглашения, Форма, Оповещение) Экспорт
	
	ПриглашенияЭДОКлиент.ОтозватьПриглашения(Приглашения, Форма, Оповещение);
	
КонецПроцедуры

// См. ПриглашенияЭДОКлиент.НовоеПриглашениеНаИдентификатор
Функция НовоеПриглашениеНаИдентификатор() Экспорт
	
	Возврат ПриглашенияЭДОКлиент.НовоеПриглашениеНаИдентификатор();
	
КонецФункции

// См. ПриглашенияЭДОКлиент.НовоеШироковещательноеПриглашение
Функция НовоеШироковещательноеПриглашение() Экспорт
	
	Возврат ПриглашенияЭДОКлиент.НовоеШироковещательноеПриглашение();
	
КонецФункции

// См. ПриглашенияЭДОКлиент.НоваяЗаявкаНаРоуминг
Функция НоваяЗаявкаНаРоуминг() Экспорт
	
	Возврат ПриглашенияЭДОКлиент.НоваяЗаявкаНаРоуминг();
	
КонецФункции

#КонецОбласти

#Область Синхронизация

// Формирует и отправляет транспортные контейнеры.
// 
// Параметры:
// 	Оповещение - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после отправки со 
// 	             следующими параметрами:
// 	               * РезультатОтправки - см. СинхронизацияЭДО.ОтправитьОбъекты
// 	               * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании 
// 	                                           объекта ОписаниеОповещения.
// 	КонтекстОтправки - Произвольный - см. ключ "КонтекстОтправки" результата, возвращаемого
// 	                                  методом см. СинхронизацияЭДО.ОтправитьОбъекты .
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
// 	ДополнительныеПараметры - Произвольный - передается в см. СинхронизацияЭДОСобытия.ПослеОтправкиОбъектов
Процедура ОтправитьОбъекты(Оповещение, КонтекстОтправки, КонтекстДиагностики,
	ПаролиСертификатов = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("КонтекстОтправки", КонтекстОтправки);
	Контекст.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("ПаролиСертификатов", ПаролиСертификатов);
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ПослеПолученияПараметровАутентификации = Новый ОписаниеОповещения(
		"СформироватьИОтправитьТранспортныеКонтейнерыПослеПолученияПараметровАутентификации", ЭтотОбъект, Контекст);
	
	СервисЭДОКлиент.ПолучитьПараметрыАутентификации(ПослеПолученияПараметровАутентификации,
		КонтекстОтправки.КлючиСинхронизации, КонтекстДиагностики, ПаролиСертификатов);
	
КонецПроцедуры

// Выполняет обмен электронными документами.
// 
// Параметры:
// 	ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой выполняется обмен.
// 	КонтекстОжиданияОперации - см. ОжиданиеОперацийБЭДКлиент.НовыйКонтекст
// 	Оповещение - ОписаниеОповещения - описание процедуры, которая будет выполнена после завершения обмена
//               со следующими параметрами:
//                 * Результат - Неопределено - всегда содержит Неопределено.
//                 * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                             объекта ОписаниеОповещения.
Процедура ВыполнитьОбменЭлектроннымиДокументами(ФормаВладелец, КонтекстОжиданияОперации = Неопределено,
	Оповещение = Неопределено) Экспорт
	
	СинхронизацияЭДОСлужебныйКлиент.ВыполнитьОбменЭлектроннымиДокументами(ФормаВладелец, КонтекстОжиданияОперации,
		Оповещение);
	
КонецПроцедуры

// См. СинхронизацияЭДО.ЕстьПравоВыполненияОбмена.
// 
// Параметры:
// 	СообщатьОбОшибке - Булево - вывести сообщение, если право отсутствует
// Возвращаемое значение:
// См. СинхронизацияЭДО.ЕстьПравоВыполненияОбмена
Функция ЕстьПравоВыполненияОбмена(СообщатьОбОшибке = Ложь) Экспорт
	
	ЕстьПраво = СинхронизацияЭДОКлиентПовтИсп.ЕстьПравоВыполненияОбмена();
	Если Не ЕстьПраво И СообщатьОбОшибке Тогда
		ОбработкаНеисправностейБЭДКлиент.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает контекст операции синхронизации.
// 
// Возвращаемое значение:
// 	см. СинхронизацияЭДОСлужебныйКлиент.НовыйКонтекстОперацииСинхронизации
Функция НовыйКонтекстОперацииСинхронизации() Экспорт
	
	Возврат СинхронизацияЭДОСлужебныйКлиент.НовыйКонтекстОперацииСинхронизации();
	
КонецФункции

Процедура ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(ДлительнаяОперация, Оповещение, ВыводитьОкноОжидания = Ложь) Экспорт
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru='Проверяется возможность включения регламентного задания.'");
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	СлужебноеОповещение = Новый ОписаниеОповещения("ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданийЗавершение",
		ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, СлужебноеОповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПоказатьРезультатПроверкиНастроекРегламентныхЗаданий(РезультатПроверкиНастроек, Операция,
	ВладелецФормы = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверкиНастроек);
	ПараметрыФормы.Вставить("Операция", Операция);
	
	ОткрытьФорму("Обработка.СинхронизацияЭДО.Форма.ПомощникНастройкиРегламентныхЗаданий",
		ПараметрыФормы, ВладелецФормы,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПомощникРегистрацииСертификатов

// Открывает помощник регистрации сертификатов во время выполнении операции подписания или отправки
// электронного документа если для продолжения операции нет валидного сертификата.
//
// Параметры:
//  ПараметрыРегистрации - см. НовыеПараметрыРегистрацииСертификатов
//  ВладелецФормы - ФормаКлиентскогоПриложения - форма-владелец.
//  ОповещениеОЗакрытии - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана при закрытии
//                                             помощника регистрации сертификатов со следующими параметрами: 
//                        * РезультатЗакрытия - Неопределено.
//                        * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                                    объекта ОписаниеОповещения.
//
Процедура ОткрытьПомощникРегистрацииСертификатов(ПараметрыРегистрации, ВладелецФормы = Неопределено,
	ОповещениеОЗакрытии = Неопределено) Экспорт
	
	ПараметрыРегистрацииСертификатов = УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыРегистрацииСертификатов();
	ЗаполнитьЗначенияСвойств(ПараметрыРегистрацииСертификатов, ПараметрыРегистрации);
	УчетныеЗаписиЭДОКлиент.ОткрытьПомощникРегистрацииСертификатов(ПараметрыРегистрацииСертификатов, ВладелецФормы,
		ОповещениеОЗакрытии);
	
КонецПроцедуры

// Возвращает параметры регистрации сертификатов.
// 
// Возвращаемое значение:
// 	Структура:
// * Операция - Строка - представление текущей операции, возможные значения: "Подписание", "Отправка" или "Прочее"
// * Данные - Массив из Структура - ключи структуры - колонки таблицы значений
//            см. СинхронизацияЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов. Используется при виде операции "Подписание".
// * УчетныеЗаписи - Массив из Строка - учетные записи, у которых нет валидных сертификатов.
//                                      Используется при виде операции "Отправка" или "Прочее".
// * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция НовыеПараметрыРегистрацииСертификатов() Экспорт
	
	Возврат УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыРегистрацииСертификатов();
	
КонецФункции

// Возвращает виды операций помощника регистрации сертификатов.
// 
// Возвращаемое значение:
// 	Структура:
// * Отправка - Строка
// * Подписание - Строка
// * РегистрацияНепривязанныхСертификатов - Строка
// * Прочее - Строка
Функция ОперацииПомощникаРегистрацииСертификатов() Экспорт
	
	Возврат УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов();
	
КонецФункции

#КонецОбласти

#Область УчетныеЗаписи

// Открывает форму создания учетной записи электронного документооборота.
// 
// Параметры:
// 	ПараметрыСоздания - см. НовыеПараметрыСозданияУчетнойЗаписи
Процедура СоздатьУчетнуюЗапись(ПараметрыСоздания = Неопределено) Экспорт
	
	Если ПараметрыСоздания = Неопределено Тогда
		ПараметрыСоздания = НовыеПараметрыСозданияУчетнойЗаписи();
	КонецЕсли;
	
	ПараметрыСозданияУчетнойЗаписи = УчетныеЗаписиЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ЗаполнитьЗначенияСвойств(ПараметрыСозданияУчетнойЗаписи, ПараметрыСоздания);
	ПараметрыСозданияУчетнойЗаписи.РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	УчетныеЗаписиЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСозданияУчетнойЗаписи);
	
КонецПроцедуры

// Возвращает параметры для создания учетной записи электронного документооборота.
// 
// Возвращаемое значение:
// 	Структура:
// * Организация - ОпределяемыйТип.Организация - организация, для которой создается учетная запись
// * ВладелецФормы - Неопределено
// * СпособыОбмена - Массив из ПеречислениеСсылка.СпособыОбменаЭД
// * ОперацияЭДО - см. СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО
//               - см. СинхронизацияЭДОКлиентСервер.НоваяОперацияОбновленияСертификата
Функция НовыеПараметрыСозданияУчетнойЗаписи() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ВладелецФормы", Неопределено);
	Параметры.Вставить("СпособыОбмена", Новый Массив);
	Параметры.Вставить("ОперацияЭДО", Неопределено);
	Параметры.Вставить("НастройкаОперацииЭДО", Ложь);
	Параметры.Вставить("ОповещениеОЗавершении", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Открывает учетную запись электронного документооборота.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// 	ВладелецФормы - ФормаКлиентскогоПриложения
// 	Оповещение - ОписаниеОповещения
Процедура ОткрытьУчетнуюЗапись(ИдентификаторУчетнойЗаписи, ВладелецФормы = Неопределено,
	Оповещение = Неопределено) Экспорт
	
	УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗапись(ИдентификаторУчетнойЗаписи, ВладелецФормы, Оповещение);
	
КонецПроцедуры

// Открывает форму создания учетной записи электронного документооборота через сервис 1С:ЭДО.
// 
// Параметры:
// 	ПараметрыСоздания - см. НовыеПараметрыСозданияУчетнойЗаписи
Процедура СоздатьУчетнуюЗапись1СЭДО() Экспорт
	
	ПараметрыСозданияУчетнойЗаписи = УчетныеЗаписиЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ПараметрыСозданияУчетнойЗаписи.СпособыОбмена.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	ПараметрыСозданияУчетнойЗаписи.РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	УчетныеЗаписиЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСозданияУчетнойЗаписи);
	
КонецПроцедуры

// Открывает учетную запись электронного документооборота прямого обмена.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	ВладелецФормы - ФормаКлиентскогоПриложения
// 	Оповещение - ОписаниеОповещения
Процедура ОткрытьУчетнуюЗаписьПрямогоОбмена(Организация, ВладелецФормы = Неопределено, Оповещение = Неопределено) Экспорт
	
	УчетныеЗаписиЭДОКлиент.ОткрытьУчетнуюЗаписьПрямогоОбмена(Организация, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму списка учетных записей организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияБЭД - Организация
Процедура ОткрытьСписокУчетныхЗаписей(Организация = Неопределено) Экспорт
	
	УчетныеЗаписиЭДОКлиент.ОткрытьСписокУчетныхЗаписей(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеКонтейнеры

// См. ТранспортныеКонтейнерыЭДОКлиент.ОткрытьСписокКонтейнеров
Процедура ОткрытьСписокТранспортныхКонтейнеров(ПараметрыФормы = Неопределено,
	ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	ТранспортныеКонтейнерыЭДОКлиент.ОткрытьСписокКонтейнеров(ПараметрыФормы, ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Открывает форму транспортного контейнера.
// 
// Параметры:
// 	Сообщение - ДокументСсылка.СообщениеЭДО
Процедура ОткрытьТранспортныйКонтейнерСообщения(Сообщение) Экспорт
	
	ТранспортныеКонтейнерыЭДОКлиент.ОткрытьКонтейнерСообщения(Сообщение);
	
КонецПроцедуры

// Распаковывает транспортные контейнеры.
// 
// Параметры:
// 	Контейнеры - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
Процедура РаспаковатьТранспортныеКонтейнеры(Контейнеры) Экспорт
	
	ТранспортныеКонтейнерыЭДОКлиент.РаспаковатьКонтейнеры(Контейнеры);
	
КонецПроцедуры

#КонецОбласти

#Область ОповещенияОСобытиях

// Проверяет наличие новых электронных документов в сервисе 1С-ЭДО и выводит сообщение пользователю.
Процедура ПроверитьНаличиеНовыхЭлектронныхДокументовВСервисе1СЭДО() Экспорт
	
	ОповещенияОСобытияхЭДОКлиент.ПроверитьНаличиеНовыхЭлектронныхДокументовВСервисе1СЭДО();
	
КонецПроцедуры

Процедура ПодключитьОповещенияОНовыхЭлектронныхДокументах(Включить = Истина) Экспорт
	
	ОповещенияОСобытияхЭДОКлиент.ПодключитьОповещенияОНовыхЭлектронныхДокументах(Включить);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Показывает условия использования сервиса 1С-ЭДО.
// 
// Параметры:
// 	ПараметрыФормы - Структура:
// 	  * УчетныеЗаписиЭДО - Массив из Строка
// 	  * ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена - Булево
// 	ОповещениеОЗавершении - ОписаниеОповещения - содержит описание процедуры, которая будет выполнена после закрытия 
//                          формы с условиями использования.
Процедура ПоказатьУсловияИспользованияСервиса1СЭДО(ПараметрыФормы = Неопределено,
	ОповещениеОЗавершении = Неопределено) Экспорт
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.УсловияИспользования", ПараметрыФормы,
		,,,, ОповещениеОЗавершении);
	
КонецПроцедуры

// Открывает сайт сервиса 1С-ЭДО.
Процедура ОткрытьСайтСервиса1СЭДО() Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://1c-edo.ru");
	
КонецПроцедуры

// Открывает сайт сервиса 1С:Бизнес-сеть.
Процедура ОткрытьСайтСервисаБизнесСеть() Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСетьКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("БизнесСетьКлиентСервер");
		СсылкаНаСайтБизнесСеть = МодульБизнесСетьКлиентСервер.ГиперссылкаНаПромоСайтЭДО();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаСайтБизнесСеть);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Работа с сервисом 1С:Бизнес-сеть не поддерживается'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения = Неопределено) Экспорт
	
	СинхронизацияЭДОВызовСервера.ОбновитьКешиОператоровЭДОИФорматов();
	
	ПроцессВыполнения = СинхронизацияЭДОСлужебныйКлиент.НовыйПроцессВыполненияОперацииЭДО(ОперацияЭДО,
		ОбработкаЗавершения, ОбработкаПрогрессаВыполнения);
	
	СинхронизацияЭДОСлужебныйКлиент.ВыполнитьОперациюЭДО(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

// Открывает форму настройки операции ЭДО.
//
// Параметры:
//  ОперацияЭДО - см. СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО
//              - см. СинхронизацияЭДОКлиентСервер.НоваяОперацияОбновленияСертификата
//  ОбработкаЗавершения - ОписаниеОповещения - описание процедуры, которая будет вызвана при закрытии формы со следующими параметрами:
//   * ОперацияЭДО - Структура - измененная в форме операция ЭДО.
//                 - Неопределено - пользователь не сохранил изменения.
//   * ДополнительныеПараметры - Произвольный - параметры указанные при создании объекта ОбработкаЗавершения.
//
Процедура ОткрытьФормуНастройкиОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения) Экспорт
	
	ОперацияПодключенияЭДО = СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		ПараметрыСоздания = УчетныеЗаписиЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
		ПараметрыСоздания.НастройкаОперацииЭДО = Истина;
		ПараметрыСоздания.Организация = ОперацияЭДО.Параметры.Организация;
		ПараметрыСоздания.ОперацияЭДО = ОперацияЭДО;
		ПараметрыСоздания.РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ПараметрыСоздания.ОповещениеОЗавершении = ОбработкаЗавершения;
		
		УчетныеЗаписиЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, ОперацияЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияСУчетнойСистемой

// См. ИнтеграцияЭДОСобытияКлиент.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ОповещенияОСобытияхЭДОКлиент.ПослеНачалаРаботыСистемы();
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияСУчетнойСистемой

// ЭлектронноеВзаимодействие.БазоваяФункциональность.ОбработкаНеисправностей

Процедура ПоказатьДействияПриНаличииНеполученныхДокументов(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыИсправленияОшибок();
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Изменить дату запроса данных в учетной записи ЭДО'");
	Команда.Обработчик = "СинхронизацияЭДОКлиент.ИзменитьДатуЗапросаДанных";
	Команда.Подсказка = НСтр("ru = 'Если дата получения документов не сдвигалась вручную, рекомендуется выбрать этот пункт, чтобы получить документы.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Игнорировать предупреждение'");
	Команда.Обработчик = "СинхронизацияЭДОКлиент.ИгнорироватьПредупреждениеОНеполученныхДокументах";
	Команда.Подсказка = НСтр("ru = 'Выберите этот пункт, если дата получения документов менялась вручную осознанно.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	СинхронизацияЭДОСлужебныйКлиент.ПоказатьДействияПриНаличииНеполученныхДокументовИПриглашений(КонтекстДиагностики,
		ПараметрыИсправленияОшибок.Команды);
	
КонецПроцедуры

Процедура ПоказатьДействияПриНаличииНеполученныхПриглашений(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыИсправленияОшибок();
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Изменить дату запроса данных в учетной записи ЭДО'");
	Команда.Обработчик = "СинхронизацияЭДОКлиент.ИзменитьДатуЗапросаДанных";
	Команда.Подсказка = НСтр("ru = 'Если дата получения приглашений не сдвигалась вручную, рекомендуется выбрать этот пункт, чтобы получить приглашения.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Игнорировать предупреждение'");
	Команда.Обработчик = "СинхронизацияЭДОКлиент.ИгнорироватьПредупреждениеОНеполученныхДокументах";
	Команда.Подсказка = НСтр("ru = 'Выберите этот пункт, если дата получения приглашений менялась вручную осознанно.'");
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	СинхронизацияЭДОСлужебныйКлиент.ПоказатьДействияПриНаличииНеполученныхДокументовИПриглашений(КонтекстДиагностики,
		ПараметрыИсправленияОшибок.Команды);
	
КонецПроцедуры

Процедура ДобавитьСертификатУчетнойЗаписи(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	ДополнительныеДанные = ОбработкаНеисправностейБЭДКлиентСервер.ЗначенияСвойствОшибок(Ошибки,
		"ДополнительныеДанные");
	Если ДополнительныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРегистрации = ДополнительныеДанные[0];
	
	ОткрытьПомощникРегистрацииСертификатов(ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ИзменитьДатуЗапросаДанных(Результат, ДополнительныеПараметры) Экспорт
	
	ИсправленныеОшибки = Неопределено;
	СинхронизацияЭДОВызовСервера.ИзменитьДатуЗапросаДанных(Результат,
		ДополнительныеПараметры.КонтекстДиагностики, ДополнительныеПараметры.СоответствиеОшибокДанным,
		ИсправленныеОшибки);
	
	ОбработкаНеисправностейБЭДКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
	Оповестить(ОбработкаНеисправностейБЭДКлиент.ИмяСобытияИсправлениеВидаОшибки(), Результат);
	
КонецПроцедуры

Процедура ИгнорироватьПредупреждениеОНеполученныхДокументах(Результат, ДополнительныеПараметры) Экспорт
	
	ИсправленныеОшибки = Неопределено;
	СинхронизацияЭДОВызовСервера.ИгнорироватьПредупреждениеОНеполученныхДокументах(Результат,
		ДополнительныеПараметры.КонтекстДиагностики, ДополнительныеПараметры.СоответствиеОшибокДанным,
		ИсправленныеОшибки);
	
	ОбработкаНеисправностейБЭДКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
	Оповестить(ОбработкаНеисправностейБЭДКлиент.ИмяСобытияИсправлениеВидаОшибки(), Результат);
	
КонецПроцедуры

Процедура ОткрытьНастройкиЭлектроннойПодписи(Ошибки, ДополнительныеПараметры) Экспорт
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
	
КонецПроцедуры

Процедура ПоказатьДействияДляНераспакованныхКонтейнеров(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	ПараметрыИсправленияОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыИсправленияОшибок();
	
	Команда = ОбработкаНеисправностейБЭДКлиент.НовоеОписаниеКомандыФормыИсправленияОшибок();
	Команда.Заголовок = НСтр("ru = 'Отменить распаковку контейнера'");
	Команда.Обработчик = "СинхронизацияЭДОКлиент.ОтменитьРаспаковкуКонтейнеров";
	ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	ТранспортныеКонтейнеры = Новый Массив;
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из Ошибки Цикл
		ТранспортныеКонтейнеры.Добавить(Ошибка.СсылкаНаОбъект);
		СоответствиеОшибокДанным.Вставить(Ошибка.СсылкаНаОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
	КонецЦикла;
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Истина;
	ПараметрыИсправленияОшибок.СкрытьКнопкуПросмотреть = Истина;
	
	ДополнительныеПараметрыОбработчиков = Новый Структура;
	ДополнительныеПараметрыОбработчиков.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	ДополнительныеПараметрыОбработчиков.Вставить("СоответствиеОшибокДанным", СоответствиеОшибокДанным);
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = ДополнительныеПараметрыОбработчиков;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ТранспортныеКонтейнеры);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ОбработкаНеисправностейБЭДКлиент.ИсправитьОшибки(ТранспортныеКонтейнеры, ПараметрыИсправленияОшибок);
	
КонецПроцедуры

Процедура ОтменитьРаспаковкуКонтейнеров(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = ТранспортныеКонтейнерыЭДОВызовСервера.НачатьОтменуРаспаковкиКонтейнеров(Результат);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	
	Описание = Новый ОписаниеОповещения("ПослеОтменыРаспаковкиКонтейнеров", ЭтотОбъект, ДополнительныеПараметры.СоответствиеОшибокДанным);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеОтменыРаспаковкиКонтейнеров(Результат, СоответствиеОшибокДанным) Экспорт
	
	Если Результат.Статус <> "Выполнено" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'При добавлении пакетов ЭД в исключения произошла ошибка: %1'"), Результат.КраткоеПредставлениеОшибки));
	Иначе 
		РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ИсправленныеОшибки = ОбработкаНеисправностейБЭДКлиент.ПолучитьИсправленныеОшибки(РезультатПроцедуры,
			СоответствиеОшибокДанным);
		ОбработкаНеисправностейБЭДКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
		Оповестить(ОбработкаНеисправностейБЭДКлиент.ИмяСобытияИсправлениеВидаОшибки(), РезультатПроцедуры);
		Оповестить("ОбновитьТекущиеДелаЭДО");
	КонецЕсли;
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.БазоваяФункциональность.ОбработкаНеисправностей

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик получения отпечатков.
// 
// Параметры:
// 	Результат - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
// 	Контекст - Структура
Процедура ПослеПолученияОтпечатков(Результат, Контекст) Экспорт
	
	ВидОперации = НСтр("ru = 'Авторизация в сервисе ЭДО'");
	ОшибкаПолученияОтпечатков = "";
	Результат = СинхронизацияЭДОВызовСервера.ПолучитьОтпечаткиСертификатов(ВидОперации, Контекст.КонтекстДиагностики, Результат,
		ОшибкаПолученияОтпечатков);
		
	РезультатДляПодписки = Новый Структура;
	РезультатДляПодписки.Вставить("РезультатПолученияОтпечатков", Результат);
	РезультатДляПодписки.Вставить("СтандартнаяОбработка", Истина);
	РезультатДляПодписки.Вставить("ОшибкаПолученияОтпечатков", ОшибкаПолученияОтпечатков);
	
	Если Контекст.ПараметрыПодписки.ПослеПолученияОтпечатков <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ПараметрыПодписки.ПослеПолученияОтпечатков,
			РезультатДляПодписки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаПолученияОтпечатков) Тогда
		Если РезультатДляПодписки.СтандартнаяОбработка Тогда
			ОбработатьОшибкуПолученияОтпечатков(ОшибкаПолученияОтпечатков, Контекст);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, ЗаполненныйРезультатАвторизации(Контекст));
		Возврат;
	КонецЕсли;
	
	Контекст.ОтпечаткиСертификатов = Результат;
	НачатьПолучениеПараметровСинхронизации(Контекст);
	
КонецПроцедуры

Процедура НачатьПолучениеПараметровСинхронизации(Контекст) 
	
	ПараметрыПолученияКлючей = Новый Структура;
	ПараметрыПолученияКлючей.Вставить("ОтпечаткиСертификатов", Контекст.ОтпечаткиСертификатов);
	ПараметрыПолученияКлючей.Вставить("УчетныеЗаписи", Контекст.УчетныеЗаписи);
	ПараметрыПолученияКлючей.Вставить("КонтекстДиагностики", Контекст.КонтекстДиагностики);
	ПараметрыПолученияКлючей.Вставить("ИдентификаторФормы", Новый УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияПараметровСинхронизации", ЭтотОбъект, Контекст);
	ИдентификаторЗадания = Неопределено;
	ПолучитьПараметрыСинхронизации(Оповещение, ПараметрыПолученияКлючей, ИдентификаторЗадания);
	
КонецПроцедуры

Процедура ПолучитьПараметрыСинхронизации(Оповещение, ПараметрыПолучения, ИдентификаторЗадания = Неопределено)
		
	ДлительнаяОперация = СинхронизацияЭДОВызовСервера.ЗапуститьПолучениеПараметровСинхронизации(
		ПараметрыПолучения, ПараметрыПолучения.ИдентификаторФормы);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПослеПолученияПараметровСинхронизации(Результат, Контекст) Экспорт
		
	ПараметрыСинхронизации = ОбщегоНазначенияБЭДКлиент.РезультатВыполненияФоновогоЗадания(
		НСтр("ru = 'Получение настроек электронного документооборота'"), Результат, Контекст.КонтекстДиагностики);
	
	Если ПараметрыСинхронизации = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, ЗаполненныйРезультатАвторизации(Контекст));
		Возврат;
	КонецЕсли;
	
	РезультатДляПодписки = Новый Структура;
	РезультатДляПодписки.Вставить("ПараметрыСинхронизации", ПараметрыСинхронизации);
	РезультатДляПодписки.Вставить("КлючиСинхронизации", ПараметрыСинхронизации.КлючиСинхронизации);
	РезультатДляПодписки.Вставить("ПрерватьАвторизацию", Ложь);
	
	Если Контекст.ПараметрыПодписки.ПослеПолученияПараметровСинхронизации <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ПараметрыПодписки.ПослеПолученияПараметровСинхронизации,
			РезультатДляПодписки);
	КонецЕсли;
	
	Если РезультатДляПодписки.ПрерватьАвторизацию Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.КлючиСинхронизации = ПараметрыСинхронизации.КлючиСинхронизации;
	Контекст.КонтекстДиагностики = ПараметрыСинхронизации.КонтекстДиагностики;
	Контекст.ОтпечаткиСертификатов = ПараметрыСинхронизации.ОтпечаткиСертификатов;
	
	ПолучитьПараметрыАутентификации(Контекст);
	
КонецПроцедуры

Процедура ПолучитьПараметрыАутентификации(Контекст)
	
	СервисЭДОКлиент.ПолучитьПараметрыАутентификации(Контекст.ОбработчикЗавершения, Контекст.КлючиСинхронизации,
		Контекст.КонтекстДиагностики, Контекст.ПаролиСертификатов, Контекст.ОбработанныеУчетныеЗаписи);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияОтпечатков(ОшибкаКриптопровайдера, Контекст)
	
	Если ТипЗнч(ОшибкаКриптопровайдера) = Тип("Строка") И Контекст.УчетныеЗаписи <> Неопределено Тогда
		ВидОперации = НСтр("ru = 'Получение отпечатков сертификатов.'");
		ТекстСообщения = НСтр("ru = 'При получении отпечатков сертификатов'")
			+ Символы.ПС + ОшибкаКриптопровайдера;
		Для Каждого УчетнаяЗапись Из Контекст.УчетныеЗаписи Цикл
			СинхронизацияЭДОКлиентСервер.УстановитьТекущуюУчетнуюЗапись(Контекст.КонтекстДиагностики, УчетнаяЗапись);
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
				КриптографияБЭДКлиентСервер.ВидОшибкиКриптография(),
				ТекстСообщения, ТекстСообщения);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Контекст.КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат авторизации в сервисе электронного документооборота.
// 
// Параметры:
// 	Контекст - Структура
// Возвращаемое значение:
// 	см. ЗаполненныйРезультатАвторизации
Функция ЗаполненныйРезультатАвторизации(Контекст)
	
	Результат = СинхронизацияЭДОСлужебныйКлиент.НовыйРезультатАвторизации();
	Результат.КлючиСинхронизации = Контекст.КлючиСинхронизации;
	Результат.КонтекстДиагностики = Контекст.КонтекстДиагностики;
	Результат.ОбработанныеУчетныеЗаписи = Контекст.ОбработанныеУчетныеЗаписи;
	Результат.ПаролиСертификатов = Контекст.ПаролиСертификатов;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьИОтправитьТранспортныеКонтейнерыПослеПолученияПараметровАутентификации(Результат, Контекст) Экспорт
	
	ДлительнаяОперация = СинхронизацияЭДОВызовСервера.НачатьФормированиеИОтправкуТранспортныхКонтейнеров(
		Контекст.КонтекстОтправки, Контекст.КонтекстДиагностики, Результат.КлючиСинхронизации,
		Контекст.ДополнительныеПараметры);
	
	ОповещениеПослеОтправки = Новый ОписаниеОповещения("СформироватьИОтправитьТранспортныеКонтейнерыПослеОтправки",
		ЭтотОбъект, Контекст);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеПослеОтправки, ПараметрыОжидания);
	
КонецПроцедуры

Процедура СформироватьИОтправитьТранспортныеКонтейнерыПослеОтправки(Результат, Контекст) Экспорт
	
	РезультатОтправки = ОбщегоНазначенияБЭДКлиент.РезультатВыполненияФоновогоЗадания(
		НСтр("ru = 'Отправка объектов электронного документооборота'"),
		Результат, Контекст.КонтекстДиагностики);
	
	Если РезультатОтправки = Неопределено Тогда
		РезультатОтправки = СинхронизацияЭДОКлиентСервер.НовыйРезультатОтправкиОбъектов();
		РезультатОтправки.Ошибка = Истина;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОтправки);
		Возврат;
	КонецЕсли;
	
	Если РезультатОтправки.ТребуетсяОбработкаНаКлиенте Тогда
		ОтправитьОбъекты(Контекст.Оповещение, РезультатОтправки.КонтекстОтправки,
			РезультатОтправки.КонтекстДиагностики, Контекст.ПаролиСертификатов);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатОтправки);
	
КонецПроцедуры

Процедура ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданийЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(НСтр("ru='Автоматическая проверка настроек регламентных заданий'"), 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Результат.ПодробноеПредставлениеОшибки,
				Результат.КраткоеПредставлениеОшибки);
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПроверкиНастроек = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатПроверкиНастроек);
	
КонецПроцедуры

#КонецОбласти
