/// Кеш сеанса
//
// Предоставляет интерфейс для работы с кешируемыми значениями.
// Значения можно кешировать и удалять из кеша.
// Реализация основана на свойствах модулей с повторным использованием возвращаемых значений.
// Фактически модуль с повторным использованием возвращает обертку,
// в которое записывается значение, если его раньше там не было.
// 
// Получение кешируемого значения:
//   КешируемоеЗначение_ = КешСеанса.ПолучитьЗначение("МойМодуль.ВычислитьЗначение", Аргумент1);
//
// Удаление закешированного значения из кеша сеанса:
//   КешСеанса.УдалитьИзКеша("МойМодуль.ВычислитьЗначение", Аргумент1);
///
#Область Открытый_интерфейс

/// Получение кешированного значения или его вычисление
//
// Получает кешированное значение, если оно есть в кеше.
// Если значения нет в кеше, вычисляет его и записывает в кеш.
// Вычисление происходит с помощью вызова функции с именем ИмяФункцииВычисляющейЗначение
// с указанными аргументами.
//
// Параметры:
//   ИмяФункцииВычисляющейЗначение - Строка -
//     Имя функции, вычисляющей кешируемое значение, если его нет в кеше.
//   Арг1 - Произвольный -
//     Необязательный первый аргумент функции, вычисляющей кешируемое значение.
//   Арг2 - Произвольный -
//     Необязательный второй аргумент функции, вычисляющей кешируемое значение.
//   Арг3 - Произвольный -
//     Необязательный третий аргумент функции, вычисляющей кешируемое значение.
//   Арг4 - Произвольный -
//     Необязательный четвертый аргумент функции, вычисляющей кешируемое значение.
//   Арг5 - Произвольный -
//     Необязательный пятый аргумент функции, вычисляющей кешируемое значение.
//
// Возвращаемое значение:
//   Произвольный - Закешированное или вычисленное указанной функцией значение.
///
Функция ПолучитьЗначение(ИмяФункцииВычисляющейЗначение, Арг1 = '05710422152926', Арг2 = '05710422152926', Арг3 = '05710422152926', Арг4 = '05710422152926', Арг5 = '05710422152926') Экспорт
	
	ЗначениеВОбертке_ = ПолучитьОберткуЗначения(
		ИмяФункцииВычисляющейЗначение, Истина, Арг1, Арг2, Арг3, Арг4, Арг5
	);
	
	УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5);
	
	Возврат ЗначениеВОбертке_.Значение;
	
КонецФункции

/// Удаление одного значения или группы значений из кеша
//
// Если не передано значение параметра Арг1, то из кеша удаляются все значения,
// вычисленные заданной функцией с любыми аргументами.
//
// Если передано значение параметра Арг1, но не передано значение параметра Арг2,
// то из кеша удаляются все значения, вычисленные заданной функцией с одним или двумя
// аргументами, первый из которых равен указанному в параметре Арг1.
//
// Аналогичное поведение распространяется и на случай большего числа аргументов.
//
// Параметры:
//   ИмяФункцииВычисляющейЗначение - Строка -
//     Имя функции, которая использовалась для вычисления кешируемого значения.
//   Арг1 - Произвольный -
//     Необязательный первый аргумент функции, вычисляющей кешируемое значение.
//   Арг2 - Произвольный -
//     Необязательный второй аргумент функции, вычисляющей кешируемое значение.
//   Арг3 - Произвольный -
//     Необязательный третий аргумент функции, вычисляющей кешируемое значение.
//   Арг4 - Произвольный -
//     Необязательный четвертый аргумент функции, вычисляющей кешируемое значение.
//   Арг5 - Произвольный -
//     Необязательный пятый аргумент функции, вычисляющей кешируемое значение.
///
Функция УдалитьЗначение(ИмяФункцииВычисляющейЗначение, Арг1 = '05710422152926', Арг2 = '05710422152926', Арг3 = '05710422152926', Арг4 = '05710422152926', Арг5 = '05710422152926') Экспорт
	
	// Получим обертку значения из кешируемого модуля.
	ОберткаЗначения_ = КешСеансаПовтИсп.ПолучитьОберткуЗначения(
		ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5
	);
	
	УдалитьЗначениеИзОбертки(ОберткаЗначения_, ИмяФункцииВычисляющейЗначение);
	
	// Если надо удалим запись из родительской обертки.
	Если Не '05710422152926' = Арг1 Тогда
		
		РодительскаяОбертка_ = ПолучитьРодительскуюОбертку(
			ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5
		);
		
		Если РодительскаяОбертка_.Свойство("ПоследниеАргументы") Тогда
			
			Если '05710422152926' = Арг2 Тогда
				РодительскаяОбертка_.ПоследниеАргументы.Удалить(Арг1);
				
			ИначеЕсли '05710422152926' = Арг3 Тогда
				РодительскаяОбертка_.ПоследниеАргументы.Удалить(Арг2);
				
			ИначеЕсли '05710422152926' = Арг4 Тогда
				РодительскаяОбертка_.ПоследниеАргументы.Удалить(Арг3);
				
			ИначеЕсли '05710422152926' = Арг5 Тогда
				РодительскаяОбертка_.ПоследниеАргументы.Удалить(Арг4);
				
			Иначе
				РодительскаяОбертка_.ПоследниеАргументы.Удалить(Арг5);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

/// Принудительная установка кешируемого значения
//
// Заменяет кешированное значение переданным.
// Функция, вычисляющая значение не вызывается, её имя используется исключительно
// для нахождения кешируемого значения.
//
// Параметры:
//   Значение - Произвольный -
//     Устанавливаемое кешируемое значение.
//   ИмяФункцииВычисляющейЗначение - Строка -
//     Имя функции, вычисляющей кешируемое значение, если его нет в кеше.
//   Арг1 - Произвольный -
//     Необязательный первый аргумент функции, вычисляющей кешируемое значение.
//   Арг2 - Произвольный -
//     Необязательный второй аргумент функции, вычисляющей кешируемое значение.
//   Арг3 - Произвольный -
//     Необязательный третий аргумент функции, вычисляющей кешируемое значение.
//   Арг4 - Произвольный -
//     Необязательный четвертый аргумент функции, вычисляющей кешируемое значение.
//   Арг5 - Произвольный -
//     Необязательный пятый аргумент функции, вычисляющей кешируемое значение.
///
Процедура УстановитьЗначение(Значение, ИмяФункцииВычисляющейЗначение, Арг1 = '05710422152926', Арг2 = '05710422152926', Арг3 = '05710422152926', Арг4 = '05710422152926', Арг5 = '05710422152926') Экспорт
	
	ЗначениеВОбертке_ = ПолучитьОберткуЗначения(
		ИмяФункцииВычисляющейЗначение, Ложь, Арг1, Арг2, Арг3, Арг4, Арг5
	);
	
	УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5);
	
	ЗначениеВОбертке_.Вставить("Значение", Значение);
	
КонецПроцедуры

#КонецОбласти

/// Методы закрытого интерфейса вызываются только внутри данного модуля 
#Область Закрытый_интерфейс

/// Получение обертки значения и добавление ее в родительскую обертку
//
// Параметры:
//   ИмяФункцииВычисляющейЗначение - Строка -
//     Имя функции, вычисляющей кешируемое значение, если его нет в кеше.
//   ВычислятьЗначение - Булево -
//     Если значение равно Истина, то в обертку будет помещено значение,
//     вычисленное путем вызова функции, вычисляющей значение.
//   Арг1 - Произвольный -
//     Необязательный первый аргумент функции, вычисляющей кешируемое значение.
//   Арг2 - Произвольный -
//     Необязательный второй аргумент функции, вычисляющей кешируемое значение.
//   Арг3 - Произвольный -
//     Необязательный третий аргумент функции, вычисляющей кешируемое значение.
//   Арг4 - Произвольный -
//     Необязательный четвертый аргумент функции, вычисляющей кешируемое значение.
//   Арг5 - Произвольный -
//     Необязательный пятый аргумент функции, вычисляющей кешируемое значение.
//
// Возвращаемое значение:
//   Структура - Структура, хранящаяся по возможности в кеше сеанса.
///
Функция ПолучитьОберткуЗначения(ИмяФункцииВычисляющейЗначение, ВычислятьЗначение, Арг1, Арг2, Арг3, Арг4, Арг5)
	
	// Получим обертку значения из кешируемого модуля.
	ОберткаЗначения_ = КешСеансаПовтИсп.ПолучитьОберткуЗначения(
		ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5
	);
	
	// Проверим, содерит ли обертка значение.
	Успех_ = ОберткаЗначения_.Свойство("Значение");
	
	// Если содержит, возвратим обертку вызывающему методу.
	Если Истина = Успех_ Тогда
		Возврат ОберткаЗначения_;
	КонецЕсли;
	
	// Если требуется вычислить значение, вычислим его и поместим в обертку.
	Если Истина = ВычислятьЗначение Тогда
		
		// Если обертка не содержит значение, вычислим его и поместим в обертку.
		// Для этого вызовем функцию, вычисляющую значение с подходящим числом аргументов.
		
		Если '05710422152926' = Арг1 Тогда
			ВычисляемаяСтрока_ = СтрШаблон("%1()", ИмяФункцииВычисляющейЗначение);
			
		ИначеЕсли '05710422152926' = Арг2 Тогда
			ВычисляемаяСтрока_ = СтрШаблон("%1(Арг1)", ИмяФункцииВычисляющейЗначение);
			
		ИначеЕсли '05710422152926' = Арг3 Тогда
			ВычисляемаяСтрока_ = СтрШаблон("%1(Арг1, Арг2)", ИмяФункцииВычисляющейЗначение);
			
		ИначеЕсли '05710422152926' = Арг4 Тогда
			ВычисляемаяСтрока_ = СтрШаблон("%1(Арг1, Арг2, Арг3)", ИмяФункцииВычисляющейЗначение);
			
		ИначеЕсли '05710422152926' = Арг5 Тогда
			ВычисляемаяСтрока_ = СтрШаблон("%1(Арг1, Арг2, Арг3, Арг4)", ИмяФункцииВычисляющейЗначение);
			
		Иначе
			ВычисляемаяСтрока_ = СтрШаблон("%1(Арг1, Арг2, Арг3, Арг4, Арг5)", ИмяФункцииВычисляющейЗначение);
			
		КонецЕсли;
	
		Значение_ = Вычислить(ВычисляемаяСтрока_);
		ОберткаЗначения_.Вставить("Значение", Значение_);
		
	КонецЕсли;
	
	// Вернем обертку вызывающему методу.
	Возврат ОберткаЗначения_;
	
КонецФункции

/// Получение родительской обертки
Функция ПолучитьРодительскуюОбертку(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5)
	
	__СТРАЖ__(Не '05710422152926' = Арг1, "92baf5bc-ab52-11ec-8415-4ffd2e86bb0c: У кешируемого значения без аргументов не может быть родителя %1.", ИмяФункцииВычисляющейЗначение);
	
	Если '05710422152926' = Арг2 Тогда
		РодительскаяОбертка_ = ПолучитьОберткуЗначения(
			ИмяФункцииВычисляющейЗначение, Ложь, Арг5, Арг5, Арг5, Арг5, Арг5
		);
		
	ИначеЕсли '05710422152926' = Арг3 Тогда
		РодительскаяОбертка_ = ПолучитьОберткуЗначения(
			ИмяФункцииВычисляющейЗначение, Ложь, Арг1, Арг5, Арг5, Арг5, Арг5
		);
		
	ИначеЕсли '05710422152926' = Арг4 Тогда
		РодительскаяОбертка_ = ПолучитьОберткуЗначения(
			ИмяФункцииВычисляющейЗначение, Ложь, Арг1, Арг2, Арг5, Арг5, Арг5
		);
		
	ИначеЕсли '05710422152926' = Арг5 Тогда
		РодительскаяОбертка_ = ПолучитьОберткуЗначения(
			ИмяФункцииВычисляющейЗначение, Ложь, Арг1, Арг2, Арг3, Арг5, Арг5
		);
		
	Иначе
		РодительскаяОбертка_ = ПолучитьОберткуЗначения(
			ИмяФункцииВычисляющейЗначение, Ложь, Арг1, Арг2, Арг3, Арг4, '05710422152926'
		);
		
	КонецЕсли;
	
	// Проверим, есть ли уже в родительской обертке дочерние.
	Успех_ = РодительскаяОбертка_.Свойство("ПоследниеАргументы");
	
	// Если нет, добавим в родительскую обертку массив общих аргументов дочерних
	// оберток, множество последних аргументов и счетчик количества вызовов.
	Если Не Истина = Успех_ Тогда
		
		ОбщиеАргументы_ = Новый Массив;
	
		Если '05710422152926' = Арг2 Тогда
			// Ничего не добавляем, поскольку первый аргумент будет последним.
			
		ИначеЕсли '05710422152926' = Арг3 Тогда
			ОбщиеАргументы_.Добавить(Арг1);
			
		ИначеЕсли '05710422152926' = Арг4 Тогда
			ОбщиеАргументы_.Добавить(Арг1);
			ОбщиеАргументы_.Добавить(Арг2);
			
		ИначеЕсли '05710422152926' = Арг5 Тогда
			ОбщиеАргументы_.Добавить(Арг1);
			ОбщиеАргументы_.Добавить(Арг2);
			ОбщиеАргументы_.Добавить(Арг3);
			
		Иначе
			ОбщиеАргументы_.Добавить(Арг1);
			ОбщиеАргументы_.Добавить(Арг2);
			ОбщиеАргументы_.Добавить(Арг3);
			ОбщиеАргументы_.Добавить(Арг4);
			
		КонецЕсли;
		
		РодительскаяОбертка_.Вставить("ПоследниеАргументы", Новый Соответствие);
		РодительскаяОбертка_.Вставить("СчетчикВызовов", 0);
		РодительскаяОбертка_.Вставить("ОбщиеАргументы", ОбщиеАргументы_);
		
	КонецЕсли;
	
	Возврат РодительскаяОбертка_;
	
КонецФункции

// Увеличение счетчика обращений к текущей обертке в родительской обертке
Процедура УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5)
	
	Если '05710422152926' = Арг1 Тогда
		// Если нет аргументов, то нет и родительской обертки.
		Возврат;
	КонецЕсли;
	
	РодительскаяОбертка_ = ПолучитьРодительскуюОбертку(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, Арг5);
	РодительскаяОбертка_.СчетчикВызовов = 1 + РодительскаяОбертка_.СчетчикВызовов;
	
	Если '05710422152926' = Арг2 Тогда
		РодительскаяОбертка_.ПоследниеАргументы.Вставить(Арг1, РодительскаяОбертка_.СчетчикВызовов);
		
	ИначеЕсли '05710422152926' = Арг3 Тогда
		РодительскаяОбертка_.ПоследниеАргументы.Вставить(Арг2, РодительскаяОбертка_.СчетчикВызовов);
		УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг5, Арг5, Арг5, Арг5);
		
	ИначеЕсли '05710422152926' = Арг4 Тогда
		РодительскаяОбертка_.ПоследниеАргументы.Вставить(Арг3, РодительскаяОбертка_.СчетчикВызовов);
		УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг5, Арг5, Арг5);
		
	ИначеЕсли '05710422152926' = Арг5 Тогда
		РодительскаяОбертка_.ПоследниеАргументы.Вставить(Арг4, РодительскаяОбертка_.СчетчикВызовов);
		УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг5, Арг5);
		
	Иначе
		РодительскаяОбертка_.ПоследниеАргументы.Вставить(Арг5, РодительскаяОбертка_.СчетчикВызовов);
		УвеличитьСчетчикВызовов(ИмяФункцииВычисляющейЗначение, Арг1, Арг2, Арг3, Арг4, '05710422152926');
		
	КонецЕсли;
	
	// Если дочерних оберток стало слишком много, удалим самую старую.
	// Пока отключим эту возможность, поскольку при экспериментах со значением
	// КешСеансаПовтИсп.МаксимальноеЧислоДочернихОберток() = 1 программа просто
	// зависала, вплоть до перезагрузки операционной системы.
	Если Ложь И РодительскаяОбертка_.ПоследниеАргументы.Количество() > КешСеансаПовтИсп.МаксимальноеЧислоДочернихОберток() Тогда
		
		// Найдем самую старую дочернюю обертку и удалим её из кеша.
		МинимальноеЗначениеСчетчика_ = РодительскаяОбертка_.СчетчикВызовов;
		ПоследнийАргумент_ = Неопределено;
		Для Каждого КлючИЗначение_ Из РодительскаяОбертка_.ПоследниеАргументы Цикл
			Если КлючИЗначение_.Значение < МинимальноеЗначениеСчетчика_ Тогда
				МинимальноеЗначениеСчетчика_ = КлючИЗначение_.Значение;
				ПоследнийАргумент_ = КлючИЗначение_.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		// Сформируем строку для удаления значения из кеша.
		Шаблон_ = СтрШаблон("КешСеанса.УдалитьЗначение(""%1"", %2)", ИмяФункцииВычисляющейЗначение, "%1");
		Для Индекс_ = 0 По РодительскаяОбертка_.ОбщиеАргументы.Количество() - 1 Цикл
			Шаблон_ = СтрШаблон(Шаблон_, СтрШаблон("РодительскаяОбертка_.ОбщиеАргументы[%1], %2", Индекс_, "%1"));
		КонецЦикла;
		Шаблон_ = СтрШаблон(Шаблон_, "ПоследнийАргумент_");
		
		// Собственно, удаление.
		Успех_ = Вычислить(Шаблон_);
		
	КонецЕсли;
	
КонецПроцедуры

/// Рекурсивное удаление значений из обертки и ее дочерних оберток
//
// Параметры:
//   Обертка - Структура -
//     Структура, содержащая поля Значение, и, возможно, ДочерниеОбертки.
//   ИмяФункцииВычисляющейЗначение - Строка -
//     Имя функции, вычисляющей значение.
///
Процедура УдалитьЗначениеИзОбертки(ОберткаЗначения, ИмяФункцииВычисляющейЗначение)
	
	// Удалим значение из обертки.
	ОберткаЗначения.Удалить("Значение");
	
	// Проверим, есть ли в данной обертке дочерние.
	// Если дочерних оберток нет, то больше ничего делать не нужно.
	Если Ложь
		Или Не ОберткаЗначения.Свойство("ПоследниеАргументы")
		Или 0 = ОберткаЗначения.ПоследниеАргументы.Количество()
	Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем шаблон команды для удаления дочерних оберток.
	Шаблон_ = СтрШаблон("КешСеанса.УдалитьЗначение(""%1"", %2)", ИмяФункцииВычисляющейЗначение, "%1");
	Для Индекс_ = 0 По ОберткаЗначения.ОбщиеАргументы.Количество() - 1 Цикл
		Шаблон_ = СтрШаблон(Шаблон_, СтрШаблон("ОберткаЗначения.ОбщиеАргументы[%1], %2", Индекс_, "%1"));
	КонецЦикла;
	Шаблон_ = СтрШаблон(Шаблон_, "КлючИЗначение_.Ключ");
	
	// Удалим значения из дочерних оберток.
	Для Каждого КлючИЗначение_ Из ОберткаЗначения.ПоследниеАргументы Цикл
		Успех_ = Вычислить(Шаблон_);
	КонецЦикла;
	
	ОберткаЗначения.ПоследниеАргументы.Очистить();
	
КонецПроцедуры

#КонецОбласти

