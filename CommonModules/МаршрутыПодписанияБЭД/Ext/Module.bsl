
#Область СлужебныйПрограммныйИнтерфейс

// Формирует текстовое представление прогресса подписания для электронного документа.
//
// Параметры:
//  ОбъектМаршрута - ОпределяемыйТип.ОбъектМаршрутаПодписанияБЭД - объект маршрута подписания.
//  КоличествоУстановленныхПодписей - Число - количество установленных подписей для объекта маршрута подписания.
// 
// Возвращаемое значение:
//  Строка - текстовое представление прогресса подписания.
//
Функция ПредставлениеПрогрессаПодписания(ОбъектМаршрута, КоличествоУстановленныхПодписей) Экспорт
	
	ВесМаршрута = ВесМаршрутаПодписания(ОбъектМаршрута);

	Если КоличествоУстановленныхПодписей = 0 И ВесМаршрута = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ВесМаршрута = 0 Тогда
		ВсегоПодписей = Макс(1, КоличествоУстановленныхПодписей);
	Иначе
		ВсегоПодписей = ВесМаршрута + КоличествоУстановленныхПодписей;
	КонецЕсли;
	
	ЯзыкКонфигурации = ОбщегоНазначения.КодОсновногоЯзыка();
	Разделитель = ?(ОбщегоНазначенияБЭД.КонфигурацияИспользуетНесколькоЯзыков(), "/", НСтр("ru = 'из'", ЯзыкКонфигурации));
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1 %2 %3)'", ЯзыкКонфигурации), 
		КоличествоУстановленныхПодписей, Разделитель, ВсегоПодписей);
		
	Возврат Результат;

КонецФункции

// Формирует пустое дерево маршрута подписания со всеми необходимыми колонками.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево маршрута подписания.
//
Функция ПустоеДеревоТребованийКПодписанию() Экспорт
	
	ДеревоПодписания = Новый ДеревоЗначений;
	ДеревоПодписания.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ДеревоПодписания.Колонки.Добавить("Требование", Новый ОписаниеТипов("ПеречислениеСсылка.ТребованияКПодписаниюЭД"));
	ДеревоПодписания.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоПодписания.Колонки.Добавить("Сертификат", Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ДеревоПодписания.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ДополнитьДеревоПодписанияСлужебнымиКолонками(ДеревоПодписания);

	Возврат ДеревоПодписания;
	
КонецФункции

// Формирует пустую таблицу маршрута подписания со всеми необходимыми колонками.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица маршрута подписания.
//
Функция ПустаяТаблицаТребованийКПодписанию() Экспорт
	
	ТипИдентификатора = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));
	
	ТаблицаПодписания = Новый ТаблицаЗначений;
	ТаблицаПодписания.Колонки.Добавить("Идентификатор", ТипИдентификатора);
	ТаблицаПодписания.Колонки.Добавить("ИдентификаторРодителя", ТипИдентификатора);
	ТаблицаПодписания.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число",
												  Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаПодписания.Колонки.Добавить("Требование", Новый ОписаниеТипов("ПеречислениеСсылка.ТребованияКПодписаниюЭД"));
	ТаблицаПодписания.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаПодписания.Колонки.Добавить("Сертификат", Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ТаблицаПодписания.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаПодписания.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПодписания;
	
КонецФункции

// Заполняет таблицу подписания по дереву маршрута подписания.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений, Неопределено - таблица маршрута подписания. Если не задана, будет сформирована.
//  Дерево	 - ДеревоЗначений  - дерево маршрута подписания.
//
Процедура ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(Таблица, Дерево) Экспорт

	// Если таблица не задана, инициализируем ее
	Если Таблица = Неопределено Тогда
		Таблица = ПустаяТаблицаТребованийКПодписанию();
	КонецЕсли;
	
	ПрочитатьСтрокиДереваВТаблицуТребованийКПодписанию(Дерево, Таблица);

КонецПроцедуры

// Выполняет проверку маршрута на корректность и формирует результаты проверки.
//
// Параметры:
//  Маршрут - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  ИспользуемыеСертификаты - Массив - элементы справочника "СертификатыКлючейЭлектроннойПодписиИШифрования",
//    используемые для подписания по переданному маршруту.
//  ВидыЭД - Массив из ОпределяемыйТип.ВидыЭлектронныхДокументовБЭД - виды электронных документов, по которым производится проверка.
//  ПодписываемыеВидыЭДПереопределенные	 - ТаблицаЗначений - таблица, совпадающая по структуре с набором записей
//    регистра "ПодписываемыеВидыЭД". Необходима в случае, когда проверка выполняется при записи набор записей
//    этого регистра. В этом случае в ней нужно передать содержимое набора записей до изменения.
// 
// Возвращаемое значение:
//  Соответствие - ключом является вид электронного документа, а значением - ключевое имя ошибки.
//
Функция РезультатыПроверкиМаршрутаПоПараметрамНастройки(Маршрут, ИспользуемыеСертификаты, ВидыЭД, 
	ПодписываемыеВидыЭДПереопределенные = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие();
	ЕстьПодсистемаОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	ЕстьПодсистемаОбменСБанками       = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	
	// Подготовим служебные переменные в зависимости от входных параметров
	Если ТипЗнч(Маршрут) = Тип("СправочникСсылка.МаршрутыПодписания") Тогда
		ВыполнятьПроверку = НЕ Маршрут.Предопределенный;
		ТаблицаМаршрута = Неопределено;
	ИначеЕсли Не ЕстьПодсистемаОбменСКонтрагентами И Не ЕстьПодсистемаОбменСБанками Тогда
		ВыполнятьПроверку = Ложь;
		ТаблицаМаршрута = Неопределено;
	Иначе
		// Передана таблица требований маршрута
		ВыполнятьПроверку = Истина;
		ТаблицаМаршрута = Маршрут;
	КонецЕсли;
	
	Если ПодписываемыеВидыЭДПереопределенные = Неопределено Тогда
		ПодписываемыеВидыЭДПереопределенные = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей().Выгрузить();
	КонецЕсли;
	
	// Выполним проверку, если это необходимо
	Если ВыполнятьПроверку Тогда
		НаборыМассивовСертификатов = Новый Структура;
		
		// Получим соответствие уникальных массив сертификатов и видов документов, которые им можно подписать.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидыЭД", ВидыЭД);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ИспользуемыеСертификаты", ИспользуемыеСертификаты);
		Запрос.УстановитьПараметр("ПодписываемыеВидыЭДПереопределенные", ПодписываемыеВидыЭДПереопределенные);
		
		ТекстыЗапросовПакета = Новый Массив;
		
		РазделительЭлементовПакета = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|";
		
		// Получим виды электронных документов, которые подлежат подписи в соответствии с настройками.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПодписываемыеВидыЭДПереопределенные.СертификатЭП,
		|	ПодписываемыеВидыЭДПереопределенные.ВидЭД,
		|	ПодписываемыеВидыЭДПереопределенные.Использовать
		|ПОМЕСТИТЬ ПодписываемыеВидыЭДПереопределенные
		|ИЗ
		|	&ПодписываемыеВидыЭДПереопределенные КАК ПодписываемыеВидыЭДПереопределенные";
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		
		// Получим все возможные виды электронных документов.
		РазделительОбъединения = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстЗапроса = "";
		
		ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ВидыЭД.Ссылка КАК ВидЭД
		|ПОМЕСТИТЬ ВидыЭД
		|ИЗ
		|	&ОбъектМетаданныхВидаЭлектронныхДокументов КАК ВидыЭД
		|ГДЕ
		|	ВидыЭД.Ссылка В(&ВидыЭД)";
		
		Для Каждого ТипВидаЭД Из Метаданные.ОпределяемыеТипы.ВидыЭлектронныхДокументовБЭД.Тип.Типы() Цикл
		
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + РазделительОбъединения;
				ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ПОМЕСТИТЬ ВидыЭД", "");
			КонецЕсли;
			
			ИмяМетаданных = Метаданные.НайтиПоТипу(ТипВидаЭД).ПолноеИмя();
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "&ОбъектМетаданныхВидаЭлектронныхДокументов", ИмяМетаданных);
				
		КонецЦикла;
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		
		// Соберем по каждому сертификату виды документов, которые можно или нельзя им подписывать.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат
		|ПОМЕСТИТЬ ДействующиеСертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван = ЛОЖЬ
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток <> """"
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДата
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В(&ИспользуемыеСертификаты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЭД.ВидЭД,
		|	ДействующиеСертификаты.Сертификат
		|ПОМЕСТИТЬ СертификатыВидыЭД
		|ИЗ
		|	ВидыЭД КАК ВидыЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеСертификаты КАК ДействующиеСертификаты
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыВидыЭД.Сертификат КАК Сертификат,
		|	ЕСТЬNULL(ПодписываемыеВидыЭДПереопределенные.Использовать, ЕСТЬNULL(ПодписываемыеВидыЭД.Использовать, ЛОЖЬ)) КАК Использовать,
		|	СертификатыВидыЭД.ВидЭД КАК ВидЭД
		|ИЗ
		|	СертификатыВидыЭД КАК СертификатыВидыЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
		|		ПО СертификатыВидыЭД.Сертификат = ПодписываемыеВидыЭД.СертификатЭП
		|			И СертификатыВидыЭД.ВидЭД = ПодписываемыеВидыЭД.ВидЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПодписываемыеВидыЭДПереопределенные КАК ПодписываемыеВидыЭДПереопределенные
		|		ПО СертификатыВидыЭД.Сертификат = ПодписываемыеВидыЭДПереопределенные.СертификатЭП
		|			И СертификатыВидыЭД.ВидЭД = ПодписываемыеВидыЭДПереопределенные.ВидЭД
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидЭД,
		|	Сертификат
		|ИТОГИ
		|	МАКСИМУМ(Использовать)
		|ПО
		|	ВидЭД";
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		Запрос.Текст = СтрСоединить(ТекстыЗапросовПакета, РазделительЭлементовПакета);
		
		ВыборкаВидовЭД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидовЭД.Следующий() Цикл
			Если Не ВыборкаВидовЭД.Использовать Тогда
				Результат.Вставить(ВыборкаВидовЭД.ВидЭД, "НетДоступныхСертификатов");
			Иначе
				МассивСертификатов = Новый Массив;
				ИдентификаторМассива = "ИД_";
				Выборка = ВыборкаВидовЭД.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Не Выборка.Использовать Тогда
						Продолжить;
					КонецЕсли;
					
					Если МассивСертификатов.Найти(Выборка.Сертификат) = Неопределено Тогда
						МассивСертификатов.Добавить(Выборка.Сертификат);
						ИдентификаторМассива = ИдентификаторМассива + Строка(Выборка.Сертификат.УникальныйИдентификатор());
					КонецЕсли;
				КонецЦикла;
				
				ИдентификаторМассива = СтрЗаменить(ИдентификаторМассива, "-", "_");
				СтруктураОписанияНабораСертификатов = Неопределено;
				Если Не НаборыМассивовСертификатов.Свойство(ИдентификаторМассива, СтруктураОписанияНабораСертификатов) Тогда
					СтруктураОписанияНабораСертификатов = Новый Структура;
					СтруктураОписанияНабораСертификатов.Вставить("Сертификаты", МассивСертификатов);
					СтруктураОписанияНабораСертификатов.Вставить("ВидыЭД", Новый Массив);
					НаборыМассивовСертификатов.Вставить(ИдентификаторМассива, СтруктураОписанияНабораСертификатов);
				КонецЕсли;
				
				СтруктураОписанияНабораСертификатов.ВидыЭД.Добавить(ВыборкаВидовЭД.ВидЭД);
			КонецЕсли;
		КонецЦикла;
		
		// Подготовим в запросе таблицу маршрута, дополненную всеми возможными сертификатами для каждого элемента маршрута.
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойСертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
		Если ТаблицаМаршрута = Неопределено Тогда
			Запрос.УстановитьПараметр("Маршрут", Маршрут);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МаршрутыПодписанияТаблицаТребований.Идентификатор,
			|	МаршрутыПодписанияТаблицаТребований.ИдентификаторРодителя,
			|	МаршрутыПодписанияТаблицаТребований.Порядок,
			|	МаршрутыПодписанияТаблицаТребований.Требование,
			|	МаршрутыПодписанияТаблицаТребований.Подписант,
			|	МаршрутыПодписанияТаблицаТребований.Сертификат
			|ПОМЕСТИТЬ ТаблицаМаршрута
			|ИЗ
			|	Справочник.МаршрутыПодписания.ТаблицаТребований КАК МаршрутыПодписанияТаблицаТребований
			|ГДЕ
			|	МаршрутыПодписанияТаблицаТребований.Ссылка = &Маршрут
			|;
			|";
		Иначе
		    Запрос.УстановитьПараметр("ТаблицаМаршрута", ТаблицаМаршрута);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаМаршрута.Идентификатор,
			|	ТаблицаМаршрута.ИдентификаторРодителя,
			|	ТаблицаМаршрута.Порядок,
			|	ТаблицаМаршрута.Требование,
			|	ТаблицаМаршрута.Подписант,
			|	ТаблицаМаршрута.Сертификат
			|ПОМЕСТИТЬ ТаблицаМаршрута
			|ИЗ
			|	&ТаблицаМаршрута КАК ТаблицаМаршрута
			|;
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ТаблицаМаршрута.Идентификатор,
		|	ТаблицаМаршрута.ИдентификаторРодителя,
		|	ТаблицаМаршрута.Порядок,
		|	ТаблицаМаршрута.Требование,
		|	ТаблицаМаршрута.Подписант,
		|	Сертификаты.Ссылка КАК Сертификат
		|ПОМЕСТИТЬ ДополненнаяТаблицаМаршрута
		|ИЗ
		|	ТаблицаМаршрута КАК ТаблицаМаршрута
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ((ТаблицаМаршрута.Подписант = Сертификаты.Пользователь
		|				ИЛИ Сертификаты.Пользователь В (&ПустойПользователь, &ПользовательНеУказан)
		|				ИЛИ ТаблицаМаршрута.Подписант = &ПустойПользователь)
		|				И (ТаблицаМаршрута.Сертификат = Сертификаты.Ссылка
		|					ИЛИ ТаблицаМаршрута.Сертификат = &ПустойСертификат))";
		Запрос.Выполнить();
		
		// Обойдем набор сертификатов и проверим для каждого набора валидность маршрута
		Для Каждого СтруктураНабораСертификатов Из НаборыМассивовСертификатов Цикл
			Запрос.УстановитьПараметр("НаборСертификатов", СтруктураНабораСертификатов.Значение.Сертификаты);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополненнаяТаблицаМаршрута.Идентификатор,
			|	ДополненнаяТаблицаМаршрута.ИдентификаторРодителя,
			|	ДополненнаяТаблицаМаршрута.Порядок,
			|	ДополненнаяТаблицаМаршрута.Требование,
			|	ДополненнаяТаблицаМаршрута.Подписант,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ДополненнаяТаблицаМаршрута.Сертификат В (&НаборСертификатов)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ТребованиеВыполнимо
			|ИЗ
			|	ДополненнаяТаблицаМаршрута КАК ДополненнаяТаблицаМаршрута
			|
			|СГРУППИРОВАТЬ ПО
			|	ДополненнаяТаблицаМаршрута.Идентификатор,
			|	ДополненнаяТаблицаМаршрута.ИдентификаторРодителя,
			|	ДополненнаяТаблицаМаршрута.Порядок,
			|	ДополненнаяТаблицаМаршрута.Требование,
			|	ДополненнаяТаблицаМаршрута.Подписант";
			ТаблицаТребований = Запрос.Выполнить().Выгрузить();
			ДеревоТребований = Неопределено;
			ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(ДеревоТребований, ТаблицаТребований);
			
			ЕстьНевыполнимыеТребования = Ложь;
			ОбработатьДеревоПодписания(ДеревоТребований, Ложь, Истина, Ложь,, Истина, ЕстьНевыполнимыеТребования);
			Если ДеревоТребований.Строки.Количество() = 0 ИЛИ ЕстьНевыполнимыеТребования Тогда
				Для Каждого ВидЭД Из СтруктураНабораСертификатов.Значение.ВидыЭД Цикл
					Результат.Вставить(ВидЭД, "НетДоступныхСертификатовДляНекоторыхШаговМаршрута");
				КонецЦикла;
			ИначеЕсли ДеревоТребований.Строки[0].Вес > СтруктураНабораСертификатов.Значение.Сертификаты.Количество() Тогда
				Для Каждого ВидЭД Из СтруктураНабораСертификатов.Значение.ВидыЭД Цикл
					Результат.Вставить(ВидЭД, "ДлинаМаршрутаБольшеКоличестваДоступныхСертификатов");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Выводит ошибки, найденные в результате проверки маршрута подписания, если таковые обнаружены.
//
// Параметры:
//  РезультатыПроверки	 - Соответствие - см. описание значения, возвращаемого функцией 
//    МаршрутыПодписанияБЭД.РезультатыПроверкиМаршрутаПоПараметрамНастройки.
//  НастройкаОбмена		 - СправочникСсылка, РегистрСведенийКлючЗаписи - ссылка или ключ настройки.
//  Маршрут              - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  Отказ				 - Булево - устанавливается в Истина, если параметр РезультатыПроверки содержит ошибки.
//  ИсключаемыеОшибки	 - Строка - строка идентификаторов ошибок, перечисленных через запятую, по которым выводить 
//    сообщения не нужно.
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Процедура ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, НастройкаОбмена, Маршрут, Отказ,
	ИсключаемыеОшибки = "", Знач ПредставлениеНастройки = "", КонтекстДиагностики = Неопределено) Экспорт
	
	Если РезультатыПроверки.Количество() Тогда
		ИсключаемыеОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеОшибки,, Истина, Истина);

		ТаблицаНастроек = Неопределено;
		ИмяКолонкиТаблицыНастроек = Неопределено;
		МаршрутыПодписанияБЭДСлужебный.ЗаполнитьПараметрыОтправкиЭлектронныхДокументов(НастройкаОбмена,
			ТаблицаНастроек, ИмяКолонкиТаблицыНастроек);
		
		Если Не ЗначениеЗаполнено(ПредставлениеНастройки) Тогда
			ПредставлениеНастройки = Строка(НастройкаОбмена);
		КонецЕсли;
		
		Для Каждого РезультатПроверки Из РезультатыПроверки Цикл
			Если ИсключаемыеОшибки.Найти(РезультатПроверки.Значение) = Неопределено Тогда
				ВидЭДОшибки = РезультатПроверки.Ключ;
				ИдентификаторОшибки = РезультатПроверки.Значение;
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(НастройкаОбмена)) Тогда
					ТипНастройки = Метаданные.НайтиПоТипу(ТипЗнч(НастройкаОбмена)).ПредставлениеОбъекта;
				Иначе
					ТипНастройки = Метаданные.НайтиПоТипу(ТипЗнч(НастройкаОбмена)).ПредставлениеЗаписи;
				КонецЕсли;
				
				СтрокаТаблицыНастроек = ТаблицаНастроек.Найти(ВидЭДОшибки, ИмяКолонкиТаблицыНастроек);
				НомерСтроки = ТаблицаНастроек.Индекс(СтрокаТаблицыНастроек) + 1;
				
				ИмяПоляОшибки = МаршрутыПодписанияБЭДСлужебный.ИмяПоляДляОтображенияОшибкиПоМаршруту(НастройкаОбмена, НомерСтроки);
				
				ШаблонОшибки = "%3 ""%4"": " 
					+ ПредставлениеОшибкиНесоответствияМаршрутаНастройкам(
						ИдентификаторОшибки);
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ВидЭДОшибки, 
					Маршрут, ТипНастройки, ПредставлениеНастройки);
					
				Если КонтекстДиагностики = Неопределено Тогда
					КлючДанных = МаршрутыПодписанияБЭДСлужебный.ПолучитьКлючДанныхНастроекОбмена(НастройкаОбмена);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоляОшибки, "Запись", Отказ);
				Иначе 
					Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Проверка маршрута подписания'"),
						ВидОшибкиМаршрутПодписания(), ТекстОшибки, ТекстОшибки,
						Новый Структура("СсылкаНаОбъект", Маршрут));
					ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка, Ложь);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Формирует маршрут подписания электронного документа в соответствии с настройками системы и данными документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.СообщениеЭДОПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
//  Маршрут              - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  УсловиеПодписания	 - ПеречислениеСсылка.ТребованияКПодписаниюЭД - требование к подписанию. Используется совместно
//    с параметром "СписокПодписантов" и задает логическое условие для объединения переданных подписантов.
//  СписокПодписантов	 - Массив - подписанты маршрута. Содержит элементы типа "СправочникСсылка.Пользователи" или
//    строки табличной части таблицы подписания. Используется совместно с параметром "УсловиеПодписания".
//  ВесМаршрута			 - Число - в данную переменную будет возвращено максимально возможное количество подписей.
//
Функция СформироватьМаршрутПодписанияЭД(ЭлектронныйДокумент, Маршрут, УсловиеПодписания = Неопределено, 
	СписокПодписантов = Неопределено, ВесМаршрута = 0) Экспорт
	
	ТаблицаПодписания = ТаблицаМаршрутаПоПараметрам(ЭлектронныйДокумент, Маршрут, УсловиеПодписания, СписокПодписантов,
		ВесМаршрута);
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Запишем полученные данные в регистр
	НаборЗаписей = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭлектронныйДокумент);
	НаборЗаписей.Загрузить(ТаблицаПодписания);
	НаборЗаписей.Записать();
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаПодписания;
	
КонецФункции

// Формирует таблицу маршрута подписания по переданным параметрам.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.СообщениеЭДОПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
//  Маршрут              - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  УсловиеПодписания	 - ПеречислениеСсылка.ТребованияКПодписаниюЭД - требование к подписанию. Используется совместно
//    с параметром "СписокПодписантов" и задает логическое условие для объединения переданных подписантов.
//  СписокПодписантов	 - Массив - подписанты маршрута. Содержит элементы типа "СправочникСсылка.Пользователи" или
//    строки табличной части таблицы подписания. Используется совместно с параметром "УсловиеПодписания".
//  ВесМаршрута			 - Число - в данную переменную будет возвращено максимально возможное количество подписей.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица подписания.
//
Функция ТаблицаМаршрутаПоПараметрам(ЭлектронныйДокумент, Маршрут, УсловиеПодписания = Неопределено, 
	СписокПодписантов = Неопределено, ВесМаршрута = 0) Экспорт
	
	// Подготовим таблицу маршрута
	Если Не Маршрут.Предопределенный Тогда
		ТаблицаПодписания = ПустаяТаблицаТребованийКПодписанию();
		ТаблицаТребований = Маршрут.ТаблицаТребований.Выгрузить();
		Для каждого СтрокаТаблицыТребований Из ТаблицаТребований Цикл
			СтрокаТаблицыПодписания = ТаблицаПодписания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодписания, СтрокаТаблицыТребований);
		КонецЦикла;
		Если ЗначениеЗаполнено(Маршрут.Организация)
			И Маршрут.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная Тогда
				ТаблицаПодписания.ЗаполнитьЗначения(Маршрут.Организация, "Организация");
		КонецЕсли;
	Иначе
		ТаблицаПодписания = ТаблицаПодписанияПоПараметрам(Маршрут, УсловиеПодписания, СписокПодписантов);
	КонецЕсли;
	
	// Рассчитаем вес маршрута и проставим текущие шаги
	ДеревоПодписания = Неопределено;
	ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(ДеревоПодписания, ТаблицаПодписания);
	ОбработатьДеревоПодписания(ДеревоПодписания, Ложь, Ложь, Истина,, Истина);
	
	// Конвертируем обратно в таблицу, чтобы подготовить таблицу к записи в регистр
	ТаблицаПодписания = Неопределено;
	ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(ТаблицаПодписания, ДеревоПодписания);
	ТаблицаПодписания.Колонки.Добавить("Объект", Метаданные.РегистрыСведений.СостояниеПодписанияЭД.Измерения.Объект.Тип);
	ТаблицаПодписания.ЗаполнитьЗначения(ЭлектронныйДокумент, "Объект");
	
	Для Каждого СтрокаТаблицыПодписания Из ТаблицаПодписания Цикл
		
		Если Не СтрокаТаблицыПодписания.Текущий Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийИдентификаторРодителя = СтрокаТаблицыПодписания.ИдентификаторРодителя;
				
		Пока ЗначениеЗаполнено(ТекущийИдентификаторРодителя) Цикл
			СтрокаРодителя = ТаблицаПодписания.Найти(ТекущийИдентификаторРодителя, "Идентификатор");
			Если СтрокаРодителя.Порядок <> 1 Тогда
				СтрокаТаблицыПодписания.Текущий = Ложь;
			КонецЕсли;
			ТекущийИдентификаторРодителя = СтрокаРодителя.ИдентификаторРодителя;
		КонецЦикла;
	
	КонецЦикла;
	
	// Вернем вес маршрута
	Если ДеревоПодписания.Строки.Количество() > 0 Тогда
		ВесМаршрута = ДеревоПодписания.Строки[0].Вес;
	Иначе
		ВесМаршрута = 0;
	КонецЕсли;
	
	Возврат ТаблицаПодписания;
	
КонецФункции

// Обновляет маршрут подписания документа при установке очередной подписи. При этом из маршрута удаляются невыполнимые
// и уже выполненные требования / подписи.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.СообщениеЭДОПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
//  Сертификат			 - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, по которому
//    установлена подпись.
//  ВесМаршрута			 - Число - в данную переменную будет возвращено максимально возможное количество подписей.
//  ОрганизацияДляПодписания - СправочникСсылка.Организации - организация, использумая при отсутствии организации 
//    в сертификате. Необязательный: если не указана, то будет использована организация из переданного сертификата.  
//  Пользователь		 - СправочникСсылка.Пользователи - пользователь, установивший подпись. Необязательный: если не
//    указан, будет использован текущий пользователь.
//
// Возвращаемое значение:
//  см. ПустаяТаблицаТребованийКПодписанию
Функция ОбновитьМаршрутПриПодписании(ЭлектронныйДокумент, Знач Сертификат, ВесМаршрута = 0,
	Знач ОрганизацияДляПодписания = Неопределено, Знач Пользователь = Неопределено) Экспорт

	ТаблицаПодписания = ПустаяТаблицаТребованийКПодписанию();
	Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		Если Пользователь = Неопределено Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Организация = Сертификат.Организация;
			Если Не ЗначениеЗаполнено(Организация) И ОрганизацияДляПодписания <> Неопределено Тогда
				Организация = ОрганизацияДляПодписания;
			КонецЕсли;
			
			ОтборПоОбъекту = Новый Структура("Объект", ЭлектронныйДокумент);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.СостояниеПодписанияЭД", ОтборПоОбъекту);
			// Запросим дерево из регистра и посчитаем сразу логический результат по строкам
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Документ", ЭлектронныйДокумент);
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("Сертификат", Сертификат);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ПустойСертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустаяОрганизация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаПодписанияЭД.Идентификатор,
			|	ТаблицаПодписанияЭД.Порядок,
			|	ТаблицаПодписанияЭД.Требование,
			|	ТаблицаПодписанияЭД.Подписант,
			|	ТаблицаПодписанияЭД.Сертификат,
			|	ТаблицаПодписанияЭД.Организация,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ТаблицаПодписанияЭД.Текущий
			|					И (ТаблицаПодписанияЭД.Подписант = &Пользователь ИЛИ ТаблицаПодписанияЭД.Подписант = &ПустойПользователь)
			|					И (ТаблицаПодписанияЭД.Сертификат = &Сертификат ИЛИ ТаблицаПодписанияЭД.Сертификат = &ПустойСертификат)
			|					И (ТаблицаПодписанияЭД.Организация = &Организация ИЛИ ТаблицаПодписанияЭД.Организация = &ПустаяОрганизация)
			|					И ТаблицаПодписанияЭД.Порядок = 1
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК Выполнено,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ТаблицаПодписанияЭД.Текущий
			|					И (ТаблицаПодписанияЭД.Подписант = &Пользователь ИЛИ ТаблицаПодписанияЭД.Подписант = &ПустойПользователь)
			|					И (ТаблицаПодписанияЭД.Сертификат = &Сертификат ИЛИ ТаблицаПодписанияЭД.Сертификат = &ПустойСертификат)
			|					И (ТаблицаПодписанияЭД.Организация = &Организация ИЛИ ТаблицаПодписанияЭД.Организация = &ПустаяОрганизация)
			|					И ТаблицаПодписанияЭД.Порядок = 1
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ВыполненоМаксимум,
			|	ТаблицаПодписанияЭД.ИдентификаторРодителя
			|ИЗ
			|	РегистрСведений.СостояниеПодписанияЭД КАК ТаблицаПодписанияЭД
			|ГДЕ
			|	ТаблицаПодписанияЭД.Объект = &Документ
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПодписанияЭД.Идентификатор,
			|	ТаблицаПодписанияЭД.Порядок,
			|	ТаблицаПодписанияЭД.Требование,
			|	ТаблицаПодписанияЭД.Подписант,
			|	ТаблицаПодписанияЭД.Сертификат,
			|	ТаблицаПодписанияЭД.Организация,
			|	ТаблицаПодписанияЭД.ИдентификаторРодителя
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторРодителя,
			|	Порядок";
			УстановитьПривилегированныйРежим(Истина);
			ТаблицаПодписания = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
			// Загрузим текущую таблицу подписания в дерево
			ДеревоПодписания = Неопределено;
			ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(ДеревоПодписания, ТаблицаПодписания);
			
			// Оптимизируем дерево, удалив отработанные и заведомо ложные строки, а также проставим текущие сертификаты.
			ОбработатьДеревоПодписания(ДеревоПодписания, Ложь, Истина, Истина,, Истина);
			
			// Получим снова таблицу, дополним ее и запишем в регистр
			ТаблицаПодписания = Неопределено;
			ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(ТаблицаПодписания, ДеревоПодписания);
			ТаблицаПодписания.Колонки.Добавить("Объект");
			ТаблицаПодписания.ЗаполнитьЗначения(ЭлектронныйДокумент, "Объект");
			
			УстановитьПривилегированныйРежим(Истина);
			
			НаборЗаписей = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ЭлектронныйДокумент);
			НаборЗаписей.Прочитать();
			
			ДанныеОповещение = НаборЗаписей.Выгрузить();
			ДанныеОповещение.Свернуть("Подписант, ПодписантОповещен");
			НаборЗаписей.Загрузить(ТаблицаПодписания);
			
			Для Каждого Запись Из НаборЗаписей Цикл
				ДанныеОповещенияПодписанта = ДанныеОповещение.Найти(Запись.Подписант, "Подписант");
				Если ДанныеОповещенияПодписанта <> Неопределено Тогда
					 Запись.ПодписантОповещен = ДанныеОповещенияПодписанта.ПодписантОповещен;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать();

			УстановитьПривилегированныйРежим(Ложь);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		// Вернем вес маршрута
		Если ДеревоПодписания.Строки.Количество() > 0 Тогда
			ВесМаршрута = ДеревоПодписания.Строки[0].Вес;
		Иначе 
			ВесМаршрута = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаПодписания;

КонецФункции

// Определяет, все ли необходимые подписи на документе установлены.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.СообщениеЭДОПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
// 
// Возвращаемое значение:
//  Булево - Истина, все необходимые для выполнения маршрута подписания подписи установлены.
//
Функция МаршрутПодписанияЗавершен(ЭлектронныйДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеПодписанияДокумента.Объект КАК Документ
	|ИЗ
	|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияДокумента
	|ГДЕ
	|	СостояниеПодписанияДокумента.Объект = &ЭлектронныйДокумент";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

// Очищает маршрут подписания документа. Используется, когда процесс подписания прекращается в
//   нештатном режиме (не при установке очередной подписи).
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.СообщениеЭДОПрисоединенныеФайлы,
//                                   ДокументСсылка.СообщениеОбменСБанками - подписываемые электронные документы.
//
Процедура ОчиститьМаршрутПодписания(ЭлектронныеДокументы) Экспорт

	Если ТипЗнч(ЭлектронныеДокументы) = Тип("Массив") Тогда
		МассивДокументов = ЭлектронныеДокументы;
	Иначе
	    МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЭлектронныеДокументы);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для каждого Объект Из МассивДокументов Цикл
			ОтборПоОбъекту = Новый Структура("Объект", Объект);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.СостояниеПодписанияЭД", ОтборПоОбъекту);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЭлектронныеДокументы", МассивДокументов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеПодписанияЭД.Объект
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|ГДЕ
		|	СостояниеПодписанияЭД.Объект В(&ЭлектронныеДокументы)";
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписейМаршрута = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
			НаборЗаписейМаршрута.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписейМаршрута.Записать();
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Помещает во временное хранилище настройки выбора маршрута подписания.
//
// Параметры:
//  Владелец						 - УправляемаяФорма, Строка - уникальный идентификатор формы, во временное хранилище которой надо
//    поместить данные и вернуть новый адрес. Или адрес во временном хранилище, по которому надо поместить данные.
//  ЗадаватьМаршрутВручную			 - Булево - признак того, что маршрут будет указываться непосредственно при отправке
//    документа на подпись.
//  Подписанты						 - ТаблицаЗначений - таблица состава подписантов с колонками:
//    * Подписант - СправочникСсылка.Пользователи - пользователь, который может установить подпись.
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, которым можно 
//      подписать документ.
//  ФиксированныйМаршрут			 - СправочникСсылка.МаршрутыПодписания - маршрут, по которому будет подписываться документ.
//  ДоступныеДляВыбораСертификаты	 - Массив - содержит сертификаты, которыми можно подписывать документ в соответствии
//    с настройками.
// 
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция СохранитьНастройкиВыбораМаршрута(Владелец, ЗадаватьМаршрутВручную, Подписанты = Неопределено, 
	ФиксированныйМаршрут = Неопределено, ДоступныеДляВыбораСертификаты = Неопределено) Экспорт

	Настройки = НовыеНастройкиВыбораМаршрута(ЗадаватьМаршрутВручную,
		Подписанты, ФиксированныйМаршрут, ДоступныеДляВыбораСертификаты);
	УИДВладельца = ?(ТипЗнч(Владелец) = Тип("ФормаКлиентскогоПриложения"), Владелец.УникальныйИдентификатор, Владелец);
		
	Возврат ПоместитьВоВременноеХранилище(Настройки, УИДВладельца);

КонецФункции 

// Формирует представление параметров маршрута подписания документа.
//
// Параметры:
//  ЗадаватьМаршрутВручную			 - Булево - признак того, что маршрут будет указываться непосредственно при отправке
//    документа на подпись.
//  Подписанты						 - ТаблицаЗначений - таблица состава подписантов с колонками:
//    * Подписант - СправочникСсылка.Пользователи - пользователь, который может установить подпись.
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, которым можно 
//      подписать документ.
//  ФиксированныйМаршрут			 - СправочникСсылка.МаршрутыПодписания - маршрут, по которому будет подписываться документ.
// 
// Возвращаемое значение:
//  Строка - строковое представление параметров маршрута.
//
Функция ПредставлениеМаршрутаВыбранногоВДокументе(ЗадаватьМаршрутВручную, Подписанты = Неопределено, 
	ФиксированныйМаршрут = Неопределено) Экспорт

	Если ЗадаватьМаршрутВручную Тогда
		ПредставлениеНастроек = СтрШаблон(НСтр("ru = 'Подписи по списку (%1)'"), Подписанты.Количество());
	Иначе
		Если Не ЗначениеЗаполнено(ФиксированныйМаршрут) Тогда
			ПредставлениеНастроек = ПредставлениеНеВыбранногоМаршрута();
		Иначе 
			ПредставлениеНастроек = ФиксированныйМаршрут;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеНастроек;

КонецФункции 

// Формирует представление невыбранного маршрута подписания.
// 
// Возвращаемое значение:
//  Строка - представление маршрута.
//
Функция ПредставлениеНеВыбранногоМаршрута() Экспорт

	Возврат НСтр("ru = '<не задан>'");

КонецФункции 

Функция МаршрутОднойДоступнойПодписью() Экспорт
	Возврат Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
КонецФункции

Функция МаршрутУказыватьПриСоздании() Экспорт
	Возврат Справочники.МаршрутыПодписания.УказыватьПриСоздании;
КонецФункции

Функция ВидПодписиМаршрута(МаршрутПодписания) Экспорт
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МаршрутПодписания, "ВидПодписи");
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отрисовка дерева

// Заполняет на форме дерево маршрута подписания.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которой нужно отрисовать дерево маршрута подписания.
//  ИсточникДанных - ДокументСсылка.СообщениеЭДОПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на электронный документ.
//  ИмяРеквизитаДерева - Строка - имя реквизита дерева маршрута на форме.
//  ИмяОсновногоРеквизита- Строка - имя реквизита дерева, который будет выводиться в основной колонке.
//
Процедура ЗаполнитьДеревоМаршрутаНаФорме(Форма, ИсточникДанных, ИмяРеквизитаДерева = "ДеревоТребований",
	ИмяОсновногоРеквизита = "Подписант", Вес = 0) Экспорт
	
	// Подготовим таблицу маршрута в зависимости от типа переданного значения
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ИсточникДанных) Тогда
		// Передана ссылка на документ-владелец маршрута
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", ИсточникДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СостояниеПодписанияЭД.Идентификатор КАК Идентификатор,
		|	СостояниеПодписанияЭД.ИдентификаторРодителя КАК ИдентификаторРодителя,
		|	СостояниеПодписанияЭД.Порядок КАК Порядок,
		|	СостояниеПодписанияЭД.Требование,
		|	СостояниеПодписанияЭД.Подписант,
		|	СостояниеПодписанияЭД.Сертификат,
		|	СостояниеПодписанияЭД.Организация
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|ГДЕ
		|	СостояниеПодписанияЭД.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторРодителя,
		|	Порядок";
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаМаршрута = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		// Передана готовая таблица маршрута
		ТаблицаМаршрута = ИсточникДанных;
	КонецЕсли;
	
	// Заполним дерево из табличной части
	Дерево = Форма.РеквизитФормыВЗначение(ИмяРеквизитаДерева);
	Дерево.Строки.Очистить();
	ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(Дерево, ТаблицаМаршрута);
	Форма.ЗначениеВРеквизитФормы(Дерево, ИмяРеквизитаДерева);
	
	// Инициализируем вспомогательные колонки в дереве
	ЗаполнитьВспомогательныеКолонкиВДеревеМаршрута(Форма[ИмяРеквизитаДерева], ИмяОсновногоРеквизита);
	
	// Просчитаем вес дерева.
	ОбработатьДеревоПодписания(Дерево, Ложь, Ложь, Ложь,, Истина);
	Если Дерево.Строки.Количество() > 0 Тогда
		Вес = Дерево.Строки[0].Вес;
	Иначе 
		Вес = 0;
	КонецЕсли;

КонецПроцедуры

Функция НовыеПараметрыПроверкиВалидностиМаршрута() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Маршрут", Справочники.МаршрутыПодписания.ПустаяСсылка());
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Параметры.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная);
	Параметры.Вставить("ТаблицаТребований", Новый ТаблицаЗначений);
	
	Возврат Параметры;
	
КонецФункции

Функция МаршрутПоВсемЗависимымНастройкамВалиден(Параметры) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	
	Результат = Истина;
	
	Если ЕстьОбменСКонтрагентами ИЛИ ЕстьОбменСБанками Тогда
		
		ТекстОбъединения = 
		"
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|";
		
		ТекстыЗапросовПоНастройкам = Новый Массив;
		МассивЗапросовНастроек = Новый Массив;
		
		Если ЕстьОбменСКонтрагентами Тогда
			
			МодульНастройкиЭДО = ОбщегоНазначения.ОбщийМодуль("НастройкиЭДО");
			ЗапросНастроекОбменСКонтрагентами = МодульНастройкиЭДО.ЗапросНастроекОтправкиДляВалидацииМаршрута(
				"НастройкиОбменСКонтрагентами");
			МассивЗапросовНастроек.Добавить(ЗапросНастроекОбменСКонтрагентами);
			
			ТекстЗапросаОбменСКонтрагентами = "ВЫБРАТЬ
			|НастройкиОбменСКонтрагентами.ВидДокумента,
			|НастройкиОбменСКонтрагентами.Сертификат,
			|НастройкиОбменСКонтрагентами.Отправитель,
			|НастройкиОбменСКонтрагентами.Получатель,
			|НастройкиОбменСКонтрагентами.Договор,
			|НЕОПРЕДЕЛЕНО КАК НастройкаОбмена
			|
			|ПОМЕСТИТЬ ВидыДокументовПоНастройкам
			|
			|ИЗ
			|
			|НастройкиОбменСКонтрагентами КАК НастройкиОбменСКонтрагентами";
			
			ТекстыЗапросовПоНастройкам.Добавить(ТекстЗапросаОбменСКонтрагентами);

		КонецЕсли;
		
		Если ЕстьОбменСБанками Тогда
			
			МодульОбменСБанкамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСБанкамиСлужебный");
			ЗапросНастроекОбменСБанками = МодульОбменСБанкамиСлужебный.ЗапросНастроекДляВалидацииМаршрутов(
				"НастройкиОбменСБанками", "МаршрутПодписания");
			МассивЗапросовНастроек.Добавить(ЗапросНастроекОбменСБанками);
			
			ТекстЗапросаОбменСБанками = "ВЫБРАТЬ
			|НастройкиОбменСБанками.ВидДокумента,
			|НастройкиОбменСБанками.Сертификат,
			|НЕОПРЕДЕЛЕНО КАК Отправитель,
			|НЕОПРЕДЕЛЕНО КАК Получатель,
			|НЕОПРЕДЕЛЕНО КАК Договор,
			|НастройкиОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
			|
			|ПОМЕСТИТЬ ВидыДокументовПоНастройкам
			|
			|ИЗ
			|
			|НастройкиОбменСБанками КАК НастройкиОбменСБанками";
			
			Если ЕстьОбменСКонтрагентами Тогда
				ТекстЗапросаОбменСБанками = СтрЗаменить(ТекстЗапросаОбменСБанками,
					"ПОМЕСТИТЬ ВидыДокументовПоНастройкам", "");
			КонецЕсли;
			
			ТекстыЗапросовПоНастройкам.Добавить(ТекстЗапросаОбменСБанками);
			
		КонецЕсли;
		
		ИтоговыйТекстЗапросаПоНастройкам = СтрСоединить(ТекстыЗапросовПоНастройкам, ТекстОбъединения);
		
		ТекстЗапроса = ИтоговыйТекстЗапросаПоНастройкам +
		" 
		|;
		|
		|ВЫБРАТЬ
		|	ВидыДокументовПоНастройкам.ВидДокумента КАК ВидДокумента,
		|	ВидыДокументовПоНастройкам.НастройкаОбмена КАК НастройкаОбмена,
		|	ВидыДокументовПоНастройкам.Отправитель КАК Отправитель,
		|	ВидыДокументовПоНастройкам.Получатель КАК Получатель,
		|	ВидыДокументовПоНастройкам.Договор КАК Договор,
		|	ВидыДокументовПоНастройкам.Сертификат
		|ИЗ
		|	ВидыДокументовПоНастройкам КАК ВидыДокументовПоНастройкам
		|ИТОГИ ПО
		|	НастройкаОбмена,
		|	Отправитель,
		|	Получатель,
		|	Договор,
		|	ВидДокумента";
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МаршрутПодписания", Параметры.Маршрут);
		Запрос.Текст = ТекстЗапроса;
		
		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, МассивЗапросовНастроек);
		ИтоговыйЗапрос.УстановитьПараметр("МаршрутПодписания", Параметры.Маршрут);
		
		// Обойдем настройки и проверим каждую на валидность
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаНастроек = ИтоговыйЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		УстановитьПривилегированныйРежим(Ложь);
		Пока ВыборкаНастроек.Следующий() Цикл
			НаборСертификатов = Новый Массив;
			НаборВидовЭД = Новый Массив;
			СертификатыСчитаны = Ложь;
			ВыборкаОтправителей = ВыборкаНастроек.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОтправителей.Следующий() Цикл
				ВыборкаПолучателей = ВыборкаОтправителей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПолучателей.Следующий() Цикл
					ВыборкаДоговоров = ВыборкаПолучателей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДоговоров.Следующий() Цикл
						ВыборкаВидов = ВыборкаДоговоров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаВидов.Следующий() Цикл
							НаборВидовЭД.Добавить(ВыборкаВидов.ВидДокумента);
							
							Если Не СертификатыСчитаны Тогда
								ВыборкаСертификатов = ВыборкаВидов.Выбрать();
								Пока ВыборкаСертификатов.Следующий() Цикл
									Если ЗначениеЗаполнено(ВыборкаСертификатов.Сертификат) Тогда
										НаборСертификатов.Добавить(ВыборкаСертификатов.Сертификат);
									КонецЕсли;
								КонецЦикла;
								СертификатыСчитаны = Истина;
							КонецЕсли;
						КонецЦикла;
						
						РезультатыПроверки = МаршрутыПодписанияБЭД.РезультатыПроверкиМаршрутаПоПараметрамНастройки(
							Параметры.ТаблицаТребований, НаборСертификатов, НаборВидовЭД);
							
						// Ошибки недоступности сертификатов для подписания вида ЭД в целом пропускаем - это не ошибка настройки маршрута.
						ПредставлениеНастройки = "";
						Если ЗначениеЗаполнено(ВыборкаДоговоров.НастройкаОбмена) Тогда
							НастройкаОбмена = ВыборкаДоговоров.НастройкаОбмена;
						Иначе 
							ОписаниеНастройки = Новый Структура("Отправитель, Получатель, Договор");
							ЗаполнитьЗначенияСвойств(ОписаниеНастройки, ВыборкаДоговоров);
							
							ПредставлениеНастройки = ПредставлениеНастройкиОтправкиЭлектронныхДокументов(ОписаниеНастройки);
							МенеджерНастроек = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов");
							
							НастройкаОбмена = МенеджерНастроек.СоздатьКлючЗаписи(ОписаниеНастройки);
							
						КонецЕсли;
						МаршрутыПодписанияБЭД.ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, 
							НастройкаОбмена, Параметры.Наименование, Результат, "НетДоступныхСертификатов", ПредставлениеНастройки);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если ЕстьОбменСКонтрагентами Тогда
			
			МодульНастройкиЭДО = ОбщегоНазначения.ОбщийМодуль("НастройкиЭДО");
			МодульНастройкиЭДОКлиентСервер = ОбщегоНазначения.ОбщийМодуль("НастройкиЭДОКлиентСервер");
			
			Отбор = МодульНастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
			Отбор.ПроизвольноеУсловие = "МаршрутПодписания = &МаршрутПодписания И ВидПодписи <> &ВидПодписи";
			ЗапросНастроек = МодульНастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", Отбор);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
			|	ПРЕДСТАВЛЕНИЕ(НастройкиВнутреннегоЭДО.Организация) КАК ОрганизацияПредставление,
			|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента
			|ИЗ
			|	НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
			|ИТОГИ ПО
			|	Организация";
			
			
			МассивВспомогательныхЗапросов = Новый Массив;
			МассивВспомогательныхЗапросов.Добавить(ЗапросНастроек);

			ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, МассивВспомогательныхЗапросов);
			ИтоговыйЗапрос.УстановитьПараметр("МаршрутПодписания", Параметры.Маршрут);
			ИтоговыйЗапрос.УстановитьПараметр("ВидПодписи", Параметры.ВидПодписи);
			
			РезультатЗапроса = ИтоговыйЗапрос.Выполнить();

			Если Не РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр(
					"ru = 'Вид подписи в маршруте не соответствует виду подписи в настройках внутреннего ЭДО по организациям:'"));
				ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаОрганизация.Следующий() Цикл
					ВыборкаДетальныеЗаписи = ВыборкаОрганизация.Выбрать();
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						ЗначенияКлюча = МодульНастройкиЭДОКлиентСервер.НовоеОписаниеПолейКлючаНастройкиВнутреннегоЭДО();
						ЗначенияКлюча.Организация = ВыборкаОрганизация.Организация;
						ЗначенияКлюча.ВидДокумента = ВыборкаДетальныеЗаписи.ВидДокумента;
						КлючОбъекта = МодульНастройкиЭДО.КлючОбъектаНастроекВнутреннегоЭДО(ЗначенияКлюча);
						ОбщегоНазначения.СообщитьПользователю("- " + ВыборкаДетальныеЗаписи.ОрганизацияПредставление,
							КлючОбъекта, , , Результат);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Устанавливает у дерева маршрута на форме условное оформление.
//
// Параметры:
//  Форма				               - УправляемаяФорма - форма, содержащая дерево маршрута подписания.
//  ИмяРеквизитаДерева	               - Строка - имя реквизита дерева маршрута на форме.
//  ОформитьКолонкуПодписант           - Булево - признак необходимости установки условного оформления для колонки
//    "Подписант".
//  ОформитьВидимостьКолонкиСертификат - Булево - признак необходимости установки условного оформления для колонки
//    "Сертификат".
//
Процедура УстановитьУсловноеОформлениеДереваМаршрута(Форма, ИмяРеквизитаДерева = "ДеревоТребований", 
	ОформитьКолонкуПодписант = Истина, ОформитьВидимостьКолонкиСертификат = Истина) Экспорт

	// Видимость колонки "Сертификат"
	Если ОформитьВидимостьКолонкиСертификат Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + "Сертификат");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".ЭтоСтрокаУсловия");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	КонецЕсли;
	
	// Текст пустой колонки "Сертификат"
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + "Сертификат");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".Сертификат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'любым сертификатом'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Текст пустой колонки "Подписант"
	Если ОформитьКолонкуПодписант Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + "ОсновноеЗначение");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".Подписант");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".ЭтоСтрокаУсловия");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'любой пользователь'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	КонецЕсли;

КонецПроцедуры

Функция ПодписаниеЗавершено(ТаблицаПодписания) Экспорт
	Возврат Не ЗначениеЗаполнено(ТаблицаПодписания);
КонецФункции

#Область Оповещения

Функция ПодписантыДляОповещения(ТаблицаПодписания, ОбъектМаршрута) Экспорт
	
	ПодписантыДляОповещения = Новый Массив;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	СтрокиТекущихПодписантов = ТаблицаПодписания.НайтиСтроки(Новый Структура("Текущий", Истина));
	ТекущиеПодписанты = Новый Массив;
	Если СтрокиТекущихПодписантов.Количество() Тогда
		Для каждого СтрокаТаблицы Из СтрокиТекущихПодписантов Цикл
			Если СтрокаТаблицы.Подписант <> ТекущийПользователь
				И ТекущиеПодписанты.Найти(СтрокаТаблицы.Подписант) = Неопределено Тогда
				ТекущиеПодписанты.Добавить(СтрокаТаблицы.Подписант);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеПодписанты) Тогда
		Возврат ПодписантыДляОповещения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеПодписанияЭД.Подписант КАК Подписант
	|ИЗ
	|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|ГДЕ
	|	СостояниеПодписанияЭД.Объект = &Объект
	|	И СостояниеПодписанияЭД.Подписант В(&Подписанты)
	|	И НЕ СостояниеПодписанияЭД.ПодписантОповещен";
	
	Запрос.УстановитьПараметр("Объект", ОбъектМаршрута);
	Запрос.УстановитьПараметр("Подписанты", ТекущиеПодписанты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПодписантыДляОповещения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПодписантыДляОповещения = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПодписантыДляОповещения.Добавить(Выборка.Подписант);
	КонецЦикла;
	
	Возврат ПодписантыДляОповещения;
	
КонецФункции

// Фиксирует факт отправки оповещения участнику маршрута о необходимости подписания электронного документа.
//
// Параметры:
//  ОбъектПодписания - ОпределяемыйТип.ОбъектМаршрутаПодписанияБЭД - ссылка на
//                     объект, для которого было отправлено оповещение.
//  Подписант - ОпределяемыйТип.Пользователь - пользователь, которому было отправлено оповещение.
//
Процедура ЗафиксироватьФактОповещенияУчастникаМаршрута(ОбъектПодписания, Подписант) Экспорт
	
	Записывать = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектПодписания);
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Подписант = Подписант И Не Запись.ПодписантОповещен Тогда
				Запись.ПодписантОповещен = Истина;
				Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Запись факта оповещения о подписании электронного документа'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Запросы

Функция НовыйОтборОбъектовДляПодписания() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает данные объектов для подписания.
// Запрос содержит следующие поля:
//   * Объект - ОпределяемыйТип.ОбъектМаршрутаПодписанияБЭД - объект подписания.
//   * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат.
//   * Организация - ОпределяемыйТип.Организация - организация.
//   
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборОбъектовДляПодписания
// 	
// Возвращаемое значение:
// 	см. _ОбщегоНазначенияБЭД.НовоеОписаниеЗапросаКомпонентаЭДО
Функция ЗапросОбъектовДляПодписания(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборОбъектовДляПодписания();
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеПодписанияЭД.Объект КАК Объект,
		|	СостояниеПодписанияЭД.Сертификат КАК Сертификат,
		|	СостояниеПодписанияЭД.Организация КАК Организация
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|ГДЕ
		|	СостояниеПодписанияЭД.Текущий
		|	И СостояниеПодписанияЭД.Подписант В (&Пользователи)
		|	И &ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.Объект) Тогда
		ПоляУсловия.Добавить(СтрШаблон("СостояниеПодписанияЭД.Объект В(%1)", Отбор.Объект));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы,
		"", ПоляУсловия);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	ПользователиДляПодписания = Новый Массив;
	ПользователиДляПодписания.Добавить(Пользователи.АвторизованныйПользователь());
	ПользователиДляПодписания.Добавить(Пользователи.СсылкаНеуказанногоПользователя());
	ПользователиДляПодписания.Добавить(ИнтеграцияБСПБЭД.ПустаяСсылкаНаПользователя());
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("Пользователи", ПользователиДляПодписания);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция НовыйОтборПроверкиТекущегоОбъектаДляПодписания() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает данные объектов для подписания.
// Запрос содержит следующие поля:
//   * Текущий - Булево - признак текущего объекта для подписания.
//   
// Параметры:
// 	Отбор - см. НовыйОтборПроверкиТекущегоОбъектаДляПодписания
// 	
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапросаКомпонентаЭДО
Функция ЗапросПроверкиТекущегоОбъектаДляПодписания(Отбор) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостояниеПодписанияЭД.Текущий КАК Текущий
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|ГДЕ
		|	СостояниеПодписанияЭД.Текущий
		|	И СостояниеПодписанияЭД.Подписант В (&Пользователи)";	
	
	ПоляУсловия = Новый Массив;
	
	Если ЗначениеЗаполнено(Отбор.Объект) Тогда
		ПоляУсловия.Добавить(СтрШаблон("СостояниеПодписанияЭД.Объект = %1", Отбор.Объект));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, "", "", ПоляУсловия);
	
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	ПользователиДляПодписания = Новый Массив;
	ПользователиДляПодписания.Добавить(Пользователи.АвторизованныйПользователь());
	ПользователиДляПодписания.Добавить(Пользователи.СсылкаНеуказанногоПользователя());
	ПользователиДляПодписания.Добавить(ИнтеграцияБСПБЭД.ПустаяСсылкаНаПользователя());
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("Пользователи", ПользователиДляПодписания);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает список возможных подписантов маршрута.
//
// Параметры:
//  МаршрутПодписания - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Пользователи - возможные подписанты маршрута.
//
Функция ВозможныеПодписантыМаршрута(МаршрутПодписания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МаршрутыПодписанияТаблицаТребований.Подписант КАК Подписант
		|ИЗ
		|	Справочник.МаршрутыПодписания.ТаблицаТребований КАК МаршрутыПодписанияТаблицаТребований
		|ГДЕ
		|	МаршрутыПодписанияТаблицаТребований.Ссылка = &МаршрутПодписания
		|	И МаршрутыПодписанияТаблицаТребований.Подписант <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МаршрутПодписания", МаршрутПодписания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подписант"); 
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_9_3

#Область РегистрыСведений_СостояниеПодписанияЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СостояниеПодписанияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1974edaa-f51d-4a7c-8c8e-585eeb26e2ab");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостояниеПодписанияЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: обновление состояний подписания электронных документов'");
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостояниеПодписанияЭД";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СостояниеПодписанияЭД";
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		Обработчик.ЧитаемыеОбъекты = Обработчик.ЧитаемыеОбъекты + ",Справочник.СообщениеЭДОПрисоединенныеФайлы";
	КонецЕсли;
	
#КонецОбласти

#Область Справочники_МаршрутыПодписания_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f776e15c-cdf3-4712-a8e7-128edbcf4b1c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МаршрутыПодписания.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.МаршрутыПодписания";
	Обработчик.ИзменяемыеОбъекты = "Справочник.МаршрутыПодписания";
	Обработчик.БлокируемыеОбъекты = "Справочник.МаршрутыПодписания";
	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: Заполняет служебные свойства у предопределенных маршрутов. 
	|Работа с маршрутами подписания временно невозможна.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "До";

		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "До";
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействиеОбработчикиОбновления.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "До";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействиеОбработчикиОбновления.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "Любой";
	КонецЕсли;
	
#КонецОбласти

#КонецОбласти	

КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриНастройкеПодчиненногоУзлаРИБ.
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	Справочники.МаршрутыПодписания.ОбработатьДанные_СоздатьПредопределенныеМаршруты();
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьСтрокиТаблицыТребованийКПодписаниюВДерево(СтрокиТаблицы, РодительскийУзелДерева, Таблица)

	ПодчиненныеУзлы = РодительскийУзелДерева.Строки;
	
	// В этих переменных будем хранить результаты подсчетов по истинности узлов
	ВыполненоМинимум = Истина;
	ВыполненоМаксимум = Ложь;
	ВыполненоОбщийМаксимум = Ложь;
	
	// В этих переменных будем хранить результаты подсчетов по истинности узлов
	ВыполнимоМинимум = Истина;
	ВыполнимоМаксимум = Ложь;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл		
		НовыйУзел = ПодчиненныеУзлы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, СтрокаТаблицы);

		ДочерниеСтроки = Таблица.НайтиСтроки(Новый Структура("ИдентификаторРодителя", СтрокаТаблицы.Идентификатор));
		ПрочитатьСтрокиТаблицыТребованийКПодписаниюВДерево(ДочерниеСтроки, НовыйУзел, Таблица);
		
		// Рассчитаем истинность
		Если НовыйУзел.Выполнено < ВыполненоМинимум Тогда
			ВыполненоМинимум = НовыйУзел.Выполнено;
		КонецЕсли;
		
		Если НовыйУзел.Выполнено > ВыполненоМаксимум Тогда
			ВыполненоМаксимум = НовыйУзел.Выполнено;
		КонецЕсли;
		
		Если НовыйУзел.Выполнено ИЛИ НовыйУзел.ВыполненоМаксимум Тогда
			ВыполненоОбщийМаксимум = Истина;
		КонецЕсли;
		
		// Рассчитаем выполнимость
		Если ВыполнимоМинимум > НовыйУзел.ТребованиеВыполнимо Тогда
			ВыполнимоМинимум = НовыйУзел.ТребованиеВыполнимо;
		КонецЕсли;
		
		Если ВыполнимоМаксимум < НовыйУзел.ТребованиеВыполнимо Тогда
			ВыполнимоМаксимум = НовыйУзел.ТребованиеВыполнимо;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(РодительскийУзелДерева) = Тип("СтрокаДереваЗначений") 
			И ЗначениеЗаполнено(РодительскийУзелДерева.Требование) Тогда
		РодительскийУзелДерева.Выполнено = ?(РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ, 
			ВыполненоМаксимум, ВыполненоМинимум);
		РодительскийУзелДерева.ВыполненоМаксимум = ВыполненоОбщийМаксимум;
		
		РодительскийУзелДерева.ТребованиеВыполнимо = ?(
			РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ, ВыполнимоМаксимум, ВыполнимоМинимум);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьСтрокиДереваВТаблицуТребованийКПодписанию(РодительскийУзелДерева, Таблица)

	Если ТипЗнч(РодительскийУзелДерева) = Тип("ДеревоЗначений") Тогда
		ИдентификаторРодителя = ПустойУникальныйИдентификатор();
		УчитыватьПорядок = Ложь;
	Иначе
		ИдентификаторРодителя = РодительскийУзелДерева.Идентификатор;
		УчитыватьПорядок = РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ПоПорядку;
	КонецЕсли;
	
	ПодчиненныеУзлы = РодительскийУзелДерева.Строки;
	Порядок = 1;
	Для Каждого Узел Из ПодчиненныеУзлы Цикл
		НоваяСтрокаТаблицы = Таблица.Добавить();
		Если Не ЗначениеЗаполнено(Узел.Идентификатор) Тогда
			Узел.Идентификатор = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Узел);
		НоваяСтрокаТаблицы.ИдентификаторРодителя = ИдентификаторРодителя;
		НоваяСтрокаТаблицы.Порядок = Порядок;
		
		Если УчитыватьПорядок Тогда
			Порядок = Порядок + 1;	
		КонецЕсли;
		
		ПрочитатьСтрокиДереваВТаблицуТребованийКПодписанию(Узел, Таблица);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьДеревоПодписания(РодительскийУзелДерева, УдалятьНевыполнимыеТребования, Оптимизировать,
	ПроставитьТекущие, Знач УдалятьЛожные = Ложь, ПросчитатьВес = Ложь, ЕстьНевыполнимыеТребования = Ложь)

	Если ТипЗнч(РодительскийУзелДерева) = Тип("ДеревоЗначений") ИЛИ ЗначениеЗаполнено(РодительскийУзелДерева.Требование) Тогда
		СтрокиДляУдаления = Новый Массив;
		
		ПроставлятьТекущиеВоВсехСтроках = ТипЗнч(РодительскийУзелДерева) = Тип("ДеревоЗначений") 
			ИЛИ РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.И
			ИЛИ РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
		ТекущийПроставлен = Ложь;
		
		ВесСумма = 0;
		ВесМаксимум = 0;
		Для Каждого СтрокаДерева Из РодительскийУзелДерева.Строки Цикл
			Если НЕ СтрокаДерева.ТребованиеВыполнимо Тогда
				ЕстьНевыполнимыеТребования = Истина;
			КонецЕсли;
			
			Если Оптимизировать И ((УдалятьЛожные И НЕ СтрокаДерева.ВыполненоМаксимум) ИЛИ СтрокаДерева.Выполнено)
					ИЛИ УдалятьНевыполнимыеТребования И НЕ СтрокаДерева.ТребованиеВыполнимо Тогда
				СтрокиДляУдаления.Добавить(СтрокаДерева);
			Иначе
				ТекУдалятьЛожные = СтрокаДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ 
					И СтрокаДерева.ВыполненоМаксимум;
				ОбработатьДеревоПодписания(СтрокаДерева, УдалятьНевыполнимыеТребования, Оптимизировать, 
					ПроставитьТекущие, ТекУдалятьЛожные, ПросчитатьВес, ЕстьНевыполнимыеТребования);
				
				Если НЕ ЗначениеЗаполнено(СтрокаДерева.Требование) И Не ТекущийПроставлен Тогда
					СтрокаДерева.Текущий = Истина;
					
					Если НЕ ПроставлятьТекущиеВоВсехСтроках Тогда
						ТекущийПроставлен = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ВесСумма = ВесСумма + СтрокаДерева.Вес;
				Если СтрокаДерева.Вес > ВесМаксимум Тогда
					ВесМаксимум = СтрокаДерева.Вес;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			РодительскийУзелДерева.Строки.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		Если ПросчитатьВес И ТипЗнч(РодительскийУзелДерева) <> Тип("ДеревоЗначений") Тогда
			РодительскийУзелДерева.Вес = ?(РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ, 
				ВесМаксимум, ВесСумма);
		КонецЕсли;
	Иначе // это строка подписанта
		Если ПросчитатьВес Тогда
			РодительскийУзелДерева.Вес = 1;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВспомогательныеКолонкиВДеревеМаршрута(УзелДерева, ИмяОсновногоРеквизита = "Подписант")

	СтрокиДерева = УзелДерева.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
	    ЗаполнитьВспомогательныеКолонкиВДеревеМаршрута(СтрокаДерева, ИмяОсновногоРеквизита);
		МаршрутыПодписанияБЭДКлиентСервер.ЗаполнитьСлужебныеРеквизитыСтрокиДерева(СтрокаДерева, ИмяОсновногоРеквизита);
	КонецЦикла;

КонецПроцедуры

Функция ТаблицаПодписанияПоПараметрам(Маршрут, УсловиеПодписания, СписокПодписантов)

	Результат = ПустаяТаблицаТребованийКПодписанию();
	Если Маршрут = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.МаршрутыПодписания.ОднойДоступнойПодписью") Тогда
		СтрокаТребования = Результат.Добавить();
		СтрокаТребования.ИдентификаторРодителя = ПустойУникальныйИдентификатор();
		СтрокаТребования.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СтрокаТребования.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
		
		СтрокаПодписанта = Результат.Добавить();
		СтрокаПодписанта.ИдентификаторРодителя = СтрокаТребования.Идентификатор;
		СтрокаПодписанта.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СтрокаПодписанта.Подписант = Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли Маршрут = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.МаршрутыПодписания.УказыватьПриСоздании") Тогда
		СтрокаТребования = Результат.Добавить();
		СтрокаТребования.ИдентификаторРодителя = ПустойУникальныйИдентификатор();
		СтрокаТребования.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СтрокаТребования.Требование = УсловиеПодписания;
		
		Если ЗначениеЗаполнено(СписокПодписантов) Тогда
			Для Каждого Подписант Из СписокПодписантов Цикл
				СтрокаПодписанта = Результат.Добавить();
				СтрокаПодписанта.ИдентификаторРодителя = СтрокаТребования.Идентификатор;
				СтрокаПодписанта.Идентификатор = Строка(Новый УникальныйИдентификатор());
				
				Если ТипЗнч(Подписант) = Тип("СтрокаТаблицыЗначений") Тогда
					ЗаполнитьЗначенияСвойств(СтрокаПодписанта, Подписант);
				Иначе
					СтрокаПодписанта.Подписант = Подписант;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Заполняет дерево значений по таблице маршрута подписания.
//
// Параметры:
//  Дерево	 - ДеревоЗначений, Неопределено - дерево для формирования маршрута. Если не задано, будет сформировано.
//  Таблица	 - ТаблицаЗначений - таблица маршрута подписания. По структуре должна соответствовать табличной части
//    "ТаблицаТребований" справочника "МаршрутыПодписания".
//
Процедура ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(Дерево, Таблица)
	
	// Если дерево не задано, инициализируем его
	Если Дерево = Неопределено Тогда
		Дерево = ПустоеДеревоТребованийКПодписанию();
	Иначе
		ДополнитьДеревоПодписанияСлужебнымиКолонками(Дерево);
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ИдентификаторРодителя", ПустойУникальныйИдентификатор());
	СтрокиВерхнегоУровня = Таблица.НайтиСтроки(ПараметрыПоиска);
	ПрочитатьСтрокиТаблицыТребованийКПодписаниюВДерево(СтрокиВерхнегоУровня, Дерево, Таблица);
	
КонецПроцедуры

// Возвращает пустой идентификатор строки дерева / таблицы маршрута подписания.
// 
// Возвращаемое значение:
//  Строка - строка, выступающая в качестве пустого идентификатора.
//
Функция ПустойУникальныйИдентификатор() 
	
	Возврат "";
	
КонецФункции

// Формирует набор параметров для выбора маршрута.
//
// Параметры:
//  ЗадаватьМаршрутВручную			 - Булево - признак того, что маршрут будет указываться непосредственно при отправке
//    документа на подпись.
//  Подписанты						 - ТаблицаЗначений - таблица состава подписантов с колонками:
//    * Подписант - СправочникСсылка.Пользователи - пользователь, который может установить подпись.
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, которым можно 
//      подписать документ.
//  ФиксированныйМаршрут			 - СправочникСсылка.МаршрутыПодписания - маршрут, по которому будет подписываться документ.
//  ДоступныеДляВыбораСертификаты	 - Массив - содержит сертификаты, которыми можно подписывать документ в соответствии
//    с настройками.
// 
// Возвращаемое значение:
//  Структура - параметры выбора маршрута.
//
Функция НовыеНастройкиВыбораМаршрута(ЗадаватьМаршрутВручную, Подписанты = Неопределено,
	ФиксированныйМаршрут = Неопределено, ДоступныеДляВыбораСертификаты = Неопределено)

	ПредставлениеНастроек = ПредставлениеМаршрутаВыбранногоВДокументе(
		ЗадаватьМаршрутВручную, Подписанты, ФиксированныйМаршрут);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗадаватьМаршрутВручную", ЗадаватьМаршрутВручную);
	Настройки.Вставить("Подписанты", Подписанты);
	Настройки.Вставить("Маршрут", ФиксированныйМаршрут);
	Настройки.Вставить("ПредставлениеНастроек", ПредставлениеНастроек);
	Настройки.Вставить("ДоступныеДляВыбораСертификаты", ДоступныеДляВыбораСертификаты);
		
	Возврат Настройки;

КонецФункции

// Добавляет при необходимости в дерево подписания служебные колонки, необходимые для работы служебных механизмов.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево маршрута подписания.
//
Процедура ДополнитьДеревоПодписанияСлужебнымиКолонками(Дерево)
	
	Дерево.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ТребованиеВыполнимо", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Выполнено", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ВыполненоМаксимум", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));

КонецПроцедуры

// Формирует представление ошибки проверки корректности маршрута подписания.
//
// Параметры:
//  ИдентификаторОшибки	 - Строка - идентификатор ошибки.
// 
// Возвращаемое значение:
//  Строка - представление ошибки.
//
Функция ПредставлениеОшибкиНесоответствияМаршрутаНастройкам(ИдентификаторОшибки)

	Ошибки = Новый Структура;
	Ошибки.Вставить("НетДоступныхСертификатов", 
		НСтр("ru = 'Нет доступных сертификатов для подписания документов ""%1""'"));
	Ошибки.Вставить("ДлинаМаршрутаБольшеКоличестваДоступныхСертификатов", 
		НСтр("ru = 'Возможное количество подписей по маршруту ""%2"" больше количества доступных сертификатов по документам ""%1""'"));
	Ошибки.Вставить("НетДоступныхСертификатовДляНекоторыхШаговМаршрута", 
		НСтр("ru = 'Нет доступных сертификатов для подписания документов ""%1"" на некоторых шагах маршрута ""%2""'"));
	
	Возврат Ошибки[ИдентификаторОшибки];

КонецФункции

// Возвращает вес маршрута подписание (максимальное количество доступных подписей).
//
// Параметры:
//  ОбъектМаршрута - ОпределяемыйТип.ОбъектМаршрутаПодписанияБЭД - объект маршрута подписания.
// 
// Возвращаемое значение:
//  Число - вес маршрута.
//
Функция ВесМаршрутаПодписания(ОбъектМаршрута)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектМаршрута", ОбъектМаршрута);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТребований.Идентификатор КАК Идентификатор,
	|	ТаблицаТребований.ИдентификаторРодителя КАК ИдентификаторРодителя,
	|	ТаблицаТребований.Порядок КАК Порядок,
	|	ТаблицаТребований.Требование,
	|	ТаблицаТребований.Подписант,
	|	ТаблицаТребований.Организация,
	|	ТаблицаТребований.Сертификат
	|ИЗ
	|	РегистрСведений.СостояниеПодписанияЭД КАК ТаблицаТребований
	|ГДЕ
	|	ТаблицаТребований.Объект = &ОбъектМаршрута
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторРодителя,
	|	Порядок";

	УстановитьПривилегированныйРежим(Истина);
	ТаблицаМаршрута = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Дерево = Неопределено;
	ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(Дерево, ТаблицаМаршрута);

	ОбработатьДеревоПодписания(Дерево, Ложь, Ложь, Ложь, , Истина);
	Если Дерево.Строки.Количество() > 0 Тогда
		Возврат Дерево.Строки[0].Вес;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ПредставлениеНастройкиОтправкиЭлектронныхДокументов(КлючНастройки)

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КлючНастройки.Получатель);
	МассивСтрок.Добавить(КлючНастройки.Отправитель);
	Если ЗначениеЗаполнено(КлючНастройки.Договор) Тогда
		МассивСтрок.Добавить(КлючНастройки.Договор);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, " • ");

КонецФункции

// Возвращает описание вида ошибки маршрута подписания
//  
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиМаршрутПодписания()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОшибкаМаршрутаПодписания";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибки в настройках маршрута подписания'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет доступных сертификатов для подписания документов'");
	ОписаниеРешения = НСтр("ru = '<a href = ""Проверьте"">Проверьте:</a>
		|1. Доступность сертификатов, указанных в маршруте подписания.
		|2. Пользователей, указанных в сертификатах.'");
	ВидОшибки.ОписаниеРешения = ОписаниеРешения;
	ВидОшибки.ОбработчикиНажатия.Вставить("Проверьте",
		"МаршрутыПодписанияБЭДКлиент.ОткрытьОшибкиМаршрутовПодписания");
		
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти
