
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает настройки отправки.
// 
// Параметры:
// 	КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// Возвращаемое значение:
//  - Неопределено,
//    См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
Функция НастройкиОтправки(КлючНастроекОтправки) Экспорт
	
	Возврат НастройкиОтправкиЭДОСлужебный.НастройкиОтправки(КлючНастроекОтправки);
	
КонецФункции

// Возвращает представление настройки отправки.
// 
// Параметры:
// 	КлючНастройки - РегистрСведенийКлючЗаписи.НастройкиОтправкиЭлектронныхДокументов
// Возвращаемое значение:
// 	Строка - Описание
Функция ПредставлениеНастройкиОтправки(КлючНастройки) Экспорт
	
	Возврат НастройкиОтправкиЭДОСлужебный.ПредставлениеНастройкиОтправки(КлючНастройки);
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя
//  Организация - ОпределяемыйТип.Организация
//  Контрагент - ОпределяемыйТип.УчастникЭДО
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа
//  СоздаватьНастройки - Булево - создавать настройки при отсутствии
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОтправкиПоИдентификаторам(ИДОтправителя, ИДПолучателя,
						Организация, Контрагент,
						ВидДокумента = Неопределено, СоздаватьНастройки = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	ОтборУчетныхЗаписей = СинхронизацияЭДО.НовыйОтборУчетныхЗаписей();
	ЗапросУчетныхЗаписей = СинхронизацияЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	
	ОтборПриглашений = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.ИдентификаторКонтрагента = "&ИдентификаторКонтрагента";
	ОтборПриглашений.ИдентификаторОрганизации = "&ИдентификаторОрганизации";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияКОбменуЭлектроннымиДокументами");
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	Запросы.Добавить(ЗапросПриглашений);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ПриглашениеПринято КАК Статус,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент
		|ИЗ
		|	ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиЭДОИсходящиеДокументы.Отправитель КАК Организация,
		|	НастройкиЭДОИсходящиеДокументы.Получатель КАК Контрагент,
		|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|	НастройкиЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаТранспортногоКонтейнераЭДО.Версия30) КАК ВерсияФормата,
		|	НастройкиЭДОИсходящиеДокументы.Договор КАК ДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиЭДОИсходящиеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторПолучателя = &ИдентификаторКонтрагента
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОтправителя = &ИдентификаторОрганизации
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ВидДокумента = НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЭДОИсходящиеДокументы.ВидДокумента = &ВидДокумента
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НастройкиЭДОИсходящиеДокументы.Отправитель = &Организация
		|	И НастройкиЭДОИсходящиеДокументы.Получатель = &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНастройки.Отправитель,
		|	ДополнительныеНастройки.Получатель,
		|	ДополнительныеНастройки.СпособОбменаЭД,
		|	ДополнительныеНастройки.ТребуетсяИзвещениеОПолучении,
		|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаТранспортногоКонтейнераЭДО.Версия30),
		|	ДополнительныеНастройки.Договор
		|ИЗ
		|	ДополнительныеНастройки КАК ДополнительныеНастройки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДополнительныеНастройки.ИдентификаторПолучателя = &ИдентификаторКонтрагента
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДополнительныеНастройки.ИдентификаторОтправителя = &ИдентификаторОрганизации
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ВидДокумента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДополнительныеНастройки.ВидДокумента = &ВидДокумента
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ДополнительныеНастройки.Отправитель = &Организация
		|	И ДополнительныеНастройки.Получатель = &Контрагент";
	Запрос.Текст = ТекстЗапроса;
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	ИтоговыйЗапрос.УстановитьПараметр("Контрагент" , Контрагент);
	ИтоговыйЗапрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовДокументов(ИтоговыйЗапрос);
	РезультатЗапроса = ИтоговыйЗапрос.ВыполнитьПакет();
	
	ТаблицаПриглашений = РезультатЗапроса[2].Выгрузить();
	Присоединен = Ложь;
	
	Если ТаблицаПриглашений.Количество() > 0
		И ТаблицаПриглашений[0].Статус Тогда
	      Присоединен = Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ДоговорКонтрагента",  Выборка.ДоговорКонтрагента);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("ВерсияФормата",       Выборка.ВерсияФормата);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
	ИначеЕсли СоздаватьНастройки И Присоединен Тогда
		
		СоздатьНастройкиОтправки(Организация, Контрагент, Неопределено,
			ИДОтправителя, ИДПолучателя);
		НастройкиОтраженияВУчетеЭДО.СоздатьНастройкиОтраженияВУчете(Организация, Контрагент, ИДПолучателя, "");
		
		Возврат ПолучитьНастройкиОтправкиПоИдентификаторам(ИДОтправителя, ИДПолучателя, Организация, Контрагент,
			ВидДокумента, Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// См. НастройкиЭДО.СоздатьНастройкиОтправки
Процедура СоздатьНастройкиОтправки(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента,
	Знач ИдентификаторОрганизации, Знач ИдентификаторКонтрагента, Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "Организация",
		Организация, Метаданные.ОпределяемыеТипы.Организация.Тип);
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "Контрагент",
		Организация, Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "ИдентификаторОрганизации",
		ИдентификаторОрганизации, Новый ОписаниеТипов("Строка"));
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "ИдентификаторКонтрагента",
		ИдентификаторКонтрагента, Новый ОписаниеТипов("Строка"));
		
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		ДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение();
	КонецЕсли;
	
	ТекущаяТаблица = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНастройкиОтправкиДокументов();
	
	Данные            = УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ИдентификаторОрганизации);
	ДанныеКонтрагента = РегистрыСведений.ОператорыЭДО.ИнформацияОбОператореЭДОУчетнойЗаписи(ИдентификаторКонтрагента);
	
	ВыгружатьДополнительныеСведения = Ложь;
	Если ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
		ВыгружатьДополнительныеСведения = ДанныеКонтрагента.ОтправлятьДополнительныеСведения;
	КонецЕсли;
	
	ТекущаяТаблица.ЗаполнитьЗначения(Организация                     , "Отправитель");
	ТекущаяТаблица.ЗаполнитьЗначения(Контрагент                      , "Получатель");
	ТекущаяТаблица.ЗаполнитьЗначения(ДоговорКонтрагента              , "Договор");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторОрганизации        , "ИдентификаторОтправителя");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторКонтрагента        , "ИдентификаторПолучателя");
	ТекущаяТаблица.ЗаполнитьЗначения(Данные.СпособОбменаЭД           , "СпособОбменаЭД");
	ТекущаяТаблица.ЗаполнитьЗначения(ВыгружатьДополнительныеСведения , "ВыгружатьДополнительныеСведения");
	
	ПоддерживаемыеФорматы = НастройкиЭДО.АктуальныеПоддерживаемыеФорматыАбонента(ИдентификаторКонтрагента); 
	Для каждого СтрокаНастроек Из ТекущаяТаблица Цикл
		
		Если СтрокаНастроек.ВерсияФорматаУстановленаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура("ИдентификаторАбонента, ВидДокумента", СтрокаНастроек.ИдентификаторПолучателя,
			СтрокаНастроек.ВидДокумента);
		НайденныеСтроки = ПоддерживаемыеФорматы.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФормата = НайденныеСтроки[0];
		Если СтрокаФормата <> Неопределено И СтрокаФормата.Формат <> СтрокаНастроек.ВерсияФормата Тогда
			СтрокаНастроек.ВерсияФормата = СтрокаФормата.Формат;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяТаблица = ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(Организация, Контрагент, ДоговорКонтрагента, ТекущаяТаблица);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , ДоговорКонтрагента);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НастройкиОтправкиЭД = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НастройкиОтправкиЭД.Отбор.Отправитель.Установить(Организация);
		НастройкиОтправкиЭД.Отбор.Получатель.Установить(Контрагент);
		НастройкиОтправкиЭД.Отбор.Договор.Установить(ДоговорКонтрагента);
		НастройкиОтправкиЭД.Загрузить(ТекущаяТаблица);
		НастройкиОтправкиЭД.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание настроек отправки электронных документов'"),
			ПодробноеПредставлениеОшибки(Информация), КраткоеПредставлениеОшибки(Информация));
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	
	ПараметрыПроверки = РаботаСАбонентамиЭДО.НовыеПараметрыПроверкиКонтрагента();
	ПараметрыПроверки.Контрагент = Контрагент;
	ПараметрыПроверки.ИНН = ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента];
	ПараметрыПроверки.КПП = ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента];
	ПараметрыПроверки.СохранятьРезультатСразуПослеПроверки = Истина;
	
	РаботаСАбонентамиЭДО.ПроверитьКонтрагента(ПараметрыПроверки);
	
КонецПроцедуры

// Создает настройки отправки интеркампани.
// 
// Параметры:
// 	КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// Возвращаемое значение:
// 	- См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
// 	- Неопределено
Функция СоздатьНастройкиИнтеркампани(КлючНастроек) Экспорт
	
	Настройка = Неопределено;
	
	Настройки = НастройкиОтправкиЭДОСлужебный.НоваяТаблицаНастроек();
	
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(КлючНастроек.ВидДокумента);
	НастройкиОтправкиЭДОСлужебный.ЗаполнитьНастройкиПоВидамЭлектронныхДокументовИнтеркампани(Настройки, ВидыДокументов,
		КлючНастроек.Отправитель, КлючНастроек.Получатель);
	
	Если НастройкиОтправкиЭДОСлужебный.ЗаписатьНастройкиИнтеркампани(Настройки, КлючНастроек.Отправитель,
		КлючНастроек.Получатель) И Настройки.Количество() Тогда
		Настройка = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
		ЗаполнитьЗначенияСвойств(Настройка, Настройки[0]);
		Настройка.Формат = Настройки[0].ВерсияФормата;
		Настройка.СпособОбмена = Настройки[0].СпособОбменаЭД;
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции

// См. СинхронизацияЭДОСобытия.ПриУдаленииУчетнойЗаписи
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = &ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ИдентификаторУчетнойЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтправкиЭлектронныхДокументовПоВидам = РезультатЗапроса.Выбрать();
	Пока НастройкиОтправкиЭлектронныхДокументовПоВидам.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель);
		НаборЗаписей.Отбор.Получатель.Установить(НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель);
		НаборЗаписей.Отбор.Договор.Установить(НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор);
		НаборЗаписей.Отбор.ВидДокумента.Установить(НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает наличие настроек заполнения дополнительных полей.
// 
// Параметры:
// 	КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// 	Формат - Строка
// Возвращаемое значение:
// 	Булево
Функция ЕстьНастройкиЗаполненияДополнительныхПолей(КлючНастроекОтправки, Формат) Экспорт
	
	Запрос = ЗапросНастроекЗаполненияДополнительныхПолей(КлючНастроекОтправки, Формат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает настройку заполнения дополнительных полей.
// 
// Параметры:
// 	КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// 	Формат - Строка
// 	ТекстОшибки - Строка - выходной параметр, содержит текст ошибки, возникшей при получении настройки
// Возвращаемое значение:
// 	- Неопределено -.
// 	- ТаблицаЗначений - с колонками:
// * Идентификатор - Строка
// * Имя - Строка
// * Представление - Строка 
// * Описание - Строка
// * Правило - Строка
// * Заполнение - Строка
// * Значение - Строка
// * Раздел - Строка
Функция НастройкаЗаполненияДополнительныхПолей(КлючНастроек, Формат = Неопределено, ТекстОшибки = Неопределено) Экспорт
	
	НастройкаЗаполнения = Неопределено;
	
	Запрос = ЗапросНастроекЗаполненияДополнительныхПолей(КлючНастроек, Формат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеНастройки = Неопределено;
	Если Выборка.Следующий() Тогда
		ДанныеНастройки = Выборка.Настройка.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеНастройки) Тогда
		Возврат НастройкаЗаполнения;
	КонецЕсли;
	
	Попытка
		НастройкаЗаполнения = ОбщегоНазначенияБЭД.JSONЗначение(ДанныеНастройки);
	Исключение
		ТекстОшибки = НСтр("ru = 'Произошла ошибка при чтении настроек заполнения дополнительных полей.'");
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекстОшибки);
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Отправитель: %1'"), КлючНастроек.Отправитель));
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Получатель: %1'") , КлючНастроек.Получатель));
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Договор: %1'")    , КлючНастроек.Договор));
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Вид электронного документа: %1'"), КлючНастроек.ВидДокумента));
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Формат: %1'"), Формат));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПодробныйТекстОшибки = СтрСоединить(МассивСтрок, Символы.ПС);
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(НСтр("ru = 'Чтение настроек заполнения дополнительных полей.'"),
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки);
		Возврат НастройкаЗаполнения;
	КонецПопытки;
	
	Возврат НастройкиОтправкиЭДОСлужебный.НоваяНастройкаЗаполненияДополнительныхПолей(НастройкаЗаполнения);
	
КонецФункции

// Возвращает признак наличия у пользователя права на изменение настроек отправки электронных документов.
// 
// Возвращаемое значение:
// 	Булево
Функция ЕстьПравоИзмененияНастроекОтправки() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам);;
	
КонецФункции

// См. НастройкиЭДОСобытия.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область РегистрыСведений_НастройкиЗаполненияДополнительныхПолей_ОбработатьДанныеДляПереходаНаНовуюВерсию
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2d100b86-11d6-4990-9ef2-7883f5bb792f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьСоглашенияОбИспользованииЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.НастройкиЗаполненияДополнительныхПолей";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек заполнения дополнительных полей.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область Версия_1_9_9

#Область РегистрыСведений_НастройкиОтправкиЭлектронныхДокументовПоВидам_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = 
		"РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.9.43";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("01a5b9aa-f723-4e52-b116-4953b518bf70");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = 
		НСтр("ru = '1С:Обмен с контрагентами: обновление настроек отправки электронных документов по видам'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#КонецОбласти

КонецПроцедуры

// Определяет использование УПД и УКД.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	Контрагент - ОпределяемыйТип.КонтрагентБЭД
// 	ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// Возвращаемое значение:
// 	Структура:
// * ИспользуетсяУПД - Булево
// * ИспользуетсяУКД - Булево
Функция ИспользуетсяУПД_УКД(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Организация;
	КлючНастроекОтправки.Получатель = Контрагент;
	КлючНастроекОтправки.Договор = ДоговорКонтрагента;
	
	Возврат НастройкиОтправкиЭДОСлужебный.ИспользуетсяУПД_УКД(КлючНастроекОтправки);
	
КонецФункции  

// Возвращает структуру параметров настроек отправки.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	Контрагент - ОпределяемыйТип.КонтрагентБЭД
// 	ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// Возвращаемое значение:
// 	Структура:
// * ИспользуетсяУПД - Булево
// * ИспользуетсяУКД - Булево
Функция ОбщиеПараметрыНастроек(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Организация;
	КлючНастроекОтправки.Получатель = Контрагент;
	КлючНастроекОтправки.Договор = ДоговорКонтрагента;
	
	Возврат НастройкиОтправкиЭДОСлужебный.ОбщиеПараметрыНастроек(КлючНастроекОтправки);
	
КонецФункции

// Возвращает ссылку на элемент справочника НастройкиЭДО.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	Контрагент - ОпределяемыйТип.КонтрагентБЭД
// 	ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// Возвращаемое значение:
// 	- СправочникСсылка.НастройкиЭДО
// 	- Неопределено
Функция СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	Возврат НастройкиОтправкиЭДОСлужебный.СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

// Возвращает имя типа настройки отправки.
// 
// Возвращаемое значение:
// 	Строка
Функция ИмяТипаНастройкиОтправки() Экспорт
	
	Возврат "РегистрСведенийКлючЗаписи.НастройкиОтправкиЭлектронныхДокументов";
	
КонецФункции

// Возвращает имя поля формы настроек, на котором нужно спозиционироваться при возникновении ошибки проверки настроек.
//
// Параметры:
//  НомерСтроки - Число - номер строки таблицы исходящих документов, на которой нужно спозиционироваться.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяПоляДляОтображенияОшибкиПоМаршруту(НомерСтроки) Экспорт

	ИмяПоляОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИсходящиеДокументы[%1].ДополнительныеНастройки", НомерСтроки - 1);
	
	Возврат ИмяПоляОшибки;

КонецФункции

// Возвращает адрес на сформированное соглашение об ЭДО.
// 
// Параметры:
//  НастройкаЭДО - См. СсылкаНаОбъектНастройкиЭДО
// 
// Возвращаемое значение:
//  См. НастройкиОтправкиЭДОСлужебный.СформироватьСоглашениеПоШаблону
Функция СформироватьСоглашениеПоШаблону(НастройкаЭДО) Экспорт
	
	Возврат НастройкиОтправкиЭДОСлужебный.СформироватьСоглашениеПоШаблону(НастройкаЭДО);
	
КонецФункции

// Изменяет настройку отправки электронных документов.
// 
// Параметры:
// 	Настройка - см. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
Процедура ИзменитьНастройку(Настройка) Экспорт
	
	НастройкиОтправкиЭДОСлужебный.ИзменитьНастройку(Настройка);
	
КонецПроцедуры

// Изменяет транспортные настройки.
// 
// Параметры:
//  КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
//  ИдентификаторОтправителя - Строка
//  ИдентификаторПолучателя - Строка
Процедура ИзменитьТранспортныеНастройки(КлючНастроекОтправки, ИдентификаторОтправителя,
	ИдентификаторПолучателя) Экспорт
	
	НастройкиОтправкиЭДОСлужебный.ИзменитьТранспортныеНастройки(КлючНастроекОтправки, ИдентификаторОтправителя,
		ИдентификаторПолучателя);
	
КонецПроцедуры

// Возвращает признак расширенной настройки.
// 
// Параметры:
//  КлючНастроекОтправки - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки
// 
// Возвращаемое значение:
//  Булево - Это расширенная настройка
Функция ЭтоРасширеннаяНастройка(КлючНастроекОтправки) Экспорт
	
	Возврат НастройкиОтправкиЭДОСлужебный.ЭтоРасширеннаяНастройка(КлючНастроекОтправки)
	
КонецФункции

// 	См. НастройкиОтправкиЭДОСлужебный.ПроверитьПоддержкуФорматаОператорами
Функция ПроверитьПоддержкуФорматаОператорами(КлючНастроекОтправки, Формат)  Экспорт
	
	Возврат НастройкиОтправкиЭДОСлужебный.ПроверитьПоддержкуФорматаОператорами(КлючНастроекОтправки, Формат);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// См. НастройкиЭДО.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам, Истина);
	
КонецПроцедуры

// См. НастройкиЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.Чтение.Организации
	|РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.Изменение.Организации
	|РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Чтение.Организации
	|РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента, Знач ТаблицаНастроек) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ТаблицаНастроек;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.Договор КАК Договор,
		|	ТаблицаНастроек.ДокументУчета КАК ДокументУчета,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ТаблицаНастроек.ВерсияФормата КАК ВерсияФормата,
		|	ТаблицаНастроек.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТаблицаНастроек.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаНастроек.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ТаблицаНастроек.МаршрутПодписания КАК МаршрутПодписания,
		|	ТаблицаНастроек.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	ТаблицаНастроек.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	ТаблицаНастроек.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	ТаблицаНастроек.Формировать КАК Формировать,
		|	ТаблицаНастроек.ВерсияФорматаУстановленаВручную КАК ВерсияФорматаУстановленаВручную,
		|	ТаблицаНастроек.Приоритет КАК Приоритет,
		|	ТаблицаНастроек.Группа КАК Группа,
		|	ТаблицаНастроек.ПриоритетГруппы КАК ПриоритетГруппы,
		|	ТаблицаНастроек.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара,
		|	ТаблицаНастроек.ОбменБезПодписи КАК ОбменБезПодписи
		|ПОМЕСТИТЬ ТаблицаНастроек
		|ИЗ
		|	&ТаблицаНастроек КАК ТаблицаНастроек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФормата КАК ВерсияФормата,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбменаЭД,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Формировать КАК Формировать,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФорматаУстановленаВручную КАК ВерсияФорматаУстановленаВручную,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресОтправителя КАК АдресОтправителя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.АдресПолучателя КАК АдресПолучателя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ОбменБезПодписи КАК ОбменБезПодписи
		|ПОМЕСТИТЬ ГотовыеНастройки
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.Договор КАК Договор,
		|	ТаблицаНастроек.ДокументУчета КАК ДокументУчета,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ЕСТЬNULL(ГотовыеНастройки.ВерсияФормата, ТаблицаНастроек.ВерсияФормата) КАК ВерсияФормата,
		|	ЕСТЬNULL(ГотовыеНастройки.СпособОбменаЭД, ТаблицаНастроек.СпособОбменаЭД) КАК СпособОбменаЭД,
		|	ЕСТЬNULL(ГотовыеНастройки.ИдентификаторОтправителя, ТаблицаНастроек.ИдентификаторОтправителя) КАК ИдентификаторОтправителя,
		|	ЕСТЬNULL(ГотовыеНастройки.ИдентификаторПолучателя, ТаблицаНастроек.ИдентификаторПолучателя) КАК ИдентификаторПолучателя,
		|	ЕСТЬNULL(ГотовыеНастройки.МаршрутПодписания, ТаблицаНастроек.МаршрутПодписания) КАК МаршрутПодписания,
		|	ЕСТЬNULL(ГотовыеНастройки.ТребуетсяОтветнаяПодпись, ТаблицаНастроек.ТребуетсяОтветнаяПодпись) КАК ТребуетсяОтветнаяПодпись,
		|	ЕСТЬNULL(ГотовыеНастройки.ТребуетсяИзвещениеОПолучении, ТаблицаНастроек.ТребуетсяИзвещениеОПолучении) КАК ТребуетсяИзвещениеОПолучении,
		|	ЕСТЬNULL(ГотовыеНастройки.ВыгружатьДополнительныеСведения, ТаблицаНастроек.ВыгружатьДополнительныеСведения) КАК ВыгружатьДополнительныеСведения,
		|	ЕСТЬNULL(ГотовыеНастройки.Формировать, ТаблицаНастроек.Формировать) КАК Формировать,
		|	ЕСТЬNULL(ГотовыеНастройки.ВерсияФорматаУстановленаВручную, ТаблицаНастроек.ВерсияФорматаУстановленаВручную) КАК ВерсияФорматаУстановленаВручную,
		|	ТаблицаНастроек.Приоритет КАК Приоритет,
		|	ТаблицаНастроек.Группа КАК Группа,
		|	ТаблицаНастроек.ПриоритетГруппы КАК ПриоритетГруппы,
		|	ЕСТЬNULL(ГотовыеНастройки.ЗаполнениеКодаТовара, ТаблицаНастроек.ЗаполнениеКодаТовара) КАК ЗаполнениеКодаТовара,
		|	ЕСТЬNULL(ГотовыеНастройки.АдресОтправителя, """") КАК АдресОтправителя,
		|	ЕСТЬNULL(ГотовыеНастройки.АдресПолучателя, """") КАК АдресПолучателя,
		|	ЕСТЬNULL(ГотовыеНастройки.ОбменБезПодписи, ТаблицаНастроек.ОбменБезПодписи) КАК ОбменБезПодписи,
		|	ВЫБОР
		|		КОГДА ГотовыеНастройки.ВидДокумента ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоНовыйВидЭД
		|ИЗ
		|	ТаблицаНастроек КАК ТаблицаНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГотовыеНастройки КАК ГотовыеНастройки
		|		ПО ТаблицаНастроек.ВидДокумента = ГотовыеНастройки.ВидДокумента";
	
	Запрос.УстановитьПараметр("Договор"         , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Отправитель"     , Организация);
	Запрос.УстановитьПараметр("Получатель"      , Контрагент);
	Запрос.УстановитьПараметр("ТаблицаНастроек" , ТаблицаНастроек);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Сортировать("Приоритет");
	
	СтрокаНастроекПоУмолчанию = Новый Структура;
	СтрокаНастроекПоУмолчанию.Вставить("ИдентификаторОтправителя");
	СтрокаНастроекПоУмолчанию.Вставить("ИдентификаторПолучателя");
	СтрокаНастроекПоУмолчанию.Вставить("СпособОбменаЭД");
	СтрокаНастроекПоУмолчанию.Вставить("АдресОтправителя");
	СтрокаНастроекПоУмолчанию.Вставить("АдресПолучателя");
	СтрокаНастроекПоУмолчанию.Вставить("ОбменБезПодписи");
	
	Для каждого СтрокаНастроек Из ТаблицаНастроек Цикл
		Если  ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторОтправителя)
			И ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторПолучателя)
			И ЗначениеЗаполнено(СтрокаНастроек.СпособОбменаЭД) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНастроекПоУмолчанию, СтрокаНастроек);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не (ЗначениеЗаполнено(СтрокаНастроекПоУмолчанию.ИдентификаторОтправителя)
		И ЗначениеЗаполнено(СтрокаНастроекПоУмолчанию.ИдентификаторПолучателя)
		И ЗначениеЗаполнено(СтрокаНастроекПоУмолчанию.СпособОбменаЭД)) Тогда
		Возврат ТаблицаНастроек;
	КонецЕсли;
	
	Для каждого СтрокаНастроек Из ТаблицаНастроек Цикл
		Если Не (ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторОтправителя)
			И ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторПолучателя)
			И ЗначениеЗаполнено(СтрокаНастроек.СпособОбменаЭД)) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНастроек, СтрокаНастроекПоУмолчанию);
		КонецЕсли;
		
		Если СтрокаНастроек.ЭтоНовыйВидЭД Тогда
			Если ЗначениеЗаполнено(СтрокаНастроек.ИдентификаторПолучателя) Тогда
				ДанныеКонтрагента = РегистрыСведений.ОператорыЭДО.ИнформацияОбОператореЭДОУчетнойЗаписи(СтрокаНастроек.ИдентификаторПолучателя);
				Если ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
					СтрокаНастроек.ВыгружатьДополнительныеСведения = ДанныеКонтрагента.ОтправлятьДополнительныеСведения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ЗапросНастроекЗаполненияДополнительныхПолей(КлючНастроек, Формат = Неопределено)
	
	Если Формат = Неопределено Тогда
		НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроек);
		Если НастройкиОтправки <> Неопределено Тогда
			Формат = НастройкиОтправки.Формат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаполненияДополнительныхПолей.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
		|ГДЕ
		|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		|	И НастройкиЗаполненияДополнительныхПолей.Формат = &Формат
		|	И НастройкиЗаполненияДополнительныхПолей.Отправитель = &Отправитель
		|	И НастройкиЗаполненияДополнительныхПолей.Получатель = &Получатель
		|	И НастройкиЗаполненияДополнительныхПолей.Договор  = &Договор";
	
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", КлючНастроек.ВидДокумента);
	Запрос.УстановитьПараметр("Отправитель"             , КлючНастроек.Отправитель);
	Запрос.УстановитьПараметр("Получатель"              , КлючНастроек.Получатель);
	Запрос.УстановитьПараметр("Договор"                 , КлючНастроек.Договор);
	Запрос.УстановитьПараметр("Формат"                  , Формат);
	
	Возврат Запрос;
	
КонецФункции

Процедура ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовДокументов(Запрос)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	НастройкиПоУмолчанию = НастройкиЭДОПоУмолчанию();
	ЗапросДополнительныеНастройки = Новый Запрос;
	ЗапросДополнительныеНастройки.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросДополнительныеНастройки.Текст = 
	"ВЫБРАТЬ
	|	&Поля1
	|ПОМЕСТИТЬ ВТНастройки
	|ИЗ
	|	&ТЗНастройкиПоУмолчанию КАК НастройкиПоУмолчанию
	|ГДЕ
	|	НЕ НастройкиПоУмолчанию.ВидДокумента В (&АктуальныеВидыЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
	|	&Поля2
	|ПОМЕСТИТЬ ДополнительныеНастройки
	|ИЗ
	|	ВТНастройки КАК ВТНастройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ПО (&УсловиеСоединения)
	|ГДЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	ЗапросДополнительныеНастройки.УстановитьПараметр("ТЗНастройкиПоУмолчанию", НастройкиПоУмолчанию);
	ИспользуемыеВидыИсходящие = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИсходящие();
 
	ЗапросДополнительныеНастройки.УстановитьПараметр("АктуальныеВидыЭД", ИспользуемыеВидыИсходящие);
	
	МассивНастройкиПоУмолчанию = Новый Массив;
	МассивВТНастройки = Новый Массив;
	Для каждого Колонка Из НастройкиПоУмолчанию.Колонки Цикл
		Если Колонка.Имя = "Отправитель"
			Или Колонка.Имя = "Получатель"
			Или Колонка.Имя = "ИдентификаторОтправителя"
			Или Колонка.Имя = "ИдентификаторПолучателя" 
			Или Колонка.Имя = "Договор"
			Или Колонка.Имя = "ДополнительныеНастройки" Тогда
			Продолжить; 
		КонецЕсли;
		МассивНастройкиПоУмолчанию.Добавить(СтрШаблон("%1.%2 КАК %2", "НастройкиПоУмолчанию", Колонка.Имя));
		МассивВТНастройки.Добавить(СтрШаблон("%1.%2 КАК %2", "ВТНастройки", Колонка.Имя));
	КонецЦикла;
	ЗапросДополнительныеНастройки.Текст = СтрЗаменить(ЗапросДополнительныеНастройки.Текст, "&Поля1", Символы.ПС + СтрСоединить(МассивНастройкиПоУмолчанию, ",") + Символы.ПС);
	ЗапросДополнительныеНастройки.Текст = СтрЗаменить(ЗапросДополнительныеНастройки.Текст, "&Поля2", СтрСоединить(МассивВТНастройки, ","));
	ЗапросДополнительныеНастройки.Текст = СтрЗаменить(ЗапросДополнительныеНастройки.Текст, "&УсловиеСоединения", "ВТНастройки.СпособОбменаЭД = НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД");
	
	ЗапросДополнительныеНастройки.Выполнить();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
КонецПроцедуры

Функция НастройкиЭДОПоУмолчанию()
	
	Настройки = НастройкиОтправкиЭДОСлужебный.НоваяТаблицаНастроек();
	ВидыЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИсходящие();
	
	Для каждого СпособОбменаЭД Из Перечисления.СпособыОбменаЭД Цикл
		НастройкиОтправкиЭДОСлужебный.ЗаполнитьНастройкиПоВидамЭлектронныхДокументов(Настройки, ВидыЭлектронныхДокументов, СпособОбменаЭД);
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти
