///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОнлайнОплаты".
// ОбщийМодуль.ОнлайнОплаты.
//
// Серверные процедуры формирования ссылок и настроек интеграции онлайн оплат:
//  - определение доступности интеграции с онлайн оплатами, а также получения настроек;
//  - создание платежных ссылок;
//  - получение и загрузка данных по операциям онлайн оплат;
//  - добавление настроек онлайн оплат;
//  - обработчики интеграции с Библиотекой стандартных подсистем;
//  - возврат настроек аналитик учета по заданной настройке онлайн оплаты, обновление существующих.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на страницу оплаты через онлайн оплату.
// Если платежная ссылка уже формировалась, то обновляет данные в сервисе.
// Пустая строка, если во время выполнения обнаружена ошибка.
//
// Параметры:
//  ОснованиеПлатежа - Произвольный - основание платежа, для которого необходимо сформировать ссылку.
//  ОтсутствуетДоступ- Булево - признак отсутствия доступа к онлайн оплате у организации, для которой
//    формируется платежная ссылка. Если значение Истина, пользователю необходимо выдать доступ к онлайн оплате, 
//    перейдя на страницу по адресу см. ОнлайнОплаты.АдресСтраницыПредоставленияДоступа().
// Возвращаемое значение:
//  Строка - ссылка на страницу оплаты через онлайн оплату.
//
Функция ПлатежнаяСсылка(Знач ОснованиеПлатежа, ОтсутствуетДоступ = Ложь) Экспорт
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("ОснованиеПлатежа", ОснованиеПлатежа);
	
	ДанныеСервиса = ОнлайнОплатыСлужебный.ПлатежнаяСсылка(ВходящиеПараметры);
	
	ОтсутствуетДоступ = ДанныеСервиса.ОтсутствуетДоступ;
	
	Результат = ДанныеСервиса.ПлатежнаяСсылка;
	
	Возврат Результат;
	
КонецФункции

// Отправляет запрос получения операций по онлайн оплате в сервис 1С, возвращает массив структур описывающих операции.
//
// Параметры:
//  ПериодЗапроса - СтандартныйПериод, Структура - Период за который будут выбираться операции по онлайн оплате.
//    * ДатаНачала - Дата - начало периода запроса. Если не указан, дата начала будет определена автоматически.
//    * ДатаОкончания - Дата - окончание периода запроса. Если не указан, дата окончания будет равна текущей дате.
//  Организация - ОпределяемыйТип.Организация - организация, по которой нужно отобрать операции.Если не указана,
//    то будут обработаны все действительные настройки;
//  СДоговором - Булево, Неопределено - позволяет указать для каких настроек следует загружать операции:
//    Неопределено - будут загружены и операции по схемам "С договором" и "Без договора"
//    Истина - будут загружены операции по схеме "С договором"
//    Ложь - будут загружены операции по схеме "Без договора". 
//    Если указан параметр Организация, этот параметр не учитывается
// Возвращаемое значение:
//  Неопределено - если параметры заданы неверно.
//  Массив - массив структур, содержащий данные об операциях по онлайн оплате.
//   * ДатаНачала - Дата - начало периода запроса операций.
//   * ДатаОкончания - Дата - окончание периода запроса операций.
//   * ДатаОтвета - Дата - дата ответа от сервиса.
//   * НастройкаОнлайнОплаты - СправочникСсылка.НастройкиОнлайнОплат - настройки онлайн оплаты, 
//       для которой получены операции.
//   * ОперацииТекстовыйФормат - Строка - данные операций в текстовом формате (см. http://v8.1c.ru/edi/edi_stnd/100/).
//   * Организация - ОпределяемыйТип.Организация - организация, для которой получены операции.
//   * СДоговором - Булево - признак вида настройки интеграции с онлайн оплатой (Истина - по договору,
//       Ложь - без договора).
//   * ОтсутствуетДоступ - Булево - признак отсутствия доступа к онлайн оплате у Организации,
//       для которой запрашиваются операции. Если значение Истина, пользователю необходимо выдать доступ к онлайн оплате, 
//       перейдя на страницу по адресу см. ОнлайнОплаты.АдресСтраницыПредоставленияДоступа().
//   * ОперацииМассивСтруктур - Массив из структур - операции за заданный период по соответствующей настройке (организации):
//       Общие свойства:
//         ** ИдентификаторТранзакции - Число - идентификатор операции в сервисе онлайн оплаты.
//         ** ИдентификаторПлатежа - Строка - идентификатор платежа.
//         ** ИдентификаторМагазина - Число - идентификатор магазина в сервисе онлайн оплаты.
//         ** СДоговором - Булево - признак вида настройки интеграции с онлайн оплатой (Истина - по договору, 
//              Ложь - без договора).
//         ** ВидОперации - Строка - "Оплата" - для операций оплаты, "Возврат" - для операций возврата.
//       Операция оплаты:
//         ** ДатаОплаты - Дата - дата оплаты.
//         ** СуммаДокумента - Число - сумма оплаты.
//         ** ВалютаДокумента - СправочникСсылка.Валюта - валюта платежа.
//         ** СуммаКЗачислениюНаСчетОрганизации - Число, Неопределено - сумма к зачислению на счет организации
//              (за вычетом комиссии онлайн оплаты). Передается только для схемы "С договором".
//         ** ВалютаСуммыКЗачислениюНаСчетОрганизации - СправочникСсылка.Валюта - валюта зачисления на счет организации.
//         ** СпособОплаты - Строка - код способа оплаты.
//         ** ИННОрганизации - Строка, Неопределено - ИНН организации. Если не известен, то Неопределено.
//         ** НаименованиеБанкаОрганизации - Строка, Неопределено - банк, на счет которого зачислена оплата.
//              Если не известен, то Неопределено.
//         ** НаименованиеПолноеОрганизации - Строка, Неопределено - организация, на счет которой зачислена оплата.
//              Если не известен, то Неопределено.
//         ** БикБанкаОрганизации - Строка, Неопределено - БИК банка, на счет которого зачислена оплата.
//              Если не известен, то Неопределено.
//         ** КоррСчетБанкаОрганизации - Строка, Неопределено - корр. счет банка, на счет которого зачислена оплата.
//              Если не известен, то Неопределено.
//         ** НомерРасчетногоСчетаОрганизации - Строка, Неопределено - номер расчетного счета, на который зачислена оплата.
//              Если не известен, то Неопределено.
//         ** НазначениеПлатежа - Строка - назначение платежа, определенное при формирование ссылки на оплату.
//         ** ДатаФормированияЧека - Строка - дата формирования чека об оплате(в формате "дд.мм.гггг ЧЧ:мм:сс").
//         ** СуммаЧека - Число - сумма чека.
//         ** НомерФискальногоНакопителя - Строка - номер фискального накопителя.
//         ** ФискальныйНомерДокумента - Число - фискальный номер документа.
//         ** ФискальныйПризнакДокумента - Строка - фискальный признак документа
//         ** КонтактныеДанныеЭлектронногоЧека - Строка - телефон или электронная почта, на которые был отправлен чек.
//       Операция возврата:
//         ** ИдентификаторВозврата - Число - идентификатор операции возврата.
//         ** СуммаДокумента - Число - сумма возврата.
//         ** ВалютаДокумента - СправочникСсылка.Валюта - валюта возврата.
//         ** ОписаниеПричиныВозврата - Строка - причина возврата.
//         ** ДатаРегистрацииЗапросаНаВозврат - Дата - дата регистрации запроса на возврат.
//         ** ДатаИсполненияЗапросаНаВозврат - Дата - дата исполнения запроса на возврат.
//         ** ОтправительЗапросаНаВозврат - Строка - отправитель запроса на возврат.
//       ДополнительныеНастройки - ТаблицаЗначений - 
//         См. ОнлайнОплатыПереопределяемый.ПриОпределенииДополнительныхНастроекОнлайнОплаты.
//
Функция ОперацииОнлайнОплат(ПериодЗапроса = Неопределено, Организация = Неопределено, СДоговором = Неопределено) Экспорт
	
	ДатаНачала    = Неопределено;
	ДатаОкончания = Неопределено;
	Если ТипЗнч(ПериодЗапроса) = Тип("СтандартныйПериод") Тогда 
		ДатаНачала    = ПериодЗапроса.ДатаНачала;
		ДатаОкончания = ПериодЗапроса.ДатаОкончания;
	ИначеЕсли ТипЗнч(ПериодЗапроса) = Тип("Структура") Тогда 
		ПериодЗапроса.Свойство("ДатаНачала",    ДатаНачала);
		ПериодЗапроса.Свойство("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если Не ДатаНачала = Неопределено Тогда 
		Если ДатаНачала > ТекущаяДатаСеанса ИЛИ ДатаОкончания > КонецДня(ТекущаяДатаСеанса) Тогда
			СообщениеТекст = НСтр("ru = 'Период запроса указан неверно'");
			ОбщегоНазначения.СообщитьПользователю(СообщениеТекст, , "Период");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДатаОкончания = Неопределено Тогда
			Если ДатаНачала > ДатаОкончания Тогда 
				СообщениеТекст = НСтр("ru = 'Период запроса указан неверно'");
				ОбщегоНазначения.СообщитьПользователю(СообщениеТекст, , "Период");
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДатаОкончания = Неопределено Тогда
		Если КонецДня(ДатаОкончания) = КонецДня(ТекущаяДатаСеанса) Тогда
			ДатаОкончания = ТекущаяДатаСеанса;
		Иначе
			ДатаОкончания = КонецДня(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	ВходящиеПараметры = Новый Структура();
	ВходящиеПараметры.Вставить("Организация", Организация);
	ВходящиеПараметры.Вставить("ДатаНачала", ДатаНачала);
	ВходящиеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
	ВходящиеПараметры.Вставить("СДоговором", СДоговором);
	
	Результат = ОнлайнОплатыСлужебный.ОперацииОнлайнОплат(ВходящиеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Загружает операций по онлайн оплатам с сервера 1С и обновляет статус обменов.
//
// Параметры:
//  Период - СтандартныйПериод, Структура - Период за который будут выбираться операции по онлайн оплате.
//    * ДатаНачала - Дата - начало периода запроса. Если не указан, дата начала будет определена автоматически.
//    * ДатаОкончания - Дата - окончание периода запроса. Если не указан, дата окончания будет равна текущей дате.
//  Организация - ОпределяемыйТип.Организация - организация, по которой нужно отобрать операции. Если не указана,
//    будут обработаны все действительные настройки;
//  СДоговором - Булево, Неопределено - позволяет указать для каких настроек следует загружать операции:
//    * Неопределено - будут загружены и операции по схемам "С договором" и "Без договора"
//    * Истина - будут загружены операции по схеме "С договором"
//    * Ложь - будут загружены операции по схеме "Без договора"
//    Если указан параметр Организация, этот параметр не учитывается.
//
// Возвращаемое значение:
//  Соответствие - результаты загрузки операций для каждой настройки.
//   * Ключ - СправочникСсылка.НастройкиОнлайнОплат - настройка онлайн оплаты, по которой были загружены операции.
//   * Значение - Произвольный - результаты загрузки операций. 
//       Определяются в ОнлайнОплатыПереопределяемый.ПриЗагрузкеОперацийПоОнлайнОплате.
//
Функция ЗагрузитьОперацииОнлайнОплат(
		Период = Неопределено,
		Организация = Неопределено,
		СДоговором = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если НЕ ЕстьПравоНаЗагрузкуОпераций() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Недостаточно прав на загрузку операций по ЮKassa.'"));
		Возврат Результат;
	КонецЕсли;
	
	ОперацииПоОрганизации = ОперацииОнлайнОплат(Период, Организация, СДоговором);
	
	Если ОперацииПоОрганизации = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Операции Из ОперацииПоОрганизации Цикл
		
		Отказ = Ложь;
		
		ПромежуточныйРезультат = Неопределено;
		
		ИнтеграцияПодсистемБИП.ПриЗагрузкеОперацийПоОнлайнОплате(Операции, ПромежуточныйРезультат, Отказ);
		ОнлайнОплатыПереопределяемый.ПриЗагрузкеОперацийПоОнлайнОплате(Операции, ПромежуточныйРезультат, Отказ);
		Результат.Вставить(Операции.НастройкаОнлайнОплаты, ПромежуточныйРезультат);
		
		Если Не Отказ И ЗначениеЗаполнено(Операции.ОперацииМассивСтруктур) Тогда
			
			Статус = Новый Структура("ДатаПоследнегоУспешногоОбмена, Организация", Операции.ДатаОтвета, Операции.Организация);
			ОнлайнОплатыСлужебный.УстановитьСтатусОбменаСОнлайнОплатами(Операции.НастройкаОнлайнОплаты, Статус);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные эквайера онлайн оплаты.
//
// Параметры:
//  Период - Дата - дата актуальности данных.
//
// Возвращаемое значение:
//  Структура - данные эквайера:
//    * НаименованиеПолное - Строка - полное наименование эквайера.
//    * Наименование - Строка - сокращенное наименование эквайера.
//    * ИНН - Строка - ИНН эквайера.
//    * КПП - Строка - КПП эквайера.
//    * ОГРН - Строка - ОГРН эквайера.
//    * ОКВЭД - Строка - ОКВЭД эквайера.
//    * КодПоОКПО - Строка - код по ОКПО эквайера.
//
Функция ДанныеЭквайера(Период) Экспорт
	
	ПараметрыМетода = ОнлайнОплатыСлужебный.ОписаниеПараметровПолученияДанныхЭквайераПоУмолчанию();
	ПараметрыМетода.Период = Период;
	
	Возврат ОнлайнОплатыСлужебный.ДанныеЭквайераПоУмолчанию(ПараметрыМетода);
	
КонецФункции

// Проверка права на загрузку операций по онлайн оплате.
// 
// Возвращаемое значение:
//  Булево - Истина если есть право на загрузку.
//
Функция ЕстьПравоНаЗагрузкуОпераций() Экспорт
	
	Возврат Пользователи.РолиДоступны("ВыполнениеОбменовОнлайнОплаты") 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыОнлайнОплат);
	
КонецФункции

// Проверка права на добавление, изменение настроек онлайн оплат.
// 
// Возвращаемое значение:
//  Булево - Истина если есть право на добавление, изменение настроек онлайн оплат.
//
Функция НастройкаИнтеграцииДоступна() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОнлайнОплат);
КонецФункции

// Проверка права на формирование платежной ссылки сервисом онлайн оплат.
// 
// Возвращаемое значение:
//  Булево - Истина если есть право на формирование платежной ссылки сервисом онлайн оплат.
//
Функция ДоступноПолучениеПлатежнойСсылки() Экспорт
	Возврат Пользователи.РолиДоступны("ПолучениеПлатежнойСсылкиДляОнлайнОплаты")
КонецФункции

// Возвращает URL адреса, для предоставления доступа к онлайн оплате.
// 
// Возвращаемое значение:
//  Строка - URL адрес. Если возвращается пустая строка - в системе отсутствует подключение к 
//    Интернет-поддержке пользователей.
//
Функция АдресСтраницыПредоставленияДоступа() Экспорт
	
	Результат = ОнлайнОплатыСлужебный.АдресСтраницыДоступа().URLСтраницы;
	
	Результат = ?(Результат = Неопределено, "", Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак наличия доступа к онлайн оплате у организации. Если возвращаемое значение равно Ложь, 
// пользователю необходимо выдать доступ к онлайн оплате, перейдя на страницу 
// по адресу см. ОнлайнОплаты.АдресСтраницыПредоставленияДоступа().
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, для которой проверяется доступ.
// 
// Возвращаемое значение:
//  Булево - Истина, если доступ предоставлен.
//  Неопределено - если не удалось определить наличие доступа.
//
Функция НастройкаИнтеграцииВыполнена(Организация) Экспорт
	
	Результат = ОнлайнОплатыСлужебный.НастройкаИнтеграцииВыполнена(Организация);
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки учета заданного элемента.
//
// Параметры:
//  НастройкаОнлайнОплаты - Ссылка на элемент справочника НастройкиОнлайнОплат,
//    аналитики учета которого нужно получить.
//
// Возвращаемое значение:
//  Структура - Результат выполнения:
//    * Ключ - Строка, идентификатор настройки учета.
//    * Значение - ЛюбаяСсылка, Булево, Строка, Дата, Число, содержит в себе значение настройки.
//
Функция АналитикиУчета(НастройкаОнлайнОплаты) Экспорт
	
	Возврат ОнлайнОплатыСлужебный.АналитикиУчета(НастройкаОнлайнОплаты);
	
КонецФункции

// Выполняет обновление значений настроек учета по переданной структуре, возвращает результат выполнения операции.
//
// Параметры:
//  НастройкаОнлайнОплаты - Ссылка на  элемент справочника НастройкиОнлайнОплат:
//  АналитикиУчета - Структура, содержит в себе аналитики учета и их значения для обновления:
//    * Ключ - Строка, идентификатор обновляемой настройки учета;
//    * Значение - ЛюбаяСсылка, Булево, Строка, Дата, Число, содержит в себе значение обновляемой настройки;
//  ЗамещатьЗаполненные - Булево, признак замещения заполненных аналитик учета НастройкиОнлайнОплат
//
// Возвращаемое значение:
//  Структура - результат добавления:
//    * Ошибка - Булево -  Истина - если задание завершено с ошибкой.
//    * СообщениеОбОшибке - Строка, Форматированная строка - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, Форматированная строка - сообщение об ошибке для администратора.
//
Функция ОбновитьАналитикиУчета(НастройкаОнлайнОплаты, АналитикиУчета, ЗамещатьЗаполненные  = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	
	// Проверка ключей аналитики на допустимость переданных ключей.
	ПроверкаСтруктурыДополнительныхНастроек(АналитикиУчета, Результат);
	Если Результат.Ошибка Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиОнлайнОплат");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", НастройкаОнлайнОплаты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СДоговором = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОнлайнОплаты, "СДоговором");
		Если Не СДоговором Тогда
			
			ОтменитьТранзакцию();
			
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = НСтр("ru='Ошибка обновления аналитик учета'");
			Результат.ИнформацияОбОшибке = НСтр("ru='У переданной настройки выбран вариант подключения ""Без договора"",
				| аналитики учета при этом не используются'");
			
		Иначе
			
			НастройкаОнлайнОплатыОбъект = НастройкаОнлайнОплаты.ПолучитьОбъект();
			НастройкаОнлайнОплатыОбъект.Заблокировать();
			ДополнительныеНастройкиОбъекта = НастройкаОнлайнОплатыОбъект.ДополнительныеНастройки;
			ДополнительныеНастройкиОбъекта.Очистить();
			// Добавление новой или изменений существующей настройки учета
			Для Каждого ЭлементАналитикиУчета Из АналитикиУчета Цикл
				НайденнаяСтрока = ДополнительныеНастройкиОбъекта.Найти(ЭлементАналитикиУчета.Ключ, "Настройка");
				Если НайденнаяСтрока = Неопределено Тогда
					СтрокаНастроек = ДополнительныеНастройкиОбъекта.Добавить();
					СтрокаНастроек.Настройка = ЭлементАналитикиУчета.Ключ;
					СтрокаНастроек.Значение = ЭлементАналитикиУчета.Значение;
				ИначеЕсли ЗамещатьЗаполненные Тогда
					НайденнаяСтрока.Значение = ЭлементАналитикиУчета.Значение;
				КонецЕсли;
			КонецЦикла;
			
			НастройкаОнлайнОплатыОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = НСтр("ru='Ошибка обновления аналитик учета'");
		Результат.ИнформацияОбОшибке = ИнформацияОбОшибке();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Создает элемент справочника НастройкиОнлайнОплат, возвращается структура с результатом выполнения операции.
//
// Параметры:
//  УИД - УИД элемента создаваемой настройки,
//  ДанныеЗаполнения - Структура, содержит в себе данные для заполнения реквизитов и табличных частей элемента.
//    * Ключ - Имя реквизита элемента справочника,
//    * Значение - Значение реквизита справочника, вложенная структура для табличных частей
//
// Возвращаемое значение:
//  Структура - результат добавления:
//    * Ошибка - Булево  Истина - если задание завершено с ошибкой,
//    * СообщениеОбОшибке - Строка, Форматированная строка - сообщение об ошибке для пользователя,
//    * ИнформацияОбОшибке - Строка, Форматированная строка - сообщение об ошибке для администратора.
//
Функция ДобавитьНастройку(УИД, ДанныеЗаполнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	
	// Проверка типа УИДа, если строка преобразовываем в уникальный идентификатор.
	Попытка 
		Если ТипЗнч(УИД) = Тип("Строка") Тогда
			УИДНастройки = Новый УникальныйИдентификатор(УИД);
		ИначеЕсли ТипЗнч(УИД) = Тип("УникальныйИдентификатор") Тогда
			УИДНастройки = УИД;
		КонецЕсли;
	Исключение
		УИДНастройки = Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(УИД) <> Тип("УникальныйИдентификатор") Тогда
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Переданное значение "" %1 ""не является уникальным идентификатором'"),
			УИД);
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	СсылкаНастройкиОнлайнОплат = Справочники.НастройкиОнлайнОплат.ПолучитьСсылку(УИД);
	
	// Проверка на существование объекта.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиОнлайнОплат.Наименование КАК Наименование
	|ИЗ
	|	Справочник.НастройкиОнлайнОплат КАК НастройкиОнлайнОплат
	|ГДЕ
	|	НастройкиОнлайнОплат.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНастройкиОнлайнОплат);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По переданному УИДу "" %1 "" уже создана настройка %2 .'"),
			УИД,
			Выборка.Наименование);
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	// Проверка ключей аналитики на допустимость переданных ключей.
	Если ДанныеЗаполнения.Свойство("ДополнительныеНастройки") И ТипЗнч(ДанныеЗаполнения) = Тип("Структура")Тогда
		ПроверкаСтруктурыДополнительныхНастроек(ДанныеЗаполнения.ДополнительныеНастройки, Результат);
		Если Результат.Ошибка Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Создание нового элемента
	Попытка
		
		НоваяНастройкаОнлайнОплаты = Справочники.НастройкиОнлайнОплат.СоздатьЭлемент();
		НоваяНастройкаОнлайнОплаты.УстановитьСсылкуНового(СсылкаНастройкиОнлайнОплат);
		НоваяНастройкаОнлайнОплаты.Заполнить(ДанныеЗаполнения);
		НоваяНастройкаОнлайнОплаты.Записать();
		
	Исключение
		
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке = НСтр("ru='Ошибка создания элемента настройки'");
		Результат.ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат Результат;
		
	КонецПопытки;
	
КонецФункции

// Функция возвращает дату последнего успешного обмена для указанной настройки.
//
// Параметры:
//  НастройкаОнлайнОплаты - СправочникСсылка.НастройкиОнлайнОплат - Настройка онлайн оплаты для которой необходимо вернуть дату последнего успешного обмена.
//
// Возвращаемое значение:
//   Дата - дата последнего успешного обмена, если успешных обменов не было, возвращает пустую дату.
//
Функция ДатаПоследнегоУспешногоОбмена(НастройкаОнлайнОплаты) Экспорт
	
	Возврат РегистрыСведений.СтатусыОнлайнОплат.ДатаПоследнегоУспешногоОбмена(НастройкаОнлайнОплаты);
	
КонецФункции

// Функция возвращает дату последнего успешного обмена для указанной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация для которой необходимо вернуть дату последнего успешного обмена.
//
// Возвращаемое значение:
//  Дата - дата последнего успешного обмена, если успешных обменов не было, возвращает пустую дату.
//
Функция ДатаПоследнегоУспешногоОбменаПоОрганизации(Организация) Экспорт 
	
	Возврат РегистрыСведений.СтатусыОнлайнОплат.ДатаПоследнегоУспешногоОбменаПоОрганизации(Организация);
	
КонецФункции

// Функция получения списка организаций по настройкам онлайн оплаты.
//
// Параметры:
//  ТолькоСДоговором  - Булево, Неопределено - признак того, что нужно возвращать организации только по настройкам
//    для варианта с договором и наоборот, если Неопределено будет выдано по всем.
//  ТолькоДействительные  - Булево - признак того, что нужно возвращать организации только по действующим настройкам.
//
// Возвращаемое значение:
//   Массив - Массив банковских счетов.
//
Функция СписокДоступныхОрганизаций(ТолькоСДоговором = Неопределено, ТолькоДействительные = Истина) Экспорт
	
	Возврат Справочники.НастройкиОнлайнОплат.СписокДоступныхОрганизаций(ТолькоСДоговором, ТолькоДействительные);
	
КонецФункции

// Функция позволяющая получить настройку с онлайн оплатой по переданным параметрам поиска.
//
// Параметры:
//  КлючиПоиска  - Структура, ФиксированнаяСтруктура, Соответствие, ФиксированноеСоответствие - Ключи поиска
//   по которым необходимо искать данные, поиск работает по логическому "И".
//    * Ключ - Строка - имя реквизита настройки.
//    * Значение - Произвольный - значение отбора.
//  ТолькоДействительные  - Булево - признак того, что нужно возвращать только действительные настройки.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОнлайнОплат - Ссылка на найденную настройку, 
//     если ничего не найдено будет возвращена пустая ссылка.//
Функция НайтиНастройку(КлючиПоиска, ТолькоДействительные = Истина) Экспорт
	
	Возврат Справочники.НастройкиОнлайнОплат.НайтиНастройку(КлючиПоиска, ТолькоДействительные);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
//
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.НастройкиОнлайнОплат.Чтение.Организации
	|Справочник.НастройкиОнлайнОплат.Изменение.Организации
	|РегистрСведений.СтатусыОнлайнОплат.Чтение.Организации
	|РегистрСведений.СтатусыОнлайнОплат.Изменение.Организации
	|";
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.НастройкиОнлайнОплат, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтатусыОнлайнОплат, Истина);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ПодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ЮКасса";
	Вид.ИмяПодменю = "ПодменюЮКасса";
	Вид.Заголовок = НСтр("ru = 'ЮKassa'");
	Вид.Картинка = БиблиотекаКартинок.ЮКассаЛоготип;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыЮКассы";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	Если Не Пользователи.РолиДоступны("ПолучениеПлатежнойСсылкиДляОнлайнОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОснованийПлатежа = ОнлайнОплатыСлужебный.ОснованияПлатежа();
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ПолноеИмя Из ИменаОснованийПлатежа Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТипыОбъектов) Тогда
		Возврат;
	КонецЕсли;
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "ЮКасса";
	Команда.Идентификатор = "ЮКасса";
	Команда.Представление = НСтр("ru = 'Оплата через ЮKassa'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 50;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
	Команда.Картинка = БиблиотекаКартинок.ЮКассаЛоготип;
	Команда.ТипПараметра = ТипПараметра;
	Команда.Назначение = "ДляОбъекта";
	Команда.ФункциональныеОпции = "ИспользоватьОнлайнОплаты";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОнлайнОплатыСлужебныйКлиент.Подключаемый_ОткрытьФормуПлатежнойСсылки";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ШаблоныСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;

	Если Не Константы.ИспользоватьОнлайнОплаты.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ОнлайнОплатыСлужебный.ЭтоОснованиеПлатежа(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо" Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ПредставлениеСсылки";
		НовыйРеквизит.Представление = НСтр("ru = 'Кнопка ""Оплатить через ЮKassa""'");
		
		Если ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			КартинкаКнопки = Вложения.Добавить();
			КартинкаКнопки.Идентификатор = "КартинкаКнопкиДляОнлайнОплаты";
			КартинкаКнопки.Имя = "КартинкаКнопкиДляОнлайнОплаты";
			КартинкаКнопки.Представление = НСтр("ru = 'Кнопка ""Оплатить через ЮKassa""'");
			КартинкаКнопки.ТипФайла = "png";
			КартинкаКнопки.Реквизит = "ПредставлениеСсылки";
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ТипШаблона = "SMS" Тогда
		
		НовыйРеквизит = Реквизиты.Добавить();
		НовыйРеквизит.Имя = "ПредставлениеСсылки";
		НовыйРеквизит.Представление = НСтр("ru = 'Кнопка ""Оплатить через ЮKassa""'");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения.
//
Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьОнлайнОплаты.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОнлайнОплатыСлужебный.ЭтоОснованиеПлатежа(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиСообщений = ОнлайнОплатыСлужебный.НовыйПараметрыОтправкиСообщений();
	ОнлайнОплатыСлужебный.ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	КонтактныеДанныеЧека = "";
	Если ПараметрыШаблона.Свойство("ПараметрыСообщения")
		И ЗначениеЗаполнено(ПараметрыШаблона.ПараметрыСообщения)
		И ПараметрыШаблона.ПараметрыСообщения.Свойство("КонтактныеДанныеЧека") Тогда
		КонтактныеДанныеЧека = ПараметрыШаблона.ПараметрыСообщения.КонтактныеДанныеЧека;
	КонецЕсли;
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо"
		И Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылки") <> Неопределено Тогда
		
			Если Сообщение.ДополнительныеПараметры.Свойство("ПлатежнаяСсылка") 
				И ЗначениеЗаполнено(Сообщение.ПараметрыШаблона.ПлатежнаяСсылка) Тогда
				
				ПлатежнаяСсылка = Сообщение.ПараметрыШаблона.ПлатежнаяСсылка;
				
			ИначеЕсли Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения)
				И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("ПлатежнаяСсылка")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка) Тогда
				
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка;
				
			Иначе
				
				ПараметрыПлатежа = Новый Структура;
				ПараметрыПлатежа.Вставить("ОснованиеПлатежа", ПредметСообщения);
				ПараметрыПлатежа.Вставить("КонтактныеДанныеЧека", КонтактныеДанныеЧека);
				ПлатежнаяСсылка = ОнлайнОплатыСлужебный.ПлатежнаяСсылка(ПараметрыПлатежа).ПлатежнаяСсылка;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ПлатежнаяСсылка) Тогда
				Возврат;
			КонецЕсли;
			
			Если ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
				И ОнлайнОплатыСлужебный.ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
				Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылки"] <> Неопределено Тогда 
					HTMLТекстКнопки = "<a href='" + ПлатежнаяСсылка + "'><img src=""cid:ПредставлениеСсылки""></a>";
					Если Сообщение.Вложения["ПредставлениеСсылки"] = Неопределено Тогда
						АдресКартинки = ПоместитьВоВременноеХранилище(
							БиблиотекаКартинок.КнопкаОплатитьОнлайнОплаты.ПолучитьДвоичныеДанные());
						Сообщение.Вложения["ПредставлениеСсылки"] = АдресКартинки;
					КонецЕсли;
					Сообщение.ЗначенияРеквизитов["ПредставлениеСсылки"] = HTMLТекстКнопки;
				КонецЕсли;
			Иначе
				Сообщение.ЗначенияРеквизитов["ПредставлениеСсылки"] = НСтр("ru = 'Оплатить счет:'") + Символы.ПС + ПлатежнаяСсылка;
			КонецЕсли;
			
	ИначеЕсли ПараметрыШаблона.ТипШаблона = "SMS"
		И Сообщение.ЗначенияРеквизитов.Получить("ПредставлениеСсылки") <> Неопределено Тогда
		
		Если Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения)
				И Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство("ПлатежнаяСсылка")
				И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка) Тогда
				
				ПлатежнаяСсылка = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.ПлатежнаяСсылка;
		Иначе
			ПараметрыПлатежа = Новый Структура;
			ПараметрыПлатежа.Вставить("ОснованиеПлатежа", ПредметСообщения);
			ПараметрыПлатежа.Вставить("КонтактныеДанныеЧека", КонтактныеДанныеЧека);
			ПлатежнаяСсылка = ОнлайнОплатыСлужебный.ПлатежнаяСсылка(ПараметрыПлатежа).ПлатежнаяСсылка;
		КонецЕсли;
		
		Сообщение.ЗначенияРеквизитов["ПредставлениеСсылки"] = ПлатежнаяСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

//// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПолучениеУведомленийОтОнлайнОплат"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОнлайнОплаты"];
	
КонецПроцедуры

//// Конец СтандартныеПодсистемы.РегламентныеЗадания

//// ТехнологияСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтОнлайнОплат.ИмяМетода);
	
КонецПроцедуры

//// Конец ТехнологияСервиса.ОчередьЗаданий


#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования БСП. 
// Выполняет настройку отображения элементов управления для подсистем библиотеки ИПП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.НастройкиОнлайнОплат) Тогда
		
		Форма.БИПОнлайнОплаты = Константы.ИспользоватьОнлайнОплаты.Получить();
		Если Не НастройкаИнтеграцииДоступна() 
				И Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтатусыОнлайнОплат) Тогда
			Форма.Элементы.БИПГруппаОнлайнОплаты.Видимость = Ложь;
			Возврат;
		ИначеЕсли Не НастройкаИнтеграцииДоступна() Тогда
			Форма.Элементы.БИПОнлайнОплатыЛево.Видимость = Ложь;
			Форма.Элементы.ГруппаНастройкаШаблоновОнлайнОплат.Видимость = Ложь;
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаНастройкаШаблоновОнлайнОплат",
			"Видимость",
			ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений"));
		
		Форма.Элементы.ГруппаПолучениеУведомлений.Доступность = Форма.БИПОнлайнОплаты;
		Форма.Элементы.ГруппаНастройкиОнлайнОплатыПраво.Доступность = Форма.БИПОнлайнОплаты;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтОнлайнОплат);
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтОнлайнОплат.ИмяМетода);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
		Если СписокЗаданий.Количество() Тогда
			Форма.БИПИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат = СписокЗаданий[0].Использование;
			Форма.Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Заголовок =
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(СписокЗаданий[0].Расписание);
		Иначе
			Форма.БИПИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат = Ложь;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		Форма.Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Доступность = 
			Форма.БИПИспользоватьАвтоматическоеПолучениеУведомленияОтОнлайнОплат;
			
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
			Форма.Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Гиперссылка = Истина;
			Форма.Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
				
		Иначе
			Форма.Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.Гиперссылка = Ложь;
			Форма.Элементы.ДекорацияРасписаниеПолученияУведомленийОтОнлайнОплат.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		КонецЕсли;
		
	Иначе
		Форма.Элементы.БИПГруппаОнлайнОплаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет настройку использования интеграции с онлайн оплатой.
//
// Параметры:
//  Значение - Булево - новое значение настройки использования.
//
Процедура УстановитьИспользованиеИнтеграции(Значение) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьОнлайнОплаты) Тогда
		ВызватьИсключение НСтр(
			"ru = ''Недостаточно прав доступа для включения или отключения настройки интеграции с сервисом ""ЮКаssа"".'");
	КонецЕсли;
	
	Константы.ИспользоватьОнлайнОплаты.Установить(Значение);
	
КонецПроцедуры

Функция НайтиРегламентноеЗадание(ИмяПредопределенного) Экспорт 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", ИмяПредопределенного);
	
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Возврат ?(РезультатПоиска.Количество() = 0, Неопределено, РезультатПоиска[0]);
	
КонецФункции

Процедура УстановитьПараметрЗаданияПолученияУведомленийОнлайнОплат(Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтОнлайнОплат);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ПолучениеУведомленийОтОнлайнОплат.ИмяМетода);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		
		// Чтобы не создавать нагрузок на сервис, время получения будет выбрано случайным образом
		// между 00:00 и 02:00.
		Генератор = Новый ГенераторСлучайныхЧисел;
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 7200);
		Расписание.ПериодПовтораДней = 1; 
		Расписание.ПериодПовтораВТечениеДня = 900;
		Расписание.ПаузаПовтора = 900;
		
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		ПараметрыЗадания.Вставить("Расписание", Расписание);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаСтруктурыДополнительныхНастроек(АналитикиУчета, Результат)
	
	// Проверка ключей аналитики на допустимость переданных ключей.
	ДоступныеДополнительныеНастройки = ОнлайнОплатыСлужебный.ДополнительныеНастройкиОнлайнОплат();
	Для Каждого ЭлементАналитикиУчета Из АналитикиУчета Цикл
		Если ДоступныеДополнительныеНастройки.Найти(ЭлементАналитикиУчета.Ключ,"Настройка") = Неопределено Тогда
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка идентификатора. Идентификатор %1 не найден среди возможных дополнительных настроек'"),
				ЭлементАналитикиУчета.Ключ);
			Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
