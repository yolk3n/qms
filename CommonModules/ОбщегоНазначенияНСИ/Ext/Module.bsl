
#Область ПрограммныйИнтерфейс


// Возвращает имя предопределенного элемента, как оно указано в конфигураторе
//
// Параметры:
//  Ссылка - ссылка на предопределенный объект.
//
// Возвращаемое значение:
//  Строка - имя предопределенного элемента.
// 
Функция ИмяПредопределенного(Ссылка) Экспорт
	Возврат ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ПолучитьИмяПредопределенного(Ссылка);
КонецФункции

// Устанавливает или сбрасывает флаг Согласован у объекта.
// Вызывается из процедуры ПередЗаписью объекта.
//
// Параметры:
//	Объект - ДокументОбъект, СправочникОбъект - объект, в котором необходимо изменить флаг Согласован.
//	РежимЗаписи - Режим записи документа, указывается для документов.
//	СтатусНеСогласован - Статус объекта, в котором флаг Согласован должен быть сброшен.
//
Процедура ИзменитьПризнакСогласованностиОбъекта(Объект,
												РежимЗаписи = Неопределено,
												СтатусНеСогласован = Неопределено) Экспорт
	
	ПризнакИзменен = Ложь;
	Если РежимЗаписи = Неопределено Тогда
		
		Если Объект.ПометкаУдаления Тогда
			
			ПризнакИзменен = Истина;
			Если Объект.Согласован Тогда
				Объект.Согласован = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если РежимЗаписи = РежимЗаписиДокумента.Запись
		 Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			ПризнакИзменен = Истина;
			Если Объект.Согласован Тогда
				Объект.Согласован = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПризнакИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = Неопределено Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если СтатусНеСогласован = Неопределено Тогда
			
			Если Не Объект.Согласован Тогда
				Объект.Согласован = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтатусНеСогласован)  = Тип("Массив") Тогда
			
			Если Объект.Согласован Тогда
				
				Для каждого Статус Из СтатусНеСогласован Цикл
					Если Объект.Статус = Статус Тогда
						Объект.Согласован = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				ОбъектСогласован = Истина;
				Для каждого Статус Из СтатусНеСогласован Цикл
					Если Объект.Статус = Статус Тогда
						ОбъектСогласован = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Если ОбъектСогласован Тогда
					Объект.Согласован = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если Объект.Статус = СтатусНеСогласован И Объект.Согласован Тогда
				Объект.Согласован = Ложь;
			ИначеЕсли Объект.Статус <> СтатусНеСогласован И Не Объект.Согласован Тогда
				Объект.Согласован = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

// Получает описание типов, содержащее типы всех ссылок.
//
Функция ТипВсеСсылки() Экспорт
	
	Описание = Справочники.ТипВсеСсылки();
	Описание = Новый ОписаниеТипов(Описание, Документы.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, Перечисления.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыСчетов.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, ПланыОбмена.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, БизнесПроцессы.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, Задачи.ТипВсеСсылки().Типы());
	Описание = Новый ОписаниеТипов(Описание, БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы());
	
	Возврат Описание;
	
КонецФункции

// Дополняет список исключений поиска ссылок
//
// Параметры
//	Исключения - Массив - список исключений
//
Процедура ЗаполнитьИсключенияПоискаСсылок(Исключения) Экспорт
	
	ОбщегоНазначенияНСИКлиентСервер.ДополнитьМассив(
		Исключения,
		Справочники.Номенклатура.ПолучитьИсключенияПоискаСсылок());
		
КонецПроцедуры

// Изменяет пометку удаления объекта
//
// Параметры
//	Ссылка - объект, для которого изменяется пометка удаления
//
Процедура УстановитьПометкуУдаления(Ссылка) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.УстановитьПометкуУдаления(Не Объект.ПометкаУдаления, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОИСК В ДАННЫХ

// Обновляет индекс полнотекстового поиска в привилегированном режиме
//
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры

// Выполняет поиск информации в базе данных
//
// Параметры
//	СтрокаПоиска - Строка
//	ОбластьПоиска - метаданные в которых производить поиск
//	ПорогНечеткости - Число
//	ОписаниеОшибки - Строка - описание ошибки если неудалось осуществить поиск
//	
// Возвращаемое значение
//	Неопределено, Соответствие(ОбластьПоиска, МассивРезультатов)
//	
Функция ВыполнитьПолнотекстовыйПоиск(Знач СтрокаПоиска,
									 Знач ОбластьПоиска,
									 Знач ПоТочномуСоответствию,
									 Знач ПорогНечеткости = 0,
									 ОписаниеОшибки = "") Экспорт
	
	РезультатыПоиска = Новый Соответствие;
	
	Если ПоТочномуСоответствию Тогда
		РасширеннаяСтрокаПоиска = """" + СтрокаПоиска + """";
	Иначе
		РасширеннаяСтрокаПоиска = ПолучитьРасширеннуюСтрокуПолнотекстовогоПоиска(СтрокаПоиска);
	КонецЕсли;
	
	РазмерПорции = РазмерПорцииПолнотекстовогоПоиска();
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	СписокПоиска.ПорогНечеткости = ПорогНечеткости;
	СписокПоиска.ПерваяЧасть();
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		ОписаниеОшибки = "СлишкомМногоРезультатов";
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоНайденныхЭлементов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоНайденныхЭлементов = 0 Тогда
		ОписаниеОшибки = "НичегоНеНайдено";
		Возврат Неопределено;
	КонецЕсли;
	
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоНайденныхЭлементов > РазмерПорции, РазмерПорции, КоличествоНайденныхЭлементов) - 1;
	
	НайденныеЗначения = Новый Массив;
	
	ЕстьСледующаяПорция = Истина;
	Пока ЕстьСледующаяПорция Цикл
		
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			СписокЗначений = РезультатыПоиска.Получить(Элемент.Метаданные);
			Если СписокЗначений = Неопределено Тогда
				СписокЗначений = Новый Массив;
				РезультатыПоиска.Вставить(Элемент.Метаданные, СписокЗначений);
			КонецЕсли;
			СписокЗначений.Добавить(Элемент.Значение);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоНайденныхЭлементов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = ?(
				КоличествоНайденныхЭлементов > НачальнаяПозиция + РазмерПорции,
				РазмерПорции,
				КоличествоНайденныхЭлементов - НачальнаяПозиция)
				- 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПоиска;
	
КонецФункции

Функция РазмерПорцииПолнотекстовогоПоиска()
	Возврат 500;
КонецФункции

// Возвращает расширенную строку поиска для полнотекстового поиска, если строка
// уже содержит операторы поиска, то она возвращается без изменений.
//
// Параметры
//	СтрокаПоиска - Строка - исходная строка поиска
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьРасширеннуюСтрокуПолнотекстовогоПоиска(Знач СтрокаПоиска) Экспорт
	
	Если СтрокаСодержитПоисковыеОператорыПолнотекстовогоПоиска(СтрокаПоиска) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	ДопустимыйПроцентОтличий = 20;
	МинимальнаяДлинаСловаДляПримененияЗаменыОкончания = 5;
	
	СловаПоиска = СтрРазделить(СтрокаПоиска, " ");
	
	ПоискИзменен = Ложь;
	Для Индекс = 0 По СловаПоиска.Количество() - 1 Цикл
		
		Слово = СокрЛП(СловаПоиска[Индекс]);
		ДлинаСлова = СтрДлина(Слово);
		КритерийПоиска = "";
		
		КоличествоОтличий = Цел(ДлинаСлова * ДопустимыйПроцентОтличий / 100);
		Если КоличествоОтличий Тогда
			КритерийПоиска = КритерийПоиска + ?(ПустаяСтрока(КритерийПоиска), "", " | ") + Слово + "#" + КоличествоОтличий;
		КонецЕсли;
		
		ИспользоватьЗаменуОкончания = ДлинаСлова >= МинимальнаяДлинаСловаДляПримененияЗаменыОкончания;
		Если ИспользоватьЗаменуОкончания Тогда
			КритерийПоиска = КритерийПоиска + ?(ПустаяСтрока(КритерийПоиска), "", " | ") + Слово + "*";
		КонецЕсли;
		
		Если Не ПустаяСтрока(КритерийПоиска) Тогда
			СловаПоиска[Индекс] = "(" + КритерийПоиска + ")";
			ПоискИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоискИзменен Тогда
		СтрокаПоиска = СтрСоединить(СловаПоиска, " & ");
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

// Определяет, содержит ли строка операторы полнотекстового поиска
//
// Параметры
//	Строка
//
// Возвращаемое значение
//	Булево
//
Функция СтрокаСодержитПоисковыеОператорыПолнотекстовогоПоиска(Знач Строка) Экспорт
	
	СлужебныеСимволы = """,&|?~/()*#!";
	Для Индекс = 1 По СтрДлина(СлужебныеСимволы) Цикл
		Символ = Сред(СлужебныеСимволы, Индекс, 1);
		Если Найти(Строка, Символ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	СлужебныеСлова = Новый Массив;
	СлужебныеСлова.Добавить(" И ");
	СлужебныеСлова.Добавить(" AND ");
	СлужебныеСлова.Добавить(" ИЛИ ");
	СлужебныеСлова.Добавить(" OR ");
	СлужебныеСлова.Добавить(" НЕ ");
	СлужебныеСлова.Добавить(" NOT ");
	СлужебныеСлова.Добавить(" РЯДОМ");
	СлужебныеСлова.Добавить(" NEAR");
	Для каждого СлужебноеСлово Из СлужебныеСлова Цикл
		Если Найти(Строка, СлужебноеСлово) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает расширенную строку поиска языка запросов
//
// Параметры
//	СтрокаПоиска - Строка - исходная строка поиска
//	Спецсимвол - спец. символ для экранирования служебных символов языка запросов
//
// Возвращаемое значение
//	Строка
//
Функция ПолучитьРасширеннуюСтрокуПоискаЯзыкаЗапросов(Знач СтрокаПоиска, Спецсимвол = "\") Экспорт
	
	Если СтрокаСодержитСлужебныеСимволыЯзыкаЗапросов(СтрокаПоиска) Тогда
		
		РасширеннаяСтрокаПоиска = СтрЗаменить(СтрокаПоиска, Спецсимвол, Спецсимвол + Спецсимвол);
		Если Прав(РасширеннаяСтрокаПоиска, 1) <> "%" Тогда
			РасширеннаяСтрокаПоиска = РасширеннаяСтрокаПоиска + "%";
		КонецЕсли;
		
	Иначе
		
		СтрокаПоиска = ЭкранироватьСлужебныеСимволыЯзыкаЗапросов(СокрЛП(СтрокаПоиска), Спецсимвол);
		СловаПоиска = СтрРазделить(СтрокаПоиска, " ");
		
		РасширеннаяСтрокаПоиска = "";
		Для каждого Слово Из СловаПоиска Цикл
			РасширеннаяСтрокаПоиска = РасширеннаяСтрокаПоиска + "%" + Слово + "%";
		КонецЦикла;
	КонецЕсли;
	
	Возврат РасширеннаяСтрокаПоиска;
	
КонецФункции

// Выполняет поиск информации в базе данных
//
// Параметры
//	СтрокаПоиска - Строка
//	ОбластиПоиска - метаданные в которых производить поиск
//	ПоТочномуСоответствию - признак поиска по точному соответствию
//	ИмяМенеджераПоиска - должен содержать метод "ПолучитьТекстЗапросаПоОбласти(ОбластьПоиска)"
//	ОписаниеОшибки - Строка - описание ошибки если неудалось осуществить поиск
//	
// Возвращаемое значение
//	Неопределено, Соответствие(ОбластьПоиска, МассивРезультатов)
//	
Функция ВыполнитьПоискПоОбласти(Знач СтрокаПоиска,
								Знач ОбластиПоиска,
								Знач ПоТочномуСоответствию,
								Знач ИмяМенеджераПоиска,
								ОписаниеОшибки = "") Экспорт
	
	РезультатыПоиска = Новый Соответствие;
	
	МенеджерПоиска = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПоиска);
	МаксимальноеКоличествоРезультатовПоиска = МаксимальноеКоличествоРезультатовПоиска() + 1;
	Если Не ПоТочномуСоответствию Тогда
		СтрокаПоиска = ПолучитьРасширеннуюСтрокуПоискаЯзыкаЗапросов(СтрокаПоиска, "\");
	Иначе
		СтрокаПоиска = ЭкранироватьСлужебныеСимволыЯзыкаЗапросов(СтрокаПоиска, "\") + "%";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);

	Для каждого Область Из ОбластиПоиска Цикл
		
		ТекстЗапроса = МенеджерПоиска.ПолучитьТекстЗапросаПоОбласти(Область);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%МаксимальноеКоличество%", МаксимальноеКоличествоРезультатовПоиска);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидСравнения%", "ПОДОБНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Спецсимвол%", "СПЕЦСИМВОЛ ""\""");
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = МаксимальноеКоличествоРезультатовПоиска Тогда
			ОписаниеОшибки = "СлишкомМногоРезультатов";
			Возврат Неопределено;
		КонецЕсли;
		
		РезультатыПоиска.Вставить(Область, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Значение"));
		
	КонецЦикла;
		
	Если РезультатыПоиска.Количество() = 0 Тогда
		ОписаниеОшибки = "НичегоНеНайдено";
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатыПоиска;
	
КонецФункции

Функция МаксимальноеКоличествоРезультатовПоиска()
	Возврат 500;
КонецФункции

// Определяет, содержит ли строка служебные символы языка запросов
//
// Параметры
//	Строка
//
// Возвращаемое значение
//	Булево
//
Функция СтрокаСодержитСлужебныеСимволыЯзыкаЗапросов(Знач Строка) Экспорт
	
	СлужебныеСимволы = "%_[]";
	Для Индекс = 1 По СтрДлина(СлужебныеСимволы) Цикл
		Символ = Сред(СлужебныеСимволы, Индекс, 1);
		Если Найти(Строка, Символ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Экранирует служебные символы в строке шаблона оператора ПОДОБНО языка запросов
//
// Параметры
//	Параметр - Строка - значение параметра запроса, в котором нужно экранировать специальные символы.
//
// Возвращаемое значение
//	Строка
//
Функция ЭкранироватьСлужебныеСимволыЯзыкаЗапросов(Знач Параметр, Спецсимвол = "\") Экспорт
	
	Результат = СтрЗаменить(Параметр, Спецсимвол, Спецсимвол + Спецсимвол);
	Результат = СтрЗаменить(Результат, "%", Спецсимвол + "%");
	Результат = СтрЗаменить(Результат, "_", Спецсимвол + "_");
	Результат = СтрЗаменить(Результат, "[", Спецсимвол + "[");
	Результат = СтрЗаменить(Результат, "]", Спецсимвол + "]");
	
	Возврат Результат;
	
КонецФункции

// Удаляет повторяющиеся элементы массива.
//
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМассиве 		   = Новый Соответствие; 
		БылоНеопределено 	   = Ложь;
		КоличествоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовВМассиве Цикл 
			
			ЭлементМассива = Массив[КоличествоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента    = ТипЗнч(ЭлементМассива); 
			
			Если ЭлементМассива = Неопределено Тогда
				
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					Массив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМассиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМассиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

#Область ЗагрузкаНСИ

/// Добавляет в объект выбранные элементы списка в фоне.
//
// Если тип значения не соответствует списку типов, возбуждается исключение с текстом Сообщение.
//
// Параметры:
//   Параметры - Структура -
//     Структура параметров для работы со справочником и загружаемым элементами.
//   АдресХранилища - Строка -
//     Адрес временного хранилища куда будут помещен массив ссылок на отработанные элементы.
///
Процедура ДобавитьВОбъектВФоне(Параметры, АдресХранилища) Экспорт
	Успех_ = Истина;
	Элементы_ = Новый Массив;
	
	ЕстьКолонкаЭтоГруппа_ = (Параметры.Список.Колонки.Найти("ЭтоГруппа") <> Неопределено);
	Шаг_ = 100/Параметры.Список.Строки.Количество();
	ПроцентВыполнения_ = 0;
	Для Каждого ЭлементСписка_ Из Параметры.Список.Строки Цикл
		Если ЭлементСписка_.Выбран Тогда
			ДобавитьЭлементВОбъект(
				Элементы_,
				ЭлементСписка_,
				Параметры.СвойстваОбъекта,
				Параметры.МенеджерОбъекта,
				Параметры.МенеджерОбъекта.ПустаяСсылка(), 
				Параметры.Иерархия,
				Параметры.ИерархияГрупп,
				ЕстьКолонкаЭтоГруппа_,
				Параметры.ОбновитьПринудительно,
				Параметры.ИмяОсновногоКода
			);
		КонецЕсли;
		НовыйШаг_ = ПроцентВыполнения_ + Шаг_;
		ПроцентВыполненияОкр_ = Окр(НовыйШаг_, 0);
		Если ПроцентВыполненияОкр_ > (ПроцентВыполнения_) Тогда
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполненияОкр_, "Выполняется запись изменений");
		КонецЕсли;
		ПроцентВыполнения_ = НовыйШаг_;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Элементы_, АдресХранилища);
КонецПроцедуры

/// Делает полное соединение загружаемых данных классификатора с ссылками существующих элементов в базе.
//  Получившаяся таблица разбивается на две "Актуальное" и "Неактуальное" по признаку архивности.
//  Заполняет поле ЭтоГруппа при необходимости.
//
// Параметры:
//   Таблица - ТаблицаЗначений -
//     Таблица загружаемых данных классификатора.Подробнее смотри функции ПрочитатьДанныеКлассификатораИзXDTO
//     и ПрочитатьXMLВТаблицуИзМакета модулей менеджера справочников.
//   ИмяОбъекта- Строка -
//     Имя объекта метеданных, куда осуществляется загрузка, справочник или план видов характеристик.
//   ПараметрыЗагрузки- Структура -
//     Структура дополнительных параметров загрузки.
//
//  Возвращаемое значение:
//     Результат - Структура - Структура с готовыми таблицами и вспомогательными данными.
//        Актуальное - ТаблицаЗначений - актуальные данные классификатора.
//        Неактуальное - ТаблицаЗначений - данные классификатора для помещения в архив.
//        ЭтоДанныеМинздрава - Булево - признако того, что классификатор был получен из МЗ.
//        ЭтоДанныеОМС - Булево - признако того, что классификатор был получен из ФОМС.
//        ИмяОсновногоКода - Строка - имя основного реквизита по которому ведется поиск в базе
//        на случай если это макет конфиграции с данными как из МЗ, так и из ФОМС.
///
Функция СопоставитьЗагружаемыеДанныеСЭлементамиВБазе(Таблица, ИмяОбъекта, Идентификатор, ПараметрыЗагрузки) Экспорт
	
	Иерархия_ = ПроверитьИерархиюКлассификатора(Таблица.Колонки);
	ИерархияГрупп_ = ПроверитьИерархиюГрупп(ИмяОбъекта);
	ЭтоДанныеМинздрава_ = (Таблица.Колонки.Найти("КодМинздрава") <> Неопределено);
	ЭтоДанныеОМС_ = (Таблица.Колонки.Найти("КодПоОМС") <> Неопределено);
	ПараметрВладелец_ = Неопределено;
	ИмяОсновногоКода_ = Неопределено;
	
	Если ТипЗнч(ПараметрыЗагрузки) = Тип("Структура") Тогда
		ПараметрыЗагрузки.Свойство("Владелец", ПараметрВладелец_);
		ПараметрыЗагрузки.Свойство("ИмяОсновногоКода", ИмяОсновногоКода_);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяОсновногоКода_) Тогда
		ИмяОсновногоКода_ = ?(ЭтоДанныеМинздрава_, "КодМинздрава", "КодПоОМС");
	КонецЕсли;
	
	ДополнитьТаблицу(ИмяОбъекта, Таблица, Идентификатор, ИмяОсновногоКода_, ИерархияГрупп_, ПараметрВладелец_);
	
	ТаблицаНеактуальных_ = ПолучитьТаблицуНеактуальное(ИмяОбъекта, Таблица, ИмяОсновногоКода_, Иерархия_, ИерархияГрупп_, ПараметрВладелец_);
	
	Результат_ = Новый Структура();
	Результат_.Вставить("Актуальное", Таблица);
	Результат_.Вставить("Неактуальное", ТаблицаНеактуальных_);
	Результат_.Вставить("ЭтоДанныеМинздрава", ЭтоДанныеМинздрава_);
	Результат_.Вставить("ЭтоДанныеОМС", ЭтоДанныеОМС_);
	Результат_.Вставить("ИмяОсновногоКода", ИмяОсновногоКода_);
	Результат_.Вставить("Иерархия", Иерархия_);
	Результат_.Вставить("ИерархияГрупп", ИерархияГрупп_);

	Возврат Результат_;
КонецФункции

/// Ищет ссылки к загружаемым данным классификатора и добавляет соответсвующую колонку в таблицу.
// При необходимости создает элементы справочника и обновляет их
// Параметры:
//   Таблица - ТаблицаЗначений -
//     Таблица загружаемых данных классификатора.Подробнее смотри функции ПрочитатьДанныеКлассификатораИзXDTO
//     и ПрочитатьXMLВТаблицуИзМакета модулей менеджера справочников.
//   Параметры - Структура -
//     Структура  параметров загрузки.
//   СвойстваОбъекта - Структура -
//     Содержит списки использования реквизитов(для элементов и групп)
//     и табличных частей справочника соответсвующих колонкам загружаемой таблицы классификатора.
//   ИмяОсновногоКода - Строка -
//     Имя реквизита первичного ключа таблицы данных классификатора.
//   ТекстЗапроса - Строка -
//     Выходной параметр, сформированный текст запроса для поиска ссылок к таблице.
///
Процедура СопоставитьЗагружаемыеДанныеСЭлементамиВБазеИСразуДобавлять(Таблица, Параметры, СвойстваОбъекта, ИмяОсновногоКода = "КодМинздрава", ТекстЗапроса = "") Экспорт
	
	ПараметрВладелец_ = Неопределено;
	ИмяОсновногоКода_ = Неопределено;
	
	Если ТипЗнч(Параметры.ПараметрыЗагрузки) = Тип("Структура") Тогда
		Параметры.ПараметрыЗагрузки.Свойство("Владелец", ПараметрВладелец_);
	КонецЕсли;
	
	ДополнитьТаблицуСсылками(Параметры.ИмяОбъекта, Таблица, Параметры.Идентификатор, ИмяОсновногоКода, ПараметрВладелец_, ТекстЗапроса);
	
	Элементы_ = Новый Массив;
	Для Каждого ЭлементСписка_ Из Таблица Цикл
		ДобавитьЭлементВОбъект(
			Элементы_,
			ЭлементСписка_,
			СвойстваОбъекта,
			Параметры.МенеджерОбъекта,
			Неопределено, 
			Ложь,
			Ложь,
			Ложь,
			Истина,
			ИмяОсновногоКода_
		);
	КонецЦикла;
	
КонецПроцедуры

/// Получает свойства использования реквизитов справочника/ПВХ по элементам и группам,
/// а так же табличных части в виде строк с именами реквизитов через запятую.
/// Если у реквизита нет соответствия с колонками загружаемой таблицы классификатора, то он не будет учтен.
// Параметры:
//   ИмяОбъекта - Строка -
//     Имя объекта метаданных куда производится загрузка.
//   ТаблицаКлассификатора - ТаблицаЗначений -
//     Таблица загружаемых данных классификатора.Подробнее смотри функции ПрочитатьДанныеКлассификатораИзXDTO
//     и ПрочитатьXMLВТаблицуИзМакета модулей менеджера справочников.
//   ЭтоДанныеМинздрава - Булево -
//     Признак того, что данные принадлежат НСИ Росминздрава.
//   ЭтоДанныеОМС - Булево -
//     Признак того, что данные принадлежат НСИ ФОМС.
//  Возвращаемое значение:
//     Результат - Структура:
//        Элемента - Строка - список реквизитов через запятую у которых устновлено использование для элемента.
//        Группы - Строка - список реквизитов через запятую у которых устновлено использование для группы.
//        ТабличныеЧасти - Строка - список табличных частей через запятую.
///
Функция ПолучитьСвойстваОбъекта(ИмяОбъекта, ТаблицаКлассификатора, ЭтоДанныеМинздрава = Ложь, ЭтоДанныеОМС = Ложь) Экспорт
	Свойства_ = Новый Структура;
	
	ОбязательныеПоля_ = АлгоритмыДляКоллекций.СоздатьМассив("Наименование");
	ИсключаемыеПоля_ = Новый Массив();
	Если ЭтоДанныеМинздрава Тогда
		ОбязательныеПоля_.Добавить("КодМинздрава");
		ОбязательныеПоля_.Добавить("ВерсияКлассификатораМинздрава");
	КонецЕсли;
	Если Не ЭтоДанныеОМС Тогда
		ИсключаемыеПоля_.Добавить("КодПоОМС");
	КонецЕсли;
	Если ЭтоДанныеОМС Тогда
		ОбязательныеПоля_.Добавить("КодПоОМС");
	КонецЕсли;
	Если Не ЭтоДанныеМинздрава Тогда
		ИсключаемыеПоля_.Добавить("КодМинздрава");
		ИсключаемыеПоля_.Добавить("ВерсияКлассификатораМинздрава");
	КонецЕсли;
	ОбязательныеПоля_ = СтрСоединить(ОбязательныеПоля_, ", ");
	
	Свойства_.Вставить("Элемента", ОбязательныеПоля_);
	Свойства_.Вставить("Группы", ОбязательныеПоля_);
	
	Свойства_.Вставить("ТабличныеЧасти", "");
	Свойства_.Вставить("Все", "");
	
	ПоляОбъекта_ = Новый Массив;
	ПоляСписка_ = СписокРеквизитовДерева("Список", ЭтоДанныеМинздрава, ЭтоДанныеОМС);
	Для Каждого Колонка_ Из ТаблицаКлассификатора.Колонки Цикл
		Если ИСТИНА
			И ПоляСписка_.Найти(Колонка_.Имя) = Неопределено
			И ИсключаемыеПоля_.Найти(Колонка_.Имя) = Неопределено
		Тогда
			ПоляОбъекта_.Добавить(Колонка_.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДляГруппыИЭлемента_ = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента;
	ДляЭлемента_ = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
	ДляГруппы_ = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы;
	
	ИнфОбъекта_ = РеквизитыОбъектаПоИмени(ИмяОбъекта);
	Для Каждого ПолеОбъекта_ Из ПоляОбъекта_ Цикл 
		Реквизит_ = ИнфОбъекта_.Реквизиты.Найти(ПолеОбъекта_);
		Если Реквизит_ <> Неопределено Тогда
			Если Реквизит_.Использование = ДляГруппыИЭлемента_ Тогда
				Свойства_.Элемента = Свойства_.Элемента + "," + ПолеОбъекта_;
				Свойства_.Группы = Свойства_.Группы + "," + ПолеОбъекта_;
			ИначеЕсли Реквизит_.Использование = ДляЭлемента_ Тогда
				Свойства_.Элемента = Свойства_.Элемента + "," + ПолеОбъекта_;
			ИначеЕсли Реквизит_.Использование = ДляГруппы_ Тогда
				Свойства_.Группы = Свойства_.Группы + "," + ПолеОбъекта_;
			КонецЕсли;
		ИначеЕсли ИнфОбъекта_.СтандартныеРеквизиты.Найти(ПолеОбъекта_) <> Неопределено Тогда
			Свойства_.Элемента = Свойства_.Элемента + "," + ПолеОбъекта_;
			Свойства_.Группы = Свойства_.Группы + "," + ПолеОбъекта_;
		КонецЕсли;
		
		ТабЧасть_ = ИнфОбъекта_.ТабличныеЧасти.Найти(ПолеОбъекта_);
		Если ТабЧасть_ <> Неопределено Тогда
			Свойства_.ТабличныеЧасти = Свойства_.ТабличныеЧасти + "," + ПолеОбъекта_;
		КонецЕсли;
		
		Свойства_.Все = Свойства_.Все + "," + ПолеОбъекта_;
	КонецЦикла;
	
	Возврат Свойства_;
КонецФункции

/// Получает списки всех реквизитов и табличных частей справочника/ПВХ по его имени.
/// Если у реквизита нет соответствия с колонками загружаемой таблицы классификатора, то он не будет учтен.
// Параметры:
//   ИмяОбъекта - Строка -
//     Имя объекта метаданных куда производится загрузка.
//  Возвращаемое значение:
//     Результат - Структура:
//        Реквизиты - Строка - список реквизитов через запятую.
//        СтандартныеРеквизиты - Строка - список стандартных реквизитов через запятую.
//        ТабличныеЧасти - Строка - список табличных частей через запятую.
///
Функция РеквизитыОбъектаПоИмени(ИмяОбъекта) Экспорт
	Результат_ = Новый Структура("Реквизиты,СтандартныеРеквизиты,ТабличныеЧасти");
	Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		Результат_.Реквизиты = Метаданные.Справочники[ИмяОбъекта].Реквизиты;
		СтандартныеРеквизиты_ = Новый Массив;
		Для Каждого СтандартныйРеквизит_ Из Метаданные.Справочники[ИмяОбъекта].СтандартныеРеквизиты Цикл;
			Если СтандартныйРеквизит_.Имя <> "ЭтоГруппа" Тогда
				СтандартныеРеквизиты_.Добавить(СтандартныйРеквизит_.Имя);
			КонецЕсли;
		КонецЦикла;
		Результат_.СтандартныеРеквизиты = СтандартныеРеквизиты_;
		Результат_.ТабличныеЧасти = Метаданные.Справочники[ИмяОбъекта].ТабличныеЧасти;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
		Результат_.Реквизиты = Метаданные.ПланыВидовХарактеристик[ИмяОбъекта].Реквизиты;
		СтандартныеРеквизиты_ = Новый Массив;
		Для Каждого СтандартныйРеквизит_ Из Метаданные.ПланыВидовХарактеристик[ИмяОбъекта].СтандартныеРеквизиты Цикл;
			Если СтандартныйРеквизит_.Имя <> "ЭтоГруппа" Тогда
				СтандартныеРеквизиты_.Добавить(СтандартныйРеквизит_.Имя);
			КонецЕсли;
		КонецЦикла;
		Результат_.СтандартныеРеквизиты = СтандартныеРеквизиты_;
		Результат_.ТабличныеЧасти = Метаданные.ПланыВидовХарактеристик[ИмяОбъекта].ТабличныеЧасти;
	КонецЕсли;
	
	Если Результат_.Реквизиты = Неопределено Тогда
		ВызватьИсключение("Невозможно определить реквизиты объекта");
	КонецЕсли;
	
	Возврат Результат_;
КонецФункции

//Возвращает необходимый минимум из массив реквизитов дерева
//для предварительного просмотра загружаемых данных на форме загрузки НСИ.
Функция СписокРеквизитовДерева(ИмяСписка, ЭтоДанныеМинздрава, ЭтоДанныеОМС) Экспорт
	
	Массив_ = Новый Массив;
	Если ИмяСписка = "Список" Тогда
		Массив_.Добавить("Наименование");
		Массив_.Добавить("Выбран");
		Массив_.Добавить("ЕстьВСправочнике");
		Массив_.Добавить("НаименованиеВСправочнике");
		Массив_.Добавить("НаименованияРазличны");
		Массив_.Добавить("ВАрхиве");
		Массив_.Добавить("Ссылка");
		Массив_.Добавить("КодыРазличны");
		Массив_.Добавить("ЕстьРазличные");
	ИначеЕсли ИмяСписка = "СписокНеактуальное" Тогда
		Массив_.Добавить("Наименование");
		Массив_.Добавить("Выбран");
		Массив_.Добавить("Ссылка");
	КонецЕсли;
	
	Если ЭтоДанныеМинздрава Тогда
		Массив_.Добавить("ВерсияКлассификатораМинздрава");
		Массив_.Добавить("КодМинздрава");
	КонецЕсли;
	Если ЭтоДанныеОМС Тогда
		Массив_.Добавить("КодПоОМС");
	КонецЕсли;
	
	Возврат Массив_;
	
КонецФункции

//Возвращает строку для запроса таблицы данных произвольного справочника/ПВХ.
Функция СтрокаИмениТаблицыОбъектаПоИмени(ИмяОбъекта) Экспорт
	Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		Возврат "Справочник." + ИмяОбъекта;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
		Возврат "ПланВидовХарактеристик." + ИмяОбъекта;
	КонецЕсли;
	
	ВызватьИсключение("Невозможно определить список имя таблицы объекта");
КонецФункции

Процедура ДополнитьТаблицуСсылками(ИмяОбъекта, ДанныеКлассификатора, Идентификатор, ИмяОсновногоКода = "КодМинздрава", Владелец = Неопределено, ТекстЗапроса = "")
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = СформироватьТексЗапроса(ИмяОбъекта, ДанныеКлассификатора, Идентификатор, ИмяОсновногоКода, Владелец)
	КонецЕсли;
	
	ДанныеКлассификатора.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(СтрокаТипаОбъектаПоИмени(ИмяОбъекта)));
	Если ДанныеКлассификатора.Колонки.Найти("ВАрхиве") = Неопределено Тогда
		ДанныеКлассификатора.Колонки.Добавить("ВАрхиве", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для каждого СтрокаКлассификатора_ Из ДанныеКлассификатора Цикл
		НаименованиеВКлассификаторе_ = СокрЛП(СтрЗаменить(СтрокаКлассификатора_.Наименование, Символы.ПС, ""));
		СтрокаКлассификатора_.Наименование = НаименованиеВКлассификаторе_;
	КонецЦикла;
	ДанныеКлассификатора.Сортировать(ИмяОсновногоКода + " Возр");

	ДанныеКлассификатораОсновнойКод_ = ДанныеКлассификатора.Скопировать(,ИмяОсновногоКода);
	Запрос_ = Новый Запрос(ТекстЗапроса);
	
	Если Владелец <> Неопределено Тогда
		Запрос_.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Если СтрНайти(ТекстЗапроса, "&Идентификатор") <> 0 Тогда
		Запрос_.УстановитьПараметр("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Запрос_.УстановитьПараметр("ТаблицаКлассификатор", ДанныеКлассификатораОсновнойКод_);
	
	Результат_ = Запрос_.Выполнить().Выгрузить();
	ДанныеКлассификатора.ЗагрузитьКолонку(Результат_.ВыгрузитьКолонку("Ссылка"),"Ссылка");
	ДанныеКлассификатора.ЗагрузитьКолонку(Результат_.ВыгрузитьКолонку("ВАрхиве"),"ВАрхиве");
	
КонецПроцедуры

Процедура ДополнитьТаблицу(ИмяОбъекта, ДанныеКлассификатора, Идентификатор, ИмяОсновногоКода = "КодМинздрава", ИерархияГрупп = Ложь, Владелец = Неопределено)
	
	РеквизитыСправочника_ = Метаданные.Справочники[ИмяОбъекта].Реквизиты;
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(Метаданные.Справочники[ИмяОбъекта]);
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
	СвойствоАрхивность_ = (ДанныеКлассификатора.Колонки.Найти(ИмяРеквизитаАрхивности_) <> Неопределено);
	
	// Удаляем полные дубли строк.
	Колонки_ = "";
	ПоляВЗапросе_ = "";
	Для каждого Колонка_ Из ДанныеКлассификатора.Колонки Цикл
		Колонки_ = Колонки_ + ?(ЗначениеЗаполнено(Колонки_), ",", "") + Колонка_.Имя;
		Если РеквизитыСправочника_.Найти(Колонка_.Имя) <> Неопределено Тогда
			// Записываем имена колонок для получения свойств объекта с такими же именами из справочника.
			Шаблон_ = СтрШаблон(Символы.ПС + Символы.Таб + "Источник.%1 КАК %1,", Колонка_.Имя);
			ПоляВЗапросе_ = ПоляВЗапросе_ + Шаблон_;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКлассификатора.Свернуть(Колонки_);
	
	ДанныеКлассификатора.Колонки.Добавить("ЕстьВСправочнике", Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("НаименованиеВСправочнике", Новый ОписаниеТипов("Строка"));
	ДанныеКлассификатора.Колонки.Добавить("НаименованияРазличны", Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("КодыРазличны", Новый ОписаниеТипов("Булево"));
	ДанныеКлассификатора.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(СтрокаТипаОбъектаПоИмени(ИмяОбъекта)));
	ДанныеКлассификатора.Колонки.Добавить("ЕстьРазличные", Новый ОписаниеТипов("Булево"));
	Если ДанныеКлассификатора.Колонки.Найти("ВАрхиве") = Неопределено Тогда
		ДанныеКлассификатора.Колонки.Добавить("ВАрхиве", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ЗаполнятьКолонкуЭтоГруппа_ = Ложь;
	Если ИерархияГрупп 
		И Не ДанныеКлассификатора.Колонки.Найти("Родитель") = Неопределено
		И ДанныеКлассификатора.Колонки.Найти("ЭтоГруппа") = Неопределено 
	Тогда
		ДанныеКлассификатора.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Строка"));
		ЗаполнятьКолонкуЭтоГруппа_ = Истина;
	КонецЕсли; 
	
	ВыражениеАктуальность_ = "Источник." + ИмяРеквизитаАрхивности_;
	Если Архивирование.ИмяРеквизитаВАрхиве() = ИмяРеквизитаАрхивности_ Тогда
		ВыражениеАктуальность_ = "НЕ " + ВыражениеАктуальность_;
	КонецЕсли;
	
	ТекстЗапроса_ = 
		"ВЫБРАТЬ"
		+ ПоляВЗапросе_ + "
		|	Источник.Ссылка КАК Ссылка,
		|	Источник.Наименование КАК Наименование,
		|	Источник." + ИмяОсновногоКода + " КАК ОсновнойКод,
		|	" + ВыражениеАктуальность_ + " КАК Актуальность,
		|	ЛОЖЬ КАК Занят,
		|	&ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	&Источник КАК Источник
		|ГДЕ &УсловиеВладелец";
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Источник", СтрокаИмениТаблицыОбъектаПоИмени(ИмяОбъекта));
	Если ИерархияГрупп Тогда
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&ЭтоГруппа", "Источник.ЭтоГруппа");
	Иначе
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&ЭтоГруппа", "ЛОЖЬ");
	КонецЕсли;
	
	Если Владелец <> Неопределено Тогда
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&УсловиеВладелец", "Источник.Владелец = &Владелец");
	Иначе
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "ГДЕ &УсловиеВладелец", "");
	КонецЕсли;
	
	// Удаляем повторяющиеся поля из текста запроса.
	СтрокиЗапроса_ = Новый Массив;
	Для Индекс_ = 1 по СтрЧислоСтрок(ТекстЗапроса_) Цикл
		// Каждую строку записываем как элемент массива.
		СтрокиЗапроса_.Добавить(СтрПолучитьСтроку(ТекстЗапроса_, Индекс_));
	КонецЦикла;
	
	СтрокиЗапроса_ = УдалитьПовторяющиесяЭлементыМассива(СтрокиЗапроса_);
	ТекстЗапроса_ = "";
	Для каждого Эл_ из СтрокиЗапроса_ Цикл
		ТекстЗапроса_ = ТекстЗапроса_ + Эл_ + Символы.ПС;
	КонецЦикла;
	
	Запрос_ = Новый Запрос(ТекстЗапроса_);
	Если Владелец <> Неопределено Тогда
		Запрос_.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	ИменаКолонок_ = Новый Массив;
	// Массив для элементов, которые необходимо исключить из списка на вкладке "Актуальное".
	МассивНеактуальные_ = Новый Массив;
	Результат_ = Запрос_.Выполнить().Выгрузить();
	НеотработанныеЭлементыКоличество_ = Результат_.Количество();
	
	Если НеотработанныеЭлементыКоличество_ <> 0 Тогда
		Для каждого Колонка_ из Результат_.Колонки Цикл
			КолонкаВКлассификаторе_ = ДанныеКлассификатора.Колонки.Найти(Колонка_.Имя);
			Если КолонкаВКлассификаторе_ <> Неопределено Тогда
				ИменаКолонок_.Добавить(Колонка_.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Результат_.Колонки.Добавить("НаименованиеНРег");
		Для Каждого Элемент_ Из Результат_ Цикл
			Элемент_.НаименованиеНРег = НРег(Элемент_.Наименование);
		КонецЦикла;
		
		ДанныеКлассификатора.Колонки.Добавить("НаименованиеНРег");
	КонецЕсли;
	Для каждого СтрокаКлассификатора_ Из ДанныеКлассификатора Цикл
		// Заполняем колонку ЭтоГруппа для справочников с иерархией групп.
		Если Истина = ЗаполнятьКолонкуЭтоГруппа_ Тогда
			Если ДанныеКлассификатора.Найти(СтрокаКлассификатора_[ИмяОсновногоКода], "Родитель") <> Неопределено Тогда
				СтрокаКлассификатора_.ЭтоГруппа = "Истина";
			Иначе
				СтрокаКлассификатора_.ЭтоГруппа = "Ложь";
			КонецЕсли;
		КонецЕсли;
		
		НаименованиеВКлассификаторе_ = СокрЛП(СтрЗаменить(СтрокаКлассификатора_.Наименование, Символы.ПС, ""));
		СтрокаКлассификатора_.Наименование = НаименованиеВКлассификаторе_;
		Если НеотработанныеЭлементыКоличество_ <> 0 Тогда
			СтрокаКлассификатора_.НаименованиеНРег = НРег(НаименованиеВКлассификаторе_);
		КонецЕсли;
		
		Если СвойствоАрхивность_ И СтрокаКлассификатора_[ИмяРеквизитаАрхивности_] = ЗначениеНедоступности_ Тогда
			МассивНеактуальные_.Добавить(СтрокаКлассификатора_);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент_ из МассивНеактуальные_ Цикл
		ДанныеКлассификатора.Удалить(Элемент_);
	КонецЦикла;
		
	ЕстьРекизитOIDКлассификатора_ = Булево(ИменаКолонок_.Найти("OIDКлассификатораМинздрава") <> Неопределено);
	ИспользуемСопоставлениеПоOID_ = ЕстьРекизитOIDКлассификатора_;
	Если ИспользуемСопоставлениеПоOID_ Тогда
		ИспользуемСопоставлениеПоOID_ = Булево(Результат_.Найти(Идентификатор, "OIDКлассификатораМинздрава") <> Неопределено);
	КонецЕсли;
		
	Для каждого СтрокаКлассификатора_ Из ДанныеКлассификатора Цикл
		Если НеотработанныеЭлементыКоличество_ = 0 Тогда
			Прервать;
		КонецЕсли;
		// Ищем элемент в справочнике
		Если Не ИспользуемСопоставлениеПоOID_ Тогда
			Отбор_ = Новый Структура("ОсновнойКод", СтрокаКлассификатора_[ИмяОсновногоКода]);
			Если ЕстьРекизитOIDКлассификатора_ Тогда
				Отбор_.Вставить("OIDКлассификатораМинздрава", "");
			КонецЕсли;
			НайденыеЭлементы_ = Результат_.НайтиСтроки(Отбор_);
			ЭлементСправочника_ = ?(НайденыеЭлементы_.Количество() <> 0, НайденыеЭлементы_[0], Неопределено);
		Иначе
			НайденыеЭлементы_ = Результат_.НайтиСтроки(
				Новый Структура(
					"OIDКлассификатораМинздрава,ОсновнойКод",
					СтрокаКлассификатора_.OIDКлассификатораМинздрава, СтрокаКлассификатора_[ИмяОсновногоКода]
				)
			);
			ЭлементСправочника_ = ?(НайденыеЭлементы_.Количество() <> 0, НайденыеЭлементы_[0], Неопределено);
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(ЭлементСправочника_) Тогда
			Отбор_ = Новый Структура("НаименованиеНРег, Занят", СтрокаКлассификатора_.НаименованиеНРег, Ложь);
			Если ИспользуемСопоставлениеПоOID_ Тогда
				Отбор_.Вставить("OIDКлассификатораМинздрава", СтрокаКлассификатора_.OIDКлассификатораМинздрава);
			ИначеЕсли ЕстьРекизитOIDКлассификатора_ Тогда
				Отбор_.Вставить("OIDКлассификатораМинздрава", "");
			КонецЕсли;
			СтрокиСНаименованием_ = Результат_.НайтиСтроки(Отбор_);
			Для каждого СтрокаСНаименованием_ Из СтрокиСНаименованием_ Цикл
				// Ищем такие же элементы в классификаторе
				НайденныеВКлассификаторе_ = ДанныеКлассификатора.НайтиСтроки(
					Новый Структура(
						ИмяОсновногоКода + ", НаименованиеНРег",
						СтрокаСНаименованием_.ОсновнойКод, СтрокаСНаименованием_.НаименованиеНРег
					)
				);
				Если Не ЗначениеЗаполнено(СтрокаСНаименованием_.ОсновнойКод) 
					Или НайденныеВКлассификаторе_.Количество() = 0
				Тогда
					ЭлементСправочника_ = СтрокаСНаименованием_;
					СтрокаСНаименованием_.Занят = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ЭлементСправочника_) Тогда
			НеотработанныеЭлементыКоличество_ = НеотработанныеЭлементыКоличество_ - 1;
			СтрокаКлассификатора_.ЕстьВСправочнике = Истина;
			СтрокаКлассификатора_.Ссылка = ЭлементСправочника_.Ссылка;
			Если ЭлементСправочника_.Актуальность = Ложь Тогда
				СтрокаКлассификатора_.ВАрхиве = Истина;
			КонецЕсли;
			Если ЭлементСправочника_[ИмяОсновногоКода] <> СтрокаКлассификатора_[ИмяОсновногоКода] Тогда
				СтрокаКлассификатора_.КодыРазличны = Истина;
			КонецЕсли;
			Если СтрокаКлассификатора_.Наименование <> ЭлементСправочника_.Наименование Тогда
				СтрокаКлассификатора_.НаименованиеВСправочнике = ЭлементСправочника_.Наименование;
				СтрокаКлассификатора_.НаименованияРазличны = Истина;
			КонецЕсли;
			Для каждого Эл_ из ИменаКолонок_ Цикл
				СтрКлассификатора_ = СтрокаКлассификатора_[Эл_];
				ЭлемСправочника_ = ЭлементСправочника_[Эл_];
				Если
					СтрКлассификатора_ <> ЭлемСправочника_ И
					ТипЗнч(СтрКлассификатора_) = ТипЗнч(ЭлемСправочника_)
				Тогда
					Если ЗаполнятьКолонкуЭтоГруппа_ = Истина Тогда
						Реквизит_ = РеквизитыСправочника_.Найти(Эл_);
						Использование_ = ?(Реквизит_ = Неопределено, "ДляГруппы", Реквизит_.Использование);
						Если СтрокаКлассификатора_.ЭтоГруппа = "Истина" И Не (Использование_ = "ДляГруппы") Тогда
							Продолжить;
						Иначе
							СтрокаКлассификатора_.ЕстьРазличные = Истина;
						КонецЕсли;
					Иначе
						СтрокаКлассификатора_.ЕстьРазличные = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеКлассификатора.Колонки.Найти("НаименованиеНРег") <> Неопределено Тогда
		ДанныеКлассификатора.Колонки.Удалить("НаименованиеНРег");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуНеактуальное(ИмяОбъекта, ДанныеКлассификатора, ИмяОсновногоКода = "КодМинздрава", Иерархия = Ложь, ИерархияГрупп = Ложь, Владелец = Неопределено)

	ПоляВыборки_ = Новый Массив;
	ПоляВыборки_.Добавить(ИмяОсновногоКода);
	Если
		ДанныеКлассификатора.Колонки.Найти("КодМинздрава") <> Неопределено И
		ПоляВыборки_.Найти("КодМинздрава") = Неопределено
	Тогда
		ПоляВыборки_.Добавить("КодМинздрава");
	КонецЕсли;
	Если
		ДанныеКлассификатора.Колонки.Найти("КодПоОМС") <> Неопределено И
		ПоляВыборки_.Найти("КодПоОМС") = Неопределено
	Тогда
		ПоляВыборки_.Добавить("КодПоОМС");
	КонецЕсли;
	
	ПоляВыборки_.Добавить("Наименование");
	Если Иерархия = Истина Тогда
		ПоляВыборки_.Добавить("Родитель");
	КонецЕсли;
	ПоляВыборки_.Добавить("Ссылка");

	ТекстЗапроса_ = 
		"ВЫБРАТЬ
		|	&Поля
		|ИЗ
		|	&Источник КАК Источник
		|ГДЕ
		|	НЕ Источник.Ссылка В (&МассивСсылок)
		|	И &УсловиеАрхивности
		|	И &УсловиеИерархии
		|	И &УсловиеВладелец";
		
	Источник_ = СтрокаИмениТаблицыОбъектаПоИмени(ИмяОбъекта);
	Метаданные_ = Метаданные.НайтиПоПолномуИмени(Источник_);
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(Метаданные_);
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
	
	УсловиеАрхивности_ = СтрШаблон(
		"Источник.%1 = %2",
		ИмяРеквизитаАрхивности_,
		?(ЗначениеНедоступности_, "ЛОЖЬ", "ИСТИНА")
	);
	
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&УсловиеАрхивности", УсловиеАрхивности_);
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Источник", Источник_);
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Поля", СтрСоединить(ПоляВыборки_, "," + Символы.ПС));
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&УсловиеИерархии", ?(Истина = ИерархияГрупп, "НЕ Источник.ЭтоГруппа", "ИСТИНА"));
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&УсловиеВладелец", ?(Владелец <> Неопределено, "Источник.Владелец = &Владелец", "ИСТИНА"));
	
	Запрос_ = Новый Запрос(ТекстЗапроса_);
	Запрос_.УстановитьПараметр("МассивСсылок", ДанныеКлассификатора.ВыгрузитьКолонку("Ссылка"));
	Если Владелец <> Неопределено Тогда
		Запрос_.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Возврат Запрос_.Выполнить().Выгрузить();

КонецФункции

Функция ПроверитьИерархиюКлассификатора(Колонки)
	Если Колонки.Найти("Родитель") <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции

Функция ПроверитьИерархиюГрупп(ИмяОбъекта)
	Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		Если Метаданные.Справочники[ИмяОбъекта].Иерархический 
			И (Метаданные.Справочники[ИмяОбъекта].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) 
		Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
		Если Метаданные.ПланыВидовХарактеристик[ИмяОбъекта].Иерархический Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура ДобавитьЭлементВОбъект(ДобавленныеЭлементы, ЭлементСписка, СвойстваОбъекта, МенеджерОбъекта, РодительСсылка, Иерархия, ИерархияГрупп, ЕстьКолонкаЭтоГруппа, ОбновитьПринудительно, ИмяОсновногоКода)
	
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(МенеджерОбъекта.ПустаяСсылка());
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
	
	ИмяОновоногоКода_ = ИмяОсновногоКода;
	Если Не ЗначениеЗаполнено(ИмяОновоногоКода_) Тогда
		ИмяОновоногоКода_ = ?(СтрНайти(СвойстваОбъекта.Элемента, "КодМинздрава") <> 0, "КодМинздрава", "КодПоОМС");
	КонецЕсли;
	
	Создать_ = Ложь;
	Обновить_ = Ложь;
	Сохранить_ = Ложь;
	Если ЗначениеЗаполнено(ЭлементСписка.Ссылка) Тогда
		
		Объект_ = ЭлементСписка.Ссылка.ПолучитьОбъект();
		Если ИерархияГрупп Тогда
			Если ЕстьКолонкаЭтоГруппа
				И ЭлементСписка.ЭтоГруппа = "Истина" И Не Объект_.ЭтоГруппа 
			Тогда
				Если Не Истина = ЭлементСписка.КодыРазличны Тогда
					ОчиститьОсновнойКодОбъекту(Объект_,ИмяОновоногоКода_);
				КонецЕсли;
				Создать_ = Истина;
			ИначеЕсли ЕстьКолонкаЭтоГруппа
				И ЭлементСписка.ЭтоГруппа = "Ложь" И Объект_.ЭтоГруппа 
			Тогда
				Если Не Истина = ЭлементСписка.КодыРазличны Тогда
					ОчиститьОсновнойКодОбъекту(Объект_, ИмяОновоногоКода_);
				КонецЕсли;
				Создать_ = Истина;
			Иначе
				Если ЭлементСписка.ВАрхиве И Не Объект_.ЭтоГруппа Тогда
					// Извлекаем из архива.
					Объект_[ИмяРеквизитаАрхивности_] = Не ЗначениеНедоступности_;
					Сохранить_ = Истина;
				КонецЕсли;
				Если Истина = ЭлементСписка.ЕстьРазличные ИЛИ Истина = ОбновитьПринудительно
				Тогда
					Объект_.Родитель = Неопределено;
					Обновить_ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЭлементСписка.ВАрхиве Тогда
				// Извлекаем из архива.
				Объект_[ИмяРеквизитаАрхивности_] = Не ЗначениеНедоступности_;
				Сохранить_ = Истина;
			КонецЕсли;
			Если Истина = ОбновитьПринудительно ИЛИ Истина = ЭлементСписка.ЕстьРазличные
			Тогда
				Обновить_ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Иерархия 
				И НЕ Создать_
				И НЕ Обновить_
				И НЕ Объект_.Родитель = РодительСсылка 
		Тогда
			Объект_.Родитель = РодительСсылка;
			Сохранить_ = Истина;
		КонецЕсли;
		
	Иначе
		Создать_ = Истина;
	КонецЕсли;
	
	Если Создать_ = Истина Тогда
		Объект_ = СоздатьОбъектСправочника(ЭлементСписка, МенеджерОбъекта, ИерархияГрупп, ЕстьКолонкаЭтоГруппа);
		Обновить_ = Истина;
	КонецЕсли;
	Если Обновить_ = Истина Тогда
		ОбновитьОбъектСправочника(Объект_, ЭлементСписка, СвойстваОбъекта, Иерархия, РодительСсылка);
		Сохранить_ = Истина;
	КонецЕсли;
	Если Сохранить_ = Истина Тогда
		Объект_.Записать();
		ОбновитьЭлементСписка(ЭлементСписка, Объект_, ИмяОновоногоКода_);
		ДобавленныеЭлементы.Добавить(Объект_.Ссылка);
	КонецЕсли; 
	
	Если Иерархия Тогда
		ДобавитьЭлементыВОбъект(
			ДобавленныеЭлементы,
			ЭлементСписка,
			СвойстваОбъекта,
			МенеджерОбъекта, 
			ИерархияГрупп,
			ЕстьКолонкаЭтоГруппа,
			ОбновитьПринудительно,
			ИмяОновоногоКода_
		);
	КонецЕсли;
КонецПроцедуры

Функция СоздатьОбъектСправочника(ЭлементСписка, МенеджерОбъекта, ИерархияГрупп, ЕстьКолонкаЭтоГруппа)
	
	Если ИерархияГрупп И ЕстьКолонкаЭтоГруппа И ЭлементСписка.ЭтоГруппа = "Истина" Тогда
		Объект_ = МенеджерОбъекта.СоздатьГруппу();
		
	Иначе
		Объект_ = МенеджерОбъекта.СоздатьЭлемент();
		
		ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(МенеджерОбъекта.ПустаяСсылка());
		ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
		Объект_[ИмяРеквизитаАрхивности_] = Не ЗначениеНедоступности_;
		
	КонецЕсли;
	
	Возврат Объект_;
	
КонецФункции

Процедура ОбновитьОбъектСправочника(ОбъектСправочника, ЭлементСписка, СвойстваОбъекта, Иерархия, РодительСсылка)
	ВсеСвойства_ = Новый Структура(СвойстваОбъекта.Все);
	ЗаполнитьЗначенияСвойств(ВсеСвойства_, ЭлементСписка);
	
	ЗаполнитьЗначенияСвойств(
		ОбъектСправочника, ЭлементСписка, ?(Не ОбъектСправочника.ЭтоГруппа, СвойстваОбъекта.Элемента, СвойстваОбъекта.Группы)
	);
	ОбъектСправочника.Заполнить(ВсеСвойства_);
	Для Каждого Свойство_ Из ВсеСвойства_ Цикл
		Если ОбъектСправочника.Метаданные().Реквизиты.Найти(Свойство_.Ключ) = Неопределено Тогда
			НайденВСтандарных_ = Ложь;
			Для Каждого СтандартныйРеквизит_ Из ОбъектСправочника.Метаданные().СтандартныеРеквизиты Цикл
				Если СтандартныйРеквизит_.Имя = Свойство_.Ключ Тогда
					НайденВСтандарных_ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не НайденВСтандарных_ Тогда
				ОбъектСправочника.ДополнительныеСвойства.Вставить(Свойство_.Ключ, Свойство_.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Иерархия = Истина Тогда
		ОбъектСправочника.Родитель = РодительСсылка; 
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЭлементыВОбъект(ДобавленныеЭлементы, НачальныйЭлемент, СвойстваОбъекта, МенеджерОбъекта, ИерархияГрупп, ЕстьКолонкаЭтоГруппа, ОбновитьПринудительно, ИмяОсновногоКода)
	Для Каждого ЭлементСписка_ Из НачальныйЭлемент.Строки Цикл
		Если ЭлементСписка_.Выбран Тогда
			ДобавитьЭлементВОбъект(
				ДобавленныеЭлементы,
				ЭлементСписка_, 
				СвойстваОбъекта, 
				МенеджерОбъекта, 
				НачальныйЭлемент.Ссылка, 
				Истина, 
				ИерархияГрупп,
				ЕстьКолонкаЭтоГруппа,
				ОбновитьПринудительно,
				ИмяОсновногоКода
			);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьОсновнойКодОбъекту(Объект, ИмяОновоногоКода)
	Объект[ИмяОновоногоКода] = Неопределено;
	Объект.Записать();
КонецПроцедуры

Процедура ОбновитьЭлементСписка(ЭлементСписка, Объект, ИмяОсновногоКода)
	
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(Объект.Ссылка);
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементСписка, "ЕстьВСправочнике") Тогда
		ЭлементСписка.ЕстьВСправочнике = ЗначениеЗаполнено(Объект.Ссылка);
		ЭлементСписка.НаименованияРазличны = Не (ЭлементСписка.Наименование = Объект.Наименование);
		ЭлементСписка.КодыРазличны = Не (ЭлементСписка[ИмяОсновногоКода] = Объект[ИмяОсновногоКода]);
		ЭлементСписка.ЕстьРазличные = Не ЭлементСписка.ЕстьРазличные;
	КонецЕсли;
	Если Не Объект.ЭтоГруппа Тогда
		ЭлементСписка.ВАрхиве = (ЗначениеНедоступности_ = Объект[ИмяРеквизитаАрхивности_]);
	КонецЕсли;
	ЭлементСписка.Ссылка = Объект.Ссылка;
	
КонецПроцедуры

Функция СтрокаТипаОбъектаПоИмени(ИмяОбъекта)
	Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
		Возврат "СправочникСсылка." + ИмяОбъекта;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
		Возврат "ПланВидовХарактеристикСсылка." + ИмяОбъекта;
	КонецЕсли;

	ВызватьИсключение("Невозможно определить тип объекта");
КонецФункции

Функция СформироватьТексЗапроса(ИмяОбъекта, ДанныеКлассификатора, Идентификатор, ИмяОсновногоКода = "КодМинздрава", Владелец = Неопределено)
	
	РеквизитыСправочника_ = Метаданные.Справочники[ИмяОбъекта].Реквизиты;
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(Метаданные.Справочники[ИмяОбъекта]);
	ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
	СвойствоАрхивность_ = (ДанныеКлассификатора.Колонки.Найти(ИмяРеквизитаАрхивности_) <> Неопределено);
	
	ЕстьРекизитOIDКлассификатора_ = Булево(РеквизитыСправочника_.Найти("OIDКлассификатораМинздрава") <> Неопределено);
	ИспользуемСопоставлениеПоOID_ = ЕстьРекизитOIDКлассификатора_;
	Если ИспользуемСопоставлениеПоOID_ Тогда
		ИспользуемСопоставлениеПоOID_ = ЗначениеЗаполнено(Справочники[ИмяОбъекта].НайтиПоРеквизиту("OIDКлассификатораМинздрава", Идентификатор));
	КонецЕсли;
	
	ТекстЗапроса_ = 
		"ВЫБРАТЬ" + Символы.ПС +
		?(РеквизитыСправочника_[ИмяОсновногоКода].Тип.СодержитТип(Тип("Строка")),
		"ВЫРАЗИТЬ(ТаблицаКлассификатор." + ИмяОсновногоКода + " КАК СТРОКА(100)) КАК ОсновнойКод",
		"	ТаблицаКлассификатор." + ИмяОсновногоКода + " КАК ОсновнойКод") + Символы.ПС +
		"	ПОМЕСТИТЬ ТаблицаКлассификатор
		|ИЗ
		|	&ТаблицаКлассификатор КАК ТаблицаКлассификатор
		|	ИНДЕКСИРОВАТЬ ПО ОсновнойКод
		|;
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Источник.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
		|	ЕСТЬNULL(" + ?(ИмяРеквизитаАрхивности_ = "Актуальность", "НЕ", "") + " Источник." + ИмяРеквизитаАрхивности_ + ", ЛОЖЬ) КАК ВАрхиве
		|ИЗ
		|	ТаблицаКлассификатор КАК ТаблицаКлассификатор
		|	ЛЕВОЕ СОЕДИНЕНИЕ &Источник КАК Источник
		|	ПО ТаблицаКлассификатор.ОсновнойКод = Источник." + ИмяОсновногоКода + "
		|ГДЕ &Условие
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаКлассификатор.ОсновнойКод ВОЗР
		|;
		|УНИЧТОЖИТЬ ТаблицаКлассификатор
		|";
		
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Источник", СтрокаИмениТаблицыОбъектаПоИмени(ИмяОбъекта));
	
	Если ЗначениеЗаполнено(Владелец) Или ИспользуемСопоставлениеПоOID_ Тогда
		Если Владелец <> Неопределено Тогда
			ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Условие", "Источник.Владелец = &Владелец&ИУсловие");
		КонецЕсли;
		Если ИспользуемСопоставлениеПоOID_ Тогда
			ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&ИУсловие", "И &Условие");
			ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Условие", "Источник.OIDКлассификатораМинздрава = &Идентификатор");
		КонецЕсли;
	Иначе
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "ГДЕ &Условие", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса_;
КонецФункции

#КонецОбласти

#КонецОбласти