

////////////////////////////////////////////////////////////////////////////////
// Общий модуль ИнтеграцияЭДО
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АктуальныйЭлектронныйДокумент

// Возвращает ссылку на электронный документ объекта учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  Контрагент - ОпределяемыйТип.УчастникЭДО
//  ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, Неопределено - ссылка на электронный документ.
//  Неопределено - ЭлектронныйДокумент не найден.
//
Функция АктуальныйЭлектронныйДокументОбъектаУчета(ОбъектУчета, ВидДокумента, Контрагент, ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента = &ВидДокумента
	|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент = &Контрагент
	|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЭлектронныйДокумент;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает таблицу актуальных электронных документов по объектам учета.
// 
// Параметры:
//  ОбъектыУчета - Массив Из ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные соответствия.
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный ЭлектронныйДокумент.
//   * Организация - ОпределяемыйТип.Организация - организация в электронном документе.
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//   * Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент в электронном документе.
//   * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента в электронном документе.
//
Функция АктуальныеЭлектронныеДокументы(Знач ОбъектыУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Организация КАК Организация,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент КАК Контрагент,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ОбъектУчета)
	|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	Запрос.Параметры.Вставить("ОбъектУчета", ОбъектыУчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу объектов учета актуальных электронных документов.
// 
// Параметры:
// ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные соответствия.
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный электронный документ.
//
Функция ОбъектыУчетаАктуальныхЭлектронныхДокументов(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)
	|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	
	Запрос.Параметры.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст запроса для выборки актуального электронного документа по объекта учета.
// Запрос содержит поля:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный ЭлектронныйДокумент.
// Результат помещается во временную таблицу "АктуальныеЭлектронныеДокументы".
// Запрос выполняется с отбором объектов учета через параметр "ОбъектыУчета",
// значение которого следует задавать массивом или единичном значением типа ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаАктуальныхЭлектронныхДокументовОбъектовУчета() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента
	|ПОМЕСТИТЬ АктуальныеЭлектронныеДокументы
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ОбъектыУчета)
	|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Назначает объектам учета актуальный электронный документ.
//
// Параметры:
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объекты учета для назначения.
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - назначаемый электронный документ.
//
Процедура УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, ЭлектронныйДокумент) Экспорт
	
	Если Не ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектУчета Из НаборОбъектовУчета Цикл
		
		ЗаписатьАктуальныйЭлектронныйДокумент(ОбъектУчета, ЭлектронныйДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(ЭлектронныйДокумент, ОбъектУчета) Экспорт
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.ОбъектУчета.Установить(ОбъектУчета);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Записать();
		
		ОбновитьСостояниеЭДООбъектаУчета(ОбъектУчета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Отказ = Истина;
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Разрыв связи электронного документа с объектом учета'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		ВыполнитьКонтрольОтраженияВУчете(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент));
	КонецЕсли;
	
	Если Не Отказ Тогда
		УдаленныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		ОбменСКонтрагентамиПереопределяемый.ПослеИзмененияОтраженияВУчете(ЭлектронныйДокумент, Новый Массив, УдаленныеДокументы);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ЭлектронныйДокумент, ОбъектУчета, СпособОбработки = "") Экспорт
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.ОбъектУчета.Установить(ОбъектУчета);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Запись = Набор.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Запись.ОбъектУчета = ОбъектУчета;		
		Запись.СпособОбработки = СпособОбработки;
		Запись.Актуальный = Истина;
		
		Набор.Записать();
		
		ОбновитьСостояниеЭДООбъектаУчета(ОбъектУчета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Отказ = Истина;
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Установка связи электронного документа с объектом учета'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
			|ИЗ
			|	РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
			|ГДЕ
			|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
			|	И КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент";
		
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			
			НаборЭлектронныхДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
			
			НаборПроверок = Новый Массив;
			НаборПроверок.Добавить("СоздатьУчетныйДокумент");
			НаборПроверок.Добавить("ПровестиУчетныйДокумент");
			ВыполнитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов, НаборПроверок)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДобавленныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		ОбменСКонтрагентамиПереопределяемый.ПослеИзмененияОтраженияВУчете(ЭлектронныйДокумент, ДобавленныеДокументы, Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на основной электронный документ объекта учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
//
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, Неопределено - ссылка на электронный документ.
//  Неопределено - электронный документ не найден.
//
Функция ОсновнойЭлектронныйДокументОбъектаУчета(Знач ОбъектУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Организация КАК Организация
	|ПОМЕСТИТЬ ДанныеДокументовОбъектаУчета
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
	|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	
	ПоляТаблицы = 
		"	ДанныеДокументовОбъектаУчета.ЭлектронныйДокумент КАК ЭлектронныйДокумент";
	ИмяТаблицы = 
		"	ДанныеДокументовОбъектаУчета КАК ДанныеДокументовОбъектаУчета";
	
	ПоляКлючаНастройки = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиВнутреннегоЭДО();
	ПоляКлючаНастройки.Организация = "ДанныеДокументовОбъектаУчета.Организация";
	ПоляКлючаНастройки.ВидВнутреннегоДокумента = "ДанныеДокументовОбъектаУчета.ВидДокумента";
	
	ТекстЗапросаСНастройками = НастройкиЭДО.ТекстЗапросаДополнениеНастройкамиВнутреннегоЭДО(ИмяТаблицы, ПоляТаблицы, ПоляКлючаНастройки);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(Запрос.Текст);
	ТекстыЗапросов.Добавить(ТекстЗапросаСНастройками);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() Тогда
		ДокументСВидомПоУмолчанию = Выборка.Найти(Истина, "ЭтоОсновнойВидДокумента"); 
		Если ДокументСВидомПоУмолчанию <> Неопределено Тогда
			Возврат ДокументСВидомПоУмолчанию.ЭлектронныйДокумент;
		Иначе
			Возврат Выборка[0].ЭлектронныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет информацию об актуальности электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ЭлектронныйДокумент.
//
Процедура ОчиститьАктуальностьЭлектронногоДокумента(Знач ЭлектронныйДокумент) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		
		НаборЗаписей.Прочитать();
		
		ОбъектыУчета = Новый Массив;
		
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Актуальный Тогда
				Запись.Актуальный = Ложь;
				ОбъектыУчета.Добавить(Запись.ОбъектУчета);
			КонецЕсли;
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
			ОбновитьСостояниеЭДООбъектовУчета(ОбъектыУчета);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Очистка информации о состоянии актуального электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает объекты учета, для которых переданный электронный документ является актуальным.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ЭлектронныйДокумент.
//
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - найденные объекты учета.
//
Функция ОбъектыУчетаАктуальногоЭлектронногоДокумента(Знач ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");	

КонецФункции

#КонецОбласти

#Область ГотовностьКДокументообороту

// Возвращает описание проверки готовности объектов учета к документообороту.
//
// Параметры:
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объекты на проверку.
//
// Возвращаемое значение:
//  см. НоваяПроверкаГотовностиКДокументообороту
//
Функция ПроверкаГотовностиКДокументообороту(НаборОбъектовУчета) Экспорт
	
	ОбъектыПроверки = ОбщегоНазначения.СкопироватьРекурсивно(НаборОбъектовУчета);
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(ОбъектыПроверки);
	
	Готовые = Новый Массив;
	Неготовые = Новый Массив;
	Для каждого ОбъектУчета Из НаборОбъектовУчета Цикл
		
		Если ОбъектыПроверки.Найти(ОбъектУчета) = Неопределено Тогда
			Неготовые.Добавить(ОбъектУчета);
		Иначе
			Готовые.Добавить(ОбъектУчета);
		КонецЕсли;
	
	КонецЦикла;
	
	Проверка = НоваяПроверкаГотовностиКДокументообороту(Готовые, Неготовые);
	
	Возврат Проверка;
	
КонецФункции

#КонецОбласти

#Область ОписаниеОбъектаУчета

// Возвращает пустое описание объекта учета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.УчастникЭДО
// * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
Функция НовоеОписаниеОбъектаУчета() Экспорт
	
	ОписаниеОбъектаУчета = Новый ТаблицаЗначений;
	
	ТипыОбъектУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.Типы();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыОбъектУчета, Метаданные.ОпределяемыеТипы.Организация.Тип.Типы());
	
	ОписаниеОбъектаУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(ТипыОбъектУчета));
	ОписаниеОбъектаУчета.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ОписаниеОбъектаУчета.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ОписаниеОбъектаУчета.Колонки.Добавить("ПрикладнойТипДокумента", Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип);
	ОписаниеОбъектаУчета.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ОписаниеОбъектаУчета.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ОписаниеОбъектаУчета.Колонки.Добавить("Договор", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
	
	Возврат ОписаниеОбъектаУчета;
	
КонецФункции

// Возвращает описание набора электронных документов по основанию.
// 
// Параметры:
//  ИсточникДанных - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОбъектаУчета
//
Функция ОписаниеОбъектаУчета(ИсточникДанных) Экспорт
	
	Описание = НовоеОписаниеОбъектаУчета();
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ИсточникДанных) Тогда
		ИсточникДанныхСсылка = ИсточникДанных;
	Иначе // передан объект.
		ИсточникДанныхСсылка = ИсточникДанных.Ссылка;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ЗаполнитьОписаниеОбъектаУчета(
				ИсточникДанныхСсылка, Описание) Тогда
			Возврат Описание;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульКоммерческиеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений =
			МодульКоммерческиеПредложенияСлужебный.ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений(ИсточникДанныхСсылка);
	Иначе
		ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоКоммерческоеПредложениеКлиенту = МодульПодсистемы.ЭтоКоммерческоеПредложениеКлиенту(ИсточникДанныхСсылка);
	Иначе
		ЭтоКоммерческоеПредложениеКлиенту = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоЗапросКоммерческогоПредложенияОтКлиента = МодульПодсистемы.ЭтоЗапросКоммерческогоПредложенияОтКлиента(ИсточникДанныхСсылка);
	Иначе
		ЭтоЗапросКоммерческогоПредложенияОтКлиента = Ложь;
	КонецЕсли;
	
	ЭтоКоммерческоеПредложениеПоставщика = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоКоммерческоеПредложениеПоставщика = МодульПодсистемы.ЭтоКоммерческоеПредложениеПоставщика(ИсточникДанныхСсылка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПДСлужебный");
		ЭтоЭПД = МодульПодсистемы.ЭтоЭПД(ИсточникДанныхСсылка);
	Иначе
		ЭтоЭПД = Ложь;
	КонецЕсли;
	
	КоммерческоеПредложениеПоставщика = 
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика";
		
	КоммерческоеПредложениеКлиенту =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту";
	
	ЗапросКоммерческогоПредложенияОтКлиента =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента";
		
	СправочникОрганизации = ИмяПрикладногоСправочника("Организации");
	
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("Тип");
	ПараметрыИсточника.Вставить("ФормированиеУниверсальногоДокумента");
	ПараметрыИсточника.Вставить("Направление");
	ПараметрыИсточника.Вставить("Организация");
	ПараметрыИсточника.Вставить("Контрагент");
	ПараметрыИсточника.Вставить("ДоговорКонтрагента", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение());
	ПараметрыИсточника.Вставить("СоглашениеЭД");
	ПараметрыИсточника.Вставить("Партнер");
	
	ТипИсточникаДанных = ТипЗнч(ИсточникДанныхСсылка);
	
	Если ТипИсточникаДанных = Тип("СправочникСсылка.НастройкиЭДО")  Тогда
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров;
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Исходящий;
		СтрокаОписания.Контрагент = ИсточникДанныхСсылка.Контрагент;
		СтрокаОписания.Организация = ИсточникДанныхСсылка.Организация;
		СтрокаОписания.Договор = ИсточникДанныхСсылка.ДоговорКонтрагента;
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбЭДО;
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Исходящий;
		СтрокаОписания.Контрагент = ИсточникДанныхСсылка.Контрагент;
		СтрокаОписания.Организация = ИсточникДанныхСсылка.Организация;
		СтрокаОписания.Договор = ИсточникДанныхСсылка.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточникаДанных = Тип("СправочникСсылка." + СправочникОрганизации)
		Или ТипИсточникаДанных = Тип("СправочникОбъект." + СправочникОрганизации) Тогда
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации;
		СтрокаОписания.Организация = ИсточникДанныхСсылка;
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Исходящий;
		
	ИначеЕсли ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений Тогда
		
		МодульКоммерческиеПредложенияСлужебный.ЗаполнитьПараметрыЭлектронногоДокументаПоОснованию(ИсточникДанныхСсылка,
			ПараметрыИсточника);
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = ПараметрыИсточника.Тип;
		СтрокаОписания.Направление  = ПараметрыИсточника.Направление;
		СтрокаОписания.Организация  = ПараметрыИсточника.Организация;
		СтрокаОписания.Контрагент   = ПараметрыИсточника.Контрагент;
		СтрокаОписания.Договор      = ПараметрыИсточника.ДоговорКонтрагента;
		
	ИначеЕсли ЭтоКоммерческоеПредложениеКлиенту
		И ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеКлиенту) Тогда
		
		МодульДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульДокумента.ЗаполнитьПараметрыЭлектронногоДокумента(ИсточникДанныхСсылка, ПараметрыИсточника);
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = ПараметрыИсточника.Тип;
		СтрокаОписания.Направление  = ПараметрыИсточника.Направление;
		СтрокаОписания.Организация  = ПараметрыИсточника.Организация;
		СтрокаОписания.Контрагент   = ПараметрыИсточника.Контрагент;
		СтрокаОписания.Договор      = ПараметрыИсточника.ДоговорКонтрагента;
	
	ИначеЕсли ЭтоКоммерческоеПредложениеПоставщика
		И ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеПоставщика) Тогда
		
		МодульДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
		МодульДокумента.ЗаполнитьПараметрыЭлектронногоДокумента(ИсточникДанныхСсылка, ПараметрыИсточника);
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = ПараметрыИсточника.Тип;
		СтрокаОписания.Направление  = ПараметрыИсточника.Направление;
		СтрокаОписания.Организация  = ПараметрыИсточника.Организация;
		СтрокаОписания.Контрагент   = ПараметрыИсточника.Контрагент;
	
	
		
	ИначеЕсли ЭтоЗапросКоммерческогоПредложенияОтКлиента
		И ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческогоПредложенияОтКлиента) Тогда
		
		МодульДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульДокумента.ЗаполнитьПараметрыЭлектронногоДокумента(ИсточникДанныхСсылка, ПараметрыИсточника);
		
		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = ПараметрыИсточника.Тип;
		СтрокаОписания.Направление  = ПараметрыИсточника.Направление;
		СтрокаОписания.Организация  = ПараметрыИсточника.Организация;
		СтрокаОписания.Контрагент   = ПараметрыИсточника.Контрагент;
		СтрокаОписания.Договор      = ПараметрыИсточника.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточникаДанных = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
		
		СтрокаОписания = Описание.Добавить();
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Исходящий;
		СтрокаОписания.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанныхСсылка, "Организация");
		
	ИначеЕсли ТипИсточникаДанных = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		
		СтрокаОписания = Описание.Добавить();
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Входящий;
		
	ИначеЕсли ЭтоЭПД = Истина Тогда
		
		МодульДокумента = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульДокумента.ЗаполнитьПараметрыЭлектронногоДокумента(ИсточникДанных, ПараметрыИсточника);

		СтрокаОписания = Описание.Добавить();

		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = ПараметрыИсточника.Тип;
		СтрокаОписания.Направление  = ПараметрыИсточника.Направление;
		СтрокаОписания.Организация  = ПараметрыИсточника.Организация;
		СтрокаОписания.Контрагент   = ПараметрыИсточника.Контрагент;
		СтрокаОписания.Договор      = ПараметрыИсточника.ДоговорКонтрагента;

	ИначеЕсли ТипИсточникаДанных = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипИсточникаДанных = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		СтрокаОписания = Описание.Добавить();
		СтрокаОписания.ОбъектУчета  = ИсточникДанныхСсылка;
		СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент;
		СтрокаОписания.Направление  = Перечисления.НаправленияЭДО.Исходящий;
		// Берем значения организации и контрагента ИсточникДанных, иначе для новых элементов будут пустые значения.
		СтрокаОписания.Организация  = ИсточникДанных.Организация;
		СтрокаОписания.Контрагент   = ИсточникДанных.Владелец;
		СтрокаОписания.Договор      = ИсточникДанныхСсылка;
		
	Иначе
		
		ПараметрыИсточника = Новый ТаблицаЗначений;
		ПараметрыИсточника.Колонки.Добавить("Тип");
		ПараметрыИсточника.Колонки.Добавить("ФормированиеУниверсальногоДокумента");
		ПараметрыИсточника.Колонки.Добавить("Направление");
		ПараметрыИсточника.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
		ПараметрыИсточника.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
		ПараметрыИсточника.Колонки.Добавить("ДоговорКонтрагента", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(ИсточникДанных, ПараметрыИсточника);
		
		Для каждого СтрокаПараметров Из ПараметрыИсточника Цикл
			
			СтрокаОписания = Описание.Добавить();
			
			СтрокаОписания.ОбъектУчета  = ИсточникДанныхСсылка;
			СтрокаОписания.ТипДокумента = ТипСкорректированныйПоПрикладнымНастройкам(СтрокаПараметров,
				СтрокаПараметров.ФормированиеУниверсальногоДокумента);
			СтрокаОписания.Направление  = СтрокаПараметров.Направление;
			СтрокаОписания.Организация  = СтрокаПараметров.Организация;
			СтрокаОписания.Контрагент   = СтрокаПараметров.Контрагент;
			СтрокаОписания.Договор      = СтрокаПараметров.ДоговорКонтрагента;
			
		КонецЦикла;
		
		ПараметрыПрикладногоДокументаЭДО = НовыеПараметрыПрикладногоЭлектронногоДокументаПоИсточнику();
		
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПараметровПрикладногоЭлектронногоДокументаПоИсточнику(
			ИсточникДанных, ПараметрыПрикладногоДокументаЭДО);
		
		Если ЗначениеЗаполнено(ПараметрыПрикладногоДокументаЭДО.ПрикладнойТипДокумента) Тогда
		
			СтрокаОписания = Описание.Добавить();
			СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;

			СтрокаОписания.ТипДокумента           = Перечисления.ТипыДокументовЭДО.Прикладной;
			СтрокаОписания.ПрикладнойТипДокумента = ПараметрыПрикладногоДокументаЭДО.ПрикладнойТипДокумента;
			
			Если ПараметрыПрикладногоДокументаЭДО.Входящий Тогда
				СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Входящий;
			Иначе
				СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Исходящий;
			КонецЕсли;
			
			СтрокаОписания.Организация     = ПараметрыПрикладногоДокументаЭДО.Организация;
			СтрокаОписания.Контрагент      = ПараметрыПрикладногоДокументаЭДО.Контрагент;
			СтрокаОписания.Договор         = ПараметрыПрикладногоДокументаЭДО.ДоговорКонтрагента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ОписанияОбъектовУчета(НаборОбъектовУчета) Экспорт
	
	ОписанияОбъектовУчета = НовоеОписаниеОбъектаУчета();
	
	Для Каждого ОбъектУчета Из НаборОбъектовУчета Цикл
		
		ОписаниеОбъектаУчета = ОписаниеОбъектаУчета(ОбъектУчета);
		Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
			НовоеОписание = ОписанияОбъектовУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеОписание, СтрокаОписания);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОписанияОбъектовУчета;
	
КонецФункции

Функция ОписаниеОбъектаУчетаПоОтбору(Знач ОбъектУчета, Знач Отбор) Экспорт
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчета(ОбъектУчета);
	
	Если Отбор.Свойство("ВидДокумента") Тогда
		Если ЗначениеЗаполнено(Отбор.ВидДокумента) Тогда
			ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отбор.ВидДокумента, "ТипДокумента");
			Отбор.Вставить("ТипДокумента", ТипДокумента);
		КонецЕсли;
		Отбор.Удалить("ВидДокумента");
	КонецЕсли;
	
	Если Отбор.Свойство("ДоговорКонтрагента") Тогда
		Отбор.Вставить("Договор", Отбор.ДоговорКонтрагента);
		Отбор.Удалить("ДоговорКонтрагента");
	КонецЕсли;
	
	НайденныеСтроки = ОписаниеОбъектаУчета.НайтиСтроки(Отбор);
	
	// Если не удалось найти с отбором по договору, то пробуем без него.
	Если НайденныеСтроки.Количество() = 0
		И Отбор.Свойство("Договор") Тогда
		Отбор.Удалить("Договор");
		НайденныеСтроки = ОписаниеОбъектаУчета.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось однозначно определить описание объекта учета по отбору'");
	ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить описание объекта учета по отбору'");
	КонецЕсли;
	
	Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденныеСтроки[0]);
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиКлиент.ВариантыФормированияУниверсальныхДокументов
Функция ВариантыФормированияУниверсальныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Разрешено", "Разрешено");
	Результат.Вставить("Запрещено", "Запрещено");
	Результат.Вставить("Обязательно", "Обязательно");
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость вывода в интерфейсах настроек отправки электронных документов опций формирования первичных /
// корректировочных документов и счетов-фактур в составе единого документа (т.е. использования УПД / УКД).
// 
// Возвращаемое значение:
// 	Использовать - Булево - Выходной параметр. Необходимо присвоить Истина, в случае, если прикладное решение
// 	                        самостоятельно определяет для каждого экземпляра учетного документа необходимость формирования 
// 	                        универсальных документов (УПД / УКД) - см. ЗаполнитьПараметрыЭДПоИсточнику, либо не использует их.
//
Функция ИспользуютсяНастройкиФормированияУниверсальныхДокументов() Экспорт
	
	Результат = Истина;
	ОбменСКонтрагентамиПереопределяемый.ИспользованиеНастройкиФормированияУниверсальныхДокументов(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СостояниеЭДООбъектаУчета

// Возвращает актуальное состояние ЭДО объекта учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО, Массив - объект учета.
//                Если передан массив, рассчитывает общее состояние всех объектов учета.
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа, по которому нужно отобрать данные.
// 
// Возвращаемое значение:
//  Структура - состояние актуальных электронных документов объекта учета:
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ПредставлениеСостояния - Строка
//
Функция РассчитатьСостояниеОбъектаУчета(Знач ОбъектУчета, Знач ВидДокумента = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Результат.Вставить("ПредставлениеСостояния", "");
	
	СостоянияЭДО = СостоянияЭДООбъектовУчета(ОбъектУчета, ВидДокумента);
	
	КоличествоВсего = СостоянияЭДО.Количество();
	
	Если КоличествоВсего = 0 Тогда
		Возврат Результат;
	ИначеЕсли КоличествоВсего = 1 Тогда
		Результат.Состояние = СостоянияЭДО[0];
		Результат.ПредставлениеСостояния = Строка(Результат.Состояние);
		Возврат Результат;
	КонецЕсли;
	
	НеНачат = Новый Массив;
	ВРаботе = Новый Массив;
	Завершен = Новый Массив;
	
	СостоянияЗавершенногоЭДО = ЭлектронныеДокументыЭДО.СостоянияЗавершенногоЭДО();
	
	Для каждого Состояние Из СостоянияЭДО Цикл
		Если Не ЗначениеЗаполнено(Состояние)
			Или Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
			НеНачат.Добавить(Состояние);
		ИначеЕсли СостоянияЗавершенногоЭДО.Найти(Состояние) <> Неопределено Тогда
			Завершен.Добавить(Состояние);
		Иначе
			ВРаботе.Добавить(Состояние);
		КонецЕсли;
	КонецЦикла;
	
	Если НеНачат.Количество() Тогда
		Состояние = НеНачат[0];
		ПредставлениеСостояния = НСтр("ru='Не начат'");
		Количество = НеНачат.Количество();
	ИначеЕсли ВРаботе.Количество() Тогда
		Состояние = ВРаботе[0];
		ПредставлениеСостояния = НСтр("ru='В работе'");
		Количество = ВРаботе.Количество();
	Иначе
		Состояние = Завершен[0];
		ПредставлениеСостояния = НСтр("ru='Завершен'");
		Количество = Завершен.Количество();
	КонецЕсли;
	
	Если КоличествоВсего > 1 Тогда
		Если Количество = КоличествоВсего Тогда
			ДополнениеПредставления = Строка(Количество);
		Иначе
			ДополнениеПредставления = СтрШаблон("%1/%2", Количество, КоличествоВсего);
		КонецЕсли;
		ПредставлениеСостояния = СтрШаблон("%1 (%2)", ПредставлениеСостояния, ДополнениеПредставления);
	КонецЕсли;
	
	Результат.Состояние = Состояние;
	Результат.ПредставлениеСостояния = ПредставлениеСостояния;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если состояние объекта учета установлено.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
// 
// Возвращаемое значение:
// 	Булево
//
Функция СостояниеОбъектаУчетаУстановлено(ОбъектУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияПоОбъектамУчетаЭДО.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияПоОбъектамУчетаЭДО
		|ГДЕ
		|	СостоянияПоОбъектамУчетаЭДО.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ОбъектУчета);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ОписаниеДанныхОбъектаУчета

// Возвращает новые параметры формирования данных объекта учета.
// 
// Возвращаемое значение:
//  Структура:
// * Формат - Строка
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * Отправитель - ОпределяемыйТип.Организация
// * Получатель - ОпределяемыйТип.УчастникЭДО
// * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// * ЗаполнениеКодаТовара - Строка
// * ВыгружатьДополнительныеСведения - Булево
// * ДанныеКаталога - Строка
Функция НовыеПараметрыФормированияДанныхОбъектаУчета() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Формат", "");
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("Отправитель");
	Параметры.Вставить("Получатель");
	Параметры.Вставить("Договор");
	Параметры.Вставить("ЗаполнениеКодаТовара", "");
	Параметры.Вставить("ВыгружатьДополнительныеСведения", Ложь);
	Параметры.Вставить("ДанныеКаталога", "");
	Возврат Параметры;
КонецФункции

// Возвращает описание данных объекта учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Параметры - см. НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДанныхОбъектаУчета
Функция ОписаниеДанныхОбъектаУчета(ОбъектУчета, Параметры) Экспорт
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	
	Формат = Параметры.Формат;
	ТипДокумента = Параметры.ТипДокумента;
	Если Не ЗначениеЗаполнено(Формат)
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		Результат.СвязующийОбъектУчета = ОбъектУчета;
		Результат.Основания.Добавить(ОбъектУчета);
		Возврат Результат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента) Тогда
			Результат.СвязующийОбъектУчета = ОбъектУчета;
			Результат.Основания.Добавить(ОбъектУчета);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Форматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	ТипыДокументов = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов();
	
	Если Формат = Форматы.CML208 Тогда
		
		Если ТипДокумента = ТипыДокументов.КаталогТоваров Тогда
			
			Результат = КаталогТоваров_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ПрайсЛист Тогда
			
			Результат = ПрайсЛист_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.СчетНаОплату Тогда
			
			Результат = СчетНаОплату_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ЗаказТовара Тогда
			
			Результат = ЗаказПоставщику_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ОтветНаЗаказ Тогда
			
			Результат = ЗаказПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Результат = ОтчетОПродажах_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Результат = ОтчетОСписании_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.РеквизитыОрганизации Тогда
			
			Результат = РеквизитыОрганизации_ДанныеУчета(ОбъектУчета, Параметры);
			
		Иначе
			
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формат ""%1"" с типом документа ""%2"" не поддерживается.'"), Формат, ТипДокумента);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
		
		КонецЕсли;
		
	ИначеЕсли Формат = Форматы.CML402 Тогда
		
		Если ТипДокумента = ТипыДокументов.ПередачаТоваровМеждуОрганизациями Тогда
			
			Результат = ПередачаТовараМеждуОрганизациями_ДанныеУчета(ОбъектУчета, Параметры);
			
		ИначеЕсли ТипДокумента = ТипыДокументов.ВозвратТоваровМеждуОрганизациями Тогда
			
			Результат = ВозвратТовараМеждуОрганизациями_ДанныеУчета(ОбъектУчета, Параметры);
			
		Иначе
			
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формат ""%1"" с типом документа ""%2"" не поддерживается.'"), Формат, ТипДокумента);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
			
		КонецЕсли;
		
	ИначеЕсли Формат = Форматы.ФНС.УПД.ИнформацияПродавца Тогда
		
		СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Формирование документа в формате ""%1"" не поддерживается.'"), Формат);
			
		ВызватьИсключение СтрокаСообщенияИсключения;
	
	ИначеЕсли Формат = Форматы.ФНС.УПД.ИнформацияПокупателя Тогда
		
		Результат = УПД_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
			
	ИначеЕсли Формат = Форматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		
		Результат = УПД2019_ИнформацияПродавца_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.УПД2019.ИнформацияПокупателя Тогда
		
		Результат = УПД2019_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
	
	ИначеЕсли Формат = Форматы.ФНС.УКД.ИнформацияПродавца Тогда
		
		Результат = УКД_ИнформацияПродавца_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.УКД.ИнформацияПокупателя Тогда
		
		Результат = УКД_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		Результат = УКД2020_ИнформацияПродавца_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.УКД2020.ИнформацияПокупателя Тогда
		
		Результат = УКД2020_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		
		Результат = ПередачаТоваров_ИнформацияПродавца_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.ПередачаТоваров.ИнформацияПокупателя Тогда
		
		Результат = ПередачаТоваров_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		
		Результат = ПередачаУслуг_ИнформацияПродавца_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.ПередачаРабот.ИнформацияПокупателя 
		Или Формат = Форматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя Тогда
		
		Результат = ПередачаУслуг_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		
		Результат = АктОРасхождениях_ИнформацияПокупателя_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.БизнесСеть.КоммерческиеПредложения Тогда
		
		Результат = КоммерческиеПредложения_ДанныеУчета(ОбъектУчета, Параметры);
		
	ИначеЕсли Формат = Форматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		
		Результат = АктСверкиВзаиморасчетов_ИнформацияОтправителя_ДанныеУчета(ОбъектУчета, Параметры);	
		
	ИначеЕсли Формат = Форматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияПолучателя Тогда
		
		Результат = АктСверкиВзаиморасчетов_ИнформацияПолучателя_ДанныеУчета(ОбъектУчета, Параметры);	
		
	ИначеЕсли Формат = Форматы.ФНС.СчетНаОплату101 Тогда
		
		Результат = СчетНаОплату101_ДанныеУчета(ОбъектУчета, Параметры);
	
	ИначеЕсли Формат = Форматы.ФНС.ДоговорнойДокумент101 Тогда
		
		Результат = Обработки.ФорматДоговорнойДокумент101.ОписаниеДанныхОбъектаУчета(ОбъектУчета, Параметры);
	
	Иначе
		Обработка = ФорматыЭДО.ОбработкаФормата(Формат);
		Если ТипЗнч(Обработка) = Тип("Неопределено") Тогда
			Шаблон = НСтр("ru = 'Формат ""%1"" не поддерживается.'");
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат);
			ВызватьИсключение СтрокаСообщенияИсключения;
		Иначе
			Результат = Обработка.ОписаниеДанныхОбъектаУчета(ОбъектУчета, Параметры);
		КонецЕсли;
	КонецЕсли;
	
	// Нормализуем данные, которые приходят из переопределяемой части.
	Результат.Основания = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат.Основания);
	
	Если Не ЗначениеЗаполнено(Результат.СвязующийОбъектУчета) Тогда
		Результат.СвязующийОбъектУчета = ОбъектУчета;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Пустой результат формирования данных по объекту учета.
// 
// Возвращаемое значение:
// 	Структура:
// * СвязующийОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * СвязанныеОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Связанные объекты учета.
// * Основания - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Объекты учета источники данных.
// * Данные - ОбработкаОбъектИмяОбработки - для новых форматов
//          - См. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
// * ОшибкаФормированияВПрикладнойЧасти - Булево
//
Функция НовыйРезультатФормированияДанныхОбъектаУчета() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СвязующийОбъектУчета", Неопределено);
	Результат.Вставить("СвязанныеОбъектыУчета", Новый Массив);
	Результат.Вставить("Основания", Новый Массив);
	Результат.Вставить("Данные", Новый ДеревоЗначений);
	Результат.Вставить("ОшибкаФормированияВПрикладнойЧасти", Ложь);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДанныеОбъектовУчета

// Возвращает значения реквизитов объекта с учетом изменения общепринятых названий.
// Для получения данных по реквизиту, он должен существовать у объекта или быть указано переименование в методе
// ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов.
// В противном случае значение будет Неопределено.
//
// Параметры:
//  ОбъектУчета - см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//
Функция ЗначенияРеквизитовОбъектаУчета(Знач ОбъектУчета, Знач Реквизиты) Экспорт
	
	МетаданныеОбъектУчета = ОбъектУчета.Метаданные();
	ИмяОбъектУчета = МетаданныеОбъектУчета.Имя;
	
	ПрикладныеРеквизиты = Новый Структура;
	
	НаборРеквизитов = СтрРазделить(Реквизиты, ",");
	Для каждого Реквизит Из НаборРеквизитов Цикл
		
		РеквизитОбъектаУчета = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			ИмяОбъектУчета + "." + Реквизит);
		
		Если ЗначениеЗаполнено(РеквизитОбъектаУчета) Тогда
			
			ПрикладныеРеквизиты.Вставить(Реквизит, РеквизитОбъектаУчета);
			
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта(Реквизит, МетаданныеОбъектУчета)
			ИЛИ ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъектУчета.СтандартныеРеквизиты, Реквизит) Тогда
			
			ПрикладныеРеквизиты.Вставить(Реквизит);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, ПрикладныеРеквизиты);
	
	Результат = Новый Структура(Реквизиты);
	ЗаполнитьЗначенияСвойств(Результат, Значения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбъектыУчетаЭлектронныхДокументов

// Возвращает таблицу объектов учета электронных документов.
// 
// Параметры:
// ЭлектронныеДокументы - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные соответствия.
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный ЭлектронныйДокумент.
//   * Актуальный - Булево - признак актуальности электронного документа.
//	 * СпособОбработки - Строка - способ обработки.
//
Функция ОбъектыУчетаЭлектронныхДокументов(Знач ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос.Параметры.Вставить("ЭлектронныйДокумент", ЭлектронныеДокументы);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст запроса для получения объектов учета, прикрепленных к электронным документам.
//
// Возвращаемое значение:
//  Строка - текст запроса с отбором по электронному документу.
//           Отбор выполняется по условию "В (&ЭлектронныйДокумент)".
//           Выбираемые поля: ЭлектронныйДокумент, ОбъектУчета, Актуальный, СпособОбработки.
//
Функция ТекстЗапросаОбъектовУчетаЭлектронныхДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.СпособОбработки,
	|	ОбъектыУчетаДокументовЭДО.Актуальный
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент В (&ЭлектронныйДокумент)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу электронных документов по объектам учета.
// 
// Параметры:
//  ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные соответствия.
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета.
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - актуальный ЭлектронныйДокумент.
//   * Актуальный - Булево - признак актуальности электронного документа.
//
Функция ЭлектронныеДокументыОбъектовУчета(Знач ОбъектыУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЭлектронныхДокументовОбъектовУчета();
	Запрос.Параметры.Вставить("ОбъектУчета", ОбъектыУчета);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ОбъектыУчетаНаКонтролеПроведения(Знач ЭлектронныеДокументы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрольПроведения.УчетныйДокумент
		|ИЗ
		|	РегистрСведений.КонтрольПроведенияУчетныхДокументовЭДО КАК КонтрольПроведения
		|ГДЕ
		|	КонтрольПроведения.ЭлектронныйДокумент В (&НаборЭлектронныхДокументов)";
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", ЭлектронныеДокументы);

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетныйДокумент");
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;

КонецФункции

// Выполняется перед отражением в учете электронного документа,
// содержащего данные для сопоставления номенклатуры.
// Проверяет возможность отражения в учете документа с не сопоставленной номенклатурой,
// а также добавляет информацию о имеющемся сопоставлении.
// 
// Параметры:
//  ПараметрыОтражения - Структура - данные для подготовки к отражению в учете:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - отражаемый в учете электронный документ.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//   * СпособОбработки - Строка - выбранный способ отражения в учете.
//   * ДеревоДокумента - ДеревоЗначений - дерево документа, по данным которого будет выполняться отражение в учете (изменяемый параметр).
//  Отказ - Булево - признак наличия ошибок при подготовке к отражению в учете (выходной параметр).
//  ОписаниеОшибки - Строка - описание ошибки, возникшей при подготовке к отражению в учете (выходной параметр).
//
Процедура ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(ПараметрыОтражения, Отказ = Ложь, ОписаниеОшибки = "") Экспорт
	
	Документ = Новый Структура("СпособОбработки", ПараметрыОтражения.СпособОбработки);
	Настройки = Новый Структура("ОтражатьТолькоСопоставленные", Истина);
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(Документ, Настройки);
	Если Настройки.ОтражатьТолькоСопоставленные И ПараметрыОтражения.ЭлектронныйДокумент <> Неопределено Тогда
		ОтборПоДокументу = ОтборНоменклатурыКонтрагентовНаКонтроле(ПараметрыОтражения.ЭлектронныйДокумент);
		НаКонтроле = НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
		Если ЗначениеЗаполнено(НаКонтроле) Тогда
			Отказ = Истина;
			ОписаниеОшибки = НСтр("ru = 'Для отражения в учете необходимо сопоставить номенклатуру.'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНоменклатуруИБВДеревеДокумента(ПараметрыОтражения.Контрагент, ПараметрыОтражения.ДеревоДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруИБВДеревеДокумента(Контрагент, ДеревоДокумента) Экспорт
	
	ЭтоОбработкаФормата = ФорматыЭДО.ЭтоОбработкаФормата(ДеревоДокумента.ЗначениеРеквизита);
	Если ЭтоОбработкаФормата Тогда
		Попытка
			СтрокиТребующиеСопоставления = ДеревоДокумента.ЗначениеРеквизита.СтрокиТребующиеСопоставления();
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Менеджер %1, не удалось заполнить номенклатуру в дереве документа, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(ДеревоДокумента.ЗначениеРеквизита), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	Иначе
		СтрокиТребующиеСопоставления = ДеревоЭлектронногоДокументаБЭД.СтрокиТребующиеСопоставления(ДеревоДокумента);
	КонецЕсли;
	
	Владелец = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(Контрагент);
	
	НаСопоставление = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтрокиТребующиеСопоставления Цикл
		Сопоставление = КлючИЗначение.Значение;
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = Владелец;
		НаСопоставление.Добавить(НоменклатураКонтрагента);
	КонецЦикла;
	
	Отбор = Новый Структура("НоменклатураКонтрагента", НаСопоставление);
	СоответствиеНоменклатуры = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор, Истина);
	
	Если ЭтоОбработкаФормата Тогда
		Попытка
			ДеревоДокумента.ЗначениеРеквизита.ЗаполнитьДанныеСопоставления(СоответствиеНоменклатуры);
		Исключение
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Менеджер %1, не удалось заполнить номенклатуру в дереве документа, по причине:
				|%2'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипЗнч(ДеревоДокумента.ЗначениеРеквизита), ОписаниеОшибки());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	Иначе
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			СтрокиТребующиеСопоставления, СоответствиеНоменклатуры);
	КонецЕсли;

КонецПроцедуры

Функция НовыйОтборАктуальныхЭлектронныхДокументов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектыУчета", "");
	
	Возврат Отбор;
	
КонецФункции

Функция ЗапросАктуальныхЭлектронныхДокументов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборАктуальныхЭлектронныхДокументов();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидДокумента
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	ПоляУсловия.Добавить("ОбъектыУчетаДокументовЭДО.Актуальный");
	Если ЗначениеЗаполнено(Отбор.ОбъектыУчета) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ОбъектыУчетаДокументовЭДО.ОбъектУчета В (%1)", Отбор.ОбъектыУчета));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", ПоляУсловия);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция НовыйОтборОбъектовУчетаЭлектронныхДокументов() Экспорт
	
	Отбор = Новый Структура;	
	Отбор.Вставить("ЭлектронныеДокументы", "");
	
	Возврат Отбор;
	
КонецФункции

Функция ЗапросОбъектовУчетаЭлектронныхДокументов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборОбъектовУчетаЭлектронныхДокументов();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПРЕДСТАВЛЕНИЕ(ОбъектыУчетаДокументовЭДО.ОбъектУчета) КАК ПредставлениеОбъектаУчета
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.ЭлектронныеДокументы) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент В (%1)", Отбор.ЭлектронныеДокументы));
	КонецЕсли;
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы,
		"", ПоляУсловия);
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

Процедура ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий) Экспорт

	НачатьТранзакцию();
		Попытка
			Для Каждого СсылкаНаОбъект Из ОбъектыУчета Цикл
				ОтборПоСсылкеНаОбъект = Новый Структура("СсылкаНаОбъект", СсылкаНаОбъект);
				ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку("РегистрСведений.СостоянияПоОбъектамУчетаЭДО", ОтборПоСсылкеНаОбъект);
			КонецЦикла;
						
			Для Каждого СсылкаНаОбъект Из ОбъектыУчета Цикл
				ЗаписьРегистра = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.СсылкаНаОбъект = СсылкаНаОбъект;
				ЗаписьРегистра.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
				ЗаписьРегистра.Комментарий = Комментарий;
				ЗаписьРегистра.Записать();
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьНомерДатаДоговораДокументов().
Функция ПолучитьНомерДатаДоговораДокументов(МассивСсылок) Экспорт
	
	ДанныеДокументовОснований = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ДанныеДокументовОснований);
	
	Возврат ДанныеДокументовОснований;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтрагентами

Функция КонтрагентПодключенКСервису1СЭДО(Контрагент) Экспорт
	
	Подключен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НеПодключен)";

	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	УстановитьПривилегированныйРежим(Истина);
	Подключен = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Подключен;
	
КонецФункции

// Возвращает пустую структуру отбора для передачи в ИнтеграцияЭДО.ЗапросКонтрагентов
//
// Возвращаемое значение:
// 	Структура:
//	 ИНН - Строка - имя параметра ИНН контрагента.
//	 БезПустыхИНН - Булево - признак исключения контрагентов с пустым ИНН.
//
Функция НовыйОтборКонтрагентов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИНН", "");
	Отбор.Вставить("БезПустыхИНН", Ложь);
	
	Возврат Отбор;
	
КонецФункции

// Возвращает значения реквизитов контрагентов.
// Содержит следующие поля:
// * Ссылка - ОпределяемыйТип.КонтрагентыБЭД - ссылка на контрагента.
// * ИНН - Строка - ИНН контрагента.
// * КПП - Строка - КПП контрагента.
// * Наименование - Строка - наименование контрагента а прикладном решении.
// * ВнешнийКод - Строка - внешний код контрагента в прикладном решении. 
// * НаименованиеДляСообщенияПользователю - Строка - наименование контрагента а прикладном решении используемое
// 	 для вывода сообщений пользователю. 
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - имя временной таблицы, в которую помешается результат запроса.
// 	ИмяПараметраСсылка - Строка - имя параметра в который в дальнейшем передается массив ссылок на контрагентов
// 	Отбор - Структура - См. НовыйОтборКонтрагентов.
// 	
// Возвращаемое значение:
// 	См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//
Функция ЗапросКонтрагентов(ИмяВременнойТаблицы, ИмяПараметраСсылка, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборКонтрагентов();
	КонецЕсли;
		
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	ИмяРеквизитаВнешнийКодКонтрагента = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ВнешнийКодКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");
	
	ПолеИНН = ИмяРеквизитаИННКонтрагента + " КАК ИНН";
	ПолеКПП = ИмяРеквизитаКППКонтрагента + " КАК КПП";
	ПолеНаименование = ИмяРеквизитаНаименованиеКонтрагента + " КАК Наименование";
	ПолеВнешнийКод = ИмяРеквизитаВнешнийКодКонтрагента + " КАК ВнешнийКод";
	ПолеНаименованиеДляСообщенияПользователю = ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю
		+ " КАК НаименованиеДляСообщенияПользователю";
	
	ВыбираемыеПоля = СтрШаблон("%1,%2,%3,%4,%5",
		ПолеИНН,
		ПолеКПП,
		ПолеНаименование,
		ПолеВнешнийКод,
		ПолеНаименованиеДляСообщенияПользователю);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ТекстЗапросаКонтрагентов = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка КАК Ссылка,
		|	&ВыбираемыеПоля
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	&ИмяСправочникаКонтрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В (&МассивКонтрагентов)
		| И &ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	
	Если ЗначениеЗаполнено(Отбор.ИНН) Тогда
		ПоляУсловия.Добавить(СтрШаблон("Контрагенты." + ИмяРеквизитаИННКонтрагента + " В (%1)", Отбор.ИНН));
	КонецЕсли;
	
	Если Отбор.БезПустыхИНН Тогда
		ПоляУсловия.Добавить("Контрагенты.ИНН <> """"");
	КонецЕсли;
	
	ИмяСправочника = ИмяПрикладногоСправочника("Контрагенты");	
	ИмяТаблицы = "Справочник." + ИмяСправочника;
	ТекстЗапросаКонтрагентов = СтрЗаменить(ТекстЗапросаКонтрагентов, "&ИмяСправочникаКонтрагенты", ИмяТаблицы);
	ТекстЗапросаКонтрагентов = СтрЗаменить(ТекстЗапросаКонтрагентов, "&МассивКонтрагентов", "&" + ИмяПараметраСсылка);
	
	ОписаниеЗапроса.Текст = 
		ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапросаКонтрагентов, 
		ИмяВременнойТаблицы, ВыбираемыеПоля, ПоляУсловия, "Контрагенты");
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на элемент справочника контрагенты, адрес которого надо получить.
//  АдресЭлектроннойПочты - Строка - адрес электронной почты.
//
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭлектроннойПочты) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭлектроннойПочты);
		
КонецПроцедуры

Функция ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Экспорт
	
	Возврат ИнтеграцияЭДОПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры();
	
КонецФункции

// Создает нового контрагента по переданным реквизитам
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты контрагента для создания
//     * ИНН          - Строка - ИНН контрагента
//     * КПП          - Строка - КПП контрагента
//     * Наименование - Строка - Наименование контрагента
//
//  Возвращаемое значение:
//     СправочникСсылка.Контрагенты, Неопределено - Созданный контрагент, неопределено в случае возникновения ошибки
//
Функция СоздатьКонтрагента(РеквизитыКонтрагента) Экспорт
	
	Отказ = Ложь;
	Контрагент = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ);
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось создать контрагента'"));
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

#КонецОбласти

#Область РаботаСТипамиДокументов

Процедура ДобавитьАктуальныйТипДокумента(АктуальныеТипыДокументов, ТипДокумента, ИспользоватьДляВходящих = Истина, ИспользоватьДляИсходящих = Истина) Экспорт
	
	Если Не ИспользоватьДляВходящих И Не ИспользоватьДляИсходящих Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТипаДокумента = НовыеСвойстваАктуальногоТипаДокумента();
	СвойстваТипаДокумента.ИспользоватьДляВходящих = ИспользоватьДляВходящих;
	СвойстваТипаДокумента.ИспользоватьДляИсходящих = ИспользоватьДляИсходящих;
	
	АктуальныеТипыДокументов.Вставить(ТипДокумента, СвойстваТипаДокумента);
	
КонецПроцедуры

// Возвращает представление документа ИБ для вида электронного документа.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//
// Возвращаемое значение:
//  ПредставлениеОснования - строковое имя документа информационной базы, на основании которого формируется исходящий ЭД.
//
Функция ПредставленияОснованийПоТипамДокументов() Экспорт
	
	ПредставленияОснованийПоТипам = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихТиповЭлектронныхДокументовДокументамИБ(
		ПредставленияОснованийПоТипам);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		ПредставленияОснованийКоммерческихПредложений = Новый Соответствие;
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ПредставлениеИсходящихВидовЭлектронныхДокументов(ПредставленияОснованийКоммерческихПредложений);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПредставленияОснованийПоТипам,
			ПредставленияОснованийКоммерческихПредложений, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		ПредставленияЭПД = Новый Соответствие;
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПредставлениеИсходящихВидовЭлектронныхДокументов(ПредставленияЭПД);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПредставленияОснованийПоТипам,
			ПредставленияЭПД, Ложь);
	КонецЕсли;
	
	ПредставленияОснованийПрикладныхТипов = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСоответствияИсходящихПрикладныхТиповДокументамУчета(
		ПредставленияОснованийПрикладныхТипов);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПредставленияОснованийПоТипам,
		ПредставленияОснованийПрикладныхТипов, Ложь);
	
	ПредставленияОснованийТиповПроизвольныхФорматов = Новый Соответствие;
	Для Каждого ТипДокумента Из ЭлектронныеДокументыЭДО.ТипыДокументовПроизвольногоФормата() Цикл
		ПредставленияОснованийТиповПроизвольныхФорматов.Вставить(ТипДокумента,
			ПредставлениеОснованияБезОбъектаУчета(ТипДокумента));
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПредставленияОснованийПоТипам,
		ПредставленияОснованийТиповПроизвольныхФорматов, Ложь);
	
	Возврат ПредставленияОснованийПоТипам;
	
КонецФункции

Функция ИспользуемыеТипыДокументов() Экспорт
	
	АктуальныеТипыДокументов = Новый Соответствие; 
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипыДокументов);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ИспользуемыеВидыЭлектронныхДокументов(АктуальныеТипыДокументов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		МодульПодсистемы.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипыДокументов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипыДокументов);
	КонецЕсли;
	
	МашиночитаемыеДоверенности.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(АктуальныеТипыДокументов);
	
	Возврат АктуальныеТипыДокументов;
	
КонецФункции

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа
//               - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа
//  ДобавлятьПредопределенныеСпособы - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс	 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийТипаДокумента(ТипДокумента, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	СписокОпераций = Новый СписокЗначений;
	
	Если ТипЗнч(ТипДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
			МодульПодсистемы.ОпределитьСписокОперацийВходящихЭлектронныхДокументов(ТипДокумента, СписокОпераций);
		КонецЕсли;
		
		Если (ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД)
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
			МодульПодсистемы.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
			Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента) Тогда
				МодульОбменСГИСЭПД.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);
			КонецЕсли;
		КонецЕсли;

		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
			МашиночитаемыеДоверенности.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);			
		
	Иначе // передан прикладной тип документа
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента(
				ТипДокумента, СписокОпераций);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ЭлементСписка.Представление = Префикс + " " + ЭлементСписка.Представление;
	КонецЦикла;
	
	Если ДобавлятьПредопределенныеСпособы Тогда
		Если СписокОпераций.Количество() = 0 Тогда
			СписокОпераций.Добавить("Автоматически", НСтр("ru = 'Автоматически'"),Истина);
		КонецЕсли;
		
		СписокОпераций.Добавить(СпособОбработки_Вручную(), НСтр("ru = 'Вручную в форме электронного документа'"));
		СписокОпераций.Добавить(СпособОбработки_НеОтражать(), НСтр("ru = 'Не отражать'"));
	
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

Функция СписокОперацийВсехТиповДокумента() Экспорт 
	
	СписокОпераций = Новый СписокЗначений;
	
	Основания = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.Типы();
	Для Каждого ТекущееОснование Из Основания Цикл
			
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТекущееОснование);
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
			
		СписокОпераций.Добавить(МетаданныеОснования.Имя, МетаданныеОснования.Синоним);
	КонецЦикла;
	
	Возврат СписокОпераций;
	
КонецФункции

Функция ТипДокументаИспользуетсяПоНаправлению(Тип, Направление) Экспорт
	
	ИмяСвойства = ?(Направление = Перечисления.НаправленияЭДО.Входящий, "ИспользоватьДляВходящих",
		"ИспользоватьДляИсходящих");
	
	АктуальныеВиды = ИспользуемыеТипыДокументов();
	
	СвойстваВида = АктуальныеВиды.Получить(Тип);
	Возврат СвойстваВида <> Неопределено И СвойстваВида[ИмяСвойства];
	
КонецФункции

// Получает данные об учетных документах, соответствующих переданному типу электронного документа.
// 
// Параметры:
// 	ТипЭлектронногоДокумента - Перечисления.ТипыДокументовЭДО - тип электронного документа
// 	                         - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа.
// Возвращаемое значение:
// 	СписокЗначений - список, в котором ключ - пустая ссылка на учетный документ, а представление - его представление.
Функция ТипыОбъектовУчетаПоТипуЭлектронногоДокумента(ТипЭлектронногоДокумента) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТипЗнч(ТипЭлектронногоДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		СписокТипов = Новый СписокЗначений;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
			СписокТипов = МодульПодсистемы.СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипЭлектронногоДокумента);
		КонецЕсли;	
		ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(Результат, СписокТипов);
		
		СписокТипов = Новый СписокЗначений;
		ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипЭлектронногоДокумента, СписокТипов);
		ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(Результат, СписокТипов);
	Иначе // передан прикладной тип электронного документа
		СписокТипов = Новый СписокЗначений;
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииТиповУчетныхДокументовПоПрикладномуТипуЭлектронногоДокумента(
			ТипЭлектронногоДокумента, СписокТипов);
		ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(Результат, СписокТипов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрикладныеТипыЭлектронныхДокументов() Экспорт
	
	ТипыЭлектронныхДокументов = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПрикладныхТиповЭлектронныхДокументов(ТипыЭлектронныхДокументов);
	
	Возврат ТипыЭлектронныхДокументов;
	
КонецФункции

#КонецОбласти

#Область РаботаСОрганизациями

// Возвращает признак использования нескольких организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если используется несколько организаций, иначе Ложь.
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБЭД");
	
КонецФункции

// Возвращает организацию по умолчанию.
// 
// Возвращаемое значение:
//  Неопределено - не удалось определить организацию.
//  ОпределяемыеТипы.Организация - организация для автоматической подстановки.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Возврат ОбщегоНазначенияБЭД.ОрганизацияПоУмолчанию();
	
КонецФункции

Функция НовыйОтборОрганизаций() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИНН", "");
	Отбор.Вставить("КПП", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает доступные для пользователя организации.
// Содержит следующие поля:
// * Ссылка - ОпределяемыйТип.Организация - ссылка на организацию.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - имя временной таблицы.
// 	Отбор - См. НовыйОтборОрганизаций - параметры отбора.
// 	
// Возвращаемое значение:
// 	См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//
Функция ЗапросДоступныхОрганизаций(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборОрганизаций();
	КонецЕсли;
		
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	&СправочникОрганизации КАК Организации
	|ГДЕ
	|&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.ИНН) Тогда
		ПоляУсловия.Добавить(СтрШаблон("Организации.ИНН = %1", Отбор.ИНН));
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор.КПП) Тогда
		ПоляУсловия.Добавить(СтрШаблон("Организации.КПП = %1", Отбор.КПП));
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СправочникОрганизации",
		"Справочник." + ИмяПрикладногоСправочника("Организации"));
	
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", ПоляУсловия,
		"Организации");
		
	Возврат ОписаниеЗапроса;
	
КонецФункции
		
// Возвращает значения реквизитов организаций получателей, при обмене между организациями.
// Содержит следующие поля:
// * Ссылка - ОпределяемыйТип.Организация - ссылка на организацию.
// * ИНН - Строка - ИНН организации.
// * КПП - Строка - КПП организации.
// * Наименование - Строка - наименование контрагента а прикладном решении.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - имя временной таблицы, в которую помещается результат запроса.
// 	ИмяПараметраСсылка - Строка - имя параметра в который в дальнейшем передается массив ссылок на контрагентов
// 	Отбор - Структура - См. НовыйОтборКонтрагентов.
// 	
// Возвращаемое значение:
// 	См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//
Функция ЗапросОрганизацийПолучателей(ИмяВременнойТаблицы, ИмяПараметраСсылка, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборКонтрагентов();
	КонецЕсли;
		
	ИмяРеквизитаИННОрганизации =
		ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации =
		ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаНаименованиеОрганизации =
		ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПолеИНН = ИмяРеквизитаИННОрганизации + " КАК ИНН";
	ПолеКПП = ИмяРеквизитаКППОрганизации + " КАК КПП";
	ПолеНаименование = ИмяРеквизитаНаименованиеОрганизации + " КАК Наименование";
	
	ВыбираемыеПоля = СтрШаблон("%1,%2,%3",
		ПолеИНН,
		ПолеКПП,
		ПолеНаименование);
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ТекстЗапросаОрганизации = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка КАК Ссылка,
		|	&ВыбираемыеПоля
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	&ИмяСправочникаОрганизации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&МассивОрганизаций)
		| И &ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	
	Если ЗначениеЗаполнено(Отбор.ИНН) Тогда
		ПоляУсловия.Добавить(СтрШаблон("Организации." + ИмяРеквизитаИННОрганизации + " В (%1)", Отбор.ИНН));
	КонецЕсли;
	
	Если Отбор.БезПустыхИНН Тогда
		ПоляУсловия.Добавить("Организации." + ИмяРеквизитаИННОрганизации + " <> """"");
	КонецЕсли;
	
	ИмяСправочника = ИмяПрикладногоСправочника("Организации");
	ИмяТаблицы = "Справочник." + ИмяСправочника; 
	ТекстЗапросаОрганизации = СтрЗаменить(ТекстЗапросаОрганизации, "&ИмяСправочникаОрганизации", ИмяТаблицы);
	ТекстЗапросаОрганизации = СтрЗаменить(ТекстЗапросаОрганизации, "&МассивОрганизаций", "&" + ИмяПараметраСсылка);
		
	ОписаниеЗапроса.Текст = 
		ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапросаОрганизации, 
		ИмяВременнойТаблицы, ВыбираемыеПоля, ПоляУсловия, ИмяСправочника);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает пустую структуру данных организации.
// 
// Возвращаемое значение:
//  Структура:
// * Индекс - Строка
// * КодРегиона - Строка
// * Регион - Строка
// * Район - Строка
// * Город - Строка
// * НаселенныйПункт - Строка
// * Улица - Строка
// * Дом - Строка
// * Корпус - Строка
// * Квартира - Строка
// * Телефон - Строка
// * Наименование - Строка
// * ИНН - Строка
// * КПП - Строка
// * ОГРН - Строка
// * КодИМНС - Строка
// * ЮрФизЛицо - Строка
// * Фамилия - Строка - Фамилия руководителя или индивидуального предпринимателя
// * Имя - Строка - Имя руководителя или индивидуального предпринимателя
// * Отчество - Строка - Отчество руководителя или индивидуального предпринимателя
// * Должность - Строка - Должность руководителя
// * РуководительФизЛицо - ОпределяемыйТип.ФизическоеЛицо
// 						 - Неопределено - в случае если нет ссылки на физлицо руководителя
// * РуководительИНН - Строка - ИНН руководителя
// * СНИЛС - Строка - СНИЛС руководителя или индивидуального предпринимателя
// * РуководительОснованиеПолномочий - Строка - Основание полномочий руководителя
// * РуководительИНН - Строка - ИНН руководителя
// * ДатаРождения - Дата - Дата рождения руководителя или индивидуального предпринимателя
// * Гражданство - СправочникСсылка.СтраныМира - Гражданство руководителя или индивидуального предпринимателя
// 
Функция НоваяСтруктураДанныхОрганизации() Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Индекс", "");
	ДанныеОрганизации.Вставить("КодРегиона", "");
	ДанныеОрганизации.Вставить("Регион", "");
	ДанныеОрганизации.Вставить("Район", "");
	ДанныеОрганизации.Вставить("Город", "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица", "");
	ДанныеОрганизации.Вставить("Дом", "");
	ДанныеОрганизации.Вставить("Корпус", "");
	ДанныеОрганизации.Вставить("Квартира", "");
	ДанныеОрганизации.Вставить("Телефон", "");
	ДанныеОрганизации.Вставить("Наименование", "");
	ДанныеОрганизации.Вставить("ИНН", "");
	ДанныеОрганизации.Вставить("КПП", "");
	ДанныеОрганизации.Вставить("ОГРН", "");
	ДанныеОрганизации.Вставить("КодИМНС", "");
	ДанныеОрганизации.Вставить("ЮрФизЛицо", "");
	ДанныеОрганизации.Вставить("Фамилия", "");
	ДанныеОрганизации.Вставить("Имя", "");
	ДанныеОрганизации.Вставить("Отчество", "");
	ДанныеОрганизации.Вставить("Должность", "");	
	ДанныеОрганизации.Вставить("РуководительФизЛицо", Неопределено);	
	ДанныеОрганизации.Вставить("РуководительОснованиеПолномочий", "");	
	ДанныеОрганизации.Вставить("РуководительИНН", "");	
	ДанныеОрганизации.Вставить("СНИЛС", "");	
	ДанныеОрганизации.Вставить("ДатаРождения", '00010101');	
	ДанныеОрганизации.Вставить("Гражданство", Справочники.СтраныМира.ПустаяСсылка());	

	Возврат ДанныеОрганизации;

КонецФункции

// Возвращает регистрационные данные организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  см. НоваяСтруктураДанныхОрганизации
//  
Функция РегистрационныеДанныеОрганизации(Организация) Экспорт
	
	ДанныеОрганизации = НоваяСтруктураДанныхОрганизации();
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации);
	Результат = НоваяСтруктураДанныхОрганизации();
	ЗаполнитьЗначенияСвойств(Результат, ДанныеОрганизации);
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураДанных) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураДанных);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета
//
Процедура ПолучитьБанковскиеСчета(Организация, Таблица) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеСчета(Организация, Таблица);
	
КонецПроцедуры

// Возвращает признак, что ссылка является организацией.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоОрганизация(Ссылка) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипЗнч(Ссылка));
	
КонецФункции

#КонецОбласти

#Область РаботаСБанковскойИнформацией

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеРеквизиты
//
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФизЛицами

Функция СведенияФизЛицаПользователя(Пользователь, Организация) Экспорт
	
	СведенияФизЛица = НовыеСведенияФизЛицаПользователя();
	ОбменСКонтрагентамиПереопределяемый.СведенияФизЛицаПользователя(Пользователь, Организация, СведенияФизЛица);
	Возврат СведенияФизЛица;

КонецФункции

Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента, ЭтоФизЛицо);
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

Функция ПредставлениеЮрФизЛица(ЮрФизЛицо) Экспорт
	
	ДанныеЮрФизЛицо = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ЮрФизЛицо); 
	ПредставлениеЮрФизЛицо = ""; 
	
	ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеЮрФизЛицо,
		ПредставлениеЮрФизЛицо,
		"ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

// Возвращает сведения об участниках ЭДО.
// 
// Параметры:
//  ЮрФизЛицо - ОпределяемыйТип.УчастникЭДО
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.ДанныеЮрФизЛица
Функция ДанныеЮрФизЛица(ЮрФизЛицо) Экспорт
	
	Возврат  ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ЮрФизЛицо);
		
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатурой

// Функция-конструктор параметров отбора номенклатуры на контроле. 
// Отбор возможен по измерениям регистра сведений КонтрольСопоставленияНоменклатурыЭДО.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//                      - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД
//           - Массив из ОпределяемыйТип.ВладелецНоменклатурыБЭД
//  Идентификатор - Строка
//                - Массив из строка
//                  
// Возвращаемое значение:
//  Структура:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//                         - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   * Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД
//              - Массив из ОпределяемыйТип.ВладелецНоменклатурыБЭД
//   * Идентификатор - Строка
//                   - Массив из строка
//
Функция ОтборНоменклатурыКонтрагентовНаКонтроле(Знач ЭлектронныйДокумент = Неопределено, Знач Владелец = Неопределено,
	Идентификатор = Неопределено) Экспорт
	
	Результат = Новый Структура; 
	
	Если ЭлектронныйДокумент <> Неопределено Тогда
		Результат.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	КонецЕсли;
	
	Если Владелец <> Неопределено Тогда
		Результат.Вставить("Владелец", Владелец);
	КонецЕсли;
	
	Если Идентификатор <> Неопределено Тогда
		Результат.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает номенклатуру контрагентов, которая числится на контроле сопоставления электронных документов.
//
// Параметры:
//  Отбор - см. ОтборНоменклатурыКонтрагентовНаКонтроле
//
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента - номенклатура 
//                                                                                контрагента, находящаяся на контроле.
//
Функция НоменклатураКонтрагентовНаКонтроле(Знач Отбор = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контроль.Владелец КАК Владелец,
	|	Контроль.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втОтбор
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = ЗапросНоменклатураКонтрагентовНаКонтроле(ТекстЗапроса, Отбор);
	
	Возврат СопоставлениеНоменклатурыКонтрагентов.ДанныеНоменклатурыКонтрагентаПоЗапросу(Запрос);
	
КонецФункции

// Проверяет наличие номенклатуры контрагентов, которая числится на контроле сопоставления электронных документов.
//
// Параметры:
//  Отбор - см. ОтборНоменклатурыКонтрагентовНаКонтроле
//
// Возвращаемое значение:
//  Булево - Истина, если есть номенклатура на контроле
//
Функция ЕстьНоменклатураКонтрагентовНаКонтроле(Знач Отбор) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1 
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = ЗапросНоменклатураКонтрагентовНаКонтроле(ТекстЗапроса, Отбор);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Выполняет проверку электронного документа на наличие не сопоставленной номенклатуры.
// Не сопоставленная номенклатура ставится на контроль.
//
// Параметры:
//  ДанныеЭлектронногоДокумента - См. _ЭлектронныеДокументыЭДО.НовыеДанныеДокументооборота() - электронный документ на проверку.
//                                                                     Обязателен, если не задан параметр НаборНоменклатурыКонтрагентов.
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов для контроля.
//                                           Если задан, то номенклатура из электронного документа не извлекается.
//  Сохранить - Булево - признак сохранения номенклатуры контрагента в информационной базе.
//                       Если задан параметр ЭлектронныйДокумент, то сохранение будет выполнено в любом случае, т.к. необходимо для работы механизма контроля.
//
Функция ВыполнитьКонтрольСопоставленияНоменклатуры(Знач ДанныеЭлектронногоДокумента = Неопределено,
		Знач НаборНоменклатурыКонтрагентов = Неопределено, Знач Сохранить = Истина) Экспорт
	
	ЭлектронныйДокумент = Неопределено;
	Если ДанныеЭлектронногоДокумента <> Неопределено Тогда
		ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.ЭлектронныйДокумент;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) И Не ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеЭлектронногоДокумента) Тогда
		Сохранить = Истина;
	КонецЕсли;

	// Извлекаем данные о номенклатуре контрагента из электронного документа.
	Если Не ЗначениеЗаполнено(НаборНоменклатурыКонтрагентов) И ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				
		ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
		ПараметрыПолучения.ОсновнойФайл = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
		ПараметрыПолучения.ДополнительныйФайл = ДанныеЭлектронногоДокумента.ДанныеДополнительногоФайла;
	
		ИнформацияОТоваре = ЭлектронныеДокументыЭДО.ДанныеНоменклатурыДокумента(ПараметрыПолучения);
		
		Контрагент = ДанныеЭлектронногоДокумента.Отправитель;
		Владелец = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(Контрагент);		
		НаборНоменклатурыКонтрагентов = ЗаполнитьНаборНоменклатурыКонтрагентовПоТаблицеТоваров(ИнформацияОТоваре, Владелец);
	КонецЕсли;
	// Найдем номенклатуру, которую не нужно сопоставлять с номенклатурой контрагентов.
	КОбработке = Новый Массив;
	НаборИдентификаторовСервиса = Новый Массив;
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		// Найдем номенклатуру, которая задана в наших идентификаторах.
		НоменклатураИБ = НайтиНоменклатуруИБПоИдентификатору(НоменклатураКонтрагента.Идентификатор);
		Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		КОбработке.Добавить(НоменклатураКонтрагента);
		// Заполним набор идентификаторов сервиса.
		Если ЗначениеЗаполнено(НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			ИдентификаторСервиса = Новый Структура("ИдентификаторНоменклатуры,ИдентификаторХарактеристики",
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса, НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса);
			НаборИдентификаторовСервиса.Добавить(ИдентификаторСервиса);
		КонецЕсли;
	КонецЦикла;
	// Найдем номенклатуру, связанную с сервисом 1С:Номенклатура.
	ЕстьРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если ЕстьРаботаСНоменклатурой И ЗначениеЗаполнено(НаборИдентификаторовСервиса) Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ДанныеСервиса = МодульРаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторам(НаборИдентификаторовСервиса);
		Если ЗначениеЗаполнено(ДанныеСервиса) Тогда
			ДанныеСервиса.Индексы.Добавить("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
			СоответствиеСвойствНоменклатурыИБ = СопоставлениеНоменклатурыКонтрагентовСлужебный.СвойстваНоменклатурыИнформационнойБазы(ДанныеСервиса.ВыгрузитьКолонку("Номенклатура"));
		КонецЕсли;
	КонецЕсли;
	// Найдем сопоставление с номенклатурой контрагентов
	НаСопоставление = Новый Массив;
	НеСопоставлено = Новый Массив;
	Для Каждого НоменклатураКонтрагента Из КОбработке Цикл
		// Пропускаем найденное по идентификаторам сервиса.
		Если ЕстьРаботаСНоменклатурой И ЗначениеЗаполнено(НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			ОтборИдентификатораСервиса = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики", 
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса, НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса);
			СтрокиДанныхСервиса = ДанныеСервиса.НайтиСтроки(ОтборИдентификатораСервиса);
			Если ЗначениеЗаполнено(СтрокиДанныхСервиса) Тогда
				НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
					СтрокиДанныхСервиса[0].Номенклатура, СтрокиДанныхСервиса[0].Характеристика);
					
				ОбязательноеЗаполнениеХарактеристики = Ложь;
				ИспользоватьХарактеристики           = Неопределено;
				Свойства = СоответствиеСвойствНоменклатурыИБ.Получить(НоменклатураИБ.Номенклатура);
				Если Свойства <> Неопределено Тогда
					ОбязательноеЗаполнениеХарактеристики = Свойства.ОбязательноеЗаполнениеХарактеристики;
					ИспользоватьХарактеристики           = Свойства.ИспользоватьХарактеристики;
				КонецЕсли;
				
				// Если характеристики не определены и используются, то добавляем к сопоставлению.
				Если НЕ ЗначениеЗаполнено(НоменклатураИБ.Характеристика) Тогда
					Если ИспользоватьХарактеристики = Истина И ОбязательноеЗаполнениеХарактеристики Тогда
						НаСопоставление.Добавить(НоменклатураКонтрагента);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ, ИспользоватьХарактеристики, Ложь);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НаСопоставление.Добавить(НоменклатураКонтрагента);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(НаСопоставление) Тогда
		Возврат НеСопоставлено;
	КонецЕсли;
	ОтборПоНоменклатуреКонтрагента = Новый Структура("НоменклатураКонтрагента", НаСопоставление);
	СопоставлениеПоИдентификаторам = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(
		ОтборПоНоменклатуреКонтрагента, Истина);
	
	НеСопоставленнаяПоИдентификаторам = НеСопоставленнаяНоменклатураКонтрагента(НаСопоставление, 
		СопоставлениеПоИдентификаторам);
	
	Если Сохранить Тогда
		СопоставлениеПоПравиламПоиска = СопоставлениеНоменклатурыКонтрагентовСлужебный.СоответствиеНоменклатурыПоПравиламПоискаПоЧастиНаименования(
			НеСопоставленнаяПоИдентификаторам);
			
		НеСопоставлено = НеСопоставленнаяНоменклатураКонтрагента(НеСопоставленнаяПоИдентификаторам, 
			СопоставлениеПоПравиламПоиска);
	Иначе
		НеСопоставлено = НеСопоставленнаяПоИдентификаторам;
	КонецЕсли;
	
	// Включаем контроль по не сопоставленной номенклатуре.
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) И Не ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеЭлектронногоДокумента) Тогда
		ВключитьКонтрольСопоставленияНоменклатуры(ЭлектронныйДокумент, НеСопоставлено);
	КонецЕсли;
	// Сохраняем не сопоставленную номенклатуру контрагента.
	Если Сохранить Тогда
		Для Каждого НоменклатураКонтрагента Из НеСопоставлено Цикл
			СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НеСопоставлено;
	
КонецФункции

// Функция возвращает соответствующее переданному параметру значение ставки НДС.
// Если в функцию передан параметр ПредставлениеБЭД, то функция вернет ПрикладноеЗначение ставки НДС и наоборот.
//
// Параметры:
//   ПредставлениеБЭД - Строка - строковое представление ставки НДС.
//   ПрикладноеЗначение - ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - прикладное представление
//     соответствующего значения ставки НДС.
//
// Возвращаемое значение:
//   Строка, ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - соответствующее представление ставки НДС.
//
Функция СтавкаНДСИзСоответствия(ПредставлениеБЭД = "", ПрикладноеЗначение = Неопределено) Экспорт
	
	Возврат ИнтеграцияЭДОПовтИсп.СтавкаНДСИзСоответствия(ПредставлениеБЭД, ПрикладноеЗначение);
	
КонецФункции

Функция ЗначениеСтавкиНДСИзПеречисления(СтавкаНДС) Экспорт

	ПредставлениеСтавки = СтавкаНДСИзСоответствия(, СтавкаНДС);
	
	Если ПредставлениеСтавки = "18" ИЛИ ПредставлениеСтавки = "18/118" Тогда
		Значение = 0.18;
	ИначеЕсли ПредставлениеСтавки = "10" ИЛИ ПредставлениеСтавки = "10/110" Тогда
		Значение = 0.10;
	ИначеЕсли ПредставлениеСтавки = "20" ИЛИ ПредставлениеСтавки = "20/120" Тогда
		Значение = 0.20;
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

// Функция возвращает соответствующее переданному параметру значение ставки НДС.
//
// Параметры:
//   СтавкаНДС - ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - прикладное представление
//               соответствующего значения ставки НДС.
//
// Возвращаемое значение:
//   Строка, ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - соответствующее представление ставки НДС.
//
Функция СтавкаНДСПеречисление(СтавкаНДС) Экспорт	
	
	Возврат ИнтеграцияЭДОПовтИсп.СтавкаНДСПеречисление(СтавкаНДС);
	
КонецФункции

// Выполняет попытку поиска номенклатуры ИБ по переданному идентификатору.
// 
// Параметры:
//  Идентификатор - Строка - идентификатор, по которому требуется найти номенклатуру ИБ.
//
// Возвращаемое значение:
//  Структура - найденная номенклатура ИБ. См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер..НоваяНоменклатураИнформационнойБазы.
//
Функция НайтиНоменклатуруИБПоИдентификатору(Знач Идентификатор) Экспорт
	
	НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриПоискеНоменклатурыПоИдентификатору(Идентификатор, НоменклатураИБ);
	
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	// Библиотека формирует идентификатор по шаблону:
	// <ИДНоменклатуры>#<ИДХарактеристики>#<ИДУпаковки>
	ЧастиИД = СтрРазделить(Идентификатор, "#", Истина);
	Если ЧастиИД.Количество() <> 3 Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	Упаковка = Неопределено;
	
	ЕстьОшибка = Ложь;
	
	Попытка
		
		// Номенклатура
		Если ЗначениеЗаполнено(ЧастиИД[0]) Тогда
			Ссылка = ОбщегоНазначенияБЭД.НайтиСсылкуПоИдентификатору(ЧастиИД[0], Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Номенклатура = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		// Характеристика
		Если ЗначениеЗаполнено(ЧастиИД[1]) Тогда
			Ссылка = ОбщегоНазначенияБЭД.НайтиСсылкуПоИдентификатору(ЧастиИД[1], Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Характеристика = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		// Упаковка
		Если ЗначениеЗаполнено(ЧастиИД[2]) Тогда
			Ссылка = ОбщегоНазначенияБЭД.НайтиСсылкуПоИдентификатору(ЧастиИД[2], Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Упаковка = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	Если ЕстьОшибка Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоменклатураИБ.Номенклатура = Номенклатура;
	Иначе
		Возврат НоменклатураИБ;
	КонецЕсли;
	Если ЗначениеЗаполнено(Характеристика) Тогда
		НоменклатураИБ.Характеристика = Характеристика;
	КонецЕсли;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		НоменклатураИБ.Упаковка = Упаковка;
	КонецЕсли;
	
	Возврат НоменклатураИБ;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтрагентами

Функция ЭтоКонтрагент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ТипОбъектаСправочника("Контрагенты"));
	
	Возврат Результат;
	
КонецФункции

Функция СвязанныеКонтрагенты(МассивСсылокНаОбъекты) Экспорт
	
	СоответствиеКонтрагентов = Новый Соответствие;

	ОбменСКонтрагентамиПереопределяемый.СвязанныеКонтрагенты(МассивСсылокНаОбъекты, СоответствиеКонтрагентов);
	
	Возврат СоответствиеКонтрагентов;
	
КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыКонтрагента
//
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка);
	
КонецПроцедуры

Функция ДанныеСвидетельстваОРегистрацииИП(Организация) Экспорт
	
	ДанныеСвидетельства = "";
	ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(Организация, ДанныеСвидетельства);
	Возврат ДанныеСвидетельства;
	
КонецФункции			

#КонецОбласти

#Область РаботаСПрикладнымиДокументами

// Функция возвращает соответствующее переданному параметру значение ставки НДС.
//
// Возвращаемое значение:
//   ВыводитьДопДанные - Булево -.
//   ВыводитьБанковскиеРеквизиты - Булево -.
//   ВыводитьПостраничныйРазделитель - Булево -.
//   ЭлектронныеПодписи - См. ЭлектроннаяПодпись.УстановленныеПодписи - .
//   ПрикладнойТипДокумента - 
//
Функция НовыеПараметрыПредставленияПроизвольногоДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВыводитьДопДанные", Ложь);
	ПараметрыЗаполнения.Вставить("ВыводитьБанковскиеРеквизиты", Ложь);
	ПараметрыЗаполнения.Вставить("ВыводитьПостраничныйРазделитель", Ложь);
	ПараметрыЗаполнения.Вставить("ЭлектронныеПодписи", Новый Массив);
	ПараметрыЗаполнения.Вставить("ПрикладнойТипДокумента",
		Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.ПривестиЗначение());
	
	Возврат ПараметрыЗаполнения;
		
КонецФункции

// Функция возвращает соответствующее переданному параметру значение ставки НДС.
// 
// Параметры:
// 	ДвоичныеДанные - ДвоичныеДанные - .
//  ПараметрыЗаполнения - См. ИнтеграцияЭДО.НовыеПараметрыПредставленияПроизвольногоДокумента -.
//  
// Возвращаемое значение:
//   ТабличныйДокумент -.
//
Функция ПредставлениеФайлаПрикладногоЭлектронногоДокумента(ДвоичныеДанные, ПараметрыЗаполнения) Экспорт
	
	Представление = Новый ТабличныйДокумент;
	
	Для Каждого Подпись Из ПараметрыЗаполнения.ЭлектронныеПодписи Цикл
		Подпись.Вставить("ОтветнаяПодпись", Ложь);
	КонецЦикла;
	
	Параметры= Новый Структура;
	Параметры.Вставить("ВыводитьБанковскиеРеквизиты", ПараметрыЗаполнения.ВыводитьБанковскиеРеквизиты);
	Параметры.Вставить("ВыводитьПостраничныйРазделитель", ПараметрыЗаполнения.ВыводитьПостраничныйРазделитель);
	Параметры.Вставить("СкрыватьДопДанные", Не ПараметрыЗаполнения.ВыводитьДопДанные);
	Параметры.Вставить("ЭлектронныеПодписи", ПараметрыЗаполнения.ЭлектронныеПодписи);
	Параметры.Вставить("ВидЭлектронногоДокумента", ПараметрыЗаполнения.ПрикладнойТипДокумента);
	
	ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииТабличногоДокументаИзФайлаПрикладногоЭлектронногоДокумента(
		Представление, ДвоичныеДанные, Параметры);

	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ПредставлениеДокумента", Представление);
	РезультатФормирования.Вставить("Успех", Истина);
	
	Возврат РезультатФормирования;
	
КонецФункции
		
#КонецОбласти

#Область ПрикладныеОбъектыМетаданных

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  Строка - имя прикладного справочника.
//
Функция ИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	Возврат ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(ИмяСправочника);
КонецФункции

Функция ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра) Экспорт	
	Возврат ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(ИмяПараметра);
КонецФункции

// Возвращает пустую ссылку на справочник.
//
// Параметры:
//  ИмяСправочника - Строка - название справочника.
//
// Возвращаемое значение:
//  Ссылка - пустая ссылка на справочник.
//
Функция ПолучитьПустуюСсылку(ИмяСправочника) Экспорт
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника(ИмяСправочника);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Результат = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - название справочника из библиотеки БЭД 
//              (см. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников).
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  ДатаСведений - Дата - дата сведений о ИНН/КПП объекта.
//               - Неопределено - дата сведений неизвестна.
//  
// Возвращаемое значение:
//  СправочникСсылка - ссылка на объект.
// 
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, ДатаСведений = Неопределено) Экспорт
	
	СсылкаНаОбъект = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(
		ТипОбъекта, ИНН, КПП, СсылкаНаОбъект, ДатаСведений);
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СписокТиповОбъектовУчетаПоТипуДокумента(ТипДокумента) Экспорт
	
	СписокТипов = Новый СписокЗначений;
	
	ИнтеграцияЭДОСобытия.ПриОпределенииСпискаТиповОбъектовУчетаПоТипуДокумента(ТипДокумента, СписокТипов);

	ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, СписокТипов);
	Если СписокТипов.Количество() = 0 Тогда
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииТиповУчетныхДокументовПоПрикладномуТипуЭлектронногоДокумента(
			ТипДокумента, СписокТипов);
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  ИмяПеречисления - Строка - наименование перечисления.
//  ПредставлениеПеречисления - Строка - наименование значения перечисления.
//
// Возвращаемое значение:
//  ПеречислениеСсылка - значение искомого перечисления.
//
Функция НайтиПеречисление(Знач ИмяПеречисления, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	
	СоответствиеПеречислений = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений(СоответствиеПеречислений);
	
	ИмяПрикладногоПеречисления = СоответствиеПеречислений.Получить(ИмяПеречисления);
	Если ИмяПрикладногоПеречисления = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать соответствие для перечисления %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяПеречисления);
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			УровеньЖурналаРегистрации.Предупреждение);
	ИначеЕсли ЗначениеЗаполнено(ИмяПрикладногоПеречисления) Тогда // задано какое-то значение
		ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначениеПеречисления(
			ИмяПрикладногоПеречисления, ПредставлениеПеречисления, НайденноеЗначение);
		Если НайденноеЗначение = Неопределено Тогда
			Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПрикладногоПеречисления].ЗначенияПеречисления Цикл
				Если ВРег(ЭлПеречисления.Синоним) = ВРег(ПредставлениеПеречисления)
					ИЛИ ВРег(ЭлПеречисления.Имя) = ВРег(ПредставлениеПеречисления) Тогда
					НайденноеЗначение = Перечисления[ИмяПрикладногоПеречисления][ЭлПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Возвращает описание запроса для получения сведений по участникам ЭДО.
// Содержит следующие поля:
//	ОбъектУчета,
//	Направление,
//	ТипДокумента,
//	ПрикладнойТипДокумента,
//	Организация,
//	Контрагент,
//	ДоговорКонтрагента,
//  ОрганизацияИНН
//  ОрганизацияКПП,
//  КонтрагентИНН,
//  КонтрагентКПП
// 
// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписанияОбъектовУчета.
// 	ИмяВременнойТаблицы - Строка - имя временной таблицы, в которую помешается результат запроса.
// 	 	
// Возвращаемое значение:
// 	См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
//
Функция ЗапросСведенийПоОбъектамУчетаИУчастникамЭДО(ОписанияОбъектовУчета, ИмяВременнойТаблицы = "") Экспорт
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	
	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОписанияОбъектовУчета", ОписанияОбъектовУчета);
	
	ОписаниеЗапроса.Текст =
		"ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Контрагент КАК Контрагент,
		|	ОписанияОбъектовУчета.Договор КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ОписанияОбъектовУчета
		|ИЗ
		|	&ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
		|	ОписанияОбъектовУчета.Направление КАК Направление,
		|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
		|	ОписанияОбъектовУчета.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ОписанияОбъектовУчета.Организация КАК Организация,
		|	ОписанияОбъектовУчета.Контрагент КАК Контрагент,
		|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&СведенияПоУчастникамЭДО
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета";
	
	ИННОрганизации = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	КППОрганизации = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИННКонтрагента = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	КППКонтрагента = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ШаблонСведенийПоУчастникамЭДО = "ЕСТЬNULL(%1, """") КАК ОрганизацияИНН,
		|ЕСТЬNULL(%2, """") КАК ОрганизацияКПП,
		|ЕСТЬNULL(%3, """") КАК КонтрагентИНН,
		|ЕСТЬNULL(%4, """") КАК КонтрагентКПП";
	
	СведенияПоУчастникамЭДО = СтрШаблон(ШаблонСведенийПоУчастникамЭДО,
		?(ЗначениеЗаполнено(ИННОрганизации), "ОписанияОбъектовУчета.Организация." + ИННОрганизации, """"),
		?(ЗначениеЗаполнено(КППОрганизации), "ОписанияОбъектовУчета.Организация." + КППОрганизации, """"),
		?(ЗначениеЗаполнено(ИННКонтрагента), "ОписанияОбъектовУчета.Контрагент." + ИННКонтрагента, """"),
		?(ЗначениеЗаполнено(КППКонтрагента), "ОписанияОбъектовУчета.Контрагент." + КППКонтрагента, """"));
	
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);
	ОписаниеЗапроса.Текст = СтрЗаменить(ОписаниеЗапроса.Текст, "&СведенияПоУчастникамЭДО", СведенияПоУчастникамЭДО);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСУчетнымиДокументами

Функция НовыеПараметрыПолученияСостоянияНеНачатогоЭДООбъектаУчета() Экспорт
	
	ДанныеСостояния = Новый ТаблицаЗначений;
	ДанныеСостояния.Колонки.Добавить("ОбъектУчета");
	ДанныеСостояния.Колонки.Добавить("Контрагент");
	ДанныеСостояния.Колонки.Добавить("ТипДокумента");
	ДанныеСостояния.Колонки.Добавить("ПрикладнойТипДокумента");
	ДанныеСостояния.Колонки.Добавить("Направление");
	ДанныеСостояния.Колонки.Добавить("Организация");
	ДанныеСостояния.Колонки.Добавить("Договор");
	
	Возврат ДанныеСостояния;
	
КонецФункции

// Заполняет данные состояния не начатого ЭДО объекта учета.
// 
// Параметры:
//  Параметры - См. НовоеОписаниеОбъектаУчета
//  ДанныеСостояния - См. НовыеДанныеСостоянияЭДООбъектаУчета
Процедура ЗаполнитьСостояниеНеНачатогоЭДООбъектаУчета(Параметры, ДанныеСостояния) Экспорт
	
	Если ДанныеСостояния = Неопределено Тогда
		ДанныеСостояния = НовыеДанныеСостоянияЭДООбъектаУчета();
	КонецЕсли;
	
	ДанныеСостояния.ЭтоСостояниеНеНачатогоЭДО = Истина;
	КоличествоПараметров = Параметры.Количество();
	КоличествоНетНастройки = 0;
	КоличествоФормированиеЗапрещено = 0;
	
	Для каждого СтрокаПараметров Из Параметры Цикл
		
		Если СтрокаПараметров.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
			
			ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СтрокаПараметров.ОбъектУчета));
			
			ОтборВидовДокументовВнутреннегоЭДО = ЭлектронныеДокументыЭДО.НовыйОтборВидовДокументов();
			ОтборВидовДокументовВнутреннегоЭДО.ТипДокумента = "ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.Внутренний)";
			ОтборВидовДокументовВнутреннегоЭДО.ИдентификаторОбъектаУчета = "ИдентификаторОбъектаУчета";
			
			ИмяТаблицыВидовДокументовВнутреннегоЭДО = "ВидыВнутреннегоЭДО";
			ТекстЗапросаВидовДокументовВнутреннегоЭДО = ЭлектронныеДокументыЭДО.ЗапросВидовДокументов(
				ИмяТаблицыВидовДокументовВнутреннегоЭДО, ОтборВидовДокументовВнутреннегоЭДО).Текст;
			
			ОтборНастроекОтправкиВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
			ОтборНастроекОтправкиВнутреннегоЭДО.ВидДокумента = "&НастройкиВидДокумента";
			ОтборНастроекОтправкиВнутреннегоЭДО.Организация = "&НастройкиОрганизация";
			ИмяТаблицыНастроекВнутреннегоЭДО = "НастройкиВнутреннегоЭДО";
			ТекстЗапросаНастроекВнутреннегоЭДО = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО(
				ИмяТаблицыНастроекВнутреннегоЭДО, ОтборНастроекОтправкиВнутреннегоЭДО).Текст;
			
			ТекстЗапросаНастроекВнутреннегоЭДО = СтрЗаменить(ТекстЗапросаНастроекВнутреннегоЭДО, "&НастройкиВидДокумента",
				"ВЫБРАТЬ Ссылка ИЗ ВидыВнутреннегоЭДО");
			
			ТекстЗапросаИтоговыхДанных = 
			"ВЫБРАТЬ
			|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента,
			|	НастройкиВнутреннегоЭДО.Формировать
			|ИЗ
			|	НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО";
			
			Запросы = Новый Массив;
			Запросы.Добавить(ТекстЗапросаВидовДокументовВнутреннегоЭДО);
			Запросы.Добавить(ТекстЗапросаНастроекВнутреннегоЭДО);
			Запросы.Добавить(ТекстЗапросаИтоговыхДанных);
			
			ИтоговыйЗапрос = СтрСоединить(Запросы, ОбщегоНазначения.РазделительПакетаЗапросов());
			
			Запрос = Новый Запрос;
			Запрос.Текст = ИтоговыйЗапрос;
			
			Запрос.Параметры.Вставить("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
			Запрос.Параметры.Вставить("НастройкиОрганизация", СтрокаПараметров.Организация);
			
			РезультатПоискаНастроек = Запрос.Выполнить().Выгрузить();
			
			Если Не ЗначениеЗаполнено(РезультатПоискаНастроек) Тогда
				КоличествоНетНастройки = КоличествоНетНастройки + 1;
			ИначеЕсли РезультатПоискаНастроек.Найти(Истина, "Формировать") = Неопределено Тогда
				КоличествоФормированиеЗапрещено = КоличествоФормированиеЗапрещено + 1;
			КонецЕсли;
			
		Иначе
			
			КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
			ТипДокументаДляВида = ?(СтрокаПараметров.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной,
				СтрокаПараметров.ПрикладнойТипДокумента, СтрокаПараметров.ТипДокумента);
			КлючНастроек.ВидДокумента = ВидДокументаПоТипу(ТипДокументаДляВида);
			КлючНастроек.Отправитель = СтрокаПараметров.Организация;
			КлючНастроек.Получатель = СтрокаПараметров.Контрагент;
			КлючНастроек.Договор = СтрокаПараметров.Договор;
			
			НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроек);
			
			Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
				КоличествоНетНастройки = КоличествоНетНастройки + 1;
			ИначеЕсли Не НастройкиОтправки.Формировать Тогда
				КоличествоФормированиеЗапрещено = КоличествоФормированиеЗапрещено + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоНетНастройки = КоличествоПараметров Тогда
		
		ДанныеСостояния.ПредставлениеСостояния = НСтр("ru = 'Требуется настройка'");
		ДанныеСостояния.НеобходимаНастройка = Истина;
		
		Если КоличествоПараметров = 1 Тогда
			Если Параметры[0].Направление = Перечисления.НаправленияЭДО.Исходящий
				Или Параметры[0].Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда
				ДанныеСостояния.ПредставлениеСостояния = НСтр("ru = 'Не начат'");
			ИначеЕсли Параметры[0].Направление = Перечисления.НаправленияЭДО.Входящий Тогда
				ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Пригласить %1 к обмену электронными документами в 1С-ЭДО'");
				ДанныеСостояния.ПредставлениеСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаНавигационнойСсылки, Параметры[0].Контрагент);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КоличествоФормированиеЗапрещено = КоличествоПараметров Тогда
		
		ДанныеСостояния.ПредставлениеСостояния = НСтр("ru = 'Формирование документов запрещено'");
		ДанныеСостояния.НеобходимаНастройка = Истина;
		
	Иначе
		
		ДанныеСостояния.СуществуетАктуальныйДокумент =
			ЗначениеЗаполнено(ОсновнойЭлектронныйДокументОбъектаУчета(Параметры[0].ОбъектУчета));
		ДанныеСостояния.ПредставлениеСостояния = НСтр("ru = 'Не начат'");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеСостоянияЭДОДляФормыОбъектаУчета(ОбъектУчета) Экспорт
	
	Результат = НовыеДанныеСостоянияЭДООбъектаУчета();
	
	Если Результат.ИспользуетсяОбменЭлектроннымиДокументами Тогда
		Если ЗначениеЗаполнено(ОбъектУчета) Тогда	
			ПредставлениеСостояния = СохраненноеПредставлениеСостоянияЭДООбъектаУчета(ОбъектУчета);
			
			Если ПустаяСтрока(ПредставлениеСостояния) Тогда
				ОписаниеОбъектаУчета = ОписаниеОбъектаУчета(ОбъектУчета);
				
				ПараметрыПолученияСостояния = НовыеПараметрыПолученияСостоянияНеНачатогоЭДООбъектаУчета();
				Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
					ЗаполнитьЗначенияСвойств(ПараметрыПолученияСостояния.Добавить(), СтрокаОписания);
				КонецЦикла;
				
				ЗаполнитьСостояниеНеНачатогоЭДООбъектаУчета(ПараметрыПолученияСостояния, Результат);
			Иначе
				Результат.ПредставлениеСостояния = ПредставлениеСостояния;
				Результат.СуществуетАктуальныйДокумент = ЗначениеЗаполнено(
					ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета));
				Результат.НеобходимаНастройка = Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаСвязейПараметровВыбораДоговорКонтрагента() Экспорт
	
	ИмяСвязиПоОрганизации = "";
	ИмяСвязиПоКонтрагенту = "";
	
	ОбменСКонтрагентамиПереопределяемый.УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(
		ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту);
	
	Возврат Новый Структура("ПоОрганизации, ПоКонтрагенту", ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту);
		
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

// Проверяет возможность создания учетного документа
// 
// Параметры:
//  ДанныеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  Описание - Строка - Описание невозможности создания (возвращаемый параметр)
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  			 - Неопределено
//  Расширение - Строка
// 
// Возвращаемое значение:
//  Булево - Возможно создание учетного документа
Функция ВозможноСозданиеУчетногоДокумента(ДанныеФайла, Описание, ТипДокумента = Неопределено) Экспорт

	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеФайла.ИмяФайла);
	Расширение = СтруктураИмениФайла.Расширение;
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		Если НРег(Расширение) = ".zip" И ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		Если НРег(Расширение) = ".pdf" И ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НРег(Расширение) <> ".xml" Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоСводныйУПД = ЭлектронныеДокументыЭДО.ЭтоСводныйУПД(ДанныеФайла.ДвоичныеДанные);
	ПараметрыПроверки = Новый Структура("ЭтоСводныйУПД", ЭтоСводныйУПД);
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеВозможностиСозданияУчетногоДокумента(ПараметрыПроверки, Отказ, Описание);
	
	Возврат Не Отказ;
	
КонецФункции

// Выполняет отражение в учете документа.
// 
// Параметры:
// 	ДанныеДокументов - Массив Из См. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете.
// 	СпособОбработки - Строка - Способ обработки.
//
Процедура ОтразитьВУчетеЭлектронныеДокументы(ДанныеДокументов, СпособОбработки = Неопределено) Экспорт
	
	ИзмененияОтраженияВУчете = Новый ТаблицаЗначений;
	ИзмененияОтраженияВУчете.Колонки.Добавить("ЭлектронныйДокумент");
	ИзмененияОтраженияВУчете.Колонки.Добавить("ДобавленныеОбъектыУчета");
	
	Результат = НовыйРезультатОтраженияВУчете();
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ИсключитьНеОтражаемыеВУчетеЭлектронныеДокументы(ДанныеДокументов, Результат);
	ВключитьКонтрольОтраженияВУчете(ДанныеДокументов);

	Для Каждого СтрокаПараметров Из ДанныеДокументов Цикл
		
		Если СтрокаПараметров.ОтключитьКонтрольОтраженияВУчете Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка				
			
			Если Не ЗначениеЗаполнено(СпособОбработки) Тогда			
				СпособОбработкиДокумента = СпособОтраженияВУчетеЭлектронногоДокумента(СтрокаПараметров);
			Иначе
				СпособОбработкиДокумента = СпособОбработки;
			КонецЕсли;
			
			АвтоматическоеОтражениеДоступно = Истина;	
				
			Если ТипЗнч(СпособОбработкиДокумента) = Тип("Структура") Тогда
				Если ЭтоСпособОбработки_Вручную(СпособОбработкиДокумента.ПервичныйДокумент)
					Или ЭтоСпособОбработки_Вручную(СпособОбработкиДокумента.СчетФактура)
					Или ЭтоСпособОбработки_НеОтражать(СпособОбработкиДокумента.ПервичныйДокумент)
					Или ЭтоСпособОбработки_НеОтражать(СпособОбработкиДокумента.СчетФактура)  Тогда 
						
					АвтоматическоеОтражениеДоступно = Ложь;
				КонецЕсли;	
			Иначе
				Если ЭтоСпособОбработки_Вручную(СпособОбработкиДокумента) 
					Или ЭтоСпособОбработки_НеОтражать(СпособОбработкиДокумента) Тогда
				
					АвтоматическоеОтражениеДоступно = Ложь;
					
				КонецЕсли;	
			КонецЕсли;	
				
			Если АвтоматическоеОтражениеДоступно Тогда				
				
				ОбъектыУчета = Неопределено;
				ДокументЗагружен = Ложь;
				ЗаполнитьДокументУчета(СтрокаПараметров, ОбъектыУчета, ДокументЗагружен, СпособОбработкиДокумента);
				
				Если ЗначениеЗаполнено(ОбъектыУчета) Тогда
					НоваяСтрока = ИзмененияОтраженияВУчете.Добавить();
					НоваяСтрока.ЭлектронныйДокумент     = СтрокаПараметров.ЭлектронныйДокумент;
					НоваяСтрока.ДобавленныеОбъектыУчета = ОбъектыУчета;
				КонецЕсли;
	
			КонецЕсли;					
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();

			ШаблонСообщения = НСтр("ru = 'При отражении в учете электронного документа: %1 возникла ошибка:
				|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				СтрокаПараметров.ЭлектронныйДокумент, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(
				НСтр("ru = 'Создание учетного документа'"), ТекстОшибки, ТекстСообщения,, СтрокаПараметров.ЭлектронныйДокумент);
			
		КонецПопытки;
		
	КонецЦикла;
		
	ВключитьКонтрольОтраженияВУчете(ДанныеДокументов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаИзменения Из ИзмененияОтраженияВУчете Цикл
		ОбменСКонтрагентамиПереопределяемый.ПослеИзмененияОтраженияВУчете(СтрокаИзменения.ЭлектронныйДокумент, 
			СтрокаИзменения.ДобавленныеОбъектыУчета, Новый Массив);
	КонецЦикла;
	
КонецПроцедуры

Функция ПерезаполнитьДокумент(Знач ПараметрыЗаполнения, КонтекстОперации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("НетПраваОбработкиЭД", Ложь);
	Результат.Вставить("МассивДокументов", Новый Массив);
	Результат.Вставить("СопоставитьНоменклатуру", Ложь);
	Результат.Вставить("ПараметрыСопоставления", Неопределено);
	
	Если НЕ ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда
		Результат.Отказ = Истина;
		Результат.НетПраваОбработкиЭД = Истина;
		Возврат Результат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = МассивПроведенныхДокументов(
		ПараметрыЗаполнения.МассивСсылок);
		
	Шаблон = НСтр("ru = 'Перезаполнение документа %1.
						|Операция возможна только для непроведенных документов.'");
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПараметрыЗаполнения.МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	АктуальныеДокументыЭДО = АктуальныеЭлектронныеДокументы(МассивСсылок);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ЭлектронныйДокумент) Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			СтрокаСоответствия = АктуальныеДокументыЭДО.Добавить();
			СтрокаСоответствия.ОбъектУчета = ТекущийДокумент;
			СтрокаСоответствия.ЭлектронныйДокумент = ПараметрыЗаполнения.ЭлектронныйДокумент;
		КонецЦикла;
	КонецЕсли;
	
	Если АктуальныеДокументыЭДО.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из АктуальныеДокументыЭДО Цикл
		
		ОбъектУчета = ЭлементСоответствия.ОбъектУчета;
		ЭлектронныйДокумент = ЭлементСоответствия.ЭлектронныйДокумент;
		
		Если Не ЗначениеЗаполнено(ОбъектУчета) ИЛИ Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыПерезаполнения = ДополнительныеПараметрыПерезаполненияДокументаИБ();
		
		ПерезаполнитьОбъектУчетаПоЭлектронномуДокументу(ОбъектУчета, ЭлектронныйДокумент,
			ПараметрыЗаполнения.СпособОбработки, КонтекстОперации, ПараметрыПерезаполнения);
		
		Если ПараметрыПерезаполнения.ДокументЗагружен Тогда
			
			Результат.МассивДокументов.Добавить(ОбъектУчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПерезаполнитьОбъектУчетаПоЭлектронномуДокументу(ОбъектУчета, Знач ЭлектронныйДокумент, СпособОбработки = "", КонтекстОперации = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаполненияДокументаИБ();
	КонецЕсли;		

	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		СпособОбработки = СпособОбработкиЭлектронногоДокументаПоОснованию(ЭлектронныйДокумент, ОбъектУчета);
	КонецЕсли;

	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
	ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы)[0];
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		
		СпособОбработки = СпособОбработки = СпособОтраженияВУчетеЭлектронногоДокумента(ДанныеДокумента);
		
	КонецЕсли;
	
	ДокументЗагружен = Ложь;
	
	ОбъектыУчета = Новый Массив;
	Если ДанныеДокумента.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УПД)
		Или ДанныеДокумента.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УКД) Тогда
		
		ОбъектыУчета = ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент).ВыгрузитьКолонку("ОбъектУчета");
	
	Иначе
		ОбъектыУчета.Добавить(ОбъектУчета);
	КонецЕсли;
		
	ЗаполнитьДокументУчета(ДанныеДокумента, ОбъектыУчета, ДокументЗагружен, СпособОбработки);
	ДополнительныеПараметры.ДокументЗагружен = ДокументЗагружен;
	ДополнительныеПараметры.ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектУчета)).ПолноеИмя();
	
КонецПроцедуры

// Заполняет документ учета.
//
// Параметры:
//  ДанныеЭлектронногоДокумента - См. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете - 
//     данные электронного документа.
//  ДокументыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО, Неопределено - набор документов, в которые
//     нужно производить загрузку.
//  СпособОбработки - Строка - Способ обработки.
//
Процедура СохранитьДанныеОбъекта(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки = "") Экспорт
	
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();	

	ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
	ПараметрыПолучения.ОсновнойФайл = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
	ПараметрыПолучения.ДополнительныйФайл = ДанныеЭлектронногоДокумента.ДанныеДополнительногоФайла;
	
	Результат = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЭлектронныеДокументыЭДО.ЭтоПрикладнойВидДокумента(ДанныеЭлектронногоДокумента.ВидДокумента) Тогда
		Если ДокументыУчета = Неопределено Тогда
			ДокументыУчета = Новый Массив;
		КонецЕсли;
		
		ДокументыУчета = СохранитьДанныеОбъектаПрикладногоФормата(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("НовыйЭД") Тогда
		ИдентификаторДокумента = Неопределено;
		Результат.Свойство("ИдентификаторДокумента", ИдентификаторДокумента);
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось прочитать данные электронного документа %1. Неизвестный формат обмена.'"),
			ИдентификаторДокумента);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НовыйЭД = Результат.НовыйЭД;
	ДеревоРазбора = Результат.ДеревоРазбора;
	ДеревоЭД = НовыйЭД.ЗначениеРеквизита;
	
	Если ЗначениеЗаполнено(НовыйЭД) Тогда
		
			ЗаполнитьДокументыУчета = Истина;
			ОписаниеОшибки = "";
			
			ДокументУчета = Неопределено;
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				ДокументУчета = ДокументыУчета[0];
			КонецЕсли;			
			
			ПараметрыОтражения = Новый Структура;
			ПараметрыОтражения.Вставить("ЭлектронныйДокумент", ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
			ПараметрыОтражения.Вставить("Контрагент", ДанныеЭлектронногоДокумента.Отправитель);
			ПараметрыОтражения.Вставить("СпособОбработки", СпособОбработки);
			ПараметрыОтражения.Вставить("ДеревоДокумента", НовыйЭД);
			
			ДополнитьДеревоСсылкамиНаДокументыОснования(ДеревоРазбора, НовыйЭД, ДанныеЭлектронногоДокумента);
			
			Отказ = Ложь;
			ОписаниеОшибки = "";
			ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(
				ПараметрыОтражения, Отказ, ОписаниеОшибки);
			Если Отказ Тогда
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			ДополнитьДеревоДаннымиКомитента(ДеревоЭД, ДанныеЭлектронногоДокумента);
			
			Если НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца 
				Или НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
				
				ДополнитьДеревоДаннымиДоговора(ДеревоЭД, ДанныеЭлектронногоДокумента, "Основание");
				
			ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца
				Или НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда

				ДополнитьДеревоДаннымиДоговора(ДеревоЭД, ДанныеЭлектронногоДокумента, "ОснованиеОтгрузкиТоваров");
				
			ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца 
				Или НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда

				ДополнитьДеревоДаннымиДоговора(ДеревоЭД, ДанныеЭлектронногоДокумента, "ОснованиеКорректировки");
	
			КонецЕсли;
			
			УчестьОбратнуюСовместимостьСтруктурыДереваЭД(ДеревоЭД, НовыйЭД.ВерсияФормата);
			

			ЕстьЭлектронноеАктирование = Ложь;
			Если Не ФорматыЭДО.ЭтоОбработкаФормата(ДеревоЭД) Тогда
				// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
				Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
					ЕстьЭлектронноеАктирование = Истина;
					МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
					Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
						МодульЭлектронноеАктированиеЕИС.ДополнитьДеревоДаннымиЭлектронногоАктирования(
							ДеревоЭД, ДанныеЭлектронногоДокумента);
					КонецЕсли;
				КонецЕсли;
				// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
			КонецЕсли;
			
			МодульОбменСГИСЭПД = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
				МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ЕстьЭлектронноеАктирование
					И МодульЭлектронноеАктированиеЕИС.ЭтоДокументЭлектронногоАктирования(ДанныеЭлектронногоДокумента, НовыйЭД) Тогда
						
					МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
					МодульПодсистемы.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоЭД, ДанныеЭлектронногоДокумента, ДокументУчета);
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда				
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);					
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);					
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);				
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда						
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);				
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКД_2020(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда					
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктСверкиВзаиморасчетов(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);	
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьСчетНаОплату101(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);	
				ИначеЕсли НовыйЭД.ВерсияФормата
				= ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОПриемкеСтроительныхРаботУслуг(ДеревоЭД,
						ДокументУчета, СпособОбработки, ОписаниеОшибки);
				ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорнойДокумент101 Тогда
					КонструкторЭД = НовыйЭД.ЗначениеРеквизита;
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДоговорнойДокумент101(КонструкторЭД,
						ДокументУчета, СпособОбработки, ОписаниеОшибки);
				ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.КаталогТоваров
					И ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент) Тогда
					
					Если ДокументУчета = Неопределено Тогда 
						СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, "ВидДокумента, Организация, Контрагент, ДоговорКонтрагента");
						ДокументУчета = НастройкиЭДО.СсылкаНаОбъектНастройкиЭДО(СвойстваДокумента.Организация, СвойстваДокумента.Контрагент, СвойстваДокумента.ДоговорКонтрагента);
					КонецЕсли;	
						
					УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, ДокументУчета, СпособОбработки);
				
				ИначеЕсли ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
					
					Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
						МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
						МодульПодсистемы.НайтиСоздатьЗапросКоммерческихПредложений(ДеревоЭД, ДокументУчета);
					Иначе
						ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьЗапросКоммерческихПредложений(ДеревоЭД,
							ДокументУчета, СпособОбработки, ОписаниеОшибки);
					КонецЕсли;
					
				ИначеЕсли ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда
					
					Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
						МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
						МодульПодсистемы.НайтиСоздатьКоммерческоеПредложение(ДеревоЭД, ДокументУчета);
					Иначе
						ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьКоммерческоеПредложение(ДеревоЭД,
							ДокументУчета, СпособОбработки, ОписаниеОшибки);
					КонецЕсли;

				ИначеЕсли ДанныеЭлектронногоДокумента.ТипДокумента
													= Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
					
					МашиночитаемыеДоверенности.ОтразитьВУчете(ДанныеЭлектронногоДокумента,
						ДокументыУчета, СпособОбработки, ОписаниеОшибки);
					
				ИначеЕсли (МодульОбменСГИСЭПД <> Неопределено 
					И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ДанныеЭлектронногоДокумента.ТипДокумента)) Тогда
						
					МодульОбменСГИСЭПД.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоЭД, ДанныеЭлектронногоДокумента, ДокументУчета);
					
				Иначе
					ОшибкаЗаписи = Ложь;
					ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
				
					ПараметрыОбработки = НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД(ДокументУчета,,
						СпособОбработки);
					ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора, ПараметрыОбработки,
						ДанныеЭлектронногоДокумента.ДополнительныеДанные, ДокументУчета, ОписаниеОшибки);
					
					Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
						ЗаполнитьДокументыУчета = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
				ЗаполнитьДокументыУчета = Ложь;
				
				ВызватьИсключение;
				
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
				ЗаполнитьДокументыУчета = Ложь;
			КонецЕсли;
					
			Если ЗаполнитьДокументыУчета Тогда
				ДокументыУчета = Новый Массив;
				ДокументыУчета.Добавить(ДокументУчета);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДокументыУчета) Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось создать документ базы данных.'");
				АктуальныеВидыЭД = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовВходящие();
				ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(НовыйЭД.ВидЭД);
				Если АктуальныеВидыЭД.Найти(ВидДокумента) = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'Электронный документ вида ""%1"" в текущей конфигурации не поддерживается'");
					ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВидДокумента);
				ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ТекстЖурналаРегистрации = ОписаниеОшибки;
					ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки;
				Иначе
					ТекстЖурналаРегистрации = НСтр("ru = 'Необходимо проверить работу процедуры
						|ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД'");
				КонецЕсли;
				ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД.'");
				ЭлектронноеВзаимодействие.ОбработатьОшибку(
					ВидОперации, ТекстЖурналаРегистрации, ТекстСообщения);
					ОшибкаЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
КонецПроцедуры

// Требуется для получения имени документа для открытия форм по способу обработки входящего документа.
//
// Параметры:
//  СпособОбработки	 - Строка - один из способов обработки входящего электронного документа.
// 
// Возвращаемое значение:
//  Строка - имя объекта метаданных (документа), соответствующего способу обработки.
//
Функция ИмяДокументаПоСпособуОбработки(СпособОбработки) Экспорт 
		
	ИмяДокумента = СпособОбработки; 
	
	ОбменСКонтрагентамиПереопределяемый.ИмяОбъектаМетаданныхПоСпособуОтраженияВУчете(СпособОбработки,ИмяДокумента);
		
	Возврат ИмяДокумента;
	
КонецФункции

// Требуется для получения описания типа объекта по способу обработки.
//
// Параметры:
//  СпособОбработки	 - Строка - один из способов обработки входящего электронного документа.
// 
// Возвращаемое значение:
//  ОписаниеТипа - описание типа объекта, соответствующего способу обработки.
//
Функция ОписаниеТипаОбъектаПоСпособуОбработки(СпособОбработки) Экспорт 
		
	ИмяТипа = ИмяДокументаПоСпособуОбработки(СпособОбработки);
	
	Тип = Неопределено;
	Если Метаданные.Справочники.Найти(ИмяТипа) <> Неопределено Тогда
	
		Тип = "СправочникСсылка." + ИмяТипа;
	ИначеЕсли Метаданные.Документы.Найти(ИмяТипа) <> Неопределено Тогда
	
		Тип = "ДокументСсылка." + ИмяТипа;
	КонецЕсли;
		
	Возврат Новый ОписаниеТипов(Тип);
	
КонецФункции

Функция ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеЭлектронногоДокумента) Экспорт
	
	СпособОбработки = СпособОтраженияВУчетеЭлектронногоДокумента(ДанныеЭлектронногоДокумента);
			
	Если ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
		Возврат СпособОбработки.ПервичныйДокумент = СпособОбработки_НеОтражать()
			И СпособОбработки.СчетФактура = СпособОбработки_НеОтражать();
	КонецЕсли;
			
	Возврат СпособОбработки = СпособОбработки_НеОтражать();
	
КонецФункции

Функция СпособОбработки_НеОтражать() Экспорт
	Возврат "НеОтражать";
КонецФункции

#КонецОбласти

#Область ПрикладныеФорматы

Функция ПрикладныеФорматыЭлектронныхДокументов() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ПрикладнойТипДокумента",
		Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип);
	
	ТаблицаФорматов.Колонки.Добавить("ИдентификаторФормата"                    , Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("ПредставлениеФормата"                    , Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Отключен"                                , Новый ОписаниеТипов("Булево"));
	ТаблицаФорматов.Колонки.Добавить("ДатаНачалаДействия"                      , Новый ОписаниеТипов("Дата"));
	ТаблицаФорматов.Колонки.Добавить("ДатаОкончанияДействия"                   , Новый ОписаниеТипов("Дата"));
	ТаблицаФорматов.Колонки.Добавить("УсловиеВыводаПредупреждения"             , Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("ТекстПредупрежденияДляВходящегоДокумента", Новый ОписаниеТипов("Строка"));
	
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСведенийОПрикладныхФорматах(ТаблицаФорматов);
	
	Возврат ТаблицаФорматов;
	
КонецФункции

// Определяет настройки регламента для прикладных типов электронных документов.
//
// Параметры:
//  ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - Ссылка на прикладной тип электронного документа.
//  Формат            - Строка - Текстовый идентификатор формата соответствующего прикладного вида электронного документа.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//     * ТребуетсяИзвещениеОПолучении - Булево - По данному признаку, на стороне получателя определяется необходимость отправки извещения о получении.
//     * ТребуетсяОтветнаяПодпись     - Булево - По данному признаку, на стороне получателя определяется, требуется ответное подписание документа.
//     * РедактироватьПодпись         - Булево - Признак редактирования параметра "Подписывать документ" в форме настроек регламента ЭДО.
//     * РедактироватьИзвещение       - Булево - Признак редактирования параметра "Ожидать извещение о получении" в форме настроек регламента ЭДО.
//     * РедактироватьОтветнуюПодпись - Булево - Признак редактирования параметра "Ожидать ответную подпись" в форме настроек регламента ЭДО.
//
Функция НастройкиРегламентаПрикладногоФормата(ПрикладнойТипДокумента, Формат) Экспорт
		
	Настройки = Новый Структура;
	Настройки.Вставить("ТребуетсяИзвещениеОПолучении");
	Настройки.Вставить("ТребуетсяОтветнаяПодпись");
	Настройки.Вставить("РедактироватьПодпись");
	Настройки.Вставить("РедактироватьИзвещение");
	Настройки.Вставить("РедактироватьОтветнуюПодпись");
	
	СтандартнаяОбработка = Истина;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииНастроекРегламентаЭДО(Настройки,
		ПрикладнойТипДокумента, Формат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Настройки.Вставить("ТребуетсяИзвещениеОПолучении", Истина);
		Настройки.Вставить("ТребуетсяОтветнаяПодпись",     Истина);
		Настройки.Вставить("РедактироватьПодпись",         Ложь);
		Настройки.Вставить("РедактироватьИзвещение",       Истина);
		Настройки.Вставить("РедактироватьОтветнуюПодпись", Истина);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытий

// См. ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиПодтвержденияПоСчетуФактуре
//
Процедура ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ЭлектронныйДокумент, ДокументыПодтверждения, КонтекстДиагностики) Экспорт
	
	ОбъектыУчета = ОбъектыУчетаЭлектронныхДокументов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент)).ВыгрузитьКолонку("ОбъектУчета");
	
	СостояниеОбработки = Новый Структура;
	СостояниеОбработки.Вставить("ПДППолучен", Ложь);
	СостояниеОбработки.Вставить("ДатаПоступленияСФОператоруОтПродавца", Дата(1,1,1));
	СостояниеОбработки.Вставить("ПДОПолучен", Ложь);
	СостояниеОбработки.Вставить("ДатаОтправкиСФПокупателюОператором", Дата(1,1,1));
	СостояниеОбработки.Вставить("ИОППолучен", Ложь);
	СостояниеОбработки.Вставить("ИОППДОПолучен", Ложь);
	
	Событие = "";
	
	Для Каждого СвойстваДокумента Из ДокументыПодтверждения Цикл
		
		Если СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДП Тогда
			СостояниеОбработки.ПДППолучен = Истина;
			СостояниеОбработки.ДатаПоступленияСФОператоруОтПродавца = СвойстваДокумента.Дата;
			Если СвойстваДокумента.Текущий Тогда
				Событие = "ПолученПДП"
			КонецЕсли;
		ИначеЕсли СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ПДО Тогда
			СостояниеОбработки.ПДОПолучен = Истина;
			СостояниеОбработки.ДатаОтправкиСФПокупателюОператором = СвойстваДокумента.Дата;
			Если СвойстваДокумента.Текущий Тогда
				Событие = "ПолученПДО"
			КонецЕсли;
		ИначеЕсли СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП Тогда
			СостояниеОбработки.ИОППолучен = Истина;
			Если СвойстваДокумента.Текущий Тогда
				Событие = "ПолученИоП"
			КонецЕсли;
		ИначеЕсли СвойстваДокумента.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДП Тогда
			СостояниеОбработки.ИОППДОПолучен = Истина;
			Если СвойстваДокумента.Текущий Тогда
				Событие = "ПолученИоППДО"
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбменСКонтрагентамиПереопределяемый.ПослеВозникновенииСобытияПоЭлектронномуСчетуФактуре(
		ОбъектыУчета, Событие, СостояниеОбработки);
	
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеФормированияЭлектронногоДокумента
//
Процедура ПослеФормированияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	ОбменСКонтрагентамиПереопределяемый.ПослеФормированияЭлектронногоДокумента(ЭлектронныйДокумент);
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеУтвержденияЭлектронногоДокумента
//
Процедура ПослеУтвержденияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	ОбменСКонтрагентамиПереопределяемый.ПослеУтвержденияЭлектронногоДокумента(ЭлектронныйДокумент);
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеПодписанияЭлектронногоДокумента
//
Процедура ПослеПодписанияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	ОбменСКонтрагентамиПереопределяемый.ПослеПодписанияЭлектронногоДокумента(ЭлектронныйДокумент);
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеЗавершенияОбменаЭлектроннымДокументом
//
Процедура ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	ОбменСКонтрагентамиПереопределяемый.ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент);
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеАннулированияЭлектронногоДокумента
//
Процедура ПослеАннулированияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт	
	ОбменСКонтрагентамиПереопределяемый.ПослеАннулированияЭлектронногоДокумента(ЭлектронныйДокумент);	
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов
//
Процедура ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов(ЭлектронныйДокумент, ОписаниеДанных, КонтекстДиагностики) Экспорт	
	
	ДанныеДокумента = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ОписаниеДанных.ДвоичныеДанные);
	ОбъектыУчета = ОбъектыУчетаЭлектронныхДокументов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент)).ВыгрузитьКолонку("ОбъектУчета");
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьАктСверкиВзаиморасчетовПоДаннымПолучателя(ДанныеДокумента, ОбъектыУчета);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиРаботыБиблиотеки

// Определяет, включать ли прием информационной базой уведомлений от сервиса ЭДО.
// В случае, если использование включено, необходимо обеспечить доступность HTTP-сервиса /hs/events/newdocs.
// В частности, при публикации прикладного решения в модели сервиса необходимо опубликовать HTTP-сервис "ЭДО" с basic-авторизацией.
// Логин и пароль пользователя указаны в методе ОбменСКонтрагентами.СоздатьСлужебногоПользователяОповещенийЭДО.
// 
// Возвращаемое значение:
//  Булево - если истина, то оповещения используются.
//
Функция ИспользоватьОповещенияОтСервисаЭДО() Экспорт
	
	Использовать = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеИспользованияУведомлений(Использовать);
	
	Возврат Использовать;
	
КонецФункции

Функция ИспользоватьОбменЭлектроннымиДокументамиМеждуОрганизациями() Экспорт
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями(Отказ);
	
	Возврат Не Отказ;
	
КонецФункции

Функция РазрешеноИспользоватьВнутреннийЭДО() Экспорт
	
	Использовать = Истина;
	ОбменСКонтрагентамиПереопределяемый.РазрешеноИспользоватьВнутреннийЭДО(Использовать);
	Возврат Использовать;
	
КонецФункции

Функция ДоступноИспользованиеВнутреннегоЭДО() Экспорт
	
	Результат = Ложь;
	
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.Типы() Цикл
		СтроковоеПредставлениеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип);
		ОписаниеТипов = Новый ОписаниеТипов(СтроковоеПредставлениеТипа);
		ПустаяСсылка = ОписаниеТипов.ПривестиЗначение();
		Попытка
			ОписаниеОбъекта = ОписаниеОбъектаУчета(ПустаяСсылка);
			Для каждого СтрокаОписания Из ОписаниеОбъекта Цикл
				Если СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Результат Тогда
				Прервать;
			КонецЕсли;
		Исключение
			ИмяСобытия = НСтр("ru = 'Получение идентификаторов объектов учета внутреннего электронного документа'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтроковоеПредставлениеТипа + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтрольДоступа

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияПоОбъектамУчетаЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОбъектыУчетаДокументовЭДО, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.СостоянияПоОбъектамУчетаЭДО.Чтение.Организации
	|РегистрСведений.СостоянияПоОбъектамУчетаЭДО.Изменение.Организации
	|РегистрСведений.ОбъектыУчетаДокументовЭДО.Чтение.Организации
	|РегистрСведений.ОбъектыУчетаДокументовЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлектронныхДокументов

// Выполняется при формировании электронного документа.
// Вызывается внутри транзакции записи электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - новый ЭлектронныйДокумент.
//  Состояние - Перечисление.СостоянияДокументовЭДО - состояние электронного документа.
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументов - основания электронного документа.
//
Процедура ПриФормированииЭлектронногоДокумента(ЭлектронныйДокумент, Состояние, НаборОбъектовУчета) Экспорт
	
	Если НаборОбъектовУчета = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, ЭлектронныйДокумент);
	
КонецПроцедуры

// Выполняется при изменении состояния электронного документа.
// Вызывается внутри транзакции изменения электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ЭлектронныйДокумент.
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние электронного документа.
// 	КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
//
Процедура ПриИзмененииСостоянияЭлектронногоДокумента(ЭлектронныйДокумент, Состояние, КонтекстДиагностики) Экспорт
	
	ОбновитьСостояниеЭлектронногоДокументаОбъектовУчета(ЭлектронныйДокумент);
	
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеНовогоЭлектронногоДокумента
Процедура ПриЗагрузкеНовогоЭлектронногоДокумента(ЭлектронныйДокумент, ВидДокумента, СостояниеЭДО, ИсправленнаяВерсияДокумента, КонтекстДиагностики) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсправленнаяВерсияДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.СпособОбработки
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента = &ВидДокумента
		|	И ОбъектыУчетаДокументовЭДО.Актуальный";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ИсправленнаяВерсияДокумента);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборОбъектовУчета = Новый Массив;
	СпособыОбработкиОбъектовУчета = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборОбъектовУчета.Добавить(Выборка.ОбъектУчета);
		СпособыОбработкиОбъектовУчета.Вставить(Выборка.ОбъектУчета, Выборка.СпособОбработки);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СпособыОбработкиОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСпособыОбработкиОбъектовУчетаЭлектронногоДокумента(ЭлектронныйДокумент, СпособыОбработкиОбъектовУчета);
	УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, ЭлектронныйДокумент);
	
КонецПроцедуры

// Событие возникает после загрузки всех сообщений для новых документов.
// 
// Параметры:
//  ЗагруженныйДокумент - См. ЭлектронныеДокументыЭДО.НовыеСведенияЗагруженногоДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
Процедура ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики) Экспорт
	
	ДанныеДляОтраженияДокументовВУчете = Новый Массив;
	
	ДанныеДокумента = ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
	ДанныеДокумента.ЭлектронныйДокумент = ЗагруженныйДокумент.ЭлектронныйДокумент;
	ДанныеДокумента.ВидДокумента = ЗагруженныйДокумент.ВидДокумента;
	ДанныеДокумента.ТипДокумента = ЗагруженныйДокумент.ТипДокумента;		
	ДанныеДокумента.Отправитель = ЗагруженныйДокумент.Контрагент;
	ДанныеДокумента.Получатель = ЗагруженныйДокумент.Организация;
	ДанныеДокумента.ИдентификаторОтправителя = ЗагруженныйДокумент.ИдентификаторОтправителя;
	ДанныеДокумента.ИдентификаторПолучателя = ЗагруженныйДокумент.ИдентификаторПолучателя;
	ДанныеДокумента.ДанныеОсновногоФайла = ЗагруженныйДокумент.ОписаниеДанных;
	ДанныеДокумента.ДанныеДополнительногоФайла = ЗагруженныйДокумент.ОписаниеДополнительныхДанных;
	
	ДанныеДляОтраженияДокументовВУчете.Добавить(ДанныеДокумента);
	
	Если ЗначениеЗаполнено(ЗагруженныйДокумент.ИсправленнаяВерсияДокумента) Тогда
		ВыполнятьКонтрольПроведенных = Истина;
		ВключитьКонтрольОтраженияВУчете(ДанныеДляОтраженияДокументовВУчете, ВыполнятьКонтрольПроведенных);
		Возврат;
	КонецЕсли;
	
	ОтразитьВУчетеЭлектронныеДокументы(ДанныеДляОтраженияДокументовВУчете);
	
КонецПроцедуры

Процедура ПриУстановкеПометкиУдаленияДокумента(ЭлектронныйДокумент, ПометкаУдаления, Отказ) Экспорт
	Если ПометкаУдаления Тогда
		ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Обновление

#Область КонтрольОтраженияВУчете

Процедура Обновление_ВыполнитьКонтрольОтраженияВУчете(ЭлектронныйДокумент) Экспорт

	ДанныеДокументаДляОтраженияВУчете = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент));
	ВключитьКонтрольОтраженияВУчете(ДанныеДокументаДляОтраженияВУчете);
	
КонецПроцедуры

#КонецОбласти

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_1

#Область РегистрыСведений_КонтрольОтраженияВУчетеЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("09e42776-c28d-4877-bd17-47346f568300");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументВходящийЭДО,"
		+ "РегистрСведений.КонтрольОтраженияВУчетеЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.КонтрольОтраженияВУчетеЭДО";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление контроля отражения в учете электронных документов.
	|Раздел """"Отразить в учете"""" в текущих делах ЭДО может быть заполнен не полностью.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
	НоваяСтрока.Порядок = "Любой";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

#Область Версия_1_9_3

#Область РегистрыСведений_ОбъектыУчетаДокументовЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.ОбъектыУчетаДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("009e6885-afd3-48b1-9c33-1d098a23dca6");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.ОбъектыУчетаДокументовЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ОбъектыУчетаДокументовЭДО,"
		+ "РегистрСведений.УдалитьАктуальныеДокументыЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ОбъектыУчетаДокументовЭДО";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ОбъектыУчетаДокументовЭДО,"
		+ "РегистрСведений.УдалитьАктуальныеДокументыЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление актуальных электронных документов объектов учета.
		|Открыть существующие электронные документы из объектов учета временно невозможно.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#КонецОбласти

#Область Версия_1_9_9

#Область РегистрыСведений_СостоянияПоОбъектамУчетаЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.9.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d0203f00-4071-4c8a-b9a0-f9193b1ccd7e");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.УдалитьАктуальныеДокументыЭДО," +
		"РегистрСведений.СостоянияПоОбъектамУчетаЭДО," +
		"Документ.ЭлектронныйДокументВходящийЭДО," + 
		"Документ.ЭлектронныйДокументИсходящийЭДО";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.УдалитьАктуальныеДокументыЭДО";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.УдалитьАктуальныеДокументыЭДО," +
		"РегистрыСведений.СостоянияПоОбъектамУчетаЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: преобразование данных об актуальных ЭД.
		|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящийЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";	
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ОснованиеНовогоЭлектронногоДокумента

// Возвращает описание основания электронного документа по объекту учета.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
// Возвращаемое значение:
//  см. НовоеОписаниеОснованияЭлектронногоДокумента
//
Функция ОписаниеОснованияЭлектронногоДокумента(Знач ОбъектУчета) Экспорт

	Описание = НовоеОписаниеОснованияЭлектронногоДокумента();
	СтандартнаяОбработка = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ПриПолученииОписанияОснованияЭлектронногоДокумента(
		ОбъектУчета, Описание, СтандартнаяОбработка);
	
	Если Не ЗначениеЗаполнено(Описание.Вид) Тогда
		МетаданныеОснования = ОбъектУчета.Метаданные();
		Описание.Вид = МетаданныеОснования.Синоним;
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат Новый ФиксированнаяСтруктура(Описание);
	КонецЕсли;
	
	Реквизиты = ЗначенияРеквизитовОбъектаУчета(ОбъектУчета, "Дата,Номер,Организация,Контрагент,СуммаДокумента");
	
	ЗаполнитьЗначенияСвойств(Описание, Реквизиты);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

// Проверяет адрес на соответствие структурированному формату ФНС. Если в сведении об адресе
// заполнены специфичные для ФИАС поля, то он не поместится в формат ФНС.
//
// Параметры:
//  Адрес - см. РаботаСАдресами.СведенияОбАдресе
//
// Возвращаемое значение:
//  Булево - Истина, если адрес соответствует структурированному формату ФНС.
//
Функция АдресСоответствуетСтруктурированномуФорматуФНС(Адрес) Экспорт
	
	Если Адрес.ТипАдреса <> "Административно-территориальный"
		Или ЗначениеЗаполнено(Адрес.Территория)
		Или Адрес.Корпуса.Количество() > 1
		Или Адрес.Помещения.Количество() > 1 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Индекс = Адрес.Индекс;
	КодРегиона = Адрес.КодРегиона;
	Район = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
	Город = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
	НаселенныйПункт = ПредставлениеАдресногоЭлемента(Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
	Улица = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
	Дом = ПредставлениеАдресногоЭлемента(НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
	Если Адрес.Корпуса.Количество() Тогда
		Корпус = ПредставлениеАдресногоЭлемента(НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
	Иначе
		Корпус = "";
	КонецЕсли;
	Если Адрес.Помещения.Количество() Тогда
		Квартира = ПредставлениеАдресногоЭлемента(НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
	Иначе
		Квартира = "";
	КонецЕсли;
	
	Если СтрДлина(Индекс) <> 6
		Или СтрДлина(КодРегиона) <> 2
		Или СтрДлина(Район) > 50
		Или СтрДлина(Город) > 50
		Или СтрДлина(НаселенныйПункт) > 50
		Или СтрДлина(Улица) > 50
		Или СтрДлина(Дом) > 20
		Или СтрДлина(Корпус) > 20
		Или СтрДлина(Квартира) > 20 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПредставлениеАдресногоЭлемента(ПервыйЭлемент = "", ВторойЭлемент = "", ТретийЭлемент = "") Экспорт

	МассивСоставляющих = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйЭлемент) Тогда
		МассивСоставляющих.Добавить(ПервыйЭлемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВторойЭлемент) Тогда
		МассивСоставляющих.Добавить(ВторойЭлемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТретийЭлемент) Тогда
		МассивСоставляющих.Добавить(ТретийЭлемент);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСоставляющих, " ");

КонецФункции

#КонецОбласти

Функция ОписаниеТиповОснованийЭлектронныхДокументов() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
КонецФункции

Функция ОписаниеТиповПрикладныхЭлектронныхДокументов() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип;
КонецФункции

Функция ОписаниеОбъектовУчетаВнутреннихЭлектронныхДокументов() Экспорт
	
	Возврат ИнтеграцияЭДОПовтИсп.ОписаниеОбъектовУчетаВнутреннихЭлектронныхДокументов();
	
КонецФункции

// Возвращает признак использования прямого обмена в прикладном решении.
//
// Возвращаемое значение:
//  Булево - Истина, если используется, иначе Ложь.
//
Функция ИспользоватьПрямойОбмен() Экспорт
	
	ИспользоватьПрямойОбмен = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ИспользоватьПрямойОбмен(ИспользоватьПрямойОбмен);
	
	Возврат ИспользоватьПрямойОбмен;
	
КонецФункции

// Возвращает признак использования договоров контрагентов в прикладном решении.
Функция ИспользуютсяДоговорыКонтрагентов() Экспорт
	Возврат ИнтеграцияЭДОПовтИсп.ИспользуютсяДоговорыКонтрагентов();
КонецФункции

Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	ЕстьПравоОткрытияЖурналаРегистрации = Ложь;
	ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОткрытияЖурналаРегистрации(ЕстьПравоОткрытияЖурналаРегистрации);
	Возврат ЕстьПравоОткрытияЖурналаРегистрации;
	
КонецФункции

// Возвращает доступные профили настроек отражения входящих документов.
//
// Возвращаемое значение:
//  Структура - Доступные профили.
//
Функция ПрофилиНастроекОтраженияВходящихДокументов() Экспорт
	
	ПрофилиНастроек = Новый Структура;	
	ПрофилиНастроек.Вставить("Автоматически", "Автоматически");
	ПрофилиНастроек.Вставить("Вручную", "Вручную");
	ПрофилиНастроек.Вставить("НеОтражать", "НеОтражать");
	ПрофилиНастроек.Вставить("Поставщик", "Поставщик");
	ПрофилиНастроек.Вставить("Покупатель", "Покупатель");
	ПрофилиНастроек.Вставить("ПервоначальноеЗаполнение", "ПервоначальноеЗаполнение");
	
	Возврат ПрофилиНастроек;
	
КонецФункции

Функция ТаблицаПредопределенногоПрофиля(Профиль) Экспорт 
	
	ДоступныеПрофили = ПрофилиНастроекОтраженияВходящихДокументов();
	
	ТаблицаПрофиля = Новый ТаблицаЗначений;
	ТаблицаПрофиля.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ТаблицаПрофиля.Колонки.Добавить("ПрикладнойТипДокумента", ОписаниеТиповПрикладныхЭлектронныхДокументов());
	ТаблицаПрофиля.Колонки.Добавить("СпособОбработки", Новый ОписаниеТипов("Строка"));
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ИсключаемыеТипы.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	
	ИспользуемыеТипыДокументов = ИспользуемыеТипыДокументов();
	
	ТипыДокументов = Новый Массив;
	Для Каждого КлючИЗначение Из ИспользуемыеТипыДокументов Цикл
		ТипДокумента = КлючИЗначение.Ключ;
		
		Если ИсключаемыеТипы.Найти(ТипДокумента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлектронныеДокументыЭДО.ЭтоТипДокументаИнтеркампани(ТипДокумента)
			И КлючИЗначение.Значение.ИспользоватьДляВходящих Тогда
			
			ТипыДокументов.Добавить(ТипДокумента);
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		СписокОпераций = СписокОперацийТипаДокумента(ТипДокумента, Истина);
		
		Для Каждого ЭлементСписка Из СписокОпераций Цикл
			Если ЭлементСписка.Пометка Тогда
				СпособОбработки = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Профиль = ДоступныеПрофили.Вручную Тогда
			СпособОбработки = СпособОбработки_Вручную();
		ИначеЕсли Профиль = ДоступныеПрофили.НеОтражать Тогда
			СпособОбработки = СпособОбработки_НеОтражать();
			
		ИначеЕсли Профиль = ДоступныеПрофили.ПервоначальноеЗаполнение И СписокОпераций.Количество() > 3 Тогда
			СпособОбработки = СпособОбработки_Вручную();
		ИначеЕсли Профиль = ДоступныеПрофили.Поставщик Тогда
			Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда
				
				СпособОбработки = СпособОбработки_Вручную();
			КонецЕсли;
		ИначеЕсли Профиль = ДоступныеПрофили.Покупатель Тогда
			Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда
				
				СпособОбработки = СпособОбработки_Вручную();
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПрофиля.Добавить();
		НоваяСтрока.ТипДокумента       = ТипДокумента;
		НоваяСтрока.СпособОбработки    = СпособОбработки;
	КонецЦикла;
	
	ПрикладныеТипыДокументов = ПрикладныеТипыЭлектронныхДокументов();
	Если ЗначениеЗаполнено(ПрикладныеТипыДокументов) Тогда
		Для Каждого ПрикладнойТипДокумента Из ПрикладныеТипыДокументов Цикл
			СписокОпераций = СписокОперацийТипаДокумента(ПрикладнойТипДокумента, Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Профиль = ДоступныеПрофили.Вручную Тогда
				СпособОбработки = СпособОбработки_Вручную();
			ИначеЕсли Профиль = ДоступныеПрофили.НеОтражать Тогда
				СпособОбработки = СпособОбработки_НеОтражать();			
			ИначеЕсли Профиль = ДоступныеПрофили.ПервоначальноеЗаполнение И СписокОпераций.Количество() > 3 Тогда
				Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
					СпособОбработки = СпособОбработки_Вручную();
				КонецЕсли;				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
			НоваяСтрока.ПрикладнойТипДокумента = ПрикладнойТипДокумента;
			НоваяСтрока.СпособОбработки = СпособОбработки;
			
		КонецЦикла;
	КонецЕсли;
		
	ОбменСКонтрагентамиПереопределяемый.ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля, Профиль);
	
	Возврат ТаблицаПрофиля;	
	
КонецФункции

Функция СуществуетДокументСоСтатусомОтраженияВУчете(Статус) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронныеДокументы.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|		ПО ЭлектронныеДокументы.Ссылка = КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	НЕ ЭлектронныеДокументы.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА КонтрольОтраженияВУчетеЭДО.СопоставитьНоменклатуру
		|				ТОГДА ""СопоставитьНоменклатуру""
		|			КОГДА КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент
		|				ТОГДА ""СоздатьУчетныйДокумент""
		|			КОГДА КонтрольОтраженияВУчетеЭДО.ПровестиУчетныйДокумент
		|				ТОГДА ""ПровестиУчетныйДокумент""
		|			ИНАЧЕ """"
		|		КОНЕЦ = &Статус";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СостоянияКонтроляОтраженияВУчете() Экспорт
	
	СостоянияКонтроля = Новый Структура;
	
	СостоянияКонтроля.Вставить("СопоставитьНоменклатуру", "СопоставитьНоменклатуру");
	СостоянияКонтроля.Вставить("СоздатьУчетныйДокумент",  "СоздатьУчетныйДокумент");
	СостоянияКонтроля.Вставить("ПровестиУчетныйДокумент", "ПровестиУчетныйДокумент");
	
	Возврат СостоянияКонтроля;
	
КонецФункции

Функция СтатусКонтроляОтраженияВУЧете(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КонтрольОтраженияВУчетеЭДО.СопоставитьНоменклатуру
		|			ТОГДА ""СопоставитьНоменклатуру""
		|		КОГДА КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент
		|			ТОГДА ""СоздатьУчетныйДокумент""
		|		КОГДА КонтрольОтраженияВУчетеЭДО.ПровестиУчетныйДокумент
		|			ТОГДА ""ПровестиУчетныйДокумент""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|ГДЕ
		|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Статус;
	КонецЦикла;

	Возврат "";
	
КонецФункции

Функция ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок) Экспорт
	
	Если Не ЗначениеЗаполнено(МассивСсылок) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не НастройкиЭДО.ЕстьПравоНастройкиОбмена() Тогда
		Возврат "";
	КонецЕсли;
	
	ВыводитьНавигационнуюСсылку = Ложь;
	
	ОписаниеОбъектаУчета = ОписанияОбъектовУчета(МассивСсылок);
	Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
		КлючНастроек = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(СтрокаОписания);
		Настройки = НастройкиЭДО.НастройкиОтправки(КлючНастроек);
		Если Настройки = Неопределено Или СтатусПриглашения(Настройки) = Перечисления.СтатусыПриглашений.Отклонено Тогда
			ВыводитьНавигационнуюСсылку = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьНавигационнуюСсылку Тогда
		ТекстНавигационнойСсылки = "";
		ЗаполнитьТекстПриглашенияКЭДО(ТекстНавигационнойСсылки, СтрокаОписания, Ложь);
		Если ЗначениеЗаполнено(ТекстНавигационнойСсылки) Тогда
			ШаблонНавигационнойСсылки = НСтр("ru = '<a href = ""Реклама1СЭДО"">%1</a>'");
			ДополнительнаяИнформация.Текст    = СтрШаблон(ШаблонНавигационнойСсылки, ТекстНавигационнойСсылки);
			ДополнительнаяИнформация.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОтветственныйПоДокументуЭДО(Организация, Контрагент, Договор) Экспорт
	
	Ответственный = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(Контрагент, Организация, Договор, Ответственный);
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Возврат Ответственный;
	
КонецФункции

Функция ПустойПрикладнойТипЭлектронногоДокумента() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.ПривестиЗначение();
КонецФункции

Функция ПустоеОснованиеЭлектронногоДокумента() Экспорт
	Возврат ОписаниеТиповОснованийЭлектронныхДокументов().ПривестиЗначение();
КонецФункции

Функция КомандыПечатиДляВнутреннегоЭДО(ОбъектМетаданных) Экспорт
	
	ДоступныеКоманды = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	
	КомандыПечати = ИнтеграцияБСПБЭД.КомандыПечатиСМенеджерамиПечати(ОбъектМетаданных);
	ЗапрещенныеКоманды = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(ЗапрещенныеКоманды);
	УникальныеКоманды = Новый Массив;
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если ЗначениеЗаполнено(КомандаПечати.Идентификатор)
			И ЗапрещенныеКоманды.Найти(КомандаПечати.Идентификатор) = Неопределено 
			И УникальныеКоманды.Найти(КомандаПечати.Идентификатор) = Неопределено Тогда
				УникальныеКоманды.Добавить(КомандаПечати.Идентификатор);
				СтрокаКоманды = ДоступныеКоманды.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКоманды, КомандаПечати);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеКоманды;
	
КонецФункции

// Команды печати для отправки неформализованного ЭДО.
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
//  ИмяФормыОбъекта - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
Функция КомандыПечатиДляОтправкиНеформализованногоЭДО(ОбъектМетаданных, ИмяФормыОбъекта = "") Экспорт
	
	ДоступныеКоманды = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	
	КомандыПечати = ИнтеграцияБСПБЭД.КомандыПечатиФормыОбъекта(ОбъектМетаданных, ИмяФормыОбъекта);
	
	ЗапрещенныеКоманды = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(
		ЗапрещенныеКоманды);
	
	УникальныеКоманды = Новый Соответствие();
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если ЗначениеЗаполнено(КомандаПечати.Идентификатор)
			И ЗапрещенныеКоманды.Найти(КомандаПечати.Идентификатор) = Неопределено 
			И УникальныеКоманды[КомандаПечати.Идентификатор] <> Истина Тогда
				
				УникальныеКоманды[КомандаПечати.Идентификатор] = Истина;
				СтрокаКоманды = ДоступныеКоманды.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКоманды, КомандаПечати);
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДоступныеКоманды;
	
КонецФункции

Функция ПечатныеФормыДокументов(КомандаПечатиВФайл, МассивОбъектовУчета, ТипФайла = Неопределено) Экспорт
	
	Если ТипФайла = Неопределено Тогда
		ТипФайлаПечатнойФормы = ТипФайлаТабличногоДокумента.PDF;
	Иначе
		ТипФайлаПечатнойФормы = ТипФайла;
	КонецЕсли;
	
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения.Добавить(ТипФайлаПечатнойФормы);
	
	РезультатПечати = УправлениеПечатью.НапечататьВФайл(КомандаПечатиВФайл, МассивОбъектовУчета, НастройкиСохранения);
	
	Возврат РезультатПечати;
	
КонецФункции

Функция ПечатнаяФормаЗапрещенаДляФормированияДокумента(ИдентификаторПечатнойФормы) Экспорт
	
	ЗапрещенныеКоманды = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(ЗапрещенныеКоманды);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
		МодульОбменСГИСЭПД.ПриОпределенииПечатныхФормЗапрещенныхДляФормированияДокумента(ЗапрещенныеКоманды);
	КонецЕсли;
	
	Результат = ЗапрещенныеКоманды.Найти(ИдентификаторПечатнойФормы) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСТипамиДокументовСлужебная

Функция ВидДокументаПоТипу(Тип)
	
	Если ТипЗнч(Тип) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		Результат = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Тип);
	Иначе // это прикладной тип документа
		Результат = ЭлектронныеДокументыЭДО.ВидДокументаПоПрикладномуТипу(Тип); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипСкорректированныйПоПрикладнымНастройкам(ПараметрыИсточника, ВариантФормированияУниверсальныхДокументов)
	
	ТипДокумента = ПараметрыИсточника.Тип;
	
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		
		ТекстИсключения = НСтр("ru = 'Передан недопустимый тип документа. Типы УПД и УКД использовать запрещено.
		|Для более подробной информации см. описание ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	КорректируемыеТипыДокументовУПД = Новый Массив;
	КорректируемыеТипыДокументовУПД.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	КорректируемыеТипыДокументовУПД.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	КорректируемыеТипыДокументовУПД.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);	
	КорректируемыеТипыДокументовУПД.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	
	КорректируемыеТипыДокументовУКД = Новый Массив;
	КорректируемыеТипыДокументовУКД.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	КорректируемыеТипыДокументовУКД.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	
	ВариантыФормированияУниверсальныхДокументов = ОбменСКонтрагентами.ВариантыФормированияУниверсальныхДокументов();
	
	Если Не ЗначениеЗаполнено(ВариантФормированияУниверсальныхДокументов) Тогда
		ВариантФормированияУниверсальныхДокументов = ВариантыФормированияУниверсальныхДокументов.Разрешено;	
	КонецЕсли;
		
	Если ВариантФормированияУниверсальныхДокументов = ВариантыФормированияУниверсальныхДокументов.Обязательно Тогда
		
		Если КорректируемыеТипыДокументовУПД.Найти(ТипДокумента) <> Неопределено Тогда
			ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД;
		ИначеЕсли КорректируемыеТипыДокументовУКД.Найти(ТипДокумента) <> Неопределено Тогда
			ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД;
		КонецЕсли;
		
	ИначеЕсли ВариантФормированияУниверсальныхДокументов = ВариантыФормированияУниверсальныхДокументов.Разрешено Тогда
		
		ИспользованиеУПД_УКД = НастройкиЭДО.ИспользуетсяУПД_УКД(ПараметрыИсточника.Организация,
			ПараметрыИсточника.Контрагент, ПараметрыИсточника.ДоговорКонтрагента);
		
		Если КорректируемыеТипыДокументовУПД.Найти(ТипДокумента) <> Неопределено 
			И ИспользованиеУПД_УКД.ИспользуетсяУПД Тогда
				
			ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД;
			
		ИначеЕсли КорректируемыеТипыДокументовУКД.Найти(ТипДокумента) <> Неопределено
			И ИспользованиеУПД_УКД.ИспользуетсяУКД Тогда
				
			ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД;
			
		КонецЕсли;	
			
	КонецЕсли;
	
	Возврат ТипДокумента;
		
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

// Обработчик события "ПередЗаписью" документов, которые могут являться основанием для исходящего электронного документа.
//
// Параметры:
//  Источник - см. ПодпискаНаСобытие.ПередЗаписьюДокументаОбъектаУчетаЭДО
//  Отказ - Булево - отказ от записи.
//  РежимЗаписи -  РежимЗаписиДокумента - режим записи.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения.
//
Процедура ПередЗаписьюДокументаОбъектаУчетаЭДО(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБЭД.ОбъектВРежимеГрупповогоПерепроведения(Источник)
		ИЛИ Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюОбъектаУчетаДокументаЭДО(Источник, Отказ);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" объектов, которые могут являться основанием для исходящего электронного документа.
//
// Параметры:
//  Источник - см. ПодпискаНаСобытие.ПриЗаписиДокументаОбъектаУчетаЭДО
//  Отказ - Булево - отказ от записи.
//
Процедура ПриЗаписиДокументаОбъектаУчетаЭДО(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗаписиОбъектаДокументаЭДО(Источник, Отказ);
	
КонецПроцедуры

// Обработчик события "При записи" учетного документ.
// Для электронных документов, связанных с данным учетным документом,
// выполняется контроль проведения учетных документов.
//
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиУчетногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетныйДокумент = Источник.Ссылка;
	
	НаборЭлектронныхДокументов = ЭлектронныеДокументыОбъектовУчета(УчетныйДокумент).ВыгрузитьКолонку("ЭлектронныйДокумент");
		
	ВходящиеДокументы = Новый Массив;	
		
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			ВходящиеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Документ Из ВходящиеДокументы Цикл	
		ВыполнитьКонтрольПроведенияУчетныхДокументов(Документ);	
	КонецЦикла;
	
	Проверки = Новый Массив;
	Проверки.Добавить("ПровестиУчетныйДокумент");
	
	ВыполнитьКонтрольОтраженияВУчете(ВходящиеДокументы, Проверки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" регистра сведений НоменклатураКонтрагентовБЭД.
// Отключает контроль сопоставления по той номенклатуре контрагента, которой установлено соответствие с номенклатурой ИБ.
// Те электронные документы, которые содержали сопоставленные строки, проверяются повторно на наличие еще несопоставленных строк.
//
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиНоменклатурыКонтрагентов(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Владелец КАК Владелец,
	|	НоменклатураКонтрагентов.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатураКонтрагентов
	|ИЗ
	|	&НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контроль.Владелец КАК Владелец,
	|	Контроль.Идентификатор КАК Идентификатор,
	|	втНоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагентов КАК втНоменклатураКонтрагентов
	|		ПО Контроль.Владелец = втНоменклатураКонтрагентов.Владелец
	|			И Контроль.Идентификатор = втНоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	&УсловиеПоВладельцу
	|	И &УсловиеПоИдентификатору";
	Запрос.УстановитьПараметр("НоменклатураКонтрагентов", Источник.Выгрузить());
	
	УсловиеПоВладельцу = "ИСТИНА";
	Если Источник.Отбор.Владелец.Использование Тогда
		УсловиеПоВладельцу = "Контроль.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Источник.Отбор.Владелец.Значение);
	КонецЕсли;
	УсловиеПоИдентификатору = "ИСТИНА";
	Если Источник.Отбор.Идентификатор.Использование Тогда
		УсловиеПоИдентификатору = "Контроль.Идентификатор = &Идентификатор";
		Запрос.УстановитьПараметр("Идентификатор", Источник.Отбор.Идентификатор.Значение);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВладельцу", УсловиеПоВладельцу);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификатору", УсловиеПоИдентификатору);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаОтключение = Новый Массив; 
	
	НеУдалятьЗапись = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("НеУдалятьЗапись") Тогда
		НеУдалятьЗапись = Источник.ДополнительныеСвойства.НеУдалятьЗапись;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		СопоставлениеВыполнено = ЗначениеЗаполнено(Выборка.Номенклатура) ИЛИ (Выборка.Номенклатура = NULL И НЕ НеУдалятьЗапись);
		Если СопоставлениеВыполнено Тогда
			НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Выборка);
			НаОтключение.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЭлектронныхДокументов = ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентов(НаОтключение);
	
	Проверки = Новый Массив;
	Проверки.Добавить("СопоставитьНоменклатуру");
	
	ВыполнитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов, Проверки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" справочников, которые могут быть основанием для исходящего электронного документа.
//
// Параметры:
//  Источник - см. ПодпискаНаСобытие.ПередЗаписьюСправочникаОбъектаУчетаЭДО
//  Отказ - Булево - отказ от записи.
//
Процедура ПередЗаписьюСправочникаОбъектаУчетаЭДО(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюОбъектаУчетаДокументаЭДО(Источник, Отказ, Истина);
	
КонецПроцедуры

// Параметры:
//  Источник - см. ПодпискаНаСобытие.ПередЗаписьюДокументаОбъектаУчетаЭДО
//           - см. ПодпискаНаСобытие.ПередЗаписьюСправочникаОбъектаУчетаЭДО
//  Отказ - Булево - отказ от записи.
//  ЗаписьЭлементаСправочника - Булево - объектом учета является элемент справочника.
//
Процедура ПередЗаписьюОбъектаУчетаДокументаЭДО(Источник, Отказ, ЗаписьЭлементаСправочника = Ложь)
	
	ДокументооборотНастроен = Ложь;
	ЕстьНаправлениеЭДОВнутренний = Ложь;
	ЕстьНаправлениеЭДОИсходящий = Ложь;
	
	ОписаниеОбъектаУчета = ОписаниеОбъектаУчета(Источник);
	
	Для Каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаОписания.Направление) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументооборотНастроен = ДокументооборотНастроен Или ДокументооборотНастроен(СтрокаОписания);
		
		ЕстьНаправлениеЭДОВнутренний = ЕстьНаправлениеЭДОВнутренний 
			Или (СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Внутренний);
		
		ЕстьНаправлениеЭДОИсходящий = ЕстьНаправлениеЭДОИсходящий 
			Или (СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Исходящий);
		
	КонецЦикла;
	
	Если Не ЕстьНаправлениеЭДОИсходящий И Не ЕстьНаправлениеЭДОВнутренний Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИзменений = ОписаниеИзмененийОснованияЭлектронногоДокумента(Источник, Отказ, ЗаписьЭлементаСправочника);
	
	Если Не ДокументооборотНастроен Тогда
		ОписаниеИзменений.УчаствуетВОбмене = Ложь;
	КонецЕсли;

	ОписаниеИзменений.ЭтоНовый = Источник.ЭтоНовый();

	Если ЕстьНаправлениеЭДОВнутренний
		И НастройкиЭДО.ИспользуютсяВнутренниеДокументы()
		И ОписаниеИзменений.ТребуетсяКонтрольАктуальности
		И ДокументооборотНастроен Тогда
		ЗапуститьПроверкуАктуальностиВнутреннегоЭД(Источник.Ссылка, Отказ);
	КонецЕсли;
	
	ДополнительныеСвойстваЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Источник.ДополнительныеСвойства, "ОбменСКонтрагентами", Новый Структура);
	
	ДополнительныеСвойстваЭДО.Вставить("ОписаниеИзменений", ОписаниеИзменений);
	Источник.ДополнительныеСвойства.Вставить("ОбменСКонтрагентами", ДополнительныеСвойстваЭДО);

КонецПроцедуры

// Обработчик события "ПриЗаписи" объектов, которые могут являться основанием для исходящего электронного документа.
//
// Параметры:
//  Источник - см. ПодпискаНаСобытие.ПриЗаписиСправочникаОбъектаУчетаЭДО
//  Отказ - Булево - отказ от записи.
//
Процедура ПриЗаписиСправочникаОбъектаУчетаЭДО(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗаписиОбъектаДокументаЭДО(Источник, Отказ);
	
КонецПроцедуры

// Параметры:
//  Источник - см. ПодпискаНаСобытие.ПриЗаписиДокументаОбъектаУчетаЭДО
//           - см. ПодпискаНаСобытие.ПриЗаписиСправочникаОбъектаУчетаЭДО
//  Отказ - Булево - отказ от записи.
//
Процедура ПриЗаписиОбъектаДокументаЭДО(Источник, Отказ)

	ДополнительныеСвойстваЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Источник.ДополнительныеСвойства, "ОбменСКонтрагентами", Новый Структура);
	ОписаниеИзменений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойстваЭДО, "ОписаниеИзменений", Неопределено);
	Если ОписаниеИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОснованияЭлектронногоДокумента(Источник, ОписаниеИзменений);
	
КонецПроцедуры

#Область Контрагенты

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура КонтрагентПриЗаписи(Объект, Отказ) Экспорт 
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ИмяПрикладногоСправочника("Контрагенты");
	
	Если ОбщегоНазначенияБЭД.СправочникИспользуетГруппы(Метаданные.Справочники[ИмяПрикладногоСправочника])
		И Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	ИнтеграцияЭДОСобытия.ПриЗаписиКонтрагента(Объект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СобытияУчета

// Инициализирует описание изменений основания электронного документа.
//
// Возвращаемое значение:
//  Структура - описание изменений основания электронного документа:
//   * ИзмененыКлючевыеДанные - Булево - признак изменения ключевых данных, влияющих на электронный документ.
//   * УчаствуетВОбмене - Булево - признак участия основания в документообороте.
//   * ТребуетсяКонтрольАктуальности - Булево - признак необходимости контроля актуальности библиотекой.
//   * СостояниеЭлектронногоДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние ЭДО. 
//   * ЭтоНовый - Булево - определяет, записано ли основание электронного документа в базу данных.
//
Функция НовоеОписаниеИзмененийОснованияЭлектронногоДокумента()
	
	ОписаниеИзменений = Новый Структура;
	ОписаниеИзменений.Вставить("ИзмененыКлючевыеДанные", Ложь);
	ОписаниеИзменений.Вставить("УчаствуетВОбмене", Ложь);
	ОписаниеИзменений.Вставить("ТребуетсяКонтрольАктуальности", Истина);
	ОписаниеИзменений.Вставить("СостояниеЭлектронногоДокумента");
	ОписаниеИзменений.Вставить("ЭтоНовый", Ложь);
	
	Возврат ОписаниеИзменений;
	
КонецФункции

// Возвращает описание изменений основания электронного документа по ссылке и текущим данным объекта учета.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Отказ - Булево
//  ЗаписьЭлементаСправочника - Булево - Объектом учета является элемент справочника.
//
// Возвращаемое значение:
//  см. НовоеОписаниеИзмененийОснованияЭлектронногоДокумента
//
Функция ОписаниеИзмененийОснованияЭлектронногоДокумента(Знач ОбъектУчета, Отказ, ЗаписьЭлементаСправочника = Ложь)
	
	ИзмененыКлючевыеДанные = Не ЗначениеЗаполнено(ОбъектУчета.Ссылка);
	ТребуетсяКонтрольАктуальности = Истина;
	УчаствуетВОбмене = Истина;
	
	Состояние = СохраненноеСостояниеЭДООбъектаУчета(ОбъектУчета.Ссылка);
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Состояние = ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента();
	КонецЕсли;
	
	Если Не ЗаписьЭлементаСправочника Тогда
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента(
			ОбъектУчета, ИзмененыКлючевыеДанные, Состояние, УчаствуетВОбмене, ТребуетсяКонтрольАктуальности, Отказ);
	
	Иначе
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокументаЭлементСправочника(
			ОбъектУчета, ИзмененыКлючевыеДанные, Состояние, УчаствуетВОбмене, ТребуетсяКонтрольАктуальности, Отказ);
		
	КонецЕсли;
	
	ОписаниеИзменений = НовоеОписаниеИзмененийОснованияЭлектронногоДокумента();
	ОписаниеИзменений.ИзмененыКлючевыеДанные = ИзмененыКлючевыеДанные;
	ОписаниеИзменений.УчаствуетВОбмене = УчаствуетВОбмене;
	ОписаниеИзменений.ТребуетсяКонтрольАктуальности = ТребуетсяКонтрольАктуальности;
	ОписаниеИзменений.СостояниеЭлектронногоДокумента = Состояние;
	
	Возврат ОписаниеИзменений;
	
КонецФункции

// Выполняется при изменении объекта учета, который может являться основанием для исходящего электронного документа.
// Вызывается внутри транзакции записи изменений.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовДокументОбъектЭДО
//              - ОпределяемыйТип.ОснованияЭлектронныхДокументовСправочникОбъектЭДО
//  ОписаниеИзменений - см. НовоеОписаниеИзмененийОснованияЭлектронногоДокумента
//
Процедура ПриИзмененииОснованияЭлектронногоДокумента(Знач ОбъектУчета, Знач ОписаниеИзменений)
	
	Если ОписаниеИзменений.УчаствуетВОбмене Тогда
		
		Если Не СостояниеОбъектаУчетаУстановлено(ОбъектУчета.Ссылка) Тогда
			// Электронный документ отсутствует.
			ОчиститьАктуальныйЭлектронныйДокумент(ОбъектУчета.Ссылка);
			УстановитьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета.Ссылка);
			
		ИначеЕсли ОписаниеИзменений.ИзмененыКлючевыеДанные Тогда 
			Если НЕ ОписаниеИзменений.СостояниеЭлектронногоДокумента = ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента() Тогда
				// Электронный документ создан, но не соответствует основанию.
				ЗакрытьПринудительноЭлектронныйДокумент(ОбъектУчета);
			КонецЕсли;
			
			ОчиститьАктуальныйЭлектронныйДокумент(ОбъектУчета.Ссылка);
			УстановитьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета.Ссылка);
		КонецЕсли;
		
	Иначе
		
		ОчиститьАктуальныйЭлектронныйДокумент(ОбъектУчета.Ссылка);
		ОчиститьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаДокументооборота

// Возвращает признак настроен ли документооборот по описанию объекта учета.
//
// Параметры:
//  ОписаниеОбъектаУчета - см. НовоеОписаниеОбъектаУчета
//  
// Возвращаемое значение:
//  Булево
//
Функция ДокументооборотНастроен(ОписаниеОбъектаУчета)
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Интеркампани Тогда 
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастроек.Отправитель = ОписаниеОбъектаУчета.Организация;
		КлючНастроек.Получатель = ОписаниеОбъектаУчета.Контрагент;
		КлючНастроек.Договор = ОписаниеОбъектаУчета.Договор;
		КлючНастроек.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
		Настройки = НастройкиЭДО.НастройкиОтправки(КлючНастроек);		
	ИначеЕсли ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		Запросы = Новый Массив;
		
		ПолноеИмяМетаданныхОбъектаУчета = ОписаниеОбъектаУчета.ОбъектУчета.Метаданные().ПолноеИмя();
		ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяМетаданныхОбъектаУчета);
		
		ОтборНастроекВнутреннегоЭДО = НастройкиЭДО.НовыйОтборНастроекВнутреннегоЭДО();
		ОтборНастроекВнутреннегоЭДО.Организация = "&Организация";
		ОтборНастроекВнутреннегоЭДО.ПроизвольноеУсловие = "ВидВнутреннегоДокумента.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";		
		
		ЗапросНастроек = НастройкиЭДО.ЗапросНастроекВнутреннегоЭДО("НастройкиВнутреннегоЭДО", ОтборНастроекВнутреннегоЭДО);
		
		Запросы.Добавить(ЗапросНастроек);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
		|ИЗ
		|	НастройкиВнутреннегоЭДО";
		
		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
		ИтоговыйЗапрос.УстановитьПараметр("Организация", ОписаниеОбъектаУчета.Организация);
		ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаНастроек = ИтоговыйЗапрос.Выполнить().Выгрузить();
		Если ТаблицаНастроек.Количество() > 0 Тогда
			
			Настройки = Новый Структура(
				"Организация, ВидДокумента, Формировать, ВидПодписи, МаршрутПодписания, ЭтоОсновнойВидДокумента");
			ЗаполнитьЗначенияСвойств(Настройки, ТаблицаНастроек[0]);
			
			Для Каждого СтрокаТаблицыНастроек Из ТаблицаНастроек Цикл
				Если СтрокаТаблицыНастроек.Формировать Тогда
					ЗаполнитьЗначенияСвойств(Настройки, СтрокаТаблицыНастроек);
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
		Иначе
			Настройки = Неопределено;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);

	Иначе
	
		КлючНастроек = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Настройки = НастройкиЭДО.НастройкиОтправки(КлючНастроек);
		
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;

	
	Если Настройки = Неопределено Или Не Настройки.Формировать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Интеркампани
		Или ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда 
	 	Возврат Истина;
	Иначе
		Возврат Настройки.ГотовностьКОбмену;
	КонецЕсли;

КонецФункции

// Определяет, поддержана ли в документе диагностика ошибок.
//
// Параметры:
//  ОбъектУчета - ДокументСсылка, ДокументОбъект - учетный документ.
// 
// Возвращаемое значение:
//  Булево - если Истина - диагностика ошибок поддержана.
//
Функция ДиагностикаПоддержана(ОбъектУчета)
	
	СписокЭлементовСПоддержкойДиагностики = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииОбъектовМетаданныхСПоддержкойДиагностикиОшибок(
		СписокЭлементовСПоддержкойДиагностики);
	
	Возврат СписокЭлементовСПоддержкойДиагностики.Найти(ОбъектУчета.Метаданные()) <> Неопределено;
	
КонецФункции 

#КонецОбласти

#Область ГотовностьКДокументообороту

// Инициализирует описание проверки готовности объектов к документообороту.
//
// Параметры:
//  Готовые - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - готовые объекты.
//  Неготовые - Массив из см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - неготовые объекты.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - описание проверки готовности:
//   * Готовые - ФиксированныйМассив - готовые объекты.
//   * Неготовые - ФиксированныйМассив - неготовые объекты.
//
Функция НоваяПроверкаГотовностиКДокументообороту(Знач Готовые, Знач Неготовые)
	
	Проверка = Новый Структура;
	Проверка.Вставить("Готовые", Новый ФиксированныйМассив(Готовые));
	Проверка.Вставить("Неготовые", Новый ФиксированныйМассив(Неготовые));
	
	Возврат Новый ФиксированнаяСтруктура(Проверка);

КонецФункции

// Проверяет готовность прикладного электронного документа к отражению в учете.
// 
// Параметры:
//  ПараметрыОтражения - Структура - данные для подготовки к отражению в учете:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - отражаемый в учете электронный документ.
//   * ТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа. 
//   * СпособОбработки - Строка - выбранный способ отражения в учете.
//
Функция ПрикладнойЭлектронныйДокументГотовКОтражениюВУчете(ПараметрыОтражения)
	
	ГотовКОтражению = Истина;
	
	Если НЕ ИспользоватьСопоставлениеНоменклатуры(ПараметрыОтражения.ТипДокумента) Тогда
		Возврат ГотовКОтражению;
	КонецЕсли;
	
	СвойстваЭлектронногоДокумента = Новый Структура("СпособОбработки", ПараметрыОтражения.СпособОбработки);
	Настройки = Новый Структура("ОтражатьТолькоСопоставленные", Истина);
	ОбменСКонтрагентамиПереопределяемый.ПриОтраженииВУчетеПрикладногоЭлектронногоДокументаСНоменклатурой(
		СвойстваЭлектронногоДокумента, Настройки);
	Если Настройки.ОтражатьТолькоСопоставленные Тогда
		ОтборПоДокументу = ОтборНоменклатурыКонтрагентовНаКонтроле(ПараметрыОтражения.ЭлектронныйДокумент);
		ГотовКОтражению = НЕ ЗначениеЗаполнено(НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу));
	КонецЕсли;
	
	Возврат ГотовКОтражению;
	
КонецФункции

#КонецОбласти

#Область ОбъектыУчетаЭлектронныхДокументов

// Обновляет способы обработки объектов учета, прикрепленных к электронному документу.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ЭлектронныйДокумент.
//  СпособыОбработкиОбъектовУчета - Соответствие - описание:
//   * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объекты, прикрепляемые к электронному документу.
//   * Значение - Строка - способ обработки при отражении электронного документа.
//
Процедура ОбновитьСпособыОбработкиОбъектовУчетаЭлектронногоДокумента(Знач ЭлектронныйДокумент, Знач СпособыОбработкиОбъектовУчета)
	
	Для каждого Элемент Из СпособыОбработкиОбъектовУчета Цикл
		
		ОбъектУчета = Элемент.Ключ;
		СпособОбработки = Элемент.Значение;
		
		Набор = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.ОбъектУчета.Установить(ОбъектУчета);
		
		Набор.Прочитать();
		
		Если ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор[0];
		Иначе
			Запись = Набор.Добавить();
			Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
			Запись.ОбъектУчета = ОбъектУчета;
		КонецЕсли;
		
		Запись.СпособОбработки = СпособОбработки;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса для получения электронных документов, прикрепленных к объектам учета.
//
// Возвращаемое значение:
//  Строка - текст запроса с отбором по объекту учета.
//           Отбор выполняется по условию "В (&ОбъектУчета)".
//           Выбираемые поля: ЭлектронныйДокумент, ОбъектУчета, Актуальный.
//
Функция ТекстЗапросаЭлектронныхДокументовОбъектовУчета()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.Актуальный
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ОбъектУчета)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область АктуальныйЭлектронныйДокумент

// Сохраняет информацию о состоянии актуального электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ЭлектронныйДокумент.
//
Процедура ЗаписатьАктуальныйЭлектронныйДокумент(Знач ОбъектУчета, Знач ЭлектронныйДокумент)
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ОбъектУчета.Установить(ОбъектУчета);
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор.Добавить();
			Запись.ОбъектУчета = ОбъектУчета;
			Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		
		Если ТипЗнч(ОбъектУчета) <> Тип("СправочникСсылка.НастройкиЭДО") Тогда
			Запись.Актуальный = Истина;
		КонецЕсли;
		
		Набор.Записать();
		
		ОбновитьСостояниеЭДООбъектаУчета(ОбъектУчета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Запись информации о состоянии актуального электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

// Удаляет информацию о состоянии актуального электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ЭлектронныйДокумент - Неопределено, ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//                        Если заполнен, то удаляется из актуальных только он.
//
Процедура ОчиститьАктуальныйЭлектронныйДокумент(Знач ОбъектУчета, Знач ЭлектронныйДокумент = Неопределено)
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектУчета.Установить(ОбъектУчета);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			
			Если Не Запись.Актуальный Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлектронныйДокумент)
				И Запись.ЭлектронныйДокумент <> ЭлектронныйДокумент Тогда
				Продолжить;
			КонецЕсли;
			
			Запись.Актуальный = Ложь;
			
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
			ОбновитьСостояниеЭДООбъектаУчета(ОбъектУчета);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Очистка информации о состоянии актуального электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОснованиеНовогоЭлектронногоДокумента

// Инициализирует описание основания электронного документа.
//
// Возвращаемое значение:
//  Структура - описание основания электронного документа:
//   * Вид - Строка - название основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * СуммаДокумента - Число - сумма основания.
//
Функция НовоеОписаниеОснованияЭлектронногоДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("Вид", "");
	Описание.Вставить("Дата", Дата(1, 1, 1));
	Описание.Вставить("Номер", "");
	Описание.Вставить("Организация", Неопределено);
	Описание.Вставить("Контрагент", Неопределено);
	Описание.Вставить("СуммаДокумента", 0);
	
	Возврат Описание;
	
КонецФункции

// Назначает объект учета основанием нового электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
Процедура УстановитьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета)
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ЗаписатьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета, Описание);
	
КонецПроцедуры

// Сохраняет описание основания нового электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Описание - см. НовоеОписаниеОснованияЭлектронногоДокумента
//
Процедура ЗаписатьОснованиеНовогоЭлектронногоДокумента(ОбъектУчета, Знач Описание)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОбъектУчета);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		ОбновитьСостояние = Ложь;
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор.Добавить();
			Запись.СсылкаНаОбъект = ОбъектУчета;
			ОбновитьСостояние = Истина;
		КонецЕсли;
		
		Для каждого Запись Из Набор Цикл
			
			Запись.Вид = Описание.Вид;
			Запись.Дата = Описание.Дата;
			Запись.Номер = Описание.Номер;
			Запись.Организация = Описание.Организация;
			Запись.Контрагент = Описание.Контрагент;
			Запись.СуммаДокумента = Описание.СуммаДокумента;
			
		КонецЦикла;
		
		Набор.Записать();
		
		Если ОбновитьСостояние Тогда
			ОбновитьСостояниеЭДООбъектаУчета(ОбъектУчета);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Запись описания основания нового электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;
	
КонецПроцедуры

// Удаляет описание основания нового электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
//
Процедура ОчиститьОснованиеНовогоЭлектронногоДокумента(Знач ОбъектУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОбъектУчета);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		Если ЗначениеЗаполнено(Набор) Тогда
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Очистка сведений об основании нового электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Удаляет описание основания нового электронного документа.
//
// Параметры:
//  ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
//
Процедура ЗакрытьПринудительноЭлектронныйДокумент(Источник)
	
	СостоянияМожноЗакрывать = Новый Массив;
	СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
	СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением);
	
	СостоянияНетЭДО = Новый Массив;
	СостоянияНетЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
	СостоянияНетЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.Аннулирован);
	СостоянияНетЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);
	СостоянияНетЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	
	СостоянияМожноСформироватьИсправление = Новый Массив;
	СостоянияМожноСформироватьИсправление.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение);
	
	ШаблонСообщенияУспех = НСтр("ru='Электронный документ ""%1"" закрыт принудительно.
								|Создайте новый электронный документ, чтобы выполнить документооборот.'");
	
	ШаблонСообщенияСформированоИсправление = НСтр("ru='Сформировано исправление электронного документа ""%1""'");
	
	ШаблонСообщенияЭДОНеЗавешен = НСтр("ru='Электронный документ ""%1"" стал неактуальным. Так как он уже отправлен контрагенту, необходимо:
									   | - Аннулировать электронный документ (перейти к документу можно командой ""ЭДО -> Открыть электронные документы"")
										   | - Создать новый электронный документ (команда ""ЭДО -> Создать электронный документ"")'");
	
	ШаблонСообщенияЭДОЗавешен = НСтр("ru='Электронный документ ""%1"" стал неактуальным. Так как он уже подписан контрагентом, необходимо:
									 | - Аннулировать электронный документ (перейти к документу можно командой ""ЭДО -> Открыть электронные документы"")
									 | - Создать новую версию электронного документа (команда ""ЭДО -> Создать электронный документ"")'");
	
	// Проверяем состояния документов.
	
	АктуальныеЭлектронныеДокументы = АктуальныеЭлектронныеДокументы(Источник.Ссылка).ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	Если АктуальныеЭлектронныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлектронныйДокумент Из АктуальныеЭлектронныеДокументы Цикл
		
		ТекущееСостояние = ЭлектронныеДокументыЭДО.СостояниеДокумента(ЭлектронныйДокумент);
		Если СостоянияМожноСформироватьИсправление.Найти(ТекущееСостояние) <> Неопределено Тогда
			
			НаборДействий = Новый Соответствие;
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
				Перечисления.ДействияПоЭДО.СформироватьИсправление);
			
			ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
			ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
			
			ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
			
			ОчиститьАктуальныйЭлектронныйДокумент(Источник.Ссылка, ЭлектронныйДокумент);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияСформированоИсправление, ЭлектронныйДокумент);
			
			Если ДиагностикаПоддержана(Источник) Тогда
				
				Если Источник.ДополнительныеСвойства.Свойство("КонтекстОперации") Тогда
					КонтекстОперации = Источник.ДополнительныеСвойства.КонтекстОперации;
				Иначе
					КонтекстОперации = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
				КонецЕсли;
				
				ДополнительныеПараметрыОшибки = Новый Структура("СсылкаНаОбъект, ДополнительныеДанные", Источник.Ссылка, ПараметрыВыполненияДействийПоЭДО);
				Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Запись документа'"),
					ИнтеграцияЭДОКлиентСервер.ВидОшибкиОбновлениеВерсииЭДСформированоИсправление(), ТекстСообщения,
					ТекстСообщения, ДополнительныеПараметрыОшибки);
				ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстОперации, Ошибка, Ложь);
				
				Источник.ДополнительныеСвойства.Вставить("КонтекстОперации", КонтекстОперации);
				
			Иначе 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлектронныйДокумент);
			КонецЕсли;
			
		ИначеЕсли СостоянияМожноЗакрывать.Найти(ТекущееСостояние) <> Неопределено Тогда
			
			// Закрываем принудительно ЭД.
			ПричинаЗакрытия = НСтр("ru='Закрыт автоматически при изменении учетного документа.'");
			
			НаборДействий = Новый Соответствие;
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий,
				Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
			
			ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
			ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
			
			ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
			ПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
			ПараметрыДействия.Комментарий = ПричинаЗакрытия;
			ПараметрыВыполненияДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
				Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, ПараметрыДействия);
			
			НачатьТранзакцию();
			Попытка
				ОчиститьАктуальныйЭлектронныйДокумент(Источник.Ссылка, ЭлектронныйДокумент);
				ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияУспех, ЭлектронныйДокумент);
			
			Если ДиагностикаПоддержана(Источник) Тогда
				
				Если Источник.ДополнительныеСвойства.Свойство("КонтекстОперации") Тогда
					КонтекстОперации = Источник.ДополнительныеСвойства.КонтекстОперации;
				Иначе
					КонтекстОперации = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
				КонецЕсли;
				
				ДополнительныеПараметрыОшибки = Новый Структура("СсылкаНаОбъект", Источник.Ссылка);
				Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Запись документа'"),
					ИнтеграцияЭДОКлиентСервер.ВидОшибкиОбновлениеВерсииЭДЗакрытПринудительно(), ТекстСообщения,
					ТекстСообщения, ДополнительныеПараметрыОшибки);
				ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстОперации, Ошибка, Ложь);
				
				Источник.ДополнительныеСвойства.Вставить("КонтекстОперации", КонтекстОперации);
				
			Иначе 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлектронныйДокумент);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекущееСостояние) И СостоянияНетЭДО.Найти(ТекущееСостояние) = Неопределено Тогда
			
			// ЭДО начат, нужно его аннулировать, прежде чем создавать новую версию ЭД.
			Если ТекущееСостояние = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияЭДОЗавешен, ЭлектронныйДокумент);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияЭДОНеЗавешен, ЭлектронныйДокумент);
			КонецЕсли;
			
			Если ДиагностикаПоддержана(Источник) Тогда
				Если Источник.ДополнительныеСвойства.Свойство("КонтекстОперации") Тогда
					КонтекстОперации = Источник.ДополнительныеСвойства.КонтекстОперации;
				Иначе
					КонтекстОперации = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
				КонецЕсли;
				
				ДополнительныеПараметрыОшибки = Новый Структура;
				ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", Источник.Ссылка);
				
				ДополнительныеДанные = Новый Структура;
				ДополнительныеДанные.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				
				ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", ДополнительныеДанные);
				
				Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(НСтр("ru = 'Запись документа'"),
					ИнтеграцияЭДОКлиентСервер.ВидОшибкиОбновлениеВерсииЭДТребуетсяАннулирование(), ТекстСообщения,
					ТекстСообщения, ДополнительныеПараметрыОшибки);
				ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстОперации, Ошибка, Ложь);
				Источник.ДополнительныеСвойства.Вставить("КонтекстОперации", КонтекстОперации);
			Иначе 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлектронныйДокумент);
			КонецЕсли;
			
			ОчиститьАктуальныйЭлектронныйДокумент(Источник.Ссылка, ЭлектронныйДокумент);
			УстановитьОснованиеНовогоЭлектронногоДокумента(Источник.Ссылка);
			
		Иначе
			
			ОчиститьАктуальныйЭлектронныйДокумент(Источник.Ссылка, ЭлектронныйДокумент);
			УстановитьОснованиеНовогоЭлектронногоДокумента(Источник.Ссылка);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеЭДООбъектаУчета

// Обновляет информацию о состоянии актуального электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//
Процедура ОбновитьСостояниеЭлектронногоДокументаОбъектовУчета(Знач ЭлектронныйДокумент)
	
	НаборОбъектовУчета = ОбъектыУчетаАктуальногоЭлектронногоДокумента(ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеЭДООбъектовУчета(НаборОбъектовУчета);
	
КонецПроцедуры

// Обновляет объектам учета актуальное состояние электронных документов.
// 
// Параметры:
//  НаборОбъектовУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объекты учета для обновления состояния.
//
Процедура ОбновитьСостояниеЭДООбъектовУчета(Знач НаборОбъектовУчета)
	
	Если Не ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОбъектУчета Из НаборОбъектовУчета Цикл
		ОбновитьСостояниеЭДООбъектаУчета(ОбъектУчета);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет объекту учета актуальное состояние электронных документов.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета для обновления состояния.
//
Процедура ОбновитьСостояниеЭДООбъектаУчета(Знач ОбъектУчета)
	
	СостояниеОбъектаУчета = РассчитатьСостояниеОбъектаУчета(ОбъектУчета);
	
	Состояние = СостояниеОбъектаУчета.Состояние;
	ПредставлениеСостояния = СостояниеОбъектаУчета.ПредставлениеСостояния;
	
	УстановитьСостояниеЭлектронныхДокументовОбъектаУчета(ОбъектУчета, Состояние, ПредставлениеСостояния);
	
КонецПроцедуры

// Сохраняет информацию о состоянии актуальных электронных документов объекта учета.
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО - состояние электронного документа.
//  ПредставлениеСостояния - Строка - представление состояния электронных документов.
//
Процедура УстановитьСостояниеЭлектронныхДокументовОбъектаУчета(Знач ОбъектУчета, Знач Состояние, Знач ПредставлениеСостояния)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОбъектУчета);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор.Добавить();
			Запись.СсылкаНаОбъект = ОбъектУчета;
		КонецЕсли;
		
		Для каждого Запись Из Набор Цикл
			Запись.СостояниеЭДО = Состояние;
			Запись.ПредставлениеСостояния = ПредставлениеСостояния;
		КонецЦикла;
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Запись информации о состоянии актуальных электронных документов объекта учета'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает состояния электронных документов объектов учета.
// 
// Параметры:
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объекты учета.
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО, Неопределено - вид электронного документа, по которому нужно отобрать данные.
//
// Возвращаемое значение:
//  Массив - состояния электронных документов.
//
Функция СостоянияЭДООбъектовУчета(Знач ОбъектыУчета, Знач ВидДокумента = Неопределено)
	
	Если ТипЗнч(ОбъектыУчета) = Тип("Массив") Тогда
		НаборОбъектовУчета = ОбъектыУчета;
	Иначе
		НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;
	
	ОтборАктуальныхЭД = НовыйОтборАктуальныхЭлектронныхДокументов();
	ОтборАктуальныхЭД.ОбъектыУчета = "&ОбъектыУчета";
	ТекстЗапросаАктуальныхЭД = ЗапросАктуальныхЭлектронныхДокументов("АктуальныеЭД", ОтборАктуальныхЭД).Текст;
	
	ИмяТаблицыСостоянийЭлектронныхДокументов = "СостоянияЭлектронныхДокументов";
	УсловиеВыбораСостоянийЭлектронныхДокументов = "ВЫБРАТЬ АктуальныеЭД.ЭлектронныйДокумент ИЗ АктуальныеЭД";
	
	ТекстСостоянийЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ЗапросСостоянийДокументов(
		ИмяТаблицыСостоянийЭлектронныхДокументов, УсловиеВыбораСостоянийЭлектронныхДокументов).Текст;
	
	ТекстЗапросаИтоговыхДанных =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭДО.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)) КАК СостояниеЭД
	|ИЗ
	|	АктуальныеЭД КАК АктуальныеЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияЭлектронныхДокументов КАК СостоянияЭДО
	|		ПО АктуальныеЭД.ЭлектронныйДокумент = СостоянияЭДО.Ссылка
	|ГДЕ
	|	&УсловиеПоВиду";
	
	Запросы = Новый Массив;
	Запросы.Добавить(ТекстЗапросаАктуальныхЭД);
	Запросы.Добавить(ТекстСостоянийЭлектронныхДокументов);
	Запросы.Добавить(ТекстЗапросаИтоговыхДанных);
	ИтоговыйЗапрос = СтрСоединить(Запросы, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИтоговыйЗапрос;
	Запрос.Параметры.Вставить("ОбъектыУчета", НаборОбъектовУчета);
	
	УсловиеПоВиду = "ИСТИНА";	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		УсловиеПоВиду = "АктуальныеЭД.ЭлектронныйДокумент.ВидДокумента = &ВидДокумента";
		Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВиду", УсловиеПоВиду);
	
	УстановитьПривилегированныйРежим(Истина);
	СостоянияЭД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СостояниеЭД");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СостоянияЭД.Количество() <> 0 Тогда
		Возврат СостоянияЭД;
	КонецЕсли;
	
	ОписанияОбъектовУчета = ОписанияОбъектовУчета(НаборОбъектовУчета);
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ТипДокумента");
		СтрокиОписания = ОписанияОбъектовУчета.НайтиСтроки(Новый Структура("ТипДокумента", ТипДокумента));
	Иначе
		СтрокиОписания = ОписанияОбъектовУчета;
	КонецЕсли;
	
	Если СтрокиОписания.Количество() > 0 Тогда
		СостоянияЭД.Добавить(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	КонецЕсли;
	
	Возврат СостоянияЭД;
	
КонецФункции

// Возвращает новые данные состояния ЭДО объекта учета.
// 
// Параметры:
//  ВыполнитьНачальноеЗаполнение - Булево
// 
// Возвращаемое значение:
//  Структура:
// * ИспользуетсяОбменЭлектроннымиДокументами - Булево
// * ЕстьПравоНастройки - Булево
// * ПредставлениеСостояния - Строка
// * СуществуетАктуальныйДокумент - Булево
// * НеобходимаНастройка - Булево
// * ЭтоСостояниеНеНачатогоЭДО - Булево
Функция НовыеДанныеСостоянияЭДООбъектаУчета(ВыполнитьНачальноеЗаполнение = Истина)
	
	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("ИспользуетсяОбменЭлектроннымиДокументами", Ложь);
	ДанныеСостояния.Вставить("ЕстьПравоНастройки", Ложь);
	ДанныеСостояния.Вставить("ПредставлениеСостояния", "");
	ДанныеСостояния.Вставить("СуществуетАктуальныйДокумент", Ложь);
	ДанныеСостояния.Вставить("НеобходимаНастройка", Ложь);
	ДанныеСостояния.Вставить("ЭтоСостояниеНеНачатогоЭДО", Ложь);
	
	Если ВыполнитьНачальноеЗаполнение Тогда
		ДанныеСостояния.ИспользуетсяОбменЭлектроннымиДокументами = НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами();;
		ДанныеСостояния.ЕстьПравоНастройки = НастройкиЭДО.ЕстьПравоНастройкиОбмена()
	КонецЕсли;

	Возврат ДанныеСостояния;

КонецФункции

Функция СохраненноеСостояниеЭДООбъектаУчета(ОбъектУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СостояниеЭДО КАК СостояниеЭДО
	|ИЗ
	|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ОбъектУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.СостояниеЭДО;
		
	КонецЕсли;
	
	Возврат Перечисления.СостоянияДокументовЭДО.ПустаяСсылка();
	
КонецФункции

Функция СохраненноеПредставлениеСостоянияЭДООбъектаУчета(ОбъектУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.ПредставлениеСостояния КАК ПредставлениеСостояния
	|ИЗ
	|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ОбъектУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ПредставлениеСостояния;
		
	КонецЕсли;

	Возврат "";

КонецФункции

#КонецОбласти

#Область ДанныеОбъектаУчета

#Область Общее

Процедура ДобавитьСведенияОВыбытииМаркированныхТоваров(Данные, ТекстоваяИнформация)
	
	ОписаниеПоляСведенийОВыбытииМТ = ФорматыЭДО_ФНС.ОписаниеПоляСведенийОВыбытииМаркированныхТоваров();
	СведенияОВыбытииМТ = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		ОписаниеПоляСведенийОВыбытииМТ.ИмяРеквизита, Ложь);
	Если ЗначениеЗаполнено(СведенияОВыбытииМТ) Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = ОписаниеПоляСведенийОВыбытииМТ.ИмяПоля;
		НоваяСтрока.Значение = СведенияОВыбытииМТ;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(Данные, НоваяСтрока,
			"ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторОбъектаУчета(Знач ОбъектУчета)
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		
		Идентификатор = Строка(ОбъектУчета.УникальныйИдентификатор());
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Процедура ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, Знач ПутьКТоварам)
	
	Товары = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, ПутьКТоварам);
	Сопоставления = ИзвлечьСопоставлениеНоменклатурыИзТаблицыТоваров(Товары);
	Если Не ЗначениеЗаполнено(Сопоставления) Тогда
		Событие = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
		ТекстСообщения = НСтр("ru = 'В коде прикладного решения необходимо заполнить сопоставление номенклатуры в таблице товаров.'");
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, Событие, УровеньЖурналаРегистрации.Предупреждение);
		Возврат;
	КонецЕсли;
	СопоставленияДляВыгрузки = ПодготовитьСопоставлениеНоменклатурыДляЭлектронногоДокументаПоТаблице(Сопоставления);
	
	СтрокаТаблицыТовары = Данные.Строки.Найти(ПутьКТоварам,"ПолныйПуть", Истина);
	
	Индекс = 0;
	ПутьКДополнительныДанным = ПутьКТоварам + ".НомерСтроки.ДополнительныеДанные";
	Префикс = ЭлектронныеДокументыЭДО.ПрефиксСлужебныхДополнительныхДанных();
	
	Для каждого СтрокаТовара Из СтрокаТаблицыТовары.Строки Цикл
		
		ДополнительныеДанные = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаТовара, ПутьКДополнительныДанным, Ложь);
		Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ДополнительныеДанные = Новый Соответствие;
		КонецЕсли;
		
		ДополнительныеДанныеСовместимость = Новый Структура;
		
		СопоставлениеПоСтроке = СопоставленияДляВыгрузки[Индекс];
		Для каждого Элемент Из СопоставлениеПоСтроке Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			ДополнительныеДанные.Вставить(Ключ, Значение);
			Если Ключ = Префикс + "Идентификатор" Тогда
				ДополнительныеДанныеСовместимость.Вставить("Ид", Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(
			СтрокаТовара, ПутьКДополнительныДанным, ДополнительныеДанные);
		
		СтрокаДопДанныхПодписанных = Данные.Строки.Найти(ПутьКТоварам + ".НомерСтроки.ДопДанныеПодписанные","ПолныйПуть", Истина);
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(
			СтрокаДопДанныхПодписанных, ДополнительныеДанныеСовместимость, Истина);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзвлечьСопоставлениеНоменклатурыИзТаблицыТоваров(Знач ТаблицаТоваров)
	
	Если ТаблицаТоваров.Колонки.Найти("Сопоставление") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("Идентификатор");
	ТаблицаСопоставления.Колонки.Добавить("Наименование");
	ТаблицаСопоставления.Колонки.Добавить("Характеристика");
	ТаблицаСопоставления.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаСопоставления.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаСопоставления.Колонки.Добавить("Артикул");
	ТаблицаСопоставления.Колонки.Добавить("СтавкаНДС");
	ТаблицаСопоставления.Колонки.Добавить("Штрихкод");
	ТаблицаСопоставления.Колонки.Добавить("ШтрихкодКомбинации");
	ТаблицаСопоставления.Колонки.Добавить("ШтрихкодыНоменклатуры");
	ТаблицаСопоставления.Колонки.Добавить("НоменклатураИБ");
	ТаблицаСопоставления.Колонки.Добавить("ХарактеристикаИБ");
	ТаблицаСопоставления.Колонки.Добавить("УпаковкаИБ");
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		НовоеСопоставление = ТаблицаСопоставления.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСопоставление, СтрокаТовара.Сопоставление);
		
	КонецЦикла;
	
	Возврат ТаблицаСопоставления;
	
КонецФункции

Функция ПодготовитьСопоставлениеНоменклатурыДляЭлектронногоДокументаПоТаблице(Знач ТаблицаСопоставления, Знач ТипФорматаФайлаФНС = Ложь)
	
	НаборСопоставлений = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСопоставления);
	НаборСопоставленийДляВыгрузки = Новый Массив;
	
	Префикс = ЭлектронныеДокументыЭДО.ПрефиксСлужебныхДополнительныхДанных();
	
	// Получим идентификаторы сервиса 1С:Номенклатура.
	ТаблицаСервиса = Неопределено;
	ЕстьРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если ЕстьРаботаСНоменклатурой Тогда
		НаборПоиска = Новый Массив;
		Для Каждого Сопоставление Из НаборСопоставлений Цикл
			ЭлементПоиска = Новый Структура;
			ЭлементПоиска.Вставить("Номенклатура", Сопоставление.НоменклатураИБ);
			ЭлементПоиска.Вставить("Характеристика", Сопоставление.ХарактеристикаИБ);
			НаборПоиска.Добавить(ЭлементПоиска);
		КонецЦикла;
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ТаблицаСервиса = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(НаборПоиска);
	КонецЕсли;
	
	Если ТипФорматаФайлаФНС Тогда
		МаксимальнаяДлина = 2000;
	Иначе
		МаксимальнаяДлина = 1000;
	КонецЕсли;
	
	Для Каждого Сопоставление Из НаборСопоставлений Цикл
		
		НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
		Сопоставление.Свойство("НоменклатураИБ"  , НоменклатураИБ.Номенклатура);
		Сопоставление.Свойство("ХарактеристикаИБ", НоменклатураИБ.Характеристика);
		Сопоставление.Свойство("УпаковкаИБ"      , НоменклатураИБ.Упаковка);
		// Если идентификатор не задан, то формируем его по номенклатуре ИБ.
		ЗначениеСвойства = "";
		Сопоставление.Свойство("Идентификатор", ЗначениеСвойства);
		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Сопоставление.Вставить("Идентификатор", СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ИдентификаторНоменклатурыКонтрагентаПоНоменклатуреИБ(НоменклатураИБ));
		КонецЕсли;
		// Если передан массив штрихкодов, то преобразуем их в строку.
		Если ЗначениеЗаполнено(Сопоставление.ШтрихкодКомбинации) Тогда
			Сопоставление.Вставить("ШтрихкодКомбинации", Сопоставление.ШтрихкодКомбинации);
		КонецЕсли;
		Если Сопоставление.Свойство("ШтрихкодыНоменклатуры") Тогда
			Если ТипЗнч(Сопоставление.ШтрихкодыНоменклатуры) = Тип("Массив") Тогда
				Сопоставление.ШтрихкодыНоменклатуры = СоединитьШтрихкодыВСтроку(Сопоставление.ШтрихкодыНоменклатуры, МаксимальнаяДлина);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаСервиса) Тогда
			ОтборВСервисе = Новый Структура;
			ОтборВСервисе.Вставить("Номенклатура", Сопоставление.НоменклатураИБ);
			Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
				ОтборВСервисе.Вставить("Характеристика", Сопоставление.ХарактеристикаИБ);
			КонецЕсли;
			НайденныеСтроки = ТаблицаСервиса.НайтиСтроки(ОтборВСервисе);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				Сопоставление.Вставить("ИдентификаторНоменклатурыСервиса"  , НайденныеСтроки[0].ИдентификаторНоменклатуры);
				Сопоставление.Вставить("ИдентификаторХарактеристикиСервиса", НайденныеСтроки[0].ИдентификаторХарактеристики);
			КонецЕсли;
		КонецЕсли;
		
		// Сформируем результирующую структуру для помещения в электронный документ.
		
		Результат = Новый Структура;
		
		Для Каждого Элемент Из Сопоставление Цикл
			
			Если Элемент.Ключ = "НоменклатураИБ" Тогда
				// Не выгружаем.
			ИначеЕсли Элемент.Ключ = "ХарактеристикаИБ" Тогда
				// Не выгружаем.
			ИначеЕсли Элемент.Ключ = "УпаковкаИБ" Тогда
				// Не выгружаем.
			ИначеЕсли Элемент.Ключ = "СтавкаНДС" Тогда
				СтавкаНДСКод = СтавкаНДСИзСоответствия(, Элемент.Значение);
				Если ЗначениеЗаполнено(СтавкаНДСКод) Тогда
					Результат.Вставить(Префикс + Элемент.Ключ, СокрЛП(СтавкаНДСКод));
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
				Результат.Вставить(Префикс + Элемент.Ключ, СокрЛП(Элемент.Значение));
			КонецЕсли;
			
		КонецЦикла;
		
		НаборСопоставленийДляВыгрузки.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат НаборСопоставленийДляВыгрузки;
	
КонецФункции

Функция СоединитьШтрихкодыВСтроку(Знач НаборШтрихкодов, Знач МаксимальнаяДлина = 0) 
	
	Результат = "";
	ОграничиватьДлинуРезультата = (МаксимальнаяДлина > 0);
	ТекущаяДлина = 0;
	
	Для Каждого Штрихкод Из НаборШтрихкодов Цикл
		
		ДлинаШтрихкода = СтрДлина(Штрихкод);
		Если ОграничиватьДлинуРезультата
			И ТекущаяДлина + ДлинаШтрихкода + 1 > МаксимальнаяДлина Тогда
			Прервать;
		КонецЕсли;
		
		Результат = Результат + ?(ЗначениеЗаполнено(Результат), ",", "") + Штрихкод;
		ТекущаяДлина = ТекущаяДлина + ДлинаШтрихкода + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДанныеДокумента(Данные, Знач ДополнительныеДанные, Знач Замещать = Ложь)
	
	Для каждого КлючЗначение Из ДополнительныеДанные Цикл
		
		Путь = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		
		Если Не Замещать Тогда
		
			ТекущееЗначение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, Путь, Ложь);
			Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(Данные, Путь, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ЗначениеРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДокумента, ПутьКДанным);
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ПутьКДанным, ".", "");
	
	Если ВРег(ИмяРеквизита) = ВРег("ВидОперации") Тогда
		ЗначениеРеквизита = XMLСтрока(ЗначениеРеквизита);
	КонецЕсли;
	
	Если ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяРеквизита, ЗначениеРеквизита);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	
КонецПроцедуры

Процедура ПоместитьТаблицуДереваВДопДанные(ДеревоДокумента, ИмяТаблицы, Подписываемые = Истина)
	
	ЗначениеТаблицы = ДеревоЭлектронногоДокументаБЭД.ДанныеДерева(ДеревоДокумента, ИмяТаблицы);
	
	Если Не ЗначениеЗаполнено(ЗначениеТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяТаблицы, ЗначениеТаблицы);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Подписываемые);
	
КонецПроцедуры

Процедура ПоместитьГруппуДереваВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ВеткаГруппы = ЗначениеГруппыВДереве(ДеревоДокумента, ПутьКДанным);
	Если ТипЗнч(ВеткаГруппы) = Тип("КоллекцияСтрокДереваЗначений") Тогда
		
		ДанныеГруппы = Новый Структура;
		Для Каждого СтрокаДерева Из ВеткаГруппы Цикл
			
			ЗначениеРеквизита = СтрокаДерева.Значение;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, ПутьКДанным+".", "");
			
			ДанныеГруппы.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Если ДанныеГруппы.Количество() > 0 Тогда
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДанныеГруппы, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеГруппыВДереве(ДеревоДанных, ПолныйПуть) 
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Строки;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(Дерево, ПутьКТаблицеТоваров,
	Знач ТипФорматаФайлаФНС = Ложь, ВерсияФормата = "")

	ТаблицаТоваров = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Дерево,
		ПутьКТаблицеТоваров);
		
	СтрокаТаблицыТоваров = Дерево.Строки.Найти(ПутьКТаблицеТоваров, "ПолныйПуть", Истина);
			
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.БизнесСеть.КоммерческиеПредложения Тогда
		СопоставлениеНоменклатуры = Новый Соответствие;
	
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.Значение) Тогда

			Для Каждого Позиция Из СтрокаТаблицыТоваров.Строки Цикл

				Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.НоменклатураСсылка");
				Характеристика = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ХарактеристикаСсылка");
				ЕдиницаИзмерения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Позиция,
					"Товары.НомерСтроки.Товар.ЕдиницаИзмеренияСсылка");

				НоменклатураИнформационнойБазы = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
					Номенклатура, Характеристика, ЕдиницаИзмерения);

				СопоставлениеНоменклатуры.Вставить(Позиция.Значение, СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ИдентификаторНоменклатурыКонтрагентаПоНоменклатуреИБ(
					НоменклатураИнформационнойБазы));

			КонецЦикла;

		КонецЕсли;

		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Дерево, "СопоставлениеНоменклатуры", СопоставлениеНоменклатуры);
		
		Возврат;
		
	КонецЕсли;
	
	
	Если ТаблицаТоваров.Колонки.Найти("ДопДанныеПодписанные") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСопоставления = ИзвлечьСопоставлениеНоменклатурыИзТаблицыТоваров(ТаблицаТоваров);
	Если ТаблицаСопоставления = Неопределено Или Не ЗначениеЗаполнено(ТаблицаСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	НаборСопоставленийДляВыгрузки = ПодготовитьСопоставлениеНоменклатурыДляЭлектронногоДокументаПоТаблице(ТаблицаСопоставления, ТипФорматаФайлаФНС);
	
	Индекс = 0;
	
	Для Каждого СтрокаТовара Из СтрокаТаблицыТоваров.Строки Цикл
		
		СопоставлениеДляВыгрузки = НаборСопоставленийДляВыгрузки[Индекс];
		Индекс = Индекс + 1;
		
		СтрокаДопДанных = СтрокаТовара.Строки.Найти(СтрокаТовара.ПолныйПуть + ".ДопДанныеПодписанные", "ПолныйПуть");
		Если СтрокаДопДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, СопоставлениеДляВыгрузки, Истина);
	
		Если Не ВерсияФормата = "ON_NKORSCHFDOPPR_1_996_03_05_01" Тогда
			
			// Для обратной совместимости дублируем идентификатор в доп. данные с именем "ИД".
			Префикс = ЭлектронныеДокументыЭДО.ПрефиксСлужебныхДополнительныхДанных();
			Если СопоставлениеДляВыгрузки.Свойство(Префикс + "Идентификатор") Тогда
				ДляСовместимости = Новый Структура("ИД", СопоставлениеДляВыгрузки[Префикс + "Идентификатор"]);
				ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, ДляСовместимости, Истина);
			КонецЕсли;
			
		КонецЕсли;

		
	КонецЦикла;
	
КонецПроцедуры

// Переносит данные по маркировке из специального реквизита строки дерева документа
// в общую структуру доп. данных данной строки.
//
// Параметры:
//  СтрокаТовара - СтрокаДереваЗначений - строка товара дерева документа, в которой нужно выполнить перенос.
//  СтруктураЭД  - Структура - параметры для создания электронного документа.
//                             См. ОбменСКонтрагентамиВнутренний.СтруктураЭлектронногоДокумента.
//
Процедура ДобавитьСведенияОМаркировкеВДопДанныеДереваДокумента_ГИСМТ(СтрокаТовара)
	
	СтрокаДопДанных = СтрокаТовара.Строки.Найти(СтрокаТовара.ПолныйПуть + ".ДопДанныеПодписанные", "ПолныйПуть");
	Если СтрокаДопДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокиДопСведенийОМаркировках_ГИСМТ(СтрокаТовара, СтрокаДопДанных,
		".СведенияОМаркировкеДо.ТранспортныеУпаковки", "sscc_до");
	ДобавитьСтрокиДопСведенийОМаркировках_ГИСМТ(СтрокаТовара, СтрокаДопДанных,
		".СведенияОМаркировкеДо.КонтрольныеИдентификационныеЗнаки", "cis_до");
	
	ДобавитьСтрокиДопСведенийОМаркировках_ГИСМТ(СтрокаТовара, СтрокаДопДанных,
		".СведенияОМаркировкеПосле.ТранспортныеУпаковки", "sscc");
	ДобавитьСтрокиДопСведенийОМаркировках_ГИСМТ(СтрокаТовара, СтрокаДопДанных,
		".СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки", "cis");
	
КонецПроцедуры

Процедура ДобавитьСтрокиДопСведенийОМаркировках_ГИСМТ(СтрокаТовара, СтрокаДопДанных,
	ПутьКТаблицеМаркировки, Идентификатор) 
	
	ПутьКСведениямПоУпаковкам = СтрокаТовара.ПолныйПуть + ПутьКТаблицеМаркировки;
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаТовара, ПутьКСведениямПоУпаковкам);
	Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
		
		СтрокиУпаковок = СтрокаТовара.Строки.Найти(ПутьКСведениямПоУпаковкам, "ПолныйПуть", Истина);
		Для Каждого СтрокаУпаковки Из СтрокиУпаковок.Строки Цикл
			НомерУпаковки = СокрЛП(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаУпаковки,
				ПутьКСведениямПоУпаковкам + ".НомерСтроки.Код"));
				
			Если ЗначениеЗаполнено(НомерУпаковки) Тогда
				СведенияПоМаркировкеДо = Новый Структура(Идентификатор, НомерУпаковки);
				ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, СведенияПоМаркировкеДо, Истина, Истина);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСвязанныеОбъектыУчетаCML(СвязанныеОбъектыУчета, Данные)

	НаборОбъектовУчета = Новый Массив;
	СтрокаТаблицаТоваров = Данные.Строки.Найти("Товары", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "Товары.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			НаборОбъектовУчета.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, НаборОбъектовУчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

Процедура УКД_ИнформацияПродавца_АвтозаполнениеАдресов(Данные)
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаДокумента", Ложь);
	
	Участники = Новый Структура;
	Участники.Вставить("СведенияОПродавце");
	Участники.Вставить("СведенияОПокупателе");
	Участники.Вставить("СведенияОКомиссионере");
	
	Для каждого КлючЗначение Из Участники Цикл
		
		Путь = КлючЗначение.Ключ;
		Колонка = КлючЗначение.Значение;
		
		СтрокаДерева = Данные.Строки.Найти(Путь, "ПолныйПуть");
		
		Если СтрокаДерева.Признак = "Таблица" Тогда
			
			Для каждого СтрокаТаблицы Из СтрокаДерева.Строки Цикл
				
				УчастникМассивом = Новый Массив;
				УчастникМассивом.Добавить(Путь + ".НомерСтроки" + ?(ЗначениеЗаполнено(Колонка), "." + Колонка, ""));
				ЗаполнитьАдресаУчастниковСделкиУКД(УчастникМассивом, СтрокаТаблицы, ДатаСведений);
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.Признак = "Группа" Тогда
			
			УчастникМассивом = Новый Массив;
			УчастникМассивом.Добавить(Путь);
			ЗаполнитьАдресаУчастниковСделкиУКД(УчастникМассивом, Данные, ДатаСведений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УКД_ИнформацияПродавца_ЗаполнитьФункцию(Данные, Параметры)

	Если Параметры.ТипДокумента = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().УКД Тогда
		ФункцияУКД = "КСЧФДИС";                
	ИначеЕсли Параметры.ТипДокумента  =ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().КорректировочныйСчетФактура Тогда
		ФункцияУКД = "КСЧФ";
	ИначеЕсли Параметры.ТипДокумента  = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().КорректировкаСведенийОРеализацииКомиссионером Тогда
		ФункцияУКД = "СвИСРК";
	ИначеЕсли Параметры.ТипДокумента  = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().КорректировкаСведенийОЗакупкеКомиссионером Тогда
		ФункцияУКД = "СвИСЗК";
	Иначе  		
		ФункцияУКД = "ДИС";
	КонецЕсли; 	
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Функция", ФункцияУКД);	
	
КонецПроцедуры

Процедура ЗаполнитьАдресаУчастниковСделкиУКД(Участники, ДеревоДанных, ДатаАдреса = Неопределено)
	
	ПутьККорнюАдреса = ".Адрес";
	ПутьКСтруктурированномуАдресу = ".Адрес.АдресРФ";
	ПутьКПроизвольномуАдресу      = ".Адрес.АдресИнформация";
	ПутьКИностранномуАдресу       = ".Адрес.АдресИнформация";
	ПолеКодРегиона = ".КодРегиона";
	ПолеНаселПункт = ".НаселенныйПункт";
	ПолеКвартира   = ".Квартира";
		
	Для Каждого Участник Из Участники Цикл
		
		ОбъектКонтактнойИнформации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации");
			
		ВидКонтактнойИнформации    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации");
		
		Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки();
		
		// Корневой элемент группы "АвтоматическиЗаполняемый" может содержать в себе
		// параметры обработки ошибки, которые могут быть добавлены в переопределяемой части.
		СтрокаДерева = ЭлектронноеВзаимодействие.СтрокаДерева(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработкиОшибок, СтрокаДерева);
		
		Если ТипЗнч(ВидКонтактнойИнформации) <> Тип("Массив") Тогда
			ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
		Иначе
			ВидыКонтактнойИнформации = ВидКонтактнойИнформации;
		КонецЕсли;
		
		Для Каждого ПроверяемыйВид Из ВидыКонтактнойИнформации Цикл 
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектКонтактнойИнформации, ПроверяемыйВид, ДатаАдреса, Ложь);
				
			Если КонтактнаяИнформация.Количество() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;	
				
		Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
			
			АдресЗначение = КонтактнаяИнформация[0].Значение;
			Адрес = РаботаСАдресами.СведенияОбАдресе(АдресЗначение, Новый Структура("КодыАдреса", Ложь));
			
			Если Адрес.КодСтраны = "643" Тогда // Россия
				
				АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(Адрес);
				
				Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
					
					// Заполняем структурированный адрес.
					
					ПутьКАдресу = Участник + ПутьКСтруктурированномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Индекс", Адрес.Индекс, ПараметрыОбработкиОшибок);
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКодРегиона, Адрес.КодРегиона,
						ПараметрыОшибкиЗаполненияКодаРегиона(ПараметрыОбработкиОшибок, ОбъектКонтактнойИнформации));
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Район", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Город", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеНаселПункт, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Улица", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Дом", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Корпуса.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Корпус", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Помещения.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКвартира, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
				Иначе
					
					// Заполняем адрес в произвольной форме.
					
					ПутьКАдресу = Участник + ПутьКПроизвольномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
							ДеревоДанных, ПутьКАдресу + ".КодСтраны", Адрес.КодСтраны, ПараметрыОбработкиОшибок);
						
					Если Адрес.ТипАдреса = "Муниципальный" Тогда

						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".АдресТекст", Адрес.МуниципальноеПредставление,
							ПараметрыОбработкиОшибок);
					Иначе
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".АдресТекст", Адрес.Представление,
							ПараметрыОбработкиОшибок);

					КонецЕсли;	
				КонецЕсли;
				
			Иначе
				
				ПутьКАдресу = Участник + ПутьКИностранномуАдресу;
				
				ПолеКодСтраны  = ".КодСтраны";
				ПолеАдресТекст = ".АдресТекст";
				
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКАдресу + ".КодСтр") Тогда
					ПолеКодСтраны  = ".КодСтр";
					ПолеАдресТекст = ".АдрТекст";
				КонецЕсли;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеКодСтраны, Адрес.КодСтраны, ПараметрыОбработкиОшибок);
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеАдресТекст, Адрес.Представление, ПараметрыОбработкиОшибок);
				
			КонецЕсли;
				
		Иначе
			
			// Не заполнена контактная информация.
			// Очищаем значение адреса, чтобы проверка заполненности не считала реквизит заполненным.
			
			ПутьКАдресу = Участник + ПутьККорнюАдреса;
			ДеревоЭлектронногоДокументаБЭД.ОчиститьЗначениеВСтрокеДерева(ДеревоДанных, ПутьКАдресу, ПараметрыОбработкиОшибок);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АктОРасхожденииИнформацияПокупателя_АвтозаполнениеАдресов(Данные)
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаДокумента", Ложь);
	
	Участники = Новый Структура;
	Участники.Вставить("Продавец");
	Участники.Вставить("Покупатель");
	Участники.Вставить("Грузоотправитель");
	Участники.Вставить("Грузополучатель");
	Участники.Вставить("СтраховаяКомпания");
	
	Для каждого КлючЗначение Из Участники Цикл
		
		Путь = КлючЗначение.Ключ;
		Колонка = КлючЗначение.Значение;
		
		СтрокаДерева = Данные.Строки.Найти(Путь, "ПолныйПуть");
		
		Если СтрокаДерева.Признак = "Таблица" Тогда
			
			Для каждого СтрокаТаблицы Из СтрокаДерева.Строки Цикл
				
				УчастникМассивом = Новый Массив;
				УчастникМассивом.Добавить(Путь + ".НомерСтроки" + ?(ЗначениеЗаполнено(Колонка), "." + Колонка, ""));
				ЗаполнитьАдресаУчастниковСделкиАктОРасхождении(УчастникМассивом, СтрокаТаблицы, ДатаСведений);
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.Признак = "Группа" Тогда
			
			УчастникМассивом = Новый Массив;
			УчастникМассивом.Добавить(Путь);
			ЗаполнитьАдресаУчастниковСделкиАктОРасхождении(УчастникМассивом, Данные, ДатаСведений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАдресаУчастниковСделкиАктОРасхождении(Участники, ДеревоДанных, ДатаАдреса = Неопределено)
	
	ПутьККорнюАдреса = ".Адрес";
	ПутьКСтруктурированномуАдресу = ".Адрес.АдресРФ";
	ПутьКПроизвольномуАдресу      = ".Адрес.АдресИнформация";
	ПутьКИностранномуАдресу       = ".Адрес.АдресИнформация";
	ПолеКодРегиона = ".КодРегиона";
	ПолеНаселПункт = ".НаселенныйПункт";
	ПолеКвартира   = ".Квартира";
		
	Для Каждого Участник Из Участники Цикл
		
		ОбъектКонтактнойИнформации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации");
			
		ВидКонтактнойИнформации    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации");
		
		Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки();
		
		// Корневой элемент группы "АвтоматическиЗаполняемый" может содержать в себе
		// параметры обработки ошибки, которые могут быть добавлены в переопределяемой части.
		СтрокаДерева = ЭлектронноеВзаимодействие.СтрокаДерева(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработкиОшибок, СтрокаДерева);
		
		Если ТипЗнч(ВидКонтактнойИнформации) <> Тип("Массив") Тогда
			ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
		Иначе
			ВидыКонтактнойИнформации = ВидКонтактнойИнформации;
		КонецЕсли;
		
		Для Каждого ПроверяемыйВид Из ВидыКонтактнойИнформации Цикл 
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектКонтактнойИнформации, ПроверяемыйВид, ДатаАдреса, Ложь);
				
			Если КонтактнаяИнформация.Количество() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;		
			
		Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
			
			АдресЗначение = КонтактнаяИнформация[0].Значение;
			Адрес = РаботаСАдресами.СведенияОбАдресе(АдресЗначение, Новый Структура("КодыАдреса", Ложь));
			
			Если Адрес.КодСтраны = "643" Тогда // Россия
				
				АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(Адрес);
				
				Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
					
					// Заполняем структурированный адрес.
					
					ПутьКАдресу = Участник + ПутьКСтруктурированномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Индекс", Адрес.Индекс, ПараметрыОбработкиОшибок);
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКодРегиона, Адрес.КодРегиона,
						ПараметрыОшибкиЗаполненияКодаРегиона(ПараметрыОбработкиОшибок, ОбъектКонтактнойИнформации));
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Район", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Город", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеНаселПункт, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Улица", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Дом", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Корпуса.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Корпус", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Помещения.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКвартира, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
				Иначе
					
					// Заполняем адрес в произвольной форме.
					
					ПутьКАдресу = Участник + ПутьКПроизвольномуАдресу;

					Если Адрес.ТипАдреса = "Муниципальный" Тогда

						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".АдресТекст", Адрес.МуниципальноеПредставление,
							ПараметрыОбработкиОшибок);
							
					Иначе
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".АдресТекст", Адрес.Представление,
							ПараметрыОбработкиОшибок);

					КонецЕсли;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".КодСтраны", Адрес.КодСтраны,
							ПараметрыОбработкиОшибок); 
						
				КонецЕсли;
				
			Иначе
				
				ПутьКАдресу = Участник + ПутьКИностранномуАдресу;
				
				ПолеКодСтраны  = ".КодСтраны";
				ПолеАдресТекст = ".АдресТекст";
				
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКАдресу + ".КодСтр") Тогда
					ПолеКодСтраны  = ".КодСтр";
					ПолеАдресТекст = ".АдрТекст";
				КонецЕсли;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеКодСтраны, Адрес.КодСтраны, ПараметрыОбработкиОшибок);
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеАдресТекст, Адрес.Представление, ПараметрыОбработкиОшибок);
				
			КонецЕсли;
				
		Иначе
			
			// Не заполнена контактная информация.
			// Очищаем значение адреса, чтобы проверка заполненности не считала реквизит заполненным.
			
			ПутьКАдресу = Участник + ПутьККорнюАдреса;
			ДеревоЭлектронногоДокументаБЭД.ОчиститьЗначениеВСтрокеДерева(ДеревоДанных, ПутьКАдресу, ПараметрыОбработкиОшибок);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередачаУслуг_ИнформацияПродавца_АвтозаполнениеАдресов(Данные)
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаАкта", Ложь);
	
	Участники = Новый Структура;
	Участники.Вставить("Исполнитель");
	Участники.Вставить("Заказчик");
	
	Для каждого КлючЗначение Из Участники Цикл
		
		Путь = КлючЗначение.Ключ;
		Колонка = КлючЗначение.Значение;
		
		СтрокаДерева = Данные.Строки.Найти(Путь, "ПолныйПуть");
		
		Если СтрокаДерева.Признак = "Таблица" Тогда
			
			Для каждого СтрокаТаблицы Из СтрокаДерева.Строки Цикл
				
				УчастникМассивом = Новый Массив;
				УчастникМассивом.Добавить(Путь + ".НомерСтроки" + ?(ЗначениеЗаполнено(Колонка), "." + Колонка, ""));
				ЗаполнитьАдресаУчастниковСделкиПередачаТоваров(УчастникМассивом, СтрокаТаблицы, ДатаСведений);
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.Признак = "Группа" Тогда
			
			УчастникМассивом = Новый Массив;
			УчастникМассивом.Добавить(Путь);
			ЗаполнитьАдресаУчастниковСделкиПередачаТоваров(УчастникМассивом, Данные, ДатаСведений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередачаТоваров_ИнформацияПродавца_АвтозаполнениеАдресов(Данные)
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаТоварнойНакладной", Ложь);
	
	Участники = Новый Структура;
	Участники.Вставить("Поставщик");
	Участники.Вставить("Плательщик");
	Участники.Вставить("Грузоотправитель");
	Участники.Вставить("Грузополучатель");
	
	Для каждого КлючЗначение Из Участники Цикл
		
		Путь = КлючЗначение.Ключ;
		Колонка = КлючЗначение.Значение;
		
		СтрокаДерева = Данные.Строки.Найти(Путь, "ПолныйПуть");
		
		Если СтрокаДерева.Признак = "Таблица" Тогда
			
			Для каждого СтрокаТаблицы Из СтрокаДерева.Строки Цикл
				
				УчастникМассивом = Новый Массив;
				УчастникМассивом.Добавить(Путь + ".НомерСтроки" + ?(ЗначениеЗаполнено(Колонка), "." + Колонка, ""));
				ЗаполнитьАдресаУчастниковСделкиПередачаТоваров(УчастникМассивом, СтрокаТаблицы, ДатаСведений);
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.Признак = "Группа" Тогда
			
			УчастникМассивом = Новый Массив;
			УчастникМассивом.Добавить(Путь);
			ЗаполнитьАдресаУчастниковСделкиПередачаТоваров(УчастникМассивом, Данные, ДатаСведений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАдресаУчастниковСделкиПередачаТоваров(Участники, ДеревоДанных, ДатаАдреса = Неопределено)
	
	ПутьККорнюАдреса = ".Адрес";
	ПутьКСтруктурированномуАдресу = ".Адрес.Структурированный";
	ПутьКПроизвольномуАдресу      = ".Адрес.Произвольный";
	ПутьКИностранномуАдресу       = ".Адрес.Иностранный";
	ПолеКодРегиона = ".КодРегион";
	ПолеНаселПункт = ".НаселПункт";
	ПолеКвартира   = ".Кварт";
		
	Для Каждого Участник Из Участники Цикл
		
		ОбъектКонтактнойИнформации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации");
			
		ВидКонтактнойИнформации    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации");
		
		Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки();
		
		// Корневой элемент группы "АвтоматическиЗаполняемый" может содержать в себе
		// параметры обработки ошибки, которые могут быть добавлены в переопределяемой части.
		СтрокаДерева = ЭлектронноеВзаимодействие.СтрокаДерева(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработкиОшибок, СтрокаДерева);
		
		Если ТипЗнч(ВидКонтактнойИнформации) <> Тип("Массив") Тогда
			ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
		Иначе
			ВидыКонтактнойИнформации = ВидКонтактнойИнформации;
		КонецЕсли;
		
		Для Каждого ПроверяемыйВид Из ВидыКонтактнойИнформации Цикл 
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектКонтактнойИнформации, ПроверяемыйВид, ДатаАдреса, Ложь);
				
			Если КонтактнаяИнформация.Количество() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;		
			
		Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
			
			АдресЗначение = КонтактнаяИнформация[0].Значение;
			Адрес = РаботаСАдресами.СведенияОбАдресе(АдресЗначение, Новый Структура("КодыАдреса", Ложь));
			
			Если Адрес.КодСтраны = "643" Тогда // Россия
				
				АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(Адрес);
				
				Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
					
					// Заполняем структурированный адрес.
					
					ПутьКАдресу = Участник + ПутьКСтруктурированномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Индекс", Адрес.Индекс, ПараметрыОбработкиОшибок);
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКодРегиона, Адрес.КодРегиона,
						ПараметрыОшибкиЗаполненияКодаРегиона(ПараметрыОбработкиОшибок, ОбъектКонтактнойИнформации));
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Район", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Город", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеНаселПункт, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Улица", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Дом", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Корпуса.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Корпус", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Помещения.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКвартира, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
				Иначе
					
					// Заполняем адрес в произвольной форме.
					
					ПутьКАдресу = Участник + ПутьКПроизвольномуАдресу;
					
					Если Адрес.ТипАдреса = "Муниципальный" Тогда

						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу, Адрес.МуниципальноеПредставление,
							ПараметрыОбработкиОшибок);
					Иначе
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу, Адрес.Представление,
							ПараметрыОбработкиОшибок);

					КонецЕсли;	
						
				КонецЕсли;
				
			Иначе
				
				ПутьКАдресу = Участник + ПутьКИностранномуАдресу;
				
				ПолеКодСтраны  = ".КодСтраны";
				ПолеАдресТекст = ".АдресТекст";
				
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКАдресу + ".КодСтр") Тогда
					ПолеКодСтраны  = ".КодСтр";
					ПолеАдресТекст = ".АдрТекст";
				КонецЕсли;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеКодСтраны, Адрес.КодСтраны, ПараметрыОбработкиОшибок);
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеАдресТекст, Адрес.Представление, ПараметрыОбработкиОшибок);
				
			КонецЕсли;
				
		Иначе
			
			// Не заполнена контактная информация.
			// Очищаем значение адреса, чтобы проверка заполненности не считала реквизит заполненным.
			
			ПутьКАдресу = Участник + ПутьККорнюАдреса;
			ДеревоЭлектронногоДокументаБЭД.ОчиститьЗначениеВСтрокеДерева(ДеревоДанных, ПутьКАдресу, ПараметрыОбработкиОшибок);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_АвтозаполнениеАдресов(Данные)
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаДокумента", Ложь);
	
	Участники = Новый Структура;
	Участники.Вставить("СведенияОПродавце");
	Участники.Вставить("СведенияОПокупателе");
	Участники.Вставить("СведенияОГрузоотправителе", "Грузоотправитель");
	Участники.Вставить("СведенияОГрузополучателе");
	Участники.Вставить("СведенияОКомиссионере");
	Участники.Вставить("СведенияОКомитенте");
	Участники.Вставить("СведенияОПеревозчике");
	
	Для каждого КлючЗначение Из Участники Цикл
		
		Путь = КлючЗначение.Ключ;
		Колонка = КлючЗначение.Значение;
		
		СтрокаДерева = Данные.Строки.Найти(Путь, "ПолныйПуть");
		
		Если СтрокаДерева.Признак = "Таблица" Тогда
			
			Для каждого СтрокаТаблицы Из СтрокаДерева.Строки Цикл
				
				УчастникМассивом = Новый Массив;
				УчастникМассивом.Добавить(Путь + ".НомерСтроки" + ?(ЗначениеЗаполнено(Колонка), "." + Колонка, ""));
				ЗаполнитьАдресаУчастниковСделкиУПД2019(УчастникМассивом, СтрокаТаблицы, ДатаСведений);
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДерева.Признак = "Группа" Тогда
			
			УчастникМассивом = Новый Массив;
			УчастникМассивом.Добавить(Путь);
			ЗаполнитьАдресаУчастниковСделкиУПД2019(УчастникМассивом, Данные, ДатаСведений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_АвтозаполнениеДокументовПодтвержденияОтгрузки(Данные)
	
	КоличествоСтрокДокументовПодтвержденияОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДокументыПодтвержденияОтгрузки");
	Если ТипЗнч(КоличествоСтрокДокументовПодтвержденияОтгрузки) = Тип("Число")
		И КоличествоСтрокДокументовПодтвержденияОтгрузки > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыПодтвержденияОтгрузки = Новый ТаблицаЗначений;
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		НомерДокументаОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.СведенияОДокументеОтгрузки.Номер");
		ДатаДокументаОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.СведенияОДокументеОтгрузки.Дата");
		
		Если ЗначениеЗаполнено(НомерДокументаОтгрузки)
			И ЗначениеЗаполнено(ДатаДокументаОтгрузки) Тогда
			СтрокаДокументов = ДокументыПодтвержденияОтгрузки.Добавить();
			СтрокаДокументов.Номер = НомерДокументаОтгрузки;
			СтрокаДокументов.Дата = ДатаДокументаОтгрузки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументыПодтвержденияОтгрузки.Количество() = 0 Тогда
		
		ДокументОбОтгрузке = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДокументОбОтгрузке");
		ДокументыСтрокой = СтрРазделить(ДокументОбОтгрузке, ";");
		
		Для каждого ДокументСтрокой Из ДокументыСтрокой Цикл
			
			ПозицияНомер = СтрНайти(ДокументСтрокой, "№", НаправлениеПоиска.СКонца);
			ДокументСтрокой = СокрЛП(Сред(ДокументСтрокой, ПозицияНомер + 1));
			
			ПозицияОт = СтрНайти(НРег(ДокументСтрокой), "от", НаправлениеПоиска.СКонца);
			Если ПозицияОт = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Номер = СокрЛП(Лев(ДокументСтрокой, ПозицияОт - 1));
			ДатаСтрокой = СокрЛП(Сред(ДокументСтрокой, ПозицияОт + 2));
			Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСтрокой);
			
			Если ЗначениеЗаполнено(Номер)
				И ЗначениеЗаполнено(Дата) Тогда
				СтрокаДокументов = ДокументыПодтвержденияОтгрузки.Добавить();
				СтрокаДокументов.Номер = Номер;
				СтрокаДокументов.Дата = Дата;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументыПодтвержденияОтгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыПодтвержденияОтгрузки.Свернуть("Номер,Дата");
	
	ДокументыПодтвержденияОтгрузки.Колонки.Добавить("Наименование");
	ДокументыПодтвержденияОтгрузки.ЗаполнитьЗначения("Документ", "Наименование");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, ДокументыПодтвержденияОтгрузки, "ДокументыПодтвержденияОтгрузки");
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_АвтозаполнениеОбстоятельствФормированияСФПоВидуОборота(Данные)
	
	ПутьОбстоятельстваФормированияСФ = "ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ";
	
	ОбстоятельстваФормированияСФ = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные,
		ПутьОбстоятельстваФормированияСФ);
	Если ЗначениеЗаполнено(ОбстоятельстваФормированияСФ) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОборота = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "ВидОборота", Ложь);
	Если Не ЗначениеЗаполнено(ВидОборота) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбстоятельстваФормированияСФ = Строка(Число(ВидОборота));
	Исключение
		Возврат;
	КонецПопытки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, ПутьОбстоятельстваФормированияСФ,
		ОбстоятельстваФормированияСФ);
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_ЗаполнитьФункцию(Данные, Параметры)

	Если Параметры.ТипДокумента = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().УПД Тогда
		ФункцияУПД = "СЧФДОП";                
	ИначеЕсли Параметры.ТипДокумента  = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().СчетФактура Тогда
		ФункцияУПД = "СЧФ";
	ИначеЕсли Параметры.ТипДокумента  = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().СведенияОРеализацииКомиссионером Тогда
		ФункцияУПД = "СвРК";
	ИначеЕсли Параметры.ТипДокумента  = ЭлектронныеДокументыЭДО.СтандартныеТипыДокументов().СведенияОЗакупкеКомиссионером Тогда
		ФункцияУПД = "СвЗК";
	Иначе  		
		ФункцияУПД = "ДОП";
	КонецЕсли; 	
	
	ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "Функция", ФункцияУПД);	
	
КонецПроцедуры

Процедура ЗаполнитьАдресаУчастниковСделкиУПД2019(Участники, ДеревоДанных, ДатаАдреса = Неопределено)
	
	ПутьККорнюАдреса = ".Адрес";
	ПутьКСтруктурированномуАдресу = ".Адрес.АдресРФ";
	ПутьКПроизвольномуАдресу      = ".Адрес.АдресИнформация";
	ПутьКИностранномуАдресу       = ".Адрес.АдресИнформация";
	ПолеКодРегиона = ".КодРегиона";
	ПолеНаселПункт = ".НаселенныйПункт";
	ПолеКвартира   = ".Квартира";
		
	Для Каждого Участник Из Участники Цикл
		
		ОбъектКонтактнойИнформации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации");
			
		ВидКонтактнойИнформации    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации");
		
		Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки();
		
		// Корневой элемент группы "АвтоматическиЗаполняемый" может содержать в себе
		// параметры обработки ошибки, которые могут быть добавлены в переопределяемой части.
		СтрокаДерева = ЭлектронноеВзаимодействие.СтрокаДерева(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработкиОшибок, СтрокаДерева);
		
		Если ТипЗнч(ВидКонтактнойИнформации) <> Тип("Массив") Тогда
			ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
		Иначе
			ВидыКонтактнойИнформации = ВидКонтактнойИнформации;
		КонецЕсли;
		
		Для Каждого ПроверяемыйВид Из ВидыКонтактнойИнформации Цикл 
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектКонтактнойИнформации, ПроверяемыйВид, ДатаАдреса, Ложь);
				
			Если КонтактнаяИнформация.Количество() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;		
			
		Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
			
			АдресЗначение = КонтактнаяИнформация[0].Значение;
			Адрес = РаботаСАдресами.СведенияОбАдресе(АдресЗначение, Новый Структура("КодыАдреса", Ложь));
			
			Если Адрес.КодСтраны = "643" Тогда // Россия
				
				АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(Адрес);
				
				Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
					
					// Заполняем структурированный адрес.
					
					ПутьКАдресу = Участник + ПутьКСтруктурированномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Индекс", Адрес.Индекс, ПараметрыОбработкиОшибок);
						
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКодРегиона, Адрес.КодРегиона,
						ПараметрыОшибкиЗаполненияКодаРегиона(ПараметрыОбработкиОшибок, ОбъектКонтактнойИнформации));
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Район", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Город", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеНаселПункт, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Улица", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Дом", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Корпуса.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Корпус", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Помещения.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКвартира, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
				Иначе
					
					// Заполняем адрес в произвольной форме.
					
					ПутьКАдресу = Участник + ПутьКПроизвольномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
							ДеревоДанных, ПутьКАдресу + ".КодСтраны", Адрес.КодСтраны, ПараметрыОбработкиОшибок);

					Если Адрес.ТипАдреса = "Муниципальный" Тогда

						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".АдресТекст", Адрес.МуниципальноеПредставление,
							ПараметрыОбработкиОшибок);
					Иначе
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу + ".АдресТекст", Адрес.Представление,
							ПараметрыОбработкиОшибок);

					КонецЕсли;
						
				КонецЕсли;
				
			Иначе
				
				ПутьКАдресу = Участник + ПутьКИностранномуАдресу;
				
				ПолеКодСтраны  = ".КодСтраны";
				ПолеАдресТекст = ".АдресТекст";
				
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКАдресу + ".КодСтр") Тогда
					ПолеКодСтраны  = ".КодСтр";
					ПолеАдресТекст = ".АдрТекст";
				КонецЕсли;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеКодСтраны, Адрес.КодСтраны, ПараметрыОбработкиОшибок);
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеАдресТекст, Адрес.Представление, ПараметрыОбработкиОшибок);
				
			КонецЕсли;
				
		Иначе
			
			// Не заполнена контактная информация.
			// Очищаем значение адреса, чтобы проверка заполненности не считала реквизит заполненным.
			
			ПутьКАдресу = Участник + ПутьККорнюАдреса;
			ДеревоЭлектронногоДокументаБЭД.ОчиститьЗначениеВСтрокеДерева(ДеревоДанных, ПутьКАдресу, ПараметрыОбработкиОшибок);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в дереве электронного документа поле "Адрес"
// по полям, заполняемым на стороне прикладного решения:
//  "Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации",
//  "Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации".
//
// Параметры:
//  Участники - Массив - участники сделки в дереве электронного документа.
//   *ЭлементМассива - Строка - Путь в дереве электронного документа до участника сделки.
//  ДеревоДанных - ДеревоЗначений - Дерево электронного документа.
//  ДатаАдреса - Дата - дата получения контактной информации. Если не задана, то используется текущая дата сеанса.
//
Процедура ЗаполнитьАдресаУчастниковСделкиCML(Участники, ДеревоДанных, ДатаАдреса = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДатаАдреса) Тогда
		ДатаАдреса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПутьККорнюАдреса = ".Адрес";
	ПутьКСтруктурированномуАдресу = ".Адрес.Структурированный";
	ПутьКПроизвольномуАдресу = ".Адрес.Произвольный";
	ПутьКИностранномуАдресу = ".Адрес.Иностранный";
	ПолеКодРегиона = ".КодРегион";
	ПолеНаселПункт = ".НаселПункт";
	ПолеКвартира = ".Кварт";
	
	Для Каждого Участник Из Участники Цикл
		
		ОбъектКонтактнойИнформации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации");
			
		ВидКонтактнойИнформации    = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый.ВидКонтактнойИнформации");
		
		Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки();
		
		// Корневой элемент группы "АвтоматическиЗаполняемый" может содержать в себе
		// параметры обработки ошибки, которые могут быть добавлены в переопределяемой части.
		СтрокаДерева = ЭлектронноеВзаимодействие.СтрокаДерева(
			ДеревоДанных, Участник + ".Адрес.АвтоматическиЗаполняемый", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработкиОшибок, СтрокаДерева);
				
		Если ТипЗнч(ВидКонтактнойИнформации) <> Тип("Массив") Тогда
			ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
		Иначе
			ВидыКонтактнойИнформации = ВидКонтактнойИнформации;
		КонецЕсли;
		
		Для Каждого ПроверяемыйВид Из ВидыКонтактнойИнформации Цикл 
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектКонтактнойИнформации, ПроверяемыйВид, ДатаАдреса, Ложь);
				
			Если КонтактнаяИнформация.Количество() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;			
			
		Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
			
			АдресЗначение = КонтактнаяИнформация[0].Значение;
			Адрес = РаботаСАдресами.СведенияОбАдресе(АдресЗначение, Новый Структура("КодыАдреса", Ложь));
			
			Если Адрес.КодСтраны = "643" Тогда // Россия
				
				АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(Адрес);
				
				Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
					
					// Заполняем структурированный адрес.
					
					ПутьКАдресу = Участник + ПутьКСтруктурированномуАдресу;
					
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Индекс", Адрес.Индекс, ПараметрыОбработкиОшибок);				
				
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКодРегиона, Адрес.КодРегиона, 
						ПараметрыОшибкиЗаполненияКодаРегиона(ПараметрыОбработкиОшибок, ОбъектКонтактнойИнформации));
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Район", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Город", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеНаселПункт, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Улица", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
						НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Дом", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Корпуса.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ".Корпус", ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
					Если Адрес.Помещения.Количество() Тогда
						ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
							НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
					Иначе
						ПредставлениеЭлемента = "";
					КонецЕсли;
					ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
						ДеревоДанных, ПутьКАдресу + ПолеКвартира, ПредставлениеЭлемента, ПараметрыОбработкиОшибок);
						
				Иначе
					
					// Заполняем адрес в произвольной форме.
					
					ПутьКАдресу = Участник + ПутьКПроизвольномуАдресу;
					
					Если Адрес.ТипАдреса = "Муниципальный" Тогда

						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу, Адрес.МуниципальноеПредставление,
							ПараметрыОбработкиОшибок);
					Иначе
						ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных, ПутьКАдресу, Адрес.Представление,
							ПараметрыОбработкиОшибок);

					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ПутьКАдресу = Участник + ПутьКИностранномуАдресу;
				
				ПолеКодСтраны  = ".КодСтраны";
				ПолеАдресТекст = ".АдресТекст";
				
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПутьКАдресу + ".КодСтр") Тогда
					ПолеКодСтраны  = ".КодСтр";
					ПолеАдресТекст = ".АдрТекст";
				КонецЕсли;
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеКодСтраны, Адрес.КодСтраны, ПараметрыОбработкиОшибок);
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					ДеревоДанных, ПутьКАдресу + ПолеАдресТекст, Адрес.Представление, ПараметрыОбработкиОшибок);
				
			КонецЕсли;
				
		Иначе
			
			// Не заполнена контактная информация.
			// Очищаем значение адреса, чтобы проверка заполненности не считала реквизит заполненным.
			
			ПутьКАдресу = Участник + ПутьККорнюАдреса;
			ДеревоЭлектронногоДокументаБЭД.ОчиститьЗначениеВСтрокеДерева(ДеревоДанных, ПутьКАдресу, ПараметрыОбработкиОшибок);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОшибкиЗаполненияКодаРегиона(ПараметрыОбработкиОшибок, ОбъектКонтактнойИнформации)
	ПараметрыОбработкиОшибокКодРегиона = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОбработкиОшибок);	
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработкиОшибокКодРегиона.ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru ='Не удалось определить код региона адреса для %1. Возможно, адрес указан в свободной форме.
			|Смените тип адреса (команды ""Административно-территориальное"" или ""Муниципальное деление"" меню ""Еще"" формы редактирования адреса.'"),
			ОбъектКонтактнойИнформации);
		ПараметрыОбработкиОшибокКодРегиона.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	
	Возврат ПараметрыОбработкиОшибокКодРегиона;
	
КонецФункции

#КонецОбласти

#Область CML

#Область КаталогТоваров

// Возвращает описание данных объекта учета для каталога товаров.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Параметры - см. НовыеПараметрыФормированияДанныхОбъектаУчета
// 
// Возвращаемое значение:
//  См. НовыйРезультатФормированияДанныхОбъектаУчета
Функция КаталогТоваров_ДанныеУчета(ОбъектУчета, Параметры)

	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.КаталогТоваров");
	
	Отказ = Ложь;
	
	ДанныеКаталога = ПолучитьИзВременногоХранилища(Параметры.ДанныеКаталога);
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКаталогуТоваровCML(
		Параметры.Отправитель, ДанныеКаталога, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	КаталогТоваров_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		КаталогТоваров_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;

КонецФункции

Процедура КаталогТоваров_Автозаполнение(Данные, Знач ОбъектУчета)
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Владелец");
	
	ДатаСведений = ТекущаяДатаСеанса();
	
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаСведений);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "КаталогТоваров");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура КаталогТоваров_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область ПрайсЛист

Функция ПрайсЛист_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ПрайсЛист");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоПрайсЛисту(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ПрайсЛист_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ПрайсЛист_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрайсЛист_Автозаполнение(Данные, Знач ОбъектУчета)
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", Ложь);
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Владелец");
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаСведений);
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ПрайсЛист");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);
	
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура ПрайсЛист_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

Функция СчетНаОплату_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.СчетНаОплату");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчету(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	СчетНаОплату_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		СчетНаОплату_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	ЗаполнитьСвязанныеОбъектыУчетаCML(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Процедура СчетНаОплату_Автозаполнение(Данные, Знач ОбъектУчета)
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Продавец");
	УчастникиСделки.Добавить("Покупатель");
	
	ДатаСведений = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "Дата", Ложь);
	
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаСведений);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "СчетНаОплату");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура СчетНаОплату_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьРеквизитШапкиВДопДанные(Данные, "НалогообложениеНДС");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "НазначениеПлатежа");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ИтогоПоДокументу.Сумма");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ИтогоПоДокументу.СуммаСкидки");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ИтогоПоДокументу.СуммаБезСкидки");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ИтогиПрописью");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "УникальныйИдентификаторПлатежа");
	ПоместитьТаблицуДереваВДопДанные(Данные, "ДокументыСделки");
	ПоместитьТаблицуДереваВДопДанные(Данные, "ГрафикОплаты");
		
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

Функция СчетНаОплату101_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = СчетНаОплату101_НастройкиЗаполнения(Параметры);
	Данные = СчетНаОплату101_НовыеДанные();
	Описание = СчетНаОплату101_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчетуНаОплату101(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		СчетНаОплату101_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция СчетНаОплату101_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция СчетНаОплату101_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.СчетНаОплату_1_01");
	
	Возврат Данные;
	
КонецФункции

Функция СчетНаОплату101_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
		
	Возврат Описание;
	
КонецФункции

Процедура СчетНаОплату101_ДобавитьДополнительныеДанные(Данные)
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказПоставщику

Функция ЗаказПоставщику_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ЗаказТовара");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗаказуТоваров(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ЗаказПоставщику_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ЗаказПоставщику_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	ЗаполнитьСвязанныеОбъектыУчетаCML(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаказПоставщику_Автозаполнение(Данные, Знач ОбъектУчета)
	
	ДатаСведений = ТекущаяДатаСеанса();
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Покупатель");
	УчастникиСделки.Добавить("Продавец");
	УчастникиСделки.Добавить("Получатель");
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаСведений);
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ЗаказПоставщику");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура ЗаказПоставщику_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьРеквизитШапкиВДопДанные(Данные, "НомерДокументаОснования");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ДатаДокументаОснования");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ИтогиПрописью");
	ПоместитьТаблицуДереваВДопДанные(Данные, "ДокументыСделки");
	ПоместитьГруппуДереваВДопДанные(Данные, "ИтогоПоДокументу");
	
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказПокупателя

Функция ЗаказПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
		
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ОтветНаЗаказ");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтветуНаЗаказ(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ЗаказПокупателя_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ЗаказПокупателя_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	ЗаполнитьСвязанныеОбъектыУчетаCML(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаказПокупателя_Автозаполнение(Данные, Знач ОбъектУчета)
	
	ДатаДокумента = ТекущаяДатаСеанса();
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Покупатель");
	УчастникиСделки.Добавить("Продавец");
	УчастникиСделки.Добавить("Получатель");
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаДокумента);
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ЗаказПокупателя");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура ЗаказПокупателя_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьРеквизитШапкиВДопДанные(Данные, "НомерДокументаОснования");
	ПоместитьРеквизитШапкиВДопДанные(Данные, "ДатаДокументаОснования");
	ПоместитьГруппуДереваВДопДанные(Данные, "ИтогоПоДокументу");
	ПоместитьТаблицуДереваВДопДанные(Данные, "ДокументыСделки");
		
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетОПродажахКомиссионногоТовара

Функция ОтчетОПродажах_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ОтчетКомиссионераОПродажах");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ОтчетОПродажах_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ОтчетОПродажах_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	ЗаполнитьСвязанныеОбъектыУчетаCML(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Процедура ОтчетОПродажах_Автозаполнение(Данные, Знач ОбъектУчета)
	
	ДатаДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", Ложь);
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Комитент");
	УчастникиСделки.Добавить("Комиссионер");
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаДокумента);
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ОтчетОПродажах");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура ОтчетОПродажах_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьГруппуДереваВДопДанные(Данные, "ИтогоПоДокументу");
	ПоместитьТаблицуДереваВДопДанные(Данные, "ГрафикОплаты");
	ПоместитьГруппуДереваВДопДанные(Данные, "Услуга");
	ПоместитьТаблицуДереваВДопДанные(Данные, "ДокументыСделки");
		
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетОСписанииКомиссионногоТовара

Функция ОтчетОСписании_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.ОтчетКомиссионераОСписании");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ОтчетОСписании_Автозаполнение(Данные, ОбъектУчета);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ОтчетОСписании_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	ЗаполнитьСвязанныеОбъектыУчетаCML(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Процедура ОтчетОСписании_Автозаполнение(Данные, Знач ОбъектУчета)
	
	ДатаДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", Ложь);
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Комитент");
	УчастникиСделки.Добавить("Комиссионер");
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаДокумента);
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ОтчетОСписании");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

Процедура ОтчетОСписании_ДобавитьДополнительныеДанные(Данные)
	
	ПоместитьТаблицуДереваВДопДанные(Данные, "ДокументыСделки");
	
	ПоместитьСопоставлениеНоменклатурыВДополнительныеДанныеCML(Данные, "Товары");
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыОрганизации

Функция РеквизитыОрганизации_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.РеквизитыОрганизации");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеРеквизитыОрганизации(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	РеквизитыОрганизации_Автозаполнение(Данные);
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

Процедура РеквизитыОрганизации_Автозаполнение(Данные)
	
	ДатаДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаФормирования", Ложь);
	
	УчастникиСделки = Новый Массив;
	УчастникиСделки.Добавить("Организация");
	ЗаполнитьАдресаУчастниковСделкиCML(УчастникиСделки, Данные, ДатаДокумента);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "РеквизитыОрганизации");
	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТовараМеждуОрганизациями

Функция ПередачаТовараМеждуОрганизациями_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ПередачаВозвратТоваровМеждуОрганизациями");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ПередачаТовараМеждуОрганизациями_Автозаполнение(Данные, ОбъектУчета);
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

Процедура ПередачаТовараМеждуОрганизациями_Автозаполнение(Данные, ОбъектУчета)

	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ПередачаТовараМеждуОрганизациями");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);

	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратТовараМеждуОрганизациями

Функция ВозвратТовараМеждуОрганизациями_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ПередачаВозвратТоваровМеждуОрганизациями");
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;
	
	ВозвратТовараМеждуОрганизациями_Автозаполнение(Данные, ОбъектУчета);
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

Процедура ВозвратТовараМеждуОрганизациями_Автозаполнение(Данные, ОбъектУчета)
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("_Операция", "ВозвратТовараМеждуОрганизациями");
	ДополнительныеДанные.Вставить("Ид", ИдентификаторОбъектаУчета(ОбъектУчета));
	ДополнительныеДанные.Вставить("Номер", Описание.Номер);
	ДополнительныеДанные.Вставить("Дата", Описание.Дата);

	ДополнитьДанныеДокумента(Данные, ДополнительныеДанные);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФНС

#Область УПД2019_ИнформацияПродавца

Функция УПД2019_ИнформацияПродавца_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = УПД2019_ИнформацияПродавца_НастройкиЗаполнения(Параметры);
	Данные = УПД2019_ИнформацияПродавца_НовыеДанные();
	Описание = УПД2019_ИнформацияПродавца_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПродавца(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;
	
	УПД2019_ИнформацияПродавца_Автозаполнение(Данные);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		УПД2019_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные);
	Иначе
		УПД2019_ИнформацияПродавца_УдалитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	УПД2019_ИнформацияПродавца_ЗаполнитьФункцию(Данные, Параметры);
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	УПД2019_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Функция УПД2019_ИнформацияПродавца_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	Настройки.Вставить("Отправитель", Параметры.Отправитель);
	Настройки.Вставить("Получатель", Параметры.Получатель);
	Настройки.Вставить("Договор", Параметры.Договор);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция УПД2019_ИнформацияПродавца_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УПД_ИнформацияПродавца_2019");
	
	Возврат Данные;
	
КонецФункции

Функция УПД2019_ИнформацияПродавца_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Процедура УПД2019_ИнформацияПродавца_Автозаполнение(Данные)
	
	УПД2019_ИнформацияПродавца_АвтозаполнениеАдресов(Данные);
	
	УПД2019_ИнформацияПродавца_АвтозаполнениеДокументовПодтвержденияОтгрузки(Данные);
	
	УПД2019_ИнформацияПродавца_АвтозаполнениеОбстоятельствФормированияСФПоВидуОборота(Данные);
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	ОписаниеПоляВидОборота = ФорматыЭДО_ФНС.ОписаниеПоляВидОборотаМаркированнымиТоварамиВКомиссионныхОперациях();
	ВидОборота = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		ОписаниеПоляВидОборота.ИмяРеквизита, Ложь);
	Если ЗначениеЗаполнено(ВидОборота) Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = ОписаниеПоляВидОборота.ИмяПоля;
		НоваяСтрока.Значение = ВидОборота;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(Данные, НоваяСтрока,
			"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
	КонецЕсли;

	ДобавитьСведенияОВыбытииМаркированныхТоваров(Данные, ТекстоваяИнформация);
			
	ДокументыОснования = Данные.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть").Значение;
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
			ДокументыОснования= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснования);
		КонецЕсли;
		Для каждого Основание Из ДокументыОснования Цикл
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЦикла;
	КонецЕсли;
	
	ДокументыОснования = Данные.Строки.Найти("ДокументыОснованияДокументаОтгрузки", "ПолныйПуть").Значение;
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
			ДокументыОснования= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснования);
		КонецЕсли;
		Для каждого Основание Из ДокументыОснования Цикл
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Данные, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
		КонецЦикла;
	КонецЕсли;
	
	ВидСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ВидСчетаФактуры");
	Если ЗначениеЗаполнено(ВидСчетаФактуры)Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ВидСчетаФактуры";
		НоваяСтрока.Значение = ВидСчетаФактуры;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	ТолькоУслуги = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ТолькоУслуги");
	Если ЗначениеЗаполнено(ТолькоУслуги)Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ТолькоУслуги";
		НоваяСтрока.Значение = ТолькоУслуги;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	ИныеСведенияОбОтгрузке = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		Данные, "ИныеСведенияОбОтгрузке");
	Если ЗначениеЗаполнено(ИныеСведенияОбОтгрузке) Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ИныеСведенияОбОтгрузке";
		НоваяСтрока.Значение = ИныеСведенияОбОтгрузке;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
	КонецЕсли;
	
	ДокументОбОтгрузке = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		Данные, "ДокументОбОтгрузке");
	Если ЗначениеЗаполнено(ДокументОбОтгрузке) Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ДокументОбОтгрузке";
		НоваяСтрока.Значение = ДокументОбОтгрузке;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
		КонецЕсли;
		
		ОснованиеОсвобожденияОтНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ОснованиеОсвобожденияОтНДС");
		Если ЗначениеЗаполнено(ОснованиеОсвобожденияОтНДС) Тогда
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ОснованиеОсвобожденияОтНДС";
			НоваяСтрока.Значение = ОснованиеОсвобожденияОтНДС;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
		КонецЕсли;
		
		НомерДокументаОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОДокументеОтгрузки.Номер");
		Если ЗначениеЗаполнено(НомерДокументаОтгрузки) Тогда
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "НомерДокументаОтгрузки";
			НоваяСтрока.Значение = НомерДокументаОтгрузки;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
		КонецЕсли;
		ДатаДокументаОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.СведенияОДокументеОтгрузки.Дата");
		Если ЗначениеЗаполнено(ДатаДокументаОтгрузки) Тогда
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ДатаДокументаОтгрузки";
			НоваяСтрока.Значение = ДатаДокументаОтгрузки;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина);
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_УдалитьДополнительныеДанные(Данные)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СведенияОКомиссионере", Неопределено);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СведенияОКомитенте", Неопределено);
	
КонецПроцедуры

Процедура УПД2019_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(СвязанныеОбъектыУчета, Данные)
	
	ДокументыОснованияСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) <> Тип("Массив") Тогда
			ДокументыОснованияСчетаФактуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснованияСчетаФактуры);
		КонецЕсли;  
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснованияСчетаФактуры, Истина);
	КонецЕсли;
	ДокументыОснованияДокументаОтгрузки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДокументыОснованияДокументаОтгрузки");
	Если ЗначениеЗаполнено(ДокументыОснованияДокументаОтгрузки) Тогда
		Если ТипЗнч(ДокументыОснованияДокументаОтгрузки) <> Тип("Массив") Тогда
			ДокументыОснованияДокументаОтгрузки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснованияДокументаОтгрузки);
		КонецЕсли;  
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснованияДокументаОтгрузки, Истина);
	КонецЕсли;
	
	НаборОбъектовУчета = Новый Массив;
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			НаборОбъектовУчета.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, НаборОбъектовУчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УПД2019_ИнформацияПокупателя

Функция УПД2019_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = УПД2019_ИнформацияПокупателя_НовыеДанные();
	
	Если Параметры.Свойство("ДанныеРучногоФормированияОтветногоТитула") Тогда
		
		СтруктураОтвета = Параметры.ДанныеРучногоФормированияОтветногоТитула;
		УПД2019_ИнформацияПокупателя_ЗаполнитьДанныеРучногоФормирования(Данные, СтруктураОтвета);
		Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
		Результат.Данные = Данные;
		
		Возврат Результат;	
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбъектУчета) И Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда
		Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
		Результат.ОшибкаФормированияВПрикладнойЧасти = Истина;	
		Возврат Результат;	
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД2019_ИнформацияПокупателя(
			ОбъектУчета, Данные, Отказ);
	Исключение
		Если Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда
			Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
			Результат.ОшибкаФормированияВПрикладнойЧасти = Истина;
			Возврат Результат;
		КонецЕсли;
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();	 
	КонецПопытки;
	
	Если Отказ Тогда
		Если Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда
			Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
			Результат.ОшибкаФормированияВПрикладнойЧасти = Истина;
			Возврат Результат;
		Иначе
			Возврат НовыйРезультатФормированияДанныхОбъектаУчета();	
		КонецЕсли;
	КонецЕсли;
		
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	
	Возврат Результат;

КонецФункции

Функция УПД2019_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УПД_ИнформацияПокупателя_2019");
	
	Возврат Данные;
	
КонецФункции

Процедура УПД2019_ИнформацияПокупателя_ЗаполнитьДанныеРучногоФормирования(Данные, Знач СтруктураОтвета)

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СоставительДокументаНаименование", СтруктураОтвета.СоставительДокументаНаименование);
			
	Если СтруктураОтвета.Свойство("СоставительДокументаДоверенность") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "СоставительДокументаДоверенность", СтруктураОтвета.СоставительДокументаДоверенность);			
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(
		Данные, СтруктураОтвета.СведенияОПринятииТоваров, "СведенияОПринятииТоваров"); 
		
	Если СтруктураОтвета.Свойство("ДокументОРасхождениях") Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(
			Данные, СтруктураОтвета.СведенияОПринятииТоваров, "СведенияОПринятииТоваров.ДокументОРасхождениях");			
	КонецЕсли;
		
	Если СтруктураОтвета.Свойство("ЗакупкаДляГосударственныхНужд") Тогда 	
			
		ДенежныеОбязательства = Новый ТаблицаЗначений;
		Для Каждого ЭлементМассива Из СтруктураОтвета.ДенежныеОбязательства Цикл
			Если ДенежныеОбязательства.Колонки.Количество() = 0 Тогда
				Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
					МассивТипов = Новый Массив;
					ТипКолонки = ТипЗнч(ЗначениеСтруктуры.Значение); 
					МассивТипов.Добавить(ТипКолонки);                     
					Описание_Типов = Новый ОписаниеТипов(МассивТипов);
					ДенежныеОбязательства.Колонки.Добавить(ЗначениеСтруктуры.Ключ, Описание_Типов);
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока = ДенежныеОбязательства.Добавить();
			Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
				НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
			КонецЦикла;
		КонецЦикла;
			
		ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(
			Данные, СтруктураОтвета.ЗакупкаДляГосударственныхНужд, "ЗакупкаДляГосударственныхНужд");
				
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
			Данные, ДенежныеОбязательства, "ЗакупкаДляГосударственныхНужд.ДенежныеОбязательства");			
			
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область УПД_ИнформацияПокупателя

Функция УПД_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = УПД_ИнформацияПокупателя_НовыеДанные();

	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУПД_ИнформацияПокупателя(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция УПД_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УПД_ИнформацияПокупателя_5_01");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ПередачаТоваров_ИнформацияПродавца

Функция ПередачаТоваров_ИнформацияПродавца_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = ПередачаТоваров_ИнформацияПродавца_НастройкиЗаполнения(Параметры);
	Данные = ПередачаТоваров_ИнформацияПродавца_НовыеДанные();
	Описание = ПередачаТоваров_ИнформацияПродавца_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПродавца(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ПередачаТоваров_ИнформацияПродавца_Автозаполнение(Данные);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ПередачаТоваров_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	ПередачаТоваров_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Функция ПередачаТоваров_ИнформацияПродавца_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция ПередачаТоваров_ИнформацияПродавца_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ТОРГ12_Продавец");
	
	Возврат Данные;
	
КонецФункции

Функция ПередачаТоваров_ИнформацияПродавца_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Процедура ПередачаТоваров_ИнформацияПродавца_Автозаполнение(Данные)
	
	ПередачаТоваров_ИнформацияПродавца_АвтозаполнениеАдресов(Данные);
	
КонецПроцедуры

Процедура ПередачаТоваров_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");	
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");

	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина);
	
КонецПроцедуры

Процедура ПередачаТоваров_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(СвязанныеОбъектыУчета, Данные)
	
	ДокументыОснования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДокументыОснования");
	
	Если ДокументыОснования <> Неопределено Тогда	
		Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
			ДокументыОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснования);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснования, Истина);
		
	КонецЕсли;
	
	НаборОбъектовУчета = Новый Массив;
	СтрокаТаблицаТоваров = Данные.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаТоваров.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			НаборОбъектовУчета.Добавить(Основание);
		КонецЕсли;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, НаборОбъектовУчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаТоваров_ИнформацияПокупателя

Функция ПередачаТоваров_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ПередачаТоваров_ИнформацияПокупателя_НовыеДанные();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаТоваров_ИнформацияПокупателя(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	СоставительДокументаНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "СоставительДокументаНаименование");
	Если Не ЗначениеЗаполнено(СоставительДокументаНаименование) Тогда
		РеквизитНаименованиеОрганизации = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"НаименованиеОрганизации");
		Если НЕ ЗначениеЗаполнено(РеквизитНаименованиеОрганизации) Тогда
			РеквизитНаименованиеОрганизации = "Наименование";
		КонецЕсли;
		СоставительДокументаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отправитель, РеквизитНаименованиеОрганизации);
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СоставительДокументаНаименование", СоставительДокументаНаименование);
	КонецЕсли;
	
	ДатаПолученияГруза = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДатаПолученияГруза");
	
	Если Не ЗначениеЗаполнено(ДатаПолученияГруза) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция ПередачаТоваров_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ТОРГ12_Покупатель");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ПередачаУслуг_ИнформацияПродавца

Функция ПередачаУслуг_ИнформацияПродавца_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = ПередачаУслуг_ИнформацияПродавца_НастройкиЗаполнения(Параметры);
	Данные = ПередачаУслуг_ИнформацияПродавца_НовыеДанные();
	Описание = ПередачаУслуг_ИнформацияПродавца_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаУслуг_ИнформацияПродавца(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	ПередачаУслуг_ИнформацияПродавца_Автозаполнение(Данные);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ПередачаУслуг_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	ПередачаУслуг_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Функция ПередачаУслуг_ИнформацияПродавца_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция ПередачаУслуг_ИнформацияПродавца_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.Акт501_Исполнитель");
	
	Возврат Данные;
	
КонецФункции

Функция ПередачаУслуг_ИнформацияПродавца_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
		
	Возврат Описание;
	
КонецФункции

Процедура ПередачаУслуг_ИнформацияПродавца_Автозаполнение(Данные)
	
	ПередачаУслуг_ИнформацияПродавца_АвтозаполнениеАдресов(Данные);
	
КонецПроцедуры

Процедура ПередачаУслуг_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");

	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина);
	
КонецПроцедуры

Процедура ПередачаУслуг_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(СвязанныеОбъектыУчета, Данные)
	
	ДокументыОснования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДокументыОснования");
	Если ДокументыОснования <> Неопределено Тогда
		Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
			ДокументыОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснования);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснования, Истина);
	КонецЕсли;
	
	НаборОбъектовУчета = Новый Массив;
	СтрокаТаблицаТоваров = Данные.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "ТаблицаУслуг.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			НаборОбъектовУчета.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснования, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаУслуг_ИнформацияПокупателя

Функция ПередачаУслуг_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = ПередачаУслуг_ИнформацияПокупателя_НовыеДанные();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПередачаУслуг_ИнформацияПокупателя(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	СоставительДокументаНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "СоставительДокументаНаименование");
	Если Не ЗначениеЗаполнено(СоставительДокументаНаименование) Тогда
		РеквизитНаименованиеОрганизации = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"НаименованиеОрганизации");
		Если НЕ ЗначениеЗаполнено(РеквизитНаименованиеОрганизации) Тогда
			РеквизитНаименованиеОрганизации = "Наименование";
		КонецЕсли;
		СоставительДокументаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отправитель, РеквизитНаименованиеОрганизации);
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СоставительДокументаНаименование", СоставительДокументаНаименование);
	КонецЕсли;
	
	Претензия = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "СведенияПоВыполнениюУслуг.Претензия");
	
	Если Не ЗначениеЗаполнено(Претензия) Тогда
		
		Претензия = НСтр("ru = 'Результаты работ (оказанных услуг) приняты без претензий'");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "СведенияПоВыполнениюУслуг.Претензия", Претензия);
			
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция ПередачаУслуг_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.Акт501_Заказчик");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях_ИнформацияПокупателя

Функция АктОРасхождениях_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = АктОРасхождениях_ИнформацияПокупателя_НастройкиЗаполнения(Параметры);
	Данные = АктОРасхождениях_ИнформацияПокупателя_НовыеДанные();
	Описание = АктОРасхождениях_ИнформацияПокупателя_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктОРасхождениях_ИнформацияПокупателя(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	АктОРасхождениях_ИнформацияПокупателя_Автозаполнение(Данные);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		АктОРасхождениях_ИнформацияПокупателя_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АктОРасхождениях_ИнформацияПокупателя_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция АктОРасхождениях_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.АктОРасхождениях_2019");
	
	Возврат Данные;
	
КонецФункции

Функция АктОРасхождениях_ИнформацияПокупателя_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
		
	Возврат Описание;
	
КонецФункции

Процедура АктОРасхождениях_ИнформацияПокупателя_ДобавитьДополнительныеДанные(Данные)
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("РезультатыПриемки", "ПолныйПуть");

	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина);
	
КонецПроцедуры

Процедура АктОРасхождениях_ИнформацияПокупателя_Автозаполнение(Данные)
	
	АктОРасхожденииИнформацияПокупателя_АвтозаполнениеАдресов(Данные);
	
КонецПроцедуры

#КонецОбласти

#Область КоммерческиеПредложения

Функция КоммерческиеПредложения_ДанныеУчета(ОбъектУчета, Параметры)
	
	Результат = Неопределено;
	Если Параметры.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
		
		Результат = ЗапросКоммерческогоПредложения_ДанныеУчета(ОбъектУчета, Параметры);

	ИначеЕсли Параметры.ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда
		
		Результат = КоммерческоеПредложение_ДанныеУчета(ОбъектУчета, Параметры);
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru='Неизвестный тип ""%1"" объекта формата ""Коммерческие предложения""'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Строка(Параметры.ТипДокумент));
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область КоммерческоеПредложение

Функция КоммерческоеПредложение_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = КоммерческоеПредложение_НовыеДанные();
	Отказ = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ЗаполнитьДанныеПоКоммерческомуПредложению(ОбъектУчета, Данные, Отказ);
	Иначе
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоКоммерческомуПредложению(ОбъектУчета,
			Данные, Отказ);
	КонецЕсли;
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		КоммерческоеПредложение_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
	ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Идентификатор", Строка(ОбъектУчета.УникальныйИдентификатор()));
	ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "УчетныйДокумент", ОбъектУчета);
	ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Номер", Описание.Номер);
	ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Дата", Описание.Дата);
		
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;	
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

Функция КоммерческоеПредложение_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.КоммерческоеПредложение");
	
	Возврат Данные;
	
КонецФункции

Процедура КоммерческоеПредложение_ДобавитьДополнительныеДанные(Данные)
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("Товары", "ПолныйПуть");

	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина,
		ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы().БизнесСеть.КоммерческиеПредложения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросКоммерческогоПредложения

Функция ЗапросКоммерческогоПредложения_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Отказ = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		
		УчетныйДокумент = ОбъектУчета;
		Если МодульПодсистемы.ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений(УчетныйДокумент) Тогда
			УчетныйДокумент = МодульПодсистемы.УчетныйДокументЗапросКоммерческихПредложений(УчетныйДокумент);
		КонецЕсли;
		
		ДанныеЗапроса = МодульПодсистемы.ДанныеЗапросаКоммерческихПредложенийПоставщиков(УчетныйДокумент, Ложь, Отказ);
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			Не Отказ,
			НСтр("ru='Не удалось сформировать дерево электронного документа по запрос коммерческих предложений поставщиков.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			"ИнтеграцияЭДО.ЗапросКоммерческогоПредложения_ДанныеУчета");
		
		Данные = ДанныеЗапроса.ДанныеДокумента;
		
		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Идентификатор", Строка(ОбъектУчета.УникальныйИдентификатор()));
		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "УчетныйДокумент", УчетныйДокумент);
		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Контрагент", Параметры.Получатель);
	Иначе
		Данные = ЗапросКоммерческогоПредложения_НовыеДанные();
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоЗапросуКоммерческихПредложений(ОбъектУчета,
			Данные, Отказ);
			
		Описание = ОписаниеОснованияЭлектронногоДокумента(ОбъектУчета);
		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Идентификатор", Строка(ОбъектУчета.УникальныйИдентификатор()));
		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Номер", Описание.Номер);
		ДеревоЭлектронногоДокументаБЭД.ВставитьЗначениеВДерево(Данные, "Дата", Описание.Дата);
	КонецЕсли;

	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();
	КонецЕсли;	
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		ЗапросКоммерческогоПредложения_ДобавитьДополнительныеДанные(Данные);
	КонецЕсли;
	

	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросКоммерческогоПредложения_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ЗапросКоммерческихПредложений");
	
	Возврат Данные;
	
КонецФункции

Процедура ЗапросКоммерческогоПредложения_ДобавитьДополнительныеДанные(Данные)
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("Товары", "ПолныйПуть");

	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина,
		ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы().БизнесСеть.КоммерческиеПредложения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УКД_ИнформацияПродавца

Функция УКД_ИнформацияПродавца_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = УКД_ИнформацияПродавца_НастройкиЗаполнения(Параметры);
	Данные = УКД_ИнформацияПродавца_НовыеДанные();
	Описание = УКД_ИнформацияПродавца_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД_ИнформацияПродавца(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	УКД_ИнформацияПродавца_Автозаполнение(Данные);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		УКД_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные);
	Иначе
		УКД_ИнформацияПродавца_УдалитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	УКД_ИнформацияПродавца_ЗаполнитьФункцию(Данные, Параметры);
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	УКД_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(Результат.СвязанныеОбъектыУчета, Данные);
	
	Возврат Результат;
	
КонецФункции

Функция УКД_ИнформацияПродавца_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция УКД_ИнформацияПродавца_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УКД_ИнформацияПродавца");
	
	Возврат Данные;
	
КонецФункции

Функция УКД_ИнформацияПродавца_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Процедура УКД_ИнформацияПродавца_Автозаполнение(Данные)
	
	УКД_ИнформацияПродавца_АвтозаполнениеАдресов(Данные);
	
КонецПроцедуры

Процедура УКД_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	ДобавитьВидДокументаДляОтображенияВДопДанныеДереваДокумента(Данные, ТекстоваяИнформация);

	ДокументыОснования = Данные.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть").Значение;
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
			ДокументыОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснования);
		КонецЕсли;
		
		Для каждого Основание Из ДокументыОснования Цикл
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЦикла;
	КонецЕсли;
	
	ТолькоУслуги = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ТолькоУслуги");
	Если ЗначениеЗаполнено(ТолькоУслуги)Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ТолькоУслуги";
		НоваяСтрока.Значение = ТолькоУслуги;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
		КонецЕсли;
		
		ДобавитьСведенияОМаркировкеВДопДанныеДереваДокумента_ГИСМТ(Товар);
	КонецЦикла;
	
	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина);
	
КонецПроцедуры

Процедура УКД_ИнформацияПродавца_УдалитьДополнительныеДанные(Данные)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОКомиссионере", Неопределено);
	
КонецПроцедуры

Процедура УКД_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(СвязанныеОбъектыУчета, Данные)
	
	ДокументыОснованияСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные,
		"ДокументыОснованияСчетаФактуры");
	
	Если ДокументыОснованияСчетаФактуры <> Неопределено Тогда
		
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) <> Тип("Массив") Тогда
			ДокументыОснованияСчетаФактуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснованияСчетаФактуры, Истина);
		
	КонецЕсли;
	
	НаборОбъектовУчета = Новый Массив;
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			НаборОбъектовУчета.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, НаборОбъектовУчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УКД_ИнформацияПокупателя

Функция УКД_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = УКД_ИнформацияПокупателя_НовыеДанные();
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД_ИнформацияПокупателя(ОбъектУчета, Данные, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция УКД_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УКД_ИнформацияПокупателя");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область УКД2020_ИнформацияПродавца

Функция УКД2020_ИнформацияПродавца_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = УКД2020_ИнформацияПродавца_НастройкиЗаполнения(Параметры);
	Данные = УКД2020_ИнформацияПродавца_НовыеДанные();
	Описание = УКД2020_ИнформацияПродавца_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД2020_ИнформацияПродавца(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	УКД2020_ИнформацияПродавца_Автозаполнение(Данные);
	
	Если Параметры.ВыгружатьДополнительныеСведения Тогда
		УКД2020_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные);
	Иначе
		УКД2020_ИнформацияПродавца_УдалитьДополнительныеДанные(Данные);
	КонецЕсли;
	
	УКД_ИнформацияПродавца_ЗаполнитьФункцию(Данные, Параметры);
		
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	УКД2020_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(Результат.СвязанныеОбъектыУчета, Данные);
	
	УчестьОбратнуюСовместимостьСтруктурыДереваЭД(Данные, Параметры.Формат);
	
	Возврат Результат;
	
КонецФункции

Функция УКД2020_ИнформацияПродавца_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	Настройки.Вставить("Отправитель", Параметры.Отправитель);
	Настройки.Вставить("Получатель", Параметры.Получатель);
	Настройки.Вставить("Договор", Параметры.Договор);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция УКД2020_ИнформацияПродавца_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УКД_ИнформацияПродавца_2020");
	
	Возврат Данные;
	
КонецФункции

Функция УКД2020_ИнформацияПродавца_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
	
	Возврат Описание;
	
КонецФункции

Процедура УКД2020_ИнформацияПродавца_Автозаполнение(Данные)
	
	УКД_ИнформацияПродавца_АвтозаполнениеАдресов(Данные);
	
КонецПроцедуры

Процедура УКД2020_ИнформацияПродавца_ДобавитьДополнительныеДанные(Данные)
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
	ТекстоваяИнформация.Колонки.Добавить("Значение");
	
	ДобавитьВидДокументаДляОтображенияВДопДанныеДереваДокумента(Данные, ТекстоваяИнформация);

	ДобавитьСведенияОВыбытииМаркированныхТоваров(Данные, ТекстоваяИнформация);
	
	ДокументыОснования = Данные.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть").Значение;
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		Если ТипЗнч(ДокументыОснования) <> Тип("Массив") Тогда
			ДокументыОснования= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснования);
		КонецЕсли;
		Для каждого Основание Из ДокументыОснования Цикл
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		КонецЦикла;
	КонецЕсли;
	
	ТолькоУслуги = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ТолькоУслуги");
	Если ЗначениеЗаполнено(ТолькоУслуги)Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ТолькоУслуги";
		НоваяСтрока.Значение = ТолькоУслуги;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			ИдентификаторОснования = Строка(Основание.УникальныйИдентификатор());
			НоваяСтрока = ТекстоваяИнформация.Добавить();
			НоваяСтрока.Идентификатор = "ИдентификаторДокументаОснования";
			НоваяСтрока.Значение = ИдентификаторОснования;
			ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
				Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
		КонецЕсли;
		
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации");
		Если ТипЗнч(Реквизит) = Тип("Число") И Реквизит > 0 Тогда
			
			СведенияОТаможеннойДекларации = Товар.Строки.Найти(
				"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			НомерСтрокиТД = 0;
			Для каждого СтрокаСведений Из СведенияОТаможеннойДекларации.Строки Цикл
				НомерСтрокиТД = НомерСтрокиТД + 1;
				
				СтранаПроисхожденияКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаСведений,
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				Если ЗначениеЗаполнено(СтранаПроисхожденияКод) Тогда
					Идентификатор = "цифровой код страны происхождения";
					Если НомерСтрокиТД > 1 Тогда
						Идентификатор = Идентификатор + " " + Формат(НомерСтрокиТД, "ЧГ=0;");
					КонецЕсли;
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = Идентификатор;
					НоваяСтрока.Значение = СтранаПроисхожденияКод;
					ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
						Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
					
					ДанныеСтраныМира = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(СтранаПроисхожденияКод);
					Если ДанныеСтраныМира <> Неопределено Тогда
						Идентификатор = "краткое наименование страны происхождения";
						Если НомерСтрокиТД > 1 Тогда
							Идентификатор = Идентификатор + " " + Формат(НомерСтрокиТД, "ЧГ=0;");
						КонецЕсли;
						НоваяСтрока = ТекстоваяИнформация.Добавить();
						НоваяСтрока.Идентификатор = Идентификатор;
						НоваяСтрока.Значение = ДанныеСтраныМира.Наименование;
						ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
							Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
					КонецЕсли;
				КонецЕсли;
				
				ТаможеннаяДекларацияНомер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаСведений,
					"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				Если ЗначениеЗаполнено(ТаможеннаяДекларацияНомер) Тогда
					Идентификатор = "регистрационный номер декларации на товары";
					Если НомерСтрокиТД > 1 Тогда
						Идентификатор = Идентификатор + " " + Формат(НомерСтрокиТД, "ЧГ=0;");
					КонецЕсли;
					НоваяСтрока = ТекстоваяИнформация.Добавить();
					НоваяСтрока.Идентификатор = Идентификатор;
					НоваяСтрока.Значение = ТаможеннаяДекларацияНомер;
					ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
						Товар, НоваяСтрока, "СведенияОТоварах.НомерСтроки.ТекстоваяИнформация");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(
		Данные, СтрокаТаблицаТоваров.ПолныйПуть, Истина,
		ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы().ФНС.УКД2020.ИнформацияПродавца);
	
КонецПроцедуры

Процедура УКД2020_ИнформацияПродавца_УдалитьДополнительныеДанные(Данные)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "СведенияОКомиссионере", Неопределено);
	
КонецПроцедуры

Процедура УКД2020_ИнформацияПродавца_ЗаполнитьСвязанныеОбъектыУчета(СвязанныеОбъектыУчета, Данные)
	ДокументыОснованияСчетаФактуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "ДокументыОснованияСчетаФактуры");
	
	Если ДокументыОснованияСчетаФактуры <> Неопределено Тогда
		Если ТипЗнч(ДокументыОснованияСчетаФактуры) <> Тип("Массив") Тогда
			ДокументыОснованияСчетаФактуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыОснованияСчетаФактуры);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, ДокументыОснованияСчетаФактуры, Истина);
	КонецЕсли;
	
	НаборОбъектовУчета = Новый Массив;
	СтрокаТаблицаТоваров = Данные.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Товар, "СведенияОТоварах.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(Основание) Тогда
			НаборОбъектовУчета.Добавить(Основание);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборОбъектовУчета) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СвязанныеОбъектыУчета, НаборОбъектовУчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УКД2020_ИнформацияПокупателя

Функция УКД2020_ИнформацияПокупателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Данные = УКД2020_ИнформацияПокупателя_НовыеДанные();
	
	Если Параметры.Свойство("ДанныеРучногоФормированияОтветногоТитула") Тогда
		
		СтруктураОтвета = Параметры.ДанныеРучногоФормированияОтветногоТитула; 
		УКД2020_ИнформацияПокупателя_ЗаполнитьДанныеРучногоФормирования(Данные, СтруктураОтвета);
		
		Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
		Результат.Данные = Данные;
		
		Возврат Результат;	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) И Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда
		Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
		Результат.ОшибкаФормированияВПрикладнойЧасти = Истина;	
		Возврат Результат;	
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеУКД2020_ИнформацияПокупателя(
			ОбъектУчета, Данные, Отказ);
	Исключение
		Если Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда
			Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
			Результат.ОшибкаФормированияВПрикладнойЧасти = Истина;
			Возврат Результат;
		КонецЕсли;
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();	 
	КонецПопытки;
	
	Если Отказ Тогда
		Если Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета") Тогда
			Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
			Результат.ОшибкаФормированияВПрикладнойЧасти = Истина;
			Возврат Результат;
		Иначе
			Возврат НовыйРезультатФормированияДанныхОбъектаУчета();	
		КонецЕсли;
	КонецЕсли;
		
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	
	Возврат Результат;
		
КонецФункции

Функция УКД2020_ИнформацияПокупателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.УКД_ИнформацияПокупателя_2020");
	
	Возврат Данные;
	
КонецФункции

Процедура УКД2020_ИнформацияПокупателя_ЗаполнитьДанныеРучногоФормирования(Данные, Знач СтруктураОтвета)
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СоставительДокументаНаименование", СтруктураОтвета.СоставительДокументаНаименование); 
		
	Если СтруктураОтвета.Свойство("СоставительДокументаДоверенность") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "СоставительДокументаДоверенность", СтруктураОтвета.СоставительДокументаДоверенность);			
	КонецЕсли;
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "ДатаСогласования", СтруктураОтвета.ДатаСогласования);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СодержаниеОперации", СтруктураОтвета.СодержаниеОперации);
					
КонецПроцедуры

#КонецОбласти

#Область АктСверкиВзаиморасчетов_ИнформацияОтправителя

Функция АктСверкиВзаиморасчетов_ИнформацияОтправителя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = АктСверкиВзаиморасчетов_ИнформацияОтправителя_НастройкиЗаполнения(Параметры);
	Данные = АктСверкиВзаиморасчетов_ИнформацияОтправителя_НовыеДанные();
	Описание = АктСверкиВзаиморасчетов_ИнформацияОтправителя_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияОтправителя(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция АктСверкиВзаиморасчетов_ИнформацияОтправителя_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция АктСверкиВзаиморасчетов_ИнформацияОтправителя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.АктСверкиВзаиморасчетов_ИнформацияОтправителя_5_01");
	
	Возврат Данные;
	
КонецФункции

Функция АктСверкиВзаиморасчетов_ИнформацияОтправителя_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
		
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область АктСверкиВзаиморасчетов_ИнформацияПолучателя

Функция АктСверкиВзаиморасчетов_ИнформацияПолучателя_ДанныеУчета(Знач ОбъектУчета, Знач Параметры)
	
	Настройки = АктСверкиВзаиморасчетов_ИнформацияПолучателя_НастройкиЗаполнения(Параметры);
	Данные = АктСверкиВзаиморасчетов_ИнформацияПолучателя_НовыеДанные();
	Описание = АктСверкиВзаиморасчетов_ИнформацияПолучателя_Описание(Параметры);
	Отказ = Ложь;
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеАктСверкиВзаиморасчетов_ИнформацияПолучателя(
		ОбъектУчета, Настройки, Данные, Описание, Отказ);
	
	Если Отказ Тогда
		Возврат НовыйРезультатФормированияДанныхОбъектаУчета();;
	КонецЕсли;
	
	Результат = НовыйРезультатФормированияДанныхОбъектаУчета();
	Результат.Данные = Данные;
	Результат.Основания.Добавить(ОбъектУчета);
	Для каждого Основание Из Описание.Основания Цикл
		Результат.Основания.Добавить(Основание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция АктСверкиВзаиморасчетов_ИнформацияПолучателя_НастройкиЗаполнения(Знач Параметры)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТипДокумента", Параметры.ТипДокумента);
	
	Настройки.Вставить("ВариантыЗаполненияПолей", Новый Структура);
	Настройки.ВариантыЗаполненияПолей.Вставить("ТоварКод", Параметры.ЗаполнениеКодаТовара);
	
	Возврат Настройки;
	
КонецФункции

Функция АктСверкиВзаиморасчетов_ИнформацияПолучателя_НовыеДанные()
	
	Данные = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.АктСверкиВзаиморасчетов_ИнформацияПолучателя_5_01");
	
	Возврат Данные;
	
КонецФункции

Функция АктСверкиВзаиморасчетов_ИнформацияПолучателя_Описание(Знач Параметры)
	
	Описание = Новый Структура;
	Описание.Вставить("Основания", Новый Массив);
		
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПрикладныеОбъектыМетаданных

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - Строка - текстовое представление типа объекта.
//
// Возвращаемое значение:
//  Строка - тип справочника.
//
Функция ТипОбъектаСправочника(ОписаниеТипаОбъекта)
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

#КонецОбласти

#Область СпособыОбработки

Функция СпособОбработки_Вручную()
	Возврат "Вручную";
КонецФункции

Функция ЭтоСпособОбработки_НеОтражать(СпособОбработки) 
	 Возврат ВРег(СпособОбработки) = ВРег(СпособОбработки_НеОтражать());
КонецФункции

Функция ЭтоСпособОбработки_Вручную(СпособОбработки) 
	 Возврат ВРег(СпособОбработки) = ВРег(СпособОбработки_Вручную());
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка)
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = Новый ТаблицаЗначений;
	ПорядокСозданияТиповОбъектов.Колонки.Добавить("ТипОбъекта");
	ПорядокСозданияТиповОбъектов.Колонки.Добавить("Порядок");
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(ПорядокСозданияТиповОбъектов);
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = Неопределено;
				Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураКонтрагентов" Тогда					
					СопоставлениеНоменклатурыКонтрагентовСлужебный.СозданиеПерезаполнениеНоменклатурыКонтрагентаИзДерева(
						СтрокаОбъекта, ДеревоРазбора);					
				Иначе
					ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, СсылкаНаОбъект);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначения.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = Неопределено;
				Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураКонтрагентов" Тогда					
					СопоставлениеНоменклатурыКонтрагентовСлужебный.СозданиеПерезаполнениеНоменклатурыКонтрагентаИзДерева(
						СтрокаОбъекта, ДеревоРазбора);					
				Иначе
					ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, СсылкаНаОбъект);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначения.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользоватьСопоставлениеНоменклатуры(ТипДокумента)
	
	Если ТипЗнч(ТипДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		Использовать = Истина;
	Иначе
		Использовать = Ложь;
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользованияСопоставленияНоменклатурыКонтрагентов(
			ТипДокумента, Использовать);
	КонецЕсли;
	
	Возврат Использовать;
	
КонецФункции

Функция СохранитьДанныеОбъектаПрикладногоФормата(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки = "")
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		СписокОпераций = ЭлектронныеДокументыЭДО.СписокОперацийВидаДокумента(ДанныеЭлектронногоДокумента.ВидДокумента, Истина);		
		Для Каждого ЭлементСписка Из СписокОпераций Цикл
			Если ЭлементСписка.Пометка Тогда
				СпособОбработки = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтражения = Новый Структура;
	ПараметрыОтражения.Вставить("ЭлектронныйДокумент", ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	ПараметрыОтражения.Вставить("ТипДокумента", ДанныеЭлектронногоДокумента.ТипДокумента);
	ПараметрыОтражения.Вставить("СпособОбработки", СпособОбработки);
	ГотовКОтражениюВУчете = ПрикладнойЭлектронныйДокументГотовКОтражениюВУчете(
			ПараметрыОтражения);
	Если НЕ ГотовКОтражениюВУчете Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ПараметрыФайлаЭлектронногоДокумента = Новый Структура;
	ПараметрыФайлаЭлектронногоДокумента.Вставить("ДанныеФайла", ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла.ДвоичныеДанные);
	ПараметрыФайлаЭлектронногоДокумента.Вставить("СпособОбработки", СпособОбработки);
	ПараметрыФайлаЭлектронногоДокумента.Вставить("Входящий", ДанныеЭлектронногоДокумента.Направление = Перечисления.НаправленияЭДО.Входящий);
	
	ОбменСКонтрагентамиПереопределяемый.ПриСозданииОбъектовУчетаИзФайлаПрикладногоЭлектронногоДокумента(
		ПараметрыФайлаЭлектронногоДокумента, ДокументыУчета);
	
	Возврат ДокументыУчета;
	
КонецФункции

Процедура ЗаполнитьДокументУчета(ДанныеЭлектронногоДокумента, ДокументыУчета, ДокументЗагружен, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеЭлектронногоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		СохранитьДанныеОбъекта(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки);
		
		Если ЗначениеЗаполнено(ДокументыУчета) Тогда
			Для каждого ОбъектУчета Из ДокументыУчета Цикл
				
				СпособОбработкиТекущегоДокумента = "";
				Если ТипЗнч(СпособОбработки) = Тип("Структура") Тогда

					Если ОбъектУчетаЯвляетсяСчетомФактурой(ОбъектУчета) Тогда
						СпособОбработкиТекущегоДокумента = СпособОбработки.СчетФактура;
					Иначе
						СпособОбработкиТекущегоДокумента = СпособОбработки.ПервичныйДокумент;
					КонецЕсли;

				Иначе
					СпособОбработкиТекущегоДокумента = СпособОбработки;
				КонецЕсли;

				УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент,
					ОбъектУчета, СпособОбработкиТекущегоДокумента);

			КонецЦикла;
			
		КонецЕсли;
		
		ДокументЗагружен = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Возвращает дополнительные параметры для перезаполнения документа ИБ,
// используется в процедуре ИнтеграцияЭДО.ПерезаполнитьОбъектУчетаПоЭлектронномуДокументу.
//
// Возвращаемое значение:
// Структура - с ключами:
//  ОбъектМетаданных - Строка - возвращает название объекта метаданных перезаполняемого документа;
//  ДокументЗагружен - Булево - если Истина, то документ успешно перезаполнен;
//
Функция ДополнительныеПараметрыПерезаполненияДокументаИБ()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектМетаданных", "");
	Параметры.Вставить("ДокументЗагружен", Ложь);
	
	Возврат Параметры;
	
КонецФункции 

// Функция-конструктор параметров метода ПриОпределенииПараметровПрикладногоЭлектронногоДокументаПоИсточнику
//
// Возвращаемое Значение:
//  Структура:
//	  * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО -Ссылка на прикладной тип электронного документа.
//    * Входящий               - Булево - Признак того, что электронный документ является входящим.
//    * Организация            - ОпределяемыйТип.Организация - организация документа.
//    * Контрагент             - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//    * ДоговорКонтрагента     - ОпределяемыйТип.ДоговорСКонтрагентомЭДО - договор контрагента.
//
Функция НовыеПараметрыПрикладногоЭлектронногоДокументаПоИсточнику()
	
	Параметры = Новый Структура();
	Параметры.Вставить("ПрикладнойТипДокумента", Неопределено);
	Параметры.Вставить("Входящий", Ложь);
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Контрагент", Неопределено);
	Параметры.Вставить("ДоговорКонтрагента", Неопределено);
	
	Возврат Параметры;

КонецФункции

// Заполняет текст приглашения контрагента к ЭДО.
//
// Параметры:
//  ТекстПриглашения - Строка- заполняемый текст надписи формы.
//  ОписаниеОбъектаУчета - См. ОписаниеОбъектаУчета.
//  Гиперссылка - Булево - определяет отображать ли надпись на форме как гиперссылку.
//
Процедура ЗаполнитьТекстПриглашенияКЭДО(ТекстПриглашения, ОписаниеОбъектаУчета, Гиперссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями
		Или ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями Тогда
		
		ТекстПриглашения = НСтр("ru = 'Нет действующей настройки ЭДО с организацией-получателем'");
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОбъектаУчета.Контрагент) Тогда
		
		Гиперссылка = Истина;
		
		Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Пригласить %1 к обмену электронными документами в 1С-ЭДО'");
		Иначе
		    ШаблонТекстаНавигационнойСсылки = НСтр("ru = 'Начать обмен электронными документами с %1'");
		КонецЕсли;
		
		ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки, ОписаниеОбъектаУчета.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, является ли объект учета счетом-фактурой.
//
// Параметры:
//  ОбъектУчета - см. ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
// Возвращаемое значение:
//  Булево - признак того, является ли объект учета счетом-фактурой.
//
Функция ОбъектУчетаЯвляетсяСчетомФактурой(ОбъектУчета)
	
	Результат = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ОпределитьДокументЯвляетсяСчетомФактурой(ОбъектУчета, Результат);
	Возврат Результат;
	
КонецФункции

// Заполняет данные Договора, если они отсутствуют в дереве
// 
// Параметры:
//  ДеревоДанных   - ДеревоЗначений - Дерево данных электронного документа. 
//     Строится по макету Обработки.ОбменСКонтрагентами
//  ДанныеЭлектронногоДокумента - См. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете - 
//     данные электронного документа.
//  КореньПути - Строка - Корень пути данных в дереве данных 
//
Процедура ДополнитьДеревоДаннымиДоговора(ДеревоДанных, ДанныеЭлектронногоДокумента, КореньПути)
	
	Если Не ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьДокументНомер = КореньПути + ".НомерСтроки.ДокументНомер";
	ПутьДокументДата  = КореньПути + ".НомерСтроки.ДокументДата";
	НужноЗаполнить = Истина;
	
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти(КореньПути, "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, ПутьДокументНомер, Ложь);
			ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, ПутьДокументДата, Ложь);
			Если ЗначениеЗаполнено(ДоговорНомер) И ЗначениеЗаполнено(ДоговорДата) Тогда
				НужноЗаполнить = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если Не НужноЗаполнить Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитНомерДоговора = ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НомерДоговораКонтрагента");
	РеквизитДатаДоговора = ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ДатаДоговораКонтрагента");
	
	Если Не ЗначениеЗаполнено(РеквизитНомерДоговора) Или Не ЗначениеЗаполнено(РеквизитДатаДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	ПутиРеквизитов = Новый Массив;
	ПутиРеквизитов.Добавить("ДоговорКонтрагента." + РеквизитНомерДоговора);
	ПутиРеквизитов.Добавить("ДоговорКонтрагента." + РеквизитДатаДоговора);
	
	ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, ПутиРеквизитов);
	
	ДоговорНомерЭД = Неопределено;
	ДоговорДатаЭД  = Неопределено;
	ЗначенияРеквизитовДоговора.Свойство("ДоговорКонтрагента" + РеквизитНомерДоговора, ДоговорНомерЭД);
	ЗначенияРеквизитовДоговора.Свойство("ДоговорКонтрагента" + РеквизитДатаДоговора, ДоговорДатаЭД);
	
	Если Не ЗначениеЗаполнено(ДоговорНомерЭД) Или Не ЗначениеЗаполнено(ДоговорДатаЭД) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			СтрокаОснованиеОтгрузки, ПутьДокументНомер,	ДоговорНомерЭД);
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				СтрокаОснованиеОтгрузки, ПутьДокументДата, ДоговорДатаЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура ДополнитьДеревоДаннымиКомитента(ДеревоДанных, ДанныеЭлектронногоДокумента)
	
	Если ФорматыЭДО.ЭтоОбработкаФормата(ДеревоДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ВидУчастника = "СведенияОКомитенте";
	ТипДокумента = ДанныеЭлектронногоДокумента.ТипДокумента;
	 
	Если ТипДокумента <> Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером
		ИЛИ ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника)) Тогда
		Возврат;
	КонецЕсли;
	
	Получатель = ДанныеЭлектронногоДокумента.Получатель;
	СведенияОбУчастнике = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Получатель, СведенияОбУчастнике);
	
	ЭтоФизЛицо = ЭтоФизЛицо(Получатель);
	
	Если ЭтоФизЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			СведенияОбУчастнике.Отчество);

	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			СведенияОбУчастнике.ИНН);

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			СведенияОбУчастнике.КПП);

	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДеревоСсылкамиНаДокументыОснования(ДеревоРазбора, Данные, ДанныеЭлектронногоДокумента)

	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();

	Формат = Данные.ВерсияФормата;
	ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.ЭлектронныйДокумент;
	ДокументыОснования = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
	
		МассивИдентификаторов = Новый Массив;
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор");
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение");
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;

			КонецЦикла;			
		КонецЕсли;
		
		ДокументыОснования = ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
				
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита, "ДокументыОснованияСчетаФактуры",
				ДокументыОснования);
				
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив;
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор");
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение");
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;

			КонецЦикла;			
		КонецЕсли;
		
		ДокументыОснования = ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита, "ДокументыОснованияСчетаФактуры",
				ДокументыОснования);
	
		МассивИдентификаторов = Новый Массив;
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеДокументаОтгрузки", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор");
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение");
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;

			КонецЦикла;			
		КонецЕсли;
		
		ДокументыОснования = ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита, "ДокументыОснованияДокументаОтгрузки",
				ДокументыОснования);
	
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца 
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив;
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор");
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение");
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;

			КонецЦикла;			
		КонецЕсли;
		
		ДокументыОснования = ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита, "ДокументыОснованияСчетаФактуры",
				ДокументыОснования);
					
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив;
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанные", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанные.Подписанные.НомерСтроки.Идентификатор");
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанные.Подписанные.НомерСтроки.Значение");
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;

			КонецЦикла;			
		КонецЕсли;
		
		ДокументыОснования = ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита, "ДокументыОснования",
				ДокументыОснования);
		
	Иначе		 
		 ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, Данные, ДанныеЭлектронногоДокумента);	
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, ДанныеЭлектронногоДокумента)
	
	ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.ЭлектронныйДокумент;
	
	ЭтоСчетФактура = ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		
	ИДДокументаОснования = НовыйЭД.Строки.Найти("ИдентификаторДокументаОснования", "Реквизит", Истина);
	ИДЭДДокументаОснования = НовыйЭД.Строки.Найти("ИДЭДДокументаОснования", "Реквизит", Истина);
	// Для счета-фактуры в переопределяемой части ожидается несколько иная структура данных по основаниям.
	Если ЭтоСчетФактура Тогда
		ДокументыОснования = НовыйЭД.Строки.Найти("ДокументыОснования", "Реквизит", Истина);
		Если ДокументыОснования <> Неопределено Тогда
			Для Каждого Строка Из ДокументыОснования.Строки Цикл
				ПараметрыДокументаОснования = Строка.ЗначениеРеквизита;
				ДокументОснование = Неопределено;
				Если ПараметрыДокументаОснования.Свойство("ИдентификаторДокументаОснования", ИДЭДДокументаОснования)
					И ЗначениеЗаполнено(ИДЭДДокументаОснования) Тогда

					ИдентификаторыОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДДокументаОснования.ЗначениеРеквизита); 
					ДокументыОснования = ДокументыОснованияПоИдентификаторам(ИдентификаторыОснований, ЭлектронныйДокумент);
					Если ЗначениеЗаполнено(ДокументыОснования) Тогда
						ДокументОснование = ДокументыОснования[0];
					КонецЕсли;
				КонецЕсли;
				Если ДокументОснование <> Неопределено Тогда
					Строка.СсылкаНаОбъект = ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ИДДокументаОснования <> Неопределено Тогда
				ИдентификаторыОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДДокументаОснования.ЗначениеРеквизита); 
				ДокументыОснования = ДокументыОснованияПоИдентификаторам(ИдентификаторыОснований, ЭлектронныйДокумент);
				Если ЗначениеЗаполнено(ДокументыОснования) Тогда
					ДокументОснование = ДокументыОснования[0];
				КонецЕсли;
			КонецЕсли;
			Если ДокументОснование <> Неопределено Тогда
				ПараметрыОснования = Новый Структура("ИдентификаторДокументаОснования, ИДЭДДокументаОснования,
					|ВидДокументаОснования, НомерДокументаОснования, ДатаДокументаОснования");
				Для Каждого Элемент Из ПараметрыОснования Цикл
					СтрокаРеквизита = НовыйЭД.Строки.Найти(Элемент.Ключ, "Реквизит", Истина);
					Если СтрокаРеквизита <> Неопределено Тогда	
						ПараметрыОснования[Элемент.Ключ] = СтрокаРеквизита.ЗначениеРеквизита;
					КонецЕсли;
				КонецЦикла;
				НовСтрока = НовыйЭД.Строки.Добавить();
				НовСтрока.Реквизит = "ДокументыОснования";
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовСтрока, "ДокументОснования", ПараметрыОснования, ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОснование = Неопределено;
		Если ИДДокументаОснования <> Неопределено Тогда
			ИдентификаторыОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДДокументаОснования.ЗначениеРеквизита); 
			ДокументыОснования = ДокументыОснованияПоИдентификаторам(ИдентификаторыОснований, ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(ДокументыОснования) Тогда
				ДокументОснование = ДокументыОснования[0];
			КонецЕсли;
		КонецЕсли;
		Если ДокументОснование <> Неопределено Тогда
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДокументыОснования");
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НайденныйТипВДереве, "ДокументОснования", ДокументОснование, ДокументОснование);
			НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(ДокументОснование, "СсылкаНаОбъект");
			НайденнаяСтрока.ИндексСтроки = НайденныйТипВДереве.ИндексСтроки + "_"
				+ Строка(НайденныйТипВДереве.Строки.Индекс(НайденнаяСтрока));
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Основание", НайденнаяСтрока.ИндексСтроки, ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументыОснованияПоИдентификаторам(ИдентификаторыОснований, ЭлектронныйДокумент)

	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОтборСвязанныхДокументов = ЭлектронныеДокументыЭДО.НовыйОтборСвязанныхДокументовВходящегоЭДО();
	ОтборСвязанныхДокументов.ИдентификаторыСвязи = ИдентификаторыОснований;
	ОтборСвязанныхДокументов.ЭлектронныйДокумент = ЭлектронныйДокумент;
	
	ЗапросСвязанныхДокументов = ЭлектронныеДокументыЭДО.ЗапросСвязанныхДокументовВходящегоЭДО(ОтборСвязанныхДокументов, "СвязанныеДокументы");
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросСвязанныхДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязанныеДокументы.ЭлектронныйДокумент КАК ЭлектронныеДокумент,
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	СвязанныеДокументы КАК СвязанныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = СвязанныеДокументы.ЭлектронныйДокумент
	|		И ОбъектыУчетаДокументовЭДО.Актуальный";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	Возврат ИтоговыйЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
КонецФункции

Функция СпособОбработкиЭлектронногоДокументаПоОснованию(ЭлектронныйДокумент, ОбъектУчета)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета";
	
	Запрос.УстановитьПараметр("ОбъектУчета", ОбъектУчета);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СпособОбработки;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Функция НовыеСведенияФизЛицаПользователя()
	СведенияФизЛицаПользователя = Новый Структура;
	СведенияФизЛицаПользователя.Вставить("ИмяПолное", "");
	СведенияФизЛицаПользователя.Вставить("Должность", "");
	Возврат СведенияФизЛицаПользователя;
КонецФункции

// Возвращает массив проведенных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы.
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены.
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов)
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = ОбщегоНазначенияБЭД.МассивПроводимыхДокументов(
		МассивДокументов);
	
	Для Каждого Документ Из МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

Функция НовыеСвойстваАктуальногоТипаДокумента()
	Возврат Новый Структура("ИспользоватьДляВходящих, ИспользоватьДляИсходящих");
КонецФункции

Функция НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД(СсылкаНаВладельца = Неопределено, Записывать = Истина,
	СпособОбработки = "")

	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("СсылкаНаВладельца", СсылкаНаВладельца);
	ПараметрыОбработки.Вставить("Записывать",        Записывать);
	ПараметрыОбработки.Вставить("СпособОбработки",   СпособОбработки);
	
	Возврат ПараметрыОбработки;

КонецФункции

Функция СтатусПриглашения(Настройки)
	
	ОтборПриглашений = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.ИдентификаторОрганизации = "&ИдентификаторОрганизации";
	ОтборПриглашений.ИдентификаторКонтрагента = "&ИдентификаторКонтрагента";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", ОтборПриглашений);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросПриглашений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Приглашения.Статус
	|ИЗ
	|	Приглашения КАК Приглашения";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОрганизации", Настройки.ИдентификаторОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторКонтрагента", Настройки.ИдентификаторПолучателя);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтатусПодключения = Выборка.Статус;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПодключения;
	
КонецФункции

Функция ПредставлениеОснованияБезОбъектаУчета(ТипДокумента)
	Возврат Строка(ТипДокумента);
КонецФункции

Процедура ДобавитьВидДокументаДляОтображенияВДопДанныеДереваДокумента(Данные, ТекстоваяИнформация)
	
	ИдентификаторВидаДокумента = ИдентификаторВидаДокументаДляОтображенияВУчете();
	ВидДокументаДляОтображения = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		Данные, ИдентификаторВидаДокумента, Ложь);
	Если ЗначениеЗаполнено(ВидДокументаДляОтображения) Тогда
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = ИдентификаторВидаДокумента;
		НоваяСтрока.Значение = ВидДокументаДляОтображения;
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева(
			Данные, НоваяСтрока, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторВидаДокументаДляОтображенияВУчете() 
	
	Возврат "ВидДокумента";
	
КонецФункции

Функция НовыйРезультатОтраженияВУчете()
	
	Результат = Новый Структура;
	Результат.Вставить("Отражено", 0);
	Результат.Вставить("Пропущено", 0);
	Результат.Вставить("ОтражениеНедоступно", 0);

	Возврат Результат;
	
КонецФункции

Процедура ИсключитьНеОтражаемыеВУчетеЭлектронныеДокументы(Параметры, Результат)
	
	Для каждого СтрокаПараметров Из Параметры Цикл
		
		Описание = "";
		Если Не ВозможноСозданиеУчетногоДокумента(СтрокаПараметров.ДанныеОсновногоФайла,
			Описание, СтрокаПараметров.ТипДокумента) Тогда
			СтрокаПараметров.ОтключитьКонтрольОтраженияВУчете = Истина;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьКонтрольОтраженияВУчете(Параметры, КонтролироватьПроведенные = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	НаКонтроль = Новый Массив;
	ТребуетсяКонтроль = ТребуетсяКонтрольОтраженияВУчете(Параметры);
	
	Для Каждого СтрокаПараметров Из Параметры Цикл
		
		Если Не ТребуетсяКонтроль[СтрокаПараметров.ЭлектронныйДокумент] Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПараметров.ЭлектронныйДокумент) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			Продолжить;
		КонецЕсли;
		
		НаКонтроль.Добавить(СтрокаПараметров.ЭлектронныйДокумент);
		
		ВыполнитьКонтрольСопоставленияНоменклатуры(СтрокаПараметров);
		ВыполнитьКонтрольПроведенияУчетныхДокументов(СтрокаПараметров.ЭлектронныйДокумент, КонтролироватьПроведенные);
		
	КонецЦикла;
	
	ВыполнитьКонтрольОтраженияВУчете(НаКонтроль);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область КонтрольСопоставленияНоменклатуры

Функция ЗаполнитьНаборНоменклатурыКонтрагентовПоТаблицеТоваров(ТаблицаТоваров, Владелец, СодержитИзменяемыеДанные = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Сопоставление = СтрокаТовара.Сопоставление;
		Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сопоставление.Свойство("СодержитИзменяемыеДанные")
			И Сопоставление.СодержитИзменяемыеДанные Тогда
			СодержитИзменяемыеДанные = Истина;
		КонецЕсли;
		
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = Владелец;
		
		СопоставлениеНоменклатурыКонтрагентовКлиентСервер.РазделитьИдентификаторНаЧасти(Сопоставление.Идентификатор, НоменклатураКонтрагента);
		
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Возврат НаборНоменклатурыКонтрагентов;
	
КонецФункции

// Ставит электронный документ на контроль сопоставления номенклатуры контрагента.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ЭлектронныйДокумент, который ставится на контроль.
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагента, по которой требуется контролировать сопоставление.
//
Процедура ВключитьКонтрольСопоставленияНоменклатуры(Знач ЭлектронныйДокумент, Знач НаборНоменклатурыКонтрагентов)
	
	Если ТипЗнч(НаборНоменклатурыКонтрагентов) <> Тип("Массив") Тогда
		НаборНоменклатурыКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыКонтрагентов);
	КонецЕсли;
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		Набор = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
		Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
		
		Запись = Набор.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Запись.Владелец = НоменклатураКонтрагента.Владелец;
		Запись.Идентификатор = НоменклатураКонтрагента.Идентификатор;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Прекращает контроль сопоставления номенклатуры контрагентов.
// Возвращает набор электронных документов, за которыми данный контроль был закреплен.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагента, по которой требуется отключить контроль сопоставления.
//
Функция ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентов(Знач НаборНоменклатурыКонтрагентов)
	
	Если ТипЗнч(НаборНоменклатурыКонтрагентов) <> Тип("Массив") Тогда
		НаборНоменклатурыКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыКонтрагентов);
	КонецЕсли;
	
	НаборЭлектронныхДокументов = Новый Массив;
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НачатьТранзакцию();
		Попытка
			Набор = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
			Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
			Набор.Прочитать();
			
			Для Каждого Запись Из Набор Цикл
				Если НаборЭлектронныхДокументов.Найти(Запись.ЭлектронныйДокумент) = Неопределено Тогда
					НаборЭлектронныхДокументов.Добавить(Запись.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Набор) Тогда
				Набор.Очистить();
				Набор.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат НаборЭлектронныхДокументов;
	
КонецФункции

Функция ЗапросНоменклатураКонтрагентовНаКонтроле(ТекстЗапроса, Отбор)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	УсловиеОтбора = "ИСТИНА";
	Если Отбор <> Неопределено Тогда
		Для Каждого Элемент Из Отбор Цикл
			УсловиеОтбора = УсловиеОтбора + " И Контроль." + Элемент.Ключ + " В (&" + Элемент.Ключ + ")";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	Возврат Запрос;
	
КонецФункции

Функция НеСопоставленнаяНоменклатураКонтрагента(НоменклатураНаСопоставление, Сопоставление)
	
	Результат = Новый Массив;
	
	Для Каждого НоменклатураКонтрагента Из НоменклатураНаСопоставление Цикл
		
		Если НЕ ЕстьСопоставлениеНоменклатуры(НоменклатураКонтрагента, Сопоставление) Тогда
			НоваяНоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
			ЗаполнитьЗначенияСвойств(НоваяНоменклатураКонтрагента, НоменклатураКонтрагента);
			Результат.Добавить(НоваяНоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьСопоставлениеНоменклатуры(НоменклатураКонтрагента, Сопоставление)
	
	ЕстьСопоставление = Ложь;
	Для Каждого Элемент Из Сопоставление Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураИБ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НоменклатураКонтрагента.Владелец = Элемент.НоменклатураКонтрагента.Владелец
			И НоменклатураКонтрагента.Идентификатор = Элемент.НоменклатураКонтрагента.Идентификатор Тогда
				ЕстьСопоставление = Истина;
				Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьСопоставление;
	
КонецФункции

#КонецОбласти

#Область КонтрольПроведения

// Выполняет проверку электронного документа на наличие непроведенных учетных документов.
// Непроведенные документы ставится на контроль.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - электронный документ на проверку.
//  КонтролироватьПроведенные - Булево - Указывает на необходимость контроля проведения даже если документ является проведенным.
//
Процедура ВыполнитьКонтрольПроведенияУчетныхДокументов(Знач ЭлектронныйДокумент, КонтролироватьПроведенные = Ложь)
	
	ОтключитьКонтрольПроведенияУчетныхДокументовЭД(ЭлектронныйДокумент);
	
	ОбъектыУчетаЭлектронныхДокументов = ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент);
	НаборУчетныхДокументов = ОбъектыУчетаЭлектронныхДокументов.ВыгрузитьКолонку("ОбъектУчета");
	 
	НаКонтроль = Новый Массив;
	
	Для Каждого УчетныйДокумент Из НаборУчетныхДокументов Цикл
		
		Если ОбщегоНазначенияБЭД.ЭтоПроводимыйДокумент(УчетныйДокумент) Тогда
			Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетныйДокумент, "Проведен");
			Если Не Проведен Или КонтролироватьПроведенные Тогда
				НаКонтроль.Добавить(УчетныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС =
				ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
				МодульЭлектронноеАктированиеЕИС.ВыполнитьКонтрольПроведенияУчетныхДокументов(
					УчетныйДокумент, НаКонтроль);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВключитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент, НаКонтроль);
	
КонецПроцедуры

// Ставит электронный документ на контроль проведения связанных с ним учетных документов.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - электронный документ, который ставится на контроль.
//  НаборУчетныхДокументов - Массив - учетные документы, проведение которых нужно контролировать.
//
Процедура ВключитьКонтрольПроведенияУчетныхДокументов(Знач ЭлектронныйДокумент, Знач НаборУчетныхДокументов)
	
	Если ТипЗнч(НаборУчетныхДокументов) <> Тип("Массив") Тогда
		НаборУчетныхДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборУчетныхДокументов);
	КонецЕсли;
	
	Для Каждого УчетныйДокумент Из НаборУчетныхДокументов Цикл
		
		Набор = РегистрыСведений.КонтрольПроведенияУчетныхДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.УчетныйДокумент.Установить(УчетныйДокумент);
		
		Запись = Набор.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Запись.УчетныйДокумент = УчетныйДокумент;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Прекращает контроль проведения учетных документов для электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ, который снимается с контроля.
//
Процедура ОтключитьКонтрольПроведенияУчетныхДокументовЭД(Знач ЭлектронныйДокумент)
	
	Набор = РегистрыСведений.КонтрольПроведенияУчетныхДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольОтраженияВУчете

// Возвращает необходимость контроля отражения в учете электронного документа.
//
// Параметры:
//  Параметры - Массив из см. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете() - набор параметров отражения в учете.
//
// Возвращаемое значение:
//  Булево, Соответствие - признак того, что электронный документ требует контроля отражения в учете.
//                         Если был передан массив электронных документов, то возвращается соответствие
//                         с электронными документами в ключах и признаком необходимости контроля в значениях.
//
Функция ТребуетсяКонтрольОтраженияВУчете(Параметры)
	
	СостоянияПрерывания = Новый Массив;
	СостоянияПрерывания.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияДокументовЭДО.Аннулирован);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно);
	
	ОтражаемыеВУчетеТипыЭД = Новый Массив;
	ИспользуемыеТипыДокументов = ИспользуемыеТипыДокументов();
	Для Каждого ОписаниеТипаДокумента Из ИспользуемыеТипыДокументов Цикл
		Если ОписаниеТипаДокумента.Значение.ИспользоватьДляВходящих Тогда
			ОтражаемыеВУчетеТипыЭД.Добавить(ОписаниеТипаДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ОтключитьКонтрольОтраженияВУчетеДокументовПодсистемы(ОтражаемыеВУчетеТипыЭД);
	КонецЕсли;	
	
	Результат = Новый Соответствие;
	Для каждого СтрокаПараметров Из Параметры Цикл
		ТипДокумента = СтрокаПараметров.ТипДокумента;

		ВозможноОтразитьВУчете = СтрокаПараметров.Направление =  Перечисления.НаправленияЭДО.Входящий 
				И ОтражаемыеВУчетеТипыЭД.Найти(ТипДокумента) <> Неопределено;
		ТребуетсяКонтроль = (СостоянияПрерывания.Найти(СтрокаПараметров.СостояниеДокумента) = Неопределено)
				И ВозможноОтразитьВУчете
				И Не СтрокаПараметров.ОтключитьКонтрольОтраженияВУчете
				И Не ОтключенКонтрольОтраженияВУчетеВНастройках(СтрокаПараметров);
		Результат.Вставить(СтрокаПараметров.ЭлектронныйДокумент, ТребуетсяКонтроль);
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

// Возвращает способ отражения электронного документа в учете.
// 
// Параметры:
//  ДанныеДокумента - См. ИнтеграцияЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
// 
// Возвращаемое значение:
//  Структура:
//	* ПервичныйДокумент - Строка
//  * СчетФактура - Строка
//	Строка
//
Функция СпособОтраженияВУчетеЭлектронногоДокумента(Знач ДанныеДокумента)
		
	КлючНастроекОтраженияВУчете = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
	КлючНастроекОтраженияВУчете.ВидДокумента = ДанныеДокумента.ВидДокумента;
	КлючНастроекОтраженияВУчете.Отправитель = ДанныеДокумента.Отправитель;
	КлючНастроекОтраженияВУчете.Получатель = ДанныеДокумента.Получатель;
	КлючНастроекОтраженияВУчете.ИдентификаторОтправителя = ДанныеДокумента.ИдентификаторОтправителя;
	КлючНастроекОтраженияВУчете.ИдентификаторПолучателя = ДанныеДокумента.ИдентификаторПолучателя;
		
	ДополнительныеВиды = Новый Массив;
		
	Если ДанныеДокумента.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УПД) Тогда
		КлючНастроекОтраженияВУчете.ВидДокумента =  ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.СчетФактура);
		ДополнительныеВиды = ЭлектронныеДокументыЭДО.ДополнительныеВидыДокументовУПД(ДанныеДокумента.ДанныеОсновногоФайла);	
		
	ИначеЕсли ДанныеДокумента.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УКД) Тогда
		КлючНастроекОтраженияВУчете.ВидДокумента =  ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
		ДополнительныеВиды.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости));	
	
	КонецЕсли;
	
	СпособОбработкиОсновногоВида = НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроекОтраженияВУчете).СпособОбработки;
	
	Если ЗначениеЗаполнено(ДополнительныеВиды) Тогда
		
		Если ЭтоСпособОбработки_НеОтражать(СпособОбработкиОсновногоВида) Тогда
			СпособОбработкиДополнительногоВида = СпособОбработки_НеОтражать();
		Иначе
			Если ДополнительныеВиды.Количество() = 1 Тогда
				
				КлючНастроекОтраженияВУчете.ВидДокумента = ДополнительныеВиды[0];
				
				СпособОбработкиДополнительногоВида = 
					НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроекОтраженияВУчете).СпособОбработки;
			Иначе
				СпособОбработкиДополнительногоВида = СпособОбработки_Вручную();
			КонецЕсли;
		КонецЕсли;
		
		СпособОбработкиСтруктура = Новый Структура("ПервичныйДокумент, СчетФактура");
		СпособОбработкиСтруктура.ПервичныйДокумент = СпособОбработкиДополнительногоВида;
		СпособОбработкиСтруктура.СчетФактура = СпособОбработкиОсновногоВида;
		
		СпособОбработкиОсновногоВида = СпособОбработкиСтруктура;
	КонецЕсли;
		
	Возврат СпособОбработкиОсновногоВида;
	
КонецФункции

// Выполняет проверку на соответствие электронных документов требованиям по отражению в учете.
//
// Параметры:
//  НаборЭлектронныхДокументов - Массив - электронные документы (ДокументСсылка.ЭлектронныйДокументВходящий), 
//                                        по которым нужно выполнить проверку.
//  НаборПроверок - Массив, Неопределено - перечень проверок (строка), которые нужно выполнить:
//   * "СопоставитьНоменклатуру" - проверка на завершение сопоставления номенклатуры.
//   * "СоздатьУчетныйДокумент" - проверка на наличие учетного документа.
//   * "ПровестиУчетныйДокумент" - проверка на проведенность учетного документа.
//
Процедура ВыполнитьКонтрольОтраженияВУчете(Знач НаборЭлектронныхДокументов, Знач НаборПроверок = Неопределено)
	
	// Подготовка параметров.
	
	Если Не ЗначениеЗаполнено(НаборЭлектронныхДокументов) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НаборПроверок) Тогда
		НаборПроверок = Новый Массив;
		НаборПроверок.Добавить("СопоставитьНоменклатуру");
		НаборПроверок.Добавить("СоздатьУчетныйДокумент");
		НаборПроверок.Добавить("ПровестиУчетныйДокумент");
	КонецЕсли;
	Если ТипЗнч(НаборПроверок) = Тип("Строка") Тогда
		НаборПроверок = СтрРазделить(НаборПроверок, ",");
	КонецЕсли;
	
	// Сбор текста запроса для выполнения контроля.
	
	КонтрольПрохожденияПроверок = Новый Соответствие;
	ИндексЗапроса = 0;
	ЧастиЗапроса = Новый Массив;
	
	Для Каждого Проверка Из НаборПроверок Цикл
		
		ТекстЗапроса = "";
		
		Если Проверка = "СопоставитьНоменклатуру" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольСопоставления.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ИСТИНА КАК СопоставитьНоменклатуру
			|ИЗ
			|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК КонтрольСопоставления
			|ГДЕ
			|	КонтрольСопоставления.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		ИначеЕсли Проверка = "СоздатьУчетныйДокумент" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольСоздания.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	КонтрольСоздания.ОбъектУчета КАК УчетныйДокумент
			|ИЗ
			|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК КонтрольСоздания
			|ГДЕ
			|	КонтрольСоздания.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		ИначеЕсли Проверка = "ПровестиУчетныйДокумент" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольПроведения.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ИСТИНА КАК ПровестиУчетныйДокумент
			|ИЗ
			|	РегистрСведений.КонтрольПроведенияУчетныхДокументовЭДО КАК КонтрольПроведения
			|ГДЕ
			|	КонтрольПроведения.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		КонтрольПрохожденияПроверок.Вставить(Проверка, ИндексЗапроса);
		
		Если ЗначениеЗаполнено(ЧастиЗапроса) Тогда
			Разделитель =
			"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			ЧастиЗапроса.Добавить(Разделитель);
		КонецЕсли;
		ЧастиЗапроса.Добавить(ТекстЗапроса);
		
		ИндексЗапроса = ИндексЗапроса + 1
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", НаборЭлектронныхДокументов);
	
	// Анализ результата запроса.
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицыПроверок = Новый Массив;
	Для Каждого Результат Из РезультатыЗапроса Цикл
		Таблица = Результат.Выгрузить();
		Таблица.Индексы.Добавить("ЭлектронныйДокумент");
		ТаблицыПроверок.Добавить(Таблица);
	КонецЦикла;
	
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		
		ОтборЭД = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		Изменения = Новый Структура;
		
		Для Каждого Элемент Из КонтрольПрохожденияПроверок Цикл
			
			Проверка = Элемент.Ключ;
			Таблица = ТаблицыПроверок[Элемент.Значение];
			
			Если Проверка = "СопоставитьНоменклатуру" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				СопоставитьНоменклатуру = ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("СопоставитьНоменклатуру", СопоставитьНоменклатуру);
				
			ИначеЕсли Проверка = "СоздатьУчетныйДокумент" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				СоздатьУчетныйДокумент = Не ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("СоздатьУчетныйДокумент", СоздатьУчетныйДокумент);
				
			ИначеЕсли Проверка = "ПровестиУчетныйДокумент" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				ПровестиУчетныйДокумент = ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("ПровестиУчетныйДокумент", ПровестиУчетныйДокумент)
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИзменитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, Изменения);
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет наличие контроля отражения в учете по электронному документу.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, по которому изменяются данные.
//  НаборИзменений - Структура - перечень изменений. 
//   * Ключ - требование.
//    ** СопоставитьНоменклатуру - проверка на завершение сопоставления номенклатуры.
//    ** СоздатьУчетныйДокумент - проверка на наличие учетного документа.
//    ** ПровестиУчетныйДокумент - проверка на проведенность учетного документа.
//   * Значение - Булево - признак нахождения документа на контроле по данному требованию. 
//                         Т.е. если Истина, то документ еще НЕ соответствует требованию.
//
Процедура ИзменитьКонтрольОтраженияВУчете(Знач ЭлектронныйДокумент, Знач НаборИзменений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КонтрольОтраженияВУчетеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.КонтрольОтраженияВУчетеЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
		
		Записать = Ложь;
		Для Каждого Запись Из Набор Цикл
			
			Для Каждого Изменение Из НаборИзменений Цикл
				
				ТекущееЗначение = Запись[Изменение.Ключ];
				НовоеЗначение = Изменение.Значение;
				Если ТекущееЗначение <> НовоеЗначение Тогда
					Записать = Истина;
					Запись[Изменение.Ключ] = НовоеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Записать Тогда
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область АктуальныеЭлектронныеДокументы

Процедура ЗапуститьПроверкуАктуальностиВнутреннегоЭД(ОбъектУчета, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаблокироватьДанныеДляПроверкиАктуальностиЭД(ОбъектУчета, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектУчета.Установить(ОбъектУчета);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.Актуальный Тогда
			Запись.ТребуетсяПересчетАктуальности = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НаборЗаписей.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
	
	ЗапуститьЗаданиеПересчетаАктуальности(ОбъектУчета);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеДляПроверкиАктуальностиЭД(ОбъектУчета, Отказ)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОбъектыУчетаДокументовЭДО");
	ЭлементБлокировки.УстановитьЗначение("ОбъектУчета", ОбъектУчета);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать сведения об актуальности ЭД: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗапуститьЗаданиеПересчетаАктуальности(ОбъектУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОчередьЗаданийПересчетаАктуальностиПуста() Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = "ПересчетАктуальностиЭлектронныхДокументов";
	
	КлючПоиска = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(КлючПоиска);
	Если Задания.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭкспортнойПроцедуры = "ИнтеграцияЭДО.ОбработатьОчередьЗаданий";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОбъектУчета", ОбъектУчета);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗаполнения);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);   
	
	НаименованиеЗадания = НСтр("ru = 'Пересчет актуальности электронных документов'");
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбработатьОчередьЗаданий(Параметры, АдресРезультата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОжидатьЗавершениеЗаписиДанныхАктуальности(Параметры.ОбъектУчета);
	
	ДанныеКОбработке = ВыбратьДанныеДляАктуализацииЭД(Параметры.ОбъектУчета);
	
	Пока ЗначениеЗаполнено(ДанныеКОбработке) Цикл
		
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
				"ОбщийМодуль.ИнтеграцияЭДО.ЭлектронныйДокументАктуален"); 
		
		Для Каждого СтрокаДанных Из ДанныеКОбработке Цикл
			
			ЭлектронныйДокументАктуален = ЭлектронныеДокументыЭДО.ВнутреннийДокументАктуален(СтрокаДанных.ОбъектУчета, 
																		СтрокаДанных.ВидЭлектронногоДокумента, 
																		СтрокаДанных.ЭлектронныйДокумент);
																		
			НаборЗаписей = РегистрыСведений.ОбъектыУчетаДокументовЭДО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектУчета.Установить(СтрокаДанных.ОбъектУчета);
			НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(СтрокаДанных.ЭлектронныйДокумент);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Актуальный = ЭлектронныйДокументАктуален;
				Запись.ТребуетсяПересчетАктуальности = Ложь;
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не ЭлектронныйДокументАктуален Тогда

				ПричинаЗакрытия = НСтр("ru='Закрыт автоматически при изменении учетного документа.'");
				ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаДанных.ЭлектронныйДокумент);

				ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
				ДополнительныеДанныеДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
				ДополнительныеДанныеДействия.Комментарий = ПричинаЗакрытия;
				
				НаборДействий = Новый Соответствие;	
				ДополнительныеДанныеОбъектов = Новый Соответствие;
				ДополнительныеДанныеОбъектов.Вставить(СтрокаДанных.ЭлектронныйДокумент, ПричинаЗакрытия);
				ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
					"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
				ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
				ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы = ЭлектронныеДокументы;
				ПараметрыВыполненияДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(ПредопределенноеЗначение(
					"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"), ДополнительныеДанныеДействия);
				
				ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);				
				
				ОчиститьАктуальностьЭлектронногоДокумента(СтрокаДанных.ЭлектронныйДокумент);
				
				Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.ЭлектронныйДокумент, "Ответственный");
				ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "ИдентификаторПользователяИБ");
				
				ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
				
				//""""\
				ПараметрыПредставления.ВидДокумента = СтрокаДанных.ЭлектронныйДокумент.ВидДокумента;
				ПараметрыПредставления.НомерДокумента = СтрокаДанных.ЭлектронныйДокумент.НомерДокумента;
				ПараметрыПредставления.ДатаДокумента = СтрокаДанных.ЭлектронныйДокумент.ДатаДокумента;
				
				ТекстСообщения = НСтр("ru = 'Электронный документ потерял актуальность'");
				Действия = Новый СписокЗначений;
				Действия.Добавить("ОткрытьЭД", "" + ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления));
				Данные = ПолучитьНавигационнуюСсылку(СтрокаДанных.ЭлектронныйДокумент);
				
				Попытка
					ОповещенияОСобытияхЭДО.ОтправитьСообщениеСистемыВзаимодействия(ИдентификаторПользователяИБ, ТекстСообщения, Действия, Данные);
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка сообщения системы взаимодействия'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ДанныеКОбработке.Количество());
		
		ДанныеКОбработке = ВыбратьДанныеДляАктуализацииЭД();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОчередьЗаданийПересчетаАктуальностиПуста()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ТребуетсяПересчетАктуальности");
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОжидатьЗавершениеЗаписиДанныхАктуальности(ОбъектУчета)
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ОбъектМетаданных = "РегистрСведений.ОбъектыУчетаДокументовЭДО";
			
			БлокировкаДанных = Новый БлокировкаДанных;
			
			Если ТипЗнч(ОбъектУчета) <> Тип("Массив") Тогда
				БлокировкаДанных.Добавить(ОбъектМетаданных).УстановитьЗначение("ОбъектУчета", ОбъектУчета);
			Иначе
				Для Каждого ЭлементБлокировки Из ОбъектУчета Цикл
					БлокировкаДанных.Добавить(ОбъектМетаданных).УстановитьЗначение("ОбъектУчета", ЭлементБлокировки);
				КонецЦикла;
			КонецЕсли;
			
			БлокировкаДанных.Заблокировать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пересчет актуальности электронных документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОбъектыУчетаДокументовЭДО,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьДанныеДляАктуализацииЭД(ОбъектУчета = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента КАК ВидЭлектронногоДокумента
	|ИЗ
	|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|ГДЕ
	|	ОбъектыУчетаДокументовЭДО.ТребуетсяПересчетАктуальности";
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		Запрос.Текст = Запрос.Текст + " И ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета";
		Запрос.Параметры.Вставить("ОбъектУчета", ОбъектУчета); 
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбратнаяСовместимостьДереваЭлектронногоДокумента

Процедура УчестьОбратнуюСовместимостьСтруктурыДереваЭД(Данные, Формат)
	
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		УчестьМножественностьКорректируемыхСФ(Данные);
	КонецЕсли;
	
КонецПроцедуры

#Область ТаблицаКорректируемыхСФ

// Обрабатывает "мягкий" переход на множественное указание корректируемых СФ в дереве данных УКД.
// 
// Параметры:
//  Данные - ДеревоЗначений - Дерево данных документа согласно макетам УКД_ИнформацияПродавца
//                                                                     или УКД_ИнформацияПродавца_2020
Процедура УчестьМножественностьКорректируемыхСФ(Данные)
	
	СведенияПоСтарому = СведенияОКорректируемомСФПоСтарому(Данные);
	СведенияПоНовому = СведенияОКорректируемыхСФПоНовому(Данные);
	
	ЗанестиСведенияКорректируемогоСФВТаблицу(СведенияПоСтарому, СведенияПоНовому);
	ЗанестиСведенияКорректируемогоСФВРеквизиты(СведенияПоСтарому, СведенияПоНовому);
	
	ЗаполнитьСведенияКорректируемогоСФВДеревеДанных(СведенияПоСтарому, СведенияПоНовому, Данные);
	
КонецПроцедуры

Функция СведенияОКорректируемомСФПоСтарому(Данные)
	
	СведенияИсходногоДокумента = Новый Структура;
	СведенияИсходногоДокумента.Вставить("НомерИсходногоДокумента");
	СведенияИсходногоДокумента.Вставить("ДатаИсходногоДокумента");
	СведенияИсходногоДокумента.Вставить("ПредставлениеИсходногоДокумента");
	СведенияИсходногоДокумента.Вставить("НомерИсправленияИсходногоДокумента");
	СведенияИсходногоДокумента.Вставить("ДатаИсправленияИсходногоДокумента");
	
	
	СведенияИсходногоДокумента.НомерИсходногоДокумента =
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "НомерИсходногоДокумента");
	СведенияИсходногоДокумента.ДатаИсходногоДокумента =
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "ДатаИсходногоДокумента");
	СведенияИсходногоДокумента.ПредставлениеИсходногоДокумента =
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "ПредставлениеИсходногоДокумента");
	СведенияИсходногоДокумента.НомерИсправленияИсходногоДокумента =
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "НомерИсправленияИсходногоДокумента");
	СведенияИсходногоДокумента.ДатаИсправленияИсходногоДокумента =
		ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(Данные, "ДатаИсправленияИсходногоДокумента");
	
	Возврат СведенияИсходногоДокумента;
	
КонецФункции

Функция СведенияОКорректируемыхСФПоНовому(Данные)
	
	ИсходныеДокументы = Новый ТаблицаЗначений;
	ИсходныеДокументы.Колонки.Добавить("НомерИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ДатаИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ПредставлениеИсходногоДокумента");
	ИсходныеДокументы.Колонки.Добавить("ИсправленияИсходногоДокумента");
	
	ТаблицаИсходныхДокументов = Данные.Строки.Найти("ИсходныеДокументы", "ПолныйПуть");
	Для каждого ИсходныйДокумент Из ТаблицаИсходныхДокументов.Строки Цикл
		
		НомерИсходногоДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ИсходныйДокумент, "ИсходныеДокументы.НомерСтроки.НомерИсходногоДокумента");
		ДатаИсходногоДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ИсходныйДокумент, "ИсходныеДокументы.НомерСтроки.ДатаИсходногоДокумента");
		
		Если Не (ЗначениеЗаполнено(НомерИсходногоДокумента) И ЗначениеЗаполнено(ДатаИсходногоДокумента)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокумента = ИсходныеДокументы.Добавить();
		
		СтрокаДокумента.НомерИсходногоДокумента = НомерИсходногоДокумента;
		СтрокаДокумента.ДатаИсходногоДокумента = ДатаИсходногоДокумента;
		СтрокаДокумента.ПредставлениеИсходногоДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ИсходныйДокумент, "ИсходныеДокументы.НомерСтроки.ПредставлениеИсходногоДокумента");
		
		ТаблицаИсправлений = ИсходныйДокумент.Строки.Найти("ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента");
		
		Если ТаблицаИсправлений.Строки.Количество() > 0 Тогда
			ИсправленияИсходногоДокумента = Новый ТаблицаЗначений;
			ИсправленияИсходногоДокумента.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
			ИсправленияИсходногоДокумента.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
			
			СтрокаДокумента.ИсправленияИсходногоДокумента = ИсправленияИсходногоДокумента;
		КонецЕсли;
		
		Для Каждого Исправление Из ТаблицаИсправлений.Строки Цикл
			
			НомерИсправления = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				Исправление,
				"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента.НомерСтроки.НомерИсправленияИсходногоДокумента");
			ДатаИсправления = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
				Исправление,
				"ИсходныеДокументы.НомерСтроки.ИсправленияИсходногоДокумента.НомерСтроки.ДатаИсправленияИсходногоДокумента");
			
			Если Не (ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления)) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИсправления = СтрокаДокумента.ИсправленияИсходногоДокумента.Добавить();
			
			СтрокаИсправления.НомерИсправленияИсходногоДокумента = НомерИсправления;
			СтрокаИсправления.ДатаИсправленияИсходногоДокумента = ДатаИсправления;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИсходныеДокументы;
	
КонецФункции

Процедура ЗанестиСведенияКорректируемогоСФВТаблицу(СведенияПоСтарому, СведенияПоНовому)
	
	Если Не (ЗначениеЗаполнено(СведенияПоСтарому.НомерИсходногоДокумента)
			И ЗначениеЗаполнено(СведенияПоСтарому.ДатаИсходногоДокумента)) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаИсхДокВТаблице = Неопределено;
	
	Для Каждого СтрокаИсхДок Из СведенияПоНовому Цикл
		
		Если СтрокаИсхДок.НомерИсходногоДокумента = СведенияПоСтарому.НомерИсходногоДокумента
			И СтрокаИсхДок.ДатаИсходногоДокумента = СведенияПоСтарому.ДатаИсходногоДокумента Тогда
			
			СтрокаИсхДокВТаблице = СтрокаИсхДок;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаИсхДокВТаблице = Неопределено Тогда
		СтрокаИсхДокВТаблице = СведенияПоНовому.Добавить();
		
		СтрокаИсхДокВТаблице.НомерИсходногоДокумента = СведенияПоСтарому.НомерИсходногоДокумента;
		СтрокаИсхДокВТаблице.ДатаИсходногоДокумента = СведенияПоСтарому.ДатаИсходногоДокумента;
		СтрокаИсхДокВТаблице.ПредставлениеИсходногоДокумента = СведенияПоСтарому.ПредставлениеИсходногоДокумента;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(СведенияПоСтарому.НомерИсправленияИсходногоДокумента)
		И ЗначениеЗаполнено(СведенияПоСтарому.ДатаИсправленияИсходногоДокумента)) Тогда
		
		Возврат;
	КонецЕсли;
	
	СтрокаИсправленияВТаблице = Неопределено;
	
	Если ТипЗнч(СтрокаИсхДокВТаблице.ИсправленияИсходногоДокумента) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаИсправления Из СтрокаИсхДокВТаблице.ИсправленияИсходногоДокумента Цикл
			
			Если СтрокаИсправления.НомерИсправленияИсходногоДокумента
					= СведенияПоСтарому.НомерИсправленияИсходногоДокумента
				И СтрокаИсправления.ДатаИсправленияИсходногоДокумента
					= СведенияПоСтарому.ДатаИсправленияИсходногоДокумента Тогда
				
				СтрокаИсправленияВТаблице = СтрокаИсправления;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаИсправленияВТаблице = Неопределено Тогда
		
		Если ТипЗнч(СтрокаИсхДокВТаблице.ИсправленияИсходногоДокумента) <> Тип("ТаблицаЗначений") Тогда
			СтрокаИсхДокВТаблице.ИсправленияИсходногоДокумента = Новый ТаблицаЗначений();
		КонецЕсли;
		
		СтрокаИсправленияВТаблице = СтрокаИсхДокВТаблице.ИсправленияИсходногоДокумента.Добавить();
		
		СтрокаИсправленияВТаблице.НомерИсправленияИсходногоДокумента =
			СведенияПоСтарому.НомерИсправленияИсходногоДокумента;
		СтрокаИсправленияВТаблице.ДатаИсправленияИсходногоДокумента =
			СведенияПоСтарому.ДатаИсправленияИсходногоДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗанестиСведенияКорректируемогоСФВРеквизиты(СведенияПоСтарому, СведенияПоНовому)
	
	Если СведенияПоНовому.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияПоСтарому.НомерИсходногоДокумента)
		И ЗначениеЗаполнено(СведенияПоСтарому.ДатаИсходногоДокумента) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоследняяСтрокаИсхДок = СведенияПоНовому[СведенияПоНовому.Количество() - 1];
	
	СведенияПоСтарому.НомерИсходногоДокумента = ПоследняяСтрокаИсхДок.НомерИсходногоДокумента;
	СведенияПоСтарому.ДатаИсходногоДокумента = ПоследняяСтрокаИсхДок.ДатаИсходногоДокумента;
	СведенияПоСтарому.ПредставлениеИсходногоДокумента = ПоследняяСтрокаИсхДок.ПредставлениеИсходногоДокумента;
	
	ТаблицаИсправлений = ПоследняяСтрокаИсхДок.ИсправленияИсходногоДокумента;
	
	Если ТипЗнч(ТаблицаИсправлений) <> Тип("ТаблицаЗначений")
		Или ТаблицаИсправлений.Количество() = 0 Тогда
		
		СведенияПоСтарому.НомерИсправленияИсходногоДокумента ="";
		СведенияПоСтарому.ДатаИсправленияИсходногоДокумента = Дата(1, 1, 1);
		Возврат;
	КонецЕсли;
	
	ПоследняяСтрокаИсправлений = ТаблицаИсправлений[ТаблицаИсправлений.Количество() - 1];
	
	Если ЗначениеЗаполнено(ПоследняяСтрокаИсправлений.НомерИсправленияИсходногоДокумента)
		И ЗначениеЗаполнено(ПоследняяСтрокаИсправлений.ДатаИсправленияИсходногоДокумента) Тогда
		
		СведенияПоСтарому.НомерИсправленияИсходногоДокумента =
			ПоследняяСтрокаИсправлений.НомерИсправленияИсходногоДокумента;
		СведенияПоСтарому.ДатаИсправленияИсходногоДокумента =
			ПоследняяСтрокаИсправлений.ДатаИсправленияИсходногоДокумента;
		
	Иначе
		
		СведенияПоСтарому.НомерИсправленияИсходногоДокумента ="";
		СведенияПоСтарому.ДатаИсправленияИсходногоДокумента = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияКорректируемогоСФВДеревеДанных(СведенияПоСтарому, СведенияПоНовому, Данные)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"НомерИсходногоДокумента",
		СведенияПоСтарому.НомерИсходногоДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"ДатаИсходногоДокумента",
		СведенияПоСтарому.ДатаИсходногоДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"ПредставлениеИсходногоДокумента",
		СведенияПоСтарому.ПредставлениеИсходногоДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"НомерИсправленияИсходногоДокумента",
		СведенияПоСтарому.НомерИсправленияИсходногоДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные,
		"ДатаИсправленияИсходногоДокумента",
		СведенияПоСтарому.ДатаИсправленияИсходногоДокумента);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(Данные, СведенияПоНовому, "ИсходныеДокументы");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
