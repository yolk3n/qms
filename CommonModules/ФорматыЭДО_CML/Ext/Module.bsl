////////////////////////////////////////////////////////////////////////////////
// Общий модуль ФорматыЭДО_CML
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьДокумент(Знач Формат, Знач Данные) Экспорт
	
	Проверка = ПроверитьЗаполнениеДанных(Формат, Данные);
	Если ЕстьОшибкиЗаполненияДанных(Проверка) Тогда
		Возврат РезультатФормированияСОшибкойЗаполненияДанных(Проверка);
	КонецЕсли;
	
	Документ = ЗаполнитьДокумент(Формат, Данные);
	Если ЕстьОшибкиЗаполненияДокумента(Документ) Тогда
		Возврат РезультатФормированияСОшибкойЗаполненияДокумента(Документ);
	КонецЕсли;
	
	Возврат РезультатУспешногоФормированияДокумента(Документ);
	
КонецФункции

Функция ПространствоИменCML208() Экспорт
	
	Возврат "urn:1C.ru:commerceml_2";
	
КонецФункции

Функция ВерсияСхемыCML208() Экспорт
	
	Возврат "2.08";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверка

Функция НовыйРезультатПроверкиЗаполненияДанных()
	
	Проверка = Новый Структура;
	Проверка.Вставить("Ошибки");
	
	Возврат Проверка;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных(Знач Формат, Знач Данные)
	
	Проверка = НовыйРезультатПроверкиЗаполненияДанных();
	
	Форматы = ПоддерживаемыеФорматы();
	
	Если Формат = Форматы.CML208 Тогда
		
		ВсеОперации = ПоддерживаемыеОперацииCML208();
		Операция = ОперацияCML208(Данные);
		
		Если Операция = ВсеОперации.КаталогТоваров Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_КаталогТоваров(Данные);
			
		ИначеЕсли Операция = ВсеОперации.СчетНаОплату Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_СчетНаОплату(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ПрайсЛист Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_ПрайсЛист(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ЗаказПоставщику Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_ЗаказПоставщику(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ЗаказПокупателя Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_ЗаказПокупателя(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ОтчетОПродажах Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_ОтчетОПродажах(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ОтчетОСписании Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_ОтчетОСписании(Данные);
			
		ИначеЕсли Операция = ВсеОперации.РеквизитыОрганизации Тогда
			
			Проверка.Ошибки = ПроверитьЗаполнениеДанных_РеквизитыОрганизации(Данные);
			
		Иначе
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операция ""%1"" не поддерживается.'"),	Операция);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
		КонецЕсли;
		
	ИначеЕсли Формат = Форматы.CML402 Тогда	
		
	Иначе
		
		СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формат ""%1"" не поддерживается.'"),	Формат);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
		
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

Функция ЕстьОшибкиЗаполненияДанных(Проверка)
	
	Возврат ЗначениеЗаполнено(Проверка.Ошибки);
	
КонецФункции

Функция РезультатФормированияСОшибкойЗаполненияДанных(Знач Проверка)
	
	Результат = ФорматыЭДО.НовыйРезультатФормированияДокумента();
	Результат.Ошибки = Проверка.Ошибки;
	
	Возврат Результат;
	
КонецФункции

#Область ПроверкаОпераций

Функция ПроверитьЗаполнениеДанных_КаталогТоваров(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьСведенияОбУчастникеCML(Данные, "Владелец", Ошибки);
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_ПрайсЛист(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьСведенияОбУчастникеCML(Данные, "Владелец", Ошибки);
	
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_СчетНаОплату(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьНомерРасчетногоСчетаCML(Данные, "РасчетныйСчет.Банк.СчетКорреспондентский", Ошибки);
	ПроверитьНомерРасчетногоСчетаCML(Данные, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Покупатель", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Продавец", Ошибки);
	
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_ЗаказПоставщику(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьНомерРасчетногоСчетаCML(Данные, "РасчетныйСчет.Банк.СчетКорреспондентский", Ошибки);
	ПроверитьНомерРасчетногоСчетаCML(Данные, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Покупатель", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Продавец", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Получатель", Ошибки);
	
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_ЗаказПокупателя(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьНомерРасчетногоСчетаCML(Данные, "РасчетныйСчет.Банк.СчетКорреспондентский", Ошибки);
	ПроверитьНомерРасчетногоСчетаCML(Данные, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Покупатель", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Продавец", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Получатель", Ошибки);
	
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_ОтчетОПродажах(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьСведенияОбУчастникеCML(Данные, "Комитент", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Комиссионер", Ошибки);
	
	ПроверитьДлинуСтроковогоЗначенияCML(Данные, Ошибки, "Услуга.БазоваяЕдиницаКод", 3, 4);
	
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_ОтчетОСписании(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	ПроверитьСведенияОбУчастникеCML(Данные, "Комитент", Ошибки);
	ПроверитьСведенияОбУчастникеCML(Данные, "Комиссионер", Ошибки);
	
	ПроверитьТаблицуТоваровCML(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверитьЗаполнениеДанных_РеквизитыОрганизации(Данные)
	
	Ошибки = Неопределено;
	
	ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Данные, Ошибки);
	
	Возврат Ошибки;
	
КонецФункции

#КонецОбласти

#Область МетодыПроверки

Процедура ПроверитьНомерРасчетногоСчетаCML(ДеревоДанных, ПутьКРеквизиту, Ошибки, НомерСтроки = Неопределено)
	
	НомерСчетаСтрокаДерева = Неопределено;
	НомерСчета = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, ПутьКРеквизиту,, НомерСчетаСтрокаДерева);
		
	Если ЗначениеЗаполнено(НомерСчета) И СтрДлина(НомерСчета) = 20 И НЕ НомерСчетаКорректный(НомерСчета) Тогда
		ТекстОшибки = ДеревоЭлектронногоДокументаБЭД.ТекстОшибкиНеверноЗаполненногоЗначенияДерева();
		ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(
			Ошибки, НомерСчетаСтрокаДерева, ТекстОшибки,, 	НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Функция НомерСчетаКорректный(Знач НомерСчета)
	
	Цифры = "0123456789";
	ДопустимыеБуквы = "ABCEHKMPTX";
	Ошибка = Ложь;
	Для Индекс = 1 По 5 Цикл
		Символ = Сред(НомерСчета, Индекс, 1);
		
		Если СтрНайти(Цифры, Символ) = 0 Тогда
			Ошибка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Ошибка Тогда
		Символ = Сред(НомерСчета, 6, 1);
		
		Если СтрНайти(Цифры, Символ) = 0 И СтрНайти(ДопустимыеБуквы, Символ) = 0 Тогда
			Ошибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 7 По 20 Цикл
		Символ = Сред(НомерСчета, Индекс, 1);
		
		Если СтрНайти(Цифры, Символ) = 0 Тогда
			Ошибка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Ошибка;

КонецФункции

Процедура ПроверитьСведенияОбУчастникеCML(ДеревоДанных, ВидУчастника, Ошибки, НомерСтроки = Неопределено)
	
	ПроверитьНомерРасчетногоСчетаCML(ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", Ошибки, НомерСтроки);

КонецПроцедуры

Процедура ПроверитьТаблицуТоваровCML(ДеревоДанных, Ошибки)
	
	Товары = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	Путь = "Товары.НомерСтроки.";
	НомерСтроки = 1;
	Для Каждого Товар Из Товары.Строки Цикл
		
		ПроверитьДлинуСтроковогоЗначенияCML(Товар, Ошибки, Путь + "БазоваяЕдиницаКод", 3, 4, НомерСтроки);
		ПроверитьДлинуСтроковогоЗначенияCML(Товар, Ошибки, Путь + "ЕдиницаИзмеренияКодПоОКЕИ", 3, 4, НомерСтроки);
		ПроверитьДлинуСтроковогоЗначенияCML(Товар, Ошибки, Путь + "Штрихкод", 8, 14, НомерСтроки);
		
		Если ДеревоЭлектронногоДокументаБЭД.СуществуетРеквизитВДереве(Товар, "Товары.НомерСтроки.Покупатель") Тогда
			ПроверитьСведенияОбУчастникеCML(Товар, Путь + "Покупатель", Ошибки, НомерСтроки);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьДлинуСтроковогоЗначенияCML(ДеревоДанных, Ошибки, ПолноеИмяРеквизита,
	МинимальнаяДлина, МаксимальнаяДлина, НомерСтроки = Неопределено)
	
	СтрокаЗначения = Неопределено;
	Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, ПолноеИмяРеквизита, Ложь, СтрокаЗначения);
	
	ДлинаЗначения = СтрДлина(Значение);
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ДлинаЗначения < МинимальнаяДлина ИЛИ ДлинаЗначения > МаксимальнаяДлина Тогда
			ШаблонОшибки = НСтр("ru = 'значение должно содержать от %1 до %2 символов, указано %3'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, МинимальнаяДлина, МаксимальнаяДлина, Значение);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьОшибкуПроверкиДереваДанных(
				Ошибки, СтрокаЗначения, ТекстОшибки,, НомерСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Заполнение

Функция НовыйРезультатЗаполненияДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОсновногоФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("ДанныеДополнительногоФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Результат.Вставить("Ошибки");
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент(Знач Формат, Знач Данные)
	
	Документ = Неопределено;
	
	Форматы = ПоддерживаемыеФорматы();
	
	Если Формат = Форматы.CML208 Тогда
		
		ВсеОперации = ПоддерживаемыеОперацииCML208();
		Операция = ОперацияCML208(Данные);
		
		Если Операция = ВсеОперации.КаталогТоваров Тогда
			
			Документ = ЗаполнитьДокумент_КаталогТоваров(Данные);
			
		ИначеЕсли Операция = ВсеОперации.СчетНаОплату Тогда
			
			Документ = ЗаполнитьДокумент_СчетНаОплату(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ПрайсЛист Тогда
			
			Документ = ЗаполнитьДокумент_ПрайсЛист(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ЗаказПоставщику Тогда
			
			Документ = ЗаполнитьДокумент_ЗаказПоставщику(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ЗаказПокупателя Тогда
			
			Документ = ЗаполнитьДокумент_ЗаказПокупателя(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ОтчетОПродажах Тогда
			
			Документ = ЗаполнитьДокумент_ОтчетОПродажах(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ОтчетОСписании Тогда
			
			Документ = ЗаполнитьДокумент_ОтчетОСписании(Данные);
			
		ИначеЕсли Операция = ВсеОперации.РеквизитыОрганизации Тогда
			
			Документ = ЗаполнитьДокумент_РеквизитыОрганизации(Данные);
			
		Иначе
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операция ""%1"" не поддерживается.'"),	Операция);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
		КонецЕсли;
	
	ИначеЕсли Формат = Форматы.CML402 Тогда
		
		ВсеОперации = ПоддерживаемыеОперацииCML402();
		Операция = ОперацияCML402(Данные);
		
		Если Операция = ВсеОперации.ПередачаТовараМеждуОрганизациями Тогда
			
			Документ = ЗаполнитьДокумент_ПередачаТовараМеждуОрганизациями(Данные);
			
		ИначеЕсли Операция = ВсеОперации.ВозвратТовараМеждуОрганизациями Тогда
			
			Документ = ЗаполнитьДокумент_ВозвратТовараМеждуОрганизациями(Данные);
		
		Иначе
			СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операция ""%1"" не поддерживается.'"),	Операция);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
		КонецЕсли;
		
	Иначе
		
		СтрокаСообщенияИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Формат ""%1"" не поддерживается.'"),	Формат);
			
			ВызватьИсключение СтрокаСообщенияИсключения;
		
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция ЕстьОшибкиЗаполненияДокумента(Знач Документ)
	
	Возврат ЗначениеЗаполнено(Документ.Ошибки);
	
КонецФункции

Функция РезультатФормированияСОшибкойЗаполненияДокумента(Знач Документ)
	
	Результат = ФорматыЭДО.НовыйРезультатФормированияДокумента();
	Результат.Ошибки = Документ.Ошибки;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатУспешногоФормированияДокумента(Знач Документ)
	
	Результат = ФорматыЭДО.НовыйРезультатФормированияДокумента();
	Результат.Документ = Документ.ДанныеОсновногоФайла;
	Результат.ДополнительныйДокумент = Документ.ДанныеДополнительногоФайла;
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеОпераций

Функция ЗаполнитьДокумент_КаталогТоваров(Знач Данные)
	
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
	Каталог = ПолучитьОбъектТипаCML("Каталог", ПространствоИмен);
	
	// Коммерческая информация.
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ТекущаяДатаСеанса();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ДатаФормирования), Истина, Ошибки);
	
	// Каталог.
	Ид = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Каталог, "Ид", Ид, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Каталог, "СодержитТолькоИзменения", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"СодержитТолькоИзменения"), Ложь, Ошибки);
	Наименование = СтрШаблон(НСтр("ru = 'Каталог от %1'"), Формат(ДатаФормирования, "ДЛФ=D;"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Каталог, "Наименование", Наименование, Истина, Ошибки);
	
	// Владелец.
	Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Каталог, "Владелец", Владелец, Истина, Ошибки);
	
	// Товары.
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	
	Индекс = 0;
	
	Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
		Товары = ПолучитьОбъектТипаCML("Каталог.Товары", ПространствоИмен);
		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
			Индекс = Индекс + 1;
			Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", ПространствоИмен);
			СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИмен, Ошибки);
			Товары.Товар.Добавить(Товар);
		КонецЦикла;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Каталог, "Товары", Товары, Истина, Ошибки);
	КонецЕсли;
	
	// Для каталога номенклатуры возможно передать только не подписанные данные
	ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, Каталог, Ошибки);
	
	// Добавим заготовку Подписанта для заполнения при подписи
	Подписанты = ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Каталог, "Подписанты", Подписанты, Ложь, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "Каталог", Каталог, Истина, Ошибки);
	
	ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		
		ИмяФайлаПоУмолчанию = Наименование + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ЗаполнитьДокумент_ПрайсЛист(Знач Данные)
	
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
		
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, Ошибки);
	
	ПрайсЛист = ПолучитьОбъектТипаCML("ПакетПредложений", ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "СодержитТолькоИзменения", Ложь, Истина, Ошибки);
	ИД = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "Ид", ИД, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "ИдКаталога", ИД, Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "Наименование", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование",,, Истина), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "Описание", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание"), Истина, Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "ДействительноС", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДействительноС"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "ДействительноДо", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДействительноДо"), Истина, Ошибки);
	
	// Владелец.
	Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", Ошибки);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "Владелец", Владелец, Истина, Ошибки);
	
	// Предложения.
	ТаблицаТоваров = ВеткаТаблицыВДереве(ДеревоДанных, "Товары");
			
	// Если не найдена таблица, например,
	// ошибка в заполнении дерева документа
	// то не будем формировать пустой ЭД.
	Если ТаблицаТоваров = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у таблицы товаров нет строк,
	// то не будем формировать пустой ЭД.
	Если ТаблицаТоваров.Строки.Количество() = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Предложения = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения", ПространствоИмен);
	
	Индекс = 0;
	
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров.Строки Цикл
		
		Индекс = Индекс + 1;
		
		Предложение = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение", ПространствоИмен);
		
		// Заполняем свойства товара.
		СформироватьДанныеПоТоваруCML_206(Предложение, СтрокаТаблицыТоваров, ПространствоИмен, Ошибки);
		// Заполняем свойства предложения.
		СформироватьДанныеПоТоваруПредложенияCML_206(Предложение, СтрокаТаблицыТоваров, ПространствоИмен, Ошибки);
		
		// Добавляем строку в список.
		Предложения.Предложение.Добавить(Предложение);
	КонецЦикла;
	ПрайсЛист.Предложения = Предложения;
	
	//  Заполняем таблицу "Типы цен".
	ТаблицаТипыЦен = ВеткаТаблицыВДереве(ДеревоДанных, "ТипыЦен");
	
	ТипыЦен = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен", ПространствоИмен);
	Если ПустаяТаблицаДерева(ТаблицаТипыЦен) Тогда
		
		// Если тип цен не заполнен - присвоим новый идентификатор, так как типы цены обязательны в схеме.
		ТипЦены = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены", ПространствоИмен);
		ИдТипаЦены = Строка(Новый УникальныйИдентификатор);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦены, Истина, Ошибки);
		ТипыЦен.ТипЦены.Добавить(ТипЦены)
		
	Иначе
		Для Каждого ТекСтрока Из ТаблицаТипыЦен.Строки Цикл
			
			ТипЦеныXDTO = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены", ПространствоИмен);
			ЗаполнитьТипЦены(ТекСтрока, ТипЦеныXDTO);
			
			ТипыЦен.ТипЦены.Добавить(ТипЦеныXDTO)
		КонецЦикла;
	КонецЕсли;
	// Добавляем типы цен в прайс.
	ПрайсЛист.ТипыЦен = ТипыЦен;
	
	// Для Прайс листа возможно передать только не подписанные данные
	ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, ПрайсЛист, Ошибки);
	
	// Добавим заготовку Подписанта для заполнения при подписи
	Подписанты = ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ПрайсЛист, "Подписанты", Подписанты, Ложь, Ошибки);
	
	Если ПроверитьОбъектXDTO(ПрайсЛист, Ошибки) Тогда
		КоммерческаяИнформация.ПакетПредложений = ПрайсЛист;
		ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	КонецЕсли;
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		НомерДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ДатаДокумента = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Прайс-лист %1 %2 (%3)'"),
			НомерДокумента,
			Формат(ДатаДокумента, "ДЛФ=D;"),
			Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_СчетНаОплату(Знач Данные)
	
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
	
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ТекущаяДатаСеанса();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, Ошибки);
	
	ДокументПередачи = ПолучитьОбъектТипаCML("Документ", ПространствоИмен);
	
	ХозОперация = НСтр("ru = 'Счет на оплату'");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ХозОперация", ХозОперация, Истина, Ошибки);
	
	Ид = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Ид", Ид, Истина, Ошибки);
	
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Номер", НомерДок, Истина, Ошибки);
	
	ДатаДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Дата", ДатаДок, Истина, Ошибки);
	
	СрокПлатежа = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "СрокПлатежа", СрокПлатежа, Ложь, Ошибки);
	
	Валюта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Валюта", Валюта, Истина, Ошибки);
	
	Курс = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Курс", Курс, Истина, Ошибки);
	
	СуммаДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Сумма", СуммаДок, Истина, Ошибки);
	
	// Заполнение контрагентов
	Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИмен);
	
	// Добавление в контрагенты Продавца.
	Поставщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Поставщик, ДеревоДанных, "Продавец", Ошибки);
	
	// Заполнение расчетного счета.
	ЗаполнитьРасчетныйСчетПоставщика(ДеревоДанных, Поставщик, ПространствоИмен, Ошибки);

	Контрагенты.Контрагент.Добавить(Поставщик);
	
	// Добавим в контрагенты Покупателя.
	Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, "Покупатель", Ошибки);
	Контрагенты.Контрагент.Добавить(Покупатель);
	
	ДокументПередачи.Контрагенты = Контрагенты;
	ДокументПередачи.Роль = "Продавец";
	
	НДСИтог = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ИтогоПоДокументу.СуммаНДС");
	НДСВходитВСтоимость = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ИтогоПоДокументу.ЦенаВключаетНДС");
	
	Налог = ПолучитьОбъектТипаCML("Документ.Налоги.Налог", ПространствоИмен);
	Налог.Наименование = "НДС";
	Налог.УчтеноВСумме = НДСВходитВСтоимость;
	Налог.Сумма = НДСИтог;
	
	ДокументПередачиНалоги = ПолучитьОбъектТипаCML("Документ.Налоги", ПространствоИмен);
	ДокументПередачиНалоги.Налог.Добавить(Налог);
	
	ДокументПередачи.Налоги = ДокументПередачиНалоги;
	
	НомерДокументаОснования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДокументОснования.НомерДокументаОснования");
	ДатаДокументаОснования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДокументОснования.ДатаДокументаОснования");
	Если ЗначениеЗаполнено(НомерДокументаОснования) И ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
		
		ДобавитьВЗначенияРеквизитовДокумента("НомерДокументаОснования", НомерДокументаОснования, ДокументПередачи);
		ДобавитьВЗначенияРеквизитовДокумента("ДатаДокументаОснования", ДатаДокументаОснования, ДокументПередачи);
		
		НаименованиеДокументаОснование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДокументОснования.НаименованиеДокументаОснования");
		КомментарийДокументаОснование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДокументОснования.Комментарий");
		
		ДобавитьВЗначенияРеквизитовДокумента(
			"НаименованиеДокументаОснование", НаименованиеДокументаОснование, ДокументПередачи);
		ДобавитьВЗначенияРеквизитовДокумента(
			"КомментарийДокументаОснование", КомментарийДокументаОснование, ДокументПередачи);
		
	КонецЕсли;
	
	ЧастичнаяОплата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЧастичнаяОплата");
	Если Не ЗначениеЗаполнено(ЧастичнаяОплата) Тогда
		ЧастичнаяОплата = Ложь;
	КонецЕсли;
	
	Если Не ЧастичнаяОплата Тогда
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Индекс = 0;
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 И СтрокаТаблицаТоваров.Значение > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				
				Индекс = Индекс + 1;
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИмен);
				// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИмен, Ошибки);
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Товары", Товары, Истина, Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	// Формируем строку доп данных и файл.
	ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПередачи, Ошибки);
	
	// Добавим заготовку Подписанта для заполнения при подписи.
	Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Подписанты", Подписанты, Ложь, Ошибки);
	
	КоммерческаяИнформация.Документ.Добавить(ДокументПередачи);
	ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Счет на оплату %1 %2 (%3)'"),
			НомерДок, Формат(ДатаДок, "ДЛФ=D;"), Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ЗаказПоставщику(Знач Данные)
		
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
		
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ТекущаяДатаСеанса();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, Ошибки);
	
	// Документ.
	ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИмен);
	
	Ид = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, Ошибки);
	
	Номер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, Ошибки);
	
	Дата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, Ошибки);
	
	ХозОперация = НСтр("ru = 'Заказ товара'");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, Ошибки);
	
	Валюта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, Ошибки);
	
	Комментарий = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Комментарий", Комментарий, , Ошибки);
	
	Курс = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, Ошибки);
	
	Сумма = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, Ошибки);
	
	Роль = "Покупатель";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, Ошибки);

	// заполняем контрагентов
	Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИмен);
	
	// Определяем роль Контрагента и организации.
	РольКонтрагента = "Продавец";
	РольОрганизации = "Покупатель";
	
	// Добавим в контрагенты Покупателя.
	Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, РольОрганизации, Ошибки);
	Покупатель.Роль = РольОрганизации;
	
	Контрагенты.Контрагент.Добавить(Покупатель);
	
	// Добавим в контрагенты Организацию.
	Продавец = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Продавец, ДеревоДанных, РольКонтрагента, Ошибки);
	Продавец.Роль = РольКонтрагента;
	
	// Банковский счет из шапки документа помещаем в расширения контрагента в документе.
	ЗаполнитьБанковскийСчет(Продавец, ДеревоДанных);
	
	Контрагенты.Контрагент.Добавить(Продавец);
	
	// Добавим в контрагенты Грузополучателя.
	Получатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Получатель, ДеревоДанных, "Получатель", Ошибки);
	Получатель.Роль = "Получатель";
	Контрагенты.Контрагент.Добавить(Получатель);
	
	ДокументПродажи.Контрагенты = Контрагенты;
	
	// Заполняем товары
	Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	
	Индекс = 0;
	
	Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
			
			Индекс = Индекс + 1;
			Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИмен);
			// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
			СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИмен, Ошибки);
			
			Товары.Товар.Добавить(Товар);
			
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, Ошибки);
	КонецЕсли;
	
	СпособДоставки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Доставка.СпособДоставки");
	Если СпособДоставки <> Неопределено Тогда
		АдресДоставки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Доставка.АдресДоставки");
		АдресДоставкиЗначенияПолей = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Доставка.АдресДоставкиЗначенияПолей");
		Доставка = Новый Структура;
		Доставка.Вставить("СпособДоставки", СпособДоставки);
		Доставка.Вставить("АдресДоставки", АдресДоставки);
		Доставка.Вставить("АдресДоставкиЗначенияПолей", АдресДоставкиЗначенияПолей);
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, Доставка, Ложь);
	КонецЕсли;
	
	// Помещаем доп данные в ЗначенияРеквизитов документа.
	ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, Ошибки);
	
	// Добавим заготовку Подписанта для заполнения при подписи.
	Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, Ошибки);
	
	Если ПроверитьОбъектXDTO(ДокументПродажи, Ошибки) Тогда
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	КонецЕсли;
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Заказ товара %1 %2 (%3)'"),
			Номер, Формат(Дата, "ДЛФ=D;"), Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
	
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ЗаказПокупателя(Знач Данные)
		
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
	
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ТекущаяДатаСеанса();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, Ошибки);
	
	// Документ.
	ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИмен);
	
	Ид = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, Ошибки);
	
	Номер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, Ошибки);
	
	Дата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, Ошибки);
	
	ХозОперация = НСтр("ru = 'Заказ товара'");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, Ошибки);
	
	Валюта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, Ошибки);
	
	Комментарий = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Комментарий", Комментарий, , Ошибки);
	
	Курс = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, Ошибки);
	
	Сумма = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, Ошибки);
	
	Роль = "Продавец";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, Ошибки);

	// заполняем контрагентов
	Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИмен);
	
	// Определяем роль Контрагента и организации.
	РольКонтрагента = "Покупатель";
	РольОрганизации = "Продавец";
	
	// Добавим в контрагенты Покупателя.
	Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, РольОрганизации, Ошибки);
	Покупатель.Роль = РольОрганизации;
	ЗаполнитьБанковскийСчет(Покупатель, ДеревоДанных);
	
	Контрагенты.Контрагент.Добавить(Покупатель);
	
	// Добавим в контрагенты Организацию.
	Продавец = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Продавец, ДеревоДанных, РольКонтрагента, Ошибки);
	Продавец.Роль = РольКонтрагента;
	
	Контрагенты.Контрагент.Добавить(Продавец);
	
	// Добавим в контрагенты Грузополучателя.
	Получатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Получатель, ДеревоДанных, "Получатель", Ошибки);
	Получатель.Роль = "Получатель";
	Контрагенты.Контрагент.Добавить(Получатель);
	
	ДокументПродажи.Контрагенты = Контрагенты;
	
	// Заполняем товары
	Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	
	Индекс = 0;
	
	Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
			
			Индекс = Индекс + 1;
			Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИмен);
			// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
			СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИмен, Ошибки);
			
			Товары.Товар.Добавить(Товар);
			
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, Ошибки);
	КонецЕсли;
	
	СпособДоставки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Доставка.СпособДоставки");
	Если СпособДоставки <> Неопределено Тогда
		АдресДоставки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Доставка.АдресДоставки");
		АдресДоставкиЗначенияПолей = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Доставка.АдресДоставкиЗначенияПолей");
		Доставка = Новый Структура;
		Доставка.Вставить("СпособДоставки", СпособДоставки);
		Доставка.Вставить("АдресДоставки", АдресДоставки);
		Доставка.Вставить("АдресДоставкиЗначенияПолей", АдресДоставкиЗначенияПолей);
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, Доставка, Ложь);
	КонецЕсли;
	
	// Помещаем доп данные в ЗначенияРеквизитов документа.
	ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, Ошибки);
	
	// Добавим заготовку Подписанта для заполнения при подписи.
	Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, Ошибки);
	
	Если ПроверитьОбъектXDTO(ДокументПродажи, Ошибки) Тогда
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	КонецЕсли;
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Заказ покупателя %1 %2 (%3)'"),
			Номер, Формат(Дата, "ДЛФ=D;"), Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
				
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ОтчетОПродажах(Знач Данные)
	
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
	
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, Ошибки);
	
	// Документ.
	ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИмен);
	
	Ид = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, Ошибки);
	
	Номер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, Ошибки);
	
	Дата = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, Ошибки);
	
	ХозОперация = НСтр("ru = 'Отчет о продажах комиссионного товара'");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, Ошибки);
	
	Роль = "Комитент";
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, Ошибки);
	
	Валюта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, Ошибки);
	
	Курс = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, Ошибки);
	
	Сумма = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, Ошибки);
	
	ИтоговаяСтрока = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
	ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтоговаяСтрока, ДокументПродажи);
	
	// Заполняем контрагентов
	Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИмен);
	
	// Добавим в контрагенты Комитента.
	Комитент = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Комитент, ДеревоДанных, "Комитент", Ошибки);
	Комитент.Роль = "Комитент";
	Контрагенты.Контрагент.Добавить(Комитент);
	
	// Добавим в контрагенты Организацию.
	Комиссионер = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Комиссионер, ДеревоДанных, "Комиссионер", Ошибки);
	Комиссионер.Роль = "Комиссионер";
	Контрагенты.Контрагент.Добавить(Комиссионер);
	
	ДокументПродажи.Контрагенты = Контрагенты;
	
	// Помещаем доп данные в ЗначенияРеквизитов документа.
	ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, Ошибки);
	
	// Заполняем товары
	Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	
	Индекс = 0;
	
	Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
		МассивДобавленныхПокупателей = Новый Массив;
		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
			
			Индекс = Индекс + 1;
			Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИмен);
			// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
			СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИмен, Ошибки);
			
			// Заполняем свойства товара, которые относятся к документу.
			СформироватьДанныеПоТабЧастиТоварыДокументаCML_206(Товар, ТекущийТовар, ПространствоИмен);
			
			// Инициализируем элемент доп. данных
			ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеЗначенияРеквизитов", ПространствоИмен);
			
			// Добавим в контрагенты покупателя.
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ТекущийТовар, "Товары.НомерСтроки.Покупатель") Тогда
				Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
				ДопДанные = Новый Структура;
				ЗаполнитьДанныеУчастникаCML(Покупатель, ТекущийТовар, "Товары.НомерСтроки.Покупатель", Ошибки, ДопДанные);
				ИдПокупателя = "";
				Если ДопДанные.Свойство("Ид", ИдПокупателя) Тогда
					Если МассивДобавленныхПокупателей.Найти(ИдПокупателя) = Неопределено Тогда
						Покупатель.Роль = "Покупатель";
						Контрагенты.Контрагент.Добавить(Покупатель);
						МассивДобавленныхПокупателей.Добавить(ИдПокупателя);
					КонецЕсли;
					
					ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИмен);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ИдПокупателя", Истина, Ошибки);
					ЗначениеРеквизита.Значение.Добавить(ИдПокупателя);
					ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
					
					// Для совместимости с более ранними версиями БЭД необходимо передать еще 3 реквизита:
					ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИмен);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательНаименование", Истина, Ошибки);
					ЗначениеРеквизита.Значение.Добавить(ДопДанные.Наименование);
					ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
					
					ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИмен);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательИНН", Истина, Ошибки);
					ЗначениеРеквизита.Значение.Добавить(ДопДанные.ИНН);
					ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
					
					ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИмен);
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательКПП", Истина, Ошибки);
					ЗначениеРеквизита.Значение.Добавить(ДопДанные.КПП);
					ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСведенияОПрослеживаемости(ПространствоИмен, ЗначенияРеквизитов, ТекущийТовар, Ошибки);
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.ЗначениеРеквизита) Тогда
				Товар.ДополнительныеЗначенияРеквизитов = ЗначенияРеквизитов;
			КонецЕсли;
			
			Товары.Товар.Добавить(Товар);
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, Ошибки);
	КонецЕсли;
	
	// Добавим заготовку Подписанта для заполнения при подписи.
	Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, Ошибки);
	
	Если ПроверитьОбъектXDTO(ДокументПродажи, Ошибки) Тогда
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	КонецЕсли;
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Отчет о продажах комиссионного товара %1 %2 (%3)'"),
			Номер, Формат(Дата, "ДЛФ=D;"), Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ОтчетОСписании(Знач Данные)
	
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИмен);
		
	ВерсияСхемы = ВерсияСхемыCML208();
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);
	
	ДатаФормирования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, Ошибки);

	ДокументПередачи = ПолучитьОбъектТипаCML("Документ", ПространствоИмен);
	
	ХозОперация = НСтр("ru = 'Отчет о списании комиссионного товара'");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ХозОперация", ХозОперация, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Роль", "Комитент", Истина, Ошибки);

	Ид = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Ид", Ид, Истина, Ошибки);
	
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Номер", НомерДок, Истина, Ошибки);
	
	ДатаДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Дата", ДатаДок, Истина, Ошибки);
	
	Валюта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Валюта", Валюта, Истина, Ошибки);
	
	Курс = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Курс", Курс, Истина, Ошибки);
	
	Сумма = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Сумма", Сумма, Истина, Ошибки);
	
	// заполняем контрагентов
	Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИмен);
	
	// Добавим в контрагенты Комитента
	Комитент = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Комитент, ДеревоДанных, "Комитент", Ошибки);
	Комитент.Роль = "Комитент";
	Контрагенты.Контрагент.Добавить(Комитент);
	
	// добавим в контрагенты Организацию
	Комиссионер = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИмен);
	ЗаполнитьДанныеУчастникаCML(Комиссионер, ДеревоДанных, "Комиссионер", Ошибки);
	Комиссионер.Роль = "Комиссионер";
	Контрагенты.Контрагент.Добавить(Комиссионер);
	
	ДокументПередачи.Контрагенты = Контрагенты;
	
	// Заполняем товары
	Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
	
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	
	Индекс = 0;
	
	Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИмен);
		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
			
			Индекс = Индекс + 1;
			Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИмен);
			// Заполняем ИД товара, базовую единицу, штрихкод т.е. те свойства которые относятся непосредственно к каталога товаров.
			СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИмен, Ошибки);
			
			ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеЗначенияРеквизитов", ПространствоИмен);
			ЗаполнитьСведенияОПрослеживаемости(ПространствоИмен, ЗначенияРеквизитов, ТекущийТовар, Ошибки);
			
			Если ЗначенияРеквизитов.ЗначениеРеквизита.Количество() > 0 Тогда
				Товар.ДополнительныеЗначенияРеквизитов = ЗначенияРеквизитов;
			КонецЕсли;
			
			Товары.Товар.Добавить(Товар);
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Товары", Товары, Истина, Ошибки);
	КонецЕсли;
	
	// Помещаем доп данные в ЗначенияРеквизитов документа
	ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПередачи, Ошибки);
	
	ИтоговаяСтрока = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
	ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтоговаяСтрока, ДокументПередачи);
	
	// Добавим заготовку Подписанта для заполнения при подписи
	Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИмен);
	Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, Ошибки);
	Подписанты.Подписант.Добавить(Подписант);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Подписанты", Подписанты, Ложь, Ошибки);
	
	КоммерческаяИнформация.Документ.Добавить(ДокументПередачи);
	
	ПроверитьОбъектXDTO(КоммерческаяИнформация, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(КоммерческаяИнформация);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Отчет о списании комиссионного товара %1 %2 (%3)'"),
			НомерДок, Формат(ДатаДок, "ДЛФ=D;"), Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_РеквизитыОрганизации(Знач Данные)
		
	ДеревоДанных = Данные;
	
	Ошибки = Неопределено;
	ПространствоИмен = ПространствоИменCML208();
	
	Контрагент = ПолучитьОбъектТипаCML("Контрагент", ПространствоИмен);
	ЗаполнитьКонтрагентаCML(Контрагент, ДеревоДанных, "Организация", Ошибки);
	
	ПроверитьОбъектXDTO(Контрагент, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(Контрагент);
		
		Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", Ложь);
		Если Не ЗначениеЗаполнено(Наименование) Тогда
			Наименование = НСтр("ru = 'Реквизиты организации'");
		КонецЕсли;
		ДатаФормирования = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", Ложь);
		Если Не ЗначениеЗаполнено(ДатаФормирования) Тогда
			ДатаФормирования = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ИмяФайлаПоУмолчанию = СтрШаблон(Наименование + " (%1)", Формат(ДатаФормирования, "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьДокумент_ПередачаТовараМеждуОрганизациями(Знач Данные)
		
	ДеревоДанных = Данные;

	Ошибки = Неопределено;

	ВерсияСхемы = "4.02";
	
	ДокументПередачи = ПолучитьОбъектТипаCML("ТОРГ12", ВерсияСхемы);
		
	// Коммерческая информация.
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ИдИсполнителя", Участники.ИдентификаторОтправителя, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ДатаФормирования", XMLДатаВремя(
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования")), Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Ид", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Ид"), Истина, Ошибки);
		
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Номер", НомерДок, Истина, Ошибки);
	
	ДатаДок =  XMLДата(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Дата", ДатаДок, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ОКУД", "0330212", Истина, Ошибки);

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "Валюта") Тогда

		Валюта = ПолучитьОбъектТипаCML("Валюта", ВерсияСхемы);

		ВалютаСсылка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ВалютаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаСсылка,
			"Код, Наименование, НаименованиеПолное");
		КодВалюты = XMLЧисло(ВалютаРеквизиты.Код);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "Курс", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"Курс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", ВалютаРеквизиты.Наименование, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", ВалютаРеквизиты.НаименованиеПолное, , Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Валюта", Валюта, , Ошибки);

	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "Основание") Тогда

		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
		Если ТипЗнч(Основание) = Тип("Структура") Тогда

			ОснованиеCML = ПолучитьОбъектТипаCML("ДокументОснования", ВерсияСхемы);

			РеквизитыОснования = Новый Структура("ДокументНомер, ДокументДата, ДокументНаименование");
			ЗаполнитьЗначенияСвойств(РеквизитыОснования, Основание);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснованиеCML, "НомерДокументаОснования", РеквизитыОснования.ДокументНомер, Истина,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснованиеCML, "ДатаДокументаОснования", XMLДата(РеквизитыОснования.ДокументДата),
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснованиеCML, "НаименованиеДокументаОснования",
				РеквизитыОснования.ДокументНаименование, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Основание", ОснованиеCML, , Ошибки);

		КонецЕсли;

	КонецЕсли;

	Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, ДеревоДанных,
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТипГрузоотправителя"), Ошибки,
		ВерсияСхемы, "Грузоотправитель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Грузоотправитель", Грузоотправитель, , Ошибки);

	Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Грузополучатель, ДеревоДанных, "Контрагент", Ошибки, ВерсияСхемы,
		"Грузополучатель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Грузополучатель", Грузополучатель, , Ошибки);

	Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Организация, ДеревоДанных, "Организация", Ошибки, ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Поставщик", Организация, , Ошибки);

	Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Контрагент, ДеревоДанных, "Контрагент", Ошибки, ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Плательщик", Контрагент, , Ошибки);

	СуммаИтог     = 0;
	СуммаНДСИтог  = 0;
	СуммаСНДСИтог = 0;
	ПП            = 0;

	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	Если СтрокаТаблицаТоваров.Строки.Количество() Тогда

		Товары = ПолучитьОбъектТипаCML("ТОРГ12.Товары", ВерсияСхемы);

		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл

			ПП = ПП + 1;

			Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", ВерсияСхемы);
			СформироватьДанныеПоТоваруCML(Товар, ТекущийТовар, Ошибки, ВерсияСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , Ошибки);

			ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", ВерсияСхемы);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СокрЛП(
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.УпаковкаКод")), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.УпаковкаНаименование"), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.Коэффициент"), , Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, Ошибки);

			Количество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.Количество");
			Сумма      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.Сумма");
			СуммаНДС   = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.СуммаНДС");
			СуммаСНДС  = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.СуммаСНДС");

			СуммаИтог     = СуммаИтог + Сумма;
			СуммаНДСИтог  = СуммаНДСИтог + СуммаНДС;
			СуммаСНДСИтог = СуммаСНДСИтог + СуммаСНДС;

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Количество", Количество, , Ошибки);

			Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЦенаВключаетНДС") Тогда
				СуммаБезНДС = Сумма - СуммаНДС;
			Иначе
				СуммаБезНДС = Сумма;
			КонецЕсли;

			Цена = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар, "Товары.НомерСтроки.Цена");
			Если Не ЗначениеЗаполнено(Цена) Тогда
				Цена = Окр(СуммаБезНДС / Количество, 2);
			КонецЕсли;

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Цена", Цена, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", СуммаСНДС, , Ошибки);

			ПрикладнаяСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.СтавкаНДС");
			СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , ПрикладнаяСтавкаНДС);
			Если ВРег(СтавкаНДС) <> ВРег("Без НДС") Тогда
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", ВерсияСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", СуммаНДС, , Ошибки, Истина);
				СтавкаНДСЧислом = ИнтеграцияЭДО.ЗначениеСтавкиНДСИзПеречисления(ПрикладнаяСтавкаНДС);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , Ошибки, Истина);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , Ошибки);
			КонецЕсли;

			Товары.Товар.Добавить(Товар);

		КонецЦикла;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Товары", Товары, , Ошибки);
	КонецЕсли;

	ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ПП, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ПП, , Ошибки);

	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЦенаВключаетНДС") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", СуммаИтог - СуммаНДСИтог, , Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", СуммаИтог, , Ошибки);
	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНДС", СуммаНДСИтог, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСУчетомНДС", СуммаСНДСИтог, , Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ИтогоПоДокументу", ИтогоПоДокументу, , Ошибки);

	ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ПП, , ",,,,,,,,0"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", ЧислоПрописью(ПП, , ",,,,,,,,0"), , Ошибки);

	СуммаВсегоПрописью = "";
	ОбменСКонтрагентамиПереопределяемый.СуммаПрописью(СуммаСНДСИтог, КодВалюты, СуммаВсегоПрописью);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью", СуммаВсегоПрописью, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ИтогиПрописью", ИтогиПрописью, , Ошибки);

	ПроверитьОбъектXDTO(Контрагент, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(ДокументПередачи);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Передача товаров между организациями %1 %2 (%3)'"),
			НомерДок, Формат(ДатаДок, "ДЛФ=D;"), Формат(ТекущаяДатаСеанса(), "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗаполнитьДокумент_ВозвратТовараМеждуОрганизациями(Знач Данные)
		
		ДеревоДанных = Данные;

	Ошибки = Неопределено;

	ВерсияСхемы = "4.02";
	
	ДокументПередачи = ПолучитьОбъектТипаCML("ТОРГ12", ВерсияСхемы);
		
	// Коммерческая информация.
	Участники = ДеревоЭлектронногоДокументаБЭД.ДанныеЭлементаДереваЭлектронногоДокумента(Данные, "Участники");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ИдИсполнителя", Участники.ИдентификаторОтправителя, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ДатаФормирования", XMLДатаВремя(
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования")), Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ВерсияСхемы", ВерсияСхемы, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Ид", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"Ид"), Истина, Ошибки);
		
	НомерДок = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Номер", НомерДок, Истина, Ошибки);
	
	ДатаДок =  XMLДата(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата"));
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Дата", ДатаДок, Истина, Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ОКУД", "0330212", Истина, Ошибки);

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "Валюта") Тогда

		Валюта = ПолучитьОбъектТипаCML("Валюта", ВерсияСхемы);

		ВалютаСсылка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ВалютаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаСсылка,
			"Код, Наименование, НаименованиеПолное");
		КодВалюты = XMLЧисло(ВалютаРеквизиты.Код);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "Курс", ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"Курс"), , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", ВалютаРеквизиты.Наименование, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", ВалютаРеквизиты.НаименованиеПолное, , Ошибки);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Валюта", Валюта, , Ошибки);

	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "Основание") Тогда

		Основание = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "Основание");
		Если ТипЗнч(Основание) = Тип("Структура") Тогда

			ОснованиеCML = ПолучитьОбъектТипаCML("ДокументОснования", ВерсияСхемы);

			РеквизитыОснования = Новый Структура("ДокументНомер, ДокументДата, ДокументНаименование");
			ЗаполнитьЗначенияСвойств(РеквизитыОснования, Основание);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснованиеCML, "НомерДокументаОснования", РеквизитыОснования.ДокументНомер, Истина,
				Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснованиеCML, "ДатаДокументаОснования", XMLДата(РеквизитыОснования.ДокументДата),
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ОснованиеCML, "НаименованиеДокументаОснования",
				РеквизитыОснования.ДокументНаименование, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Основание", ОснованиеCML, , Ошибки);

		КонецЕсли;

	КонецЕсли;

	Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, ДеревоДанных,
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ТипГрузоотправителя"), Ошибки,
		ВерсияСхемы, "Грузоотправитель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Грузоотправитель", Грузоотправитель, , Ошибки);

	Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Грузополучатель, ДеревоДанных, "Контрагент", Ошибки, ВерсияСхемы,
		"Грузополучатель");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Грузополучатель", Грузополучатель, , Ошибки);

	Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Организация, ДеревоДанных, "Организация", Ошибки, ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Поставщик", Организация, , Ошибки);

	Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", ВерсияСхемы);
	СформироватьДанныеПоКонтрагентуCML(Контрагент, ДеревоДанных, "Контрагент", Ошибки, ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Плательщик", Контрагент, , Ошибки);

	СуммаИтог     = 0;
	СуммаНДСИтог  = 0;
	СуммаСНДСИтог = 0;
	ПП            = 0;

	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	Если СтрокаТаблицаТоваров.Строки.Количество() Тогда

		Товары = ПолучитьОбъектТипаCML("ТОРГ12.Товары", ВерсияСхемы);

		Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл

			ПП = ПП + 1;

			Товар = ПолучитьОбъектТипаCML("ТОРГ12.Товары.Товар", ВерсияСхемы);
			СформироватьДанныеПоТоваруCML(Товар, ТекущийТовар, Ошибки, ВерсияСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "НомерПП", ПП, , Ошибки);

			ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", ВерсияСхемы);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СокрЛП(
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.УпаковкаКод")), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.УпаковкаНаименование"), , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.Коэффициент"), , Ошибки);

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, Ошибки);

			Количество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.Количество");
			Сумма      = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.Сумма");
			СуммаНДС   = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.СуммаНДС");
			СуммаСНДС  = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.СуммаСНДС");

			СуммаИтог     = СуммаИтог + Сумма;
			СуммаНДСИтог  = СуммаНДСИтог + СуммаНДС;
			СуммаСНДСИтог = СуммаСНДСИтог + СуммаСНДС;

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Количество", Количество, , Ошибки);

			Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЦенаВключаетНДС") Тогда
				СуммаБезНДС = Сумма - СуммаНДС;
			Иначе
				СуммаБезНДС = Сумма;
			КонецЕсли;

			Цена = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар, "Товары.НомерСтроки.Цена");
			Если Не ЗначениеЗаполнено(Цена) Тогда
				Цена = Окр(СуммаБезНДС / Количество, 2);
			КонецЕсли;

			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Цена", Цена, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "СуммаБезНДС", СуммаБезНДС, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "СуммаСУчетомНДС", СуммаСНДС, , Ошибки);

			ПрикладнаяСтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ТекущийТовар,
				"Товары.НомерСтроки.СтавкаНДС");
			СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия( , ПрикладнаяСтавкаНДС);
			Если ВРег(СтавкаНДС) <> ВРег("Без НДС") Тогда
				НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", ВерсияСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", СуммаНДС, , Ошибки, Истина);
				СтавкаНДСЧислом = ИнтеграцияЭДО.ЗначениеСтавкиНДСИзПеречисления(ПрикладнаяСтавкаНДС);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , Ошибки, Истина);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Налог", НалогПоСтроке, , Ошибки);
			КонецЕсли;

			Товары.Товар.Добавить(Товар);

		КонецЦикла;

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "Товары", Товары, , Ошибки);
	КонецЕсли;

	ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ПП, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ПП, , Ошибки);

	Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЦенаВключаетНДС") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", СуммаИтог - СуммаНДСИтог, , Ошибки);
	Иначе
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", СуммаИтог, , Ошибки);
	КонецЕсли;

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНДС", СуммаНДСИтог, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСУчетомНДС", СуммаСНДСИтог, , Ошибки);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ИтогоПоДокументу", ИтогоПоДокументу, , Ошибки);

	ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ПП, , ",,,,,,,,0"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", ЧислоПрописью(ПП, , ",,,,,,,,0"), , Ошибки);

	СуммаВсегоПрописью = "";
	ОбменСКонтрагентамиПереопределяемый.СуммаПрописью(СуммаСНДСИтог, КодВалюты, СуммаВсегоПрописью);

	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью", СуммаВсегоПрописью, , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДокументПередачи, "ИтогиПрописью", ИтогиПрописью, , Ошибки);

	ПроверитьОбъектXDTO(Контрагент, Ошибки);
	
	Результат = НовыйРезультатЗаполненияДокумента();
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		Результат.Ошибки = Ошибки;
		
	Иначе
		
		Результат.ДанныеОсновногоФайла.ДвоичныеДанные = ДвоичныеДанныеОбъектаXDTO(ДокументПередачи);
		
		ИмяФайлаПоУмолчанию = СтрШаблон(НСтр("ru = 'Возврат товаров между организациями %1 %2 (%3)'"),
			НомерДок, Формат(ДатаДок, "ДЛФ=D;"), Формат(ТекущаяДатаСеанса(), "ДЛФ=DT; ДП=-;")) + ".xml";
		Результат.ДанныеОсновногоФайла.ИмяФайла = ДопустимоеИмяФайла(ИмяФайлаПоУмолчанию);
		
		ДанныеДопФайла = ДеревоДанных.Строки.Найти("ДвоичныеДанныеДопФайла", "ПолныйПуть", Истина);
		ИмяДопФайла = ДеревоДанных.Строки.Найти("ИдентификаторДопФайла", "ПолныйПуть", Истина);
		Если ДанныеДопФайла <> Неопределено Тогда
			Результат.ДанныеДополнительногоФайла.ДвоичныеДанные = ДанныеДопФайла.Значение;
			Результат.ДанныеДополнительногоФайла.ИмяФайла = ИмяДопФайла.Значение + ".xml";	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Чтение


#Область КаталогТоваров
Процедура ПрочитатьКаталогXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ИД    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Каталог.Ид");
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.КаталогТоваров;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Каталог.Ид"));
	
	// Заполняем данные о владельце каталога.
	// Контрагент.
	Элемент = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Каталог.Владелец");
	Если Элемент <> Неопределено Тогда
		
		РеквизитыКонтрагента = Новый Структура;
		
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			
			Если ЗнДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВРег(ТекСвойство.Имя) = "ИД" Тогда
				
				ИдКонтрагента = ЗнДанных;
				
				// Разберем ИД на ИНН и КПП
				СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
				
				Если СтруктураПоиска.Свойство("ИНН") Тогда
					РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
				КонецЕсли;
				Если СтруктураПоиска.Свойство("КПП") Тогда
					РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
				КонецЕсли;
				
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
				
				РеквизитыУчастника = ЗнДанных;
				Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
					
					РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
					
					Если РеквизитУчастника <> Неопределено Тогда
						Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
							
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя + "_Представление", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РеквизитУчастника, "Представление",, "Строка"));
						ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
							
							РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
						Иначе
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");
	
	РеквизитыПоиска = Новый Структура;
	РеквизитыПоиска.Вставить("ИНН", РеквизитыКонтрагента.ИНН);
	РеквизитыПоиска.Вставить("КПП", РеквизитыКонтрагента.КПП);
	Контрагент = ЭлектронноеВзаимодействие.НайтиСсылку("Контрагенты", ИдКонтрагента, РеквизитыПоиска);
	
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДанныеРазбора, Ошибка);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);
	
	ДатаФормирования = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДатаФормирования");
	Если ДатаФормирования <> Неопределено Тогда
		ДатаФормирования = XMLЗначение(Тип("Дата"), ДатаФормирования);
	КонецЕсли;
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ДатаФормирования);
	
	Если ИнтеграцияЭДО.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		РеквизитыПартнера = Новый Структура();
		РеквизитыПартнера.Вставить("Контрагент", Контрагент);
		ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Партнеры");
		ЗнДопАналитики = ЭлектронноеВзаимодействие.НайтиСсылку(ИмяПрикладногоСправочника, , РеквизитыПартнера);
		
		Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем данные о товарах каталога.
	НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Каталог.Товары.Товар",,, Истина);
	ПрочитатьДанныеТЧКаталогТоваров(НаборДанных, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Каталог"), ДанныеРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьДанныеТЧКаталогТоваров(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка)
	
	Если НаборДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	Организация =ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	Владелец    =ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("Владелец", Владелец);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДанныеРазбора, Ошибка);
		
		ИдТовара   = ПоляПоискаТовара.Ид;
		НаимТовара = ПоляПоискаТовара.Наименование;
		
		Номенклатура = ЭлектронноеВзаимодействие.НайтиСсылку("Номенклатура", "", ПоляПоискаТовара);
		
		НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока     = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
			ПоляПоискаТовара, ДанныеРазбора, Ошибка);
			
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
		
		НаУдаление = Новый Массив;
		Префикс = ФорматыЭДО.ПрефиксДополнительныхДанныхЭлектронныхДокументов();
		ДлинаПрефикса = СтрДлина(Префикс);
		Сопоставление = Новый Структура("Идентификатор,Наименование", ИдТовара, НаимТовара);
		Для Каждого Элемент Из СписокТЧ Цикл
			Если Лев(Элемент.Представление, ДлинаПрефикса) = Префикс Тогда
				НаУдаление.Добавить(Элемент);
				Ключ = Сред(Элемент.Представление, ДлинаПрефикса + 1);
				Сопоставление.Вставить(Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
	
		СопоставлениеДляДереваДокумента = ФорматыЭДО.ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Сопоставление);
		СписокТЧ.Добавить(СопоставлениеДляДереваДокумента, "Сопоставление");
		Для Каждого Элемент Из НаУдаление Цикл
			СписокТЧ.Удалить(Элемент);
		КонецЦикла;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании = Истина)
	
	Если НаборДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;

	Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДанныеРазбора.ДеревоРазбора, НовыйЭД, "Организация");
	
	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДанныеРазбора, Ошибка);
		
		НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ);
		
		СписокТЧ.Добавить(ПоляПоискаТовара.Наименование, "Наименование");
		
		ДобавитьСтрокуТабличнойЧасти(ДанныеРазбора, НовыйЭД, ПоляПоискаТовара, СписокТЧ, Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ)
	
	ИдТовара = ПоляПоискаТовара.Ид;
	Если ЭтоСоставнойИД(ИдТовара) Тогда
		
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		ИДДляПоиска = СтруктураИд.ИдТовара;
		
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
		
	Иначе
		ИДДляПоиска = ИдТовара;
	КонецЕсли;
	
	Номенклатура = ЭлементСправочникаПоИД("Номенклатура", ИДДляПоиска);
	ПоляПоискаТовара.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область ПрайсЛист
Процедура ПрочитатьПрайсXDTO(ЭДПолный, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	ЭД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДПолный, "ПакетПредложений");
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	НовыйЭД.ИД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Ид");
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ПрайсЛист;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДействительноС",, "Дата"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДействительноПо",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДействительноДо",, "Дата"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", НовыйЭД.ИД);
	
	// Контрагент
	Владелец = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Владелец");
	РеквизитыКонтрагента = Новый Структура;
	Роль = "Покупатель";
	
	ПрочитатьДанныеКонтрагентаCML(Владелец, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Роль, РеквизитыКонтрагента);

	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭДПолный, "ДатаФормирования", , "XMLДата"));
	
	// Товары
	НомерСтроки = 0;
	
	Предложения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Предложения.Предложение",,, Истина);
	Для Каждого Элемент Из Предложения Цикл
		
		СписокТЧ = Новый СписокЗначений;
		
		// Номенклатура.
		РеквизитыНоменклатуры = Новый Структура;
		
		// Читаем доп данные строки т.ч.
		Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Организация", Организация);
		
		НомерСтроки = НомерСтроки + 1;
		ПрочитатьДопДанныеСтрокиТЧ(Элемент, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
		
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			
			ЗнДанных = Элемент[ТекСвойство.Имя];
			
			Если ЗнДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Разберем свойства Товара.
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				
				РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
				ИдТовара = ЗнДанных;
				
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
				
				РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
				СписокТЧ.Добавить(ЗнДанных, "Наименование");
				
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
				
				РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
				Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					
					РеквизитыЕдИзм = Новый Структура;
					РеквизитыЕдИзм.Вставить("Код", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗнДанных, "Код"));
					
					ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", РеквизитыЕдИзм.Код, РеквизитыЕдИзм);
					РеквизитыЕдИзм.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗнДанных, "НаименованиеКраткое"));
					
					НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
					НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.НаименованиеКраткое, ЕдИзм,
						РеквизитыЕдИзм, ДанныеРазбора, Ошибка);
					Если ЗначениеЗаполнено(ЕдИзм) Тогда
						РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИдТовара) Тогда
			НайтиЗначениеВСписке(ИдТовара, "Ид", СписокТЧ);
		КонецЕсли;
		
		НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара,
			РеквизитыНоменклатуры.Наименование, Неопределено, РеквизитыНоменклатуры, ДанныеРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
		
		Цены = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "Цены.Цена",,, Истина);
		Для Каждого Цена Из Цены Цикл
			
			СписокТЧ.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Цена, "ЦенаЗаЕдиницу",, "Число"), "Цена");
			СписокТЧ.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Цена, "МинКоличество",, "Число"), "Количество");
			
			ЗнДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Цена, "Единица");
			
			Если ЗнДанных <> Неопределено Тогда
				
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных);
				
				ЕдИзм = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", ЗнДанных, РеквизитыЕдИзм);
				
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					Наименование = ЕдИзм.Наименование;
				Иначе
					Наименование = "шт.";
				КонецЕсли;
				РеквизитыЕдИзм.Вставить("Наименование", Наименование);
				
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(
					ДеревоРазбора, "ЕдиницыИзмерения");
					
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных, Наименование, ЕдИзм,
					РеквизитыЕдИзм, ДанныеРазбора, Ошибка);
				
				Если ЗначениеЗаполнено(ЕдИзм) Тогда
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
		Если Элемент.Свойства().Получить("ЗначенияРеквизитов") <> Неопределено Тогда
			
			Сопоставление = Новый Структура;
			Префикс = ФорматыЭДО.ПрефиксДополнительныхДанныхЭлектронныхДокументов();
			ДлинаПрефикса = СтрДлина(Префикс);
			НаборЗначенийРеквизитов = Элемент.ЗначенияРеквизитов.ЗначениеРеквизита;
			Если ТипЗнч(НаборЗначенийРеквизитов) = Тип("ОбъектXDTO") Тогда
				НаборЗначенийРеквизитов = Новый Массив;
				НаборЗначенийРеквизитов.Добавить(Элемент.ЗначенияРеквизитов.ЗначениеРеквизита);
			КонецЕсли;
			Для Каждого ЗначениеРеквизита Из НаборЗначенийРеквизитов Цикл
				Если Лев(ЗначениеРеквизита.Наименование, ДлинаПрефикса) = Префикс Тогда
					ИмяСвойства = Сред(ЗначениеРеквизита.Наименование, ДлинаПрефикса + 1);
					Сопоставление.Вставить(ИмяСвойства, ЗначениеРеквизита.Значение);
				КонецЕсли;
			КонецЦикла;
			
			СопоставлениеДляДереваДокумента = ФорматыЭДО.ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Сопоставление);
			СписокТЧ.Добавить(СопоставлениеДляДереваДокумента, "Сопоставление");
			
		КонецЕсли;
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		
	КонецЦикла;
	
	// Читаем таб. часть "Виды цен"
	ТаблицаТипыЦен = Новый ТаблицаЗначений;
	ТаблицаТипыЦен.Колонки.Добавить("ИдТипЦены");
	ТаблицаТипыЦен.Колонки.Добавить("ТипЦены");
	ТаблицаТипыЦен.Колонки.Добавить("Наименование");
	ТаблицаТипыЦен.Колонки.Добавить("Валюта");
	ТаблицаТипыЦен.Колонки.Добавить("ВключаетНДС");
	
	ТипыЦен = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ТипыЦен.ТипЦены",,, Истина);
	Для Каждого ТекСтрока Из ТипыЦен Цикл
		
		НоваяСтрока = ТаблицаТипыЦен.Добавить();
		
		НоваяСтрока.ТипЦены      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекСтрока, "Ид");
		НоваяСтрока.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекСтрока, "Наименование");
		НоваяСтрока.Валюта       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекСтрока, "Валюта");
		
		Налоги = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекСтрока, "Налог",,, Истина);
		Если Налоги <> Неопределено Тогда
			Для Каждого Налог Из Налоги Цикл
				НоваяСтрока.ВключаетНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Налог, "УчтеноВСумме", , "Булево");
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТипыЦен", ТаблицаТипыЦен);
	
КонецПроцедуры
#КонецОбласти

#Область СчетНаОплату
Процедура ПрочитатьСчетНаОплатуXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Ид");
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетНаОплату;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", НовыйЭД.ИД);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Номер"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Дата",, "Дата"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Сумма",, "Число"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", 
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "СрокПлатежа",, "Дата"));
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			Если ЗначениеЗаполнено(Валюта) Тогда
				РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Наименование, НаименованиеПолное");
				ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.НаименованиеПолное);
			Иначе
				РеквизитыВалюты = ИнтеграцияБСПБЭД.ДанныеВалютыПоКлассификатору(КодВалюты);
				Если РеквизитыВалюты <> Неопределено Тогда
					ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.КодВалютыБуквенный);
					ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Курс", , "Число");
		Если Курс <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметрыКонтрагента = Неопределено;
	СвойствоРасчетныйСчет   = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("РасчетныйСчет", ЭД);
	
	Если Не СвойствоРасчетныйСчет = Неопределено Тогда
		СтруктураРасчетныйСчет =  РеквизитыРасчетногоСчета(СвойствоРасчетныйСчет, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
		ДопПараметрыКонтрагента = Новый Структура;
		ДопПараметрыКонтрагента.Вставить("РасчетныйСчет", СтруктураРасчетныйСчет);
		
	КонецЕсли;
	
	Контрагенты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Контрагенты.Контрагент",,, Истина);
	Если Контрагенты <> Неопределено Тогда
		Для Каждого ТекКонтрагент Из Контрагенты Цикл
			
			РольКонтрагента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекКонтрагент, "Роль");
			
			Если РольКонтрагента = "Продавец" Тогда
				Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
					Роль = "Продавец";
				ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
					Роль = "Покупатель";
				КонецЕсли;
			КонецЕсли;
			
			Если РольКонтрагента = "Покупатель" Тогда
				Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
					Роль = "Покупатель";
				ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
					Роль = "Продавец";
				КонецЕсли;
			КонецЕсли;
			
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Роль, ДопПараметрыКонтрагента);
			
		КонецЦикла;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Сумма",, "Число"));
	
	СуммаНалогаИтог  = 0;
	СуммаВключаетНДС = Ложь;
	
	Налоги = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Налоги.Налог",,, Истина);
	Для Каждого НалогДокумента Из Налоги Цикл
		
		СуммаНалогаИтог = СуммаНалогаИтог + РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НалогДокумента, "Сумма",, "Число");
		
		Если Врег(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НалогДокумента, "Наименование")) = "НДС" Тогда
			СуммаВключаетНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НалогДокумента, "УчтеноВСумме", ,"Булево");
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", СуммаВключаетНДС);
	
	НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Товары.Товар",,, Истина);
	ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка);
	
	Подписанты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Подписанты.Подписант",,, Истина);
	Если Подписанты <> Неопределено Тогда
		Для Каждого Подписант Из Подписанты Цикл
			
			Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Должность", , "Строка");
			Фамилия   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Фамилия"  , , "Строка");
			Имя       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Имя"      , , "Строка");
			Отчество  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Подписант, "Отчество" , , "Строка");
			
			Если ВРег(Должность) = ВРег("Руководитель") ИЛИ ВРег(Должность) = ВРег("Директор") Тогда
				Руководитель = Фамилия + " " + Имя + " " + Отчество;
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель);
			ИначеЕсли ВРег(Должность) = ВРег("Бухгалтер") Тогда
				Бухгалтер = Фамилия + " " + Имя + " " + Отчество;
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер);
			ИначеЕсли Фамилия <> "-"
				И (Не ЗначениеЗаполнено(Должность)
					ИЛИ Должность = "-"
					ИЛИ НРег(Должность) = "индивидуальный предприниматель") Тогда
				// Заполнение для индивидуального предпринимателя, для которого должность не указывается.
				Руководитель = Фамилия + " " + Имя + " " + Отчество;
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Значения реквизитов
	Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка, ДопРеквизиты);
	
	ПрочитатьСписокЗначенийРеквизитовCML(
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина), НовыйЭД, Ошибка, ДопРеквизиты);
	
	НомерДокументаОснования = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("НомерДокументаОснования", ЭД);
	Если НомерДокументаОснования <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования", НомерДокументаОснования);
	КонецЕсли;
	
	ДатаДокументаОснования = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("ДатаДокументаОснования", ЭД);
	Если ДатаДокументаОснования <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования", ДатаДокументаОснования);
	КонецЕсли;
	
	ВладелецДоговора = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	// Документы сделки
	ПрочитатьДокументыСделки(ДанныеРазбора, НовыйЭД, Организация, ВладелецДоговора, Ошибка);
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий);
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

#КонецОбласти

#Область Заказ
Процедура ПрочитатьЗаказXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Ид");
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", НовыйЭД.ИД);
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ;
	КонецЕсли;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Номер"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Дата",, "XMLДата"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Сумма",, "Число"));
	
	НазначениеПлатежа = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("НазначениеПлатежа", ЭД);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если ВРег(ЭД.Роль) = ВРег("Покупатель") Тогда
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		Иначе
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		КонецЕсли;
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		
		Если ВРег(ЭД.Роль) = ВРег("Покупатель") Тогда
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		Иначе
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		КонецЕсли;
		
	КонецЕсли;
	
	Контрагенты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Контрагенты.Контрагент",,, Истина);
	Если Контрагенты <> Неопределено Тогда
		Для Каждого ТекКонтрагент Из Контрагенты Цикл
			
			Роль = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекКонтрагент, "Роль");
			
			Если ВРег(Роль) = ВРег("Покупатель") Тогда
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, РольКонтрагента);
			ИначеЕсли ВРег(Роль) = ВРег("Продавец") Тогда
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, РольОрганизации);
			Иначе
				ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Получатель");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Читаем товары.
	НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Товары.Товар",,, Истина);
	
	ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка);
	
	Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	// Значения реквизитов.
	ПрочитатьСписокЗначенийРеквизитовCML(
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина), НовыйЭД, Ошибка, ДопРеквизиты);
	
	// Читаем доп данные из xdto и помещаем их в шапку в дерево значений.
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка, ДопРеквизиты);
	
	// Договор контрагента.
	ДоговорНомер = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорНомер");
	ДоговорДата  = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорДата");
	Если ЗначениеЗаполнено(ДоговорДата) Тогда
		ДоговорДата = ФорматыЭДО.ДатаИзСтроки(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорДата"));
	КонецЕсли;
	
	ВладелецДоговора = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("НомерДоговора", ДоговорНомер);
	РеквизитыДоговора.Вставить("ДатаДоговора",  ДоговорДата);
	РеквизитыДоговора.Вставить("Организация",   Организация);
	РеквизитыДоговора.Вставить("Владелец",      ВладелецДоговора);
	
	ДобавитьДоговорВДеревоДокумента(РеквизитыДоговора, НовыйЭД, ДанныеРазбора, Ошибка);
	
	ПрочитатьДокументыСделки(ДанныеРазбора, НовыйЭД, Организация, ВладелецДоговора, Ошибка);
	
	// Банковский счет 
	Если РольОрганизации = "Продавец" Тогда
		ВладелецБС = "Организация";
		ТипСчета = "БанковскиеСчетаОрганизаций";
		ИмяСчета = "БанковскийСчетОрганизации";
	Иначе
		ВладелецБС = "Контрагент";
		ТипСчета = "БанковскиеСчетаКонтрагентов";
		ИмяСчета = "БанковскийСчетКонтрагента";
	КонецЕсли;
	
	ВладелецСчета = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, ВладелецБС);
	
	СвойствоРасчетныйСчет = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("РасчетныйСчет", ЭД);
	Если СвойствоРасчетныйСчет <> Неопределено Тогда
		
		СтруктураРасчетныйСчет = РеквизитыРасчетногоСчета(СвойствоРасчетныйСчет, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
		НомерСчета = СтруктураРасчетныйСчет.НомерСчета;
		
		РеквизитыСчета = Новый Структура;
		РеквизитыСчета.Вставить("Владелец", ВладелецСчета);
		
		БанковскийСчет = ЭлектронноеВзаимодействие.НайтиСсылку(ТипСчета, НомерСчета, РеквизитыСчета);
		НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ТипСчета);
		НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, НомерСчета, НСтр("ru = 'Номер счета:'") + " " + НомерСчета, БанковскийСчет,
				РеквизитыСчета, ДанныеРазбора, Ошибка);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчет", НайденнаяСтрока.ИндексСтроки);
		
	Иначе
		
		РасчетныйСчет = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, ИмяСчета);
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчет", РасчетныйСчет);
		
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		КодВалюты = ЭД.Получить(СвойствоЭД);
		
		Если КодВалюты <> Неопределено Тогда
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			Если ЗначениеЗаполнено(Валюта) Тогда
				РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Наименование, НаименованиеПолное");
				ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.НаименованиеПолное);
			Иначе
				РеквизитыВалюты = ИнтеграцияБСПБЭД.ДанныеВалютыПоКлассификатору(КодВалюты);

				Если РеквизитыВалюты <> Неопределено Тогда
					ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.КодВалютыБуквенный);
					ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Курс", , "Число");
		Если Курс <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);
	
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(СвойствоЭД, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	Комментарий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Комментарий");
	Если Комментарий <> Неопределено Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", Комментарий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если НЕ ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СписокТЧ = Новый СписокЗначений;
	
	Для Каждого Элемент Из НаборДанных Цикл
		СписокТЧ = Новый СписокЗначений;
		ЗаполнитьСписокРеквизитов(СписокТЧ, Элемент, ЭД);
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ТипыДокументовЭДО.ЗаказТовара);
		
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетОСписанииКомиссионногоТовара

Процедура ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	// Уникальный номер ЭД в разрезе участников обмена.
	НовыйЭД.ИД    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Ид");
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Номер"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Дата",, "XMLДата"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Сумма",, "Число"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", НовыйЭД.ИД);
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	// Читаем контрагентов.
	Контрагенты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Контрагенты.Контрагент",,, Истина);
	Если Контрагенты <> Неопределено Тогда
		Для Каждого ТекКонтрагент Из Контрагенты Цикл
			
			Роль = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекКонтрагент, "Роль");
			
			Если ВРег(Роль) = ВРег("Комитент") Тогда
				
				Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
					ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
				ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
					ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
				КонецЕсли;
				
			ИначеЕсли ВРег(Роль) = ВРег("Комиссионер") Тогда
				
				Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
					ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Продавец");
				ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
					ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Товары.Товар",,, Истина);
	
	ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка);
	
	// Дополнительные реквизиты.
	ПрочитатьСписокЗначенийРеквизитовCML(
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина), НовыйЭД, Ошибка);
	
	// Читаем доп данные.
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка);
	
	Организация = ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	ВладелецДоговора =ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	// Документы сделки.
	ПрочитатьДокументыСделки(ДанныеРазбора, НовыйЭД, Организация, ВладелецДоговора, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			Если ЗначениеЗаполнено(Валюта) Тогда
				РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Наименование, НаименованиеПолное");
				ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.НаименованиеПолное);
			Иначе
				РеквизитыВалюты = ИнтеграцияБСПБЭД.ДанныеВалютыПоКлассификатору(КодВалюты);
				
				Если РеквизитыВалюты <> Неопределено Тогда
					ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.КодВалютыБуквенный);
					ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Курс", , "Число");
		Если Курс <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка)
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетОПродажахКомиссионногоТовараXDTO
Процедура ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	// Уникальный номер ЭД в разрезе участников обмена.
	НовыйЭД.ИД    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Ид");
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Номер"));
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата",  РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Дата",, "XMLДата"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Ид"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Сумма",, "Число"));
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	// Читаем доп данные.
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка);
	
	МассивИдКонтрагентов = Новый Массив;
	Контрагенты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Контрагенты.Контрагент",,, Истина);
	Если Контрагенты <> Неопределено Тогда
		Для Каждого ТекКонтрагент Из Контрагенты Цикл
			Роль = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТекКонтрагент, "Роль");
			Если Роль = "Покупатель" Тогда
				Роль = "ПокупательКомиссионногоТовара";
			КонецЕсли;
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Роль, Новый Структура("МассивИдКонтрагентов", МассивИдКонтрагентов));
		КонецЦикла;
	КонецЕсли;
	
	НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Товары.Товар",,, Истина);
	ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка);
	
	// Значения реквизитов.
	ПрочитатьСписокЗначенийРеквизитовCML(
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина), НовыйЭД, Ошибка);
	
	Организация      =ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	ВладелецДоговора =ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	// Документы сделки.
	ПрочитатьДокументыСделки(ДанныеРазбора, НовыйЭД, Организация, ВладелецДоговора, Ошибка);
	
	ГрафикОплаты = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);
	ПрочитатьДанныеПоГрафикуОплаты(ГрафикОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(КодВалюты));
			Если ЗначениеЗаполнено(Валюта) Тогда
				РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "Наименование, НаименованиеПолное");
				ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.НаименованиеПолное);
			Иначе
				РеквизитыВалюты = ИнтеграцияБСПБЭД.ДанныеВалютыПоКлассификатору(КодВалюты);
				Если РеквизитыВалюты <> Неопределено Тогда
					ДопРеквизиты.Вставить("Наименование",       РеквизитыВалюты.КодВалютыБуквенный);
					ДопРеквизиты.Вставить("НаименованиеПолное", РеквизитыВалюты.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, НСтр("ru = 'Код валюты:'") + " " + КодВалюты, Валюта,
				ДопРеквизиты, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Курс", , "Число");
		Если Курс <> Неопределено Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка)
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

#КонецОбласти

#Область АктНаПередачуПрав
Процедура ПрочитатьАктНаПередачуПравXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Документ");
	
	Если Документ.ХозОперация = НСтр("ru = 'Передача прав'") Тогда
		НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав;
	КонецЕсли;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДатаФормирования", , "XMLДата"));
		
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "Ид"));
		
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	// Контрагенты
	Контрагенты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "Контрагенты.Контрагент",,, Истина);
	Для Каждого Контрагент Из Контрагенты Цикл
		ПрочитатьДанныеКонтрагентаCML(Контрагент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Контрагент, "Роль"));
	КонецЦикла;
	
	Организация =ДеревоЭлектронногоДокументаБЭД.СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДопРеквизиты.Вставить("НаправлениеЭД", НовыйЭД.НаправлениеЭД);
	
	// Значения реквизитов
	ПрочитатьСписокЗначенийРеквизитовCML(
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина), НовыйЭД, Ошибка, ДопРеквизиты);
	
	// Читаем доп данные из xdto  и помещаем их в шапку в дерево значений
	ПрочитатьДопДанныеШапкиДокумента(Документ, НовыйЭД, Ошибка, ДопРеквизиты);
	
	ВидОперации = НовыйЭД.Строки.Найти("ВидОперации", "Реквизит", Истина);
	Если ВидОперации <> Неопределено Тогда
		ВидОперации.ЗначениеРеквизита = ФорматыЭДО_ФНС.ВидОперацииЭДПоСтроке(ВидОперации.ЗначениеРеквизита);
	КонецЕсли;
	
	Для Каждого ТекСвойство Из Документ.Свойства() Цикл
		
		Элемент = Документ.Получить(ТекСвойство);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФорматыЭДО.ЭтоПростойТипЭлементаXDTO(Элемент) Тогда
			Если ТекСвойство.Имя = "Валюта" Тогда
				НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
				
				ДопРеквизиты = Новый Структура;
				ДопРеквизиты.Вставить("Код", Элемент);
				
				Валюта = ЭлектронноеВзаимодействие.НайтиСсылку("Валюты", Строка(Элемент));
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Элемент, НСтр("ru = 'Код валюты:'") + " " + Элемент, Валюта,
					ДопРеквизиты, ДанныеРазбора, Ошибка);
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
			ИначеЕсли ТекСвойство.Имя = "Сумма" Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", Число(Элемент));
			ИначеЕсли ТекСвойство.Имя = "Дата" Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "Дата", , "XMLДата"));
			Иначе
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ТекСвойство.Имя, Элемент);
			КонецЕсли;
			
		ИначеЕсли ТекСвойство.Имя = "Товары" Тогда
			НаборДанных = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "Товары.Товар",,, Истина);
			ПрочитатьДанныеТЧАктаНаПередачу(НаборДанных, Документ, ДанныеРазбора, НовыйЭД, Ошибка);
			
		ИначеЕсли СтрНайти(НСтр("ru = 'Налоги Скидки ДопРасходы'"), ТекСвойство.Имя) > 0 Тогда
			ДанныеСпискаЗначенийCML(Элемент, НовыйЭД, Ошибка);
			
		ИначеЕсли ТекСвойство.Имя = "Подписанты" Тогда
			ДанныеСпискаЗначенийCML(Элемент, НовыйЭД, Ошибка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеТЧАктаНаПередачу(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Интеркампани);
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыОрганизации
Процедура ПрочитатьРеквизитыОрганизацииXDTO(ЭД, ДанныеРазбора, НовыйЭД, Ошибка) Экспорт
	
	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации;
	НовыйЭД.ВерсияФормата = "CML_2_08";
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИНН",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ИНН"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КПП",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "КПП"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОКПО"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Наименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Наименование"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОфициальноеНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОфициальноеНаименование"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОсновнойВидДеятельности",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОсновнойВидДеятельности"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЕГРПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ЕГРПО"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКВЭД",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОКВЭД"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКДП",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОКДП"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКОПФ",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОКОПФ"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКФС",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОКФС"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКПО",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ОКПО"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаРегистрации",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДатаРегистрации", , "Дата"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПолноеНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ПолноеНаименование"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Обращение",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Обращение"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Фамилия",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Фамилия"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Имя",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Имя"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отчество",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Отчество"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаРождения",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДатаРождения", , "Дата"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МестоРождения",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "МестоРождения"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Пол",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Пол"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "УдостоверениеЛичности",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "УдостоверениеЛичности"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "АдресРегистрации",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "АдресРегистрации"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Должность",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Должность"));
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Комментарий",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Комментарий"));
	
	ПрочитатьДанныеКонтрагентаCML(ЭД, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, "Покупатель");
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ФорматыОперацииСхемы

// Возвращает поддерживаемые форматы электронных документов.
//
// Возвращаемое значение:
//  Структура - форматы:
//   * CML208 - Строка - идентификатор формата CML 2.08.
//   * CML402 - Строка - идентификатор формата CML 4.02.
//
Функция ПоддерживаемыеФорматы() Экспорт
	
	Форматы = Новый Структура;
	
	Форматы.Вставить("CML208", "CML_2_08");
	Форматы.Вставить("CML402", "CML_4");
	
	Возврат Форматы;
	
КонецФункции

Функция ПоддерживаемыеОперацииCML208()
	
	Операции = Новый Структура;
	Операции.Вставить("КаталогТоваров", "Каталог");
	Операции.Вставить("ПрайсЛист", "Контрагент");
	Операции.Вставить("СчетНаОплату", "СчетНаОплату");
	Операции.Вставить("ЗаказПоставщику", "ЗаказТовара");
	Операции.Вставить("ЗаказПокупателя", "ЗаказКлиента");
	Операции.Вставить("ОтчетОПродажах", "ОтчетОПродажахКомиссионногоТовара");
	Операции.Вставить("ОтчетОСписании", "ОтчетОСписанииКомиссионногоТовара");
	Операции.Вставить("РеквизитыОрганизации", "РеквизитыОрганизации");
	
	Возврат Операции;
	
КонецФункции

Функция ПоддерживаемыеОперацииCML402()
	
	Операции = Новый Структура;
	Операции.Вставить("ПередачаТовараМеждуОрганизациями", "ПередачаТовараМеждуОрганизациями");
	Операции.Вставить("ВозвратТовараМеждуОрганизациями", "ВозвратТовараМеждуОрганизациями");
	
	Возврат Операции;
	
КонецФункции

Функция ОперацияCML208(Знач Данные)
	
	КлючОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "_Операция");
	Операция = Неопределено;
	
	Если ЗначениеЗаполнено(КлючОперации) Тогда
		
		ВсеОперации = ПоддерживаемыеОперацииCML208();
		ВсеОперации.Свойство(КлючОперации, Операция);
		
	Иначе

		ВызватьИсключение НСтр("ru = 'Не задан ключ операции.'");
		
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Функция ОперацияCML402(Знач Данные)
	
	КлючОперации = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Данные, "_Операция");
	Операция = Неопределено;
	
	Если ЗначениеЗаполнено(КлючОперации) Тогда
		
		ВсеОперации = ПоддерживаемыеОперацииCML402();
		ВсеОперации.Свойство(КлючОперации, Операция);
		
	Иначе

		ВызватьИсключение НСтр("ru = 'Не задан ключ операции.'");
		
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

#КонецОбласти

#Область XDTO

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Возврат ФорматыЭДО.ПолучитьОбъектТипаCML(Тип, ВерсияСхемы);
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы) Экспорт
	
	Возврат ФорматыЭДО.ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	
КонецФункции

Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета) Экспорт
	
	Возврат ФорматыЭДО.ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета);
	
КонецФункции

Функция ДвоичныеДанныеОбъектаXDTO(Знач ОбъектXDTO, Знач ТипКодировки = "windows-1251", Знач УказаниеТипа = Истина)
	
	НазначениеТипа = ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное);
	
	Поток = Новый ПотокВПамяти();
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьПоток(Поток, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ОбъектXDTO,,,, НазначениеТипа);
	НоваяЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат ДвоичныеДанные;
	
КонецФункции

Функция ПроверитьОбъектXDTO(Знач ОбъектXDTO, Ошибки)
	
	Результат = Истина;
	
	Попытка
		ОбъектXDTO.Проверить();
	Исключение
		Результат = Ложь;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = НСтр("ru = 'Ошибка проверки объекта XDTO:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстСообщения);
		
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки, Подсистема);
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ДопустимоеИмяФайла(Знач Строка)
	
	ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(Строка);
	ИмяФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ИмяФайла, Истина);
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастникаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, Ошибки, ДопДанные = "")
	
	ЗаполнитьКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, Ошибки, ДопДанные);
	
	ЗаполнитьСвойстваКонтрагентаВДокументеCML(Контрагент, ВидКонтрагента, Ошибки);
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, Ошибки, ДопДанные = "")
	
	ЗаполнитьСвойстваКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, Ошибки, ДопДанные);
	
	БанковскиеРеквизиты = Неопределено;
	ЗаполнитьРеквизитыСчетаКонтрагента(БанковскиеРеквизиты, СтрокаДереваДанных, ВидКонтрагента, Ошибки);
	
	Если ТипЗнч(БанковскиеРеквизиты) = Тип("ОбъектXDTO") Тогда
		
		ПространствоИменСхемы = ПространствоИменCML208();
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ПространствоИменСхемы);
		
		РасчетныеСчета.РасчетныйСчет.Добавить(БанковскиеРеквизиты);

		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , Ошибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, Ошибки, ДопДанные = "");
	
	// Реквизиты используются для передачи данных конечного Покупателя из отчета Комиссионера о продажах:
	ИНН  = "";
	КПП  = "";
	Наименование = "";
	ДопДанные = Новый Структура;
	//
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника")) Тогда
		
		ОКПО = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".КодОКПО", Ложь);
		Если ЗначениеЗаполнено(ОКПО) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "ОКПО", ОКПО, Истина, Ошибки);
		КонецЕсли;
		
		Если ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника") = "ФЛ" Тогда
			Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ПолноеНаименование");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "ПолноеНаименование", Наименование, Истина, Ошибки);
			ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "ИНН", ИНН, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Фамилия",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Фамилия"), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Имя",
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Имя"), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Отчество", 
				ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Отчество"), , Ошибки);
		Иначе
			Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "ОфициальноеНаименование", Наименование, Истина, Ошибки);
			ИНН = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.ИНН");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "ИНН", ИНН, Истина, Ошибки);
			КПП = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.КПП");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "КПП", КПП, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ИдКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "_" + КПП, "");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, , Ошибки);
		ДопДанные.Вставить("Наименование", Наименование);
		ДопДанные.Вставить("ИНН", ИНН);
		ДопДанные.Вставить("КПП", КПП);
		ДопДанные.Вставить("ИД", ИдКонтрагента);
	КонецЕсли;
	
	ПространствоИменСхемы = ПространствоИменCML208();
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидКонтрагента + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			АдресТип = ПолучитьОбъектТипаCML("Адрес", ПространствоИменСхемы);
			// Если адрес структурированный заполняем Адресное поле
			// если нет - только представление.
			Если Адрес.Значение = "Структурированный" Тогда
				Представление = "";
				СтрокиАдреса = Адрес.Строки.Найти("Структурированный").Строки;
				Для Каждого СтрокаСАдресом Из СтрокиАдреса Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаСАдресом.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					АдресноеПоле = ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", ПространствоИменСхемы);
					НормТип = СтрокаСАдресом["Уровень" + (СтрокаСАдресом.Уровень() + 1)];
					Если НормТип = "Индекс" Тогда
						НормТип = НСтр("ru ='Почтовый индекс'");
					ИначеЕсли НормТип = "КодРегион" Тогда
						НормТип = "Регион";
						ИмяРегиона = "";
						ИмяРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(СтрокаСАдресом.Значение);
						Если ЗначениеЗаполнено(ИмяРегиона) Тогда
							СтрокаСАдресом.Значение = ИмяРегиона;
						КонецЕсли;					
					ИначеЕсли НормТип = "НаселПункт" Тогда
						НормТип = НСтр("ru ='Населенный пункт'");
					ИначеЕсли НормТип = "Кварт" Тогда
						НормТип = "Квартира";
					КонецЕсли;
					АдресноеПоле.Тип = НормТип;
					АдресноеПоле.Значение = СтрокаСАдресом.Значение;
					АдресТип.АдресноеПоле.Добавить(АдресноеПоле);
					
					Представление = Представление + ?(Представление = "","",", ") + СтрокаСАдресом.Значение;
					
				КонецЦикла;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "Представление", Представление, Истина, Ошибки);
			Иначе
				Если Адрес.Значение = "Иностранный" Тогда
					СтрокаАдреса = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, Адрес.ПолныйПуть + "." + Адрес.Значение + ".АдрТекст");
				Иначе
					СтрокаАдреса = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, Адрес.ПолныйПуть + "." + Адрес.Значение);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресТип, "Представление", СтрокаАдреса, Истина, Ошибки);
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакты = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Тип", НСтр("ru = 'Телефон рабочий'"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон"), Истина, Ошибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Тип", НСтр("ru = 'Факс'"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс"), Истина, Ошибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Контакты", Контакты, , Ошибки);
	КонецЕсли;
	
	ФамилияРуководителя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Фамилия");
	Если ЗначениеЗаполнено(ФамилияРуководителя) Тогда
		
		Руководитель = ПолучитьОбъектТипаCML("Руководитель", ПространствоИменСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Руководитель, "Фамилия", ФамилияРуководителя, Истина, Ошибки);
		
		ИмяРуководителя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Имя");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Руководитель, "Имя", ИмяРуководителя, Истина, Ошибки);
		
		ОтчествоРуководителя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Отчество");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Руководитель, "Отчество", ОтчествоРуководителя, Истина, Ошибки);
		
		ДолжностьРуководителя = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Должность");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Руководитель, "Должность", ДолжностьРуководителя, Истина, Ошибки);
		
		Контрагент.Руководитель = Руководитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСчетаКонтрагента(БанковскиеРеквизиты, СтрокаДереваДанных, ВидКонтрагента, Ошибки)
	
	Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет")) Тогда
		
		ПространствоИменСхемы = ПространствоИменCML208();
		
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		
		НомерСчета = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, Истина, Ошибки);
		КонецЕсли;
		
		НаимБанк = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НаимБанк");
		БИК = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", НаимБанк, , Ошибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(БИК) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, , Ошибки);
		КонецЕсли;
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, Ошибки);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКонтрагентаВДокументеCML(Контрагент, ВидКонтрагента, Ошибки)
	
	Если Контрагент.Свойства().Получить("Роль") <> Неопределено
		И СтрНайти(ВидКонтрагента, ".") = 0 Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Роль", ВидКонтрагента, Истина, Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасчетныйСчетПоставщика(ДеревоДанных, Контрагент, ПространствоИменСхемы, Ошибки)
	
	НомерСчета = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
	
	СтруктураСчет = Новый Структура("НомерСчета, БИК, СчетКорреспондентский, НаименованиеБанка, БикКорр,
			|СчетКорр, НаименованиеКорр, Комментарий");
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		
		// заполняем расчетный счет
		СтруктураСчет.НомерСчета = НомерСчета;
		
		// заполняем банк
		
		БикБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
		Если ЗначениеЗаполнено(БикБанка) Тогда
			СтруктураСчет.БИК = БикБанка;
		КонецЕсли;
		
		СчетКорреспондентский = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
		Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
			СтруктураСчет.СчетКорреспондентский = СчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			СтруктураСчет.НаименованиеБанка = НаименованиеБанка;
		КонецЕсли;
		
		// заполняем банк корреспондент
		
		БикКорБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
		
		Если ЗначениеЗаполнено(БикКорБанка) Тогда
			СтруктураСчет.БикКорр = БикКорБанка;
		КонецЕсли;
		
		КорСчетКорреспондентский = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
		Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
			СтруктураСчет.СчетКорр = КорСчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеКорБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
		Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
			СтруктураСчет.НаименованиеКорр =  НаименованиеКорБанка;
		КонецЕсли;
		
		// заполняем комментарий
		Комментарий = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Комментарий");
		Если ЗначениеЗаполнено(Комментарий) Тогда
			СтруктураСчет.Комментарий =  Комментарий;
		КонецЕсли;
		
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", СтруктураСчет.НомерСчета, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Комментарий", СтруктураСчет.Комментарий,, Ошибки);
		
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", СтруктураСчет.НаименованиеБанка, ,Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", СтруктураСчет.БИК, ,Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвБанк, "СчетКорреспондентский", СтруктураСчет.СчетКорреспондентский, ,Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, Ошибки);
		
		БанкКорреспондент = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураСчет.НаименованиеКорр, ,Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураСчет.БикКорр, ,Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураСчет.СчетКорр, ,Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "БанкКорреспондент", БанкКорреспондент, , Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныйСчет", БанковскиеРеквизиты, , Ошибки);
	
	КонецЕсли;
	

КонецПроцедуры

Процедура ДобавитьВЗначенияРеквизитовДокумента(НаименованиеРеквизита, ДобавляемоеЗначение, ДокументXDTO)
	
	ПространствоИменСхемы = ПространствоИменCML208();
	ЗначенияРеквизитаДокумента = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
	ЗначенияРеквизитаДокумента.Наименование = НаименованиеРеквизита;
	
	Если ТипЗнч(ДобавляемоеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ДобавляемоеЗначение Цикл
			ЗначенияРеквизитаДокумента.Значение.Добавить(Строка(ЭлементМассива));
		КонецЦикла;
	ИначеЕсли СтрНайти(НаименованиеРеквизита, "СтавкаНДС") > 0 Тогда
		ЗначенияРеквизитаДокумента.Значение.Добавить(
			ИнтеграцияЭДО.СтавкаНДСИзСоответствия(, ДобавляемоеЗначение));
		
	Иначе
		ЗначенияРеквизитаДокумента.Значение.Добавить(Строка(ДобавляемоеЗначение))
		
	КонецЕсли;
	
	Если ДокументXDTO.ЗначенияРеквизитов = Неопределено Тогда
		
		Если ДокументXDTO.Тип() = ПолучитьТипОбъектаCML("Документ", ПространствоИменСхемы) Тогда
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML(
				"Документ.ЗначенияРеквизитов", ПространствоИменСхемы);
			
		ИначеЕсли ДокументXDTO.Тип() = ПолучитьТипОбъектаCML("ПакетПредложений", ПространствоИменСхемы) Тогда
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML(
				"ПакетПредложений.ЗначенияРеквизитов", ПространствоИменСхемы);
	
		Иначе
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		КонецЕсли;
		
		ДокументXDTOЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
		
		ДокументXDTO.ЗначенияРеквизитов = ДокументXDTOЗначенияРеквизитов;
	Иначе
		
		ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоКонтрагентуCML(Контрагент, ДеревоДанных, ВидКонтрагента, Ошибки, ВерсияСхемы = "4.01", ИмяСвойства = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		ИмяСвойства = ВидКонтрагента;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ИмяСвойства) Тогда
		Возврат;
	Иначе
		ДанныеКонтрагента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ИмяСвойства);
	КонецЕсли;
	
	ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(ДанныеКонтрагента);
	
	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");

	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеКонтрагента, ИмяРеквизитаИННКонтрагента
		+ "," + ИмяРеквизитаКППКонтрагента);
	ИдКонтрагента = РеквизитыКонтрагента.ИНН + "_" + РеквизитыКонтрагента.КПП;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, Ошибки);
	
	// Заполнение реквизитов юридического или физического лица.
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ДанныеКонтрагента); 
	
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	Если НЕ ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) ИЛИ ПустаяСтрока(ПолноеНаименование) Тогда
		ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
	КонецЕсли;
	
	РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");
	РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН, , Ошибки);
	
	Если НЕ ЭтоФизЛицо Тогда
		// КПП есть только в реквизитах ЮрЛица
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , Ошибки);
	КонецЕсли;
	
	// Юр.адрес или адрес регистрации.
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес) Тогда
		
		ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");
		ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , Ошибки);
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , Ошибки);
	
	// РасчетныеСчета.
	РасчСчет = Неопределено;
	
	ВидыКонтрагентов = Новый Массив;
	ВидыКонтрагентов.Добавить("Организация"); // 0
	ВидыКонтрагентов.Добавить("Контрагент");  // 1
	ВидыКонтрагентов.Добавить("Организация"); // 2
	ВидыКонтрагентов.Добавить("Контрагент");  // 3
	ВидыКонтрагентов.Добавить("Контрагент");  // 4
	
	ИмяРеквизитаСчет = Новый Массив;
	ИмяРеквизитаСчет.Добавить("РасчетныйСчетОрганизации");      // 0
	ИмяРеквизитаСчет.Добавить("РасчетныйСчетКонтрагента");      // 1
	ИмяРеквизитаСчет.Добавить("РасчетныйСчетГрузоотправителя"); // 2
	ИмяРеквизитаСчет.Добавить("РасчетныйСчетГрузоотправителя"); // 3
	ИмяРеквизитаСчет.Добавить("РасчетныйСчетГрузополучателя");  // 4
	
	Для н = 0 По 4 Цикл
		Если ВидКонтрагента = ВидыКонтрагентов[н]
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ИмяРеквизитаСчет[н]) Тогда
			РасчСчет = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаСчет[н]);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(РасчСчет) Тогда
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);
		РасчетныйСчет  = ПолучитьОбъектТипаCML("РасчетныйСчет",             ВерсияСхемы);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, Ошибки);
		
		// Банк
		Банк = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, Ошибки);
		
		// Банк корреспондент
		Если ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов) Тогда
			
			БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , Ошибки);
			
		КонецЕсли;
		
		РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , Ошибки);
		
	КонецЕсли;
	
	// Адрес
	Если ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес")
		И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес) Тогда
		
		АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , Ошибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтрокаДерева, Ошибки, ВерсияСхемы = "4.01")
	
	// Формируем ИД товара.
	ИДТовара = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Ид");
	Если Не ЗначениеЗаполнено(ИДТовара) Тогда

		Номенклатура = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Номенклатура");
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		
		ИДХарактеристики = "";
		ИДУпаковки       = "";
		
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.Характеристика") Тогда
			Характеристика = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Характеристика");
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		КонецЕсли;
		
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.Упаковка") Тогда
			Упаковка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Упаковка");
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		КонецЕсли;
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, Истина, Ошибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.ШтрихКод") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.ШтрихКод"), , Ошибки);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.Артикул") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Артикул",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Артикул"), , Ошибки);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.ИДТовара") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ИДТовара",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.ИДТовара"), , Ошибки);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Наименование",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Наименование"), Истина, Ошибки);
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.БазоваяЕдиницаКод"), Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.БазоваяЕдиницаНаименование"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное"), , Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение"), , Ошибки);
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, Ошибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.Описание") Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Описание",
			ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "Товары.НомерСтроки.Описание"), , Ошибки);
	КонецЕсли;
	
	ДопРеквизиты = Неопределено;
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДерева, "Товары.НомерСтроки.ДополнительныеРеквизиты") Тогда
		ДопРеквизиты = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДерева, "Товары.НомерСтроки.ДополнительныеРеквизиты");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопРеквизиты) Тогда
		
		Для Каждого Элемент Из ДопРеквизиты Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, Ошибки);
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из Элемент.Значение Цикл
					// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						Если ТипЗнч(ЭлементМассива) = Тип("СписокЗначений") Тогда
							ЗаполненныйТип = Неопределено;
							Для Каждого Элемент Из ЭлементМассива Цикл
								Если Элемент.Пометка Тогда
									ЗаполненныйТип = Элемент;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
								Адрес = ЗаполненныйТип.Значение;
								Если ЗаполненныйТип.Представление = "Структурированный" Тогда
									ЭлементМассива = СобратьАдрес(Адрес);
								Иначе
									ЭлементМассива = Адрес.АдресСтрокой;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
				Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
					Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
						ЗаполненныйТип = Неопределено;
						Для Каждого Элемент Из Элемент.Значение Цикл
							Если Элемент.Пометка Тогда
								ЗаполненныйТип = Элемент;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
							Адрес = ЗаполненныйТип.Значение;
							Если ЗаполненныйТип.Представление = "Структурированный" Тогда
								Элемент.Значение = СобратьАдрес(Адрес);
							Иначе
								Элемент.Значение = Адрес.АдресСтрокой;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗначениеРеквизита.Значение.Добавить(Элемент.Значение)
			КонецЕсли;
			
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СобратьАдрес(Знач СтруктураАдрес)
	
	Адрес = "";
	
	Для Каждого КлючЗначение Из СтруктураАдрес Цикл
		
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеАдресногоПоля = КлючЗначение.Значение;
		
		ДобавитьПрефиксКЭлементуАдреса(КлючЗначение.Ключ, ЗначениеАдресногоПоля);
		
		Адрес = Адрес + ?(ЗначениеЗаполнено(Адрес), ","+ " " + ЗначениеАдресногоПоля, ЗначениеАдресногоПоля);
		
	КонецЦикла;
	
	Возврат Адрес;
	
КонецФункции

Процедура ДобавитьПрефиксКЭлементуАдреса(Знач ИмяЭлемента, ЗначениеЭлемента)
	
	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = ВРег(ИмяЭлемента);
	Префикс = "";
	
	Если ИмяЭлемента = "ДОМ" Тогда
		
		// Добавляем префикс "дом № ", если
		// значение начинается с цифры 
		// и состоит из одного слова.
		// Например, добавляем для "15А", не добавляем для "15А д".
		
		НачальныйСимвол = Лев(ЗначениеЭлемента, 1);
		НачальныйСимволЦифра = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НачальныйСимвол);
		ТолькоОдноСлово = (СтрНайти(СокрЛП(ЗначениеЭлемента), " ") = 0);
		
		Если НачальныйСимволЦифра И ТолькоОдноСлово Тогда
			Префикс = НСтр("ru = 'дом №'") + " ";
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "КОРПУС" Тогда
		
		// Добавляем префикс "корпус ", если
		// значение состоит из одного символа
		// или из одних цифр.
		
		ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеЭлемента);
		ТолькоОдинСимвол = (СтрДлина(ЗначениеЭлемента) = 1);
		
		Если ТолькоЦифры ИЛИ ТолькоОдинСимвол Тогда
			Префикс = НСтр("ru = 'корпус'") + " ";
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "КВАРТИРА" ИЛИ ИмяЭлемента = "КВАРТ" Тогда
		
		// Добавляем префикс "кв. ", если
		// значение состоит из одних цифр.
		
		ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеЭлемента);
		
		Если ТолькоЦифры Тогда
			Префикс = НСтр("ru = 'кв.'") + " ";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеЭлемента = Префикс + ЗначениеЭлемента;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, Ошибки, МассивФайлов = Неопределено)
	
	Характеристика = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Характеристика", Ложь);
	Упаковка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Упаковка", Ложь);
	
	// Характеристики и упаковки.
	Если ЗначениеЗаполнено(Характеристика) ИЛИ ЗначениеЗаполнено(Упаковка) Тогда
		НаименованиеНоменклатуры = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование")
			+ " (" + ?(ЗначениеЗаполнено(Характеристика), Характеристика , "")
			+ ?(ЗначениеЗаполнено(Характеристика) И ЗначениеЗаполнено(Упаковка), ", ", "")
			+ ?(ЗначениеЗаполнено(Упаковка), Упаковка , "") + ")";
		ВставитьЗначениеВДерево(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование", НаименованиеНоменклатуры);
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Наименование",
		ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование"), , Ошибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Артикул", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Страна", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ТорговаяМарка", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Описание", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Картинка", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним тег БазоваяЕдиница.
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеКраткое", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Пересчет = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница.Пересчет", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Пересчет, "Единица", Реквизит, , Ошибки);
		
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент") Тогда
				Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Пересчет, "Коэффициент", Реквизит, , Ошибки);
				КонецЕсли;
			КонецЕсли;
			БазоваяЕдиница.Пересчет.Добавить(Пересчет);
		КонецЕсли;
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, Ошибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ")
		И Товар.Свойства().Получить("Единица") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Единица", Реквизит, , Ошибки);
			
			Коэффициент = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
			Если ЗначениеЗаполнено(Коэффициент) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Коэффициент", Коэффициент, , Ошибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога")
		И Товар.Свойства().Получить("ИдКаталога") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ИдКаталога", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора")
		И Товар.Свойства().Получить("ИдКлассификатора") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ИдКлассификатора", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("ЦенаЗаЕдиницу") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ЦенаЗаЕдиницу", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("Цена") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Цена", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество")
		И Товар.Свойства().Получить("Количество") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Количество", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма")
		И Товар.Свойства().Получить("Сумма") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Сумма", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Товар.Свойства().Получить("Налоги") <> Неопределено И Товар.Свойства().Получить("Налоги") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС");
		
		Налоги = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги", ПространствоИменСхемы);
		Налог = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги.Налог", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Налог, "Наименование", "НДС", Истина, Ошибки);
		
		УчтеноВСумме = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НДСУчтеноВСумме", Ложь);
		Если ЗначениеЗаполнено(УчтеноВСумме) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Налог, "УчтеноВСумме", УчтеноВСумме, , Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Налог, "Сумма", Реквизит, Истина, Ошибки);
		
		СтавкаНДС = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтавкаНДС");
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтрокаСтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(, СтавкаНДС);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Налог, "Ставка", СтрокаСтавкаНДС, , Ошибки);
		КонецЕсли;
		Налоги.Налог.Добавить(Налог);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "Налоги", Налоги, , Ошибки);
		
	КонецЕсли;
	
	// Заполним скидку
	Скидка = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Скидки.Скидка", ПространствоИменСхемы);
	ЗаполнятьСкидку = Ложь;
	
	НаименованиеСкидки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НаименованиеСкидки", Ложь);
	Если Не ЗначениеЗаполнено(НаименованиеСкидки) Тогда
		НаименованиеСкидки = "ОбщаяСкидка";
	КонецЕсли;
	Скидка.Наименование = НаименованиеСкидки;
	
	СуммаСкидки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаСкидки", Ложь);
	Если ЗначениеЗаполнено(СуммаСкидки) Тогда
		Скидка.Сумма = СуммаСкидки;
		ЗаполнятьСкидку = Истина;
	КонецЕсли;
	
	ПроцентСкидки = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПроцентСкидки", Ложь);
	Если ЗначениеЗаполнено(ПроцентСкидки) Тогда
		Скидка.Процент = ПроцентСкидки;
	КонецЕсли;
	
	СкидкаУчтеноВСумме = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СкидкаУчтеноВСумме", Ложь);
	Если ЗначениеЗаполнено(СкидкаУчтеноВСумме) Тогда
		Скидка.УчтеноВСумме = СкидкаУчтеноВСумме;
	КонецЕсли;
	
	КомментарийКСкидке = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.КомментарийКСкидке", Ложь);
	Если ЗначениеЗаполнено(КомментарийКСкидке) Тогда
		Скидка.Комментарий = КомментарийКСкидке;
	КонецЕсли;
	
	Если ЗаполнятьСкидку Тогда
		Скидки = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Скидки", ПространствоИменСхемы);
		Скидки.Скидка.Добавить(Скидка);
		
		Товар.Скидки = Скидки;
	КонецЕсли;

	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения")
		И Товар.Свойства().Получить("СтранаПроисхождения") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "СтранаПроисхождения", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД")
		И Товар.Свойства().Получить("ГТД") <> Неопределено Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ГТД", Реквизит, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСвойства = Ложь;
	ЗначенияСвойств = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияСвойств", ПространствоИменСхемы);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")
			И ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыШтрихкодов = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Штрихкоды", "ПолныйПуть", Истина);
		Для Каждого СтрокаДанных Из СтрокаТаблицыШтрихкодов.Строки Цикл
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Штрихкод", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", СтрокаДанных.Строки[1].Значение, , Ошибки);
			ЗначенияСвойства.Значение.Добавить(СтрокаДанных.Строки[0].Значение);
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")
			И ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Свойства", "ПолныйПуть", Истина);
		Индекс = 0;
		Для Каждого СтрокаДанных Из СтрокаТаблицыСвойств.Строки Цикл
			Индекс = Индекс + 1;
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Свойство" + Индекс, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), , Ошибки);
			ЗначенияСвойства.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ЗначенияСвойств", ЗначенияСвойств, , Ошибки);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов") Тогда
		ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов")) Тогда
			СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.ЗначенияРеквизитов", "ПолныйПуть", Истина);
			Индекс = 0;
			Для Каждого СтрокаДанных Из СтрокаТаблицыСвойств.Строки Цикл
				Индекс = Индекс + 1;
				ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), Истина, Ошибки);
				ЗначениеРеквизита.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
				ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
			КонецЦикла;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ЗначенияРеквизитов", ЗначенияРеквизитов, , Ошибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")
			И ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")) Тогда
		
		СтрокаТаблицыФайлов = СтрокаДереваДанных.Строки.Найти(
														"Товары.НомерСтроки.ПрисоединенныеФайлы",
														"ПолныйПуть",
														Истина);
		Для Каждого СтрокаДанных Из СтрокаТаблицыФайлов.Строки Цикл
			Товар.Картинка.Добавить(СтрокаДанных.Строки[1].Значение);
			Если Не МассивФайлов = Неопределено Тогда
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("АдресВременногоХранилища", СтрокаДанных.Строки[0].Значение);
				СтруктураДанных.Вставить("ИмяФайла",                 СтрокаДанных.Строки[1].Значение);
				СтруктураДанных.Вставить("ИдТовара",                 "");
				МассивФайлов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПутьКДополнительнымДанным = "Товары.НомерСтроки.ДополнительныеДанные";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, ПутьКДополнительнымДанным) Тогда
		
		ДополнительныеДанные = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаДереваДанных, ПутьКДополнительнымДанным);
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			
			Если Товар.ЗначенияРеквизитов = Неопределено Тогда
				ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Товар, "ЗначенияРеквизитов", ЗначенияРеквизитов, , Ошибки);
			КонецЕсли;
			
			Для Каждого Элемент Из ДополнительныеДанные Цикл
			
				ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
				ЗначениеРеквизита.Наименование = Элемент.Ключ;
				ЗначениеРеквизита.Значение.Добавить(Элемент.Значение);
				Товар.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем значения реквизитов
	ПоместитьДопДанныеСтрокиТаблицы(СтрокаДереваДанных, "", Ошибки, СтрокаДереваДанных.Значение, Товар);
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруПредложенияCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, Ошибки)
	
	// заполняем реквизиты, которые есть в Предложении но нет в товаре
	
	Цены = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение.Цены", ПространствоИменСхемы);
	Цена = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение.Цены.Цена", ПространствоИменСхемы);
	
	ЗначениеЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
	Если ЗначениеЗаполнено(ЗначениеЦены) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Цена, "ЦенаЗаЕдиницу", ЗначениеЦены, , Ошибки);
	КонецЕсли;
	
	ТипЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТипЦены");
	Если Не ЗначениеЗаполнено(ТипЦены) Тогда
		ЗначениеИдТипаЦены = "---";
	Иначе
		ЗначениеИдТипаЦены = Строка(ТипЦены.УникальныйИдентификатор());
	КонецЕсли;
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", ЗначениеИдТипаЦены, , Ошибки);
	
	ЗначениеВалютаЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ВалютаЦены");
	Если ЗначениеЗаполнено(ЗначениеВалютаЦены) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Цена, "Валюта", ЗначениеВалютаЦены, , Ошибки);
	КонецЕсли;
	
	ЗначениеКоличествоЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
	Если ЗначениеЗаполнено(ЗначениеКоличествоЦены) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ЗначениеКоличествоЦены, , Ошибки);
	КонецЕсли;
	
	ЗначениеЕдиницаЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
	Если ЗначениеЗаполнено(ЗначениеЕдиницаЦены) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Цена, "Единица", ЗначениеЕдиницаЦены, , Ошибки);
	КонецЕсли;
	
	КоэффициентЕдиницаЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
	Если ЗначениеЗаполнено(КоэффициентЕдиницаЦены) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Цена, "Коэффициент", КоэффициентЕдиницаЦены, , Ошибки);
	КонецЕсли;

	
	Цены.Цена.Добавить(Цена);
	Товар.Цены = Цены;
	
КонецПроцедуры

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Процедура ПоместитьДопДанныеСтрокиТаблицы(ДеревоДанных, ИдФайла, Ошибки, НомерСтроки, ДокументXDTO)
	
	ИмяЭлементаВладельца = "Строки";
	ПространствоИмен = ПространствоИменCML208();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхСтроки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ИдФайла);
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.
	
	ДопДанныеПодписанные = ДеревоДанных.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеПодписанные = Неопределено Тогда
		СтруктураДопДанных = Новый Структура;
		Для Каждого СтрокаДерева Из ДопДанныеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "Товары.НомерСтроки.ДопДанныеПодписанные.", "");
			Если ИмяРеквизита = "НомерСтроки" Тогда
				ИмяРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					СтрокаДерева, "Товары.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Идентификатор");
				ЗначениеРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
					СтрокаДерева, "Товары.НомерСтроки.ДопДанныеПодписанные.НомерСтроки.Значение");
			Иначе
				ЗначениеРеквизита = СтрокаДерева.Значение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
				СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			
			ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
				СтруктураДопДанных,
				ИмяЭлементаВладельца,
				Истина,
				НомерСтроки);
			
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИнфПол = "";
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		// Сформируем xml-строку (ИнфПол):
		СформировалиСтроку = СформироватьДопФайлCML(СтруктураПараметров,
			Ошибки, Истина, ИмяЭлементаВладельца, Строка(НомерСтроки));
		
		Если СформировалиСтроку Тогда
			
			СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			ИмяРеквизитаДопДанные = "ДопДанные" + ИмяЭлементаВладельца;
			ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизитаДопДанные, СтрокаИнфПол, ДокументXDTO)
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

Функция СформироватьДопФайлCML(СтруктураПараметров,
											Ошибки,
											Знач ЮридическиЗначимый = Ложь,
											ИмяТЧ = Неопределено,
											НомерСтроки = Неопределено)
	
	// ИмяТЧ и НомерСтроки заполняются только для юридически значимой информации (информация - которая будет помещена в
	// основном файле (ИнфПол, ИнфПолСтр) и подписана ЭЦП).
	Если НомерСтроки <> Неопределено Тогда //ЗначениеЗаполнено(ИмяТЧ) ИЛИ
		ЮридическиЗначимый = Истина;
	КонецЕсли;
	ДопФайлСформирован = Ложь;
	ПространствоИменСхемы = "ДопФайлУниверсальный";
	Попытка
		ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
		Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") И ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			ЕстьДанныеДляДопФайла = Ложь;
			ДопФайл = ПолучитьОбъектТипаCML("ДопФайл", ПространствоИменСхемы);
			Данные = ПолучитьОбъектТипаCML("ДопФайл.Данные", ПространствоИменСхемы);
			
			Если НомерСтроки <> Неопределено Тогда
				// Если НомерСтроки - заполнено, то формируется строка ИнфПолСтр по юридически значимой информации и конкретной строке ТЧ.
				СтОтбора = Новый Структура;
				СтОтбора.Вставить("ТЧ", Истина);
				СтОтбора.Вставить("ИмяРеквизита", "Список");
				СтОтбора.Вставить("ЗначениеРеквизита", ИмяТЧ);
				МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если МассивСтрокДЗ.Количество() > 0 Тогда
					// В нужной ТЧ найдем требующуюся строку (НомерСтроки):
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки);
					МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если ЮридическиЗначимый=Истина, значит формируется строка ИнфПол(ИнфПолСтр).

				Если ЮридическиЗначимый Тогда
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", ИмяТЧ);
					МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
						
					КонецЕсли;
					
				Иначе
					
					МассивСтрокДЗ = ДеревоДопДанных.Строки;
					
				КонецЕсли;
			КонецЕсли;
			
			Если МассивСтрокДЗ.Количество() > 0 Тогда
				СформироватьДопСтроку(МассивСтрокДЗ, Данные, ПространствоИменСхемы, ЮридическиЗначимый,
					ЕстьДанныеДляДопФайла, Ошибки, 0);
					
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопФайл, "Данные", Данные, Истина, Ошибки);
			КонецЕсли;
			
			ИдДопФайла = Новый УникальныйИдентификатор;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопФайл, "ИдФайла", СтруктураПараметров.ИдФайл, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопФайл, "ИдДопФайла", Строка(ИдДопФайла), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопФайл, "ВерсияФормата", "1", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДопФайл, "ДатаФормирования", ТекущаяДатаСеанса(), Истина, Ошибки);
			ДопФайл.Проверить();
			
			Если ЕстьДанныеДляДопФайла И НЕ ЗначениеЗаполнено(Ошибки) Тогда
				Если ЮридическиЗначимый Тогда
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.Отступ = Ложь;
					ЗаписьXML.УстановитьСтроку();
					ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДопФайл);
					СтрXML = ЗаписьXML.Закрыть();
					НачПоз = СтрНайти(СтрXML, "<Данные>");
					КолСимв = СтрНайти(СтрXML, "</Данные>") - НачПоз + СтрДлина("</Данные>");
					СтрXML = Сред(СтрXML, НачПоз, КолСимв);
					
					СтрXML = СтрЗаменить(СтрXML, Символы.Таб,"");
					СтрXML = СтрЗаменить(СтрXML, Символы.ПС," ");
					
					СтруктураПараметров.Вставить("ИнфПол", СтрXML);
					ДопФайлСформирован = Истина;
				Иначе
					СтруктураПараметров.Вставить("ИдентификаторДопФайла", Строка(ИдДопФайла));
					
					ПолноеИмяФайла = РаботаСФайламиБЭД.ВременныйКаталог() + ИдДопФайла + ".xml";
					СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ПолноеИмяФайла);
					
					РаботаСФайламиБЭД.СохранитьXDTO(ДопФайл, ПолноеИмяФайла, Ложь);
					СтруктураПараметров.Вставить("ДвоичныеДанныеДопФайла", Новый ДвоичныеДанные(ПолноеИмяФайла));
					ДопФайлСформирован = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДопФайлСформирован;
	
КонецФункции

Процедура СформироватьДопСтроку(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, Ошибки, Знач УровеньВложенности)
	
	УровеньВложенности = УровеньВложенности + 1;
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если Не ЮридическиЗначимый Тогда
			Если СтрокаДЗ.ЮридическиЗначимый Тогда 
				// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
				// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
				// будут передаваться отдельно от не значимых, в разных файлах).
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , Ошибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , Ошибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			СформироватьДопСтроку(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, Ошибки, УровеньВложенности);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Рекв.Реквизит.Добавить(Реквизит);
			ЕстьДанныеДляДопФайла = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьДопДанныеШапки(ДеревоДанных, ДокументXDTO, Ошибки);
	
	ИмяЭлементаВладельца = "Шапка";
	ПространствоИмен = ПространствоИменCML208();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхШапки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ДокументXDTO.Ид);
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.

	
	СтруктураДопДанных = Новый Структура;
	ДопДанныеНеПодписанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеНеПодписанные = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДопДанныеНеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.НеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураДопДанных.Количество() > 0 Тогда
		ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Ложь);
	КонецЕсли;
	
	СтруктураДопДанных = Новый Структура;
	ДопДанныеДеревоДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть");	
	ДопДанныеПодписанные = ДопДанныеДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
	Если ТипЗнч(ДопДанныеПодписанные.Значение) = Тип("Число") И ДопДанныеПодписанные.Значение > 0 Тогда
	
		Если Не ДопДанныеПодписанные = Неопределено Тогда
			Для Каждого СтрокаДерева Из ДопДанныеПодписанные.Строки Цикл
				
				ИмяРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ДопДанные.Подписанные.НомерСтроки.Идентификатор");
				ЗначениеРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ДопДанные.Подписанные.НомерСтроки.Значение");
				СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Если СтруктураДопДанных.Количество() > 0 Тогда
		
		ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Истина);
		
	КонецЕсли;
	
	СтрокаИнфПол = "";
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		// Сформируем xml-строку (ИнфПол):
		СформировалиСтроку = СформироватьДопФайлCML(СтруктураПараметров,
			Ошибки, Истина, ИмяЭлементаВладельца);
		
		Если СформировалиСтроку Тогда
			
			СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			ИмяРеквизитаДопДанные = "ДопДанные" + ИмяЭлементаВладельца;
			ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизитаДопДанные, СтрокаИнфПол, ДокументXDTO)
		
		КонецЕсли;
		
		// Сформируем доп. файл (для строк таб.части не формируется):
		ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров,
			Ошибки, Ложь, ИмяЭлементаВладельца);
		
		Если ДопФайлСформирован Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла",     СтруктураПараметров.ИдентификаторДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ДвоичныеДанныеДопФайла",     СтруктураПараметров.ДвоичныеДанныеДопФайла);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, ДокументXDTO, Ошибки)
	
	ИмяЭлементаВладельца = "Шапка";
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ДокументXDTO.Ид);
	
	ДопДанныеНеПодписанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть",Истина);
	
	Если Не ДопДанныеНеПодписанные = Неопределено Тогда
		
		СтруктураДопДанных = Новый Соответствие;
		Для Каждого СтрокаДерева Из ДопДанныеНеПодписанные.Строки Цикл
			ИмяРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ДопДанные.НеПодписанные.НомерСтроки.Идентификатор");
			ЗначениеРеквизита = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ДопДанные.НеПодписанные.НомерСтроки.Значение");
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров,
			Ошибки, Ложь, ИмяЭлементаВладельца);
		
		Если ДопФайлСформирован Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла",     СтруктураПараметров.ИдентификаторДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ДвоичныеДанныеДопФайла",     СтруктураПараметров.ДвоичныеДанныеДопФайла);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
//
// Параметры:
//  СтруктураПараметров - Структура - параметры добавления дополнительных данных.
//  СтруктураДанных - Структура - параметры добавляемых данных.
//  ИмяЭлементаВладельца - Строка - название реквизита.
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположенной в первой строке таблицы-владельца. (подробнее см. схему XDTO "АктТитулИсполнителя",
//    список "ОписьРабот", вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено)
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					
					
					
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ,
					НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый ;
					
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				ЮридическийДо = ЮридическиЗначимый;
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
					
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый,
						ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
					
				КонецЦикла;
				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗначения = НоваяСтрока.Строки.Добавить();
						СтрокаЗначения.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗначения.ТЧ = ЭлементТЧ;
						СтрокаЗначения.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗначения.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗначения, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗначения.ЗначениеРеквизита = XMLСтрока(Значение);
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита      = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = XMLСтрока(Элемент.Значение);
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый)
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция ВеткаТаблицыВДереве(СтрокаДерева, ИмяРеквизита)
	
	НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита,"ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока;
	КонецЕсли;

КонецФункции

Функция ПустаяТаблицаДерева(ТаблицаТипыЦен)
	
	ТаблицаПустая = Ложь;
	
	Если ТаблицаТипыЦен = Неопределено Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	Если ТаблицаТипыЦен.Строки.Количество() = 0 Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	ЗначениеНомераСтройки = ТаблицаТипыЦен.Строки[0].Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеНомераСтройки) Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	Возврат ТаблицаПустая;
	
КонецФункции

Процедура ЗаполнитьТипЦены(СтрокаДерева, ТипЦеныXDTO)
	
	ТипЦены = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ТипЦены");
	ИдТипаЦены = Строка(ТипЦены.УникальныйИдентификатор());
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Ид", ИдТипаЦены);
	
	Наименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.Наименование");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Наименование", Наименование);
	
	Валюта = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.Валюта");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Валюта", Валюта);
	
	Налог = ВеткаТаблицыВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ВключаетНДС");
	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИменСхемы = ПространствоИменCML208();
	
	
	НалогТипаЦены =  ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены.Налог", ПространствоИменСхемы);
	
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогТипаЦены, "Наименование", "НДС");
	
	УчтеноВСумме = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ВключаетНДС");
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогТипаЦены, "УчтеноВСумме", УчтеноВСумме);
	
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(НалогТипаЦены, "Акциз", Ложь);
	
	ТипЦеныXDTO.Налог.Добавить(НалогТипаЦены);
	
КонецПроцедуры

Процедура ЗаполнитьБанковскийСчет(Продавец, ДеревоДанных)
	
	НомерСчета = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		
		ПространствоИменСхемы = ПространствоИменCML208();
		
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		
		// заполняем расчетный счет
		РасчетныйСчет.НомерСчета = НомерСчета;
		
		// заполняем банк
		Банк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
			
		БикБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
		БанкЗаполнен = Ложь;
		Если ЗначениеЗаполнено(БикБанка) Тогда
			БанкЗаполнен = Истина;
			Банк.БИК = БикБанка;
		КонецЕсли;
		
		СчетКорреспондентский = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
		Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
			Банк.СчетКорреспондентский = СчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Банк.Наименование = НаименованиеБанка;
		КонецЕсли;
		
		// заполняем банк корреспондент
		
		БикКорБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
		
		БанкКорр = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		БанкКоррЗаполнен = Ложь;
		Если ЗначениеЗаполнено(БикКорБанка) Тогда
			БанкКоррЗаполнен = Истина;
			БанкКорр.БИК = БикКорБанка;
		КонецЕсли;
		
		КорСчетКорреспондентский = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
		Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
			БанкКорр.СчетКорреспондентский = КорСчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеКорБанка = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
		Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
			БанкКорр.Наименование =  НаименованиеКорБанка;
		КонецЕсли;
		
		Если БанкЗаполнен Тогда
			РасчетныйСчет.Банк = Банк;
		КонецЕсли;
		
		Если БанкКоррЗаполнен Тогда
			РасчетныйСчет.БанкКорреспондент = БанкКорр;
		КонецЕсли;
		
		Продавец.РасчетныйСчет = РасчетныйСчет;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТабЧастиТоварыДокументаCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы)
	
	ДополнительныеДанные = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеДанные", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЦенаПродажи") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЦенаПродажи");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "ЦенаПродажи";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаПродажи") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаПродажи");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "СуммаПродажи";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "Цена";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "Сумма";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаВознаграждения") Тогда
		Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаВознаграждения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "СуммаВознаграждения";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеДанные.ЗначениеРеквизита.Количество() > 0 Тогда
		Товар.ДополнительныеДанные = ДополнительныеДанные;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеКонтрагентаCML(Элемент, ЭД, ДанныеРазбора, НовыйЭД, Ошибка, Роль = "", ДопПараметры = Неопределено)
	Перем МассивИдКонтрагентов;
	
	Если Элемент = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	РасчетныйСчетВДопДанных = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("РасчетныйСчет") Тогда
			РасчетныйСчетВДопДанных = Истина;
		КонецЕсли;
		ДопПараметры.Свойство("МассивИдКонтрагентов", МассивИдКонтрагентов);
	КонецЕсли;
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если Роль = "Поставщик"
		ИЛИ (Роль = "Лицензиар" ИЛИ Роль = "Комиссионер") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ (Роль = "Лицензиат" ИЛИ Роль = "Комитент") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий
		ИЛИ Роль = "Продавец"
		ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	ИначеЕсли Роль = "Покупатель"
		ИЛИ (Роль = "Лицензиат" ИЛИ Роль = "Комитент") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий
		ИЛИ (Роль = "Лицензиар" ИЛИ Роль = "Комиссионер") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ВидДопАналитики = "Партнеры";
		
	ИначеЕсли Роль = "Плательщик" Или Роль = "Получатель" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = Роль;
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	ИначеЕсли Роль = "ПокупательКомиссионногоТовара" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Покупатель";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	КонецЕсли;
	
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ЗнДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
			// При комиссионной торговле в ЭД могут присутствовать несколько контрагентов,
			// у некоторых из них могут совпадать идентификаторы (Комитент/Комиссионер и Покупатель),
			// в этом случае надо в дерево разбора добавить только данные Комитента/Комиссионера.
			Если ВидКонтрагента = "Контрагенты"
				И ТипЗнч(МассивИдКонтрагентов) = Тип("Массив") Тогда
				Если МассивИдКонтрагентов.Найти(ИдКонтрагента) = Неопределено Тогда
					МассивИдКонтрагентов.Добавить(ИдКонтрагента);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ОфициальноеНаименование")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование") Тогда
			
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ЗнДанных);
			ЮрФизЛицо = ?(ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование"), "ФизЛицо", "ЮрЛицо");
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ИнтеграцияЭДО.НайтиПеречисление("ЮрФизЛицо", ЮрФизЛицо));
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Адрес") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЮридическийАдрес") Тогда
			
			Если Роль = "Плательщик" ИЛИ Роль = "Поставщик" Тогда
				ПрефиксАдреса = "ЮридическийАдрес";
			Иначе
				ПрефиксАдреса = ?(ВРег(ТекСвойство.Имя) = ВРег("Адрес"), "ФактическийАдрес", "ЮридическийАдрес");
			КонецЕсли;
			
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ВРег(Свойство.Имя) = ВРег("Представление") Тогда
						РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "_Представление", Реквизит);
					ИначеЕсли ВРег(Свойство.Имя) = ВРег("АдресноеПоле") Тогда
						СтруктураАдреса = Новый Структура;
						// Если реквизит не является списком (например, если один элемент, преобразование в массив).
						Если ТипЗнч(Реквизит) = Тип("ОбъектXDTO") Тогда
							Реквизит = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реквизит);
						КонецЕсли;
						Для Каждого ЭлементАдреса Из Реквизит Цикл
							НормТип = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементАдреса, "Тип");
							Если НормТип = НСтр("ru = 'Почтовый индекс'") Тогда
								НормТип = "Индекс";
							ИначеЕсли НормТип = "Регион" Тогда
								НормТип = "КодРегион";
							ИначеЕсли НормТип = НСтр("ru = 'Населенный пункт'") Тогда
								НормТип = "НаселПункт";
							ИначеЕсли НормТип = "Квартира" Тогда
								НормТип = "Кварт";
							КонецЕсли;
							СтруктураАдреса.Вставить(НормТип, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементАдреса, "Значение"));
						КонецЦикла;
						Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
							РеквизитыКонтрагента.Вставить("АдресСтруктурой", СтруктураАдреса);
						КонецЕсли;
					Иначе
						РеквизитыКонтрагента.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Руководитель") Тогда
			
			СтРеквизитов = Новый Структура;
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ФорматыЭДО.ЭтоПростойТипЭлементаXDTO(Реквизит) Тогда
						СтРеквизитов.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить("Руководитель", СтРеквизитов);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Контакты") Тогда
			ТаблицаКонтактов = Новый ТаблицаЗначений();
			ТаблицаКонтактов.Колонки.Добавить("Вид");
			ТаблицаКонтактов.Колонки.Добавить("Представление");
			ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
			
			Контакты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗнДанных, "Контакт",,, Истина);
			Если Контакты <> Неопределено Тогда
				Для Каждого Контакт Из Контакты Цикл
					Вид = Неопределено;
					Тип = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Контакт, "Тип");
					Если Тип = НСтр("ru = 'Почта'") Тогда
						Вид = ЭлектронноеВзаимодействие.НайтиСсылку("ВидыКонтактнойИнформации","EmailКонтрагента");
					ИначеЕсли Тип = НСтр("ru = 'Телефон рабочий'") Тогда
						Вид = ЭлектронноеВзаимодействие.НайтиСсылку("ВидыКонтактнойИнформации","ТелефонКонтрагента");
					ИначеЕсли Тип = НСтр("ru = 'Факс'") Тогда
						Вид = ЭлектронноеВзаимодействие.НайтиСсылку("ВидыКонтактнойИнформации","ФаксКонтрагента");
					КонецЕсли;
					Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
						НовКонт = ТаблицаКонтактов.Добавить();
						НовКонт.Вид = Вид;
						НовКонт.Представление = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Контакт, "Значение");
						НовКонт.ЗначенияПолей = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Контакт, "Комментарий");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);

		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	
	СтруктураПоиска = Новый Структура("ИНН,КПП");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, РеквизитыКонтрагента);
	Контрагент = ЭлектронноеВзаимодействие.НайтиСсылку(ВидКонтрагента, ИдКонтрагента, СтруктураПоиска);
	
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДанныеРазбора, Ошибка);
	Если Роль <> "ПокупательКомиссионногоТовара" Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныйСчет") <> Неопределено
			И ТипЗнч(Элемент.РасчетныйСчет) = Тип("ОбъектXDTO") Тогда
			
			ВладелецСчета = ?(НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий, "Продавец", "Покупатель");
			
			Если НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
				Если ВРег(Роль) = ВРег(ВладелецСчета) И Не РасчетныйСчетВДопДанных Тогда
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, Элемент.РасчетныйСчет, ДанныеРазбора,
						"БанковскиеСчетаКонтрагентов", Роль, Контрагент, Ошибка);
				КонецЕсли;
			Иначе
				
				ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, Элемент.РасчетныйСчет, ДанныеРазбора,
					ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено
			И ТипЗнч(Элемент.РасчетныеСчета) = Тип("ОбъектXDTO") Тогда
			
			Если НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.РеквизитыОрганизации Тогда
				
				// Эта процедура считывает расчетные счета контрагента и добавляет их как строки табличной части документа.
				// Используется при обмене реквизитами организации.
				ПрочитатьДанныеПоРасчетнымСчетамКонтрагентаCML(НовыйЭД, Элемент.РасчетныеСчета, ДанныеРазбора,
					ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			Иначе
				СписокРС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "РасчетныеСчета.РасчетныйСчет",,, Истина);
				Для Каждого РасчетныйСчет Из СписокРС Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НайденнаяСтрока, РасчетныйСчет, ДанныеРазбора,
						ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// При чтении документа СчетНаОплату CML в ДопПараметрах передается структура с реквизитами РасчетногоСчета,
	// который находиться в шапке макета "СчетНаОплату" обработки "ОбменСКонтрагентами".
	Если РасчетныйСчетВДопДанных Тогда
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, ДопПараметры.РасчетныйСчет, ДанныеРазбора,
										 ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		
		Если ИнтеграцияЭДО.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронноеВзаимодействие.НайтиСсылку(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если Не ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				ЗнДопАналитики = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
			КонецЕсли;

			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДанныеРазбора, Ошибка);
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьИДКонтрагента(Знач СтрокаИД)
	
	ПозицияРазделителя1 = СтрНайти(СтрокаИД, "#");
	СтруктураПоиска = Новый Структура;
	ПозицияРазделителя1 = СтрНайти(СтрокаИД, "_");
	Если ПозицияРазделителя1 > 0 Тогда
		ИНН = Лев(СтрокаИД, ПозицияРазделителя1 - 1);
		КПП = Сред(СтрокаИД, ПозицияРазделителя1 + 1, СтрДлина(СтрокаИД) - ПозицияРазделителя1);
	ИначеЕсли СтрДлина(СтрокаИД) > 0 Тогда
		ИНН = СокрЛП(СтрокаИД);
		КПП = "";
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ИНН", ИНН);
	СтруктураПоиска.Вставить("КПП", КПП);
	
	Возврат СтруктураПоиска;
	
КонецФункции


Процедура ПрочитатьДанныеПоРасчетномуСчету(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДанныеРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Банк.БИК"));
		РеквизитыБанка.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Банк.Наименование"));
		РеквизитыБанка.Вставить("КоррСчет",     РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Банк.СчетКорреспондентский"));
		
	Иначе
		
		РеквизитыБанка = Новый Структура;
		
		РеквизитыБанка.Вставить("Код",
			?(РасчетныйСчетXDTO.Свойство("БИК"), РасчетныйСчетXDTO.БИК, ""));
			
		РеквизитыБанка.Вставить("Наименование",
			?(РасчетныйСчетXDTO.Свойство("НаименованиеБанка"), РасчетныйСчетXDTO.НаименованиеБанка, ""));
			
		РеквизитыБанка.Вставить("КоррСчет",
			?(РасчетныйСчетXDTO.Свойство("СчетКорреспондентский"), РасчетныйСчетXDTO.СчетКорреспондентский, ""));
		
	КонецЕсли;
	
	БанкСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	// Создаем объект банка в дереве разбора.
	ТипБанкиВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
		БанкСсылка, РеквизитыБанка, ДанныеРазбора, Ошибка);
	
	// Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
			
			ЕстьБанкКорреспондент = Истина;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",          РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "БанкКорреспондент.БИК",, "Строка"));
			РеквизитыБанкаКорреспондента.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "БанкКорреспондент.Наименование",, "Строка"));
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "БанкКорреспондент.СчетКорреспондентский",, "Строка"));
			
		КонецЕсли;
	ИначеЕсли РасчетныйСчетXDTO.Свойство("БИККорр") И ЗначениеЗаполнено(РасчетныйСчетXDTO.БИККорр) Тогда
		
		ЕстьБанкКорреспондент = Истина;
		
		РеквизитыБанкаКорреспондента = Новый Структура;
		РеквизитыБанкаКорреспондента.Вставить("Код",          ?(РасчетныйСчетXDTO.Свойство("БИККорр"),          РасчетныйСчетXDTO.БИККорр,          ""));
		РеквизитыБанкаКорреспондента.Вставить("Наименование", ?(РасчетныйСчетXDTO.Свойство("НаименованиеКорр"), РасчетныйСчетXDTO.НаименованиеКорр, ""));
		РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     ?(РасчетныйСчетXDTO.Свойство("СчетКорр"),         РасчетныйСчетXDTO.СчетКорр,         ""));
		
	КонецЕсли;
	
	Если ЕстьБанкКорреспондент Тогда
		
		БанкКорреспондентСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
			"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДанныеРазбора,
			Ошибка);
		
	КонецЕсли;
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета",
		?(ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO"),
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "НомерСчета"),
			РасчетныйСчетXDTO.НомерСчета));
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		РеквизитыБанковскогоСчета.Вставить("Комментарий", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РасчетныйСчетXDTO, "Комментарий",, "Строка"));
	ИначеЕсли ТипЗнч(РасчетныйСчетXDTO) = Тип("Структура") И РасчетныйСчетXDTO.Свойство("Комментарий") Тогда
		РеквизитыБанковскогоСчета.Вставить("Комментарий", РасчетныйСчетXDTO.Комментарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействие.НайтиСсылку(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора.
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета,
		НСтр("ru = 'Номер счета:'") + " " + РеквизитыБанковскогоСчета.НомерСчета,
		БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДанныеРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ЕстьБанкКорреспондент Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
	КонецЕсли;
	
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ПрочитатьДанныеПоРасчетнымСчетамКонтрагентаCML(
					НовыйЭД,
					РасчетныеСчетаXDTO,
					ДанныеРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	НаборДанных = РасчетныеСчетаXDTO.РасчетныйСчет;
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	Для Каждого РасчетныйСчетXDTO Из НаборДанных Цикл
		
		СписокТЧ = Новый СписокЗначений;
		
		БанкXDTO = РасчетныйСчетXDTO.Банк;
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
		РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
		РеквизитыБанка.Вставить("SWIFT",        БанкXDTO.SWIFT);

		БанкСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки", РеквизитыБанка.Код, РеквизитыБанка);
		
		СписокТЧ.Добавить(БанкXDTO.БИК,						"БанкБИК");
		СписокТЧ.Добавить(БанкXDTO.Наименование,			"БанкНаименование");
		СписокТЧ.Добавить(БанкXDTO.СчетКорреспондентский,	"БанкСчетКорр");
		СписокТЧ.Добавить(БанкXDTO.SWIFT,					"БанкSWIFT");
		
		// Создаем объект банка в дереве разбора.
		ТипБанкиВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанка = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
																		БанкСсылка, РеквизитыБанка, ДанныеРазбора, Ошибка);
		
		// Обработка банка корреспондента
		ЕстьБанкКорреспондент = Ложь;
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
			
			ЕстьБанкКорреспондент = Истина;
			БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",			БанкКорреспондентXDTO.БИК);
			РеквизитыБанкаКорреспондента.Вставить("Наименование",	БанкКорреспондентXDTO.Наименование);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",		БанкКорреспондентXDTO.СчетКорреспондентский);
			РеквизитыБанкаКорреспондента.Вставить("SWIFT",			БанкКорреспондентXDTO.SWIFT);
			
			СписокТЧ.Добавить(БанкКорреспондентXDTO.БИК,					"БанкКоррБИК");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.Наименование,			"БанкКоррНаименование");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.СчетКорреспондентский,	"БанкКоррСчетКорр");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.SWIFT,					"БанкКоррSWIFT");
			
			БанкКорреспондентСсылка = ЭлектронноеВзаимодействие.НайтиСсылку("Банки",
				РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
			
			// Создаем объект банка в дереве разбора
			ТипБанкиКоррВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
			
			СтрокаБанкаКорреспондента = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
				"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДанныеРазбора,
				Ошибка);
			
		КонецЕсли;	
		
		// Обработка самого счета	
		РеквизитыБанковскогоСчета = Новый Структура;
		РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
		
		СписокТЧ.Добавить(РасчетныйСчетXDTO.НомерСчета,		"НомерСчета");
		СписокТЧ.Добавить(РасчетныйСчетXDTO.Комментарий,	"Комментарий");
		
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
		КонецЕсли;
		
		БанковскийСчетСсылка = ЭлектронноеВзаимодействие.НайтиСсылку(ВидБанковскогоСчета,
			РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
		
		// Создаем объект расчетного счета в дереве разбора.
		НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
		
		СтрокаСчета = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве,
					РеквизитыБанковскогоСчета.НомерСчета, НСтр("ru = 'Номер счета:'") + " " + РеквизитыБанковскогоСчета.НомерСчета,
					БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДанныеРазбора, Ошибка);
		
		// Заполняем реквизиты банковского счета
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
		Если ЕстьБанкКорреспондент Тогда
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
		КонецЕсли;	
		
		Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
			Если Роль = "Грузоотправитель" Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
			ИначеЕсли Роль = "Грузополучатель" Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
			Иначе
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
			КонецЕсли	
		ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
			Если Роль = "Грузоотправитель" Тогда
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
			Иначе	
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;	
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧРасчетныйСчет", СписокТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет чтение универсальной структуры данных схемы 2 (разработанной
// для передачи произвольных данных в шапке и в табличных частях: список из набора пар:
// наименование реквизита и список значений реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - СписокXDTO, Массив - список реквизитов и значений.
//    *Элементы массива - ОбъектXDTO - единичный элемент списка реквизитов и значений.
//  Приемник - строка дерева данных, список значений - строка дерева, в которую помещаются извлеченные из xml-файла данные,
//    либо список значений (при разборе таблицы товаров).
//  Ошибка - Булево - флаг ошибки.
//
Процедура ПрочитатьСписокЗначенийРеквизитовCML(ЗначенияРеквизитов, Приемник, Ошибка, ДопРеквизиты = Неопределено)
	
	Если ЗначенияРеквизитов = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Структура;
	ОбычныеРеквизиты        = Новый Структура;

	Если ТипЗнч(ЗначенияРеквизитов) = Тип("ОбъектXDTO") Тогда
		МассивЗначенийРеквизитов = Новый Массив;
		МассивЗначенийРеквизитов.Добавить(ЗначенияРеквизитов);
	Иначе
		МассивЗначенийРеквизитов = ЗначенияРеквизитов;
	КонецЕсли;
	
	Для Каждого Реквизит Из МассивЗначенийРеквизитов Цикл
		
		НаименованиеРеквизита = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Наименование");
		ЗначениеРеквизита     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Значение");
		
		Если ЗначениеРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизитаКоллекция = Новый Массив;
		ЗначениеРеквизитаКоллекция.Добавить(ЗначениеРеквизита);
		
		Если ЭтоДопРеквизит(НаименованиеРеквизита) Тогда
			ЗапомнитьРеквизитыДерева(ДополнительныеРеквизиты,
				НаименованиеРеквизита, ЗначениеРеквизитаКоллекция, Приемник, ДопРеквизиты);
		Иначе
			ЗапомнитьРеквизитыДерева(ОбычныеРеквизиты,
				НаименованиеРеквизита, ЗначениеРеквизитаКоллекция, Приемник, ДопРеквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеРеквизиты.Количество() Тогда
		ДобавитьРеквизитВПриемник("ДопДанныеПодписанные", ДополнительныеРеквизиты, Приемник)
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОбычныеРеквизиты Цикл
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, Приемник);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСтрокуТоваровCML(ТоварXDTO, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДанныеРазбора, Ошибка)
	
	Если ТоварXDTO = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДеревоРазбора = ДанныеРазбора.ДеревоРазбора;
	
	НаимТовара = "";
	ИдТовара   = "";
	
	ЭлементСумма     = Неопределено;
	СуммаНДС         = 0;
	ЕстьСуммаПродажи = Ложь;
	
	Организация = ПоляПоискаТовара.Организация;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация", Организация);

	НомерСтроки = ПоляПоискаТовара.НомерСтроки;
	ПрочитатьДопДанныеСтрокиТЧ(ТоварXDTO, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
	
	// Номенклатура
	Для Каждого ТекСвойство Из ТоварXDTO.Свойства() Цикл
		
		ЗначениеСвойства = ТоварXDTO[ТекСвойство.Имя];
		
		ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
		Если ТипЗначенияСвойства = Тип("ЗначениеXDTO") Тогда
		ИначеЕсли ТипЗначенияСвойства = Тип("ОбъектXDTO") Тогда
			Если ЗначениеСвойства.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		//// Разберем свойства Товара
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			ИдТовара = ЗначениеСвойства;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			Артикул = ЗначениеСвойства;
			СписокТЧ.Добавить(Артикул, "Артикул");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Штрихкод") Тогда
			Штрихкод = ЗначениеСвойства;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			НаимТовара = ЗначениеСвойства;
			СписокТЧ.Добавить(НаимТовара, "Наименование");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			
			СвойстваЕдиницы = Новый Структура;
			СвойстваЕдиницы.Вставить("Код", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗначениеСвойства, "Код"));
			
			Если ЗначениеСвойства.Свойства().Получить("Наименование") <> Неопределено Тогда
				СвойстваЕдиницы.Вставить("Наименование", ЗначениеСвойства.Наименование);
			КонецЕсли;
			
			Если ЗначениеСвойства.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
				СвойстваЕдиницы.Вставить("Наименование", ЗначениеСвойства.НаименованиеКраткое);
			КонецЕсли;
			
			Если ЗначениеСвойства.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
				СвойстваЕдиницы.Вставить("НаименованиеПолное", ЗначениеСвойства.НаименованиеПолное);
			КонецЕсли;
			
			Если ЗначениеСвойства.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
				СвойстваЕдиницы.Вставить("МеждународноеСокращение", ЗначениеСвойства.МеждународноеСокращение);
			КонецЕсли;
			
			ОписаниеОбъекта = Неопределено;
			Если НЕ (СвойстваЕдиницы.Свойство("Наименование", ОписаниеОбъекта)
					ИЛИ СвойстваЕдиницы.Свойство("НаименованиеПолное", ОписаниеОбъекта))Тогда
				ОписаниеОбъекта = "";
			КонецЕсли;
			
			ЕдиницаИзмерения = ЭлектронноеВзаимодействие.НайтиСсылку(
				"ЕдиницыИзмерения", СвойстваЕдиницы.Код, СвойстваЕдиницы);
			
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			
			НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, СвойстваЕдиницы.Код, ОписаниеОбъекта,
				ЕдиницаИзмерения, СвойстваЕдиницы, ДанныеРазбора, Ошибка);
			
			ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
			
			СписокТЧ.Добавить(СвойстваЕдиницы, "СвойстваЕдиницы");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			
			СвойстваЕдиницы = Новый Структура;
			СвойстваЕдиницы.Вставить("Код", Строка(ЗначениеСвойства));
			
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(Строка(ЗначениеСвойства), "ИД");
			Если НайденнаяСтрока <> Неопределено
				И ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
				
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
			Иначе
				ЕдиницаИзмерения = ЭлектронноеВзаимодействие.НайтиСсылку("ЕдиницыИзмерения", Строка(ЗначениеСвойства),
					СвойстваЕдиницы);
				НаименованиеЕдиницы = Неопределено;
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					НаименованиеЕдиницы = ЕдиницаИзмерения.Наименование;
					СвойстваЕдиницы.Вставить("Наименование", НаименованиеЕдиницы);
				КонецЕсли;
				
				НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗначениеСвойства), НаименованиеЕдиницы,
					ЕдиницаИзмерения, СвойстваЕдиницы, ДанныеРазбора, Ошибка);
				
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			
			Налоги = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗначениеСвойства, "Налог",,, Истина);
			Если Налоги <> Неопределено Тогда
				
				Для Каждого Налог Из Налоги Цикл
					
					СписокТЧ.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Налог, "Ставка"),"СтавкаНДС");
					
					СуммаНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Налог, "Сумма",, "Число");
					СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
					
					УчтеноВСумме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Налог, "УчтеноВСумме", ,"Булево");
					ЦенаВключаетНДС = УчтеноВСумме;
					СписокТЧ.Добавить(ЦенаВключаетНДС, "ЦенаВключаетНДС");
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
			
			Скидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗначениеСвойства, "Скидка",,, Истина);
			Если Скидки <> Неопределено Тогда
				Для Каждого Скидка Из Скидки Цикл
					
					НаименованиеСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Скидка, "Наименование");
					СписокТЧ.Добавить(НаименованиеСкидки, "НаименованиеСкидки");
					СписокТЧ.Добавить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Скидка, "Сумма",, "Число"),"СуммаСкидки");
					
					ПроцентСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Скидка, "Процент", , "Число");
					СписокТЧ.Добавить(ПроцентСкидки, "ПроцентСкидки");
					
					СкидкаУчтеноВСумме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Скидка, "УчтеноВСумме", , "Булево");
					СписокТЧ.Добавить(СкидкаУчтеноВСумме, "СкидкаУчтеноВСумме");
					
					КомментарийКСкидке = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Скидка, "Комментарий");
					СписокТЧ.Добавить(КомментарийКСкидке, "КомментарийКСкидке");
					
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
			
			// Запомним кол-во упаковок, в которых отгружали
			ЗначениеСвойства = Число(ЗначениеСвойства);
			СписокТЧ.Добавить(ЗначениеСвойства, "КоличествоУпаковок");
			
			// Пересчитаем с учетом коэффициента,
			// если есть свойство ЕдиницаИзмерения, получим значение.
			Коэф = "";
			Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварXDTO, "Единица") <> Неопределено Тогда
				Коэф = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварXDTO, "Коэффициент",, "Число");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Коэф) Тогда
				Коэф = 1;
			КонецЕсли;
			
			СписокТЧ.Добавить(Коэф, "Коэффициент");
			СписокТЧ.Добавить(ЗначениеСвойства * Коэф, "Количество");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			
			СтруктураДопРеквизитов = Новый Структура;
			
			ЗначениеСвойства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварXDTO, "ДополнительныеРеквизиты",,, Истина);
			Если ЗначениеСвойства <> Неопределено Тогда
				Для Каждого ЭлементДанных Из ЗначениеСвойства Цикл
					МассивЗначений = Новый Массив;
					Значения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементДанных, "Значение");
					Для каждого ЭлементЗначения Из Значения Цикл
						МассивЗначений.Добавить(ЭлементЗначения)
					КонецЦикла;
					СтруктураДопРеквизитов.Вставить(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементДанных, "Наименование"), МассивЗначений);
				КонецЦикла;
			КонецЕсли;
			
			ПоляПоискаТовара.Вставить("ДопРеквизиты", СтруктураДопРеквизитов);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(Число(ЗначениеСвойства), "Цена");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			ЭлементСумма = СписокТЧ.Добавить(Число(ЗначениеСвойства), "Сумма");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			
			ЗначениеСвойства = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ТоварXDTO, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина);
			ДопРеквизиты = Новый Структура;
			Если ЗначениеЗаполнено(Организация) Тогда
				ДопРеквизиты.Вставить("Организация", Организация);
			КонецЕсли;
			
			ПрочитатьСписокЗначенийРеквизитовCML(ЗначениеСвойства, СписокТЧ, Ошибка, ДопРеквизиты);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеДанные") Тогда
			
			ЕстьДопРеквизиты       = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			
			СписокДопДанные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗначениеСвойства, "ЗначениеРеквизита",,, Истина);
			Если СписокДопДанные <> Неопределено Тогда
				Для Каждого ЭлементДанных Из СписокДопДанные Цикл
					
					ЭлементНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементДанных, "Наименование");
					ЭлементЗначение     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементДанных, "Значение");
					Если ЗначениеЗаполнено(ЭлементНаименование) Тогда
						Если ЭлементНаименование = "ЦенаПродажи"
							ИЛИ ЭлементНаименование = "СуммаПродажи"
							ИЛИ ЭлементНаименование = "СуммаВознаграждения" Тогда
							
							СписокТЧ.Добавить(Число(ЭлементЗначение), ЭлементНаименование);
							
							Если ЭлементНаименование = "СуммаПродажи" Тогда
								ЕстьСуммаПродажи = Истина;
							КонецЕсли;
						Иначе
							СписокТЧ.Добавить(ЭлементЗначение, ЭлементНаименование);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов") Тогда
			
			СписокЗначенийДопРеквизитов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЗначениеСвойства, "ЗначениеРеквизита",,, Истина);
			
			СведенияОПрослеживаемости = Неопределено;
			
			Для Каждого ЭлементДанных Из СписокЗначенийДопРеквизитов Цикл
				
				ЭлементНаименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементДанных, "Наименование");
				ЭлементЗначение     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭлементДанных, "Значение");
				
				Если ЭлементНаименование = "ИдПокупателя" И ЗначениеЗаполнено(ЭлементЗначение) Тогда
					
					СтрокиКонтрагентов = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
					СтрокаПокупателя   = СтрокиКонтрагентов.Строки.Найти(ЭлементЗначение, "ИД", Истина);
					Если СтрокаПокупателя <> Неопределено Тогда
						СписокТЧ.Добавить(СтрокаПокупателя.ИндексСтроки, "Покупатель");
					Иначе
						СписокТЧ.Добавить(Неопределено, "Покупатель");
					КонецЕсли;
					СписокТЧ.Добавить(ЭлементЗначение, "ИдПокупателя");
					
				ИначеЕсли ЭлементНаименование = "СведенияОПрослеживаемости" Тогда
					
					Если СведенияОПрослеживаемости = Неопределено Тогда
						СведенияОПрослеживаемости = Новый ТаблицаЗначений;
						СведенияОПрослеживаемости.Колонки.Добавить("НомерТовара",
							Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(29)));
						СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияКод",
							Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
						СведенияОПрослеживаемости.Колонки.Добавить("ЕдиницаИзмеренияНаименование",
							Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
						СведенияОПрослеживаемости.Колонки.Добавить("Количество",
							Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
						СведенияОПрослеживаемости.Колонки.Добавить("КоличествоУчетное",
							Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
					КонецЕсли;
					
					ДеревоДанных = ДеревоДопДанных();
					ФорматыЭДО.ПрочитатьИнфПол(ЭлементЗначение, ДеревоДанных, "СведенияОПрослеживаемости");
					Отбор = Новый Структура("ЮридическиЗначимый", Истина);
					КоллекцияРеквизитов = ДеревоДанных.Строки.НайтиСтроки(Отбор, Истина);
					Если Не ЗначениеЗаполнено(КоллекцияРеквизитов) Тогда
						Продолжить;
					КонецЕсли;
					
					Сведения = СведенияОПрослеживаемости.Добавить();
					
					Для Каждого ДанныеРеквизита Из КоллекцияРеквизитов Цикл
						
						Если ДанныеРеквизита.ИмяРеквизита = "НомерТовара" Тогда
							Сведения.НомерТовара = ДанныеРеквизита.ЗначениеРеквизита;
						ИначеЕсли ДанныеРеквизита.ИмяРеквизита = "ЕдиницаИзмеренияКод" Тогда 
							Сведения.ЕдиницаИзмеренияКод = ДанныеРеквизита.ЗначениеРеквизита;
						ИначеЕсли ДанныеРеквизита.ИмяРеквизита = "ЕдиницаИзмеренияНаименование" Тогда 
							Сведения.ЕдиницаИзмеренияНаименование = ДанныеРеквизита.ЗначениеРеквизита;
						ИначеЕсли ДанныеРеквизита.ИмяРеквизита = "Количество" Тогда 
							Сведения.Количество = ДанныеРеквизита.ЗначениеРеквизита;
						ИначеЕсли ДанныеРеквизита.ИмяРеквизита = "КоличествоУчетное" Тогда 
							Сведения.КоличествоУчетное = ДанныеРеквизита.ЗначениеРеквизита;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					СписокТЧ.Добавить(ЭлементЗначение, ЭлементНаименование);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СведенияОПрослеживаемости) Тогда
				СписокТЧ.Добавить(СведенияОПрослеживаемости, "СведенияОПрослеживаемости");
			КонецЕсли;
			
		Иначе
			СписокТЧ.Добавить(ЗначениеСвойства, ТекСвойство.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// В CML Цена и Сумма необязательны, а в БЭД - обязательны, поэтому добавляем их, если они не были указаны.
	Если ТоварXDTO.Свойства().Получить("ЦенаЗаЕдиницу") = Неопределено Тогда
		СписокТЧ.Добавить(0, "Цена");
	КонецЕсли;
	Если ТоварXDTO.Свойства().Получить("Сумма") = Неопределено Тогда
		СписокТЧ.Добавить(0, "Сумма");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСумма) = Тип("ЭлементСпискаЗначений") Тогда
		
		Если Не ЕстьСуммаПродажи Тогда
			Сумма = ЭлементСумма.Значение;
			Если ЦенаВключаетНДС = Неопределено Тогда
				СписокТЧ.Добавить(Сумма, "СуммаСНДС");
			ИначеЕсли ЦенаВключаетНДС Тогда
				СписокТЧ.Добавить(Сумма, "СуммаСНДС");
				ЭлементСумма.Значение = Сумма - СуммаНДС;
			ИначеЕсли Не ЦенаВключаетНДС Тогда
				СписокТЧ.Добавить(Сумма + СуммаНДС, "СуммаСНДС");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		НайтиЗначениеВСписке(ИдТовара, "Ид", СписокТЧ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		
		СопоставлениеПоУмолчанию = НовыеДанныеСопоставления();
		СопоставлениеПоУмолчанию.Наименование = НаимТовара;
		СопоставлениеПоУмолчанию.ЕдиницаИзмерения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЕдиницы, 
			"Наименование", "");
		СопоставлениеПоУмолчанию.ЕдиницаИзмеренияКод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЕдиницы, 
			"Код", "");
		СопоставлениеПоУмолчанию.Артикул = Артикул;
		СопоставлениеПоУмолчанию.ШтрихкодКомбинации = Штрихкод;
		ИдТовара = ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(СопоставлениеПоУмолчанию);
		
	КонецЕсли;
	
	ПоляПоискаТовара.Наименование = НаимТовара;
	ПоляПоискаТовара.Ид           = ИдТовара;
	ПоляПоискаТовара.Артикул      = Артикул;
	
КонецПроцедуры

Процедура ЗапомнитьРеквизитыДерева(СтруктураРеквизитов, НаименованиеРеквизита, ЗначениеРеквизита, Приемник, ДопРеквизиты)
	
	ИмяРеквизита = СтрЗаменить(НаименованиеРеквизита, "Доп_", "");
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если СтрНайти(ИмяРеквизита, "_Таблица") > 0 Тогда
		
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_Таблица", "");
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
		Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
			Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда
			// В актуальных ЭД передаются идентификаторы документов ИБ, для поиска основания:
			ЕстьИДДокументаОснования = РеквизитЗначение.Колонки.Найти("ИдентификаторДокументаОснования") <> Неопределено;
			
			РеквизитЗначение = Новый Массив;		
			
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДокументыСделки") Тогда
		
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
		
		ЦенаВключаетНДС = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
		Если ВРег(ЦенаВключаетНДС) = ВРег("false") Тогда
			РеквизитЗначение = Ложь;
		ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("true") Тогда
			РеквизитЗначение = Истина;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		
		ДатаИсправленияЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		Попытка
			РеквизитЗначение = ФорматыЭДО.ДатаИзСтроки(ДатаИсправленияЗначение);
		Исключение
			РеквизитЗначение = Формат(ДатаИсправленияЗначение, "ДФ=dd.MM.yyyy");;
		КонецПопытки;
	Иначе
		РеквизитЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, РеквизитЗначение);
	
КонецПроцедуры

Функция ТаблицаИзСтроки(Знач ЗначенияРеквизита)
	
	ПредставлениеТаблицы = ЗначенияРеквизита[0];
	
	Попытка
		ТаблицаРезультат = ЗначениеИзСтрокиВнутр(ПредставлениеТаблицы);
	Исключение
		Попытка
			ТаблицаРезультат = ТаблицаИзСтрокиСРазделителем(ПредставлениеТаблицы);
		Исключение
			Возврат Новый ТаблицаЗначений;
		КонецПопытки;
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ТаблицаИзСтрокиСРазделителем(Знач ЗначенияРеквизита)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Элемент Из ЗначенияРеквизита Цикл
		
		ПозицияНомерСтроки = СтрНайти(Элемент, "_");
		НомерСтроки = Лев(Элемент, ПозицияНомерСтроки - 1);
		ДанныеСтроки.Вставить("НомСтр", НомерСтроки);

		Элемент = СтрЗаменить(Элемент, НомерСтроки + "_", "");
		
		Пока СтрДлина(Элемент) > 0 Цикл
			
			Позиция = СтрНайти(Элемент, "#");
			
			РеквизитИЗначение = Лев(Элемент, Позиция);
			Элемент = СтрЗаменить(Элемент, РеквизитИЗначение, "");
			
			Разделитель = СтрНайти(РеквизитИЗначение, "&");
			
			НаименованиеРеквизита = Лев(РеквизитИЗначение, Разделитель - 1);
			
			ЗначениеРеквизита = СтрЗаменить(РеквизитИЗначение, НаименованиеРеквизита, "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "&", "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#", "");
			
			ДанныеСтроки.Вставить(НаименованиеРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДанныеСтроки Цикл
			Если Не ТаблицаРезультат.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ТаблицаРезультат.Колонки.Добавить(КлючЗначение.Ключ);

		КонецЦикла;		
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("НомСтр");

	Возврат ТаблицаРезультат;
	
КонецФункции


Функция ЗначениеДополнительногоРеквизита(РеквизитЗначение)
	
	МассивЗначений = Новый Массив;
	Для Каждого Значение Из РеквизитЗначение Цикл
		МассивЗначений.Добавить(Значение);
	КонецЦикла;
	ЗначениеРеквизита = ?(МассивЗначений.Количество() > 1, МассивЗначений, МассивЗначений[0]);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Процедура ДобавитьРеквизитВПриемник(НаименованиеРеквизита, ЗначениеРеквизита, Приемник)
	
	Если ТипЗнч(Приемник) = Тип("СписокЗначений") Тогда
		Приемник.Добавить(ЗначениеРеквизита, НаименованиеРеквизита);
	Иначе
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(Приемник, НаименованиеРеквизита, ЗначениеРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДокументыСделки(ДанныеРазбора, НовыйЭД, Организация, ВладелецДоговора, Ошибка)
	
	ДокументыСделки = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ДокументыСделки");
	Если ДокументыСделки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыСделки.Колонки.Найти("Идентификатор") = Неопределено
		ИЛИ ДокументыСделки.Колонки.Найти("Номер") = Неопределено
		ИЛИ ДокументыСделки.Колонки.Найти("Дата") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДокументыСделки Цикл
		
		// Если идентификатор "договор" - это договор контрагента.
		Если Не ТекСтрока.Идентификатор = "договор" Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = Новый Структура;
		РеквизитыДоговора.Вставить("НомерДоговора", ТекСтрока.Номер);
		РеквизитыДоговора.Вставить("Организация", Организация);
		РеквизитыДоговора.Вставить("Владелец", ВладелецДоговора);
		Если ЗначениеЗаполнено(ТекСтрока.Дата) Тогда
			ДатаДоговора = ФорматыЭДО.ДатаИзСтроки(ТекСтрока.Дата);
		Иначе
			ДатаДоговора = Дата(1, 1, 1);
		КонецЕсли;
		РеквизитыДоговора.Вставить("ДатаДоговора", ДатаДоговора);
		
		ДобавитьДоговорВДеревоДокумента(РеквизитыДоговора, НовыйЭД, ДанныеРазбора, Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДопДанныеСтрокиТЧ(СтрокаXDTO, ДеревоДокумента, ИмяТаблицы, НомерСтроки, СвойстваТЧ, ДопПараметры = Неопределено)
	
	ДопДанные = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	СтрокаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	
	ВсеДопДанные = Новый Массив;
	Если СтрокаXDTO.Свойства().Получить("ЗначенияРеквизитов") <> Неопределено Тогда
		Если ТипЗнч(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаXDTO, "ЗначенияРеквизитов")) = Тип("ОбъектXDTO") Тогда
			ВсеДопДанные = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаXDTO, "ЗначенияРеквизитов.ЗначениеРеквизита",,, Истина);
		КонецЕсли;
	КонецЕсли;
	ТекстДопДанных = "";
	Для каждого ТекущиеДопДанные Из ВсеДопДанные Цикл
		Если ТекущиеДопДанные.Наименование = "ДопДанныеСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьДопДанных = Новый ЗаписьXML;
		ЗаписьДопДанных.УстановитьСтроку();
		ЗаписьДопДанных.ЗаписатьНачалоЭлемента("Реквизит");
		ЗаписьДопДанных.ЗаписатьАтрибут("Имя", ТекущиеДопДанные.Наименование);
		ЗаписьДопДанных.ЗаписатьАтрибут("Значение", ТекущиеДопДанные.Значение);
		ЗаписьДопДанных.ЗаписатьКонецЭлемента();
		ТекущийЭлемент = ЗаписьДопДанных.Закрыть();
		ТекстДопДанных = ТекстДопДанных + ТекущийЭлемент;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстДопДанных) Тогда
		ПозицияКонцаДанных = СтрНайти(ДопДанные, "</Данные>");
		Если ЗначениеЗаполнено(ПозицияКонцаДанных) Тогда
			ДопДанные = Лев(ДопДанные, ПозицияКонцаДанных - 1) + ТекстДопДанных + "</Данные>";
		Иначе
			ДопДанные = "<Данные>" + ТекстДопДанных + "</Данные>";
		КонецЕсли;
	КонецЕсли;
	
	НовоеДерево = Ложь;
	Если СтрокаДопДерево = Неопределено Тогда
		ДопДерево = ДеревоДопДанных();
		НовоеДерево = Истина;
		
	Иначе
		ДопДерево = СтрокаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
		
	ФорматыЭДО.ПрочитатьИнфПол(ДопДанные, ДопДерево, ИмяТаблицы, Строка(НомерСтроки));
	
	Если НовоеДерево Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, Строка(НомерСтроки), ДопПараметры);
	
КонецПроцедуры

Процедура ПрочитатьДопДанныеШапкиДокумента(ДокументXDTO, ДеревоДокумента, Ошибка, ДопРеквизиты = Неопределено)
	
	ДеревоВШапку = Ложь;
	СтрокаДопДерева = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если Не СтрокаДопДерева = Неопределено Тогда
		ДопДерево = СтрокаДопДерева.ЗначениеРеквизита;
	Иначе
		ДопДерево = ДеревоДопДанных();
		ДеревоВШапку = Истина;
	КонецЕсли;
	
	ДопДанные = ФорматыЭДО.ЗначениеДопРеквизитаДокумента("ДопДанныеШапка", ДокументXDTO);
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		
		ФорматыЭДО.ПрочитатьИнфПол(ДопДанные, ДопДерево, "Шапка");
	КонецЕсли;
		
	ДобавитьРеквизитыДопДанныеВШапку(ДопДерево, ДеревоДокумента, Ошибка, ДопРеквизиты);
	
	Если ДеревоВШапку Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыДопДанныеВШапку(ДопДерево, ДеревоДокумента, Ошибка, ДопРеквизиты)
	
	СтрокаШапки = ДопДерево.Строки.Найти("Шапка", "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СтрокаШапки) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура;
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ДопРеквизиты) = Тип("Структура") 
		И Не ДопРеквизиты.Свойство("НаправлениеЭД") Тогда
		
		ДопРеквизиты.Вставить("НаправлениеЭД", ДеревоДокумента.НаправлениеЭД);
		
	КонецЕсли;
	
	ЧисловыеРеквизиты = Новый Массив;
	ЧисловыеРеквизиты.Добавить("СУММАБЕЗСКИДКИИТОГ");
	ЧисловыеРеквизиты.Добавить("СУММАИТОГ");
	ЧисловыеРеквизиты.Добавить("СУММАНАЛОГАИТОГ");
	ЧисловыеРеквизиты.Добавить("СУММАСКИДКИИТОГ");
	
	Для Каждого ВеткаДерева Из СтрокаШапки.Строки Цикл
		
		ИмяРеквизита = ВеткаДерева.ИмяРеквизита;
		ЗначениеРеквизита = ВеткаДерева.ЗначениеРеквизита;
		
		Если СтрНайти(ЗначениеРеквизита, "_ТЗ_") > 0 Тогда
			
			ИмяРеквизита = СтрЗаменить(ЗначениеРеквизита, "_ТЗ_", "");
			
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
			
			Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
				Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда

				РеквизитЗначение = Новый Массив;				
				
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("Список")
			И ВРег(ЗначениеРеквизита) = ВРег("ДокументыСделки") Тогда
			
			ИмяРеквизита = "ДокументыСделки";
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
		
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("Список")
			И ВРег(ЗначениеРеквизита) = ВРег("ГрафикОплаты") Тогда
			
			ИмяРеквизита = "ГрафикОплаты";
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
				
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("Список")
			И ВРег(ЗначениеРеквизита) = ВРег("Серии") Тогда
			
			ИмяРеквизита = "Серии";
			РеквизитЗначение = ТаблицаВеткиДопДанных(ВеткаДерева);
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
			
			ЦенаВключаетНДС = ЗначениеРеквизита;
			
			Если ВРег(ЦенаВключаетНДС) = ВРег("True") ИЛИ ВРег(ЦенаВключаетНДС) = ВРег("Да") Тогда
				РеквизитЗначение = Истина;
			ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("False") ИЛИ ВРег(ЦенаВключаетНДС) = ВРег("Нет") Тогда
				РеквизитЗначение = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЧисловыеРеквизиты.Найти(ВРег(ИмяРеквизита)) <> Неопределено Тогда
			
			РеквизитЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеРеквизита);
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
			
			ДатаИсправленияЗначение = ЗначениеРеквизита;
			
			Попытка
				РеквизитЗначение = ФорматыЭДО.ДатаИзСтроки(ДатаИсправленияЗначение);
			Исключение
				РеквизитЗначение = Формат(ДатаИсправленияЗначение, "ДФ=dd.MM.yyyy");
			КонецПопытки;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("СуммаДокумента")
			Или ВРег(ИмяРеквизита) = ВРег("СуммаВознаграждения") Тогда
			
			РеквизитЗначение = Число(ЗначениеРеквизита);
			
		Иначе
			РеквизитЗначение = ЗначениеРеквизита;
			
		КонецЕсли;
		
		РеквизитыШапки.Вставить(ИмяРеквизита, РеквизитЗначение);

	КонецЦикла;
	
	Для Каждого КлючЗначение Из РеквизитыШапки Цикл
		
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, ДеревоДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаВеткиДопДанных(СтрокаДерева)
	
	Результат = Новый ТаблицаЗначений;
	ДеревоЭлектронногоДокументаБЭД.СформироватьТаблицуЗначенийПоДопДанным(СтрокаДерева, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, НомерСтроки, ДопПараметры)
	
	СвойстваТаблицы = ДопДерево.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СвойстваТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтр Из СвойстваТаблицы.Строки Цикл
		
		Если ВРег(НомерСтр.ИмяРеквизита) = "НПП" Тогда
			Если Не НомерСтр.ЗначениеРеквизита = НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснованиеНайден = Ложь;
		
		Для Каждого ТекСвойство Из НомерСтр.Строки Цикл
			
			ИмяСвойства = ТекСвойство.ИмяРеквизита;
			ЗначениеСвойства = ТекСвойство.ЗначениеРеквизита;
			
			Если ВРег(ИмяСвойства) = "ВИДДОКУМЕНТАОСНОВАНИЯ"
				Или ВРег(ИмяСвойства) = "НОМЕРДОКУМЕНТАОСНОВАНИЯ"
				Или ВРег(ИмяСвойства) = "ДАТАДОКУМЕНТАОСНОВАНИЯ" Тогда
				Продолжить;
			КонецЕсли;
				
			СвойстваТЧ.Добавить(ЗначениеСвойства, ИмяСвойства);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоДопРеквизит(НаименованиеРеквизита)
	
	НомерСимвола = СтрНайти(НаименованиеРеквизита, "Доп_");
	
	Возврат НомерСимвола > 0;
	
КонецФункции

Процедура НайтиЗначениеВСписке(ЗначениеЭлемента, ИмяЭлемента, СписокЭлементов)
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		Если ВРег(ЭлементСписка.Представление) = ВРег(ИмяЭлемента) Тогда
			ЗначениеЭлемента = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыРасчетногоСчета(Знач Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	РеквизитыСчета = Новый Структура;
	
	Пока СтрДлина(Элемент) > 0 Цикл
		
		ПозицияРазделителя = СтрНайти(Элемент, "#");
		РеквизитЗначение = Лев(Элемент, ПозицияРазделителя );
		Элемент = СтрЗаменить(Элемент, РеквизитЗначение, "");
		
		Позиция = СтрНайти(РеквизитЗначение, "&");
		
		Реквизит = Лев(РеквизитЗначение, Позиция - 1);
		
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение, Реквизит, "");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"&","");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"#","");
		
		РеквизитыСчета.Вставить(Реквизит, РеквизитЗначение);
		
	КонецЦикла;
	
	Возврат РеквизитыСчета;
	
КонецФункции

Процедура ЗаполнитьСписокРеквизитов(СписокТЧ, Знач Элемент, ЭД)
	
	Пока СтрДлина(Элемент) > 0 Цикл
		
		ПозицияРазделителя = СтрНайти(Элемент, "#");
		РеквизитЗначение = Лев(Элемент, ПозицияРазделителя );
		Элемент = СтрЗаменить(Элемент, РеквизитЗначение, "");
		
		Позиция = СтрНайти(РеквизитЗначение, "&");
		
		Реквизит = Лев(РеквизитЗначение, Позиция - 1);
		
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение, Реквизит, "");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"&","");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"#","");
		
		Если ВРег(Реквизит) = ВРег("ВариантОплаты") Тогда
			РеквизитЗначение = ЗначениеВидаОплаты(РеквизитЗначение, РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "Роль"));
		КонецЕсли;
		
		СписокТЧ.Добавить(РеквизитЗначение, Реквизит);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеВидаОплаты(ВидОплаты, Роль)
	
	ВозвращаемоеЗначение = "";
	
	Если ВидОплаты = "Аванс" Тогда
		Если Роль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ИнтеграцияЭДО.НайтиПеречисление("ВариантыОплатыКлиентом",
			НСтр("ru = 'Аванс (до обеспечения)'"));
		ИначеЕсли Роль = "Покупатель"  Тогда 
			ВозвращаемоеЗначение = ИнтеграцияЭДО.НайтиПеречисление("ВариантыОплатыПоставщику",
			НСтр("ru = 'Аванс (до подтверждения)'"));
		КонецЕсли;
	ИначеЕсли ВидОплаты = "Предоплата" Тогда
		Если Роль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ИнтеграцияЭДО.НайтиПеречисление("ВариантыОплатыКлиентом",
			НСтр("ru = 'Предоплата (до отгрузки)'"));
		ИначеЕсли Роль = "Покупатель" Тогда 
			ВозвращаемоеЗначение = ИнтеграцияЭДО.НайтиПеречисление("ВариантыОплатыПоставщику",
			НСтр("ru = 'Предоплата (до поступления)'"));
		КонецЕсли;
	ИначеЕсли ВидОплаты = "Кредит" Тогда
		Если Роль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ИнтеграцияЭДО.НайтиПеречисление("ВариантыОплатыКлиентом",
			НСтр("ru = 'Кредит (после отгрузки)'"));
		ИначеЕсли Роль = "Покупатель" Тогда 
			ВозвращаемоеЗначение = ИнтеграцияЭДО.НайтиПеречисление("ВариантыОплатыПоставщику",
			НСтр("ru = 'Кредит (после поступления)'"));
		КонецЕсли;
	Иначе
		ВозвращаемоеЗначение = ВидОплаты;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭтоСоставнойИД(ПроверяемыйИД)
	
	Возврат СтрНайти(ПроверяемыйИД, "#") > 0;
	
КонецФункции

Функция РазобратьИДТовара(знач ИД)
	
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Поз = СтрНайти(ИД, "#");
	Если Поз > 0 Тогда
		
		СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);
		Если СтрДлина(ИД) > Поз Тогда
			
			Ид = Сред(ИД, Поз + 1);
			Поз = СтрНайти(ИД, "#");
			Если Поз > 0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);
			КонецЕсли;
			
			Ид = Сред(ИД, Поз + 1);
			Если СтрДлина(ИД) > Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


// Возвращает ссылка на элемент справочника.
//
// Параметры:
//  Наименование - Строка, название справочника в метаданных.
//  ИД - Уникальный идентификатор элемента.
//
// Возвращаемое значение:
//  Ссылка на элемент справочника.
//
Функция ЭлементСправочникаПоИД(Наименование, ИД)
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ИнтеграцияЭДО.ИмяПрикладногоСправочника(Наименование);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Если ЗначениеЗаполнено(ИД) И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИД) Тогда
			UID = Новый УникальныйИдентификатор(ИД);
			Результат = Справочники[ИмяПрикладногоСправочника].ПолучитьСсылку(UID);
			
			Если Не ОбщегоНазначения.СсылкаСуществует(Результат) Тогда
				Результат = Неопределено;
			КонецЕсли;
		Иначе
			Результат = ИнтеграцияЭДО.ПолучитьПустуюСсылку(Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуТабличнойЧасти(ДанныеРазбора, НовыйЭД, РеквизитыНоменклатуры, СписокТЧ, Ошибка)

	НаимТовара = РеквизитыНоменклатуры.Наименование;
	ИдТовара = РеквизитыНоменклатуры.Ид;
	Номенклатура = РеквизитыНоменклатуры.Номенклатура;
	
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДанныеРазбора.ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДанныеРазбора, Ошибка);
		
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
	
	НаУдаление = Новый Массив;
	Префикс = ФорматыЭДО.ПрефиксДополнительныхДанныхЭлектронныхДокументов();
	ДлинаПрефикса = СтрДлина(Префикс);
	Сопоставление = Новый Структура("Идентификатор,Наименование", ИдТовара, НаимТовара);
	Для Каждого Элемент Из СписокТЧ Цикл
		Если Лев(Элемент.Представление, ДлинаПрефикса) = Префикс Тогда
			НаУдаление.Добавить(Элемент);
			Ключ = Сред(Элемент.Представление, ДлинаПрефикса + 1);
			Сопоставление.Вставить(Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СопоставлениеДляДереваДокумента = ФорматыЭДО.ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Сопоставление);
	СписокТЧ.Добавить(СопоставлениеДляДереваДокумента, "Сопоставление");
	Для Каждого Элемент Из НаУдаление Цикл
		СписокТЧ.Удалить(Элемент);
	КонецЦикла;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);

КонецПроцедуры

Процедура ДобавитьДоговорВДеревоДокумента(РеквизитыДоговора, НовыйЭД, ДанныеРазбора, Ошибка)

	ДоговорКонтрагента = ЭлектронноеВзаимодействие.НайтиСсылку("ДоговорыКонтрагентов", , РеквизитыДоговора);
	
	ДоговорНомер = РеквизитыДоговора.НомерДоговора;
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДанныеРазбора.ДеревоРазбора, "ДоговорыКонтрагентов");
	НайденнаяСтрока = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ДоговорНомер, НСтр("ru ='Номер договора:'") + " " + ДоговорНомер, ДоговорКонтрагента,
				РеквизитыДоговора, ДанныеРазбора, Ошибка);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоговорКонтрагента", НайденнаяСтрока.ИндексСтроки);
	
КонецПроцедуры

// Процедура читает простой список содержащий элементы простых типов (строка, число, ...).
// Прочитанные данные элемента списка помещаются в структуру (ключ - наименование параметра, значение - значение),
// структуры параметров помещаются в массив, массив записывается в дерево значений с именем объекта XDTO, элементом
// которого является список.
//
// Параметры:
//  ОбъектXDTO - объект XDTO - объект, содержащий единственный элемент - читаемый список XDTO.
//  НовыйЭД - строка дерева значений - строка дерева данных, в которую помещается массив с прочитанными данными.
//  Ошибка - строка - текст ошибки, возникшей в процессе обработки списка XDTO.
//
Процедура ДанныеСпискаЗначенийCML(ОбъектXDTO, НовыйЭД, Ошибка)
	
	МассивСтруктур = Новый Массив;
	СвойстваОбъекта = ОбъектXDTO.Свойства();
	Если СвойстваОбъекта.Количество() > 0 Тогда
		Если СвойстваОбъекта[0].ВерхняяГраница = -1 Тогда
			ИмяСписка = СвойстваОбъекта[0].Имя;
			Для Каждого ЭлементСписка Из ОбъектXDTO[ИмяСписка] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого Элемент Из ЭлементСписка.Свойства() Цикл
					Значение = ЭлементСписка[Элемент.Имя];
					СтруктураДанных.Вставить(Элемент.Имя, Значение);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСтруктур.Количество() > 0 Тогда
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ОбъектXDTO.ВладеющееСвойство().Имя, МассивСтруктур);
	КонецЕсли;
	
КонецПроцедуры

Процедура РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Реквизиты = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектРазбора, "Реквизит",,, Истина);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		РеквизитИмя      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Имя");
		РеквизитЗначение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Значение");
		
		Если Не ЗначениеЗаполнено(РеквизитИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура(
			"ИмяРеквизита, ЗначениеРеквизита", РеквизитИмя, РеквизитЗначение);
			
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита       = РеквизитИмя;
			СтрДЗ.ЗначениеРеквизита  = РеквизитЗначение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Реквизит, "Реквизит") <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область СведенияОПрослеживаемости

Функция НовыеСведенияОПрослеживаемости()
	Сведения = Новый Структура;
	Сведения.Вставить("НомерТовара");
	Сведения.Вставить("ЕдиницаИзмеренияКод");
	Сведения.Вставить("ЕдиницаИзмеренияНаименование");
	Сведения.Вставить("Количество");
	Сведения.Вставить("КоличествоУчетное");
	Возврат Сведения;
КонецФункции

Процедура ЗаполнитьСведенияОПрослеживаемости(ПространствоИмен, ЗначенияРеквизитов, ДеревоДанныхТовар, Ошибки)
	
	Реквизит = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанныхТовар,
		"Товары.НомерСтроки.СведенияОПрослеживаемости");
	Если ТипЗнч(Реквизит) <> Тип("Число") ИЛИ Реквизит = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДанныхСведенияОПрослеживаемости = ДеревоДанныхТовар.Строки.Найти(
		"Товары.НомерСтроки.СведенияОПрослеживаемости", "ПолныйПуть");
	
	Для Каждого СтрокаСведений Из ДеревоДанныхСведенияОПрослеживаемости.Строки Цикл
		
		Сведения = НовыеСведенияОПрослеживаемости();
		
		Сведения.НомерТовара = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаСведений, "Товары.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.НомерТовара");
		Сведения.ЕдиницаИзмеренияКод = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаСведений, "Товары.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.ЕдиницаИзмеренияКод");
		Сведения.ЕдиницаИзмеренияНаименование = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаСведений, "Товары.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.ЕдиницаИзмеренияНаименование");
		Сведения.Количество = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаСведений, "Товары.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.Количество");
		Сведения.КоличествоУчетное = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(
			СтрокаСведений, "Товары.НомерСтроки.СведенияОПрослеживаемости.НомерСтроки.КоличествоУчетное");
		
		СтрокаCML = СведенияОПрослеживаемостиВФорматеCML(ПространствоИмен, Сведения, Ошибки);
		Если ПустаяСтрока(СтрокаCML) Тогда
			ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
				|Ошибка установки сведений прослеживаемости для РНПТ ""%1"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Сведения.НомерТовара);
			ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "СведенияОПрослеживаемости",
			Истина, Ошибки);
		ЗначениеРеквизита.Значение.Добавить(СтрокаCML);
		ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОПрослеживаемостиВФорматеCML(ПространствоИмен, СведенияОПрослеживаемости, Ошибки)
	
	Результат = "";
	
	ИмяЭлементаВладельца = "Шапка";
	ПространствоИмен = ПространствоИменCML208();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхШапки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", "");
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.
	
	ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СведенияОПрослеживаемости, ИмяЭлементаВладельца, Истина);
	
	Сформирован = СформироватьДопФайлCML(СтруктураПараметров, Ошибки, Истина, ИмяЭлементаВладельца);
	
	Если Сформирован Тогда
		Результат = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция НовыеДанныеСопоставления()
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("Идентификатор",       "");
	Сопоставление.Вставить("Наименование",        "");
	Сопоставление.Вставить("Характеристика",      "");
	Сопоставление.Вставить("ЕдиницаИзмерения",    "");
	Сопоставление.Вставить("ЕдиницаИзмеренияКод", "");
	Сопоставление.Вставить("Артикул",             "");
	Сопоставление.Вставить("КодНоменклатуры",     "");
	Сопоставление.Вставить("ШтрихкодКомбинации",  "");
	
	Возврат Сопоставление;
	
КонецФункции

Функция ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(Сопоставление)
	
	НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
	
	Если Сопоставление.Наименование <> Неопределено Тогда
		НоменклатураКонтрагента.Наименование = Строка(Сопоставление.Наименование);
	КонецЕсли;
	Если Сопоставление.Характеристика <> Неопределено Тогда
		НоменклатураКонтрагента.Характеристика = Строка(Сопоставление.Характеристика);
	КонецЕсли;
	Если Сопоставление.ЕдиницаИзмерения <> Неопределено Тогда
		НоменклатураКонтрагента.ЕдиницаИзмерения = Строка(Сопоставление.ЕдиницаИзмерения);
	КонецЕсли;
	Если Сопоставление.ЕдиницаИзмеренияКод <> Неопределено Тогда
		НоменклатураКонтрагента.ЕдиницаИзмеренияКод = Строка(Сопоставление.ЕдиницаИзмеренияКод);
	КонецЕсли;
	Если Сопоставление.Артикул <> Неопределено Тогда
		НоменклатураКонтрагента.Артикул = Строка(Сопоставление.Артикул);
	КонецЕсли;
	Если Сопоставление.КодНоменклатуры <> Неопределено Тогда
		НоменклатураКонтрагента.КодНоменклатуры = Строка(Сопоставление.КодНоменклатуры);
	КонецЕсли;
	Если Сопоставление.ШтрихкодКомбинации <> Неопределено Тогда
		НоменклатураКонтрагента.ШтрихкодКомбинации = Строка(Сопоставление.ШтрихкодКомбинации);
	КонецЕсли;
	
	Возврат СопоставлениеНоменклатурыКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(НоменклатураКонтрагента);
	
КонецФункции

#КонецОбласти
