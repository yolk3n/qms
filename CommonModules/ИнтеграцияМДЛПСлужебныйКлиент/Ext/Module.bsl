
#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьСообщенияКПередачеПодтверждениеПроведения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(Контекст.НепроведенныеДокументы);
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	НепроведенныеДокументы = Новый Массив;
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
				ИнформацияОДокументе.Ссылка);
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Контекст.СписокДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Контекст.СписокДокументов, НепроведенныеДокументы);
	
	// Оповещаем открытые формы о том, что были проведены документы.
	ТипыПроведенныхДокументов = Новый Соответствие;
	Для Каждого ПроведенныйДокумент Из Контекст.СписокДокументов Цикл
		ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
	КонецЦикла;
	Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
		ОповеститьОбИзменении(Тип.Ключ);
	КонецЦикла;
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		// Спрашиваем пользователя о необходимости продолжения создания на основании при наличии непроведенных документов.
		ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
		
		КнопкиДиалога = Новый СписокЗначений;
		Если Контекст.СписокДокументов.Количество() = 0 Тогда
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
		Иначе
			ТекстДиалога = ТекстДиалога + " " + НСтр("ru = 'Продолжить?'");
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения", ЭтотОбъект, Контекст);
		ПоказатьВопрос(Обработчик, ТекстДиалога, КнопкиДиалога);
		
	Иначе
		
		ПодготовитьСообщенияКПередаче(Контекст.СписокДокументов, Контекст.ДальнейшееДействие, Контекст.Список);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Пропустить Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСообщенияКПередаче(Контекст.СписокДокументов, Контекст.ДальнейшееДействие, Контекст.Список);
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередаче(СписокДокументов, ДальнейшееДействие, Контекст = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияМДЛПВызовСервера.ПодготовитьСообщенияКПередаче(СписокДокументов, ДальнейшееДействие, ДополнительныеПараметры);
	ОбработатьОчередьПередачиДанных(ДанныеДляВыполненияОбменаНаКлиенте,, ОповещениеПослеЗавершенияОбмена(Контекст, ДальнейшееДействие));
	
КонецПроцедуры

Процедура ВыполнитьЗагрузку(Организация = Неопределено, МестоДеятельности = Неопределено, ПараметрыВыполненияОбмена = Неопределено, ОповещениеПриЗавершении = Неопределено)
	
	ДанныеДляВыполненияОбменаНаКлиенте = ИнтеграцияМДЛПВызовСервера.ВыполнитьЗагрузку(Организация, МестоДеятельности, ПараметрыВыполненияОбмена);
	ОбработатьОчередьПередачиДанных(ДанныеДляВыполненияОбменаНаКлиенте, ОповещениеПриЗавершении);
	
КонецПроцедуры


Процедура ЗаписатьДокументВФормеПриНеобходимости(ОповещениеПриЗавершении, Форма, ТребуетсяПроведение) Экспорт
	
	ТекстВопроса = "";
	Если Форма.Объект.Ссылка.Пустая() Или Не Форма.Объект.Проведен И ТребуетсяПроведение Тогда
		
		Если ТребуетсяПроведение Тогда
			ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Документ не записан. Записать?'");
		КонецЕсли;
		
	ИначеЕсли Форма.Модифицированность Тогда
		
		Если ТребуетсяПроведение Или Форма.Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Документ был изменен. Записать?'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("Форма", Форма);
		Контекст.Вставить("ТребуетсяПроведение", ТребуетсяПроведение);
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Обработчик = Новый ОписаниеОповещения("ЗаписатьДокументВФормеПриНеобходимости_ПослеПодтверждения", ИнтеграцияМДЛПСлужебныйКлиент, Контекст);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументВФормеПриНеобходимости_ПослеПодтверждения(Ответ, Контекст) Экспорт
	
	ЗаписаноУспешно = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Контекст.ТребуетсяПроведение Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписаноУспешно = Контекст.Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи));
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, ЗаписаноУспешно);
	
КонецПроцедуры


Процедура ОбработатьНавигационнуюСсылкуСтатусаЗавершение(ДокументЗаписан, Контекст) Экспорт
	
	Если Не ДокументЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьНавигационнуюСсылкуСтатуса(Контекст.Форма, Контекст.НавигационнаяСсылка);
	
КонецПроцедуры

Процедура ОбработатьНавигационнуюСсылкуСтатуса(Форма, НавигационнаяСсылка) Экспорт
	
	ДокументСсылка = Форма.Объект.Ссылка;
	ИнтеграцияМДЛПВызовСервера.РазблокироватьДокумент(ДокументСсылка, Форма.УникальныйИдентификатор);
	
	Если НавигационнаяСсылка = "ПередатьДанные" Тогда
		ПодготовитьСообщенияКПередаче(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные"),
			ДокументСсылка);
	ИначеЕсли НавигационнаяСсылка = "ОтозватьПереданныйТовар" Тогда
		ПараметрыОтзыва = Новый Структура("Документ", ДокументСсылка);
		ПараметрыОтзыва.Вставить("ДальнейшееДействие", ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеПереданныйТовар"));
		Оповестить = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеУказанияПричины", ЭтотОбъект, ПараметрыОтзыва);
		Подсказка = НСтр("ru = 'Укажите причину отзыва товаров'");
		ПоказатьВводСтроки(Оповестить, "", Подсказка, 500, Ложь);
	ИначеЕсли НавигационнаяСсылка = "ОтказатьсяОтПриемкиТовара" Тогда
		ПараметрыОтзыва = Новый Структура("Документ", ДокументСсылка);
		ПараметрыОтзыва.Вставить("ДальнейшееДействие", ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПриемкиТовара"));
		Оповестить = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеУказанияПричины", ЭтотОбъект, ПараметрыОтзыва);
		Подсказка = НСтр("ru = 'Укажите причину отказа от товаров'");
		ПоказатьВводСтроки(Оповестить, "", Подсказка, 500, Ложь);
	ИначеЕсли НавигационнаяСсылка = "ПодтвердитьПолучение" Тогда
		ПодготовитьСообщенияКПередаче(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение"),
			ДокументСсылка);
	ИначеЕсли НавигационнаяСсылка = "ВыполнитьПостановкуВАрбитражСнятиеАрбитража" Тогда
		ПодготовитьСообщенияКПередаче(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПостановкуВАрбитражСнятиеАрбитража"),
			ДокументСсылка);
	ИначеЕсли НавигационнаяСсылка = "ПодтвердитьПостановкуВАрбитражСнятиеАрбитража" Тогда
		ПодготовитьСообщенияКПередаче(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПостановкуВАрбитражСнятиеАрбитража"),
			ДокументСсылка);
	ИначеЕсли НавигационнаяСсылка = "ОтказатьсяОтПостановкиСнятияАрбитража" Тогда
		ПараметрыОтзыва = Новый Структура("Документ", ДокументСсылка);
		ПараметрыОтзыва.Вставить("ДальнейшееДействие", ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПостановкиСнятияАрбитража"));
		Оповестить = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеУказанияПричины", ЭтотОбъект, ПараметрыОтзыва);
		Подсказка = НСтр("ru = 'Укажите причину отказа от постановки в арбитраж/снятия арбитража'");
		ПоказатьВводСтроки(Оповестить, "", Подсказка, 500, Ложь);
	ИначеЕсли НавигационнаяСсылка = "ЗапроситьИнформациюОКиЗ" Тогда
		ПодготовитьСообщенияКПередаче(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ"),
			ДокументСсылка);
	ИначеЕсли НавигационнаяСсылка = "ОприходоватьБезПодтверждения" Тогда
		ПодготовитьСообщенияОбОприходованииКПередаче(Форма, ДокументСсылка);
	ИначеЕсли НавигационнаяСсылка = "ПолучитьКвитанциюОФиксации" Или НавигационнаяСсылка = "ПолучитеСтатусЗаданияОтРВ" Тогда
		
		Организация       = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Организация"), Форма.Объект.Организация, Неопределено);
		МестоДеятельности = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "МестоДеятельности"), Форма.Объект.МестоДеятельности, Неопределено);
		
		ПараметрыВыполненияОбмена = ИнтеграцияМДЛПКлиентСервер.ПараметрыВыполненияОбмена();
		ПараметрыВыполненияОбмена.СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка);
		ПараметрыВыполненияОбмена.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации");
		
		ВыполнитьЗагрузку(
			Организация,
			МестоДеятельности,
			ПараметрыВыполненияОбмена,
			ОповещениеПослеЗавершенияОбмена(ДокументСсылка, ПараметрыВыполненияОбмена.ДальнейшееДействие));
		
	ИначеЕсли НавигационнаяСсылка = "Закрыть" Тогда
		ЗакрытьУведомление(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередачеПослеУказанияПричины(Причина, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Причина) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ДополнительныеПараметры.Документ;
	
	ПодготовитьСообщенияКПередаче(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
		ДополнительныеПараметры.ДальнейшееДействие,
		ДокументСсылка,
		Новый Структура("Причина", Причина));
	
КонецПроцедуры

Процедура ПодготовитьСообщенияОбОприходованииКПередаче(Форма, ДокументСсылка)
	
	ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения");
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") Тогда
		ПодготовитьСообщенияКПередаче(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
			ДальнейшееДействие,
			ДокументСсылка);
		Возврат;
	КонецЕсли;
	
	ОписанияРеквизитовДляВвода = ИнтеграцияМДЛПВызовСервера.ПолучитьОписанияРеквизитовДляВвода(ДокументСсылка, "ИсточникФинансирования, ТипДоговора, НомерКонтракта", Истина);
	Если Не ОписанияРеквизитовДляВвода.Свойство("ТипДоговора") Тогда
		ОписанияРеквизитовДляВвода.Удалить("НомерКонтракта");
	КонецЕсли;
	
	ОписаниеРеквизита = Новый Структура("ЗначениеПоУмолчанию, ОписаниеТипа, Наименование, СписокВыбора");
	ОписаниеРеквизита.ЗначениеПоУмолчанию   = ПредопределенноеЗначение("Перечисление.ОперацииОприходованияМДЛП.Поступление");
	ОписаниеРеквизита.ОписаниеТипа          = Новый ОписаниеТипов("ПеречислениеСсылка.ОперацииОприходованияМДЛП");
	ОписаниеРеквизита.Наименование          = НСтр("ru = 'Операция'");
	
	ОписаниеРеквизита.СписокВыбора = Новый СписокЗначений;
	ОписаниеРеквизита.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииОприходованияМДЛП.Поступление"));
	ОписаниеРеквизита.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииОприходованияМДЛП.ВозвратОтПокупателя"));
	ОписаниеРеквизита.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииОприходованияМДЛП.Пересорт"));
	
	ОписанияРеквизитовДляВвода.Вставить("Операция", ОписаниеРеквизита);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АвтоЗаголовок", Ложь);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Заполнение дополнительных реквизитов операции оприходования'"));
	ПараметрыФормы.Вставить("ОписанияРеквизитовДляВвода", Новый ФиксированнаяСтруктура(ОписанияРеквизитовДляВвода));
	
	ПараметрыОприходования = Новый Структура("Документ, ДальнейшееДействие", ДокументСсылка, ДальнейшееДействие);
	Оповестить = Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеУказанияДополнительныхРеквизитовОприходования", ЭтотОбъект, ПараметрыОприходования);
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийРеквизитовМДЛП", ПараметрыФормы, Форма,,,, Оповестить);
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередачеПослеУказанияДополнительныхРеквизитовОприходования(ЗначенияДополнительныхРеквизитов, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначенияДополнительныхРеквизитов) Или ТипЗнч(ЗначенияДополнительныхРеквизитов) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ДополнительныеПараметры.Документ;
	
	ПодготовитьСообщенияКПередаче(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
		ДополнительныеПараметры.ДальнейшееДействие,
		ДокументСсылка,
		ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

Процедура ОбработатьОчередьПередачиДанных(ДанныеДляВыполненияОбменаНаКлиенте, ОповещениеПриЗавершении = Неопределено, ОповещениеПослеПередачиДанных = Неопределено) Экспорт
	
	Если ОповещениеПослеПередачиДанных = Неопределено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("НастройкиОбмена", ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбмена);
		Контекст.Вставить("РегистраторыВыбытия", ДанныеДляВыполненияОбменаНаКлиенте.РегистраторыВыбытия);
		Контекст.Вставить("ПараметрыВыполненияОбмена", ДанныеДляВыполненияОбменаНаКлиенте.ПараметрыВыполненияОбмена);
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПослеЗавершенияОбмена(,, ОповещениеПриЗавершении));
		
		Оповестить = Новый ОписаниеОповещения("ПослеОбработкиОчередиПередачиДанных", ИнтеграцияМДЛПСлужебныйКлиент, Контекст);
	Иначе
		Оповестить = ОповещениеПослеПередачиДанных;
	КонецЕсли;
	
	СообщенияКПередаче = ДанныеДляВыполненияОбменаНаКлиенте.СообщенияКПередаче;
	
	Если СообщенияКПередаче.Количество() > 0 Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("НастройкиОбмена", ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбмена);
		Контекст.Вставить("РегистраторыВыбытия", ДанныеДляВыполненияОбменаНаКлиенте.РегистраторыВыбытия);
		Контекст.Вставить("Изменения", ДанныеДляВыполненияОбменаНаКлиенте.Изменения);
		Контекст.Вставить("ОповещениеПриЗавершении", Оповестить);
		
		ПередатьСообщения(СообщенияКПередаче, Контекст);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Оповестить, ДанныеДляВыполненияОбменаНаКлиенте.Изменения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОповещениеПослеЗавершенияОбмена(Контекст = Неопределено, ДальнейшееДействие = Неопределено, ОповещениеПриЗавершении = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("Контекст"               , Контекст);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие"     , ДальнейшееДействие);
	
	Возврат Новый ОписаниеОповещения("ПослеЗавершенияОбмена", ИнтеграцияМДЛПСлужебныйКлиент, ДополнительныеПараметры);
	
КонецФункции

Процедура ПередатьСообщения(СообщенияКПередаче, Контекст)
	
	ПорцияДанных = СледующаяПорцияДанных(СообщенияКПередаче);
	Если ПорцияДанных.КОбработке <> Неопределено Тогда
		
		СообщениеКПередаче = ПорцияДанных.КОбработке;
		
		Если СообщениеКПередаче.ПередачаСведенийЧерезСКЗКМ Тогда
			ТранспортныйМодуль = Контекст.РегистраторыВыбытия.Получить(СообщениеКПередаче.ИдентификаторСубъектаОбращения);
		Иначе
			ТранспортныйМодуль = Контекст.НастройкиОбмена.Получить(СообщениеКПередаче.ИдентификаторСубъектаОбращения);
		КонецЕсли;
		
		Если СообщениеКПередаче.ОбновитьСостояниеПодтверждения Тогда
			Попытка
				СообщениеКПередаче.УникальныйИдентификатор = Новый УникальныйИдентификатор;
				ИнтеграцияМДЛПВызовСервера.ЗаблокироватьДокумент(СообщениеКПередаче.Документ, СообщениеКПередаче.УникальныйИдентификатор);
			Исключение
				СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ИдентификаторСубъектаОбращения = СообщениеКПередаче.ИдентификаторСубъектаОбращения;
				СтрокаРезультата.Операция              = СообщениеКПередаче.Операция;
				СтрокаРезультата.Объект                = СообщениеКПередаче.Документ;
				СтрокаРезультата.ИсходящееСообщение    = СообщениеКПередаче.Ссылка;
				СтрокаРезультата.ТекстОшибки           = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось заблокировать документ %1.'"), СообщениеКПередаче.Документ);
				Контекст.Изменения.Добавить(СтрокаРезультата);
				ПередатьСообщения(ПорцияДанных.Отложено, Контекст);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если Не ИнтеграцияМДЛПВызовСервера.СообщениеНаходитсяВОчередиПередачиДанныхМДЛП(СообщениеКПередаче.Ссылка) Тогда
			ИнтеграцияМДЛПВызовСервера.РазблокироватьДокумент(СообщениеКПередаче.Документ, СообщениеКПередаче.УникальныйИдентификатор);
			СтрокаРезультата = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ИдентификаторСубъектаОбращения = СообщениеКПередаче.ИдентификаторСубъектаОбращения;
			СтрокаРезультата.Операция              = СообщениеКПередаче.Операция;
			СтрокаРезультата.Объект                = СообщениеКПередаче.Документ;
			СтрокаРезультата.ИсходящееСообщение    = СообщениеКПередаче.Ссылка;
			СтрокаРезультата.ТекстОшибки           = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление по документу %1 было обработано ранее.'"), СообщениеКПередаче.Документ);
			Контекст.Изменения.Добавить(СтрокаРезультата);
			ПередатьСообщения(ПорцияДанных.Отложено, Контекст);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СообщенияКПередаче", ПорцияДанных.Отложено);
		ДополнительныеПараметры.Вставить("Сообщение", СообщениеКПередаче);
		ДополнительныеПараметры.Вставить("Контекст", Контекст);
		Оповестить = Новый ОписаниеОповещения("ПослеПередачиСообщения", ЭтотОбъект, ДополнительныеПараметры);
		
		ТранспортМДЛПКлиент.ОтправитьСообщение(ТранспортныйМодуль, СообщениеКПередаче, Оповестить);
		
	Иначе
		
		Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Изменения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПередачиСообщения(РезультатОтправки, Контекст) Экспорт
	
	Изменение = ИнтеграцияМДЛПВызовСервера.ОбработатьРезультатОтправкиСообщения(Контекст.Сообщение, РезультатОтправки);
	Контекст.Контекст.Изменения.Добавить(Изменение);
	
	ПередатьСообщения(Контекст.СообщенияКПередаче, Контекст.Контекст);
	
КонецПроцедуры

Процедура ПодтвердитьПередачу(Сообщение, ОповещениеПриЗавершении) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сообщение", Сообщение);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПослеЗавершенияОбмена(,, ОповещениеПриЗавершении));
	Обработчик = Новый ОписаниеОповещения("ПодтвердитьПередачуПослеВводаИдентификатораЗапроса", ИнтеграцияМДЛПСлужебныйКлиент, ДополнительныеПараметры);
	ПоказатьВводСтроки(Обработчик, "", НСтр("ru = 'Укажите идентификатор запроса'"), 36);
	
КонецПроцедуры

Процедура ПодтвердитьПередачуПослеВводаИдентификатораЗапроса(ИдентификаторЗапроса, ДополнительныеПараметры) Экспорт
	
	Если ИдентификаторЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗапроса) Тогда
		Обработчик = Новый ОписаниеОповещения("ПодтвердитьПередачуПослеВводаИдентификатораЗапроса", ИнтеграцияМДЛПСлужебныйКлиент, ДополнительныеПараметры);
		ПоказатьВводСтроки(Обработчик, ИдентификаторЗапроса, НСтр("ru = 'Укажите идентификатор запроса'"), 36);
		Возврат;
	КонецЕсли;
	
	Изменение = ИнтеграцияМДЛПВызовСервера.ПодтвердитьПередачу(ДополнительныеПараметры.Сообщение, ИдентификаторЗапроса);
	
	Изменения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменение);
	ДополнительныеПараметры.Вставить("Контекст", Изменение.Объект);
	
	ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтменитьПередачу(Сообщение, ОповещениеПриЗавершении) Экспорт
	
	Изменение = ИнтеграцияМДЛПВызовСервера.ОтменитьПередачуСообщения(Сообщение);
	
	Изменения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменение);
	ДополнительныеПараметры = Новый  Структура;
	ДополнительныеПараметры.Вставить("Контекст", Изменение.Объект);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеОбработкиОчередиПередачиДанных(Изменения, Контекст) Экспорт
	
	КонтекстОбработкиВходящихСообщений = Новый Структура;
	КонтекстОбработкиВходящихСообщений.Вставить("Изменения"              , Изменения);
	КонтекстОбработкиВходящихСообщений.Вставить("ПараметрыВыполненияОбмена", Контекст.ПараметрыВыполненияОбмена);
	КонтекстОбработкиВходящихСообщений.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ПослеПолученияВходящихДокументов", ЭтотОбъект, Контекст));
	
	НастройкиОбмена = Новый Массив;
	Для Каждого Настройка Из Контекст.РегистраторыВыбытия Цикл
		Если Настройка.Значение.ЗагружатьВходящиеДокументы Тогда
			НастройкиОбмена.Добавить(Настройка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Настройка Из Контекст.НастройкиОбмена Цикл
		Если Настройка.Значение.ЗагружатьВходящиеДокументы Тогда
			НастройкиОбмена.Добавить(Настройка);
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьВходящиеСообщения(НастройкиОбмена, КонтекстОбработкиВходящихСообщений);
	
КонецПроцедуры

Процедура ПолучитьВходящиеСообщения(НастройкиОбмена, Контекст)
	
	ПорцияДанных = СледующаяПорцияДанных(НастройкиОбмена);
	Если ПорцияДанных.КОбработке <> Неопределено Тогда
		
		ТранспортныйМодуль = ПорцияДанных.КОбработке.Значение;
		Если ТранспортныйМодуль.ЗагружатьВходящиеДокументы Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("НастройкиОбмена", ПорцияДанных.Отложено);
			ДополнительныеПараметры.Вставить("Контекст", Контекст);
			Оповестить = Новый ОписаниеОповещения("ПослеПолученияВходящихСообщений", ЭтотОбъект, ДополнительныеПараметры);
			
			ТранспортМДЛПКлиент.ПолучитьВходящиеСообщения(ТранспортныйМодуль, Оповестить, Контекст.ПараметрыВыполненияОбмена);
		Иначе
			ПолучитьВходящиеСообщения(ПорцияДанных.Отложено, Контекст)
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст.Изменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияВходящихСообщений(РезультатПолучения, Контекст) Экспорт
	
	Если РезультатПолучения <> Неопределено И РезультатПолучения.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПолучения.ОписаниеОшибки);
	КонецЕсли;
	
	ПолучитьВходящиеСообщения(Контекст.НастройкиОбмена, Контекст.Контекст);
	
КонецПроцедуры


Процедура ПослеПолученияВходящихДокументов(Изменения, Контекст) Экспорт
	
	Идентификаторы = ИнтеграцияМДЛПКлиентСервер.СубъектыОбращенияНастроекОбмена(Контекст.НастройкиОбмена);
	Результат = ИнтеграцияМДЛПВызовСервера.ОбработатьВходящиеСообщения(Идентификаторы, Контекст.ПараметрыВыполненияОбмена);
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст.ПараметрыВыполненияОбмена, "ТипыДокументов");
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст.ПараметрыВыполненияОбмена, "СписокДокументов");
	Если ТипыДокументов = Неопределено И СписокДокументов = Неопределено Тогда
		// Дата последнего запуска обмена на клиенте по расписанию обновляется только если обмен был выполнен без указания параметров,
		// ограничивающих очередь обработки входящих документов.
		Для Каждого Идентификатор Из Идентификаторы Цикл
			ИнтеграцияМДЛПКлиент.ОбновитьДатуПоследнегоЗапускаОбменаНаКлиентеПоРасписанию(Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Изменения);
	КонецЕсли;
	
КонецПроцедуры

Функция СледующаяПорцияДанных(Данные)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КОбработке");
	ВозвращаемоеЗначение.Вставить("Отложено", Новый Массив);
	
	Если Данные.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Индекс = 1;
	Для Каждого ЭлементДанных Из Данные Цикл
		
		Если Индекс = 1 Тогда
			ВозвращаемоеЗначение.КОбработке = ЭлементДанных;
		Иначе
			ВозвращаемоеЗначение.Отложено.Добавить(ЭлементДанных);
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


Процедура ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	СоответствиеДокументыОснования = Новый Соответствие;
	СоответствиеДокументыСтатусы = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
		
		СоответствиеДокументыОснования.Вставить(ЭлементДанных.Объект, ЭлементДанных.ДокументОснование);
		СоответствиеДокументыСтатусы.Вставить(ЭлементДанных.Объект, ЭлементДанных.НовыйСтатус);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументыОснования Цикл
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка"   , КлючИЗначение.Ключ);
		ПараметрОповещения.Вставить("Основание", КлючИЗначение.Значение);
		Оповестить("ИзменениеСостоянияМДЛП", ПараметрОповещения);
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры.Контекст) = Тип("ТаблицаФормы") Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 из %2 выделенных в списке документов выполнено действие: %3'"),
			СоответствиеДокументыСтатусы.Количество(),
			ДополнительныеПараметры.Контекст.ВыделенныеСтроки.Количество(),
			ДополнительныеПараметры.ДальнейшееДействие);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнено действие'"),
			,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.Контекст) Тогда
		
		Для Каждого КлючИЗначение Из СоответствиеДокументыСтатусы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для документа %1 изменен статус МДЛП: %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Выполнено действие'"),
				ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ),
				ТекстСообщения,
				БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	Иначе
		
		// Выполнен обмен
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыОснования", СоответствиеДокументыОснования);
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыСтатусы",   СоответствиеДокументыСтатусы);
		ДополнительныеПараметрыОповещения.Вставить("Изменения",                      Изменения);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменено объектов: %1'"), СоответствиеДокументыСтатусы.Количество());
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнен обмен с МДЛП'"),
			Новый ОписаниеОповещения("ОткрытьРезультатВыполненияОбмена", ИнтеграцияМДЛПСлужебныйКлиент, ДополнительныеПараметрыОповещения),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Изменения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьРезультатВыполненияОбмена(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.МДЛППрисоединенныеФайлы.Форма.РезультатВыполненияОбмена", ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатРедактированияАдреса(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект = ДополнительныеПараметры.Объект;
		ИмяРеквизитаАдреса = ДополнительныеПараметры.ИмяРеквизитаАдреса;
		
		// Перенесем данные в форму
		Объект[ИмяРеквизитаАдреса + "ЗначенияПолей"] = Результат.КонтактнаяИнформация;
		Объект[ИмяРеквизитаАдреса]                   = Результат.Представление;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаАдреса + "ИдентификаторАдресногоОбъекта") Тогда
			Результат = ИнтеграцияМДЛПВызовСервера.ПолучитьАдресныеОбъекты(Результат.КонтактнаяИнформация);
			Если Результат.Успех Тогда
				Объект[ИмяРеквизитаАдреса + "ИдентификаторАдресногоОбъекта"] = Результат.ИдентификаторАдресногоОбъекта;
				Объект[ИмяРеквизитаАдреса + "ИдентификаторДома"]             = Результат.ИдентификаторДома;
				Объект[ИмяРеквизитаАдреса + "Помещение"]                     = Результат.Помещение;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
		ДополнительныеПараметры.Форма.ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СвязатьУведомлениеСОснованиемПослеВыбора(Уведомление, Контекст) Экспорт
	
	Если Уведомление = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛПВызовСервера.СвязатьУведомлениеСОснованием(Уведомление, Контекст.Основание);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка"   , Уведомление);
	ПараметрОповещения.Вставить("Основание", Контекст.Основание);
	Оповестить("ИзменениеСостоянияМДЛП", ПараметрОповещения);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоШтрихкодам(Форма, Объект, КэшированныеЗначения, НомераКиЗ, НомераТранспортныхУпаковок = Неопределено, ДополнительныйОтбор = Неопределено) Экспорт
	
	Модифицированность = Ложь;
	
	Для Каждого Данные Из НомераКиЗ Цикл
		
		НайденныеСтроки = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", Данные.sgtin));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер упаковки %1 уже присутствует в документе'"), Данные.sgtin);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.НомераУпаковок", НайденныеСтроки[0].НомерСтроки, "НомерКиЗ");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
			Продолжить;
		КонецЕсли;
		
		ОтборНоменклатуры = Новый Структура("GTIN", Данные.GTIN);
		Если ДополнительныйОтбор <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборНоменклатуры, ДополнительныйОтбор, Истина);
		КонецЕсли;
		СтрокиТовара = Объект.Товары.НайтиСтроки(ОтборНоменклатуры);
		Если СтрокиТовара.Количество() > 0 Тогда
			ТекущаяСтрока = СтрокиТовара[0];
		Иначе
			ТекущаяСтрока = Объект.Товары.Добавить();
			ДанныеНоменклатуры = СобытияФормМДЛПКлиентПереопределяемый.ПолучитьДанныеНоменклатурыПоКиЗ(Данные);
			Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеНоменклатуры);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ОтборНоменклатуры);
			ТекущаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		СтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
		Если СтрокиУпаковок.Количество() >= ТекущаяСтрока.Количество Тогда
			ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + 1;
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок  = Истина;
			СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
		КонецЕсли;
		
		СтрокаУпаковки = Объект.НомераУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, Данные);
		СтрокаУпаковки.ИдентификаторСтроки = ТекущаяСтрока.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКиЗ = Данные.sgtin;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаУпаковки, "СостояниеПодтверждения") Тогда
			СтрокаУпаковки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	Если НомераТранспортныхУпаковок <> Неопределено Тогда
		
		Для Каждого Данные Из НомераТранспортныхУпаковок Цикл
			
			ОтборУпаковок = Новый Структура("НомерУпаковки", Данные.SSCC);
			Если ДополнительныйОтбор <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборУпаковок, ДополнительныйОтбор, Истина);
			КонецЕсли;
			НайденныеСтроки = Объект.ТранспортныеУпаковки.НайтиСтроки(ОтборУпаковок);
			Если НайденныеСтроки. Количество() > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер транспортной упаковки %1 уже присутствует в документе'"), Данные.SSCC);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ТранспортныеУпаковки", НайденныеСтроки[0].НомерСтроки, "НомерУпаковки");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
				Продолжить;
			КонецЕсли;
			
			СтрокаУпаковки = Объект.ТранспортныеУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУпаковки, ОтборУпаковок);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаУпаковки, "СостояниеПодтверждения") Тогда
				СтрокаУпаковки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаУпаковки, "ИдентификаторСтроки") Тогда
				СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьУведомление(ДокументСсылка)
	
	НовыйСтатус = ИнтеграцияМДЛПВызовСервера.ЗакрытьУведомление(ДокументСсылка);
	Если ЗначениеЗаполнено(НовыйСтатус) Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка", ДокументСсылка);
		Оповестить("ИзменениеСостоянияМДЛП", ПараметрОповещения);
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для документа %1 изменен статус МДЛП: %2.'"),
			ДокументСсылка,
			НовыйСтатус);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнено действие'"),
			ПолучитьНавигационнуюСсылку(ДокументСсылка),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

#Область ОтключениеТребованияСозданияРаспоряженияНаОформление

Функция ЭтоКомандаОтключитьТребованиеСозданияРаспоряженияНаОформление(НавигационнаяСсылка) Экспорт
	
	Возврат СтрНачинаетсяС(НавигационнаяСсылка, "ОтключитьТребованиеСоздания");
	
КонецФункции

Процедура ОтключитьТребованиеСозданияРаспоряженияНаОформление(ДокументОснование) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Основание", ДокументОснование);
	
	ЗаголовокФормы = НСтр("ru = 'Причина отключения требования распоряжения на оформление уведомления'");
	Обработчик = Новый ОписаниеОповещения("ОтключитьТребованиеСозданияРаспоряженияНаОформлениеПослеВводаПричины", ИнтеграцияМДЛПСлужебныйКлиент, Контекст);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Обработчик,, ЗаголовокФормы);
	
КонецПроцедуры

Процедура ОтключитьТребованиеСозданияРаспоряженияНаОформлениеПослеВводаПричины(ПричинаОтключения, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПричинаОтключения) Тогда
		ТекстЗаголовка = НСтр("ru = 'Статус отключения'");
		ТекстОповещения = НСтр("ru = 'Не отключено требование распоряжения на оформление уведомления'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	Основание = Контекст.Основание;
	
	Уведомления = ИнтеграцияМДЛПВызовСервера.ОтключитьТребованиеСозданияРаспоряженияНаОформление(Основание, ПричинаОтключения);
	Для Каждого Уведомление Из Уведомления Цикл
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Основание", Основание);
		ПараметрОповещения.Вставить("Ссылка", Уведомление);
		Оповестить("ИзменениеСостоянияМДЛП", ПараметрОповещения);
	КонецЦикла;
	
	ТекстЗаголовка = НСтр("ru = 'Статус отключения'");
	ТекстОповещения = НСтр("ru = 'Отключено требование распоряжения на оформление уведомления'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Функция ЭтоКомандаВключитьТребованиеСозданияРаспоряженияНаОформление(НавигационнаяСсылка) Экспорт
	
	Возврат СтрНачинаетсяС(НавигационнаяСсылка, "ВключитьТребованиеСоздания");
	
КонецФункции

Процедура ВключитьТребованиеСозданияРаспоряженияНаОформление(ДокументОснование) Экспорт
	
	Уведомления = ИнтеграцияМДЛПВызовСервера.ВключитьТребованиеСозданияРаспоряженияНаОформление(ДокументОснование);
	Для Каждого Уведомление Из Уведомления Цикл
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Основание", ДокументОснование);
		ПараметрОповещения.Вставить("Ссылка", Уведомление);
		Оповестить("ИзменениеСостоянияМДЛП", ПараметрОповещения);
	КонецЦикла;
	
	ТекстЗаголовка = НСтр("ru = 'Статус включения'");
	ТекстОповещения = НСтр("ru = 'Включено требование распоряжения на оформление уведомления'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Функция ЭтоКомандаПричинаОтключенияТребованияСозданияРаспоряженияНаОформление(НавигационнаяСсылка) Экспорт
	
	Возврат СтрНачинаетсяС(НавигационнаяСсылка, "#");
	
КонецФункции

Процедура ПоказатьПричинуОтключенияТребованияСозданияРаспоряженияНаОформление(НавигационнаяСсылка) Экспорт
	
	ТекстСообщения = СтрЗаменить(
		СтрЗаменить(
			СтрЗаменить(
				Сред(НавигационнаяСсылка, 2),
				"#ПС#",
				Символы.ПС),
			"#Таб#",
			Символы.Таб),
		"#ПП#",
		" ");
	
	ЗаголовокФормы = НСтр("ru = 'Причина отключения требования распоряжения на оформление уведомления'");
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Новый ОписаниеОповещения, ТекстСообщения, ЗаголовокФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
