
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обработчик события создания формы списка номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура ПриСозданииФормыСпискаНаСервере(Форма) Экспорт
	
	УстановитьВариантПоискаПоНастройкам(Форма);
	
	ОформитьПанельФильтров(Форма);
	НастроитьФильтрыСпискаТоваров(Форма);
	НастроитьПоискВСпискеТоваров(Форма);
	
КонецПроцедуры

// Обработчик события создания формы подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура ПриСозданииФормыПодбораНаСервере(Форма) Экспорт
	
	УстановитьЗначенияПоНастройкамФормыПодбора(Форма);
	УстановитьСвойстваФормыПодбораПоПараметрам(Форма);
	УстановитьСкладскиеНастройкиПоПараметрам(Форма);
	УстановитьСвойстваСписковФормыПодбора(Форма);
	ОформитьПанельФильтров(Форма);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		УстановитьУсловноеОформлениеСпискаТоваров(Форма);
		УстановитьВариантПоискаПоНастройкам(Форма);
		
		НастроитьФильтрыСпискаТоваров(Форма);
		НастроитьПоискВСпискеТоваров(Форма);
	КонецЕсли;
	УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
	Если Форма.Параметры.Свойство("Отбор") Тогда
		Для Каждого Отбор Из Форма.Параметры.Отбор Цикл
			Если Форма.Элементы.Найти(Отбор.Ключ) <> Неопределено Тогда
				Форма[Отбор.Ключ] = Отбор.Значение;
				Если Форма.Элементы.Найти("Отбор" + Отбор.Ключ) <> Неопределено Тогда
					Форма["Отбор" + Отбор.Ключ] = Истина;
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокТоваров, Отбор.Ключ, Отбор.Значение,,, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ПользовательскийОтбор") Тогда
		Для Каждого Отбор Из Форма.Параметры.ПользовательскийОтбор Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокТоваров, Отбор.Ключ, Отбор.Значение,, Отбор.Представление, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ОтборТолькоПросмотр") Тогда
		Для Каждого Отбор Из Форма.Параметры.ОтборТолькоПросмотр Цикл
			ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, Отбор, "ТолькоПросмотр", Истина);
			ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Отбор" + Отбор, "ТолькоПросмотр", Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет настройки форм подбора.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	СохранитьНастройкиФормыПодбора(Форма);
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ФильтрыСписков.СохранитьНастройкиФормы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьЗаголовокФормыПодбора(Форма) Экспорт
	
	Документ = Форма.Параметры.Документ;
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеДокумента = "";
	Если ЗначениеЗаполнено(Документ) Тогда
		ПредставлениеДокумента = Строка(Документ);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)) Тогда
		ПредставлениеОбъекта = Документ.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = Документ.Метаданные().Представление();
		КонецЕсли;
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (новый)'"), ПредставлениеОбъекта);
	КонецЕсли;
	
	Форма.Заголовок = Форма.Заголовок + ": " + ПредставлениеДокумента;
	
КонецПроцедуры

// Обрабатывает изменение флага отбора номенклатуры в наличии на складе в форме подбора.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьОтборТолькоВНаличии(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров,
		"ВНаличииОстаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		Форма.ТолькоВНаличии);
	
КонецПроцедуры

// Обрабатывает изменение показа остатков с отбором по источнику финансирования.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьОтборОстатковПоИсточникуФинансирования(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров,
		"ИсточникФинансирования",
		Форма.ИсточникФинансирования,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		,
		Форма.ОтборИсточникФинансирования);
	
КонецПроцедуры

// Обрабатывает изменение показа остатков без забракованных и с истекшим сроком.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьОтборОстатковБезЗабракованныхИПросроченных(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров,
		"СерияЗабракована",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Форма.ОтборОстатковБезЗабракованныхИПросроченных);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДатаОстатков") И ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
		ПредельнаяДатаСрокаГодности = НачалоДня(Форма.ДатаОстатков);
	Иначе
		ПредельнаяДатаСрокаГодности = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров,
		"СерияГоденДо",
		ПредельнаяДатаСрокаГодности,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		Форма.ОтборОстатковБезЗабракованныхИПросроченных);
	
КонецПроцедуры

// Проверяет использование полнотекстового поиска при подборе товаров.
//
Функция ИспользоватьПолнотекстовыйПоиск() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоискПриПодбореТоваров")
	      И ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск")
	      И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры.
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	ИменаРеквизитов = "Склад, ПараметрыФормы, МестоХраненияОстатка";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры.
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = "ПодборТоваровСервер";
	
	ПараметрыУчета.Вставить("МестоХраненияОстатка", Объект.МестоХраненияОстатка);
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ВестиУчетПоСериям
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаСерий
		|ГДЕ
		|	ПолитикиУчетаСерий.ИспользоватьСерии
		|	И ПолитикиУчетаСерий.ПолитикаУчетаСерий <> ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.НеУчитывать)
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ВестиУчетПоПартиям
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаПартий
		|ГДЕ
		|	ПолитикиУчетаПартий.ИспользоватьПартии
		|	И ПолитикиУчетаПартий.ПолитикаУчетаПартий <> ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.НеУчитывать)
		|
		|";
		
		Если ПодборТоваровКлиентСервер.ПодборВОтделении(Объект) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолитикиУчетаСерий.ПолитикаУчетаСерий"  , "ПолитикиУчетаСерий.ПолитикаУчетаСерийВОтделениях");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолитикиУчетаПартий.ПолитикаУчетаПартий", "ПолитикиУчетаПартий.ПолитикаУчетаПартийВОтделениях");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ПараметрыУчета.ИспользоватьСерии = Не РезультатЗапроса[0].Пустой();
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Объект) Тогда
			ПараметрыУчета.ИспользоватьПартии = Не РезультатЗапроса[1].Пустой();
		КонецЕсли;
		
	Иначе
		
		ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
		ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Объект) Тогда
			ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
		КонецЕсли;
		ПараметрыУчета.Склад = Объект.Склад;
		
	КонецЕсли;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры.
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры.
//
// Возвращаемое значение
//   Строка - текст запроса.
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыУчетаНоменклатуры.Склад) Тогда
		Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияПартий КАК СтатусУказанияПартий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолитикиУчетаСерий.Ссылка КАК ВидНоменклатуры,
	|	ИСТИНА КАК ВестиУчетПоСериям,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.СправочноеУказаниеСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СправочноеУказаниеСерий
	|ПОМЕСТИТЬ ПараметрыУчетаСерий
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ИспользоватьСерии
	|	И ПолитикиУчетаСерий.ПолитикаУчетаСерий <> ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.НеУчитывать)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолитикиУчетаСерий.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолитикиУчетаПартий.Ссылка КАК ВидНоменклатуры,
	|	ИСТИНА КАК ВестиУчетПоПартиям
	|ПОМЕСТИТЬ ПараметрыУчетаПартий
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаПартий
	|ГДЕ
	|	ИспользоватьПартии
	|	И ПолитикиУчетаПартий.ПолитикаУчетаПартий <> ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.НеУчитывать)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СтатусУказанияСерий  КАК СтатусУказанияСерийСтарый,
	|	Товары.СтатусУказанияПартий КАК СтатусУказанияПартийСтарый,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолитикиУчетаСерий.ВестиУчетПоСериям, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьСправочноеУказаниеСерий И ПолитикиУчетаСерий.СправочноеУказаниеСерий
	|						ТОГДА ВЫБОР
	|								КОГДА Товары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|									ТОГДА &СтатусСправочноеУказаниеСерий //&СтатусСправочноеУказаниеСерийСерияНеЗаполнена
	|								ИНАЧЕ &СтатусСправочноеУказаниеСерий
	|							КОНЕЦ
	|					КОГДА Товары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА &СтатусУчетПоСериям //&СтатусУчетПоСериямСерияНеЗаполнена
	|					ИНАЧЕ &СтатусУчетПоСериям
	|				КОНЕЦ
	|		ИНАЧЕ &СтатусСерииНеУказываются
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолитикиУчетаПартий.ВестиУчетПоПартиям, ЛОЖЬ)
	|			ТОГДА &СтатусУчетПоПартиям
	|		ИНАЧЕ &СтатусПартииНеУказываются
	|	КОНЕЦ КАК СтатусУказанияПартий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО
	|			ТоварыДляЗапроса.Номенклатура = Товары.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПараметрыУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО
	|			ПолитикиУчетаСерий.ВидНоменклатуры = ТоварыДляЗапроса.ВидНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПараметрыУчетаПартий КАК ПолитикиУчетаПартий
	|		ПО
	|			ПолитикиУчетаПартий.ВидНоменклатуры = ТоварыДляЗапроса.ВидНоменклатуры
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Статусы.СтатусУказанияПартий КАК СтатусУказанияПартий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|	ИЛИ Статусы.СтатусУказанияПартий <> Статусы.СтатусУказанияПартийСтарый
	|";
	
	Если ПодборТоваровКлиентСервер.ПодборВОтделении(ПараметрыУчетаНоменклатуры) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолитикиУчетаСерий.ПолитикаУчетаСерий"  , "ПолитикиУчетаСерий.ПолитикаУчетаСерийВОтделениях");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолитикиУчетаПартий.ПолитикаУчетаПартий", "ПолитикиУчетаПартий.ПолитикаУчетаПартийВОтделениях");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает пустую таблицу данных заказа.
//
Функция ПолучитьПустуюТаблицуДанныхЗаказа() Экспорт
	
	ДанныеЗаказа = Обработки.ПодборТоваровВДокументСписанияПоЗаказу.Создать().Корзина.Выгрузить(, "Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа, ИсточникФинансированияЗаказа");
	ДанныеЗаказа.Колонки.Добавить("КОформлению", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Возврат ДанныеЗаказа;
	
КонецФункции

// Устанавливает отбор на список номенклатуры по аналогичным свойствам переданного товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - товар по значениям свойств которого необходимо установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	Фильтры = ФильтрыСписковКлиентСервер.Фильтры(Форма);
	
	ОписаниеНоменклатуры = НоменклатураСервер.ОписаниеНоменклатуры(Номенклатура);
	Если ОписаниеНоменклатуры.ЭтоЛекарственноеСредство
	   И Фильтры.Найти(ФильтрНоменклатурыЛекарственныхСредствКлиентСервер.Идентификатор()) <> Неопределено Тогда
		ФильтрыСписков.УстановитьВариантФильтра(Форма, ФильтрНоменклатурыЛекарственныхСредствКлиентСервер.Идентификатор());
		ФильтрНоменклатурыЛекарственныхСредств.УстановитьОтборыСпискаПоНоменклатуре(Форма, Номенклатура);
	ИначеЕсли Фильтры.Найти(ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор()) <> Неопределено Тогда
		ФильтрыСписков.УстановитьВариантФильтра(Форма, ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор());
		ФильтрНоменклатурыПоВидуИСвойствам.УстановитьОтборыСпискаПоНоменклатуре(Форма, Номенклатура);
	Иначе
		ФильтрыСписков.УстановитьИспользоватьФильтры(Форма, Ложь);
	КонецЕсли;
	
	ПанельОтборовКлиентСервер.СкрытьПоказатьПанельОтборов(Форма, Ложь);
	
КонецПроцедуры

// Настраивает отображение пользовательских настроек
//
// Параметры:
//  Группа - ГруппаФормы - группа формы с пользовательскими настройками
//
Процедура НастроитьОтображениеПользовательскихНастроек(Группа) Экспорт
	
	Если Группа.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеФлажка И Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		КонецЕсли;
	Иначе
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				НастроитьОтображениеПользовательскихНастроек(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловноеОформлениеСпискаТоваров(Форма)
	
	УсловноеОформление = Форма.СписокТоваров.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление;
	
	#Область ВНаличииОстаток
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ВНаличииОстаток");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Доступно");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3");
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
	// ВНаличииОстаток - <Нет>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ВНаличииОстаток");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВНаличииОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Доступно - <Нет>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Доступно");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Доступно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти // ВНаличииОстаток
	
	#Область Цена
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Цена");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2");
	
	#КонецОбласти // Цена
	
КонецПроцедуры

Процедура УстановитьСвойстваСписковФормыПодбора(Форма)
	
	УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	УстановитьПараметрыСписковФормыПодбора(Форма);
	
КонецПроцедуры

Процедура УстановитьТекстыЗапросовСписковФормыПодбора(Форма)
	
	Форма.СписокТоваров.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма);
	Форма.СписокТоваров.УстановитьОбязательноеИспользование("Ссылка", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрыСписковФормыПодбора(Форма)
	
	СписокТоваров = Форма.СписокТоваров;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Организация", Форма.Организации.ВыгрузитьЗначения());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Склад", Форма.Склады.ВыгрузитьЗначения());
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Организация", Форма.Организации.ВыгрузитьЗначения());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Склад", Форма.Склады.ВыгрузитьЗначения());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ДатаПериода", Форма.Дата);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Отделение", Форма.Параметры.Отделение);
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ВидЦены", Форма.ВидЦены);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Валюта", Форма.Валюта);
		Если ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ДатаОстатков", КонецДня(Форма.ДатаОстатков) + 1);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ДатаЦены", КонецДня(Форма.ДатаОстатков));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаСпискаФормыПодбора(Форма)
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) Тогда
			ТекстЗапроса = ТекстЗапросаПодборВДокументыПоступления(Форма)
		ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
			ТекстЗапроса = ТекстЗапросаПодборВДокументыСписания(Форма);
		КонецЕсли;
		
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		
		ТекстЗапроса = ТекстЗапросаПодборОписанийТоваров(Форма);
		Возврат ТекстЗапроса;
		
	КонецЕсли;
		
	
КонецФункции

Функция ТекстЗапросаПодборВДокументыПоступления(Форма)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Ссылка КАК Номенклатура,
	|	Товары.ПометкаУдаления КАК ПометкаУдаления,
	|	Товары.Родитель КАК Родитель,
	|	Товары.Код КАК Код,
	|	Товары.Артикул КАК Артикул,
	|	Товары.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Товары.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ТипНоменклатурыРасширенный КАК ТипНоменклатурыРасширенный,
	|	Товары.ОсновнаяЕдиницаУчета КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0) / ОсновнаяЕдиница.Коэффициент КАК ВНаличииОстаток,
	|	(ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСкладаОстаток, 0)) / ОсновнаяЕдиница.Коэффициент КАК Доступно,
	|	0 КАК Цена
	|	//ПОЛЯ_ДЛЯ_ОТБОРА
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|	//СОЕДИНЕНИЯ
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ
	|			Остаток.Номенклатура                    КАК Номенклатура,
	|			СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток,
	|			СУММА(Остаток.ВРезервеСоСкладаОстаток)  КАК ВРезервеСоСкладаОстаток
	|		ИЗ
	|			РегистрНакопления.СвободныеОстатки.Остатки(
	|					,
	|					Организация В (&Организация) И Склад В (&Склад)
	|					{(Номенклатура).* КАК Номенклатура,
	|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
	|								ИНАЧЕ СерияНоменклатуры.ГоденДо
	|					КОНЕЦ КАК СерияГоденДо}
	|				) КАК Остаток
	|			{ЛЕВОЕ СОЕДИНЕНИЕ
	|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
	|			ПО
	|				Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
	|		{ГДЕ
	|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура
	|		) КАК ВсеОстатки
	|	ПО
	|		Товары.Ссылка = ВсеОстатки.Номенклатура}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ОсновнаяЕдиница
	|	ПО
	|		Товары.Ссылка = ОсновнаяЕдиница.Номенклатура
	|		И Товары.ОсновнаяЕдиницаУчета = ОсновнаяЕдиница.ЕдиницаИзмерения}
	|	
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|";
	
	Если Форма.ПодборВПоступление Тогда
		ТекстЗапросаЕдиницы = "(ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА Товары.ОсновнаяЕдиницаУчета ИНАЧЕ Товары.Упаковка КОНЕЦ)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.ОсновнаяЕдиницаУчета", ТекстЗапросаЕдиницы);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодборВДокументыСписания(Форма)
	
	Если ЗначениеЗаполнено(Форма.ВидЦены) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.Ссылка КАК Номенклатура,
		|	Товары.ПометкаУдаления КАК ПометкаУдаления,
		|	Товары.Родитель КАК Родитель,
		|	Товары.Код КАК Код,
		|	Товары.Артикул КАК Артикул,
		|	Товары.Наименование КАК Наименование,
		|	ВЫРАЗИТЬ(Товары.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.ТипНоменклатурыРасширенный КАК ТипНоменклатурыРасширенный,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, Товары.ОсновнаяЕдиницаУчета) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ВсеОстатки.СерияНоменклатуры, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры,
		|	ЕСТЬNULL(ВсеОстатки.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК Партия,
		|	ЕСТЬNULL(ВсеОстатки.ИсточникФинансирования, ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)) КАК ИсточникФинансированияОстаток,
		|	ЕСТЬNULL(ВсеОстатки.МестоХранения, ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)) КАК МестоХраненияОстаток,
		|	ВЫБОР
		|		КОГДА ВсеОстатки.ВНаличии ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Упаковка ЕСТЬ NULL
		|					ТОГДА ВсеОстатки.ВНаличии / ОсновнаяЕдиница.Коэффициент
		|				ИНАЧЕ ВсеОстатки.ВНаличии / ЕдиницаЦены.Коэффициент
		|			КОНЕЦ
		|	КОНЕЦ КАК ВНаличииОстаток,
		|	ВЫБОР
		|		КОГДА ВсеОстатки.ВНаличии ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Упаковка ЕСТЬ NULL
		|					ТОГДА (ВсеОстатки.ВНаличии - ВсеОстатки.ВРезервеСоСклада) / ОсновнаяЕдиница.Коэффициент
		|				ИНАЧЕ (ВсеОстатки.ВНаличии - ВсеОстатки.ВРезервеСоСклада) / ЕдиницаЦены.Коэффициент
		|			КОНЕЦ
		|	КОНЕЦ КАК Доступно,
		|	ВЫБОР
		|		КОГДА ВсеОстатки.ВНаличии ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА (ВсеОстатки.ВНаличии - ВсеОстатки.ВРезервеСоСклада) > (ЕСТЬNULL(ВсеОстаткиНаДату.ВНаличии, 0) - ЕСТЬNULL(ВсеОстаткиНаДату.ВРезервеСоСклада, 0))
		|					ТОГДА (ЕСТЬNULL(ВсеОстаткиНаДату.ВНаличии, 0) - ЕСТЬNULL(ВсеОстаткиНаДату.ВРезервеСоСклада, 0))
		|				ИНАЧЕ (ВсеОстатки.ВНаличии - ВсеОстатки.ВРезервеСоСклада)
		|			КОНЕЦ / ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Упаковка ЕСТЬ NULL
		|					ТОГДА ОсновнаяЕдиница.Коэффициент
		|				ИНАЧЕ ЕдиницаЦены.Коэффициент
		|			КОНЕЦ
		|	КОНЕЦ КАК ДоступноНаДату,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
		|	//ПОЛЯ_ДЛЯ_ОТБОРА
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|	//СОЕДИНЕНИЯ
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			СерияНоменклатуры КАК СерияНоменклатуры,
		|			Партия КАК Партия,
		|			ИсточникФинансирования КАК ИсточникФинансирования,
		|			МестоХранения КАК МестоХранения,
		|			ВНаличииОстаток КАК ВНаличии,
		|			ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					(МестоХранения).* КАК МестоХранения,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК ТоварыНаСкладах
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				ТоварыНаСкладах.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		) КАК ВсеОстатки
		|		ПО
		|			Товары.Ссылка = ВсеОстатки.Номенклатура}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			СерияНоменклатуры КАК СерияНоменклатуры,
		|			Партия КАК Партия,
		|			ИсточникФинансирования КАК ИсточникФинансирования,
		|			МестоХранения КАК МестоХранения,
		|			ВНаличииОстаток КАК ВНаличии,
		|			ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки({&ДатаОстатков}
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					(МестоХранения).* КАК МестоХранения,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК ТоварыНаСкладах
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				ТоварыНаСкладах.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		) КАК ВсеОстаткиНаДату
		|		ПО
		|			ВсеОстатки.Номенклатура = ВсеОстаткиНаДату.Номенклатура
		|			И ВсеОстатки.СерияНоменклатуры = ВсеОстаткиНаДату.СерияНоменклатуры
		|			И ВсеОстатки.Партия = ВсеОстаткиНаДату.Партия
		|			И ВсеОстатки.ИсточникФинансирования = ВсеОстаткиНаДату.ИсточникФинансирования
		|			И ВсеОстатки.МестоХранения = ВсеОстаткиНаДату.МестоХранения}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних({&ДатаЦены}, ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
		|		ПО
		|			Товары.Ссылка = ЦеныНоменклатуры.Номенклатура
		|			И ЕстьNULL(ВсеОстатки.СерияНоменклатуры, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЦеныНоменклатуры.СерияНоменклатуры
		|			И ЕстьNULL(ВсеОстатки.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) = ЦеныНоменклатуры.Партия}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
		|	ПО (ИСТИНА)}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
		|	ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ОсновнаяЕдиница
		|	ПО
		|		Товары.Ссылка = ОсновнаяЕдиница.Номенклатура
		|		И Товары.ОсновнаяЕдиницаУчета = ОсновнаяЕдиница.ЕдиницаИзмерения}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницаЦены
		|	ПО
		|		Товары.Ссылка = ЕдиницаЦены.Номенклатура
		|		И ЦеныНоменклатуры.Упаковка = ЕдиницаЦены.ЕдиницаИзмерения}
		|ГДЕ
		|	НЕ Товары.ЭтоГруппа
		|";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.Ссылка КАК Номенклатура,
		|	Товары.ПометкаУдаления КАК ПометкаУдаления,
		|	Товары.Родитель КАК Родитель,
		|	Товары.Код КАК Код,
		|	Товары.Артикул КАК Артикул,
		|	Товары.Наименование КАК Наименование,
		|	ВЫРАЗИТЬ(Товары.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.ТипНоменклатурыРасширенный КАК ТипНоменклатурыРасширенный,
		|	Товары.ОсновнаяЕдиницаУчета КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ВсеОстатки.СерияНоменклатуры, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры,
		|	ЕСТЬNULL(ВсеОстатки.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК Партия,
		|	ЕСТЬNULL(ВсеОстатки.ИсточникФинансирования, ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)) КАК ИсточникФинансированияОстаток,
		|	ЕСТЬNULL(ВсеОстатки.МестоХранения, ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)) КАК МестоХраненияОстаток,
		|	ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) / ОсновнаяЕдиница.Коэффициент КАК ВНаличииОстаток,
		|	(ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСклада, 0)) / ОсновнаяЕдиница.Коэффициент КАК Доступно,
		|	ВЫБОР
		|		КОГДА (ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСклада, 0)) > (ЕСТЬNULL(ВсеОстаткиНаДату.ВНаличии, 0) - ЕСТЬNULL(ВсеОстаткиНаДату.ВРезервеСоСклада, 0))
		|			ТОГДА (ЕСТЬNULL(ВсеОстаткиНаДату.ВНаличии, 0) - ЕСТЬNULL(ВсеОстаткиНаДату.ВРезервеСоСклада, 0))
		|		ИНАЧЕ (ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСклада, 0))
		|	КОНЕЦ / ОсновнаяЕдиница.Коэффициент КАК ДоступноНаДату,
		|	0 КАК Цена
		|	//ПОЛЯ_ДЛЯ_ОТБОРА
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|	//СОЕДИНЕНИЯ
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			СерияНоменклатуры КАК СерияНоменклатуры,
		|			Партия КАК Партия,
		|			ИсточникФинансирования КАК ИсточникФинансирования,
		|			МестоХранения КАК МестоХранения,
		|			ВНаличииОстаток КАК ВНаличии,
		|			ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					(МестоХранения).* КАК МестоХранения,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК ТоварыНаСкладах
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				ТоварыНаСкладах.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		) КАК ВсеОстатки
		|		ПО
		|			Товары.Ссылка = ВсеОстатки.Номенклатура}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			СерияНоменклатуры КАК СерияНоменклатуры,
		|			Партия КАК Партия,
		|			ИсточникФинансирования КАК ИсточникФинансирования,
		|			МестоХранения КАК МестоХранения,
		|			ВНаличииОстаток КАК ВНаличии,
		|			ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки({&ДатаОстатков}
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					(МестоХранения).* КАК МестоХранения,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК ТоварыНаСкладах
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				ТоварыНаСкладах.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		) КАК ВсеОстаткиНаДату
		|		ПО
		|			ВсеОстатки.Номенклатура = ВсеОстаткиНаДату.Номенклатура
		|			И ВсеОстатки.СерияНоменклатуры = ВсеОстаткиНаДату.СерияНоменклатуры
		|			И ВсеОстатки.Партия = ВсеОстаткиНаДату.Партия
		|			И ВсеОстатки.ИсточникФинансирования = ВсеОстаткиНаДату.ИсточникФинансирования
		|			И ВсеОстатки.МестоХранения = ВсеОстаткиНаДату.МестоХранения}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ОсновнаяЕдиница
		|	ПО
		|		Товары.Ссылка = ОсновнаяЕдиница.Номенклатура
		|		И Товары.ОсновнаяЕдиницаУчета = ОсновнаяЕдиница.ЕдиницаИзмерения}
		|ГДЕ
		|	НЕ Товары.ЭтоГруппа
		|";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПоляЗапроса = СхемаЗапроса.ПакетЗапросов[0].Колонки;
	Если ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("Доступно")));
		ПоляЗапроса.Найти("ДоступноНаДату").Псевдоним = "Доступно";
	Иначе
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("ДоступноНаДату")));
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Удалить("ВсеОстаткиНаДату");
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	СтрокаПоиска = "ИЗ
		|	Справочник.Номенклатура КАК Товары";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, "//ПОЛЯ_ДЛЯ_ОТБОРА" + Символы.ПС + СтрокаПоиска + Символы.ПС + "//СОЕДИНЕНИЯ");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодборОписанийТоваров(Форма)
	
	Если Форма.Параметры.ПодборПоФормулярномуСписку Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПериодыДействияФормуляра.Номенклатура     КАК НоменклатураФормуляра,
		|	ОтборНоменклатуры.Номенклатура            КАК Номенклатура,
		|	ОтборНоменклатуры.ТорговоеНаименование    КАК ТорговоеНаименование,
		|	ОтборНоменклатуры.ДействующиеВеществаМНН  КАК ДействующиеВеществаМНН,
		|	ОтборНоменклатуры.ФормаВыпуска            КАК ФормаВыпуска
		|ПОМЕСТИТЬ ДействующийФормуляр
		|ИЗ
		|	РегистрСведений.ПериодыДействияФормулярныхСписковЛекарственныхСредств.СрезПоследних(
		|			&ДатаПериода,
		|			Организация В (&Организация) И
		|			(Отделение = ЗНАЧЕНИЕ(Справочник.ОтделенияОрганизаций.ПустаяСсылка)
		|			//%ФормулярОтделения% ИЛИ Отделение = &Отделение
		|			)
		|	) КАК ПериодыДействияФормуляра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК ОтборНоменклатуры
		|	ПО
		|		ПериодыДействияФормуляра.Номенклатура = ОтборНоменклатуры.КлючАналитики
		|ГДЕ
		|	ПериодыДействияФормуляра.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияФормуляра.Действует)
		|	И ПериодыДействияФормуляра.ПериодЗавершения >= &ДатаПериода
		|//%ФормулярОтделения%СГРУППИРОВАТЬ ПО
		|//%ФормулярОтделения%	ПериодыДействияФормуляра.Номенклатура,
		|//%ФормулярОтделения%	ОтборНоменклатуры.Номенклатура,
		|//%ФормулярОтделения%	ОтборНоменклатуры.ТорговоеНаименование,
		|//%ФормулярОтделения%	ОтборНоменклатуры.ДействующиеВеществаМНН,
		|//%ФормулярОтделения%	ОтборНоменклатуры.ФормаВыпуска
		|//%ФормулярОтделения%ИМЕЮЩИЕ
		|//%ФормулярОтделения%	СУММА(ПериодыДействияФормуляра.ЗначениеДоступа) = 1 ИЛИ СУММА(ПериодыДействияФормуляра.ЗначениеДоступа) = 6
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура.Наименование                          КАК Наименование,
		|	Товары.Номенклатура                                       КАК Номенклатура,
		|	Товары.Номенклатура.ТипНоменклатуры                       КАК ТипНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)    КАК ТорговоеНаименование,
		|	ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка)  КАК ДействующиеВеществаМНН,
		|	ЗНАЧЕНИЕ(Справочник.ФормыВыпуска.ПустаяСсылка)            КАК ФормаВыпуска,
		|	Товары.Номенклатура.ГруппаПКУ                             КАК ГруппаПКУ,
		|	ИСТИНА                                                    КАК ЕстьНоменклатура,
		|	ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0)                   КАК ВНаличииОстаток,
		|	Товары.Номенклатура.ПометкаУдаления                       КАК ПометкаУдаления
		|ИЗ
		|	ДействующийФормуляр КАК Товары
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Остаток.Номенклатура                    КАК Номенклатура,
		|			СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК Остаток
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		СГРУППИРОВАТЬ ПО
		|			Номенклатура
		|		) КАК ВсеОстатки
		|	ПО
		|		Товары.Номенклатура = ВсеОстатки.Номенклатура}
		|ГДЕ
		|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДействующийФормуляр.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ДействующийФормуляр.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|		ИНАЧЕ ДействующийФормуляр.ТорговоеНаименование.Наименование
		|	КОНЕЦ + "", "" + ДействующийФормуляр.ФормаВыпуска.Наименование КАК Наименование,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)         КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)          КАК ТипНоменклатуры,
		|	ДействующийФормуляр.ТорговоеНаименование               КАК ТорговоеНаименование,
		|	ДействующийФормуляр.ДействующиеВеществаМНН             КАК ДействующиеВеществаМНН,
		|	ДействующийФормуляр.ФормаВыпуска                       КАК ФормаВыпуска,
		|	ОписанияЛекарственныхСредств.ГруппаПКУ                 КАК ГруппаПКУ,
		|	МАКСИМУМ(ВЫБОР
		|				КОГДА Товары.Ссылка ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)                                         КАК ЕстьНоменклатура,
		|	МАКСИМУМ(ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0))      КАК ВНаличииОстаток,
		|	ЛОЖЬ                                                   КАК ПометкаУдаления
		|ИЗ
		|	ДействующийФормуляр КАК ДействующийФормуляр
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.КЛП КАК ОписанияЛекарственныхСредств
		|	ПО
		|		ДействующийФормуляр.ФормаВыпуска = ОписанияЛекарственныхСредств.ФормаВыпуска
		|		И ДействующийФормуляр.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И ВЫБОР
		|			КОГДА ДействующийФормуляр.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|				ТОГДА ДействующийФормуляр.ДействующиеВеществаМНН = ОписанияЛекарственныхСредств.ДействующиеВеществаМНН
		|			ИНАЧЕ ДействующийФормуляр.ТорговоеНаименование = ОписанияЛекарственныхСредств.ТорговоеНаименование
		|		КОНЕЦ
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.Номенклатура КАК Товары
		|	ПО
		|		ОписанияЛекарственныхСредств.Ссылка = Товары.ЭлементКАТ}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Остаток.Номенклатура                    КАК Номенклатура,
		|			СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК Остаток
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		СГРУППИРОВАТЬ ПО
		|			Номенклатура
		|		) КАК ВсеОстатки
		|	ПО
		|		Товары.Ссылка = ВсеОстатки.Номенклатура}
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ДействующийФормуляр.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ДействующийФормуляр.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|		ИНАЧЕ ДействующийФормуляр.ТорговоеНаименование.Наименование
		|	КОНЕЦ + "", "" + ДействующийФормуляр.ФормаВыпуска.Наименование,
		|	ДействующийФормуляр.ТорговоеНаименование,
		|	ДействующийФормуляр.ДействующиеВеществаМНН,
		|	ДействующийФормуляр.ФормаВыпуска,
		|	ОписанияЛекарственныхСредств.ГруппаПКУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДействующийФормуляр.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ДействующийФормуляр.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|		ИНАЧЕ ДействующийФормуляр.ТорговоеНаименование.Наименование
		|	КОНЕЦ + "", "" + ДействующийФормуляр.ФормаВыпуска.Наименование КАК Наименование,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)         КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)          КАК ТипНоменклатуры,
		|	ДействующийФормуляр.ТорговоеНаименование               КАК ТорговоеНаименование,
		|	ДействующийФормуляр.ДействующиеВеществаМНН             КАК ДействующиеВеществаМНН,
		|	ДействующийФормуляр.ФормаВыпуска                       КАК ФормаВыпуска,
		|	ОписанияЛекарственныхСредств.ГруппаПКУ                 КАК ГруппаПКУ,
		|	МАКСИМУМ(ВЫБОР
		|				КОГДА Товары.Ссылка ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)                                         КАК ЕстьНоменклатура,
		|	МАКСИМУМ(ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0))      КАК ВНаличииОстаток,
		|	ЛОЖЬ                                                   КАК ПометкаУдаления
		|ИЗ
		|	ДействующийФормуляр КАК ДействующийФормуляр
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.РегистрЛекарственныхСредств КАК ОписанияЛекарственныхСредств
		|	ПО
		|		ДействующийФормуляр.ФормаВыпуска = ОписанияЛекарственныхСредств.ФормаВыпуска
		|		И ДействующийФормуляр.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И ВЫБОР
		|			КОГДА ДействующийФормуляр.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|				ТОГДА ДействующийФормуляр.ДействующиеВеществаМНН = ОписанияЛекарственныхСредств.ДействующиеВеществаМНН
		|			ИНАЧЕ ДействующийФормуляр.ТорговоеНаименование = ОписанияЛекарственныхСредств.ТорговоеНаименование
		|		КОНЕЦ
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.Номенклатура КАК Товары
		|	ПО
		|		ОписанияЛекарственныхСредств.Ссылка = Товары.ЭлементКАТ}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Остаток.Номенклатура                    КАК Номенклатура,
		|			СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура,
		|					(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|								ИНАЧЕ СерияНоменклатуры.ГоденДо
		|					КОНЕЦ КАК СерияГоденДо}
		|				) КАК Остаток
		|			{ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|			ПО
		|				Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
		|		{ГДЕ
		|			ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|		СГРУППИРОВАТЬ ПО
		|			Номенклатура
		|		) КАК ВсеОстатки
		|	ПО
		|		Товары.Ссылка = ВсеОстатки.Номенклатура}
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ДействующийФормуляр.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ДействующийФормуляр.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|		ИНАЧЕ ДействующийФормуляр.ТорговоеНаименование.Наименование
		|	КОНЕЦ + "", "" + ДействующийФормуляр.ФормаВыпуска.Наименование,
		|	ДействующийФормуляр.ТорговоеНаименование,
		|	ДействующийФормуляр.ДействующиеВеществаМНН,
		|	ДействующийФормуляр.ФормаВыпуска,
		|	ОписанияЛекарственныхСредств.ГруппаПКУ
		|";
		
		Если Форма.Параметры.ТипФормуляра = "ФормулярОтделения" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ФормулярОтделения%", "");
		КонецЕсли;
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СписокТоваров.Наименование            КАК Наименование,
		|	СписокТоваров.Номенклатура            КАК Номенклатура,
		|	СписокТоваров.ТипНоменклатуры         КАК ТипНоменклатуры,
		|	СписокТоваров.ТорговоеНаименование    КАК ТорговоеНаименование,
		|	СписокТоваров.ДействующиеВеществаМНН  КАК ДействующиеВеществаМНН,
		|	СписокТоваров.ФормаВыпуска            КАК ФормаВыпуска,
		|	СписокТоваров.ГруппаПКУ               КАК ГруппаПКУ,
		|	СписокТоваров.ЕстьНоменклатура        КАК ЕстьНоменклатура,
		|	СписокТоваров.ВНаличииОстаток         КАК ВНаличииОстаток,
		|	СписокТоваров.ПометкаУдаления         КАК ПометкаУдаления
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(ОписанияЛекарственныхСредств.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|			ИНАЧЕ ОписанияЛекарственныхСредств.ТорговоеНаименование.Наименование
		|		КОНЕЦ + "", "" + ОписанияЛекарственныхСредств.ФормаВыпуска.Наименование КАК Наименование,
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)         КАК Номенклатура,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)          КАК ТипНоменклатуры,
		|		ОписанияЛекарственныхСредств.ТорговоеНаименование      КАК ТорговоеНаименование,
		|		ОписанияЛекарственныхСредств.ДействующиеВеществаМНН    КАК ДействующиеВеществаМНН,
		|		ОписанияЛекарственныхСредств.ФормаВыпуска              КАК ФормаВыпуска,
		|		ОписанияЛекарственныхСредств.ГруппаПКУ                 КАК ГруппаПКУ,
		|		МАКСИМУМ(ВЫБОР
		|					КОГДА Товары.Ссылка ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)                                         КАК ЕстьНоменклатура,
		|		МАКСИМУМ(ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0))      КАК ВНаличииОстаток,
		|		ЛОЖЬ                                                   КАК ПометкаУдаления
		|	ИЗ
		|		Справочник.КЛП КАК ОписанияЛекарственныхСредств
		|		{ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.Номенклатура КАК Товары
		|		ПО
		|			ОписанияЛекарственныхСредств.Ссылка = Товары.ЭлементКАТ}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				Остаток.Номенклатура                    КАК Номенклатура,
		|				СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток
		|			ИЗ
		|				РегистрНакопления.СвободныеОстатки.Остатки(
		|						,
		|						Организация В (&Организация) И Склад В (&Склад)
		|						{(Номенклатура).* КАК Номенклатура,
		|						(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|						ВЫБОР
		|							КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|									ИНАЧЕ СерияНоменклатуры.ГоденДо
		|						КОНЕЦ КАК СерияГоденДо}
		|					) КАК Остаток
		|				{ЛЕВОЕ СОЕДИНЕНИЕ
		|					РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|				ПО
		|					Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
		|			{ГДЕ
		|				ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|			СГРУППИРОВАТЬ ПО
		|				Номенклатура
		|			) КАК ВсеОстатки
		|		ПО
		|			Товары.Ссылка = ВсеОстатки.Номенклатура}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР
		|			КОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(ОписанияЛекарственныхСредств.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|			ИНАЧЕ ОписанияЛекарственныхСредств.ТорговоеНаименование.Наименование
		|		КОНЕЦ + "", "" + ОписанияЛекарственныхСредств.ФормаВыпуска.Наименование,
		|		ОписанияЛекарственныхСредств.ТорговоеНаименование,
		|		ОписанияЛекарственныхСредств.ДействующиеВеществаМНН,
		|		ОписанияЛекарственныхСредств.ФормаВыпуска,
		|		ОписанияЛекарственныхСредств.ГруппаПКУ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(ОписанияЛекарственныхСредств.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|			ИНАЧЕ ОписанияЛекарственныхСредств.ТорговоеНаименование.Наименование
		|		КОНЕЦ + "", "" + ОписанияЛекарственныхСредств.ФормаВыпуска.Наименование КАК Наименование,
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)         КАК Номенклатура,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)          КАК ТипНоменклатуры,
		|		ОписанияЛекарственныхСредств.ТорговоеНаименование      КАК ТорговоеНаименование,
		|		ОписанияЛекарственныхСредств.ДействующиеВеществаМНН    КАК ДействующиеВеществаМНН,
		|		ОписанияЛекарственныхСредств.ФормаВыпуска              КАК ФормаВыпуска,
		|		ОписанияЛекарственныхСредств.ГруппаПКУ                 КАК ГруппаПКУ,
		|		МАКСИМУМ(ВЫБОР
		|					КОГДА Товары.Ссылка ЕСТЬ NULL
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)                                         КАК ЕстьНоменклатура,
		|		МАКСИМУМ(ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0))      КАК ВНаличииОстаток,
		|		ЛОЖЬ                                                   КАК ПометкаУдаления
		|	ИЗ
		|		Справочник.РегистрЛекарственныхСредств КАК ОписанияЛекарственныхСредств
		|		{ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.Номенклатура КАК Товары
		|		ПО
		|			ОписанияЛекарственныхСредств.Ссылка = Товары.ЭлементКАТ}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				Остаток.Номенклатура                    КАК Номенклатура,
		|				СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток
		|			ИЗ
		|				РегистрНакопления.СвободныеОстатки.Остатки(
		|						,
		|						Организация В (&Организация) И Склад В (&Склад)
		|						{(Номенклатура).* КАК Номенклатура,
		|						(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|						ВЫБОР
		|							КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|									ИНАЧЕ СерияНоменклатуры.ГоденДо
		|						КОНЕЦ КАК СерияГоденДо}
		|					) КАК Остаток
		|				{ЛЕВОЕ СОЕДИНЕНИЕ
		|					РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|				ПО
		|					Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
		|			{ГДЕ
		|				ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|			СГРУППИРОВАТЬ ПО
		|				Номенклатура
		|			) КАК ВсеОстатки
		|		ПО
		|			Товары.Ссылка = ВсеОстатки.Номенклатура}
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР
		|			КОГДА ОписанияЛекарственныхСредств.ТорговоеНаименование = ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(ОписанияЛекарственныхСредств.ДействующиеВеществаМНН.НаименованиеПолное КАК СТРОКА(250))
		|			ИНАЧЕ ОписанияЛекарственныхСредств.ТорговоеНаименование.Наименование
		|		КОНЕЦ + "", "" + ОписанияЛекарственныхСредств.ФормаВыпуска.Наименование,
		|		ОписанияЛекарственныхСредств.ТорговоеНаименование,
		|		ОписанияЛекарственныхСредств.ДействующиеВеществаМНН,
		|		ОписанияЛекарственныхСредств.ФормаВыпуска,
		|		ОписанияЛекарственныхСредств.ГруппаПКУ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Товары.Наименование                                       КАК Наименование,
		|		Товары.Ссылка                                             КАК Номенклатура,
		|		Товары.ТипНоменклатуры                                    КАК ТипНоменклатуры,
		|		ЗНАЧЕНИЕ(Справочник.ТорговыеНаименования.ПустаяСсылка)    КАК ТорговоеНаименование,
		|		ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка)  КАК ДействующиеВеществаМНН,
		|		ЗНАЧЕНИЕ(Справочник.ФормыВыпуска.ПустаяСсылка)            КАК ФормаВыпуска,
		|		Товары.ГруппаПКУ                                          КАК ГруппаПКУ,
		|		ИСТИНА                                                    КАК ЕстьНоменклатура,
		|		ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0)                   КАК ВНаличииОстаток,
		|		Товары.ПометкаУдаления                                    КАК ПометкаУдаления
		|	ИЗ
		|		Справочник.Номенклатура КАК Товары
		|		{ЛЕВОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				Остаток.Номенклатура                    КАК Номенклатура,
		|				СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток
		|			ИЗ
		|				РегистрНакопления.СвободныеОстатки.Остатки(
		|						,
		|						Организация В (&Организация) И Склад В (&Склад)
		|						{(Номенклатура).* КАК Номенклатура,
		|						(ИсточникФинансирования).* КАК ИсточникФинансирования,
		|						ВЫБОР
		|							КОГДА ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
		|									ИНАЧЕ СерияНоменклатуры.ГоденДо
		|						КОНЕЦ КАК СерияГоденДо}
		|					) КАК Остаток
		|				{ЛЕВОЕ СОЕДИНЕНИЕ
		|					РегистрСведений.КэшИнформацииОбОбъектах КАК СерияЗабракована
		|				ПО
		|					Остаток.СерияНоменклатуры = СерияЗабракована.Объект}
		|			{ГДЕ
		|				ЕСТЬNULL(СерияЗабракована.Забракован, ЛОЖЬ) КАК СерияЗабракована}
		|			СГРУППИРОВАТЬ ПО
		|				Номенклатура
		|			) КАК ВсеОстатки
		|		ПО
		|			Товары.Ссылка = ВсеОстатки.Номенклатура}
		|	ГДЕ
		|		НЕ ЭтоГруппа
		|		И НЕ ЭтоЛекарственноеСредство
		|	) КАК СписокТоваров
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьВариантПоискаПоНастройкам(Форма)
	
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров", "");
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;
	
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьСтандартныйПоискПриПодбореТоваров");
	
	ПодборТоваровКлиентСервер.УстановитьТекущуюСтраницуПоВариантуПоиска(Форма);
	
КонецПроцедуры

Процедура УстановитьСкладскиеНастройкиПоПараметрам(Форма)
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Форма.Параметры.Документ)) Тогда
		ИмяТаблицы = Форма.Параметры.Документ.Метаданные().ПолноеИмя();
	Иначе
		ИмяТаблицы = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Организация) Тогда
		Форма.Организации.Добавить(Форма.Организация);
	Иначе
		Форма.Организации.ЗагрузитьЗначения(Справочники.Организации.ПолучитьДанныеВыбора(Новый Структура("ТаблицаОбъекта", ИмяТаблицы)).ВыгрузитьЗначения());
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Форма.Склад));
	Если ЗначениеЗаполнено(Форма.Склад) Тогда
		Форма.Склады.Добавить(Форма.Склад);
	Иначе
		Если ПодборТоваровКлиентСервер.ПодборВОтделении(Форма) Тогда
			ТипыСкладов = Перечисления.ТипыСкладов.ТипыСкладовОтделений();
		ИначеЕсли ЗначениеЗаполнено(Форма.МестоХраненияОстатка) Тогда
			ТипыСкладов = Перечисления.ТипыСкладов.ТипыСкладовАптеки();
		Иначе
			ТипыСкладов = Неопределено;
		КонецЕсли;
		Форма.Склады.ЗагрузитьЗначения(Справочники.Склады.ПолучитьДоступные(ТипыСкладов, ИмяТаблицы));
	КонецЕсли;
	
	Форма.ИспользоватьИсточникиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	
	Если Форма.ИспользоватьИсточникиФинансирования Тогда
		Форма.ЗапретитьИзменениеИсточникаФинансирования = Форма.Параметры.ЗапретитьИзменениеИсточникаФинансирования;
		Форма.ИсточникФинансирования = Форма.Параметры.ИсточникФинансирования;
		Если ЗначениеЗаполнено(Форма.Склад) Тогда
			РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.Склад, "ТипСклада, ИсточникФинансирования");
			Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Форма.ИсточникФинансирования = РеквизитыСклада.ИсточникФинансирования;
				Форма.ЗапретитьИзменениеИсточникаФинансирования = Истина;
			КонецЕсли;
		КонецЕсли;
		Форма.ОтборИсточникФинансирования = ЗначениеЗаполнено(Форма.ИсточникФинансирования);
		Если Форма.ЗапретитьИзменениеИсточникаФинансирования Тогда
			БлокируемыеЭлементы = Новый Массив;
			БлокируемыеЭлементы.Добавить("ИсточникФинансирования");
			БлокируемыеЭлементы.Добавить("ОтборИсточникФинансирования");
			БлокируемыеЭлементы.Добавить("КорзинаИсточникФинансирования");
			ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, БлокируемыеЭлементы, "ТолькоПросмотр", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		Форма.РежимПодбораБезРазрезовУчета = Форма.Параметры.РежимПодбораБезРазрезовУчета;
		Если Форма.РежимПодбораБезРазрезовУчета Тогда
			СкрываемыеЭлементы = Новый Массив;
			СкрываемыеЭлементы.Добавить("КорзинаСерияНоменклатуры");
			СкрываемыеЭлементы.Добавить("КорзинаПартия");
			СкрываемыеЭлементы.Добавить("КорзинаИсточникФинансирования");
			СкрываемыеЭлементы.Добавить("КорзинаМестоХранения");
			ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, СкрываемыеЭлементы, "Видимость", Ложь);
		КонецЕсли;
		
		Форма.ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Форма, ПодборТоваровСервер));
		Если Не Форма.ПараметрыУчетаНоменклатуры.ИспользоватьСерии Тогда
			СкрываемыеЭлементы = Новый Массив;
			СкрываемыеЭлементы.Добавить("КорзинаСерияНоменклатуры");
			СкрываемыеЭлементы.Добавить("СписокТоваровРасширенныйПоискСерияНоменклатуры");
			СкрываемыеЭлементы.Добавить("СписокТоваровСтандартныйПоискСерияНоменклатуры");
			ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, СкрываемыеЭлементы, "Видимость", Ложь);
		КонецЕсли;
		Если Не Форма.ПараметрыУчетаНоменклатуры.ИспользоватьПартии Тогда
			СкрываемыеЭлементы = Новый Массив;
			СкрываемыеЭлементы.Добавить("КорзинаПартия");
			СкрываемыеЭлементы.Добавить("СписокТоваровРасширенныйПоискПартия");
			СкрываемыеЭлементы.Добавить("СписокТоваровСтандартныйПоискПартия");
			ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, СкрываемыеЭлементы, "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Только в наличии на складе ""%1""'"),
		?(ЗначениеЗаполнено(Форма.Склад), Форма.Склад, НСтр("ru='<склад не выбран>'")));
	Форма.Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
	
	УстановитьОтборТолькоВНаличии(Форма);
	УстановитьОтборОстатковБезЗабракованныхИПросроченных(Форма);
	УстановитьОтборОстатковПоИсточникуФинансирования(Форма);
	
КонецПроцедуры

Процедура УстановитьЗначенияПоНастройкамФормыПодбора(Форма)
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы, "");
	Если Настройки <> Неопределено Тогда
		
		Для Каждого Настройка Из СохраняемыеНастройки(Форма) Цикл
			
			Если Настройки.Свойство(Настройка) Тогда
				Форма[Настройка] = Настройки[Настройка];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваФормыПодбораПоПараметрам(Форма)
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
		Форма.Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
		Форма.Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
	КонецЕсли;
	
	Форма.РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
	Форма.РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров Или Форма.РежимПодбораБезКоличественныхПараметров;
	Форма.Валюта = Параметры.Валюта;
	Форма.Дата = Параметры.Дата;
	Форма.Организация = Параметры.Организация;
	
	Форма.МестоХраненияОстатка = Параметры.МестоХраненияОстатка;
	Форма.Склад = Форма.Параметры.Склад;
	
	Форма.ЗапретитьИзменениеЦены = Параметры.ЗапретитьИзменениеЦены;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) Тогда
		Форма.ПодборВПоступление = Параметры.ПодборВПоступление;
		Форма.Поставщик = Параметры.Поставщик;
		Форма.ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") И ЗначениеЗаполнено(Форма.Поставщик);
		Если Не Форма.ИспользоватьНоменклатуруПоставщиков Тогда
			Элементы.КорзинаНоменклатураПоставщика.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
		Форма.ВидЦены = Параметры.ВидЦены;
		Если Не ЗначениеЗаполнено(Форма.ВидЦены) Тогда
			Элементы.СписокТоваровСтандартныйПоискЦена.Видимость = Ложь;
			Элементы.СписокТоваровРасширенныйПоискЦена.Видимость = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Дата) И КонецДня(Форма.Дата) < ТекущаяДатаСеанса() Тогда
			Форма.ДатаОстатков = Форма.Дата;
			ЗаголовокОстатка = СтрЗаменить(НСтр("ru = 'Доступно на %1'"), "%1", Формат(Форма.ДатаОстатков, "ДЛФ=D"));
			Элементы.СписокТоваровСтандартныйПоискДоступно.Заголовок = ЗаголовокОстатка;
			Элементы.СписокТоваровРасширенныйПоискДоступно.Заголовок = ЗаголовокОстатка;
		КонецЕсли;
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма) Тогда
			Форма.АвтозаполнениеБезУчетаМинимальнойУпаковки = Параметры.АвтозаполнениеБезУчетаМинимальнойУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.РежимПодбораБезКоличественныхПараметров Тогда
		Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
		Элементы.ЗапрашиватьКоличество.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
		Элементы.КорзинаСуммовыеПараметры.Видимость = Ложь;
	Иначе
		Элементы.КорзинаСуммовыеПараметры.Доступность = Не Форма.ЗапретитьИзменениеЦены;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Валюта) Тогда
		Форма.Валюта = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Элементы.КорзинаЦена.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Форма.Валюта);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		Элементы.СписокТоваровСтандартныйПоискЦена.Заголовок = Элементы.КорзинаЦена.Заголовок;
		Элементы.СписокТоваровРасширенныйПоискЦена.Заголовок = Элементы.КорзинаЦена.Заголовок;
	КонецЕсли;
	
	Элементы.ЗапрашиватьКоличество.Пометка = Форма.ЗапрашиватьКоличество;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма) Тогда
		Элементы.ГруппаПодборТоваров.Видимость = Форма.ПоказыватьПодборТоваров;
	Иначе
		Элементы.ГруппаПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиФормыПодбора(Форма)
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	КонецЕсли;
	
	Настройки = Новый Структура;
	Для Каждого Настройка Из СохраняемыеНастройки(Форма) Цикл
		Настройки.Вставить(Настройка, Форма[Настройка]);
	КонецЦикла;
	
	Если Настройки.Количество() > 0 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", Настройки);
	КонецЕсли;
	
КонецПроцедуры

Функция СохраняемыеНастройки(Форма)
	
	Настройки = Новый Массив;
	Настройки.Добавить("ЗапрашиватьКоличество");
	Настройки.Добавить("ТолькоВНаличии");
	Настройки.Добавить("ОтборОстатковБезЗабракованныхИПросроченных");
	Настройки.Добавить("ОтображатьОстатки");
	Настройки.Добавить("ПоказыватьПодборТоваров");
	Настройки.Добавить("ПоказыватьПодобранныеТовары");
	
	КоличествоНастроек = Настройки.Количество();
	Для Индекс = 1 По КоличествоНастроек Цикл
		
		Настройка = Настройки[КоличествоНастроек - Индекс];
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Настройка) Тогда
			Настройки.Удалить(КоличествоНастроек - Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Процедура НастроитьФильтрыСпискаТоваров(Форма)
	
	СохранятьНастройкиПриЗакрытии = Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма);
	
	Фильтры = Новый Массив;
	Фильтры.Добавить(ФильтрыСписков.ОписаниеФильтра(ФильтрНоменклатурыПоИерархииКлиентСервер.Идентификатор()));
	Фильтры.Добавить(ФильтрыСписков.ОписаниеФильтра(ФильтрНоменклатурыЛекарственныхСредствКлиентСервер.Идентификатор()));
	Фильтры.Добавить(ФильтрыСписков.ОписаниеФильтра(ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор()));
	
	ФильтрыСписков.ПриСозданииНаСервере(Форма, Фильтры, Форма.Элементы.ГруппаФильтрыНоменклатуры.Имя, "СписокТоваров", Истина, СохранятьНастройкиПриЗакрытии);
	
	Команда = Форма.Команды.Добавить("ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам");
	Команда.Действие = "Подключаемый_ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам";
	Команда.Заголовок = НСтр("ru = 'Номенклатура с аналогичными свойствами'");
	Команда.Картинка = БиблиотекаКартинок.ФильтрПоСвойствам;
	
	Элементы = Форма.Элементы;
	Элемент = Элементы.Добавить("СписокТоваровСтандартныйПоискКонтекстноеМенюНоменклатураСАналогичнымиСвойствами", Тип("КнопкаФормы"), Элементы.СписокТоваровСтандартныйПоискКонтекстноеМеню);
	Элемент.ИмяКоманды = "ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам";
	
	Элемент = Элементы.Добавить("СписокТоваровРасширенныйПоискКонтекстноеМенюНоменклатураСАналогичнымиСвойствами", Тип("КнопкаФормы"), Элементы.СписокТоваровРасширенныйПоискКонтекстноеМеню);
	Элемент.ИмяКоманды = "ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам";
	
	ПанельОтборовКлиентСервер.СкрытьПоказатьПанельОтборов(Форма, Не ФильтрыСписковКлиентСервер.ИспользоватьФильтры(Форма));
	
КонецПроцедуры

Процедура НастроитьПоискВСпискеТоваров(Форма)
	
	РасширенныйПоискВСписках.ПриСозданииНаСервере(Форма, "ГруппаРасширенныйПоиск", "СписокТоваров", "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма)
	
	ОтборПоТипуНоменклатуры = Неопределено;
	Форма.Параметры.Свойство("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
	
	Если ОтборПоТипуНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
	Если ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборыПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатуры);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ФиксированныйМассив") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(Новый Массив(ОтборПоТипуНоменклатуры));
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("Массив") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("СписокЗначений") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров, "ТипНоменклатуры", ОтборыПоТипуНоменклатуры, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборыПоТипуНоменклатуры.Количество() > 0));
	
КонецПроцедуры

Процедура ОформитьПанельФильтров(Форма)
	
	ПанельФильтров = Форма.Элементы.Найти("ГруппаПанельФильтров");
	Если ПанельФильтров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПанельОтборов.ОформитьПанельОтборов(Форма, ПанельФильтров);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
