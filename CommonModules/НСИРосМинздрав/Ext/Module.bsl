
#Область ПрограммныйИнтерфейс

// Запросить классификаторы с учетом фильтра по наименованию
Функция ЗапроситьКлассификаторы(ФильтрНаименование, ФильтрИдентификатор) Экспорт
	Классификаторы_ = ОбщиеМеханизмы.СоздатьТаблицуЗначений("Наименование, Идентификатор");
	
	ПараметрыЗапроса_ = Новый Структура("ID", ПолучитьIDПользователя());
	
	ИмяОперации_ = "getRefbookList";
	ТекстОперации_ = СформироватьТекстОперацииSOAP(ИмяОперации_, ПараметрыЗапроса_);
	ТегEnvelope_ = СформироватьEnvelope(ТекстОперации_);
	
	РезультатОбмена_ = ВыполнитьОбменДанными(ТегEnvelope_, ИмяОперации_);
	Если ТипЗнч(РезультатОбмена_) <> Тип("ОбъектXDTO") Тогда
		Возврат Классификаторы_;
	КонецЕсли;
	
	СписокЗаписей_ = РезультатОбмена_.item;
	Если ТипЗнч(СписокЗаписей_) <> Тип("СписокXDTO") Тогда
		Возврат Классификаторы_;
	КонецЕсли;
	
	Для Каждого ЭлементВерхнегоУровня_ Из СписокЗаписей_ Цикл
		СписокПолей_ = ЭлементВерхнегоУровня_.children.item;
		КлассификаторИсточник_ = Новый Структура("Наименование,Идентификатор");
		Для Каждого Элемент_ Из СписокПолей_ Цикл
			Если ВРег(Элемент_.key) = "S_NAME" Тогда
				КлассификаторИсточник_.Наименование = Элемент_.value;
			ИначеЕсли ВРег(Элемент_.key) = "OID" Тогда
				КлассификаторИсточник_.Идентификатор = Элемент_.value;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(КлассификаторИсточник_.Наименование)
				И НЕ ЗначениеЗаполнено(КлассификаторИсточник_.Идентификатор)
		Тогда
			Продолжить;
		КонецЕсли;
		
		ТребуетсяДобавить_ = Ложь;
		Если ЗначениеЗаполнено(ФильтрНаименование) 
				И СтрНайти(КлассификаторИсточник_.Наименование, ФильтрНаименование) > 0 
		Тогда
			ТребуетсяДобавить_ = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ФильтрИдентификатор) 
				И СтрНайти(КлассификаторИсточник_.Идентификатор, ФильтрИдентификатор) > 0 Тогда
			ТребуетсяДобавить_ = Истина;
		КонецЕсли;
		
		Если ТребуетсяДобавить_ Тогда
			Классификатор_ = Классификаторы_.Добавить();
			ЗаполнитьЗначенияСвойств(Классификатор_, КлассификаторИсточник_);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Классификаторы_;
КонецФункции

// Запросить версии классификатора.
Функция ЗапроситьВерсииКлассификатора(Идентификатор) Экспорт
	ВерсииКлассификатора_ = Неопределено;
	
	ПараметрыЗапроса_ = Новый Структура("OID, ID", Идентификатор, ПолучитьIDПользователя());
	
	ИмяОперации_ = "getVersionList";
	ТекстОперации_ = СформироватьТекстОперацииSOAP(ИмяОперации_, ПараметрыЗапроса_);
	ТегEnvelope_ = СформироватьEnvelope(ТекстОперации_);
	
	Результат_ = ВыполнитьОбменДанными(ТегEnvelope_, ИмяОперации_);
	Если ТипЗнч(Результат_) = Тип("ОбъектXDTO") Тогда
		ВерсииКлассификатора_ = ПрочитатьВерсииКлассификатора(Результат_);
	КонецЕсли;
	
	Возврат ВерсииКлассификатора_;
КонецФункции

// Запросить актуальную версию классификатора.
Функция ЗапроситьАктуальнуюВерсиюКлассификатора(Идентификатор) Экспорт
	АктуальнаяВерсия_ = Неопределено;
	
	Версии_ = ЗапроситьВерсииКлассификатора(Идентификатор);
	Если ТипЗнч(Версии_) = Тип("ТаблицаЗначений") И Версии_.Количество() > 0 Тогда
		Версии_.Сортировать("ДатаСоздания Убыв");
		АктуальнаяВерсия_ = Версии_[0].НомерВерсии;	
	КонецЕсли;
	
	Возврат АктуальнаяВерсия_;
КонецФункции

// Запросить классификатор указанной версии.
Функция ЗапроситьКлассификатор(Идентификатор, НомерВерсии, МенеджерСправочника, ПараметрыЗагрузки) Экспорт
	ТаблицаДанных_ = Неопределено;
	
	Если ПараметрыЗагрузки = Неопределено Или Не ПараметрыЗагрузки.Свойство("НеОбновлятьКарточку") Тогда
		ПаспортXDTO_ = ЗапроситьПаспортКлассификатора(Идентификатор, ПараметрыЗагрузки);
		Если ТипЗнч(ПаспортXDTO_) = Тип("ОбъектXDTO") Тогда
			Справочники.СправочникиФНСИ.СоздатьОбновитьКарточкуСправочникаФНСИ(ПаспортXDTO_, МенеджерСправочника, ПараметрыЗагрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗагрузки <> Неопределено И ПараметрыЗагрузки.Свойство("ОграниченияПолей") Тогда
		ТаблицаДанных_ = ЗапроситьКлассификаторСФильтрацией(
			Идентификатор, НомерВерсии, МенеджерСправочника, ПараметрыЗагрузки
		);
	Иначе
		КоличествоЧастей = ЗапроситьКоличествоЧастейКлассификатора(Идентификатор, НомерВерсии);
		Если КоличествоЧастей = 0 Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
				МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
				ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменМедицинаПоликлиника_НеУдалосьЗагрузитьКоличествоЧастейСправочника");
			Иначе
				ВызватьИсключение "Не удалось загрузить количество частей справочника";
			КонецЕсли;
			
		ИначеЕсли КоличествоЧастей = 1 Тогда
			ТаблицаДанных_ = ЗапроситьКлассификаторЦеликом(
				Идентификатор, НомерВерсии, МенеджерСправочника, ПараметрыЗагрузки
			);
		Иначе
			ТаблицаДанных_ = ЗапроситьКлассификаторПоЧастям(
				Идентификатор, НомерВерсии, КоличествоЧастей, МенеджерСправочника, ПараметрыЗагрузки
			);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаДанных_;
КонецФункции

// Запросить количество частей классификатора версии.
Функция ЗапроситьКоличествоЧастейКлассификатора(Идентификатор, НомерВерсии) Экспорт
	КоличествоЧастей_ = 0;
	
	ПараметрыЗапроса_ = Новый Структура;
	ПараметрыЗапроса_.Вставить("OID", Идентификатор);
	ПараметрыЗапроса_.Вставить("ID", ПолучитьIDПользователя());
	ПараметрыЗапроса_.Вставить("ВерсияКлассификатора", НомерВерсии);
	
	ИмяОперации_ = "getRefbookParts";
	ТекстОперации_ = СформироватьТекстОперацииSOAP(ИмяОперации_, ПараметрыЗапроса_);
	ТегEnvelope_ = СформироватьEnvelope(ТекстОперации_);
	
	Результат_ = ВыполнитьОбменДанными(ТегEnvelope_, ИмяОперации_);
	Если ТипЗнч(Результат_) = Тип("ОбъектXDTO") Тогда
		КоличествоЧастей_ = ПрочитатьКоличествоЧастейКлассификатораИзXDTO(Результат_);
	КонецЕсли; 
	
	Возврат КоличествоЧастей_
КонецФункции

//Запросить паспорт
Функция ЗапроситьПаспортКлассификатора(Идентификатор, ПараметрыЗагрузки = Неопределено) Экспорт
	ИмяОперации_ = "passport";
	
	ПараметрыЗапроса_ = Новый Структура;
	ПараметрыЗапроса_.Вставить("ID", ПолучитьIDПользователя());
	ПараметрыЗапроса_.Вставить("OID", Идентификатор);
	ПополнитьПараметрыЗагрузкиПараметрамиЗапроса(ПараметрыЗагрузки, ПараметрыЗапроса_);
	
	ТекстОперации_ = СформироватьТекстОперацииREST(ИмяОперации_, ПараметрыЗапроса_);
	
	Результат_ = ВыполнитьОбменДаннымиREST(ТекстОперации_, ИмяОперации_, Идентификатор);
	
	Возврат Результат_;
КонецФункции

// Запросить классификатор указанной версии в фоне.
Процедура ЗапроситьКлассификаторВФоне(Параметры, АдресХранилища) Экспорт
	Результат_ = Неопределено;
	
	Если Параметры.ПараметрыЗагрузки <> Неопределено И Параметры.ПараметрыЗагрузки.Свойство("БыстраяЗагрузка") Тогда
		Если Не Параметры.ПараметрыЗагрузки.Свойство("НеОбновлятьКарточку") Тогда
			ПаспортXDTO_ = ЗапроситьПаспортКлассификатора(Параметры.Идентификатор, Параметры.ПараметрыЗагрузки);
			Если ТипЗнч(ПаспортXDTO_) = Тип("ОбъектXDTO") Тогда
				Справочники.СправочникиФНСИ.СоздатьОбновитьКарточкуСправочникаФНСИ(ПаспортXDTO_, Параметры.МенеджерОбъекта, Параметры.ПараметрыЗагрузки);
			КонецЕсли;
		КонецЕсли;
		ЗапроситьКлассификаторПоЧастямИСразуДобавлять(Параметры);
	Иначе
		ТаблицаДанных_ = ЗапроситьКлассификатор(
			Параметры.Идентификатор, Параметры.НомерВерсии, Параметры.МенеджерОбъекта, Параметры.ПараметрыЗагрузки
		);
		Если ТипЗнч(ТаблицаДанных_) = Тип("ТаблицаЗначений") Тогда
			ДополнитьКолонкиТаблицыПараметрамиЕслиНужно(ТаблицаДанных_, Параметры);
			Результат_ = ОбщегоНазначенияНСИ.СопоставитьЗагружаемыеДанныеСЭлементамиВБазе(
				ТаблицаДанных_, Параметры.ИмяОбъекта, Параметры.Идентификатор, Параметры.ПараметрыЗагрузки
			);
		КонецЕсли;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Результат_, АдресХранилища);
КонецПроцедуры

// Загрузить классификатор
Процедура ЗагрузитьКлассификатор(Идентификатор, Наименование, МенеджерСправочника, ПараметрыЗагрузки) Экспорт
	НомерВерсии_ = ЗапроситьАктуальнуюВерсиюКлассификатора(Идентификатор);
	Если НомерВерсии_ <> Неопределено Тогда
		ТаблицаДанных_ = ЗапроситьКлассификатор(
			Идентификатор, НомерВерсии_, МенеджерСправочника, ПараметрыЗагрузки
		);
		Если ТипЗнч(ТаблицаДанных_) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаДанных_ Из ТаблицаДанных_ Цикл
				Данные_ = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных_);
				КодМинздрава_ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					Данные_, "КодМинздрава", Идентификатор
				);
				
				ЭлементСправочника_ = МенеджерСправочника.НайтиПоРеквизиту(
					"КодМинздрава", КодМинздрава_
				);
				Если Не ЗначениеЗаполнено(ЭлементСправочника_) Тогда
					Основание_ = Новый Структура;
					Основание_.Вставить("Наименование", Наименование);
					Основание_.Вставить("Идентификатор", Идентификатор);
					Основание_.Вставить("ВерсияКлассификатораМинздрава", НомерВерсии_);
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Основание_, Данные_, Истина);
					
					ОбъектСправочника_ = МенеджерСправочника.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ОбъектСправочника_, Данные_);
					ОбъектСправочника_.Заполнить(Основание_);
					ОбъектСправочника_.Записать();
					ЭлементСправочника_ = ОбъектСправочника_.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//процедура регламентного задания проверки актуальности версии справочников ФНСИ Минздрава
Процедура ПроверкаАктуальностиСправочниковФНСИ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиСправочниковФНСИ);

	Тип_ = Новый ОписаниеТипов("Дата");
	ТекущаяДата_ = ТекущаяДатаСеанса();

	Запрос_ = Новый Запрос(
		"ВЫБРАТЬ
		|	СправочникиФНСИ.Ссылка КАК Ссылка,
		|	СправочникиФНСИ.Наименование КАК Наименование,
		|	СправочникиФНСИ.ВерсияКлассификатора КАК ВерсияКлассификатора,
		|	СправочникиФНСИ.ДатаПубликации КАК ДатаПубликации,
		|	СправочникиФНСИ.ОсновнойОИД КАК ОсновнойОИД
		|ИЗ
		|	Справочник.СправочникиФНСИ КАК СправочникиФНСИ
		|ГДЕ
		|	СправочникиФНСИ.Актуальность = ИСТИНА
		|	И СправочникиФНСИ.ДатаПоследнейПроверки < &ТекущаяДатаНачалоДня
		|	И СправочникиФНСИ.ОсновнойОИД <> """""
	);
	
	Запрос_.УстановитьПараметр("ТекущаяДатаНачалоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса_ = Запрос_.Выполнить().Выбрать();
	
	Пока РезультатЗапроса_.Следующий() Цикл
		Паспорт_ = ЗапроситьПаспортКлассификатора(РезультатЗапроса_.ОсновнойОИД);
		Если
			РезультатЗапроса_.ВерсияКлассификатора <> Паспорт_.version И
			РезультатЗапроса_.ДатаПубликации < Тип_.ПривестиЗначение(Паспорт_.publishDate + ":00")
		Тогда
			КарточкаОбъект_ = РезультатЗапроса_.Ссылка.ПолучитьОбъект();
			КарточкаОбъект_.Актуальность = Ложь;
			КарточкаОбъект_.ДатаПоследнейПроверки = ТекущаяДата_;
		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры

// Проверяет справочники и ПВХ на пустующие коды Минздрава или иные реквизиты являющиеся полем коюча в НСИ Россминздрав.
//
// Параметры:
//   Проверка            - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка;
//   ПараметрыПроверки   - см. КонтрольВеденияУчета.ОписаниеПроблемы.ПараметрыПроверки
//
Процедура ПроверитьНаличиеНезаполненныхКодов(Проверка, ПараметрыПроверки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		КонтрольВеденияУчета_ = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	Иначе
		Возврат;
	КонецЕсли;
	ПроцииЗапросса_ = Новый Массив;
	
	Для Каждого Спр_ Из Метаданные.Справочники Цикл
		ТекстЗапроса_ = СформироватьТекстЗапросаНезаполненныхКодов(Спр_);
		Если ТекстЗапроса_ <> Неопределено Тогда
			ПроцииЗапросса_.Добавить(ТекстЗапроса_);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПВХ_ Из Метаданные.ПланыВидовХарактеристик Цикл
		ТекстЗапроса_ = СформироватьТекстЗапросаНезаполненныхКодов(ПВХ_);
		Если ТекстЗапроса_ <> Неопределено Тогда
			ПроцииЗапросса_.Добавить(ТекстЗапроса_);
		КонецЕсли;
	КонецЦикла;
		
	Запрос_ = Новый Запрос;
	Запрос_.Текст = СтрСоединить(
		ПроцииЗапросса_,
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
	);
	РезультатЗапроса_ = Запрос_.Выполнить().Выбрать();
	
	Проверки_ = Новый Соответствие;
	ПроверяемыеОбъекты_ = Новый Массив;
	
	ПараметрыВыполненияПроверки_ = КонтрольВеденияУчета_.ПараметрыВыполненияПроверки(НСтр("ru='У элемента не заполнен код классификатора Минздрава'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонтрольВеденияУчета_.ОчиститьРезультатыПредыдущихПроверок(Проверка, ПараметрыВыполненияПроверки_);
	ВидПроверки_ = КонтрольВеденияУчета_.ВидПроверки(ПараметрыВыполненияПроверки_);
	
	Пока РезультатЗапроса_.Следующий() Цикл
		Проблемы_ = Новый Массив;
		Если РезультатЗапроса_.КодМинздрава <> Неопределено И Не ЗначениеЗаполнено(РезультатЗапроса_.КодМинздрава) Тогда
			Проблемы_.Добавить(СтрШаблон("не заполнен код Минздрава"));
		КонецЕсли;
		Если РезультатЗапроса_.АтрибутCode <> Неопределено И Не ЗначениеЗаполнено(РезультатЗапроса_.АтрибутCode) Тогда
			Проблемы_.Добавить(СтрШаблон("не заполнен атрибут Code"));
		КонецЕсли;
		Если РезультатЗапроса_.КодOIDМедицинскойОрганизации <> Неопределено И Не ЗначениеЗаполнено(РезультатЗапроса_.КодOIDМедицинскойОрганизации) Тогда
			Проблемы_.Добавить(СтрШаблон("не заполнен код OID Медицинской организации"));
		КонецЕсли;
		Если РезультатЗапроса_.КодOIDМедицинскогоПодразделения <> Неопределено И Не ЗначениеЗаполнено(РезультатЗапроса_.КодOIDМедицинскогоПодразделения) Тогда
			Проблемы_.Добавить(СтрШаблон("не заполнен код OID медицинского подразделения"));
		КонецЕсли;
		
		Проблема_ = КонтрольВеденияУчета_.ОписаниеПроблемы(РезультатЗапроса_.Ссылка, ПараметрыПроверки);
		Проблема_.ВидПроверки = ВидПроверки_;
		Проблема_.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = 'У элемента ""%1"" %2'"),
																		РезультатЗапроса_.Наименование,
																		СтрСоединить(Проблемы_, ", ")
																	);
		ПроверяемыеОбъекты_.Добавить(РезультатЗапроса_.Ссылка);
		
		КонтрольВеденияУчета_.ЗаписатьПроблему(Проблема_, ПараметрыПроверки);
		
	КонецЦикла;
	
	ПараметрыПроверки.ПроверяемыеОбъекты = ПроверяемыеОбъекты_;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДопустимыеОперации(Операция)
	
	ДопустимыеОперации_ = Новый Структура(
		"getVersionList, getRefbook, getRefbookParts, getRefbookPartial, getRefbookList"
	);
	
	Если ДопустимыеОперации_.Свойство(Операция) Тогда
		Возврат Операция;
	КонецЕсли;

	__ПРОВЕРКА__(Ложь, "Неизвестный тип параметра операции: " + Операция);
	
КонецФункции

Функция ДопустимыеОперацииREST(Операция)
	
	ДопустимыеОперации_ = Новый Структура("data,passport");
	
	Если ДопустимыеОперации_.Свойство(Операция) Тогда
		Возврат Операция;
	КонецЕсли;
	
	__ПРОВЕРКА__(Ложь, "Неизвестный тип параметра операции: " + Операция);
КонецФункции

Функция СформироватьТекстОперацииSOAP(ИмяОперации, ПараметрыЗапроса)
	
	Операция_ = ДопустимыеОперации(ИмяОперации);
	
	ID_  = ?(ПараметрыЗапроса.Свойство("ID"), ПараметрыЗапроса.ID, "");
	
	Если Операция_ = "getVersionList" Тогда
		__ПОЛЯ__(ПараметрыЗапроса, "OID");
		
		OID_ = ПараметрыЗапроса.OID;
		
		ТекстПараметров_ = "
			|	<userKey5 xsi:type=""xsd:string"">" + ID_ + "</userKey5>
			|	<refbookCode4 xsi:type=""xsd:string"">" + OID_ + "</refbookCode4>"
	ИначеЕсли Операция_ = "getRefbook" Тогда
		__ПОЛЯ__(ПараметрыЗапроса, "OID, ВерсияКлассификатора");
		
		OID_ = ПараметрыЗапроса.OID;
		Версия_ = ПараметрыЗапроса.ВерсияКлассификатора;
		
		ТекстПараметров_ = "
			|	<userKey xsi:type=""xsd:string"">" + ID_ + "</userKey>
			|	<refbookCode xsi:type=""xsd:string"">" + OID_ + "</refbookCode>
			|	<version xsi:type=""xsd:string"">" + Версия_ + "</version>"
	ИначеЕсли Операция_ = "getRefbookParts" Тогда
		__ПОЛЯ__(ПараметрыЗапроса, "OID, ВерсияКлассификатора");
		
		OID_ = ПараметрыЗапроса.OID;
		Версия_ = ПараметрыЗапроса.ВерсияКлассификатора;
		
		ТекстПараметров_ = "
			|	<userKey3 xsi:type=""xsd:string"">" + ID_ + "</userKey3>
			|	<refbookCode2 xsi:type=""xsd:string"">" + OID_ + "</refbookCode2>
			|	<version2 xsi:type=""xsd:string"">" + Версия_ + "</version2>"
	ИначеЕсли Операция_ = "getRefbookPartial" Тогда
		__ПОЛЯ__(ПараметрыЗапроса, "OID, ВерсияКлассификатора, НомерЧастиСправочника");
		
		OID_ = ПараметрыЗапроса.OID;
		Версия_ = ПараметрыЗапроса.ВерсияКлассификатора;
		НомерЧастиСправочника_ = ПараметрыЗапроса.НомерЧастиСправочника;
		
		ТекстПараметров_ = "
			|	<userKey2 xsi:type=""xsd:string"">" + ID_ + "</userKey2>
			|	<refbookCode1 xsi:type=""xsd:string"">" + OID_ + "</refbookCode1>
			|	<version1 xsi:type=""xsd:string"">" + Версия_ + "</version1>
			|	<partNumber xsi:type=""xsd:integer"">" + НомерЧастиСправочника_ + "</partNumber>"
	ИначеЕсли Операция_ = "getRefbookList" Тогда
		ТекстПараметров_ = "
			|	<userKey1 xsi:type=""xsd:string"">" + ID_ + "</userKey1>";
	КонецЕсли;
		
	ТекстОперации_ = 
		"<m:" + Операция_ + " xmlns:m=""urn:service""
		|		xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
		|		xmlns:soapenc=""http://schemas.xmlsoap.org/soap/encoding/""
		|		xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
		|		xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|		soap:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/"">"
		+ ТекстПараметров_ + "
		|</m:" + Операция_ + ">";
	
	Возврат ТекстОперации_;
	
КонецФункции

Функция СформироватьТекстОперацииREST(ИмяОперации, ПараметрыЗапроса)
	
	Операция_ = ДопустимыеОперацииREST(ИмяОперации);
	
	ID_  = ?(ПараметрыЗапроса.Свойство("ID"), ПараметрыЗапроса.ID, "");
	
	Если Операция_ = "data" Тогда
		__ПОЛЯ__(ПараметрыЗапроса, "OID, ВерсияКлассификатора, ОграниченияПолей");
		__ПРОВЕРКА__(ПараметрыЗапроса.ОграниченияПолей.Количество() <> 0);
		
		OID_ = ПараметрыЗапроса.OID;
		Версия_ = ПараметрыЗапроса.ВерсияКлассификатора;
		ОграниченияПолей_ = "";
		Для Каждого Отбор_ Из ПараметрыЗапроса.ОграниченияПолей Цикл
			ОграниченияПолей_ = ОграниченияПолей_ + "&filters=" + Отбор_.Поле + "|" + Отбор_.Значение;
		КонецЦикла;
		
		Возврат "/data?userKey=" + ID_ + "&identifier=" + OID_ + ?(ЗначениеЗаполнено(Версия_), "&version=" + Версия_, "") + "&size=500"+ ОграниченияПолей_;
	ИначеЕсли Операция_ = "passport" Тогда
		__ПОЛЯ__(ПараметрыЗапроса, "OID");
		OID_ = ПараметрыЗапроса.OID;
		Возврат "/passport?userKey=" + ID_ + "&identifier=" + OID_
	КонецЕсли;
	
	КонецФункции

Функция СформироватьEnvelope(ТекстОперации)
	
	Конверт_ = СтрШаблон(
		"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
		|	<soap:Header/>
		|	<soap:Body>
		|		%1
		|	</soap:Body>
		|</soap:Envelope>",
		ТекстОперации
	);
	
	Возврат Конверт_;
	
КонецФункции

Функция ВыполнитьОбменДанными(Запрос, ИмяОперации)
	
	АдресСервера_ = МестоположениеWSDL();
	РесурсНаСервере_ = "";
	ПозицияЗавершенияСхемы_ = СтрНайти(АдресСервера_, "://");
	Если ПозицияЗавершенияСхемы_ > 0 Тогда
		СтрокаURI_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3);
		ПозицияЗавершенияСоединения = СтрНайти(СтрокаURI_, "/");
		ДлинаСоединения_ = ?(ПозицияЗавершенияСоединения > 0, ПозицияЗавершенияСоединения - 1, СтрДлина(СтрокаURI_));
		РесурсНаСервере_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3 + ДлинаСоединения_);
		АдресСервера_ = Лев(АдресСервера_, ПозицияЗавершенияСхемы_ + 2 + ДлинаСоединения_);
		
		ПозицияПараметров_ = СтрНайти(РесурсНаСервере_, "?");
		ДлинаРесурсаНаСервере_ = ?(ПозицияПараметров_ > 0, ПозицияПараметров_ - 1, СтрДлина(РесурсНаСервере_));
		РесурсНаСервере_ = Лев(РесурсНаСервере_, ДлинаРесурсаНаСервере_);
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения_ = "";
	СоединениеHTTP_ = УстановитьСоединениеССерверомИнтернета(
		АдресСервера_, ОписаниеОшибкиУстановкиСоединения_
	);
	Если СоединениеHTTP_ = Неопределено Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_НеУдалосьУстановитьСоединениеССервером",
				Новый Структура(
					"ОписаниеОшибки",
					ОписаниеОшибкиУстановкиСоединения_
				)
			);
		Иначе
			ВызватьИсключение стрШаблон("Не удалось установить соединение с сервером: %1", ОписаниеОшибкиУстановкиСоединения_);
		КонецЕсли;

	КонецЕсли;
	
	ТелоЗапросаSOAP_ = Запрос;
	
	Попытка
		
		HTTPЗапрос_ = Новый HTTPЗапрос(РесурсНаСервере_);
		HTTPЗапрос_.УстановитьТелоИзСтроки(
			ТелоЗапросаSOAP_,
			,
			ИспользованиеByteOrderMark.НеИспользовать
		);
		
		ЗаголовкиHTTP_ = HTTPЗапрос_.Заголовки;
		ЗаголовкиHTTP_.Вставить("Content-Type", "text/xml; charset=utf-8");
		ЗаголовкиHTTP_.Вставить("Proxy-Connection", "Keep-Alive");
		
		HTTPОтвет_ = СоединениеHTTP_.ОтправитьДляОбработки(HTTPЗапрос_);
		
	Исключение
		
		ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
		Возврат Неопределено;
		
	КонецПопытки;
	
	СтрокаОтвета_ = HTTPОтвет_.ПолучитьТелоКакСтроку();
	
	Если Не ЗначениеЗаполнено(СтрокаОтвета_) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат_ = ОбработатьОтветСервиса(ИмяОперации, СтрокаОтвета_);
	
	Возврат Результат_;
	
КонецФункции

Функция ВыполнитьОбменДаннымиПоОткрытойСессииREST(СоединениеHTTP, РесурсНаСервере, Запрос, ИмяОперации, ПараметрыЗагрузки)
	
	ТелоЗапросаREST_ = Запрос;
	
	Попытка
		
		HTTPЗапрос_ = Новый HTTPЗапрос(РесурсНаСервере + ТелоЗапросаREST_);
		HTTPОтвет_ = СоединениеHTTP.Получить(HTTPЗапрос_);
		
	Исключение
		
		ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
		Возврат Неопределено;
		
	КонецПопытки;
	
	СтрокаОтвета_ = HTTPОтвет_.ПолучитьТелоКакСтроку();
	
	Если Не ЗначениеЗаполнено(СтрокаОтвета_) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат_ = ОбработатьОтветСервисаJSON(ИмяОперации, СтрокаОтвета_, ПараметрыЗагрузки);
	
	Возврат Результат_;
	
КонецФункции

Функция ВыполнитьОбменДаннымиREST(Запрос, ИмяОперации, ПараметрыЗагрузки)
	
	АдресСервера_ = МестоположениеREST();
	РесурсНаСервере_ = "";
	ПозицияЗавершенияСхемы_ = СтрНайти(АдресСервера_, "://");
	Если ПозицияЗавершенияСхемы_ > 0 Тогда
		СтрокаURI_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3);
		ПозицияЗавершенияСоединения = СтрНайти(СтрокаURI_, "/");
		ДлинаСоединения_ = ?(ПозицияЗавершенияСоединения > 0, ПозицияЗавершенияСоединения - 1, СтрДлина(СтрокаURI_));
		РесурсНаСервере_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3 + ДлинаСоединения_);
		АдресСервера_ = Лев(АдресСервера_, ПозицияЗавершенияСхемы_ + 2 + ДлинаСоединения_);
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения_ = "";
	СоединениеHTTP_ = УстановитьСоединениеССерверомИнтернета(
		АдресСервера_, ОписаниеОшибкиУстановкиСоединения_
	);
	Если СоединениеHTTP_ = Неопределено Тогда

		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_НеУдалосьУстановитьСоединениеССервером",
				Новый Структура(
					"ОписаниеОшибки",
					ОписаниеОшибкиУстановкиСоединения_
				)
			);
		Иначе
			ВызватьИсключение стрШаблон("Не удалось установить соединение с сервером: %1", ОписаниеОшибкиУстановкиСоединения_);
		КонецЕсли;
	КонецЕсли;
	
	ТелоЗапросаREST_ = Запрос;
	
	Попытка
		
		HTTPЗапрос_ = Новый HTTPЗапрос(РесурсНаСервере_ + ТелоЗапросаREST_);
		HTTPОтвет_ = СоединениеHTTP_.Получить(HTTPЗапрос_);
		
	Исключение
		
		ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
		Возврат Неопределено;
		
	КонецПопытки;
	
	СтрокаОтвета_ = HTTPОтвет_.ПолучитьТелоКакСтроку();
	
	Если Не ЗначениеЗаполнено(СтрокаОтвета_) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат_ = ОбработатьОтветСервисаJSON(ИмяОперации, СтрокаОтвета_, ПараметрыЗагрузки);
	
	Возврат Результат_;
	
КонецФункции

Функция МестоположениеWSDL()
	
	Возврат "https://nsi.rosminzdrav.ru/wsdl/SOAP-server.v2.php?wsdl";
	
КонецФункции

Функция МестоположениеREST()
	
	Возврат "https://nsi.rosminzdrav.ru:443/port/rest";
	
КонецФункции

Функция ОбработатьОтветСервиса(ИмяОперации, СтрокаОтветаXML)
	Если СтрНайти(СтрокаОтветаXML,"<!DOCTYPE html>") = 1 Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_Росминздрав_НеожиданныйОтветСервиса",
				Новый Структура(
					"ТекстСообщения",
					""
				)
			);
		Иначе
			ВызватьИсключение стрШаблон("Обмен данными Росминздрав. Неожиданный ответ сервиса.
							|Проверьте корректность идентификатора пользователя в разделе Администрирование - Федеральные веб-сервисы.");
		КонецЕсли;

	КонецЕсли;
	
	ЧтениеXML_ = Новый ЧтениеXML;
	ЧтениеXML_.УстановитьСтроку(СтрокаОтветаXML);
	ПостроительDOM_ = Новый ПостроительDOM;
	ДокументDOM_ = ПостроительDOM_.Прочитать(ЧтениеXML_);
	ЭлементыFault_ = ДокументDOM_.ПолучитьЭлементыПоИмени(xmlns_soap(), "Fault");
	Если Не 0 = ЭлементыFault_.Количество() Тогда
		ВызватьИсключение ЭлементыFault_[0].ТекстовоеСодержимое;
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеXML_.Закрыть();
	
	ЭлементыBody_ = ДокументDOM_.ПолучитьЭлементыПоИмени(xmlns_soap(), "Body");
	Если Не ЭлементыBody_.Количество() = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйДочернийУBody_ = ЭлементыBody_[0].ПервыйДочерний;
	Если Неопределено = ПервыйДочернийУBody_ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПространствоИмен_ = ПервыйДочернийУBody_.URIПространстваИмен;
	ЛокальноеИмя_ = ПервыйДочернийУBody_.ЛокальноеИмя;
	
	__ПРОВЕРКА__(ПространствоИмен_ = xmlns_service(), "ОбменДаннымиСРосминздравом: Неожиданный ответ сервера.");
	
	ЗаписьXML_ = Новый ЗаписьXML;
	ЗаписьXML_.УстановитьСтроку("UTF-8");
	
	ЗаписьDOM_ = Новый ЗаписьDOM;
	ЗаписьDOM_.Записать(ПервыйДочернийУBody_, ЗаписьXML_);
	
	ПервыйДочернийУBodyСтрокой_ = ЗаписьXML_.Закрыть();
	
	ОбъектXDTO_ = ОбщиеМеханизмыXDTO.ПрочитатьОбъектXDTO(ПервыйДочернийУBodyСтрокой_);
	
	Если ОбъектXDTO_ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяОперации = "getVersionList" Тогда
		__ПРОВЕРКА__(ЛокальноеИмя_ = "getVersionListResponse", "ОбменДаннымиСРосминздравом: Неожиданный ответ сервера на сообщение getVersionList.");
		Результат_ = ОбъектXDTO_.getVersionListReturn;
	ИначеЕсли ИмяОперации = "getRefbook" Тогда
		__ПРОВЕРКА__(ЛокальноеИмя_ = "getRefbookResponse", "ОбменДаннымиСРосминздравом: Неожиданный ответ сервера на сообщение getRefbook.");
		Результат_ = ОбъектXDTO_.getRefbookReturn;
	ИначеЕсли ИмяОперации = "getRefbookParts" Тогда
		__ПРОВЕРКА__(ЛокальноеИмя_ = "getRefbookPartsResponse", "ОбменДаннымиСРосминздравом: Неожиданный ответ сервера на сообщение getRefbookParts.");
		Результат_ = ОбъектXDTO_.getRefbookPartsReturn;
	ИначеЕсли ИмяОперации = "getRefbookPartial" Тогда
		__ПРОВЕРКА__(ЛокальноеИмя_ = "getRefbookPartialResponse", "ОбменДаннымиСРосминздравом: Неожиданный ответ сервера на сообщение getRefbookPartial.");
		Результат_ = ОбъектXDTO_.getRefbookPartialReturn;
	ИначеЕсли ИмяОперации = "getRefbookList" Тогда
		__ПРОВЕРКА__(ЛокальноеИмя_ = "getRefbookListResponse", "ОбменДаннымиСРосминздравом: Неожиданный ответ сервера на сообщение getRefbookList.");
		Результат_ = ОбъектXDTO_.getRefbookListReturn;
	Иначе
		__ПРОВЕРКА__(Ложь, "ОбменДаннымиСРосминздравом: Неопределенное описание операции веб-сервиса.");
		Результат_ = Неопределено;
	КонецЕсли;
	
	Если Результат_ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	__ТИП__(Результат_, "ОбъектXDTO");
	
	Если Тип("ОбъектXDTO") = ТипЗнч(Результат_.item) Тогда
		Если Не Неопределено = Результат_.item.Свойства().Получить("key") 
			И "errors" = Результат_.item.key 
		Тогда
			ЕстьСообщенияПользователю_ = ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю");

			Ошибки_ = Результат_.item.children.item;
			Если Тип("СписокXDTO") = ТипЗнч(Ошибки_) Тогда
				ТекстОшибки_ = "";
				Для Каждого Элемент_ Из Ошибки_ Цикл
				
					Если ЕстьСообщенияПользователю_ Тогда
						МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
						
						ТекстОшибки_ = ТекстОшибки_ +
						?(ЗначениеЗаполнено(ТекстОшибки_), Символы.ПС, "") + 
						МодульСообщенияПользователю.Получить(
							"ОбменДанными_КодОшибки", 
							Новый Структура(
								"КлючОшибки, ЗначениеОшибки",
								Элемент_.key,
								Элемент_.value
							)
						);
					Иначе
						ТекстОшибки_ = ТекстОшибки_ +
						?(ЗначениеЗаполнено(ТекстОшибки_), Символы.ПС, "") + 
						стрШаблон(
							"Код ошибки: %1. %2", Элемент_.key, Элемент_.value
						);
					КонецЕсли;

				КонецЦикла;
					ВызватьИсключение ТекстОшибки_
			Иначе
				Если ЕстьСообщенияПользователю_ Тогда
					МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
					ВызватьИсключение МодульСообщенияПользователю.Получить(
						"ОбменДанными_КодОшибки", 
						Новый Структура(
							"КлючОшибки, ЗначениеОшибки",
							Ошибки_.key,
							Ошибки_.value
						)
					);
				Иначе
					ВызватьИсключение стрШаблон("Код ошибки: %1. %2", Ошибки_.key, Ошибки_.value);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат_;
	
КонецФункции

Функция ОбработатьОтветСервисаJSON(ИмяОперации, СтрокаОтветаJSON, ПараметрыЗагрузки)
	Результат_ = Неопределено;
	Попытка
		ЧтениеJSON_ = Новый ЧтениеJSON;
		ЧтениеJSON_.УстановитьСтроку(СтрокаОтветаJSON);
		Результат_ = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON_);
		ЧтениеJSON_.Закрыть();
	Исключение
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_Росминздрав_НеожиданныйОтветСервиса",
				Новый Структура(
					"ТекстСообщения",
					СтрокаОтветаJSON
				)
			);
		Иначе
			ВызватьИсключение стрШаблон("Обмен данными Росминздрав. Неожиданный ответ сервиса.
							|Проверьте корректность идентификатора пользователя в разделе Администрирование - Федеральные веб-сервисы.
							|%1", СтрокаОтветаJSON);
		КонецЕсли;

	КонецПопытки;
	
	Если Результат_ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	__ТИП__(Результат_, "ОбъектXDTO");
	
	Если ИмяОперации = "data" Тогда
	
		Если Тип("Строка") = ТипЗнч(Результат_.result) И Результат_.result = "OK" Тогда
			__ТИП__(Результат_.list, "ОбъектXDTO");
			Если Результат_.list.Свойства().Количество() = 0 Тогда
				ЗаполняемыеРеквизиты_ = Новый Массив;
				Если ПараметрыЗагрузки.Свойство("ОграниченияПолей") Тогда
					Для Каждого Отбор_ Из ПараметрыЗагрузки.ОграниченияПолей Цикл
						Если Отбор_.Свойство("ЗаполняемыйРеквизит") Тогда
							Поле_ = "ЗаполняемыйРеквизит";
						Иначе
							Поле_ = "Поле";
						КонецЕсли;
						Если ЗначениеЗаполнено(Отбор_[Поле_]) Тогда
							ЗаполняемыеРеквизиты_.Добавить(стрШаблон("%1: %2",Отбор_[Поле_], Отбор_.Значение));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
					МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
					ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_Росминздрав_ДанныеНеНайдены",
						Новый Структура(
							"ЗаполняемыеРеквизиты",
							СтрСоединить(ЗаполняемыеРеквизиты_, ", ")
						)
					);
				Иначе
					ВызватьИсключение стрШаблон("Обмен данными Росминздрав. Данные не найдены. Проверьте корректность заполняемых реквизитов: %1.", СтрСоединить(ЗаполняемыеРеквизиты_, ", "));
				КонецЕсли;

			КонецЕсли;
		Иначе
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
				МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
				ВызватьИсключение МодульСообщенияПользователю.Получить(
					"ОбменДанными_КодОшибки", 
					Новый Структура(
						"КлючОшибки, ЗначениеОшибки",
						Результат_.resultCode,
						Результат_.resultText
					)
				);
			Иначе
				ВызватьИсключение стрШаблон("Код ошибки: %1. %2", Результат_.resultCode, Результат_.resultText);
			КонецЕсли;

		КонецЕсли;
		
		Возврат Результат_.list;
		
	ИначеЕсли ИмяОперации = "passport" Тогда
		Если Тип("Строка") = ТипЗнч(Результат_.result) И Результат_.result = "OK" Тогда
			Возврат Результат_;
		Иначе
			Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
				МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
				ВызватьИсключение СтрШаблон(
					"Справочник '%1'. %2", ПараметрыЗагрузки,
					МодульСообщенияПользователю.Получить(
						"ОбменДанными_КодОшибки", 
						Новый Структура(
							"КлючОшибки, ЗначениеОшибки",
							Результат_.resultCode,
							Результат_.resultText
						)
					)
				);
			Иначе
				ВызватьИсключение стрШаблон("Справочник '%1'. Код ошибки: %2. %3", ПараметрыЗагрузки, Результат_.resultCode, Результат_.resultText);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция xmlns_service()
	Возврат "urn:service";
КонецФункции

Функция xmlns_soap()
	Возврат "http://schemas.xmlsoap.org/soap/envelope/";
КонецФункции

Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ОписаниеОшибки = "") Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСервера);
	Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			60,
			?(НРег(Схема) = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();	
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ЗаписьЖурналаРегистрации(
				МодульСообщенияПользователю.Получить("ОбменДанными_УстановлениеСоединенияССерверомИнтернета"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Иначе
			ЗаписьЖурналаРегистрации(
				"Электронный документооборот с контролирующими органами.
				|Установление соединения с сервером интернета",
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецЕсли;

		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция СоздатьСоединениеREST(РесурсНаСервере = "")
	
	АдресСервера_ = МестоположениеREST();
	
	ПозицияЗавершенияСхемы_ = СтрНайти(АдресСервера_, "://");
	Если ПозицияЗавершенияСхемы_ > 0 Тогда
		СтрокаURI_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3);
		ПозицияЗавершенияСоединения = СтрНайти(СтрокаURI_, "/");
		ДлинаСоединения_ = ?(ПозицияЗавершенияСоединения > 0, ПозицияЗавершенияСоединения - 1, СтрДлина(СтрокаURI_));
		РесурсНаСервере = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3 + ДлинаСоединения_);
		АдресСервера_ = Лев(АдресСервера_, ПозицияЗавершенияСхемы_ + 2 + ДлинаСоединения_);
		
		ПозицияПараметров_ = СтрНайти(РесурсНаСервере, "?");
		ДлинаРесурсаНаСервере_ = ?(ПозицияПараметров_ > 0, ПозицияПараметров_ - 1, СтрДлина(РесурсНаСервере));
		РесурсНаСервере = Лев(РесурсНаСервере, ДлинаРесурсаНаСервере_);
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения_ = "";
	СоединениеHTTP_ = УстановитьСоединениеССерверомИнтернета(
		АдресСервера_, ОписаниеОшибкиУстановкиСоединения_
	);
	Если СоединениеHTTP_ = Неопределено Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_НеУдалосьУстановитьСоединениеССервером",
				Новый Структура(
					"ОписаниеОшибки",
					ОписаниеОшибкиУстановкиСоединения_
				)
			);
		Иначе
			ВызватьИсключение стрШаблон("Не удалось установить соединение с сервером: %1", ОписаниеОшибкиУстановкиСоединения_);
		КонецЕсли;

	КонецЕсли;
	Возврат СоединениеHTTP_;
	
КонецФункции

Функция ПолучитьIDПользователя()
	Результат_ = Константы.ФедеральныеВебСервисыНСИРосминздравИдентификаторПользователя.Получить();
	Если Результат_ = "" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменДанными_Росминздрав_НеЗаполненИдентификаторПользователя");
		Иначе
			ВызватьИсключение стрШаблон("Обмен данными Росминздрав. Не заполнен идентификатор пользователя для загрузки справочника, раздел Администрирование - Федеральные веб-сервисы.");
		КонецЕсли;

	КонецЕсли;
	Возврат Результат_;
КонецФункции

Функция ПрочитатьВерсииКлассификатора(ОбъектXDTO)
	
	Таблица_ = Новый ТаблицаЗначений;
	Таблица_.Колонки.Добавить("НомерВерсии", Новый ОписаниеТипов("Строка"));
	Таблица_.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов("Дата"));

	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат Таблица_;
	КонецЕсли; 
	
	СписокЗаписей_ = Новый Массив;
	Если ТипЗнч(ОбъектXDTO.item) = Тип("ОбъектXDTO") Тогда
		СписокЗаписей_.Добавить(ОбъектXDTO.item);
	ИначеЕсли ТипЗнч(ОбъектXDTO.item) = Тип("СписокXDTO") Тогда
		СписокЗаписей_ = ОбъектXDTO.item;
	КонецЕсли; 

	Для каждого ЭлементВерхнегоУровня_ Из СписокЗаписей_ Цикл
		СписокПолей_ = ЭлементВерхнегоУровня_.children.item;
		Если Не ТипЗнч(СписокПолей_) = Тип("СписокXDTO") Тогда
			Возврат Таблица_;
		КонецЕсли; 
		НоваяСтрока_ = Таблица_.Добавить();
		Для Каждого Элемент_ Из СписокПолей_ Цикл
			Если ВРег(Элемент_.key) = "S_VERSION" Тогда
				НоваяСтрока_.НомерВерсии = Элемент_.value;
			ИначеЕсли ВРег(Элемент_.key) = "V_DATE" Тогда
				НоваяСтрока_.ДатаСоздания = АлгоритмыСтроковые.ПреобразоватьСтрокуВДату(
					Элемент_.value
				);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Таблица_.Сортировать("ДатаСоздания Убыв");
	
	Возврат Таблица_;
	
КонецФункции

Функция ПрочитатьКоличествоЧастейКлассификатораИзXDTO(ОбъектXDTO)
	
	Количество_ = 0;
	
	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат Количество_;
	КонецЕсли; 
	
	СписокЗаписей_ = Новый Массив;
	Если ТипЗнч(ОбъектXDTO.item) = Тип("ОбъектXDTO") Тогда
		СписокЗаписей_.Добавить(ОбъектXDTO.item);
	Иначе
		Возврат Количество_
	КонецЕсли; 

	Если Не ТипЗнч(ОбъектXDTO.item) = Тип("ОбъектXDTO") Тогда
		Возврат Количество_;
	КонецЕсли;
	
	Если "partsAmount" = ОбъектXDTO.item.key Тогда
		КоличествоСтрокой_ = ОбъектXDTO.item.value
	КонецЕсли; 

	Попытка
		Количество_ = Число(КоличествоСтрокой_);
	Исключение
		ОбщиеМеханизмы.ОбработатьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Количество_;
	
КонецФункции

Функция ЗапроситьКлассификаторЦеликом(Идентификатор, Версия, МенеджерСправочника, ПараметрыЗагрузки)
	ТаблицаДанных_ = Неопределено;
	
	ПараметрыЗапроса_ = Новый Структура;
	ПараметрыЗапроса_.Вставить("OID", Идентификатор);
	ПараметрыЗапроса_.Вставить("ID", ПолучитьIDПользователя());
	ПараметрыЗапроса_.Вставить("ВерсияКлассификатора", Версия);
	ПополнитьПараметрыЗагрузкиПараметрамиЗапроса(ПараметрыЗагрузки, ПараметрыЗапроса_);
	
	ИмяОперации_ = "getRefbook";
	ТекстОперации_ = СформироватьТекстОперацииSOAP(ИмяОперации_, ПараметрыЗапроса_);
	ТегEnvelope_ = СформироватьEnvelope(ТекстОперации_);
	
	Результат_ = ВыполнитьОбменДанными(ТегEnvelope_, ИмяОперации_);
	Если ТипЗнч(Результат_) = Тип("ОбъектXDTO") Тогда
		ТаблицаДанных_ = МенеджерСправочника.ПрочитатьДанныеКлассификатораИзXDTO(Результат_, ПараметрыЗагрузки);
	КонецЕсли; 
	
	Возврат ТаблицаДанных_
КонецФункции

Функция ЗапроситьКлассификаторСФильтрацией(Идентификатор, Версия, МенеджерСправочника, ПараметрыЗагрузки)
	ТаблицаДанных_ = Неопределено;
	
	ПараметрыЗапроса_ = Новый Структура;
	ПараметрыЗапроса_.Вставить("OID", Идентификатор);
	ПараметрыЗапроса_.Вставить("ID", ПолучитьIDПользователя());
	ПараметрыЗапроса_.Вставить("ВерсияКлассификатора", Версия);
	ПараметрыЗапроса_.Вставить("ОграниченияПолей", ПараметрыЗагрузки.ОграниченияПолей);
	ПополнитьПараметрыЗагрузкиПараметрамиЗапроса(ПараметрыЗагрузки, ПараметрыЗапроса_);
	
	ИмяОперации_ = "data";
	ТекстОперации_ = СформироватьТекстОперацииREST(ИмяОперации_, ПараметрыЗапроса_);
	
	Результат_ = ВыполнитьОбменДаннымиREST(ТекстОперации_, ИмяОперации_, ПараметрыЗагрузки);
	Если ТипЗнч(Результат_) = Тип("ОбъектXDTO") Тогда
		ТаблицаДанных_ = МенеджерСправочника.ПрочитатьДанныеКлассификатораИзXDTO(Результат_, ПараметрыЗагрузки);
	КонецЕсли; 
	
	Возврат ТаблицаДанных_
КонецФункции

Функция ЗапроситьКлассификаторПоЧастям(
	Идентификатор, НомерВерсии, КоличествоЧастей, МенеджерСправочника, ПараметрыЗагрузки
)
	ТаблицаДанных_ = Неопределено;
	
	Для НомерЧасти_ = 1 По КоличествоЧастей Цикл
		ТаблицаДанныхЧасти_ = ЗапроситьЧастьКлассификатора(
			Идентификатор, НомерВерсии, НомерЧасти_, МенеджерСправочника, ПараметрыЗагрузки
		);
		Если ТипЗнч(ТаблицаДанныхЧасти_) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаДанных_ = Неопределено Тогда
				ТаблицаДанных_ = ТаблицаДанныхЧасти_;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДанныхЧасти_, ТаблицаДанных_);
			КонецЕсли;
		Иначе
			ТаблицаДанных_ = Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных_;
КонецФункции

Процедура ЗапроситьКлассификаторПоЧастямИСразуДобавлять(Параметры)
	
	КоличествоЧастей_ = ЗапроситьКоличествоЧастейКлассификатора(Параметры.Идентификатор, Параметры.НомерВерсии);
	Если КоличествоЧастей_ = 0 Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ФункциональныеПодсистемы.СообщенияПользователю") Тогда
			МодульСообщенияПользователю = ОбщегоНазначения.ОбщийМодуль("СообщенияПользователю");
			ВызватьИсключение МодульСообщенияПользователю.Получить("ОбменМедицинаПоликлиника_НеУдалосьЗагрузитьКоличествоЧастейСправочника");
		Иначе
			ВызватьИсключение "Не удалось загрузить количество частей справочника";
		КонецЕсли;

	КонецЕсли;
	ИмяОсновногоКода_ = Неопределено;
	Параметры.ПараметрыЗагрузки.Свойство("ИмяОсновногоКода", ИмяОсновногоКода_);
	ЭтоДанныеМинздрава_ = Ложь;
	ЭтоДанныеОМС_ = Ложь;
	
	РесурсНаСервере_ = "";
	СоединениеHTTP_ = СоздатьСоединениеREST(РесурсНаСервере_);
	ЗапросШаблон_ = СоздатьШаблонЗапросаЧастиКлассификатораREST(Параметры.Идентификатор, Параметры.НомерВерсии, 1, Параметры.ПараметрыЗагрузки);
	
	КоличествоЧастейПо10000_ = КоличествоЧастей_/20;
	Если Цел(КоличествоЧастейПо10000_) <> КоличествоЧастейПо10000_ Тогда
		КоличествоЧастейПо10000_ = Цел(КоличествоЧастейПо10000_) + 1;
	КонецЕсли;
	
	Шаг_ = 100/КоличествоЧастейПо10000_;
	ПроцентВыполнения_ = 0;
	
	Для НомерЧасти_ = 1 По КоличествоЧастейПо10000_ Цикл
		Запрос_ = СтрШаблон(ЗапросШаблон_, Формат(НомерЧасти_, "ЧГ=0"));
		Результат_ = ВыполнитьОбменДаннымиПоОткрытойСессииREST(СоединениеHTTP_, РесурсНаСервере_, Запрос_, "data", Параметры.ПараметрыЗагрузки);
		Если ТипЗнч(Результат_) = Тип("ОбъектXDTO") Тогда
			ТаблицаДанныхЧасти_ = Параметры.МенеджерОбъекта.ПрочитатьДанныеКлассификатораИзXDTO(Результат_, Параметры.ПараметрыЗагрузки);
		КонецЕсли;
	
		Если НомерЧасти_ = 1 Тогда
			ЭтоДанныеМинздрава_ = (ТаблицаДанныхЧасти_.Колонки.Найти("КодМинздрава") <> Неопределено);
			ЭтоДанныеОМС_ = (ТаблицаДанныхЧасти_.Колонки.Найти("КодПоОМС") <> Неопределено);
			Если Не ЗначениеЗаполнено(ИмяОсновногоКода_) Тогда
				ИмяОсновногоКода_ = ?(ЭтоДанныеМинздрава_, "КодМинздрава", "КодПоОМС");
			КонецЕсли;
			
			СвойстваОбъекта_ = ОбщегоНазначенияНСИ.ПолучитьСвойстваОбъекта(
				Параметры.ИмяОбъекта,
				ТаблицаДанныхЧасти_,
				ЭтоДанныеМинздрава_,
				ЭтоДанныеОМС_
			);
		КонецЕсли;
		Если ТипЗнч(ТаблицаДанныхЧасти_) = Тип("ТаблицаЗначений") Тогда
			ДополнитьКолонкиТаблицыПараметрамиЕслиНужно(ТаблицаДанныхЧасти_, Параметры);
			ОбщегоНазначенияНСИ.СопоставитьЗагружаемыеДанныеСЭлементамиВБазеИСразуДобавлять(ТаблицаДанныхЧасти_, Параметры, СвойстваОбъекта_, ИмяОсновногоКода_);
		КонецЕсли;
		
		НовыйШаг_ = ПроцентВыполнения_ + Шаг_;
		ПроцентВыполненияОкр_ = Окр(НовыйШаг_, 0);
		Если ПроцентВыполненияОкр_ > (ПроцентВыполнения_) Тогда
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполненияОкр_, "Выполняется запись изменений");
		КонецЕсли;
		ПроцентВыполнения_ = НовыйШаг_;
	КонецЦикла;
	
	АрхивироватьВсеКромеВерсии(Параметры.ИмяОбъекта, Параметры.НомерВерсии);
	
КонецПроцедуры

Функция ЗапроситьЧастьКлассификатора(Идентификатор, НомерВерсии, НомерЧасти, МенеджерСправочника, ПараметрыЗагрузки)
	ТаблицаДанных_ = Неопределено;
	
	ПараметрыЗапроса_ = Новый Структура;
	ПараметрыЗапроса_.Вставить("OID", Идентификатор);
	ПараметрыЗапроса_.Вставить("ID", ПолучитьIDПользователя());
	ПараметрыЗапроса_.Вставить("ВерсияКлассификатора", НомерВерсии);
	ПараметрыЗапроса_.Вставить("НомерЧастиСправочника", Формат(НомерЧасти, "ЧГ=0"));
	ПополнитьПараметрыЗагрузкиПараметрамиЗапроса(ПараметрыЗагрузки, ПараметрыЗапроса_);
	
	ИмяОперации_ = "getRefbookPartial";
	ТекстОперации_ = СформироватьТекстОперацииSOAP(ИмяОперации_, ПараметрыЗапроса_);
	ТегEnvelope_ = СформироватьEnvelope(ТекстОперации_);
	
	Результат_ = ВыполнитьОбменДанными(ТегEnvelope_, ИмяОперации_);
	Если ТипЗнч(Результат_) = Тип("ОбъектXDTO") Тогда
		ТаблицаДанных_ = МенеджерСправочника.ПрочитатьДанныеКлассификатораИзXDTO(Результат_, ПараметрыЗагрузки);
	КонецЕсли; 
	
	Возврат ТаблицаДанных_;
КонецФункции

Функция СоздатьШаблонЗапросаЧастиКлассификатораREST(Идентификатор, НомерВерсии, НомерЧасти, ПараметрыЗагрузки)
	
	ПараметрыЗапроса_ = Новый Структура;
	ПараметрыЗапроса_.Вставить("OID", Идентификатор);
	ПараметрыЗапроса_.Вставить("ID", ПолучитьIDПользователя());
	ПараметрыЗапроса_.Вставить("ВерсияКлассификатора", НомерВерсии);
	
	ПополнитьПараметрыЗагрузкиПараметрамиЗапроса(ПараметрыЗагрузки, ПараметрыЗапроса_);
	
	ИмяОперации_ = "data";
	
	ID_  = ПолучитьIDПользователя();
	OID_ = Идентификатор;
	Версия_ = НомерВерсии;
		
	Возврат "/data?userKey=" + ID_ + "&identifier=" + Идентификатор + ?(ЗначениеЗаполнено(НомерВерсии), "&version=" + НомерВерсии, "") + "&page=%1&size=10000";
	
КонецФункции

Процедура ПополнитьПараметрыЗагрузкиПараметрамиЗапроса(ПараметрыЗагрузки, ПараметрыЗапроса)
	Если ПараметрыЗагрузки = Неопределено Тогда
		ПараметрыЗагрузки = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗагрузки) = Тип("Структура") Тогда
		ПараметрыЗагрузки.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьКолонкиТаблицыПараметрамиЕслиНужно(Таблица, Параметры)
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		Если Таблица.Колонки.Найти("Наименование") = Неопределено Тогда
			Таблица.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
			Таблица.ЗаполнитьЗначения(Параметры.Наименование, "Наименование");
		КонецЕсли;
			
		Если Таблица.Колонки.Найти("КодМинздрава") = Неопределено Тогда
			Таблица.Колонки.Добавить("КодМинздрава", Новый ОписаниеТипов("Строка"));
			Таблица.ЗаполнитьЗначения(Параметры.Идентификатор, "КодМинздрава");
		КонецЕсли;
			
		Если Таблица.Колонки.Найти("OIDКлассификатораМинздрава") = Неопределено Тогда
			Таблица.Колонки.Добавить("OIDКлассификатораМинздрава", Новый ОписаниеТипов("Строка"));
			Таблица.ЗаполнитьЗначения(Параметры.Идентификатор, "OIDКлассификатораМинздрава");
		КонецЕсли;
			
		Если Таблица.Колонки.Найти("ВерсияКлассификатораМинздрава") = Неопределено Тогда
			Таблица.Колонки.Добавить("ВерсияКлассификатораМинздрава", Новый ОписаниеТипов("Строка"));
			Таблица.ЗаполнитьЗначения(Параметры.НомерВерсии, "ВерсияКлассификатораМинздрава");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура АрхивироватьВсеКромеВерсии(ИмяОбъекта, ВерсияКлассификатораМинздрава)
	
	ТекстЗапроса_ = 
		"ВЫБРАТЬ
		|	Источник.Ссылка КАК Ссылка
		|ИЗ
		|	&Источник КАК Источник
		|ГДЕ
		|	Источник.ВерсияКлассификатораМинздрава <> &ВерсияКлассификатораМинздрава";
	
	ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_, "&Источник", ОбщегоНазначенияНСИ.СтрокаИмениТаблицыОбъектаПоИмени(ИмяОбъекта));
	Запрос_ = Новый Запрос(ТекстЗапроса_);
	Запрос_.УстановитьПараметр("ВерсияКлассификатораМинздрава", ВерсияКлассификатораМинздрава);
	
	Результат_ = Запрос_.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	АрхивированиеСервер.УстановитьАрхивность(Результат_, Истина);
	
КонецПроцедуры

Функция СформироватьТекстЗапросаНезаполненныхКодов(ОбъектМетаданных)
	
	Если СтрНайти(ОбъектМетаданных.Имя, "Удалить_") = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	//Нужная номенклатура кодируется через НМУ в спецификации, остальные виды номенклатуры проверять не слудует.
	Если ОбъектМетаданных.Имя = "Номенклатура" Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяРеквизитаАрхивности_ = Архивирование.ОпределитьИмяРеквизита(ОбъектМетаданных);
	РекКодМинздрава_ = ОбъектМетаданных.Реквизиты.Найти("КодМинздрава");
	РекАтрибутCode_ = ОбъектМетаданных.Реквизиты.Найти("АтрибутCode");
	РекКодOIDМедицинскойОрганизации_ = ОбъектМетаданных.Реквизиты.Найти("КодOIDМедицинскойОрганизации");
	РекКодOIDМедицинскогоПодразделения_ = ОбъектМетаданных.Реквизиты.Найти("КодOIDМедицинскогоПодразделения");
		
	Если
		(РекКодМинздрава_                    <> Неопределено ИЛИ
		РекАтрибутCode_                     <> Неопределено ИЛИ
		РекКодOIDМедицинскойОрганизации_    <> Неопределено ИЛИ
		РекКодOIDМедицинскогоПодразделения_ <> Неопределено) И
		ИмяРеквизитаАрхивности_ <> Неопределено
	Тогда
		ШаблонЗапроса_ = 
			"ВЫБРАТЬ
			|	%Источник%.Ссылка КАК Ссылка,
			|	%Источник%.Наименование КАК Наименование,
			|	%КодМинздрава% КАК КодМинздрава,
			|	%АтрибутCode% КАК АтрибутCode,
			|	%КодOIDМедицинскойОрганизации% КАК КодOIDМедицинскойОрганизации,
			|	%КодOIDМедицинскогоПодразделения% КАК КодOIDМедицинскогоПодразделения
			|ИЗ
			|	%Справочник%.%Источник% КАК %Источник%
			|ГДЕ
			|	%Источник%.ПометкаУдаления = ЛОЖЬ И %Источник%.%ИмяРеквизитаАрхивности% = %ЗначениеДоступности% И
			|	(%Условие%)";
		
		ЗначениеНедоступности_ = Архивирование.ЗначениеНедоступности(ИмяРеквизитаАрхивности_);
		
		ТекстЗапроса_ = ШаблонЗапроса_;
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%Справочник%", ?(Метаданные.Справочники.Содержит(ОбъектМетаданных), "Справочник", "ПланВидовХарактеристик"));
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%ИмяРеквизитаАрхивности%", ИмяРеквизитаАрхивности_);
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%ЗначениеДоступности%", ?(ЗначениеНедоступности_, "ЛОЖЬ", "ИСТИНА"));
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%КодМинздрава%", ?(РекКодМинздрава_ <> Неопределено, "%Источник%.КодМинздрава", "Неопределено"));
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%АтрибутCode%", ?(РекАтрибутCode_ <> Неопределено, "%Источник%.АтрибутCode", "Неопределено"));
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%КодOIDМедицинскойОрганизации%", ?(РекКодOIDМедицинскойОрганизации_ <> Неопределено, "%Источник%.КодOIDМедицинскойОрганизации", "Неопределено"));
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%КодOIDМедицинскогоПодразделения%", ?(РекКодOIDМедицинскогоПодразделения_ <> Неопределено, "%Источник%.КодOIDМедицинскогоПодразделения", "Неопределено"));
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%Источник%", ОбъектМетаданных.Имя);
		
		Условие_ = Новый Массив;
		Если РекКодМинздрава_ <> Неопределено Тогда
			УсловиеКодМинздрава_ = СтрШаблон("%1.КодМинздрава = %2", ОбъектМетаданных.Имя, ?(РекКодМинздрава_.Тип.СодержитТип(Тип("Строка")), """""", 0));
			Условие_.Добавить(УсловиеКодМинздрава_);
		КонецЕсли;
		Если РекАтрибутCode_ <> Неопределено Тогда
			УсловиеАтрибутCode_ = СтрШаблон("%1.АтрибутCode = """"", ОбъектМетаданных.Имя);
			//поставляемые виды показателей в проверку не входят
			Если ОбъектМетаданных.Имя = "ВидыПоказателейЗдоровья" Тогда
				УсловиеАтрибутCode_ = УсловиеАтрибутCode_ + " И ВидыПоказателейЗдоровья.Идентификатор = """"";
			КонецЕсли;
			Условие_.Добавить(УсловиеАтрибутCode_);
		КонецЕсли;
		Если РекКодOIDМедицинскойОрганизации_ <> Неопределено Тогда
			УсловиеКодOIDМедицинскойОрганизации_ = СтрШаблон("%1.КодOIDМедицинскойОрганизации = """"", ОбъектМетаданных.Имя);
			Условие_.Добавить(УсловиеКодOIDМедицинскойОрганизации_);
		КонецЕсли;
		Если РекКодOIDМедицинскогоПодразделения_ <> Неопределено Тогда
			УсловиеКодOIDМедицинскогоПодразделения_ = СтрШаблон("%1.КодOIDМедицинскогоПодразделения = """"", ОбъектМетаданных.Имя);
			Условие_.Добавить(УсловиеКодOIDМедицинскогоПодразделения_);
		КонецЕсли;
		ТекстЗапроса_ = СтрЗаменить(ТекстЗапроса_,"%Условие%", СтрСоединить(Условие_, " ИЛИ "));
		Возврат ТекстЗапроса_;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти
