////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы БольничнаяАптека
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "БольничнаяАптека";
	Описание.Версия = ВерсияБиблиотеки();
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаПодключаемогоОборудования");
	Описание.ТребуемыеПодсистемы.Добавить("ИнтернетПоддержкаПользователей");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаТехнологииСервиса");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаЭлектронныхДокументов");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаИнтеграцииМДЛП");
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = "HospPh";
	
КонецПроцедуры

// Возвращает номер версии библиотеки.
//
// Возвращаемое значение:
//  Строка - номер версии библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат ?(ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации(Истина), Метаданные.Версия, "2.2.7.27");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБольничнаяАптека.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Инициализация настроек программы при первом запуске.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ТипыНоменклатурыРасширенные.ЗаполнитьПервоначальныеДанные";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	
	// Обработчики обновления новых версий
	
	ОбменДаннымиБольничнаяАптека.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	МонопольныеОбработчики(Обработчики);
	ОперативныеОбработчики(Обработчики);
	ОтложенныеОбработчики(Обработчики);
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия,
											Знач ТекущаяВерсия,
											Знач ВыполненныеОбработчики,
											ВыводитьОписаниеОбновлений,
											МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Заполняет переименования объектов метаданных (подсистемы и роли).
//
// Подробнее: см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.0.4.6",
		"Роль.ПропускКонтроляОстатковТоваровПриОтменеПоступлений", "Роль.ПропускКонтроляОстатковТоваровПоРегиструСебестоимости", "БольничнаяАптека");
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Процедура обработки первого запуска системы.
//
Процедура ПервыйЗапуск() Экспорт
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	Справочники.ГруппыПКУ.ЗаполнитьПредопределенныеГруппыПКУ();
	Справочники.ПроцентыЛьгот.ЗаполнитьПредопределенныеПроцентыЛьгот();
	
	ЗаполнитьВидыКонтактнойИнформации();
	
	Справочники.Приоритеты.СоздатьПриоритетыПоУмолчанию();
	
	Справочники.СтатусыОбъектовДляИнвентаризации.СоздатьСтатусыОбъектовПоУмолчанию();
	Справочники.ЦелевыеФункцииАктивовДляИнвентаризации.СоздатьЦелевыеФункцииАктивовДляИнвентаризации();
	
	Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций();
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПредопределенныеСтатьиДоходов();
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПредопределенныеСтатьиРасходов();
	
КонецПроцедуры

Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	ЗаполнитьВалюты();
	ЗаполнитьЕдиницыИзмерения();
	ЗаполнитьНастройкиКатегорийНоменклатурыПоУмолчанию();
	
	ЗначенияКонстант = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ПолучитьЗначенияКонстантПоУмолчанию();
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет первоначальное заполнение и обновление значений реквизитов
// предопределенных видов контактной информации.
//
Процедура ЗаполнитьВидыКонтактнойИнформации() Экспорт
	
	Если ОбщегоНазначенияБольничнаяАптека.ЭтоОсновнаяПодсистемаКонфигурации() Тогда
		
		Справочники.Контрагенты.ОбновитьПредопределенныеВидыКонтактнойИнформации();
		Справочники.ФизическиеЛица.ОбновитьПредопределенныеВидыКонтактнойИнформации();
		Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформации();
		
	КонецЕсли;
	
	Справочники.Склады.ОбновитьПредопределенныеВидыКонтактнойИнформации();
	
КонецПроцедуры

Процедура ЗаполнитьВалюты()
	
	КодыВалют = Новый Массив;
	КодыВалют.Добавить("643"); // RUR
	
	Валюты = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(КодыВалют);
	
	Если Валюты.Количество() > 0 Тогда
		Константы.ВалютаРегламентированногоУчета.Установить(Валюты[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЕдиницыИзмерения()
	
	КодыЕдиниц = Новый Массив;
	КодыЕдиниц.Добавить("163"); // г
	КодыЕдиниц.Добавить("112"); // л
	КодыЕдиниц.Добавить("006"); // м
	КодыЕдиниц.Добавить("055"); // м2
	
	КодыЕдиниц.Добавить("166"); // кг
	КодыЕдиниц.Добавить("161"); // мг
	КодыЕдиниц.Добавить("796"); // шт
	КодыЕдиниц.Добавить("639"); // доз
	
	Единицы = Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(КодыЕдиниц, Истина);
	
	Константы.ЕдиницаИзмеренияВеса.Установить(Единицы[0]); // г
	Константы.ЕдиницаИзмеренияОбъема.Установить(Единицы[1]); // л
	Константы.ЕдиницаИзмеренияДлины.Установить(Единицы[2]); // м
	Константы.ЕдиницаИзмеренияПлощади.Установить(Единицы[3]); // м2
	
	НайтиСоздатьЕдиницу("мкг", "Микрограмм", 0.000001, Перечисления.ТипыЕдиницИзмерения.Вес, "");
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиКатегорийНоменклатурыПоУмолчанию() Экспорт
	
	Справочники.НастройкиКатегорийНоменклатуры.ЗаполнитьПредустановленныеНастройкиКатегорийНоменклатуры();
	
	Настройка = Справочники.НастройкиКатегорийНоменклатуры.НастройкаКатегорийНоменклатурыПоУмолчанию(Справочники.ТипыНоменклатурыРасширенные.ЛекарственноеСредство);
	Константы.НастройкиКатегорийЛекарственныхСредствПоУмолчанию.Установить(Настройка);
	
	Настройка = Справочники.НастройкиКатегорийНоменклатуры.НастройкаКатегорийНоменклатурыПоУмолчанию(Справочники.ТипыНоменклатурыРасширенные.Товар);
	Константы.НастройкиКатегорийТоваровПоУмолчанию.Установить(Настройка);
	
КонецПроцедуры

#КонецОбласти // ЗаполненияПустойИБ

#Область ОбновлениеНовыхВерсийИБ

Процедура МонопольныеОбработчики(Обработчики)
	
	
	
КонецПроцедуры

Процедура ОперативныеОбработчики(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.МонопольныйРежим = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБольничнаяАптека.ВыполнятьПриКаждомОбновлении";
	
КонецПроцедуры

Процедура ОтложенныеОбработчики(Обработчики)
	
#Область Версия_2_2_5
	
	#Область СправочникНоменклатураКонтрагентов_ОбработатьДанныеДляПереходаНаНовуюВерсию
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.2.5.1";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("6ee39836-3f1c-4d21-8bf1-546096bdefd8");
	Обработчик.Многопоточный      = Истина;
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.Процедура          = "ОбновлениеИнформационнойБазыБольничнаяАптека.ОбработатьДанныеКЗаполнениюНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыБольничнаяАптека.ЗарегистрироватьДанныеКЗаполнениюНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий        = НСтр("ru = 'Обновляются данные справочника Номенклатура контрагентов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ЕдиницыИзмерения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыБольничнаяАптека.ОбработатьЗаполненныеДанныеНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НоменклатураКонтрагентовБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.2.5.1";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("c88d6e56-e850-4239-ad18-1151d49c6694");
	Обработчик.Многопоточный      = Истина;
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.Процедура          = "ОбновлениеИнформационнойБазыБольничнаяАптека.ОбработатьЗаполненныеДанныеНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыБольничнаяАптека.ЗарегистрироватьЗаполненныеДанныеНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий        = НСтр("ru = 'Обновляются данные справочника Номенклатура контрагентов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СпецификацияКДоговору.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.НоменклатураКонтрагентовБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
	#КонецОбласти
	
#КонецОбласти
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления релиза

// Процедура выполняется при каждом обновлении информационной базы
//
Процедура ВыполнятьПриКаждомОбновлении(Параметры = Неопределено) Экспорт
	
	
КонецПроцедуры


#Область ОбновлениеНоменклатурыКонтрагентов

Процедура ЗарегистрироватьДанныеКЗаполнениюНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка > &Ссылка
	|	И НоменклатураКонтрагентов.ВладелецНоменклатуры = &ПустойВладелец
	|		И НоменклатураКонтрагентов.Владелец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|");
	
	Запрос.УстановитьПараметр("ПустойВладелец", Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип.ПривестиЗначение());
	
	ОтработаныВсеДанные = Ложь;
	Ссылка = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрок > 0 Тогда
			Ссылка = Выгрузка[КоличествоСтрок - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеКЗаполнениюНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Справочники.НоменклатураКонтрагентов;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	НаборСсылок = ОбновляемыеДанные.ВыгрузитьКолонку("Ссылка");
	
	ТекстОшибки = "";
	ТаблицаНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентовСДаннымиКЗаполнению(НаборСсылок, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТаблицаНоменклатурыКонтрагентовЗаполнена = ТаблицаНоменклатурыКонтрагентов.Количество() > 0;
	
	ПроблемныхОбъектов   = 0;
	ОбработанныхОбъектов = 0;
	Для Каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НоменклатураКонтрагента", СсылкаНаОбъект);
		
		ДанныеНоменклатурыКонтрагента = Неопределено;
		Если ТаблицаНоменклатурыКонтрагентовЗаполнена Тогда
			СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			Если ЗначениеЗаполнено(СтрокиНоменклатурыКонтрагентов) Тогда
				ДанныеНоменклатурыКонтрагента = СтрокиНоменклатурыКонтрагентов[0];
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки       = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			ОбъектСправочника = СсылкаНаОбъект.ПолучитьОбъект(); //СправочникОбъект
			Если ДанныеНоменклатурыКонтрагента <> Неопределено Тогда
				
				Записать = Истина;
				
				Если ДанныеНоменклатурыКонтрагента.ЭтоГруппа Тогда
					ОбъектСправочника.ВладелецНоменклатуры = ОбъектСправочника.Владелец;
				Иначе
					
					НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
					ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, ДанныеНоменклатурыКонтрагента);
					НоменклатураКонтрагента.Вставить("НаименованиеПолное", ДанныеНоменклатурыКонтрагента.Наименование);
					
					НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
					ЗаполнитьЗначенияСвойств(НоменклатураИБ, ДанныеНоменклатурыКонтрагента);
					
					СопоставлениеНоменклатурыКонтрагентов.ЗаполнитьОбъектНоменклатурыКонтрагента(ОбъектСправочника, НоменклатураКонтрагента, НоменклатураИБ, Ложь);
					
					ОбъектСправочника.ЕдиницаИзмерения = ОбъектСправочника.Упаковка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по ссылке: %1 по причине:';
									|en = 'Cannot process the record by reference: %1. Reason:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые объекты номенклатуры контрагентов: %1';
								|en = 'Cannot process some product cross references items: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция номенклатуры контрагентов: %1';
								|en = 'Processed another batch of product cross references: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ТаблицаНоменклатурыКонтрагентовСДаннымиКЗаполнению(НаборСсылок, ТекстОшибки)
	
	ТаблицаОбновляемойНоменклатурыКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("ОбновляемаяНоменклатураКонтрагентов", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("ЭтоГруппа"                          , Новый ОписаниеТипов("Булево"));
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("Владелец"                           , Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип);
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("Идентификатор"                      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("НаименованиеНоменклатурыКонтрагента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("НаименованиеУпаковкиНоменклатурыКонтрагента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка        КАК Ссылка,
	|	НоменклатураКонтрагентов.ЭтоГруппа     КАК ЭтоГруппа,
	|	НоменклатураКонтрагентов.Владелец      КАК Владелец,
	|	НоменклатураКонтрагентов.Наименование  КАК Наименование,
	|	ЕСТЬNULL(НоменклатураКонтрагентов.ЕдиницаИзмерения.Наименование, """")  КАК НаименованиеУпаковки
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка В (&НаборСсылок)
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И НоменклатураКонтрагентов.ВладелецНоменклатуры = &ПустойВладелец
	|		И НоменклатураКонтрагентов.Владелец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|");
	
	Запрос.УстановитьПараметр("НаборСсылок", НаборСсылок);
	Запрос.УстановитьПараметр("ПустойВладелец", Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип.ПривестиЗначение());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Идентификатор = "";
		Иначе
			Идентификатор = Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНаименованию(Выборка.Наименование, "", Выборка.НаименованиеУпаковки);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОбновляемойНоменклатурыКонтрагентов.Добавить();
		НоваяСтрока.ОбновляемаяНоменклатураКонтрагентов         = Выборка.Ссылка;
		НоваяСтрока.ЭтоГруппа                                   = Выборка.ЭтоГруппа;
		НоваяСтрока.Владелец                                    = Выборка.Владелец;
		НоваяСтрока.Идентификатор                               = Идентификатор;
		НоваяСтрока.НаименованиеНоменклатурыКонтрагента         = Выборка.Наименование;
		НоваяСтрока.НаименованиеУпаковкиНоменклатурыКонтрагента = Выборка.НаименованиеУпаковки;
		
	КонецЦикла;
	
	Если ТаблицаОбновляемойНоменклатурыКонтрагентов.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов          КАК ОбновляемаяНоменклатураКонтрагентов,
	|	ТаблицаНоменклатурыКонтрагентов.Владелец                                     КАК Владелец,
	|	ТаблицаНоменклатурыКонтрагентов.ЭтоГруппа                                    КАК ЭтоГруппа,
	|	ТаблицаНоменклатурыКонтрагентов.Идентификатор                                КАК Идентификатор,
	|	ТаблицаНоменклатурыКонтрагентов.НаименованиеНоменклатурыКонтрагента          КАК НаименованиеНоменклатурыКонтрагента,
	|	ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковкиНоменклатурыКонтрагента  КАК НаименованиеУпаковкиНоменклатурыКонтрагента
	|ПОМЕСТИТЬ ТаблицаНоменклатурыКонтрагентов
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Идентификатор
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов              КАК НоменклатураКонтрагента,
	|	ТаблицаНоменклатурыКонтрагентов.ЭтоГруппа                                        КАК ЭтоГруппа,
	|	ТаблицаНоменклатурыКонтрагентов.Владелец                                         КАК Владелец,
	|	ТаблицаНоменклатурыКонтрагентов.Идентификатор                                    КАК Идентификатор,
	|	ТаблицаНоменклатурыКонтрагентов.НаименованиеНоменклатурыКонтрагента              КАК Наименование,
	|	ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковкиНоменклатурыКонтрагента      КАК НаименованиеУпаковки,
	|	НоменклатураКонтрагентов.Артикул                                                 КАК Артикул,
	|	НоменклатураКонтрагентов.Номенклатура                                            КАК Номенклатура,
	|	НоменклатураКонтрагентов.ЕдиницаИзмерения                                        КАК Упаковка,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.ЕдиницаИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА НоменклатураКонтрагентов.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ЕСТЬNULL(НоменклатураКонтрагентов.ЕдиницаИзмерения.Наименование, """")
	|	КОНЕЦ                                                                            КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.ЕдиницаИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА НоменклатураКонтрагентов.ЕдиницаИзмерения.БазоваяЕдиницаИзмерения.КодОКЕИ
	|		ИНАЧЕ ЕСТЬNULL(НоменклатураКонтрагентов.ЕдиницаИзмерения.КодОКЕИ, """")
	|	КОНЕЦ                                                                            КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.ЕдиницаИзмерения.ТипЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Упаковка)
	|			ТОГДА НоменклатураКонтрагентов.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                                            КАК КоличествоБазовойЕдиницыИзмерения,
	|	1                                                                                КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеНоменклатурыКонтрагентов
	|ИЗ
	|	ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО
	|			ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов = НоменклатураКонтрагентов.Ссылка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Упаковка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыИБ.Номенклатура        КАК Номенклатура,
	|	ШтрихкодыНоменклатурыИБ.ЕдиницаИзмерения    КАК Упаковка,
	|	МАКСИМУМ(ШтрихкодыНоменклатурыИБ.Штрихкод)  КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатурыИБ
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатурыИБ
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ДанныеНоменклатурыКонтрагентов КАК ДанныеНоменклатурыКонтрагентов
	|		ГДЕ
	|			НЕ ДанныеНоменклатурыКонтрагентов.ЭтоГруппа
	|			И ДанныеНоменклатурыКонтрагентов.Номенклатура = ШтрихкодыНоменклатурыИБ.Номенклатура
	|			И ДанныеНоменклатурыКонтрагентов.Упаковка = ШтрихкодыНоменклатурыИБ.ЕдиницаИзмерения
	|			И ШтрихкодыНоменклатурыИБ.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			И ШтрихкодыНоменклатурыИБ.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатурыИБ.Номенклатура,
	|	ШтрихкодыНоменклатурыИБ.ЕдиницаИзмерения
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыНоменклатурыИБ.Штрихкод) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНоменклатурыКонтрагентов.НоменклатураКонтрагента                КАК НоменклатураКонтрагента,
	|	ДанныеНоменклатурыКонтрагентов.ЭтоГруппа                              КАК ЭтоГруппа,
	|	ДанныеНоменклатурыКонтрагентов.Владелец                               КАК Владелец,
	|	ДанныеНоменклатурыКонтрагентов.Идентификатор                          КАК Идентификатор,
	|	ДанныеНоменклатурыКонтрагентов.Наименование                           КАК Наименование,
	|	ДанныеНоменклатурыКонтрагентов.НаименованиеУпаковки                   КАК НаименованиеУпаковки,
	|	ДанныеНоменклатурыКонтрагентов.Артикул                                КАК Артикул,
	|	ДанныеНоменклатурыКонтрагентов.Номенклатура                           КАК Номенклатура,
	|	ДанныеНоменклатурыКонтрагентов.Упаковка                               КАК Упаковка,
	|	ДанныеНоменклатурыКонтрагентов.ЕдиницаИзмерения                       КАК ЕдиницаИзмерения,
	|	ДанныеНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод                    КАК ЕдиницаИзмеренияКод,
	|	ДанныеНоменклатурыКонтрагентов.КоличествоБазовойЕдиницыИзмерения      КАК КоличествоБазовойЕдиницыИзмерения,
	|	ШтрихкодыНоменклатурыИБ.Штрихкод                                      КАК ШтрихкодКомбинации
	|ИЗ
	|	ДанныеНоменклатурыКонтрагентов КАК ДанныеНоменклатурыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ШтрихкодыНоменклатурыИБ КАК ШтрихкодыНоменклатурыИБ
	|		ПО
	|			ДанныеНоменклатурыКонтрагентов.Номенклатура = ШтрихкодыНоменклатурыИБ.Номенклатура
	|			И ДанныеНоменклатурыКонтрагентов.Упаковка = ШтрихкодыНоменклатурыИБ.Упаковка
	|");
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаОбновляемойНоменклатурыКонтрагентов);
	
	Попытка
		ТаблицаНоменклатурыКонтрагентов = Запрос.Выполнить().Выгрузить();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось обработать объекты номенклатуры контрагентов по причине: %1';
									|en = 'Cannot process product cross references items due to: %1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("НоменклатураКонтрагента");
	
	Возврат ТаблицаНоменклатурыКонтрагентов;
	
КонецФункции


Процедура ЗарегистрироватьЗаполненныеДанныеНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО
	|			НоменклатураКонтрагентовБЭД.Владелец = НоменклатураКонтрагентов.Владелец
	|			И НоменклатураКонтрагентовБЭД.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка > &Ссылка
	|	И НЕ НоменклатураКонтрагентов.ЭтоГруппа
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И НоменклатураКонтрагентов.Владелец <> &ВладелецДляПроектаОперативныйМониторингЛС
	|	И НоменклатураКонтрагентовБЭД.Идентификатор ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ВладелецДляПроектаОперативныйМониторингЛС", Константы.КонтрагентДляПроектаОперативныйМониторингЛС.Получить());
	
	ОтработаныВсеДанные = Ложь;
	Ссылка = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрок > 0 Тогда
			Ссылка = Выгрузка[КоличествоСтрок - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗаполненныеДанныеНоменклатурыКонтрагентовДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Справочники.НоменклатураКонтрагентов;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	НаборСсылок = ОбновляемыеДанные.ВыгрузитьКолонку("Ссылка");
	
	ТекстОшибки = "";
	ТаблицаНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентовСЗаполненнымиДанными(НаборСсылок, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТаблицаНоменклатурыКонтрагентовЗаполнена = ТаблицаНоменклатурыКонтрагентов.Количество() > 0;
	
	ПроблемныхОбъектов   = 0;
	ОбработанныхОбъектов = 0;
	Для Каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НоменклатураКонтрагента", СсылкаНаОбъект);
		
		ДанныеНоменклатурыКонтрагента = Неопределено;
		Если ТаблицаНоменклатурыКонтрагентовЗаполнена Тогда
			СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			Если ЗначениеЗаполнено(СтрокиНоменклатурыКонтрагентов) Тогда
				ДанныеНоменклатурыКонтрагента = СтрокиНоменклатурыКонтрагентов[0];
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки       = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			ОбъектСправочника = СсылкаНаОбъект.ПолучитьОбъект(); //СправочникОбъект
			Если ДанныеНоменклатурыКонтрагента <> Неопределено Тогда
				Записать = Истина;
				ОбъектСправочника.Недействителен = ДанныеНоменклатурыКонтрагента.Недействителен;
				ОбъектСправочника.ДополнительныеСвойства.Вставить("ТребуетсяЗаписьПриОбновленииНоменклатурыКонтрагентов", Истина);
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по ссылке: %1 по причине:';
									|en = 'Cannot process the record by reference: %1. Reason:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые объекты номенклатуры контрагентов: %1';
								|en = 'Cannot process some product cross references items: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция номенклатуры контрагентов: %1';
								|en = 'Processed another batch of product cross references: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ТаблицаНоменклатурыКонтрагентовСЗаполненнымиДанными(НаборСсылок, ТекстОшибки)
	
	ТаблицаОбновляемойНоменклатурыКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("ОбновляемаяНоменклатураКонтрагентов", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("Владелец"                           , Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип);
	ТаблицаОбновляемойНоменклатурыКонтрагентов.Колонки.Добавить("Идентификатор"                      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка         КАК Ссылка,
	|	НоменклатураКонтрагентов.Владелец       КАК Владелец,
	|	НоменклатураКонтрагентов.Идентификатор  КАК Идентификатор
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО
	|			НоменклатураКонтрагентовБЭД.Владелец = НоменклатураКонтрагентов.Владелец
	|			И НоменклатураКонтрагентовБЭД.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка В (&НаборСсылок)
	|	И НЕ НоменклатураКонтрагентов.ЭтоГруппа
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И НоменклатураКонтрагентов.Владелец <> &ВладелецДляПроектаОперативныйМониторингЛС
	|	И НоменклатураКонтрагентов.ВладелецНоменклатуры <> &ПустойВладелец
	|	И НоменклатураКонтрагентов.Идентификатор <> """"
	|	И НоменклатураКонтрагентовБЭД.Номенклатура ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("НаборСсылок", НаборСсылок);
	Запрос.УстановитьПараметр("ПустойВладелец", Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ВладелецДляПроектаОперативныйМониторингЛС", Константы.КонтрагентДляПроектаОперативныйМониторингЛС.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаОбновляемойНоменклатурыКонтрагентов.Добавить();
		НоваяСтрока.ОбновляемаяНоменклатураКонтрагентов = Выборка.Ссылка;
		НоваяСтрока.Владелец                            = Выборка.Владелец;
		НоваяСтрока.Идентификатор                       = Выборка.Идентификатор;
		
	КонецЦикла;
	
	Если ТаблицаОбновляемойНоменклатурыКонтрагентов.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ПакетЗапросов = Новый Массив;
	ПакетЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов  КАК ОбновляемаяНоменклатураКонтрагентов,
	|	ТаблицаНоменклатурыКонтрагентов.Владелец                             КАК Владелец,
	|	ТаблицаНоменклатурыКонтрагентов.Идентификатор                        КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаНоменклатурыКонтрагентов
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов  КАК ОбновляемаяНоменклатураКонтрагентов,
	|	НоменклатураКонтрагентов.Ссылка                                      КАК НоменклатураКонтрагента,
	|	НоменклатураКонтрагентов.Владелец                                    КАК Владелец,
	|	НоменклатураКонтрагентов.Идентификатор                               КАК Идентификатор
	|ПОМЕСТИТЬ НоменклатураКонтрагентовПоИдентификатору
	|ИЗ
	|	ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО
	|			ТаблицаНоменклатурыКонтрагентов.Владелец = НоменклатураКонтрагентов.Владелец
	|			И ТаблицаНоменклатурыКонтрагентов.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбновляемаяНоменклатураКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентовПоИдентификатору.ОбновляемаяНоменклатураКонтрагентов  КАК ОбновляемаяНоменклатураКонтрагентов,
	|	НоменклатураКонтрагентовПоИдентификатору.НоменклатураКонтрагента              КАК НоменклатураКонтрагента
	|ПОМЕСТИТЬ НеуникальнаяНоменклатураКонтрагентов
	|ИЗ
	|	НоменклатураКонтрагентовПоИдентификатору КАК НоменклатураКонтрагентовПоИдентификатору
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			НоменклатураКонтрагентовПоИдентификатору КАК НоменклатураКонтрагентов
	|		ГДЕ
	|			НоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов = НоменклатураКонтрагентовПоИдентификатору.ОбновляемаяНоменклатураКонтрагентов
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов,
	|			НоменклатураКонтрагентов.Владелец,
	|			НоменклатураКонтрагентов.Идентификатор
	|		ИМЕЮЩИЕ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НоменклатураКонтрагентов.НоменклатураКонтрагента) > 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураКонтрагента
	|");
	
	ПакетЗапросов.Добавить(ТекстЗапросаТаблицыАктуальностиНоменклатурыКонтрагентов());
	ПакетЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов         КАК НоменклатураКонтрагента,
	|	ЕСТЬNULL(ТаблицаАктуальностиНоменклатурыКонтрагентов.Недействителен, ЛОЖЬ)  КАК Недействителен
	|ИЗ
	|	ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаАктуальностиНоменклатурыКонтрагентов КАК ТаблицаАктуальностиНоменклатурыКонтрагентов
	|		ПО
	|			ТаблицаНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов = ТаблицаАктуальностиНоменклатурыКонтрагентов.ОбновляемаяНоменклатураКонтрагентов
	|");
	
	Запрос = Новый Запрос(СтрСоединить(ПакетЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаОбновляемойНоменклатурыКонтрагентов);
	Попытка
		ТаблицаНоменклатурыКонтрагентов = Запрос.Выполнить().Выгрузить();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось обработать объекты номенклатуры контрагентов по причине: %1';
									|en = 'Cannot process product cross references items due to: %1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("НоменклатураКонтрагента");
	
	Возврат ТаблицаНоменклатурыКонтрагентов;
	
КонецФункции

Функция ТекстЗапросаТаблицыАктуальностиНоменклатурыКонтрагентов()
	
	ТабличныеЧастиНеактуальнойНоменклатуры = Новый Массив;
	ТабличныеЧастиНеактуальнойНоменклатуры.Добавить(Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти.Товары.ПолноеИмя());
	ТабличныеЧастиНеактуальнойНоменклатуры.Добавить(Метаданные.Документы.ПоступлениеТоваров.ТабличныеЧасти.Товары.ПолноеИмя());
	ТабличныеЧастиНеактуальнойНоменклатуры.Добавить(Метаданные.Документы.СпецификацияКДоговору.ТабличныеЧасти.Товары.ПолноеИмя());
	
	ТекстЗапроса = "";
	
	Шаблон = "
	|ВЫБРАТЬ
	|	НеуникальнаяНоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов  КАК ОбновляемаяНоменклатураКонтрагентов,
	|	НеуникальнаяНоменклатураКонтрагентов.НоменклатураКонтрагента              КАК НоменклатураКонтрагента,
	|	МАКСИМУМ(ТабличнаяЧастьДокумента.Ссылка.Дата)                             КАК Дата
	|ПОМЕСТИТЬ НоменклатураКонтрагентаСДатойАктуальности
	|ИЗ
	|	НеуникальнаяНоменклатураКонтрагентов КАК НеуникальнаяНоменклатураКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ИмяТабличнойЧасти КАК ТабличнаяЧастьДокумента
	|		ПО
	|			НеуникальнаяНоменклатураКонтрагентов.НоменклатураКонтрагента = ТабличнаяЧастьДокумента.НоменклатураПоставщика
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	НеуникальнаяНоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов,
	|	НеуникальнаяНоменклатураКонтрагентов.НоменклатураКонтрагента
	|";
	
	ПервыйПодзапрос = Истина;
	
	РазделительПодзапросов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиНеактуальнойНоменклатуры Цикл
		
		ТекстПодзапроса = СтрЗаменить(Шаблон, "ИмяТабличнойЧасти", СтрЗаменить(ТабличнаяЧасть, ".ТабличнаяЧасть", ""));
		
		Если ПервыйПодзапрос Тогда
			
			ПервыйПодзапрос = Ложь;
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + РазделительПодзапросов;
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "ПОМЕСТИТЬ НоменклатураКонтрагентаСДатойАктуальности", "");
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентаСДатойАктуальности.ОбновляемаяНоменклатураКонтрагентов           КАК ОбновляемаяНоменклатураКонтрагентов,
	|	МАКСИМУМ(ЕСТЬNULL(НоменклатураКонтрагентаСДатойАктуальности.Дата, ДАТАВРЕМЯ(1, 1, 1)))  КАК Дата
	|ПОМЕСТИТЬ АктуальнаяДатаНоменклатуры
	|ИЗ
	|	НоменклатураКонтрагентаСДатойАктуальности КАК НоменклатураКонтрагентаСДатойАктуальности
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКонтрагентаСДатойАктуальности.ОбновляемаяНоменклатураКонтрагентов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентаСДатойАктуальности.ОбновляемаяНоменклатураКонтрагентов  КАК ОбновляемаяНоменклатураКонтрагентов,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентаСДатойАктуальности.ОбновляемаяНоменклатураКонтрагентов = НоменклатураКонтрагентаСДатойАктуальности.НоменклатураКонтрагента
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                                          КАК Недействителен
	|ПОМЕСТИТЬ ТаблицаАктуальностиНоменклатурыКонтрагентов
	|ИЗ
	|	НоменклатураКонтрагентаСДатойАктуальности КАК НоменклатураКонтрагентаСДатойАктуальности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			АктуальнаяДатаНоменклатуры КАК АктуальнаяДатаНоменклатуры
	|		ПО
	|			НоменклатураКонтрагентаСДатойАктуальности.ОбновляемаяНоменклатураКонтрагентов = АктуальнаяДатаНоменклатуры.ОбновляемаяНоменклатураКонтрагентов
	|			И НоменклатураКонтрагентаСДатойАктуальности.Дата = АктуальнаяДатаНоменклатуры.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НеуникальнаяНоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов       КАК ОбновляемаяНоменклатураКонтрагентов,
	|	ВЫБОР
	|		КОГДА
	|			МАКСИМУМ(НеуникальнаяНоменклатураКонтрагентов.НоменклатураКонтрагента) = НеуникальнаяНоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                                          КАК Недействителен
	|ИЗ
	|	НеуникальнаяНоменклатураКонтрагентов КАК НеуникальнаяНоменклатураКонтрагентов
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			АктуальнаяДатаНоменклатуры КАК АктуальнаяДатаНоменклатуры
	|		ГДЕ
	|			АктуальнаяДатаНоменклатуры.ОбновляемаяНоменклатураКонтрагентов = НеуникальнаяНоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов)
	|СГРУППИРОВАТЬ ПО
	|	НеуникальнаяНоменклатураКонтрагентов.ОбновляемаяНоменклатураКонтрагентов
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ОбновлениеНоменклатурыКонтрагентов


#КонецОбласти // ОбновлениеНовыхВерсийИБ

#Область Прочее

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Наименование, НаименованиеПолное, Коэффициент, ТипЕдиницы, КодОКЕИ)
	
	Отбор = Новый Структура("Наименование, ТипЕдиницы", Наименование, ТипЕдиницы);
	ПоляНовогоЭлемента = Новый Структура;
	ПоляНовогоЭлемента.Вставить("Наименование", Наименование);
	ПоляНовогоЭлемента.Вставить("НаименованиеПолное", НаименованиеПолное);
	ПоляНовогоЭлемента.Вставить("Коэффициент", Коэффициент);
	ПоляНовогоЭлемента.Вставить("ТипЕдиницы", ТипЕдиницы);
	ПоляНовогоЭлемента.Вставить("КодОКЕИ", КодОКЕИ);
	
	Ссылка = АптечныеТовары.НайтиСоздатьЭлементСправочника(Метаданные.Справочники.ЕдиницыИзмерения, Отбор, ПоляНовогоЭлемента);
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

