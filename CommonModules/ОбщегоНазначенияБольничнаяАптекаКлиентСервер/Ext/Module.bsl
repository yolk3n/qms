
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Формирует уникальный идентификатор соответствующий правилам именования идентификаторов
//
// Возвращаемое значение:
//   Строка - уникальный идентификатор
//
Функция СформироватьУникальныйИдентификатор() Экспорт
	
	Возврат ПолучитьИдентификатор(Строка(Новый УникальныйИдентификатор));
	
КонецФункции

// Вычисляет значение идентификатора из строки в соответствии с правилами
// именования идентификаторов.
//
// Возвращаемое значение:
//  Строка - идентификатор, соответствующий правилам именования идентификаторов
//
Функция ПолучитьИдентификатор(Знач Наименование) Экспорт
	
	Наименование = Строка(Наименование);
	Если Наименование = "" Тогда
		Возврат "_";
	КонецЕсли;
	
	Если ЭтоЦифра(Лев(Наименование, 1)) Тогда
		Наименование = "_" + Наименование;
	КонецЕсли;
	
	Идентификатор = "";
	ПредыдущийСимвол = " ";
	Для Индекс = 1 По СтрДлина(Наименование) Цикл
		
		Символ = Сред(Наименование, Индекс, 1);
		Если ЭтоКорректныйСимволИдентификатора(Символ) Тогда
			Если ЭтоПробельныйСимвол(ПредыдущийСимвол) Тогда
				Идентификатор = Идентификатор + ВРег(Символ);
			Иначе
				Идентификатор = Идентификатор + Символ;
			КонецЕсли;
		ИначеЕсли Не ЭтоПробельныйСимвол(Символ) Тогда
			Идентификатор = Идентификатор + "_";
		КонецЕсли;
		
		ПредыдущийСимвол = Символ;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

// Возвращает список ключей структуры или соответствия
//
// Параметры:
//  Коллекция - Структура, Соответствие
//
// Возвращаемое значение:
//  Массив
//
Функция КлючиКоллекции(Коллекция) Экспорт
	
	Ключи = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Ключи.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат Ключи;
	
КонецФункции

// Возвращает список значений структуры или соответствия
//
// Параметры:
//  Коллекция - Структура, Соответствие
//  ТолькоУникальныеЗначения - Булево
//
// Возвращаемое значение:
//  Массив
//
Функция ЗначенияКоллекции(Коллекция, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Значения = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		
		Если ТолькоУникальныеЗначения Тогда
			Если УникальныеЗначения[Элемент.Значение] = Неопределено Тогда
				УникальныеЗначения.Вставить(Элемент.Значение, Истина);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Значения.Добавить(Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции

// Функция ищет структуру в массиве структур
//
// Параметры:
//  МассивСтруктур - массив, содержащий структуры
//  СтруктураПоиска - структура со значениями, по которым осуществляется поиск
//
// Возвращаемое значение:
//  Структура - найденная структура или Неопределено
//
Функция НайтиВМассивеСтруктур(МассивСтруктур, СтруктураПоиска) Экспорт
	
	НайденнаяСтруктура = Неопределено;
	Для Каждого ТекСтруктура Из МассивСтруктур Цикл
		ВсеПоляСовпадают = Истина;
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
			Если КлючИЗначение.Значение <> ТекСтруктура[КлючИЗначение.Ключ] Тогда
				ВсеПоляСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеПоляСовпадают Тогда
			НайденнаяСтруктура = ТекСтруктура;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяСтруктура;
	
КонецФункции

// Процедура добавляет данные из одной структуры в другую
//
// Параметры:
//  Приемник - структура в которую добавляется данные
//  Источник - структуры из которой берутся данные
//  СписокПолей - Строка - имена полей источника разделенных запятыми,
//                         если пустая строка, то переносятся все поля.
//
Процедура ДобавитьВСтруктуру(Приемник, Знач Источник, Знач СписокПолей = "") Экспорт
	
	ВсеПоля = Истина;
	Если Не ПустаяСтрока(СписокПолей) Тогда
		ВсеПоля = Ложь;
		СписокПолей = Новый Структура(СписокПолей);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("Структура")
	 Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Для Каждого КлючИЗначение Из Источник Цикл
			Если ВсеПоля Или СписокПолей.Свойство(КлючИЗначение.Ключ) Тогда
				Приемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипИсточника = Тип("СтрокаТаблицыЗначений") Тогда
		Колонки = Источник.Владелец().Колонки;
		Для Каждого Колонка Из Колонки Цикл
			Если ВсеПоля Или СписокПолей.Свойство(Колонка.Имя) Тогда
				Приемник.Вставить(Колонка.Имя, Источник[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет незаполненные ключи из структуры
//
Процедура УдалитьНезаполненныеЗначенияИзСтруктуры(Структура) Экспорт
	
	УдаляемыеКлючи = Новый Массив;
	Для каждого КлючИЗначение Из Структура Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			УдаляемыеКлючи.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Ключ Из УдаляемыеКлючи Цикл
		Структура.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Функция получает данные штрихкода
//
// Параметры:
//  Штрихкод - строка штрихкода
//  Количество - число
//
// Возвращаемое значение:
//  Структура - структура с данными штрихкода
//
Функция ПолучитьДанныеШтрихкода(Штрихкод, Количество) Экспорт
	
	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);
	
КонецФункции

// Функция преобразовывает строку в тип Дата
//
// Параметры:
//  СтрокаДаты - строка, представляющая дату
//
// Возвращаемое значение:
//  Дата - дата из строки или '00010101'
//
Функция ПреобразоватьСтрокуВДату(СтрокаДаты) Экспорт
	
	Результат = '00010101';
	ОписаниеДата = Новый ОписаниеТипов("Дата");
	
	Если Не ПустаяСтрока(СтрокаДаты) Тогда
		Результат = ОписаниеДата.ПривестиЗначение(СтрокаДаты);
		Если Не ЗначениеЗаполнено(Результат) Тогда //Дата не в каноническом виде, будем преобразовывать самостоятельно
			СтрокаРазделителей = ".-/\TZ+:MSK";
			СтрокаЧисел = "0123456789";
			ДлинаСтроки = СтрДлина(СтрокаДаты);
			МассивЧастейДаты = Новый Массив;
			ВременнаяСтрока = "";
			КоличествоЧастейДаты = 0;
			Для Сч = 1 По ДлинаСтроки Цикл
				СимволСтроки = Сред(СтрокаДаты, Сч, 1);
				Если Найти(СтрокаЧисел, СимволСтроки) Тогда
					ВременнаяСтрока = ВременнаяСтрока + СимволСтроки;
				ИначеЕсли Найти(СтрокаРазделителей, СимволСтроки) Тогда
					Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
						МассивЧастейДаты.Добавить(ВременнаяСтрока);
						ВременнаяСтрока = "";
						КоличествоЧастейДаты = КоличествоЧастейДаты + 1;
					КонецЕсли;
				Иначе
					МассивЧастейДаты.Очистить();
					Прервать; //неверный формат даты
				КонецЕсли;
				Если КоличествоЧастейДаты = 3 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
				МассивЧастейДаты.Добавить(ВременнаяСтрока);
			КонецЕсли;
			Если МассивЧастейДаты.Количество() = 3 Тогда
				Если СтрДлина(МассивЧастейДаты[0]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[0], МассивЧастейДаты[1], МассивЧастейДаты[2]);
				ИначеЕсли СтрДлина(МассивЧастейДаты[2]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				Иначе
					Результат = ПолучитьДату("20" + МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает дату на основании переданных параметров
//
// Параметры:
//  Год   - Число - год даты
//  Месяц - Число - месяц даты
//  День  - Число - день даты
//
// Возвращаемое значение:
//  Дата
//
Функция ПолучитьДату(Год, Месяц, День)
	
	Попытка
		Результат = Дата(Год, Месяц, День);
	Исключение
		Результат = '00010101';
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция предназначена для получения разницы между двумя датами.
//
Функция РазностьДат(Знач Дата1, Знач Дата2, Знач ТипРазности) Экспорт
	
	Если Не ТипЗнч(Дата1) = Тип("Дата") Или Не ТипЗнч(Дата2) = Тип("Дата") Тогда
		ТекстОшибки = НСтр("ru='Неправильный формат даты.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТипРазности = ВРег(ТипРазности);
	Если ТипРазности = "СЕКУНДА" Тогда
		Возврат Дата2 - Дата1;
	ИначеЕсли ТипРазности = "МИНУТА" Тогда
		Возврат (НачалоМинуты(Дата2) - НачалоМинуты(Дата1)) / 60;
	ИначеЕсли ТипРазности = "ЧАС" Тогда
		Возврат (НачалоЧаса(Дата2) - НачалоЧаса(Дата1)) / 3600; // 60 * 60
	ИначеЕсли ТипРазности = "ДЕНЬ" Тогда
		Возврат (НачалоДня(Дата2) - НачалоДня(Дата1)) / 86400; // 60 * 60 * 24
	ИначеЕсли ТипРазности = "МЕСЯЦ" Тогда
		Возврат (Год(Дата2) - Год(Дата1)) * 12 + Месяц(Дата2) - Месяц(Дата1);
	ИначеЕсли ТипРазности = "КВАРТАЛ" Тогда
		Возврат (Год(Дата2) - Год(Дата1)) * 4 + (Месяц(НачалоКвартала(Дата2)) - Месяц(НачалоКвартала(Дата1))) / 3;
	ИначеЕсли ТипРазности = "ГОД" Тогда
		Возврат Год(Дата2) - Год(Дата1);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Неизвестный формат разности дат: %1.'");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипРазности);
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// Функция предназначена для прибавления к дате некоторой величины
//
Функция ДобавитьКДате(Знач Дата, Знач ТипУвеличения, Величина) Экспорт
	
	Если Не ТипЗнч(Дата) = Тип("Дата") Тогда
		ТекстОшибки = НСтр("ru='Неправильный формат даты.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТипУвеличения = ВРег(ТипУвеличения);
	Если ТипУвеличения = "СЕКУНДА" Тогда
		Возврат Дата + Величина;
	ИначеЕсли ТипУвеличения = "МИНУТА" Тогда
		Возврат Дата + Величина * 60;
	ИначеЕсли ТипУвеличения = "ЧАС" Тогда
		Возврат Дата + Величина * 3600; // 60 * 60
	ИначеЕсли ТипУвеличения = "ДЕНЬ" Тогда
		Возврат Дата + Величина * 86400; // 60 * 60 * 24
	ИначеЕсли ТипУвеличения = "НЕДЕЛЯ" Тогда
		Возврат Дата + Величина * 604800; // 60 * 60 * 24 * 7
	ИначеЕсли ТипУвеличения = "ДЕКАДА" Тогда
		Возврат Дата + Величина * 864000; // 60 * 60 * 24 * 10
	ИначеЕсли ТипУвеличения = "МЕСЯЦ" Тогда
		Возврат ДобавитьМесяц(Дата, Величина);
	ИначеЕсли ТипУвеличения = "КВАРТАЛ" Тогда
		Возврат ДобавитьМесяц(Дата, Величина * 3);
	ИначеЕсли ТипУвеличения = "ПОЛУГОДИЕ" Тогда
		Возврат ДобавитьМесяц(Дата, Величина * 6);
	ИначеЕсли ТипУвеличения = "ГОД" Тогда
		Возврат ДобавитьМесяц(Дата, Величина * 12);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Неизвестный тип увеличения даты: %1'");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипУвеличения);
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// Функция получает начало периода в которую попадает дата
// с учетом типа периода(ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, ...).
//
Функция ПолучитьНачалоПериода(Знач Дата, Знач ТипПериода) Экспорт
	
	Если Не ТипЗнч(Дата) = Тип("Дата") Тогда
		ТекстОшибки = НСтр("ru='Неправильный формат даты.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТипПериода = ВРег(ТипПериода);
	Если ТипПериода = "ДЕНЬ" Тогда
		Возврат НачалоДня(Дата);
	ИначеЕсли ТипПериода = "НЕДЕЛЯ" Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли ТипПериода = "ДЕКАДА" Тогда
		ДеньМесяца = День(Дата);
		Дата = НачалоМесяца(Дата);
		Если ДеньМесяца <= 10 Тогда
			Возврат Дата;
		ИначеЕсли ДеньМесяца <= 20 Тогда
			Возврат ДобавитьКДате(Дата, "ДЕКАДА", 1);
		Иначе
			Возврат ДобавитьКДате(Дата, "ДЕКАДА", 2);
		КонецЕсли;
	ИначеЕсли ТипПериода = "МЕСЯЦ" Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли ТипПериода = "КВАРТАЛ" Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли ТипПериода = "ПОЛУГОДИЕ" Тогда
		Если Месяц(Дата) < 7 Тогда
			Возврат НачалоГода(Дата);
		Иначе
			Возврат ДобавитьКДате(НачалоГода(Дата), "ПОЛУГОДИЕ", 1);
		КонецЕсли;
	ИначеЕсли ТипПериода = "ГОД" Тогда
		Возврат НачалоГода(Дата)
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Неизвестный тип периода: %1'");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипПериода);
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// Функция получает конец периода в которую попадает дата
// с учетом типа периода(ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, ...).
//
Функция ПолучитьКонецПериода(Знач Дата, Знач ТипПериода) Экспорт
	
	Если Не ТипЗнч(Дата) = Тип("Дата") Тогда
		ТекстОшибки = НСтр("ru='Неправильный формат даты.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТипПериода = ВРег(ТипПериода);
	Если ТипПериода = "ДЕНЬ" Тогда
		Возврат КонецДня(Дата);
	ИначеЕсли ТипПериода = "НЕДЕЛЯ" Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли ТипПериода = "ДЕКАДА" Тогда
		ДеньМесяца = День(Дата);
		Если ДеньМесяца <= 10 Тогда
			Возврат КонецДня(ДобавитьКДате(НачалоМесяца(Дата), "ДЕНЬ", 9));
		ИначеЕсли ДеньМесяца <= 20 Тогда
			Возврат КонецДня(ДобавитьКДате(НачалоМесяца(Дата), "ДЕНЬ", 19));
		Иначе
			Возврат КонецМесяца(Дата);
		КонецЕсли;
	ИначеЕсли ТипПериода = "МЕСЯЦ" Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли ТипПериода = "КВАРТАЛ" Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли ТипПериода = "ПОЛУГОДИЕ" Тогда
		Если Месяц(Дата) < 7 Тогда
			Возврат КонецМесяца(ДобавитьКДате(НачалоГода(Дата), "МЕСЯЦ", 5));
		Иначе
			Возврат КонецГода(Дата);
		КонецЕсли;
	ИначеЕсли ТипПериода = "ГОД" Тогда
		Возврат КонецГода(Дата)
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Неизвестный тип периода: %1'");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипПериода);
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// По переданному значению перечисления ЮрФизЛицо определяет, является ли оно признаком ЮрЛица
//
// Параметры:
//  ЮрФизЛицо - Перечисления.ЮрФизЛицо
//
// Возвращаемое значение:
//  Булево - Истина, если юридическое лицо, Ложь если нет.
//
Функция ЭтоЮрЛицо(ЮридическоеФизическоеЛицо) Экспорт
	
	Если ТипЗнч(ЮридическоеФизическоеЛицо) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		Возврат ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	Иначе
		Возврат ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;
	
КонецФункции

// Возвращает имя объекта, которому принадлежит форма
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
КонецФункции

// Возвращает представление задания выполнения отчета
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отчета: %1'");
	ИмяОтчета = ПолучитьИдентификаторОбъекта(Форма);
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ИмяОтчета);
	
	Возврат НаименованиеЗадания;
	
КонецФункции

// Возвращает значение реквизита формы по заданному пути
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ПутьКДанным  -Строка- полное имя реквизита формы, содержащего значение. Например "Объект.Контрагент"
//                        или "Объект.Товары[5].Номенклатура"
// Возвращаемое значение:
//   Значение реквизита формы
//
Функция ЗначениеРеквизитаФормы(Знач Форма, Знач ПутьКДанным) Экспорт
	
	ТекущееЗначение = Форма;
	ЧастиПути = СтрЗаменить(СтрЗаменить(ПутьКДанным, " ", ""), ".", Символы.ПС);
	Для Позиция = 1 По СтрЧислоСтрок(ЧастиПути) Цикл
		ВладелецЗначения = ТекущееЗначение;
		ИмяРеквизита = СтрПолучитьСтроку(ЧастиПути, Позиция);
		Если Прав(ИмяРеквизита, 1) = "]" Тогда
			ПозицияСкобки = Найти(ИмяРеквизита, "[");
			Индекс = Число(Сред(Лев(ИмяРеквизита, СтрДлина(ИмяРеквизита) - 1), ПозицияСкобки + 1));
			ИмяРеквизита = Лев(ИмяРеквизита, ПозицияСкобки - 1);
			ТекущееЗначение = ВладелецЗначения[ИмяРеквизита].НайтиПоИдентификатору(Индекс);
		Иначе
			ТекущееЗначение = ВладелецЗначения[ИмяРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущееЗначение;
	
КонецФункции

// Возвращает сокращенное строковое представление коллекции значений
//
// Параметры:
//  Коллекция                       - массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2) Экспорт
	
	СтрокаПредставления = "";
	
	КоличествоЗначений = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

// Возвращает строку, длиной не более определенного количества символов.
// Если строка больше - она обрезается и в конец добавляется многоточие.
//
// Параметры:
//  ИсходнаяСтрока     - Строка
//  МаксимальнаяДлина  - Число
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСтрокиСДлинойНеБолее(ИсходнаяСтрока, МаксимальнаяДлина) Экспорт
	
	Если СтрДлина(ИсходнаяСтрока) <= МаксимальнаяДлина Тогда
		Возврат ИсходнаяСтрока;
	Иначе
		Возврат Лев(ИсходнаяСтрока, МаксимальнаяДлина - 3) + "...";
	КонецЕсли;
	
КонецФункции

// Возвращает информацию об исходной причине ошибки.
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке - Информация об ошибке.
//
// Возвращаемое значение:
//  ИнформацияОбОшибке - информация исходная ошибка.
//
Функция ИсходнаяИнформацияОбОшибке(ИнформацияОбОшибке) Экспорт
	
	ПричинаОшибки = ИнформацияОбОшибке;
	Пока ПричинаОшибки.Причина <> Неопределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	
	Возврат ПричинаОшибки;
	
КонецФункции

// Возвращает прошедшее время с начала замера в секундах.
//
// Параметры:
//  НачалоЗамера - Число - начало замера в виде универсальной даты в миллисекундах.
//
// Возвращаемое значение:
//  Число - количество секунд от начала замера.
//
Функция ПрошлоВремени(НачалоЗамера) Экспорт
	
	ПрошлоВремени = Новый Структура("Часы, Минуты, Секунды");
	ПрошлоВремениВСекундах = Окр((ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера) / 1000);
	
	Возврат ПрошлоВремениВСекундах;
	
КонецФункции

// Возвращает текстовое представление интервала времени, заданного в секундах.
//
// Параметры:
//  Время - Число - интервал времени в секундах.
//
// Возвращаемое значение:
//   Строка - представление интервала времени.
//
Функция ПредставлениеВремени(Знач Время, ВыводитьСекунды = Истина) Экспорт
	
	ПредставлениеДней   = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
	ПредставлениеЧасов  = НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'");
	ПредставлениеМинут  = НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;%1 минуты'");
	ПредставлениеСекунд = НСтр("ru = ';%1 секунда;;%1 секунды;%1 секунд;%1 секунды'");
	
	Время = Число(Время);
	Если Время < 0 Тогда
		Время = -Время;
	КонецЕсли;
	
	КоличествоДней   = Цел(Время / 60 / 60 / 24);
	КоличествоЧасов  = Цел(Время / 60 / 60);
	КоличествоМинут  = Цел(Время / 60);
	КоличествоСекунд = Цел(Время);
	
	КоличествоСекунд = КоличествоСекунд - КоличествоМинут * 60;
	КоличествоМинут  = КоличествоМинут - КоличествоЧасов * 60;
	КоличествоЧасов  = КоличествоЧасов - КоличествоДней * 24;
	
	Если Не ВыводитьСекунды Тогда
		КоличествоСекунд = 0;
	КонецЕсли;
	
	ПредставлениеВремени = Новый Массив;
	Если КоличествоДней > 0 Тогда
		ДниПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, КоличествоДней);
		ПредставлениеВремени.Добавить(ДниПрописью);
	КонецЕсли;
	
	Если КоличествоЧасов > 0 Тогда
		ЧасыПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, КоличествоЧасов);
		ПредставлениеВремени.Добавить(ЧасыПрописью);
	КонецЕсли;
	
	Если КоличествоМинут > 0 Тогда
		МинутыПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, КоличествоМинут);
		ПредставлениеВремени.Добавить(МинутыПрописью);
	КонецЕсли;
	
	Если КоличествоСекунд > 0 Тогда
		СекундыПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеСекунд, КоличествоСекунд);
		ПредставлениеВремени.Добавить(СекундыПрописью);
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеВремени, " ");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Установка значений элементов формы
#Область УстановкаЗначенийЭлементовФормы

// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ИмяСвойства) = ВРег("ТолькоПросмотр") И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства = Не Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение свойства элементов формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы       - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов      - Массив - массив имен искомых элементов.
//  ИмяСвойства         - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение            - Произвольный - значение, которое будет установлено
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение) Экспорт
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение);
	КонецЦикла
	
КонецПроцедуры

// Устанавливает видимость элементов формы из списка ВсеЭлементы
//
// Параметры:
//  ЭлементыФормы   - элементы формы, среди которых содержится искомый элемент.
//  ВсеЭлементы     - Массив(Строка) - имена элементов формы, для которых устанавливается видимость
//  ВидимыеЭлементы - Массив(Строка) - имена элементов формы, которые должны быть видимыми,
//                                     все остальные будут невидимыми
//
Процедура УстановитьВидимостьЭлементовФормыПоМассиву(ЭлементыФормы, ВсеЭлементы, ВидимыеЭлементы) Экспорт
	
	Для Каждого ИмяЭлемента Из ВсеЭлементы Цикл
		
		Видимость = ВидимыеЭлементы.Найти(ИмяЭлемента) <> Неопределено;
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
		УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, "Видимость", Видимость);
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует элементы из одной коллекции в другую
//
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление);
		ИначеЕсли ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует элементы коллекции настроек компоновки данных.
//
// Параметры:
//  ПриемникЗначения - коллекция-приемник элементов настроек компоновки данных.
//  ИсточникЗначения - коллекция-источник элементов настроек компоновки данных.
//  ПервыйУровень    - если передается, тогда выступает в роли настроек первого уровня коллекции.
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет из проверяемые настройки если они не заполнены
//
// Параметры:
//  Настройки - Соответствие откуда удаляются пустые настройки
//  ПроверяемыеНастройки - массив ключей настроек которые надо удалить, если пустые.
//
Процедура УдалитьНезаполненныеНастройки(Настройки, ПроверяемыеНастройки) Экспорт
	
	Для Каждого ИмяНастройки Из ПроверяемыеНастройки Цикл
		
		Настройка = Настройки.Получить(ИмяНастройки);
		Если Не Настройка = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(Настройка) Тогда
				
				Настройки.Удалить(ИмяНастройки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Экранирует служебные символы в строке шаблона оператора ПОДОБНО языка запросов
//
Функция ЭкранироватьСлужебныеСимволыШаблона(Знач Текст, Спецсимвол = "\") Экспорт
	
	Результат = СтрЗаменить(Текст, Спецсимвол, Спецсимвол + Спецсимвол);
	Результат = СтрЗаменить(Результат, "%", Спецсимвол + "%");
	Результат = СтрЗаменить(Результат, "_", Спецсимвол + "_");
	Результат = СтрЗаменить(Результат, "[", Спецсимвол + "[");
	Результат = СтрЗаменить(Результат, "]", Спецсимвол + "]");
	
	Возврат Результат;
	
КонецФункции

// Возвращает условное оформление динамического списка,
// в соответствии с установленным режимом отображения.
//
// Параметры:
//  Список           - ДинамическийСписок - список, которого получается условное оформление.
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных.
//
// Возвращаемые значения:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных.
//
Функция ПолучитьУсловноеОформлениеДинамическогоСписка(Список, РежимОтображения = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		УсловноеОформление = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление;
	Иначе
		УсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	КонецЕсли;
	
	Возврат УсловноеОформление;
	
КонецФункции

// Устанавливает свойство ТолькоВоВсехДействиях элементов формы.
//
// Параметры:
//  Элемент - КнопкаФормы, ГруппаФормы, Массив - элементы для которых нужно установить свойство.
//  Значение - Булево - значение свойства.
//
Процедура УстановитьОтображениеТолькоВоВсехДействиях(Элемент, Значение) Экспорт
	
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("КнопкаФормы") Тогда
		Элемент.ТолькоВоВсехДействиях = Истина;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ПодчиненныеЭлементы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьОтображениеТолькоВоВсехДействиях(ПодчиненныйЭлемент, Значение);
		КонецЦикла;
	ИначеЕсли ТипЭлемента = Тип("Массив") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент Цикл
			УстановитьОтображениеТолькоВоВсехДействиях(ПодчиненныйЭлемент, Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // УстановкаЗначенийЭлементовФормы

///////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры работы с отчетами
#Область ВспомогательныеПроцедурыРаботыСОтчетами

// Получает параметр из компоновщика настроек.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных,
//              НастройкиВложенногоОбъектаКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных,
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных.
//  Параметр  - Строка, ПараметрКомпоновкиДанных - поле или имя поля, для которого нужно вернуть параметр.
//
// Возвращаемое значение:
//  ЗначениеПараметраНастроекКомпоновкиДанных - Неопределено, если параметр не найден.
//
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.ФиксированныеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	Для каждого Элемент Из Отбор.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование  = Использование;
	ЭлементОтбора.ЛевоеЗначение  = Поле;
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	Возврат ЭлементОтбора;
	
КонецФункции

// Устанавливает параметр настроек компоновки данных.
//
// Параметры:
//  Настройки     - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных
//                - настройки СКД, для которых требуется установить параметры.
//  Параметр      - Строка,ПараметрКомпоновкиДанных - параметр, который требуется установить.
//  Значение      - Произвольный - значение, которое требуется установить.
//  Использование - признак использования параметра СКД, значение по умолчанию Истина.
//
// Возвращаемое значение:
//  ЗначениеПараметраНастроекКомпоновкиДанных - установленный параметр настроек компоновки данных.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеПараметра.Значение = Значение;
	ЗначениеПараметра.Использование = Использование;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Добавляет группировку в компоновщик настроек
// в самый нижний уровень структуры, если поле не указано - детальные поля.
//
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
	Если ЭлементСтруктуры = Неопределено 
	 ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
	   И Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	
	Возврат НоваяГруппировка;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек
//
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек
//
Функция УстановитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра, Значение) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

// Возвращает массив выбранных полей или групп выбранных полей
//
// Параметр:
//  ЭлементСтруктуры - элемент структуры, настройка компоновщика настроек, компоновщик настроек.
//  ТолькоГруппы     - признак, того что процедура будет возвращать только группы.
//
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассив(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

// Функция добавляет выбранное поле в набор выбранных полей
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ВыбранноеПоле;
	
КонецФункции

// Заполняет массив выбранными полями
//
Процедура ДобавитьВыбранныеПоляВМассив(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь) Экспорт
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьВыбранныеПоляВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет все элементы настройки компоновки данных из объекта
//
Процедура ОчиститьНастройкиКомпоновкиДанных(Настройки) Экспорт
	
	Если Настройки = Неопределено Или ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Значение = Неопределено;
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Для Каждого Параметр Из Настройки.ПараметрыВывода.Элементы Цикл
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	Настройки.Структура.Очистить();
	
КонецПроцедуры

// Копирует настройки компоновки данных
//
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для Каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
	 Или ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 Или ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
	 Или ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 Или ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для Каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура копирует отбор из одних настроек компоновки данных в другие настройки.
//
// Параметры:
//  СхемаПриемник     - СхемаКомпоновкиДанных - схема компоновки данных, в чьи настройки копируется отбор.
//  НастройкиПриемник - НастройкиКомпоновкиДанных - настройки компоновки данных, в которое копируется отбор.
//  НастройкиИсточник - НастройкиКомпоновкиДанных - настройки компоновки данных, из которых копируется отбор.
//
Процедура СкопироватьОтборКомпоновкиДанных(СхемаПриемник, НастройкиПриемник, НастройкиИсточник) Экспорт
	
	ДополнитьОтборКомпоновкиДанных(НастройкиПриемник.Отбор, НастройкиИсточник.Отбор);
	
	// Нужно исправить настройки приемника, т.к. в отборе источника могут быть поля, которые недоступны в приемнике.
	КомпоновщикНастроекЗапроса = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекЗапроса.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПриемник));
	КомпоновщикНастроекЗапроса.ЗагрузитьНастройки(НастройкиПриемник);
	КомпоновщикНастроекЗапроса.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	НастройкиПриемник = КомпоновщикНастроекЗапроса.ПолучитьНастройки();
	
КонецПроцедуры

// Дополняет отбор компоновки данных из другого отбора
//
// Параметры:
//  Приемник - ОтборКомпоновкиДанных - отбор, в который происходит копирование
//  Источник - ОтборКомпоновкиДанных - Отбор, из которого копируются отборы
//
Процедура ДополнитьОтборКомпоновкиДанных(Приемник, Источник) Экспорт
	
	Для Каждого ЭлементОтбора Из Источник.Элементы Цикл
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		НовыйЭлемент = Приемник.Элементы.Добавить(ТипЭлементаОтбора);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
		
		Если ТипЭлементаОтбора = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ДополнитьОтборКомпоновкиДанных(НовыйЭлемент, ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие используемых отборов
//
Функция УстановленОтборКомпоновкиДанных(Отбор) Экспорт
	
	ОтборУстановлен = Ложь;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			 Или УстановленОтборКомпоновкиДанных(ЭлементОтбора) Тогда
				ОтборУстановлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтборУстановлен;
	
КонецФункции

// Процедура заполняет список непроверяемых реквизитов значениями, не используемыми при выбранной хозяйственной операции документа.
//
// Параметры:
//  НепроверяемыеРеквизиты - Массив(Строка) - список реквизитов объекта, не требующих проверки.
//  ВсеРеквизиты           - Массив(Строка) - список всех реквизитов документа.
//  РеквизитыОперации      - Массив(Строка) - список реквизитов документа, которые относятся к хозяйственной операции документа.
//
Процедура ЗаполнитьНепроверяемыеРеквизиты(НепроверяемыеРеквизиты, ВсеРеквизиты, РеквизитыОперации) Экспорт
	
	Для Каждого ЭлементМассива Из ВсеРеквизиты Цикл
		
		// Если реквизит не используется для хозяйственной операции, исключаем данный реквизит из проверки.
		Если РеквизитыОперации.Найти(ЭлементМассива) = Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает область отбора динамического списка
//
// Параметры:
//  ДинамическийСписок - 
//  РежимОтображения   - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - 
//
// Возвращаемое значение:
//  Отбор - отбор динамического списка в зависимости от режима отображения элементов
//
Функция ОбластьОтбораДинамическогоСписка(ДинамическийСписок, РежимОтображения = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Или РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Возврат ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	КонецЕсли;
	
	Возврат ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	
КонецФункции

#КонецОбласти // ВспомогательныеПроцедурыРаботыСОтчетами

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// См. эту процедуру в модуле ОбщегоНазначенияБольничнаяАптекаСобытия.
// Предназначена для поддержки толстого клиента (вариант клиент-сервер).
//
Процедура ПереопределитьПолучаемуюФормуВалют(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияБольничнаяАптекаВызовСервера.ПереопределитьПолучаемуюФормуВалют(
		Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ЭтоЦифра(Знач Символ)
	
	Возврат (Найти("0123456789", Символ) > 0);
	
КонецФункции

Функция ЭтоБуква(Знач Символ)
	
	РусскийАлфавит    = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ";
	АнглийскийАлфавит = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	Возврат (Найти(РусскийАлфавит, ВРег(Символ)) > 0 Или Найти(АнглийскийАлфавит, ВРег(Символ)) > 0);
	
КонецФункции

Функция ЭтоКорректныйСимволИдентификатора(Знач Символ)
	
	Возврат Символ = "_" Или ЭтоЦифра(Символ) Или ЭтоБуква(Символ);
	
КонецФункции

Функция ЭтоПробельныйСимвол(Знач Символ)
	
	Возврат
		(Символ = " "
	 Или Символ = Символы.Таб
	 Или Символ = Символы.ВК
	 Или Символ = Символы.ВТаб
	 Или Символ = Символы.НПП
	 Или Символ = Символы.ПС
	 Или Символ = Символы.ПФ);
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

