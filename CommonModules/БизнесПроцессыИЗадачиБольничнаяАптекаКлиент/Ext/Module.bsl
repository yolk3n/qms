
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Открывает форму выбора исполнителя.
//
// Параметры:
//   ЭлементИсполнитель  - элемент формы, в которой выполняется выбора исполнителя,
//                         который будет указан как владелец формы выбора исполнителя
//   РеквизитИсполнитель - выбранное ранее значение исполнителя.
//                         Используется для установки текущей строки в форме выбора исполнителя
//   ТолькоПростыеРоли   - Булево, если Истина, то указывает что для выбора нужно
//                         использовать только роли без объектов адресации.
//   БезВнешнихРолей     - Булево, если Истина, то указывает, что для выбора надо
//                         использовать только роли, у которых не установлен признак ВнешняяРоль.
//
Процедура ВыбратьИсполнителя(ЭлементИсполнитель, РеквизитИсполнитель, ТолькоПростыеРоли, БезВнешнихРолей, ПоказыватьФункции = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель"      , РеквизитИсполнитель);
	ПараметрыФормы.Вставить("ТолькоПростыеРоли", ТолькоПростыеРоли);
	ПараметрыФормы.Вставить("БезВнешнихРолей"  , БезВнешнихРолей);
	ПараметрыФормы.Вставить("ПоказыватьФункции", ПоказыватьФункции);
	ОткрытьФорму("ОбщаяФорма.ВыборИсполнителяБизнесПроцесса", ПараметрыФормы, ЭлементИсполнитель);
	
КонецПроцедуры

// Открывает форму подбора исполнителей
//
// Параметры:
//  АдресВременногоХранилища - Строка           - адрес, где хранится таблица уже выбранных исполнителей
//  ФормаВладелец            - ФормаКлиентскогоПриложения - форма, в которую возвращаются выбранные исполнители
//  ТолькоПростыеРоли        - Булево           - если Истина, то указывает что для выбора нужно
//                                                использовать только роли без объектов адресации.
//  БезВнешнихРолей          - Булево           - если Истина, то указывает, что для выбора надо использовать
//                                                только роли, у которых не установлен признак ВнешняяРоль.
//  ПоказыватьФункции        - Булево           - если Истина, то указывает, что необходимо показывать список
//                                                пользовательских функций для автоподстановки исполнителей в шаблонах бизнес-процессов.
//
Процедура ПодборИсполнителей(АдресВременногоХранилища, ФормаВладелец, ТолькоПростыеРоли = Ложь, БезВнешнихРолей = Ложь, ПоказыватьФункции = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ТолькоПростыеРоли"       , ТолькоПростыеРоли);
	ПараметрыФормы.Вставить("БезВнешнихРолей"         , БезВнешнихРолей);
	ПараметрыФормы.Вставить("ПоказыватьФункции"       , ПоказыватьФункции);
	
	ОткрытьФорму("ОбщаяФорма.ПодборИсполнителей", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Вызывает форму для выбора главной задачи
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма бизнес процесса
//
Процедура УстановитьГлавнуюЗадачуБизнесПроцессаИзФормыОбъекта(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно установить главную задачу процессу, входящему в составной или комплексный процесс.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("КромеЗадачБизнесПроцесса", Форма.Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьГлавнуюЗадачуБизнесПроцессаИзФормыОбъектаПродолжение", ЭтотОбъект, Форма);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаВыбора",
				ПараметрыФормы,
				Форма.Элементы.ГлавнаяЗадача,
				,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Продолжение процедуры УстановитьГлавнуюЗадачуБизнесПроцессаИзФормыОбъекта
//
// Параметры:
//  ВыбранноеЗначение - ЗадачаСсылка.ЗадачаИсполнителя - выбранная задача
//  Форма             - ФормаКлиентскогоПриложения               - форма бизнес процесса
//
Процедура УстановитьГлавнуюЗадачуБизнесПроцессаИзФормыОбъектаПродолжение(ВыбранноеЗначение, Форма) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Форма.Объект.ГлавнаяЗадача = ВыбранноеЗначение;
		Форма.Элементы.ГлавнаяЗадача.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывает форму выбора роли исполнителя
//
// Параметры:
//  Объект                        - СправочникОбъект, БизнесПроцессОбъект - изменяемый объект
//  Участник                      - Строка             - имя изменяемого поля
//  ОсновнойОбъектАдресации       - Строка             - имя изменяемого поля
//  ДополнительныйОбъектАдресации - Строка             - имя изменяемого поля
//  Форма                         - ФормаКлиентскогоПриложения   - форма, в которую возвращаются изменяемые значения
//  ОповещениеПослеЗавершения     - ОписаниеОповещения - вызывается после завершения изменения участника
//
Процедура ПриИзмененииУчастника(Объект, Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, Форма, ОповещениеПослеЗавершения = Неопределено) Экспорт
	
	Если ТипЗнч(Объект[Участник]) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Объект[Участник]) Тогда
		Если БизнесПроцессыИЗадачиБольничнаяАптекаВызовСервера.РольИспользуетсяСОбъектамиАдресации(Объект[Участник]) Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя"              , Объект[Участник]);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации"      , Объект[ОсновнойОбъектАдресации]);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", Объект[ДополнительныйОбъектАдресации]);
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Объект"                       , Объект);
			ПараметрыОповещения.Вставить("Участник"                     , Участник);
			ПараметрыОповещения.Вставить("ОсновнойОбъектАдресации"      , ОсновнойОбъектАдресации);
			ПараметрыОповещения.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			ПараметрыОповещения.Вставить("ОповещениеПослеЗавершения"    , ОповещениеПослеЗавершения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииУчастникаЗавершение", ЭтотОбъект, ПараметрыОповещения);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения реквизитов объекта
// Продолжение процедуры ПриИзмененииУчастника
//
// Параметры:
//  Результат - Структура - результат выбора роли исполнителя
//    Элементы структуры:
//      РольИсполнителя -             - СправочникСсылка.РолиИсполнителей    - устанавливаемое значение
//      ОсновнойОбъектАдресации       - Характеристика.ОбъектыАдресацииЗадач - устанавливаемое значение
//      ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - устанавливаемое значение
//  Параметры - Структура - 
//    Элементы структуры:
//      Объект                        - СправочникОбъект, БизнесПроцессОбъект - изменяемый объект
//      Участник                      - Строка             - имя изменяемого поля
//      ОсновнойОбъектАдресации       - Строка             - имя изменяемого поля
//      ДополнительныйОбъектАдресации - Строка             - имя изменяемого поля
//      ОповещениеПослеЗавершения     - ОписаниеОповещения - вызывается после завершения изменения участника
//
Процедура ПриИзмененииУчастникаЗавершение(Результат, Параметры) Экспорт
	
	Объект                        = Параметры.Объект;
	Участник                      = Параметры.Участник;
	ОсновнойОбъектАдресации       = Параметры.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = Параметры.ДополнительныйОбъектАдресации;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект[Участник]                      = Результат.РольИсполнителя;
		Объект[ОсновнойОбъектАдресации]       = Результат.ОсновнойОбъектАдресации;
		Объект[ДополнительныйОбъектАдресации] = Результат.ДополнительныйОбъектАдресации;
		
	Иначе
		
		Объект[Участник]                      = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Объект[ОсновнойОбъектАдресации]       = Неопределено;
		Объект[ДополнительныйОбъектАдресации] = Неопределено;
		
	КонецЕсли;
	
	Если Параметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Задает вопрос пользователю перед стартом бизнес-процесса
//
// Параметры:
//  Объект          - БизнесПроцессОбъект - 
//  Форма           - ФормаКлиентскогоПриложения    - программный модуль, процедура которого будет вызвана
//  ПараметрыЗаписи - Структура           - обрабатываемые параметры перед записью объекта
//  Отказ           - Булево              - флаг отказа продолжения обработки
//
Процедура ПроверитьСрокВыполненияПроцессаПередСтартом(Объект, Форма, ПараметрыЗаписи, Отказ) Экспорт
	
	// Если пользователь ранее не ответил на вопрос о запуске процесса при некорректном сроке выполнения
	// утвердительно, то покажем ему вопрос о том, необходимо ли стартовать процесс,
	// если общий срок его меньше текущей даты.
	// Если пользователь уже ответил на вопрос, то проверка общего срока пропускается.
	Если Не СтартоватьПриОшибке(ПараметрыЗаписи, "СтартоватьЕслиОбщийСрокМеньшеТекущего") Тогда
		Если ЗначениеЗаполнено(Объект.СрокИсполнения) И Объект.СрокИсполнения < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
			ТекстВопроса = НСтр("ru = 'Общий срок исполнения уже истек. Запустить процесс?'");
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			Оповещение = Новый ОписаниеОповещения("ПередЗаписьюПриСтартеЗавершениеВопросаОбОбщемСроке", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет); 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Задает вопрос исполнителям перед стартом бизнес-процесса
//
// Параметры:
//  Объект          - БизнесПроцессОбъект - 
//  Форма           - ФормаКлиентскогоПриложения    - программный модуль, процедура которого будет вызвана
//  ПараметрыЗаписи - Структура           - обрабатываемые параметры перед записью объекта
//  Отказ           - Булево              - флаг отказа продолжения обработки
//
Процедура ПроверитьСрокВыполненияПроцессаИсполнителямиПередСтартом(Объект, Форма, ПараметрыЗаписи, Отказ) Экспорт
	
	// Если старт процесса выполняется не после ответа на вопрос о сроке исполнения для одного из исполнителей,
	// то выполняется проверка правильности указания сроков для исполнителей.
	// Если пользователь уже ответил на вопрос, то проверка пропускается.
	Если Не СтартоватьПриОшибке(ПараметрыЗаписи, "СтартоватьЕслиСрокИсполнителяМеньшеТекущего") Тогда
		Исполнители = "";
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если ЗначениеЗаполнено(Строка.СрокИсполнения) И Строка.СрокИсполнения < НачалоДня(ТекущаяДата) Тогда
				Исполнители = Исполнители + Строка(Строка.Исполнитель) + ", ";
			КонецЕсли;
		КонецЦикла;
		Если Исполнители <> "" Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Срок исполнения для %1 уже истек. Запустить процесс?'"),
				Лев(Исполнители, СтрДлина(Исполнители) - 1));
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			Оповещение = Новый ОписаниеОповещения("ПередЗаписьюПриСтартеЗавершениеВопросаОСрокеИсполнителя", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСрокВыполненияПроцессаПередСтартом
//
// Параметры:
//  Результат - КодВозвратаДиалога
//  Параметры - Структура          - обрабатываемые параметры перед записью объекта
//  Форма     - ФормаКлиентскогоПриложения   - обрабатываемая форма
//
Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОбОбщемСроке(Результат, Параметры) Экспорт
	
	ПередЗаписьюПриСтартеЗавершениеВопросаОПродолжении(
		Результат, Параметры.ПараметрыЗаписи, Параметры.Форма, "СтартоватьЕслиОбщийСрокМеньшеТекущего");
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСрокВыполненияПроцессаИсполнителямиПередСтартом
//
// Параметры:
//  Результат - КодВозвратаДиалога
//  Параметры - Структура          - обрабатываемые параметры перед записью объекта
//  Форма     - ФормаКлиентскогоПриложения   - обрабатываемая форма
//
Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОСрокеИсполнителя(Результат, Параметры) Экспорт
	
	ПередЗаписьюПриСтартеЗавершениеВопросаОПродолжении(
		Результат, Параметры.ПараметрыЗаписи, Параметры.Форма, "СтартоватьЕслиСрокИсполнителяМеньшеТекущего");
	
КонецПроцедуры

// Проверяет корректность заполнения сроков в карточке процессе перед записью.
// При некорректном заполнении задается вопрос пользователю.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма процесса.
//  Процесс - ДанныеФормыСтруктура,
//            Структура - процесс в форме или структура сроков процесса.
//  ПараметрыЗаписи - Структура - параметры записи обработки ПередЗаписью.
//  Отказ - Булево - Помещается Истина, если задается вопрос.
//
Процедура ПроверитьКорректностиЗаполненияОтложенногоПроцесса(Форма, Процесс, ПараметрыЗаписи, Отказ) Экспорт
	
	ДатаСтарта = БизнесПроцессыИЗадачиБольничнаяАптекаВызовСервера.ДатаОтложенногоСтартаПроцесса(Процесс.Ссылка);
	// Если отложенный старт не настроен, то проверка не требуется
	Если Не ЗначениеЗаполнено(ДатаСтарта) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтартоватьПриОшибке(ПараметрыЗаписи, "СтартоватьСНекорректнымиСроками") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНезаполненныеСроки = Ложь;
	Сроки = СрокиПроцесса(Процесс, ЕстьНезаполненныеСроки);
	
	// Если сроки участников в процессе не заполнены, то ничего не делаем.
	Если Сроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСрокиМеньшеДатыСтарта = Ложь;
	Для Каждого Срок Из Сроки Цикл
		Если Срок < ДатаСтарта Тогда
			ЕстьСрокиМеньшеДатыСтарта = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекстВопроса = НСтр("ru = 'Записать процесс?'");
	
	Если ЕстьСрокиМеньшеДатыСтарта Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Некоторые сроки процесса истекут к дате запуска процесса.'") + Символы.ПС + ТекстВопроса;
	КонецЕсли;
	
	Если ЕстьНеЗаполненныеСроки Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Некоторые сроки не указаны.'") + Символы.ПС + ТекстВопроса;
	КонецЕсли;
	
	Если Отказ Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьЗаписьПослеПроверкиКорректностиЗаполненияСроковОтложенногоПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Отложенный запуск процесса'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьКорректностиЗаполненияОтложенногоПроцесса
//
// Параметры:
//  Результат - КодВозвратаДиалога
//  Параметры - Структура          - обрабатываемые параметры перед записью объекта
//  Форма     - ФормаКлиентскогоПриложения   - обрабатываемая форма
//
Процедура ПродолжитьЗаписьПослеПроверкиКорректностиЗаполненияСроковОтложенногоПроцесса(Результат, Параметры) Экспорт
	
	ПередЗаписьюПриСтартеЗавершениеВопросаОПродолжении(
		Результат, Параметры.ПараметрыЗаписи, Параметры.Форма, "СтартоватьСНекорректнымиСроками");
	
КонецПроцедуры

// Устанавливает статус предмета Закрыт
//
Процедура ПередУстановкойСтатусаПредметаЗакрыт(Предмет, ОповещениеЗавершения) Экспорт
	
	СтандартнаяОбработка = Истина;
	БизнесПроцессыИЗадачиБольничнаяАптекаКлиентПереопределяемый.ПередУстановкойСтатусаПредметаЗакрыт(Предмет, ОповещениеЗавершения, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОПродолжении(Результат, Параметры, Форма, ИдентификаторОшибки)
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил положительно, то сохраняем результат его ответа и заново
		// запускаем процесс записи карточки процесса с параметром "старт"
		ДобавитьСтартПриОшибке(Параметры, ИдентификаторОшибки);
		
		Если Форма.Записать(Параметры) Тогда
			Если Параметры.Свойство("ЗакрытьФормуПослеЗаписи")Тогда
				Форма.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сбросим его ответ на все предыдущие вопросы,
	// чтобы при следующем старте процесса все вопросы начались заново.
	ОчиститьСтартПриОшибках(Параметры);
	
КонецПроцедуры

Процедура ДобавитьСтартПриОшибке(Параметры, ИдентификаторОшибки)
	
	Если Не Параметры.Свойство("СтартоватьПриОшибках") Тогда
		Параметры.Вставить("СтартоватьПриОшибках", Новый Структура);
	КонецЕсли;
	
	Параметры.СтартоватьПриОшибках.Вставить(ИдентификаторОшибки, Истина);
	
КонецПроцедуры

Функция СтартоватьПриОшибке(Параметры, ИдентификаторОшибки)
	
	Возврат Параметры.Свойство("СтартоватьПриОшибках") И Параметры.СтартоватьПриОшибках.Свойство(ИдентификаторОшибки);
	
КонецФункции

Процедура ОчиститьСтартПриОшибках(Параметры)
	
	Если Параметры.Свойство("СтартоватьПриОшибках") Тогда
		Параметры.СтартоватьПриОшибках.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Функция СрокиПроцесса(Процесс, ЕстьНезаполненныеСроки)
	
	СрокиПроцесса = Новый Массив;
	ЕстьНезаполненныеСроки = Ложь;
	
	Если Процесс.Свойство("Исполнители") Тогда
		Для Каждого СтрокаИсполнитель Из Процесс.Исполнители Цикл
			Если Не СтрокаИсполнитель.Свойство("СрокИсполнения") Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсполнитель.СрокИсполнения) Тогда
				СрокиПроцесса.Добавить(СтрокаИсполнитель.СрокИсполнения);
			Иначе
				ЕстьНезаполненныеСроки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Процесс.Свойство("СрокИсполнения") Тогда
		Если ЗначениеЗаполнено(Процесс.СрокИсполнения) Тогда
			СрокиПроцесса.Добавить(Процесс.СрокИсполнения);
		Иначе
			ЕстьНезаполненныеСроки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СрокиПроцесса;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
