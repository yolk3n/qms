
#Область СлужебныйПрограммныйИнтерфейс

#Область Синхронизация

#Область Отправка

Функция ПодготовитьОбъектыКОтправке(ДанныеОбъектов, КонтекстДиагностики) Экспорт
	
	Результат = Новый Структура;
	
	СинхронизацияЭДОСлужебный.ДополнитьДанныеОбъектов(ДанныеОбъектов);
	СинхронизацияЭДОСлужебный.ПроверитьВозможностьОтправки(ДанныеОбъектов, КонтекстДиагностики);
	Если ДанныеОбъектов.Количество() И ДанныеОбъектов[0].РазрешеноОтправлять Тогда
		ОписаниеКонтейнера = ТранспортныеКонтейнерыЭДО.СоздатьКонтейнер(ДанныеОбъектов, КонтекстДиагностики);
		Результат.Вставить("Отказ", Не ЗначениеЗаполнено(ОписаниеКонтейнера.Ссылка));
	Иначе
		Результат.Вставить("Отказ", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отправляет объекты.
// 
// Параметры:
// 	ЗапросОбъектов - см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса, имя временной таблицы ОбъектыДляОтправки
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ОтпечаткиСертификатов - см. КриптографияБЭД.ПолучитьОтпечаткиСертификатов
// 	ВыбранныеСертификаты - Массив из см. СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 	ДополнительныеПараметры - Произвольный - передается в см. СинхронизацияЭДОСобытия.ПослеОтправкиОбъектов
// Возвращаемое значение:
// 	См. СинхронизацияЭДОКлиентСервер.НовыйРезультатОтправкиОбъектов
Функция ОтправитьОбъекты(ЗапросОбъектов, КонтекстДиагностики, ОтпечаткиСертификатов, ВыбранныеСертификаты = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ТранспортныеКонтейнеры = Новый Массив;
	
	Запросы = Новый Массив;
	
	Запросы.Добавить(ЗапросОбъектов);
	
	Отбор = ТранспортныеКонтейнерыЭДО.НовыйОтборКонтейнеровОбъектов();
	Отбор.Объект = "ВЫБРАТЬ Ссылка ИЗ ОбъектыДляОтправки";
	ЗапросКонтейнеровОбъектов = ТранспортныеКонтейнерыЭДО.ЗапросКонтейнеровОбъектовДляОтправки(Отбор,
		"КонтейнерыОбъектов");
	Запросы.Добавить(ЗапросКонтейнеровОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтейнерыОбъектов.Объект КАК Объект,
	|	КонтейнерыОбъектов.ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
	|	КонтейнерыОбъектов.Отправитель КАК Отправитель,
	|	КонтейнерыОбъектов.СпособОбмена КАК СпособОбмена
	|ИЗ
	|	КонтейнерыОбъектов КАК КонтейнерыОбъектов
	|ИТОГИ
	|ПО
	|	ТранспортныйКонтейнер";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ИдентификаторыОтправителей = Новый Массив;
	
	ВыборкаТранспортныйКонтейнер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТранспортныйКонтейнер.Следующий() Цикл
		ОписаниеКонтейнера = Новый Структура;
		ОписаниеКонтейнера.Вставить("Ссылка", ВыборкаТранспортныйКонтейнер.ТранспортныйКонтейнер);
		ОписаниеКонтейнера.Вставить("Отправитель", "");
		ОписаниеКонтейнера.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
		ОписаниеКонтейнера.Вставить("ОтправляемыеОбъекты", Новый Массив);
		
		ВыборкаДетальныеЗаписи = ВыборкаТранспортныйКонтейнер.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ИдентификаторыОтправителей.Найти(ВыборкаДетальныеЗаписи.Отправитель) = Неопределено Тогда
				ИдентификаторыОтправителей.Добавить(ВыборкаДетальныеЗаписи.Отправитель);
			КонецЕсли;
			ОписаниеКонтейнера.Отправитель = ВыборкаДетальныеЗаписи.Отправитель;
			ОписаниеКонтейнера.СпособОбмена = ВыборкаДетальныеЗаписи.СпособОбмена;
			ОписаниеКонтейнера.ОтправляемыеОбъекты.Добавить(ВыборкаДетальныеЗаписи.Объект);
		КонецЦикла;
		ТранспортныеКонтейнеры.Добавить(ОписаниеКонтейнера);
	КонецЦикла;
	
	ДанныеДляСинхронизации = СинхронизацияЭДОСлужебный.ДанныеДляСинхронизации(ОтпечаткиСертификатов,
		КонтекстДиагностики, ИдентификаторыОтправителей, ВыбранныеСертификаты);
	
	КонтекстОтправки = СинхронизацияЭДОСлужебный.НовыйКонтекстОтправки();
	КонтекстОтправки.ТранспортныеКонтейнеры = ТранспортныеКонтейнеры;
		
	Возврат СинхронизацияЭДОСлужебный.СформироватьИОтправитьТранспортныеКонтейнеры(КонтекстОтправки,
		КонтекстДиагностики, ДанныеДляСинхронизации.КлючиСинхронизации,, ДополнительныеПараметры);
	
КонецФункции

// Инициализирует таблицу данных отправляемых объектов, для добавления объекта используется см. ДобавитьДанныеОбъекта.
// Возвращаемое значение:
// 	ТаблицаЗначений:
// * Объект - Произвольный - отправляемый объект
// * Представление - Строка - представление отправляемого объекта
// * ДатаСоздания - Дата
// * ИдентификаторОтправителя - Строка
// * ИдентификаторПолучателя - Строка
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.УчастникЭДО
// * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// * ТребуетсяИзвещение - Булево
// * ТребуетсяПодтверждение - Булево
// * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид документа, используемый в настройках отправки.
// * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// * ОписаниеДанных - см. НовоеОписаниеДанныхОбъекта
// * ОписаниеДополнительныхДанных - см. НовоеОписаниеДанныхОбъекта
// * ПодписиОсновныхДанных - Массив из см. НовоеОписаниеДанныхОбъекта
// * ПодписиДополнительныхДанных - Массив из см. НовоеОписаниеДанныхОбъекта
// * Доверенности - см. ТранспортныеКонтейнерыЭДО.ПрочитатьКарточкуМЧД
// * СодержитМаркируемыеТовары - Булево
// * СопроводительнаяЗаписка - Строка
// * ОписаниеДокумента - см. НовоеОписаниеДокумента
// * ИдентификаторПакета - Строка
// * ИдентификаторДокументооборота - Строка
// * ИдентификаторСообщения - Строка
// * ИдентификаторКонтейнера - Строка
// * ИдентификаторыСообщенийОснований - Массив из Строка
// * ИдентификаторыДокументооборотовОснований - Массив из Строка
// * Отказ - Булево
// * ПричинаОтказа - Строка
// * ТипОшибкиОтправки - Строка
// * ОшибкаПередачи - см. НоваяОшибкаПередачи
// * ЭтоОтветнаяПодпись - Булево
// * Распакован - Булево
// * ДоверенностьВерна - Неопределено, Булево
// * ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО - (служебное поле) связанный с объектом
//                                                                     транспортный контейнер.
// * АдресРесурсаКонтрагента - Строка - (служебное поле)
// * АдресРесурсаОрганизации - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - (служебное поле)
// * СтатусПриглашения - ПеречислениеСсылка.СтатусыПриглашений - (служебное поле)
// * РазрешеноОтправлять - Булево - (служебное поле)
// * КодОшибки - Строка - (служебное поле)
// * Карточка - Структура - (служебное поле)
// * ЭтоПовторноЗагружаемоеСообщение - Булево - Устанавливается в Истина, если сообщение ЭДО загружается повторно,
//												например, если пользователь изменил начальную дату запроса электронных 
//												документов у оператора ЭДО и выполнил обмен.
Функция НовыеДанныеОбъектов() Экспорт
	
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ОписаниеТиповТипДокумента = Новый ОписаниеТипов(ТипыДокументов);
	ДанныеОбъектов = Новый ТаблицаЗначений;
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10)));
	ДанныеОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаВсеСсылки(), "Строка",,,
		Новый КвалификаторыСтроки(100)));
	ДанныеОбъектов.Колонки.Добавить("Представление");
	ДанныеОбъектов.Колонки.Добавить("ДатаСоздания", ОписаниеТиповДата);
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторОтправителя", ОписаниеТиповСтрока100);
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторПолучателя", ОписаниеТиповСтрока100);
	ДанныеОбъектов.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ДанныеОбъектов.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ДанныеОбъектов.Колонки.Добавить("ДоговорКонтрагента", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
	ДанныеОбъектов.Колонки.Добавить("ТребуетсяИзвещение", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("ТребуетсяПодтверждение", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("СпособОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	ДанныеОбъектов.Колонки.Добавить("ТипДокумента", ОписаниеТиповТипДокумента);
	ДанныеОбъектов.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеОбъектов.Колонки.Добавить("ТипРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРегламентовЭДО"));
	ДанныеОбъектов.Колонки.Добавить("ТипЭлементаРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ДанныеОбъектов.Колонки.Добавить("ОписаниеДанных");
	ДанныеОбъектов.Колонки.Добавить("ОписаниеДополнительныхДанных");
	ДанныеОбъектов.Колонки.Добавить("ПодписиОсновныхДанных", Новый ОписаниеТипов("Массив"));
	ДанныеОбъектов.Колонки.Добавить("ПодписиДополнительныхДанных", Новый ОписаниеТипов("Массив"));
	ДанныеОбъектов.Колонки.Добавить("Доверенности", Новый ОписаниеТипов("Соответствие"));
	ДанныеОбъектов.Колонки.Добавить("СодержитМаркируемыеТовары", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("СопроводительнаяЗаписка");
	ДанныеОбъектов.Колонки.Добавить("ОписаниеДокумента");
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторПакета");// InternalDocumentGroupId
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторДокументооборота",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));// DocflowId
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторСообщения", Новый ОписаниеТипов("Строка",,,
		Новый КвалификаторыСтроки(36)));// ExternalIdentifier
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторКонтейнера", Новый ОписаниеТипов("Строка",,,
		Новый КвалификаторыСтроки(200)));// InternalId, возвращаемы методом GetMessageList
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторыСообщенийОснований", Новый ОписаниеТипов("Массив"));// ParentDocument
	ДанныеОбъектов.Колонки.Добавить("ИдентификаторыДокументооборотовОснований", Новый ОписаниеТипов("Массив"));// LinkedDocument
	ДанныеОбъектов.Колонки.Добавить("Отказ", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("ПричинаОтказа", Новый ОписаниеТипов("Строка"));
	ДанныеОбъектов.Колонки.Добавить("ТипОшибкиОтправки", ОписаниеТиповСтрока100);
	ДанныеОбъектов.Колонки.Добавить("ОшибкаПередачи");
	ДанныеОбъектов.Колонки.Добавить("ЭтоОтветнаяПодпись", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("Распакован", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("ДоверенностьВерна");
	
	// Служебные поля
	ДанныеОбъектов.Колонки.Добавить("ТранспортныйКонтейнер");
	ДанныеОбъектов.Колонки.Добавить("Карточка");
	ДанныеОбъектов.Колонки.Добавить("АдресРесурсаКонтрагента");
	ДанныеОбъектов.Колонки.Добавить("АдресРесурсаОрганизации");
	ДанныеОбъектов.Колонки.Добавить("СтатусПриглашения", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПриглашений"));
	ДанныеОбъектов.Колонки.Добавить("РазрешеноОтправлять", ОписаниеТиповБулево);
	ДанныеОбъектов.Колонки.Добавить("ЭтоПовторноЗагружаемоеСообщение", ОписаниеТиповБулево);
	
	Возврат ДанныеОбъектов;
	
КонецФункции

// Возвращает описание данных отправляемого объекта, см. НовыеДанныеОбъектов.
// 
// Возвращаемое значение:
// 	Структура:
// * ИмяФайла - Строка
// * ДвоичныеДанные - ДвоичныеДанные
// * Подписи - Массив из см. НовыеДанныеПодписи
Функция НовоеОписаниеДанныхОбъекта() Экспорт
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ИмяФайла", "");
	ОписаниеДанных.Вставить("ДвоичныеДанные", Неопределено);
	
	Возврат ОписаниеДанных;
	
КонецФункции

// Возвращает описание документа.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Номер - Строка
// * Дата - Дата
// * Сумма - Число
Функция НовоеОписаниеДокумента() Экспорт
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("Номер", "");
	ОписаниеДокумента.Вставить("Дата", Дата(1, 1, 1));
	ОписаниеДокумента.Вставить("Сумма", 0);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

// Возвращает описание ошибки передачи электронного документа.
// 
// Возвращаемое значение:
// 	Структура:
// * Код - Строка
// * Описание - Строка
// * Блокирующая - Булево - ошибка блокирует документооборот
Функция НоваяОшибкаПередачи() Экспорт
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("Код", "");
	Ошибка.Вставить("Описание", "");
	Ошибка.Вставить("Блокирующая", Ложь);
	
	Возврат Ошибка;
	
КонецФункции

// Определяет признак повторной отправки объекта электронного документооборота.
// 
// Параметры:
// 	ОшибкаПередачи - См. НоваяОшибкаПередачи
// Возвращаемое значение:
// 	Булево - Признак ошибки повторной отправки.
Функция ЭтоОшибкаПовторнойОтправки(ОшибкаПередачи) Экспорт
	Возврат СервисЭДО.ЭтоКодОшибкиПовторнойОтправки(ОшибкаПередачи.Код);
КонецФункции

// Добавляет данные объекта в коллекцию.
// 
// Параметры:
// 	ДанныеОбъектов - см. НовыеДанныеОбъектов
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений из см. НовыеДанныеОбъектов
Функция ДобавитьДанныеОбъекта(ДанныеОбъектов) Экспорт
	
	ИндексСтроки = ДанныеОбъектов.Количество();
	ДанныеОбъекта = ДанныеОбъектов.Добавить();
	ДанныеОбъекта.ИдентификаторСтроки = ИндексСтроки;
	ДанныеОбъекта.ОписаниеДанных = НовоеОписаниеДанныхОбъекта();
	ДанныеОбъекта.ОписаниеДополнительныхДанных = НовоеОписаниеДанныхОбъекта();
	ДанныеОбъекта.ОписаниеДокумента = НовоеОписаниеДокумента();
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Возвращает данные объекта по идентификатору строки.
// 
// Параметры:
// 	ДанныеОбъектов - см. НовыеДанныеОбъектов
// 	ИдентификаторСтроки - Число
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений из см. НовыеДанныеОбъектов
Функция ДанныеОбъектаПоИдентификатору(ДанныеОбъектов, ИдентификаторСтроки) Экспорт
	
	Возврат ДанныеОбъектов[ИдентификаторСтроки];
	
КонецФункции

#КонецОбласти

// Определяет, что между участниками настроен документооборот и есть принятое приглашение к обмену
// электронными документами.
// 
// Параметры:
// 	ИдентификаторОтправителя - Строка
// 	ИдентификаторПолучателя - Строка
// Возвращаемое значение:
// 	Булево
Функция ДокументооборотНастроен(ИдентификаторОтправителя, ИдентификаторПолучателя) Экспорт
	
	Запросы = Новый Массив;
	
	Отбор = ПриглашенияЭДО.НовыйОтборПриглашений();
	Отбор.ИдентификаторОрганизации = "&ИдентификаторОтправителя";
	Отбор.ИдентификаторКонтрагента = "&ИдентификаторПолучателя";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", Отбор);
	
	Запросы.Добавить(ЗапросПриглашений);
	
	Отбор = НастройкиЭДО.НовыйОтборНастроекОтправки();
	Отбор.ИдентификаторОтправителя = "&ИдентификаторОтправителя";
	Отбор.ИдентификаторПолучателя = "&ИдентификаторПолучателя";
	ЗапросНастроек = НастройкиЭДО.ЗапросНастроекОтправки("НастройкиОтправки", Отбор);
	
	Запросы.Добавить(ЗапросНастроек);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиОтправки.Отправитель
		|ИЗ
		|	НастройкиОтправки КАК НастройкиОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
		|		ПО НастройкиОтправки.ИдентификаторОтправителя = Приглашения.ИдентификаторОрганизации
		|		И НастройкиОтправки.ИдентификаторПолучателя = Приглашения.ИдентификаторКонтрагента
		|		И Приглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторОтправителя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Определяет, наличие принятого приглашения к обмену электронными документами.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация
// 	Контрагент - ОпределяемыйТип.КонтрагентБЭД
// Возвращаемое значение:
// 	Булево
Функция СвязьНастроена(Организация, Контрагент) Экспорт
	
	Запросы = Новый Массив;
	
	Отбор = ПриглашенияЭДО.НовыйОтборПриглашений();
	Отбор.Контрагент = "&Контрагент";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", Отбор);
	Запросы.Добавить(ЗапросПриглашений);
	
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.Организация = "&Организация";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписи", Отбор);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Приглашения.Статус КАК Статус
		|ИЗ
		|	УчетныеЗаписи КАК УчетныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
		|		ПО УчетныеЗаписи.ИдентификаторЭДО = Приглашения.ИдентификаторОрганизации
		|			И (Приглашения.Контрагент = &Контрагент)
		|			И (Приглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Контрагент", Контрагент);
	ИтоговыйЗапрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Не ИтоговыйЗапрос.Выполнить().Пустой();
	
КонецФункции

// Сохраняет информацию о состоянии обмена электронными документами.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// 	Свойство - Строка - изменяемое свойство, возможные значения:
// 	ДатаПолученияДокументов, ДатаПолученияПриглашений,
// 	ПроверочнаяДатаПолученияДокументов, ПроверочнаяДатаПолученияПриглашений.
// 	Значение - Число - новое значение свойства.
Процедура ИзменитьСостояниеОбмена(ИдентификаторУчетнойЗаписи, Свойство, Значение) Экспорт
	
	Если Свойство = "ДатаПолученияДокументов" Тогда
		ИмяРесурса = "ДатаПолученияЭД";
	ИначеЕсли Свойство = "ДатаПолученияЭПД" Тогда
		ИмяРесурса = "ДатаПолученияЭПД";
	ИначеЕсли Свойство = "ДатаПолученияПриглашений" Тогда
		ИмяРесурса = "ДатаПоследнегоПолученияПриглашений";
	ИначеЕсли Свойство = "ПроверочнаяДатаПолученияДокументов" Тогда
		ИмяРесурса = "ПроверочнаяДатаПолученияЭД";
	ИначеЕсли Свойство = "ПроверочнаяДатаПолученияПриглашений" Тогда
		ИмяРесурса = "ПроверочнаяДатаПолученияПриглашений";
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимый параметр процедуры СинхронизацияЭДО.ИзменитьСостояниеОбмена'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭД КАК ДатаПолученияЭД,
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПолученияЭПД КАК ДатаПолученияЭПД,
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнегоПолученияПриглашений КАК ДатаПоследнегоПолученияПриглашений,
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности,
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ПроверочнаяДатаПолученияЭД КАК ПроверочнаяДатаПолученияЭД,
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ПроверочнаяДатаПолученияПриглашений КАК ПроверочнаяДатаПолученияПриглашений
		|ИЗ
		|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации = &ИдентификаторОрганизации";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторУчетнойЗаписи);
	
	НачатьТранзакцию();
	Попытка
		Поля = Новый Структура;
		Поля.Вставить("ИдентификаторОрганизации", ИдентификаторУчетнойЗаписи);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(
			"РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО", Поля);
		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторОрганизации.Установить(ИдентификаторУчетнойЗаписи);
		СтрокаНабора = НаборЗаписей.Добавить();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаДетальныеЗаписи);
		КонецЕсли;

		СтрокаНабора.ИдентификаторОрганизации = ИдентификаторУчетнойЗаписи;
		СтрокаНабора[ИмяРесурса] = Значение;

		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Изменение состояния обмена'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, является ли способ обмена обменом внутри организации.
// 
// Параметры:
// 	СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// Возвращаемое значение:
// 	Булево
Функция ЭтоИнтеркампани(СпособОбмена) Экспорт
	
	Возврат СинхронизацияЭДОСлужебный.ЭтоИнтеркампани(СпособОбмена);
	
КонецФункции

// Возвращает даты запроса данных у оператора электронного документооборота.
// 
// Параметры:
// 	ИдентификаторыУченыхЗаписей - Массив из Строка
// 	ТипДанных - см. СинхронизацияЭДО.ТипДанныхЗапросаОператораЭДОДокументы
// 	          - см. СинхронизацияЭДО.ТипДанныхЗапросаОператораЭДОПриглашения .
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//    * Ключ - Строка - идентификатор учетной записи
//    * Значение - см. НовоеОписаниеДатЗапросовДанныхУОператораЭлектронногоДокументооборота
Функция ДатыЗапросаДанныхОператораЭДО(ИдентификаторыУченыхЗаписей, ТипДанных) Экспорт
	
	ВыбираемыеПоля = Новый Массив;
	Если ТипДанных = ТипДанныхЗапросаОператораЭДОДокументы() Тогда
		ВыбираемыеПоля.Добавить("ИдентификаторОрганизации КАК ИдентификаторОрганизации");
		ВыбираемыеПоля.Добавить("ДатаПолученияЭД КАК ДатаПолучения");
		ВыбираемыеПоля.Добавить("ДатаПолученияЭПД КАК ДатаПолученияЭПД");
		ВыбираемыеПоля.Добавить("ПроверочнаяДатаПолученияЭД КАК ПроверочнаяДатаПолучения");
	ИначеЕсли ТипДанных = ТипДанныхЗапросаОператораЭДОПриглашения() Тогда 
		ВыбираемыеПоля.Добавить("ИдентификаторОрганизации КАК ИдентификаторОрганизации");
		ВыбираемыеПоля.Добавить("ДатаПоследнегоПолученияПриглашений КАК ДатаПолучения");
		ВыбираемыеПоля.Добавить("ПроверочнаяДатаПолученияПриглашений КАК ПроверочнаяДатаПолучения");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный параметр ""Тип данных"" в функции ""ДатыЗапросаДанныхОператораЭДО""'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВыбираемыеПоля
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации В (&ИдентификаторыОрганизации)
	|	И
	|		СостоянияОбменовЭДЧерезОператоровЭДО.УдалитьСоглашениеОбИспользованииЭД = ЗНАЧЕНИЕ(Справочник.УдалитьСоглашенияОбИспользованииЭД.ПустаяСсылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоля", СтрСоединить(ВыбираемыеПоля, "," + Символы.ПС));
	Запрос.УстановитьПараметр("ИдентификаторыОрганизации", ИдентификаторыУченыхЗаписей);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;
	
	Для Каждого Идентификатор Из ИдентификаторыУченыхЗаписей Цикл
		Даты = НовоеОписаниеДатЗапросовДанныхУОператораЭлектронногоДокументооборота();
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Идентификатор, "ИдентификаторОрганизации") Тогда
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаПолучения) Тогда
				Даты.ДатаПолучения = ВыборкаДетальныеЗаписи.ДатаПолучения;
			КонецЕсли;
			Если ТипДанных = ТипДанныхЗапросаОператораЭДОДокументы()
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаПолучения) Тогда
				Даты.ДатаПолученияЭПД = ВыборкаДетальныеЗаписи.ДатаПолученияЭПД;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПроверочнаяДатаПолучения) Тогда
				Даты.ПроверочнаяДатаПолучения = ВыборкаДетальныеЗаписи.ПроверочнаяДатаПолучения;
			КонецЕсли;
		КонецЕсли;
		Результат.Вставить(Идентификатор, Даты);
		ВыборкаДетальныеЗаписи.Сбросить();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание запроса документов у оператора электронного документооборота.
// См. ДатыЗапросаДанныхОператораЭДО.
// 
// Возвращаемое значение:
// 	Строка
Функция ТипДанныхЗапросаОператораЭДОДокументы() Экспорт
	
	Возврат "Документы";
	
КонецФункции

// Возвращает описание запроса приглашений к обмену электронными документами у оператора
// электронного документооборота. См. ДатыЗапросаДанныхОператораЭДО.
// 
// Возвращаемое значение:
// 	Строка
Функция ТипДанныхЗапросаОператораЭДОПриглашения() Экспорт
	
	Возврат "Приглашения";
	
КонецФункции

// Запускает проверку настроек регламентных заданий в фоне.
// 
// Параметры:
// 	ИдентификаторФормы - УникальныйИдентификатор
// Возвращаемое значение:
// 	См. ДлительныеОперации.ВыполнитьФункцию
Функция НачатьПроверкуНастроекРегламентныхЗаданий(ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Обработки.СинхронизацияЭДО.ПроверитьНастройкиРегламентныхЗаданийЭДО");
	
КонецФункции

// Возвращает учетные записи ключей синхронизации.
// 
// Параметры:
// 	КлючиСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации
// Возвращаемое значение:
// 	Массив из Строка
Функция УчетныеЗаписиКлючейСинхронизации(КлючиСинхронизации) Экспорт
	
	УчетныеЗаписи = Новый Массив;
	Для Каждого КлючИЗначение Из КлючиСинхронизации Цикл
		УчетныеЗаписи.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат УчетныеЗаписи;
	
КонецФункции

// Возвращает доступные идентификаторы ЭДО.
// 
// Параметры:
// 	Отправитель - ОпределяемыйТип.Организация
// 	Получатель - ОпределяемыйТип.КонтрагентБЭД
// Возвращаемое значение:
// 	Структура:
// * ИдентификаторыОтправителя - ТаблицаЗначений
// * ИдентификаторыОтправителяДляРейтинга - ТаблицаЗначений
// * ИдентификаторыПолучателя - ТаблицаЗначений
Функция ДоступныеИдентификаторыЭДО(Отправитель, Получатель) Экспорт
	
	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ПараметрыКонтрагента = Новый Структура(ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	КонецЕсли;
		
	ИмяРеквизитаИННОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ПараметрыОрганизации = Новый Структура(ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	Если ЗначениеЗаполнено(Отправитель) Тогда
		ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отправитель,
			ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	КонецЕсли;
	
	Запросы = Новый Массив;
	
	ОтборАбонентов = РаботаСАбонентамиЭДО.НовыйОтборАбонентовЭДО();
	ОтборАбонентов.ИНН = "&ИНН";
	ЗапросАбонентовПоИНН = РаботаСАбонентамиЭДО.ЗапросАбонентовЭДО("АбонентыЭДОПоИНН", ОтборАбонентов);
	Запросы.Добавить(ЗапросАбонентовПоИНН);
	
	ОтборНастроекОтправки = НастройкиЭДО.НовыйОтборНастроекОтправки();
	ОтборНастроекОтправки.Получатель = "&Получатель";
	ЗапросНастроекОтправки = НастройкиЭДО.ЗапросНастроекОтправки("НастройкиОтправкиЭлектронныхДокументовПоВидам",
		ОтборНастроекОтправки);
	Запросы.Добавить(ЗапросНастроекОтправки);
	
	ОтборПриглашений = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.Контрагент = "&Получатель";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПриглашений("Приглашения", ОтборПриглашений);
	Запросы.Добавить(ЗапросПриглашений);
	
	ОтборОрганизаций = ИнтеграцияЭДО.НовыйОтборОрганизаций();
	ОтборОрганизаций.ИНН = "&ИННОрганизации";
	ОрганизацииПоИНН = ИнтеграцияЭДО.ЗапросДоступныхОрганизаций("ОрганизацииПоИНН", ОтборОрганизаций);
	Запросы.Добавить(ОрганизацииПоИНН);
	
	ОтборОрганизаций = ИнтеграцияЭДО.НовыйОтборОрганизаций();
	ОтборОрганизаций.ИНН = "&ИННОрганизации";
	ОтборОрганизаций.КПП = "&КППОрганизации";
	ОрганизацииПоИННКПП = ИнтеграцияЭДО.ЗапросДоступныхОрганизаций("ОрганизацииПоИННКПП", ОтборОрганизаций);
	Запросы.Добавить(ОрганизацииПоИННКПП);
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ОтборУчетныхЗаписей.Организация = "ВЫБРАТЬ ОрганизацииПоИНН.Ссылка ИЗ ОрганизацииПоИНН КАК ОрганизацииПоИНН";
	ОтборУчетныхЗаписей.СпособОбмена = "&СпособОбмена";
	ЗапросУчетныхЗаписейПоИНН = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиПоИНН", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписейПоИНН);
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ОтборУчетныхЗаписей.Организация = "ВЫБРАТЬ ОрганизацииПоИННКПП.Ссылка ИЗ ОрганизацииПоИННКПП КАК ОрганизацииПоИННКПП";
	ОтборУчетныхЗаписей.СпособОбмена = "&СпособОбмена";
	ЗапросУчетныхЗаписейПоИННКПП = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиПоИННКПП", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписейПоИННКПП);
	
	ОтборАбонентов = РаботаСАбонентамиЭДО.НовыйОтборАбонентовЭДО();
	ЗапросАбонентов = РаботаСАбонентамиЭДО.ЗапросАбонентовЭДО("АбонентыЭДО", ОтборАбонентов);
	Запросы.Добавить(ЗапросАбонентов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АбонентыЭДОПоИНН.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ПОМЕСТИТЬ ИДАбонентовСгруппированные
	|ИЗ
	|	АбонентыЭДОПоИНН КАК АбонентыЭДОПоИНН
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя
	|ИЗ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Приглашения.ИдентификаторКонтрагента
	|ИЗ
	|	Приглашения КАК Приглашения
	|ГДЕ
	|	Приглашения.ИдентификаторКонтрагента <> Приглашения.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеЗаписиПоИНН.ИдентификаторЭДО КАК Значение,
	|	УчетныеЗаписиПоИНН.НаименованиеУчетнойЗаписи КАК Представление
	|ИЗ
	|	УчетныеЗаписиПоИНН КАК УчетныеЗаписиПоИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеЗаписиПоИННКПП.ИдентификаторЭДО КАК Значение,
	|	УчетныеЗаписиПоИННКПП.НаименованиеУчетнойЗаписи КАК Представление
	|ИЗ
	|	УчетныеЗаписиПоИННКПП КАК УчетныеЗаписиПоИННКПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИДАбонентовСгруппированные.ИдентификаторЭДО КАК Значение,
	|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание,
	|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание,
	|	ИДАбонентовСгруппированные.ИдентификаторЭДО + ВЫБОР
	|		КОГДА АбонентыЭДО.КраткоеОписание ЕСТЬ NULL ИЛИ АбонентыЭДО.КраткоеОписание = """"
	|			ТОГДА """"
	|		ИНАЧЕ "" ("" + АбонентыЭДО.КраткоеОписание + "")""
	|	КОНЕЦ КАК Представление
	|ИЗ
	|	ИДАбонентовСгруппированные КАК ИДАбонентовСгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ АбонентыЭДО КАК АбонентыЭДО
	|		ПО ИДАбонентовСгруппированные.ИдентификаторЭДО = АбонентыЭДО.ИдентификаторЭДО
	|
	|УПОРЯДОЧИТЬ ПО
	|	АбонентыЭДО.ДатаПоследнейАктивности УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);

	ИтоговыйЗапрос.УстановитьПараметр("ИНН"            , ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	ИтоговыйЗапрос.УстановитьПараметр("КПП"            , ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	ИтоговыйЗапрос.УстановитьПараметр("ИННОрганизации" , ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
	ИтоговыйЗапрос.УстановитьПараметр("КППОрганизации" , ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	ИтоговыйЗапрос.УстановитьПараметр("Получатель"     , Получатель);
	ИтоговыйЗапрос.УстановитьПараметр("СпособОбмена"   , СпособыОбменаЧерезОператора());
	
	РезультатЗапроса = ИтоговыйЗапрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.Количество();
	
	ИдентификаторыОтправителя  = РезультатЗапроса[КоличествоРезультатов - 3].Выгрузить();
	ИдентификаторыОтправителяПоКПП  = РезультатЗапроса[КоличествоРезультатов - 2].Выгрузить();
	
	Если ИдентификаторыОтправителяПоКПП.Количество() = 0 Тогда
		ИдентификаторыОтправителяПоКПП = ИдентификаторыОтправителя;
	КонецЕсли;
	
	ИдентификаторыПолучателя  = РезультатЗапроса[КоличествоРезультатов - 1].Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыОтправителя"           , ИдентификаторыОтправителя);
	Результат.Вставить("ИдентификаторыОтправителяДляРейтинга", ИдентификаторыОтправителяПоКПП);
	Результат.Вставить("ИдентификаторыПолучателя"            , ИдентификаторыПолучателя);
	
	Возврат Результат;
	
КонецФункции

// Возвращает способы обмена через оператора ЭДО.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.СпособыОбменаЭД
Функция СпособыОбменаЧерезОператора() Экспорт
	
	СпособыОбмена = Новый Массив;
	СпособыОбмена.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	СпособыОбмена.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	
	Возврат СпособыОбмена;
	
КонецФункции

// Определяет, является ли способ обмена внутренним обменом.
// 
// Параметры:
// 	СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// Возвращаемое значение:
// 	Булево
Функция ЭтоВнутреннийОбмен(СпособОбмена) Экспорт
	
	Возврат СпособОбмена = Перечисления.СпособыОбменаЭД.Внутренний;
	
КонецФункции

// Возвращает типы ошибок, которые могу возникнуть в процессе отправки объектов.
// 
// Возвращаемое значение:
// 	Структура:
// * ОжидаетсяОтветНаПриглашение - Строка
Функция ТипыОшибокОтправки() Экспорт
	
	ТипыОшибок = Новый Структура;
	ТипыОшибок.Вставить("ОжидаетсяОтветНаПриглашение", "ОжидаетсяОтветНаПриглашение");
	
	Возврат ТипыОшибок;
	
КонецФункции

// Определяет, требуется ли выполнить операцию повторно, например, если маркер просрочен или требуется его расшифровка
// на клиенте.
// 
// Параметры:
//  КлючСинхронизации - см. СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяПовторноеВыполнениеОперации(КлючСинхронизации) Экспорт
	
	Возврат СинхронизацияЭДОСлужебный.ТребуетсяПовторноеВыполнениеОперации(КлючСинхронизации);
	
КонецФункции

// Определяет, поддерживается ли передача МЧД в транспортном контейнере.
// 
// Параметры:
//  СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// 
// Возвращаемое значение:
//  Булево
Функция ПоддерживаетсяПередачаМЧДВТранспортномКонтейнере(СпособОбмена) Экспорт
	
	Возврат СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
КонецФункции

#Область ПрямойОбмен

// Определяет, является ли способ обмена прямым обменом.
// 
// Параметры:
// 	СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
// Возвращаемое значение:
// 	Булево
Функция ЭтоПрямойОбмен(СпособОбмена) Экспорт
	
	Возврат СинхронизацияЭДОСлужебный.ЭтоПрямойОбмен(СпособОбмена);
	
КонецФункции

// Возвращает способы прямого обмена.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.СпособыОбменаЭД
Функция СпособыПрямогоОбмена() Экспорт
	
	Способы = Новый Массив(3);
	Способы[0] = Перечисления.СпособыОбменаЭД.ЧерезКаталог;
	Способы[1] = Перечисления.СпособыОбменаЭД.ЧерезFTP;
	Способы[2] = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту;
	Возврат Способы;
	
КонецФункции

// Возвращает логин и пароль учетной записи прямого обмена через FTP.
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	- Неопределено - если в базе нет данных.
// 	- Структура - с ключами:
// * Логин - Строка.
// * Пароль - Строка - .
Функция ДанныеАутентификацииПрямогоОбменаЧерезFTP(ИдентификаторУчетнойЗаписи) Экспорт
	
	ДанныеИзБезопасногоХранилища = ПараметрыАутентификацииУчетнойЗаписиПрямогоОбмена(ИдентификаторУчетнойЗаписи);
	Если ДанныеИзБезопасногоХранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Логин", ДанныеИзБезопасногоХранилища.ЛогинFTP);
	Данные.Вставить("Пароль", ДанныеИзБезопасногоХранилища.ПарольFTP);
	
	Возврат Данные;
	
КонецФункции

// Записывает логин и пароль учетной записи прямого обмена через FTP в информационную базу.
// Если Логин и Пароль не переданы, удаляет данные аутентификации из информационной базы.
// Если передан только Логин или только Пароль, записан в базу будет только Логин или только Пароль соответственно.
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// 	Логин - Строка
// 	Пароль - Строка
Процедура ЗаписатьДанныеАутентификацииПрямогоОбменаЧерезFTP(ИдентификаторУчетнойЗаписи,
	Логин = "", Пароль = "") Экспорт
	
	Если Логин = "" И Пароль = "" Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторУчетнойЗаписи);
	Иначе
		Если Логин <> "" Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторУчетнойЗаписи, Логин, "ЛогинFTP");
		КонецЕсли;
		Если Пароль <> "" Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторУчетнойЗаписи, Пароль, "ПарольFTP");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет обмен через каталог для учетной записи прямого обмена.
// 
// Параметры:
// 	КаталогОбмена - Строка
// Возвращаемое значение:
// 	Строка - описание ошибки, если проверка прошла неудачно.
Функция ПроверитьОбменЧерезКаталог(КаталогОбмена) Экспорт
	
	ОписаниеОшибки = "";
	
	ПолноеИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогОбмена)
		+ ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолучитьИмяВременногоФайла("tmp")).Имя;
	
	Попытка
		РаботаСФайламиБЭД.СоздатьТестовыйФайл(ПолноеИмяВременногоФайла);
		УдалитьФайлы(ПолноеИмяВременногоФайла);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'При проверке подключения возникли ошибки:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

// Проверяет обмен через FTP для учетной записи прямого обмена.
// 
// Параметры:
// 	УчетнаяЗапись - РегистрСведенийЗапись.УчетныеЗаписиЭДО
// 	ДанныеАутентификации - Структура:
// 	                         * Логин - Строка
// 	                         * Пароль - Строка.
// 	                     - Неопределено - данные будут прочитаны из информационной базы.
// Возвращаемое значение:
// 	Строка - описание ошибки, если проверка прошла неудачно.
Функция ПроверитьОбменЧерезFTP(УчетнаяЗапись, ДанныеАутентификации = Неопределено) Экспорт
	
	ИмяВременногоФайла = РаботаСФайламиБЭД.СоздатьТестовыйФайл();
	
	ПараметрыУчетнойЗаписи = УчетныеЗаписиЭДО.ПараметрыУчетнойЗаписиДляОбменаПоFTP(УчетнаяЗапись);
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыУчетнойЗаписи.ПутьFTP);
	ИмяФайлаНаСторонеПриемника = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяВременногоФайла).Имя;
	
	НастройкиFTP = НовыеНастройкиFTP(УчетнаяЗапись.ИдентификаторЭДО, ПараметрыУчетнойЗаписи, 7);
	Если ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		ЗаполнитьЗначенияСвойств(НастройкиFTP, ДанныеАутентификации);
	КонецЕсли;
	
	Попытка
		FTPСоединение = НовоеFTPСоединение(НастройкиFTP);
		FTPСоединение.УстановитьТекущийКаталог(СтруктураURI.ПутьНаСервере);
		FTPСоединение.Записать(ИмяВременногоФайла, ИмяФайлаНаСторонеПриемника);
		FTPСоединение.Удалить(ИмяФайлаНаСторонеПриемника);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'При проверке подключения возникли ошибки:'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат ОписаниеОшибки;
	
КонецФункции

// Сохраняет в информационной базе факт ознакомления с прекращением поддержки прямого обмена.
// 
Процедура ОзнакомитьсяСПрекращениемПоддержкиПрямогоОбмена() Экспорт
	
	КлючНастройки = КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбменСКонтрагентами", КлючНастройки, Истина);
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

// Определяет наличие у пользователя прав на выполнение обмена электронными документами.
//
// Параметры:
//  ВыводитьСообщение - Булево - необходимо выводить сообщение о нарушении прав доступа.
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаСКонтрагентами")
		И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
		
	Возврат ЕстьПраво;
	
КонецФункции

// Обновляет данные по операторам ЭДО и форматам электронных документов.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
// 	Структура:
//   * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьКешиОператоровЭДОИФорматов(КонтекстДиагностики = Неопределено) Экспорт
	
	СинхронизацияОператоровЭДО                     = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияОператоровЭДО;
	СинхронизацияФорматовЭД                        = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияФорматовЭД;
	СинхронизацияСовместимостиОператоровЭДО        = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО;
	ОбновлениеАбонентовЭДО                         = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.ОбновлениеАбонентовЭДО;
	СвязьТиповИФорматовЭД                          = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СвязьТиповИФорматовЭД;
	СинхронизацияКонтрагентовСоздаваемыхБезусловно = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияКонтрагентовСоздаваемыхБезусловно;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыСинхронизацииСервисаНастроекЭДО.Ссылка КАК ТипСинхронизации,
		|	СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
		|	СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнейПроверки КАК ДатаПоследнейПроверки
		|ИЗ
		|	Перечисление.ТипыСинхронизацииСервисаНастроекЭДО КАК ТипыСинхронизацииСервисаНастроекЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО КАК СостоянияСинхронизацииСервисНастроекЭДО
		|		ПО ТипыСинхронизацииСервисаНастроекЭДО.Ссылка = СостоянияСинхронизацииСервисНастроекЭДО.ТипСинхронизации
		|ГДЕ
		|	(СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнейПроверки ЕСТЬ NULL
		|			ИЛИ СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнейПроверки <> &ТекущаяДата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипСинхронизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ВерсияКонфигурации <> &ВерсияКонфигурации
		|	И НЕ УчетныеЗаписиЭДО.СпособОбменаЭД В (&СпособыПрямогоОбмена)";
	
	Запрос.УстановитьПараметр("ВерсияКонфигурации"  , Метаданные.Версия);
	Запрос.УстановитьПараметр("ТекущаяДата"         , НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СпособыПрямогоОбмена", СпособыПрямогоОбмена());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			
			Если ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияОператоровЭДО Тогда
				СинхронизироватьОператоровЭлектронногоДокументооборотаИзСервисаНастроек(СинхронизацияОператоровЭДО,
					ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения, КонтекстДиагностики);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияСовместимостиОператоровЭДО Тогда
				СинхронизироватьСовместимостьОператоровЭлектронногоДокументооборотаИзСервисаНастроек(
				СинхронизацияСовместимостиОператоровЭДО, ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения,
				КонтекстДиагностики);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияФорматовЭД Тогда
				СинхронизироватьФорматыЭлектронныхДокументовИзСервисаНастроек(СинхронизацияФорматовЭД,
					ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения, КонтекстДиагностики);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СвязьТиповИФорматовЭД Тогда
				СинхронизироватьСвязьВидовИФорматовЭлектронныхДокументовИзСервисаНастроек(СвязьТиповИФорматовЭД,
					ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения, КонтекстДиагностики);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = ОбновлениеАбонентовЭДО Тогда
				СинхронизироватьАбонентовЭлектронногоДокументооборотаИзСервисаНастроек(ОбновлениеАбонентовЭДО,
					ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения, КонтекстДиагностики);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияКонтрагентовСоздаваемыхБезусловно Тогда
				СинхронизироватьКонтрагентовСоздаваемыхБезусловно(СинхронизацияКонтрагентовСоздаваемыхБезусловно,
					ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения, КонтекстДиагностики);
			КонецЕсли;
			
		Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Обновление кеша настроек ЭДО'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		КонецПопытки;
		
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			РезультатПроцедуры = СервисНастроекЭДО.ОтправитьДанныеАбонентаВСервисНастроек(
				ВыборкаДетальныеЗаписи.ИдентификаторЭДО);
		Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Обновление учетной записи в сервисе настроек'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Содержит описание сертификата электронной подписи, включая расшифрованный и зашифрованный маркер.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
// * ПарольПолучен - Булево - пароль сертификата успешно прочитан из информационной базы
// * ПарольПользователя - Строка
// * Отпечаток - Строка - отпечаток сертификата в кодировке Base64
// * Отозван - Булево
// * Программа - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа, требуемая для подписания
//                 и расшифровки документов.
// * ДвоичныеДанные - ДвоичныеДанные - данные сертификата
// * ДатаОкончания - Дата - дата окончания срока действия сертификата
// * ЗапомнитьПарольКСертификату - Булево - пароль к сертификату сохранен в информационной базе
// * МаркерЗашифрованный - ДвоичныеДанные - зашифрованный маркер доступа к сервису электронного документооборота
// * МаркерРасшифрованный - ДвоичныеДанные - расшифрованный маркер доступа к сервису электронного документооборота
Функция НовыеДанныеСертификата() Экспорт

	ДанныеСертификата = Новый Структура;
	ДанныеСертификата.Вставить("Ссылка", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
	ДанныеСертификата.Вставить("ПарольПолучен", Ложь);
	ДанныеСертификата.Вставить("ПарольПользователя", "");
	ДанныеСертификата.Вставить("Отпечаток", "");
	ДанныеСертификата.Вставить("Отозван", Неопределено);
	ДанныеСертификата.Вставить("Программа", Справочники.ПрограммыЭлектроннойПодписиИШифрования.ПустаяСсылка());
	ДанныеСертификата.Вставить("ДвоичныеДанные", Неопределено);
	ДанныеСертификата.Вставить("ДатаОкончания", Дата(1, 1, 1));
	ДанныеСертификата.Вставить("ЗапомнитьПарольКСертификату", Ложь);
	ДанныеСертификата.Вставить("МаркерЗашифрованный", Неопределено);
	ДанныеСертификата.Вставить("МаркерРасшифрованный", Неопределено);
	
	Возврат ДанныеСертификата;
	
КонецФункции

// Возвращает картинку для статуса подключения абонента электронного документооборота.
// 
// Параметры:
// 	СтатусПодключения - Число
// Возвращаемое значение:
// 	Картинка
Функция КартинкаСтатусаПодключенияАбонента(СтатусПодключения) Экспорт
	
	Если СтатусПодключения = 0 Тогда
		Возврат БиблиотекаКартинок.ПодключениеБЭДСерая;
	ИначеЕсли СтатусПодключения = 3 Тогда
		Возврат БиблиотекаКартинок.ПодключениеБЭДЗеленая;
	Иначе
		Возврат БиблиотекаКартинок.ПодключениеБЭДЖелтая;
	КонецЕсли;
	
КонецФункции

// Возвращает описание транспортного контейнера.
// 
// Возвращаемое значение:
// 	Структура - с ключами:
// * Ссылка - ДокументСсылка.ТранспортныйКонтейнерЭДО
// * ДвоичныеДанные - ДвоичныеДанные
// * Наименование - Строка
Функция НовоеОписаниеТранспортногоКонтейнера() Экспорт
	
	ОписаниеКонтейнера = Новый Структура;
	ОписаниеКонтейнера.Вставить("Наименование", "");
	ОписаниеКонтейнера.Вставить("ДвоичныеДанные", Неопределено);
	ОписаниеКонтейнера.Вставить("Ссылка", Документы.ТранспортныйКонтейнерЭДО.ПустаяСсылка());
	
	Возврат ОписаниеКонтейнера;
	
КонецФункции

// Возвращает сведения об операторе электронного документооборота.
// 
// Параметры:
// 	ИдентификаторОтправителя - Строка
// Возвращаемое значение:
// 	Структура:
// * Наименование - Строка
// * Идентификатор - Строка
// * ИНН - Строка 
Функция СведенияОбОператоре(ИдентификаторОтправителя) Экспорт
	
	СведенияОбОператоре = Новый Структура;
	СведенияОбОператоре.Вставить("Идентификатор", "");
	СведенияОбОператоре.Вставить("Наименование", "");
	СведенияОбОператоре.Вставить("ИНН", "");
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			СведенияОбОператореЕИС = МодульЭлектронноеАктированиеЕИС.СведенияОбОператоре(
				ИдентификаторОтправителя, СведенияОбОператоре);
			Если ЗначениеЗаполнено(СведенияОбОператореЕИС) Тогда
				Возврат СведенияОбОператореЕИС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запросы = Новый Массив;
	Отбор = СервисНастроекЭДО.НовыйОтборОператоровЭлектронногоДокументооборота();
	Отбор.Идентификатор = "&Идентификатор";
	ЗапросОператоров = СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО", Отбор);
	
	Запросы.Добавить(ЗапросОператоров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ОператорыЭДО.ИдентификаторОператора,
	|ОператорыЭДО.Представление, 
	|ОператорыЭДО.ИНН 
	|ИЗ
	|ОператорыЭДО КАК ОператорыЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Идентификатор",
		РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(ИдентификаторОтправителя));
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СведенияОбОператоре.Идентификатор = Выборка.ИдентификаторОператора;
		СведенияОбОператоре.Наименование = Выборка.Представление;
		СведенияОбОператоре.ИНН = Выборка.ИНН;
	КонецЕсли;
	
	Возврат СведенияОбОператоре;
	
КонецФункции

// См. СервисНастроекЭДО.ТребуетсяОднородностьОтвета
Функция ТребуетсяОднородностьОтвета(Идентификатор) Экспорт
	
	Возврат СервисНастроекЭДО.ТребуетсяОднородностьОтвета(Идентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УчетныеЗаписи

// Возвращает описание запроса, в результате которого будут содержаться учетные записи.
// Запрос содержит следующие поля:
//  * ИдентификаторЭДО - Строка - идентификатор учетной записи
//  * НаименованиеУчетнойЗаписи - Строка - наименование учетной записи
//  * НазначениеУчетнойЗаписи - Строка - назначение учетной записи
//  * ПодробноеОписаниеУчетнойЗаписи - Строка - подробное описание учетной записи
//  * Организация - ОпределяемыйТип.Организация
//  * ОператорЭДО - Строка - идентификатор оператора электронного документооборота
//  * СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
//  * ПринятыУсловияИспользования - Булево - пользователь принял условия использования сервиса
//                                  электронного документооборота
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ВозможенОбменБезПодписи - Булево
//  * ИмяФайлаСоглашенияНаРоуминг - Строка
//  * ДанныеСоглашенияНаРоуминг - ДвоичныеДанные
//  * ДатаСоглашенияНаРоуминг - Дата
//  * КаталогОбмена - Строка
//  * ПутьFTP - Строка
//  * УчетнаяЗаписьЭлектроннойПочты - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборУчетныхЗаписей
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросУчетныхЗаписей(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Возврат УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей(ИмяВременнойТаблицы, Отбор);
	
КонецФункции

// Возвращает структуру для получения запроса учетных записей. См. ЗапросУчетныхЗаписей.
// 
// Возвращаемое значение:
// 	Структура:
// * УчетныеЗаписи - Строка - параметр или выражение для отбора по идентификаторам учетных записей
// * Организация - Строка - параметр или выражение для отбора по организации
// * СпособОбмена - Строка - параметр или выражение для отбора по способу обмена
// * Оператор - Строка - параметр или выражение для отбора по оператору
Функция НовыйОтборУчетныхЗаписей() Экспорт
	
	Возврат УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться сертификаты учетных записей.
// Запрос содержит следующие поля:
//  * ИдентификаторЭДО - Строка - идентификатор учетной записи
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка
// 	Отбор - см. НовыйОтборСертификатовУчетныхЗаписей
// Возвращаемое значение:
// 	См. УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей
Функция ЗапросСертификатовУчетныхЗаписей(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Возврат УчетныеЗаписиЭДО.ЗапросСертификатовУчетныхЗаписей(ИмяВременнойТаблицы, Отбор);
	
КонецФункции

// Возвращает структуру для получения запроса сертификатов учетных записей. См. ЗапросСертификатовУчетныхЗаписей.
// 
// Возвращаемое значение:
// 	Структура:
// * УчетныеЗаписи - Строка - параметр или выражение для отбора по идентификаторам учетных записей
// * Сертификат - Строка - параметр или выражение для отбора по сертификатам
Функция НовыйОтборСертификатовУчетныхЗаписей() Экспорт
	
	Возврат УчетныеЗаписиЭДО.НовыйОтборСертификатовУчетныхЗаписей();
	
КонецФункции

// Возвращает данные учетной записи.
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Структура, Неопределено - данные учетной записи:
//  * ИдентификаторОрганизации - Строка - идентификатор учетной записи
//  * Организация - ОпределяемыйТип.Организация
//  * ОператорЭДО - Строка - идентификатор оператора электронного документооборота
//  * СпособОбменаЭД - ПеречислениеСсылка.СпособыОбменаЭД
Функция ДанныеУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт 
	
	Возврат УчетныеЗаписиЭДО.ДанныеУчетнойЗаписи(ИдентификаторУчетнойЗаписи);
	
КонецФункции

// Проверяет наличие учетных записей электронного документооборота.
// 
// Параметры:
// 	Организации - Массив из ОпределяемыйТип.Организация
// Возвращаемое значение:
// 	Булево
Функция ЕстьУчетныеЗаписи(Организации = Неопределено) Экспорт
	
	Запросы = Новый Массив;
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Если Организации <> Неопределено Тогда
		Отбор.Организация = "&Организации";
	КонецЕсли;
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписи", Отбор);
	
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписи.ИдентификаторЭДО
	|ИЗ
	|	УчетныеЗаписи";
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	Если Организации <> Неопределено Тогда
		ИтоговыйЗапрос.УстановитьПараметр("Организации", Организации);
	КонецЕсли;
	
	Возврат Не ИтоговыйЗапрос.Выполнить().Пустой();

КонецФункции

// Добавляет ошибку отсутствия сертификатов у учетных записей.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	УчетныеЗаписиБезСертификатов - см. НоваяТаблицаУчетныхЗаписейБезСертификатов
// 	Операция - Строка - см. ОперацииПомощникаРегистрацииСертификатов
Процедура ДобавитьОшибкуУчетныхЗаписейБезСертификатов(КонтекстДиагностики, УчетныеЗаписиБезСертификатов, Операция) Экспорт
	
	ПараметрыРегистрации = УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыРегистрацииСертификатов();
	ПараметрыРегистрации.Операция = Операция;
	ПараметрыРегистрации.Данные = ОбщегоНазначения.ТаблицаЗначенийВМассив(УчетныеЗаписиБезСертификатов);
	
	ВидОшибки = СинхронизацияЭДОКлиентСервер.ВидОшибкиЕстьУчетныеЗаписиБезСертификатов(Операция);
	ТекстОшибки = ВидОшибки.ОписаниеПроблемы;
	
	Если Операция = ОперацииПомощникаРегистрацииСертификатов().Подписание Тогда
		ПредставлениеОперации = НСтр("ru = 'Подписание документов'");
	Иначе
		ПредставлениеОперации = НСтр("ru = 'Отправка документов'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДополнительныеДанные", ПараметрыРегистрации);
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ПредставлениеОперации,
		ВидОшибки, ТекстОшибки, ТекстОшибки, ДополнительныеПараметры);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, Ложь);
	
КонецПроцедуры

// См. УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов
Функция ОперацииПомощникаРегистрацииСертификатов() Экспорт
	
	Возврат УчетныеЗаписиЭДОКлиентСервер.ОперацииПомощникаРегистрацииСертификатов();
	
КонецФункции

// См. УчетныеЗаписиЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов
Функция НоваяТаблицаУчетныхЗаписейБезСертификатов() Экспорт
	
	Возврат УчетныеЗаписиЭДО.НоваяТаблицаУчетныхЗаписейБезСертификатов();
	
КонецФункции

#КонецОбласти

#Область Приглашения

// См. ПриглашенияЭДО.ПолучитьПриглашения
Функция ПолучитьПриглашения(КлючиСинхронизации, КонтекстДиагностики = Неопределено) Экспорт
	
	Возврат ПриглашенияЭДО.ПолучитьПриглашения(КлючиСинхронизации, КонтекстДиагностики, Ложь);
	
КонецФункции

// См. ПриглашенияЭДО.ОтправитьПриглашенияВАрхив
Функция ОтправитьПриглашенияВАрхив(Приглашения) Экспорт
	
	Возврат ПриглашенияЭДО.ОтправитьПриглашенияВАрхив(Приглашения);
	
КонецФункции

// См. ПриглашенияЭДО.НовыйОтборПриглашений
Функция НовыйОтборПриглашений() Экспорт
	
	Возврат ПриглашенияЭДО.НовыйОтборПриглашений();
	
КонецФункции

// См. ПриглашенияЭДО.ЗапросПриглашений
Функция ЗапросПриглашений(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Возврат ПриглашенияЭДО.ЗапросПриглашений(ИмяВременнойТаблицы, Отбор);
	
КонецФункции

#КонецОбласти

#Область ТранспортныеКонтейнеры

// См. ТранспортныеКонтейнерыЭДО.ДвоичныеДанныеТранспортногоКонтейнера
Функция ДвоичныеДанныеТранспортногоКонтейнера(ДанныеОбъекта, КонтекстДиагностики = Неопределено) Экспорт
	
	Возврат ТранспортныеКонтейнерыЭДО.ДвоичныеДанныеТранспортногоКонтейнера(ДанныеОбъекта, КонтекстДиагностики);
	
КонецФункции

// См. ТранспортныеКонтейнерыЭДО.РаспаковатьФайлКонтейнера
Функция РаспаковатьФайлТранспортногоКонтейнера(ТранспортныйКонтейнер, КонтекстДиагностики) Экспорт
	
	Возврат ТранспортныеКонтейнерыЭДО.РаспаковатьФайлКонтейнера(ТранспортныйКонтейнер, КонтекстДиагностики);
	
КонецФункции

// Получает присоединенные файлы транспортных контейнеров.
// 
// Параметры:
// 	ТранспортныеКонтейнеры - ДокументСсылка.ТранспортныйКонтейнерЭДО
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.ТранспортныйКонтейнерЭДО
//   * Значение - СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
Функция ПрисоединенныеФайлыТранспортныхКонтейнеров(ТранспортныеКонтейнеры) Экспорт
	
	Возврат ТранспортныеКонтейнерыЭДО.ПрисоединенныеФайлыКонтейнеров(ТранспортныеКонтейнеры);
	
КонецФункции

// Изменяет статус транспортного контейнера.
// 
// Параметры:
// 	ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 	Статус - ПеречислениеСсылка.СтатусыТранспортныхСообщенийБЭД
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// Возвращаемое значение:
// 	Булево - Истина, если статус контейнера изменен
Функция ИзменитьСтатусТранспортногоКонтейнера(ТранспортныйКонтейнер, Статус, КонтекстДиагностики = Неопределено) Экспорт
	
	Возврат ТранспортныеКонтейнерыЭДО.ИзменитьСтатусКонтейнера(ТранспортныйКонтейнер, Статус, КонтекстДиагностики);
	
КонецФункции

// Возвращает объекты транспортного контейнера.
// 
// Параметры:
// 	Контейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// Возвращаемое значение:
// 	Массив из ДокументСсылка.СообщениеЭДО
Функция ОбъектыТранспортногоКонтейнера(Контейнер) Экспорт
	
	Контейнеры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контейнер);
	
	ОбъектыКонтейнеров = ТранспортныеКонтейнерыЭДО.ОбъектыКонтейнеров(Контейнеры);
	ОбъектыКонтейнера = ОбъектыКонтейнеров[Контейнер];
	
	Если ОбъектыКонтейнера = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ОбъектыКонтейнера;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//См. ТранспортныеКонтейнерыЭДО.ОбъектыКонтейнеров
Функция ОбъектыТранспортныхКонтейнеров(Контейнеры) Экспорт
	
	Возврат ТранспортныеКонтейнерыЭДО.ОбъектыКонтейнеров(Контейнеры);
	
КонецФункции

Процедура ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки, МожноОтказатьсяОтЗагрузки = Ложь) Экспорт
	
	ТранспортныеКонтейнерыЭДО.ОбработатьОшибкуЗагрузкиОбъекта(ДанныеОбъекта, КонтекстДиагностики, ТекстОшибки, МожноОтказатьсяОтЗагрузки);
	
КонецПроцедуры

Функция ТранспортныйКонтейнерОбъекта(Объект) Экспорт
	Возврат ТранспортныеКонтейнерыЭДО.КонтейнерОбъекта(Объект);
КонецФункции

#КонецОбласти

#Область ОповещениеОСобытиях

// Метод проверяет наличие в регистре сведений записей о новых ЭД.
//
// Возвращаемое значение:
//  Булево - признак наличия в сервисе новых электронных документов.
//
Функция ЕстьСобытияЭДО() Экспорт
	Возврат ОповещенияОСобытияхЭДО.ЕстьСобытияЭДО();
КонецФункции

// Возвращает идентификаторы учетных записей, для которых в сервисе ЭДО есть новые электронные документы.
// 
// Параметры:
// 	ИдентификаторыУчетныхЗаписей - Массив из Строка
// Возвращаемое значение:
// 	Массив из Строка - учетные записи, для которых есть новые электронные документы.
Функция ЕстьНовыеЭлектронныеДокументыВСервисеЭДО(ИдентификаторыУчетныхЗаписей) Экспорт
	
	Возврат ОповещенияОСобытияхЭДО.ЕстьНовыеЭлектронныеДокументыВСервисеЭДО(ИдентификаторыУчетныхЗаписей);
	
КонецФункции

#КонецОбласти

#Область РаботаСАбонентами

// Возвращает описание запроса, в результате которого будут содержаться поддерживаемые форматы абонента ЭДО.
// Запрос содержит следующие поля:
//  * Формат - Строка - формат электронного документа
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ИдентификаторАбонента - Строка.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка
// 	Отбор - см. НовыйОтборПоддерживаемыхФорматов
// Возвращаемое значение:
// 	См. РаботаСАбонентамиЭДО.ЗапросПоддерживаемыхФорматов
Функция ЗапросПоддерживаемыхФорматов(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Возврат РаботаСАбонентамиЭДО.ЗапросПоддерживаемыхФорматов(ИмяВременнойТаблицы, Отбор);
	
КонецФункции

// Возвращает структуру для получения запроса поддерживаемых форматов абонента ЭДО, см. ЗапросПоддерживаемыхФорматов.
// 
// Возвращаемое значение:
// 	Структура:
// * ИдентификаторЭДО - Строка - параметр или выражение для отбора по идентификаторам учетных записей
Функция НовыйОтборПоддерживаемыхФорматов() Экспорт
	
	Возврат РаботаСАбонентамиЭДО.НовыйОтборПоддерживаемыхФорматов();
	
КонецФункции

// См. РаботаСАбонентамиЭДО.СуществуетКонтрагентОператора
Функция СуществуетКонтрагентОператора(КодОператора) Экспорт
	
	Возврат РаботаСАбонентамиЭДО.СуществуетКонтрагентОператора(КодОператора);
	
КонецФункции

// См. РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента
Функция ОператорАбонента(ИдентификаторАбонента) Экспорт
	
	Возврат РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(ИдентификаторАбонента);
	
КонецФункции

// См. РаботаСАбонентамиЭДО.ПроверитьКонтрагентаВ1СЭДОПриЗаписи
Процедура ПроверитьКонтрагентаВ1СЭДОПриЗаписи(Источник, Отказ) Экспорт
	
	РаботаСАбонентамиЭДО.ПроверитьКонтрагентаВ1СЭДОПриЗаписи(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СервисНастроек

// См. СервисНастроекЭДО.ДанныеАбонентовИзСервисаНастроек
Функция ДанныеАбонентовИзСервисаНастроек(Отбор, Отказ, КонтекстДиагностики) Экспорт
	
	Возврат СервисНастроекЭДО.ДанныеАбонентовИзСервисаНастроек(Отбор, Отказ, КонтекстДиагностики);
	
КонецФункции

// См. СервисНастроекЭДО.НовыйОтборДанныхАбонентаВСервисеНастроек
Функция НовыйОтборДанныхАбонентаВСервисеНастроек() Экспорт
	
	Возврат СервисНастроекЭДО.НовыйОтборДанныхАбонентаВСервисеНастроек();
	
КонецФункции

// См. СервисНастроекЭДО.ЗапросОператоровЭДО
Функция ЗапросОператоровЭДО(ИмяВременнойТаблицы = "", Отбор = Неопределено) Экспорт
	
	Возврат СервисНастроекЭДО.ЗапросОператоровЭДО(ИмяВременнойТаблицы, Отбор);
	
КонецФункции

// См. СервисНастроекЭДО.НовыйОтборОператоровЭлектронногоДокументооборота
Функция НовыйОтборОператоровЭлектронногоДокументооборота() Экспорт
	
	Возврат СервисНастроекЭДО.НовыйОтборОператоровЭлектронногоДокументооборота();
	
КонецФункции

// Возвращает адрес облачного хранилища настроек для ЭДО.
// 
// Возвращаемое значение:
// 	Строка
Функция АдресОблачногоХранилищаНастроек() Экспорт
	
	Возврат СервисНастроекЭДО.АдресОблачногоХранилищаНастроек();
	
КонецФункции

// См. СервисНастроекЭДО.ТипДокументаПоЗначениюСервиса
Функция ТипДокументаПоЗначениюСервиса(Значение) Экспорт
	
	Возврат СервисНастроекЭДО.ТипДокументаПоЗначениюСервиса(Значение);
	
КонецФункции

// См. СервисНастроекЭДО.ДоступноПодключениеБезОГРН
Функция ДоступноПодключениеБезОГРН(ИдентификаторОператораЭДО) Экспорт
	
	Возврат СервисНастроекЭДО.ДоступноПодключениеБезОГРН(ИдентификаторОператораЭДО);
	
КонецФункции

#КонецОбласти

#Область ОбработкаНеисправностей

// Возвращает вид ошибки, описывающий ситуацию, когда имеются незагруженные в базу электронные документы.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиЕстьНеполученныеЭлектронныеДокументы() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ЕстьНеполученныеЭлектронныеДокументы";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Дата запроса получения данных оператора ЭДО ограничивает получение документов'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Выберите"">Выберите</a> дальнейшее действие'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выберите",
		"СинхронизацияЭДОКлиент.ПоказатьДействияПриНаличииНеполученныхДокументов");
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает вид ошибки, описывающий ситуацию, когда имеются незагруженные в базу приглашения к обмену
// электронными документами.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиЕстьНеполученныеПриглашения() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ЕстьНеполученныеПриглашения";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Получены не все приглашения к обмену электронными документами'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Дата запроса получения данных оператора ЭДО ограничивает получение приглашений к обмену электронными документами'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Выберите"">Выберите</a> дальнейшее действие'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выберите",
		"СинхронизацияЭДОКлиент.ПоказатьДействияПриНаличииНеполученныхПриглашений");
	
	Возврат ВидОшибки;
	
КонецФункции

// Добавляет ошибку отсутствия сертификатов для подписания документов.
// 
// Параметры:
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ВидОперации - Строка
Процедура ДобавитьОшибкуОтсутствияСертификатовДляПодписания(КонтекстДиагностики, ВидОперации) Экспорт
	
	ТекстОшибки = НСтр("ru = 'В процессе подписания электронного документа не найден ни один из доступных сертификатов ЭП.'");
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ВидОшибкиОтсутствуетСертификатДляПодписания(), ТекстОшибки,
		НСтр("ru = 'Не найден доступный сертификат для подписания.'"));
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ЭлектронныеДокументы.ПодключаемыеКоманды

// См. ПодключаемыеКомандыЭДОСобытия.ПриОпределенииСпискаКомандЭДО
Процедура ПриОпределенииСпискаКомандЭДО(Знач СоставКоманд, Знач ПолноеИмя, Знач НаправлениеЭД, КомандыЭДО) Экспорт
	
	ИспользоватьОбменЭД = НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами();

	ЕстьПравоНастройкиОбмена       = НастройкиЭДО.ЕстьПравоНастройкиОбмена();
	ЕстьПравоПросмотраЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
	ЕстьПравоОбработкиЭД           = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	ЕстьПравоЧтенияНастройкиОбмена = НастройкиЭДО.ЕстьПравоЧтенияНастройкиОбмена();

	Если СоставКоманд.Контрагенты.Найти(ПолноеИмя) <> Неопределено И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "СинхронизацияЭДОКлиент.ПригласитьКОбменуЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;		
				
	КонецЕсли;

	Если СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено И ИспользоватьОбменЭД Тогда
		
		КомандаЭДО = КомандыЭДО.Добавить();
		КомандаЭДО.Обработчик = "СинхронизацияЭДОКлиент.ПодключитьКЭДО";
		КомандаЭДО.СписокФорм    = "";
		КомандаЭДО.Идентификатор = "ПодключитьКЭДО";
		КомандаЭДО.Представление = НСтр("ru = 'Подключить организацию'");
		КомандаЭДО.Порядок       = 10;
		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодключениеБЭД;
		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяРеквизитаУсловия", "ЕстьСвязь");
		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия",
			"СинхронизацияЭДО.ЕстьУчетныеЗаписи");
		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Ложь);
		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
		
	КонецЕсли;
	
	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
			И НаправлениеЭД <> Перечисления.НаправленияЭДО.Входящий Тогда
		
		Если ИспользоватьОбменЭД Тогда			
		
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;			
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
		И НаправлениеЭД <> Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если ИспользоватьОбменЭД Тогда
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ПерезаполнитьДокумент";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
			КомандаЭДО.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
			
			
			КомандаЭДО = КомандыЭДО.Добавить();
			КомандаЭДО.Обработчик    = "ИнтерфейсДокументовЭДОКлиент.ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.СписокФорм    = "";
			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
			КомандаЭДО.Порядок       = 30;
			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ЭлектронныеДокументы.ПодключаемыеКоманды


// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ЭлектронныеДокументы

// См. ЭлектронныеДокументыЭДОСобытия.ПриЗагрузкеСообщения
Процедура ПриЗагрузкеОбъекта(Объект, ДанныеОбъекта, КонтекстДиагностики) Экспорт
	
	СинхронизацияЭДОСлужебный.ПриЗагрузкеОбъекта(Объект, ДанныеОбъекта, КонтекстДиагностики);
	ТранспортныеКонтейнерыЭДО.ПриЗагрузкеОбъекта(Объект, ДанныеОбъекта, КонтекстДиагностики);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ЭлектронныеДокументы


// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация

// См. СинхронизацияЭДОСобытия.ПриУдаленииУчетнойЗаписи
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт

	НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОрганизации.Установить(ИдентификаторУчетнойЗаписи);
	НаборЗаписей.Записать();

КонецПроцедуры

// См. СинхронизацияЭДОСобытия.ПослеОтправкиОбъекта
Процедура ПослеОтправкиОбъекта(Объект, ТранспортныйКонтейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ) Экспорт

	ТранспортныеКонтейнерыЭДО.ПослеОтправкиКонтейнера(Объект, ТранспортныйКонтейнер, ОшибкаПередачи, КонтекстДиагностики, Отказ);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.Синхронизация


// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	СинхронизацияЭДОСлужебный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	ПриглашенияЭДОСобытия.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	ТранспортныеКонтейнерыЭДО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	УчетныеЗаписиЭДО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	СинхронизацияЭДОСлужебный.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	ПриглашенияЭДОСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	ТранспортныеКонтейнерыЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	УчетныеЗаписиЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.БазоваяФункциональность.ОбработкаНеисправностей

// Возвращает представления учетных записей, вызывается из см. ОбработкаНеисправностейБЭД.ПредставлениеДанныхВСписке.
// 
// Параметры:
// 	Идентификаторы - Массив из Строка
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭД.ПредставлениеДанныхВСписке
Функция ПредставленияУчетныхЗаписейДляУстраненияОшибок(Идентификаторы) Экспорт
	
	Запросы = Новый Массив;
	Отбор = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.УчетныеЗаписи = "&УчетныеЗаписи";
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", Отбор);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК НаименованиеУчетнойЗаписи
		|ИЗ
		|	УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("УчетныеЗаписи", Идентификаторы);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПредставленияУчетныхЗаписей = Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Данные = Новый Структура;
		Данные.Вставить("Ссылка", УчетныеЗаписиЭДО.КлючУчетнойЗаписи(ВыборкаДетальныеЗаписи.ИдентификаторЭДО));
		Данные.Вставить("Представление", ВыборкаДетальныеЗаписи.НаименованиеУчетнойЗаписи);
		ПредставленияУчетныхЗаписей.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО, Данные);
	КонецЦикла;
	
	Возврат ПредставленияУчетныхЗаписей;
	
КонецФункции

// Конец ЭлектронноеВзаимодействие.БазоваяФункциональность.ОбработкаНеисправностей

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Разрешения = Новый Массив;
	
	ДобавитьРазрешениеНаИспользованиеИнтернетРесурса(Разрешения,
		СервисЭДО.ПараметрыСервиса1СТакском().АдресВебСервиса,
		НСтр("ru = 'Сервис 1С-Такском, обмен юридически значимыми электронными документами.'"));
	
	ДобавитьРазрешениеНаИспользованиеИнтернетРесурса(Разрешения,
		СервисЭДО.ПараметрыСервиса1СЭДО().АдресВебСервиса,
		НСтр("ru = 'Сервис 1С-ЭДО, обмен юридически значимыми электронными документами.'"));
		
	ДобавитьРазрешениеНаИспользованиеИнтернетРесурса(Разрешения,
		СервисНастроекЭДО.АдресСервисаНастроек(),
		НСтр("ru = 'Сервис настроек для обмена электронными документами.'"));
		
	ДобавитьРазрешениеНаИспользованиеИнтернетРесурса(Разрешения,
		СервисНастроекЭДО.АдресОблачногоХранилищаНастроек(),
		НСтр("ru = 'Облачное хранилище настроек для обмена электронными документами.'"));
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	ФООбменСКонтрагентами = "ИспользоватьОбменЭД";
		
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ОтправкаЭлектронныхДокументов"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	НоваяСтрока.ДоступноВМоделиСервиса = Ложь;
	НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;

	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПолучениеЭлектронныхДокументов"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	НоваяСтрока.ДоступноВМоделиСервиса = Ложь;
	НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПроверкаНовыхЭлектронныхДокументов"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
	НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПроверкаКонтрагентовБЭД"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПроверкаКонтрагентовБЭДВыполнение"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
	НоваяСтрока.Параметризуется = Истина;
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания[
		ТранспортныеКонтейнерыЭДОКлиентСервер.ИмяРегламентногоЗаданияПометкаНаУдалениеТранспортныхКонтейнеровЭлектронныхДокументов()];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
	НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
		
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриПолученииСпискаШаблонов 
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить("ПроверкаНовыхЭлектронныхДокументов");
	РаботаСАбонентамиЭДО.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	ТранспортныеКонтейнерыЭДО.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ПроверкаНовыхЭлектронныхДокументов");
	РаботаСАбонентамиЭДО.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	ТранспортныеКонтейнерыЭДО.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
КонецПроцедуры

#Область ПроверкаСостоянияКонтрагентов

// Обработчик события записи контрагента.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент. 
//	Отказ - Булево - признак отказа.
Процедура ПриЗаписиКонтрагента(КонтрагентОбъект, Отказ) Экспорт
	
	РаботаСАбонентамиЭДО.ЗаписатьДанныеКонтрагентаДляПроверки(КонтрагентОбъект, Отказ);
	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает описание дат запросов данных у оператора электронного документооборота.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ДатаПолучения - Число - дата (в миллисекундах) последнего успешного получения данных
// * ПроверочнаяДатаПолучения - Число - дата (в миллисекундах) последнего проверочного запроса
Функция НовоеОписаниеДатЗапросовДанныхУОператораЭлектронногоДокументооборота()
	
	ДатаПоУмолчанию = СервисЭДО.ДатаЗапросаПоУмолчанию();
	
	Даты = Новый Структура;
	Даты.Вставить("ДатаПолучения", ДатаПоУмолчанию);
	Даты.Вставить("ДатаПолученияЭПД", ДатаПоУмолчанию);
	Даты.Вставить("ПроверочнаяДатаПолучения", ДатаПоУмолчанию);
	
	Возврат Даты;
	
КонецФункции

Функция НовыеНастройкиFTP(ИдентификаторЭДО, ПараметрыУчетнойЗаписи, Таймаут = 30)
	
	Настройки = Новый Структура("Сервер, Порт, Логин, Пароль, Прокси,
		|ПассивноеСоединение, Таймаут, ЗащищенноеСоединение");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыУчетнойЗаписи.ПутьFTP);
	
	Настройки.Сервер = СтруктураURI.ИмяСервера;
	
	Если ЗначениеЗаполнено(ПараметрыУчетнойЗаписи.ПортFTP) Тогда
		Настройки.Порт = ПараметрыУчетнойЗаписи.ПортFTP;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ДанныеАутентификацииПрямогоОбменаЧерезFTP(ИдентификаторЭДО);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		Настройки.Логин = ДанныеАутентификации.Логин;
		Настройки.Пароль = ДанныеАутентификации.Логин;
	КонецЕсли;
	
	Настройки.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	
	Настройки.ПассивноеСоединение = ПараметрыУчетнойЗаписи.ПассивноеСоединениеFTP;
	
	Настройки.Таймаут = Таймаут;
	
	Настройки.ЗащищенноеСоединение = ?(СтруктураURI.Схема = "ftps",
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено);
	
	Возврат Настройки;
	
КонецФункции

Функция НовоеFTPСоединение(НастройкиFTP)
	
	Возврат Новый FTPСоединение(
		НастройкиFTP.Сервер,
		НастройкиFTP.Порт,
		НастройкиFTP.Логин,
		НастройкиFTP.Пароль,
		НастройкиFTP.Прокси,
		НастройкиFTP.ПассивноеСоединение,
		НастройкиFTP.Таймаут,
		НастройкиFTP.ЗащищенноеСоединение);
	
КонецФункции

Функция КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена()
	Возврат "ОзнакомленСПрекращениемПрямогоОбмена";
КонецФункции

Процедура СинхронизироватьФорматыЭлектронныхДокументовИзСервисаНастроек(ТипСинхронизации, ДатаПоследнегоИзменения,
	КонтекстДиагностики)
	
	Форматы = СервисНастроекЭДО.ПолучитьФорматыЭлектронныхДокументов(КонтекстДиагностики);
	Если Форматы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьТранзакцию();
	Попытка
		ЭлектронныеДокументыЭДО.ОбновитьФорматыЭлектронныхДокументов(Форматы,
			ДатаПоследнегоИзменения);
		СервисНастроекЭДО.ИзменитьСостояниеСинхронизации(ТипСинхронизации, Форматы.ДатаПоследнегоИзменения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Синхронизация форматов электронных документов из сервиса настроек'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура СинхронизироватьСвязьВидовИФорматовЭлектронныхДокументовИзСервисаНастроек(ТипСинхронизации,
	ДатаПоследнегоИзменения, КонтекстДиагностики)
	
	СвязьВидовИФорматовЭлектронныхДокументов = СервисНастроекЭДО.ПолучитьСвязьВидовИФорматовЭлектронныхДокументов(
		КонтекстДиагностики);
	
	Если СвязьВидовИФорматовЭлектронныхДокументов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ЭлектронныеДокументыЭДО.ОбновитьСвязьВидовИФорматовЭлектронныхДокументов(
			СвязьВидовИФорматовЭлектронныхДокументов, ДатаПоследнегоИзменения);
		НастройкиЭДО.ОбновитьФорматПоУмолчаниюВНастройках();
		СервисНастроекЭДО.ИзменитьСостояниеСинхронизации(ТипСинхронизации,
			СвязьВидовИФорматовЭлектронныхДокументов.ДатаПоследнегоИзменения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Синхронизация связи видов и форматов электронных документов из сервиса настроек'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СинхронизироватьАбонентовЭлектронногоДокументооборотаИзСервисаНастроек(ТипСинхронизации,
	ДатаПоследнегоИзменения, КонтекстДиагностики)
	
	Отказ = Ложь;
	
	Отбор = РаботаСАбонентамиЭДО.НовыйОтборДанныхАбонентаНастроек();
	Отбор.ДатаОбновления = ДатаПоследнегоИзменения;
	
	НачатьТранзакцию();
	Попытка
		РаботаСАбонентамиЭДО.ДанныеАбонентовИзСервисаНастроек(Отбор, КонтекстДиагностики, Отказ);

		Если Отказ Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;

		СервисНастроекЭДО.ИзменитьСостояниеСинхронизации(ТипСинхронизации);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Синхронизация абонентов электронного документооборота из сервиса настроек'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СинхронизироватьОператоровЭлектронногоДокументооборотаИзСервисаНастроек(ТипСинхронизации,
	ДатаПоследнегоИзменения, КонтекстДиагностики)
	
	ДанныеОператоров = СервисНастроекЭДО.ПолучитьОператоровЭлектронногоДокументооборота(КонтекстДиагностики);
	
	Если ДанныеОператоров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СервисНастроекЭДО.ОбновитьДанныеОператоровЭлектронногоДокументооборота(ДанныеОператоров,
		ДатаПоследнегоИзменения);
	
КонецПроцедуры

Процедура СинхронизироватьСовместимостьОператоровЭлектронногоДокументооборотаИзСервисаНастроек(ТипСинхронизации,
	ДатаПоследнегоИзменения, КонтекстДиагностики)
	
	СовместимостьОператоров = СервисНастроекЭДО.ПолучитьСовместимостьОператоровЭлектронногоДокументооборота(
		КонтекстДиагностики);
	Если СовместимостьОператоров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СервисНастроекЭДО.ОбновитьСовместимостьОператоровЭлектронногоДокументооборота(СовместимостьОператоров,
		ДатаПоследнегоИзменения, КонтекстДиагностики);
	
КонецПроцедуры

Процедура СинхронизироватьКонтрагентовСоздаваемыхБезусловно(ТипСинхронизации,
	ДатаПоследнегоИзменения, КонтекстДиагностики)
	
	КонтрагентыСоздаваемыеБезусловно = СервисНастроекЭДО.ПолучитьКонтрагентовСоздаваемыхБезусловно(
		КонтекстДиагностики);
	Если КонтрагентыСоздаваемыеБезусловно = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СервисНастроекЭДО.ОбновитьКонтрагентовСоздаваемыхБезусловно(КонтрагентыСоздаваемыеБезусловно,
		ДатаПоследнегоИзменения, КонтекстДиагностики);
	
КонецПроцедуры

Процедура ДобавитьРазрешениеНаИспользованиеИнтернетРесурса(Разрешения, АдресРесурса, Описание) 
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
	Порт = СтруктураURI.Порт;
	Если Порт = Неопределено Тогда
		Порт = ?(ВРег(СтруктураURI.Схема) = "HTTPS", 443, 80);
	КонецЕсли;
	
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(ВРег(СтруктураURI.Схема),
		СтруктураURI.ИмяСервера, Порт, Описание));
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ИдентификаторУчетнойЗаписи - Строка
// Возвращаемое значение:
// 	Структура:
//   * ЛогинFTP - Строка
//   * ПарольFTP - Строка
Функция ПараметрыАутентификацииУчетнойЗаписиПрямогоОбмена(ИдентификаторУчетнойЗаписи)
	
	ДанныеИзБезопасногоХранилища  = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторУчетнойЗаписи,
		"ЛогинFTP, ПарольFTP");
	Возврат ДанныеИзБезопасногоХранилища;
	
КонецФункции

// Возвращает вид ошибки, описывающий ситуацию, когда у учетной записи отсутствуют доступные сертификаты.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиОтсутствуетСертификатДляПодписания()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеНайденСертификатДляПодписания";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отсутствует доступный сертификат для подписания документов'");
	ВидОшибки.ОписаниеПроблемы =  НСтр("ru = 'В процессе подписания электронного документа не найден ни один из доступных сертификатов ЭП.'");
	ОписаниеРешения = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Проверьте"">Проверьте</a> настройки электронных подписей.'"));
	ВидОшибки.ОписаниеРешения = ОписаниеРешения;
	ВидОшибки.ОбработчикиНажатия.Вставить("Проверьте", "СинхронизацияЭДОКлиент.ОткрытьНастройкиЭлектроннойПодписи");
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти