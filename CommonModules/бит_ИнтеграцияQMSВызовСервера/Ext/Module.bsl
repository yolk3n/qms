// Процедура - Записать в журнал регистрации
//
// Параметры:
//  СтруктураСообщения	 - Структура:
//	           * ИмяСобытия  - Строка - "Интеграция QMS".
//             * ПредставлениеУровня  - Строка - "Информация"
//                                       Доступные значения: "Информация", "Ошибка", "Предупреждение", "Примечание".
//             * Комментарий - Строка - комментарий события.
//             * ДатаСобытия - Дата   - текущая дата сеанса
Процедура ЗаписатьВЖурналРегистрации(СтруктураСообщения) Экспорт

	СобытияЖурнала = Новый СписокЗначений;
	СобытияЖурнала.Добавить(СтруктураСообщения);
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияЖурнала);
	
КонецПроцедуры 

Функция НоваяСтруктураСообщенияЖурнала() Экспорт 
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ИмяСобытия", "Интеграция QMS");
	СтруктураСообщения.Вставить("ПредставлениеУровня", "Информация");
	СтруктураСообщения.Вставить("Комментарий", Неопределено);
	СтруктураСообщения.Вставить("ДатаСобытия", ТекущаяДатаСеанса());	
	Возврат СтруктураСообщения; 	

КонецФункции

Функция СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(ТипEnvelope, ОбъектBodyXDTO)
	ОбъектEnvelopeXDTO = ФабрикаXDTO.Создать(ТипEnvelope);
	ОбъектEnvelopeXDTO.Body.Добавить(ОбъектBodyXDTO);
	
	ИмяПромежуточногоФайла = ПолучитьИмяВременногоФайла("xml"); 

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяПромежуточногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектEnvelopeXDTO);
	ЗаписьXML.Закрыть();
	
	ФайлXML = Новый Файл(ИмяПромежуточногоФайла);
	
	Возврат ФайлXML; 
КонецФункции

Функция ПолучитьСтруктуруТиповEnvelopeBody()	
	ТипEnvelope = ФабрикаXDTO.Тип("http://schemas.xmlsoap.org/soap/envelope/", "Envelope"); 
	ТипBody = ТипEnvelope.Свойства.Получить("Body").Тип;
	СтруктураТиповEnvelopeBody = Новый Структура;
	СтруктураТиповEnvelopeBody.Вставить("ТипEnvelope", ТипEnvelope);
	СтруктураТиповEnvelopeBody.Вставить("ТипBody", ТипBody);
	Возврат СтруктураТиповEnvelopeBody;
КонецФункции

#Область ВыгрузкаДанных

Функция ПолучитьXMLДляCreateUpdateProductWMHS(Номенклатура)  
	
	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипCreateUpdateProductWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("CreateUpdateProductWMHS").Тип;
	ТипProduct = ТипCreateUpdateProductWMHS.Свойства.Получить("Product").Тип;
	
	НоменклатураXDTO = ФабрикаXDTO.Создать(ТипProduct);
	
	НоменклатураРЛС = Номенклатура.ЭлементКАТ;
	
	НоменклатураXDTO.BarcodeMain = НоменклатураРЛС.Штрихкоды[0].Штрихкод;
																																							
	НоменклатураXDTO.ESKLP = НоменклатураРЛС.АТХ.КодЕСКЛП;
	НоменклатураXDTO.Name = НоменклатураРЛС.Наименование;
	Если НоменклатураРЛС.ГруппаПКУ.Наименование = "Лекарственные препараты неподлежащие ПКУ" Тогда 
		НоменклатураXDTO.PKU = 0;
	Иначе
		НоменклатураXDTO.PKU = 1;
	КонецЕсли;
	НоменклатураXDTO.ProductCode = НоменклатураРЛС.Код;
	НоменклатураXDTO.ProductGroup = Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета.Наименование;
	НоменклатураXDTO.RLS = НоменклатураРЛС.НомерРЛС;
	НоменклатураXDTO.Ration = НоменклатураРЛС.Упаковка.Коэффициент;
	НоменклатураXDTO.Category = КодОбъекта(Номенклатура.ВидНоменклатуры);
	НоменклатураXDTO.SubCategory = КодОбъекта(Номенклатура.ВидНоменклатуры);
	НоменклатураXDTO.UnitCodeMax = НоменклатураРЛС.Упаковка.Наименование;
	НоменклатураXDTO.UnitCodeMin = НоменклатураРЛС.Упаковка.БазоваяЕдиницаИзмерения.Наименование;
	
	ОбъектXDTOCreateUpdateProductWMHS = ФабрикаXDTO.Создать(ТипCreateUpdateProductWMHS);
	
	ОбъектXDTOCreateUpdateProductWMHS.Product = НоменклатураXDTO;
	ОбъектXDTOCreateUpdateProductWMHS.RequestName = "";
	ОбъектXDTOCreateUpdateProductWMHS.pIDo = "Хадасса"; 
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.CreateUpdateProductWMHS = ОбъектXDTOCreateUpdateProductWMHS;
	 
	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO)
		
КонецФункции

Функция ПолучитьXMLДляVerifyChangeUnitRatioWMHS(НоменклатураВладельца) 
	
	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипVerifyChangeUnitRatioWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("VerifyChangeUnitRatioWMHS").Тип;
	
	ПроверкаУпаковкиXDTO = ФабрикаXDTO.Создать(ТипVerifyChangeUnitRatioWMHS); 
	
	ПроверкаУпаковкиXDTO.pIDo = "Хадасса";
	ПроверкаУпаковкиXDTO.ProductCode = НоменклатураВладельца.ЭлементКАТ.Код;
	ПроверкаУпаковкиXDTO.RequestName = "";  
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.VerifyChangeUnitRatioWMHS = ПроверкаУпаковкиXDTO;
	 
	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO)
																	 
КонецФункции 

Функция ПолучитьXMLДляCreatePresenceAPTOSTWMHS(НоменклатураВладельца) 
	
	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипCreatePresenceAPTOSTWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("pCreatePresenceAPTOSTWMHS").Тип;

	ОстаткиXDTO = ФабрикаXDTO.Создать(ТипCreatePresenceAPTOSTWMHS); 
																		  
	
	//... 
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.pCreatePresenceAPTOSTWMHS = ОстаткиXDTO;
	 
	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO)

КонецФункции

Функция ПолучитьXMLДляCreateUpdateFinanceWMHS(ИсточникФинансирования) 
	
	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипCreateUpdateFinanceWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("CreateUpdateFinanceWMHS").Тип;	
	ТипFinance = ТипCreateUpdateFinanceWMHS.Свойства.Получить("Finance").Тип;
	
	ИсточникФинансированияXDTO = ФабрикаXDTO.Создать(ТипFinance); 
	
	ИсточникФинансированияXDTO.FinanceName = ИсточникФинансирования.Наименование;
	ИсточникФинансированияXDTO.FinanceCode = ИсточникФинансирования.Код; 
	
	ОбъектXDTOCreateUpdateFinanceWMHS = ФабрикаXDTO.Создать(ТипCreateUpdateFinanceWMHS);
																														 
	ОбъектXDTOCreateUpdateFinanceWMHS.Finance = ИсточникФинансированияXDTO;
	ОбъектXDTOCreateUpdateFinanceWMHS.RequestName = "";
	ОбъектXDTOCreateUpdateFinanceWMHS.pIDo = "Хадасса";
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.CreateUpdateFinanceWMHS = ОбъектXDTOCreateUpdateFinanceWMHS;

	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO)

КонецФункции

Функция ПолучитьXMLДляCloseDepartmentPeriodIWMHS(КодПодразделения, ДатаЗапрета) 
	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипCloseDepartmentPeriodIWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("CloseDepartmentPeriodIWMHS").Тип;
	
	CloseDepartmentPeriodIWMHSXDTO = ФабрикаXDTO.Создать(ТипCloseDepartmentPeriodIWMHS); 

	CloseDepartmentPeriodIWMHSXDTO.pIDo = "Хадасса";
	CloseDepartmentPeriodIWMHSXDTO.DepCode = КодПодразделения;
	CloseDepartmentPeriodIWMHSXDTO.Date = ДатаЗапрета;
	CloseDepartmentPeriodIWMHSXDTO.RequestName = "";
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.CloseDepartmentPeriodIWMHS = CloseDepartmentPeriodIWMHSXDTO;
	 
	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO)
 
КонецФункции

Функция ПроверитьДвиженияНоменклатурыВQMS(Номенклатура) Экспорт
	СтруктураПараметровЗапроса = ПолучитьСтруктуруПараметровЗапроса();
	АдресСервераQMS = СтруктураПараметровЗапроса.АдресСервераQMS;
	ДополнительныеПараметры = СтруктураПараметровЗапроса.ДополнительныеПараметры;
	СтруктураСообщенияЖурнала = СтруктураПараметровЗапроса.СтруктураСообщенияЖурнала;
	
	ФайлXML = ПолучитьXMLДляVerifyChangeUnitRatioWMHS(Номенклатура); 
	Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
	ТелоОтвета = Ответ.Тело.Body.VerifyChangeUnitRatioWMHSResponse.Response;
	СтатусОтвета = Лев(ТелоОтвета, 1);
	Если СтатусОтвета = "0" Тогда
		СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
		Возврат Ложь;
	ИначеЕсли СтатусОтвета = "1" Тогда
		
		Возврат Истина;	
		
	КонецЕсли;
КонецФункции

#КонецОбласти
																						  

#Область ЗагрузкаДанных 

Функция ПолучитьXMLДляGetFinanceListWMHS() 

	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипGetFinanceListWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("GetFinanceListWMHS").Тип;	

	ОбъектXDTOGetFinanceListWMHS = ФабрикаXDTO.Создать(ТипGetFinanceListWMHS); 

	ОбъектXDTOGetFinanceListWMHS.RequestName = "";
	ОбъектXDTOGetFinanceListWMHS.pIDo = "Хадасса";

																						  
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.GetFinanceListWMHS = ОбъектXDTOGetFinanceListWMHS;

	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO);

КонецФункции

Функция ПолучитьXMLДляGetDepartmentListWMHS() 

	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипGetDepartmentListWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("GetDepartmentListWMHS").Тип;	

	ОбъектXDTOGetDepartmentListWMHS = ФабрикаXDTO.Создать(ТипGetDepartmentListWMHS); 

	ОбъектXDTOGetDepartmentListWMHS.RequestName = "";
	ОбъектXDTOGetDepartmentListWMHS.pIDo = "Хадасса";

	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.GetDepartmentListWMHS = ОбъектXDTOGetDepartmentListWMHS;

	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO);

КонецФункции 

Функция ПолучитьXMLДляGetDEPAWMHS(ДатаНачала,ДатаОкончания)Экспорт 

	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипGetDEPAWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("GetDEPAWMHS").Тип;	

	ОбъектXDTOGetDEPAWMHS = ФабрикаXDTO.Создать(ТипGetDEPAWMHS);  

	ОбъектXDTOGetDEPAWMHS.pIDo = "Хадасса";
	ОбъектXDTOGetDEPAWMHS.DateBegin = Формат(ДатаНачала,"ДФ=yyyy-MM-dd");
	ОбъектXDTOGetDEPAWMHS.DateEnd = Формат(ДатаОкончания,"ДФ=yyyy-MM-dd");
	ОбъектXDTOGetDEPAWMHS.sdstDoc = "1";
	ОбъектXDTOGetDEPAWMHS.DepCodeFrom = "";
	ОбъектXDTOGetDEPAWMHS.RequestName = "";
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.GetDEPAWMHS = ОбъектXDTOGetDEPAWMHS;

	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO);

КонецФункции 

Функция ЗагрузитьПодразделенияИзQMS() Экспорт
	СтруктураПараметровЗапроса = ПолучитьСтруктуруПараметровЗапроса();
	АдресСервераQMS = СтруктураПараметровЗапроса.АдресСервераQMS;
	ДополнительныеПараметры = СтруктураПараметровЗапроса.ДополнительныеПараметры;
	СтруктураСообщенияЖурнала = СтруктураПараметровЗапроса.СтруктураСообщенияЖурнала;
																						  
	
	ФайлXML = ПолучитьXMLДляGetDepartmentListWMHS(); 
	Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
	СписокПодразделенийИзQMS = Ответ.Тело.Body.GetDepartmentListWMHSResponse.DepartmentList.DepartmentStructure;
	ТелоОтвета = Ответ.Тело.Body.GetDepartmentListWMHSResponse.Response;
	СтатусОтвета = Лев(ТелоОтвета, 1);
	Если СтатусОтвета = "0" Тогда
		СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
		Возврат Ложь;
	ИначеЕсли СтатусОтвета = "1" Тогда
		Для Каждого ПодразделениеQMS Из СписокПодразделенийИзQMS Цикл  
			Если Справочники.ПодразделенияОрганизаций.НайтиПоКоду(ПодразделениеQMS.DepartmentCode) = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
				НовоеПодразделение = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
				НовоеПодразделение.Код = ПодразделениеQMS.DepartmentCode;
				НовоеПодразделение.Наименование = ПодразделениеQMS.DepartmentName;
				НовоеПодразделение.Владелец = ОбъектПоКоду("Хадасса");
				НовоеПодразделение.ОбменДанными.Загрузка = Истина;
				НовоеПодразделение.Записать();
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;	
	КонецЕсли;
КонецФункции

Функция ЗагрузитьИсточникиФинансированияИзQMS() Экспорт
	СтруктураПараметровЗапроса = ПолучитьСтруктуруПараметровЗапроса();
	АдресСервераQMS = СтруктураПараметровЗапроса.АдресСервераQMS;
	ДополнительныеПараметры = СтруктураПараметровЗапроса.ДополнительныеПараметры;
	СтруктураСообщенияЖурнала = СтруктураПараметровЗапроса.СтруктураСообщенияЖурнала;
	
	ФайлXML = ПолучитьXMLДляGetFinanceListWMHS(); 
	Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
	СписокИсточниковФинансированияИзQMS = Ответ.Тело.Body.GetFinanceListWMHSResponse.FinanceList.FinanceStructure;
	ТелоОтвета = Ответ.Тело.Body.GetFinanceListWMHSResponse.Response;
	СтатусОтвета = Лев(ТелоОтвета, 1);
	Если СтатусОтвета = "0" Тогда
		СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
		Возврат Ложь;
	ИначеЕсли СтатусОтвета = "1" Тогда
		Для Каждого ИсточникФинансированияQMS Из СписокИсточниковФинансированияИзQMS Цикл  
			Если Справочники.ИсточникиФинансирования.НайтиПоКоду(ИсточникФинансированияQMS.FinanceCode) = Справочники.ИсточникиФинансирования.ПустаяСсылка() Тогда
				НовыйИсточникФинансирования = Справочники.ИсточникиФинансирования.СоздатьЭлемент();
				НовыйИсточникФинансирования.Код = ИсточникФинансированияQMS.FinanceCode;
				НовыйИсточникФинансирования.Наименование = ИсточникФинансированияQMS.FinanceName;
				НовыйИсточникФинансирования.Записать();
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;	
	КонецЕсли;
КонецФункции

Процедура ЗагрузитьТребованияИзQMS() Экспорт
	СтруктураПараметровЗапроса = ПолучитьСтруктуруПараметровЗапроса();
	АдресСервераQMS = СтруктураПараметровЗапроса.АдресСервераQMS;
	ДополнительныеПараметры = СтруктураПараметровЗапроса.ДополнительныеПараметры;
	СтруктураСообщенияЖурнала = СтруктураПараметровЗапроса.СтруктураСообщенияЖурнала;
	
	//ИмяФайлаСОтветом = "D:\Результат.xml";
	//КлиентHTTPКлиентСервер.УстановитьИмяВыходногоФайла(ДополнительныеПараметры,ИмяФайлаСОтветом);

	ФайлXML = ПолучитьXMLДляGetDEPAWMHS(Дата(2024,1,1),Дата(2024,12,1)); //ПОКА ТАК 
	Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
	ТелоОтвета = Ответ.Тело.Body.GetDEPAWMHSResponse.Response;
	СтатусОтвета = Лев(ТелоОтвета, 1);
	Если СтатусОтвета = "0" Тогда
		СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
	ИначеЕсли СтатусОтвета = "1" Тогда
		ТаблицаВыгрузки = СоздатьТаблицуProductTransferStructure();
		СписокXDTO = Ответ.Тело.Body.GetDEPAWMHSResponse.Product.ProductTransferStructure; 
		Для Каждого ЭлементСписка Из СписокXDTO Цикл
			СтрокаТаблицы = ТаблицаВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,ЭлементСписка);
		КонецЦикла;
		
		ТаблицаВыгрузкиПослеСвертки = ТаблицаВыгрузки.Скопировать();
		ТаблицаВыгрузкиПослеСвертки.Свернуть("DocType,DocNum,DocDate,DocOTD,DocSKL,DocOTDTO,DocSKLTO");
		Для Каждого СтрокаДок Из ТаблицаВыгрузкиПослеСвертки Цикл 
			ПараметрыОтбора = Новый Структура("DocNum,DocDate",СтрокаДок.DocNum,СтрокаДок.DocDate); 
			МассивСтрокСНоменклатурой = ТаблицаВыгрузки.НайтиСтроки(ПараметрыОтбора);
			ДанныеДокументаТребованиеОтделения(СтрокаДок, МассивСтрокСНоменклатурой);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеДокументаТребованиеОтделения(Шапка, ТаблицаНоменклатуры)	
	
	ШапкаДокумента = Новый Структура();
	ШапкаДокумента.Вставить("ИмяДокумента","ТребованиеОтделения");  
	//ШапкаДокумента.Вставить("ХэшДокументаQMS",ХэшТаблицы(ТаблицаНоменклатуры));
	ШапкаДокумента.Вставить("Дата", СтроковыеФункцииКлиентСервер.СтрокаВДату(Шапка.DocDate));
	ШапкаДокумента.Вставить("Организация",Справочники.бит_НастройкиИнтеграцииQMS.Организация.Значение);
	ШапкаДокумента.Вставить("Отделение", ОбъектПоКоду(Шапка.DocOTDTO));
	ШапкаДокумента.Вставить("ПодразделениеОрганизации", ОбъектПоКоду(Шапка.DocOTD)); 
	ШапкаДокумента.Вставить("СкладОтправитель", ОбъектПоКоду(Шапка.DocSKL));
	ШапкаДокумента.Вставить("СкладПолучатель", ОбъектПоКоду(Шапка.DocSKLTO));  
	ШапкаДокумента.Вставить("Статус", Перечисления.СтатусыТребованийОтделений.НеСогласован);
	ШапкаДокумента.Вставить("Приоритет", Справочники.бит_НастройкиИнтеграцииQMS.ПриоритетТребования.Значение);
	ШапкаДокумента.Вставить("НомерQMS", Шапка.DocNum);	
	ШапкаДокумента.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь); 
	ШапкаДокумента.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	ШапкаДокумента.Вставить("Комментарий", "QMS"); 	
	
	//Из кумыса приходит как ТЧ, в 1с - шапка. По словам Дмитрия Павлова, если  в доке кумыса есть вид ассигнования, то у всей номенклатуры он одинаковый 
	Для каждого Строка из ТаблицаНоменклатуры Цикл
		СтруктураИсточникФинансирования = СоздатьСтруктуруFinance();
		ЗаполнитьЗначенияСвойств(СтруктураИсточникФинансирования,Строка.Finance);
		Если ТипЗнч(СтруктураИсточникФинансирования.FinanceCode) = Тип("ОбъектXDTO") Тогда 
			ШапкаДокумента.Вставить("ИсточникФинансирования", Справочники.бит_НастройкиИнтеграцииQMS.ИсточникиФинансирования.Значение);//ПОКА ТАК 
			Прервать;
		Иначе
			ШапкаДокумента.Вставить("ИсточникФинансирования", Справочники.ИсточникиФинансирования.НайтиПоКоду(СтруктураИсточникФинансирования.FinanceCode));
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	Товары = Новый Массив;
	Для Каждого Строка из ТаблицаНоменклатуры Цикл			
		СтруктураНоменклатура = СоздатьСтруктуруCategory();
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатура,Строка.Category);
		Номенклатура = Неопределено;
		Номенклатура = НайтиНоменклатуру(?(ТипЗнч(СтруктураНоменклатура.BarcodeMain) = Тип("Строка"),
										СтруктураНоменклатура.BarcodeMain,""),СтруктураНоменклатура.ProductCode);//ПОКА ТАК
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("Номенклатура",Номенклатура); //ПОКА ТАК, не знаю доделала ли Таня. Пока встает другая номенклатутра
		ДанныеСтроки.Вставить("ЕдиницаИзмерения", Номенклатура.ОсновнаяЕдиницаУчета);
		ДанныеСтроки.Вставить("КоличествоВЕдиницахИзмерения", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.NumMax));
		
		Товары.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ТабличныеЧасти = Новый Структура();
	ТабличныеЧасти.Вставить("Товары",Товары);	
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ШапкаДокумента",ШапкаДокумента);
	ДанныеДокумента.Вставить("ТабличныеЧасти",ТабличныеЧасти); 
	
	ОбработатьДокумент(ДанныеДокумента);
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСтруктуруПараметровЗапроса()
	АдресСервераQMS = бит_ИнтеграцияQMSСерверПовтИсп.НастройкиПодключения().АдресСервера;
	ДополнительныеПараметры = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	КлиентHTTPКлиентСервер.ТелоОтветаКакXML(ДополнительныеПараметры);
	СтруктураСообщенияЖурнала = бит_ИнтеграцияQMSВызовСервера.НоваяСтруктураСообщенияЖурнала();
	Узел = ПланыОбмена.бит_ПланОбменаQMS.НайтиПоКоду("001");
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("АдресСервераQMS", АдресСервераQMS);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	СтруктураПараметров.Вставить("СтруктураСообщенияЖурнала", СтруктураСообщенияЖурнала);
	СтруктураПараметров.Вставить("Узел", Узел);
	
	Возврат СтруктураПараметров; 
КонецФункции

Процедура ЗаданиеОбмена() Экспорт
	СтруктураПараметровЗапроса = ПолучитьСтруктуруПараметровЗапроса();
	АдресСервераQMS = СтруктураПараметровЗапроса.АдресСервераQMS;
	ДополнительныеПараметры = СтруктураПараметровЗапроса.ДополнительныеПараметры;
	СтруктураСообщенияЖурнала = СтруктураПараметровЗапроса.СтруктураСообщенияЖурнала;
	Узел = СтруктураПараметровЗапроса.Узел;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного);
	//Проходим все зарегистрированные к обмену объекты
	Пока ВыборкаИзменений.Следующий() Цикл
		ОбъектКОбмену = ВыборкаИзменений.Получить();
		//Выгрузка номенклатуры
		Если ТипЗнч(ОбъектКОбмену) = Тип("СправочникОбъект.Номенклатура") Тогда  
			ФайлXML = ПолучитьXMLДляCreateUpdateProductWMHS(ОбъектКОбмену.Ссылка); 
			Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
			ТелоОтвета = Ответ.Тело.Body.CreateUpdateProductWMHSResponse.Response;
			СтатусОтвета = Лев(ТелоОтвета, 1);
			Если СтатусОтвета = "0" Тогда
				СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
				бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
			ИначеЕсли СтатусОтвета = "1" Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Узел.НомерОтправленного);
				Узел.НомерОтправленного = Узел.НомерОтправленного + 1;
				Узел.Записать();
			КонецЕсли;	
		КонецЕсли;
		//Выгрузка источников финансирования
		Если ТипЗнч(ОбъектКОбмену) = Тип("СправочникОбъект.ИсточникиФинансирования") Тогда  
			ФайлXML = ПолучитьXMLДляCreateUpdateFinanceWMHS(ОбъектКОбмену.Ссылка); 
			Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
			ТелоОтвета = Ответ.Тело.Body.CreateUpdateFinanceWMHSResponse.Response;
			СтатусОтвета = Лев(ТелоОтвета, 1);
			Если СтатусОтвета = "0" Тогда
				СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
				бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
			ИначеЕсли СтатусОтвета = "1" Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Узел.НомерОтправленного);
				Узел.НомерОтправленного = Узел.НомерОтправленного + 1;
				Узел.Записать();
			КонецЕсли;	
		КонецЕсли;
		//Выгрузка источников финансирования
		Если ТипЗнч(ОбъектКОбмену) = Тип("СправочникОбъект.ИсточникиФинансирования") Тогда  
			ФайлXML = ПолучитьXMLДляCreateUpdateFinanceWMHS(ОбъектКОбмену.Ссылка); 
			Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
			ТелоОтвета = Ответ.Тело.Body.CreateUpdateFinanceWMHSResponse.Response;
			СтатусОтвета = Лев(ТелоОтвета, 1);
			Если СтатусОтвета = "0" Тогда
				СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
				бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
			ИначеЕсли СтатусОтвета = "1" Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел);	
			КонецЕсли;	
		КонецЕсли;
		//...
	КонецЦикла;
	//Выгрузка даты запрета изменения данных
		Если ТипЗнч(ОбъектКОбмену) = Тип("РегистрСведенийНаборЗаписей.ДатыЗапретаИзменения") Тогда	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДатыЗапретаИзменения.Объект КАК Объект,
				|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета,
				|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
				|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
				|ИЗ
				|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения,
				|	РегистрСведений.ДатыЗапретаИзменения.Изменения КАК ДатыЗапретаИзмененияИзменения
				|ГДЕ
				|	ДатыЗапретаИзменения.Пользователь = &Пользователь";
			
			Запрос.УстановитьПараметр("Пользователь", Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ДатаЗапрета = ДатыЗапретаИзмененияСлужебный.ДатаЗапретаПоОписанию(Выборка.ОписаниеДатыЗапрета, Выборка.ДатаЗапрета);
				ДатаЗапрета =  Формат(ДатаЗапрета, "ДФ=yyyy-MM-dd");
				КодПодразделения = КодОбъекта(Выборка.Объект);
				Если ЗначениеЗаполнено(Выборка.Объект) Тогда
					КодПодразделения = КодОбъекта(Выборка.Объект);
				Иначе
					КодПодразделения = "000001";
				КонецЕсли;
				ФайлXML = ПолучитьXMLДляCloseDepartmentPeriodIWMHS(КодПодразделения, ДатаЗапрета); 
				Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
				ТелоОтвета = Ответ.Тело.Body.CloseDepartmentPeriodIWMHSResponse.Response;
				СтатусОтвета = Лев(ТелоОтвета, 1);
				Если СтатусОтвета = "0" Тогда
					СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
					бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
				ИначеЕсли СтатусОтвета = "1" Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Узел.НомерОтправленного);
					УзелОбъект = Узел.ПолучитьОбъект();
					УзелОбъект.НомерОтправленного = Узел.НомерОтправленного + 1;
					УзелОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
КонецПроцедуры

// Функция - Получает код объекта 
// Параметры:
//  Объект - 	 СправочникСсылка.ОтделенияОрганизаций, СправочникСсылка.Склады, СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации 
// Возвращаемое значение:
//   -    Строка - Код объектаQMS
//
Функция КодОбъекта(Объект) Экспорт
	
	Возврат РегистрыСведений.бит_СоответствияОбъектовУчетаQMS.ПолучитьКодОбъекта(Объект);

КонецФункции 

Функция ОбъектПоКоду(Код) Экспорт 
	
	Возврат РегистрыСведений.бит_СоответствияОбъектовУчетаQMS.ПолучитьОбъектПоКоду(Код);
																						  
КонецФункции 

Процедура бит_ДатаЗапретаQMSПриЗаписиПриЗаписи(Источник, Отказ, Замещение) Экспорт 
	Если Источник.Отбор.Пользователь.Значение = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей Тогда
		СтруктураПараметровЗапроса = ПолучитьСтруктуруПараметровЗапроса();
		Узел = СтруктураПараметровЗапроса.Узел;
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьXMLДляGetAPTRWMHS(ДатаНачала,ДатаОкончания) Экспорт
	
	СтруктураТиповEnvelopeBody = ПолучитьСтруктуруТиповEnvelopeBody();
	ТипGetAPTRWMHS = СтруктураТиповEnvelopeBody.ТипBody.Свойства.Получить("GetAPTRWMHS").Тип;
	
	ОбъектXDTOGetAPTRWMHS = ФабрикаXDTO.Создать(ТипGetAPTRWMHS);
	
	ОбъектXDTOGetAPTRWMHS.pIDo = "Хадасса"; 	
	ОбъектXDTOGetAPTRWMHS.DateBegin = Формат(ДатаНачала,"ДФ=yyyy-MM-dd");
	ОбъектXDTOGetAPTRWMHS.DateEnd = Формат(ДатаОкончания,"ДФ=yyyy-MM-dd");
	ОбъектXDTOGetAPTRWMHS.sdstDoc = "1";
	ОбъектXDTOGetAPTRWMHS.DepCodeFrom = "";
	ОбъектXDTOGetAPTRWMHS.RequestName = "";
	
	ОбъектBodyXDTO = ФабрикаXDTO.Создать(СтруктураТиповEnvelopeBody.ТипBody); 
	ОбъектBodyXDTO.GetAPTRWMHS = ОбъектXDTOGetAPTRWMHS;
	
	Возврат СоздатьЗаписатьВXMLОбъектEnvelopeXDTO(СтруктураТиповEnvelopeBody.ТипEnvelope, ОбъектBodyXDTO)
	
КонецФункции 

Функция СвойстваXDTOВСоответствие(СписокСвойствXDTO) Экспорт  
	
	Мэп = Новый Соответствие;
	Если ТипЗнч(СписокСвойствXDTO) = Тип("ОбъектXDTO") Тогда
		Для Каждого Свойство Из СписокСвойствXDTO.Свойства() Цикл
			Мэп.Вставить(Свойство.Имя);
		КонецЦикла;
	ИначеЕсли ТипЗнч(СписокСвойствXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого Свойство Из СписокСвойствXDTO[0].Свойства() Цикл
			Мэп.Вставить(Свойство.Имя);
		КонецЦикла;
	КонецЕсли;
	Возврат Мэп;
	
КонецФункции 

Процедура ВыгрузкаИзQMSРасходныхДокументов() Экспорт
	
	АдресСервераQMS = бит_ИнтеграцияQMSСерверПовтИсп.НастройкиПодключения().АдресСервера;
	СтруктураСообщенияЖурнала = бит_ИнтеграцияQMSВызовСервера.НоваяСтруктураСообщенияЖурнала(); 
	ДополнительныеПараметры = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	КлиентHTTPКлиентСервер.ТелоОтветаКакXML(ДополнительныеПараметры);
	
	//ИмяФайлаСОтветом = "D:\Результат.xml";
	//КлиентHTTPКлиентСервер.УстановитьИмяВыходногоФайла(ДополнительныеПараметры,ИмяФайлаСОтветом);
	
	ФайлXML = ПолучитьXMLДляGetAPTRWMHS(Дата(2024,1,1),Дата(2024,12,1));
	
 	Ответ = КлиентHTTPКлиентСервер.ОтправитьФайл(АдресСервераQMS, ФайлXML, ДополнительныеПараметры);
		
	ТелоОтвета = Ответ.Тело.Body.GetAPTRWMHSResponse.Response;
	СтатусОтвета = Лев(ТелоОтвета, 1);
	Если СтатусОтвета = "0" Тогда
		СтруктураСообщенияЖурнала.Комментарий = ТелоОтвета;
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
	ИначеЕсли СтатусОтвета = "1" Тогда
		//успешно
		ТаблицаВыгрузки = СоздатьТаблицуProductTransferStructure();
		СписокXDTO = Ответ.Тело.Body.GetAPTRWMHSResponse.Product.ProductTransferStructure;
		Для Каждого ЭлементСписка Из СписокXDTO Цикл
			СтрокаТаблицы = ТаблицаВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,ЭлементСписка);
		КонецЦикла;
		
		ТаблицаВыгрузкиПослеСвертки = ТаблицаВыгрузки.Скопировать();
		ТаблицаВыгрузкиПослеСвертки.Свернуть("DocType,DocNum,DocDate,DocOTD,DocSKL");
		Для Каждого СтрокаДок Из ТаблицаВыгрузкиПослеСвертки Цикл 
			ПараметрыОтбора = Новый Структура("DocNum,DocDate",СтрокаДок.DocNum,СтрокаДок.DocDate);
			МассивСтрокСНоменклатурой = ТаблицаВыгрузки.НайтиСтроки(ПараметрыОтбора);
			СоздатьОбновитьДокумент(СтрокаДок, МассивСтрокСНоменклатурой);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьМассивДанныхДокумента(НомерДокумента,ДатаДокумента,ИмяДокумента)
	
	СтруктураДанные = Новый Структура("ДокументСсылка, МассивСтрок",,Новый Массив);
	ТаблицаЗначений = СоздатьТаблицуДляХэша();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документы[ИмяДокумента],"НомерQMS") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументТовары.Ссылка КАК ДокументСылка,
		|	ДокументТовары.Ссылка.Отделение КАК Отделение,
		|	ДокументТовары.Ссылка.ИсточникФинансирования.Код КАК FinanceCode,
		|	ДокументТовары.Ссылка.НомерQMS КАК DocNum,
		|	ДокументТовары.Ссылка.Склад КАК Склад,
		|	ДокументТовары.Номенклатура.Код КАК CategoryCode,
		|	ДокументТовары.КоличествоВЕдиницахИзмерения КАК NumMax,
		|	ДокументТовары.Количество КАК NumMin,
		|	ДокументТовары.Штрихкод КАК Barcode
		|ИЗ
		|	Документ."+ИмяДокумента+".Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка.НомерQMS = &НомерДокумента
		|	И НАЧАЛОПЕРИОДА(ДокументТовары.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)"; 
		                                                       
		Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
		Запрос.УстановитьПараметр("ДатаДокумента", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаДокумента));
		
		Если ИмяДокумента = "ВозвратТоваровИзОтделения" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДокументТовары.Ссылка.Склад","ДокументТовары.Ссылка.СкладОтправитель");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовСтр = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
			НовСтр.DocOTD = КодОбъекта(Выборка.Отделение);
			НовСтр.DocSKL = КодОбъекта(Выборка.Склад);
			СтруктураДанные.ДокументСсылка = Выборка.ДокументСсылка;
			СтруктураДанные.МассивСтрок.Добавить(НовСтр);
		КонецЦикла;
	КонецЕсли;
	Возврат СтруктураДанные;
	
КонецФункции 

Функция ПолучитьИмяДокумента(DocType) Экспорт
	
	Если DocType = "списание без назначения" ИЛИ DocType = "акт списания" Тогда
		ИмяДокумента = "ВнутреннееПотреблениеТоваровВОтделении";
	ИначеЕсли DocType = "списание на отделении" Тогда
		ИмяДокумента = "ВозвратТоваровИзОтделения";
	ИначеЕсли DocType = "требование" Тогда
		ИмяДокумента = "ТребованиеОтделения";		 
	КонецЕсли;
	Возврат ИмяДокумента;
	
																																																			 

КонецФункции

Функция СоздатьТаблицуProductTransferStructure() Экспорт
																
	
	ТЗ = Новый ТаблицаЗначений;    
    ТЗ.Колонки.Добавить("Category");
    ТЗ.Колонки.Добавить("PST");
    ТЗ.Колонки.Добавить("Finance");
	ТЗ.Колонки.Добавить("MDLP");
    ТЗ.Колонки.Добавить("ProductSerial");
    ТЗ.Колонки.Добавить("Price");
	ТЗ.Колонки.Добавить("NumMin");
    ТЗ.Колонки.Добавить("NumMax");
    ТЗ.Колонки.Добавить("ValidityPeriod");
	ТЗ.Колонки.Добавить("Barcode");
    ТЗ.Колонки.Добавить("KSU");
    ТЗ.Колонки.Добавить("DocType");
	ТЗ.Колонки.Добавить("DocNum");
    ТЗ.Колонки.Добавить("DocDate");
    ТЗ.Колонки.Добавить("DocSKL");
	ТЗ.Колонки.Добавить("DocOTD");
    ТЗ.Колонки.Добавить("GUIDs41");
    ТЗ.Колонки.Добавить("uCode");
	ТЗ.Колонки.Добавить("uName");
	ТЗ.Колонки.Добавить("num174");
    ТЗ.Колонки.Добавить("Finance174");
    ТЗ.Колонки.Добавить("dat174b");
	ТЗ.Колонки.Добавить("dat174e");
    ТЗ.Колонки.Добавить("GUID174");
    ТЗ.Колонки.Добавить("DocSKLTO");	
	ТЗ.Колонки.Добавить("DocOTDTO");
	ТЗ.Колонки.Добавить("Doctor");
	ТЗ.Колонки.Добавить("Nurse");
    ТЗ.Колонки.Добавить("fio");
    ТЗ.Колонки.Добавить("pB");
	ТЗ.Колонки.Добавить("birthday");
    ТЗ.Колонки.Добавить("pstName");
    ТЗ.Колонки.Добавить("pstINN");
	ТЗ.Колонки.Добавить("ContractNum");
	ТЗ.Колонки.Добавить("ContractDate");
	
	Возврат ТЗ;
	
КонецФункции  
						
Функция СоздатьСтруктуруCategory() Экспорт
	
	Возврат Новый Структура("pIDo,ProductCode,Name,Category,SubCategory,Ration,UnitCodeMin,UnitCodeMax,RLS,ESKLP,BarcodeMain,ProductGroup,PKU,FederalCode,RegionalCode");
	
КонецФункции 

Функция СоздатьСтруктуруFinance() Экспорт
	
	Возврат Новый Структура("FinanceCode,FinanceName");
	
КонецФункции 



#Область РаботаСХэшами  

Функция ХэшДанных(ОбъектДанных) Экспорт

	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ОбъектДанных);
	
КонецФункции 

Процедура ЗаписатьХэшСсылки(Ссылка, Хэш)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Значение");
	ТаблицаСвойств.Колонки.Добавить("Свойство");
	
	НоваяСтрока = ТаблицаСвойств.Добавить();
	НоваяСтрока.Значение = Хэш;
	НоваяСтрока.Свойство = бит_ИнтеграцияQMSСерверПовтИсп.ДополнительноеСведениеХэш();
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Ссылка,ТаблицаСвойств);	

КонецПроцедуры

Функция СохраненныйХэшСсылки(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	УправлениеСвойствами.ЗначениеСвойства(Ссылка, бит_ИнтеграцияQMSСерверПовтИсп.ДополнительноеСведениеХэш());
	
КонецФункции

#КонецОбласти
 
Функция ДополнительноеСведениеПоИмени(Имя) Экспорт 
	
	ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",Имя);
	
	Если НЕ ЗначениеЗаполнено(ПВХ) Тогда
		ПВХОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		ПВХОбъект.Наименование = Имя;
		ПВХОбъект.Имя = Имя;
		ПВХОбъект.ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеСведения;
		ПВХОбъект.ТипЗначения = Тип("Строка");
		ПВХОбъект.Виден = Истина;
		ПВХОбъект.Доступен = Истина;
		ПВХОбъект.Заголовок = Имя;
		ПВХОбъект.ЗаголовокЯзык1 = Имя;
		ПВХОбъект.ЗаголовокЯзык2 = Имя;
		ПВХОбъект.ЭтоДополнительноеСведение = Истина;
		ПВХОбъект.Записать();
		ПВХ = ПВХОбъект.Ссылка;
	КонецЕсли;
	
	Возврат ПВХ
	
КонецФункции

Процедура ОбработатьДокумент(ДанныеДокумента)
	
	//Ищем такой докум в базе
	
	////...
	
	//Не нашли доки
	
	 ДокОбъект = Документы[ДанныеДокумента.ШапкаДокумента.ИмяДокумента].СоздатьДокумент(); 
	 ЗаполнитьЗначенияСвойств(ДокОбъект,ДанныеДокумента.ШапкаДокумента);
	 
	 Для Каждого КлючЗначение из ДанныеДокумента.ТабличныеЧасти Цикл
	 	ДокОбъект[КлючЗначение.Ключ].Очистить();		
		Для Каждого СтрокаТабличнойЧасти из КлючЗначение.Значение Цикл 		
			ЗаполнитьЗначенияСвойств(ДокОбъект[КлючЗначение.Ключ].Добавить(),СтрокаТабличнойЧасти);
		КонецЦикла;		
	КонецЦикла; 
		
	СтруктураСообщенияЖурнала = бит_ИнтеграцияQMSВызовСервера.НоваяСтруктураСообщенияЖурнала();
	Попытка
		ДокОбъект.Записать();
	Исключение
		СтруктураСообщенияЖурнала.Комментарий = ОписаниеОшибки();
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
	КонецПопытки;
		
	Непроведенные = ОбщегоНазначения.ПровестиДокументы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокОбъект.Ссылка));
	Для Каждого Элемент Из Непроведенные Цикл
		СтруктураСообщенияЖурнала.Комментарий = Элемент.ОписаниеОшибки;
		бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
	КонецЦикла; 
	
	
	
	//Если ДокОбъект.Ссылка.Проведен Тогда записываем хэш 
	
	
КонецПроцедуры


////////////////////////////// Танино
Процедура СоздатьОбновитьДокумент(Шапка, ТаблицаНоменклатуры)
  
  //вычисление хэша
  ТаблицаДляХэша = СоздатьТаблицуДляХэша();
  Для Каждого Элемент Из ТаблицаНоменклатуры Цикл
    НовСтр = ТаблицаДляХэша.Добавить();
    ЗаполнитьЗначенияСвойств(НовСтр,Элемент);
    НовСтр.CategoryCode = Элемент.Category.ProductCode;
    НовСтр.FinanceCode = Элемент.Finance.FinanceCode;
    Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовСтр,"ProductSerial") И ТипЗнч(НовСтр.ProductSerial) = Тип("Строка") Тогда 
      НовСтр.ProductSerialString = НовСтр.ProductSerial;
    КонецЕсли;
  КонецЦикла;
  ХэшДокументаQMS = ХэшДанных(ТаблицаДляХэша);
  ИмяДокумента = ПолучитьИмяДокумента(Шапка.DocType);
  СтруктураПоиска = НайтиДокумент(ИмяДокумента,Шапка.DocNum,Шапка.DocDate,Шапка.DocOTD, ХэшДокументаQMS);
  
  Если ЗначениеЗаполнено(СтруктураПоиска.ДокументСсылка) Тогда 
    Если СтруктураПоиска.ХэшИзменен Тогда
      //обновляем документ
      ДокОбъект = СтруктураПоиска.ДокументСсылка.ПолучитьОбъект();
    Иначе
      Возврат;
    КонецЕсли;
  Иначе //создаем документ
    ДокОбъект = Документы[ИмяДокумента].СоздатьДокумент();
  КонецЕсли;
  
  Если ИмяДокумента = "ВнутреннееПотреблениеТоваровВОтделении" Тогда
    ДокОбъект.Склад = ОбъектПоКоду(Шапка.DocSKL);
    ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
    ДокОбъект.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Закупочная");
  ИначеЕсли ИмяДокумента = "ВозвратТоваровИзОтделения" Тогда
    ДокОбъект.СкладОтправитель = ОбъектПоКоду(Шапка.DocSKL);
    ДокОбъект.СкладПолучатель = сок_Сервер.ПолучитьСкладАптека();
    ДокОбъект.ПодразделениеОрганизации = сок_Сервер.ПолучитьПодразделениеАптека();
  КонецЕсли;
  ДокОбъект.Организация = Справочники.Организации.НайтиПоНаименованию("Филиал компании ""Хадасса Медикал ЛТД""");
  ДокОбъект.Отделение = ОбъектПоКоду(Шапка.DocOTD);
  ДокОбъект.НомерQMS = Шапка.DocNum;
  ДокОбъект.Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(Шапка.DocDate);
  ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
  ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
    
  ДокОбъект.Товары.Очистить();
  ИсточникФинансирования = Неопределено;
  Номенлатура1С = Неопределено;
  Для Каждого Строка Из ТаблицаНоменклатуры Цикл 
    СтруктураНоменклатура = СоздатьСтруктуруCategory();
    ЗаполнитьЗначенияСвойств(СтруктураНоменклатура,Строка.Category);
    НовСтр = ДокОбъект.Товары.Добавить();
    
    Номенлатура1С = Неопределено;
    Номенлатура1С = НайтиНоменклатуру(?(ТипЗнч(СтруктураНоменклатура.BarcodeMain) = Тип("Строка"),
                      СтруктураНоменклатура.BarcodeMain,""),СтруктураНоменклатура.ProductCode);
    НовСтр.Номенклатура = Номенлатура1С;
    НовСтр.Штрихкод = СтруктураНоменклатура.BarcodeMain;
    Если ЗначениеЗаполнено(Номенлатура1С) Тогда
      НовСтр.ЕдиницаИзмерения = Номенлатура1С.ОсновнаяЕдиницаУчета;
    КонецЕсли;
    НовСтр.КоличествоВЕдиницахИзмерения = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.NumMax); 
    НовСтр.Количество =  СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.NumMin);
    НовСтр.Коэффициент = ?(НовСтр.КоличествоВЕдиницахИзмерения = 0, 0,
                НовСтр.Количество / НовСтр.КоличествоВЕдиницахИзмерения);
    НовСтр.СтатусУказанияСерий = 6;
    НовСтр.СтатусУказанияПартий = 4;
    Если ИмяДокумента = "ВнутреннееПотреблениеТоваровВОтделении" Тогда
      //НовСтр.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("202"); //как определить
      //НовСтр.АналитикаРасходов = //для ЛС это организация
    ИначеЕсли ИмяДокумента = "ВозвратТоваровИзОтделения" Тогда
      НовСтр.СтатусУказанияПартийОтправитель = 4;
      НовСтр.СтатусУказанияПартийПолучатель = 4;
      НовСтр.СтатусУказанияСерийОтправитель = 6;
      НовСтр.СтатусУказанияСерийПолучатель = 6;
    КонецЕсли;
                
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка,"ProductSerial") И ТипЗнч(Строка.ProductSerial) = Тип("Строка") Тогда
		 НовСтр.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("Номер",Строка.ProductSerial);
      Если Не ЗначениеЗаполнено(НовСтр.СерияНоменклатуры) И ЗначениеЗаполнено(НовСтр.Номенклатура) Тогда
         НовСтр.СерияНоменклатуры = СоздатьСериюНоменклатуры(НовСтр.Номенклатура,Строка.ProductSerial,Строка.ValidityPeriod);
      КонецЕсли;
    КонецЕсли;
    Если ИсточникФинансирования = Неопределено Тогда
      СтруктураИсточникФинансирования = СоздатьСтруктуруFinance();
      ЗаполнитьЗначенияСвойств(СтруктураИсточникФинансирования,Строка.Finance);
      ИсточникФинансирования = Справочники.ИсточникиФинансирования.НайтиПоКоду(СтруктураИсточникФинансирования.FinanceCode);
      ДокОбъект.ИсточникФинансирования = ИсточникФинансирования; 
    КонецЕсли;
    НовСтр.ИсточникФинансирования = ИсточникФинансирования;
  КонецЦикла;
  СтруктураСообщенияЖурнала = бит_ИнтеграцияQMSВызовСервера.НоваяСтруктураСообщенияЖурнала();
  Попытка
    ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
  Исключение
    СтруктураСообщенияЖурнала.Комментарий = ОписаниеОшибки();
    бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
  КонецПопытки;
  
  МассивДокументов = Новый Массив;
  МассивДокументов.Добавить(ДокОбъект.Ссылка);
  Непроведенные = ОбщегоНазначения.ПровестиДокументы(МассивДокументов);
  Для Каждого Элемент Из Непроведенные Цикл
    СтруктураСообщенияЖурнала.Комментарий = Элемент.ОписаниеОшибки;
    бит_ИнтеграцияQMSВызовСервера.ЗаписатьВЖурналРегистрации(СтруктураСообщенияЖурнала);
  КонецЦикла;
    
  Если ДокОбъект.Проведен Тогда
    ЗаписатьХэшДокумента(ДокОбъект.Ссылка,ХэшДокументаQMS);
  КонецЕсли;
  
КонецПроцедуры
		
Функция НайтиНоменклатуру(Штрихкод, Код)
  
  Запрос = Новый Запрос;
  Запрос.Текст =
 
    "ВЫБРАТЬ
    |  Номенклатура.Ссылка КАК Номенклатура
    |ИЗ 
    |  Справочник.РегистрЛекарственныхСредств КАК РегистрЛекарственныхСредств
    |    ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
    |    ПО РегистрЛекарственныхСредств.Ссылка = Номенклатура.ЭлементКАТ
    |ГДЕ
    |  ВЫРАЗИТЬ(РегистрЛекарственныхСредств.Штрихкод КАК СТРОКА(300)) ПОДОБНО ""%"" + &Штрихкод + ""%""
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    |  ШтрихкодыНоменклатуры.Номенклатура
    |ИЗ
    |  РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
    |ГДЕ
    |  (ВЫРАЗИТЬ(ШтрихкодыНоменклатуры.Штрихкод КАК СТРОКА(50))) = &Штрихкод
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    |  Номенклатура.Ссылка
    |ИЗ
    |  Справочник.Номенклатура КАК Номенклатура
    |ГДЕ
    |  Номенклатура.Код = &Код";
  
  Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
  Запрос.УстановитьПараметр("Код", Код);
  
  РезультатЗапроса = Запрос.Выполнить();
  
  Выборка = РезультатЗапроса.Выбрать();
  
  Если Выборка.Следующий() Тогда 
    Возврат Выборка.Номенклатура;
  Иначе
    Возврат Неопределено;
  КонецЕсли;
  
КонецФункции


Функция СоздатьСериюНоменклатуры(Номенклатура, НомерСерии, ГоденДо)
  
  СпрОбъект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
  СпрОбъект.Владелец = Номенклатура;
  СпрОбъект.Номер = НомерСерии;
  СпрОбъект.ГоденДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(ГоденДо);
  Попытка
    СпрОбъект.Записать();
  Исключение
    
  КонецПопытки;
  
  Возврат СпрОбъект.Ссылка;
  
КонецФункции

Функция СоздатьТаблицуДляХэша() Экспорт
  
  ТЗ = Новый ТаблицаЗначений;    
    ТЗ.Колонки.Добавить("CategoryCode");
    ТЗ.Колонки.Добавить("FinanceCode");
    ТЗ.Колонки.Добавить("ProductSerialString");
  ТЗ.Колонки.Добавить("NumMin");
    ТЗ.Колонки.Добавить("NumMax");
  ТЗ.Колонки.Добавить("Barcode");
    ТЗ.Колонки.Добавить("ValidityPeriod");
  ТЗ.Колонки.Добавить("DocNum");
    ТЗ.Колонки.Добавить("DocDate");
    ТЗ.Колонки.Добавить("DocSKL");
  ТЗ.Колонки.Добавить("DocOTD");
  
  Возврат ТЗ;
  
КонецФункции   


Процедура ЗаписатьХэшДокумента(ДокументСсылка,СтрокаХэша)

  МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
  МЗ.Объект = ДокументСсылка;
  МЗ.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ХэшДокументаQMS");
  МЗ.Значение = СтрокаХэша;
  МЗ.Записать(Истина);
  
КонецПроцедуры


Функция НайтиДокумент(ИмяДокумента,НомерДокумента,ДатаДокумента,Отделение,ХэшДокумента)
  
  ПустаяСсылка = Документы[ИмяДокумента].ПустаяСсылка();
  СтруктураДанные = Новый Структура("ДокументСсылка, ХэшИзменен",ПустаяСсылка,Истина);
  Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПустаяСсылка,"НомерQMS") Тогда
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |  Документ.Ссылка КАК ДокументСсылка,
    |  ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Хэш
    |ИЗ
    |  Документ."+ИмяДокумента+" КАК Документ
    |    ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
    |    ПО Документ.Ссылка = ДополнительныеСведения.Объект
    |      И (ДополнительныеСведения.Свойство.Имя = ""ХэшДокументаQMS"")
    |ГДЕ
    |  Документ.НомерQMS = &НомерДокумента
    |  И НАЧАЛОПЕРИОДА(Документ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)
    |  И Документ.Отделение = &Отделение"; 
                                                           
    Запрос.УстановитьПараметр("НомерДокумента", НомерДокумента);
    Запрос.УстановитьПараметр("ДатаДокумента", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаДокумента));
    Запрос.УстановитьПараметр("Отделение",ОбъектПоКоду(Отделение));
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Выборка = РезультатЗапроса.Выбрать();
    
    Пока Выборка.Следующий() Цикл
      СтруктураДанные.ДокументСсылка = Выборка.ДокументСсылка;
      Если ХэшДокумента = Выборка.Хэш Тогда
         СтруктураДанные.ХэшИзменен = Ложь;
      КонецЕсли;
    КонецЦикла;
  КонецЕсли;
  Возврат СтруктураДанные;
  
КонецФункции





