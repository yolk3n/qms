
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция устанавливает ключ строки в табличной части
//
Процедура УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт
	
	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект.МаксимальныйКодСтроки;
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект.МаксимальныйКодСтроки = ТекущийКод;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность проведения документа в статусе "Закрыт".
//
// Параметры:
//  Отказ	 - Булево - параметр "Отказ" обработки проведения
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Заказ, Отказ) Экспорт
	
	МенеджерЗаказа = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказ);
	
	КонтролироватьВыполнение = МенеджерЗаказа.КонтролироватьВыполнениеЗаказа();
	ИспользоватьСтатусы = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Заказ);
	
	Если Не ИспользоватьСтатусы Или Не КонтролироватьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Статус");
	Если ОбщегоНазначения.ИмяЗначенияПеречисления(Статус) = "Закрыт" Тогда
		
		СписокЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заказ);
		ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа", Истина);
		
		Запрос = МенеджерЗаказа.СформироватьЗапросПроверкиПриСменеСтатуса(СписокЗаказов, "Закрыт", ДополнительныеПараметры);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПроверкаПройдена = МенеджерЗаказа.ПроверкаПередСменойСтатуса(Выборка, "Закрыт", ДополнительныеПараметры);
			Если Не ПроверкаПройдена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условное оформление
#Область УсловноеОформление

// Устанавливает условное оформление отмененной строки табличной части в форме Заказа.
// Параметры
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы;
//  ТаблицаФормы - ТаблицаФормы - элемент формы, связанного с табличной частью, в которой отменяются строки;
//
Процедура УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, ТаблицаФормы) Экспорт
	
	ПутьКТаблице = ТаблицаФормы.ПутьКДанным;
	ПутьКРеквизитуОтменено = ПутьКТаблице + ".Отменено";
	ПутьКРеквизитуПричинаОтмены = ПутьКТаблице + ".ПричинаОтмены";
	
	#Область ОтмененнаяСтрока
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ИсключаемыеДанные = Новый Массив;
	ИсключаемыеДанные.Добавить(ПутьКРеквизитуОтменено);
	ИсключаемыеДанные.Добавить(ПутьКРеквизитуПричинаОтмены);
	ИменаПолей = ПолучитьИменаПодчиненныхПолей(ТаблицаФормы, ИсключаемыеДанные);
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти // ОтмененнаяСтрока
	
	#Область ПричинаОтмены
	
	ИменаПолейПричиныОтмены = ПолучитьИменаПолейПоПутиКДанным(ТаблицаФормы, ПутьКРеквизитуПричинаОтмены);
	
	// Отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ИмяПоля Из ИменаПолейПричиныОтмены Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуПричинаОтмены);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Только просмотр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ИмяПоля Из ИменаПолейПричиныОтмены Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти // ПричинаОтмены
	
КонецПроцедуры

// Оформление состояния документа заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа заказа.
//  СостояниеЗакрыт - ПеречислениеСсылка - состояние при котором документ считается закрытым
//
Процедура УстановитьОформлениеСостоянияДокумента(Форма, СостояниеЗакрыт) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	ПолеСостояние = Элементы["Состояние"];
	ПолеСостояние.Шрифт = Новый Шрифт(ПолеСостояние.Шрифт,,, Истина);
	
	// Выделение цветом просроченного заказа
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом просроченного заказа'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеСостояние.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	// Выделение цветом состояния "Закрыт"
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Закрыт""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеСостояние.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеСостояние.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СостояниеЗакрыт;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Неопределено);
	
КонецПроцедуры

// Оформление состояния документа заказа.
//
// Параметры:
//  Список - ДинамическийСписок - список заказов.
//  СостояниеЗакрыт - ПеречислениеСсылка - состояние при котором документ считается закрытым
//
Процедура УстановитьОформлениеСостоянияДокументаВСписке(Список, СостояниеЗакрыт) Экспорт
	
	УсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	
	// Выделение цветом просроченного заказа
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом просроченного заказа'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДатаСобытия");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	// Выделение цветом состояния "Закрыт"
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния ""Закрыт""'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СостояниеЗакрыт;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет());
	
КонецПроцедуры

// Оформление даты поступления в форме заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа заказа.
//  ИмяПоляДатаПоступления - Строка
//  ОбязательныеСтатусы - Массив - список статусов, в которых обязательно указывать дату поступления.
//  ПутьКФлагуОтмены - Строка
//
Процедура УстановитьОформлениеДатыПоступления(Форма, ИмяПоляДатаПоступления, ОбязательныеСтатусы, ПутьКФлагуОтмены = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляДатаПоступления].имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ОбязательныеСтатусы;
	
	Если ПутьКФлагуОтмены <> Неопределено Тогда
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКФлагуОтмены);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Оформление цены заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа заказа.
//
Процедура УстановитьОформлениеЦеныЗаказа(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Цена заказа меньше цены документа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыЦенаЗаказа"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыКартинкаИзмененияЦены"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыПроцентОтклоненияОтЦеныЗаказа"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	// Цена заказа больше цены документа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыЦенаЗаказа"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыКартинкаИзмененияЦены"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыПроцентОтклоненияОтЦеныЗаказа"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	
КонецПроцедуры

// Оформление строк сверх заказа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа заказа.
//  ИмяПоляКодСтроки - Строка
//  ПутьКПолюКодСтроки - Строка
//  ТекстСверхЗаказа - Строка
//
Процедура УстановитьОформлениеСтокиСверхЗаказа(Форма, ИмяПоляКодСтроки = "ТоварыКодСтроки", ПутьКПолюКодСтроки = "Объект.Товары.КодСтроки", ТекстСверхЗаказа = "") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляКодСтроки].имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюКодСтроки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ?(ПустаяСтрока(ТекстСверхЗаказа), НСтр("ru='<сверх заказа>'"), ТекстСверхЗаказа));
	
КонецПроцедуры

// Оформление отбора номенклатуры в документах.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа заказа.
//  ИмяЭлементаТабличнойЧасти - Строка
//  ПутьКДаннымТабличнойЧасти - Строка
//
Процедура УстановитьОформлениеОтбораНоменклатуры(Форма, ИмяЭлементаТабличнойЧасти = "Товары", ПутьКДаннымТабличнойЧасти = "Объект.Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	#Область Номенклатура
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "ТорговоеНаименование"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "ДействующиеВеществаМНН"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "ФормаВыпуска"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымТабличнойЧасти + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти // Номенклатура
	
	#Область ТорговоеНаименование
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "Номенклатура"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "ДействующиеВеществаМНН"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымТабличнойЧасти + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымТабличнойЧасти + ".ТорговоеНаименование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти // ТорговоеНаименование
	
	#Область ДействующиеВеществаМНН
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "Номенклатура"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти + "ТорговоеНаименование"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымТабличнойЧасти + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымТабличнойЧасти + ".ТорговоеНаименование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымТабличнойЧасти + ".ДействующиеВеществаМНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти // ДействующиеВеществаМНН
	
КонецПроцедуры

// Оформление строки присутствующей в документе
Процедура УстановитьОформлениеСтрокиПрисутствующейВДокументе(Форма, ИмяЭлементаТабличнойЧасти = "Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти].имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлементаТабличнойЧасти].ПутьКДанным + ".ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
КонецПроцедуры

#КонецОбласти // УсловноеОформление

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИменаПодчиненныхПолей(ЭлементФормы, ИсключаемыеДанные)

	ИменаПолей = Новый Массив;
	ЗаполнитьИменаПодчиненныхПолей(ЭлементФормы.ПодчиненныеЭлементы, ИменаПолей, "Параметры.Найти(Элемент.ПутьКДанным) = Неопределено", ИсключаемыеДанные);
	Возврат ИменаПолей;
	
КонецФункции

Функция ПолучитьИменаПолейПоПутиКДанным(ЭлементФормы, ПутьКДанным)
	
	ИменаПолей = Новый Массив;
	ЗаполнитьИменаПодчиненныхПолей(ЭлементФормы.ПодчиненныеЭлементы, ИменаПолей, "Элемент.ПутьКДанным = Параметры", ПутьКДанным);
	Возврат ИменаПолей;
	
КонецФункции

Процедура ЗаполнитьИменаПодчиненныхПолей(ЭлементыФормы, ИменаПолей, ВычисляемоеУсловие = "", Параметры = Неопределено)
	
	Для Каждого Элемент Из ЭлементыФормы Цикл
		
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда
			ЗаполнитьИменаПодчиненныхПолей(Элемент.ПодчиненныеЭлементы, ИменаПолей, ВычисляемоеУсловие, Параметры);
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
			Если ПустаяСтрока(ВычисляемоеУсловие)
			 Или (Вычислить(ВычисляемоеУсловие)) = Истина Тогда
				ИменаПолей.Добавить(Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти