
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Устанавливает текст информационной надписи корзины в формах подбора
//
Процедура УстановитьТекстИнформационнойНадписи(Форма) Экспорт
	
	Если ЭтоФормаПодбораПоЗаказу(Форма) Тогда
		
		СкрытьПоказать = ?(Форма.ПоказыватьПодборТоваров, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
		
		ВставляемыеЗначения = Новый Структура("СкрытьПоказать", СкрытьПоказать);
		ИнформационнаяНадпись = НСтр("ru = 'Список товаров [СкрытьПоказать]'");
		Форма.СписокТоваровИнформация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
		
	ИначеЕсли ЭтоФормаПодбора(Форма) Тогда
		
		Корзина = Форма.Объект.Корзина;
		Валюта = Форма.Валюта;
		
		Сумма = Формат(Корзина.Итог("Сумма"), "ЧЦ=15; ЧДЦ=2; ЧН=");
		Количество = НРег(ЧислоПрописью(Корзина.Количество(), "ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
		
		ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму [Сумма] [Валюта] [СкрытьПоказать]'");
		
		СкрытьПоказать = "";
		
		Если Форма.РежимПодбораБезКоличественныхПараметров Или Форма.РежимПодбораБезСуммовыхПараметров Тогда
			ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров [СкрытьПоказать]'");
		КонецЕсли;
		
		СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
		
		ВставляемыеЗначения = Новый Структура;
		ВставляемыеЗначения.Вставить("Количество", Количество);
		ВставляемыеЗначения.Вставить("Сумма", Сумма);
		ВставляемыеЗначения.Вставить("Валюта", Валюта);
		ВставляемыеЗначения.Вставить("СкрытьПоказать", СкрытьПоказать);
		Форма.КоличествоПодобраноИнформация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество в единицах заказа по строке заказа в форме подбора
//
Процедура ПересчитатьИтогПоСтрокеЗаказа(СтрокаЗаказа) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаЗаказа.НоменклатураЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	КОформлению = 0;
	
	Товары = СтрокаЗаказа.ПолучитьЭлементы();
	Для Каждого Товар Из Товары Цикл
		КОформлению = КОформлению + Товар.КоличествоВЕдиницахЗаказа;
	КонецЦикла;
	
	СтрокаЗаказа.КоличествоВЕдиницахЗаказа = КОформлению;
	
КонецПроцедуры

// Определяет открыта ли форма подбора из документов отделения
//
Функция ПодборВОтделении(Форма) Экспорт
	
	Возврат (Форма.МестоХраненияОстатка = "Отделение");
	
КонецФункции

// Возвращает текущий вариант поиска номенклатуры в форме подбора
//
Функция ТекущийВариантПоиска(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВариантПоискаТоваров") Тогда
		Если Форма.ВариантПоискаТоваров = "ПоУмолчанию" Тогда
			Если Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров Тогда
				Возврат "СтандартныйПоиск";
			Иначе
				Возврат "РасширенныйПоиск";
			КонецЕсли;
		Иначе
			Возврат Форма.ВариантПоискаТоваров;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает элемент формы списка товаров, соответствующий текущему варианту поиска
//
Функция ТекущийСписокТоваров(Форма) Экспорт
	
	Возврат Форма.Элементы["СписокТоваров" + ТекущийВариантПоиска(Форма)];
	
КонецФункции

// Показывает список товаров, соответствующий текущему варианту поиска
//
Процедура УстановитьТекущуюСтраницуПоВариантуПоиска(Форма) Экспорт
	
	СтраницыСпискаТоваров = Форма.Элементы.СтраницыСписокТоваров;
	
	ИмяТекущейСтраницы = "ГруппаСписокТоваров" + ТекущийВариантПоиска(Форма);
	Для Каждого Страница Из СтраницыСпискаТоваров.ПодчиненныеЭлементы Цикл
		Если Страница.Имя = ИмяТекущейСтраницы Тогда
			Страница.Видимость = Истина;
		Иначе
			Страница.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтраницыСпискаТоваров.ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницы];
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СписокТоваров" + ТекущийВариантПоиска(Форма) + "Выбрать",
		"КнопкаПоУмолчанию",
		Истина);
	
КонецПроцедуры

// Определяет, что текущая форма является формой подбора
//
Функция ЭтоФормаПодбора(Форма) Экспорт
	
	Возврат Форма.ПараметрыФормы.Свойство("ФормаПодбора");
	
КонецФункции

// Определяет, что текущая форма является формой подбора в документы поступления
//
Функция ЭтоФормаПодборВДокументыПоступления(Форма) Экспорт
	
	Возврат Форма.ПараметрыФормы.Свойство("ПодборВДокументПоступления");
	
КонецФункции

// Определяет, что текущая форма является формой подбора в документы списания
//
Функция ЭтоФормаПодборВДокументыСписания(Форма) Экспорт
	
	Возврат Форма.ПараметрыФормы.Свойство("ПодборВДокументСписания");
	
КонецФункции

// Определяет, что текущая форма является формой подбора по заказу
//
Функция ЭтоФормаПодбораПоЗаказу(Форма) Экспорт
	
	Возврат Форма.ПараметрыФормы.Свойство("ПодборПоЗаказу");
	
КонецФункции

// Определяет, что текущая форма является формой подбора товаров
//
Функция ЭтоФормаПодбораТоваров(Форма) Экспорт
	
	Возврат Форма.ПараметрыФормы.Свойство("ПодборТоваров");
	
КонецФункции

// Определяет, что текущая форма является формой подбора описаний товаров
//
Функция ЭтоФормаПодбораОписанийТоваров(Форма) Экспорт
	
	Возврат Форма.ПараметрыФормы.Свойство("ПодборФормальныхОписаний");
	
КонецФункции

// Возвращает пустое описание товара для формы выбора
//
Функция ПараметрыТовара(Форма) Экспорт
	
	ПараметрыТовара = Новый Структура();
	Если ЭтоФормаПодбораТоваров(Форма) Тогда
		Если ЭтоФормаПодборВДокументыПоступления(Форма) Тогда
			ПараметрыТовара.Вставить("НоменклатураПоставщика", ПредопределенноеЗначение("Справочник.НоменклатураКонтрагентов.ПустаяСсылка"));
		КонецЕсли;
		ПараметрыТовара.Вставить("Номенклатура",            ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ПараметрыТовара.Вставить("СерияНоменклатуры",       Неопределено);
		ПараметрыТовара.Вставить("Партия",                  Неопределено);
		ПараметрыТовара.Вставить("ВидЦены",                 ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
		ПараметрыТовара.Вставить("ИсточникФинансирования",  Неопределено);
		ПараметрыТовара.Вставить("МестоХранения",           Неопределено);
		ПараметрыТовара.Вставить("ИсточникФинансированияОстаток",  Неопределено);
		ПараметрыТовара.Вставить("МестоХраненияОстаток",           Неопределено);
	КонецЕсли;
	
	Если ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ПараметрыТовара.Вставить("Номенклатура",            ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ПараметрыТовара.Вставить("ТорговоеНаименование",    ПредопределенноеЗначение("Справочник.ТорговыеНаименования.ПустаяСсылка"));
		ПараметрыТовара.Вставить("ДействующиеВеществаМНН",  ПредопределенноеЗначение("Справочник.ДействующиеВеществаМНН.ПустаяСсылка"));
		ПараметрыТовара.Вставить("ФормаВыпуска",            ПредопределенноеЗначение("Справочник.ФормыВыпуска.ПустаяСсылка"));
	КонецЕсли;
	
	ПараметрыТовара.Вставить("Количество",        0);
	ПараметрыТовара.Вставить("ЕдиницаИзмерения",  ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Цена",              0);
	
	Если ЭтоФормаПодбораПоЗаказу(Форма) Тогда
		ПараметрыТовара.Вставить("Заказ", Неопределено);
		ПараметрыТовара.Вставить("КодСтроки", 0);
		ПараметрыТовара.Вставить("НоменклатураЗаказа", Неопределено);
		ПараметрыТовара.Вставить("ЕдиницаИзмеренияЗаказа", Неопределено);
		ПараметрыТовара.Вставить("КоэффициентЕдиницыЗаказа", 0);
		ПараметрыТовара.Вставить("КоличествоВЕдиницахЗаказа", 0);
	КонецЕсли;
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Возвращает значение отбора номенклатуры по типу номенклатуры из параметров выбора
//
// Параметры:
//  ПараметрыВыбора - Фиксированный массив - с элементами ПараметрВыбора
//
// Возвращаемое значение
//  ФиксированныйМассив, Массив, Неопределено - если параметр выбора отсутствует, то возвращается Неопределено.
//
Функция ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(ПараметрыВыбора) Экспорт
	
	Значение = ЗначениеПараметраВыбора(ПараметрыВыбора, "Отбор.ТипНоменклатуры");
	Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("ФиксированныйМассив") Тогда
		Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Возвращает значение параметра выбора
//
// Параметры:
//  ПараметрыВыбора - ФиксированныйМассив - параметры выбора элемента формы
//  ИмяПараметра    - Строка              - имя искомого параметра
//
// Возвращаемое значение
//  Произвольный - если не найден параметр выбора с искомым именем, тогда возвращается Неопределено
//
Функция ЗначениеПараметраВыбора(ПараметрыВыбора, ИмяПараметра) Экспорт
	
	Для Каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = ИмяПараметра Тогда
			Возврат ПараметрВыбора.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает отбор компоновки данных с отборами соответствующими параметрам выбора
//
// Параметры:
//  ЭлементНоменклатура - ЭлементФормы - элемент формы, у которого будут анализироваться параметры выбора
//
// Возвращаемое значение:
//  ОтборКомпоновкиДанных
//
Функция ПолучитьОтборНоменклатурыПоПараметрамВыбора(ЭлементНоменклатура) Экспорт
	
	Отбор = Новый ОтборКомпоновкиДанных;
	
	ТипыНоменклатуры = ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(ЭлементНоменклатура.ПараметрыВыбора);
	Если ТипыНоменклатуры <> Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.ТипНоменклатуры");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = ТипыНоменклатуры;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
