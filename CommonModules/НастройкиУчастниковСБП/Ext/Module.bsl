///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами".
// ОбщийМодуль.НастройкиУчастниковСБП.
//
// Серверные процедуры и функции настроек выполнения обмена с Системой быстрых платежей.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область БанкОткрытие

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиБанкОткрытие(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииБанкОткрытие(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Логин",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Логин'"),
			Истина));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Пароль",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Пароль'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
		+ " настройки или отправьте <a href=""%1"">заявку на подключение</a> в Банк ""Открытие"".'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросБанкОткрытие(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема,
		ТребуетсяОбновление) Экспорт
	
	// Данные токена должны быть удалены из ИБ
	// в принудительном порядке, для получения
	// обновленной информации.
	Если ТребуетсяОбновление Тогда
		
		ДанныеАутентификации.expiresDate = Неопределено;
		ДанныеАутентификации.tokenType   = Неопределено;
		ДанныеАутентификации.expiresDate = Неопределено;
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ТорговаяТочка,
			ДанныеАутентификации);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииБанкОткрытие(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Пароль") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Пароль", Данные.password);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииБанкОткрытие(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиБанкОткрытие(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Логин", Данные.login);
		Результат.Вставить("Пароль", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Логин", "");
		Результат.Вставить("Пароль", "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииБанкОткрытие(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("login",       ПараметрыАутентификации.Получить("Логин"));
	ДанныеАутентификации.Вставить("password",    ПараметрыАутентификации.Получить("Пароль"));
	ДанныеАутентификации.Вставить("merchantId",  ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	ДанныеАутентификации.Вставить("accessToken", Неопределено);
	ДанныеАутентификации.Вставить("tokenType",   Неопределено);
	ДанныеАутентификации.Вставить("expiresDate", Неопределено);
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторБанкОткрытие() Экспорт
	
	Возврат "Otkrytie";
	
КонецФункции

#КонецОбласти

#Область СКББанк

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиСКБ(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииСКББанк(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Логин",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Логин'"),
			Истина));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Пароль",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Пароль'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
		+ " настройки или отправьте <a href=""%1"">заявку на подключение</a> в ПАО Банк Синара.'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросСКББанк(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииСКББанк(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Пароль") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Пароль", Данные.password);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииСКББанк(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиСКББанк(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Логин", Данные.login);
		Результат.Вставить("Пароль", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Логин",                 "");
		Результат.Вставить("Пароль",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииСКББанк(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
	ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторСКББанк() Экспорт
	
	Возврат "SKB";
	
КонецФункции

#КонецОбласти

#Область Webmoney

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиWebmoney(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииWebmoney(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Токен",
			ОбщегоНазначения.ОписаниеТипаСтрока(150),
			НСтр("ru = 'Токен'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
		+ " настройки или отправьте <a href=""%1"">заявку на подключение</a> в WebMoney (Банк ККБ).'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросWebmoney(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииWebmoney(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Токен") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Токен", Данные.token);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииWebmoney(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиWebmoney(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Токен", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Токен",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииWebmoney(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторWebmoney() Экспорт
	
	Возврат "Webmoney";
	
КонецФункции

#КонецОбласти

#Область PayMaster

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиPayMaster(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииPayMaster(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Токен",
			ОбщегоНазначения.ОписаниеТипаСтрока(150),
			НСтр("ru = 'Токен'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
		+ " настройки или отправьте <a href=""%1"">заявку на подключение</a> в PayMaster (ООО ""Пэймастер"").'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросPayMaster(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииPayMaster(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Токен") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Токен", Данные.token);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииWebmoney(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиPayMaster(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Токен", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Токен",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииPayMaster(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторPayMaster() Экспорт
	
	Возврат "PayMaster";
	
КонецФункции

#КонецОбласти

#Область Промсвязьбанк

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиПромсвязьбанк(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииПромсвязьбанк(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Ключ",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Ключ'"),
			Истина,
			Истина));
	
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
		+ " настройки или отправьте <a href=""%1"">заявку на подключение</a> в Промсвязьбанка.'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросПромсвязьбанк(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема,
		ДанныеДляПодписи) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		ДанныеДляПодписи,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииПромсвязьбанк(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ. В противном
	// случае требуется дополнительное преобразование ключа
	// перед сохранением.
	Если ПараметрыАутентификации.Получить("Ключ") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Ключ", Данные.key);
	Иначе
		ПараметрыАутентификации.Вставить("Ключ",
				ПолучитьДвоичныеДанныеИзHexСтроки(
					ПараметрыАутентификации.Получить("Ключ")));
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииПромсвязьбанкСохранение(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиПромсвязьбанк(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Ключ",                  ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Ключ",                  "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет преобразование параметров аутентификации в формат
// хранения и выполнения запросов к сервису.
//
// Параметры:
//  ПараметрыАутентификации - Соответствие - настройки аутентификации платежной системы.
//
// Возвращаемое значение:
//  Структура - преобразованные настройки аутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииПромсвязьбанкСохранение(ПараметрыАутентификации)
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("key", ПараметрыАутентификации.Получить("Ключ"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииПромсвязьбанк(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("key", ПолучитьДвоичныеДанныеИзHexСтроки(ПараметрыАутентификации.Получить("Ключ")));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	ДанныеАутентификации.Вставить("ХешФункция", ХешФункция.SHA256);
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторПромсвязьбанк() Экспорт
	
	Возврат "PSB";
	
КонецФункции

#КонецОбласти

#Область СБП_1С

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочки1ССБП(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификации1ССБП(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Токен",
			ОбщегоНазначения.ОписаниеТипаСтрока(150),
			НСтр("ru = 'Токен'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните настройки."
		+ " Получить данные для настройки можно в <a href=""%1"">Агенте 1С:СБП</a>.'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапрос1ССБП(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификации1ССБП(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Токен") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Токен", Данные.token);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииWebmoney(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройки1ССБП(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Токен", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Токен",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификации1ССБП(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция Идентификатор1ССБП() Экспорт
	
	Возврат "1C-SBP";
	
КонецФункции

#КонецОбласти

#Область ЮгИнвестбанк

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиЮгИнвестбанк(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииЮгИнвестбанк(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Токен",
			ОбщегоНазначения.ОписаниеТипаСтрока(300),
			НСтр("ru = 'Токен'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
		+ " настройки или отправьте <a href=""%1"">заявку на подключение</a> в Юг-Инвестбанк.'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросЮгИнвестбанк(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииЮгИнвестбанк(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Токен") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Токен", Данные.token);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииWebmoney(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиЮгИнвестбанк(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Токен", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Токен",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииЮгИнвестбанк(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторЮгИнвестбанк() Экспорт
	
	Возврат "YUGInvestbank";
	
КонецФункции

#КонецОбласти

#Область ЮМани

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиЮМани(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииЮМани(Реквизиты, Подсказка) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Логин",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Логин'"),
			Истина));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Пароль",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Пароль'"),
			Истина,
			Истина));
	Подсказка = НСтр("ru = 'Для подключения к Системе быстрых платежей заполните настройки."
		+ " Получить данные для настройки можно в личном кабинете <a href=""%1"">НКО ЮМани</a>.'");
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросЮМани(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииЮМани(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Пароль") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Пароль", Данные.password);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииСКББанк(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиЮМани(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Логин", Данные.login);
		Результат.Вставить("Пароль", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Логин",                 "");
		Результат.Вставить("Пароль",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииЮМани(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
	ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банка Открытие.
//
Функция ИдентификаторЮМани() Экспорт
	
	Возврат "YUMani";
	
КонецФункции

#КонецОбласти

#Область TTP

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиTTP(ПараметрыАутентификации) Экспорт
	
	Возврат ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации);
	
КонецФункции

// См. СервисИнтеграцииССБП.НастройкиАутентификации.
//
Процедура НастройкиАутентификацииTTP(Реквизиты, Подсказка, ПлатежнаяСистема) Экспорт
	
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"ИдентификаторМерчанта",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),
			НСтр("ru = 'Merchant Id'"),
			Истина,
			Ложь,
			ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
	Реквизиты.Добавить(
		ИнтеграцияСПлатежнымиСистемамиСлужебный.НовыйОписаниеРеквизита(
			"Токен",
			ОбщегоНазначения.ОписаниеТипаСтрока(400),
			НСтр("ru = 'Токен'"),
			Истина,
			Истина));
	
	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для подключения к Системе быстрых платежей заполните"
			+ " настройки или отправьте %1заявку на подключение</a> в %2.'"),
			"<a href=""%1"">",
			ИнтеграцияСПлатежнымиСистемамиСлужебный.СинонимЗначенияПеречисления(
				ПлатежнаяСистема));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Функция ДанныеАутентификацииЗапросTTP(
		ДанныеАутентификации,
		ТорговаяТочка,
		ПлатежнаяСистема) Экспорт
	
	Возврат СервисИнтеграцииССБП.ЗаголовокАутентификацииПоДаннымАутентификации(
		ПлатежнаяСистема,
		ДанныеАутентификации,
		Неопределено,
		ТорговаяТочка);
	
КонецФункции

// См. СервисИнтеграцииССБП.СохранитьНастройкиАутентификации.
//
Процедура СохранитьНастройкиАутентификацииTTP(Интеграция, ПараметрыАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если данные не менялись пользователем, перед заполнением
	// необходимо восстановить значения из ИБ.
	Если ПараметрыАутентификации.Получить("Токен") = ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию() Тогда
		Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			Интеграция);
		ПараметрыАутентификации.Вставить("Токен", Данные.token);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Интеграция,
		ПреобразоватьНастройкиАутентификацииWebmoney(
			ПараметрыАутентификации));
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ДанныеАутентификацииВПлатежнойСистеме.
//
Процедура ДанныеАутентификацииНастройкиTTP(Данные, Результат) Экспорт
	
	// При переходе в Фреш или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если ЗначениеЗаполнено(Данные) Тогда
		Результат.Вставить("Токен", ИнтеграцияСПлатежнымиСистемамиСлужебный.СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Результат.Вставить("ИдентификаторМерчанта", Данные.merchantId);
	Иначе
		Результат.Вставить("Токен",                "");
		Результат.Вставить("ИдентификаторМерчанта", "");
	КонецЕсли;
	
КонецПроцедуры

// См. СервисИнтеграцииССБП.ПреобразоватьНастройкиАутентификации.
//
Функция ПреобразоватьНастройкиАутентификацииTTP(ПараметрыАутентификации) Экспорт
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
	ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	
	Возврат ДанныеАутентификации;
	
КонецФункции 

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Совкомбанк.
//
Функция ИдентификаторСовкомбанк() Экспорт
	
	Возврат "Sovkombank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор БАНК УРАЛСИБ.
//
Функция ИдентификаторБанкУРАЛСИБ() Экспорт
	
	Возврат "BANKURALSIB";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Экспобанк.
//
Функция ИдентификаторЭкспобанк() Экспорт
	
	Возврат "Ekspobank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Абсолют Банк.
//
Функция ИдентификаторАбсолютБанк() Экспорт
	
	Возврат "AbsolyutBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Левобережный.
//
Функция ИдентификаторБанкЛевобережный() Экспорт
	
	Возврат "Levoberezhnyj";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Бланк банк.
//
Функция ИдентификаторБланкБанк() Экспорт
	
	Возврат "Blanc";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор КБ Хлынов.
//
Функция ИдентификаторКБХлынов() Экспорт
	
	Возврат "KBHlynov";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор ВЛАДБИЗНЕСБАНК.
//
Функция ИдентификаторВЛАДБИЗНЕСБАНК() Экспорт
	
	Возврат "VLADBIZNESBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор НОКССБАНК.
//
Функция ИдентификаторНОКССБАНК() Экспорт
	
	Возврат "NOKSSBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Земский банк.
//
Функция ИдентификаторЗемскийБанк() Экспорт
	
	Возврат "ZemskijBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор НС Банк.
//
Функция ИдентификаторНСБанк() Экспорт
	
	Возврат "NSBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Форштадт.
//
Функция ИдентификаторФорштадт() Экспорт
	
	Возврат "Forshtadt";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор СКБ Примсоцбанк.
//
Функция ИдентификаторСКБПримсоцбанк() Экспорт
	
	Возврат "Primsoczbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор КБ  РостФинанс.
//
Функция ИдентификаторКБРостФинанс() Экспорт
	
	Возврат "KBRostFinans";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Эс-Би-Ай Банк.
//
Функция ИдентификаторЭсБиАйБанк() Экспорт
	
	Возврат "ABCBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор АКИБАНК.
//
Функция ИдентификаторАКИБАНК() Экспорт
	
	Возврат "AKIBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Алеф-Банк.
//
Функция ИдентификаторАлефБанк() Экспорт
	
	Возврат "AlefBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор НИКО-БАНК.
//
Функция ИдентификаторНИКОБАНК() Экспорт
	
	Возврат "NIKOBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор КБ АГРОПРОМКРЕДИТ.
//
Функция ИдентификаторКБАГРОПРОМКРЕДИТ() Экспорт
	
	Возврат "AGROPROMKREDIT";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор БАНК ОРЕНБУРГ.
//
Функция ИдентификаторБАНКОРЕНБУРГ() Экспорт
	
	Возврат "BANKORENBURG";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Саратов.
//
Функция ИдентификаторБанкСаратов() Экспорт
	
	Возврат "BankSaratov";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Aresbank.
//
Функция ИдентификаторКБАРЕСБАНК() Экспорт
	
	Возврат "Aresbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Хакасский муниципальный банк.
//
Функция ИдентификаторХакасскийМуниципальныйБанк() Экспорт
	
	Возврат "HakasskijMunicipalny";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Автоградбанк.
//
Функция ИдентификаторАвтоградбанк() Экспорт
	
	Возврат "Avtogradbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Акцепт.
//
Функция ИдентификаторБанкАкцепт() Экспорт
	
	Возврат "BankAkcept";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Тойота Банк.
//
Функция ИдентификаторТойотаБанк() Экспорт
	
	Возврат "TojotaBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор КБ ЭНЕРГОТРАНСБАНК.
//
Функция ИдентификаторКБЭНЕРГОТРАНСБАНК() Экспорт
	
	Возврат "Energotransbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Венец.
//
Функция ИдентификаторБанкВенец() Экспорт
	
	Возврат "BankVenecz";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк ИТУРУП.
//
Функция ИдентификаторБанкИТУРУП() Экспорт
	
	Возврат "ITURUP";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор СИБСОЦБАНК.
//
Функция ИдентификаторСИБСОЦБАНК() Экспорт
	
	Возврат "Sibsocbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Мир Привилегий.
//
Функция ИдентификаторМирПривилегий() Экспорт
	
	Возврат "BankMirPrivilegij";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Интеза.
//
Функция ИдентификаторБанкИнтеза() Экспорт
	
	Возврат "BankInteza";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор МОРСКОЙ БАНК.
//
Функция ИдентификаторМОРСКОЙБАНК() Экспорт
	
	Возврат "MORSKOJBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Развитие-Столица.
//
Функция ИдентификаторБанкРазвитиеСтолица() Экспорт
	
	Возврат "BankRazvitieStolica";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Таврический Банк.
//
Функция ИдентификаторТаврическийБанк() Экспорт
	
	Возврат "TavricheskijBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Первый Инвестиционный Банк.
//
Функция ИдентификаторПервыйИнвестиционныйБанк() Экспорт
	
	Возврат "PervyjInvesticionnyjBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор МОСКОМБАНК.
//
Функция ИдентификаторМОСКОМБАНК() Экспорт
	
	Возврат "MOSKOMBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Газтрансбанк.
//
Функция ИдентификаторГазтрансбанк() Экспорт
	
	Возврат "GTbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Нацинвестпромбанк.
//
Функция ИдентификаторНацинвестпромбанк() Экспорт
	
	Возврат "Nacinvestprombank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк РЕСО Кредит.
//
Функция ИдентификаторБанкРЕСОКредит() Экспорт
	
	Возврат "RESOKredit";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор РУСНАРБАНК.
//
Функция ИдентификаторРУСНАРБАНК() Экспорт
	
	Возврат "RUSNARBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Кузнецкбизнесбанк.
//
Функция ИдентификаторКузнецкбизнесбанк() Экспорт
	
	Возврат "Kuzneckbiznesbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Кремлевский.
//
Функция ИдентификаторБанкКремлевский() Экспорт
	
	Возврат "BankKremlevski";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Международный финансовый клуб.
//
Функция ИдентификаторМеждународныйФинансовыйКлуб() Экспорт
	
	Возврат "MezhdunarodnyFinansovyClub";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Томскпромстройбанк.
//
Функция ИдентификаторТомскпромстройбанк() Экспорт
	
	Возврат "Tomskpromstrojbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк АЛЕКСАНДРОВСКИЙ.
//
Функция ИдентификаторБанкАЛЕКСАНДРОВСКИЙ() Экспорт
	
	Возврат "BankAleksandrovskij";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Джей энд Ти Банк (АО).
//
Функция ИдентификаторДжейЭндТиБанк() Экспорт
	
	Возврат "JAndTBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Новобанк.
//
Функция ИдентификаторНовобанк() Экспорт
	
	Возврат "Novobank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Приморье.
//
Функция ИдентификаторБанкПриморье() Экспорт
	
	Возврат "AKBPrimore";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Солид Банк.
//
Функция ИдентификаторСолидБанк() Экспорт
	
	Возврат "SolidBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Реалист Банк.
//
Функция ИдентификаторРеалистБанк() Экспорт
	
	Возврат "RealistBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор АКБ Держава.
//
Функция ИдентификаторАКБДержава() Экспорт
	
	Возврат "AKBDerzhava";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк Национальный стандарт.
//
Функция ИдентификаторБанкНациональныйСтандарт() Экспорт
	
	Возврат "NacionalnyjStandart";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор АКБ Ланта Банк.
//
Функция ИдентификаторАКБЛантаБанк() Экспорт
	
	Возврат "AKBLantaBank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор РН БАНК.
//
Функция ИдентификаторРНБАНК() Экспорт
	
	Возврат "RNBANK";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор АИКБ Енисейский объединенный банк.
//
Функция ИдентификаторАИКБЕнисейскийОбъединенныйБанк() Экспорт
	
	Возврат "EnisejskijObdinennyjbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк БЖФ.
//
Функция ИдентификаторБанкБЖФ() Экспорт
	
	Возврат "BankBZHF";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор КБ Долинск.
//
Функция ИдентификаторКБДолинск() Экспорт
	
	Возврат "KBDolinsk";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Алтайкапиталбанк.
//
Функция ИдентификаторАлтайкапиталбанк() Экспорт
	
	Возврат "Altajkapitalbank";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор Банк СИАБ.
//
Функция ИдентификаторБанкСИАБ() Экспорт
	
	Возврат "BankSIAB";
	
КонецФункции

// Определяет идентификатор участника СБП.
//
// Возвращаемое значение:
//  Строка - идентификатор МТС-Банк.
//
Функция ИдентификаторМТСБанк() Экспорт
	
	Возврат "MTSBank";
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// См. СервисИнтеграцииССБП.ИдентификаторТорговойТочки.
//
Функция ИдентификаторТорговойТочкиПоУмолчанию(ПараметрыАутентификации)
	
	Возврат ПараметрыАутентификации.Получить("ИдентификаторМерчанта");
	
КонецФункции

// Формирует представление подсказки для поля настроек Merchant Id.
//
// Возвращаемое значение:
//  Строка - подсказка поля формы.
//
Функция ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()
	
	Возврат НСтр("ru = 'Идентификатор торговой точки в Системе быстрых платежей.'");
	
КонецФункции

#КонецОбласти

#КонецОбласти
