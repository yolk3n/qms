#Область РаботаСЦенамиИКоэффициентами
//Цена возвращается в основной единице учета
Функция ПоследняяЦенаЗакупки(Номенклатура,Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныЗакупкиСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции	


Функция ПоследняяЦенаИПоставщикЗакупки(Номенклатура,Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Период КАК Период,
	|	ЦеныЗакупкиСрезПоследних.Регистратор КАК Регистратор,
	|	ЦеныЗакупкиСрезПоследних.НомерСтроки КАК НомерСтроки,
	|	ЦеныЗакупкиСрезПоследних.Активность КАК Активность,
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена,
	|	ЦеныЗакупкиСрезПоследних.Поставщик КАК Поставщик
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныЗакупкиСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда               
		Возврат Новый Структура("Поставщик,Цена",Выборка.Поставщик,Выборка.Цена);
	Иначе
		Возврат Новый Структура("Поставщик,Цена",Неопределено,0);
	КонецЕсли;	
КонецФункции	


Функция ПолучитьКоэффициентЕдиницыИзмерения(Номенклатура,ЕдиницаИзмерения,НоваяЕдиницаИзменения) Экспорт
	Если ЕдиницаИзмерения=НоваяЕдиницаИзменения ИЛИ ЕдиницаИзмерения.Коэффициент=НоваяЕдиницаИзменения.Коэффициент Тогда
		Возврат 1;
	КонецЕсли;
	
	Коэффициент=1;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);    
	Масс=Новый Массив;
	Масс.Добавить(ЕдиницаИзмерения);
	Масс.Добавить(НоваяЕдиницаИзменения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",Масс);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЕдиницыИзмеренияНоменклатуры.Коэффициент КАК Коэффициент,
	|	ЕдиницыИзмеренияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницыИзмеренияНоменклатуры
	|ГДЕ
	|	ЕдиницыИзмеренияНоменклатуры.Номенклатура = &Номенклатура
	|	И ЕдиницыИзмеренияНоменклатуры.ЕдиницаИзмерения В(&ЕдиницаИзмерения)";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если ЕдиницаИзмерения=Номенклатура.ЕдиницаИзмерения Тогда
		СтрН=Выборка.Найти(НоваяЕдиницаИзменения,"ЕдиницаИзмерения");
		Если НЕ СтрН=Неопределено Тогда
			Коэфиициент=СтрН.Коэффициент;
		КонецЕсли;	
	ИначеЕсли НоваяЕдиницаИзменения=Номенклатура.ЕдиницаИзмерения Тогда	
		СтрН=Выборка.Найти(ЕдиницаИзмерения,"ЕдиницаИзмерения");
		Если НЕ СтрН=Неопределено Тогда
			Коэфиициент=1/?(СтрН.Коэффициент=0,1,СтрН.Коэффициент);
		КонецЕсли;	
	Иначе
		СтрН=Выборка.Найти(НоваяЕдиницаИзменения,"ЕдиницаИзмерения");
		СтрН1=Выборка.Найти(ЕдиницаИзмерения ,"ЕдиницаИзмерения");
		Если СтрН=Неопределено Или СтрН1=Неопределено Тогда
			// Если ошибка то считаем, что к=1;
		Иначе	
			Коэфиициент=?(СтрН.Коэффициент=0,1,СтрН.Коэффициент)/?(СтрН1.Коэффициент=0,1,СтрН1.Коэффициент);
		КонецЕсли;	
	КонецЕсли;
	Возврат Коэффициент;
	
	
	Если Выборка.Следующий() Тогда
		Коэффициент=Выборка.Коэффициент;
		Запрос.УстановитьПараметр("ЕдиницаИзмерения",ЕдиницаИзмерения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Коэффициент=?(Выборка.Коэффициент=0,Коэффициент,Коэффициент/Выборка.Коэффициент);
		КонецЕсли;
		Возврат Коэффициент;
	Иначе
		Возврат 1;
	КонецЕсли;	
КонецФункции	

#КонецОбласти



Функция ПолучитьСкладАптека() Экспорт
	Возврат Справочники.Склады.НайтиПоНаименованию("Склад Аптеки Общий",Истина);
КонецФункции	


Функция ПолучитьПодразделениеАптека() Экспорт
	
	Возврат Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Аптека",Истина);
	
КонецФункции


Функция ПолучитьИсточникФинансированияПоУмолчанию() Экспорт
	Возврат Справочники.ИсточникиФинансирования.НайтиПоНаименованию("Платные");
КонецФункции	



// Процедура - Отправить сообщение на почту
//
// Параметры:
//  ТекстПисьма		 - Строка	 - Текст HTML
//  ТемаПисьма		 - Строка	 - таже, что и текст заголовка сообщения 
//  ИмяОтправителя	 - Строка	 - Наименование пользователя отправителя
//  Получатели		 - Массив	 - Массив почтовых адресов
// 
Функция ОтправитьОповещениеПоПочте(Получатели,ТекстПисьма,ПрисоединенныеФайлы=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Получатели) Тогда
	    ТекстСообщения="Не удалось отправить оповещение из-за отсутствия получателя";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТекстСообщения;
	ИначеЕсли ТипЗнч(Получатели)=Тип("СправочникСсылка.ФизическиеЛица") ИЛИ 
		      ТипЗнч(Получатели)=Тип("СправочникСсылка.Пользователи") Тогда
		МассивПолучателей=Новый Массив;
		Если Ложь Тогда Получатели=Справочники.ФизическиеЛица.СоздатьЭлемент(); КонецЕсли;
		Для Каждого Стр из Получатели.КонтактнаяИнформация Цикл
			Если Стр.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если НЕ СокрЛП(Стр.Представление)="" Тогда
					МассивПолучателей.Добавить(Стр.Представление);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		Если МассивПолучателей.Количество()=0 Тогда
		    ТекстСообщения="Не удалось отправить оповещение из-за отсутствия электронного адреса получателя";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат ТекстСообщения;
		конецЕсли;	
	ИначеЕсли ТипЗнч(Получатели)=Тип("Строка") Тогда
		МассивПолучателей=СтрРазделить(Получатели,";",Ложь);
	ИначеЕсли ТипЗнч(Получатели)=Тип("Массив") Тогда	
		МассивПолучателей=Новый Массив;
		Для Каждого СтрМ из Получатели Цикл
			Если ТипЗнч(СтрМ)=Тип("СправочникСсылка.Пользователи") Тогда
				Для Каждого Стр из СтрМ.КонтактнаяИнформация Цикл
					Если Стр.Тип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						Если НЕ СокрЛП(Стр.Представление)="" Тогда
							Если МассивПолучателей.Найти(Стр.Представление)=Неопределено Тогда
								МассивПолучателей.Добавить(Стр.Представление);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			Иначе
				МассивПолучателей2=СтрРазделить(Получатели,";",Ложь);
				Для Каждого СтрМ2 из МассивПолучателей2 Цикл
					Если МассивПолучателей.Найти(СтрМ2)=Неопределено Тогда
						МассивПолучателей.Добавить(СтрМ2);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
	Иначе	
	    ТекстСообщения="Не удалось отправить оповещение. Неизвестный тип получателя";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТекстСообщения;
	КонецЕсли;	
	
	Письма=Новый Массив;
	
	УчетнаяЗапись=РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Если Ложь Тогда УчетнаяЗапись=Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент(); конецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Текст = Письмо.Тексты.Добавить();
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	Текст.Текст=ТекстПисьма;
	
	Письмо.Тема="Информирование о неоходмости действий в 1С:Аптека";
	
	Письмо.ИмяОтправителя="Робот 1С:Аптека";
	
	Письмо.Отправитель.Адрес=УчетнаяЗапись.АдресЭлектроннойПочты;
	
	Для каждого СтрМ из МассивПолучателей Цикл
		
		Письмо.Получатели.Добавить(СтрМ);
	КонецЦикла;	
	
	Письма.Добавить(Письмо);
	ТекстОшибки="";
	РаботаСПочтовымиСообщениями.ОтправитьПисьма(УчетнаяЗапись,Письма,ТекстОшибки);
	
	Возврат ТекстОшибки;
КонецФункции	

Процедура сок_ПроведениеДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если СокрЛП(ПараметрыСеанса.ТекущийПользователь)="Соколов" Тогда
		Отказ = ЛОжь;
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьНовыйКодСтрокиИдентификатораТребования(ИдентификаторСтроки) Экспорт
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	Рег.Отбор.ИдентификаторСтроки.Значение=ИдентификаторСтроки;
	Рег.Отбор.ИдентификаторСтроки.Использование=Истина;
	Рег.Прочитать();   
	КодСтроки=-1;
	Для Каждого Стр из Рег Цикл
		КодСтроки=Макс(КодСтроки,Стр.КодСтроки);
	КонецЦикла;
	Возврат КодСтроки+1;
КонецФункции	

#Область ЗаявкаНаРасходованиеДенежныхСредств

Процедура УстановитьНазначениеПлатежа(Элемент) Экспорт  
	
	Если Ложь Тогда Элемент = Документы.сок_ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент(); КонецЕсли;
	
	НазначениеПлатежа="Оплата по договору № "+Элемент.ДоговорКонтрагента.НомерДоговора+" от "+Формат(Элемент.ДоговорКонтрагента.ДатаДоговора,"ДЛФ=Д")+". По счету № "+
					  Элемент.ЗаказПоставщику.НомерПоДаннымПоставщика+" от "+Формат(Элемент.ЗаказПоставщику.ДатаПоДаннымПоставщика,"ДЛФ=Д")+"
					  |Сумма: "+Формат(Элемент.СуммаДокумента,"ЧДЦ=2; ЧРД=-")+"
					  |";;
					  
    Если Элемент.Контрагент.ПрименяетУСН Тогда
		  НазначениеПлатежа=НазначениеПлатежа+"В том числе Без налога (НДС)";
	Иначе					  
		СуммаНДС=Элемент.РасшифровкаПлатежа.Итог("СуммаНДС");
		Если СуммаНДС =0 Тогда
			НазначениеПлатежа=НазначениеПлатежа+" В том числе Без налога (НДС)"
		Иначе   
			ТНДС=Элемент.РасшифровкаПлатежа.Выгрузить();
			ТНДС.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			Для Каждого Стр из ТНДС Цикл
				Если Стр.СуммаНДС>0 Тогда
					НазначениеПлатежа=НазначениеПлатежа+"В т.ч.НДС ("+Стр.СтавкаНДС+") - "+Формат(Стр.СуммаНДС,"ЧДЦ=2; ЧРД=-")+". ";
				Иначе
					НазначениеПлатежа=НазначениеПлатежа+"В т.ч.Без налога (НДС). ";// - "+Формат(Стр.СуммаНДС,"ЧДЦ=2; ЧРД=-")+". ";
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	Элемент.НазначениеПлатежа=НазначениеПлатежа;
	
КонецПроцедуры


Процедура СоздатьЗаявкуНаРасходованиеДенежныхСредств(ДокументОснование,ЗаказПоставщику,ДатаОплатыПлан,Сумма) Экспорт
	Если Ложь Тогда ДокументОснование = Документы.ЗаказПоставщику.СоздатьДокумент() КонецЕсли;
	Если Ложь Тогда ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент() КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.УстановитьПараметр("ЗаказПоставщику",ЗаказПоставщику);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.сок_ЗаявкаНаРасходованиеДенежныхСредств КАК сок_ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.ЗаказПоставщику = &ЗаказПоставщику
	|	И сок_ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.Проведен УБЫВ,
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
	Иначе	
		Элемент =Документы.сок_ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	КонецЕсли;	
	
	Элемент.Заполнить(ДокументОснование);
	Элемент.Дата=ТекущаяДата();
	Элемент.Автор=ПараметрыСеанса.ТекущийПользователь;
	Элемент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	

Функция ОтменитьЗаявкуНаРасходованиеДенежныхСредств(ДокументОснование,ЗаказПоставщику) Экспорт
	Если Ложь Тогда ДокументОснование = Документы.ЗаказПоставщику.СоздатьДокумент() КонецЕсли;
	Если Ложь Тогда ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент() КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.УстановитьПараметр("ЗаказПоставщику",ЗаказПоставщику);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.СуммаОплатыФакт КАК СуммаОплатыФакт,
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.Отправлена КАК Отправлена
	|ИЗ
	|	Документ.сок_ЗаявкаНаРасходованиеДенежныхСредств КАК сок_ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.ЗаказПоставщику = &ЗаказПоставщику
	|	И сок_ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.Проведен УБЫВ,
	|	сок_ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Отправлена Тогда
			ТекстСообщения="Заявка на расходование денежных стредств уже отправлена в согласование. Отмена заказа поставщику не возможна.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли Выборка.СуммаОплатыФакт>0 Тогда
			ТекстСообщения="По заявке на расходование денежных стредств уже есть оплата. Отмена заказа поставщику не возможна.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;	 
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		Если Ложь Тогда Элемент = Документы.сок_ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент() КонецЕсли;
		Если Элемент.Проведен Тогда
			Попытка
				Элемент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ТекстСообщения="Не удалось записать заявку на расходование денежных стредств . Отмена заказа поставщику не возможна.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			Конецпопытки;
			
			//Рег=РегистрыСведений.сок_БуферЗаявок.СоздатьНаборЗаписей();
			//Рег.Отбор.Заявка.Установить(Выборка.Ссылка);
			//Попытка
			//	Рег.Записать(Истина);
			//Исключение
			//	ТекстСообщения="Не удалось записать регистр сведений ""Буфер оплат"" для заявки на расходование денежных стредств. Отмена заказа поставщику не возможна.";
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//	Возврат Ложь;
			//Конецпопытки;	
		КонецЕсли;	
	КонецЦикла;	
			

	Возврат Истина;
КонецФункции	

#КонецОбласти           

#Область ИзменениеСтатусов


Процедура ЗаявкаЗакупкуСодержитОшибки(СсылкаНаОбъект,Отказ,ПроверкаНаОтмену=Ложь) Экспорт
	Если Ложь Тогда СсылкаНаОбъект = Документы.ЗаявкаНаЗакупку.СоздатьДокумент(); КонецЕсли;

	Отказ=Ложь;
	
	Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	РегБ=РегистрыСведений.сок_БуферДляЗакупки.СоздатьНаборЗаписей();
	
	Для Каждого СтрДок из СсылкаНаОбъект.Товары Цикл
		//1.1. Проверим на отсутствие задвоенных в документе
		Масс=СсылкаНаОбъект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки,КодСтроки",СтрДок.ИдентификаторСтроки,СтрДок.КодСтроки));
		Если Масс.Количество()>1 Тогда
			ТекстСообщения="В строке "+СтрДок.НомерСтроки+" идентификатор строки + код строки содержаться в несклольких строках документа "+СсылкаНаОбъект;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
			Продолжить;
		КонецЕсли;	
		//1.2. Проверим на отсутствие разных требований по одному идентификтаору
		Масс=СсылкаНаОбъект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрДок.ИдентификаторСтроки));
		Требование=СтрДок.Требование;
		Для Каждого СтрМ из Масс Цикл
			Если СтрМ.Требование<>Требование Тогда
				ТекстСообщения="В строке "+СтрДок.НомерСтроки+" содержится требование "+Требование+" отличающееся от строки с таким же идентификатором "+СтрМ.Требование+". Документ: "+СсылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
				Продолжить;
			КонецЕсли;	
		КонецЦикла;	
		
		//2. Проверим отсутстве задвоенных в регистре + правильность состояния
		Рег.Отбор.ИдентификаторСтроки.Установить(СтрДок.ИдентификаторСтроки);
		Рег.Прочитать();
		Для Каждого СтрР из Рег Цикл
			
			Если СтрР.Требование<>Требование Тогда
				ТекстСообщения="В строке "+СтрДок.НомерСтроки+" содержится требование "+Требование+" отличающееся от данных в регистре ""Состояния требований"" "+СтрР.Требование+". Документ: "+СсылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
				Продолжить;
			КонецЕсли;	    
			
			Если СтрР.КодСтроки=СтрДок.КодСтроки Тогда
				Если СсылкаНаОбъект.Статус=Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
					Если СтрДок.АвтоЗаполнение Тогда
						Если НЕ СтрР.Состояние=Перечисления.СостоянияТребований.Требование  Тогда
							ТекстСообщения="В строке "+СтрДок.НомерСтроки+" Содержится запись регистра ""Состояния требований"" "+СтрР.Состояние+", а ожидается ""Требование"". Документ: "+СсылкаНаОбъект;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
							Продолжить;
						Конецесли;
					Иначе	
						ТекстСообщения="В строке "+СтрДок.НомерСтроки+" Содержится запись регистра ""Состояния требований"", которая должна отсутствовать в регистре. Документ: "+СсылкаНаОбъект;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
						Продолжить;
					КонецЕсли;	
					Если СтрДок.КоличествоВЕдиницахИзмерения<>СтрР.Количество Тогда
						ТекстСообщения="В строке "+СтрДок.НомерСтроки+" Количество "+СтрДок.КоличествоВЕдиницахИзмерения+" не соответствует количеству "+СтрР.Количество+" в регистре ""Состояния требования"", возможно строку уже раздробили в буфере закупок. Документ: "+СсылкаНаОбъект;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
						Продолжить;
					КонецЕсли;	
					
				Иначе
					Если СтрР.Состояние=Перечисления.СостоянияТребований.ВЗакупке Тогда
						РегБ.Отбор.ИдентификаторСтроки.Установить(СтрДок.ИдентификаторСтроки);
						РегБ.Отбор.КодСтроки.Установить(СтрДок.КодСтроки);
						РегБ.Прочитать();    
						Если РегБ.Количество()=1 Тогда // Все хорошо
						ИначеЕсли РегБ.Количество()=0 Тогда
							Если НЕ ПроверкаНаОтмену Тогда
								ТекстСообщения="В строке "+СтрДок.НомерСтроки+" ""Буфер закупки"" не содержит записей по этой позиции, адолжна быть 1 . Документ: "+СсылкаНаОбъект;
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
								Продолжить;
							КонецЕсли;	
						Иначе
							ТекстСообщения="В строке "+СтрДок.НомерСтроки+" Содержаться записи регистра ""Буфер закупки"" больше одной. Документ: "+СсылкаНаОбъект;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
							Продолжить;
						КонецЕсли;	
					ИначеЕсли СтрР.Состояние=Перечисления.СостоянияТребований.Требование Тогда	
							ТекстСообщения="В строке "+СтрДок.НомерСтроки+" в состоянии ""Требование"" это ошибка.";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
							Продолжить;
					Иначе		
						РегБ.Отбор.ИдентификаторСтроки.Установить(СтрДок.ИдентификаторСтроки);
						РегБ.Отбор.КодСтроки.Установить(СтрДок.КодСтроки);
						РегБ.Прочитать();    
						Если РегБ.Количество()>0 Тогда
							ТекстСообщения="В строке "+СтрДок.НомерСтроки+" в состоянии "+СтрР.Состояние+", но присутствует в буфере закупок. Это ошибка";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
							Продолжить;
						Конецесли;	
					КонецЕсли;
					
					Если ПроверкаНаОтмену Тогда
						Если НЕ СтрР.Состояние=Перечисления.СостоянияТребований.ВЗакупке Тогда
							ТекстСообщения="В строке "+СтрДок.НомерСтроки+" Содержится запись регистра ""Состояния требований"" "+СтрР.Состояние+", а ожидается ""В закупке"". Документ: "+СсылкаНаОбъект;
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
							Продолжить;
						Иначе	
							Если СтрДок.КоличествоВЕдиницахИзмерения<>СтрР.Количество Тогда
								ТекстСообщения="В строке "+СтрДок.НомерСтроки+" Количество "+СтрДок.КоличествоВЕдиницахИзмерения+" не соответсвует количеству "+СтрР.Количество+" в регистре ""Состояния требования"", возможно строку уже раздробили в буфере закупок. Документ: "+СсылкаНаОбъект;
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаОбъект,,,Отказ);
								Продолжить;
							КонецЕсли;	
						Конецесли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;	
	
	
	
	
КонецПроцедуры


Процедура ЗаявкаНаЗакупку_ПереверстивСостояние_ВЗакупку(СсылкаНаОбъект,Отказ=Ложь) Экспорт
	
	Элемент = СсылкаНаОбъект.ПолучитьОбъект();
	Если Ложь Тогда Элемент = Документы.ЗаявкаНаЗакупку.СоздатьДокумент(); КонецЕсли;
	
	Если НЕ Элемент.Статус=Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаЗакупкуСодержитОшибки(СсылкаНаОбъект,Отказ);
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+СсылкаНаОбъект+" содержит ошибки. Перевод в состояние ""Согласовано"" не возможен.");
		Возврат;
	КонецЕсли;	
	
	
	НачатьТранзакцию();
	
	Элемент.Статус=Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
	Попытка
		Элемент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения="Не удалось изменить статус в документе "+ССылкаНаОбъект;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ССылкаНаОбъект,,,Отказ);
		ОтменитьТранзакцию();
		Возврат;
	Конецпопытки;	
	
	НабрЗаписейРегистра = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	
	Для Каждого Стр из Элемент.Товары Цикл
		
		Если Стр.АвтоЗаполнение Тогда
			НабрЗаписейРегистра.Отбор.ИдентификаторСтроки.Установить(Стр.ИдентификаторСтроки);
			НабрЗаписейРегистра.Отбор.КодСтроки.Установить(Стр.КодСтроки);
			НабрЗаписейРегистра.Прочитать();
			СтрР=НабрЗаписейРегистра[0];
			СтрР.Состояние=Перечисления.СостоянияТребований.ВЗакупке;
			СтрР.ЗаявкаНаЗакупку=Элемент.Ссылка;
			СтрР.ДатаЗаказа=ТекущаяДата();
			Попытка
				НабрЗаписейРегистра.Записать(Истина);
			Исключение
				ТекстСообщения="Не удалось изменить статус в регистре сведений ""Состояния требования "" Идентификатор: "+Стр.ИдентификаторСтроки+" Код строки: "+СТР.КодСтроки+" Документ: "+ССылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ССылкаНаОбъект,,,Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;	
			
			МенеджерРегистраБуфера = РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
			МенеджерРегистраБуфера.Активность=Истина;
			ЗаполнитьЗначенияСвойств(МенеджерРегистраБуфера,СтрР);
			МенеджерРегистраБуфера.ЖелаемаяДатаПоступления=СтрР.Требование.ЖелаемаяДатаПоступления;
					
			Попытка
				МенеджерРегистраБуфера.Записать(Истина);
			Исключение
				ТекстСообщения="Не удалось записать данные в регистр  ""Буфер закупок "" Идентификатор: "+Стр.ИдентификаторСтроки+" Код строки: "+СТР.КодСтроки+" Документ: "+ССылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ССылкаНаОбъект,,,Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;	
			
		Иначе                                              

			МенеджерРегистра = РегистрыСведений.СостоянияТребованийОтделений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерРегистра ,Стр);
			МенеджерРегистра.Активность=Истина;
			МенеджерРегистра.Количество=Стр.КоличествоВЕдиницахИзмерения;
			МенеджерРегистра.НоменклатураЗаказа=Стр.Номенклатура;
			МенеджерРегистра.Состояние=Перечисления.СостоянияТребований.ВЗакупке;
			МенеджерРегистра.Требование=Элемент.Ссылка;
			МенеджерРегистра.ЗаявкаНаЗакупку=Элемент.Ссылка;
			МенеджерРегистра.ДатаЗаказа=ТекущаяДата();
			Попытка
				МенеджерРегистра.Записать(Истина);
			Исключение
				ТекстСообщения="Не удалось создать запись регистра сведений ""Состояния требования "" Идентификатор: "+Стр.ИдентификаторСтроки+" Код строки: "+СТР.КодСтроки+" Документ: "+ССылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ССылкаНаОбъект,,,Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;	
			
			МенеджерРегистраБуфера = РегистрыСведений.сок_БуферДляЗакупки.СоздатьМенеджерЗаписи();
			МенеджерРегистраБуфера.Активность=Истина;
			ЗаполнитьЗначенияСвойств(МенеджерРегистраБуфера,МенеджерРегистра);
			МенеджерРегистраБуфера.ЖелаемаяДатаПоступления=СсылкаНаОбъект.ЖелаемаяДатаПоступления;
			Попытка
				МенеджерРегистраБуфера.Записать(Истина);
			Исключение
				ТекстСообщения="Не удалось записать данные в регистр  ""Буфер закупок "" Идентификатор: "+Стр.ИдентификаторСтроки+" Код строки: "+СТР.КодСтроки+" Документ: "+ССылкаНаОбъект;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ССылкаНаОбъект,,,Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;	
		КонецЕсли;
		
	КонецЦикла;
	Попытка
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстСообщения="Не удалось зафиксировать.  Документ: "+ССылкаНаОбъект;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ССылкаНаОбъект,,,Отказ);
	КонецПопытки;	
	
КонецПроцедуры

#Конецобласти


#область Права

Функция ЭтоПользовательКоторомуРазрешеноОтправлятьЗаявкуНаВключениеВформулярныйСписок() Экспорт
	Группа=Справочники.ГруппыПользователей.НайтиПоНаименованию("Разрешено формировать запрос на вклчение в формулярный список");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаПользователя",Группа);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Ссылка = &ГруппаПользователя
	|	И ГруппыПользователейСостав.Пользователь = &Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции	

Функция ЭтоСовсемПолныеПрава() Экспорт
	Возврат СокрЛП(ПараметрыСеанса.ТекущийПользователь)="Соколов Александр Николаевич" 
	        ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь)="Султанова Динара Шамилевна"
			ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь)="Сереброва Любовь Алексеевна"
			ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь)="Удовенко Дмитрий Валерьевич"
			ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь)="Козлов Алексей Владимирович";
КонецФункции	

Функция ЭтоСтаршаяМедСерстра() Экспорт
	Возврат РольДоступна(Метаданные.Роли.сок_СтаршаяМедицинскаяСестра) ИЛИ ЭтоСовсемПолныеПрава();
КонецФункции	

Функция ЭтоЗавОтделением() Экспорт
	Возврат РольДоступна(Метаданные.Роли.сок_ЗаведующийОтделением) ИЛИ ЭтоСовсемПолныеПрава();
КонецФункции	

Функция ЭтоКлинФармаколог() Экспорт
	Возврат РольДоступна(Метаданные.Роли.сок_КлинФармаколог) ИЛИ ЭтоСовсемПолныеПрава();
КонецФункции	

Функция ЭтоАптека() Экспорт
	ГруппаАптека=Справочники.ГруппыПользователей.НайтиПоНаименованию("Сотрудники Аптеки");
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ГруппаПользователей",ГруппаАптека);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь КАК Пользователь,
	|	СоставыГруппПользователей.Используется КАК Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
	|	И СоставыГруппПользователей.Пользователь = &Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Используется;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	


#Конецобласти
