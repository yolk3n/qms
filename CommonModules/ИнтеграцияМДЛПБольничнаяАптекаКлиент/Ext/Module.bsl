
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

Функция ЭтоСсылкаИлиОбъектФормы(Объект, ТипСсылки) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = ТипСсылки
	 Или ТипОбъекта = Тип("ДанныеФормыСтруктура") И ТипЗнч(Объект.Ссылка) = ТипСсылки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыбратьДокументПоступления(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	
	ПоляОтбора = "Ссылка, Организация, МестоДеятельности, Грузоотправитель, МестоДеятельностиГрузоотправителя";
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗнаенияОтбораИлиОбъект = Новый Структура(ПоляОтбора);
		ЗаполнитьЗначенияСвойств(ЗнаенияОтбораИлиОбъект, Объект);
	Иначе
		ЗнаенияОтбораИлиОбъект = Объект;
	КонецЕсли;
	
	Отбор = ИнтеграцияМДЛПБольничнаяАптекаВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(ЗнаенияОтбораИлиОбъект, ПоляОтбора);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НовыйОтбор, Отбор, Истина);
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,
		,
		,
		,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ВыбратьДокументПоступленияДляОприходования(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	
	ПоляОтбора = "Ссылка, Организация, МестоДеятельности, Грузоотправитель";
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗнаенияОтбораИлиОбъект = Новый Структура(ПоляОтбора);
		ЗаполнитьЗначенияСвойств(ЗнаенияОтбораИлиОбъект, Объект);
	Иначе
		ЗнаенияОтбораИлиОбъект = Объект;
	КонецЕсли;
	
	Отбор = ИнтеграцияМДЛПБольничнаяАптекаВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(ЗнаенияОтбораИлиОбъект, ПоляОтбора);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НовыйОтбор, Отбор, Истина);
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,
		,
		,
		,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ВыбратьДокументПоступленияДляПеремещения(Форма, Объект, ОповещениеПриЗавершении) Экспорт
	
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	НовыйОтбор.Вставить("Операция", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее"));
	
	ЗнаенияОтбораИлиОбъект = Неопределено;
	ЗапрашиваемыеПоля = Новый Структура;
	ЗапрашиваемыеПоля.Вставить("Ссылка");
	ЗапрашиваемыеПоля.Вставить("Организация");
	ЗапрашиваемыеПоля.Вставить("МестоДеятельности", "МестоДеятельностиПолучатель");
	ЗапрашиваемыеПоля.Вставить("Грузоотправитель", "Организация");
	ЗапрашиваемыеПоля.Вставить("МестоДеятельностиГрузоотправителя", "МестоДеятельности");
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗнаенияОтбораИлиОбъект = Новый Структура;
		Для Каждого КлючЗначение Из ЗапрашиваемыеПоля Цикл
			ПутьКПолю = ?(ЗначениеЗаполнено(КлючЗначение.Значение), КлючЗначение.Значение, КлючЗначение.Ключ);
			Значение = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ЗначениеРеквизитаФормы(Объект, ПутьКПолю);
			ЗнаенияОтбораИлиОбъект.Вставить(КлючЗначение.Ключ, Значение);
		КонецЦикла;
	Иначе
		ЗнаенияОтбораИлиОбъект = Объект;
	КонецЕсли;
	
	Отбор = ИнтеграцияМДЛПБольничнаяАптекаВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(ЗнаенияОтбораИлиОбъект, ЗапрашиваемыеПоля);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НовыйОтбор, Отбор, Истина);
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,
		,
		,
		,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ВыполнитьКомандуЗарегистрироватьGTIN(Форма, Команда) Экспорт
	
	Если Не СтрЗаканчиваетсяНа(Команда.Имя, "ЗарегистрироватьGTIN") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = СтрЗаменить(Команда.Имя, "ЗарегистрироватьGTIN", "");
	
	ТабличнаяЧасть = Форма.Объект[ИмяТабличнойЧасти];
	
	ДанныеGTIN = Новый Соответствие;
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.GTIN) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ДанныеРегистрации = ДанныеGTIN[СтрокаТабличнойЧасти.GTIN];
			Если ДанныеРегистрации = Неопределено Тогда
				ДанныеGTIN.Вставить(СтрокаТабличнойЧасти.GTIN, Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
			ИначеЕсли ДанныеРегистрации.Номенклатура <> СтрокаТабличнойЧасти.Номенклатура Тогда
				Текст = НСтр("ru = 'В списке существуют записи к регистрации одного и того же GTIN для разной номенклатуры.'");
				Текст = Текст + Символы.ПС + НСтр("ru = 'Невозможно зарегистрировать GTIN ""%1"" одновременно для ""%2"" и ""%3"".'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТабличнойЧасти.GTIN, ДанныеРегистрации.Номенклатура, СтрокаТабличнойЧасти.Номенклатура);
				ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеGTIN.Количество() = 0 Тогда
		Текст = НСтр("ru = 'GTIN не зарегистрированы.'");
		Пояснение = НСтр("ru = 'Нет данных для регистрации GTIN.'");
		ПоказатьОповещениеПользователя(Текст,, Пояснение, БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛПБольничнаяАптекаВызовСервера.ЗарегистрироватьGTIN(ДанныеGTIN);
	
	СуществующиеGTIN = Новый Соответствие;
	Для Каждого КлючИЗначение Из ДанныеGTIN Цикл
		
		ДанныхПоGTIN = КлючИЗначение.Значение;
		Если ДанныхПоGTIN.Статус = "Существует" Тогда
			СуществующиеДанные = ДанныхПоGTIN.СуществующиеДанные;
			Если СуществующиеДанные.Номенклатура = ДанныхПоGTIN.Номенклатура Тогда
				Продолжить;
			КонецЕсли;
			СуществующиеGTIN.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуществующиеGTIN.Количество() > 0 Тогда
		
		ЗаголовокВопроса = НСтр("ru = 'Регистрация GTIN'");
		Текст = НСтр("ru = 'В списке существуют GTIN, зарегистрированные для другой номенклатуры.'");
		Текст = Текст + Символы.ПС + НСтр("ru = 'Выполнить автоматическую перерегистрацию?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект"           , Форма.Объект);
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		ДополнительныеПараметры.Вставить("СуществующиеGTIN" , СуществующиеGTIN);
		
		Оповестить = Новый ОписаниеОповещения("ОбработатьОтветПеререгистрацииGTIN", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповестить, Текст, РежимДиалогаВопрос.ДаНет,,, ЗаголовокВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветПеререгистрацииGTIN(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИнтеграцияМДЛПБольничнаяАптекаВызовСервера.ЗарегистрироватьGTIN(ДополнительныеПараметры.СуществующиеGTIN, Истина);
	Иначе
		
		Объект = ДополнительныеПараметры.Объект;
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			ДанныеШтрихкода = ДополнительныеПараметры.СуществующиеGTIN[СтрокаТабличнойЧасти.GTIN];
			Если ДанныеШтрихкода <> Неопределено Тогда
				Текст = НСтр("ru = 'GTIN %1 уже зарегистрирован для номенклатуры %2'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТабличнойЧасти.GTIN, ДанныеШтрихкода.СуществующиеДанные.Номенклатура);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ДополнительныеПараметры.ИмяТабличнойЧасти, СтрокаТабличнойЧасти.НомерСтроки, "GTIN");
				ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, Поле, "Объект");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуОбработатьНенайденныеШтрихкоды(Форма, Команда) Экспорт
	
	Если Не СтрЗаканчиваетсяНа(Команда.Имя, "ОбработатьНенайденныеШтрихкоды") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = СтрЗаменить(Команда.Имя, "ОбработатьНенайденныеШтрихкоды", "");
	
	ТабличнаяЧасть = Форма.Объект[ИмяТабличнойЧасти];
	
	ДанныеШтрихкодов = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.GTIN) Тогда
			ДанныеШтрихкодов.Добавить(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(СтрокаТабличнойЧасти.GTIN, 1));
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеШтрихкодов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для обработки.'");
		ПоказатьПредупреждение(, ТекстСообщения, 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НеизвестныеШтрихкоды", ДанныеШтрихкодов);
	
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ОповещениеОбработкиНенайденныхШтрихкодов(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = "РегистрацияШтрихкодов" И ИмяСобытия = "ЗарегистрированыШтрихкоды" И Параметр.КлючВладельца = Форма.УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары") Тогда
				
				ДанныеШтрихкодов = Новый Массив;
				Для Каждого Строка Из Форма.Объект.Товары Цикл
					Если Не ЗначениеЗаполнено(Строка.Номенклатура) И Параметр.ЗарегистрированныеШтрихкоды.Найти(Строка.GTIN) <> Неопределено Тогда
						ДанныеШтрихкодов.Добавить(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Строка.GTIN, 1));
					КонецЕсли;
				КонецЦикла;
				
				Если ДанныеШтрихкодов.Количество() > 0 Тогда
					
					Действия = ОбработкаТабличнойЧастиКлиентСервер;
					
					ДействияСоСтроками = Новый Структура;
					ДействияСоСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
					
					ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСоСтроками, ДействияСоСтроками);
					ПараметрыДействия.ЕстьКолонкаКоличество = Ложь;
					ПараметрыДействия.ШтрихкодыВТЧ          = Истина;
					ПараметрыДействия.ИмяКолонкиШтрихкод    = "GTIN";
					ПараметрыДействия.ОтборСтрок            = Новый Структура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
					ПараметрыДействия.ИмяТабличнойЧасти     = "Товары";
					
					ОбработкаТабличнойЧастиКлиент.ОбработатьШтрихкоды(Форма, Форма.Объект, ПараметрыДействия, Неопределено);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "СоставТранспортныхУпаковок") Тогда
				
				ДанныеШтрихкодов = Новый Массив;
				Для Каждого Строка Из Форма.Объект.СоставТранспортныхУпаковок Цикл
					Если Не ЗначениеЗаполнено(Строка.Номенклатура) И Параметр.ЗарегистрированныеШтрихкоды.Найти(Строка.GTIN) <> Неопределено Тогда
						ДанныеШтрихкодов.Добавить(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Строка.GTIN, 1));
					КонецЕсли;
				КонецЦикла;
				
				Если ДанныеШтрихкодов.Количество() > 0 Тогда
					
					Действия = ОбработкаТабличнойЧастиКлиентСервер;
					
					ДействияСоСтроками = Новый Структура;
					ДействияСоСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
					
					ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСоСтроками, ДействияСоСтроками);
					ПараметрыДействия.ЕстьКолонкаКоличество = Ложь;
					ПараметрыДействия.ШтрихкодыВТЧ          = Истина;
					ПараметрыДействия.ИмяКолонкиШтрихкод    = "GTIN";
					ПараметрыДействия.ОтборСтрок            = Новый Структура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
					ПараметрыДействия.ИмяТабличнойЧасти     = "СоставТранспортныхУпаковок";
					
					ОбработкаТабличнойЧастиКлиент.ОбработатьШтрихкоды(Форма, Форма.Объект, ПараметрыДействия, Неопределено);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
