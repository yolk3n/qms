
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

#Область ДанныеИнформационнойБазы

// Найти создать единицу измерения для КТРУ.
// 
// Параметры:
//  КодЕдиницыИзмерения - Строка - Код единицы измерения
//  НаименованиеЕдиницыИзмерения - Строка - Наименование единицы измерения
//  ЕдиницаИзмерения - СправочникСсылка.ЕдиницыИзмерения - Единица измерения
Процедура НайтиСоздатьЕдиницуИзмеренияКТРУ(КодЕдиницыИзмерения, НаименованиеЕдиницыИзмерения, ЕдиницаИзмерения) Экспорт
	
	Если ЗначениеЗаполнено(КодЕдиницыИзмерения) Тогда
		КодыЕдиниц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодЕдиницыИзмерения);
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ДобавитьЕдиницыИзмеренияПоКоду(КодыЕдиниц,, Истина)[0];
	ИначеЕсли ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(НаименованиеЕдиницыИзмерения, Истина);
	Иначе
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ                - Булево - признак отказа от создания формы. Если установить
//                                  данному параметру значение Истина, то форма создана не будет.
//  СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной (системной) обработки
//                                  события. Если установить данному параметру значение Ложь, 
//                                  стандартная обработка события производиться не будет.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается из обработчика ПриЗагрузкеДанныхИзНастроекНаСервере формы.
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Настройки - Соответствие - значения реквизитов формы.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДочернихКлассификаторов

// Процедура, вызываемая для конвертации исходные данные дочерних классификаторов текущего элемента КТРУ
// во внутренний формат, для дальнейшей записи в объект
// (см. ЗаполнитьОбъектДаннымиДочернихКлассификаторов).
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные дочерних классификаторов текущего элемента КТРУ.
//  ДанныеДочернихКлассификаторовЭлемента - Структура - результат конвертации исходных данных дочерних классификаторов текущего элемента КТРУ.
//
Процедура КонвертироватьДанныеДочернихКлассификаторовЭлемента(ИсходныеДанные, ДанныеДочернихКлассификаторовЭлемента) Экспорт
	
	ДанныеМедицинскихИзделий = Новый Массив;
	ЗагружаемыеКодыМедицинскихИзделий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "nomen");
	Если ЗагружаемыеКодыМедицинскихИзделий <> Неопределено Тогда
		Для Каждого ЗагружаемыйКодМедицинскогоИзделий Из ЗагружаемыеКодыМедицинскихИзделий Цикл
			ДанныеМедицинскихИзделий.Добавить(Новый Структура("Код", Формат(ЗагружаемыйКодМедицинскогоИзделий, "ЧГ=0")));
		КонецЦикла;
		ДанныеДочернихКлассификаторовЭлемента.Вставить("ДанныеМедицинскихИзделий", ДанныеМедицинскихИзделий);
	КонецЕсли;
	
	ДанныеСредствРеабилитации = Новый Массив;
	ЗагружаемыеОписанияКТСРИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "ktsri");
	Если ЗагружаемыеОписанияКТСРИ <> Неопределено Тогда
		Для Каждого ЗагружаемоеОписанияКТСРИ Из ЗагружаемыеОписанияКТСРИ Цикл
			ДанныеСредствРеабилитации.Добавить(Новый Структура("Код, Наименование", ЗагружаемоеОписанияКТСРИ[0], ЗагружаемоеОписанияКТСРИ[1]));
		КонецЦикла;
		ДанныеДочернихКлассификаторовЭлемента.Вставить("ДанныеСредствРеабилитации", ДанныеСредствРеабилитации);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая для загрузки данных дочерних классификаторов из дополнительных источников данных,
// например, из сервиса интернет-поддержки.
// Полученные данные загружаются в процедуре ЗагрузитьДанныеДочернихКлассификаторовИзДополнительныхИсточников.
//
// Параметры:
//  ДанныеДочернихКлассификаторов - Структура - результат загрузки данных дочерних классификаторов из дополнительных источников данных.
//
Процедура ПолучитьДанныеДочернихКлассификаторовИзДополнительныхИсточников(ДанныеДочернихКлассификаторов) Экспорт
	
	РезультатПолученияФайла = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ПолучитьФайлКлассификатораИзСервисаИнтернетПоддержки(Неопределено);
	Если Не ЭтоАдресВременногоХранилища(РезультатПолученияФайла.АдресДанныхКлассификатора) Тогда
		ВызватьИсключение РезультатПолученияФайла.СообщениеОбОшибке;
	КонецЕсли;
	
	ОписаниеДанныхКлассификатора = ПолучитьИзВременногоХранилища(РезультатПолученияФайла.АдресДанныхКлассификатора);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
	Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ПолучитьДанныеКлассификатора(ОписаниеДанныхКлассификатора, АдресРезультата);
	
	РезультатПолученияКлассификатора = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ДанныеДочернихКлассификаторов.Вставить("ДанныеМедицинскихИзделий", РезультатПолученияКлассификатора.ДанныеКлассификатора);
	ДанныеДочернихКлассификаторов.Вставить("ДанныеРазделовМедицинскихИзделий", РезультатПолученияКлассификатора.ДанныеРазделовМедицинскихИзделий);
	
КонецПроцедуры

// Процедура, выполняющая загрузку данных дочерних классификаторов по данным КТРУ.
//
// Параметры:
//  ДанныеОсновногоКлассификатора - ТаблицаЗначений - данные загружаемых элементов классификатора КТРУ.
//  ДанныеДочернихКлассификаторов - Структура - результат, полученный из процедуры ПолучитьДанныеДочернихКлассификаторовИзДополнительныхИсточников.
//  РезультатЗагрузкиДочернихКлассификаторов - Структура со свойствами
//   * Создано  - Число - число созданных объектов дочерних классификаторов.
//   * Обновлен - Число - число обновленных объектов дочерних классификаторов.
//   * Ошибки   - Массив - массив ошибок.
//   * Объекты  - Соответствие - соответствие ссылок загруженных дочерних классификаторов идентификаторам, по которым в дальнейшем можно получить ссылку.
//
Процедура ЗагрузитьДанныеДочернихКлассификаторовИзДополнительныхИсточников(ДанныеОсновногоКлассификатора, ДанныеДочернихКлассификаторов, РезультатЗагрузкиДочернихКлассификаторов) Экспорт
	
	ДанныеМедицинскихИзделий         = ДанныеДочернихКлассификаторов.ДанныеМедицинскихИзделий;
	ДанныеРазделовМедицинскихИзделий = ДанныеДочернихКлассификаторов.ДанныеРазделовМедицинскихИзделий;
	
	// Получение только необходимых данных номенклатуры медицинских изделий.
	КодыМедицинскихИзделий = Новый Массив;
	Для Каждого ЭлементДанных Из ДанныеОсновногоКлассификатора Цикл
		ДанныеМедицинскихИзделийЭлемента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементДанных.ДочерниеКлассификаторы, "ДанныеМедицинскихИзделий");
		Если ДанныеМедицинскихИзделийЭлемента <> Неопределено Тогда
			Для Каждого ЭлементДанныхМедицинскихИзделий Из ДанныеМедицинскихИзделийЭлемента Цикл
				КодыМедицинскихИзделий.Добавить(ЭлементДанныхМедицинскихИзделий.Код);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Код", ВидСравненияКомпоновкиДанных.ВСписке, КодыМедицинскихИзделий);
	ФиксированныеОтборы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор);
	ДанныеМедицинскихИзделий = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.СопоставитьЗагружаемыеДанные(ДанныеМедицинскихИзделий,, ФиксированныеОтборы);
	
	// Получение только необходимых данных разделов номенклатуры медицинских изделий.
	КодыРазделовМедицинскихИзделий = Новый Массив;
	Для Каждого ЭлементДанных Из ДанныеМедицинскихИзделий Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.Разделы) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КодыРазделовМедицинскихИзделий, ЭлементДанных.Разделы, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ФиксированныйОтбор = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Код", ВидСравненияКомпоновкиДанных.ВСписке, КодыРазделовМедицинскихИзделий);
	ФиксированныеОтборы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФиксированныйОтбор);
	ДанныеРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.СопоставитьЗагружаемыеДанные(ДанныеРазделовМедицинскихИзделий,, ФиксированныеОтборы);
	
	// Загрузка отобранных разделов номенклатуры медицинских изделий.
	РезультатЗагрузкиРазделовМедицинскихИзделий = Справочники.РазделыНоменклатурнойКлассификацииМедицинскихИзделийПоВидам.ЗагрузитьРазделыМедицинскихИзделий(ДанныеРазделовМедицинскихИзделий);
	
	Обработан = РезультатЗагрузкиРазделовМедицинскихИзделий.Ошибки.Количество() = 0;
	Если Не Обработан Тогда
		РезультатЗагрузкиДочернихКлассификаторов.Ошибки = РезультатЗагрузкиРазделовМедицинскихИзделий.Ошибки;
		Возврат;
	КонецЕсли;
	
	// Загрузка отобранных данных номенклатуры медицинских изделий.
	РезультатЗагрузкиМедицинскихИзделий = Справочники.НоменклатурнаяКлассификацияМедицинскихИзделийПоВидам.ЗагрузитьМедицинскиеИзделия(ДанныеМедицинскихИзделий, РезультатЗагрузкиРазделовМедицинскихИзделий.Объекты);
	
	Обработан = РезультатЗагрузкиМедицинскихИзделий.Ошибки.Количество() = 0;
	Если Не Обработан Тогда
		РезультатЗагрузкиДочернихКлассификаторов.Ошибки = РезультатЗагрузкиРазделовМедицинскихИзделий.Ошибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РезультатЗагрузкиДочернихКлассификаторов, РезультатЗагрузкиМедицинскихИзделий);
	
КонецПроцедуры

// Заполняет объект КТРУ данными загруженных дочерних классификаторов.
//
// Параметры:
//  Объект - СправочникОбъект - объект справочника КТРУ, данные дочерних классификаторов которого необходимо дозаполнить.
//  ДанныеДочернихКлассификаторовЭлемента - Структура - результат конвертации исходных данных дочерних классификаторов текущего элемента КТРУ
//                                          (см. КонвертироватьДанныеДочернихКлассификаторовЭлемента).
//  ДанныеЗагруженыхДочернихКлассификаторов - Соответствие - данные всех загруженных дочерних классификаторов
//                                            РезультатЗагрузкиДочернихКлассификаторов.Объекты
//                                            (см. ЗагрузитьДанныеДочернихКлассификаторовИзДополнительныхИсточников).
//
Процедура ЗаполнитьОбъектДаннымиДочернихКлассификаторов(Объект, ДанныеДочернихКлассификаторовЭлемента, ДанныеЗагруженыхДочернихКлассификаторов) Экспорт
	
	Объект.Классификаторы.Очистить();
	
	ДанныеМедицинскихИзделий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДочернихКлассификаторовЭлемента, "ДанныеМедицинскихИзделий");
	Если ДанныеМедицинскихИзделий <> Неопределено Тогда
		Для Каждого ЭлементДанных Из ДанныеМедицинскихИзделий Цикл
			ДобавляемыйКлассификатор = Объект.Классификаторы.Добавить();
			ДобавляемыйКлассификатор.Классификатор = ДанныеЗагруженыхДочернихКлассификаторов.Получить(ЭлементДанных.Код);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеСредствРеабилитации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДочернихКлассификаторовЭлемента, "ДанныеСредствРеабилитации");
	Если ДанныеСредствРеабилитации <> Неопределено Тогда
		Для Каждого ЭлементДанных Из ДанныеСредствРеабилитации Цикл
			ДобавляемыйКлассификатор = Объект.Классификаторы.Добавить();
			ДобавляемыйКлассификатор.Классификатор = НайтиСоздатьОбновитьКТСРИ(ЭлементДанных);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция НайтиСоздатьОбновитьКТСРИ(СвойстваОбъекта)
	
	ЭлементОбъект = Неопределено;
	ЭлементСсылка = Справочники.КлассификаторТехническихСредствРеабилитации.НайтиПоКоду(СвойстваОбъекта.Код);
	Если ЭлементСсылка.Пустая() Тогда
		ЭлементОбъект = Справочники.КлассификаторТехническихСредствРеабилитации.СоздатьЭлемент();
	Иначе
		Для Каждого КлючИЗначение Из СвойстваОбъекта Цикл
			Если ЭлементСсылка[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
				КлассификаторКТРУ.ЗаблокироватьОбъект(ЭлементОбъект);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлементОбъект <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементОбъект, СвойстваОбъекта);
		ЭлементОбъект.Записать();
		ЭлементОбъект.Разблокировать();
		ЭлементСсылка = ЭлементОбъект.Ссылка;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

