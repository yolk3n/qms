// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  Элемент - ДекорацияФормы,КнопкаФормы 
//  НавигационнаяСсылка - Строка
//  СтандартнаяОбработка - Булево
//  РезультатОбработкиНаСервере - Структура:
//  * СоставМенюВыбора - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЭлементУправленияПакета_ОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, РезультатОбработкиНаСервере) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Show" Тогда
		
		СоставМеню = РезультатОбработкиНаСервере.СоставМенюВыбора;
		Если Не ЗначениеЗаполнено(СоставМеню) Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("ИдентификаторПакета", Форма.ИдентификаторПакета);
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораДокументаПакетаИзМенюЕще",
			ПакетыДокументовЭДОКлиент, ДополнительныеПараметры);
		
		Форма.ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СоставМеню, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * Объект - ДанныеФормыСтруктура:
//  ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - ОпределяемыйТип.УчастникЭДО
//  ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ОтображаемыеДокументыПакета - СписокЗначений из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Элемент - ДекорацияФормы,КнопкаФормы
//  СтандартнаяОбработка - Булево
Процедура ЭлементУправленияПакета_Нажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт

	Если Элемент = Форма.Элементы["ЭлементУправленияПакета_ЭлементУправленияПакета_ДобавитьДокумент"] Тогда
		
		СписокПунктовМеню = Новый СписокЗначений; // СписокЗначений из Строка
		СписокПунктовМеню.Добавить("ДобавитьВПакетФайлСКомпьютера" , НСтр("ru = 'Файл с компьютера'"));
		СписокПунктовМеню.Добавить("ДобавитьВПакетПрисоединенныйФайл" , НСтр("ru = 'Файл из хранилища'"));
		СписокПунктовМеню.Добавить("ДобавитьВПакетДокументИнформационнойБазы" , НСтр("ru = 'Документ информационной базы'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторПакета", Форма.ИдентификаторПакета);
		ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", Форма.Объект.Ссылка);
		ДополнительныеПараметры.Вставить("Отправитель", Форма.Объект.Организация);
		ДополнительныеПараметры.Вставить("Получатель", Форма.Объект.Контрагент);
		ДополнительныеПараметры.Вставить("Договор", Форма.Объект.ДоговорКонтрагента);
		ДополнительныеПараметры.Вставить("ОбъектыУчета", Новый Массив);
		ДополнительныеПараметры.Вставить("ОтключитьТранслитерацию", Форма.ОтключитьТранслитерацию);
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораСпособаДобавленияДокументаВПакет",
			ЭтотОбъект, ДополнительныеПараметры);
			
		Форма.ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокПунктовМеню, Элемент);
		
	ИначеЕсли СтрНайти(Элемент.Имя, "ЭлементУправленияПакета_УдалитьДокумент_") > 0 Тогда
		ИндексДокумента = Число(СтрЗаменить(Элемент.Имя, "ЭлементУправленияПакета_УдалитьДокумент_", "")); 
		ДокументКУдалениюИзПакета = Форма.ОтображаемыеДокументыПакета[ИндексДокумента - 1].Значение; // ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		ПакетыДокументовЭДОВызовСервера.УдалитьДокументИзПакета(Форма.ИдентификаторПакета,
			ДокументКУдалениюИзПакета, КонтекстДиагностики);
			
		Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
			ИнтерфейсДокументовЭДОКлиент.ПоказатьПредставлениеОшибокКонтекстаДиагностики(КонтекстДиагностики);
		Иначе
			Оповестить("УдалениеДокументаИзПакета", ДокументКУдалениюИзПакета, Форма.ИдентификаторПакета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ВыбранныйСпособДобавления - Неопределено - если пользователь отказался от выбора.
//                            - ЭлементСпискаЗначений
//                            - Строка
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОтключитьТранслитерацию - Булево
//
Процедура ПослеВыбораСпособаДобавленияДокументаВПакет(ВыбранныйСпособДобавления, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйСпособДобавления = Неопределено Тогда		
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранныйСпособДобавления) = Тип("ЭлементСпискаЗначений") Тогда
		СпособДобавления = ВыбранныйСпособДобавления.Значение;
	Иначе
		СпособДобавления = ВыбранныйСпособДобавления;
	КонецЕсли;
	
	Если СпособДобавления = "ДобавитьВПакетФайлСКомпьютера" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументВПакетИзФайлаНаДискеЗавершениеВыбораФайла",
			ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения,,,, Новый УникальныйИдентификатор());
		
	ИначеЕсли СпособДобавления = "ДобавитьВПакетПрисоединенныйФайл" Тогда
		
		Параметры = ИнтеграцияБСПБЭДКлиент.НовыеПараметрыВыбораФайловИзОбщегоХранилища();
		Параметры.ЗакрыватьПриВыборе = Истина;
		Параметры.МножественныйВыбор = Ложь;		
		
		Оповещение = Новый ОписаниеОповещения("ДобавитьДокументВПакетИзПрисоединенногоФайлаЗавершениеВыбора",
			ЭтотОбъект, ДополнительныеПараметры);
	
		ИнтеграцияБСПБЭДКлиент.ОткрытьФормуВыбораФайловИзОбщегоХранилища(Параметры, Оповещение);
		
	ИначеЕсли СпособДобавления = "ДобавитьВПакетДокументИнформационнойБазы" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВПакетДокументИнформационнойБазыЗавершениеВыбора",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторПакета", ДополнительныеПараметры.ИдентификаторПакета);
		ПараметрыФормы.Вставить("ЭлектронныйДокумент", ДополнительныеПараметры.ЭлектронныйДокумент);
		ПараметрыФормы.Вставить("Организация", ДополнительныеПараметры.Отправитель);
		ПараметрыФормы.Вставить("Контрагент", ДополнительныеПараметры.Получатель);
		ПараметрыФормы.Вставить("Договор", ДополнительныеПараметры.Договор);
		ПараметрыФормы.Вставить("ОтключитьТранслитерацию", ДополнительныеПараметры.ОтключитьТранслитерацию);
			
		ОткрытьФорму("РегистрСведений.ПакетыДокументовЭДО.Форма.ДобавлениеДокументовВПакет", ПараметрыФормы, , , , ,
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДополнительныеПараметры - Неопределено,Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ПараметрыФайла - Структура:
// * ИмяФайла - Строка
// * АдресХранилища - Строка
Процедура СформироватьИДобавитьПроизвольныйДокументВПакетПолучитьРеквизиты(ДополнительныеПараметры, ПараметрыФайла) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыОповещения.Вставить("ПараметрыФайла", ПараметрыФайла);
	
	РеквизитыДокумента = ИнтерфейсДокументовЭДОВызовСервера.РеквизитыДокументаПоФайлу(ПараметрыФайла);
	Если ЗначениеЗаполнено(РеквизитыДокумента) Тогда
		СформироватьИДобавитьПроизвольныйДокументВПакетПолучитьРеквизитыЗавершение(РеквизитыДокумента, ПараметрыОповещения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СформироватьИДобавитьПроизвольныйДокументВПакетПолучитьРеквизитыЗавершение",
		ПакетыДокументовЭДОКлиент, ПараметрыОповещения);
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьВводРеквизитовПроизвольногоДокумента(Оповещение, ПараметрыОповещения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Результат - Неопределено,Структура:
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Номер - Строка
//  * Дата - Дата
//  * Сумма - Число
//  Параметры - Структура:
//  * ДополнительныеПараметры - Неопределено,Структура:
//  ** ИдентификаторПакета - УникальныйИдентификатор
//  ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Отправитель - ОпределяемыйТип.Организация
//  ** Получатель - ОпределяемыйТип.УчастникЭДО
//  ** Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ПараметрыФайла - Структура:
//  ** ИмяФайла - Строка
//  ** АдресХранилища - Строка
Процедура СформироватьИДобавитьПроизвольныйДокументВПакетПолучитьРеквизитыЗавершение(Результат, Параметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация", Параметры.ДополнительныеПараметры.Отправитель);
	ПараметрыФормирования.Вставить("Контрагент", Параметры.ДополнительныеПараметры.Получатель);
	ПараметрыФормирования.Вставить("Договор", Параметры.ДополнительныеПараметры.Договор);
	ПараметрыФормирования.Вставить("НомерДокумента", Результат.Номер);
	ПараметрыФормирования.Вставить("ДатаДокумента", Результат.Дата);
	ПараметрыФормирования.Вставить("СуммаДокумента", Результат.Сумма);
	
	Если ЗначениеЗаполнено(Результат.ВидДокумента) Тогда
		ПараметрыФормирования.Вставить("ВидДокумента",Результат.ВидДокумента);
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ОбъектыУчета", Новый Массив);
	
	СформироватьИДобавитьПроизвольныйДокументВПакет(Параметры.ДополнительныеПараметры,
		ПараметрыФормирования, Параметры.ПараметрыФайла);

КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - ОпределяемыйТип.ПрисоединенныйФайл
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОтключитьТранслитерацию - Булево
//  
Процедура ДобавитьДокументВПакетИзПрисоединенногоФайлаЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ВыбранноеЗначение, Новый УникальныйИдентификатор, Истина);
		ПодготовитьДокументДляДобавленияВПакет(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла,
			ДополнительныеПараметры);
	
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
Процедура ДобавитьВПакетДокументИнформационнойБазыЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Оповестить("ВыборТекущегоДокументаПакета", ДополнительныеПараметры.ЭлектронныйДокумент,
			ДополнительныеПараметры.ИдентификаторПакета);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено,Структура:
//  * ПараметрыВыполненияДействийПоЭДО - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  Контекст - Структура:
//  * ПараметрыДобавления - Структура:
//  ** ИдентификаторПакета - УникальныйИдентификатор
//  ** ИдентификаторПакета - УникальныйИдентификатор
//  ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Отправитель - ОпределяемыйТип.Организация
//  ** Получатель - ОпределяемыйТип.УчастникЭДО
//  ** Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ПараметрыФормирования - Структура:
//  ** Организация - ОпределяемыйТип.Организация
//  ** Контрагент - ОпределяемыйТип.УчастникЭДО
//  ** Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ** НомерДокумента - Строка
//  ** ДатаДокумента - Дата
//  ** СуммаДокумента - Число
//  ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ПараметрыФайла - Структура:
//  ** ИмяФайла - Строка
//  ** АдресХранилища - Строка
//
Процедура ДобавитьВПакетПослеОбработкиОшибокФормирования(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ПараметрыВыполненияДействийПоЭДО)
		И ЗначениеЗаполнено(Результат.ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов) Тогда
		Подписанты = Результат.ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов[
			Контекст.ПараметрыДобавления.ЭлектронныйДокумент];
		Контекст.ПараметрыФормирования.Вставить("Подписанты", Подписанты);
	КонецЕсли;
	
	СформироватьИДобавитьПроизвольныйДокументВПакет(Контекст.ПараметрыДобавления, Контекст.ПараметрыФормирования,
		Контекст.ПараметрыФайла);
	
КонецПроцедуры

// Параметры:
//  ВыбранныйЭлемент - Неопределено - если пользователь отказался от выбора.
//                   - ЭлементСпискаЗначений
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//
Процедура ПослеВыбораДокументаПакетаИзМенюЕще(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Оповестить("ВыборТекущегоДокументаПакета", ВыбранныйЭлемент.Значение, ДополнительныеПараметры.ИдентификаторПакета);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ФайлПомещен - Булево
//  АдресВХранилище - Строка
//  ВыбранноеИмяФайла - Строка
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОтключитьТранслитерацию - Булево
//  
Процедура ДобавитьДокументВПакетИзФайлаНаДискеЗавершениеВыбораФайла(ФайлПомещен, АдресВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ФайлПомещен Тогда
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		ПодготовитьДокументДляДобавленияВПакет(АдресВХранилище, Файл.Имя, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыДобавления - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  ПараметрыФормирования - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * СуммаДокумента - Число
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыФайла - Структура:
// * ИмяФайла - Строка
// * АдресХранилища - Строка
Процедура СформироватьИДобавитьПроизвольныйДокументВПакет(ПараметрыДобавления, ПараметрыФормирования, ПараметрыФайла)
	
	ДокументыПакета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыДобавления.ЭлектронныйДокумент);
	
	Результат = ИнтерфейсДокументовЭДОВызовСервера.СоздатьЭлектронныйДокументПоФайлу(
		ПараметрыФормирования, ПараметрыФайла);
	Если Не Результат.Успех Тогда
		Контекст = Новый Структура("ПараметрыДобавления, ПараметрыФормирования, ПараметрыФайла",
			ПараметрыДобавления, ПараметрыФормирования, ПараметрыФайла);
		Оповещение = Новый ОписаниеОповещения("ДобавитьВПакетПослеОбработкиОшибокФормирования",
			ПакетыДокументовЭДОКлиент, Контекст);
		ДополнительныеПараметры = Новый Структура("ОбъектыУчета", ДокументыПакета);
		ИнтерфейсДокументовЭДОКлиент.НачатьОбработкуОшибокФормированияДокумента(Оповещение, Результат.Ошибки,
			ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДокументыПакета.Добавить(Результат.ЭлектронныйДокумент);
	ИдентификаторПакета = ПараметрыДобавления.ИдентификаторПакета;
	
	Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ПакетыДокументовЭДОВызовСервера.ДобавитьДокументВПакет(ИдентификаторПакета, Результат.ЭлектронныйДокумент);
	Иначе
		ИдентификаторПакета = ПакетыДокументовЭДОВызовСервера.СоздатьПакетДокументов(ДокументыПакета);
	КонецЕсли;
	
	Оповестить("ДобавлениеДокументаВПакет", ДокументыПакета, ИдентификаторПакета);
	
КонецПроцедуры

// Параметры:
//  АдресХранилища - Строка
//  ИмяФайла - Строка
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Отправитель - ОпределяемыйТип.Организация
//  * Получатель - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОтключитьТранслитерацию - Булево
//  
Процедура ПодготовитьДокументДляДобавленияВПакет(АдресХранилища, ИмяФайла, ДополнительныеПараметры)
		
	ИмяФайлаПослеПреобразования = РаботаСФайламиБЭДКлиент.ПреобразоватьИмяФайлаСУчетомТранслитерации(
		ИмяФайла, ДополнительныеПараметры.ОтключитьТранслитерацию);

	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ИмяФайла", ИмяФайлаПослеПреобразования);
	ПараметрыФайла.Вставить("АдресХранилища", АдресХранилища);

	СформироватьИДобавитьПроизвольныйДокументВПакетПолучитьРеквизиты(ДополнительныеПараметры, ПараметрыФайла);
	
КонецПроцедуры

#КонецОбласти
