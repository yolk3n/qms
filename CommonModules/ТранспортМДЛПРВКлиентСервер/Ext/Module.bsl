
#Область ПрограммныйИнтерфейс

#Область РаботаСЗаданиями

Функция ОтправитьСообщение(ТранспортныйМодуль, Сообщение) Экспорт
	
	#Если ВебКлиент Тогда
		ВызватьИсключение НСтр("Работа с РВ в режиме Веб-клиента не поддерживается.");
	#Иначе
		
		Результат = ПолучитьИнформациюОбУстройстве(ТранспортныйМодуль);
		Если Результат.Статус = "Ошибка" Тогда
			Возврат Результат;
		КонецЕсли;
		
		ВремяДоБлокировки = Результат.Данные[0].ВремяДоБлокировки;
		Если Не ЗначениеЗаполнено(ВремяДоБлокировки) Или ВремяДоБлокировки = ПустоеВремяБлокировкиРВ() Тогда
			Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
			Результат.Статус = "Ошибка";
			Результат.ОписаниеОшибки = НСтр("ru = 'Сообщение не отправленно из-за блокировки регистратора выбытия. Убедитесь, что устройство видит спутники.'");
			Возврат Результат;
		КонецЕсли;
		
		ДанныеДокумента = ТранспортМДЛПКлиентСервер.ПреобразоватьJSONВЗначение(Сообщение.ТекстСообщения, Ложь, "ДатаДокумента");
		РезультатОтправки = ЗарегистрироватьОтчетОВыбытии(ТранспортныйМодуль, ДанныеДокумента);
		Если РезультатОтправки.Статус <> "Ошибка" Тогда
			ТранспортМДЛПРВВызовСервера.ДобавитьСообщениеВОчередьПолученияКвитанций(
				Сообщение.Ссылка,
				ТранспортныйМодуль.ИдентификаторОрганизации,
				Сообщение.ОбновитьСостояниеПодтверждения,
				ТранспортныйМодуль.Регистратор);
		КонецЕсли;
		
		Возврат РезультатОтправки;
		
	#КонецЕсли
	
КонецФункции

Функция ПолучитьВходящиеСообщения(ТранспортныйМодуль, ПараметрыВыполненияОбмена = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		ВызватьИсключение НСтр("Работа с РВ в режиме Веб-клиента не поддерживается.");
	#Иначе
		
		Данные = ТранспортМДЛПРВВызовСервера.ПолучитьДанныеСообщенийОжидающихКвитанции(ТранспортныйМодуль.Регистратор, ПараметрыВыполненияОбмена);
		Для Каждого Сообщение Из Данные Цикл
			
			Результат = ОбработатьРезультатОтправкиСообщения(ТранспортныйМодуль, Сообщение);
			Если Результат.Статус = "Ошибка" Тогда
				Если Результат.ТребуетсяАвторизация Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
		
	#КонецЕсли
	
КонецФункции

Функция ПроверитьКодМаркировки(ТранспортныйМодуль, СписокКодов, ЛокальнаяПроверка = Истина, ОнлайнПроверка = Истина) Экспорт
	
	Задание = Новый Структура;
	Задание.Вставить("type", "checkMarks");
	Задание.Вставить("localCheck", ЛокальнаяПроверка);
	Задание.Вставить("onlineCheck", ОнлайнПроверка);
	Задание.Вставить("marks", Новый Массив);
	
	Для Индекс = 0 По СписокКодов.ВГраница() Цикл
		Задание["marks"].Добавить(Новый Структура("mark", УдалитьРазделителиСтрок(СписокКодов[Индекс])));
	КонецЦикла;
	
	Возврат ПоставитьЗаданиеВОчередь(ТранспортныйМодуль, Задание)
	
КонецФункции

Функция ЗарегистрироватьОтчетОВыбытии(ТранспортныйМодуль, ДанныеДокумента) Экспорт
	
	Задание = Новый Структура;
	Задание.Вставить("type", "registerMarksByRequisites");
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("type", ДанныеДокумента.Тип); // 0 - Требование-накладная или другой документ 1- Рецепт
	КодФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "КодФормы");
	Если ЗначениеЗаполнено(КодФормы) Тогда
		РеквизитыДокумента.Вставить("code", КодФормы); // Код по ОКУД
	КонецЕсли;
	РеквизитыДокумента.Вставить("codeName", ДанныеДокумента.ИмяФормы); // название документа
	
	// Дата документа основания в формате "yyyy-MM-dd'T'HH:mm:ss'Z'" (например, "2019-07-21T17:32:28Z").
	// Дату необходимо приводить именно в указанный формат, а не рассчитывать по Гринвичу (выяснено в ходе обсуждения с разработчиками РВ).
	РеквизитыДокумента.Вставить("date", Формат(ДанныеДокумента.ДатаДокумента, "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
	
	СерияРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "СерияДокумента");
	Если ЗначениеЗаполнено(СерияРецепта) Тогда
		РеквизитыДокумента.Вставить("series", СерияРецепта); // Серия льготного рецепта
	КонецЕсли;
	РеквизитыДокумента.Вставить("number", ДанныеДокумента.НомерДокумента); // Номер документа
	Задание.Вставить("documentOut", РеквизитыДокумента);
	Задание.Вставить("marks", Новый Массив);
	
	Для Индекс = 0 По ДанныеДокумента.Марки.ВГраница() Цикл
		ДанныеТовара = ДанныеДокумента.Марки[Индекс];
		ДанныеУпаковки = Новый Структура;
		ДанныеУпаковки.Вставить("mark", УдалитьРазделителиСтрок(ДанныеТовара.ШтрихкодBase64));
		Если ЗначениеЗаполнено(ДанныеТовара.ДоляОтВторичнойУпаковки) Тогда
			ДанныеУпаковки.Вставить("soldPart", ДанныеТовара.ДоляОтВторичнойУпаковки); // Простая дробь (например, 3/200)
		КонецЕсли;
		Задание["marks"].Добавить(ДанныеУпаковки);
	КонецЦикла;
	
	Возврат ПоставитьЗаданиеВОчередь(ТранспортныйМодуль, Задание)
	
КонецФункции

Функция ПодготовитьОтчетОВыбытии(ДанныеДокумента) Экспорт
	
	Задание = Новый Структура;
	Задание.Вставить("type", "registerMarksByRequisites");
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("type", ДанныеДокумента.Тип); // 0 - Требование-накладная или другой документ 1- Рецепт
	КодФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "КодФормы");
	Если ЗначениеЗаполнено(КодФормы) Тогда
		РеквизитыДокумента.Вставить("code", КодФормы); // Код по ОКУД
	КонецЕсли;
	РеквизитыДокумента.Вставить("codeName", ДанныеДокумента.ИмяФормы); // название документа
	РеквизитыДокумента.Вставить("date", ДанныеДокумента.ДатаДокумента); // Дата документа в формате "yyyy-MM-dd'T'HH:mm:ss'Z'" (например, "2019-07-21T17:32:28Z")
	СерияРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "СерияДокумента");
	Если ЗначениеЗаполнено(СерияРецепта) Тогда
		РеквизитыДокумента.Вставить("series", СерияРецепта); // Серия льготного рецепта
	КонецЕсли;
	РеквизитыДокумента.Вставить("number", ДанныеДокумента.НомерДокумента); // Номер документа
	Задание.Вставить("documentOut", РеквизитыДокумента);
	Задание.Вставить("marks", Новый Массив);
	
	Для Индекс = 0 По ДанныеДокумента.Марки.ВГраница() Цикл
		ДанныеТовара = ДанныеДокумента.Марки[Индекс];
		ДанныеУпаковки = Новый Структура;
		ДанныеУпаковки.Вставить("mark", УдалитьРазделителиСтрок(ДанныеТовара.ШтрихкодBase64));
		Если ЗначениеЗаполнено(ДанныеТовара.ДоляОтВторичнойУпаковки) Тогда
			ДанныеУпаковки.Вставить("soldPart", ДанныеТовара.ДоляОтВторичнойУпаковки); // Простая дробь (например, 3/200)
		КонецЕсли;
		Задание["marks"].Добавить(ДанныеУпаковки);
	КонецЦикла;
	
	Возврат Задание;
	
КонецФункции

Функция ПоставитьЗаданиеВОчередь(ТранспортныйМодуль, Задание) Экспорт
	
	ЗапросПостановкиВОчередь = ТранспортМДЛПКлиентСервер.ДанныеHTTPЗапроса("POST");
	ЗапросПостановкиВОчередь.АдресЗапроса = ТранспортныйМодуль.ПрефиксВерсии + "requests";
	
	ТелоЗапроса = Новый Структура;
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	ТелоЗапроса.Вставить("rvRequestId", ИдентификаторЗапроса);
	ТелоЗапроса.Вставить("request", Задание);
	
	ЗапросПостановкиВОчередь.ТелоЗапроса = ТелоЗапроса;
	
	Результат = ПередатьДанныеВРВ(ТранспортныйМодуль, ЗапросПостановкиВОчередь);
	Если Результат.Статус = "Успешно" Тогда
		Результат.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьЗадание(ТранспортныйМодуль, ИдентификаторЗадания) Экспорт
	
	ЗапросОтменыЗадания = ТранспортМДЛПКлиентСервер.ДанныеHTTPЗапроса("DELETE");
	ЗапросОтменыЗадания.АдресЗапроса = ТранспортныйМодуль.ПрефиксВерсии + "requests/" + ИдентификаторЗадания;
	
	Результат = ПередатьДанныеВРВ(ТранспортныйМодуль, ЗапросОтменыЗадания);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусЗадания(ТранспортныйМодуль, ИдентификаторЗадания) Экспорт
	
	ЗапросСтатусаЗадания = ТранспортМДЛПКлиентСервер.ДанныеHTTPЗапроса("GET");
	ЗапросСтатусаЗадания.АдресЗапроса = ТранспортныйМодуль.ПрефиксВерсии + "requests/" + ИдентификаторЗадания;
	
	Результат = ПередатьДанныеВРВ(ТранспортныйМодуль, ЗапросСтатусаЗадания);
	
	Если Результат.Статус <> "Ошибка" Тогда
		Результат.Данные = Результат.Данные["results"];
		//Ответ = Результат.Данные;
		//Статусы = Новый Соответствие;
		//Статусы.Вставить("ready", "Выполнено");
		//Статусы.Вставить("error", "Ошибка");
		//Статусы.Вставить("wait", "ВОчереди");
		//Статусы.Вставить("inProgress", "Выполняется");
		//
		//РезультатЗадания = Ответ["results"];
		//Результат.Вставить("Статус", Статусы[РезультатЗадания["status"]]);
		//Если Результат.Статус = "Выполнено" Тогда
		//	Результат.Вставить("Данные", РезультатЗадания["result"]);
		//ИначеЕсли Результат.Статус = "Ошибка" Тогда
		//	Ошибка = РезультатЗадания["error"];
		//	Результат.КодОшибки = Ошибка["code"];
		//	Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1) %2", Формат(Ошибка["code"], "ЧГ=0"), Ошибка["description"]);
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ПустаяСтруктураДынныхРецепта() Экспорт
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Тип", 1);
	РеквизитыДокумента.Вставить("ИмяФормы", НСтр("ru = 'Рецепт по форме 107/у'"));
	РеквизитыДокумента.Вставить("СерияДокумента");
	РеквизитыДокумента.Вставить("ДатаДокумента");
	РеквизитыДокумента.Вставить("НомерДокумента");
	РеквизитыДокумента.Вставить("Марки", Новый Массив);
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Функция ПустаяСтруктураДынныхТребованияНакладной() Экспорт
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Тип", 0);
	РеквизитыДокумента.Вставить("КодФормы", "0504204");
	РеквизитыДокумента.Вставить("ИмяФормы", НСтр("ru = 'Требование накладная'"));
	РеквизитыДокумента.Вставить("ДатаДокумента");
	РеквизитыДокумента.Вставить("НомерДокумента");
	РеквизитыДокумента.Вставить("Марки", Новый Массив);
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Функция ПустаяСтруктураМарки() Экспорт
	
	ДанныеМарки = Новый Структура;
	ДанныеМарки.Вставить("НомерКИЗ");
	ДанныеМарки.Вставить("ДоляОтВторичнойУпаковки");
	
	Возврат ДанныеМарки;
	
КонецФункции


Функция СформироватьРезультатПроверкиКодаМаркировки(ДанныеПроверки) Экспорт
	
	Результат = Новый Структура;
	
	Успех = Ложь;
	Статус = "";
	КодРезультатаЛокальнойПроверки = Неопределено;
	ОнлайнПроверкаПроводилась = Ложь;
	
	КодОшибкиРВ = ДанныеПроверки["deviceError"];
	КодОшибкиФЛК = ДанныеПроверки["flcError"];
	Если ЕстьОшибкаРВ(КодОшибкиРВ) Тогда
		ПредставлениеОшибкиРВ = ОписаниеОшибкиРВ(КодОшибкиРВ);
		Результат.Вставить("КодОшибкиРВ"           , КодОшибкиРВ);
		Результат.Вставить("ПредставлениеОшибкиРВ" , ПредставлениеОшибкиРВ);
		Статус = ПредставлениеОшибкиРВ;
	ИначеЕсли ЕстьОшибкаФЛК(КодОшибкиФЛК) Тогда
		ПредставлениеОшибкиФЛК = ОписаниеОшибкиФЛК(КодОшибкиФЛК);
		Результат.Вставить("КодОшибкиФЛК"          , КодОшибкиФЛК);
		Результат.Вставить("ПредставлениеОшибкиФЛК", ПредставлениеОшибкиФЛК);
		Статус = ПредставлениеОшибкиФЛК;
	Иначе
		
		// Локальная проверка
		КодРезультатаЛокальнойПроверки = ДанныеПроверки["localCheckStatus"];
		ПредставлениеРезультатаЛокальнойПроверки = СтатусЛокальнойПроверки(КодРезультатаЛокальнойПроверки);
		Результат.Вставить("КодРезультатаЛокальнойПроверки"          , КодРезультатаЛокальнойПроверки);
		Результат.Вставить("ПредставлениеРезультатаЛокальнойПроверки", ПредставлениеРезультатаЛокальнойПроверки);
		Статус = ПредставлениеРезультатаЛокальнойПроверки;
		
		Успех = ЛокальнаяПроверкаПройденаУспешно(КодРезультатаЛокальнойПроверки);
		// Если проверка не проводилась, то можно использовать
		Успех = Успех Или ЛокальнаяПроверкаНеПроводилась(КодРезультатаЛокальнойПроверки);
		
		// Онлайн проверка
		ОнлайнПроверкаПроводилась = ОнлайнПроверкаПроводилась(ДанныеПроверки);
		Если ОнлайнПроверкаПроводилась Тогда
			
			Успех = ОнлайнПроверкаПройденаУспешно(ДанныеПроверки);
			
			КодРезультатаОнлайнПроверки = ДанныеПроверки["onlineCheckStatus"];
			ПредставлениеРезультатаОнлайнПроверки = СтатусОнлайнПроверки(КодРезультатаОнлайнПроверки);
			Результат.Вставить("КодРезультатаОнлайнПроверки"          , КодРезультатаОнлайнПроверки);
			Результат.Вставить("ПредставлениеРезультатаОнлайнПроверки", ПредставлениеРезультатаОнлайнПроверки);
			Статус = ?(Успех, ПредставлениеРезультатаОнлайнПроверки, "");
			
			КодОшибкиОнлайнПроверки = ДанныеПроверки["onlineCheckError"];
			Если ЕстьОшибкаОнлайнПроверки(КодОшибкиОнлайнПроверки) Тогда
				ПредставлениеОшибкиОнлайнПроверки = ОписаниеОшибкиОнлайнПроверки(КодОшибкиОнлайнПроверки);
				Результат.Вставить("КодОшибкиОнлайнПроверки"          , КодОшибкиОнлайнПроверки);
				Результат.Вставить("ПредставлениеОшибкиОнлайнПроверки", ПредставлениеОшибкиОнлайнПроверки);
				Статус = Статус + ?(ЗначениеЗаполнено(Статус), ". ", "") + ПредставлениеОшибкиОнлайнПроверки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("Успех", Успех);
	Результат.Вставить("Статус", Статус);
	Результат.Вставить("СтатусЛокальнойПроверки", КодРезультатаЛокальнойПроверки);
	Результат.Вставить("ОнлайнПроверкаПроводилась", ОнлайнПроверкаПроводилась);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнформацияРВ

Функция ПолучитьСостояниеРВ(ТранспортныйМодуль) Экспорт
	
	ЗапросСостояниеРВ = ТранспортМДЛПКлиентСервер.ДанныеHTTPЗапроса("GET");
	ЗапросСостояниеРВ.АдресЗапроса = ТранспортныйМодуль.ПрефиксВерсии + "state";
	
	Результат = ПередатьДанныеВРВ(ТранспортныйМодуль, ЗапросСостояниеРВ);
	Если Результат.Статус <> "Ошибка" Тогда
		Ответ = Результат.Данные;
		
		СостояниеРВ = Новый Структура;
		СостояниеРВ.Вставить("Состояние", Ответ["lifePhase"]);
		СостояниеРВ.Вставить("СостояниеОбработкиДанных", Ответ["processState"]);
		СостояниеРВ.Вставить("СостояниеЖурналаКМ", Ответ["logState"]);
		СостояниеРВ.Вставить("ДатаИстеченияСрокаСлужбыМБ", Ответ["expirationDate"]);
		Результат.Вставить("Данные", СостояниеРВ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОбУстройстве(ТранспортныйМодуль) Экспорт
	
	ЗапросИнформацияОбУстройстве = ТранспортМДЛПКлиентСервер.ДанныеHTTPЗапроса("GET");
	ЗапросИнформацияОбУстройстве.АдресЗапроса = ТранспортныйМодуль.ПрефиксВерсии + "deviceInfo";
	
	Результат = ПередатьДанныеВРВ(ТранспортныйМодуль, ЗапросИнформацияОбУстройстве);
	Если Результат.Статус <> "Ошибка" Тогда
		Ответ = Результат.Данные;
		
		Устройства = Новый Массив;
		Если Ответ["devices"] <> Неопределено Тогда
			Для Каждого ИнформацияОбУстройстве Из Ответ["devices"] Цикл
				
				Информация = Новый Структура;
				Информация.Вставить("ИдентификаторУстройства" , ИнформацияОбУстройстве["id"]);
				Информация.Вставить("ТипПодключения"          , ИнформацияОбУстройстве["connectionType"]);
				Информация.Вставить("Модель"                  , ИнформацияОбУстройстве["modelInfo"]);
				Информация.Вставить("ВерсияПО"                , ИнформацияОбУстройстве["softwareVersion"]);
				Информация.Вставить("СерийныйНомер"           , ИнформацияОбУстройстве["deviceSerialNumber"]);
				Информация.Вставить("СерийныйНомерМБ"         , ИнформацияОбУстройстве["moduleSerialNumber"]);
				Информация.Вставить("ДатаРегистрации"         , ИнформацияОбУстройстве["startDateRegistration"]);
				Информация.Вставить("ДатаОкончанияРегистрации", ИнформацияОбУстройстве["endDateRegistration"]);
				Информация.Вставить("ВремяДоБлокировки"       , ИнформацияОбУстройстве["timeBlock"]);
				
				Устройства.Добавить(Информация);
				
			КонецЦикла;
		КонецЕсли;
		
		Результат.Вставить("Данные", Устройства);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ВыполнитьМетодРВ(Знач ТранспортныйМодуль, Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(Параметры) <> Тип("Массив") И ТипЗнч(Параметры) <> Тип("ФиксированныйМассив") Тогда
		Параметры = Новый Массив;
	КонецЕсли;
	
	СписокПараметров = "";
	Для Индекс = 0 По Параметры.ВГраница() Цикл
		СписокПараметров = СписокПараметров + ", Параметры[" + Формат(Индекс, "ЧН=0; ЧГ=") + "]";
	КонецЦикла;
	
	Выражение = СтрШаблон("ТранспортМДЛПРВКлиентСервер.%1(ТранспортныйМодуль%2)", ИмяМетода, СписокПараметров);
	
	Возврат Вычислить(Выражение);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьРезультатОтправкиСообщения(ТранспортныйМодуль, Сообщение)
	
	Попытка
		
		Результат = ПолучитьСтатусЗадания(ТранспортныйМодуль, Сообщение.ИдентификаторЗапроса);
		Если Результат.Статус = "Ошибка" Тогда
			Если Результат.КодОшибки = 404 Тогда
				ТранспортМДЛПРВВызовСервера.УдалитьСообщениеИзОчереди(Сообщение.Ссылка);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Если Результат.Данные["status"] = "ready" Или Результат.Данные["status"] = "error" Тогда
			ТранспортМДЛПРВВызовСервера.ЗарегистрироватьКвитанциюСообщения(Сообщение, Результат.ОтветТранспортногоМодуля);
			ОтменитьЗадание(ТранспортныйМодуль, Сообщение.ИдентификаторЗапроса);
		КонецЕсли;
		
	Исключение
		Результат = ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
		Результат.Статус = "Ошибка";
		Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Возврат ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации();
	
КонецФункции

Функция ПередатьДанныеВРВ(ТранспортныйМодуль, ДанныеЗапроса)
	
	#Если ВебКлиент Тогда
		ВызватьИсключение НСтр("Работа с РВ в режиме Веб-клиента не поддерживается.");
		Возврат ТранспортМДЛПРВВызовСервера.ВыполнитьМетодРВ(ТранспортныйМодуль, "ПередатьДанныеВРВ", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗапроса));
	#Иначе
		
		ДобавитьОбщиеПараметрыЗапроса(ТранспортныйМодуль, ДанныеЗапроса);
		
		Результат = ТранспортМДЛПКлиентСервер.ВыполнитьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		
		Если Результат.Статус <> "Ошибка" Тогда
			Попытка
				Результат.Вставить("Данные", ТранспортМДЛПКлиентСервер.ПреобразоватьJSONВЗначение(Результат.ОтветТранспортногоМодуля));
			Исключение
				// Обработка не требуется
			КонецПопытки;
		КонецЕсли;
		
		Возврат Результат;
		
	#КонецЕсли
	
КонецФункции

Процедура ДобавитьОбщиеПараметрыЗапроса(ТранспортныйМодуль, ДанныеЗапроса)
	
	ИдентификаторУстройства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТранспортныйМодуль, "ИдентификаторУстройства");
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ДанныеЗапроса.АдресЗапроса = ДанныеЗапроса.АдресЗапроса + ?(СтрНайти(ДанныеЗапроса.АдресЗапроса, "?") = 0, "?", "&") + "deviceId=" + ИдентификаторУстройства;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		ТипДанныхЗапроса = ТипЗнч(ДанныеЗапроса.ТелоЗапроса);
		Если ТипДанныхЗапроса <> Тип("Строка") И ТипДанныхЗапроса <> Тип("ДвоичныеДанные") Тогда
			НастройкиСериализации = Новый НастройкиСериализацииJSON;
			НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Истина;
			НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
			НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
			ДанныеЗапроса.ТелоЗапроса = ТранспортМДЛПКлиентСервер.ПреобразоватьЗначениеВJSON(ДанныеЗапроса.ТелоЗапроса, НастройкиСериализации);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Функция УдалитьРазделителиСтрок(Данные)
	Возврат СтрЗаменить(СтрЗаменить(Данные, Символы.ПС, ""), Символы.ВК, "");
КонецФункции

Функция ПустоеВремяБлокировкиРВ()
	
	Возврат "T00:00:00Z";
	
КонецФункции

#Область СтатусыПроверок

// localCheckStatus
Функция СтатусЛокальнойПроверки(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Проверка не проводилась (для симметричной криптографицеской системы)'"));
	Статусы.Добавить(НСтр("ru = 'Код маркировки проверен, достоверный'"));
	Статусы.Добавить(НСтр("ru = 'Код маркировки проверен, недостоверный'"));
	Статусы.Добавить(НСтр("ru = 'Проверка не проводилась (криптографическая система асимметричная, но в МБ РВ нет ключа с идентификатором КПКИЗ)'"));
	Статусы.Добавить(НСтр("ru = 'Проверка не проводилась (так как криптохвост 44 символа)'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить статус локальной проверки. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

Функция ЛокальнаяПроверкаПройденаУспешно(Код) Экспорт
	Возврат Код = 1;
КонецФункции

Функция ЛокальнаяПроверкаНеПроводилась(Код) Экспорт
	Возврат Код = 0 Или Код = 3 Или Код = 4;
КонецФункции

// onlineCheckStatus
Функция ОнлайнПроверкаПроводилась(ДанныеПроверки) Экспорт
	
	Возврат ДанныеПроверки["saleAllowed"] <> Неопределено;
	
КонецФункции

Функция ОнлайнПроверкаПройденаУспешно(ДанныеПроверки) Экспорт
	
	Возврат ДанныеПроверки["saleAllowed"] = Истина;
	
КонецФункции

Функция СтатусОнлайнПроверки(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Прошла успешно'"));
	Статусы.Добавить(НСтр("ru = 'Криптографическая проверка не проводилась'"));
	Статусы.Добавить(НСтр("ru = 'Прошла не успешно'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить статус онлайн проверки. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

Функция КриптографическаяОнлайнПроверкаНеПроводилась(Код) Экспорт
	
	Возврат Код = 1;
	
КонецФункции

// onlineCheckError
Функция ОписаниеОшибкиОнлайнПроверки(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Нет ошибок'"));
	Статусы.Добавить(НСтр("ru = 'КИЗ отсутствует в базе АС «Серверы СКЗКМ» или ГИС МТ'"));
	Статусы.Добавить(НСтр("ru = 'Некорректный формат КИЗ'"));
	Статусы.Добавить(НСтр("ru = 'Не прошла криптографическая проверка КПКИЗ'"));
	Статусы.Добавить(НСтр("ru = 'КИЗ имеет в базе АС «Серверы СКЗКМ» статус не совместимый с запрашиваемым изменением'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить описание ошибки онлайн проверки. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

Функция ЕстьОшибкаОнлайнПроверки(Код) Экспорт
	
	Возврат Код <> 0;
	
КонецФункции

// deviceError
Функция ОписаниеОшибкиРВ(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Нет ошибок'"));
	Статусы.Добавить(НСтр("ru = 'Устройство недоступно'"));
	Статусы.Добавить(НСтр("ru = 'Устройство не функционирует'"));
	Статусы.Добавить(НСтр("ru = 'Отсутствует МБ РВ'"));
	Статусы.Добавить(НСтр("ru = 'Истек срок использования МБ РВ'"));
	Статусы.Добавить(НСтр("ru = 'МБ РВ блокирован'"));
	Статусы.Добавить(НСтр("ru = 'МБ РВ не функционален'"));
	Статусы.Добавить(НСтр("ru = 'РВ не зарегистрирован'"));
	Статусы.Добавить(НСтр("ru = 'Отсутствует связь с СЭ'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить описание ошибки РВ. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

Функция ЕстьОшибкаРВ(Код) Экспорт
	Возврат Код <> 0;
КонецФункции

// flcError
Функция ОписаниеОшибкиФЛК(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Нет ошибок'"));
	Статусы.Добавить(НСтр("ru = 'Не допустимое значение идентификатора применения (GS AI) в КМ'"));
	Статусы.Добавить(НСтр("ru = 'Не допустимые символы КМ'"));
	Статусы.Добавить(НСтр("ru = 'Не допустимое количество символов в составе идентификатора применения (GS AI)'"));
	Статусы.Добавить(НСтр("ru = 'Значение ТН ВЭД не относится к фармацевтической продукции'"));
	Статусы.Добавить(НСтр("ru = 'Недопустимая последовательность групп в КМ'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить описание ошибки ФЛК. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

Функция ЕстьОшибкаФЛК(Код) Экспорт
	Возврат Код <> 0;
КонецФункции

// registrationStatus
Функция СтатусРегистрацииКМвСЭ(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'КМ зарегистрирован'"));
	Статусы.Добавить(НСтр("ru = 'КМ не зарегистрирован'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить статус регистрации КМ на СЭ. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

// state
Функция СтатусКМ(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Признак ошибки'"));
	Статусы.Добавить(НСтр("ru = 'Сформирован'"));
	Статусы.Добавить(НСтр("ru = 'Готов'"));
	Статусы.Добавить(НСтр("ru = 'Выдан'"));
	Статусы.Добавить(НСтр("ru = 'Выпущен'"));
	Статусы.Добавить(НСтр("ru = 'Не использован'"));
	Статусы.Добавить(НСтр("ru = 'Упакован'"));
	Статусы.Добавить(НСтр("ru = 'Распакован'"));
	Статусы.Добавить(НСтр("ru = 'Выбыл'"));
	Статусы.Добавить(НСтр("ru = 'Выбыл через розничную сеть'"));
	Статусы.Добавить(НСтр("ru = 'В состоянии выбытия'"));
	Статусы.Добавить(НСтр("ru = 'Утерян'"));
	Статусы.Добавить(НСтр("ru = 'Оборот приостановлен'"));
	Статусы.Добавить(НСтр("ru = 'Оборот запрещен'"));
	Статусы.Добавить(НСтр("ru = 'Потреблен'"));
	Статусы.Добавить(НСтр("ru = 'Дублирован'"));
	Статусы.Добавить(НСтр("ru = 'Выбыл через оптовую сеть'"));
	
	Попытка
		Статус = Статусы[Код];
	Исключение
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить статус КМ. Код = %1'"), Строка(Код));
	КонецПопытки;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

Функция СтатусПроверкиСервером(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Прошла успешно'"));
	Статусы.Добавить(НСтр("ru = 'Не проводилась'"));
	Статусы.Добавить(НСтр("ru = 'Прошла не успешно'"));
	
	Возврат Статусы[Код];
	
КонецФункции

Функция СервернаПроверкаПройденаУспешно(Код) Экспорт
	Возврат Код = 0;
КонецФункции

Функция СервернаяПроверкаНеПроводилась(Код) Экспорт
	Возврат Код = 1;
КонецФункции

Функция ОписаниеОшибкиОтСервера(Код) Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(НСтр("ru = 'Статус успешно изменен'"));
	Статусы.Добавить(НСтр("ru = 'КИЗ отсутствует в базе АС «Серверы СКЗКМ» или ГИС МТ'"));
	Статусы.Добавить(НСтр("ru = 'Некорректный формат КИЗ'"));
	Статусы.Добавить(НСтр("ru = 'Не прошла криптографическая проверка КПКИЗ'"));
	Статусы.Добавить(НСтр("ru = 'КИЗ имеет в базе АС «Серверы СКЗКМ» статус не совместимый с запрашиваемым изменением'"));
	
	Возврат Статусы[Код];
	
КонецФункции

#КонецОбласти

#КонецОбласти
