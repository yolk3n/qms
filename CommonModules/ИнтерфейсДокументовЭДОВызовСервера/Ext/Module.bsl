
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметры просмотра электронного документа по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыОткрытияЭлектронногоДокумента
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыеПараметрыПросмотраЭлектронногоДокумента
Функция ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(Знач ОбъектУчета, Знач ПараметрыОткрытия) Экспорт
	
	Если ПараметрыОткрытия.НовыйДокумент Тогда
		ПараметрыПросмотра = ИнтерфейсДокументовЭДО.ПараметрыПросмотраНовогоЭлектронногоДокументаПоОбъектуУчета(
			ОбъектУчета, ПараметрыОткрытия);
	Иначе
		ПараметрыПросмотра = ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
			ОбъектУчета, ПараметрыОткрытия);
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// См. ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОписанию().
Функция ПараметрыПросмотраЭлектронногоДокументаПоОписанию(Знач ОписаниеЭлектронногоДокументаОбъектаУчета) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета);
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета()
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыОткрытияЭлектронногоДокумента
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра
Функция ПодготовитьДанныеДляПросмотра(Знач ОбъектУчета, Знач НастройкиФормирования, Знач ПараметрыОткрытия) Экспорт
	
	ОтборОписанияОбъектаУчета = Новый Структура;
	ОтборОписанияОбъектаУчета.Вставить("Направление", НастройкиФормирования.Направление);
	Если НастройкиФормирования.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ОтборОписанияОбъектаУчета.Вставить("Организация", НастройкиФормирования.НастройкиВнутреннегоЭДО.Организация);
		ОтборОписанияОбъектаУчета.Вставить("ВидДокумента", НастройкиФормирования.НастройкиВнутреннегоЭДО.ВидДокумента);
	Иначе
		ОтборОписанияОбъектаУчета.Вставить("Организация", НастройкиФормирования.НастройкиОтправки.Отправитель);
		ОтборОписанияОбъектаУчета.Вставить("Контрагент", НастройкиФормирования.НастройкиОтправки.Получатель);
		ОтборОписанияОбъектаУчета.Вставить("Договор", НастройкиФормирования.НастройкиОтправки.Договор);
		ОтборОписанияОбъектаУчета.Вставить("ВидДокумента", НастройкиФормирования.НастройкиОтправки.ВидДокумента);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчетаПоОтбору(ОбъектУчета, ОтборОписанияОбъектаУчета);
	
	Возврат ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета,
		 НастройкиФормирования, ПараметрыОткрытия);
	
КонецФункции

// Возвращает параметры открытия страницы опроса.
// 
// Возвращаемое значение:
//  Строка - параметры открытия страницы опроса.
//
Функция ПараметрыОткрытияСтраницыОпроса() Экспорт

	ШаблонКонфигурации = НСтр("ru = '%1 (%2)'");
	Конфигурация = СтрШаблон(ШаблонКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	
	СтрокаВозврата = "?conf=" + КодироватьСтроку(Конфигурация, СпособКодированияСтроки.КодировкаURL);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации <> Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата + "&login="
			+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	
	Возврат СтрокаВозврата;

КонецФункции

Функция ЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(Сообщение);
КонецФункции	

Функция ЕстьПравоЧтенияДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
КонецФункции

Функция ЕстьПравоОбработкиДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
КонецФункции

Функция ЕстьПравоНастройкиОбмена() Экспорт
	Возврат НастройкиЭДО.ЕстьПравоНастройкиОбмена();
КонецФункции

Функция ОтложеннаяОтправкаЭлектронныхДокументов() Экспорт
	Возврат НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
КонецФункции

Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(ВидДокумента);
КонецФункции

Процедура ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент);
КонецПроцедуры

Процедура ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий) Экспорт
	ИнтеграцияЭДО.ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий);	
КонецПроцедуры

Функция ИспользуетсяЭДОИВнутреннийЭДО() Экспорт	
	Возврат НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() И НастройкиЭДО.ИспользуютсяВнутренниеДокументы();	
КонецФункции

Функция СообщениеОтправителя(ЭлектронныйДокумент) Экспорт
	Возврат ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
КонецФункции

Функция КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета) Экспорт	
	Возврат ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);	
КонецФункции

Функция НастройкиОтправки(КлючНастроекОтправки) Экспорт	
	Возврат НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);	
КонецФункции

Функция ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета);
КонецФункции

Функция СостояниеОбъектаУчетаУстановлено(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.СостояниеОбъектаУчетаУстановлено(ОбъектУчета);	
КонецФункции

#Область Переформирование

Функция ПараметрыПереформированияДокумента(Сообщение) Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента(Сообщение);
КонецФункции

Функция ПереформироватьДокумент(Параметры, КонтекстДиагностики) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(Параметры.ЭлектронныйДокумент);
	
		Если Параметры.ТребуетсяФормированиеДокумента = Истина Тогда
			НаборДействий = Новый Соответствие;
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	
			ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
			ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
			ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета.Добавить(Параметры.ОбъектУчета);
			
			Если ЗначениеЗаполнено(Параметры.ПараметрыДействийПоЭДО.МаршрутыПодписанияОбъектов) Тогда
				ПараметрыВыполненияДействийПоЭДО.МаршрутыПодписанияОбъектов 
					= Параметры.ПараметрыДействийПоЭДО.МаршрутыПодписанияОбъектов;
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.ПараметрыДействийПоЭДО.ПодписантыОбъектов) Тогда
				ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов = Параметры.ПараметрыДействийПоЭДО.ПодписантыОбъектов;
			КонецЕсли;
			
			Если Параметры.Свойство("Настройки") Тогда
				ПараметрыВыполненияДействийПоЭДО.НастройкиОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.Настройки);
			КонецЕсли;
				
			Если Параметры.Свойство("ДопДанные") Тогда
				ПараметрыВыполненияДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.ДопДанные);
			КонецЕсли;
			
			Результат = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);
	
			Если ЗначениеЗаполнено(Результат.ОшибкиФормирования) Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
	
				АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(Параметры.ОбъектУчета);
				ОтборПоВидуДокумента = Новый Структура("ВидДокумента", Параметры.ВидСообщения);
				АктуальныеЭлектронныеДокументыПоВидуДокумента = АктуальныеЭлектронныеДокументы.НайтиСтроки(ОтборПоВидуДокумента);
				
				Для каждого СтрокаАктуальныйЭлектронныйДокумент Из АктуальныеЭлектронныеДокументыПоВидуДокумента Цикл
					АктуальныйЭлектронныйДокумент = СтрокаАктуальныйЭлектронныйДокумент.ЭлектронныйДокумент;
					ПакетыДокументовЭДО.ДобавитьДокументВПакет(Параметры.ИдентификаторПакета,
						АктуальныйЭлектронныйДокумент, КонтекстДиагностики);
				КонецЦикла;
	
			КонецЕсли;		
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
			ПакетыДокументовЭДО.УдалитьДокументИзПакета(Параметры.ИдентификаторПакета, Параметры.ЭлектронныйДокумент);
		КонецЕсли;
	
		Если Параметры.Свойство("ДопДанные") Тогда
			Параметры.ПараметрыДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.ДопДанные);
		КонецЕсли;
		
		Если Параметры.Свойство("Комментарий") Тогда
			ПараметрыДействия = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
			ПараметрыДействия.Комментарий = Параметры.Комментарий;
			Для Каждого Действие Из Параметры.ПараметрыДействийПоЭДО.НаборДействий Цикл
				Параметры.ПараметрыДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
					Действие.Ключ, ПараметрыДействия);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыДействийПоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ПараметрыДействийПоЭДО);
		Результат = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыДействийПоЭДО, КонтекстДиагностики);	
		
		Если ЗначениеЗаполнено(Результат.ОшибкиФормирования) Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение);
	
КонецФункции

Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено, ПараметрыПечати = Неопределено) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПредставлениеСообщения(Сообщение, СообщениеОтвета, ПараметрыПечати);
	
КонецФункции

Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
КонецФункции 

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

Функция СформироватьФайлыВыгрузкиЭДВФорматеPDF(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДВФорматеPDF(ЭлектронныеДокументы, ИдентификаторФормы);
	
КонецФункции

Функция СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(Знач ЭлектронныеДокументы, Знач ИдентификаторФормы) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(ЭлектронныеДокументы,
		ИдентификаторФормы);
	
КонецФункции

Функция СформироватьФайлыВыгрузкиЭДДляФНС(Знач ЭлектронныеДокументы) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДДляФНС(ЭлектронныеДокументы);
	
КонецФункции

#КонецОбласти

Функция РеквизитыДокументаПоФайлу(Знач ПараметрыФайла) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла = ПараметрыФайла.ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыФайла.АдресХранилища);
	
	Возврат ИнтерфейсДокументовЭДО.РеквизитыДокументаПоФайлу(ОписаниеФайла);
	
КонецФункции

Функция СоздатьЭлектронныйДокументПоФайлу(ПараметрыСоздания, ПараметрыФайла) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла = ПараметрыФайла.ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыФайла.АдресХранилища);
	
	Возврат ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
	
КонецФункции	

Функция ДоступныеКомандыПечатиОбъекта(Объект) Экспорт
	
	Команды =  ИнтеграцияЭДО.КомандыПечатиДляОтправкиНеформализованногоЭДО(Объект.Метаданные());
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Команды);
	
КонецФункции

Функция ПечатныеФормыДокументов(КомандаПечатиВФайл, ОбъектУчета, ТипФайлаТабличногоДокумента) Экспорт
	
	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента);
	
	РезультатПечати = УправлениеПечатью.НапечататьВФайл(КомандаПечатиВФайл, МассивОбъектовУчета, НастройкиСохранения);
	Если Не ЗначениеЗаполнено(РезультатПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатПечати);
	
КонецФункции

Функция КомандаПечатиОбъекта(Объект, Идентификатор) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.КомандаПечатиОбъекта(Объект, Идентификатор)
	
КонецФункции

Функция НайтиСоздатьВидВнутреннегоДокумента(Объект, Команда) Экспорт
	
	Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект)); 
	Возврат ЭлектронныеДокументыЭДО.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);
				
КонецФункции

Функция СуществуюНастройкиВнутреннегоЭДО(Организация, ВидДокумента) Экспорт
	Возврат ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО(Организация, ВидДокумента);	
КонецФункции

Функция ЕстьАктуальныеЭлектронныеДокументы(ОбъектыУчета, ВидВнутреннегоДокумента) Экспорт
	
	АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ОбъектыУчета);					
	Возврат ЗначениеЗаполнено(АктуальныеЭлектронныеДокументы.Найти(ВидВнутреннегоДокумента, "ВидДокумента"));
	
КонецФункции

Функция ОписаниеФайловДокументаПакета(ОписаниеФайла) Экспорт
	
	ДанныеПакета = Новый Структура;
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатРаспаковки = СинхронизацияЭДО.РаспаковатьФайлТранспортногоКонтейнера(ОписаниеФайла,
		КонтекстДиагностики);
		
	ДанныеФайлаКартинок = РезультатРаспаковки.Картинки;
	ДанныеПакета.Вставить("ДанныеФайлаКартинок", ДанныеФайлаКартинок);
	
	Для Каждого Документ Из РезультатРаспаковки.Метаданные.Документы Цикл
		ДанныеОсновногоФайла = Документ.ОписаниеДанных;
		ДанныеФайлаДопДанных = Документ.ОписаниеДополнительныхДанных;
	КонецЦикла;
	
	ДанныеПакета.Вставить("ДанныеОсновногоФайла", ДанныеОсновногоФайла);
	ДанныеПакета.Вставить("ДанныеФайлаДопДанных", ДанныеФайлаДопДанных);
	
	Возврат ДанныеПакета;
	
КонецФункции

Функция КонтрагентыДляОтправкиПриглашений(МассивСсылокНаОбъекты) Экспорт
	
	Если МассивСсылокНаОбъекты.Количество() = 0
		Или ИнтеграцияЭДО.ЭтоКонтрагент(МассивСсылокНаОбъекты[0])
		Или ИнтеграцияЭДО.ЭтоОрганизация(МассивСсылокНаОбъекты[0]) Тогда
		
		Возврат МассивСсылокНаОбъекты;
		
	Иначе
		
		СоответствиеКонтрагентов = ИнтеграцияЭДО.СвязанныеКонтрагенты(МассивСсылокНаОбъекты);
		
		МассивКонтрагентов = Новый Массив;
		
		Для Каждого СтрокаСоответствия Из СоответствиеКонтрагентов Цикл
			МассивКонтрагентов.Добавить(СтрокаСоответствия.Значение);
		КонецЦикла;
		
		Возврат МассивКонтрагентов;
		
	КонецЕсли;
	
КонецФункции

// См. РаботаСФайлами.ДанныеФайла.
// Возвращает структурированную информацию о файле. Используется в различных командах работы с файлами
// и как значение параметра ДанныеФайла других процедур и функций.
//
Функция ДанныеФайла(Знач ФайлСсылка,
                    Знач ИдентификаторФормы = Неопределено,
                    Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
                    Знач ДляРедактирования = Ложь) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(
		ФайлСсылка,
		ИдентификаторФормы,
		ПолучатьСсылкуНаДвоичныеДанные,
		ДляРедактирования);
	
	// Если имя файла слишком длинное, то сокращаем наименование
	Если Обработки.ФорматДоговорнойДокумент101.ЭтоФайлФормата(ДанныеФайла.ПолноеНаименованиеВерсии)
		И СтрДлина(ДанныеФайла.ПолноеНаименованиеВерсии) > 100 Тогда
		Префикс = Лев(ДанныеФайла.ПолноеНаименованиеВерсии, 9);
		ПостФикс = Строка(Новый УникальныйИдентификатор());
		ДанныеФайла.ПолноеНаименованиеВерсии = Префикс + "~" + ПостФикс;
	КонецЕсли;

	ЭлектронныеДокументыЭДО.ПодменитьФайлНаФайлСВизуализацией(ДанныеФайла, ИдентификаторФормы);	
		
	Возврат ДанныеФайла;

КонецФункции

// См. ЭлектронныеДокументыЭДО.ВыгрузкаДанныхВФайлДоступнаДляОбъектов
Функция ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов);
	
КонецФункции

Функция ДанныеТабличногоДокумента(Знач ТабличныйДокумент, Знач ТипФайла) Экспорт
	
	Поток = Новый ПотокВПамяти();
	ТабличныйДокумент.Записать(Поток, ТипФайла);
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти