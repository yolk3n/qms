
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Формирует наименование по шаблону
//
// Параметры
//  ШаблонНаименования - Строка - формула, по которой формируется наименование
//  Объект - объект, из реквизитов которого берутся значения операндов шаблона
//
// Возвращаемое значение
//  Строка - сформированное наименование
//
Функция НаименованиеПоШаблону(Знач ШаблонНаименования, Знач Объект, Знач СхемаКомпоновкиДанныхИлиАдрес = Неопределено, ПараметрыДанных = Неопределено, ВнешниеИсточникиДанных = Неопределено) Экспорт
	
	Наименование = "";
	Если ЗначениеЗаполнено(ШаблонНаименования) Тогда
		
		Попытка
			Операнды = КонструкторФормулБольничнаяАптекаКлиентСервер.ПолучитьОперандыФормулы(ШаблонНаименования);
			ЗначенияОперандов = ПолучитьЗначенияОперандов(Объект, Операнды, СхемаКомпоновкиДанныхИлиАдрес, ПараметрыДанных, ВнешниеИсточникиДанных);
			Наименование = КонструкторФормулБольничнаяАптекаКлиентСервер.ВычислитьФормулу(""""" + " + ШаблонНаименования, ЗначенияОперандов);
		Исключение
			СообщениеОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по заданному шаблону. Проверьте правильность шаблона.'");
			ВызватьИсключение СообщениеОбОшибке + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дерево операторов
#Область Операторы

// Формирует дерево значений с колонками Наименование, Оператор, Сдвиг
//
// Возвращаемое значение:
//  ДеревоЗначений
//
Функция ПолучитьПустоеДеревоОператоров() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов с колонками Наименование, Оператор, Сдвиг
//  Наименование - Строка - наименование группы дерева операторов
//
// Возвращаемое значение:
//  СтрокаДереваЗначений
//
Функция ДобавитьГруппуОператоров(Дерево, Наименование) Экспорт
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Наименование = Наименование;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием
//
// Параметры:
//  Дерево        - ДеревоЗначений - дерево операторов с колонками Наименование, Оператор, Сдвиг
//  Родитель      - СтрокаДереваЗначений - Группа операторов, в которую необходимо добавить оператор
//  Наименование  - Строка - наименование группы дерева операторов
//  Оператор      - Строка - Представление оператора на встроенном языке
//  Сдвиг         - Число - необходим для определения позиции курсора
//
// Возвращаемое значение:
//  СтрокаДереваЗначений
//
Функция ДобавитьОператор(Дерево, Родитель, Наименование, Оператор = Неопределено, Сдвиг = 0) Экспорт
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Оператор = ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг = Сдвиг;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Формирует дерево со стандартными операторами "+", "-", "*", "/"
//
// Возвращаемое значение:
//  ДеревоЗначений
//
Функция ПолучитьСтандартноеДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	ДобавитьГруппуРазделители(Дерево);
	ДобавитьГруппуСтандартныхОператоров(Дерево);
	ДобавитьГруппуЛогическихОператоров(Дерево);
	ДобавитьГруппуСтроковыеФункции(Дерево);
	
	ГруппаФункции = ДобавитьГруппуФункции(Дерево);
	ГруппаФункции.Наименование = НСтр("ru = 'Прочие функции'");
	ДобавитьОператор(Дерево, ГруппаФункции, НСтр("ru = 'Формат'"), НСтр("ru = 'Формат(,)'"), 2);
	
	Возврат Дерево;
	
КонецФункции

// Заполняет дерево операторов для конструктора формул.
//
// Параметры:
//  Параметры  - Структура - содержит виды операторов, которые необходимо добавить в дерево.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы, в которой выполняется действия, 
//                 необходим для корректного помещения во временное хранилище.
//
Функция ПостроитьДеревоОператоров(Параметры, УникальныйИдентификатор) Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	Если Параметры.Свойство("Разделители") И Параметры.Разделители Тогда
		ДобавитьГруппуРазделители(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("СтандартныеОператоры") И Параметры.СтандартныеОператоры Тогда
		ДобавитьГруппуСтандартныхОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("ЛогическиеОператоры") И Параметры.ЛогическиеОператоры Тогда
		ДобавитьГруппуЛогическихОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("СтроковыеФункции") И Параметры.СтроковыеФункции Тогда
		ДобавитьГруппуСтроковыеФункции(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("Функции") И Параметры.Функции Тогда
		ДобавитьГруппуФункции(Дерево);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти // Операторы

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначенияОперандов(Объект, Операнды, СхемаКомпоновкиДанныхИлиАдрес, ПараметрыДанных, ВнешниеИсточникиДанных)
	
	ЗначенияОперандов = Новый Соответствие;
	
	Если СхемаКомпоновкиДанныхИлиАдрес = Неопределено Тогда
		
		ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,ХранилищеЗначения,УникальныйИдентификатор");
		
		Для Каждого Операнд Из Операнды Цикл
			
			ЗначениеОперанда = Объект;
			
			// Разложим имя операнда на его составляющие (реквизиты и доп. реквизиты), разделенные символом "."
			// Ограничение ни имена доп. реквизитов: нельзя использовать символ ".", иначе будет ошибка расчета значения операнда
			РеквизитыОперанда = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Операнд, ".");
			
			Для СчетчикРеквизитов = 0 По РеквизитыОперанда.ВГраница() Цикл
				ИмяРеквизита = РеквизитыОперанда[СчетчикРеквизитов];
				
				Если СчетчикРеквизитов > 0 И Не ЗначениеЗаполнено(ЗначениеОперанда) Тогда
					// Если реквизит предыдущего уровня имеет пустое значение, то дальше нечего вычислять
					Прервать;
				КонецЕсли;
				
				Если НЕ ПримитивныеТипы.СодержитТип(ТипЗнч(ЗначениеОперанда)) Тогда
					ОбъектМетаданных = ЗначениеОперанда.Метаданные();
				Иначе
					// Ошибка в значении реквизита предыдущего уровня - у него нет метода Метаданные().
					// Например если значение имеет тип Строка, а у него пытаются получить какое-то свойство через "."
					ВызватьИсключениеПоОшибкеШаблонаНаименования(Операнд, ИмяРеквизита);
				КонецЕсли;
				
				Если ОбщегоНазначенияБольничнаяАптека.ЕстьРеквизитОбъекта(ИмяРеквизита, ОбъектМетаданных) Тогда
					
					// Это реквизит
					Если СчетчикРеквизитов > 0 Или ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеОперанда)) Тогда
						ЗначениеОперанда = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеОперанда, ИмяРеквизита);
					Иначе
						ЗначениеОперанда = ЗначениеОперанда[ИмяРеквизита];
					КонецЕсли;
					
				Иначе
					
					// Это доп. реквизит
					ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяРеквизита, Истина);
					
					Если НЕ ЗначениеЗаполнено(ДопРеквизит) Тогда
						// Ошибка в операнде - текущий реквизит не является не реквизитом предыдущего значения, и его не доп. реквизитом
						ВызватьИсключениеПоОшибкеШаблонаНаименования(Операнд, ИмяРеквизита);
					КонецЕсли;
					
					Если СчетчикРеквизитов > 0 Или ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеОперанда)) Тогда
						
						Запрос = Новый Запрос;
						Запрос.Текст =
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	ДополнительныеРеквизиты.Значение КАК Значение
						|ИЗ
						|	" + ОбъектМетаданных.ПолноеИмя() + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &Ссылка
						|	И ДополнительныеРеквизиты.Свойство = &Свойство";
						
						Запрос.УстановитьПараметр("Ссылка",   ЗначениеОперанда);
						Запрос.УстановитьПараметр("Свойство", ДопРеквизит);
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							ЗначениеОперанда = Выборка.Значение;
						Иначе
							ЗначениеОперанда = "";
						КонецЕсли;
						
					Иначе
						
						СтрокаДопРеквизита = ЗначениеОперанда.ДополнительныеРеквизиты.Найти(ДопРеквизит, "Свойство");
						ЗначениеОперанда   = ?(СтрокаДопРеквизита <> Неопределено, СтрокаДопРеквизита.Значение, "");
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			ЗначенияОперандов.Вставить(Операнд, ?(РеквизитыОперанда.Количество() > 0 И ЗначениеЗаполнено(ЗначениеОперанда), ЗначениеОперанда, ""));
			
		КонецЦикла;
		
	Иначе
		
		Если ЭтоАдресВременногоХранилища(СхемаКомпоновкиДанныхИлиАдрес) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанныхИлиАдрес);
		Иначе
			СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхИлиАдрес;
		КонецЕсли;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Для Каждого Операнд Из Операнды Цикл
			Элемент = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Элемент.Поле = Новый ПолеКомпоновкиДанных(Операнд);
			Элемент.Использование = Истина;
			Элемент.Заголовок = СтрЗаменить(Операнд, ".", "");
		КонецЦикла;
		
		Если ПараметрыДанных <> Неопределено Тогда
			Для Каждого ПараметрДанных Из ПараметрыДанных Цикл
				
				Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ПараметрДанных.Ключ);
				
				Если Параметр = Неопределено Тогда
					Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Добавить();
					Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрДанных.Ключ);
				КонецЕсли;
				
				Параметр.Значение = ПараметрДанных.Значение;
				Параметр.Использование = Истина;
				
			КонецЦикла;
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеИсточникиДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Если Результат.Количество() = 0 Тогда
			СообщениеОбОшибке = НСтр("ru='Ошибка получения значений операндов формулы.'");
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		Для Каждого Операнд Из Операнды Цикл
			
			ИмяКолонки = СтрЗаменить(Операнд, ".", "");
			Если Результат.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ИмяКолонки = СтрЗаменить(Операнд, ".", "_"); // поменялось поведение в 8.3.7
			КонецЕсли;
			ЗначениеОперанда = Результат[0][ИмяКолонки];
			
			ЗначенияОперандов.Вставить(Операнд, ЗначениеОперанда);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияОперандов;
	
КонецФункции

Процедура ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда, ИмяРеквизита = "")
	
	ШаблонСообщенияОбОшибке =
		НСтр("ru = 'Невозможно рассчитать наименование по шаблону.
				   |Ошибка в имени операнда ""%ИмяОперанда%"".'");
	ТекстСообщенияОбОшибке  =
		СтрЗаменить(ШаблонСообщенияОбОшибке, "%ИмяОперанда%", ИмяОперанда + ?(ИмяРеквизита = "", "", ":" + ИмяРеквизита));
	
	ВызватьИсключение ТекстСообщенияОбОшибке;
	
КонецПроцедуры

Функция ДобавитьГруппуРазделители(Дерево)
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Разделители");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/"                  , " + ""/"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "\"                  , " + ""\"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "|"                  , " + ""|"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "_"                  , " + ""_"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ","                  , " + "", "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "."                  , " + "". "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Пробел'"), " + "" "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "("                  , " + "" ("" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ")"                  , " + "") "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, """"                 , " + """""""" + ");
	
	Возврат ГруппаОператоров;
	
КонецФункции

Функция ДобавитьГруппуСтандартныхОператоров(Дерево)
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	Возврат ГруппаОператоров;
	
КонецФункции

Функция ДобавитьГруппуЛогическихОператоров(Дерево)
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И'")     , " " + НСтр("ru='И'")      + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ'")   , " " + НСтр("ru='ИЛИ'")    + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ'")    , " " + НСтр("ru='НЕ'")     + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА'"), " " + НСтр("ru='ИСТИНА'") + " ");
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ'")  , " " + НСтр("ru='ЛОЖЬ'")   + " ");
	
	Возврат ГруппаОператоров;
	
КонецФункции

Функция ДобавитьГруппуФункции(Дерево)
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'")                 , НСтр("ru='Макс(,)'"), 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'")                  , НСтр("ru='Мин(,)'"),  2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление'")               , НСтр("ru='Окр(,)'"),  2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'")              , НСтр("ru='Цел()'"),   1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'")                  , "?(,,)",              3);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Предопределенное значение'"), НСтр("ru='ПредопределенноеЗначение()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Значение заполнено'")       , НСтр("ru='ЗначениеЗаполнено()'"), 1);
	
	Возврат ГруппаОператоров;
	
КонецФункции

Функция ДобавитьГруппуСтроковыеФункции(Дерево)
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, НСтр("ru = 'Строковые функции'"));
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'ВРег'")       , НСтр("ru = 'ВРег()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Лев'")        , НСтр("ru = 'Лев(,)'"), 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'НРег'")       , НСтр("ru = 'НРег()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'Прав'")       , НСтр("ru = 'Прав(,)'"), 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'СокрЛ'")      , НСтр("ru = 'СокрЛ()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'СокрЛП'")     , НСтр("ru = 'СокрЛП()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'СокрП'")      , НСтр("ru = 'СокрП()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'ТРег'")       , НСтр("ru = 'ТРег()'"), 1);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'СтрЗаменить'"), НСтр("ru = 'СтрЗаменить(,,)'"), 3);
	ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru = 'СтрДлина'")   , НСтр("ru = 'СтрДлина()'"), 1);
	
	Возврат ГруппаОператоров;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
