////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотКлиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Открывает форму выбора пользователей в разрезе подразделений и помещает выбранного пользователя в реквизит формы.
//
// Параметры:
//   Реквизит - Строка - имя реквизита формы, в который будет помещен выбранный пользователь.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора пользователя.
//
Процедура ВыбратьПользователяИзДереваПодразделений(Реквизит, ФормаВладелец) Экспорт
	
	ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборПользователяСПодразделениями";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Реквизит", Реквизит);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьПользователяИзДереваПодразделенийЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		ПараметрыОповещения);
	
	ОткрытьФорму(ИмяФормы, , ФормаВладелец,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму для указания значения реквизита составного типа.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой осуществляется работа с реквизитом
//     и из которой вызывается форма заполнения.
//   ТекущиеДанные - ДанныеФормыЭлементКоллекции
//   Реквизит - Строка - имя реквизита из ТекущиеДанные.
//   СтандартнаяОбработка - Булево- параметр обработки, используемый в обработчике на форме,
//     из которой вызывается заполнение значения доп. реквизита.
//
Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблице(Форма, ТекущиеДанные, Реквизит, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = ТекущиеДанные[Реквизит + "СписокТипов"];
	
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхТипов.Количество() > 1 Тогда
		ЗаголовокФормы = НСтр("ru = 'Выбор типа данных'");
		ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТипов, ЗаголовокФормы);
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОдногоТипаИзСоставногоТипа";
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВыборТипаЗавершение",
			ИнтеграцияС1СДокументооборотКлиент,
			ПараметрыОповещения);
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма,,,, Оповещение);
	Иначе
		ИмяТипа = СписокДоступныхТипов[0].Значение.XDTOClassName;
		ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеОбработка(ИмяТипа, Форма, ТекущиеДанные, Реквизит);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает выполнение подключаемой команды интеграции после проверки подключения.
//
// Параметры:
//   Команда - КомандаФормы - вызванная команда.
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Источник - ДанныеФормыСтруктура
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(Команда, Форма, Источник) Экспорт
	
	Если Команда.Имя = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты" Тогда
		УказатьТрудозатраты(Источник, Форма);
		
	ИначеЕсли Команда.Имя = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж" Тогда
		ПереключитьХронометраж(Источник, Форма);
		
	ИначеЕсли Команда.Имя = "ИнтеграцияС1СДокументооборотом_Файлы" Тогда
		Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			Ссылка = Источник.Ссылка;
		Иначе
			Если Источник.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Ссылка = Неопределено;
			Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
				Ссылка = Источник.ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьПрисоединенныеФайлы(
			Ссылка,,,
			Форма,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает ID и Тип при очистке реквизита объекта Документооборота на форме.
//
// Параметры:
//   Реквизит - Строка - имя реквизита формы.
//   ФормаВладелец - ФормаКлиентскогоПриложения - управляемая форма, содержащая очищаемые реквизиты.
//
Процедура ОчиститьСсылочныйРеквизит(Реквизит, ФормаВладелец) Экспорт
	
	ФормаВладелец[Реквизит + "ID"] = "";
	ФормаВладелец[Реквизит + "Тип"] = "";
	ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

// Устанавливает выбранное значение в элемент списка.
//
// Параметры:
//   ЭлементСписок - ТаблицаФормы - элемент управляемой формы.
//   ВыбранноеЗначение - Структура:
//     * ID - Строка - идентификатор объекта.
//     * type - Строка - тип объекта.
//     * name - Строка - представление объекта.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается метод.
//
Процедура ПрименитьВыборЗначенияРеквизитаВСписке(ЭлементСписок, ВыбранноеЗначение,
		СтандартнаяОбработка, ФормаВладелец) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЭлементСписок.ТекущиеДанные["Значение"] = ВыбранноеЗначение.Name;
		ЭлементСписок.ТекущиеДанные["ЗначениеID"] = ВыбранноеЗначение.ID;
		ЭлементСписок.ТекущиеДанные["ЗначениеТип"] = ВыбранноеЗначение.type;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Создает оповещение при записи документов Документооборота.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//
Процедура Оповестить_ЗаписьДокумента(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("name", Форма.Представление);
	ПараметрыОповещения.Вставить("ID", Форма.ID);
	ПараметрыОповещения.Вставить("type", Форма.Тип);
	ПараметрыОповещения.Вставить("documentType", Форма.ВидДокумента);
	ПараметрыОповещения.Вставить("ВнешнийОбъект", Форма.ВнешнийОбъект);
	
	Оповестить("Запись_ДокументооборотДокумент", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

// Создает оповещение при записи бизнес-процессов Документооборота.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса Документооборота.
//   Стартован - Булево - признак, указывающий запущен ли бизнес-процесс.
//
Процедура Оповестить_ЗаписьБизнесПроцесса(Форма, Стартован) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", Форма.ID);
	ПараметрыОповещения.Вставить("Стартован", Стартован);
	
	// Соберем предметы.
	Предметы = Новый Массив;
	Если Форма.ДоступнаМультипредметность Тогда
		Для Каждого СтрокаПредмета Из Форма.Предметы Цикл
			Если СтрокаПредмета.РольПредмета = "Основной" Тогда //@NON-NLS-1
				Предмет = Новый Структура;
				Предмет.Вставить("ID", СтрокаПредмета.ПредметID);
				Предмет.Вставить("Тип", СтрокаПредмета.ПредметТип);
				Предметы.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
	Иначе // один предмет
		Предмет = Новый Структура;
		Предмет.Вставить("ID", Форма.ПредметID);
		Предмет.Вставить("Тип", Форма.ПредметТип);
		Предметы.Добавить(Предмет);
	КонецЕсли;
	ПараметрыОповещения.Вставить("Предметы", Предметы);
	
	Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, Форма.ВладелецФормы);

КонецПроцедуры

// Создает оповещение при записи исходящего письма Документооборота.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма исходящего письма Документооборота.
//
Процедура Оповестить_ЗаписьИсходящегоПисьма(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", Форма.ID);
	ПараметрыОповещения.Вставить("ПредметID", Форма.ПредметID);
	ПараметрыОповещения.Вставить("ПисьмоОснованиеID",Форма.ПисьмоОснованиеID);
	
	Оповестить("Запись_ДокументооборотИсходящееПисьмо", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

// Создает оповещение при записи объекта Документооборота.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта Документооборота.
//   ВнешнийОбъект - ЛюбаяСсылка
//
Процедура Оповестить_ЗаписьОбъекта(Форма, ВнешнийОбъект = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("name", Форма.Представление);
	ПараметрыОповещения.Вставить("ID", Форма.ID);
	ПараметрыОповещения.Вставить("type", Форма.Тип);
	ПараметрыОповещения.Вставить("ВнешнийОбъект", ВнешнийОбъект);
	
	Оповестить("Запись_ДокументооборотОбъект", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

// Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаЗавершение", ИнтеграцияС1СДокументооборотКлиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ФормаВладелец[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Обработка выбора значения из списка.
//
Процедура ВыбратьЗначениеИзСпискаЗавершение(Результат, Параметры) Экспорт
	
	ФормаВладелец = Параметры.ФормаВладелец;
	Реквизит = Параметры.Реквизит;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаЗавершение", Реквизит, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора значения реквизита в таблице из списка объектов документооборота.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ТекущиеДанные - ДанныеФормыЭлементКоллекции
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСпискаВТаблице(ТипОбъектаВыбора, Реквизит, ТекущиеДанные, ФормаВладелец,
		Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ИнтеграцияС1СДокументооборотКлиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ТекущиеДанные[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Обработка выбора значения в таблице из списка.
//
Процедура ВыбратьЗначениеИзСпискаВТаблицеЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные[Реквизит] = Результат.РеквизитПредставление;
		ТекущиеДанные[Реквизит + "ID"] = Результат.РеквизитID;
		ТекущиеДанные[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("Данные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Результат", Результат);
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ПараметрыОповещения, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает список выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//   ЭтоТаблица - Булево - указывает что значение выбирается в табличной части.
//   Элемент - ПолеФормы - элемент формы, в котором выбирается значение.
//
Процедура ВыбратьЗначениеИзВыпадающегоСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец,
		Отбор = Неопределено, ЭтоТаблица = Ложь, Элемент = Неопределено) Экспорт
	
	СписокВыбора = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗначенияДляВыбора(
		ТипОбъектаВыбора, Отбор);
	
	Если ЭтоТаблица Тогда
		ТекущееЗначение = Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"];
	Иначе
		ТекущееЗначение = ФормаВладелец[Реквизит + "ID"];
	КонецЕсли;
	
	НачальноеЗначение = Неопределено;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Если ЭлементСписка.Значение.РеквизитID = ТекущееЗначение Тогда
			НачальноеЗначение = ЭлементСписка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Реквизит", Реквизит);
	ДополнительныеПараметры.Вставить("ФормаВладелец", ФормаВладелец);
	ДополнительныеПараметры.Вставить("ЭтоТаблица", ЭтоТаблица);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзВыпадающегоСпискаЗавершение",
		ИнтеграцияС1СДокументооборотКлиент, ДополнительныеПараметры);
	
	Если НачальноеЗначение = Неопределено Тогда
		ФормаВладелец.ПоказатьВыборИзСписка(
			Оповещение,
			СписокВыбора,
			?(ЭтоТаблица,Элемент,ФормаВладелец[Реквизит]));
		
	Иначе
		ФормаВладелец.ПоказатьВыборИзСписка(
			Оповещение,
			СписокВыбора,
			?(ЭтоТаблица,Элемент,ФормаВладелец[Реквизит]),
			НачальноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора значения из выпадающего списка.
//
// Параметры:
//   Результат - Произвольный
//   Параметры - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * Элемент - ТаблицаФормы
//
Процедура ВыбратьЗначениеИзВыпадающегоСпискаЗавершение(Результат, Параметры) Экспорт
	
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	ЭтоТаблица = Параметры.ЭтоТаблица;
	Элемент = Параметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			Если Не ЭтоТаблица Тогда
				ФормаВладелец[Реквизит] = Результат.Значение.РеквизитПредставление;
				ФормаВладелец[Реквизит + "ID"] = Результат.Значение.РеквизитID;
				ФормаВладелец[Реквизит + "Тип"] = Результат.Значение.РеквизитТип;
			Иначе
				Элемент.Родитель.ТекущиеДанные[Реквизит] = Результат.Значение.РеквизитПредставление;
				Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = Результат.Значение.РеквизитID;
				Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = Результат.Значение.РеквизитТип;
			КонецЕсли;
			ФормаВладелец.Модифицированность = Истина;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Реквизит", Реквизит);
			ПараметрыОповещения.Вставить("ЭтоТаблица", ЭтоТаблица);
			ПараметрыОповещения.Вставить("Элемент", Элемент);
			
			Оповестить("Документооборот_ВыбратьЗначениеИзВыпадающегоСпискаЗавершение",
				ПараметрыОповещения, ФормаВладелец);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начинает процесс выбора объекта ДО указанного типа, возвращая результат вызовом оповещения.
//
// Параметры:
//   ОписаниеОповещения - ОписаниеОповещения - вызывается после завершения выбора с передачей структуры,
//      описывающей выбранный объект.
//   ТипОбъектаВыбора - Строка - тип выбираемого объекта (XDTO, например, "DMCorrespondent").
//   Отбор - Структура - накладываемый отбор.
//   ВыбранноеЗначение - Строка - идентификатор ранее выбранного значения.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызван выбор.
//
Процедура ВыбратьЗначениеПоТипуОбъекта(ОписаниеОповещения, ТипОбъектаВыбора, Отбор = Неопределено,
		ВыбранноеЗначение = "", ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	СоответствиеЗаголовков = Новый Соответствие;
	СоответствиеЗаголовков.Вставить("DMFile", 			НСтр("ru = 'Выбор файла'"));
	СоответствиеЗаголовков.Вставить("DMProject", 		НСтр("ru = 'Выбор проекта'"));
	СоответствиеЗаголовков.Вставить("DMWorkType", 		НСтр("ru = 'Выбор вида работ'"));
	СоответствиеЗаголовков.Вставить("DMProjectTask", 	НСтр("ru = 'Выбор проектной задачи'"));
	СоответствиеЗаголовков.Вставить("DMFileFolder", 	НСтр("ru = 'Выбор папки файлов'"));
	СоответствиеЗаголовков.Вставить("DMOrganization", 	НСтр("ru = 'Выбор организации'"));
	СоответствиеЗаголовков.Вставить("DMUser", 			НСтр("ru = 'Выбор пользователя'"));
	СоответствиеЗаголовков.Вставить("DMActivityMatter", НСтр("ru = 'Выбор вопроса деятельности'"));
	СоответствиеЗаголовков.Вставить("DMCurrency", 		НСтр("ru = 'Выбор валюты'"));
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
		СоответствиеЗаголовков.Вставить("DMCorrespondent", 	НСтр("ru = 'Выбор корреспондента'"));
	Иначе
		СоответствиеЗаголовков.Вставить("DMCorrespondent", 	НСтр("ru = 'Выбор контрагента'"));
	КонецЕсли;
	
	СоответствиеЗаголовков.Вставить("DMContactPerson", 	НСтр("ru = 'Выбор контактного лица'"));
	СоответствиеЗаголовков.Вставить("DMSubdivision", 	НСтр("ru = 'Выбор подразделения'"));
	СоответствиеЗаголовков.Вставить("DMAccessLevel", 	НСтр("ru = 'Выбор грифа доступа'"));
	СоответствиеЗаголовков.Вставить("DMPartyName", 		НСтр("ru = 'Выбор наименования стороны'"));
	СоответствиеЗаголовков.Вставить("DMProduct", 		НСтр("ru = 'Выбор номенклатуры'"));
	СоответствиеЗаголовков.Вставить("DMRelationType", 	НСтр("ru = 'Выбор типа связи'"));
	СоответствиеЗаголовков.Вставить("DMPrivatePerson", 	НСтр("ru = 'Выбор физического лица'"));
	СоответствиеЗаголовков.Вставить("DMDocumentStatus", НСтр("ru = 'Выбор состояния документа'"));
	СоответствиеЗаголовков.Вставить("DMDeliveryMethod", НСтр("ru = 'Выбор способа доставки'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocument", НСтр("ru = 'Выбор внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMIncomingDocument", НСтр("ru = 'Выбор входящего документа'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingDocument", НСтр("ru = 'Выбор исходящего документа'"));
	СоответствиеЗаголовков.Вставить("DMIncomingDocumentType", 	НСтр("ru = 'Выбор вида входящего документа'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingDocumentType", 	НСтр("ru = 'Выбор вида исходящего документа'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocumentType", 	НСтр("ru = 'Выбор вида внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocumentFolder", НСтр("ru = 'Выбор папки внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMProlongationProcedure", 	НСтр("ru = 'Выбор способа продления'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessOrderTemplate", 		  НСтр("ru = 'Выбор шаблона поручения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessConsiderationTemplate", НСтр("ru = 'Выбор шаблона рассмотрения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessRegistrationTemplate",  НСтр("ru = 'Выбор шаблона регистрации'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessApprovalTemplate", 	  НСтр("ru = 'Выбор шаблона согласования'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessConfirmationTemplate",  НСтр("ru = 'Выбор шаблона утверждения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessPerformanceTemplate",   НСтр("ru = 'Выбор шаблона исполнения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessAcquaintanceTemplate",  НСтр("ru = 'Выбор шаблона ознакомления'"));
	СоответствиеЗаголовков.Вставить("DMCompoundBusinessProcessTemplate", 	  НСтр("ru = 'Выбор шаблона составного бизнес-процесса'"));
	СоответствиеЗаголовков.Вставить("DMComplexBusinessProcessTemplate", 	  НСтр("ru = 'Выбор шаблона комплексного бизнес-процесса'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessImportance", 			  НСтр("ru = 'Выбор варианта важности'"));
	
	СоответствиеЗаголовков.Вставить("DMIncomingEMail", НСтр("ru = 'Выбор входящего письма'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingEMail", НСтр("ru = 'Выбор исходящего письма'"));
	СоответствиеЗаголовков.Вставить("DMDailyReport", НСтр("ru = 'Выбор ежедневного отчета'"));
	
	ПараметрыФормы.Вставить("Заголовок", СоответствиеЗаголовков.Получить(ТипОбъектаВыбора));
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ВыбранноеЗначение);
	
	// В новых версиях доступен выбор объекта поиском.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.6.1")
			И (ТипОбъектаВыбора = "DMIncomingDocument"
				Или ТипОбъектаВыбора = "DMInternalDocument"
				Или ТипОбъектаВыбора = "DMOutgoingDocument"
				Или ТипОбъектаВыбора = "DMCorrespondent") Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОбъектаПоиском",
			ПараметрыФормы,
			ФормаВладелец,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе // В старых версиях используем простые формы.
		// Получение подпапок произвольного типа.
		Если ТипОбъектаВыбора = "DMInternalDocument"
				И ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборВнутреннегоДокумента",
				ПараметрыФормы,
				ФормаВладелец,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
				ПараметрыФормы,
				ФормаВладелец,
				Новый УникальныйИдентификатор,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после переключения хронометража в форме объекта ИС.
//
Процедура УстановитьПометкуКнопкиПереключитьХронометраж(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Истина Тогда
		Если ПараметрыОповещения.Найти("ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж") <> Неопределено Тогда
			ПараметрыОповещения.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает длительность работы в секундах от начала события до текущей даты.
//
// Параметры:
//   ДатаНачалаХронометража - Дата - дата начала хронометраже.
//
// Возвращаемое значение:
//   Число - длительность работы в секундах.
//
Функция ПолучитьДлительностьРаботы(ДатаНачалаХронометража) Экспорт
	
	ДлительностьРаботы = 0;
	
	Если ДатаНачалаХронометража <> '00010101' Тогда
		СегодняшнийДень = НачалоДня(ТекущаяДата()); // Использование оправдано: расчет длительности.
		ДеньНачала = НачалоДня(ДатаНачалаХронометража);
		
		Если ДеньНачала = СегодняшнийДень Тогда
			КонецХронометража = ТекущаяДата(); // Использование оправдано: расчет длительности.
			ДлительностьРаботы = КонецХронометража - ДатаНачалаХронометража;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДлительностьРаботы;
	
КонецФункции

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//   ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//     связанный объект следует создать молча. В случае ошибок записи форма все равно будет открыта.
//
Процедура НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения, ОткрытьФорму = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ОткрытьФорму", ОткрытьФорму);
	
	Правила = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиСоздатьПодходящиеПравила(ОбъектИС);
	
	Если Правила.Количество() = 1 Тогда
		
		НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правила[0], Параметры);
		
	ИначеЕсли Правила.Количество() = 0 Тогда
		
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораТипа",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Создать в 1С:Документообороте'"));
		ПараметрыФормы.Вставить("ЗаголовокКоманды", НСтр("ru = 'Создать'"));
		ПараметрыФормы.Вставить("ОбъектИС", ОбъектИС);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаОбъектаДокументооборота",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		
	Иначе // несколько правил, требуется выбор пользователя
		
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание объекта ДО после выбора типа.
//
// Параметры:
//   Тип - Строка - тип создаваемого объекта, например, "DMInternalDocument".
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//       связанный объект следует создать молча.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораТипа(Тип, Параметры) Экспорт
	
	Если ТипЗнч(Тип) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ОбъектИС);
	
	Если Тип = "DMIncomingDocument" Тогда
		ИмяФормы = "ВходящийДокумент";
	ИначеЕсли Тип = "DMOutgoingDocument" Тогда
		ИмяФормы = "ИсходящийДокумент";
	ИначеЕсли Тип = "DMInternalDocument" Тогда
		ИмяФормы = "ВнутреннийДокумент";
	ИначеЕсли Тип = "DMCorrespondent" Тогда
		ИмяФормы = "Контрагент";
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма." + ИмяФормы,
		ПараметрыФормы,,Параметры.ОбъектИС,,,Параметры.ОписаниеОповещения);
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   Правило - Структура - подходящее правило:
//     Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом.
//     ТипОбъектаИС - Строка.
//     ТипОбъектаДО - Строка.
//     ПредставлениеОбъектаИС - Строка.
//     ПредставлениеОбъектаДО - Строка.
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//       связанный объект следует создать молча.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правило, Параметры) Экспорт
	
	Если ТипЗнч(Правило) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОткрытьФорму Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ОбъектИС);
		ПараметрыФормы.Вставить("Правило", Правило.Ссылка);
		
		Если Правило.ТипОбъектаДО = "DMIncomingDocument" Тогда
			ИмяФормы = "ВходящийДокумент";
		ИначеЕсли Правило.ТипОбъектаДО = "DMOutgoingDocument" Тогда
			ИмяФормы = "ИсходящийДокумент";
		ИначеЕсли Правило.ТипОбъектаДО = "DMInternalDocument" Тогда
			ИмяФормы = "ВнутреннийДокумент";
		ИначеЕсли Правило.ТипОбъектаДО = "DMCorrespondent" Тогда
			ИмяФормы = "Контрагент";
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма." + ИмяФормы,
			ПараметрыФормы,,Параметры.ОбъектИС,,,Параметры.ОписаниеОповещения);
		
	Иначе // без открытия формы
		
		ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьОбъектДОПоПравилу(
			Параметры.ОбъектИС,
			Правило.Ссылка);
			
		Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // сообщение об ошибке
			
			Параметры.Вставить("Правило", Правило.Ссылка);
			Параметры.Вставить("ТипОбъектаДО", Правило.ТипОбъектаДО);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"НачатьСозданиеСвязанногоОбъектаДОПослеПредупреждения",
				ИнтеграцияС1СДокументооборотКлиент,
				Параметры);
			
			ПоказатьПредупреждение(ОписаниеОповещения, ОбъектДОИлиСообщение,,
				НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
			
		Иначе // структура с описанием созданного объекта результата
			
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОбъектДОИлиСообщение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание связанного объекта ДО после показа предупреждение о невозможности записи
// автоматически созданного объекта. Открывает его форму для интерактивного заполнения.
//
// Параметры:
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//       связанный объект следует создать молча.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеПредупреждения(Параметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ОбъектИС);
	ПараметрыФормы.Вставить("Правило", Параметры.Правило);
	
	Если Параметры.ТипОбъектаДО = "DMIncomingDocument" Тогда
		ИмяФормы = "ВходящийДокумент";
	ИначеЕсли Параметры.ТипОбъектаДО = "DMOutgoingDocument" Тогда
		ИмяФормы = "ИсходящийДокумент";
	ИначеЕсли Параметры.ТипОбъектаДО = "DMInternalDocument" Тогда
		ИмяФормы = "ВнутреннийДокумент";
	ИначеЕсли Параметры.ТипОбъектаДО = "DMCorrespondent" Тогда
		ИмяФормы = "Контрагент";
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма." + ИмяФормы,
		ПараметрыФормы,,Параметры.ОбъектИС,,,Параметры.ОписаниеОповещения);
	
КонецПроцедуры

// Создает объект ИС по данным формы объекта ДО.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта Документооборота или иная форма, требующая оповещения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - используемое правило.
//
Процедура СоздатьИнтегрированныйОбъектПоДаннымФормы(Форма, Правило) Экспорт
	
	СоздатьИнтегрированныйОбъектПоПравилу(Форма, Правило, Форма.Тип, Форма.ID);

КонецПроцедуры

// Создает объект ИС по указанному объекту ДО и известному типу.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта ДО или иная форма, требующая оповещения.
//   ТипОбъектаИС - Строка - тип объекта ИС.
//   ТипОбъектаДО - Строка - тип объекта ДО.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектПоТипу(Форма, ТипОбъектаИС, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	
	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,
		ТипОбъектаИС,
		ТипОбъектаДО,
		ИдентификаторОбъектаДО);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ТипОбъектаДО", ТипОбъектаДО);
	ПараметрыОповещения.Вставить("ИдентификаторОбъектаДО", ИдентификаторОбъектаДО);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьИнтегрированныйОбъектПоТипуПослеВыбораПравила",
		ИнтеграцияС1СДокументооборотКлиент,
		ПараметрыОповещения);
	
	Если Правила.Количество() = 1 Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Правила[0]);
		
	ИначеЕсли Правила.Количество() = 0 Тогда
		
		СоздатьИнтегрированныйОбъектБезПравила(Форма, ТипОбъектаИС, ТипОбъектаДО, ИдентификаторОбъектаДО);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		ПараметрыФормы.Вставить("СозданиеОбъектаИС", Истина);
		
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание объекта ИС при неоднозначности правил после выбора правила.
//
// Параметры:
//   Результат - Структура:
//     * Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - выбранное правило.
//   Параметры - Структура:
//     * Форма - ФормаКлиентскогоПриложения - форма объекта ДО или иная форма, требующая оповещения.
//     * ТипОбъектаДО - Строка - тип объекта ДО.
//     * ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектПоТипуПослеВыбораПравила(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьИнтегрированныйОбъектПоПравилу(
		Параметры.Форма,
		Результат.Ссылка,
		Параметры.ТипОбъектаДО,
		Параметры.ИдентификаторОбъектаДО);
	
КонецПроцедуры

// Создает объект ИС по указанному объекту ДО, заполняет его и устанавливает связь.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта ДО или иная форма, требующая оповещения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - используемое правило.
//   ТипОбъектаДО - Строка - тип объекта ДО.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектПоПравилу(Форма, Правило, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	
	ДанныеЗаполнения = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеЗаполненияИнтегрируемогоОбъекта(
		Правило.УникальныйИдентификатор(),
		ТипОбъектаДО,
		ИдентификаторОбъектаДО);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьИнтегрированныйОбъектИзДанныхЗаполнения(
		ДанныеЗаполнения,
		Форма);
	
КонецПроцедуры

// Создает объект ИС по указанному объекту ДО, заполняет его и устанавливает связь.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма объекта ДО или иная форма, требующая оповещения.
//   ТипОбъектаИС - Строка - полное имя типа объекта ИС.
//   ТипОбъектаДО - Строка - тип объекта ДО.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектБезПравила(Форма, ТипОбъектаИС, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО", ТипОбъектаДО);
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО", ИдентификаторОбъектаДО);
	
	ИмяФормы = ТипОбъектаИС + ".ФормаОбъекта";
	
	ФормаОбъекта = ОткрытьФорму(ИмяФормы,
		ПараметрыФормы,
		Форма,
		ИдентификаторОбъектаДО,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект1СДокументооборота", Новый Структура);
	ПараметрыОповещения.Объект1СДокументооборота.Вставить("ID", ИдентификаторОбъектаДО);
	ПараметрыОповещения.Объект1СДокументооборота.Вставить("Тип", ТипОбъектаДО);
	ПараметрыОповещения.Вставить("ФормаОбъекта", ФормаОбъекта);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьИнтегрированныйОбъектЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		ПараметрыОповещения);
	
	ФормаОбъекта.ОписаниеОповещенияОЗакрытии = Оповещение;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подходящих правил не найдено.'"));
	
КонецПроцедуры

// Вызывается при выборе автоматической настройки интеграции.
//
// Параметры:
//   ИмяТипаОбъекта - Строка - полное имя типа объекта ИС, как в метаданных.
//
Процедура НачатьАвтоматическуюНастройкуИнтеграции(ИмяТипаОбъекта) Экспорт
	
	СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(ИмяТипаОбъекта);
	
	Если СозданныеПравила.Количество() > 0 Тогда
		
		Оповестить("ИнтеграцияС1СДокументооборотом_СозданоПравило", СозданныеПравила);
		
		Для Каждого СозданноеПравило Из СозданныеПравила Цикл
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание:'"),
				ПолучитьНавигационнуюСсылку(СозданноеПравило.Ссылка),
				Строка(СозданноеПравило.Ссылка),
				БиблиотекаКартинок.Информация32);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствие форм БИД объектам документооборота.
//
// Параметры:
//   СоответствиеФорм - Соответствие - неявно возвращаемое значение, соответствие форм.
//
Процедура ЗаполнитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("DMBusinessProcessInternalDocumentProcessing", "БизнесПроцессОбработкаВнутреннегоДокумента");
	СоответствиеФорм.Вставить("DMBusinessProcessIncomingDocumentProcessing", "БизнесПроцессОбработкаВходящегоДокумента");
	СоответствиеФорм.Вставить("DMBusinessProcessOutgoingDocumentProcessing", "БизнесПроцессОбработкаИсходящегоДокумента");
	
	СоответствиеФорм.Вставить("DMBusinessProcessPerformance", "БизнесПроцессИсполнение");
	СоответствиеФорм.Вставить("DMBusinessProcessAcquaintance", "БизнесПроцессОзнакомление");
	СоответствиеФорм.Вставить("DMBusinessProcessOrder", "БизнесПроцессПоручение");
	СоответствиеФорм.Вставить("DMBusinessProcessConsideration", "БизнесПроцессРассмотрение");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistration", "БизнесПроцессРегистрация");
	СоответствиеФорм.Вставить("DMBusinessProcessApproval", "БизнесПроцессСогласование");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmation", "БизнесПроцессУтверждение");
	
	СоответствиеФорм.Вставить("DMBusinessProcessTask", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessOrderTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessApprovalTaskApproval", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessApprovalTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmationTaskConfirmation", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmationTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistrationTaskRegistration", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistrationTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessPerfomanceTaskCheckup", "Задача"); 
	СоответствиеФорм.Вставить("DMBusinessProcessConsiderationTaskAcquaint", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolutionTaskQuestion", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolutionTaskAnswer", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskInvitation", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskAcquaint", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskNotify", "Задача");
	
	СоответствиеФорм.Вставить("DMInternalDocument", "ВнутреннийДокумент");
	СоответствиеФорм.Вставить("DMIncomingDocument", "ВходящийДокумент");
	СоответствиеФорм.Вставить("DMOutgoingDocument", "ИсходящийДокумент");
	
	СоответствиеФорм.Вставить("DMInternalDocumentFolder", "ПапкаВнутреннихДокументов");
	
	// комплексные процессы.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		СоответствиеФорм.Вставить("DMComplexBusinessProcess", "БизнесПроцессКомплексныйПроцесс");
	КонецЕсли;
	
	// приглашение, вопросы автору.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		СоответствиеФорм.Вставить("DMBusinessProcessInvitation", "БизнесПроцессПриглашение");
		СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolution", "БизнесПроцессРешениеВопросов");
	КонецЕсли;
	
	// почта.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.8.1.CORP") Тогда
		СоответствиеФорм.Вставить("DMIncomingEMail", "ВходящееПисьмо");
		СоответствиеФорм.Вставить("DMOutgoingEMail", "ИсходящееПисьмо");
	КонецЕсли;
	
	// ежедневные отчеты и работа с контрагентами.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
		СоответствиеФорм.Вставить("DMDailyReport", "ЕжедневныйОтчет");
		СоответствиеФорм.Вставить("DMCorrespondent", "Контрагент");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

// Открывает окно состояний документа на редактирование или просмотр.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая документу.
//   ТолькоПросмотр - Булево - Истина, если форму следует открыть на просмотр.
//
Процедура ОткрытьСостоянияДокумента(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	Если Форма.ID = "" Или Форма.Тип = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Представление);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	
	Состояния = Новый Структура;
	Состояния.Вставить("СостояниеРегистрация");
	Состояния.Вставить("СостояниеРассмотрение");
	Состояния.Вставить("СостояниеСогласование");
	Состояния.Вставить("СостояниеУтверждение");
	Если Форма.Тип = "DMInternalDocument" Тогда
		Состояния.Вставить("СостояниеПодписание");
	КонецЕсли;
	Состояния.Вставить("СостояниеИсполнение");
	Для Каждого КлючЗначение Из Состояния Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		ПараметрыФормы.Вставить(ИмяРеквизита, Форма[ИмяРеквизита]);
		ПараметрыФормы.Вставить(ИмяРеквизита + "ID", Форма[ИмяРеквизита + "ID"]);
		ПараметрыФормы.Вставить(ИмяРеквизита + "Тип", Форма[ИмяРеквизита + "Тип"]);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьСостоянияДокументаЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СостоянияДокумента",
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна состояний документа переносит изменения в форму документа.
//
Процедура ОткрытьСостоянияДокументаЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("СостояниеРегистрация");
	Реквизиты.Вставить("СостояниеРассмотрение");
	Реквизиты.Вставить("СостояниеСогласование");
	Реквизиты.Вставить("СостояниеУтверждение");
	Если Форма.Тип = "DMInternalDocument" Тогда
		Реквизиты.Вставить("СостояниеПодписание");
	КонецЕсли;
	Реквизиты.Вставить("СостояниеИсполнение");
	Форма.СостояниеСписок.Очистить();
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Форма[ИмяРеквизита] = Результат[ИмяРеквизита];
		Форма[ИмяРеквизита + "ID"] = Результат[ИмяРеквизита + "ID"];
		Форма[ИмяРеквизита + "Тип"] = Результат[ИмяРеквизита + "Тип"];
		
		Если ЗначениеЗаполнено(Результат[ИмяРеквизита + "ID"]) Тогда
			Форма.СостояниеСписок.Добавить(
				Результат[ИмяРеквизита + "ID"],
				Результат[ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.СостояниеСписок.Количество() > 1 Тогда
		Для Каждого Элемент Из Форма.СостояниеСписок Цикл
			Если Элемент.Значение = "Проект" Тогда
				Форма.СостояниеСписок.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	Оповестить("ОбновитьОбзор",, Форма);
	
КонецПроцедуры

// Открывает окно изменения срока действия документа на редактирование или просмотр.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения:
//     * Наименование - Строка
//   ТолькоПросмотр - Булево - Истина, если форму следует открыть на просмотр.
//
Процедура ОткрытьСрокДействияДокумента(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Наименование);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Форма.ДатаНачалаДействия);
	ПараметрыФормы.Вставить("ДатаОкончанияДействия", Форма.ДатаОкончанияДействия);
	ПараметрыФормы.Вставить("ПорядокПродления", Форма.ПорядокПродления);
	ПараметрыФормы.Вставить("ПорядокПродленияID", Форма.ПорядокПродленияID);
	ПараметрыФормы.Вставить("ПорядокПродленияТип", Форма.ПорядокПродленияТип);
	ПараметрыФормы.Вставить("Бессрочный", Форма.Бессрочный);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьСрокДействияДокументаЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИзменениеСрокаДействия", 
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна срока действия документа переносит изменения в форму документа.
//
Процедура ОткрытьСрокДействияДокументаЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	Форма.СрокДействияПредставление = ИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеСрокаДействияДокумента(
		Результат.ДатаНачалаДействия,
		Результат.Бессрочный,
		Результат.ДатаОкончанияДействия,
		Результат.ПорядокПродленияID,
		Результат.ПорядокПродления);
	
	Форма.Модифицированность = Истина;
	Оповестить("ОбновитьОбзор",, Форма);
	
КонецПроцедуры

// Открывает визу согласования документа.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа-владельца.
//   ВизаСогласования - ДанныеФормыСтруктура:
//     * СогласующееЛицо - Строка
//     * СогласующееЛицоID - Строка
//     * СогласующееЛицоТип - Строка
//     * Дата - Дата
//     * Результат - Строка
//     * РезультатID - Строка
//     * РезультатТип - Строка
//     * Комментарий - Строка
//     * КартинкаСтатусаПодписи - Картинка
//     * Внес - Строка
//     * ВнесID - Строка
//     * ВнесТип - Строка
//     * ID - Строка
//     * Тип - Строка
//     * Наименование - Строка
//
Процедура ОткрытьВизуСогласования(Форма, ВизаСогласования) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Наименование", ВизаСогласования.Наименование);
	ПараметрыФормы.Вставить("ID", ВизаСогласования.ID);
	ПараметрыФормы.Вставить("Тип", ВизаСогласования.Тип);
	
	ПараметрыФормы.Вставить("Внес", ВизаСогласования.Внес);
	ПараметрыФормы.Вставить("ВнесID", ВизаСогласования.ВнесID);
	ПараметрыФормы.Вставить("ВнесТип", ВизаСогласования.ВнесТип);
	
	ПараметрыФормы.Вставить("СогласующееЛицо", ВизаСогласования.СогласующееЛицо);
	ПараметрыФормы.Вставить("СогласующееЛицоID", ВизаСогласования.СогласующееЛицоID);
	ПараметрыФормы.Вставить("СогласующееЛицоТип", ВизаСогласования.СогласующееЛицоТип);
	
	ПараметрыФормы.Вставить("Результат", ВизаСогласования.Результат);
	ПараметрыФормы.Вставить("РезультатID", ВизаСогласования.РезультатID);
	ПараметрыФормы.Вставить("РезультатТип", ВизаСогласования.РезультатТип);
	
	ПараметрыФормы.Вставить("Дата", ВизаСогласования.Дата);
	ПараметрыФормы.Вставить("Комментарий", ВизаСогласования.Комментарий);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВизаСогласования",
		ПараметрыФормы, Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает окно состава документа.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая документу.
//
Процедура ОткрытьСоставДокумента(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Представление);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	
	ПараметрыФормы.Вставить("КоличествоЛистов", Форма.КоличествоЛистов);
	ПараметрыФормы.Вставить("КоличествоПриложений", Форма.КоличествоПриложений);
	ПараметрыФормы.Вставить("ЛистовВПриложениях", Форма.ЛистовВПриложениях);
	ПараметрыФормы.Вставить("КоличествоЭкземпляров", Форма.КоличествоЭкземпляров);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьСоставДокументаЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СоставДокумента",
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна состава документа переносит изменения в форму документа.
//
Процедура ОткрытьСоставДокументаЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.КоличествоЛистов = Результат.КоличествоЛистов;
	Форма.КоличествоПриложений = Результат.КоличествоПриложений;
	Форма.ЛистовВПриложениях = Результат.ЛистовВПриложениях;
	Форма.КоличествоЭкземпляров = Результат.КоличествоЭкземпляров;
	
	Форма.СоставСтрока = ИнтеграцияС1СДокументооборотКлиентСервер.ПолучитьСтрокуСоставДокумента(Форма);
	
	Форма.Модифицированность = Истина;
	Оповестить("ОбновитьОбзор",, Форма);
	
КонецПроцедуры

// Открывает окно выбора номенклатуры дел.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая документу.
//
Процедура ОткрытьНоменклатуруДел(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Представление);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	
	ПараметрыФормы.Вставить("ВидДокумента", Форма.ВидДокумента);
	ПараметрыФормы.Вставить("ВидДокументаID", Форма.ВидДокументаID);
	ПараметрыФормы.Вставить("ВидДокументаТип", Форма.ВидДокументаТип);
	
	ПараметрыФормы.Вставить("ВопросДеятельности", Форма.ВопросДеятельности);
	ПараметрыФормы.Вставить("ВопросДеятельностиID", Форма.ВопросДеятельностиID);
	ПараметрыФормы.Вставить("ВопросДеятельностиТип", "DMActivityMatter");
	
	ПараметрыФормы.Вставить("НоменклатураДел", Форма.НоменклатураДел);
	ПараметрыФормы.Вставить("НоменклатураДелID", Форма.НоменклатураДелID);
	ПараметрыФормы.Вставить("НоменклатураДелТип", "DMCaseFilesCatalog");
	ПараметрыФормы.Вставить("НоменклатураДелГод", Форма.НоменклатураДелГод);
	
	ПараметрыФормы.Вставить("Контрагент", Форма.Контрагент);
	ПараметрыФормы.Вставить("КонтрагентID", Форма.КонтрагентID);
	ПараметрыФормы.Вставить("КонтрагентТип", "DMCorrespondent");
	
	ПараметрыФормы.Вставить("Организация", Форма.Организация);
	ПараметрыФормы.Вставить("ОрганизацияID", Форма.ОрганизацияID);
	ПараметрыФормы.Вставить("ОрганизацияТип", "DMOrganization");
	
	ПараметрыФормы.Вставить("Подразделение", Форма.Подразделение);
	ПараметрыФормы.Вставить("ПодразделениеID", Форма.ПодразделениеID);
	ПараметрыФормы.Вставить("ПодразделениеТип", "DMSubdivision");
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьНоменклатуруДелЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборНоменклатурыДел",
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна состава документа переносит изменения в форму документа.
//
Процедура ОткрытьНоменклатуруДелЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.НоменклатураДел = Результат.НоменклатураДел;
	Форма.НоменклатураДелID = Результат.НоменклатураДелID;
	Форма.НоменклатураДелТип = Результат.НоменклатураДелТип;
	Форма.НоменклатураДелГод = Результат.НоменклатураДелГод;
	
	Форма.Модифицированность = Истина;
	Оповестить("ОбновитьОбзор",, Форма);
	
КонецПроцедуры

// Открывает окно выбора дела хранения документов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма обработки, соответствующая документу.
//
Процедура ОткрытьДелоХраненияДокументов(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Представление);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	
	ПараметрыФормы.Вставить("ДатаРегистрации", Форма.ДатаРегистрации);
	
	ПараметрыФормы.Вставить("ВопросДеятельности", Форма.ВопросДеятельности);
	ПараметрыФормы.Вставить("ВопросДеятельностиID", Форма.ВопросДеятельностиID);
	ПараметрыФормы.Вставить("ВопросДеятельностиТип", "DMActivityMatter");
	
	ПараметрыФормы.Вставить("ВидДокумента", Форма.ВидДокумента);
	ПараметрыФормы.Вставить("ВидДокументаID", Форма.ВидДокументаID);
	ПараметрыФормы.Вставить("ВидДокументаТип", Форма.ВидДокументаТип);
	
	ПараметрыФормы.Вставить("Дело", Форма.Дело);
	ПараметрыФормы.Вставить("ДелоID", Форма.ДелоID);
	ПараметрыФормы.Вставить("ДелоТип", "DMCaseFilesDossiers");
	
	ПараметрыФормы.Вставить("НоменклатураДел", Форма.НоменклатураДел);
	ПараметрыФормы.Вставить("НоменклатураДелID", Форма.НоменклатураДелID);
	ПараметрыФормы.Вставить("НоменклатураДелТип", "DMCaseFilesCatalog");
	
	ПараметрыФормы.Вставить("Контрагент", Форма.Контрагент);
	ПараметрыФормы.Вставить("КонтрагентID", Форма.КонтрагентID);
	ПараметрыФормы.Вставить("КонтрагентТип", "DMCorrespondent");
	
	ПараметрыФормы.Вставить("Организация", Форма.Организация);
	ПараметрыФормы.Вставить("ОрганизацияID", Форма.ОрганизацияID);
	ПараметрыФормы.Вставить("ОрганизацияТип", "DMOrganization");
	
	ПараметрыФормы.Вставить("Подразделение", Форма.Подразделение);
	ПараметрыФормы.Вставить("ПодразделениеID", Форма.ПодразделениеID);
	ПараметрыФормы.Вставить("ПодразделениеТип", "DMSubdivision");
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьДелоХраненияДокументовЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборДелаХраненияДокументов",
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна состава документа переносит изменения в форму документа.
//
Процедура ОткрытьДелоХраненияДокументовЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Дело = Результат.Дело;
	Форма.ДелоID = Результат.ДелоID;
	Форма.ДелоТип = Результат.ДелоТип;
	
	Форма.Модифицированность = Истина;
	Оповестить("ОбновитьОбзор",, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесПроцессы

// Создает бизнес-процесс на основании документа ДО.
//
// Параметры:
//   Идентификатор - Строка - идентификатор документа-основания.
//   Тип - Строка - тип документа-основания.
//   Наименование - Строка - наименование документа-основания.
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на связанный объект ИС.
//
Процедура СоздатьБизнесПроцессПоОбъектуДО(Идентификатор, Тип, Наименование, ВнешнийОбъект) Экспорт
	
	Предмет = Новый Структура;
	Предмет.Вставить("ID", Идентификатор);
	Предмет.Вставить("type", Тип);
	Предмет.Вставить("name", Наименование);
	Предмет.Вставить("ВнешнийОбъект", ВнешнийОбъект);
	
	СоздатьБизнесПроцесс(Предмет);
	
КонецПроцедуры

// Создает бизнес-процесс. При передаче в качестве предмета ссылки на объект ИС создает связанный
// объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка
//           - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * ВнешнийОбъект - ЛюбаяСсылка
//   ГлавнаяЗадача - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//
Процедура СоздатьБизнесПроцесс(Предмет = Неопределено, ГлавнаяЗадача = Неопределено,
		ОписаниеОповещения = Неопределено) Экспорт
	
	Отказ = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПередСозданиемБизнесПроцесса(Предмет, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	Если Предмет = Неопределено Или ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Предмет,
			ОписаниеОповещенияПродолжение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Неопределено
//             - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   Параметры - Структура:
//     * ГлавнаяЗадача- Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//     * Предмет - ЛюбаяСсылка,
//               - Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//         ** ВнешнийОбъект - ЛюбаяСсылка
//
Процедура СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры.Предмет = Результат;
	КонецЕсли;
	
	// получение дерева шаблонов процессов.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		
		ОписаниеОповещения = Параметры.ОписаниеОповещения;
		Параметры.ОписаниеОповещения = Неопределено;
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",
			Параметры,,,,, ОписаниеОповещения);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПоддержкаСовместимости_СоздатьБизнесПроцессЗавершение",
			ЭтотОбъект, Параметры);
		
		НачатьВыборТипаБизнесПроцесса(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в строку таблицы участников бизнес-процесса результат выбора участника бизнес-процесса
// из списка, который формируется при автоподборе.
//
// Параметры:
//   Элемент - ТаблицаФормы - таблица участников бизнес-процесса.
//   ВыбранноеЗначение - ЛюбаяСсылка - структура выбранного значения.
//   СтандартнаяОбработка - Булево - признак выполнения процедуры.
//   Форма - ФормаКлиентскогоПриложения - форма с таблицей участников бизнес-процесса.
//
Процедура ПрименитьВыборУчастникаБизнесПроцессаВСписке(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			
			Элемент.ТекущиеДанные.Исполнитель = ВыбранноеЗначение.Name;
			Элемент.ТекущиеДанные.ИсполнительID = ВыбранноеЗначение.ID;
			Элемент.ТекущиеДанные.ИсполнительТип = ВыбранноеЗначение.type;
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("Элемент", Элемент);
			
			Оповещение = Новый ОписаниеОповещения(
				"ПрименитьВыборУчастникаБизнесПроцессаВСпискеЗавершение",
				ИнтеграцияС1СДокументооборотКлиент,
				ПараметрыОповещения);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьПолучениеОбъектовАдресацииРоли(
				Оповещение,
				ВыбранноеЗначение.Name,
				ВыбранноеЗначение.type,
				ВыбранноеЗначение.ID,
				Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в поле на форме результат выбора участника бизнес-процесса из списка,
// который формируется при автоподборе.
//
// Параметры:
//   ИмяПоля - Строка - имя реквизита участника бизнес-процесса формы.
//   ИмяПоляОбъектаАдресации - Строка - имя реквизита объекта адресации.
//   ВыбранноеЗначение - Структура:
//     * name - Строка - наименование выбранного участника бизнес-процесса.
//     * ID - Строка - идентификатор выбранного участника бизнес-процесса.
//     * type - Строка - тип выбранного участника бизнес-процесса.
//   СтандартнаяОбработка - Булево - признак выполнения процедуры.
//   Форма - ФормаКлиентскогоПриложения - управляемая форма с полем выбора участника бизнес-процесса.
//
Процедура ПрименитьВыборУчастникаБизнесПроцессаВПоле(ИмяПоля, ИмяПоляОбъектаАдресации, ВыбранноеЗначение,
		СтандартнаяОбработка, Форма) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			
			Форма[ИмяПоля] = ВыбранноеЗначение.Name;
			Форма[ИмяПоля + "ID"] = ВыбранноеЗначение.ID;
			Форма[ИмяПоля + "Тип"] = ВыбранноеЗначение.type;
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("ИмяПоля", ИмяПоля);
			ПараметрыОповещения.Вставить("ИмяПоляОбъектаАдресации", ИмяПоляОбъектаАдресации);
			
			Оповещение = Новый ОписаниеОповещения(
				"ПрименитьВыборУчастникаБизнесПроцессаВПолеЗавершение",
				ИнтеграцияС1СДокументооборотКлиент,
				ПараметрыОповещения);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьПолучениеОбъектовАдресацииРоли(
				Оповещение,
				ВыбранноеЗначение.Name,
				ВыбранноеЗначение.type,
				ВыбранноеЗначение.ID,
				Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выбрать тип бизнес-процесса.
// Открывает диалог выбора типа бизнес-процесса для старта.
//
Процедура НачатьВыборТипаБизнесПроцесса(ОписаниеОповещенияОЗакрытии) Экспорт
	
	СписокДоступныхТиповБизнесПроцессов = Новый СписокЗначений;
	
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessPerformance", НСтр("ru = 'Исполнение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessAcquaintance", НСтр("ru = 'Ознакомление'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOrder", НСтр("ru = 'Поручение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConsideration", НСтр("ru = 'Рассмотрение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessRegistration", НСтр("ru = 'Регистрация'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessApproval", НСтр("ru = 'Согласование'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConfirmation", НСтр("ru = 'Утверждение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessInternalDocumentProcessing",
			НСтр("ru = 'Обработка внутреннего документа'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessIncomingDocumentProcessing",
			НСтр("ru = 'Обработка входящего документа'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(
		Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOutgoingDocumentProcessing",
			НСтр("ru = 'Обработка исходящего документа'")));
	
	ЗаголовокФормы = НСтр("ru = 'Тип бизнес-процесса'");
	
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы",
		СписокДоступныхТиповБизнесПроцессов, ЗаголовокФормы);
	ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОдногоТипаИзСоставногоТипа";
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Открывает форму выбора шаблона бизнес-процесса из списка.
//
// Параметры:
//   ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса Документооборота
//
Процедура НачатьВыборШаблонаБизнесПроцесса(ОписаниеОповещенияОЗакрытии, Форма) Экспорт
	
	ДанныеОПредмете = Неопределено;
	
	Если ЗначениеЗаполнено(Форма.Предмет) Тогда
		ДанныеОПредмете = Новый Структура;
		ДанныеОПредмете.Вставить("ID", Форма.ПредметID);
		ДанныеОПредмете.Вставить("type", Форма.ПредметТип);
	КонецЕсли;
	
	СписокШаблонов = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(Форма.Тип, ДанныеОПредмете);
	
	Если СписокШаблонов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("СписокЗначенийДляВыбора", СписокШаблонов);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
			ПараметрыФормы, Форма,,,, ОписаниеОповещенияОЗакрытии);
		
	ИначеЕсли СписокШаблонов.Количество() = 1 Тогда
		РезультатВыбораШаблона = Новый Структура("РеквизитID, РеквизитТип, РеквизитПредставление");
		РезультатВыбораШаблона.РеквизитID = СписокШаблонов[0].Значение.ID;
		РезультатВыбораШаблона.РеквизитТип = СписокШаблонов[0].Значение.type;
		РезультатВыбораШаблона.РеквизитПредставление = СписокШаблонов[0].Значение.Name;
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, РезультатВыбораШаблона); 
		
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не найдено ни одного подходящего шаблона бизнес-процесса.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Запускает процесс согласования в ДО по указанному объекту.
//
// Параметры:
//   Параметры - Структура:
//     ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     Источник - ФормаКлиентскогоПриложения - необязательный, источник команды.
//     ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успешного запуска.
//
Процедура НачатьСогласование(Параметры) Экспорт
	
	Отказ = Ложь;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПередСозданиемБизнесПроцесса(Параметры.ПредметСогласования, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Унифицируем состав параметров.
	Если Не Параметры.Свойство("ОписаниеОповещения") Тогда
		Параметры.Вставить("ОписаниеОповещения", Неопределено);
	КонецЕсли;
	Если Не Параметры.Свойство("Источник") Тогда
		Параметры.Вставить("Источник", Неопределено);
	КонецЕсли;
	
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);
	
	// Проверим возможность запуска согласования.
	ТекстПредупреждения = "";
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешенЗапускСогласования(
			Параметры.ПредметСогласования, ТекстПредупреждения) Тогда
		Если ТекстПредупреждения = "" Тогда // текст по умолчанию
			ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для запуска согласования в 1С:Документообороте.'");
		КонецЕсли;
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПослеПоискаСвязанногоОбъекта = Новый ОписаниеОповещения(
		"НачатьСогласованиеПослеПоискаСвязанногоОбъекта",
		ЭтотОбъект,
		Параметры);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
		Параметры.ПредметСогласования,
		ОписаниеОповещенияПослеПоискаСвязанногоОбъекта);
	
КонецПроцедуры

// Продолжает процесс согласования после нахождения или создания связанного объекта.
//
Процедура НачатьСогласованиеПослеПоискаСвязанногоОбъекта(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Предмет", Результат);
	
	ПараметрыФормыПрерывания = Новый Структура;
	ПараметрыФормыПрерывания.Вставить("Предмет", Параметры.Предмет);
	ПараметрыФормыПрерывания.Вставить("ПовторныйЗапуск", Истина);
	ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения(
		"НачатьСогласованиеПослеВопроса",
		ЭтотОбъект,
		Параметры);
	ОткрытаяФорма = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрерываниеСогласования", 
		ПараметрыФормыПрерывания,,,,, ОписаниеОповещенияПослеВопроса, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Если ОткрытаяФорма = Неопределено Тогда // нет виз согласования, показывать лист нет нужды
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВопроса, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает запуск согласования в ДО после показа вопроса о перезапуске ранее запущенных процессов.
//
Процедура НачатьСогласованиеПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// Получим подходящие шаблоны.
	ПодходящиеШаблоны = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(
		"DMBusinessProcessApproval",
		Параметры.Предмет);
	
	// Запустим единственный шаблон или предложим выбор из нескольких.
	Если ПодходящиеШаблоны.Количество() = 0 Тогда
		// Откроем общую форму запуск произвольного процесса.
		ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(Параметры.Предмет);
		ОписаниеОповещенияПослеИнтерактивногоЗапуска = Новый ОписаниеОповещения(
			"НачатьСогласованиеПослеИнтерактивногоЗапуска",
			ЭтотОбъект,
			Параметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Предмет", Параметры.Предмет);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			"DMBusinessProcessApproval",
			Неопределено,,
			ПараметрыФормы,
			ОписаниеОповещенияПослеИнтерактивногоЗапуска);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Подходящих шаблонов не найдено.'"));
		
	Иначе // есть шаблон(ы)
		ОписаниеОповещенияПослеВыбораШаблона = Новый ОписаниеОповещения(
			"НачатьСогласованиеПослеВыбораШаблона",
			ЭтотОбъект,
			Параметры);
		Если ПодходящиеШаблоны.Количество() = 1 Тогда
			РезультатВыбора = Новый Структура;
			РезультатВыбора.Вставить("РеквизитПредставление", ПодходящиеШаблоны[0].Значение.name);
			РезультатВыбора.Вставить("РеквизитID", ПодходящиеШаблоны[0].Значение.ID);
			РезультатВыбора.Вставить("РеквизитТип", ПодходящиеШаблоны[0].Значение.type);
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыбораШаблона, РезультатВыбора);
		Иначе // предложим выбор
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор шаблона согласования'"));
			ПараметрыФормы.Вставить("ВыборГрупп", Ложь);
			ПараметрыФормы.Вставить("СписокЗначенийДляВыбора", ПодходящиеШаблоны);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка", ПараметрыФормы,,,,,
				ОписаниеОповещенияПослеВыбораШаблона, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает запуск согласования в ДО после выбора шаблона согласования.
//
Процедура НачатьСогласованиеПослеВыбораШаблона(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда // шаблон не выбран
		Возврат;
	КонецЕсли;
	
	Шаблон = Новый Структура;
	Шаблон.Вставить("name", Результат.РеквизитПредставление);
	Шаблон.Вставить("ID",   Результат.РеквизитID);
	Шаблон.Вставить("type", Результат.РеквизитТип);
	
	// Прервем другие процессы согласования, о которых мы предупредили инициатора, или которые
	// были запущены другими пользователями за время раздумий при выборе шаблона.
	ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(Параметры.Предмет);
	
	// Запустим процесс по шаблону.
	Если ИнтеграцияС1СДокументооборотВызовСервера.ЗапуститьСогласованиеПоШаблону(Шаблон, Параметры.Предмет) Тогда
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.НаСогласовании"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
		КонецЕсли;
		Оповестить("Документооборот_ЗапущеноСогласование", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Согласование запущено.'"));
		
	Иначе
		// Возможно, нужно заполнить обязательные реквизиты. Откроем форму нового процесса.
		ОписаниеОповещенияПослеИнтерактивногоЗапуска = Новый ОписаниеОповещения(
			"НачатьСогласованиеПослеИнтерактивногоЗапуска",
			ЭтотОбъект,
			Параметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Шаблон", Шаблон);
		ПараметрыФормы.Вставить("Предмет", Параметры.Предмет);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			"DMBusinessProcessApproval",
			Неопределено,,
			ПараметрыФормы,
			ОписаниеОповещенияПослеИнтерактивногоЗапуска);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает запуск согласования в ДО после открытия формы бизнес-процесса.
//
Процедура НачатьСогласованиеПослеИнтерактивногоЗапуска(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Состояние", ПредопределенноеЗначение(
		"Перечисление.СостоянияСогласованияВДокументообороте.НаСогласовании"));
	ПриИзмененииСостоянияСогласования(Параметры);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;
	Оповестить("Документооборот_ЗапущеноСогласование", Параметры.ПредметСогласования);
	
КонецПроцедуры

// Прерывает процессы согласования в ДО по указанному объекту.
//
// Параметры:
//   Параметры - Структура:
//     ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     Источник - ФормаКлиентскогоПриложения - необязательный, источник команды.
//     ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успеха.
//
Процедура ПрерватьСогласование(Параметры) Экспорт
	
	// Унифицируем состав параметров.
	Если Не Параметры.Свойство("ОписаниеОповещения") Тогда
		Параметры.Вставить("ОписаниеОповещения", Неопределено);
	КонецЕсли;
	Если Не Параметры.Свойство("Источник") Тогда
		Параметры.Вставить("Источник", Неопределено);
	КонецЕсли;
	
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);
	
	// Проверим существование связанного объекта.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'В 1С:Документообороте не запущено согласование.'");
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Параметры.Вставить("Предмет", СвязанныйОбъектДО);
	
	// Проверим возможность прерывания согласования.
	ТекстПредупреждения = "";
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешеноПрерываниеСогласования(
			Параметры.ПредметСогласования, Параметры.Предмет, ТекстПредупреждения) Тогда
		Если ТекстПредупреждения = "" Тогда // предупреждение по умолчанию
			ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для прерывания согласования в 1С:Документообороте.'");
		КонецЕсли;
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыПрерывания = Новый Структура;
	ПараметрыФормыПрерывания.Вставить("Предмет", Параметры.Предмет);
	ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения(
		"ПрерватьСогласованиеПослеВопроса",
		ЭтотОбъект,
		Параметры);
	ОткрытаяФорма = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрерываниеСогласования", 
		ПараметрыФормыПрерывания,,,,, ОписаниеОповещенияПослеВопроса, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Если ОткрытаяФорма = Неопределено Тогда // нет виз согласования, показывать лист нет нужды
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВопроса, КодВозвратаДиалога.ОК);
	КонецЕсли;
		
КонецПроцедуры

// Продолжает процесс прерывания согласования после показа вопроса.
//
Процедура ПрерватьСогласованиеПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(Параметры.Предмет);
	
	// Оповестим открытые формы, источник вызова и пользователя.
	Параметры.Вставить("Состояние", Неопределено);
	ПриИзмененииСостоянияСогласования(Параметры);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;
	Оповестить("Документооборот_ПрерваноСогласование", Параметры.ПредметСогласования);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Согласование прервано.'"));

КонецПроцедуры

// Выполняет согласование по указанному объекту с указанным результатом.
//
// Параметры:
//   Параметры - Структура:
//     * ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     * Источник - ФормаКлиентскогоПриложения - необязательный, источник команды.
//     * Результат - Строка - "Согласовано", "СогласованоСЗамечаниями", "НеСогласовано".
//     * ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успеха.
//
Процедура ВыполнитьСогласование(Параметры) Экспорт
	
	// Унифицируем состав параметров.
	Если Не Параметры.Свойство("ОписаниеОповещения") Тогда
		Параметры.Вставить("ОписаниеОповещения", Неопределено);
	КонецЕсли;
	Если Не Параметры.Свойство("Источник") Тогда
		Параметры.Вставить("Источник", Неопределено);
	КонецЕсли;
	
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);
	
	// Проверим существование связанного объекта.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'В 1С:Документообороте не запущено согласование.'");
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Параметры.Вставить("Предмет", СвязанныйОбъектДО);
	
	// Проверим, запущен ли вообще процесс согласования.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ЗапущеноСогласованиеПоПредметуДО(Параметры.Предмет) Тогда
		ТекстПредупреждения = НСтр("ru = 'В 1С:Документообороте не запущено согласование.'");
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Проверим, адресованы ли пользователю задачи согласования.
	ЗадачиСогласования = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьЗадачиСогласования(Параметры.Предмет);
	Если ЗадачиСогласования.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru = 'В 1С:Документообороте нет задач согласования, адресованных на текущего пользователя %1'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ОК", НСтр("ru = 'ОК'"));
		Кнопки.Добавить("ЛистСогласования", НСтр("ru = 'Лист согласования'"));
		ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения(
			"ВыполнитьСогласованиеПослеВопроса",
			ЭтотОбъект,
			Параметры);
		ПоказатьВопрос(ОписаниеОповещенияПослеВопроса, ТекстВопроса, Кнопки);
		Возврат;
	Иначе // есть адресованные пользователю задачи
		Параметры.Вставить("ЗадачиСогласования", ЗадачиСогласования);
		ОписаниеОповещенияПослеВводаКомментария = Новый ОписаниеОповещения(
			"ВыполнитьСогласованиеПослеВводаКомментария",
			ЭтотОбъект,
			Параметры);
		Если Параметры.Результат = "Согласовано" Тогда // комментарий не нужен
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВводаКомментария, "");
		Иначе
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВводРезультатаВыполненияЗадачи",,,,,,
				ОписаниеОповещенияПослеВводаКомментария, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершает работу команд согласования после вывода вопроса.
//
// Параметры:
//   Результат - Строка
//   Параметры - Структура:
//     * ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     * Источник - ФормаКлиентскогоПриложения - необязательный, источник команды.
//     * Результат - Строка - "Согласовано", "СогласованоСЗамечаниями", "НеСогласовано".
//     * ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успеха.
//
Процедура ВыполнитьСогласованиеПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат = "ЛистСогласования" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
			МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
			МодульУправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Обработка.ИнтеграцияС1СДокументооборот",
				"ЛистСогласования",
				Параметры.ПредметСогласования,
				Параметры.Источник);
		Иначе
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.
				ВыполнитьКомандуПечатиЛистаСогласования(Параметры.ПредметСогласования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершает работу команд согласования после ввода комментария.
//
Процедура ВыполнитьСогласованиеПослеВводаКомментария(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда // отказ от ввода комментария
		Возврат;
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ВыполнитьСогласование(
		Параметры.ЗадачиСогласования, Параметры.Результат, Результат, ТекстСообщенияОбОшибке) Тогда
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"КомандыСогласованияПослеПредупреждения",
			ЭтотОбъект,
			Параметры);
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
		
	// Оповестим открытые формы, источник вызова и пользователя.
	
	Если Параметры.Результат = "Согласовано" Тогда //@NON-NLS-1
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.Согласован"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Оповестить("Документооборот_Согласовано", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Согласовано.'"));

	ИначеЕсли Параметры.Результат = "СогласованоСЗамечаниями" Тогда //@NON-NLS-1
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.Согласован"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Оповестить("Документооборот_СогласованоСЗамечаниями", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Согласовано с замечаниями.'"));

	ИначеЕсли Параметры.Результат = "НеСогласовано" Тогда //@NON-NLS-1
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.НеСогласован"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Оповестить("Документооборот_НеСогласовано", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не согласовано.'"));

	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;

КонецПроцедуры

// Завершает работу команд согласования после вывода предупреждения о проблеме.
//
Процедура КомандыСогласованияПослеПредупреждения(Параметры) Экспорт
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при изменении состояния согласования в ДО. Меняет состояние на стороне ИС.
//
// Параметры:
//   Параметры - Структура:
//     * ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     * Предмет - Структура - описание связанного объекта ДО.
//     * Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте - новое состояние.
//                 - Неопределено - в случае прерывания согласования.
//     * Источник - ФормаКлиентскогоПриложения:
//         ** Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//                   - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//
Процедура ПриИзмененииСостоянияСогласования(Параметры) Экспорт
	
	// Определим источник вызова. Если это форма согласуемого объекта, то не следует
	// изменять состояние объекта в БД во избежание эффекта оптимистичной блокировки.
	Если Параметры.Источник = Неопределено Тогда
		ВызовИзФормыОбъекта = Ложь;
	Иначе
		Попытка
			Объект = Параметры.Источник.Объект;
			ВызовИзФормыОбъекта = ЗначениеЗаполнено(Объект.Ссылка);
		Исключение
			ВызовИзФормыОбъекта = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПриИзмененииСостоянияСогласования(
		Параметры.Предмет.ID,
		Параметры.Предмет.type,
		Параметры.Состояние,
		ВызовИзФормыОбъекта,
		Параметры.ПредметСогласования);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриИзмененииСостоянияСогласования(
		Параметры.ПредметСогласования,
		Параметры.Источник,
		Параметры.Состояние,
		ВызовИзФормыОбъекта);
		
КонецПроцедуры

// Начинает процесс добавления предмета к процессу или задаче.
//
// Параметры:
//   ФормаВладельца - ФормаКлиентскогоПриложения - форма обработки, соответствующая процессу или задаче.
//   РольПредмета - Строка - роль добавляемого предмета, соответствует перечислению РолиПредметов.
//   ОписаниеОповещения - ОписаниеОповещения - необязательный, оповещение, вызываемое после успешного добавления
//     предмета с передачей структуры, содержащей его описание.
//
Процедура ДобавитьПредмет(ФормаВладельца, РольПредмета, ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ФормаВладельца", ФормаВладельца);
	Параметры.Вставить("ИдентификаторВладельца", ФормаВладельца.ID);
	Параметры.Вставить("ТипВладельца", ФормаВладельца.Тип);
	Параметры.Вставить("РольПредмета", РольПредмета);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОВыбореТипа = Новый ОписаниеОповещения(
		"ДобавитьПредметПослеВыбораТипа",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ПараметрыВыборТипаПредмета = Новый Структура("ПроцессТип, Тип");
	ЗаполнитьЗначенияСвойств(ПараметрыВыборТипаПредмета, ФормаВладельца);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаПредмета",
		ПараметрыВыборТипаПредмета,
		ЭтотОбъект,,,,
		ОписаниеОповещенияОВыбореТипа,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Продолжает процесс добавления предмета после выбора его типа.
//
// Параметры:
//   Результат - Структура:
//     * Вариант - Строка
//     * Отбор - СписокЗначений
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеВыбораТипа(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Вариант = "ФайлСДиска" Тогда
		
		ФормаВладельца = Параметры.ФормаВладельца;
		// Владельцем файла будет процесс, даже если добавлен он из формы задачи.
		Если Найти(Параметры.ТипВладельца, "Task") <> 0 Тогда
			Параметры.ТипВладельца = ФормаВладельца.ПроцессТип;
			Параметры.ИдентификаторВладельца = ФормаВладельца.ПроцессID;
		Иначе
			// Для прикрепления файла процесс должен быть записан.
			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторВладельца) Тогда
				РезультатЗаписи = ФормаВладельца.ЗаписатьОбъект();
				Если РезультатЗаписи Тогда
					Параметры.ИдентификаторВладельца = ФормаВладельца.ID;
					Параметры.ТипВладельца = ФормаВладельца.Тип;
				Иначе // запись не удалась, форма сообщила пользователю об источнике проблемы
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПослеДобавленияФайла",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДиска(
			Параметры.ИдентификаторВладельца,
			Параметры.ТипВладельца,
			ФормаВладельца.УникальныйИдентификатор,
			?(Параметры.Свойство("Представление"), Параметры.Представление, ФормаВладельца.Представление),,,,
			ОписаниеОповещения);
		
	ИначеЕсли Лев(Результат.Вариант, 2) = "DM" Тогда // выбор объекта в ДО
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПослеВыбораОбъектаДО",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ВыбратьЗначениеПоТипуОбъекта(ОписаниеОповещения, Результат.Вариант);
		
	Иначе // выбор объекта ИС
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПослеВыбораОбъектаИС",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		Для Каждого ЭлементСписка Из Результат.Отбор Цикл
			ПараметрыФормы.Отбор.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЦикла;
		ОткрытьФорму(Результат.Вариант + ".ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает процесс добавления предмета после выбора объекта 1С:Документооборота.
//
// Параметры:
//   ОбъектДО - Структура - РеквизитID, РеквизитТип, РеквизитПредставление.
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеВыбораОбъектаДО(ОбъектДО, Параметры) Экспорт
	
	Если ОбъектДО = Неопределено
		Или Параметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПредмета = Новый Структура;
	ОписаниеПредмета.Вставить("Предмет", ОбъектДО.РеквизитПредставление);
	ОписаниеПредмета.Вставить("ПредметID", ОбъектДО.РеквизитID);
	ОписаниеПредмета.Вставить("ПредметТип", ОбъектДО.РеквизитТип);
	ОписаниеПредмета.Вставить("РольПредмета", Параметры.РольПредмета);
	ОписаниеПредмета.Вставить("Представление", ОбъектДО.РеквизитПредставление);
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОписаниеПредмета);
	
КонецПроцедуры

// Продолжает процесс добавления предмета после выбора объекта интегрированной системы.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - выбранный объект ИС.
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеВыбораОбъектаИС(ОбъектИС, Параметры) Экспорт
	
	Если ОбъектИС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьПредметПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
		ОбъектИС,
		ОписаниеОповещения);
	
КонецПроцедуры

// Продолжает процесс добавления предмета после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - найденный или созданный объект ДО (name, ID, type).
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Параметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПредмета = Новый Структура;
	ОписаниеПредмета.Вставить("Предмет", Результат.name);
	ОписаниеПредмета.Вставить("ПредметID", Результат.ID);
	ОписаниеПредмета.Вставить("ПредметТип", Результат.type);
	ОписаниеПредмета.Вставить("РольПредмета", Параметры.РольПредмета);
	ОписаниеПредмета.Вставить("Ссылка", Параметры.ОбъектИС);
	ОписаниеПредмета.Вставить("Представление", Строка(Параметры.ОбъектИС));
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОписаниеПредмета);
	
КонецПроцедуры

// Продолжает процесс добавления предмета после добавления файла с диска.
//
// Параметры:
//   ОписаниеФайла - Массив из Структура - Массив из Структура - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеДобавленияФайла(ОписаниеФайла, Параметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Или Параметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеПредметы = Новый Массив;
	
	Для Каждого ПомещенныйФайл Из ОписаниеФайла Цикл
		
		ОписаниеПредмета = Новый Структура;
		
		ОписаниеПредмета.Вставить("РольПредмета", Параметры.РольПредмета);
		
		ОписаниеПредмета.Вставить("Предмет", ПомещенныйФайл.Наименование);
		ОписаниеПредмета.Вставить("ПредметID", ПомещенныйФайл.ID);
		ОписаниеПредмета.Вставить("ПредметТип", ПомещенныйФайл.Тип);
		ОписаниеПредмета.Вставить("Представление", ПомещенныйФайл.Наименование);
		ОписаниеПредмета.Вставить("Расширение", ПомещенныйФайл.Расширение);
		
		ДобавленныеПредметы.Добавить(ОписаниеПредмета);
		
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ДобавленныеПредметы);
	
КонецПроцедуры

// Останавливает процесс ДО.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса.
//
Процедура ОстановитьПроцесс(Форма) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.ОстановитьПроцесс(Форма.ID, Форма.Тип);
	
	Оповестить_ЗаписьБизнесПроцесса(Форма, Ложь);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс остановлен'"),,
		Форма.Заголовок,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Прерывает активный или остановленный процесс ДО.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса.
//
Процедура ПрерватьПроцесс(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрерватьПроцессПослеВопроса",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрерываниеПроцесса",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Продолжает остановленный процесс ДО.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса.
//
Процедура ПродолжитьПроцесс(Форма) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПродолжитьПроцесс(Форма.ID, Форма.Тип);
	
	Оповестить_ЗаписьБизнесПроцесса(Форма, Ложь);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс продолжен'"),,
		Форма.Заголовок,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область СвязиДокументов

// Начинает добавление связи с указанным документом ДО. Вызывает оповещение при успехе.
//
// Параметры:
//   ID - Строка - идентификатор исходного документа.
//   Тип - Строка - тип исходного документа.
//   Представление - Строка - представление исходного документа.
//   ТипДобавляемогоДокумента - Строка - тип документа, связь с которым добавляется, или
//                            - Неопределено - признак необходимости предоставить пользователю выбор.
//   ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при успехе, с передачей
//     структуры (ИсходныйДокумент, СвязанныйДокумент, ТипСвязи).
//   Отбор - Структура - описание предустановленного отбора в терминах пакета XDTO.
//
Процедура НачатьДобавлениеСвязи(ID, Тип, Представление, ТипДобавляемогоДокумента = Неопределено,
		ОписаниеОповещения = Неопределено, Отбор = Неопределено) Экспорт
	
	Если ТипДобавляемогоДокумента = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID", ID);
		ПараметрыФормы.Вставить("Тип", Тип);
		ПараметрыФормы.Вставить("Представление", Представление);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ID", ID);
		ПараметрыОповещения.Вставить("Тип", Тип);
		ПараметрыОповещения.Вставить("Представление", Представление);
		ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыОповещения.Вставить("Отбор", Отбор);
		
		ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
			"НачатьДобавлениеСвязиПослеФормыСозданияСвязи",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеСвязи",
			ПараметрыФормы,,
			ID,,,
			ОписаниеОповещенияОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе // тип указан явно
		
		НачатьДобавлениеСвязиПослеВыбораТипа(
			ID,
			Тип,
			Представление,
			ТипДобавляемогоДокумента,
			ОписаниеОповещения,
			Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает добавление связи после показа формы "Создание связи".
//
// Параметры:
//   Результат - Структура - описание выбора со свойствами:
//     РеквизитТип - Строка - тип выбранного объекта.
//     РеквизитID - Строка - идентификатор выбранного объекта.
//   ПараметрыОповещения - Структура - дополнительные параметры, необходимые для продолжения:
//     * ID - Строка - идентификатор исходного документа.
//     * Тип - Строка - тип исходного документа.
//     * Представление - Строка - представление исходного документа.
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого после добавления.
//     * Отбор - Структура - описание отбора, накладываемого при открытии карточки поиска.
//
Процедура НачатьДобавлениеСвязиПослеФормыСозданияСвязи(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.РеквизитID) Тогда // выбран конкретный документ
		
		Параметры = Новый Структура;
		
		ИсходныйДокумент = Новый Структура;
		ИсходныйДокумент.Вставить("ID", ПараметрыОповещения.ID);
		ИсходныйДокумент.Вставить("Тип", ПараметрыОповещения.Тип);
		ИсходныйДокумент.Вставить("Представление", ПараметрыОповещения.Представление);
		
		Параметры.Вставить("ИсходныйДокумент", ИсходныйДокумент);
		Параметры.Вставить("ОписаниеОповещения", ПараметрыОповещения.ОписаниеОповещения);
		Параметры.Вставить("Отбор", ПараметрыОповещения.Отбор);
		
		НачатьДобавлениеСвязиПослеВыбораДокумента(Результат, Параметры);
		
	Иначе // выбран только тип
		
		НачатьДобавлениеСвязиПослеВыбораТипа(
			ПараметрыОповещения.ID,
			ПараметрыОповещения.Тип,
			ПараметрыОповещения.Представление,
			Результат.РеквизитТип,
			ПараметрыОповещения.ОписаниеОповещения,
			ПараметрыОповещения.Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

// Начинает добавление связи с документом ДО указанного типа. Вызывает оповещение при успехе.
//
// Параметры:
//   ID - Строка - идентификатор исходного документа.
//   Тип - Строка - тип исходного документа.
//   Представление - Строка - представление исходного документа.
//   ТипДобавляемогоДокумента - Строка - тип документа, связь с которым добавляется.
//   ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при успехе, с передачей
//     структуры (ИсходныйДокумент, СвязанныйДокумент, ТипСвязи).
//   Отбор - Структура - описание предустановленного отбора в терминах пакета XDTO.
//
Процедура НачатьДобавлениеСвязиПослеВыбораТипа(ID, Тип, Представление, ТипДобавляемогоДокумента,
		ОписаниеОповещения = Неопределено, Отбор = Неопределено) Экспорт
	
	ИсходныйДокумент = Новый Структура;
	ИсходныйДокумент.Вставить("ID", ID);
	ИсходныйДокумент.Вставить("Тип", Тип);
	ИсходныйДокумент.Вставить("Представление", Представление);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсходныйДокумент", ИсходныйДокумент);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Отбор", Отбор);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"НачатьДобавлениеСвязиПослеВыбораДокумента",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(ОповещениеПродолжения, ТипДобавляемогоДокумента, Отбор);
	
КонецПроцедуры

// Продолжает добавление связи после выбора связываемого документа ДО.
//
// Параметры:
//   Результат - Структура - результат выбора:
//     РеквизитID - Строка - идентификатор выбранного документа.
//     РеквизитТип - Строка - тип выбранного документа.
//     РеквизитПредставление - Строка - представление выбранного документа.
//   Параметры - Структура - см. НачатьДобавлениеСвязи.
//
Процедура НачатьДобавлениеСвязиПослеВыбораДокумента(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныйДокумент = Новый Структура;
	СвязанныйДокумент.Вставить("ID", Результат.РеквизитID);
	СвязанныйДокумент.Вставить("Тип", Результат.РеквизитТип);
	СвязанныйДокумент.Вставить("Представление", Результат.РеквизитПредставление);
	
	Параметры.Вставить("СвязанныйДокумент", СвязанныйДокумент);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"НачатьДобавлениеСвязиПослеВыбораТипаСвязи",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ИсходныйДокумент", Параметры.ИсходныйДокумент);
	ПараметрыФормыВыбора.Вставить("СвязанныйДокумент", Параметры.СвязанныйДокумент);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаСвязи",
		ПараметрыФормыВыбора,,,,,
		ОповещениеПродолжения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Продолжает добавление связи после выбора типа связи.
//
// Параметры:
//   Результат - Структура - результат выбора:
//     * РеквизитID - Строка - идентификатор выбранного типа связи.
//     * РеквизитТип - Строка - тип выбранного типа связи.
//     * РеквизитПредставление - Строка - представление выбранного типа связи.
//   Параметры - Структура:
//     * ИсходныйДокумент - Структура - описание исходного документа.
//     * СвязанныйДокумент - Структура - описание связываемого документа.
//     * ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при успехе.
//
Процедура НачатьДобавлениеСвязиПослеВыбораТипаСвязи(Результат, Параметры) Экспорт
	
	Если Результат = "ПовторитьВыборДокумента" Тогда // " < Назад"
		ОповещениеПродолжения = Новый ОписаниеОповещения(
			"НачатьДобавлениеСвязиПослеВыбораДокумента",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ВыбратьЗначениеПоТипуОбъекта(ОповещениеПродолжения, Параметры.СвязанныйДокумент.Тип, Параметры.Отбор);
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
		Параметры.ИсходныйДокумент,
		Параметры.СвязанныйДокумент,
		Результат);
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		Параметры.Вставить("ТипСвязи", Результат);
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Начинает удаление связи указанного типа между двумя документами.
//
// Параметры:
//   ИсходныйДокумент - Структура - исходный документ.
//   СвязанныйДокумент - Структура - связанный документ.
//   ТипСвязи - Структура - тип связи. Свойства структур:
//     ID - Строка - идентификатор объекта ДО.
//     Тип - Строка - тип объекта ДО.
//     Представление - Строка - представление объекта ДО.
//   ОписаниеОповещения - ОписаниеОповещения - вызывается при успехе с передачей
//     структуры (ИсходныйДокумент, СвязанныйДокумент, ТипСвязи).
//
Процедура НачатьУдалениеСвязи(ИсходныйДокумент, СвязанныйДокумент, ТипСвязи,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсходныйДокумент", ИсходныйДокумент);
	Параметры.Вставить("СвязанныйДокумент", СвязанныйДокумент);
	Параметры.Вставить("ТипСвязи", ТипСвязи);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"НачатьУдалениеСвязиПослеВопроса",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПоказатьВопросДаНет(
		ОповещениеПродолжения,
		НСтр("ru = 'Удалить связь?'"));
	
КонецПроцедуры

// Продолжает удаление связи после вопроса пользователю.
//
// Параметры:
//   Результат - КодВозвратаДиалога - результат выбора.
//   Параметры - Структура:
//     * ИсходныйДокумент - Структура:
//         ** ID - Строка - идентификатор объекта ДО.
//         ** Тип - Строка - тип объекта ДО.
//         ** Представление - Строка - представление объекта ДО.
//     * СвязанныйДокумент - Структура:
//         ** ID - Строка - идентификатор объекта ДО.
//         ** Тип - Строка - тип объекта ДО.
//         ** Представление - Строка - представление объекта ДО.
//     * ТипСвязи - Структура:
//         ** ID - Строка - идентификатор объекта ДО.
//         ** Тип - Строка - тип объекта ДО.
//         ** Представление - Строка - представление объекта ДО.
//     * ОписаниеОповещения - ОписаниеОповещения - вызывается при успехе.
//
Процедура НачатьУдалениеСвязиПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИсходныйДокумент.ID) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязьДокументов(
			Параметры.ИсходныйДокумент,
			Параметры.СвязанныйДокумент,
			Параметры.ТипСвязи);
	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автообновление

// Открывает модальную форму настройки автообновления списка. При завершении диалога
// устанавливает выбранные параметры автообновления списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - уникальный идентификатор открытой формы.
//   ИмяСписка - Строка - имя реквизита списка на форме.
//
Процедура УстановитьПараметрыАвтообновленияСписка(Форма, ИмяСписка) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АвтоОбновление", Форма.Элементы[ИмяСписка].АвтоОбновление);
	ПараметрыФормы.Вставить("ПериодАвтоОбновления", Форма.Элементы[ИмяСписка].ПериодАвтоОбновления);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ИмяСписка", ИмяСписка);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьПараметрыАвтообновленияСпискаЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.НастройкаАвтообновления",
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершает установку параметров автообновления списка после закрытия окна настроек.
//
// Параметры:
//   Результат - Структура:
//     * Автообновление - Булево.
//     * ПериодАвтообновления - Число - период в секундах.
//   ПараметрыОповещения - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * ИмяСписка - Строка
//
Процедура УстановитьПараметрыАвтообновленияСпискаЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ИмяСписка = ПараметрыОповещения.ИмяСписка;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвтообновленияСписка(
			Форма.ИмяФормы,
			ИмяСписка,
			Результат);
		
		Форма.Элементы[ИмяСписка].АвтоОбновление = Результат.АвтоОбновление;
		Форма.Элементы[ИмяСписка].ПериодАвтоОбновления = Результат.ПериодАвтоОбновления;
		Если Результат.АвтоОбновление Тогда
			Форма.Элементы[ИмяСписка].Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АсинхроннаяРаботаСИнтерфейсомИС

// Запускает асинхронный метод, который по окончании работы вызывает оповещение,
// в параметры которого передается информация о возможности согласования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, откуда совершен вызов.
//   ПредметСогласования - ЛюбаяСсылка - предмет согласования.
//   ОповещениеОЗавершении - ОписаниеОповещения - оповещение с результатом выполнения.
//
Процедура СогласованиеВозможно(Форма, ПредметСогласования, ОповещениеОЗавершении) Экспорт
	
	НачатьПолучениеВозможностиСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении);
	
КонецПроцедуры

// Запускает асинхронный метод, который отправляет предмет на согласование, и по окончании работы
// вызывает оповещение, в параметры которого передается информация о результатах запуска согласования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения:
//     * Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//              - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   ПредметСогласования - ЛюбаяСсылка - предмет согласования.
//   ОповещениеОЗавершении - ОписаниеОповещения - оповещение с результатом выполнения.
//
Процедура СогласоватьАсинхронно(Форма, ПредметСогласования, ОповещениеОЗавершении) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ОповещениеОЗавершении",
			Форма, ОповещениеОЗавершении);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
							|Согласование документа возможно только после записи данных.
							|Данные будут записаны.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СогласоватьАсинхронноЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		НачатьСогласованиеАсинхронно(Форма, ПредметСогласования, ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

// Запускает асинхронный метод, который по окончании работы вызывает оповещение,
// в параметры которого передается информация о возможности прервать согласование.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, откуда совершен вызов.
//   ПредметСогласования - ЛюбаяСсылка - предмет согласования.
//   ОповещениеОЗавершении - ОписаниеОповещения - оповещение с результатом выполнения.
//
Процедура ПрерываниеСогласованияВозможно(Форма, ПредметСогласования, ОповещениеОЗавершении) Экспорт
	
	НачатьПолучениеВозможностиПрерыванияСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении);
	
КонецПроцедуры

// Запускает асинхронный метод, который прерывает согласование предмета, и по окончании работы
// вызывает оповещение, в параметры которого передается информация о результатах прерывания согласования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения:
//     * Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//              - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   ПредметСогласования - ЛюбаяСсылка - предмет согласования.
//   ОповещениеОЗавершении - ОписаниеОповещения - оповещение с результатом выполнения.
//
Процедура ПрерватьСогласованиеАсинхронно(Форма, ПредметСогласования, ОповещениеОЗавершении) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ОповещениеОЗавершении",
			Форма, ОповещениеОЗавершении);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
							|Прерывание согласования документа возможно только после записи данных.
							|Данные будут записаны.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрерватьСогласованиеАсинхронноЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		НачатьПрерываниеСогласованияАсинхронно(Форма, ПредметСогласования, ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

// Запускает асинхронный метод, который по окончании работы вызывает оповещение,
// в параметры которого передается информация о состоянии согласования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, откуда совершен вызов.
//   ПредметСогласования - ЛюбаяСсылка - предмет согласования.
//   ОповещениеОЗавершении - ОписаниеОповещения - оповещение с результатом выполнения.
//
Процедура СостояниеСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении) Экспорт
	
	НачатьПолучениеСостоянияСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманды

// Обработчик общей команды ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс
//
// Параметры:
//   МассивСсылок - Произвольный - в параметр передается значение от источника, в котором реализована команда.
//     Может содержать как единичное значение, так и массив значений.
//   ПараметрыВыполнения - ПараметрыВыполненияКоманды - в обработчике команды можно изменить значение свойств
//     параметра.
//
Процедура ОбработкаКомандыСоздатьБизнесПроцесс(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() > 0 Тогда
		ПараметрКоманды = МассивСсылок[0];
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьБизнесПроцессПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

// Обработчик общей команды ИнтеграцияС1СДокументооборотСоздатьПисьмо
//
// Параметры:
//   МассивСсылок - Произвольный - в параметр передается значение от источника, в котором реализована команда.
//     Может содержать как единичное значение, так и массив значений.
//   ПараметрыВыполнения - ПараметрыВыполненияКоманды - в обработчике команды можно изменить значение свойств
//     параметра.
//
Процедура ОбработкаКомандыИсходящееПисьмо(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() > 0 Тогда
		ПараметрКоманды = МассивСсылок[0];
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИсходящееПисьмоПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НачатьПолучениеВозможностиСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении)
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотВызовСервера.ДлительнаяОперацияСогласованиеВозможно(
		Форма.УникальныйИдентификатор,
		ПредметСогласования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыОповещения = Новый Структура(
		"Форма,
		|ОповещениеОЗавершении");
	ПараметрыОповещения.Форма = Форма;
	ПараметрыОповещения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПолучениеВозможностиСогласования",
		ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗавершитьПолучениеВозможностиСогласования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось определить возможность согласования документа по причине:
						|%1'"), Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

// Обработчик оповещения "СогласоватьАсинхронноЗавершение".
//
// Параметры:
//   Ответ - Произвольный
//   ДополнительныеПараметры - Структура:
//     * Форма - РасширениеФормыКлиентскогоПриложенияДляОбъектов:
//         ** Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//                   - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//     * ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура СогласоватьАсинхронноЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ДополнительныеПараметры.Форма.Записать();
		Если ДополнительныеПараметры.Форма.Объект.Ссылка.Пустая()
				Или ДополнительныеПараметры.Форма.Модифицированность Тогда
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОповещениеОЗавершении,
				Новый Структура("ВыполненоУспешно, ОписаниеОшибки",
					Ложь,
					НСтр("ru = 'Предмет согласования не записан.'")));
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеОЗавершении,
			Новый Структура("ВыполненоУспешно, ОписаниеОшибки",
				Ложь,
				НСтр("ru = 'Предмет согласования не записан.'")));
		Возврат;
	КонецЕсли;
	
	НачатьСогласованиеАсинхронно(ДополнительныеПараметры.Форма,
		ДополнительныеПараметры.Форма.Объект.Ссылка,
		ДополнительныеПараметры.ОповещениеОЗавершении);
	
КонецПроцедуры

Процедура НачатьСогласованиеАсинхронно(Форма, ПредметСогласования, ОповещениеОЗавершении)
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотВызовСервера.ДлительнаяОперацияНачатьСогласование(
		Форма.УникальныйИдентификатор, ПредметСогласования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыОповещения = Новый Структура(
		"Форма,
		|ОповещениеОЗавершении");
	ПараметрыОповещения.Форма = Форма;
	ПараметрыОповещения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьСогласованиеАсинхронно",
		ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗавершитьСогласованиеАсинхронно(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить документ на согласование по причине:
						|%1'"), Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

Процедура НачатьПолучениеВозможностиПрерыванияСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении)
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотВызовСервера.ДлительнаяОперацияПрерываниеСогласованияВозможно(
		Форма.УникальныйИдентификатор,
		ПредметСогласования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыОповещения = Новый Структура(
		"Форма,
		|ОповещениеОЗавершении");
	ПараметрыОповещения.Форма = Форма;
	ПараметрыОповещения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПолучениеВозможностиПрерыванияСогласования",
		ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗавершитьПолучениеВозможностиПрерыванияСогласования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось определить возможность прерывания согласования документа по причине:
						|%1'"), Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

// Обработчик оповещения "ПрерватьСогласованиеАсинхронноЗавершение".
//
// Параметры:
//   Ответ - Произвольный
//   ДополнительныеПараметры - Структура:
//     * Форма - РасширениеФормыКлиентскогоПриложенияДляОбъектов:
//         ** Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//                   - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//     * ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура ПрерватьСогласованиеАсинхронноЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ДополнительныеПараметры.Форма.Записать();
		Если ДополнительныеПараметры.Форма.Объект.Ссылка.Пустая()
				Или ДополнительныеПараметры.Форма.Модифицированность Тогда
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОповещениеОЗавершении,
				Новый Структура("ВыполненоУспешно, ОписаниеОшибки",
					Ложь,
					НСтр("ru = 'Предмет согласования не записан.'")));
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеОЗавершении,
			Новый Структура("ВыполненоУспешно, ОписаниеОшибки",
				Ложь,
				НСтр("ru = 'Предмет согласования не записан.'")));
		Возврат;
	КонецЕсли;
	
	НачатьПрерываниеСогласованияАсинхронно(ДополнительныеПараметры.Форма,
		ДополнительныеПараметры.Форма.Объект.Ссылка,
		ДополнительныеПараметры.ОповещениеОЗавершении);
	
КонецПроцедуры

Процедура НачатьПрерываниеСогласованияАсинхронно(Форма, ПредметСогласования, ОповещениеОЗавершении)
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотВызовСервера.ДлительнаяОперацияПрерватьСогласование(
		Форма.УникальныйИдентификатор,
		ПредметСогласования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыОповещения = Новый Структура(
		"Форма,
		|ОповещениеОЗавершении");
	ПараметрыОповещения.Форма = Форма;
	ПараметрыОповещения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПрерываниеСогласованияАсинхронно",
		ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗавершитьПрерываниеСогласованияАсинхронно(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прервать согласование документа по причине:
						|%1'"), Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

Процедура НачатьПолучениеСостоянияСогласования(Форма, ПредметСогласования, ОповещениеОЗавершении)
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборотВызовСервера.ДлительнаяОперацияСостояниеСогласования(
		Форма.УникальныйИдентификатор,
		ПредметСогласования);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыОповещения = Новый Структура(
		"Форма,
		|ОповещениеОЗавершении");
	ПараметрыОповещения.Форма = Форма;
	ПараметрыОповещения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьПолучениеСостоянияСогласования",
		ЭтотОбъект, ПараметрыОповещения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗавершитьПолучениеСостоянияСогласования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить состояние согласования документа по причине:
						|%1'"), Результат.КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	
КонецПроцедуры

Процедура ВыбратьПользователяИзДереваПодразделенийЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ПараметрыОповещения.ФормаВладелец[ПараметрыОповещения.Реквизит] = Результат.РеквизитПредставление;
		ПараметрыОповещения.ФормаВладелец[ПараметрыОповещения.Реквизит + "ID"] = Результат.РеквизитID;
		ПараметрыОповещения.ФормаВладелец[ПараметрыОповещения.Реквизит + "Тип"] = Результат.РеквизитТип;
		ПараметрыОповещения.ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВыборТипаЗавершение(ИмяТипа, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ТекущиеДанные = ПараметрыОповещения.ТекущиеДанные;
	Реквизит = ПараметрыОповещения.Реквизит;
	
	Если ИмяТипа = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеОбработка(ИмяТипа, Форма, ТекущиеДанные, Реквизит)
	
КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеОбработка(ИмяТипа, Форма, ТекущиеДанные, Реквизит)
	
	Если ИмяТипа = "integer" 
		Или ИмяТипа = "boolean" 
		Или ИмяТипа = "string" 
		Или ИмяТипа = "date" Тогда
		
		Если ИмяТипа = "integer" Тогда
			ТипЗначения = Тип("Число");
		ИначеЕсли ИмяТипа = "boolean" Тогда
			ТипЗначения = Тип("Булево");
		ИначеЕсли ИмяТипа = "string" Тогда
			ТипЗначения = Тип("Строка");
		ИначеЕсли ИмяТипа = "date" Тогда
			ТипЗначения = Тип("Дата");
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВводЗначенияЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		 
		ПоказатьВводЗначения(Оповещение, ТекущиеДанные[Реквизит], НСтр("ru='Введите значение'"), ТипЗначения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ИмяТипа);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка", 
			ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВводЗначенияЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит] = Результат;
		ПараметрыОповещения.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит + "ID"] = Результат.РеквизитID;
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит + "Тип"] = Результат.РеквизитТип;
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит] = Результат.РеквизитПредставление;
		ПараметрыОповещения.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ПереключитьХронометражЗавершение".
//
// Параметры:
//   РезультатВыбораРоли - Произвольный
//   ПараметрыОповещения - Структура:
//     * Форма - ФормаКлиентскогоПриложения
//     * Элемент - ТаблицаФормы
//
Процедура ПрименитьВыборУчастникаБизнесПроцессаВСпискеЗавершение(РезультатВыбораРоли, ПараметрыОповещения) Экспорт
	
	ТекущиеДанные = ПараметрыОповещения.Элемент.ТекущиеДанные;
	
	Если РезультатВыбораРоли = Неопределено Тогда
		Возврат; 
	КонецЕсли;
		
	ТекущиеДанные.Исполнитель = РезультатВыбораРоли.Исполнитель;
	ТекущиеДанные.ИсполнительID = РезультатВыбораРоли.ИсполнительID;
	ТекущиеДанные.ИсполнительТип = РезультатВыбораРоли.ИсполнительТип;
	
	ТекущиеДанные.ОсновнойОбъектАдресации = РезультатВыбораРоли.ОсновнойОбъектАдресации;
	ТекущиеДанные.ОсновнойОбъектАдресацииID = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
	ТекущиеДанные.ОсновнойОбъектАдресацииТип = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
	
	ТекущиеДанные.ДополнительныйОбъектАдресации = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
	ТекущиеДанные.ДополнительныйОбъектАдресацииID = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
	ТекущиеДанные.ДополнительныйОбъектАдресацииТип = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
	
	ПараметрыОповещения.Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик оповещения "ПереключитьХронометражЗавершение".
//
// Параметры:
//   Результат - КодВозвратаДиалога
//   ПараметрыОповещения - Структура:
//     * ОбъектИС - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый
//     * ОбъектДО - Структура:
//         ** documentType - Структура:
//              *** ID - Строка
//              *** name - Строка
//              *** type - Строка
//         ** ID - Строка
//         ** name - Строка
//         ** type - Строка
//         ** ВнешнийОбъект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый
//     * ПараметрыХронометража - Структура:
//         ** ВключенХронометраж - Булево
//         ** ДатаНачалаХронометража - Дата
//         ** ДатаКонцаХронометража - Дата
//     * АктивныеЗаписи - Массив из Структура:
//         ** ВключенХронометраж - Булево
//         ** ДатаНачалаХронометража - Дата
//         ** ДатаКонцаХронометража - Дата
//         ** Источник - Строка
//         ** ИсточникID - Строка
//         ** ИсточникТип - Строка
//     * Форма - ФормаКлиентскогоПриложения
//
Процедура ПереключитьХронометражЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записи = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоОбъектамДокументооборота(
			ПараметрыОповещения.АктивныеЗаписи);
		
		Для Каждого Запись Из Записи Цикл
			Параметры = Новый Структура;
			Параметры.Вставить("name", Запись.Источник);
			Параметры.Вставить("ID", Запись.ИсточникID);
			Параметры.Вставить("type", Запись.ИсточникТип);
			Оповестить("Запись_ДокументооборотТрудозатраты", Параметры, Запись.ИсточникID);
		КонецЦикла;
		
		ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоВнешнемуОбъекту(
			ПараметрыОповещения.ОбъектИС,
			ПараметрыОповещения.ПараметрыХронометража);
			
		ПараметрыОповещения.Форма.Элементы.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка =
			ПараметрыХронометража.ВключенХронометраж;
		
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(ПараметрыОповещения.ОбъектИС));
			Состояние(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоддержкаСовместимости_СоздатьБизнесПроцессЗавершение(ТипБизнесПроцесса, Параметры) Экспорт
	
	Если ТипБизнесПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
		ТипБизнесПроцесса,
		Неопределено,,
		Параметры);
	
КонецПроцедуры

Процедура ПрименитьВыборУчастникаБизнесПроцессаВПолеЗавершение(РезультатВыбораРоли, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ИмяПоля = ПараметрыОповещения.ИмяПоля;
	ИмяПоляОбъектаАдресации = ПараметрыОповещения.ИмяПоляОбъектаАдресации;
	
	Если РезультатВыбораРоли = Неопределено Тогда
		Возврат; 
	КонецЕсли;
		
	Форма[ИмяПоля] = РезультатВыбораРоли.Исполнитель;
	Форма[ИмяПоля + "ID"] = РезультатВыбораРоли.ИсполнительID;
	Форма[ИмяПоля + "Тип"] = РезультатВыбораРоли.ИсполнительТип;
	
	Форма["Основной" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ОсновнойОбъектАдресации;
	Форма["Основной" + ИмяПоляОбъектаАдресации + "ID"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
	Форма["Основной" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
	
	Форма["Дополнительный" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
	Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "ID"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
	Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик динамически подключаемой команды указания трудозатрат.
//
// Параметры:
//   Источник - ДанныеФормыКоллекция
//            - ДанныеФормыСтруктура:
//     * Ссылка - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый
//   Форма - ФормаКлиентскогоПриложения - форма этого объекта.
//
Процедура УказатьТрудозатраты(Источник, Форма)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		Ссылка = Источник.Ссылка;
	Иначе
		Если Источник.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Ссылка = Неопределено;
		Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
			Ссылка = Источник.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УказатьТрудозатратыПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
		Ссылка,
		ОписаниеОповещения);
	
КонецПроцедуры

// Обработчик подключаемой команды переключения хронометража.
//
// Параметры:
//   Источник - ДанныеФормыКоллекция
//            - ДанныеФормыСтруктура:
//     * Ссылка - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый
//   Форма - ФормаКлиентскогоПриложения - форма этого объекта.
//
Процедура ПереключитьХронометраж(Источник, Форма)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		Ссылка = Источник.Ссылка;
	Иначе
		Если Источник.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Ссылка = Неопределено;
		Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
			Ссылка = Источник.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", Ссылка);
	Параметры.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПереключитьХронометражПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
		Ссылка,
		ОписаниеОповещения);
	
КонецПроцедуры

// Продолжает ввод трудозатрат после нахождения или создания связанного объекта ДО.
//
// Параметры:
//   Результат - Неопределено
//             - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   Форма - ФормаКлиентскогоПриложения - форма объекта хронометража.
//
Процедура УказатьТрудозатратыПослеПоискаСвязанногоОбъектаДО(Результат, Форма) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Источник", Результат.name);
	ПараметрыФормы.Вставить("ИсточникID", Результат.ID);
	ПараметрыФормы.Вставить("ИсточникТип", Результат.type);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьПометкуКнопкиПереключитьХронометраж",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма.Элементы);
		
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
		ПараметрыФормы,
		Форма.Элементы,,,,
		Оповещение);
	
КонецПроцедуры

// Продолжает переключение хронометража после нахождения или создания связанного объекта ДО.
//
// Параметры:
//   Результат - Неопределено
//             - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   Параметры - Структура:
//     * ОбъектИС - ЛюбаяСсылка - ссылка на объект хронометража.
//     * Форма - ФормаКлиентскогоПриложения - форма объекта хронометража.
//
Процедура ПереключитьХронометражПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПараметрыХронометражаОбъекта(Параметры.ОбъектИС);
	
	НуженДиалог = Истина;
	
	ДлительностьРаботы = ПолучитьДлительностьРаботы(ПараметрыХронометража.ДатаНачалаХронометража);
	Если ДлительностьРаботы < 60 Тогда // меньше 1 минуты
		НуженДиалог = Ложь;
	КонецЕсли;
	
	Если НуженДиалог Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", Результат.name);
		ПараметрыФормы.Вставить("ИсточникID", Результат.ID);
		ПараметрыФормы.Вставить("ИсточникТип", Результат.type);
		
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьПометкуКнопкиПереключитьХронометраж",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры.Форма.Элементы);
		
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
			ПараметрыФормы,
			Параметры.ОбъектИС,,,,
			Оповещение);
		
	Иначе
		
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			
			ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоВнешнемуОбъекту(
				Параметры.ОбъектИС,
				ПараметрыХронометража);
			
			Параметры.Форма.Элементы.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка =
				ПараметрыХронометража.ВключенХронометраж;
			
			Если ПараметрыХронометража.ВключенХронометраж Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Параметры.ОбъектИС));
				Состояние(Текст);
			КонецЕсли;
			
		Иначе
			
			АктивныеЗаписи = ИнтеграцияС1СДокументооборотВызовСервера.АктивныеЗаписиХронометража();
			
			Если АктивныеЗаписи.Количество() = 0 Тогда
				
				ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоВнешнемуОбъекту(
					Параметры.ОбъектИС,
					ПараметрыХронометража);
				Параметры.Форма.Элементы.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка =
					ПараметрыХронометража.ВключенХронометраж;
				
				Если ПараметрыХронометража.ВключенХронометраж Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Параметры.ОбъектИС));
					Состояние(Текст);
				КонецЕсли;
				
			Иначе
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ОбъектИС", Параметры.ОбъектИС);
				ПараметрыОповещения.Вставить("ОбъектДО", Результат);
				ПараметрыОповещения.Вставить("ПараметрыХронометража", ПараметрыХронометража);
				ПараметрыОповещения.Вставить("АктивныеЗаписи", АктивныеЗаписи);
				ПараметрыОповещения.Вставить("Форма", Параметры.Форма);
				
				Оповещение = Новый ОписаниеОповещения(
					"ПереключитьХронометражЗавершение",
					ИнтеграцияС1СДокументооборотКлиент,
					ПараметрыОповещения);
					
				СтрокаОбъектовХронометража = "";
				Для Каждого Запись Из АктивныеЗаписи Цикл 
					СтрокаОбъектовХронометража = СтрокаОбъектовХронометража + Символы.Таб 
						+ Запись.Источник + Символы.ПС;
				КонецЦикла;
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по другим объектам:
						|%1
						|Отключить хронометраж и зафиксировать трудозатраты перед включением нового хронометража?'"),
						СтрокаОбъектовХронометража);
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Отмена);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрерватьПроцессПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьПроцесс(Параметры.Форма.ID, Параметры.Форма.Тип);
	
	Оповестить_ЗаписьБизнесПроцесса(Параметры.Форма, Ложь);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс прерван'"),,
		Параметры.Форма.Заголовок,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Продолжение процедуры ОбработкаКомандыСоздатьБизнесПроцесс.
Процедура СоздатьБизнесПроцессПроверитьПодключениеЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат = Истина Тогда
		// авторизация успешна
		СоздатьБизнесПроцесс(ПараметрКоманды);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбработкаКомандыИсходящееПисьмо.
Процедура ИсходящееПисьмоПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда
		// авторизация успешна
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИсходящееПисьмоПоискСвязанногоОбъектаЗавершение",
			ЭтотОбъект,
			ОбъектИС);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			ОбъектИС,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ИсходящееПисьмоПроверитьПодключениеЗавершение.
Процедура ИсходящееПисьмоПоискСвязанногоОбъектаЗавершение(Результат, ОбъектИС) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Предмет", Результат);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", Параметры);
	
КонецПроцедуры

#КонецОбласти