
#Область ПрограммныйИнтерфейс

// Обработка запрос HTTPСервиса ФедеральныеВебСервисы
//
// Параметры:
//  Запрос - HTTPСервисЗапрос, Структура	 - Входящий запрос. Параметр с типом Структура используется для тестирования методов.
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Результат обработки запроса
//
Функция ОбработатьЗапросHTTPСервиса(Запрос) Экспорт
	
	__ТИП__(Запрос, "HTTPСервисЗапрос, Структура", "Ошибка программиста: c82b4c50-3e1a-11e8-ad29-080027536468.");
	
	// Запишем запрос в журнал регистрации.
	ЗаписатьВЖурналРегистрации(Запрос);
	
	// Если используется метод POST, заполним значение переменной ТелоКакСтрока_.
	Если Запрос.HTTPМетод = "POST" Тогда
		ТелоКакСтрока_ = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	MimeType_ = "application/json";
	
	ЛокальныйURL_ = Запрос.БазовыйURL + Запрос.ОтносительныйURL;
	
	// Отметим признак начала обработки запроса.
	ФедеральныеВебСервисыСервер.НачалоОбработкиЗапросаSOAP();
	
	// Код состояния ответа по умолчанию 200.
	КодСостоянияОтвета_ = 200;
	
	Если Запрос.HTTPМетод = "POST" Тогда
		РезультатЗапроса_ = ОбработатьЗапрос(ЛокальныйURL_, ТелоКакСтрока_);
	ИначеЕсли Запрос.HTTPМетод = "GET" Тогда
		РезультатЗапроса_ = ОбработатьЗапрос(ЛокальныйURL_, Запрос);
	Иначе
		__ПРОВЕРКА__(Ложь, "6cf4ec1e-42df-11e8-a5c5-080027536468. Неожиданный метод HTTP: " + Запрос.HTTPМетод + ".");
	КонецЕсли;
	
	// Теперь можно сформировать ответ http-сервиса
	Ответ_ = Новый HTTPСервисОтвет(КодСостоянияОтвета_);
	
	Если ТипЗнч(РезультатЗапроса_) = Тип("Строка") Тогда
		Ответ_.УстановитьТелоИзСтроки(
			РезультатЗапроса_, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать
		);
		РазмерТелаСтрокой_ = Формат(Ответ_.ПолучитьТелоКакДвоичныеДанные().Размер(), "ЧН=; ЧГ=");
		Ответ_.Заголовки.Вставить("Content-Length", РазмерТелаСтрокой_);
	ИначеЕсли ТипЗнч(РезультатЗапроса_) = Тип("Структура") И РезультатЗапроса_.Свойство("Идентификатор") Тогда
		Ответ_.Заголовки.Вставить("Resource-URI", РезультатЗапроса_.Идентификатор);
	КонецЕсли;
	
	// Установим обязательные заголовки. Остальные подставить http-сервер, например Apache.
	Ответ_.Заголовки.Вставить("Content-Type", СтрШаблон("%1; charset=utf-8", MimeType_));
	
	// Запишем ответ в журнал регистрации для удобства отладки.
	ЗаписатьВЖурналРегистрации(Ответ_);
	
	// Возвращаем результат в вызывающий метод.
	Возврат Ответ_;
	
КонецФункции

Функция ОбработатьЗапрос(ЛокальныйURL, Запрос)
	
	Попытка
		Если СтрЗаканчиваетсяНа(ЛокальныйURL, "/EnrichmentService") Тогда
			Если ТипЗнч(Запрос) = Тип("Строка") Тогда
				Результат_ = ПеренаправитьЗапросВСервисОбогащения(Запрос);
			Иначе
				Результат_ = ПолучитьРезультатЗапросаСервисаОбогащения(Запрос);
			КонецЕсли;
		Иначе
			__ПРОВЕРКА__(Ложь, "8887f16e-84c6-11e8-84be-576316812b9b: Неизвестное имя веб-сервиса.");
		КонецЕсли;
	Исключение
		ТекстОшибки_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
		ЗаписьЖурналаРегистрации(
			"ФедеральныеВебСервисы.Ошибка",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки_
		);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат_;
КонецФункции

#Область СервисОбогащения

Функция ПолучитьРезультатЗапросаСервисаОбогащения(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ИдентификаторЗапроса_ = Запрос.Заголовки["messageID"];
		Если Не ЗначениеЗаполнено(ИдентификаторЗапроса_) Тогда
			ТекстОшибки_ ="ФедеральныеВебСервисы.СервисОбогащения: не указан идентификатор запроса.";
			Возврат СформироватьСообщениеОбОшибкеСервисОбогащения(ТекстОшибки_);
		КонецЕсли;
		
		Результат_ = РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисОбогащения.ПолучитьСообщениеСОтветомСервисаОбогащения(ИдентификаторЗапроса_);
		
		ЗапуститьФоновоеЗадание();
		
		Если Результат_ = Неопределено Тогда
			ТекстОшибки_ = "ФедеральныеВебСервисы.СервисОбогащения: не найдено сообщение, соответствующее запросу.";
			Возврат СформироватьСообщениеОбОшибкеСервисОбогащения(ТекстОшибки_);
		ИначеЕсли Результат_.СтатусЗапроса = Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками Тогда
			ТекстОшибки_ = Результат_.ОтветСервиса;
			Возврат СформироватьСообщениеОбОшибкеСервисОбогащения(ТекстОшибки_);
		Иначе
			Возврат Результат_.ОтветСервиса;
		КонецЕсли;
		
	Исключение
		
		Возврат СформироватьСообщениеОбОшибкеСервисОбогащения(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция ПеренаправитьЗапросВСервисОбогащения(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		clientEntityId_ = "";
		СтруктураJSON_ = СтрокаJSONВСтруктуру(Запрос);
		Если СтруктураJSON_.Свойство("clientEntityId") Тогда
			clientEntityId_ = СтруктураJSON_.clientEntityId;
			messageID_ = СтруктураJSON_.messageID;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(clientEntityId_) Тогда
			ТекстОшибки_ ="ФедеральныеВебСервисы.СервисОбогащения: не указан идентификатор МИС.";
			Возврат СформироватьСообщениеОбОшибкеСервисОбогащения(ТекстОшибки_);
		КонецЕсли;
		
		// Если заполнены данные ДУЛ, то попробуем определить, запрашивались ли уже данные СНИЛС
		Если СтруктураJSON_.Свойство("patient_persdocs") Тогда
			Результат_ = РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисОбогащения.ПолучитьСообщениеСОтветомПоДаннымПациента(СтруктураJSON_);
			Если ЗначениеЗаполнено(Результат_) И ЗначениеЗаполнено(Результат_.ОтветСервиса) Тогда
				Возврат Результат_.ОтветСервиса;
			КонецЕсли;
		КонецЕсли;
		
		Результат_ = ОтправитьЗапросНаСНИЛС(СтруктураJSON_);
		
		РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисОбогащения.ЗаписатьСообщениеЗапрос(
			messageID_,
			clientEntityId_,
			Результат_.Статус,
			Результат_.СообщениеЗапрос,
			Результат_.Описание,
			Результат_.Идентификатор,
			Результат_.ДатаЗапроса,
			Результат_.ДатаОтвета,
			СтруктураJSON_
		);
		
		ЗапуститьФоновоеЗадание();
		
		Если Результат_.Статус = Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ВПроцессеОбработки Тогда
			Возврат Новый Структура("Идентификатор", Результат_.Идентификатор);
		Иначе
			Возврат СформироватьСообщениеОбОшибкеФРМСС(Результат_.Описание);
		КонецЕсли;
		
	Исключение
		
		Возврат СформироватьСообщениеОбОшибкеФРМСС(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

/// Формирование запроса на СНИЛС в сервис обогащения.
///
Функция ОтправитьЗапросНаСНИЛС(ДанныеПациента)
	
	ТокенJWT_ = СгенерироватьТокенJWT();
	
	ИдентификаторИПС_ = ПолучитьИдентификаторИПССервисОбогащения();
	
	СообщениеЗапрос_ = ПолучитьТелоСообщенияСервисОбогащения(
		ДанныеПациента,
		ИдентификаторИПС_,
		ТокенJWT_
	);
	
	РезультатОбмена_ = ОтправитьЗапросВСервисОбогащения(ТокенJWT_, "/snils", СообщениеЗапрос_);
	РезультатОбмена_.Вставить("СообщениеЗапрос", СообщениеЗапрос_);
	Возврат РезультатОбмена_;
КонецФункции

/// Формирование запроса на СНИЛС в сервис обогащения.
///
Функция ПолучитьРезультатЗапросаНаСНИЛС(ИдентификаторЗапроса) Экспорт
	
	ТокенJWT_ = СгенерироватьТокенJWT();
	
	РезультатОбмена_ = ОтправитьЗапросВСервисОбогащения(ТокенJWT_, ИдентификаторЗапроса, , Истина);
	
	Возврат РезультатОбмена_;
	
КонецФункции

Функция ОтправитьЗапросВСервисОбогащения(ТокенJWT, АдресРесурса, Запрос = "", ЗапросРезультата = Ложь)
	
	РезультатОбмена_ = Новый Структура("Статус, Описание, Идентификатор, СНИЛС, ДатаЗапроса, ДатаОтвета");
	
	АдресСервера_ = ПолучитьАдресСервисаОбогащения();
	СтруктураURI_ = ФедеральныеВебСервисыСервер.СтруктураURI(АдресСервера_);
	РесурсНаСервере_ = "";
	ПозицияЗавершенияСхемы_ = СтрНайти(АдресСервера_, "://");
	Если ПозицияЗавершенияСхемы_ > 0 Тогда
		АдресСервера_ = Сред(АдресСервера_, ПозицияЗавершенияСхемы_ + 3);
	КонецЕсли;
	
	// Если схема не равна https, то тогда считаем, что используется незащищенное соединение.
	Соединение_ = Неопределено;
	Если ЗначениеЗаполнено(СтруктураURI_.Схема) И НРег(СтруктураURI_.Схема) = "https" Тогда
		Соединение_ = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	ОписаниеОшибкиУстановкиСоединения_ = "";
	СоединениеHTTP_ = Новый HTTPСоединение(АдресСервера_, , , , , , Соединение_);
	Если СоединениеHTTP_ = Неопределено Тогда
		ТекстОшибки_ = НСтр("ru = 'Не удалось установить соединение с сервером:
						   |%1'");
		ТекстОшибки_ = СтрШаблон(ТекстОшибки_, ОписаниеОшибкиУстановкиСоединения_);
		ЗаписьЖурналаРегистрации(
			"Обмен данными с сервисом обогащения: Ошибка соединения", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки_
		);
		РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
		РезультатОбмена_.Вставить("Описание", ТекстОшибки_);
		Возврат РезультатОбмена_;
	КонецЕсли;
	
	ДатаЗапроса_ = ТекущаяДатаСеанса();
	
	ДанныеЗапроса_ = СтрШаблон(
		"Запрос:
		|%1
		|
		|JWT:
		|%2"
		,
		Запрос,
		ТокенJWT
	);
	
	ЗаписьЖурналаРегистрации(
		"Обмен данными с сервисом обогащения: запрос к сервису",
		УровеньЖурналаРегистрации.Примечание,
		,
		,
		ДанныеЗапроса_
	);
	
	Попытка
		
		HTTPЗапрос_ = Новый HTTPЗапрос(АдресРесурса);
		
		Если Не ЗапросРезультата Тогда
			HTTPЗапрос_.УстановитьТелоИзСтроки(Запрос);
		КонецЕсли;
		
		ЗаголовкиHTTP_ = HTTPЗапрос_.Заголовки;
		ЗаголовкиHTTP_.Вставить("Accept", "application/json");
		ЗаголовкиHTTP_.Вставить("Authorization", "Bearer " + ТокенJWT);
		
		РезультатСтрокой_ = "";
		
		Если Не ЗапросРезультата Тогда
			ЗаголовкиHTTP_.Вставить("Content-Type", "application/json;charset=UTF-8");
			HTTPОтвет_ = СоединениеHTTP_.ОтправитьДляОбработки(HTTPЗапрос_);
			СтрокаОтвета_ = HTTPОтвет_.ПолучитьТелоКакСтроку();
			
			ДатаОтвета_ = ТекущаяДатаСеанса();
			
			// Если тело ответа заполнено, значит произошли ошибки обмена
			Если ЗначениеЗаполнено(СтрокаОтвета_) И HTTPОтвет_.Заголовки.Получить("Resource-URI") = Неопределено Тогда
				РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
				РезультатОбмена_.Вставить("Описание", СтрокаОтвета_);
				РезультатСтрокой_ = СтрокаОтвета_;
			Иначе
				ИдентификаторЗапроса_ = HTTPОтвет_.Заголовки["Resource-URI"];
				Если ЗначениеЗаполнено(ИдентификаторЗапроса_) Тогда
					РезультатСтрокой_ = "Идентификатор: " + ИдентификаторЗапроса_;
					РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ВПроцессеОбработки);
					РезультатОбмена_.Вставить("Идентификатор", ИдентификаторЗапроса_);
					РезультатОбмена_.Вставить("Описание", СтрокаОтвета_);
				Иначе
					РезультатСтрокой_ = "Запрос не принят к обработке";
					РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
					РезультатОбмена_.Вставить("Описание", СтрокаОтвета_);
				КонецЕсли;
			КонецЕсли;
		Иначе
			HTTPОтвет_ = СоединениеHTTP_.Получить(HTTPЗапрос_);
			СтрокаОтвета_ = HTTPОтвет_.ПолучитьТелоКакСтроку();
			
			ДатаОтвета_ = ТекущаяДатаСеанса();
			
			Попытка
				ЧтениеJSON_ = Новый ЧтениеJSON;
				ЧтениеJSON_.УстановитьСтроку(СтрокаОтвета_);
				СтруктураJSON_ = ПрочитатьJSON(ЧтениеJSON_);
				ЧтениеJSON_.Закрыть();
				
				Статус_ = СтруктураJSON_.patient.status;
				Если Статус_ = "Ошибка" Тогда
					Статус_ = Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками;
					Описание_ = СтрокаОтвета_;
				ИначеЕсли Статус_ = "В процессе" Тогда
					Статус_ = Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ВПроцессеОбработки;
					Описание_ = СтрокаОтвета_;
				ИначеЕсли  Статус_ = "Выполнено" Тогда
					СНИЛС_ = СтруктураJSON_.patient.snils;
					Статус_ = Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.Выполнено;
					Описание_ = СтрокаОтвета_;
					РезультатОбмена_.Вставить("СНИЛС", СНИЛС_);
				КонецЕсли;
			Исключение
				Статус_ = Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками;
				Описание_ = СтрокаОтвета_;
			КонецПопытки;
			
			РезультатОбмена_.Вставить("Статус", Статус_);
			РезультатОбмена_.Вставить("Описание", Описание_);
			РезультатСтрокой_ = Описание_;
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки_ = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			"Обмен данными с ФСС: Ошибка запроса HTTP",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки_
		);
		РезультатОбмена_.Вставить("Статус", Перечисления.СтатусыЗапросовВСервисИдентификацииОбогащения.ОбменВыполненСОшибками);
		РезультатОбмена_.Вставить("Описание", ТекстОшибки_);
		ДатаОтвета_ = ТекущаяДатаСеанса();
	КонецПопытки;
	
	РезультатОбмена_.Вставить("ДатаЗапроса", ДатаЗапроса_);
	РезультатОбмена_.Вставить("ДатаОтвета", ДатаОтвета_);
	
	ЗаписьЖурналаРегистрации(
		"Обмен данными с сервисом обогащения: ответ сервиса",
		УровеньЖурналаРегистрации.Примечание,
		,
		,
		РезультатСтрокой_
	);
	
	Возврат РезультатОбмена_;
	
КонецФункции

/// Запускает фоновое выполнение запросов к очереди сервиса обогащения.
///
Процедура ЗапуститьФоновоеЗадание() Экспорт
	ИмяМетода_ = "ФедеральныеВебСервисыJWT.ЗапроситьДанныеИзОчередиСервисаОбогащения";
	
	// Проверка, выполняется ли фоновое задание по запросу очереди из СМЭВ 3.
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", ИмяМетода_);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗадания_ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФоновыеЗадания_.Количество() = 0 Тогда
		НаименованиеФоновогоЗадания_ = ИмяМетода_;
		ФоновыеЗадания.Выполнить(ИмяМетода_, , , НаименованиеФоновогоЗадания_);
	КонецЕсли;
КонецПроцедуры

/// Выполнение запроса сообщений из очереди сервиса обогащения.
///
Процедура ЗапроситьДанныеИзОчередиСервисаОбогащения() Экспорт
	
	// Проверяем наличие заявок, которые ожидают ответа от сервиса обогащения.
	
	СледующийЗапросВОчереди_ = РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисОбогащения.СледующийЗапросВОчереди();
	Если СледующийЗапросВОчереди_ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбмена_ = ПолучитьРезультатЗапросаНаСНИЛС(
		СледующийЗапросВОчереди_.ИдентификаторСообщенияИзСервиса
	);
	
	РегистрыСведений.ФедеральныеВебСервисыЗапросыВСервисОбогащения.ЗаписатьОтвет(
		СледующийЗапросВОчереди_.ИдентификаторСообщенияИзМИС,
		РезультатОбмена_.Статус,
		РезультатОбмена_.Описание,
		РезультатОбмена_.ДатаОтвета
	);
	
	ЗапроситьДанныеИзОчередиСервисаОбогащения();
	
КонецПроцедуры

#КонецОбласти


#Область ТокенJWT

Функция ПодключитьКомпонентуJWT()
	
	ВнешняяКомпонента_ = Неопределено;
	
	ИмяКомпоненты_ = "ОбщийМакет.КомпонентаJWT";
	ПодключениеВыполнено_ = ПодключитьВнешнююКомпоненту(ИмяКомпоненты_, "FECNSPK", ТипВнешнейКомпоненты.Native);
	
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено_ Тогда
		Попытка
			ВнешняяКомпонента_ = Новый("Addin.FECNSPK.FECNSPK");
		Исключение
			ВнешняяКомпонента_ = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВнешняяКомпонента_;
	
КонецФункции

Функция ПолучитьЗаголовокТокена()
	
	ИдентификаторИПС_ = ПолучитьИдентификаторИПССервисОбогащения();
	
	ДоменноеИмя_ = ДоменноеИмяПолучателяТокена();
	
	ДатаТекущая_ = ТекущаяУниверсальнаяДата();
	Сообщение_ = СтрШаблон(
		"{
		|	""sub"": ""%1"",
		|	""aud"": ""%2"",
		|	""iat"": %3,
		|	""exp"": %4
		|}",
		ИдентификаторИПС_,
		ДоменноеИмя_,
		ДатуВTimestamp(ДатаТекущая_),
		ДатуВTimestamp(ДатаТекущая_ + 60 * 5)
	);
	Возврат Сообщение_;
КонецФункции

Функция ДоменноеИмяПолучателяТокена()
	АдресСервера_ = ПолучитьАдресСервисаОбогащения();
	СтруктураURI_ = ФедеральныеВебСервисыСервер.СтруктураURI(АдресСервера_);
	
	ДоменноеИмя_ = СтруктураURI_.Схема + "://" + СтруктураURI_.ИмяСервера;
	Возврат ДоменноеИмя_;
КонецФункции

Функция ДатуВTimestamp(Дата = Неопределено)
	Возврат Формат(Число(?(ТипЗнч(Дата) = Тип("Дата"), Дата, ТекущаяУниверсальнаяДата())-Дата("19700101")),"ЧН=0; ЧГ=0");
КонецФункции

/// Формирование запроса на СНИЛС в сервис обогащения.
//
// Параметры:
//   ОбменФРМСС - Булево -
//     Признак обмена с сервисом ФРМСС, иначе выполняется обмен с сервисом обогащения.
//
// Возвращаемое значение:
//   Строка - Токен в формате JWT.
///

Функция СгенерироватьТокенJWT()
	
	ЗаголовокТокена_ = ПолучитьЗаголовокТокена();
	ДанныеКлючей_ = ПолучитьДанныеКлючей();
	
	Сертификат_ = ДанныеКлючей_.СертификатВЗаголовок;
	
	Алгоритм_ = ЭлектроннаяПодписьСлужебныйКлиентСервер.АлгоритмПодписиСертификата(Base64Значение(Сертификат_));
	
	// Если алгоритм не был определён, то значит сертификат имеет алгоритм подписи RSA
	Если Не ЗначениеЗаполнено(Алгоритм_) Тогда
		Возврат СгенерироватьТокенJWTПоRSA(ДанныеКлючей_, ЗаголовокТокена_);
	Иначе // иначе ГОСТ
		Возврат СгенерироватьТокенJWTПоГОСТ(ДанныеКлючей_, ЗаголовокТокена_);
	КонецЕсли;
	
КонецФункции

Функция СгенерироватьТокенJWTПоГОСТ(ДанныеКлючей, ЗаголовокТокена)
	
	ДатаТекущая_ = ТекущаяУниверсальнаяДата();
	
	Сертификат = ПолучитьСертификатВЗаголовок();
	
	JsonHeader = "{""x5c"": [""" + Сертификат + """], ""alg"": ""ECGOST3410-2012""}";
	JsonHeaderBinary = ПолучитьДвоичныеДанныеИзСтроки(JsonHeader, КодировкаТекста.UTF8, Ложь);
	
	JsonPayload = ЗаголовокТокена;
	JsonPayload = СтрЗаменить(JsonPayload, Символы.ПС + Символы.ВК, "");
	JsonPayloadBinary = ПолучитьДвоичныеДанныеИзСтроки(JsonPayload, КодировкаТекста.UTF8, Ложь); 
	
	JsonHeaderAndPayload = ДвоичныеДанныеВСтрокуBase64Url(JsonHeaderBinary) + "." + ДвоичныеДанныеВСтрокуBase64Url(JsonPayloadBinary);
	ДанныеНаПодпись = ПолучитьДвоичныеДанныеИзСтроки(JsonHeaderAndPayload, КодировкаТекста.UTF8, Ложь);

	ДанныеПодписи = Новый ПотокВПамяти();
	СертификатКриптографии = Новый СертификатКриптографии(Base64Значение(ПолучитьСертификатВЗаголовок()));
		
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		МенеджерКриптографии = Новый МенеджерКриптографии("Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider", "/opt/cprocsp/lib/amd64/libcapi20.so", 80);
	Иначе
		МенеджерКриптографии = Новый МенеджерКриптографии("", "", 80);
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ДанныеКлючей.ПарольККлючуJWT;
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.НеВключать;
	ДвоичныеДанныеПодписи = МенеджерКриптографии.Подписать(ДанныеНаПодпись, СертификатКриптографии);
	
	JsonSignature = ДвоичныеДанныеВСтрокуBase64Url(ДвоичныеДанныеПодписи);
	
	Возврат JsonHeaderAndPayload + "." + JsonSignature;

КонецФункции

Функция СгенерироватьТокенJWTПоRSA(ДанныеКлючей, ЗаголовокТокена)
	
	КомпонентаJWT_ = ПодключитьКомпонентуJWT();
	
	Если КомпонентаJWT_ = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось подключить внешнюю компоненту JWT.'");
	КонецЕсли;
	
	ДанныеКлючей_ = ПолучитьДанныеКлючей();
	JWTRSA_ = "";
	Если ЗначениеЗаполнено(ДанныеКлючей.ПриватныйКлюч) И ЗначениеЗаполнено(ДанныеКлючей.ПубличныйКлюч) Тогда
		
		JWTRSA_ = КомпонентаJWT_.ПолучитьJWTRSA(
			ЗаголовокТокена,
			ДанныеКлючей.ПубличныйКлюч,
			"",
			ДанныеКлючей.ПриватныйКлюч,
			ДанныеКлючей.ПарольККлючуJWT,
			ДанныеКлючей.СертификатВЗаголовок
		);
		
		Если Не ЗначениеЗаполнено(JWTRSA_) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось сформировать токен JWT: проверьте корректность ключей.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат JWTRSA_;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Запись в журнал регистрации HTTP запроса или ответа
//
// Параметры:
//   Объект - HTTPСервисЗапрос, HTTPСервисОтвет -
//     HTTP запрос или HTTP ответ.
//
Процедура ЗаписатьВЖурналРегистрации(Запрос, HTTPМетод = "POST") Экспорт
	
	УровеньЖурналаРегистрации_ = УровеньЖурналаРегистрации.Примечание;
	
	// HTTP запрос и HTTP ответ различаются строкой состояния. Обработаем их по отдельности.
	Если ТипЗнч(Запрос) = Тип("HTTPСервисЗапрос") Тогда
		
		СтрокаПараметров_ = "";
		Разделитель_ = "?";
		
		Для Каждого КлючИЗначение_ Из Запрос.ПараметрыЗапроса Цикл
			СтрокаПараметров_ = СтрШаблон(
				"%1%2%3=%4",
				СтрокаПараметров_,
				Разделитель_,
				КлючИЗначение_.Ключ,
				КлючИЗначение_.Значение
			);
			Разделитель_ = "&";
		КонецЦикла;
		
		ЛокальныйURL_ = СтрШаблон(
			"%2%3%4",
			Запрос.БазовыйURL,
			Запрос.ОтносительныйURL,
			СтрокаПараметров_
		);
		
		СтрокаСостояния_ = СтрШаблон(
			"%1 %2 HTTP/1.1",
			Запрос.HTTPМетод,
			ЛокальныйURL_
		);
		
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPЗапрос") Тогда
		
		ЛокальныйURL_ = Запрос.АдресРесурса;
		
		СтрокаСостояния_ = СтрШаблон(
			"%1 %2 HTTP/1.1",
			HTTPМетод,
			Запрос.АдресРесурса
		);
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPСервисОтвет") Тогда
		
		СтрокаСостояния_ = СтрШаблон(
			"HTTP/1.1 %1 %2",
			Запрос.КодСостояния,
			Запрос.КодСостояния
		);
		Если Не 200 = Запрос.КодСостояния Тогда
			УровеньЖурналаРегистрации_ = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPОтвет") Тогда
		
		СтрокаСостояния_ = СтрШаблон(
			"HTTP/1.1 %1 %2",
			Запрос.КодСостояния,
			Запрос.КодСостояния
		);
		Если Не 200 = Запрос.КодСостояния Тогда
			УровеньЖурналаРегистрации_ = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
	// Для тестирования
	ИначеЕсли ТипЗнч(Запрос) = Тип("Структура") Тогда
		
		СтрокаСостояния_ = СтрШаблон(
			"__ТЕСТ__ %1",
			Запрос.ОтносительныйURL
		);
		
	Иначе
		
		__ПРОВЕРКА__(Ложь, "f27c3518-484d-11e8-ac2e-080027536468");
		
	КонецЕсли;	
	Тело_ = Запрос.ПолучитьТелоКакСтроку();
	
	// Далее сформируем строку заголовков.
	СтрокаЗаголовков_ = "";
	Для Каждого КлючИЗначение_ Из Запрос.Заголовки Цикл
		СтрокаЗаголовков_ = СтрШаблон(
			"%1%2%3%4: %5",
			СтрокаЗаголовков_,
			Символы.ВК,
			Символы.ПС,
			КлючИЗначение_.Ключ,
			КлючИЗначение_.Значение
		);
	КонецЦикла;
	
	ТегПараметровSOAP_ = ЛокальныйURL_;
	
	// Теперь сформируем комментарий для журнала регистрации.
	Комментарий_ = СтрШаблон(
		"%1%2%3%4%5%6%7",
		СтрокаСостояния_,
		СтрокаЗаголовков_,
		Символы.ВК,
		Символы.ПС,
		Символы.ВК,
		Символы.ПС,
		Тело_
	);
	
	// Определимся с именем события журнала регистрации.
	Если ТипЗнч(Запрос) = Тип("HTTPСервисЗапрос") Тогда
		ИмяСобытия_ = "ФедеральныеВебСервисы.Запрос.Входящий";
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPЗапрос") Тогда
		ИмяСобытия_ = "ФедеральныеВебСервисы.Запрос.Исходящий";
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPСервисОтвет") Тогда
		ИмяСобытия_ = "ФедеральныеВебСервисы.Ответ.Исходящий";
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPОтвет") Тогда
		ИмяСобытия_ = "ФедеральныеВебСервисы.Ответ.Входящий";
		
	ИначеЕсли ТипЗнч(Запрос) = Тип("Структура") Тогда
		ИмяСобытия_ = "ФедеральныеВебСервисы.Запрос.Входящий.ТЕСТ";
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия_, УровеньЖурналаРегистрации_, , ТегПараметровSOAP_, Комментарий_
	);
	
КонецПроцедуры

Функция СтруктураВСтрокуJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Данные);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СтрокаJSONВСтруктуру(Данные)
	
	ЧтениеJSON_ = Новый ЧтениеJSON;
	ЧтениеJSON_.УстановитьСтроку(Данные);
	СтруктураJSON_ = ПрочитатьJSON(ЧтениеJSON_);
	ЧтениеJSON_.Закрыть();
	Возврат СтруктураJSON_;
	
КонецФункции

Функция ДатаИзСтрокиyyyyMMdd(Значение) Экспорт
	
	Попытка
		Возврат Дата(Лев(Значение, 4), Сред(Значение, 6, 2), Сред(Значение, 9, 2));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьИдентификаторИПССервисОбогащения()
	Возврат Константы.ФедеральныеВебСервисыИдентификаторИСвИПС.Получить();
КонецФункции

Функция ПолучитьАдресСервисаОбогащения()
	Возврат Константы.ФедеральныеВебСервисыСервисОбогащенияАдрес.Получить();;
КонецФункции

Функция СформироватьСообщениеОбОшибкеФРМСС(Ошибка)
	Возврат
		СтрШаблон(
			"{
			|	""error"": ""%1"",
			|	""status"": ""error""
			|}",
			Ошибка
		)
	;
КонецФункции

Функция ПолучитьТелоСообщенияСервисОбогащения(ДанныеПациента, ИдентификаторИПС, ТокенJWT)
	
	ОсновныеДанныеПациента_ = Новый Структура;
	ОсновныеДанныеПациента_.Вставить("familyname", ДанныеПациента.patient.familyname);
	ОсновныеДанныеПациента_.Вставить("firstname", ДанныеПациента.patient.firstname);
	Если ДанныеПациента.patient.Свойство("patronymic") Тогда
		ОсновныеДанныеПациента_.Вставить("patronymic", ДанныеПациента.patient.patronymic);
	КонецЕсли;
	ОсновныеДанныеПациента_.Вставить("birthDate", ДанныеПациента.patient.birthDate);
	ОсновныеДанныеПациента_.Вставить("gender", ДанныеПациента.patient.gender);
	
	Данные_ = Новый Структура;
	Данные_.Вставить("patient", ОсновныеДанныеПациента_);
	
	Если ДанныеПациента.Свойство("patient_persdocs") Тогда
		ДанныеДУЛ_ = Новый Структура;
		ДанныеДУЛ_.Вставить("type", ДанныеПациента.patient_persdocs.type);
		Если ДанныеПациента.patient_persdocs.Свойство("series") Тогда
			ДанныеДУЛ_.Вставить("series", ДанныеПациента.patient_persdocs.series);
		КонецЕсли;
		ДанныеДУЛ_.Вставить("number", ДанныеПациента.patient_persdocs.number);
		ДанныеДУЛ_.Вставить("issue_date", ДанныеПациента.patient_persdocs.issue_date);
		ДанныеДУЛ_.Вставить("issuer", ДанныеПациента.patient_persdocs.issuer);
		
		Данные_.Вставить("patient_persdocs", ДанныеДУЛ_);
	КонецЕсли;
	
	// Если токен не генерируем, значит происходит отправка сообщения в Регион.
	// В таком случае требуется передать идентификатор МИС.
	Если Не ЗначениеЗаполнено(ТокенJWT) Тогда
		Данные_.Вставить("clientEntityId", ИдентификаторИПС);
		Данные_.Вставить("messageID", Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	СтрокаJSON_ = СтруктураВСтрокуJSON(Данные_);
	
	Возврат СтрокаJSON_;
КонецФункции

Функция СформироватьСообщениеОбОшибкеСервисОбогащения(Ошибка)
	Возврат
		СтрШаблон(
			"{
			|	""patient"": {
			|		""error_code"": ""%1"",
			|		""status"": ""Ошибка""
			|	}
			|}",
			Ошибка
		)
	;
КонецФункции

Функция ДвоичныеДанныеВСтрокуBase64Url(Знач ДвоичныеДанные)
	СтрокаBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");  
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "=", "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "+", "-");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "/", "_");
	Возврат СтрокаBase64;
КонецФункции
	
#Область ДанныеКлючей

Функция ПолучитьДанныеКлючей()
	Структура_ = Новый Структура;
	Структура_.Вставить("ПриватныйКлюч", ПолучитьПриватныйКлюч());
	Структура_.Вставить("ПубличныйКлюч", ПолучитьПубличныйКлюч());
	Структура_.Вставить("ПарольККлючуJWT", ПолучитьПарольККлючуJWT());
	Структура_.Вставить("СертификатВЗаголовок", ПолучитьСертификатВЗаголовок());
	Возврат Структура_;
КонецФункции

Функция ПолучитьПриватныйКлюч()
	Возврат Константы.ФедеральныеВебСервисыПриватныйКлючJWT.Получить();
КонецФункции

Функция ПолучитьПубличныйКлюч()
	Возврат Константы.ФедеральныеВебСервисыПубличныйКлючJWT.Получить();;
КонецФункции

Функция ПолучитьПарольККлючуJWT()
	Возврат Константы.ФедеральныеВебСервисыПарольККлючуJWT.Получить();;
КонецФункции

Функция ПолучитьСертификатВЗаголовок()
	Возврат Константы.ФедеральныеВебСервисыСертификатJWT.Получить();;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти