
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Добавляет элементы фильтра по виду и свойствам на форму.
//
// Параметры:
//  Форма -ФормаКлиентскогоПриложения - форма, на которую добавляется фильтр.
//
Процедура ДобавитьФильтрНаФорму(Форма) Экспорт
	
	ИнициализироватьФильтр(Форма);
	
КонецПроцедуры

// Восстанавливает настройки фильтра из хранилища общих настроек.
// Устанавливает отбор из параметров формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где устанавливаются начальные настройки.
//
Процедура УстановитьНачальныеНастройки(Форма, Параметры) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Префикс, Форма.КодФормы);
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("УстановленныеОтборы") Тогда
			Если ЗначениеЗаполнено(Настройки.УстановленныеОтборы) Тогда
				Форма[Префикс + "УстановленныеОтборы"].Загрузить(Настройки.УстановленныеОтборы);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры)
			   И ОбщегоНазначения.СсылкаСуществует(Настройки.ВидНоменклатуры) Тогда
				
				Форма[Префикс + "ВидНоменклатуры"] = Настройки.ВидНоменклатуры;
				Форма.Элементы[Префикс + "ВидыНоменклатуры"].ТекущаяСтрока = Настройки.ВидНоменклатуры;
				ЗаполнитьФильтрПоСвойствамНаФорме(Форма);
				
			КонецЕсли;
		Иначе
			Форма[Префикс + "ВидНоменклатуры"] = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если Настройки.Свойство("ПоказыватьВидыНоменклатуры") Тогда
			Форма[Префикс + "ПоказыватьВидыНоменклатуры"] = Настройки.ПоказыватьВидыНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.ПоказатьСкрытьВидыНоменклатуры(Форма);
	
КонецПроцедуры

// Сохраняет настройки формы с фильтром по виду и свойствам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой сохраняются настройки.
//
Процедура СохранитьНастройки(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	
	Настройки = Новый Структура;
	Настройки.Вставить("ВидНоменклатуры", Форма[Префикс + "ВидНоменклатуры"]);
	Настройки.Вставить("УстановленныеОтборы", Форма[Префикс + "УстановленныеОтборы"].Выгрузить());
	Настройки.Вставить("ПоказыватьВидыНоменклатуры", Форма[Префикс + "ПоказыватьВидыНоменклатуры"]);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Префикс, Форма.КодФормы, Настройки);
	
КонецПроцедуры

// Возвращает страницу формы с элементами фильтра по виду и свойствам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой получается страница фильтра.
//
// Возвращаемое значение:
//  ГруппаФормы - страница с элементами фильтра по виду и свойствам.
//
Функция СтраницаФильтра(Форма) Экспорт
	
	Возврат Форма.Элементы[ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор() + "ФильтрПоВидуИСвойствам"];
	
КонецФункции

// Возвращает представление фильтра по виду и свойствам.
// Используется для представления пользователю при выборе фильтра.
//
// Возвращаемое значение:
//  Строка - представление фильтра.
//
Функция ПредставлениеФильтра() Экспорт
	
	Возврат НСтр("ru='виду и свойствам'");
	
КонецФункции

// Обрабатывает изменение варианта фильтра.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, у которой обрабатывается фильтр.
//
Процедура ОбработатьВыборФильтра(Форма) Экспорт
	
	УстановитьФильтр(Форма);
	
КонецПроцедуры

// Обрабатывает отмену установленного фильтра.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой обрабатывается отмена фильтра.
//
Процедура ОбработатьОтменуФильтра(Форма) Экспорт
	
	СброситьФильтр(Форма);
	
КонецПроцедуры

// Устанавливает доступность элементов фильтра по виду и свойствам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где устанавливается доступность изменения элементов фильтра.
//
Процедура УстановитьДоступность(Форма) Экспорт
	
	СтраницаФильтра(Форма).Доступность = ФильтрыСписковКлиентСервер.ИспользоватьФильтры(Форма);
	
КонецПроцедуры

// Устанавливает фильтр в списке передаваемой формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где устанавливается фильтр.
//
Процедура УстановитьФильтр(Форма) Экспорт
	
	Если Не ФильтрыСписковКлиентСервер.ИспользоватьФильтры(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	УстановитьОтборПоСвойствам(Форма);
	
КонецПроцедуры

// Выключает использование фильтра списка передаваемой формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где выключается использование фильтра.
//
Процедура СброситьФильтр(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	Список = ФильтрыСписковКлиентСервер.ФильтруемыйСписок(Форма);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,, Префикс + "ФильтрПоВидуНоменклатуры");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,, Префикс + "ФильтрПоСвойствам");
	
КонецПроцедуры

// Обрабатывает сброс всех отборов фильтра по виду и свойствам номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, где сбрасываются все отборы выбранного фильтра.
//
Процедура СброситьФильтрПоСвойствам(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	
	Фильтр = Форма[Префикс + "ФильтрПоСвойствам"];
	Для Каждого ОтборПервыйУровень Из Фильтр.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				ОтборВторойУровень.Отбор = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма[Префикс + "УстановленныеОтборы"].Очистить();
	
	Список = ФильтрыСписковКлиентСервер.ФильтруемыйСписок(Форма);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,, Префикс + "ФильтрПоСвойствам");
	
КонецПроцедуры

// Устанавливает настройки фильтра по вида номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой устанавливаются настройки.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	
	Список = ФильтрыСписковКлиентСервер.ФильтруемыйСписок(Форма);
	ВидНоменклатуры = Форма[Префикс + "ВидНоменклатуры"];
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно,
		Префикс + "ФильтрПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает настройки фильтра по свойствам номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой устанавливаются настройки.
//
Процедура УстановитьОтборПоСвойствам(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	
	Список = ФильтрыСписковКлиентСервер.ФильтруемыйСписок(Форма);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,, Префикс + "ФильтрПоСвойствам");
	ОтборДинамическогоСписка = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	УстановленныеОтборы = Форма[Префикс + "УстановленныеОтборы"].Выгрузить();
	УстановленныеОтборы = УстановленныеОтборы.Скопировать(Новый Структура("Отбор", Истина));
	ИмяСсылки = "Ссылка";
	
	Пока УстановленныеОтборы.Количество() > 0 Цикл
		
		ОписаниеОтбора = УстановленныеОтборы[0];
		
		ИмяЭлементаОтбора = ?(
			ОписаниеОтбора.ЭтоДопРеквизит,
			ИмяСсылки + ".[" + ОписаниеОтбора.ИмяРеквизита + "]",
			ИмяСсылки + "." + ОписаниеОтбора.ИмяРеквизита);
			
		Если ОписаниеОтбора.ФиксированноеЗначение Тогда
			
			Если ОписаниеОтбора.ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ОтборДинамическогоСписка,
					ИмяЭлементаОтбора,
					ВидСравненияКомпоновкиДанных.Равно,
					ОписаниеОтбора.ЗначениеОтбора,
					Префикс + "ФильтрПоСвойствам",
					Истина);
					
			ИначеЕсли ОписаниеОтбора.ТипРеквизита.СодержитТип(Тип("Дата"))
				  Или ОписаниеОтбора.ТипРеквизита.СодержитТип(Тип("Число")) Тогда
				
				Если ЗначениеЗаполнено(ОписаниеОтбора.ИнтервалОт) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
						ОтборДинамическогоСписка,
						ИмяЭлементаОтбора,
						ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
						ОписаниеОтбора.ИнтервалОт,
						Префикс + "ФильтрПоСвойствам",
						Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеОтбора.ИнтервалДо) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
						ОтборДинамическогоСписка,
						ИмяЭлементаОтбора,
						ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
						ОписаниеОтбора.ИнтервалДо,
						Префикс + "ФильтрПоСвойствам",
						Истина);
				КонецЕсли;
				
			ИначеЕсли ОписаниеОтбора.ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ОтборДинамическогоСписка,
					ИмяЭлементаОтбора,
					ВидСравненияКомпоновкиДанных.Равно,
					Истина,
					Префикс + "ФильтрПоСвойствам",
					Истина);
				
			ИначеЕсли ТипЗнч(ОписаниеОтбора.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ОтборДинамическогоСписка,
					ИмяЭлементаОтбора,
					ВидСравненияКомпоновкиДанных.ВСписке,
					ОписаниеОтбора.ЗначениеОтбора,
					Префикс + "ФильтрПоСвойствам",
					Истина);
				
			КонецЕсли;
			
			УстановленныеОтборы.Удалить(ОписаниеОтбора);
			
		Иначе
			
			Отборы = УстановленныеОтборы.НайтиСтроки(Новый Структура("ИмяРеквизита", ОписаниеОтбора.ИмяРеквизита));
			
			ЗначенияОтбора = Новый Массив;
			Для Каждого Отбор Из Отборы Цикл
				ЗначенияОтбора.Добавить(Отбор.ЗначениеОтбора);
				УстановленныеОтборы.Удалить(Отбор);
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОтборДинамическогоСписка,
				ИмяЭлементаОтбора,
				ВидСравненияКомпоновкиДанных.ВСписке,
				ЗначенияОтбора,
				Префикс + "ФильтрПоСвойствам",
				Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает настройки фильтра по указанной номенклатуре.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма, в которой устанавливаются настройки.
//  Номенклатура - СправочникСсылка.Номенклатура - элемент справочника, по которому устанавливаются настройки фильтра.
//
Процедура УстановитьОтборыСпискаПоНоменклатуре(Форма, Номенклатура) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	Форма[Префикс + "ВидНоменклатуры"] = ВидНоменклатуры;
	Форма[Префикс + "ВидНоменклатурыДоИзменения"] = ВидНоменклатуры;
	Форма.Элементы[Префикс + "ВидыНоменклатуры"].ТекущаяСтрока = Форма[Префикс + "ВидНоменклатуры"];
	
	СброситьФильтр(Форма);
	
	УстановленныеОтборы = Форма[Префикс + "УстановленныеОтборы"].Выгрузить();
	СвойстваДляОтбораТоваровСАналогичнымиСвойствами = СвойстваДляОтбораТоваровСАналогичнымиСвойствами(Номенклатура, ВидНоменклатуры);
	
	ФильтруемыеРеквизиты = ФильтруемыеРеквизиты(ВидНоменклатуры);
	Для Каждого Реквизит Из ФильтруемыеРеквизиты Цикл
		
		Отбор = Новый Структура("ИмяРеквизита", Реквизит.ИмяРеквизита);
		НайденныеОтборы = УстановленныеОтборы.НайтиСтроки(Отбор);
		Для Каждого УдаляемыйОтбор Из НайденныеОтборы Цикл
			УстановленныеОтборы.Удалить(УдаляемыйОтбор);
		КонецЦикла;
		
		СвойствоНоменклатуры = СвойстваДляОтбораТоваровСАналогичнымиСвойствами.НайтиСтроки(Отбор);
		Если СвойствоНоменклатуры.Количество() > 0 Тогда
			ЗначениеСвойства = СвойствоНоменклатуры[0];
			Если ЗначениеЗаполнено(ЗначениеСвойства.Значение) Тогда
				НовыйОтбор = УстановленныеОтборы.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйОтбор, Реквизит);
				Если Реквизит.ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
					
					НовыйОтбор.ЗначениеОтбора = ЗначениеСвойства.Значение;
					
				ИначеЕсли Реквизит.ТипРеквизита.СодержитТип(Тип("Число"))
				      Или Реквизит.ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
					
					НовыйОтбор.ИнтервалОт = ЗначениеСвойства.Значение;
					НовыйОтбор.ИнтервалДо = ЗначениеСвойства.Значение;
					
				ИначеЕсли Реквизит.ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
					
				Иначе
					НовыйОтбор.ЗначениеОтбора = ЗначениеСвойства.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма[Префикс + "УстановленныеОтборы"].Загрузить(УстановленныеОтборы);
	
	ЗаполнитьФильтрПоСвойствамНаФорме(Форма);
	УстановитьФильтр(Форма);
	
КонецПроцедуры

// Обрабатывает изменение вида номенклатуры элемента фильтра.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой обрабатывается изменение изменение вида номенклатуры.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	Если Форма[Префикс + "ВидНоменклатуры"] = Форма[Префикс + "ВидНоменклатурыДоИзменения"] Тогда
		Возврат;
	КонецЕсли;
	
	Форма[Префикс + "ВидНоменклатурыДоИзменения"] = Форма[Префикс + "ВидНоменклатуры"];
	Форма.Элементы[Префикс + "ВидыНоменклатуры"].ТекущаяСтрока = Форма[Префикс + "ВидНоменклатуры"];
	
	СброситьФильтр(Форма);
	
	Если Не ЗначениеЗаполнено(Форма[Префикс + "ВидНоменклатуры"]) Тогда
		ОчиститьФильтрПоСвойствам(Форма);
		УстановитьОтборПоВидуНоменклатуры(Форма);
	Иначе
		ЗаполнитьФильтрПоСвойствамНаФорме(Форма);
		УстановитьФильтр(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение отбора по свойству номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой обрабатывается изменение отбора по свойству номенклатуры.
//
Процедура ФильтрПоСвойствамПриИзменении(Форма) Экспорт
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	Список = ФильтрыСписковКлиентСервер.ФильтруемыйСписок(Форма);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,, Префикс + "ФильтрПоСвойствам");
	
	УстановитьОтборПоСвойствам(Форма);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьФильтр(Форма)
	
	Описание = УправляемаяФорма.ПрочитатьОписаниеФормыИзСтроки(ОписаниеЭлементовФормы(Форма));
	УправляемаяФорма.СоздатьЭлементы(Форма, Описание);
	
КонецПроцедуры

Функция ОписаниеЭлементовФормы(Форма)
	
	Описание = "
	|<Форма>
	|	<Реквизиты>
	|		<Реквизит Имя='%1ВидНоменклатуры'>
	|			<Типы>
	|				<Тип>СправочникСсылка.ВидыНоменклатуры</Тип>
	|			</Типы>
	|		</Реквизит>
	|		<Реквизит Имя='%1ВидыНоменклатуры'>
	|			<Типы>
	|				<Тип>ДинамическийСписок</Тип>
	|			</Типы>
	|			<Свойства>
	|				<Свойство Имя='ОсновнаяТаблица'>Справочник.ВидыНоменклатуры</Свойство>
	|			</Свойства>
	|			<ИспользоватьВсегда>
	|				<Ссылка />
	|				<ЭтоГруппа />
	|			</ИспользоватьВсегда>
	|		</Реквизит>
	|		<Реквизит Имя='%1ПоказыватьВидыНоменклатуры'>
	|			<Типы>
	|				<Тип>Булево</Тип>
	|			</Типы>
	|		</Реквизит>
	|		<Реквизит Имя='%1ВидНоменклатурыДоИзменения'>
	|			<Типы>
	|				<Тип>СправочникСсылка.ВидыНоменклатуры</Тип>
	|			</Типы>
	|		</Реквизит>
	|		<Реквизит Имя='%1ФильтрПоСвойствам'>
	|			<Типы>
	|				<Тип>ДеревоЗначений</Тип>
	|			</Типы>
	|			<Реквизит Имя='Отбор'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИмяРеквизита'>
	|				<Типы>
	|					<Тип>Строка(100)</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ЗначениеОтбора'>
	|				<Типы>
	|					<Тип>ЛюбаяСсылка</Тип>
	|					<Тип>СписокЗначений</Тип>
	|					<Тип>Булево</Тип>
	|					<Тип>Строка</Тип>
	|					<Тип>Дата</Тип>
	|					<Тип>Число</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Представление'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ЭтоДопРеквизит'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Свойство'>
	|				<Типы>
	|					<Тип>ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ФиксированноеЗначение'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ОтборДоступен'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИнтервалОт'>
	|				<Типы>
	|					<Тип>Дата</Тип>
	|					<Тип>Число</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИнтервалДо'>
	|				<Типы>
	|					<Тип>Дата</Тип>
	|					<Тип>Число</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ПредставлениеОтбора'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ТипРеквизита'>
	|				<Типы>
	|					<Тип>ОписаниеТипов</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ФорматРеквизита'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|		</Реквизит>
	|		<Реквизит Имя='%1УстановленныеОтборы'>
	|			<Типы>
	|				<Тип>ТаблицаЗначений</Тип>
	|			</Типы>
	|			<Реквизит Имя='Отбор'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИмяРеквизита'>
	|				<Типы>
	|					<Тип>Строка(100)</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ЗначениеОтбора'>
	|				<Типы>
	|					<Тип>ЛюбаяСсылка</Тип>
	|					<Тип>СписокЗначений</Тип>
	|					<Тип>Булево</Тип>
	|					<Тип>Строка</Тип>
	|					<Тип>Дата</Тип>
	|					<Тип>Число</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ЭтоДопРеквизит'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ФиксированноеЗначение'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИнтервалОт'>
	|				<Типы>
	|					<Тип>Дата</Тип>
	|					<Тип>Число</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИнтервалДо'>
	|				<Типы>
	|					<Тип>Дата</Тип>
	|					<Тип>Число</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ТипРеквизита'>
	|				<Типы>
	|					<Тип>ОписаниеТипов</Тип>
	|				</Типы>
	|			</Реквизит>
	|		</Реквизит>
	|	</Реквизиты>
	|	<Команды>
	|		<Команда
	|			Имя='%1СброситьФильтрПоСвойствам'
	|			Заголовок='" + НСтр("ru='Сбросить фильтр по свойствам'") + "'
	|			Действие='Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_СброситьФильтрПоСвойствам'
	|			Картинка='СнятьФлажки'/>
	|	</Команды>
	|	<Элементы>
	|		<УсловноеОформление>
	|			<Элемент>
	|				<Оформление Шрифт=',,,,Истина' ЦветТекста='ЦветГиперссылки'/>
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='%1ФильтрПоСвойствам.ФиксированноеЗначение'>
	|						<Значение Тип='Булево'>Истина</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1ФильтрПоСвойствамПредставлениеОтбора' />
	|				</Поля>
	|			</Элемент>
	|			<Элемент>
	|				<Оформление Шрифт=',,Истина' />
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='%1ФильтрПоСвойствам.Отбор'>
	|						<Значение Тип='Булево'>Истина</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1ФильтрПоСвойствамПредставление' />
	|				</Поля>
	|			</Элемент>
	|			<Элемент>
	|				<Оформление ЦветФона='ЦветФонаФормы' ЦветТекста='ЦветТекстаОтмененнойСтрокиДокумента' />
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='%3'>
	|						<Значение Тип='Булево'>Ложь</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1ВидыНоменклатуры' />
	|					<Поле Имя='%1ФильтрПоСвойствам' />
	|				</Поля>
	|			</Элемент>
	|			<Элемент>
	|				<Оформление ЦветТекста='ЦветТекстаОтмененнойСтрокиДокумента' />
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='%3'>
	|						<Значение Тип='Булево'>Ложь</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1ФильтрПоСвойствамПредставлениеОтбора' />
	|					<Поле Имя='%1ПоказатьСкрытьВидыНоменклатуры' />
	|				</Поля>
	|			</Элемент>
	|		</УсловноеОформление>
	|		<ГруппаФормы Имя='%1ФильтрПоВидуИСвойствам' Родитель='%2'>
	|			<Свойство Имя='Вид'>Страница</Свойство>
	|			<ГруппаФормы Имя='%1Шапка'>
	|				<Свойство Имя='Вид'>ОбычнаяГруппа</Свойство>
	|				<Свойство Имя='Отображение'>Нет</Свойство>
	|				<Свойство Имя='Группировка'>Горизонтальная</Свойство>
	|				<Свойство Имя='ОтображатьЗаголовок'>Нет</Свойство>
	|				<ПолеФормы Имя='%1ВидНоменклатуры'>
	|					<Свойство Имя='Вид'>ПолеВвода</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ВидНоменклатуры</Свойство>
	|					<Свойство Имя='Заголовок'>Вид</Свойство>
	|					<Свойство Имя='ВыборГруппИЭлементов'>Элементов</Свойство>
	|					<Свойство Имя='АвтоМаксимальнаяШирина'>Ложь</Свойство>
	|					<Свойство Имя='МаксимальнаяШирина'>25</Свойство>
	|					<События>
	|						<ПриИзменении Действие='Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ПриИзмененииВидаНоменклатуры'/>
	|					</События>
	|				</ПолеФормы>
	|				<ГруппаФормы Имя='%1КоманднаяПанель'>
	|					<Свойство Имя='Вид'>КоманднаяПанель</Свойство>
	|					<Свойство Имя='РастягиватьПоГоризонтали'>Ложь</Свойство>
	|					<Свойство Имя='Ширина'>3</Свойство>
	|					<КнопкаФормы Имя='%1СброситьФильтрПоСвойствам'>
	|						<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|						<Свойство Имя='ИмяКоманды'>%1СброситьФильтрПоСвойствам</Свойство>
	|						<Свойство Имя='Отображение'>Картинка</Свойство>
	|					</КнопкаФормы>
	|				</ГруппаФормы>
	|				<ДекорацияФормы Имя='%1ПоказатьСкрытьВидыНоменклатуры'>
	|					<Свойство Имя='Вид'>Надпись</Свойство>
	|					<Свойство Имя='Гиперссылка'>Истина</Свойство>
	|					<События>
	|						<Нажатие Действие='Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ПоказатьСкрытьВидыНоменклатурыНажатие'/>
	|					</События>
	|				</ДекорацияФормы>
	|			</ГруппаФормы>
	|			<ТаблицаФормы Имя='%1ВидыНоменклатуры'>
	|				<Свойство Имя='ПутьКДанным'>%1ВидыНоменклатуры</Свойство>
	|				<Свойство Имя='ПоложениеКоманднойПанели'>Нет</Свойство>
	|				<Свойство Имя='Отображение'>Дерево</Свойство>
	|				<Свойство Имя='НачальноеОтображениеДерева'>НеРаскрывать</Свойство>
	|				<Свойство Имя='ОтображатьКорень'>Ложь</Свойство>
	|				<Свойство Имя='Шапка'>Ложь</Свойство>
	|				<События>
	|					<ПриАктивизацииСтроки Действие='Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ВидыНоменклатурыПриАктивизацииСтроки' />
	|				</События>
	|				<ПолеФормы Имя='%1ВидыНоменклатурыСсылка'>
	|					<Свойство Имя='Вид'>ПолеВвода</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ВидыНоменклатуры.Ссылка</Свойство>
	|				</ПолеФормы>
	|			</ТаблицаФормы>
	|			<ТаблицаФормы Имя='%1ФильтрПоСвойствам'>
	|				<Свойство Имя='ПутьКДанным'>%1ФильтрПоСвойствам</Свойство>
	|				<Свойство Имя='ПоложениеКоманднойПанели'>Нет</Свойство>
	|				<Свойство Имя='Отображение'>Дерево</Свойство>
	|				<Свойство Имя='НачальноеОтображениеДерева'>РаскрыватьВсеУровни</Свойство>
	|				<Свойство Имя='Шапка'>Ложь</Свойство>
	|				<Свойство Имя='ГоризонтальныеЛинии'>Ложь</Свойство>
	|				<Свойство Имя='ВертикальныеЛинии'>Ложь</Свойство>
	|				<Свойство Имя='ЧередованиеЦветовСтрок'>Ложь</Свойство>
	|				<События>
	|					<Выбор Действие='Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамВыбор' />
	|				</События>
	|				<ГруппаФормы Имя='%1ФильтрПоСвойствамГруппаПредставление'>
	|					<Свойство Имя='Вид'>ГруппаКолонок</Свойство>
	|					<Свойство Имя='Группировка'>ВЯчейке</Свойство>
	|					<ПолеФормы Имя='%1ФильтрПоСвойствамОтбор'>
	|							<Свойство Имя='Вид'>ПолеФлажка</Свойство>
	|							<Свойство Имя='ПутьКДанным'>%1ФильтрПоСвойствам.Отбор</Свойство>
	|							<События>
	|								<ПриИзменении Действие='Подключаемый_ФильтрНоменклатурыПоВидуИСвойствам_ФильтрПоСвойствамОтборПриИзменении' />
	|							</События>
	|					</ПолеФормы>
	|					<ПолеФормы Имя='%1ФильтрПоСвойствамПредставление'>
	|							<Свойство Имя='Вид'>ПолеНадписи</Свойство>
	|							<Свойство Имя='ПутьКДанным'>%1ФильтрПоСвойствам.Представление</Свойство>
	|							<Свойство Имя='ТолькоПросмотр'>Истина</Свойство>
	|					</ПолеФормы>
	|				</ГруппаФормы>
	|				<ПолеФормы Имя='%1ФильтрПоСвойствамПредставлениеОтбора'>
	|					<Свойство Имя='Вид'>ПолеНадписи</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ФильтрПоСвойствам.ПредставлениеОтбора</Свойство>
	|					<Свойство Имя='ГиперссылкаЯчейки'>Истина</Свойство>
	|				</ПолеФормы>
	|			</ТаблицаФормы>
	|		</ГруппаФормы>
	|	</Элементы>
	|</Форма>
	|";
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Описание,
		ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор(),
		ФильтрыСписков.СтраницаФильтров(),
		ФильтрыСписковКлиентСервер.ИмяРеквизитаИспользоватьФильтры());
	Возврат Описание;
	
КонецФункции

Процедура ОчиститьФильтрПоСвойствам(Форма)
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	Фильтр = Форма.РеквизитФормыВЗначение(Префикс + "ФильтрПоСвойствам");
	Фильтр.Строки.Очистить();
	Форма.ЗначениеВРеквизитФормы(Фильтр, Префикс + "ФильтрПоСвойствам");
	
КонецПроцедуры

Процедура ЗаполнитьФильтрПоСвойствамНаФорме(Форма)
	
	Префикс = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.Идентификатор();
	
	Фильтр = Форма.РеквизитФормыВЗначение(Префикс + "ФильтрПоСвойствам");
	ЗаполнитьФильтрПоСвойствам(Фильтр, Форма[Префикс + "ВидНоменклатуры"], Форма[Префикс + "УстановленныеОтборы"]);
	Форма.ЗначениеВРеквизитФормы(Фильтр, Префикс + "ФильтрПоСвойствам");
	
КонецПроцедуры

Процедура ЗаполнитьФильтрПоСвойствам(Фильтр, ВидНоменклатуры, УстановленныеОтборы)
	
	Фильтр.Строки.Очистить();
	Для Каждого СтрокаОтбора Из УстановленныеОтборы Цикл
		СтрокаОтбора.Отбор = Ложь;
	КонецЦикла;
	
	РеквизитыБыстрогоОтбора = ФильтруемыеРеквизиты(ВидНоменклатуры);
	
	МаксимальноеКоличествоЗначенийВДереве = Константы.МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры.Получить();
	
	Для Каждого Реквизит Из РеквизитыБыстрогоОтбора Цикл
		
		ТипРеквизита = Реквизит.ТипРеквизита;
		
		СтрокаРеквизита = Фильтр.Строки.Добавить();
		СтрокаРеквизита.ИмяРеквизита    = Реквизит.ИмяРеквизита;
		СтрокаРеквизита.Представление   = Реквизит.ПредставлениеРеквизита;
		СтрокаРеквизита.ЭтоДопРеквизит  = Реквизит.ЭтоДопРеквизит;
		СтрокаРеквизита.Свойство        = Реквизит.Свойство;
		СтрокаРеквизита.ОтборДоступен   = Истина;
		СтрокаРеквизита.ТипРеквизита    = ТипРеквизита;
		СтрокаРеквизита.ФорматРеквизита = Реквизит.ФорматРеквизита;
		
		ОтобранныеСтроки = УстановленныеОтборы.НайтиСтроки(Новый Структура("ИмяРеквизита", СтрокаРеквизита.ИмяРеквизита));
		
		Если ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			Если ОтобранныеСтроки.Количество() > 0 Тогда
				СтрокаРеквизита.ЗначениеОтбора      = ОтобранныеСтроки[0].ЗначениеОтбора;
				СтрокаРеквизита.ПредставлениеОтбора = СтрокаРеквизита.ЗначениеОтбора;
				СтрокаРеквизита.Отбор               = Истина;
				ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], СтрокаРеквизита);
			Иначе
				СтрокаРеквизита.ЗначениеОтбора        = "";
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число")) Тогда
			
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ЗначениеОтбора        = 0;
			
			Если ОтобранныеСтроки.Количество() > 0 Тогда
				СтрокаРеквизита.ИнтервалОт          = ОтобранныеСтроки[0].ИнтервалОт;
				СтрокаРеквизита.ИнтервалДо          = ОтобранныеСтроки[0].ИнтервалДо;
				СтрокаРеквизита.ПредставлениеОтбора = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.ПредставлениеИнтервалаОтбора(
					СтрокаРеквизита.ИнтервалОт, СтрокаРеквизита.ИнтервалДо, СтрокаРеквизита.ФорматРеквизита);
				СтрокаРеквизита.Отбор               = Истина;
				ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], СтрокаРеквизита);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = 0;
				СтрокаРеквизита.ИнтервалДо            = 0;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
			
			СтрокаРеквизита.ФиксированноеЗначение    = Истина;
			СтрокаРеквизита.ЗначениеОтбора           = Дата('00010101');
			
			Если ОтобранныеСтроки.Количество() > 0 Тогда
				СтрокаРеквизита.ИнтервалОт          = ОтобранныеСтроки[0].ИнтервалОт;
				СтрокаРеквизита.ИнтервалДо          = ОтобранныеСтроки[0].ИнтервалДо;
				СтрокаРеквизита.ПредставлениеОтбора = ФильтрНоменклатурыПоВидуИСвойствамКлиентСервер.ПредставлениеИнтервалаОтбора(
					СтрокаРеквизита.ИнтервалОт, СтрокаРеквизита.ИнтервалДо, СтрокаРеквизита.ФорматРеквизита);
				СтрокаРеквизита.Отбор               = Истина;
				ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], СтрокаРеквизита);
			Иначе
				СтрокаРеквизита.ИнтервалОт               = Дата('00010101');
				СтрокаРеквизита.ИнтервалДо               = Дата('00010101');
				СтрокаРеквизита.ПредставлениеОтбора      = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
			
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ЗначениеОтбора        = Истина;
			Если ОтобранныеСтроки.Количество()>0 Тогда
				СтрокаРеквизита.Отбор = Истина;
				ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], СтрокаРеквизита);
			КонецЕсли;
			
		Иначе
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита.Типы()[0]);
			Если Не ПравоДоступа("Чтение", МетаданныеТипа) Тогда
				Фильтр.Строки.Удалить(СтрокаРеквизита);
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.ЭтоДопРеквизит Тогда
				ТекстЗапроса = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	ДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
				|	И ДополнительныеРеквизиты.Свойство = &Свойство
				|";
			Иначе
				ТекстЗапроса = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаСправочника." + Реквизит.ИмяРеквизита + " КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочника
				|ГДЕ
				|	ТаблицаСправочника.ВидНоменклатуры = &ВидНоменклатуры
				|";
			КонецЕсли;
			
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = МаксимальноеКоличествоЗначенийВДереве + 1;
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Свойство", Реквизит.Свойство);
			Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
			
			ВыборкаЗначений = Запрос.Выполнить().Выбрать();
			Если ВыборкаЗначений.Количество() = 0 Тогда
				
				Фильтр.Строки.Удалить(СтрокаРеквизита);
				Продолжить;
				
			ИначеЕсли ВыборкаЗначений.Количество() > МаксимальноеКоличествоЗначенийВДереве Тогда
				
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				Если ОтобранныеСтроки.Количество() > 0 Тогда
					Если ОтобранныеСтроки.Количество() = 1 И ТипЗнч(ОтобранныеСтроки[0].ЗначениеОтбора) = Тип("СписокЗначений") Тогда
						СтрокаРеквизита.ЗначениеОтбора = ОтобранныеСтроки[0].ЗначениеОтбора;
					Иначе
						ЗначенияОтбора = Новый СписокЗначений;
						КоличествоОтборов = ОтобранныеСтроки.Количество();
						Для Индекс = 2 По КоличествоОтборов Цикл
							СтрокаОтбора = ОтобранныеСтроки[Индекс - 1];
							ЗначенияОтбора.Добавить(СтрокаОтбора.ЗначениеОтбора);
							УстановленныеОтборы.Удалить(СтрокаОтбора);
						КонецЦикла;
						ЗначенияОтбора.Добавить(ОтобранныеСтроки[0].ЗначениеОтбора);
						СтрокаРеквизита.ЗначениеОтбора = ЗначенияОтбора;
					КонецЕсли;
					СтрокаРеквизита.ПредставлениеОтбора = СтрокаРеквизита.ЗначениеОтбора;
					СтрокаРеквизита.Отбор = Истина;
					ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], СтрокаРеквизита);
				Иначе
					СтрокаРеквизита.ЗначениеОтбора        = Новый СписокЗначений;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				КонецЕсли;
				
			Иначе
				
				СтрокаРеквизита.ОтборДоступен = Ложь;
				ОтборУстановлен = Ложь;
				ЗначениеОтбораСписок = Неопределено;
				Если ОтобранныеСтроки.Количество() = 1 И ОтобранныеСтроки[0].ФиксированноеЗначение Тогда
					ЗначениеОтбораСписок = ОтобранныеСтроки[0].ЗначениеОтбора;
					УстановленныеОтборы.Удалить(СтрокаОтбора);
				КонецЕсли;
				
				Пока ВыборкаЗначений.Следующий() Цикл
					
					Если (ВыборкаЗначений.Количество() = 1
					   И Не ЗначениеЗаполнено(ВыборкаЗначений.ЗначениеОтбора)) Тогда
						Фильтр.Строки.Удалить(СтрокаРеквизита);
						СтрокаРеквизита = Неопределено;
						Прервать;
					КонецЕсли;
					
					СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
					
					СтрокаЗначения.ОтборДоступен = Ложь;
					СтрокаЗначения.ЗначениеОтбора = ВыборкаЗначений.ЗначениеОтбора;
					СтрокаЗначения.Представление  = ?(ЗначениеЗаполнено(ВыборкаЗначений.ЗначениеОтбора), ВыборкаЗначений.ЗначениеОтбора, НСтр("ru = '<не задано>'"));
					
					Если ЗначениеОтбораСписок = Неопределено Тогда
						Отбор = Новый Структура();
						Отбор.Вставить("ИмяРеквизита"  , СтрокаРеквизита.ИмяРеквизита);
						Отбор.Вставить("ЗначениеОтбора", СтрокаЗначения.ЗначениеОтбора);
						ОтобранныеСтроки = УстановленныеОтборы.НайтиСтроки(Отбор);
						Если ОтобранныеСтроки.Количество() > 0 Тогда
							ОтобранныеСтроки[0].Отбор = Истина;
							СтрокаЗначения.Отбор = Истина;
							ОтборУстановлен = Истина;
						КонецЕсли;
					Иначе
						ЗначениеОтбора = ЗначениеОтбораСписок.НайтиПоЗначению(СтрокаЗначения.ЗначениеОтбора);
						Если ЗначениеОтбора <> Неопределено Тогда
							СтрокаЗначения.Отбор = Истина;
							ОтборУстановлен = Истина;
							ЗаполнитьЗначенияСвойств(УстановленныеОтборы.Добавить(), СтрокаЗначения);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаРеквизита = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРеквизита.Строки.Количество() > 1 Тогда
					СтрокаРеквизита.Строки.Сортировать("Представление");
					СтрокаРеквизита.Отбор = ОтборУстановлен;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФильтруемыеРеквизиты(ВидНоменклатуры)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбора.НомерСтроки                          КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбора.Свойство                             КАК Свойство,
	|	ВЫБОР
	|		КОГДА РеквизитыБыстрогоОтбора.ЭтоДопРеквизит
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РеквизитыБыстрогоОтбора.Свойство)
	|		ИНАЧЕ РеквизитыБыстрогоОтбора.ИмяРеквизита
	|	КОНЕЦ                                                        КАК ИмяРеквизита,
	|	ВЫБОР
	|		КОГДА РеквизитыБыстрогоОтбора.ЭтоДопРеквизит
	|			ТОГДА РеквизитыБыстрогоОтбора.Свойство.Заголовок
	|		ИНАЧЕ РеквизитыБыстрогоОтбора.ПредставлениеРеквизита
	|	КОНЕЦ                                                        КАК ПредставлениеРеквизита,
	|	РеквизитыБыстрогоОтбора.ЭтоДопРеквизит                       КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА НЕ РеквизитыБыстрогоОтбора.Свойство ЕСТЬ NULL
	|			ТОГДА РеквизитыБыстрогоОтбора.Свойство.ТипЗначения
	|	КОНЕЦ                                                        КАК ТипЗначения,
	|	ВЫБОР
	|		КОГДА НЕ РеквизитыБыстрогоОтбора.Свойство ЕСТЬ NULL
	|			ТОГДА РеквизитыБыстрогоОтбора.Свойство.ФорматСвойства
	|	КОНЕЦ                                                        КАК Формат
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбора
	|ГДЕ
	|	РеквизитыБыстрогоОтбора.Ссылка = &ВидНоменклатуры
	|");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Реквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты.Колонки.Добавить("ТипРеквизита"   , Новый ОписаниеТипов("ОписаниеТипов"));
	Реквизиты.Колонки.Добавить("ФорматРеквизита", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.ЭтоДопРеквизит Тогда
			Реквизит.ТипРеквизита = Реквизит.ТипЗначения;
			Реквизит.ФорматРеквизита = Реквизит.Формат;
		Иначе
			РеквизитНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты[Реквизит.ИмяРеквизита];
			Реквизит.ТипРеквизита = РеквизитНоменклатуры.Тип;
			Реквизит.ФорматРеквизита = РеквизитНоменклатуры.Формат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Реквизит.ФорматРеквизита) Тогда
			ТипРеквизита = Реквизит.ТипРеквизита;
			Если ТипРеквизита.СодержитТип(Тип("Число")) Тогда
				ФорматРеквизита = СтрШаблон(
					"ND=%1; NFD=%2",
					ТипРеквизита.КвалификаторыЧисла.Разрядность,
					ТипРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Реквизит.ФорматРеквизита = ФорматРеквизита;
			ИначеЕсли ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
				ФорматРеквизита = СтрШаблон(
					"DLF=%1%2",
					?(ТипРеквизита.КвалификаторыДаты.ЧастиДаты <> ЧастиДаты.Время, "D", ""),
					?(ТипРеквизита.КвалификаторыДаты.ЧастиДаты <> ЧастиДаты.Дата, "T", ""));
				Реквизит.ФорматРеквизита = ФорматРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.Колонки.Удалить("ТипЗначения");
	Реквизиты.Колонки.Удалить("Формат");
	
	Возврат Реквизиты;
	
КонецФункции

Функция СвойстваДляОтбораТоваровСАналогичнымиСвойствами(Номенклатура, ВидНоменклатуры)
	
	Свойства = Новый ТаблицаЗначений;
	Свойства.Колонки.Добавить("ИмяРеквизита"  , Новый ОписаниеТипов("Строка"));
	Свойства.Колонки.Добавить("Значение");
	Свойства.Колонки.Добавить("ЭтоДопРеквизит", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбора.Свойство                             КАК Свойство,
	|	РеквизитыБыстрогоОтбора.ИмяРеквизита                         КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбора.ЭтоДопРеквизит                       КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбора
	|ГДЕ
	|	РеквизитыБыстрогоОтбора.Ссылка = &ВидНоменклатуры
	|");
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	ДополнительныеРеквизиты = Новый Массив;
	
	КоличествоПолей = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			ДополнительныеРеквизиты.Добавить(СтрокаТЧ.Свойство);
		Иначе
			
			КоличествоПолей = КоличествоПолей + 1;
			
			Если КоличествоПолей = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ", " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПолей > 0 Тогда
		ТекстЗапроса = ТекстЗапроса +" " + "ИЗ Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка = &Номенклатура;";
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	Запрос = Новый Запрос(
	ТекстЗапроса + "
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
	|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)
	|");
	
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать(); // обход реквизитов номенклатуры
	
	Если КоличествоПолей > 0 Тогда
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из Результат[0].Колонки Цикл
				
				НоваяСтрока = Свойства.Добавить();
				
				НоваяСтрока.ИмяРеквизита   = Колонка.Имя;
				НоваяСтрока.Значение       = Выборка[Колонка.Имя];
				НоваяСтрока.ЭтоДопРеквизит = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Выборка = Результат[1].Выбрать(); // обход дополнительных реквизитов номенклатуры
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Свойства.Добавить();
		
		НоваяСтрока.ИмяРеквизита   = Строка(Выборка.Свойство);
		НоваяСтрока.Значение       = Выборка.Значение;
		НоваяСтрока.ЭтоДопРеквизит = Истина;
		
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
