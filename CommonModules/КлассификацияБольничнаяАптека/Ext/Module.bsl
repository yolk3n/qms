
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Выполняет классификацию объектов с использованием ABC-анализа.
// Исходными данными для анализа является таблица значений,
// содержащая значения параметра классификации для анализируемых объектов.
// Результат анализа помещается в добавляемую колонку "Класс".
//
// Параметры
//  ИсточникДанных - таблица значений с колонкой "ЗначениеПараметраКлассификации",
//                   содержащей значения параметра, по которому производится
//                   классификация, для текущего объекта.
//  ИмяПараметраКлассификации - имя колонки в источнике данных, содержащей значение
//                              параметра классификации.
//
Процедура ВыполнитьABCКлассификацию(ИсточникДанных, ИмяПараметраКлассификации) Экспорт
	
	// Источник данных пуст, классификация не требуется.
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Классификация без разделения.
	Если ИсточникДанных.Колонки.Найти("РазделительКлассификации") = Неопределено Тогда
		ИсточникДанных.Колонки.Добавить("РазделительКлассификации");
		ИсточникДанных.ЗаполнитьЗначения(0, "РазделительКлассификации");
	КонецЕсли;
	
	// К колонку "ЗначениеПараметраКлассификации" будет помещено значение, по которому выполнена классификация.
	Если ИсточникДанных.Колонки.Найти("ЗначениеПараметраКлассификации") = Неопределено Тогда
		ИсточникДанных.Колонки.Добавить("ЗначениеПараметраКлассификации");
	КонецЕсли;
	
	ИсточникДанных.ЗагрузитьКолонку(ИсточникДанных.ВыгрузитьКолонку(ИмяПараметраКлассификации), "ЗначениеПараметраКлассификации");
	
	КолонкиСортировки = "РазделительКлассификации";
	ЕстьРаздел = (ИсточникДанных.Колонки.Найти("РазделКлассификации") <> Неопределено);
	Если ЕстьРаздел Тогда
		КолонкиСортировки = КолонкиСортировки + ", РазделКлассификации Возр";
	КонецЕсли;
	
	КолонкиСортировки = КолонкиСортировки + ", ЗначениеПараметраКлассификации Убыв";
	
	// Источник данных упорядочивается по возрастанию разделителя и убыванию параметра классификации.
	ИсточникДанных.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	Классы = Новый Массив;
	Классы.Добавить(Перечисления.ABCКлассификация.AКласс);
	Классы.Добавить(Перечисления.ABCКлассификация.BКласс);
	Классы.Добавить(Перечисления.ABCКлассификация.CКласс);
	
	РазбитьОбъектыНаКлассыМетодомКасательных(ИсточникДанных, Классы);
	
КонецПроцедуры

// Выполняет классификацию объектов с использованием XYZ-анализа.
// Исходными данными для анализа является результат запроса,
// содержащий значения параметра классификации для анализируемых объектов.
// Результат анализа помещается в колонку "Класс".
//
// Параметры
//  ИсточникДанных - РезультатЗапроса
//  ИмяПараметраКлассификации - имя колонки в источнике данных, содержащей значение
//                              параметра классификации.
//  КлючиОбъектаКлассификации - Строка - список объектов классификации
//
Функция ВыполнитьXYZКлассификацию(ИсточникДанных, ИмяПараметраКлассификации, КлючиОбъектаКлассификации) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ИсточникДанных.Колонки Цикл
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Результат.Колонки.Добавить("Класс", Новый ОписаниеТипов("ПеречислениеСсылка.XYZКлассификация"));
	Результат.Колонки.Добавить("ЗначениеПараметраКлассификации");
	
	// Источник данных пуст, классификация не требуется.
	Если ИсточникДанных.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Классификация без разделения.
	Если Результат.Колонки.Найти("РазделительКлассификации") = Неопределено Тогда
		Результат.Колонки.Добавить("РазделительКлассификации");
		Результат.ЗаполнитьЗначения(0, "РазделительКлассификации");
	КонецЕсли;
	
	КоличествоКлючейОбъектаКлассификации = СтрЧислоСтрок(СтрЗаменить(КлючиОбъектаКлассификации, ",", Символы.ПС));
	ОбъектыКлассификацииВыборка = Новый Массив(КоличествоКлючейОбъектаКлассификации);
	
	ИндексОбъектаКлассификации = 0;
	ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = ИсточникДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Истина Цикл
		
		Если ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = Неопределено Тогда
			ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		
		Если ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации].Следующий() Тогда
			
			Если ИндексОбъектаКлассификации = ОбъектыКлассификацииВыборка.ВГраница() Тогда
				
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации]);
				
				ВыборкаПериод = ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
				
				КоличествоПериодов = ВыборкаПериод.Количество();
				СреднееЗначение = ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации][ИмяПараметраКлассификации] / КоличествоПериодов;
				
				// Вычисление отношения среднеквадратичного отклонения к среднему значению
				ЗначениеПараметраКлассификации = 0;
				Если СреднееЗначение <> 0 Тогда
					Пока ВыборкаПериод.Следующий() Цикл
						ЗначениеПараметраКлассификации = ЗначениеПараметраКлассификации + Pow((?(ВыборкаПериод[ИмяПараметраКлассификации] = Null, 0, ВыборкаПериод[ИмяПараметраКлассификации]) - СреднееЗначение), 2);
					КонецЦикла;
					ЗначениеПараметраКлассификации = Sqrt(ЗначениеПараметраКлассификации / (КоличествоПериодов - 1)) * 100 / СреднееЗначение;
				КонецЕсли;
				
				НоваяСтрока[ИмяПараметраКлассификации] = ЗначениеПараметраКлассификации;
				НоваяСтрока.ЗначениеПараметраКлассификации = ЗначениеПараметраКлассификации;
				
				Если НоваяСтрока.ЗначениеПараметраКлассификации <= 10 Тогда
					НоваяСтрока.Класс = Перечисления.XYZКлассификация.XКласс;
				ИначеЕсли НоваяСтрока.ЗначениеПараметраКлассификации <= 25 Тогда
					НоваяСтрока.Класс = Перечисления.XYZКлассификация.YКласс;
				Иначе
					НоваяСтрока.Класс = Перечисления.XYZКлассификация.ZКласс;
				КонецЕсли;
				
			Иначе
				// Перейти на следующий уровень.
				ИндексОбъектаКлассификации = ИндексОбъектаКлассификации + 1;
			КонецЕсли;
			
		Иначе
			
			Если ИндексОбъектаКлассификации = 0 Тогда
				// На верхнем уровне записи закончились.
				// Обработка завершена.
				Прервать;
			Иначе
				// На текущем уровне записи закончились.
				// Необходимо перейти к следующей записи на предыдущем уровне.
				ОбъектыКлассификацииВыборка[ИндексОбъектаКлассификации] = Неопределено;
				ИндексОбъектаКлассификации = ИндексОбъектаКлассификации - 1;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкиСортировки = "РазделительКлассификации";
	ЕстьРаздел = (Результат.Колонки.Найти("РазделКлассификации") <> Неопределено);
	Если ЕстьРаздел Тогда
		КолонкиСортировки = КолонкиСортировки + ", РазделКлассификации Возр";
	КонецЕсли;
	
	КолонкиСортировки = КолонкиСортировки + ", ЗначениеПараметраКлассификации Убыв";
	
	// Источник данных упорядочивается по возрастанию разделителя и убыванию параметра классификации.
	Результат.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	Возврат Результат;
	
КонецФункции

// Возвращает период, увеличенный на количество периодов
// Параметры:
//	БазоваяДата - дата, относительно которой рассчитывается период
//	Периодичность - размер периода,
//	КоличествоПериодов - количество периодов, на которое нужно расширить базовый.
//                     если = 0, то возвращается период, в котором находится базовая дата,
//                     если < 0, то возвращаются период, соответствующий предыдущим периодам,
//                     если > 0, то возвращаются период, соответствующий следующим периодам.
//
Функция РасширенныйПериод(БазоваяДата, Периодичность, КоличествоПериодов = 0) Экспорт
	
	Период = Новый СтандартныйПериод;
	Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Если Периодичность = Перечисления.Периодичность.День
	 Или Периодичность = Перечисления.Периодичность.Неделя
	 Или Периодичность = Перечисления.Периодичность.Месяц
	 Или Периодичность = Перечисления.Периодичность.Квартал
	 Или Периодичность = Перечисления.Периодичность.Полугодие
	 Или Периодичность = Перечисления.Периодичность.Год Тогда
		
		ТипПериода = СокрЛП(Периодичность);
		Период.ДатаНачала    = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьНачалоПериода(БазоваяДата, ТипПериода);
		Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьКонецПериода(БазоваяДата, ТипПериода);
		
		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаНачала, "СЕКУНДА", -1);
			Период.ДатаНачала    = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаНачала, ТипПериода, КоличествоПериодов);
		ИначеЕсли КоличествоПериодов > 0 Тогда
			Период.ДатаНачала    = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаОкончания, "СЕКУНДА", 1);
			Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаОкончания, ТипПериода, КоличествоПериодов);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Период.ДатаНачала    = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьНачалоПериода(БазоваяДата, "ДЕКАДА");
		Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьКонецПериода(БазоваяДата, "ДЕКАДА");
		
		Если КоличествоПериодов < 0 Тогда
			Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаНачала, "СЕКУНДА", -1);
			
			ДеньМесяца = День(Период.ДатаНачала);
			Если ДеньМесяца = 1 Тогда
				НомерДекады = 0
			ИначеЕсли ДеньМесяца = 11 Тогда
				НомерДекады = 1
			Иначе
				НомерДекады = 2
			КонецЕсли;
			
			НомерДекады = НомерДекады + КоличествоПериодов;
			Если НомерДекады >= 0 Тогда
				Период.ДатаНачала = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(
					ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьНачалоПериода(Период.ДатаНачала, "МЕСЯЦ"),
					"ДЕКАДА",
					НомерДекады);
			Иначе
				// НомерДекады < 0
				ОтнятьМесяцев = -1 + Цел(НомерДекады / 3);
				НомерДекады = 3 + НомерДекады % 3; // получим положительный остаток от деления
				
				Период.ДатаНачала = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаНачала, "МЕСЯЦ", ОтнятьМесяцев);
				Период.ДатаНачала = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(
					ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьНачалоПериода(Период.ДатаНачала, "МЕСЯЦ"),
					"ДЕКАДА",
					НомерДекады);
				
			КонецЕсли;
			
		ИначеЕсли КоличествоПериодов > 0 Тогда
			
			Период.ДатаНачала    = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаОкончания, "СЕКУНДА", 1);
			
			ДеньМесяца = День(Период.ДатаОкончания);
			Если ДеньМесяца = 10 Тогда
				НомерДекады = 0
			ИначеЕсли ДеньМесяца = 20 Тогда
				НомерДекады = 1
			Иначе
				НомерДекады = 2
			КонецЕсли;
			
			НомерДекады = НомерДекады + КоличествоПериодов;
			ПрибавитьМесяцев = Цел(НомерДекады / 3);
			НомерДекады = НомерДекады % 3;
			
			Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(Период.ДатаОкончания, "МЕСЯЦ", ПрибавитьМесяцев);
			Период.ДатаОкончания = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьКонецПериода(
				ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(
					ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьНачалоПериода(Период.ДатаОкончания, "МЕСЯЦ"),
					"ДЕКАДА",
					НомерДекады)
				, "ДЕКАДА");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

// Разбивает объекты классификации в источнике данных на классы методом касательных
//
// Параметры
//	ИсточникДанных - ТаблицаЗначений - Должна содержать колонку "ЗначениеПараметраКлассификации"
//		Строки должны быть упорядочены по убыванию "ЗначениеПараметраКлассификации"
//	Классы - Массив - список классов на которые нужно разбить объекты
//
Процедура РазбитьОбъектыНаКлассыМетодомКасательных(ИсточникДанных, Классы) Экспорт
	
	ЕстьРазделитель = (ИсточникДанных.Колонки.Найти("РазделительКлассификации") <> Неопределено);
	ЕстьРаздел = (ИсточникДанных.Колонки.Найти("РазделКлассификации") <> Неопределено);
	
	// В колонку "Класс" будет помещен результат классификации.
	Если ИсточникДанных.Колонки.Найти("Класс") = Неопределено Тогда
		ИсточникДанных.Колонки.Добавить("Класс");
	КонецЕсли;
	ИсточникДанных.ЗаполнитьЗначения(Классы[Классы.ВГраница()], "Класс");
	
	ЗначениеПараметраКлассификацииИтог = 0;
	
	ИндексСтрокиИсточникаДанных = 0;
	СмещениеСтрокиИсточникаДанных = 0;
	Пока ИндексСтрокиИсточникаДанных < ИсточникДанных.Количество() Цикл
		
		ЗначениеПараметраКлассификацииИтог = ЗначениеПараметраКлассификацииИтог + ИсточникДанных[ИндексСтрокиИсточникаДанных].ЗначениеПараметраКлассификации;
		
		// Последняя строка или данные по текущему разделителю классификации закончились.
		Если ИндексСтрокиИсточникаДанных = ИсточникДанных.Количество() - 1
		 Или ЕстьРазделитель И ИсточникДанных[ИндексСтрокиИсточникаДанных].РазделительКлассификации <> ИсточникДанных[ИндексСтрокиИсточникаДанных + 1].РазделительКлассификации
		 Или ЕстьРаздел И ИсточникДанных[ИндексСтрокиИсточникаДанных].РазделКлассификации <> ИсточникДанных[ИндексСтрокиИсточникаДанных + 1].РазделКлассификации Тогда
			
			ТекущийНомерКласса = 0;
			ТекущаяДоляНарастающимИтогом = 0;
			КоличествоОбъектов = ИндексСтрокиИсточникаДанных - СмещениеСтрокиИсточникаДанных + 1;
			СреднийПроцент = 100 / КоличествоОбъектов;
			
			Для Индекс = 0 По КоличествоОбъектов - 1 Цикл
				
				ДоляОбъекта = ИсточникДанных[СмещениеСтрокиИсточникаДанных + Индекс].ЗначениеПараметраКлассификации * 100 / ЗначениеПараметраКлассификацииИтог;
				Если ДоляОбъекта < СреднийПроцент Тогда
					
					Если ТекущийНомерКласса < Классы.ВГраница() Тогда
						ТекущийНомерКласса = ТекущийНомерКласса + 1;
					Иначе
						Прервать;
					КонецЕсли;
					
					СреднийПроцент = (100 - ТекущаяДоляНарастающимИтогом) / (КоличествоОбъектов - Индекс);
					
				КонецЕсли;
				
				ИсточникДанных[СмещениеСтрокиИсточникаДанных + Индекс].Класс = Классы[ТекущийНомерКласса];
				ТекущаяДоляНарастающимИтогом = ТекущаяДоляНарастающимИтогом + ДоляОбъекта;
				
			КонецЦикла;
			
			ЗначениеПараметраКлассификацииИтог = 0;
			
			СмещениеСтрокиИсточникаДанных = ИндексСтрокиИсточникаДанных + 1;
			
		КонецЕсли;
		
		ИндексСтрокиИсточникаДанных = ИндексСтрокиИсточникаДанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
