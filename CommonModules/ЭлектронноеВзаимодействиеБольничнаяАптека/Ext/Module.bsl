
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеФункциональныхОпций.
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями", "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменЭД"                  , "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписи"       , "ИспользоватьЭлектронныеПодписи");
	// Конец электронные документы
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников.
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации",                 "Организации");
	СоответствиеСправочников.Вставить("Контрагенты",                 "Контрагенты");
	СоответствиеСправочников.Вставить("Партнеры",                    "Контрагенты");
	СоответствиеСправочников.Вставить("Номенклатура",                "Номенклатура");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения",            "ЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
	СоответствиеСправочников.Вставить("Банки",                       "КлассификаторБанков");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры",        "ЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчетаОрганизаций");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчетаКонтрагентов");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов",        "ДоговорыКонтрагентов");
	
	СоответствиеСправочников.Вставить("ФизическиеЛица",              "ФизическиеЛица"); //* Торговые предложения.
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов.
Процедура ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	// БольничнаяАптека
	
	// Обмен с контрагентами начало
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента"                                 , "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента"                                 , "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента"                        , "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента"                          , "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента"                             , "Контрагент");
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации"                                 , "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации"                                 , "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации"                                , "ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодОрганизации"                          , "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("ПолноеНаименованиеОрганизации"                  , "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации"             , "НаименованиеСокращенное");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации"                        , "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ЮридическоеФизическоеЛицо"                      , "ЮрФизЛицо");
	
	СоответствиеРеквизитовОбъекта.Вставить("НомерДоговораКонтрагента"                       , "НомерДоговора");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаДоговораКонтрагента"                        , "ДатаДоговора");
	СоответствиеРеквизитовОбъекта.Вставить("ВладелецДоговораКонтрагента"                    , "Контрагент");
	// Обмен с контрагентами конец
	
	// Конец БольничнаяАптека
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект.
Процедура НайтиСсылкуНаОбъект(ТипОбъекта, Результат, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;
	
	Попытка
		
		Если ТипОбъекта = "Валюты" Тогда
			
			Результат = НайтиВалюту(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
			
			Результат = НайтиСтрануМира(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
			
			Результат = НайтиВидКонтактнойИнформации(ИдОбъекта);
			
		ИначеЕсли ТипОбъекта = "Банки" Тогда
			
			Результат = НайтиКлассификаторБанка(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "БанковскиеСчетаКонтрагентов" Тогда
			
			Результат = НайтиБанковскийСчетКонтрагента(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "БанковскиеСчетаОрганизаций" Тогда
			
			Результат = НайтиБанковскийСчетОрганизации(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "ДоговорыКонтрагентов" Тогда
			
			Результат = НайтиДоговорКонтрагента(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
			
			Результат = НайтиЕдиницуИзмерения(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "Контрагенты" Тогда
			
			Результат = НайтиКонтрагента(ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "НоменклатураКонтрагентов" Тогда
			
			Результат = НайтиНоменклатуруКонтрагентов(ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "НомераГТД" Тогда
			
			Результат = НайтиНомерГТД(ИдОбъекта, ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "Организации" Тогда
			
			Результат = НайтиОрганизацию(ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "СерииНоменклатуры" Тогда
			
			Результат = НайтиСериюНоменклатуры(ДополнительныеРеквизиты);
			
		ИначеЕсли ТипОбъекта = "ЗаказПоставщику" Тогда
			
			Результат = НайтиЗаказПоставщику(ДополнительныеРеквизиты);
			
		КонецЕсли;
		
	Исключение
		ВидОперации = НСтр("ru = 'Поиск прикладного объекта по данным электронного объекта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента.
Процедура ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, Результат) Экспорт
	
	Результат = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СсылкаНаОбъект.Номер, Истина, Истина);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников.
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, БезЭлектроннойПодписи = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);
	Если МассивНепроведенныхДокументов.Количество() <> 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен. Электронный документ не сформирован.'");
		Для Каждого НеПроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
			
			Найденный = ДокументыМассив.Найти(НеПроведенныйДокумент);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НеПроведенныйДокумент);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, НеПроведенныйДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица.
Процедура ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Сведения) Экспорт
	
	Если ТипЗнч(Сведения) <> Тип("Структура") Тогда
		Сведения = Новый Структура;
	КонецЕсли;
	
	Сведения.Вставить("Ссылка"                 , ЮрФизЛицо);
	Сведения.Вставить("ОфициальноеНаименование", "");
	Сведения.Вставить("СокращенноеНаименование", "");
	Сведения.Вставить("Наименование"           , "");
	Сведения.Вставить("Представление"          , "");
	Сведения.Вставить("ПолноеНаименование"     , "");
	Сведения.Вставить("ЮрФизЛицо"              , Неопределено);
	Сведения.Вставить("КодПоОКПО"              , "");
	Сведения.Вставить("ИНН"                    , "");
	Сведения.Вставить("КПП"                    , "");
	Сведения.Вставить("ОГРН"                   , "");
	
	Сведения.Вставить("СвидетельствоСерияНомер", "");
	Сведения.Вставить("СвидетельствоДатаВыдачи", "");
	
	Сведения.Вставить("Банк"                   , Неопределено);
	Сведения.Вставить("БИК"                    , "");
	Сведения.Вставить("КоррСчет"               , "");
	Сведения.Вставить("НомерСчета"             , "");
	
	Сведения.Вставить("ЮридическийАдрес"       , "");
	Сведения.Вставить("ЮридическийАдресXML"    , "");
	Сведения.Вставить("ФактическийАдрес"       , "");
	Сведения.Вставить("Телефоны"               , "");
	Сведения.Вставить("ЭлектроннаяПочта"       , "");
	
	Сведения.Вставить("Фамилия"                , "");
	Сведения.Вставить("Имя"                    , "");
	Сведения.Вставить("Отчество"               , "");
	
	Если Не ЗначениеЗаполнено(ЮрФизЛицо)
	 Или ТипЗнч(ЮрФизЛицо) <> Тип("СправочникСсылка.Организации") И ТипЗнч(ЮрФизЛицо) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, ТекущаяДатаСеанса());
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ЗначенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЮрФизЛицо, ВидАдреса, ТекущаяДатаСеанса(), Ложь);
		Если ЗначенияКонтактнойИнформации.Количество() > 0 Тогда
			Сведения.ЮридическийАдресXML = ЗначенияКонтактнойИнформации[0].ЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОЮрФизЛице);
	
	Если СведенияОЮрФизЛице.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо
	   И СведенияОЮрФизЛице.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		ЗаполнитьЗначенияСвойств(Сведения, ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОЮрФизЛице.ПолноеНаименование));
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеФизЛица.
Процедура ПолучитьДанныеФизЛица(ФизЛицо, Сведения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат
	КонецЕсли;
	
	Реквизиты = "ДатаРождения, ИНН, Пол, Наименование";
	
	СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизЛицо, Реквизиты);
	
	Сведения.Ссылка            = ФизЛицо;
	Сведения.ДатаРождения      = СтруктураДанных.ДатаРождения;
	Сведения.ИНН               = СтруктураДанных.ИНН;
	Сведения.Пол               = Строка(СтруктураДанных.Пол);
	Сведения.ФИО               = СтруктураДанных.Наименование;
	
	ЗаполнитьЗначенияСвойств(Сведения, ФизическиеЛицаКлиентСервер.ЧастиИмени(Сведения.ФИО));
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД.
Функция ПолучитьФизЛицоМЧД(СведенияФизЛица) Экспорт
	
	ФизическоеЛицо = Неопределено;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН
	|");
	
	Запрос.УстановитьПараметр("ИНН", СведенияФизЛица.ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФизическоеЛицо = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
	
КонецФункции

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДокументыФизЛица.
Процедура ПолучитьДокументыФизЛица(ФизЛицо, Сведения) Экспорт
	
	Если ТипЗнч(Сведения) <> Тип("Структура") Тогда
		Сведения = Новый Структура;
	КонецЕсли;
	
	Сведения.Вставить("ВидДокумента"    , Неопределено);
	Сведения.Вставить("Серия"           , "");
	Сведения.Вставить("Номер"           , "");
	Сведения.Вставить("ДатаВыдачи"      , Дата(1,1,1));
	Сведения.Вставить("СрокДействия"    , Дата(1,1,1));
	Сведения.Вставить("КемВыдан"        , "");
	Сведения.Вставить("КодПодразделения", "");
	Сведения.Вставить("ЯвляетсяДокументомУдостоверяющимЛичность", Ложь);
	Сведения.Вставить("Представление"   , "");
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ДокументыФизическихЛицСрезПоследних.Физлицо           КАК Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента      КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия             КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер             КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи        КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия      КАК СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан          КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения  КАК КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление     КАК Представление
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			Физлицо = &ФизЛицо
	|				И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних
	|");
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьТипыОрганизацииПредставителяМЧД.
Процедура ПолучитьТипыОрганизацииПредставителяМЧД(Типы) Экспорт
	
	Типы.Добавить(Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьОрганизациюМЧД.
Функция ПолучитьОрганизациюМЧД(СведенияЮрЛица) Экспорт
	
	ИскомаяОрганизация = ОбщегоНазначенияБЭД.НайтиСсылку("Организации",, СведенияЮрЛица);
	Если ЗначениеЗаполнено(ИскомаяОрганизация) Тогда
		Возврат ИскомаяОрганизация;
	КонецЕсли;
	
	ИскомыйКонтрагент = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты",, СведенияЮрЛица);
	Если ЗначениеЗаполнено(ИскомыйКонтрагент) Тогда
		Возврат ИскомыйКонтрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// См. ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации.
Процедура ОписаниеОрганизации(СведенияОрганизации, Результат, Список = "") Экспорт
	
	Результат = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОрганизации, Список);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОткрытияЖурналаРегистрации.
Процедура ЕстьПравоОткрытияЖурналаРегистрации(Результат) Экспорт
	
	Результат = Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента.
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, 
	ПодлежитОбменуЭД, ТребуетсяКонтрольАктуальности, Отказ) Экспорт
	
	Если Объект.ЭтоНовый()
	 Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "ИзменилисьКлючевыеРеквизиты") = Истина Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяОбъекта = Объект.Метаданные().ПолноеИмя();
	
	ТаблицаРеквизитовРегистрации = ОбменСКонтрагентамиБольничнаяАптека.КлючевыеРеквизитыОбъекта(ИмяОбъекта);
	Если Не ТаблицаРеквизитовРегистрации.Количество() Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации Из ТаблицаРеквизитовРегистрации Цикл
		ЕстьИзмененияВерсийОбъектов = ОбменСКонтрагентамиБольничнаяАптека.ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации);
		Если ЕстьИзмененияВерсийОбъектов Тогда
			ИзменилисьКлючевыеРеквизиты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ДополнительныеСвойства.Вставить("ИзменилисьКлючевыеРеквизиты", ИзменилисьКлючевыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Поиск прикладных объектов по данным электронных объектов

Функция НайтиВалюту(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Код = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Код");
	Если Не ЗначениеЗаполнено(Код) Тогда
		Код = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Объект
	|ГДЕ
	|	Объект.Код = &Код
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиСтрануМира(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Код = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Код");
	Если Не ЗначениеЗаполнено(Код) Тогда
		Код = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(Код);
	
КонецФункции

Функция НайтиВидКонтактнойИнформации(ИдентификаторОбъекта)
	
	Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Или ИдентификаторОбъекта = "ФаксКонтрагента" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПолноеИмяПрикладногоОбъекта = Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяПрикладногоОбъекта);
	
	Отбор = Новый Структура(ИдентификаторОбъекта);
	ЗаполнитьЗначенияСвойств(Отбор, Менеджер);
	
	Возврат Отбор[ИдентификаторОбъекта];
	
КонецФункции

Функция НайтиКлассификаторБанка(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Код = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Код");
	Если Не ЗначениеЗаполнено(Код) Тогда
		Код = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Объект
	|ГДЕ
	|	Объект.Код = &Код
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиБанковскийСчетКонтрагента(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "НомерСчета");
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		НомерСчета = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.Владелец = &Владелец
	|	И Объект.НомерСчета = &НомерСчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец"  , Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиБанковскийСчетОрганизации(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "НомерСчета");
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		НомерСчета = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК Объект
	|ГДЕ
	|	Объект.Владелец = &Владелец
	|	И Объект.НомерСчета = &НомерСчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец"  , Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиДоговорКонтрагента(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДоговора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "НомерДоговора");
	ДатаДоговора  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "ДатаДоговора");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.Контрагент = &Владелец
	|	И Объект.НомерДоговора = &НомерДоговора
	|	И Объект.ДатаДоговора = &ДатаДоговора
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец"     , Владелец);
	Запрос.УстановитьПараметр("НомерДоговора", НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора" , ДатаДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиЕдиницуИзмерения(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	КодОКЕИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "КодОКЕИ");
	Если Не ЗначениеЗаполнено(КодОКЕИ) Тогда
		КодОКЕИ = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодОКЕИ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК Объект
	|ГДЕ
	|	Объект.КодОКЕИ = &КодОКЕИ
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КодОКЕИ", КодОКЕИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
	Если Не ЗначениеЗаполнено(Результат) И КодОКЕИ = "778" Тогда
		Результат = ОписаниеУпаковкиЭлектронногоОбъекта();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиКонтрагента(ДополнительныеРеквизиты)
	
	ИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "ИНН");
	КПП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "КПП");
	Наименование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Наименование");
	
	Если Не ЗначениеЗаполнено(ИНН) И Не ЗначениеЗаполнено(КПП) И Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Объект
	|ГДЕ
	|	Объект.ИНН <> """"
	|	И Объект.ИНН = &ИНН
	|	И Объект.КПП <> """"
	|	И Объект.КПП = &КПП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Объект
	|ГДЕ
	|	Объект.ИНН <> """"
	|	И Объект.ИНН = &ИНН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Объект
	|ГДЕ
	|	Объект.Наименование <> """"
	|	И Объект.Наименование = &Наименование
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН"          , ИНН);
	Запрос.УстановитьПараметр("КПП"          , КПП);
	Запрос.УстановитьПараметр("Наименование" , Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиНоменклатуруКонтрагентов(ДополнительныеРеквизиты)
	
	Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Идентификатор");
	Артикул       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Артикул");
	Наименование  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Наименование");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.ВладелецНоменклатуры = &Владелец
	|	И Объект.Идентификатор <> """"
	|	И Объект.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.Владелец = &Владелец
	|	И Объект.Артикул <> """"
	|	И Объект.Артикул = &Артикул
	|	И Объект.Наименование <> """"
	|	И Объект.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.ВладелецНоменклатуры = &Владелец
	|	И Объект.Артикул <> """"
	|	И Объект.Артикул = &Артикул
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК Объект
	|ГДЕ
	|	Объект.ВладелецНоменклатуры = &Владелец
	|	И Объект.Наименование <> """"
	|	И Объект.Наименование = &Наименование
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец"     , Владелец);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Артикул"      , Артикул);
	Запрос.УстановитьПараметр("Наименование" , Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиНомерГТД(ИдентификаторОбъекта, ДополнительныеРеквизиты)
	
	Код = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Код");
	Если Не ЗначениеЗаполнено(Код) Тогда
		Код = ИдентификаторОбъекта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтранаПроисхождения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "СтранаПроисхождения");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК Объект
	|ГДЕ
	|	Объект.Код <> """"
	|	И Объект.Код = &Код
	|	И Объект.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И Объект.СтранаПроисхождения = &СтранаПроисхождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК Объект
	|ГДЕ
	|	Объект.Код <> """"
	|	И Объект.Код = &Код
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код"                , Код);
	Запрос.УстановитьПараметр("СтранаПроисхождения", СтранаПроисхождения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиОрганизацию(ДополнительныеРеквизиты)
	
	ИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "ИНН");
	КПП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "КПП");
	Наименование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Наименование");
	
	Если Не ЗначениеЗаполнено(ИНН) И Не ЗначениеЗаполнено(КПП) И Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Объект
	|ГДЕ
	|	Объект.ИНН <> """"
	|	И Объект.ИНН = &ИНН
	|	И Объект.КПП <> """"
	|	И Объект.КПП = &КПП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Объект
	|ГДЕ
	|	Объект.ИНН <> """"
	|	И Объект.ИНН = &ИНН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Объект
	|ГДЕ
	|	Объект.Наименование <> """"
	|	И Объект.Наименование = &Наименование
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН"          , ИНН);
	Запрос.УстановитьПараметр("КПП"          , КПП);
	Запрос.УстановитьПараметр("Наименование" , Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиСериюНоменклатуры(ДополнительныеРеквизиты)
	
	Владелец = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Владелец");
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Номер = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Номер");
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Номер = "";
	КонецЕсли;
	
	ГоденДо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "ГоденДо");
	Если Не ЗначениеЗаполнено(ГоденДо) Тогда
		ГоденДо = '00010101';
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК Объект
	|ГДЕ
	|	Объект.Владелец = &Владелец
	|	И (НЕ Владелец.ВидНоменклатуры.ИспользоватьНомерСерии
	|		ИЛИ Владелец.ВидНоменклатуры.ИспользоватьНомерСерии И Объект.Номер <> """" И Номер = &Номер)
	|	И (НЕ Владелец.ВидНоменклатуры.ИспользоватьСрокГодностиСерии
	|		ИЛИ Владелец.ВидНоменклатуры.ИспользоватьСрокГодностиСерии
	|		И Объект.ГоденДо <> ДАТАВРЕМЯ(1,1,1)
	|		И ВЫБОР
	|			КОГДА Владелец.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии = ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней)
	|				ТОГДА Объект.ГоденДо = НАЧАЛОПЕРИОДА(&ГоденДо, ДЕНЬ)
	|			ИНАЧЕ Объект.ГоденДо = &ГоденДо
	|		КОНЕЦ)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Номер"   , Номер);
	Запрос.УстановитьПараметр("ГоденДо" , ГоденДо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиЗаказПоставщику(ДополнительныеРеквизиты)
	
	Организация             = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Организация");
	Контрагент              = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "Контрагент");
	НомерПоДаннымПоставщика = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "НомерПоДаннымПоставщика");
	ДатаПоДаннымПоставщика  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеРеквизиты, "ДатаПоДаннымПоставщика");
	
	Если Не (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(НомерПоДаннымПоставщика) И ЗначениеЗаполнено(ДатаПоДаннымПоставщика)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Объект
	|ГДЕ
	|	Объект.Организация = &Организация
	|	И Объект.Контрагент = &Контрагент
	|	И Объект.НомерПоДаннымПоставщика = &НомерПоДаннымПоставщика
	|	И КОНЕЦПЕРИОДА(Объект.ДатаПоДаннымПоставщика, ГОД) = КОНЕЦПЕРИОДА(&ДатаПоДаннымПоставщика, ГОД)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация"            , Организация);
	Запрос.УстановитьПараметр("Контрагент"             , Контрагент);
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", НомерПоДаннымПоставщика);
	Запрос.УстановитьПараметр("ДатаПоДаннымПоставщика" , ДатаПоДаннымПоставщика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Прочее

// Возвращает описание упаковки.
// (см. НайтиЕдиницуИзмерения)
// (см. ОбменСКонтрагентамиПереопределяемый.ДанныеДляЗаполнения_ЗаказТоваров_ЗаказПоставщику)
//
Функция ОписаниеУпаковкиЭлектронногоОбъекта() Экспорт
	
	ОписаниеУпаковки = Новый Структура;
	ОписаниеУпаковки.Вставить("КодОКЕИ"                , "778");
	ОписаниеУпаковки.Вставить("Наименование"           , "упак");
	ОписаниеУпаковки.Вставить("НаименованиеПолное"     , "Упаковка");
	ОписаниеУпаковки.Вставить("МеждународноеСокращение", "-");
	
	Возврат ОписаниеУпаковки;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции