

//////////////////////////////////////////////////////////////////////////////////////////
// СопоставлениеНоменклатурыКонтрагентов:
// механизм сопоставления номенклатуры контрагентов с номенклатурой информационной базы.
//
/////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ Локализация

// Генерирует "идентификатор по-умолчанию" номенклатуры контрагента на случай, если из внешнего источника 
// (информационной системы, с которой выполняется сопоставление) получить идентификатор не удалось.
// Вычисляется как хеш-сумма натуральных ключей номенклатуры контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//  Состав - Массив из Строка - имена ключей НоменклатураКонтрагента, которые должны войти в состав идентификатора,
//                              значение по умолчанию НатуральныеКлючиНоменклатурыКонтрагента
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(Знач НоменклатураКонтрагента, 
	Знач Состав = Неопределено) Экспорт
	
	Если ТипЗнч(Состав) <> Тип("Массив") Тогда
		Состав = НатуральныеКлючиНоменклатурыКонтрагента();
	КонецЕсли;
	
	Ключ = Новый Структура(СтрСоединить(Состав,","));
	ЗаполнитьЗначенияСвойств(Ключ, НоменклатураКонтрагента);
	
	Возврат СтрШаблон("Нат_%1", ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Ключ));
	
КонецФункции

//-- Локализация

#Область ЗаполнениеСправочникаНоменклатураКонтрагентов

// Создает новую или обновляет существующую номенклатуру контрагента.
//
// Параметры:
//  ДанныеНоменклатурыКонтрагента - Структура - данные номенклатуры контрагента для создания элемента.
//                                              См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//  НоменклатураИБ                - Структура - соответствие номенклатуре информационной базы.
//                                              См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагентаИнформационнойБазы. 
//  Отказ                         - Булево - при записи объекта произошла ошибка.
//  ТекстОшибкиПользователю       - Строка - текст ошибки при возникновении исключительной ситуации.
//  ДополнительныеПараметры       - Структура - управляемые параметры при записи номенклатуры контрагента.
//                                              См. НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов.
//  ПометитьНаУдаление            - Булево - признак пометки на удаление.
//
Процедура СоздатьОбновитьНоменклатуруКонтрагента(ДанныеНоменклатурыКонтрагента,
												Знач НоменклатураИБ,
												Отказ,
												ТекстОшибкиПользователю = "",
												Знач ДополнительныеПараметры = Неопределено,
												Знач ПометитьНаУдаление = Ложь) Экспорт
	
	ВладелецНоменклатуры = ДанныеНоменклатурыКонтрагента.Владелец;
	ТекстОшибки = "";
	
	Если Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
		ТекстОшибкиПользователю = НСтр("ru = 'Не заполнен владелец номенклатуры.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
	КонецЕсли;
	ТребуетсяЗаписьВРегистр                = ДополнительныеПараметры.ТребуетсяЗаписьВРегистр;
	ТребуетсяПоискСсылки                   = ДополнительныеПараметры.ТребуетсяПоискСсылки;
	ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ   = ДополнительныеПараметры.ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ;
	ДанныеРегистраНоменклатурыКонтрагентов = ДополнительныеПараметры.ДанныеРегистраНоменклатурыКонтрагентов;
	
	НоменклатураКонтрагента = ДанныеНоменклатурыКонтрагента.НоменклатураКонтрагента;
	
	МетаданныеОбъекта = Метаданные.Справочники.НоменклатураКонтрагентов;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Представления = СопоставлениеНоменклатурыКонтрагентовСлужебный.ПредставленияНоменклатурыКонтрагентов();
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииПредставленийСопоставленияНоменклатуры(
			Представления);
	ВладелецНоменклатурыВРодительномПадеже = НРег(Представления.ВладелецНоменклатурыВРодительномПадеже);
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(ПолноеИмяОбъекта,
			Новый Структура("ВладелецНоменклатуры", ВладелецНоменклатуры));

		Если Не ЗначениеЗаполнено(НоменклатураКонтрагента) И ТребуетсяПоискСсылки Тогда
			НоменклатураКонтрагента = СсылкаНоменклатурыКонтрагентаПоДаннымКонтрагента(ДанныеНоменклатурыКонтрагента);
		КонецЕсли;

		Если ЗначениеЗаполнено(НоменклатураКонтрагента) Тогда
			ОбъектНоменклатураКонтрагента = НоменклатураКонтрагента.ПолучитьОбъект();
			ТекстСообщенияОшибки = СтрШаблон(НСтр("ru = 'Не удалось изменить номенклатуру %1 %2 по владельцу %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
									ВладелецНоменклатурыВРодительномПадеже,
									НоменклатураКонтрагента.Наименование,
									ВладелецНоменклатуры);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(НоменклатураКонтрагента);
		ИначеЕсли Не ПометитьНаУдаление Тогда
			ОбъектНоменклатураКонтрагента = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
			ТекстСообщенияОшибки = СтрШаблон(НСтр("ru = 'Не удалось создать новую номенклатуру %1 по владельцу %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
									ВладелецНоменклатурыВРодительномПадеже,
									ВладелецНоменклатуры);
		Иначе
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;

		Если Не ПометитьНаУдаление Тогда

			ЗаполнитьОбъектНоменклатурыКонтрагента(ОбъектНоменклатураКонтрагента, ДанныеНоменклатурыКонтрагента,
				НоменклатураИБ, ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ, ДанныеРегистраНоменклатурыКонтрагентов);

			Если ОбъектНоменклатураКонтрагента.ПометкаУдаления Тогда
				ОбъектНоменклатураКонтрагента.ПометкаУдаления = Ложь;
			КонецЕсли;
			
		Иначе
			ОбъектНоменклатураКонтрагента.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Если Не ТребуетсяЗаписьВРегистр Тогда
			ОбъектНоменклатураКонтрагента.ДополнительныеСвойства.Вставить("Синхронизация");
		КонецЕсли;

		ОбъектНоменклатураКонтрагента.Записать();
		ОбъектНоменклатураКонтрагента.Разблокировать();
		ДанныеНоменклатурыКонтрагента.НоменклатураКонтрагента = ОбъектНоменклатураКонтрагента.Ссылка;
		
		//++ Локализация
		
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриСохраненииСопоставленияНоменклатурыКонтрагентов(
			ДанныеНоменклатурыКонтрагента, НоменклатураИБ, Отказ, ТекстОшибкиПользователю);
			
		//-- Локализация
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ПустаяСтрока(ТекстОшибкиПользователю) Тогда
			ТекстОшибкиПользователю = СтрШаблон(НСтр("ru = '%1 по причине:
													|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
													ТекстСообщенияОшибки,
													КраткоеПредставлениеОшибки);
		КонецЕсли;
		
		ПараметрыЗаписи = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.Данные = ОбъектНоменклатураКонтрагента;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СопоставлениеНоменклатурыКонтрагентов,, ПараметрыЗаписи);
		
		Отказ = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет данные номенклатуры контрагента по ссылке или объекту справочника номенклатуры контрагента.
//
// Параметры:
//  НоменклатураКонтрагента       - СправочникСсылка.НоменклатураКонтрагентов - объект номенклатуры контрагента.
//                                  СправочникОбъект.НоменклатураКонтрагентов - ссылка номенклатуры контрагента.
//  ДанныеНоменклатурыКонтрагента - Структура                                 - данные номенклатуры контрагента.
//                                                                              См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
Процедура ЗаполнитьДанныеНоменклатурыКонтрагентаПоСсылке(НоменклатураКонтрагента, ДанныеНоменклатурыКонтрагента) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКонтрагента, НоменклатураКонтрагента);
	ДанныеНоменклатурыКонтрагента.Владелец                = НоменклатураКонтрагента.ВладелецНоменклатуры;
	Если ТипЗнч(НоменклатураКонтрагента) = Тип("СправочникОбъект.НоменклатураКонтрагентов") Тогда
		ДанныеНоменклатурыКонтрагента.НоменклатураКонтрагента = НоменклатураКонтрагента.Ссылка;
	Иначе
		ДанныеНоменклатурыКонтрагента.НоменклатураКонтрагента = НоменклатураКонтрагента;
	КонецЕсли;
	ДанныеНоменклатурыКонтрагента.Характеристика          = НоменклатураКонтрагента.НаименованиеХарактеристики;
	ДанныеНоменклатурыКонтрагента.Наименование            = НоменклатураКонтрагента.НаименованиеНоменклатуры;
	ДанныеНоменклатурыКонтрагента.ЕдиницаИзмерения        = НоменклатураКонтрагента.НаименованиеБазовойЕдиницыИзмерения;
	ДанныеНоменклатурыКонтрагента.НаименованиеУпаковки    = НоменклатураКонтрагента.НаименованиеУпаковки;
	ДанныеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод     = НоменклатураКонтрагента.КодОКЕИБазовойЕдиницыИзмерения;
	ДанныеНоменклатурыКонтрагента.ШтрихкодКомбинации      = НоменклатураКонтрагента.Штрихкод;
	ДанныеНоменклатурыКонтрагента.ШтрихкодыНоменклатуры   = НоменклатураКонтрагента.ДругиеШтрихкодыНоменклатурыСтрокой;
	
КонецПроцедуры

// Заполняет объект номенклатуры контрагента по передаваемым данным номенклатуры контрагента.
//
// Параметры:
//  ОбъектНоменклатураКонтрагента          - СправочникОбъект.НоменклатураКонтрагентов - объект номенклатуры контрагента.
//  ДанныеНоменклатурыКонтрагента          - Структура из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента -
//                                                                                     данные номенклатуры контрагента.
//  НоменклатураИБ                         - Структура из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагентаИнформационнойБазы -
//                                                                                     данные номенклатуры информационной базы.
//  ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ   - Булево                                    - признак необходимости выполнить поиск единицы измерения по ОКЕИ
//                                                                                       для заполнения данных контрагента, если единица измерения не была заполнена.
//  ДанныеРегистраНоменклатурыКонтрагентов - Булево                                    - данные номенклатуры контрагента заполнены из регистра сведений
//                                                                                       НоменклатураКонтрагентовБЭД.
//
Процедура ЗаполнитьОбъектНоменклатурыКонтрагента(ОбъектНоменклатураКонтрагента, ДанныеНоменклатурыКонтрагента, Знач НоменклатураИБ = Неопределено,
				Знач ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ = Истина, Знач ДанныеРегистраНоменклатурыКонтрагентов = Ложь) Экспорт
				
	ДанныеОбъекта = Новый Структура;
	Для Каждого РеквизитОбъекта Из ОбъектНоменклатураКонтрагента.Метаданные().Реквизиты Цикл
		ДанныеОбъекта.Вставить(РеквизитОбъекта.Имя);
	КонецЦикла;
	ДанныеОбъекта.Вставить("Наименование");
	ДанныеОбъекта.Вставить("Владелец");
	
	Если ЗначениеЗаполнено(Метаданные.Справочники.НоменклатураКонтрагентов.Владельцы) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДанныеНоменклатурыКонтрагента, ,
			"Наименование, КоличествоБазовойЕдиницыИзмерения, КоличествоУпаковок");
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДанныеНоменклатурыКонтрагента, ,
			"Наименование, Владелец, КоличествоБазовойЕдиницыИзмерения, КоличествоУпаковок");
	КонецЕсли;
	ДанныеОбъекта.ВладелецНоменклатуры               = ДанныеНоменклатурыКонтрагента.Владелец;
	ДанныеОбъекта.НаименованиеХарактеристики         = ДанныеНоменклатурыКонтрагента.Характеристика;
	ДанныеОбъекта.НаименованиеНоменклатуры           = ДанныеНоменклатурыКонтрагента.Наименование;
	ДанныеОбъекта.Штрихкод                           = ДанныеНоменклатурыКонтрагента.ШтрихкодКомбинации;
	ДанныеОбъекта.ДругиеШтрихкодыНоменклатурыСтрокой = ДанныеНоменклатурыКонтрагента.ШтрихкодыНоменклатуры;
	
	Если ПустаяСтрока(ДанныеОбъекта.Идентификатор) Тогда
		
		ДанныеОбъекта.Идентификатор = ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(ДанныеНоменклатурыКонтрагента);
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеНоменклатурыКонтрагента.ИдентификаторНоменклатуры) Тогда
		СопоставлениеНоменклатурыКонтрагентовКлиентСервер.РазделитьИдентификаторНаЧасти(ДанныеОбъекта.Идентификатор,
																						ДанныеОбъекта);
		ДанныеНоменклатурыКонтрагента.ИдентификаторНоменклатуры   = ДанныеОбъекта.ИдентификаторНоменклатуры;
		ДанныеНоменклатурыКонтрагента.ИдентификаторХарактеристики = ДанныеОбъекта.ИдентификаторХарактеристики;
		ДанныеНоменклатурыКонтрагента.ИдентификаторУпаковки       = ДанныеОбъекта.ИдентификаторУпаковки;
	КонецЕсли;
	
	ЗаполнитьСведенияЕдиницИзмеренияУпаковок(ДанныеОбъекта, ДанныеНоменклатурыКонтрагента,
		ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ, ДанныеРегистраНоменклатурыКонтрагентов);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.НаименованиеПолное) Тогда
		
		ДанныеОбъекта.НаименованиеПолное = Справочники.НоменклатураКонтрагентов.ПолноеНаименованиеНоменклатурыКонтрагента(
																							ДанныеОбъекта.НаименованиеНоменклатуры,
																							ДанныеОбъекта.НаименованиеХарактеристики,
																							ДанныеОбъекта.НаименованиеУпаковки);
	КонецЕсли;
	
	ДанныеОбъекта.Наименование = ДанныеОбъекта.НаименованиеПолное;
	
	Если ЗначениеЗаполнено(НоменклатураИБ) Тогда
		Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
			ДанныеОбъекта.Номенклатура = НоменклатураИБ.Номенклатура;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоменклатураИБ.Характеристика) Тогда
			ДанныеОбъекта.Характеристика = НоменклатураИБ.Характеристика;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоменклатураИБ.Упаковка) Тогда
			ДанныеОбъекта.Упаковка = НоменклатураИБ.Упаковка;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеОбъекта.Номенклатура) 
			И Не ЗначениеЗаполнено(ДанныеОбъекта.Упаковка) Тогда
			СопоставлениеНоменклатурыКонтрагентовПереопределяемый.БазоваяЕдиницаИзмеренияНоменклатуры(
				ДанныеОбъекта.Номенклатура, ДанныеОбъекта.Упаковка);
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьНезаполненныеСвойстваСтруктуры(ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(ОбъектНоменклатураКонтрагента, ДанныеОбъекта);
	ЗаполнитьДругиеШтрихкодыНоменклатуры(ОбъектНоменклатураКонтрагента);
		
КонецПроцедуры

// Заполняет пустое сопоставление в номенклатуре контрагента по номенклатуре информационной базы из таблицы товаров.
//
// Параметры:
//  ТаблицаТоваров            - ТаблицаЗначений - таблицы товаров, которая будет помещена во временную таблицу.
//  Отказ                     - Булево          - признак наличия ошибок при выполнении процедуры.
//  ТаблицаТоваровПоУмолчанию - Булево          - признак необходимости использовать временную таблицу Товары с колонками:
//                                                НоменклатураКонтрагента, Номенклатура, Характеристика, Упаковка. 
//
Процедура ЗаполнитьПустоеСопоставлениеВНоменклатуреКонтрагентаПоНоменклатуреИБ(Знач ТаблицаТоваров, Отказ, ТаблицаТоваровПоУмолчанию = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", СопоставлениеНоменклатурыКонтрагентовСлужебный.ПустаяСсылкаНоменклатурыБЭД());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура <> &ПустаяНоменклатура
	|	И Товары.НоменклатураКонтрагента <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)";

	ТекстЗапроса = "";
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаНеСопоставленнойНоменклатурыКонтрагентовПоНоменклатуреИБ(
		ТекстЗапроса, ТаблицаТоваровПоУмолчанию);
		
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка
		|ИЗ
		|	Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО Товары.НоменклатураКонтрагента = НоменклатураКонтрагентов.Ссылка
		|ГДЕ
		|	НоменклатураКонтрагентов.Номенклатура = &ПустаяНоменклатура";
		
	ИначеЕсли ТаблицаТоваровПоУмолчанию Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса;
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НоменклатураКонтрагента = Выборка.НоменклатураКонтрагента;
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(НоменклатураКонтрагента);
			
			НоменклатураКонтрагентаОбъект = НоменклатураКонтрагента.ПолучитьОбъект(); // СправочникОбъект
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагентаОбъект, Выборка);
			НоменклатураКонтрагентаОбъект.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Не удалось заблокировать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        НоменклатураКонтрагента);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Отказ = Истина;
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает дополнительные параметры при записи номенклатуры контрагентов.
//
// Возвращаемое значение:
//  Структура - содержит параметры:
//   * ТребуетсяЗаписьВРегистр                - Булево - признак необходимости обновить запись в регистре сведений НоменклатураКонтрагентовБЭД.
//   * ТребуетсяПоискСсылки                   - Булево - признак необходимости выполнить поиск ссылки номенклатуры контрагента.
//   * ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ   - Булево - признак необходимости выполнить поиск единицы измерения по ОКЕИ
//                                                       для заполнения данных контрагента, если единица измерения не была заполнена.
//   * ДанныеРегистраНоменклатурыКонтрагентов - Булево - данные номенклатуры контрагента заполнены из регистра сведений НоменклатураКонтрагентовБЭД.
//
Функция НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТребуетсяЗаписьВРегистр"               , Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяПоискСсылки"                  , Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ"  , Истина);
	ДополнительныеПараметры.Вставить("ДанныеРегистраНоменклатурыКонтрагентов", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#Область ПоискНоменклатурыКонтрагентов

// Возвращает текст запроса с дублирующими строками не сопоставленной номенклатуры контрагента в таблице товаров.
// В запроса используется параметр ПустаяНоменклатура, который необходимо установить в запросе.
// Таблица товаров должна содержать колонки:
//   НомерСтроки             - Строка                                        - номер строки товара.
//   НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагента.
//   Номенклатура            - ОпределяемыйТип.НоменклатураБЭД               - ссылка номенклатуры.
//   Характеристика          - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка характеристики.
//   Упаковка                - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка упаковки.
//
// Параметры:
//  ИмяВременнойТаблицыТоваров - Строка - наименование временной таблицы. По умолчанию наименование "ВременнаяТаблицаТовары".
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПоискаДублирующихСтрокНеСопоставленнойНоменклатурыКонтрагентов(Знач ИмяВременнойТаблицыТоваров = Неопределено) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапросПоДублям.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапросПоДублям.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
	|		ДокументТовары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ДокументТовары.Упаковка КАК Упаковка
	|	ИЗ
	|		&ИмяВременнойТаблицыТоваров КАК ДокументТовары
	|	ГДЕ
	|		ДокументТовары.Номенклатура <> &ПустаяНоменклатура
	|		И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|				ГДЕ
	|					НоменклатураКонтрагентов.Ссылка = ДокументТовары.НоменклатураКонтрагента
	|					И НоменклатураКонтрагентов.Номенклатура =&ПустаяНоменклатура)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументТовары.НоменклатураКонтрагента,
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ДокументТовары.Упаковка) КАК ВложенныйЗапросПоДублям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапросПоДублям.НоменклатураКонтрагента
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", 
		?(ИмяВременнойТаблицыТоваров = Неопределено, "ВременнаяТаблицаТовары", ИмяВременнойТаблицыТоваров));
		
КонецФункции

// Возвращает результат запроса с найденной однозначной номенклатурой контрагента по таблице товаров при изменении владельца.
//
// Параметры:
//  ВладелецНоменклатуры - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры.
//  Товары               - ТаблицаЗначений                         - содержит колонки:
//   * НомерСтроки             - Строка                                        - номер строки в таблице номенклатуры ИБ.
//                                                                               Если колонка отсутствует - добавляется в таблицу.
//   * Номенклатура            - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика          - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка                - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//   * НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагентов.
//                                                                               Если колонка отсутствует - добавляется в таблицу.
//                                                                               Используется для поиска по идентификатору аналогичной
//                                                                               номенклатуры контрагента при смене владельца.
//
// Возвращаемое значение:
//  РезультатЗапроса - результат запроса поиска номенклатуры контрагента по номенклатуре информационной базы:
//   * НомерСтроки             - Строка                                        - номер строки из таблицы Товары.
//   * НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагентов.
//
Функция РезультатЗапросаПоискаНоменклатурыКонтрагентаПриИзмененииВладельца(Знач ВладелецНоменклатуры, Знач Товары) Экспорт
	
	Если Товары.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТипНомераСтроки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
		Товары.Колонки.Добавить("НомерСтроки", ТипНомераСтроки);
	КонецЕсли;
	
	Если Товары.Колонки.Найти("НоменклатураКонтрагента") = Неопределено Тогда
		Товары.Колонки.Добавить("НоменклатураКонтрагента", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецНоменклатуры", ВладелецНоменклатуры);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента,
	|	Товары.НоменклатураКонтрагента КАК СтараяНоменклатураКонтрагента
	|ПОМЕСТИТЬ НоменклатураКонтрагентаПоИдентификаторам
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК СтараяНоменклатураКонтрагентов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|			ПО СтараяНоменклатураКонтрагентов.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|				И (ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Товары КАК Товары
	|					ГДЕ
	|						Товары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|						И Товары.Характеристика = НоменклатураКонтрагентов.Характеристика
	|						И Товары.Упаковка = НоменклатураКонтрагентов.Упаковка))
	|		ПО Товары.НоменклатураКонтрагента = СтараяНоменклатураКонтрагентов.Ссылка
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &ВладелецНоменклатуры
	|	И НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентаПоИдентификаторам.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	НоменклатураКонтрагентаПоИдентификаторам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	НоменклатураКонтрагентаПоИдентификаторам КАК НоменклатураКонтрагентаПоИдентификаторам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НоменклатураКонтрагентов.Ссылка),
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО Товары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И Товары.Характеристика = НоменклатураКонтрагентов.Характеристика
	|			И Товары.Упаковка = НоменклатураКонтрагентов.Упаковка
	|			И (НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						НоменклатураКонтрагентаПоИдентификаторам КАК НоменклатураКонтрагентаПоИдентификаторам
	|					ГДЕ
	|						НоменклатураКонтрагентаПоИдентификаторам.СтараяНоменклатураКонтрагента = Товары.НоменклатураКонтрагента))
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &ВладелецНоменклатуры
	|	И НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) = 1";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает результат запроса с найденной однозначной номенклатурой контрагента по номенклатуре информационной базы в разрезе владельца.
//
// Параметры:
//  ВладелецНоменклатуры - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры.
//  Товары               - ТаблицаЗначений                         - содержит колонки:
//   * НомерСтроки             - Строка                                        - номер строки в таблице номенклатуры ИБ.
//                                                                               Если колонка отсутствует - добавляется в таблицу.
//   * Номенклатура            - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика          - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка                - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//   * НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагентов.
//                                                                               Если колонка отсутствует - добавляется в таблицу.
//                                                                               Используется для поиска по идентификатору аналогичной
//                                                                               номенклатуры контрагента при смене владельца.
//
// Возвращаемое значение:
//  РезультатЗапроса - результат запроса поиска номенклатуры контрагента по номенклатуре информационной базы:
//   * НомерСтроки                        - Строка                                        - номер строки из таблицы Товары.
//   * НоменклатураКонтрагента            - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагентов.
//   * КоличествоНоменклатурыКонтрагентов - Число                                         - количество найденных по фильтрации номенклатур контрагента.
//   * Номенклатура                       - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика                     - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка                           - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//
Функция РезультатЗапросаПоискаНоменклатурыКонтрагентаПоНоменклатуреИБ(Знач ВладелецНоменклатуры, Знач Товары) Экспорт
	
	Если Товары.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТипНомераСтроки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
		Товары.Колонки.Добавить("НомерСтроки", ТипНомераСтроки);
	КонецЕсли;
	
	Если Товары.Колонки.Найти("НоменклатураКонтрагента") = Неопределено Тогда
		Товары.Колонки.Добавить("НоменклатураКонтрагента", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецНоменклатуры", ВладелецНоменклатуры);
	Запрос.УстановитьПараметр("Товары"              , Товары);
	Запрос.УстановитьПараметр("ПустаяНоменклатура"  , СопоставлениеНоменклатурыКонтрагентовСлужебный.ПустаяСсылкаНоменклатурыБЭД());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура <> &ПустаяНоменклатура
	|	И Товары.НоменклатураКонтрагента = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НоменклатураКонтрагентов.Ссылка) КАК НоменклатураКонтрагента,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО Товары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И Товары.Характеристика = НоменклатураКонтрагентов.Характеристика
	|			И Товары.Упаковка = НоменклатураКонтрагентов.Упаковка
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &ВладелецНоменклатуры
	|	И НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) = 1";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает номенклатуру контрагента найденную по номенклатуре информационной базы в строке таблицы.
//
// Параметры:
//  ВладелецНоменклатуры - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры.
//  НоменклатураИБ       - Структура                               - содержит информацию из строки таблицы.
//                               См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагентаИнформационнойБазы.
//
// Возвращаемое значение:
//  СправочникСсылка.НоменклатураКонтрагентов - ссылка на найденную номенклатуру контрагента.
//                                              Если номенклатура контрагента не найдена возвращается пустая ссылка.
//
Функция НоменклатураКонтрагентаПоНоменклатуреВСтрокеТаблицы(Знач ВладелецНоменклатуры, Знач НоменклатураИБ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецНоменклатуры"   , ВладелецНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура"           , НоменклатураИБ.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"         , НоменклатураИБ.Характеристика);
	Запрос.УстановитьПараметр("Упаковка"               , НоменклатураИБ.Упаковка);
	Запрос.УстановитьПараметр("НоменклатураКонтрагента", НоменклатураИБ.НоменклатураКонтрагента);
	Запрос.УстановитьПараметр("ПустаяНоменклатура"     , СопоставлениеНоменклатурыКонтрагентовСлужебный.ПустаяСсылкаНоменклатурыБЭД());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НоменклатураКонтрагентов.Ссылка) КАК НоменклатураКонтрагента,
	|	КОЛИЧЕСТВО(*) КАК КоличествоНоменклатурыКонтрагента
	|ПОМЕСТИТЬ НоменклатураКонтрагентаПоиска
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &ВладелецНоменклатуры
	|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура
	|	И НоменклатураКонтрагентов.Характеристика = &Характеристика
	|	И НоменклатураКонтрагентов.Упаковка = &Упаковка
	|	И НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СопоставлениеЗаполнено,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура = &Номенклатура
	|				И НоменклатураКонтрагентов.Характеристика = &Характеристика
	|				И НоменклатураКонтрагентов.Упаковка = &Упаковка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сопоставлено,
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента
	|ПОМЕСТИТЬ НоменклатураКонтрагентовИзТаблицы
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка = &НоменклатураКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура = &Номенклатура
	|				И НоменклатураКонтрагентов.Характеристика = &Характеристика
	|				И НоменклатураКонтрагентов.Упаковка = &Упаковка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НоменклатураКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентовИзТаблицы.Сопоставлено = ИСТИНА
	|			ТОГДА НоменклатураКонтрагентовИзТаблицы.НоменклатураКонтрагента
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НоменклатураКонтрагентаПоиска.КоличествоНоменклатурыКонтрагента = 1
	|					ТОГДА НоменклатураКонтрагентаПоиска.НоменклатураКонтрагента
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НоменклатураКонтрагентовИзТаблицы.СопоставлениеЗаполнено = ЛОЖЬ
	|							ТОГДА НоменклатураКонтрагентовИзТаблицы.НоменклатураКонтрагента
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК НоменклатураКонтрагента
	|ИЗ
	|	НоменклатураКонтрагентаПоиска КАК НоменклатураКонтрагентаПоиска
	|		ПОЛНОЕ СОЕДИНЕНИЕ НоменклатураКонтрагентовИзТаблицы КАК НоменклатураКонтрагентовИзТаблицы
	|		ПО (ИСТИНА)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НоменклатураКонтрагента;
	Иначе
		Возврат Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу данных номенклатуры контрагентов найденных по уникальным идентификаторам.
//
// Параметры:
//  УникальныеИдентификаторы - Массив из Строка - уникальные идентификаторы, по которым необходимо вернуть данные номенклатуры контрагентов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные номенклатуры контрагента:
//   * НоменклатураКонтрагента             - СправочникСсылка.НоменклатураКонтрагентов - ссылка номенклатуры контрагента.
//   * ВладелецНоменклатуры                - ОпределяемыйТип.ВладелецНоменклатурыБЭД   - ссылка на владельца номенклатуры контрагента.
//   * Идентификатор                       - Строка                                    - идентификатор номенклатуры контрагента.
//   * ИдентификаторНоменклатурыСервиса    - Строка                                    - идентификатор номенклатуры в сервисе 1С:Номенклатура.
//   * ИдентификаторХарактеристикиСервиса  - Строка                                    - идентификатор характеристики в сервисе 1С:Номенклатура.
//   * НаименованиеНоменклатуры            - Строка                                    - наименование номенклатуры.
//   * НаименованиеХарактеристики          - Строка                                    - наименование характеристики.
//   * НаименованиеУпаковки                - Строка                                    - наименование упаковки.
//   * НаименованиеБазовойЕдиницыИзмерения - Строка                                    - наименование базовой единицы измерения.
//   * КодОКЕИБазовойЕдиницыИзмерения      - Строка                                    - код ОКЕИ единицы измерения.
//   * КоличествоБазовойЕдиницыИзмерения   - Строка                                    - числитель.
//   * КоличествоУпаковок                  - Строка                                    - знаменатель.
//   * Штрихкод                            - Строка                                    - штрихкод комбинации: номенклатура, характеристика, упаковка.
//   * ДругиеШтрихкодыНоменклатурыСтрокой  - Строка                                    - штрихкоды номенклатуры через запятую.
//   * Артикул                             - Строка                                    - артикул.
//   * СтавкаНДС                           - Строка                                    - ставка ндс.
//
Функция ДанныеНоменклатурыКонтрагентовПоВнутреннимИдентификаторам(Знач УникальныеИдентификаторы) Экспорт
	
	СсылкиНоменклатурыКонтрагентов = Новый Массив;
	Для Каждого Идентификатор Из УникальныеИдентификаторы Цикл
		
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылка = Справочники.НоменклатураКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СсылкиНоменклатурыКонтрагентов.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкиНоменклатурыКонтрагентов", СсылкиНоменклатурыКонтрагентов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента,
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры,
	|	НоменклатураКонтрагентов.Идентификатор,
	|	НоменклатураКонтрагентов.ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентов.ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентов.НаименованиеНоменклатуры,
	|	НоменклатураКонтрагентов.НаименованиеХарактеристики,
	|	НоменклатураКонтрагентов.НаименованиеУпаковки,
	|	НоменклатураКонтрагентов.НаименованиеБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КодОКЕИБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КоличествоБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КоличествоУпаковок,
	|	НоменклатураКонтрагентов.Штрихкод,
	|	НоменклатураКонтрагентов.ДругиеШтрихкодыНоменклатурыСтрокой,
	|	НоменклатураКонтрагентов.Артикул,
	|	НоменклатураКонтрагентов.СтавкаНДС
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка В (&СсылкиНоменклатурыКонтрагентов)";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("КлючЗаписи",  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	Для Каждого ЭлементВыборки Из Результат Цикл
		ЭлементВыборки.КлючЗаписи = XMLСтрока(ЭлементВыборки.НоменклатураКонтрагента);
	КонецЦикла;
	
	Результат.Индексы.Добавить("КлючЗаписи");
	
	Возврат Результат;
	
КонецФункции

// Создает временную таблицу поиска номенклатуры контрагентов в информационной базе по таблице отбора.
// Колонки:
//  Идентификатор                       - Строка - идентификатор номенклатуры.
//  Наименование                        - Строка - наименование номенклатуры.
//  НаименованиеХарактеристики          - Строка - наименование характеристики.
//  ЕдиницаИзмерения                    - Строка - если заполнено наименование упаковки передается оно, иначе наименование единицы измерения (базовой).
//  ЕдиницаИзмеренияКод                 - Строка - код единицы измерения.
//  Артикул                             - Строка - артикул номенклатуры.
//  СтавкаНДС                           - Строка - ставка НДС номенклатуры.
//  Штрихкод                            - Строка - штрихкод (не используется, вместо него используются поля:штрихкод комбинации и штрихкод номенклатуры).
//  ШтрихкодКомбинации                  - Строка - штрихкод комбинации: номенклатура, характеристика, упаковка.
//  ШтрихкодыНоменклатуры               - Строка - штрихкоды номенклатуры через запятую.
//  ИдентификаторНоменклатурыСервиса    - Строка - идентификатор номенклатуры в сервисе 1С:Номенклатура.
//  ИдентификаторХарактеристикиСервиса  - Строка - идентификатор характеристики в сервисе 1С:Номенклатура.
//  НаименованиеУпаковки                - Строка - наименование упаковки.
//  НаименованиеБазовойЕдиницаИзмерения - Строка - наименование базовой единицы измерения.
//  КоличествоУпаковок                  - Число  - количество упаковок (знаменатель).
//  КоличествоБазовойЕдиницыИзмерения   - Число  - количество единицы измерения (числитель).
//  Владелец                            - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры информационной базы.
//  Номенклатура                        - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//  Характеристика                      - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//  Упаковка                            - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//
//  Отбор производиться по следующему сочетанию полей:
//   НоменклатураКонтрагента - если заполнена номенклатура контрагента.
//   Владелец, Номенклатура, Характеристика, Упаковка - если номенклатура контрагента пустая.
//
// Параметры:
//  ТаблицаОтбора           - ТаблицаЗначений         - таблица для отбора записей сопоставления:
//   * Владелец                 - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры.
//   * НоменклатураКонтрагента  - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагента.
//   * Номенклатура             - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика           - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка                 - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//  ИмяВременнойТаблицы     - Строка                  - имя временной таблицы, в которую нужно поместить отобранные данные.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, в котором будет создана временная таблица.
//
Процедура СоздатьВременнуюТаблицуНоменклатурыКонтрагентовПоТаблицеОтборов(Знач ТаблицаОтбора, Знач ИмяВременнойТаблицы, МенеджерВременныхТаблиц) Экспорт
	
	Если ТаблицаОтбора.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТипНомераСтроки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
		ТаблицаОтбора.Колонки.Добавить("НомерСтроки", ТипНомераСтроки);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОтбора.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОтбора.Владелец КАК Владелец,
	|	ВЫРАЗИТЬ(ТаблицаОтбора.НоменклатураКонтрагента КАК Справочник.НоменклатураКонтрагентов) КАК НоменклатураКонтрагента,
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика КАК Характеристика,
	|	ТаблицаОтбора.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВТ_ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	НоменклатураКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентов.Характеристика КАК Характеристика,
	|	НоменклатураКонтрагентов.Упаковка КАК Упаковка,
	|	НоменклатураКонтрагентов.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры КАК Владелец,
	|	НоменклатураКонтрагентов.НаименованиеНоменклатуры КАК Наименование,
	|	НоменклатураКонтрагентов.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	НоменклатураКонтрагентов.НаименованиеУпаковки КАК ЕдиницаИзмерения,
	|	НоменклатураКонтрагентов.НаименованиеБазовойЕдиницыИзмерения КАК НаименованиеБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КодОКЕИБазовойЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	НоменклатураКонтрагентов.КоличествоБазовойЕдиницыИзмерения КАК КоличествоБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	НоменклатураКонтрагентов.Штрихкод КАК ШтрихкодКомбинации,
	|	НоменклатураКонтрагентов.ДругиеШтрихкодыНоменклатурыСтрокой КАК ШтрихкодыНоменклатуры,
	|	ВТ_ТаблицаОтбора.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаОтбора.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	НоменклатураКонтрагентов.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентов.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентов.Артикул КАК Артикул,
	|	НоменклатураКонтрагентов.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТ_НоменклатураКонтрагентов
	|ИЗ
	|	ВТ_ТаблицаОтбора КАК ВТ_ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ВТ_ТаблицаОтбора.НоменклатураКонтрагента = НоменклатураКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура,
	|	НоменклатураКонтрагентов.Характеристика,
	|	НоменклатураКонтрагентов.Упаковка,
	|	НоменклатураКонтрагентов.Идентификатор,
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры,
	|	НоменклатураКонтрагентов.НаименованиеНоменклатуры,
	|	НоменклатураКонтрагентов.НаименованиеХарактеристики,
	|	НоменклатураКонтрагентов.НаименованиеУпаковки,
	|	НоменклатураКонтрагентов.НаименованиеБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КодОКЕИБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КоличествоБазовойЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.КоличествоУпаковок,
	|	НоменклатураКонтрагентов.Штрихкод,
	|	НоменклатураКонтрагентов.ДругиеШтрихкодыНоменклатурыСтрокой,
	|	ВТ_ТаблицаОтбора.НомерСтроки,
	|	НоменклатураКонтрагентов.Ссылка,
	|	НоменклатураКонтрагентов.ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентов.ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентов.Артикул,
	|	НоменклатураКонтрагентов.СтавкаНДС
	|ИЗ
	|	ВТ_ТаблицаОтбора КАК ВТ_ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ВТ_ТаблицаОтбора.Владелец = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|			И ВТ_ТаблицаОтбора.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ВТ_ТаблицаОтбора.Характеристика = НоменклатураКонтрагентов.Характеристика
	|			И ВТ_ТаблицаОтбора.Упаковка = НоменклатураКонтрагентов.Упаковка
	|ГДЕ
	|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И ВТ_ТаблицаОтбора.НоменклатураКонтрагента = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаОтбора";
	
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	
	Если ИмяВременнойТаблицы = "ВТ_ТаблицаОтбора" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_ТаблицаОтбора", "ВТ_ТаблицаОтбора1");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_НоменклатураКонтрагентов", ИмяВременнойТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает результат запроса с однозначно найденной сопоставленной номенклатурой контрагента по идентификатору владельца.
// В исходную таблицу добавляется колонка "НоменклатураКонтрагентов".
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - Содержит колонки:
//   * НомерСтроки             - Строка                                        - номер строки в таблице номенклатуры ИБ.
//                                                                               Если колонка отсутствует - добавляется в таблицу.
//   * Владелец                - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры.
//   * Номенклатура            - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика          - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка                - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//   * Идентификатор           - Строка                                        - идентификатор номенклатуры поставщика.
// 
// Возвращаемое значение:
//  РезультатЗапроса - Содержит колонки:
//   * НомерСтроки             - Строка                                        - номер строки в таблице номенклатуры ИБ.
//                                                                               Если колонка отсутствует - добавляется в таблицу.
//   * Владелец                - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры.
//   * Номенклатура            - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика          - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка                - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//   * Идентификатор           - Строка                                        - идентификатор номенклатуры поставщика.
//   * НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагентов.
//
Функция РезультатЗапросаОднозначноСопоставленнойНоменклатурыКонтрагентаПоИдентификатору(ТаблицаТоваров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Владелец КАК Владелец,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка,
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Владелец КАК Владелец,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(МАКСИМУМ(НоменклатураКонтрагентов.Ссылка), ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)) КАК НоменклатураКонтрагента
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ТаблицаТоваров.Владелец = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|			И ТаблицаТоваров.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Владелец,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Идентификатор,
	|	ТаблицаТоваров.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НоменклатураКонтрагентов.Ссылка) = 1";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

//++ Локализация

#Область РаботаСРегистромНоменклатураКонтрагентовБЭД

// Сохраняет данные о номенклатуре контрагента и устанавливает их соответствие номенклатуре информационной базы.
//
// Параметры:
//  НоменклатураКонтрагента    - Структура - номенклатура контрагента. См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//  НоменклатураИБ             - Структура - номенклатура ИБ. См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//                                           Если Неопределено, то данные о номенклатуре контрагента сохраняются
//                                           без сопоставления с номенклатурой информационной базы.
//  ИспользоватьХарактеристики - Булево - признак использования характеристики в номенклатуре.
//  Замещать                   - Булево - признак замещения записей.
//
Процедура УстановитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента, Знач НоменклатураИБ = Неопределено, 
			Знач ИспользоватьХарактеристики = Неопределено, Замещать = Истина) Экспорт
	
	Если НоменклатураИБ = Неопределено Тогда
		НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
		Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
		Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		Если ЗначениеЗаполнено(Набор) И НЕ Замещать Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Запись = Неопределено;
		Если ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор[0];
		Иначе
			Запись = Набор.Добавить();
		КонецЕсли;
		
		Запись.Владелец                           = НоменклатураКонтрагента.Владелец;
		Запись.Идентификатор                      = НоменклатураКонтрагента.Идентификатор;
		
		ДанныеЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Набор.Выгрузить()[0]);
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, НоменклатураКонтрагента);
		
		ДанныеЗаписи.Наименование                       = НоменклатураКонтрагента.Наименование;
		ДанныеЗаписи.НаименованиеХарактеристики         = НоменклатураКонтрагента.Характеристика;
		
		Если Не ПустаяСтрока(НоменклатураКонтрагента.ЕдиницаИзмерения)
			Или Не ПустаяСтрока(НоменклатураКонтрагента.ЕдиницаИзмеренияКод) Тогда
			
			ЕдиницаИзмерения    = НоменклатураКонтрагента.ЕдиницаИзмерения;
			ЕдиницаИзмеренияКод = НоменклатураКонтрагента.ЕдиницаИзмеренияКод;

			ДанныеЗаписи.НаименованиеУпаковки = ЕдиницаИзмерения;
			Если Не ПустаяСтрока(ЕдиницаИзмеренияКод) Тогда
				СопоставлениеНоменклатурыКонтрагентовПереопределяемый.НайтиНаименованиеЕдиницыИзмеренияПоКодуОКЕИ(
					ЕдиницаИзмеренияКод, ЕдиницаИзмерения);
			КонецЕсли;
				
			Если Не ПустаяСтрока(ЕдиницаИзмерения) Тогда
				ДанныеЗаписи.ЕдиницаИзмерения    = ЕдиницаИзмерения;
				ДанныеЗаписи.ЕдиницаИзмеренияКод = ЕдиницаИзмеренияКод;
			ИначеЕсли Не ПустаяСтрока(НоменклатураКонтрагента.ЕдиницаИзмеренияКод) Тогда
				ДанныеЗаписи.ЕдиницаИзмерения    = НоменклатураКонтрагента.ЕдиницаИзмерения;
				ДанныеЗаписи.ЕдиницаИзмеренияКод = НоменклатураКонтрагента.ЕдиницаИзмеренияКод;
			КонецЕсли;
			
			Если ПустаяСтрока(ДанныеЗаписи.НаименованиеУпаковки) Тогда
				ДанныеЗаписи.НаименованиеУпаковки = ДанныеЗаписи.ЕдиницаИзмерения;
			КонецЕсли;

		КонецЕсли;
		
		ДанныеЗаписи.Артикул                            = НоменклатураКонтрагента.Артикул;
		ДанныеЗаписи.СтавкаНДС                          = НоменклатураКонтрагента.СтавкаНДС;
		ДанныеЗаписи.ИдентификаторНоменклатурыСервиса   = НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса;
		ДанныеЗаписи.ИдентификаторХарактеристикиСервиса = НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса;
		ДанныеЗаписи.Номенклатура                       = НоменклатураИБ.Номенклатура;
		ДанныеЗаписи.Характеристика                     = НоменклатураИБ.Характеристика;
		ДанныеЗаписи.Упаковка                           = НоменклатураИБ.Упаковка;
		
		ДанныеЗаписи.ШтрихкодКомбинации                 = НоменклатураКонтрагента.ШтрихкодКомбинации;
		ДанныеЗаписи.ШтрихкодыНоменклатуры              = НоменклатураКонтрагента.ШтрихкодыНоменклатуры;
		
		ДанныеЗаписи.ИдентификаторНоменклатуры          = НоменклатураКонтрагента.ИдентификаторНоменклатуры;
		ДанныеЗаписи.ИдентификаторХарактеристики        = НоменклатураКонтрагента.ИдентификаторХарактеристики;
		ДанныеЗаписи.ИдентификаторУпаковки              = НоменклатураКонтрагента.ИдентификаторУпаковки;
		
		Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) И ИспользоватьХарактеристики = Неопределено Тогда
			СвойстваНоменклатурИБ = СопоставлениеНоменклатурыКонтрагентовСлужебный.СвойстваНоменклатурыИнформационнойБазы(НоменклатураИБ.Номенклатура);
			Свойства = СвойстваНоменклатурИБ.Получить(НоменклатураИБ.Номенклатура);
			Если Свойства <> Неопределено Тогда
				ДанныеЗаписи.ИспользоватьХарактеристики = Свойства.ИспользоватьХарактеристики;
			КонецЕсли;
		ИначеЕсли ИспользоватьХарактеристики <> Неопределено Тогда
			ДанныеЗаписи.ИспользоватьХарактеристики = ИспользоватьХарактеристики;
		КонецЕсли;
		
		УдалитьНезаполненныеСвойстваСтруктуры(ДанныеЗаписи);
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		
		Набор.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет данные о номенклатуре контрагента из информационной базы.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - номенклатура контрагента для удаления. 
//                                        Обязательно должны быть заданы свойства "Владелец" и "Идентификатор". 
//                                        См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
Процедура УдалитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента) Экспорт
	
	Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
	Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
	Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
	Набор.Записать();
	
КонецПроцедуры

// Возвращает соответствие номенклатуры контрагента и информационной базы, удовлетворяющие отбору.
//
// Параметры:
//  Отбор - Структура - параметры отбора:
//   * НоменклатураКонтрагента - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//                             - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//                               поиск по номенклатуре контрагента. Работает только по свойствам "Владелец",
//                               "Идентификатор" и ИсторияИдентификаторов.
//   * НоменклатураИБ - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы
//                    - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы - 
//                      поиск по номенклатуре информационной базы.
//   * Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД - отбор по владельцу номенклатуры. 
//                                                          Актуально, если задан только отбор по номенклатуре ИБ.
//  ТолькоСопоставленные - Булево - возвращаются только такие элементы, у которых заполнена номенклатура информационной базы.
//
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовСлужебный.НовоеСоответствиеНоменклатуры - соответствия 
//   номенклатуры, удовлетворяющие отбору.
//
Функция НайтиСоответствиеНоменклатуры(Знач Отбор = Неопределено, Знач ТолькоСопоставленные = Ложь) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	НоменклатураКонтрагента = Неопределено;
	Отбор.Свойство("НоменклатураКонтрагента", НоменклатураКонтрагента);
	ДанныеНоменклатурыКонтрагентов = НоваяТаблицаНоменклатурыКонтрагентов(НоменклатураКонтрагента);
	
	Запрос = Новый Запрос(ТекстЗапросаСоответствиеНоменклатуры());
	ПрименитьУсловияОтбораКЗапросу(Запрос, Отбор, ДанныеНоменклатурыКонтрагентов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка   = РезультатЗапроса.Выбрать();
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ДанныеДокумента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ДанныеБазы      = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		НоменклатураИБ  = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
		Соответствие    = СопоставлениеНоменклатурыКонтрагентовСлужебный.НовоеСоответствиеНоменклатуры(ДанныеБазы,
			НоменклатураИБ);
		ПараметрыОтбора = Новый Структура("Владелец, Идентификатор", Выборка.Владелец, Выборка.Идентификатор);
		
		НайденоПоИдентификаторуДокумента = ПустаяСтрока(Выборка.ИдентификаторДокумента);
		
		ЗаполнитьЗначенияСвойств(НоменклатураИБ, Выборка);
		ЗаполнитьЗначенияСвойств(ДанныеБазы,     Выборка);
		ДанныеБазы.Характеристика = Выборка.НаименованиеХарактеристики;
		
		Если Не НайденоПоИдентификаторуДокумента Тогда
			ПараметрыОтбора.Вставить("ДополнительныйИдентификатор", ПараметрыОтбора.Идентификатор);
			ПараметрыОтбора.Идентификатор = Выборка.ИдентификаторДокумента;
			ДанныеБазы.Идентификатор = Выборка.ИдентификаторДокумента;
		КонецЕсли;
		
		ДанныеДляСверки = ДанныеНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
		Если ДанныеДляСверки.Количество() = 0 Тогда
			Результат.Добавить(Соответствие);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ДанныеДляСверки[0]);
		
		Если НайденоПоИдентификаторуДокумента Тогда
			ОбновитьДополнитьДанныеСопоставления(Соответствие, ДанныеДокумента, Выборка.ИспользоватьХарактеристики);
			ВключитьВРезультат = Не ТолькоСопоставленные Или ЗначениеЗаполнено(НоменклатураИБ.Номенклатура);
		Иначе
			ВключитьВРезультат = СоответствиеАктуально(Соответствие, ДанныеДокумента);
		КонецЕсли;
		
		Если ВключитьВРезультат Тогда
			Результат.Добавить(Соответствие);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создает временную таблицу соответствия номенклатуры контрагентов и информационной базы.
// Колонки:
//  Идентификатор                       - Строка - идентификатор номенклатуры.
//  Наименование                        - Строка - наименование номенклатуры.
//  НаименованиеХарактеристики          - Строка - наименование характеристики.
//  ЕдиницаИзмерения                    - Строка - если заполнено наименование упаковки передается оно, иначе наименование единицы измерения (базовой).
//  ЕдиницаИзмеренияКод                 - Строка - код единицы измерения.
//  Артикул                             - Строка - артикул номенклатуры.
//  СтавкаНДС                           - Строка - ставка НДС номенклатуры.
//  Штрихкод                            - Строка - штрихкод (не используется, вместо него используются поля:штрихкод комбинации и штрихкод номенклатуры).
//  ШтрихкодКомбинации                  - Строка - штрихкод комбинации: номенклатура, характеристика, упаковка.
//  ШтрихкодыНоменклатуры               - Строка - штрихкоды номенклатуры через запятую.
//  ИдентификаторНоменклатурыСервиса    - Строка - идентификатор номенклатуры в сервисе 1С:Номенклатура.
//  ИдентификаторХарактеристикиСервиса  - Строка - идентификатор характеристики в сервисе 1С:Номенклатура.
//  НаименованиеУпаковки                - Строка - наименование упаковки.
//  НаименованиеБазовойЕдиницаИзмерения - Строка - наименование базовой единицы измерения.
//  Владелец                            - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры информационной базы.
//  Номенклатура                        - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//  Характеристика                      - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//  Упаковка                            - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//  ТипНоменклатурыФНС                  - ПеречислениеСсылка.ТипыНоменклатурыФНС - соответствует значению Признак УПД.
//  КодНоменклатуры                     - Строка - код номенклатуры.
//  КодПоКТРУ                           - Строка - код по КТРУ.
//  КодТНВЭД                            - Строка - код ТН ВЭД.
//  СтранаПроисхожденияКод              - Строка - код страны происхождения.
//  ПрослеживаемыйТовар                 - Булево - признак прослеживаемости.
//  МаркируемыйТовар                    - Булево - признак маркировки.
//
// Отбор производиться по следующему сочетанию полей:
//  (Владелец, Идентификатор), если идентификатор не равен пустой строке.
//  (Владелец, Номенклатура, Характеристика, Упаковка), если идентификатор равен пустой строке.
//
// Параметры:
//  ТаблицаОтбора           - ТаблицаЗначений         - таблица для отбора записей сопоставления:
//   * Владелец       - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры.
//   * Идентификатор  - Строка                                        - идентификатор номенклатуры.
//   * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//   * Упаковка       - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//  ИмяВременнойТаблицы     - Строка                  - имя временной таблицы, в которую нужно поместить отобранные данные.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, в котором будет создана временная таблица.
//
Процедура СоздатьВременнуюТаблицуСоответствияНоменклатуры(Знач ТаблицаОтбора, Знач ИмяВременнойТаблицы, МенеджерВременныхТаблиц) Экспорт
	
	Если ТаблицаОтбора.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТипНомераСтроки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
		ТаблицаОтбора.Колонки.Добавить("НомерСтроки", ТипНомераСтроки);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОтбора.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОтбора.Владелец КАК Владелец,
	|	ТаблицаОтбора.Идентификатор КАК Идентификатор,
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика КАК Характеристика,
	|	ТаблицаОтбора.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втОтбор
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Идентификатор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКонтрагентовБЭД.Владелец КАК Владелец,
	|	НоменклатураКонтрагентовБЭД.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентовБЭД.Наименование КАК Наименование,
	|	НоменклатураКонтрагентовБЭД.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентовБЭД.НаименованиеУпаковки <> """"
	|			ТОГДА НоменклатураКонтрагентовБЭД.НаименованиеУпаковки
	|		ИНАЧЕ НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	НоменклатураКонтрагентовБЭД.Артикул КАК Артикул,
	|	НоменклатураКонтрагентовБЭД.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентовБЭД.Характеристика КАК Характеристика,
	|	НоменклатураКонтрагентовБЭД.Упаковка КАК Упаковка,
	|	втОтбор.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации КАК ШтрихкодКомбинации,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.Штрихкод КАК Штрихкод,
	|	НоменклатураКонтрагентовБЭД.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения КАК НаименованиеБазовойЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ТипНоменклатурыФНС КАК ТипНоменклатурыФНС,
	|	НоменклатураКонтрагентовБЭД.КодНоменклатуры КАК КодНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.КодПоКТРУ КАК КодПоКТРУ,
	|	НоменклатураКонтрагентовБЭД.КодТНВЭД КАК КодТНВЭД,
	|	НоменклатураКонтрагентовБЭД.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
	|	НоменклатураКонтрагентовБЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	НоменклатураКонтрагентовБЭД.МаркируемыйТовар КАК МаркируемыйТовар
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтбор КАК втОтбор
	|		ПО НоменклатураКонтрагентовБЭД.Владелец = втОтбор.Владелец
	|		И НоменклатураКонтрагентовБЭД.Идентификатор = втОтбор.Идентификатор
	|		И (втОтбор.Идентификатор <> """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентовБЭД.Владелец,
	|	НоменклатураКонтрагентовБЭД.Идентификатор,
	|	НоменклатураКонтрагентовБЭД.Наименование,
	|	НоменклатураКонтрагентовБЭД.НаименованиеХарактеристики,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентовБЭД.НаименованиеУпаковки <> """"
	|			ТОГДА НоменклатураКонтрагентовБЭД.НаименованиеУпаковки
	|		ИНАЧЕ НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмеренияКод,
	|	НоменклатураКонтрагентовБЭД.Артикул,
	|	НоменклатураКонтрагентовБЭД.СтавкаНДС,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентовБЭД.Номенклатура,
	|	НоменклатураКонтрагентовБЭД.Характеристика,
	|	НоменклатураКонтрагентовБЭД.Упаковка,
	|	втОтбор.НомерСтроки,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодыНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.Штрихкод,
	|	НоменклатураКонтрагентовБЭД.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения КАК НаименованиеБазовойЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ТипНоменклатурыФНС КАК ТипНоменклатурыФНС,
	|	НоменклатураКонтрагентовБЭД.КодНоменклатуры КАК КодНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.КодПоКТРУ КАК КодПоКТРУ,
	|	НоменклатураКонтрагентовБЭД.КодТНВЭД КАК КодТНВЭД,
	|	НоменклатураКонтрагентовБЭД.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
	|	НоменклатураКонтрагентовБЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	НоменклатураКонтрагентовБЭД.МаркируемыйТовар КАК МаркируемыйТовар
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтбор КАК втОтбор
	|		ПО НоменклатураКонтрагентовБЭД.Владелец = втОтбор.Владелец
	|		И НоменклатураКонтрагентовБЭД.Номенклатура = втОтбор.Номенклатура
	|		И НоменклатураКонтрагентовБЭД.Характеристика = втОтбор.Характеристика
	|		И НоменклатураКонтрагентовБЭД.Упаковка = втОтбор.Упаковка
	|		И (втОтбор.Идентификатор = """")
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОтбор";
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Если ИмяВременнойТаблицы = "втОтбор" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "втОтбор", "втОтбор1");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "втРезультат", ИмяВременнойТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает текст запроса соответствия номенклатуры контрагента по идентификатору и владельцу.
// Текст запроса в результирующей таблице содержит колонки:
//  Идентификатор                       - Строка - идентификатор номенклатуры контрагента.
//  ИдентификаторНоменклатуры           - Строка - идентификатор номенклатуры.
//  ИдентификаторХарактеристики         - Строка - идентификатор характеристики.
//  ИдентификаторУпаковки               - Строка - идентификатор упаковки.
//  Наименование                        - Строка - наименование номенклатуры.
//  НаименованиеХарактеристики          - Строка - наименование характеристики.
//  ЕдиницаИзмерения                    - Строка - единица измерения.
//  ЕдиницаИзмеренияКод                 - Строка - код единицы измерения.
//  Артикул                             - Строка - артикул номенклатуры.
//  СтавкаНДС                           - Строка - ставка НДС номенклатуры.
//  Штрихкод                            - Строка - штрихкод (не используется, вместо него используются поля:штрихкод комбинации и штрихкод номенклатуры).
//  ШтрихкодКомбинации                  - Строка - штрихкод комбинации: номенклатура, характеристика, упаковка.
//  ШтрихкодыНоменклатуры               - Строка - штрихкоды номенклатуры через запятую.
//  ИдентификаторНоменклатурыСервиса    - Строка - идентификатор номенклатуры в сервисе 1С:Номенклатура.
//  ИдентификаторХарактеристикиСервиса  - Строка - идентификатор характеристики в сервисе 1С:Номенклатура.
//  НаименованиеУпаковки                - Строка - наименование упаковки.
//  НаименованиеБазовойЕдиницаИзмерения - Строка - наименование базовой единицы измерения.
//  ИспользоватьХарактеристики          - Булево - признак использования характеристики на момент заполнения 
//                                                 соответствия номенклатуры контрагента и номенклатуры ИБ. 
//  Владелец                            - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры информационной базы.
//  Номенклатура                        - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
//  Характеристика                      - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//  Упаковка                            - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
//  ТипНоменклатурыФНС                  - ПеречислениеСсылка.ТипыНоменклатурыФНС - соответствует значению Признак УПД.
//  КодНоменклатуры                     - Строка - код номенклатуры.
//  КодПоКТРУ                           - Строка - код по КТРУ.
//  КодТНВЭД                            - Строка - код ТН ВЭД.
//  СтранаПроисхожденияКод              - Строка - код страны происхождения.
//  ПрослеживаемыйТовар                 - Булево - признак прослеживаемости.
//  МаркируемыйТовар                    - Булево - признак маркировки.
//
// Параметры:
//  ИмяВременнойТаблицыОтбора          - Строка - наименование временной таблицы с колонками поиска:
//   * Идентификатор - Строка                                  - идентификатор номенклатуры контрагента.
//   * Владелец      - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры информационной базы.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ИнициализироватьТекстЗапросаСоответствияНоменклатурыКонтрагентовБЭДПоИдентификаторуИВладельцу(Знач ИмяВременнойТаблицыОтбора = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтборов.Идентификатор КАК Идентификатор,
	|	ТаблицаОтборов.Владелец КАК Владелец
	|ПОМЕСТИТЬ ТаблицаУникальныхОтборов
	|ИЗ
	|	ТаблицаОтборов КАК ТаблицаОтборов
	|ГДЕ
	|	ТаблицаОтборов.Идентификатор <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКонтрагентовБЭД.Владелец КАК Владелец,
	|	НоменклатураКонтрагентовБЭД.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентовБЭД.Наименование КАК Наименование,
	|	НоменклатураКонтрагентовБЭД.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	НоменклатураКонтрагентовБЭД.Артикул КАК Артикул,
	|	НоменклатураКонтрагентовБЭД.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураКонтрагентовБЭД.Штрихкод КАК Штрихкод,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентовБЭД.Характеристика КАК Характеристика,
	|	НоменклатураКонтрагентовБЭД.Упаковка КАК Упаковка,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	НоменклатураКонтрагентовБЭД.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации КАК ШтрихкодКомбинации,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	НоменклатураКонтрагентовБЭД.ТипНоменклатурыФНС КАК ТипНоменклатурыФНС,
	|	НоменклатураКонтрагентовБЭД.КодНоменклатуры КАК КодНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.КодПоКТРУ КАК КодПоКТРУ,
	|	НоменклатураКонтрагентовБЭД.КодТНВЭД КАК КодТНВЭД,
	|	НоменклатураКонтрагентовБЭД.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
	|	НоменклатураКонтрагентовБЭД.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	НоменклатураКонтрагентовБЭД.МаркируемыйТовар КАК МаркируемыйТовар
	|ПОМЕСТИТЬ НоменклатураКонтрагентовБЭД
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУникальныхОтборов КАК ТаблицаУникальныхОтборов
	|		ПО НоменклатураКонтрагентовБЭД.Владелец = ТаблицаУникальныхОтборов.Владелец
	|			И НоменклатураКонтрагентовБЭД.Идентификатор = ТаблицаУникальныхОтборов.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Идентификатор";
	
	Если ИмяВременнойТаблицыОтбора <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов", ИмяВременнойТаблицыОтбора);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область Конструкторы

// Возвращает параметры при создании формы документа.
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ВариантУказанияНоменклатурыПоУмолчанию      - ПеречислениеСсылка.ВариантыУказанияНоменклатурыБЭД - устанавливается вариант по умолчанию,
//                                                                                                        если не заданы другие настройки.
//   * ПредставлениеУчитыватьНоменклатуруВладельца - Строка - представление команды учитывать номенклатуру владельца. 
//                                                            Например, "Учитывать номенклатуру поставщика"
//                                                            или "Учитывать номенклатуру клиента" и т.п.
//   * ИмяЭлементаНоменклатураКонтрагента          - Строка - имя элемента табличной части с типом СправочникСсылка.НоменклатураКонтрагентов.
//   * ИмяРеквизитаОрганизация                     - Строка - имя реквизита организации в документе.
//   * ИмяРеквизитаКонтрагент                      - Строка - имя реквизита контрагент в документе.
//
Функция НовыеПараметрыПриСозданииФормыДокумента() Экспорт
	
	ПараметрыФормыДокумента = Новый Структура;
	ПараметрыФормыДокумента.Вставить("ВариантУказанияНоменклатурыПоУмолчанию"        );
	ПараметрыФормыДокумента.Вставить("ПредставлениеУчитыватьНоменклатуруВладельца"   , "");
	ПараметрыФормыДокумента.Вставить("ИмяЭлементаНоменклатураКонтрагента"            , "");
	ПараметрыФормыДокумента.Вставить("ИмяРеквизитаОрганизация"                       , "");
	ПараметрыФормыДокумента.Вставить("ИмяРеквизитаКонтрагент"                        , "");

	Возврат ПараметрыФормыДокумента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормыСправочников

// Обрабатывает форму номенклатуры при ее создании.
// Если в параметрах формы присутствует данные о номенклатуре контрагента,
// то вызывает переопределяемый метод, инициализирующий данные формы.
// Следует вызвать в обработчике события ПриСозданииНаСервере формы элемента номенклатуры.
// См. также СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента номенклатуры.
//
Процедура ПриСозданииФормыНоменклатуры(Форма) Экспорт
	
	НоменклатураКонтрагента = СвойствоСтруктуры(Форма.Параметры,
		"ДополнительныеПараметры.СопоставлениеНоменклатурыКонтрагентов.НоменклатураКонтрагента");
	
	Если НоменклатураКонтрагента <> Неопределено Тогда
		
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента(
			НоменклатураКонтрагента, Форма);
		
	КонецЕсли;

КонецПроцедуры

// Обрабатывает форму характеристики при ее создании.
// Если в параметрах формы присутствует данные о номенклатуре контрагента,
// то вызывает переопределяемый метод, инициализирующий данные формы.
// Следует вызвать в обработчике события ПриСозданииНаСервере формы элемента характеристики.
// См. также СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента номенклатуры.
//
Процедура ПриСозданииФормыХарактеристики(Форма) Экспорт
	
	НоменклатураКонтрагента = СвойствоСтруктуры(Форма.Параметры,
		"ДополнительныеПараметры.СопоставлениеНоменклатурыКонтрагентов.НоменклатураКонтрагента");
	
	Если НоменклатураКонтрагента <> Неопределено Тогда
		
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента(
			НоменклатураКонтрагента, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыДокументов

// Обработчик событий "ПриСозданииНаСервере" формы документа.
//
// Параметры:
//  ФормаДокумента          - ФормаКлиентскогоПриложения                               - форма документа.
//  ПараметрыФормыДокумента - Структура из см. НовыеПараметрыПриСозданииФормыДокумента - параметры при создании формы.
//
Процедура ПриСозданииФормыДокумента(ФормаДокумента, ПараметрыФормыДокумента) Экспорт
		
	ДобавитьРеквизитыФормы(ФормаДокумента);
		
	ЗаполнитьРеквизитыФормы(ФормаДокумента, ПараметрыФормыДокумента);
	
	УстановитьУсловноеОформлениеФормыДокумента(ФормаДокумента, ПараметрыФормыДокумента);
	
КонецПроцедуры

// Обработчик событий "ПриЗаписиНаСервере" формы документа.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения - форма документа.
//  Объект         - ДокументОбъект             - объект документа.
//  Отказ          - Булево                     - признак наличия ошибок при выполнении обработчика.
//
Процедура ПриЗаписиНаСервереФормыДокумента(Знач ФормаДокумента, Знач Объект, Отказ) Экспорт
	
	ПараметрыНоменклатурыКонтрагентаБЭД = ФормаДокумента.ПараметрыНоменклатурыКонтрагентаБЭД;
	
	Если Не ПараметрыНоменклатурыКонтрагентаБЭД.ИспользуетсяОбменEDI Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = Объект.Ссылка;
	Организация      = Объект[ПараметрыНоменклатурыКонтрагентаБЭД.ИмяРеквизитаОрганизация];
	Контрагент       = Объект[ПараметрыНоменклатурыКонтрагентаБЭД.ИмяРеквизитаКонтрагент];

	РегистрыСведений.ВариантыУказанияНоменклатурыВДокументахБЭД.ЗаписатьНаборЗаписейВариантаУказанияНоменклатурыДокумента(
		СсылкаНаДокумент, Организация, Контрагент, ФормаДокумента.ВариантУказанияНоменклатурыБЭД, Отказ);
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ПоискИУдалениеДублей

// См. ПоискИУдалениеДублейПереопределяемый.ПриОпределенииОбъектовСПоискомДублей
Процедура ПриОпределенииОбъектовСПоискомДублей(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.НоменклатураКонтрагентов.ПолноеИмя(), "ПараметрыПоискаДублей
	|ПриПоискеДублей");
	
КонецПроцедуры

//Конец СтандартныеПодсистемы.ПоискИУдалениеДублей

//++ Локализация

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСловаряСопоставленияНоменклатурыБЭД.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ОбновлениеСловаряСопоставленияНоменклатурыБЭД.ИмяМетода);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСловаряСопоставленияНоменклатурыБЭД;
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСловарьСопоставленияНоменклатурыБЭД;
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД);
	Типы.Добавить(Метаданные.РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//++ Локализация

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Версия_1_8_1

#Область РегистрыСведений_НоменклатураКонтрагентовБЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.8.1.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.НоменклатураКонтрагентовБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("91a32e28-5236-45a5-a2ea-6f522835dabb");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НоменклатураКонтрагентовБЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.НоменклатураКонтрагентовБЭД";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.НоменклатураКонтрагентовБЭД";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляются данные регистра номенклатура контрагентов.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
#КонецОбласти

#КонецОбласти

#Область Версия_1_9_7

#Область СопоставлениеНоменклатурыКонтрагентов_ВключитьИспользованиеФОСловаряСопоставленияНоменклатурыБЭД

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.7.2";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "СопоставлениеНоменклатурыКонтрагентов.ВключитьИспользованиеФОСловаряСопоставленияНоменклатурыБЭД";
	Обработчик.Комментарий = НСтр("ru = 'Включение функциональности словаря сопоставления номенклатуры.'");

#КонецОбласти

#Область РегистрыСведений_СловарьСопоставленияНоменклатурыБЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.7.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f14014f6-9e00-4d46-80be-a74a2007d1f2");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СловарьСопоставленияНоменклатурыБЭД";
	
	ТипыДанныхСопоставления = Метаданные.ОпределяемыеТипы.ОбъектДанныхСопоставленияБЭД.Тип.Типы();
	Для Каждого ТипДанных Из ТипыДанныхСопоставления Цикл
		НайденныйТип = Метаданные.НайтиПоТипу(ТипДанных);
		Если НайденныйТип <> Неопределено Тогда
			Обработчик.ЧитаемыеОбъекты = Обработчик.ЧитаемыеОбъекты + ", Справочник." + НайденныйТип.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СловарьСопоставленияНоменклатурыБЭД";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СловарьСопоставленияНоменклатурыБЭД";
	Обработчик.Комментарий = НСтр("ru = 'Заполняются данные служебного регистра словарь номенклатуры сопоставления.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РегистрыСведений_СтатистикаСловСловаряСопоставленияНоменклатурыБЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.7.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c1521188-fa4d-4570-9706-41cee8c4679f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СловарьСопоставленияНоменклатурыБЭД,"
		+ "РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполняются данные служебного регистра статистики слов словаря сопоставления.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#КонецОбласти

КонецПроцедуры

Процедура ВключитьИспользованиеФОСловаряСопоставленияНоменклатурыБЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьСловарь = ИспользоватьСловарь();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСловарьСопоставленияНоменклатурыБЭД") = ИспользоватьСловарь Тогда
		Возврат;
	КонецЕсли;
	СопоставлениеНоменклатурыКонтрагентовСлужебный.УстановитьИспользованиеСловаряСопоставления(ИспользоватьСловарь);
	
КонецПроцедуры

#Область РегламентныеЗадания

Процедура ОбновлениеСловаряСопоставленияНоменклатурыБЭД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеСловаряСопоставленияНоменклатурыБЭД);
	СопоставлениеНоменклатурыКонтрагентовСлужебный.ОбновитьСловарьИСтатистикуПоИзменениям();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромНоменклатураКонтрагентовБЭД

// Возвращает данные номенклатуры контрагента с отбором по Владельцу и Идентификатору.
// Отбор задается в виде запроса, создающего временную таблицу.
// 
// Параметры:
//  Запрос - Запрос - запрос, описывающий создание временной таблицы втОтбор с колонками Владелец и Идентификатор, где
//                   Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры;
//                   Идентификатор - Строка - идентификатор (ключ уникальности) номенклатуры.
// 
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
Функция ДанныеНоменклатурыКонтрагентаПоЗапросу(Знач Запрос) Экспорт
	
	Возврат ДанныеНоменклатурыКонтрагентаПоОтбору(Запрос);
	
КонецФункции

#КонецОбласти

//-- Локализация

// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа_НоменклатураКонтрагентов(Списки);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных_НоменклатураКонтрагентов(Описание);
	
КонецПроцедуры

Функция ИдентификаторТовараПоДаннымНоменклатуры(Знач Наименование, Знач Характеристика = Неопределено, Знач ЕдиницаИзмерения = Неопределено) Экспорт
	
	ИдентификаторНоменклатуры = ИдентификаторТовараПоСтроке(Наименование, 100);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		ИдентификаторХарактеристики = ИдентификаторТовараПоСтроке(Характеристика, 100);
	Иначе
		ИдентификаторХарактеристики = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ИдентификаторУпаковки = ИдентификаторТовараПоСтроке(ЕдиницаИзмерения, 100);
	Иначе
		ИдентификаторУпаковки = "";
	КонецЕсли;
	Идентификатор = ИдентификаторНоменклатуры + "#" + ИдентификаторХарактеристики + "#" + ИдентификаторУпаковки;
	Возврат Идентификатор;
	
КонецФункции

Функция ИдентификаторТовараПоСтроке(Знач СтрокаТовара, Знач МаксимальнаяДлина = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(МаксимальнаяДлина) Тогда
		МаксимальнаяДлина = 110;
	КонецЕсли;
	
	Идентификатор = СтрокаТовара;
	Идентификатор = ВРег(Идентификатор);
	Идентификатор = СтрЗаменить(Идентификатор, " ", "");
	
	Длина = СтрДлина(Идентификатор);
	
	Если Длина > МаксимальнаяДлина Тогда
		
		Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеширование.Добавить(Идентификатор);
		
		ХешСтрока = Строка(Хеширование.ХешСумма);
		ХешСтрока = СтрЗаменить(ХешСтрока, " ", "");
		
		ДлинаХешСтроки = СтрДлина(ХешСтрока);
		
		Идентификатор = Лев(Идентификатор, МаксимальнаяДлина - ДлинаХешСтроки) + ХешСтрока;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеНоменклатурыКонтрагента

Функция СсылкаНоменклатурыКонтрагентаПоДаннымКонтрагента(Знач ДанныеКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &ВладелецНоменклатуры
	|	И НоменклатураКонтрагентов.Идентификатор = &Идентификатор
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И НЕ НоменклатураКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецНоменклатуры"      , ДанныеКонтрагента.Владелец);
	Запрос.УстановитьПараметр("Идентификатор"             , ДанныеКонтрагента.Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДругиеШтрихкодыНоменклатуры(Объект)
	
	Если Не ПустаяСтрока(Объект.ДругиеШтрихкодыНоменклатурыСтрокой) Тогда
		ДругиеШтрихкодыНоменклатурыТЧ = СтрСоединить(Объект.ДругиеШтрихкодыНоменклатуры.Выгрузить().ВыгрузитьКолонку("Штрихкод"), ",");
		Если Объект.ДругиеШтрихкодыНоменклатурыСтрокой <> ДругиеШтрихкодыНоменклатурыТЧ Тогда
			Объект.ДругиеШтрихкодыНоменклатуры.Очистить();
			НаборДругихШтрихкодов = СтрРазделить(Объект.ДругиеШтрихкодыНоменклатурыСтрокой, ",");
			Для Каждого Штрихкод Из НаборДругихШтрихкодов Цикл
				НоваяСтрока = Объект.ДругиеШтрихкодыНоменклатуры.Добавить();
				НоваяСтрока.Штрихкод = СокрЛП(Штрихкод);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияЕдиницИзмеренияУпаковок(Объект, ДанныеНоменклатурыКонтрагента,
	Знач ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ, Знач ДанныеРегистраНоменклатурыКонтрагентов)
	
	НаименованиеУпаковки = ДанныеНоменклатурыКонтрагента.НаименованиеУпаковки;
	ЕдиницаИзмерения     = ДанныеНоменклатурыКонтрагента.ЕдиницаИзмерения;
	ЕдиницаИзмеренияКод  = ДанныеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод;
	
	Если ПустаяСтрока(НаименованиеУпаковки) Тогда
		Объект.НаименованиеУпаковки = ЕдиницаИзмерения;
		Если Не ПустаяСтрока(ДанныеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод) 
			И ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ Тогда
			СопоставлениеНоменклатурыКонтрагентовПереопределяемый.НайтиНаименованиеЕдиницыИзмеренияПоКодуОКЕИ(
				ЕдиницаИзмеренияКод, ЕдиницаИзмерения);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЕдиницаИзмерения) Тогда
		Объект.НаименованиеБазовойЕдиницыИзмерения = ЕдиницаИзмерения;
		Объект.КодОКЕИБазовойЕдиницыИзмерения      = ЕдиницаИзмеренияКод;
	ИначеЕсли Не ПустаяСтрока(ДанныеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод) Тогда
		Объект.НаименованиеБазовойЕдиницыИзмерения = ДанныеНоменклатурыКонтрагента.ЕдиницаИзмерения;
		Объект.КодОКЕИБазовойЕдиницыИзмерения      = ДанныеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеУпаковки) Тогда
		Объект.НаименованиеУпаковки = Объект.НаименованиеБазовойЕдиницыИзмерения;
	КонецЕсли;
	
	Если Не ДанныеРегистраНоменклатурыКонтрагентов Тогда
		Объект.КоличествоБазовойЕдиницыИзмерения = ДанныеНоменклатурыКонтрагента.КоличествоБазовойЕдиницыИзмерения;
		Объект.КоличествоУпаковок = ДанныеНоменклатурыКонтрагента.КоличествоУпаковок;
	КонецЕсли;
	
	Если Объект.КоличествоБазовойЕдиницыИзмерения = 0
			И Объект.КоличествоУпаковок = 0 Тогда
				
		Объект.КоличествоБазовойЕдиницыИзмерения = 1;
		Объект.КоличествоУпаковок = 1;
			
	КонецЕсли;
	
	ДанныеНоменклатурыКонтрагента.НаименованиеУпаковки = Объект.НаименованиеУпаковки;
	ДанныеНоменклатурыКонтрагента.ЕдиницаИзмерения     = Объект.НаименованиеБазовойЕдиницыИзмерения;
	ДанныеНоменклатурыКонтрагента.ЕдиницаИзмеренияКод  = Объект.КодОКЕИБазовойЕдиницыИзмерения;

КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область ДокументыEDI

Процедура УстановитьУсловноеОформлениеФормыДокумента(ФормаДокумента, ПараметрыФормыДокумента)
	
	Элемент = ФормаДокумента.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПараметрыФормыДокумента.ИмяЭлементаНоменклатураКонтрагента);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВариантУказанияНоменклатурыБЭД");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации();
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВариантУказанияНоменклатурыБЭД");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыУказанияНоменклатурыБЭД.ПустаяСсылка();

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормы(ФормаДокумента)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыНоменклатурыКонтрагентаБЭД", Новый ОписаниеТипов));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВариантУказанияНоменклатурыБЭД",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУказанияНоменклатурыБЭД")));
	
	ФормаДокумента.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФормы(ФормаДокумента, ПараметрыНоменклатурыКонтрагентаБЭД)
	
	Объект         = ФормаДокумента.Объект;
	ДокументСсылка = Объект.Ссылка;

	ДополнитьПараметрыНоменклатурыКонтрагентаБЭД(ПараметрыНоменклатурыКонтрагентаБЭД);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ВариантУказанияНоменклатурыВДокументе = 
			РегистрыСведений.ВариантыУказанияНоменклатурыВДокументахБЭД.ВариантУказанияНоменклатурыВДокументе(ДокументСсылка);
			
		Если ВариантУказанияНоменклатурыВДокументе <> Неопределено Тогда
			ФормаДокумента.ВариантУказанияНоменклатурыБЭД                             = ВариантУказанияНоменклатурыВДокументе;
			ПараметрыНоменклатурыКонтрагентаБЭД.ВариантУказанияНоменклатурыВДокументе = ВариантУказанияНоменклатурыВДокументе;
		Иначе
			ВариантУказанияНоменклатурыПоУмолчанию = ПараметрыНоменклатурыКонтрагентаБЭД.ВариантУказанияНоменклатурыПоУмолчанию;
			ФормаДокумента.ВариантУказанияНоменклатурыБЭД = ВариантУказанияНоменклатурыПоУмолчанию;
		КонецЕсли;
	
	Иначе
		
		Контрагент  = Объект[ПараметрыНоменклатурыКонтрагентаБЭД.ИмяРеквизитаКонтрагент];
		Организация = Объект[ПараметрыНоменклатурыКонтрагентаБЭД.ИмяРеквизитаОрганизация];
		
		ПоследняяНастройкаВариантаУказанияНоменклатуры = 
			РегистрыСведений.ВариантыУказанияНоменклатурыВДокументахБЭД.ПоследняяНастройкаВариантаУказанияНоменклатуры(ДокументСсылка,
																														Контрагент,
																														Организация);
		Если ЗначениеЗаполнено(ПоследняяНастройкаВариантаУказанияНоменклатуры) Тогда
			ПараметрыНоменклатурыКонтрагентаБЭД.ПоследняяНастройкаВариантаУказанияНоменклатуры = ПоследняяНастройкаВариантаУказанияНоменклатуры;
			ФормаДокумента.ВариантУказанияНоменклатурыБЭД = ПоследняяНастройкаВариантаУказанияНоменклатуры;
		Иначе
			ФормаДокумента.ВариантУказанияНоменклатурыБЭД = ПараметрыНоменклатурыКонтрагентаБЭД.ВариантУказанияНоменклатурыПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СервисEDI") Тогда
		МодульДокументыEDIИнтеграция = ОбщегоНазначения.ОбщийМодуль("ДокументыEDIИнтеграция");
		ПараметрыНоменклатурыКонтрагентаБЭД.ИспользуетсяОбменEDI = МодульДокументыEDIИнтеграция.ЕстьПравоИспользованияEDI();
	КонецЕсли;

	ФормаДокумента.ПараметрыНоменклатурыКонтрагентаБЭД = ПараметрыНоменклатурыКонтрагентаБЭД;
	
КонецПроцедуры

Процедура ДополнитьПараметрыНоменклатурыКонтрагентаБЭД(ПараметрыНоменклатурыКонтрагентаБЭД)
	
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ИмяКомандыУчитыватьВладельцаНоменклатуры"      );
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ПоследняяНастройкаВариантаУказанияНоменклатуры");
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ВариантУказанияНоменклатурыВДокументе"         );
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ВариантУказанияНоменклатурыВОбменеEDI"         );
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ИспользуетсяОбменEDI"                          , Ложь);
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ДокументИспользуетсяВОбменеEDI"                , Ложь);
	ПараметрыНоменклатурыКонтрагентаБЭД.Вставить("ЗначениеНастройкиКонтрагентаEDI"               , Ложь);

КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Возвращает таблицу значений с колонками, описывающими номенклатуру информационной базы.
// Таблица может быть инициализирована массивом структур с аналогичным составом свойств.
//
// Параметры:
//  НаборНоменклатурыИБ - Массив, Структура - структура или массив структур, описывающих номенклатуру ИБ, для инициализации таблицы.
//                                            См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//                      - Неопределено - возвращаемая таблица не будет содержать строк.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с типизированными колонками, описывающими номенклатуру ИБ.
//                    См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Функция НоваяТаблицаНоменклатурыИнформационнойБазы(Знач НаборНоменклатурыИБ = Неопределено)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	Таблица.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	Таблица.Колонки.Добавить("Упаковка", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
	
	Если ЗначениеЗаполнено(НаборНоменклатурыИБ) Тогда
		
		Если ТипЗнч(НаборНоменклатурыИБ) <> Тип("Массив") Тогда
			НаборНоменклатурыИБ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыИБ);
		КонецЕсли;
		Для Каждого НоменклатураИБ Из НаборНоменклатурыИБ Цикл
			
			Запись = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, НоменклатураИБ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицу значений с колонками, описывающими номенклатуру контрагента.
// Таблица может быть инициализирована массивом структур с аналогичным составом свойств.
// В случае, если массив ИсторияИдентификаторов не пустой, создается столько строк, сколько элементов в массиве.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//                                - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//                                - Неопределено - возвращаемая таблица не будет содержать строк.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД,
//   * Идентификатор - Строка,
//   * ДополнительныйИдентификатор - Строка
//
Функция НоваяТаблицаНоменклатурыКонтрагентов(Знач НаборНоменклатурыКонтрагентов = Неопределено)
	
	Возврат СопоставлениеНоменклатурыКонтрагентовСлужебный.НоваяТаблицаНоменклатурыКонтрагентов(НаборНоменклатурыКонтрагентов);
	
КонецФункции

// Возвращает массив ключей из  СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента,
// представляющий собой совокупность натуральных ключей номенклатуры контрагента
//
// Возвращаемое значение:
//  Массив из Строка - имена ключей номенклатуры контрагента
//
Функция НатуральныеКлючиНоменклатурыКонтрагента()
	
	Ключи = Новый Массив;
	
	Ключи.Добавить("Наименование");         // наименование номенклатуры.
	Ключи.Добавить("Характеристика");       // наименование характеристики номенклатуры.
	Ключи.Добавить("ЕдиницаИзмерения");     // наименование единицы измерения номенклатуры.
	Ключи.Добавить("ЕдиницаИзмеренияКод");  // код по ОКЕИ единицы измерения номенклатуры.
	Ключи.Добавить("Артикул");              // артикул номенклатуры.
	Ключи.Добавить("КодНоменклатуры");      // код номенклатуры. 
	Ключи.Добавить("ШтрихкодКомбинации");   // штрихкод комбинации: номенклатура, характеристика, упаковка. 
	
	Возврат Ключи;
	
КонецФункции

#КонецОбласти

#Область ПрочееЛокализация

Функция СвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Если Структура.Свойство(ТекущееСвойство) Тогда
			Возврат Структура[ТекущееСвойство];
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		Возврат СвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецФункции

Функция ИспользоватьСловарь()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Номенклатура <> Неопределено";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЗапросСозданияТаблицыОтбораДанныхНоменклатурыКонтрагента(Знач ТаблицаОтбора)
	
	ИзмеренияРегистра = Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД.Измерения;
	
	ТаблицаПараметрЗапроса = Новый ТаблицаЗначений();
	ТаблицаПараметрЗапроса.Колонки.Добавить("Владелец", ИзмеренияРегистра.Владелец.Тип);
	ТаблицаПараметрЗапроса.Колонки.Добавить("Идентификатор", ИзмеренияРегистра.Идентификатор.Тип);
	
	Для Каждого Элемент Из ТаблицаОтбора Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПараметрЗапроса.Добавить(), Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметрЗапроса", ТаблицаПараметрЗапроса);
	Запрос.Текст = "ВЫБРАТЬ
	|	втОтбор.Владелец КАК Владелец,
	|	втОтбор.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втОтбор
	|ИЗ
	|	&ТаблицаПараметрЗапроса КАК втОтбор";
	
	Возврат Запрос;
	
КонецФункции

Функция ИспользоватьХарактеристикиНоменклатуры(Знач Номенклатура)
	
	ИспользоватьХарактеристики = Неопределено;
	
	СвойстваНоменклатурИБ = СопоставлениеНоменклатурыКонтрагентовСлужебный.СвойстваНоменклатурыИнформационнойБазы(
		Номенклатура);
	Свойства = СвойстваНоменклатурИБ.Получить(Номенклатура);
	Если Свойства <> Неопределено Тогда
		ИспользоватьХарактеристики = Свойства.ИспользоватьХарактеристики;
	КонецЕсли;
	
	Возврат ИспользоватьХарактеристики;
	
КонецФункции

#КонецОбласти

#Область РаботаСРегистромНоменклатураКонтрагентовБЭД

Функция ТекстЗапросаДанныхНоменклатурыКонтрагента()
	
	Возврат "ВЫБРАТЬ
	|	НоменклатураКонтрагентовБЭД.Владелец,
	|	НоменклатураКонтрагентовБЭД.Идентификатор,
	|	НоменклатураКонтрагентовБЭД.Наименование,
	|	НоменклатураКонтрагентовБЭД.НаименованиеХарактеристики КАК Характеристика,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмеренияКод,
	|	НоменклатураКонтрагентовБЭД.Артикул,
	|	НоменклатураКонтрагентовБЭД.СтавкаНДС,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристикиСервиса,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристики,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторУпаковки,
	|	НоменклатураКонтрагентовБЭД.ИспользоватьХарактеристики,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодКомбинации,
	|	НоменклатураКонтрагентовБЭД.ШтрихкодыНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.НаименованиеУпаковки,
	|	НоменклатураКонтрагентовБЭД.ТипНоменклатурыФНС,
	|	НоменклатураКонтрагентовБЭД.КодНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.КодПоКТРУ,
	|	НоменклатураКонтрагентовБЭД.КодТНВЭД,
	|	НоменклатураКонтрагентовБЭД.СтранаПроисхожденияКод,
	|	НоменклатураКонтрагентовБЭД.ПрослеживаемыйТовар,
	|	НоменклатураКонтрагентовБЭД.МаркируемыйТовар
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|ГДЕ
	|	(НоменклатураКонтрагентовБЭД.Владелец, НоменклатураКонтрагентовБЭД.Идентификатор) В
	|		(ВЫБРАТЬ
	|			втОтбор.Владелец КАК Владелец,
	|			втОтбор.Идентификатор КАК Идентификатор
	|		ИЗ
	|			втОтбор КАК втОтбор)";
	
КонецФункции

Функция ТекстЗапросаСоответствиеНоменклатуры()
	
	Возврат "ВЫБРАТЬ
	|	Таблица.Владелец КАК Владелец,
	|	Таблица.Идентификатор КАК Идентификатор,
	|	Таблица.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ втТаблицаНоменклатурыКонтрагентов
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втТаблицаНоменклатурыИБ
	|ИЗ
	|	&ТаблицаНоменклатурыИБ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сопоставление.Владелец КАК Владелец,
	|	Сопоставление.Идентификатор КАК Идентификатор,
	|	"""" КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ ВсеИдентификаторы
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК Сопоставление
	|ГДЕ
	|	(Сопоставление.Владелец, Сопоставление.Идентификатор) В
	|			(ВЫБРАТЬ
	|				вт.Владелец,
	|				вт.Идентификатор
	|			ИЗ
	|				втТаблицаНоменклатурыКонтрагентов КАК вт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Идентификаторы.Владелец,
	|	Идентификаторы.ДополнительныйИдентификатор,
	|	Идентификаторы.Идентификатор
	|ИЗ
	|	втТаблицаНоменклатурыКонтрагентов КАК Идентификаторы
	|ГДЕ
	|	НЕ (Идентификаторы.Владелец, Идентификаторы.Идентификатор) В
	|				(ВЫБРАТЬ
	|					Сопоставление.Владелец,
	|					Сопоставление.Идентификатор
	|				ИЗ
	|					РегистрСведений.НоменклатураКонтрагентовБЭД КАК Сопоставление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сопоставление.Владелец КАК Владелец,
	|	Сопоставление.Идентификатор КАК Идентификатор,
	|	Сопоставление.Наименование КАК Наименование,
	|	Сопоставление.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Сопоставление.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Сопоставление.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Сопоставление.Артикул КАК Артикул,
	|	Сопоставление.СтавкаНДС КАК СтавкаНДС,
	|	Сопоставление.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	Сопоставление.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	Сопоставление.Номенклатура КАК Номенклатура,
	|	Сопоставление.Характеристика КАК Характеристика,
	|	Сопоставление.Упаковка КАК Упаковка,
	|	Сопоставление.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	Сопоставление.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	Сопоставление.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Сопоставление.ШтрихкодКомбинации КАК ШтрихкодКомбинации,
	|	Сопоставление.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры,
	|	Сопоставление.Штрихкод КАК Штрихкод,
	|	Сопоставление.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	Сопоставление.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	Сопоставление.ТипНоменклатурыФНС КАК ТипНоменклатурыФНС,
	|	Сопоставление.КодНоменклатуры КАК КодНоменклатуры,
	|	Сопоставление.КодПоКТРУ КАК КодПоКТРУ,
	|	Сопоставление.КодТНВЭД КАК КодТНВЭД,
	|	Сопоставление.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
	|	Сопоставление.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	Сопоставление.МаркируемыйТовар КАК МаркируемыйТовар,
	|	ТаблицаИдентификаторов.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК Сопоставление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИдентификаторы КАК ТаблицаИдентификаторов
	|		ПО Сопоставление.Владелец = ТаблицаИдентификаторов.Владелец
	|			И Сопоставление.Идентификатор = ТаблицаИдентификаторов.Идентификатор
	|ГДЕ
	|	&УсловиеПоНоменклатуреКонтрагентов
	|	И &УсловиеПоНоменклатуреИБ
	|	И &УсловиеПоВладельцу";
	
КонецФункции

Процедура ПрименитьУсловияОтбораКЗапросу(Запрос, Отбор, ДанныеНоменклатурыКонтрагентов)
	
	Если Отбор.Свойство("НоменклатураКонтрагента") Тогда
		ТекстЗамены = "(Сопоставление.Владелец, Сопоставление.Идентификатор) В
		               |(ВЫБРАТЬ вт.Владелец, вт.Идентификатор ИЗ ВсеИдентификаторы КАК вт)";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ДанныеНоменклатурыКонтрагентов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуреКонтрагентов", ТекстЗамены);
	
	Если Отбор.Свойство("НоменклатураИБ") Тогда
		Таблица = НоваяТаблицаНоменклатурыИнформационнойБазы(Отбор.НоменклатураИБ);
		ТекстЗамены = "(Сопоставление.Номенклатура, Сопоставление.Характеристика, Сопоставление.Упаковка) В
		               |(ВЫБРАТЬ вт.Номенклатура, вт.Характеристика, вт.Упаковка ИЗ втТаблицаНоменклатурыИБ КАК вт)";
	Иначе
		Таблица = НоваяТаблицаНоменклатурыИнформационнойБазы();
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыИБ", Таблица);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуреИБ", ТекстЗамены);
	
	Если Отбор.Свойство("Владелец") Тогда
		Запрос.УстановитьПараметр("Владелец", Отбор.Владелец);
		ТекстЗамены = "Сопоставление.Владелец = &Владелец";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВладельцу", ТекстЗамены);
	
КонецПроцедуры

Процедура ОбновитьДополнитьДанныеСопоставления(Знач Соответствие, Знач ДанныеДокумента, Знач ИспользоватьХарактеристики)
	
	ЕстьИзменения  = Ложь;
	ДанныеБазы     = Соответствие.НоменклатураКонтрагента; 
	НоменклатураИБ = Соответствие.НоменклатураИБ; 
	
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		ИспользоватьХарактеристикиАктуализация = ИспользоватьХарактеристикиНоменклатуры(НоменклатураИБ.Номенклатура);
		Если ИспользоватьХарактеристикиАктуализация <> Неопределено 
			И ИспользоватьХарактеристикиАктуализация <> ИспользоватьХарактеристики Тогда
			ЕстьИзменения = Истина;
			ИспользоватьХарактеристики = ИспользоватьХарактеристикиАктуализация;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из ДанныеДокумента Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда // перезаполнение только для непустых значений
			ДанныеБазы[Элемент.Ключ] = Элемент.Значение;
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		УстановитьСоответствиеНоменклатуры(ДанныеБазы, НоменклатураИБ, ИспользоватьХарактеристики);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки соответствия, найденного по дополнительному идентификатору.
// В случае, если соответствие заслуживает доверия, автоматически создается новая запись регистра с тем же соответствием
//  и новым идентификатором.
// Критерии проверки:
//  1. Сопоставление заполнено (непустая номенклатура ИБ)
//  2. Результаты метода ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам по данным документа и базы совпадают.
//     Иными словами, совпадают все натуральные ключи номенклатуры контрагента.
//
// Параметры:
//  Соответствие - см. СопоставлениеНоменклатурыКонтрагентовСлужебный.НовоеСоответствиеНоменклатуры.
//  ДанныеДокумента - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция СоответствиеАктуально(Соответствие, ДанныеДокумента)
	
	Результат      = Ложь;
	ДанныеБазы     = Соответствие.НоменклатураКонтрагента; 
	НоменклатураИБ = Соответствие.НоменклатураИБ;
	
	Если Не ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	КлючПоБазе      = ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(ДанныеБазы);
	КлючПоДокументу = ИдентификаторНоменклатурыКонтрагентаПоНатуральнымКлючам(ДанныеДокумента);
	
	Результат = (КлючПоБазе = КлючПоДокументу);
	
	Если Результат Тогда
		ИспользоватьХарактеристики = ИспользоватьХарактеристикиНоменклатуры(НоменклатураИБ.Номенклатура);
		УстановитьСоответствиеНоменклатуры(ДанныеБазы, НоменклатураИБ, ИспользоватьХарактеристики);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает данные номенклатуры контрагента по отбору.
// 
// Параметры:
//  Запрос - Запрос - запрос, описывающий создание временной таблицы втОтбор с колонками Владелец и Идентификатор
//  ТаблицаОтбора - ТаблицаЗначений:
//    * Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры; 
//    * Идентификатор - Строка - идентификатор (ключ уникальности) номенклатуры.
// 
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
Функция ДанныеНоменклатурыКонтрагентаПоОтбору(Знач Запрос = Неопределено, Знач ТаблицаОтбора = Неопределено)
	
	Результат = Новый Массив;
	
	Если ТаблицаОтбора <> Неопределено Тогда
		Запрос = ЗапросСозданияТаблицыОтбораДанныхНоменклатурыКонтрагента(ТаблицаОтбора); 
	ИначеЕсли ТипЗнч(Запрос) <> Тип("Запрос") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|" + ТекстЗапросаДанныхНоменклатурыКонтрагента();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеНоменклатурыКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКонтрагента, Выборка);
		Результат.Добавить(ДанныеНоменклатурыКонтрагента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- Локализация

#Область Прочее

Процедура УдалитьНезаполненныеСвойстваСтруктуры(Параметр)
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из Параметр Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	Параметр = Результат;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
