 Процедура ВыполнитьРасчетАвтозаказа() Экспорт
	
	//проверка на рабочий день
	СегодняРабочийДень = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &ДатаПросчета";
	
	Запрос.УстановитьПараметр("ДатаПросчета", НачалоДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
					ИЛИ Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
			СегодняРабочийДень = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СегодняРабочийДень Тогда
		Возврат;
	КонецЕсли;
	
	//график автозаказа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бит_ГрафикАвтозаказСрезПоследних.Склад КАК Склад,
	|	Бит_ГрафикАвтозаказСрезПоследних.ВремяВыполнения КАК ВремяВыполнения,
	|	Бит_ГрафикАвтозаказСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.Бит_ГрафикАвтозаказ.СрезПоследних(, ДеньНедели = &ДеньНедели) КАК Бит_ГрафикАвтозаказСрезПоследних
	|ГДЕ
	|	Бит_ГрафикАвтозаказСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДеньНедели", ДеньНедели(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ТекДата = ТекущаяДата();
	
	ДатаПроверки = Дата(0001,01,01,Час(ТекДата),Минута(ТекДата),Секунда(ТекДата));
	
	Пока Выборка.Следующий() Цикл
		//проверка времени создания автозаказа
		Если ДатаПроверки >= Выборка.ВремяВыполнения И ДатаПроверки < (Выборка.ВремяВыполнения + 15*60) Тогда
			Если ЗначениеЗаполнено(Выборка.Склад) И ЗначениеЗаполнено(Выборка.Организация) Тогда
				СозданиеДокументаТребования(Выборка.Организация,Выборка.Склад,ПодобратьОтделение(Выборка.Организация,Выборка.Склад));
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	

КонецПроцедуры 

Процедура СозданиеДокументаТребования(Организация, Склад, Отделение) Экспорт

	//получение данных 	
	Макет = Отчеты.Бит_ОтчетАвтозаказ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ПолучитьНастройки();
	Для Каждого ВариантОтчета из Макет.ВариантыНастроек Цикл
		Если ВариантОтчета.Имя = "Дополнительный"  Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки);
		КонецЕсли;
	КонецЦикла;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Организация", Организация);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаАктуальности", ТекущаяДата());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийСклад", Склад);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодАнализаРасхода", КоличествоДнейАнализаРасхода());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Макет, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ЕстьЛС = Ложь;
	ЕстьРМ = Ложь;
	МОЛСклада = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Склад, ТекущаяДата()).Ответственный;
	Если ЗначениеЗаполнено(МОЛСклада) Тогда
		МОЛСкладаПользователь = Справочники.Пользователи.НайтиПоНаименованию(МОЛСклада.Наименование);
	Иначе
		МОЛСкладаПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Если Склад.ТипСклада = Перечисления.ТипыСкладов.БольничнаяАптека Тогда
		//создаем документ Заявка на закупку
		ДокЗНЗ = Документы.ЗаявкаНаЗакупку.СоздатьДокумент();
		ДокЗНЗ.Дата = ТекущаяДата();
		ДокЗНЗ.Организация = Организация;
		ДокЗНЗ.СкладОтправитель = сок_Сервер.ПолучитьСкладАптека();
		ДокЗНЗ.ИсточникФинансирования = сок_Сервер.ПолучитьИсточникФинансированияПоУмолчанию();
		ДокЗНЗ.Ответственный = МОЛСкладаПользователь;
		ДокЗНЗ.Автор = МОЛСкладаПользователь;
		ДокЗНЗ.Исполнитель = МОЛСкладаПользователь;
		ДокЗНЗ.Комментарий = "Автозаказ "+Формат(ТекущаяДата(),"ДЛФ=DT");
		ДокЗНЗ.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		ДокЗНЗ.НовыйСпособУчета = Истина;
		ДокЗНЗ.ЖелаемаяДатаПоступления = ТекущаяДата();
		НомерСтроки = 1;
		Для Каждого СтрТЗ Из ТЗ Цикл
			Если ЗначениеЗаполнено(СтрТЗ.Потребность) И ЗначениеЗаполнено(СтрТЗ.ПозицияНоменклатуры) Тогда
				СтрокаТовар = ДокЗНЗ.Товары.Добавить();
				СтрокаТовар.Номенклатура = СтрТЗ.ПозицияНоменклатуры; 
				СтрокаТовар.НоменклатураЗаказа = СтрТЗ.ПозицияНоменклатуры;
				СтрокаТовар.ЕдиницаИзмерения = СтрТЗ.ЕдиницаИзмерения;
				СтрокаТовар.КоличествоВЕдиницахИзмерения = Окр(СтрТЗ.Потребность);
				Если Окр(СтрТЗ.Потребность) < СтрТЗ.Потребность Тогда 
					СтрокаТовар.КоличествоВЕдиницахИзмерения = СтрокаТовар.КоличествоВЕдиницахИзмерения +1;
				КонецЕсли;
				СтрокаТовар.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				СтрокаТовар.КодСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура",ДокЗНЗ.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныЗакупкиСрезПоследних.Регистратор КАК Регистратор,
		|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена,
		|	ЦеныЗакупкиСрезПоследних.Регистратор.Контрагент КАК Поставщик
		|ИЗ
		|	РегистрСведений.ЦеныЗакупки.СрезПоследних(, Номенклатура В (&Номенклатура)) КАК ЦеныЗакупкиСрезПоследних";
		Выборка=Запрос.Выполнить().Выгрузить();
		СуммаДокумента=0;
		Для Каждого Стр из ДокЗНЗ.Товары Цикл    
			Стр.ЕдиницаИзмерения=Стр.Номенклатура.ОсновнаяЕдиницаУчета;
			Стр.Коэффициент=1;
			Стр.Количество=Стр.КоличествоВЕдиницахИзмерения;
			СтрН=Выборка.Найти(Стр.Номенклатура,"Номенклатура");
			Если СтрН=Неопределено Тогда
				Стр.Цена=0;
			Иначе
				Стр.Поставщик = СтрН.Поставщик;
				Стр.Цена=СтрН.Цена*Стр.Коэффициент;
			КонецЕсли;	
			Стр.Сумма=Стр.Цена * Стр.КоличествоВЕдиницахИзмерения;
			Если НЕ Стр.Отменено Тогда
				СуммаДокумента=СуммаДокумента+Стр.Сумма;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ДокЗНЗ.СуммаДокумента=СуммаДокумента Тогда
			ДокЗНЗ.СуммаДокумента=СуммаДокумента;
		КонецЕсли;
		Попытка
			ДокЗНЗ.Записать(РежимЗаписиДокумента.Проведение);
			МассивСсылок.Добавить(ДокЗНЗ.Ссылка);
		Исключение
		КонецПопытки;
		Для Каждого Стр Из ДокЗНЗ.Товары Цикл
			Стр.Требование = ДокЗНЗ.Ссылка;
		КонецЦикла;
		Попытка
			ДокЗНЗ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	ИначеЕсли Склад.ТипСклада = Перечисления.ТипыСкладов.Отделение Тогда
		//создание документов Требование
		ДокТребование = Документы.ТребованиеОтделения.СоздатьДокумент();
		ДокТребование.Дата = ТекущаяДата();
		ДокТребование.Организация = Организация;
		ДокТребование.ВидОперации = Перечисления.ТипыТребованийОтделений.РасходныеМатериалы;
		ДокТребование.СкладПолучатель = Склад;
		ДокТребование.Статус = Перечисления.СтатусыТребованийОтделений.НеСогласован;
		ДокТребование.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		ДокТребование.ПодразделениеОрганизации = сок_Сервер.ПолучитьПодразделениеАптека();
		ДокТребование.Отделение = Отделение;
		ДокТребование.СкладОтправитель = сок_Сервер.ПолучитьСкладАптека();
		ДокТребование.ИсточникФинансирования = сок_Сервер.ПолучитьИсточникФинансированияПоУмолчанию();
		ДокТребование.Ответственный = МОЛСкладаПользователь;
		ДокТребование.Автор = МОЛСкладаПользователь;
		ДокТребование.Комментарий = "Автозаказ "+Формат(ДокТребование.Дата,"ДЛФ=DT"); 
		
		ДокТребованиеЛС = Документы.ТребованиеОтделения.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокТребованиеЛС,ДокТребование);
		ДокТребованиеЛС.ВидОперации = Перечисления.ТипыТребованийОтделений.ЛСТекущие;
		ДокТребованиеЛС.Дата = ТекущаяДата();
		ДокТребованиеЛС.Комментарий = "Автозаказ "+Формат(ДокТребованиеЛС.Дата,"ДЛФ=DT");
		
		Для Каждого СтрТЗ Из ТЗ Цикл
			Если ЗначениеЗаполнено(СтрТЗ.Потребность) И ЗначениеЗаполнено(СтрТЗ.ПозицияНоменклатуры) Тогда
				Если СтрТЗ.ЭтоЛС Тогда
					СтрокаТовар = ДокТребованиеЛС.Товары.Добавить();
					ЕстьЛС = Истина;
				Иначе
					СтрокаТовар = ДокТребование.Товары.Добавить();
					ЕстьРМ = Истина;
				КонецЕсли;
				СтрокаТовар.Номенклатура = СтрТЗ.ПозицияНоменклатуры;
				СтрокаТовар.ЕдиницаИзмерения = СтрТЗ.ЕдиницаИзмерения;
				СтрокаТовар.КоличествоВЕдиницахИзмерения = Окр(СтрТЗ.Потребность);
				Если Окр(СтрТЗ.Потребность) < СтрТЗ.Потребность Тогда 
					СтрокаТовар.КоличествоВЕдиницахИзмерения = СтрокаТовар.КоличествоВЕдиницахИзмерения +1;
				КонецЕсли;
				СтрокаТовар.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьРМ Тогда
			Попытка
				ДокТребование.Записать(РежимЗаписиДокумента.Проведение);
				МассивСсылок.Добавить(ДокТребование.Ссылка);
			Исключение	
			КонецПопытки;
		КонецЕсли;
		Если ЕстьЛС Тогда
			Попытка
				ДокТребованиеЛС.Записать(РежимЗаписиДокумента.Проведение);
				МассивСсылок.Добавить(ДокТребованиеЛС.Ссылка);
			Исключение	
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	//отправка эл.письма МОЛу склада, руководителю аптеки, ответственному за обеспечение склада
	Если МассивСсылок.Количество() > 0 Тогда
		ТелоПисьма = "Созданы документы: "+Символы.ПС;
		НомерПорядок = 1;
		Для Каждого ЭлементМассива Из МассивСсылок ЦИкл
			ТелоПисьма = ТелоПисьма + Строка(НомерПорядок)+". "+ЭлементМассива.Метаданные().Представление()+
							" "+ЭлементМассива.Номер+" от "+Формат(ЭлементМассива.Дата,"ДЛФ=ДВ") + Символы.ПС;
			НомерПорядок = НомерПорядок + 1;
		КонецЦикла;
		ОтправкаEmailПисьмаСозданиеТребования(Склад, ТекущаяДата(), ТелоПисьма);
	КонецЕсли;		
	
КонецПроцедуры

Функция ПодобратьОтделение(Организация, Склад) Экспорт
	
	Отделение = Справочники.ОтделенияОрганизаций.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтделенияОрганизаций.Ссылка КАК Отделение
	|ИЗ
	|	Справочник.ОтделенияОрганизаций КАК ОтделенияОрганизаций
	|ГДЕ
	|	ОтделенияОрганизаций.Владелец = &Организация
	|	И ОтделенияОрганизаций.ОсновнойСклад = &Склад";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Отделение = Справочники.ОтделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Отделение = Выборка.Отделение;
	КонецЦикла;
	Возврат Отделение;
	
КонецФункции

Процедура ОтправкаEmailПисьмаСозданиеТребования(Склад, ДатаСреза, ТелоПисьма)
	
	МассивКому = ПолучитьМассивАдресатов(Склад,,ДатаСреза);
	
	ПараметрыОтправки = Новый Структура;	
	ПараметрыОтправки.Вставить("Кому", 						МассивКому);
	ПараметрыОтправки.Вставить("Тема",						"Уведомление о создании документов (автозаказ)");
	ПараметрыОтправки.Вставить("Тело",						ТелоПисьма);
	ПараметрыОтправки.Вставить("Важность",					ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыОтправки.Вставить("УведомитьОДоставке",		ЛОЖЬ); 
	ПараметрыОтправки.Вставить("УведомитьОПрочтении",		ЛОЖЬ); 
	ПараметрыОтправки.Вставить("ТипТекста",					Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		
	ОтправкаУведомленийПоEmailФоновымЗаданием(ПараметрыОтправки,"ОтправкаУведомленияСозданиеДокументаТребование");

КонецПроцедуры 

Функция ПолучитьМассивАдресатов(СкладОтправитель, СкладПолучатель = Неопределено, ДатаСреза) Экспорт
	
	МассивОтветственные = Новый Массив;
	МассивОтветственные.Добавить(РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(СкладОтправитель, ДатаСреза).Ответственный);
	МассивОтветственные.Добавить(ПолучитьОтветственногоЗаОбеспечениеСклада(СкладОтправитель));
	Если СкладПолучатель <> Неопределено Тогда
		МассивОтветственные.Добавить(РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(СкладПолучатель, ДатаСреза).Ответственный);
		МассивОтветственные.Добавить(ПолучитьОтветственногоЗаОбеспечениеСклада(СкладПолучатель));
	КонецЕсли;
	
	КонтИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОтветственные,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица,ДатаСреза);
	МассивПолучатели = КонтИнформация.ВыгрузитьКолонку("Представление");
	МассивПолучатели.Добавить(ПолучитьEmailРуководителяАптеки(ДатаСреза));
	
	//убираем повторные эл. адреса
	Получатели = Новый Массив;
	Для Каждого Элемент Из МассивПолучатели Цикл
		Если Получатели.Найти(Элемент) = Неопределено И ЗначениеЗаполнено(Элемент) Тогда
			Получатели.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	МассивКому = Новый Массив;
	Для Каждого ЭлементМассива Из Получатели Цикл
		МассивКому.Добавить(Новый Структура("Адрес, Представление",ЭлементМассива,ЭлементМассива));
	КонецЦикла;
	Возврат МассивКому;
	
КонецФункции 

Функция ПолучитьОтветственногоЗаОбеспечениеСклада(Склад) Экспорт
	 
	 Ответственный = Справочники.ФизическиеЛица.ПустаяСсылка();
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	СкладыДопРеквизиты.Значение КАК ОтветственныйЗаОбеспечение
	 |ИЗ
	 |	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДопРеквизиты
	 |ГДЕ
	 |	СкладыДопРеквизиты.Ссылка = &Склад
	 |	И СкладыДопРеквизиты.Свойство.Имя = ""ОтветственныйЗаОбеспечение""";
	 
	 Запрос.УстановитьПараметр("Склад", Склад);	
	 РезультатЗапроса = Запрос.Выполнить();
	 Выборка = РезультатЗапроса.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
		 Ответственный = Выборка.ОтветственныйЗаОбеспечение;
	 КонецЕсли;
	 
	 Возврат Ответственный;
	
 КонецФункции  

Функция ПолучитьEmailРуководителяАптеки(Дата) Экспорт
	 
	 РуководительАптекиEmail = "";
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ 
	 |	Бит_РуководительАптекиСрезПоследних.EmailРуководителяАптеки КАК EmailРуководителяАптеки
	 |ИЗ
	 |	РегистрСведений.Бит_РуководительАптеки.СрезПоследних(&Период, ) КАК Бит_РуководительАптекиСрезПоследних";
	 Запрос.УстановитьПараметр("Период",Дата);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 Выборка = РезультатЗапроса.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
	     РуководительАптекиEmail = Выборка.EmailРуководителяАптеки;
	 КонецЕсли;
	 
	 Возврат РуководительАптекиEmail;
	
 КонецФункции  
  
Процедура ОтправкаУведомленийПоEmailФоновымЗаданием(ПараметрыОтправки, Событие = "ОтправкаУведомленияУсловиеПоТемпературе") Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	Если РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна() Тогда
		УчЗаписьПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(УчЗаписьПочты);
		ПараметрыВыполнения.Добавить(ПараметрыОтправки);
		ФоновыеЗадания.Выполнить("РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение",ПараметрыВыполнения,УникальныйИдентификатор);
		ЗаписьЖурналаРегистрации(Событие,УровеньЖурналаРегистрации.Информация,,,
		"Электронное письмо успешно отправлено");
	Иначе
		ЗаписьЖурналаРегистрации(Событие,УровеньЖурналаРегистрации.Ошибка,,,
		"Ошибка при отправке электронного письма: системная учетная запись не доступна!");
	КонецЕсли;
		
КонецПроцедуры 

Функция ПолучитьСтрокуПринятыеМеры(ДокументСсылка) Экспорт
	
	ТекстТЧ = "";
	
	Для Каждого СтрокаТЧ Из ДокументСсылка.ПринятыеМеры Цикл
		ТекстТЧ = ТекстТЧ + Формат(СтрокаТЧ.ДатаМероприятия,"ДФ=dd.MM.yyyy") + " - "+СтрокаТЧ.Описание;
		ТекстТЧ = ТекстТЧ + Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстТЧ;
	
КонецФункции

Функция ПроверитьИнформациюОбИзъятииЗабракованныхСерий(ДокументСсылка) Экспорт
	
	СтруктураОтвет = Новый Структура("ОбнаруженоИзъятие, МассивЗабракованных",Ложь, Новый Массив);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТовары.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЗабракованныеСерии.ВсеСерии
		|			ТОГДА ""Все серии""
		|		ИНАЧЕ ЗабракованныеСерии.Наименование
		|	КОНЕЦ КАК ЗабракованнаяСерия,
		|	ЗабракованныеСерии.ДатаПоследнегоПриказа КАК ДатаПриказа,
		|	ЗабракованныеСерии.НомерПоследнегоПриказа КАК НомерПриказа,
		|	ЗабракованныеСерии.Ссылка КАК ЗабраковкаПриказ
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗабракованныеСерии КАК ЗабракованныеСерии
		|		ПО ПоступлениеТоваровТовары.Номенклатура = ЗабракованныеСерии.Номенклатура
		|ГДЕ
		|	ПоступлениеТоваровТовары.Ссылка = &ДокументСсылка
		|	И ЗабракованныеСерии.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗабраковкиСерий.Действует)
		|	И (СТРНАЙТИ(ПоступлениеТоваровТовары.СерияНоменклатуры.Номер, ЗабракованныеСерии.Наименование) > 0
		|			ИЛИ ЗабракованныеСерии.ВсеСерии)";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураОтвет.ОбнаруженоИзъятие = Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПроверкаСерии = Новый Структура("Номенклатура,ЗабракованнаяСерия,СерияНоменклатуры,ДатаПриказа,НомерПриказа,ЗабраковкаПриказ");
		ЗаполнитьЗначенияСвойств(СтруктураПроверкаСерии, Выборка);
		СтруктураОтвет.МассивЗабракованных.Добавить(СтруктураПроверкаСерии);
	КонецЦикла;
	
	Возврат СтруктураОтвет;
	
КонецФункции

Функция ПолучитьСтрокуНомерДатаДокумента(ДокументСсылка) Экспорт
	
	Текст = "";
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Текст = ДокументСсылка.Номер + "; "+ Формат(ДокументСсылка.Дата,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьСтрокуСведенияЭП(ДокументСсылка) Экспорт
	
	ТекстТЧ = "";
	
	Если ДокументСсылка.ПодписанЭП Тогда		
		Выборка = ЭлектроннаяПодписьБольничнаяАптека.ПолучитьЭлектронныеПодписи(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			ТекстТЧ = ТекстТЧ + "Подписан: "+Строка(Выборка.КомуВыданСертификат) + " ("+ Формат(Выборка.ДатаПодписи,"ДФ=dd.MM.yyyy")+")";
			ТекстТЧ = ТекстТЧ + Символы.ПС;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ТекстТЧ;
	
КонецФункции  

Функция ПолучитьСтрокуИнформацияИзъятие(ДокументСсылка) Экспорт
	
	ТекстТЧ = "";
	
	Для Каждого СтрокаТЧ Из ДокументСсылка.РезультатПроверкиИзъятия Цикл
		ТекстТЧ = ТекстТЧ + Строка(СтрокаТЧ.Номенклатура.Наименование) + ", серия: "+ Строка(СтрокаТЧ.СерияНоменклатуры.Номер) +
						", срок годности: "+Формат(СтрокаТЧ.СерияНоменклатуры.ГоденДо,"ДФ=dd.MM.yyyy");
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерПриказа) Тогда
				ТекстТЧ = ТекстТЧ + "; " + Строка(СтрокаТЧ.НомерПриказа);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.ДатаПриказа) Тогда
				ТекстТЧ = ТекстТЧ + "; "+Формат(СтрокаТЧ.ДатаПриказа,"ДФ=dd.MM.yyyy");
			КонецЕсли;
		ТекстТЧ = ТекстТЧ + Символы.ПС;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстТЧ) Тогда
		ТекстТЧ = "Отсутствует";
	КонецЕсли;
	
	Возврат ТекстТЧ;
	
КонецФункции

Функция КоличествоДнейАнализаРасхода() Экспорт
	
	КоличествоДней = Константы.сок_ПериодАнализаРасхода.Получить();
	Возврат ?(КоличествоДней = 0, 180, КоличествоДней);
	
КонецФункции