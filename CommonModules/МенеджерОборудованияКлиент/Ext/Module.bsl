#Область ПрограммныйИнтерфейс

#Область Системные

// Функция, вызываемая перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
КонецПроцедуры

// Функция, вызываемая при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
#Если Не ВебКлиент Тогда
	ПереустановитьПомеченныеПоставляемыеДрайверы();
	ПодключениеСистемыВзаимодействия(); 
#КонецЕсли

КонецПроцедуры

// Процедура, вызываемая при начале работы системы, выполняет подготовку данных механизма.
//
Процедура ПередЗавершениемРаботыСистемы() Экспорт
	
КонецПроцедуры

// Производит получение события от устройства.
// 
// Параметры:
//  ОписаниеСобытия - Структура:
//   * Источник - Строка - Источник внешнего события.
//   * Событие - Строка - Наименование события.
//   * Данные - Строка - Данные для события.
//  ОписаниеОшибки - Строка - описание ошибки
//
// Возвращаемое значение:
//  Структура.
//  Неопределено.
//
Функция ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	// Поиск обработчика события
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИДУстройства = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИДУстройства) И Подключение.ИменаСобытий.Количество() > 0) Тогда
			// Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				// Обрабатываем сообщение
				РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытие(ОбъектДрайвера, Подключение, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные);
				// Оповещаем 
				Если РезультатОбработки.Результат Тогда 
					Результат = Новый Структура();
					Результат.Вставить("ИмяСобытия", РезультатОбработки.Событие);
					Результат.Вставить("Параметр",   РезультатОбработки.Данные);
					Результат.Вставить("Источник",   "ПодключаемоеОборудование");
					Возврат Результат;
				Иначе
					ОписаниеОшибки = ОписаниеСобытия.Событие;
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит обработку данных события, полученных от клиента.
// 
// Параметры:
//  ОписаниеСобытия - Структура:
//   * Источник - Строка - Источник внешнего события.
//   * Событие - Строка - Наименование события.
//   * Данные - Строка - Данные для события.
//  ОписаниеОшибки - Строка - описание ошибки
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	// Поиск обработчика события
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИДУстройства = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИДУстройства) И Подключение.ИменаСобытий.Количество() > 0) Тогда
			// Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				// Обрабатываем сообщение
				РезультатОбработки = ПодключаемоеОборудованиеДрайверКлиент.ОбработатьСобытие(ОбъектДрайвера, Подключение, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные);
				// Оповещаем 
				Если РезультатОбработки.Результат Тогда 
					Оповестить(РезультатОбработки.Событие, РезультатОбработки.Данные, "ПодключаемоеОборудование");
				Иначе
					Результат = Ложь;
					ОписаниеОшибки = ОписаниеСобытия.Событие;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры подключения устройства.
// 
// Параметры:
//  ДанныеУстройства - Неопределено, Произвольный, Структура - Данные устройства
// 
// Возвращаемое значение:
//  Структура - Параметры подключения:
//   * Наименование - Строка.
//   * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования.
//   * ПодключениеИзМакета - Булево.
//   * ПодключениеЛокальноПоИдентификатору - Булево. 
//   * ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование.
//   * ВерсияДрайвера - Строка.
//   * ИмяМакетаДрайвера - Строка.
//   * РевизияИнтерфейса - Строка.
//   * ШиринаСтроки - Строка.
//   * ПечатьКвитанцийНаТерминале - Булево. 
//   * КороткиеСлипЧеки - Булево.
//   * ВыдачиНаличныхДенежныхСредств - Булево. 
//   * ОплатаЭлектроннымиСертификатами - Булево.
//   * СтолбцовНаДисплее - Число.
//   * СтрокНаДисплее - Число. 
//   * ДисплейОтображаетТекст - Булево.
//   * ДисплейОтображаетГрафику - Булево.
//   * ДисплейОтображаетQRКод - Булево.
//   * ИдентификаторУстройства - УникальныйИдентификатор.
//   * ОбъектДрайвера - Неопределено -
//   * Параметры - Неопределено -
//   * ОбработчикДрайвера - Неопределено -
//   * Клиенты - Массив из СправочникСсылка.РабочиеМеста -
//   * Ссылка - СправочникСсылка.ПодключаемоеОборудование.
//   * СетевоеОборудование - Булево. 
//   * КоличествоПодключенных - Число -
//   * ИменаСобытий - Массив Из Строка -
//   * ИДУстройства - Строка.
//
Функция ПараметрыПодключенияУстройства(ДанныеУстройства) Экспорт
	
	Подключение = МенеджерОборудованияКлиентСервер.ПараметрыПодключенияДрайвера(ДанныеУстройства);
	Подключение.Вставить("Клиенты", Новый Массив());
	Подключение.Вставить("Ссылка"                  , ДанныеУстройства.Ссылка);
	Подключение.Вставить("Параметры"               , ДанныеУстройства.Параметры);
	Подключение.Вставить("СетевоеОборудование"     , ДанныеУстройства.СетевоеОборудование);
	Подключение.Вставить("КоличествоПодключенных"  , 0);
	Подключение.Вставить("ИменаСобытий"            , Новый Массив());
	Подключение.Вставить("ИДУстройства"            , "");
#Если ВебКлиент Тогда
	Подключение.ОбработчикДрайвера = ПодключаемоеОборудованиеДрайверКлиент; 
#Иначе
	Подключение.ОбработчикДрайвера = ПодключаемоеОборудованиеДрайверСинхронноКлиент; 
#КонецЕсли
	Возврат Подключение;
	
КонецФункции

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата().
//
// Возвращаемое значение:
//  Дата.
//
Функция ДатаСеанса() Экспорт
	
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	Если ЗначениеЗаполнено(ДатаСеанса) Тогда
		Возврат ДатаСеанса;
	Иначе 
		Возврат МенеджерОборудованияВызовСервера.ДатаСеанса();
	КонецЕсли;
	
КонецФункции

// Событие устройств ввода новый формат.
// 
// Возвращаемое значение:
//  Булево - Событие устройств ввода новый формат
//
Функция СобытиеУстройствВводаНовыйФормат() Экспорт
	
	СтандартнаяОбработка = Истина;
	НовыйФормат = Ложь;
	МенеджерОборудованияКлиентПереопределяемый.СобытиеУстройствВводаНовыйФормат(НовыйФормат, СтандартнаяОбработка);
	Результат = ?(Не СтандартнаяОбработка, НовыйФормат, Ложь); 
	
	Возврат Результат;
	
КонецФункции

// Возвращает необходимость печати слип чека алкогольной продукции. 
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПечатьСлипЧекаАлкогольнойПродукции() Экспорт
	
	Результат = Ложь;
	ПечатьСлипЧека = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентПереопределяемый.ПечатьСлипЧекаАлкогольнойПродукции(ПечатьСлипЧека, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ПечатьСлипЧека);
	Возврат Результат; 
	
КонецФункции                               

// Возвращает необходимость печати слип чека эквайринговой операции. 
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПечатьСлипЧекаЭквайринговойОперации() Экспорт
	
	ПечатьСлипЧека = Истина;      
	ПолныйСлипЧек  = Истина; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентПереопределяемый.ПечатьСлипЧекаЭквайринговойОперации(ПечатьСлипЧека, ПолныйСлипЧек, СтандартнаяОбработка);
	
	Результат = Новый Структура();
	Результат.Вставить("ПечатьСлипЧека", ?(СтандартнаяОбработка, Истина, ПечатьСлипЧека)); 
	Результат.Вставить("ПолныйСлипЧек" , ?(СтандартнаяОбработка, Истина, ПолныйСлипЧек));
	
	Возврат Результат; 
	
КонецФункции 

// Возвращает необходимость вывода QR-кода чека на дисплей покупателя после фискализации. 
// 
// Возвращаемое значение:
//  Булево.
//
Функция ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации() Экспорт
	
	Результат = Истина;
	ВыводQRКодаЧека = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентПереопределяемый.ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации(ВыводQRКодаЧека, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ВыводQRКодаЧека);
	Возврат Результат; 
	
КонецФункции

#Если Не ВебКлиент Тогда

// Установить или переустановить драйверы помеченные флагами.
//
Процедура ПереустановитьПомеченныеПоставляемыеДрайверы() Экспорт
	
	ПараметрыРаботыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	Контекст = Новый Структура();
	Контекст.Вставить("МакетыДляПереустановки", Новый Массив);
	Для Каждого ИмяМакетаДрайвера Из ПараметрыРаботыКлиента.ИменаМакетовДляПереустановки Цикл
		Контекст.МакетыДляПереустановки.Добавить(ИмяМакетаДрайвера);
	КонецЦикла;
	
	// Начать рекурсивную установку компонентов из макетов
	Результат = РезультатУстановкиКомпоненты();
	Результат.Установлено = Истина;
	ОповещениеУстановки   = Новый ОписаниеОповещения("УстановитьКомпонентуИзМакета", ЭтотОбъект, Контекст);
	ВыполнитьОбработкуОповещения(ОповещениеУстановки, Результат)
	
КонецПроцедуры

// Функция читает корневой элемент XML.
//
// Параметры:
//  СтрокаXML - Строка - XML строка.
//
// Возвращаемое значение:
//  Структура:
//   * ЭлементXML - Строка.
//
Функция ПрочитатьКорневойЭлементXML(СтрокаXML) Экспорт
	
	Результат = Новый Структура();
	Если Не ПустаяСтрока(СтрокаXML) Тогда
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Результат.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Возвращает глобальные переменные подключаемого оборудования
//
// Возвращаемое значение:
//  Структура:
//   * ПараметрыПодключенияПО - Массив из Структура
//   * ДрайверыОборудования - Соответствие 
//   * ПоследнийСлипЧек - Строка
//   * ЗавершениеРаботыСистемы - Булево
//   * ДанныеОчереди - Неопределено
//   * ФискальныеУстройства - Массив из Структура
//   * ПроверкиКодаМаркировки - Массив из Структура
//
Функция ПодключаемоеОборудование() Экспорт
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие();
	КонецЕсли;
	
	ПодключаемоеОборудование = ПараметрыПриложения.Получить("БПО.ПодключаемоеОборудование");
	
	Если ПодключаемоеОборудование = Неопределено Тогда
		ПодключаемоеОборудование = Новый Структура();
		ПодключаемоеОборудование.Вставить("ПараметрыПодключенияПО" , Новый Массив());
		ПодключаемоеОборудование.Вставить("ДрайверыОборудования"   , Новый Соответствие());
		ПодключаемоеОборудование.Вставить("ПоследнийСлипЧек"       , "");
		ПодключаемоеОборудование.Вставить("ЗавершениеРаботыСистемы", Ложь);
		ПодключаемоеОборудование.Вставить("ДанныеОчереди"          , Неопределено);
		ПодключаемоеОборудование.Вставить("ФискальныеУстройства"   , Новый Массив());
		ПодключаемоеОборудование.Вставить("ПроверкиКодаМаркировки" , Новый Массив());
		ПараметрыПриложения.Вставить("БПО.ПодключаемоеОборудование", ПодключаемоеОборудование);
	КонецЕсли;
	
	Возврат ПодключаемоеОборудование;
	
КонецФункции

// Возвращает значения параметров, необходимых для работы клиентского кода конфигурации
// без дополнительных серверных вызовов.
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура:
//    * ИдентификаторКлиента - Строка - (входящий) идентификатор рабочего места клиента
//    * ИменаМакетовДляПереустановки - Массив из Строка - Имена макетов для переустановки внешних компонент
//    * ИдентификаторОбсужденияРаспределеннойФискализации - ИдентификаторОбсужденияСистемыВзаимодействия -
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Если ИспользуетсяБСП() Тогда
		МодульСтандартныеПодсистемыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СтандартныеПодсистемыКлиент");
		ПараметрыРаботыКлиента = МодульСтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
		Если ПараметрыРаботыКлиента.Свойство("ИдентификаторКлиентаБПО") Тогда
			Возврат ПараметрыРаботыКлиента;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МенеджерОборудованияКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
КонецФункции

// Выполняет обработку внешнего события, вызывается из глобального модуля
//
// Параметры:
//  Источник - Строка.
//  Событие - Строка.
//  Данные - Строка.
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт

	ОписаниеОшибки  = "";
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	// Передать на обработку данные.
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Не Результат Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РабочееМесто

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = РабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		
		МассивРабочихМест = НайтиРабочиеМестаПоИдентификатору(МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста());
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста();
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат И РабочееМесто <> РабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура для выбора рабочего места текущего сеанса.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места.
// 
// Параметры:
//  ОбработкаОповещения - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - Строка - идентификатор клиента
//
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места.
// 
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  Параметры - Структура - параметры операции.
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место.
// 
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место клиента.
//
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Возвращает имя компьютера клиента.
// При первом обращении получает имя компьютера из переменной сеанса.
//
// Возвращаемое значение:
//  СправочникСсылка.РабочиеМеста
//
Функция РабочееМестоКлиента() Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	
КонецФункции

// Возвращает имя компьютера клиента.
// При первом обращении получает имя компьютера из переменной сеанса.
//
// Параметры:
//  ИдентификаторКлиента - Строка - идентификатор клиента для рабочего места
//
// Возвращаемое значение:
//  Массив.
Функция НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента) Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента);
	
КонецФункции

// Открытие формы списка рабочих мест.
// 
// Параметры:
//  ПараметрКоманды - Структура - параметры команды.
//  ПараметрыВыполненияКоманды - Структура:
//   *Источник - ФормаКлиентскогоПриложения - форма родитель.
//   *Уникальность - УникальныйИдентификатор - уникальный идентификатор формы.
//   *Окно - ОкноКлиентскогоПриложения - окно приложения.
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыДрайвера

// Поиск по идентификатору подключенного ранее устройства. 
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
// Возвращаемое значение:
//  СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПодключенноеУстройство(Идентификатор) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	СписокПодключений = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенноеУстройство = Неопределено;
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
// Параметры:
//  ТипПО - ПеречислениеСсылка.ТипыПодключаемогоОборудования - тип подключаемого оборудования.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПодключенныеУстройства(ТипПО) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	СписокПодключений = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенныеУстройства = Новый Массив();
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ТипОборудования = ТипПО Тогда
			ПодключенныеУстройства.Добавить(Подключение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
// Параметры:
//  ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПодключенныеУстройстваПоИдентификаторуОбъекта(ИдентификаторОбъекта) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	СписокПодключений = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенныеУстройства = Новый Массив();
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ИдентификаторОбъекта = ИдентификаторОбъекта Тогда
			ПодключенныеУстройства.Добавить(Подключение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Установить компоненту подключения оборудования.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
Процедура УстановитьДрайверОборудования(ОповещениеПриЗавершении, ИдентификаторДрайвера) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.УстановитьДрайверОборудования";
	ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Оповещение = Новый ОписаниеОповещения("УстановитьДрайверОборудованияПослеУстановки", ЭтотОбъект, ПараметрыКоманды);
	
	ДанныеДрайвера = ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	Если НЕ ЗначениеЗаполнено(ДанныеДрайвера) Тогда
		ОписаниеОшибки = НСтр("ru = 'Драйвер не найден.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Для продолжения работы требуется установка внешней компоненты ""%1"".'"); 
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеДрайвера.Наименование);  
	
	Если ДанныеДрайвера.ПодключениеИзМакета Тогда
		Если Не ДанныеДрайвера.МакетДоступен Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Макет драйвера ""%1"" не найден.'"), ДанныеДрайвера.ИмяМакетаДрайвера); 
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ДопустимаУстановкаКомпоненты(ДанныеДрайвера.ИмяМакетаДрайвера) Тогда
				ПараметрыУстановки = ОбщегоНазначенияКлиент.ПараметрыУстановкиКомпоненты();
				ПараметрыУстановки.ТекстПояснения = ТекстСообщения;
				ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(Оповещение, ДанныеДрайвера.ИмяМакетаДрайвера, ПараметрыУстановки);
			Иначе
				ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Для компоненты %1 не предусмотрена работа в web-клиенте.'"), ДанныеДрайвера.Наименование);
				РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыУстановки = ВнешниеКомпонентыКлиент.ПараметрыУстановки();
		ПараметрыУстановки.ТекстПояснения = ТекстСообщения; 
		ВнешниеКомпонентыКлиент.УстановитьКомпоненту(Оповещение, ДанныеДрайвера.ИдентификаторОбъекта, ДанныеДрайвера.ВерсияДрайвера, ПараметрыУстановки);
	КонецЕсли;
	
КонецПроцедуры

// Завершение установки драйвера.
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
// 
Процедура УстановитьДрайверОборудованияПослеУстановки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат.Установлено, Результат.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		Если НЕ Результат.Установлено И Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает описание драйвера.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//  ДанныеДрайвера - см. Справочники.ДрайверыОборудования.ДанныеДрайвераОборудования - данные драйвера оборудования.
//
Процедура НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, ИдентификаторДрайвера = Неопределено, ДанныеДрайвера = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ПолучениеОписанияДрайвера";
	ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли
	
	Если ИдентификаторДрайвера <> Неопределено Тогда
		ДанныеДрайвера = МенеджерОборудованияВызовСервера.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	КонецЕсли;
	
	НовоеПодключение = МенеджерОборудованияКлиентСервер.ПараметрыПодключенияДрайвера(ДанныеДрайвера);
	ПодключаемоеОборудованиеДрайверКлиент.НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, НовоеПодключение);
	
КонецПроцедуры

// Получает описание оборудования.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторОборудования - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ДанныеОборудования - см. МенеджерОборудованияВызовСервера.ДанныеУстройства - данные драйвера оборудования.
//
Процедура НачатьПолучениеОписанияОборудования(ОповещениеПриЗавершении, ИдентификаторОборудования = Неопределено, ДанныеОборудования = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ПолучениеОписанияОборудования";
	ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли
	
	Если ИдентификаторОборудования <> Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторОборудования);
	КонецЕсли;
	
	НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
	Если Не ПустаяСтрока(ДанныеОборудования.ИдентификаторОбъекта) Тогда
		СписокПодключений = ПодключенныеУстройстваПоИдентификаторуОбъекта(ДанныеОборудования.ИдентификаторОбъекта);
		НовоеПодключение.КоличествоПодключенных = СписокПодключений.Количество();
	КонецЕсли;
	
	ПодключаемоеОборудованиеДрайверКлиент.НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, НовоеПодключение);
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ТестУстройства";
	ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства);
		НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
		НовоеПодключение.Параметры = ?(ПараметрыУстройства = Неопределено, ДанныеОборудования.Параметры, ПараметрыУстройства);
		ПодключаемоеОборудованиеДрайверКлиент.НачатьТестУстройства(ОповещениеПриЗавершении, НовоеПодключение, Неопределено);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//  ПараметрыВыполнения - Структура - параметры выполнения команды.
// 
Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ВыполнениеДополнительнойКоманды";
	ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства);
		НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
		НовоеПодключение.Параметры = ?(ПараметрыУстройства = Неопределено, ДанныеОборудования.Параметры, ПараметрыУстройства);
		ПодключаемоеОборудованиеДрайверКлиент.НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, НовоеПодключение, ПараметрыВыполнения);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру с данными драйвера.
//
// Параметры:
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
// Возвращаемое значение:
//  Структура.
Функция ДанныеДрайвераОборудования(ИдентификаторДрайвера) Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	
КонецФункции

#КонецОбласти

#Область ВыбратьУстройство

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  ОповещениеВыбора - ОписаниеОповещения - событие описания оповещения.
//  Отбор - см. МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор
//        - Массив
//        - Строка - тип оборудования для выбора устройства.
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
Процедура ВыбратьУстройство(ОповещениеВыбора, Отбор, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
		
	Если ТипЗнч(Отбор) <> Тип("Структура") Тогда
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = Отбор;
	ИначеЕсли Отбор.Свойство("ТипыПО") = Неопределено Тогда
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = Отбор;
	Иначе
		СписокОборудованияОтбор = Отбор;
	КонецЕсли;
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОборудованияОтбор);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Идентификатор);
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеВыбора"   , ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбрано" , СообщениеНеВыбрано);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора устройства.
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура ВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Параметры.СообщениеНеВыбрано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	Иначе
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Идентификатор);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеОтключенияОборудования

// Производит подключение доступного оборудования по списку типов ПО
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для подключения устройств.
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, СтруктураТиповПО);
	 
 КонецПроцедуры

// Начать подключать одиночный экземпляр устройства определяемый идентификатором.
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Начать подключения устройства.
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ТипыПО - Структура, Массив, Строка - тип оборудования для выбора устройства.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  СетевоеОборудование - Булево - использовать сетевое оборудование при подключении.
//
Процедура НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, СетевоеОборудование = Истина) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ПодключениеОборудования";
	УИДЗамера = ЗамерВремениБПО(КлючеваяОперация);     
#Иначе
	УИДЗамера = Неопределено;
#КонецЕсли
	
	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Если ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	#Если Не МобильноеПриложениеКлиент Тогда 
		// Замер производительности
		ЗавершитьЗамерВремениБПО(УИДЗамера, Истина);
	#КонецЕсли
		Возврат;
	КонецЕсли;
	
	
	ОборудованиеДляПодключения = Новый Массив();  
	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();   
	СписокОтбор.ТипыПО              = ТипыПО;
	СписокОтбор.Идентификатор       = ИдентификаторУстройства;
	СписокОтбор.СетевоеОборудование = СетевоеОборудование;
	СписокОборудования = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);
	
	Если СписокОборудования.Количество() > 0 Тогда
		
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(Устройство.Ссылка);
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(Устройство);
				
				Если Устройство.СетевоеОборудование И НЕ Устройство.ДоступноТекущемуПользователю Тогда
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Нет прав на использование для текущего пользователя.'");
						РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				Если НовоеПодключение.ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось подключить обработчик.
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера'");
						РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				Иначе
					НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
					НовоеПодключение.КоличествоПодключенных = 1; 
					ОборудованиеДляПодключения.Добавить(НовоеПодключение);
				КонецЕсли;
				
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
				Если ОповещениеПриПодключении <> Неопределено Тогда
					РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
					РезультатВыполнения.ИдентификаторУстройства = Устройство.Ссылка;
					ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОборудованиеДляПодключения.Количество() > 0 Тогда 
			ПараметрыПодключенияСписка = Новый Структура();  
			ПараметрыПодключенияСписка.Вставить("ОборудованиеДляПодключения", ОборудованиеДляПодключения);
			ПараметрыПодключенияСписка.Вставить("ОповещениеПриПодключении", ОповещениеПриПодключении);
			ПараметрыПодключенияСписка.Вставить("ТекущиеОборудование", 0);     
			ПараметрыПодключенияСписка.Вставить("ИдентификаторУстройства");  
			ПараметрыПодключенияСписка.Вставить("НовоеПодключение");  
			НачатьПодключениеОборудования_ОборудованиеДляПодключенияЗавершение(Неопределено, ПараметрыПодключенияСписка);       
		КонецЕсли;
		
	ИначеЕсли ИдентификаторУстройства <> Неопределено И ОповещениеПриПодключении <> Неопределено Тогда
		ОписаниеОшибки = 
			НСтр("ru='Устройство отсутствует на текущем рабочем месте и не может использоваться для подключения. Укажите другое устройство.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Нет доступного оборудования для подключения.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	КонецЕсли;
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	ЗавершитьЗамерВремениБПО(УИДЗамера, Истина);
#КонецЕсли
	
КонецПроцедуры

// Завершение подключения оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьПодключениеОборудования_ОборудованиеДляПодключенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения = Неопределено Тогда     
		Если РезультатВыполнения.Результат Тогда
			ПодключаемоеОборудование = ПодключаемоеОборудование();
			ПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(Параметры.НовоеПодключение);
			Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
				РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Параметры.ИдентификаторУстройства);
				РезультатВыполнения.ПодключенноеУстройство = Параметры.НовоеПодключение;
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
			КонецЕсли;
		Иначе
			// Сообщим пользователю о том, что не удалось подключить устройство.
			Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
				ОписаниеОшибки = СтрШаблон(НСтр("ru='Не удалось подключить устройство (%1): %2'"), Параметры.ИдентификаторУстройства, РезультатВыполнения.ОписаниеОшибки);
				РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОборудованиеДляПодключения = Параметры.ОборудованиеДляПодключения;
	Если Параметры.ТекущиеОборудование < ОборудованиеДляПодключения.Количество() Тогда
		НовоеПодключение = ОборудованиеДляПодключения[Параметры.ТекущиеОборудование];    
		Параметры.ИдентификаторУстройства = НовоеПодключение.ИдентификаторУстройства;
		Параметры.НовоеПодключение = НовоеПодключение; 
		Параметры.ТекущиеОборудование = Параметры.ТекущиеОборудование + 1;        
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудования_ОборудованиеДляПодключенияЗавершение", ЭтотОбъект, Параметры);
		НовоеПодключение.ОбработчикДрайвера.НачатьПодключениеУстройства(Оповещение, НовоеПодключение);
	КонецЕсли;
	
КонецПроцедуры


// Завершение подключения оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьПодключениеОборудования_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПодключаемоеОборудование = ПодключаемоеОборудование();
		ПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(Параметры.НовоеПодключение);
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, , Параметры.ИдентификаторУстройства);
			РезультатВыполнения.ПодключенноеУстройство  = Параметры.НовоеПодключение;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Не удалось подключить устройство (%1): %2'"), Параметры.ИдентификаторУстройства, РезультатВыполнения.ОписаниеОшибки);
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для отключения устройств.
//
Процедура НачатьОтключениеОборудованияПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для отключения устройств.
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

// Начать отключать устройства определенное идентификатором.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Функция подключает устройства по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив, Строка - тип оборудования для отключения устройств.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//
Процедура НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Если ПодключаемоеОборудование = Неопределено Тогда
		// БСП может вызывать эту процедуру из ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы()
		// до того как будет вызвана ПередНачаломРаботыСистемы()
		Возврат;
	КонецЕсли;
	             
	Если ПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = ПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = ПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			
			Если КлиентПодключения <> Неопределено  
				И (ТипыПО = Неопределено Или ТипыПО.Найти(ПодключенноеУстройство.ТипОборудования) <> Неопределено)
				И (ИдентификаторУстройства = Неопределено Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства) Тогда
				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
					Если ОбработчикДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось подключить обработчик.
						Если ОповещениеПриОтключении <> Неопределено Тогда
							ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
							РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
							ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
						КонецЕсли;
					Иначе
						ПараметрыКоманды = Новый Структура();
						ПараметрыКоманды.Вставить("ПодключенноеУстройство",  ПодключенноеУстройство);
						ПараметрыКоманды.Вставить("ОповещениеПриОтключении", ОповещениеПриОтключении);
						Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудование_Завершение", ЭтотОбъект, ПараметрыКоманды);
						ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ПодключенноеУстройство);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

// Завершение отключения оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура:
//   * ПодключенноеУстройство - Структура:
//      * Наименование - Строка - наименование устройства
//   * ОповещениеПриОтключении - ОписаниеОповещения
// 
Процедура НачатьОтключениеОборудование_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПодключаемоеОборудование = ПодключаемоеОборудование();
		Параметры.ПодключенноеУстройство.КоличествоПодключенных = 0;
		НомерСтрокиМассива = ПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(Параметры.ПодключенноеУстройство);
		Если НомерСтрокиМассива <> Неопределено Тогда
			ПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
		КонецЕсли;
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru='При отключении устройства ""%1"" произошла ошибка.'"), Параметры.ПодключенноеУстройство.Наименование);
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//
Процедура НачатьОтключениеВсегоОборудования(ОповещениеПриОтключении = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Если ПодключаемоеОборудование = Неопределено Тогда
		// БСП может вызывать эту процедуру из ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы()
		// до того как будет вызвана ПередНачаломРаботыСистемы()
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодключенноеУстройство Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
		Если НЕ ОбработчикДрайвера = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("НачатьОтключениеВсегоОборудования_Завершение", МенеджерОборудованияКлиент);
			ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ПодключенноеУстройство);
			ПодключенноеУстройство.КоличествоПодключенных = 0;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПодключенныхКлиентов = 0;
	Для Каждого ПодключенноеУстройство Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		КоличествоПодключенныхКлиентов = КоличествоПодключенныхКлиентов + ПодключенноеУстройство.КоличествоПодключенных;
	КонецЦикла;
	
	ПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
КонецПроцедуры

// Завершение отключения всего оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьОтключениеВсегоОборудования_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При отключении оборудования произошла ошибка: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает подключено ли оборудование.
// 
// Параметры: 
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - ИдентификаторУстройства.
// 
// Возвращаемое значение:
//  Булево - Устройство подключено
//
Функция УстройствоПодключено(ИдентификаторУстройства) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.Ссылка = ИдентификаторУстройства Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	ОповещениеПриПодключении - ОписаниеОповещения - оповещение при подключении.
//	Форма - ФормаКлиентскогоПриложения - открываемая форма.
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка - содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда
			
		Если ОповещениеПриПодключении = Неопределено Тогда
			ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
		КонецЕсли;
		
	#Если Не МобильноеПриложениеКлиент Тогда 
		// Замер производительности
		КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ПодключениеОборудованиеПриОткрытииФормы";
		УИДЗамера = ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриПодключении);
	#КонецЕсли  
	
		НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, Форма.УникальныйИдентификатор,
											ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения по умолчанию
//
// Параметры:
//	РезультатВыполнения - Структура - результат выполнения операции.
//	Параметры - Произвольный - дополнительный параметр переданный в оповещение.
//
Процедура ПодключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При подключении оборудования произошла ошибка:""%1"".'"), РезультатВыполнения.ОписаниеОшибки); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
// Параметры:
//	ОповещениеПриОтключении - ОписаниеОповещения - оповещение при отключении.
//	Форма - ФормаКлиентскогоПриложения - закрываемая форма.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма) Экспорт
	
	Если ОповещениеПриОтключении = Неопределено Тогда
		ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности
	Если СуществуетПараметрКлиентаОценкаПроизводительности() Тогда
		КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОтключениеОборудованиеПриЗакрытииФормы";
		УИДЗамера = ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриОтключении);
	КонецЕсли;
#КонецЕсли
	
	НачатьОтключениеОборудованияПоТипу(ОповещениеПриОтключении, Форма.УникальныйИдентификатор, ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецПроцедуры

// Обработчик оповещения отключения оборудования при закрытии формы по умолчанию
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура ОтключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При отключении оборудования произошла ошибка: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатающееУстройство

// Начать подключение печатающего устройства
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПодключениеПечатающегоУстройства(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПараметрыВыполнение = Новый Структура();
	ПараметрыВыполнение.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыВыполнение.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	ПараметрыВыполнение.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
		ПоддерживаемыеТипыВО.Добавить("ККТ");       
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеПечатающегоУстройства_ВыборЗавершение", ЭтотОбъект, ПараметрыВыполнение);
		ВыбратьУстройство(Оповещение, ПоддерживаемыеТипыВО,
			НСтр("ru='Выберите устройство для печати'"),
			НСтр("ru='Для данного рабочего места нет доступных устройств для печати.'"), 
			НСтр("ru='Устройство для печати не выбрано.'"));
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, ИдентификаторУстройства); 
		НачатьПодключениеПечатающегоУстройства_ВыборЗавершение(РезультатВыполнения, ПараметрыВыполнение);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения печатающего устройства.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнение - Структура
// 
Процедура НачатьПодключениеПечатающегоУстройства_ВыборЗавершение(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрыВыполнение.ИдентификаторУстройства = РезультатВыполнения.ИдентификаторУстройства; 
		// Поиск подключенного устройства.
		ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнение.ИдентификаторУстройства);                                                
		Если ПодключенноеУстройство = Неопределено Тогда
			НачатьПодключениеОборудованиеПоИдентификатору(ПараметрыВыполнение.ОповещениеПриЗавершении, ПараметрыВыполнение.ИдентификаторКлиента, ПараметрыВыполнение.ИдентификаторУстройства);
		Иначе
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, ПараметрыВыполнение.ИдентификаторУстройства); 
			РезультатВыполнения.Вставить("ПечатающееУстройствоБылоПодключенное", Истина);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманды

// Выполнение команды обработчика для подключенного устройства.
//
// Параметры:
//  ПодключенноеУстройство - СправочникСсылка.ПодключаемоеОборудование
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды) Экспорт
	
	Команда = ПараметрыВыполнениеКоманды.Команда;
	
	// Вызываем модуль "Процессор данных" отвечающий за подготовку данных для выполнение команды на оборудовании.
	Если ПараметрыВыполнениеКоманды.ПодготовитьДанные Тогда
		ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);
		ПроцессорДанных = ПараметрыВыполнениеКоманды.ПроцессорДанных;
		ДанныеОперации = ПроцессорДанных.ПодготовитьДанныеОперации(ПараметрыПодключенияСервер, Команда, ПараметрыВыполнениеКоманды.ПараметрыОперации);
		Если ДанныеОперации = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка подготовки данных для операции.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			// Завершение команды.      
			ЗавершениеВыполнениеКоманды(РезультатВыполнения, ПараметрыВыполнениеКоманды);
			Возврат;
		ИначеЕсли НЕ ДанныеОперации.Результат Тогда
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ДанныеОперации.ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			// Завершение команды.      
			ЗавершениеВыполнениеКоманды(РезультатВыполнения, ПараметрыВыполнениеКоманды);
			Возврат;
		КонецЕсли; 
	Иначе
		ДанныеОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		Если ДанныеОперации = Неопределено Тогда
			ДанныеОперации = Новый Структура();
		КонецЕсли; 
	КонецЕсли;
	
	ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
	Если ОбработчикДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПараметрыВыполнениеКоманды.Вставить("ДанныеОперации", ДанныеОперации);
		ПараметрыВыполнениеКоманды.Вставить("ПодключенноеУстройство", ПодключенноеУстройство);
		
		Если Команда = "CheckFiscalization"
			И ПараметрыВыполнениеКоманды.Свойство("ОповещениеПослеОткрытииЧека")
			И ПараметрыВыполнениеКоманды.ОповещениеПослеОткрытииЧека <> Неопределено Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеОткрытииЧека", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, "GetCurrentStatus", ДанныеОперации.ТекущееСостояние);
		Иначе        
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, Команда, ДанныеОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "После открытия чека", вызывается во время команды "CheckFiscalization".
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПослеОткрытииЧека(РезультатВыполнения, ПараметрыВыполнениеКоманды)  Экспорт
	
	ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
	ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;

	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("ВходныеПараметры", ПараметрыВыполнениеКоманды.ДанныеОперации);
	ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
	ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
		ТекущееСостояние = ДанныеОперации.ТекущееСостояние;
		ФискальныеДанныеСтруктура = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(
			ТекущееСостояние.РезультатXML, ПодключенноеУстройство.РевизияИнтерфейса, ТекущееСостояние.НомерСменыККТ, ТекущееСостояние.НомерЧекаККТ);
		ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ФискальныеДанныеСтруктура.НомерСменыККТ, Число(ФискальныеДанныеСтруктура.НомерЧекаККТ) + 1, ДанныеОперации.ЗаводскойНомерФН); 
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ЗавершениеПечати", ЭтотОбъект, ПараметрыВыполнениеКоманды);
	ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Оповещение);
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПослеОткрытииЧека, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик оповещения "Завершение печати", вызывается после открытия чека.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ЗавершениеПечати(РезультатВыполнения, ПараметрыВыполнениеКоманды)  Экспорт
	
	Если РезультатВыполнения.ПродолжитьПечать Тогда        
		
		ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
		ПараметрыОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;
		
		ДополнительныеПараметры = Новый Структура();
		ЗаполнитьПараметрыОперацииПодписиЧека(ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, РезультатВыполнения);
		ДополнительныеПараметры.Вставить("АдресЧека"  , ?(РезультатВыполнения.Свойство("АдресЧека"), РезультатВыполнения.АдресЧека, Неопределено));
		ДополнительныеПараметры.Вставить("ПодписьЧека", ?(РезультатВыполнения.Свойство("ПодписьЧека"), РезультатВыполнения.ПодписьЧека, Неопределено));
		ДанныеОперации.Вставить("ПодписьЧека", ДополнительныеПараметры);
		ПараметрыОперации.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		 
		Если НЕ ПустаяСтрока(ДополнительныеПараметры.АдресЧека) Тогда // Необходима печать слип-чека алко-продукции.
			ПечатьСлипЧека = ПечатьСлипЧекаАлкогольнойПродукции(); 
			Если ПечатьСлипЧека И МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
				ШиринаСтроки = ?(ПодключенноеУстройство.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ШиринаСтроки, 36);
				
				МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				
				НефискальныйДокумент = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьШаблонИнфоКвитанции(ДополнительныеПараметры,  ШиринаСтроки);
				ДанныеОперации.ТестовыеЧеки = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьXMLПакетДляТекста(НефискальныйДокумент, ПодключенноеУстройство.РевизияИнтерфейса);
			КонецЕсли;
		КонецЕсли;
		
		ОбработчикДрайвера = ПараметрыВыполнениеКоманды.ПодключенноеУстройство.ОбработчикДрайвера;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, ПараметрыВыполнениеКоманды.Команда, ПараметрыВыполнениеКоманды.ДанныеОперации);
		
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, РезультатВыполнения.ОписаниеОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

// Заполнить параметры операции подписи чека.
// 
// Параметры:
//  ПараметрыОперации - Структура
//  НомерСмены - Число - номер открытой/закрытой смены.
//  НомерЧека - Число - номер фискального чека.
//  ЗаводскойНомерФН - Число - заводской номер фискального накопителя
//
Процедура ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыОперации, НомерСмены = Неопределено, 
	НомерЧека = Неопределено, ЗаводскойНомерФН = Неопределено) Экспорт; 
	
	ПараметрыОперации.Вставить("ИНН"       , Неопределено);
	ПараметрыОперации.Вставить("КПП"       , Неопределено);
	
	ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
	ПараметрыОперации.Вставить("НомерЧека" , НомерЧека);
	ПараметрыОперации.Вставить("НомерКассы"      , Неопределено);
	ПараметрыОперации.Вставить("ЗаводскойНомерФН", ЗаводскойНомерФН);
	ПараметрыОперации.Вставить("НаименованиеОрганизации", Неопределено);
	
КонецПроцедуры

// Начать выполнение команды ответственному обработчику драйвера
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  ПараметрыОперации - Структура
//  ПараметрыВыполнениеКоманды - Структура
//  ПечатающееУстройство - СправочникСсылка.ПодключаемоеОборудование - идентификатор печатающего устройства.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства, ПараметрыОперации, ПараметрыВыполнениеКоманды, ПечатающееУстройство = Неопределено) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Устройство не выбрано или не подключено.'");
			РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат; 
	КонецЕсли;          
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = СтрШаблон("ОбщийМодуль.МенеджерОборудованияКлиент.НачатьВыполнениеКоманды.%1", ПараметрыВыполнениеКоманды.Команда);
	МенеджерОборудованияКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли          
	
	ПараметрыВыполнениеКоманды.Вставить("ОповещениеПриЗавершении"   , ОповещениеПриЗавершении);  
	ПараметрыВыполнениеКоманды.Вставить("ИдентификаторКлиента"      , ИдентификаторКлиента);
	ПараметрыВыполнениеКоманды.Вставить("ИдентификаторУстройства"   , ИдентификаторУстройства);
	ПараметрыВыполнениеКоманды.Вставить("ПараметрыОперации"         , ПараметрыОперации);
	ПараметрыВыполнениеКоманды.Вставить("Подключено"                , Ложь);
	ПараметрыВыполнениеКоманды.Вставить("ПодключенноеУстройство"    , Неопределено);
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройство"           , ПечатающееУстройство);
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоПодключено"      , Ложь);   
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоБылоПодключенное", Ложь);   
	ПараметрыВыполнениеКоманды.Вставить("СетевоеОборудование");
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);                                                
	Если ПодключенноеУстройство = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ИдентификаторКлиента, ИдентификаторУстройства);
	Иначе
		ПараметрыВыполнениеКоманды.ПодключенноеУстройство = ПодключенноеУстройство;
		// Нужно ли использовать печатающее устройство.
		Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство И ПараметрыВыполнениеКоманды.ПечатьСлипЧека
			И НЕ ПодключенноеУстройство.ПечатьКвитанцийНаТерминале Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			НачатьПодключениеПечатающегоУстройства(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПечатающееУстройство); 
		Иначе
			ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
		КонецЕсли;
	КонецЕсли;
	                                    
КонецПроцедуры

// Завершение подключения оборудования
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПодключениеЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		
		ПодключенноеУстройство = РезультатПодключения.ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.ПодключенноеУстройство = ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.Подключено = Истина;
		
		// Нужно ли использовать печатающее устройство.
		Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство И ПараметрыВыполнениеКоманды.ПечатьСлипЧека
			И НЕ ПодключенноеУстройство.ПечатьКвитанцийНаТерминале Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			НачатьПодключениеПечатающегоУстройства(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройство); 
		Иначе
			ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru='При подключении оборудования произошла ошибка: %1'"), РезультатПодключения.ОписаниеОшибки);
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		РезультатОперации.ИдентификаторУстройства = ПараметрыВыполнениеКоманды.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения печатающего устройства
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ПараметрыВыполнениеКоманды.ПечатающееУстройство = РезультатПодключения.ИдентификаторУстройства;
		ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено = Истина;  
		
		Если РезультатПодключения.Свойство("ПечатающееУстройствоБылоПодключенное") И РезультатПодключения.ПечатающееУстройствоБылоПодключенное Тогда
			ПараметрыВыполнениеКоманды.ПечатающееУстройствоБылоПодключенное = Истина;
		КонецЕсли;
		ВыполнениеКомандыОбработчика(ПараметрыВыполнениеКоманды.ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
	Иначе
		// Отключение оборудования при завершение
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
		// Завершение с ошибкой
		ТекстСообщения = СтрШаблон(НСтр("ru='При подключении печатающего устройства произошла ошибка: %1'"), РезультатПодключения.ОписаниеОшибки); 
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		РезультатОперации.ИдентификаторУстройства = РезультатПодключения.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Завершение выполнения команды
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура:
//   * ПараметрыОперации - Структура:
//      ** ОбработатьДанные - Булево
//      ** ОбработатьДанныеПриОшибке - Булево
//      ** ИспользоватьПечатающееУстройство - Булево
//      ** ДополнительныеПараметры - Структура
// 
Процедура НачатьВыполнениеКоманды_Завершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	// Обработка данный на сервере после выполнение команды
	Если (РезультатВыполнения.Результат И ПараметрыВыполнениеКоманды.ОбработатьДанные)
		Или (ПараметрыВыполнениеКоманды.Свойство("ОбработатьДанныеПриОшибке") И ПараметрыВыполнениеКоманды.ОбработатьДанныеПриОшибке) Тогда
		
		ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПараметрыВыполнениеКоманды.ПодключенноеУстройство);
		ПараметрыПодключенияСервер.Вставить("ИдентификаторУстройства", ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ПроцессорДанных = ПараметрыВыполнениеКоманды.ПроцессорДанных;
		Команда = ПараметрыВыполнениеКоманды.Команда;
		// Вызываем модуль "Процессор данных" отвечающий за обработку данных после выполнение команды на оборудовании.
		ПроцессорДанных.ОбработатьДанныеОперации(ПараметрыПодключенияСервер, Команда, РезультатВыполнения, ПараметрыВыполнениеКоманды.ДанныеОперации);
	КонецЕсли;
		
	Если РезультатВыполнения.Результат Тогда
		Если ПараметрыВыполнениеКоманды.Свойство("ПараметрыОперации") 
			И ПараметрыВыполнениеКоманды.ПараметрыОперации <> Неопределено
			И ПараметрыВыполнениеКоманды.ПараметрыОперации.Свойство("ДополнительныеПараметры") Тогда
			РезультатВыполнения.Вставить("ДополнительныеПараметры", ПараметрыВыполнениеКоманды.ПараметрыОперации.ДополнительныеПараметры);
		КонецЕсли;
		Если ПараметрыВыполнениеКоманды.Команда = "CheckFiscalization" 
			И МенеджерОборудованияКлиентПовтИсп.ИспользуетсяДисплеиПокупателя() 
			И ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации() Тогда
				СообщениеНаДисплее = СтрШаблон(НСтр("ru = 'Электронный чек%1Проверьте чек в ФНС'"), Символы.ПС);
				МодульОборудованиеДисплеиПокупателяКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
				ПараметрыОперацииQR = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя(СообщениеНаДисплее, РезультатВыполнения.QRКодЧекаККТ);
				МодульОборудованиеДисплеиПокупателяКлиент.НачатьВыводQRКодаНаДисплейПокупателя(Неопределено, Неопределено, Неопределено, ПараметрыОперацииQR); 
		КонецЕсли;
	Иначе
		Если ПараметрыВыполнениеКоманды.Команда = "CheckFiscalization"
			И ПараметрыВыполнениеКоманды.Свойство("ОповещениеПриОшибкеПечатиЧека")
			И ПараметрыВыполнениеКоманды.ОповещениеПриОшибкеПечатиЧека <> Неопределено Тогда
				ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
				ПараметрыВыполнения = Новый Структура();
				ПараметрыВыполнения.Вставить("ВходныеПараметры", ПараметрыВыполнениеКоманды.ДанныеОперации);
				ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
				ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
				ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Неопределено);
				ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.ЗаводскойНомерФН); 
				ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриОшибкеПечатиЧека, ПараметрыВыполнения);
		КонецЕсли;
	КонецЕсли;                        
	
	Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство 
		И ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено И РезультатВыполнения.Свойство("ТестовыеЧеки") Тогда
		// Поиск подключенного устройства.
		ПечатающееУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнениеКоманды.ПечатающееУстройство);                                                
		Если ПечатающееУстройство = Неопределено Тогда
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
			ТекстОшибки = НСтр("ru='Ошибка печати слип чека. Операция отменена.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			// Завершение команды.      
			ЗавершениеВыполнениеКоманды(РезультатВыполнения, ПараметрыВыполнениеКоманды)
		Иначе
			Если РезультатВыполнения.Свойство("ТекстСлипЧека") И Не ПустаяСтрока(РезультатВыполнения.ТекстСлипЧека) Тогда
				ПодключаемоеОборудование = ПодключаемоеОборудование();
				ПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", РезультатВыполнения.ТекстСлипЧека);
			КонецЕсли;
			// Результат выполнения исходной операции
			ПараметрыВыполнениеКоманды.Вставить("РезультатВыполнения", РезультатВыполнения);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ПечатающееУстройство.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПечатающееУстройство, "PrintText", РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
		// Завершение команды.      
		ЗавершениеВыполнениеКоманды(РезультатВыполнения, ПараметрыВыполнениеКоманды)
	КонецЕсли;
	
КонецПроцедуры      

// Завершение печати
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатьЗавершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
		// Завершение команды.      
		ЗавершениеВыполнениеКоманды(ПараметрыВыполнениеКоманды.РезультатВыполнения, ПараметрыВыполнениеКоманды)
	Иначе       
		// При команде "AuthorizeVoid" нельзя выполнить аварийную отмену последней операции отмены
		Если ПараметрыВыполнениеКоманды.Команда = "AuthorizeVoid" Тогда
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
			// Завершение команды.      
			ЗавершениеВыполнениеКоманды(ПараметрыВыполнениеКоманды.РезультатВыполнения, ПараметрыВыполнениеКоманды);
		// При команде "Settlement" нельзя выполнить аварийную отмену последней операции
		ИначеЕсли ПараметрыВыполнениеКоманды.Команда = "Settlement" Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru='При получении итогов дня по картам, произошла ошибка печати слип чека.
					|На печатающем устройстве не поддерживается печать текстовых документов.
					|Терминал: %1
					|Печатающее устройство: %2'"),
				ПараметрыВыполнениеКоманды.ИдентификаторУстройства,
				ПараметрыВыполнениеКоманды.ПечатающееУстройство);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяБазоваяФункциональность() Тогда
				
				Если РезультатВыполнения.Свойство("ОписаниеОшибки") Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ОписаниеОшибки;
				КонецЕсли;
				
				Попытка
					МодульЖурналРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЖурналРегистрацииКлиент");
					МодульЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
						НСтр("ru = 'Подключаемое оборудование.'"),
						"Ошибка", 
						ТекстСообщения);
				Исключение
					ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
			
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
			
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, ТекстСообщения, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			// Завершение команды.      
			ЗавершениеВыполнениеКоманды(РезультатВыполнения, ПараметрыВыполнениеКоманды)
		Иначе
			ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;
			ПараметрыВыполнениеКоманды.Вставить("ОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ОтменаОперацииИЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ПодключенноеУстройство.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, "EmergencyVoid", РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

// Завершение отмены операции
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ОтменаОперацииИЗавершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяПлатежныеСистемы() Тогда
		МодульОборудованиеПлатежныеСистемыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиентСервер");
		МодульОборудованиеПлатежныеСистемыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыВызовСервера");
		ПараметрыОперации = МодульОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, ПараметрыВыполнениеКоманды.ДанныеОперации, , "ИдентификаторЗапроса");
		МодульОборудованиеПлатежныеСистемыВызовСервера.ЗаписатьИсториюПлатежнойОперации("EmergencyVoid", ПараметрыОперации, РезультатВыполнения);
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Эквайринговая операция отменена - ошибка печати слип чека.'");
	Иначе
		ТекстСообщения = НСтр("ru='Ошибка отмены операции транзакции. Обратитесь в банк.'");
	КонецЕсли;
	
	Если ПараметрыВыполнениеКоманды.Свойство("ОписаниеОшибки") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + ПараметрыВыполнениеКоманды.ОписаниеОшибки;
	КонецЕсли;
	// Отключение оборудования.
	ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды);
	
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
	// Завершение команды.
	ЗавершениеВыполнениеКоманды(РезультатВыполнения, ПараметрыВыполнениеКоманды)
	
КонецПроцедуры  

// Отключение оборудования 
// 
// Параметры:
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды) Экспорт
	
	СетевоеОборудование = ПараметрыВыполнениеКоманды.ПодключенноеУстройство.СетевоеОборудование;
	ОтключениеОборудования = ПараметрыВыполнениеКоманды.Подключено;
	
	Если ПараметрыВыполнениеКоманды.Свойство("ОставитьПодключенным") И ПараметрыВыполнениеКоманды.ОставитьПодключенным Тогда
		ОтключениеОборудования = Ложь;
	КонецЕсли;
	
	Если ОтключениеОборудования Или СетевоеОборудование Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		Если ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено И НЕ ПараметрыВыполнениеКоманды.ПечатающееУстройствоБылоПодключенное Тогда
			НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройство);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Начать получение параметров устройства
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПолучениеПараметровУстройства(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Устройство не выбрано или не подключено.'");
			РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);      
	Если ПодключенноеУстройство = Неопределено Тогда
		ПараметрыВыполнениеКоманды = Новый Структура();
		ПараметрыВыполнениеКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);  
		ПараметрыВыполнениеКоманды.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
		ПараметрыВыполнениеКоманды.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеПараметровУстройства_ПодключениеЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ИдентификаторКлиента, ИдентификаторУстройства);
	Иначе                                                                                                                       
		ПараметровУстройства = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, ИдентификаторУстройства);
		РезультатОперации.ПодключенноеУстройство = ПодключенноеУстройство; 
		РезультатОперации.Вставить("ПараметровУстройства", ПараметровУстройства);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;    
	
КонецПроцедуры

// Завершение подключения оборудования
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьПолучениеПараметровУстройства_ПодключениеЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ПодключенноеУстройство = РезультатПодключения.ПодключенноеУстройство;   
		ПараметровУстройства = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);  
		РезультатПодключения.Вставить("ПараметровУстройства", ПараметровУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатПодключения);
		НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатПодключения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейсные
 
// Выполнить настройку оборудования.
// 
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование.
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор, ОповещениеПриЗавершении = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования";
	ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ФормаНастройки = "Справочник.ПодключаемоеОборудование.Форма.ФормаНастройки";
	ТекущийЯзык = ТекущийЯзык();
	Если ТипЗнч(ТекущийЯзык) = Тип("Строка") Тогда
		КодЯзыка = ТекущийЯзык;
	Иначе
		КодЯзыка = ТекущийЯзык.КодЯзыка;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);       
	ПараметрыФормы.Вставить("КодЯзыка", КодЯзыка);       
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	ОткрытьФорму(ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Завершение настройки оборудования.
// 
// Параметры:
//  Результат - Структура - результат возвращаемый формой при закрытии.
//  Параметры - Структура - параметры команды.
// 
Процедура ВыполнитьНастройкуОборудования_Завершение(Результат, Параметры) Экспорт
	
	РезультатЗавершения = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗавершения);
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьПодключаемоеОборудование";
	ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьДрайверыОборудования";
	ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы списка платежных операций
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьПлатежныеОперации(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьПлатежныеОперации";
	ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("РегистрСведений.ПлатежныеОперации.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы списка фискальных операций
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьФискальныеОперации(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьФискальныеОперации";
	ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы списка операций очереди чеков
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьОчередьЧеков(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьОчередьЧеков";
	ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("РегистрСведений.ОчередьЧековККТ.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Преобразовать данные со сканера в массив.
// 
// Параметры:
//  Параметр - Структура:
//   * Штрихкод - Строка - штрихкод.
//   * Количество - Число - количество.
// 
// Возвращаемое значение:
//  Массив из Структура.
//
Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	
	Данные = Новый Массив;
	Данные.Добавить(ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	
	Возврат Данные;
	
КонецФункции

// Преобразовать данные со сканера в структуру.
// 
// Параметры:
//  Параметр - Структура - Параметр:
//   * Штрихкод - Строка - штрихкод.
//   * Количество - Число - количество.
// 
// Возвращаемое значение:
//  Структура - Преобразовать данные со сканера в структуру:
//   * Штрихкод - Строка - штрихкод со сканера.
//   * Количество - Число - количество товаров.
//
Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
	
	Если Параметр[1] = Неопределено Тогда
		Данные = Новый Структура("Штрихкод, Количество", Параметр[0], 1);    // Достаем штрихкод из основных данных
	Иначе
		Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1], 1); // Достаем штрихкод из дополнительных данных
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область РаспределеннаяФискализации

// Подключает обработчики системы оповещения, для использования в распределенной фискализации
//
Процедура ПодключениеСистемыВзаимодействия() Экспорт
	
	ПараметрыРаботыКлиента  = ПараметрыРаботыКлиентаПриЗапуске();
	ИдентификаторОбсуждения = ПараметрыРаботыКлиента.ИдентификаторОбсужденияРаспределеннойФискализации;
	
	Если ИдентификаторОбсуждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не МобильноеПриложениеКлиент Тогда 
		Если ИдентификаторОбсуждения <> Неопределено Тогда 
			ОписаниеОповещенияПодключенияОбработчика = 
				Новый ОписаниеОповещения("ОбработкаОповещенияПодключенияСообщенийФискализации", МенеджерОборудованияКлиент,);
			ОписаниеОповещенияСерверныхСообщенийБезКонтекста = 
				Новый ОписаниеОповещения("ОбработкаОповещенияСообщенийФискализации", МенеджерОборудованияКлиент,);
			СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(
				ОписаниеОповещенияПодключенияОбработчика, 
				ИдентификаторОбсуждения, 
				ОписаниеОповещенияСерверныхСообщенийБезКонтекста);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Завершение подключения обработчика системы оповещения
// 
// Параметры:
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияПодключенияСообщенийФискализации(ДополнительныеПараметры) Экспорт
	
	Оповестить("ПодключенияСообщенийФискализации");
	
КонецПроцедуры

// Обработчик появлении новых сообщений в обсуждении 
//
// Параметры:
//  Сообщение - СообщениеСистемыВзаимодействия
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияСообщенийФискализации(Сообщение, ДополнительныеПараметры) Экспорт
	
	// АПК: 1391-выкл Особенность. текст сообщения приходит из системы оповещения.
	Если СтрНачинаетсяС(Сообщение.Текст, НСтр("ru='Фискализация чека'")) Тогда 
		Оповестить("ФискализацияЧека", Сообщение.Текст);
		ФискализацияЧековВОчереди(Ложь);
	КонецЕсли;
	// АПК: 1391-вкл
	
КонецПроцедуры

// Обработчик после открытия чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ФискализацияЧековВОчередиПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
	Если ПараметрыВыполнения.Свойство("ДанныеОтправленыВЕГАИС") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик после ошибки печати чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ФискализацияЧековВОчередиПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

// Завершение фискализации чеков в очереди
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ОбщиеПараметры - ОбщиеПараметры
// 
Процедура ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
		ТекстСообщения = "";
	Иначе
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ДополнительныеПараметры") Тогда
		ОбщиеПараметры.Вставить("ДополнительныеПараметры", РезультатВыполнения.ДополнительныеПараметры);
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения);
	КонецЕсли;
	
	Оповестить("ФискализированЧек", РезультатВыполнения);
	
	ФискализацияЧековВОчереди_Начало();
	
КонецПроцедуры

// Завершение фискализации пакетной операции в очереди
// 
// Параметры:
//  РезультатВыполнения - см. ОборудованиеЧекопечатающиеУстройстваКлиент.РезультатПродажаСВыдачейНаличных
//  ОбщиеПараметры - ОбщиеПараметры
// 
Процедура ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	ПараметрыПакетнойОперации = ОбщиеПараметры.ПараметрыПакетнойОперации;
	
	РезультатВыполнения.Вставить("ПараметрыЭквайринговойОперации",   ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации);
	РезультатВыполнения.Вставить("ПараметрыПродажаСВыдачейНаличных", ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных);
	РезультатВыполнения.Вставить("ИдентификаторЗаписи",              ПараметрыПакетнойОперации.ИдентификаторЗаписи);
	
	ОбщиеПараметры.Удалить("ПараметрыПакетнойОперации");
	ОбщиеПараметры.Вставить("РезультатВыполненияПакетнойОперации", РезультатВыполнения);

	Если РезультатВыполнения.РезультатФискализацииЧека <> Неопределено 
		И РезультатВыполнения.РезультатФискализацииЧека.Свойство("ДополнительныеПараметры") Тогда
		РезультатФискализацииЧека = РезультатВыполнения.РезультатФискализацииЧека; // Структура
		РезультатВыполнения.Вставить("ДополнительныеПараметры", РезультатФискализацииЧека.ДополнительныеПараметры);
	КонецЕсли;
	
	ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры);
	
КонецПроцедуры

// Начать фискализацию чеков в очереди
// 
// Параметры:
//  Параметры - см. ПараметрыФискализацииОчередиЧеков
Процедура ФискализацияЧековВОчереди_Начало(Параметры = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ДанныеОчереди =  ПодключаемоеОборудование.ДанныеОчереди;
	
	Если ДанныеОчереди.НомерЧека < ДанныеОчереди.ЧекиВОчереди.Количество() Тогда
		
		ЧекВОчереди = ДанныеОчереди.ЧекиВОчереди[ДанныеОчереди.НомерЧека];
		ДанныеОчереди.НомерЧека = ДанныеОчереди.НомерЧека + 1;
		
		Если ЧекВОчереди.ДанныеЧека <> Неопределено Тогда
			ОбщиеПараметры = ЧекВОчереди.ДанныеЧека;
			ОбщиеПараметры.ИдентификаторФискальнойЗаписи = ЧекВОчереди.ИдентификаторЗаписи;
			СтатусДокументаИзменен = Ложь; 
			МенеджерОборудованияВызовСервераПереопределяемый.ПроверитьСтатусДокументаОснования(ОбщиеПараметры, СтатусДокументаИзменен);
			Если СтатусДокументаИзменен Тогда
				ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
			КонецЕсли;
		Иначе
			ФискализацияЧековВОчереди_Начало();
			Возврат;
		КонецЕсли;
	
		Если ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Новый") 
			Или ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка") Тогда
			
			Если ПустаяСтрока(ОбщиеПараметры.Кассир) Тогда
				ОбщиеПараметры.Кассир = ДанныеОчереди.Кассир;
				ОбщиеПараметры.КассирИНН = ДанныеОчереди.КассирИНН;
			КонецЕсли;
			
			ИдентификаторУстройстваККТ = ПолучитьДоступноеККТДляФискализации(ОбщиеПараметры, ДанныеОчереди.СписокУстройств);
			
			Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			
				Если НЕ ЗначениеЗаполнено(ИдентификаторУстройстваККТ) И ЧекВОчереди.ДанныеЧека.Свойство("АвтономнаяККТ") И Не ЧекВОчереди.ДанныеЧека.АвтономнаяККТ Тогда
					ТекстСообщения = НСтр("ru='Нет доступных ККТ для фискализации чека.'");
					СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
					МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения);
				Иначе
					СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется");
					МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, ИдентификаторУстройстваККТ);
					
					Если ОбщиеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") И ОбщиеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС 
						И ОбщиеПараметры.Свойство("АвтономнаяККТ") И Не ОбщиеПараметры.АвтономнаяККТ Тогда
						ОповещениеПослеОткрытииЧека = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ПослеОткрытияЧека", ЭтотОбъект, ОбщиеПараметры);
						ОповещениеПриОшибкеПечатиЧека = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека", ЭтотОбъект, ОбщиеПараметры);
						ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации();
						ДополнительныеПараметры.Вставить("ОповещениеПослеОткрытииЧека", ОповещениеПослеОткрытииЧека);
						ДополнительныеПараметры.Вставить("ОповещениеПриОшибкеПечатиЧека", ОповещениеПриОшибкеПечатиЧека);
					ИначеЕсли ОбщиеПараметры.Свойство("АвтономнаяККТ") И ОбщиеПараметры.АвтономнаяККТ Тогда
						Если Параметры.Свойство("Форма") Тогда
							ДополнительныеПараметры = Новый Структура;
							ДополнительныеПараметры.Вставить("Форма", Параметры.Форма);
						КонецЕсли;
					Иначе
						ДополнительныеПараметры = Неопределено;
					КонецЕсли;
					
					Если ЧекВОчереди.ТипПакетнойОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой") Тогда
						
						ПараметрыПакетнойОперации = ЧекВОчереди.ПараметрыПакетнойОперации;
						
						ПараметрыОперации = МодульОборудованиеЧекопечатающиеУстройстваКлиент.ПараметрыФискализацияЧекаСОплатойКартой();
						ПараметрыОперации.СлипЧекВТелеФискального   = ПараметрыПакетнойОперации.СлипЧекВТелеФискального;
						ПараметрыОперации.РеквизитыКартыQR          = ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR;
						ПараметрыОперации.ПараметрыФискализацииЧека = ОбщиеПараметры;
						
						ПараметрыПакетнойОперации.Вставить("ИдентификаторЗаписи", ЧекВОчереди.ИдентификаторЗаписи);
						ОбщиеПараметры.Вставить("ПараметрыПакетнойОперации", ПараметрыПакетнойОперации);
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации", ЭтотОбъект, ОбщиеПараметры);
						МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаСОплатойКартой(
							ОписаниеОповещения,
							,
							ИдентификаторУстройстваККТ,
							ЧекВОчереди.ЭквайринговыйТерминал,
							ПараметрыОперации,
							ДополнительныеПараметры);
						
					ИначеЕсли ЧекВОчереди.ТипПакетнойОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных") Тогда
						
						ПараметрыПакетнойОперации = ЧекВОчереди.ПараметрыПакетнойОперации;
						
						ПараметрыОперации = МодульОборудованиеЧекопечатающиеУстройстваКлиент.ПараметрыПродажаСВыдачейНаличных();
						ПараметрыОперации.ПараметрыФискализацииЧека = ОбщиеПараметры;
						ПараметрыОперации.СлипЧекВТелеФискального   = ПараметрыПакетнойОперации.СлипЧекВТелеФискального;
						ПараметрыОперации.РеквизитыКартыQR          = ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR;
						ЗаполнитьЗначенияСвойств(ПараметрыОперации, ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных);
						
						ПараметрыПакетнойОперации.Вставить("ИдентификаторЗаписи", ЧекВОчереди.ИдентификаторЗаписи);
						ОбщиеПараметры.Вставить("ПараметрыПакетнойОперации", ПараметрыПакетнойОперации);
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации", ЭтотОбъект, ОбщиеПараметры);
						МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПродажаСВыдачейНаличных(
							ОписаниеОповещения,
							,
							ИдентификаторУстройстваККТ,
							ЧекВОчереди.ЭквайринговыйТерминал,
							ПараметрыОперации,
							ДополнительныеПараметры);
						
					Иначе
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_Завершение", ЭтотОбъект, ОбщиеПараметры);
						УникальныйИдентификатор = Новый УникальныйИдентификатор;
						Если ОбщиеПараметры.Свойство("СформироватьЧекКоррекции") И ОбщиеПараметры.СформироватьЧекКоррекции Тогда
							МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ИдентификаторУстройстваККТ, ОбщиеПараметры, ДополнительныеПараметры);
						Иначе
							МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ИдентификаторУстройстваККТ, ОбщиеПараметры, ДополнительныеПараметры);
						КонецЕсли;
					КонецЕсли;

					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ФискализацияЧековВОчереди_Начало(Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для выполнения фискализации очереди чеков
// 
// Возвращаемое значение:
//  Структура:
//   * Форма - ФормаКлиентскогоПриложения
//   * КассаККМ - ОпределяемыйТип.КассаБПО
Функция ПараметрыФискализацииОчередиЧеков() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Форма", Неопределено);
	Параметры.Вставить("КассаККМ", Неопределено);
	Возврат Параметры;
	
КонецФункции

// Выполнить фискализацию чеков в очереди
//
// Параметры:
//  РазрешенаАвтоматическаяФискализация - Булево
//  Параметры - см. ПараметрыФискализацииОчередиЧеков.
Процедура ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация = Истина, Параметры = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ФискализацияЧековВОчереди";
	УИДЗамера = ЗамерВремениБПО(КлючеваяОперация);
#КонецЕсли
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	ПоддерживаемыеТипыВО.Добавить("ККТ");

	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	СписокОтбор.ТипыПО = ПоддерживаемыеТипыВО;
	СписокОтбор.РазрешенаАвтоматическаяФискализация = РазрешенаАвтоматическаяФискализация;
	СписокУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		Если Параметры = Неопределено Тогда
			КассаККМ = Неопределено;
		Иначе
			КассаККМ = Параметры.КассаККМ;
		КонецЕсли;
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
		ЧекиВОчереди = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЧекиВОчередиНаФискализацию(КассаККМ);
		Если ЧекиВОчереди.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийКассир = МенеджерОборудованияКлиентСервер.ТекущийКассирДляФискальныхОпераций();
	
	ДанныеОчереди = Новый Структура();
	ДанныеОчереди.Вставить("Кассир"         , ТекущийКассир.Кассир);
	ДанныеОчереди.Вставить("КассирИНН"      , ТекущийКассир.КассирИНН);
	ДанныеОчереди.Вставить("ЧекиВОчереди"   , ЧекиВОчереди);
	ДанныеОчереди.Вставить("СписокУстройств", СписокУстройств);
	ДанныеОчереди.Вставить("НомерЧека"      , 0);
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ПодключаемоеОборудование.ДанныеОчереди = ДанныеОчереди;
	
	ФискализацияЧековВОчереди_Начало(Параметры); 
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	ЗавершитьЗамерВремениБПО(УИДЗамера);
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область УпрощениеНастройкиПараметров

// Начинает асинхронное заполнение ключевых параметров оборудования по идентификатору
//
// Параметры:
//  ОповещениеЗавершения  - ОписаниеОповещения - оповещение которое будет вызвано по результатам заполнения параметров
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
Процедура НачатьПолучениеКлючевыхПараметров(ОповещениеЗавершения, Идентификатор) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("КлючевыеПараметры",    Новый Структура());
	Контекст.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Контекст.Вставить("Идентификатор",        Идентификатор);

	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеКлючевыхПараметровЗавершение", ЭтотОбъект, Контекст);
	МенеджерОборудованияКлиент.НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор);

КонецПроцедуры

// Завершает асинхронное заполнение ключевых параметров оборудования по идентификатору
//
// Параметры:
//  Результат - Структура
//  Контекст - Структура
Процедура НачатьПолучениеКлючевыхПараметровЗавершение(Результат, Контекст) Экспорт
	
	ОповещениеЗавершения = Контекст.ОповещениеЗавершения;

	Если Результат.Результат Тогда
	
		Идентификатор      = Контекст.Идентификатор;
		КлючевыеПараметры  = Контекст.КлючевыеПараметры;
		ОписаниеИнтерфейса = Результат.ОписаниеДрайвера.ПараметрыДрайвера;
		
		ПрочитатьАтрибутыКлючевыхПараметров(ОписаниеИнтерфейса, КлючевыеПараметры);
	
		ПодключаемоеОборудование = ПодключаемоеОборудование();
		Если Не ПодключаемоеОборудование.Свойство("СобственныеПараметрыОборудования") Тогда
			ПодключаемоеОборудование.Вставить("СобственныеПараметрыОборудования", Новый Соответствие());
		КонецЕсли;
		ПодключаемоеОборудование.СобственныеПараметрыОборудования.Вставить(Идентификатор, КлючевыеПараметры);
		
		// добавить общие параметры
		Если Не КлючевыеПараметры.Свойство("LogEnabled") Тогда
			ДобавитьПараметрЛогДрайвераВключен(КлючевыеПараметры, Результат.ОписаниеДрайвера.ЛогДрайвераВключен);
		КонецЕсли;
		Если Не КлючевыеПараметры.Свойство("LogPath") Тогда
			ДобавитьПараметрЛогДрайвераПутьКФайлу(КлючевыеПараметры, Результат.ОписаниеДрайвера.ЛогДрайвераПутьКФайлу);
		КонецЕсли;
		
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает атрибуты параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//  Структура - см. НовыйАтрибутыПараметра
//
Функция АтрибутыПараметра(Идентификатор, ИмяПараметра) Экспорт

	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Если Не ПодключаемоеОборудование.Свойство("СобственныеПараметрыОборудования") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючевыеПараметры = ПодключаемоеОборудование.СобственныеПараметрыОборудования.Получить(Идентификатор);
	Если КлючевыеПараметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АтрибутыПараметра = Неопределено;
	Если Не КлючевыеПараметры.Свойство(ИмяПараметра, АтрибутыПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АтрибутыПараметра;

КонецФункции

// Возвращает Истина если параметр с именем ИмяПараметра существует, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//  Булево - 
Функция ПараметрСуществует(Идентификатор, ИмяПараметра) Экспорт

	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Возврат АтрибутыПараметра <> Неопределено;

КонецФункции

// Возвращает тип параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//   Тип - Тип - Тип значения параметра (Число, Строка, Булево)
Функция ТипПараметра(Идентификатор, ИмяПараметра) Экспорт
	
	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Если АтрибутыПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АтрибутыПараметра.Тип;

КонецФункции

// Возвращает значение параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//  Число, Строка, Булево, Неопределено - установленное значение параметра
Функция ЗначениеПараметра(Идентификатор, ИмяПараметра) Экспорт

	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Если АтрибутыПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АтрибутыПараметра.Стандартный Тогда
		Возврат АтрибутыПараметра.ЗначениеСтандартного;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияВызовСервера.ПараметрыУстройства(Идентификатор);
	ИмяРеквизита        = АтрибутыПараметра.ИмяРеквизита;
	ЗначениеПараметра   = Неопределено;
	Если Не ПараметрыУстройства.Свойство(ИмяРеквизита, ЗначениеПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АтрибутыПараметра.Преобразование = "Инвертировать" И АтрибутыПараметра.Тип = Тип("Булево") Тогда
		ЗначениеПараметра = Не ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции

// Устанавливает значение параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//  НовоеЗначение - Число, Строка, Булево, Неопределено - новое значение параметра которое требуется установить
// 
// Возвращаемое значение:
//  Булево - результат выполнения
Функция УстановитьЗначениеПараметра(Идентификатор, ИмяПараметра, НовоеЗначение) Экспорт
	
	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Если АтрибутыПараметра = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если АтрибутыПараметра.ТолькоЧтение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияВызовСервера.ПараметрыУстройства(Идентификатор);
	ИмяРеквизита        = АтрибутыПараметра.ИмяРеквизита;
	Если АтрибутыПараметра.Преобразование = "Инвертировать" И АтрибутыПараметра.Тип = Тип("Булево") Тогда
		НовоеЗначение = Не НовоеЗначение;
	КонецЕсли;
	ПараметрыУстройства.Вставить(ИмяРеквизита, НовоеЗначение);
	
	
	Возврат МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Идентификатор, ПараметрыУстройства);
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела: больше не используется.
// Выводит текст в панель состояния.
//
// Параметры:
//  ТекстСообщения - Строка
//  Прогресс - Число - индикатор прогресса
//  Пояснение - Строка
//
Процедура СостояниеПроцесса(ТекстСообщения, Прогресс = Неопределено, Пояснение = Неопределено) Экспорт
	
#Если НЕ МобильныйКлиент Тогда
	Состояние(ТекстСообщения, Прогресс);
#КонецЕсли 
	
КонецПроцедуры

#Область ВыбратьУстройство

// Устарела: следует использовать ВыбратьУстройство.
// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  ОповещениеВыбора - ОписаниеОповещения - событие описания оповещения.
//  ТипОборудования - Структура, Массив, Строка - тип оборудования для выбора устройства.
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
		
	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	СписокОтбор.ТипыПО = ТипОборудования;
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, Идентификатор);
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеВыбора"   , ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбрано" , СообщениеНеВыбрано);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устарела: больше не используется.
// Завершение выбора устройства
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Параметры.СообщениеНеВыбрано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	Иначе
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, Идентификатор);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборКодаВидаНоменклатурнойКлассификации

// Устарела: больше не используется.
// Процедура открывает форму выбора кода вида номенклатурной классификации
//
// Параметры:
//  ОповещениеПриВыборе - ОписаниеОповещения - событие описания оповещения.
//
Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации(ОповещениеПриВыборе) Экспорт
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе", ОповещениеПриВыборе);
	Обработчик = Новый ОписаниеОповещения("НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение", ЭтотОбъект, ПараметрыКоманды);
	ОткрытьФорму("ОбщаяФорма.КодВидаНоменклатурнойКлассификации", ,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Устарела: больше не используется.
// Завершение выбора 
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Параметры.ОповещениеПриВыборе <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриВыборе, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТСД

// Устарела: следует использовать ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД.
// Начать загрузку данных из терминала сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   СворачиватьДанные - Булево
//
Процедура НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, СворачиватьДанные = Ложь) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяТерминалыСбораДанных() Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД.
// Начать выгрузку данных в терминал сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ТаблицаВыгрузкиТоваров - ТаблицаЗначений - 
//   ПолнаяВыгрузка - Булево -
//
Процедура НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров, ПолнаяВыгрузка = Истина) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяТерминалыСбораДанных() Тогда              
		МодульОборудованиеТерминалыСбораДанныхКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиентСервер");
		ПараметрыОперации = МодульОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();     
		ПараметрыОперации.ТаблицаТоваров = ТаблицаВыгрузкиТоваров;    
		ПараметрыОперации.ЧастичнаяВыгрузка = Не ПолнаяВыгрузка;
		
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеТерминалыСбораДанныхКлиент.НачатьОчисткуДанныеВТСД.
// Начать очистку данных в терминале сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//
Процедура НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяТерминалыСбораДанных() Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеВесы

// Устарела: следует использовать ОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов.
// Получает вес с электронных весов.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения - идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//   ОтображатьСообщения     - Булево.
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Ложь) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		МодульОборудованиеВесовоеОборудованиеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
		МодульОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Неопределено); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Весовое оборудование не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеВесовоеОборудованиеКлиент.НачатьУстановкуВесаТарыЭлектронныхВесов.
// Начать установку веса тары на электронных весах.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения - идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//   Вес                     - Число - вес тары.
//
Процедура НачатьУстановкуВесаТары(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, Вес = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		
		МодульОборудованиеВесовоеОборудованиеКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер");
		МодульОборудованиеВесовоеОборудованиеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
		
		ПараметрыОперации = МодульОборудованиеВесовоеОборудованиеКлиентСервер.ПараметрыОперацииЭлектронныеВесы(Вес);
		МодульОборудованиеВесовоеОборудованиеКлиент.НачатьУстановкуВесаТарыЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации); 
		
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Весовое оборудование не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ККТ

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСессииРегистрацииКМ.
// Осуществляет открытие сессии регистрации КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ.
// Осуществляет закрытии сессии регистрации КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ.
// Осуществляет запрос КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры, ДополнительныеПараметры);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ.
// Начать получения результатов запроса КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ.
// Начать подтверждение КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ККТ

// Функция возвращает идентификатор открытой сессии для фискального устройства.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства
// 
// Возвращаемое значение:
//  Неопределено - Сессия проверки кодов маркировки
Функция СессияПроверкиКодовМаркировки(ИдентификаторУстройства) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	ИдентификаторСессии = Неопределено;
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			ИдентификаторСессии = ФискальноеУстройство.ИдентификаторСессии;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСессии;
	
КонецФункции

// Процедура сохраняет идентификатор открытой сессии для фискального устройства.
//
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//  ИдентификаторСессии - Строка
//  ИдентификаторЗапроса - Строка
//
Процедура УстановитьСессиюПроверкиКодовМаркировки(ИдентификаторУстройства, ИдентификаторСессии = Неопределено, ИдентификаторЗапроса = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			ФискальноеУстройство.ИдентификаторСессии = ИдентификаторСессии;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ФискальноеУстройство = Новый Структура();
	ФискальноеУстройство.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ФискальноеУстройство.Вставить("ИдентификаторСессии" , ИдентификаторСессии);
	ФискальноеУстройство.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	ФискальныеУстройства.Добавить(ФискальноеУстройство);
	
КонецПроцедуры

// Функция возвращает проверяет ли устройство код маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор -Идентификатор устройства
// 
// Возвращаемое значение:
//  Структура - Проверка кода маркировки:
//   * ИдентификаторСессии - УникальныйИдентификатор.
//   * ИдентификаторЗапроса - УникальныйИдентификатор.
//
Функция ПроверкаКодаМаркировки(ИдентификаторУстройства) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторСессии");
	Результат.Вставить("ИдентификаторЗапроса");   
	Результат.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			Результат.ИдентификаторСессии  = ФискальноеУстройство.ИдентификаторСессии;
			Результат.ИдентификаторЗапроса = ФискальноеУстройство.ИдентификаторЗапроса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура сохраняет статус проверки кода маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства.
//  ИдентификаторЗапроса - Неопределено - Идентификатор запроса
//
Процедура УстановитьПроверкуКодаМаркировки(ИдентификаторУстройства, ИдентификаторЗапроса = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			   ФискальноеУстройство.ИдентификаторЗапроса = ИдентификаторЗапроса;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Результат проверки кода маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства
//  ИдентификаторСессии - УникальныйИдентификатор - Идентификатор сессии
//  ПараметрыЗапросаКМ -Структура - Параметры запроса КМ.
// 
// Возвращаемое значение:
//  Неопределено - Результат проверки кода маркировки
Функция РезультатПроверкиКодаМаркировки(ИдентификаторУстройства, ИдентификаторСессии, ПараметрыЗапросаКМ) Экспорт
	
	РезультатПроверки  = Неопределено;
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ПроверкиКодаМаркировки = ПодключаемоеОборудование.ПроверкиКодаМаркировки;
	
	Для Каждого ПроверкаКодаМаркировки Из ПроверкиКодаМаркировки Цикл
		Если ПроверкаКодаМаркировки.ИдентификаторУстройства = ИдентификаторУстройства
			И ПроверкаКодаМаркировки.ИдентификаторСессии = ИдентификаторСессии
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.КонтрольнаяМарка = ПараметрыЗапросаКМ.КонтрольнаяМарка  
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.Количество = ПараметрыЗапросаКМ.Количество
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = ПараметрыЗапросаКМ.ПланируемыйСтатусТовара Тогда
				РезультатПроверки = ПроверкаКодаМаркировки.РезультатПроверки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Процедура устанавливает результат проверки кода маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства.
//  ИдентификаторСессии - УникальныйИдентификатор
//  ПараметрыЗапросаКМ - Структура
//  РезультатПроверки - Структура
//  ИдентификаторЗапроса - УникальныйИдентификатор
//
Процедура УстановитьРезультатПроверкиКодаМаркировки(ИдентификаторУстройства, ИдентификаторСессии, ПараметрыЗапросаКМ, РезультатПроверки, ИдентификаторЗапроса = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			   ФискальноеУстройство.ИдентификаторЗапроса = ИдентификаторЗапроса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПроверкиКодаМаркировки = ПодключаемоеОборудование.ПроверкиКодаМаркировки;
	Для Каждого ПроверкаКодаМаркировки Из ПроверкиКодаМаркировки Цикл
		Если ПроверкаКодаМаркировки.ИдентификаторУстройства = ИдентификаторУстройства
			И ПроверкаКодаМаркировки.ИдентификаторСессии = ИдентификаторСессии
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.КонтрольнаяМарка = ПараметрыЗапросаКМ.КонтрольнаяМарка  
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.Количество = ПараметрыЗапросаКМ.Количество
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = ПараметрыЗапросаКМ.ПланируемыйСтатусТовара Тогда
				ПроверкаКодаМаркировки.РезультатПроверки = РезультатПроверки;
			Возврат;
		КонецЕсли;
	КонецЦикла;                             
	
	ПроверкаКодаМаркировки = Новый Структура();
	ПроверкаКодаМаркировки.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ПроверкаКодаМаркировки.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПроверкаКодаМаркировки.Вставить("ПараметрыЗапросаКМ" , ПараметрыЗапросаКМ);
	ПроверкаКодаМаркировки.Вставить("РезультатПроверки"  , РезультатПроверки);  
	
	ПроверкиКодаМаркировки.Добавить(ПроверкаКодаМаркировки);
	
КонецПроцедуры

#КонецОбласти

#Область ОценкаПроизводительности

#Если Не МобильноеПриложениеКлиент Тогда 

// Начинает замер времени если используется подсистема Оценка производительности, если передано значение ПользовательскоеОповещение,
// тогда оно будет подменено оповещением завершения замера, а затем будет вызвано ПользовательскоеОповещение.
// 
// Параметры:
//  КлючеваяОперация - Строка - имя ключевой операции
//  ПользовательскоеОповещение - ОписаниеОповещения - оповещение которое будет подменено
//  ФиксироватьСОшибкой - Булево - признак автоматической фиксации ошибки. 
//  АвтоЗавершение - Истина - признак автоматического завершения замера.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - уникальный идентификатор замера, который позволяет идентифицировать замер.
//
Функция ЗамерВремениБПО(КлючеваяОперация, ПользовательскоеОповещение = Неопределено, ФиксироватьСОшибкой = Ложь, АвтоЗавершение = Ложь) Экспорт
	
	УИДЗамера = Неопределено;
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяОценкаПроизводительности() Тогда
		
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		УИДЗамера = МодульОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация, ФиксироватьСОшибкой, АвтоЗавершение);
		
		КонтекстЗамера = Новый Структура();
		КонтекстЗамера.Вставить("УИДЗамера", УИДЗамера);
		КонтекстЗамера.Вставить("ПользовательскоеОповещение", ПользовательскоеОповещение);
		КонтекстЗамера.Вставить("МодульОценкаПроизводительностиКлиент", МодульОценкаПроизводительностиКлиент);
		// Подменить пользовательское оповещение
		ПользовательскоеОповещение = Новый ОписаниеОповещения("ЗамерВремениБПО_ЗавершениеЗамера", ЭтотОбъект, КонтекстЗамера);
	КонецЕсли;
	
	Возврат УИДЗамера;
	
КонецФункции

// Завершает замер времени если используется подсистема Оценка производительности
// 
// Параметры:
//  УИДЗамера -УникальныйИдентификатор - уникальный идентификатор замера, который позволяет идентифицировать замер.
//  ВыполненСОшибкой - Булево - признак того, что замер не был выполнен до конца.
//
Процедура ЗавершитьЗамерВремениБПО(УИДЗамера, ВыполненСОшибкой = Ложь) Экспорт
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяОценкаПроизводительности() Тогда
		
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера, ВыполненСОшибкой);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура подменяемая в качестве пользовательского оповещения
//
// Параметры:
//  Результат - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании.
//  КонтекстЗамера - Структура - контекст оповещения замера:
//   * УИДЗамера - УникальныйИдентификатор
//   * ПользовательскоеОповещение - ОписаниеОповещения
//   * МодульОценкаПроизводительностиКлиент - ОбщийМодуль
//
Процедура ЗамерВремениБПО_ЗавершениеЗамера(Результат, КонтекстЗамера) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат") Тогда
		ВыполненСОшибкой = Не Результат.Результат;
	Иначе
		ВыполненСОшибкой = Ложь;
	КонецЕсли;
	
	МодульОценкаПроизводительностиКлиент = КонтекстЗамера.МодульОценкаПроизводительностиКлиент;
	МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(КонтекстЗамера.УИДЗамера, ВыполненСОшибкой);
	
	// Выполнить подмененное оповещение
	Если КонтекстЗамера.ПользовательскоеОповещение<>Неопределено Тогда
		ВыполнитьОбработкуОповещения(КонтекстЗамера.ПользовательскоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

// Функция возвращает Истина, если внедрена Библиотека стандартных подсистем
//
// Возвращаемое значение:
//  Булево.
Функция ИспользуетсяБСП() Экспорт
	// СтандартныеПодсистемы.Пользователи - одна из обязательных подсистем БСП при внедрении
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи");
КонецФункции

// Выполняет рекурсивно установку компоненты
// 
// Параметры:
//  Результат - Структура - результат установки компоненты:
//   * Установлено    - Булево - признак установки.
//   * ОписаниеОшибки - Строка - краткое описание ошибки. При отмене пользователем пустая строка.
//  Контекст - Структура
Процедура УстановитьКомпонентуИзМакета(Результат, Контекст) Экспорт
	
	Если Не Результат.Установлено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка установки компоненты: %1'"), Результат.ОписаниеОшибки));
	КонецЕсли;
	
	МакетыДляПереустановки = Контекст.МакетыДляПереустановки;
	Если МакетыДляПереустановки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ПоследнийИндекс = МакетыДляПереустановки.ВГраница();
	ТекущийМакет    = МакетыДляПереустановки[ПоследнийИндекс];
	МакетыДляПереустановки.Удалить(ПоследнийИндекс);

	ОповещениеУстановки = Новый ОписаниеОповещения("УстановитьКомпонентуИзМакета", ЭтотОбъект, Контекст);
	ОбщегоНазначенияКлиент.УстановитьКомпонентуИзМакета(ОповещениеУстановки, ТекущийМакет);
	
КонецПроцедуры

#Область ПанельАдминистрирования

// Обработчик команды формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//   Команда - КомандаФормы - выполняемая команда.
//   Источник - ТаблицаФормы
//            - ДанныеФормыСтруктура - объект или список формы с полем "Ссылка".
//
Процедура НачатьВыполнениеКомандыПанелиАдминистрирования(Форма, Команда, Источник) Экспорт
	ИмяКоманды = Команда.Имя;
	АдресНастроек = Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	ОписаниеКоманды = МенеджерОборудованияКлиентПовтИсп.ОписаниеКомандыПанелиАдминистрирования(ИмяКоманды, АдресНастроек);
	
	ПараметрыВыполнения = ПараметрыВыполненияКоманды();
	ПараметрыВыполнения.ОписаниеКоманды = Новый Структура(ОписаниеКоманды);
	ПараметрыВыполнения.Форма           = Форма;
	ПараметрыВыполнения.Источник        = Источник;
	ПараметрыВыполнения.ЭтоФормаОбъекта = ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура");
	
	ПараметрыВыполнения.ВызовСервераЧерезОбработкуОповещения = Истина;
	
	ПродолжитьВыполнениеКоманды(ПараметрыВыполнения);
КонецПроцедуры

#КонецОбласти

Функция ДопустимаУстановкаКомпоненты(ИмяМакета) Экспорт
	#Если ВебКлиент Тогда
	Если ИспользуетсяБСП() Тогда
		Реквизиты = МенеджерОборудованияВызовСервера.СовместимостьВнешнейКомпонентыИзФайла(ИмяМакета);
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Результат = ТекущийКлиентПоддерживаетсяКомпонентой(Реквизиты);
			Возврат Результат = Истина; // Результат может содержать Неопределено
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	#Иначе
	Возврат Истина;
	#КонецЕсли
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразовать список строкой в массив.
// 
// Параметры:
//  Строка - список полей через запятую
//
// Возвращаемое значение:
//  Массив из Строка.
//
Функция ПреобразоватьСписокСтрокойВМассив(Источник)
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Возвращает структуру результат установки компоненты
Функция РезультатУстановкиКомпоненты()
	
	Результат = Новый Структура;
	Результат.Вставить("Установлено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Возврат Результат;
	
КонецФункции

#Область ВыполнениеКоманды

// Завершение выполнение команды
// 
// Параметры:
//  РезультатОперации - Структура
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ЗавершениеВыполнениеКоманды(РезультатОперации, ПараметрыВыполнениеКоманды);
	
	Если ПараметрыВыполнениеКоманды.СообщенияВСлужбуТехническойПоддержки 
		И МенеджерОборудованияКлиентПовтИсп.ИспользуетсяСообщенияВСлужбуТехническойПоддержки() Тогда
		
		МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиБПОКлиент");
		Если Не РезультатОперации.Результат Тогда
			
			ПараметрыВыполнениеКоманды.Вставить("РезультатВыполненияОперации", РезультатОперации);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполнениеКоманды_ПроверкаРезультата", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			
			ДополнительныеДанные = Новый Структура();
			ДополнительныеДанные.Вставить("Операция",          ПараметрыВыполнениеКоманды.Команда);
			ДополнительныеДанные.Вставить("ОписаниеОшибки",    РезультатОперации.ОписаниеОшибки);
			ДополнительныеДанные.Вставить("ПараметрыОперации", ПараметрыВыполнениеКоманды.ПараметрыОперации);
			
			ТекстВопроса = СтрШаблон(НСтр("ru = '%1
				|
				|Подготовить сообщение об ошибке разработчику?'"), РезультатОперации.ОписаниеОшибки);
			
			Параметры = МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ПараметрыОтправкиСообщенияОбОшибке();
			Параметры.Вставить("ИдентификаторОборудования", ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			Параметры.Вставить("ТекстОшибки",               РезультатОперации.ОписаниеОшибки);
			Параметры.Вставить("ДополнительныеДанные",      ДополнительныеДанные);
			Параметры.Вставить("ТекстВопроса",              ТекстВопроса);
			
			МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ПоказатьВопросОправкиСообщенияОбОшибке(ОписаниеОповещения, Параметры);
				
			Возврат; // Вызов оповещения будет выполнен в процедуре ОперацияНаУстройствеПроверкаРезультатаЗавершение
			
		КонецЕсли;
	КонецЕсли;  
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации); 
	
КонецПроцедуры       

// Завершает проверку результата операции
// 
// Параметры:
//  Результат - см. СообщенияВСлужбуТехническойПоддержкиБПОКлиент.РезультатОперации
//  ПараметрыВыполнениеКоманды - см. ПараметрыПроверкиРезультатаОперации     
//
Процедура ЗавершениеВыполнениеКоманды_ПроверкаРезультата(Результат, ПараметрыВыполнениеКоманды) Экспорт
	
	Если ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, ПараметрыВыполнениеКоманды.РезультатВыполненияОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределеннаяФискализации

Функция ПолучитьДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств)
	
	ИдентификаторУстройстваККТ = Неопределено;
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияКлиентПереопределяемый.ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат ИдентификаторУстройстваККТ;
	КонецЕсли;
	
	Для Каждого Устройство Из СписокУстройств Цикл
		Если  Устройство.ПараметрыРегистрации.Свойство("ОрганизацияИНН") И Устройство.ПараметрыРегистрации.Свойство("КодыСистемыНалогообложения") Тогда 
			УстройствоОрганизацияИНН = Устройство.ПараметрыРегистрации.ОрганизацияИНН; 
			УстройствоКодыНалогообложения = СтрРазделить(Устройство.ПараметрыРегистрации.КодыСистемыНалогообложения, ",");
			ОрганизацияИНН = РеквизитыЧека.ОрганизацияИНН;
			
			Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
				Если Устройство.ИспользуетсяФН36 И РеквизитыЧека.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН") Тогда
					СистемаНалогообложения = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД"));
				Иначе
					СистемаНалогообложения = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(РеквизитыЧека.СистемаНалогообложения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если УстройствоКодыНалогообложения.Найти(Строка(СистемаНалогообложения)) <> Неопределено 
				И УстройствоОрганизацияИНН = ОрганизацияИНН Тогда
					ИдентификаторУстройстваККТ = Устройство.Ссылка;
					Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторУстройстваККТ;
	
КонецФункции

#КонецОбласти

#Область УпрощениеНастройкиПараметров

// Возвращает словарь реквизитов и возможных вариантов имен параметров производителя драйверов
//
// Возвращаемое значение:
//  см. МенеджерОборудованияКлиентПовтИсп.СловарьКлючевыхСвойств
Функция СловарьКлючевыхСвойств() 
	
	Возврат МенеджерОборудованияКлиентПовтИсп.СловарьКлючевыхСвойств();
	
КонецФункции

// Возвращает имя параметра по имени параметра указанного в файле XML
//
// Параметры:
//  ИмяПараметраXML - Строка - имя параметра оборудования заданное в файле XML
//
// Возвращаемое значение:
//  Строка, Неопределено - если имя параметра найдено в словаре, возвращает имя стандартного параметра
Функция ИмяКлючевогоПараметра(ИмяПараметраXML, Преобразование = Неопределено)
	
	Словарь = СловарьКлючевыхСвойств();
	
	Для Каждого КлючЗначение Из Словарь Цикл
		Если КлючЗначение.Значение.Свойство(ИмяПараметраXML, Преобразование) Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру атрибуты параметра
//
// Возвращаемое значение:
//  Структура:
//   * Стандартный - Булево - реквизит предусмотрен стандартами БПО
//   * ИмяПараметраXML - Строка - имя параметра как оно задано у производителя оборудования
//   * ИмяПараметра - Строка - имя стандартного параметра
//   * ИмяРеквизита - Строка - имя реквизита, под которым хранится значение данного параметра в справочнике
//   * ТолькоЧтение - Булево - параметр только для чтения
//   * Тип - Тип - Тип значения параметра (Число, Строка, Булево)
//   * Заголовок - Строка - заголовок параметра
//   * ЗначениеПоУмолчанию - Число, Строка, Булево - значение параметра по умолчанию
//   * Описание - Строка - описание параметра
//   * СтрокаФорматирования - Строка - строка форматирования параметра
//   * СписокВыбора - СписокЗначений - возможные варианты значения параметра
// 
Функция НовыйАтрибутыПараметра()
	
	Результат = Новый Структура();
	Результат.Вставить("Стандартный",          Ложь);
	Результат.Вставить("ЗначениеСтандартного", "");
	Результат.Вставить("ИмяПараметраXML",      "");
	Результат.Вставить("ИмяПараметра",         "");
	Результат.Вставить("ИмяРеквизита",         "");
	Результат.Вставить("ТолькоЧтение",         Ложь);
	Результат.Вставить("Тип",                  Тип("Число"));
	Результат.Вставить("Заголовок",            "");
	Результат.Вставить("ЗначениеПоУмолчанию",  "");
	Результат.Вставить("Описание",             "");
	Результат.Вставить("СтрокаФорматирования", "");
	Результат.Вставить("СписокВыбора",         Новый СписокЗначений());
	Результат.Вставить("Преобразование",       "");
	
	Возврат Результат;
КонецФункции

// Возвращает структуру атрибуты параметра
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - открытый для чтения объект XML
//
// Возвращаемое значение:
//  Структура - см. НовыйАтрибутыПараметра
Функция ПрочитатьАтрибутыПараметра(ЧтениеXML)
	
	ИмяПараметраXML =  ЧтениеXML.ЗначениеАтрибута("Name");
	Преобразование  = Неопределено;
	ИмяПараметра    = ИмяКлючевогоПараметра(ИмяПараметраXML, Преобразование);
	Если ИмяПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеАтрибута = ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly"));
	ТолькоЧтение     = (ЗначениеАтрибута = "TRUE" Или ЗначениеАтрибута = "ИСТИНА");
	
	ЗначениеАтрибута = ВРег(ЧтениеXML.ЗначениеАтрибута("TypeValue"));
	ПараметрТип      = ?(НЕ ПустаяСтрока(ЗначениеАтрибута), ЗначениеАтрибута, "STRING");
	
	Результат = НовыйАтрибутыПараметра();
	Результат.ИмяПараметраXML = ИмяПараметраXML;
	Результат.ИмяПараметра    = ИмяПараметра;
	Результат.Тип             = Тип(ПараметрТип);
	Результат.ТолькоЧтение    = ТолькоЧтение;
	Результат.ИмяРеквизита    = ?(ТолькоЧтение, "R_", "P_") + ИмяПараметраXML;
	Результат.Заголовок       = ЧтениеXML.ЗначениеАтрибута("Caption");
	Результат.Описание        = ЧтениеXML.ЗначениеАтрибута("Description");
	Результат.Преобразование  = Преобразование;
	Результат.ЗначениеПоУмолчанию  = ЧтениеXML.ЗначениеАтрибута("DefaultValue");
	Результат.СтрокаФорматирования = ЧтениеXML.ЗначениеАтрибута("FieldFormat");
	
	Возврат Результат;
КонецФункции

// Заполняет список выбора в атрибутах параметра из XML
//
// Параметры:
//  АтрибутыПараметра - Структура - в которую нужно занести список выбора
//  ЧтениеXML - ЧтениеXML - открытый для чтения объект XML
Процедура ПрочитатьСписокВыбора(АтрибутыПараметра, ЧтениеXML)
	
	#Если Не ВебКлиент Тогда
	СписокВыбора = Новый СписокЗначений();
	АтрибутыПараметра.Вставить("СписокВыбора", СписокВыбора);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "ChoiceList" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда  
			Прервать;
		ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Значение = ЧтениеXML.ЗначениеАтрибута("Value");
		ИначеЕсли ЧтениеXML.Имя = "#text" И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда  
			Представление = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда  
			СписокВыбора.Добавить(Значение, Представление);
		КонецЕсли;
	КонецЦикла;
	#КонецЕсли

КонецПроцедуры

// Заполнить структуру стандартных параметров по описанию интерфейса
//
// Параметры:
//  ОписаниеИнтерфейса - Строка - строка XML в которой находится описание интерфейса
//  КлючевыеПараметры - Структура - структура содержащая найденные ключевые параметры и их атрибуты
Процедура ПрочитатьАтрибутыКлючевыхПараметров(ОписаниеИнтерфейса, КлючевыеПараметры)
	
	#Если Не ВебКлиент Тогда
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ОписаниеИнтерфейса);
	ЧтениеXML.ПерейтиКСодержимому();
	
	АтрибутыПараметра = Неопределено;
	Если ЧтениеXML.Имя = "Settings" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "ChoiceList" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				Если АтрибутыПараметра <> Неопределено Тогда
					ПрочитатьСписокВыбора(АтрибутыПараметра, ЧтениеXML);
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "Parameter" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				АтрибутыПараметра = ПрочитатьАтрибутыПараметра(ЧтениеXML);
				Если АтрибутыПараметра <> Неопределено Тогда
					КлючевыеПараметры.Вставить(АтрибутыПараметра.ИмяПараметра, АтрибутыПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьПараметрЛогДрайвераВключен(КлючевыеПараметры, Значение)
	
	АтрибутыПараметра = НовыйАтрибутыПараметра();
	АтрибутыПараметра.Стандартный     = Истина;
	АтрибутыПараметра.ИмяПараметраXML = "";
	АтрибутыПараметра.ИмяПараметра    = "LogEnabled";
	АтрибутыПараметра.Тип             = Тип("Булево");
	АтрибутыПараметра.ТолькоЧтение    = Истина;
	АтрибутыПараметра.ИмяРеквизита    = "";
	АтрибутыПараметра.Заголовок       = НСтр("ru = 'Включен лог'");
	АтрибутыПараметра.Описание        = "";
	АтрибутыПараметра.Преобразование  = "";
	АтрибутыПараметра.ЗначениеСтандартного = Значение;
	АтрибутыПараметра.ЗначениеПоУмолчанию  = Ложь;
	АтрибутыПараметра.СтрокаФорматирования = "";
	
	КлючевыеПараметры.Вставить(АтрибутыПараметра.ИмяПараметра, АтрибутыПараметра);

КонецПроцедуры

Процедура ДобавитьПараметрЛогДрайвераПутьКФайлу(КлючевыеПараметры, Значение)
	
	АтрибутыПараметра = НовыйАтрибутыПараметра();
	АтрибутыПараметра.Стандартный     = Истина;
	АтрибутыПараметра.ИмяПараметраXML = "";
	АтрибутыПараметра.ИмяПараметра    = "LogPath";
	АтрибутыПараметра.Тип             = Тип("Строка");
	АтрибутыПараметра.ТолькоЧтение    = Истина;
	АтрибутыПараметра.ИмяРеквизита    = "";
	АтрибутыПараметра.Заголовок       = НСтр("ru = 'Путь к log-файлу'");
	АтрибутыПараметра.Описание        = "";
	АтрибутыПараметра.Преобразование  = "";
	АтрибутыПараметра.ЗначениеСтандартного = Значение;
	АтрибутыПараметра.ЗначениеПоУмолчанию  = "";
	АтрибутыПараметра.СтрокаФорматирования = "";
	
	КлючевыеПараметры.Вставить(АтрибутыПараметра.ИмяПараметра, АтрибутыПараметра);

КонецПроцедуры

#КонецОбласти

#Область ОценкаПроизводительности

#Если Не МобильноеПриложениеКлиент Тогда 

// Выполняет проверку существования параметра клиента "ОценкаПроизводительности", если параметр
// отсутствует, тогда происходит обращение к серверу, для получения этих сведений. Что нельзя допускать при 
// завершении работы системы.
//
// Возвращаемое значение:
//  Булево
Функция СуществуетПараметрКлиентаОценкаПроизводительности()
	
	Попытка // проверка при отсутствии БСП
		Результат = Вычислить("ПараметрыПриложения");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ИмяПараметраСтандартныеПодсистемы = "СтандартныеПодсистемы.ПараметрыКлиента";
	Если ТипЗнч(Результат)<>Тип("Соответствие") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат[ИмяПараметраСтандартныеПодсистемы] = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Результат[ИмяПараметраСтандартныеПодсистемы].Свойство("ОценкаПроизводительности");
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область ПанельАдминистрирования

// Свойства второго параметра обработчика подключаемой команды, выполняемой на клиенте.
//
// Возвращаемое значение:
//  Структура:
//   * ОписаниеКоманды - Структура - состав свойств совпадает с колонками таблицы значений параметра Команды процедуры
///                                  ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//                                   Ключевые свойства:
//      ** Идентификатор  - Строка - идентификатор команды.
//      ** Представление  - Строка - представление команды в форме.
//      ** Имя            - Строка - имя команды в форме.
//      ** ДополнительныеПараметры - Структура - дополнительные свойства, состав которых определяется видом 
//                                   конкретной команды.
//   * Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана команда.
//           - РасширениеУправляемойФормыДляДокумента
//   * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//   * Источник - ТаблицаФормы
//              - ДанныеФормыСтруктура - объект или список формы с полем "Ссылка":
//     ** Ссылка - ЛюбаяСсылка
//
Функция ПараметрыВыполненияКоманды()
	
	Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияКомандыПанелиАдминистрирования();

	Результат.Вставить("Уникальность");
	Результат.Вставить("Окно");
	
	// Служебные параметры.
	Результат.Вставить("ТребуетсяЗапись", Ложь);
	Результат.Вставить("ТребуетсяПроведение", Ложь);
	Результат.Вставить("ТребуетсяРаботаСФайлами", Ложь);
	Результат.Вставить("МассивСсылок", Новый Массив);
	Результат.Вставить("ВызовСервераЧерезОбработкуОповещения", Ложь);
	Результат.Вставить("НепроведенныеДокументы", Новый Массив);
	Возврат Результат;
	
КонецФункции

// Выполняет команду, подключенную к форме.
//
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияКоманды
// 
Процедура ПродолжитьВыполнениеКоманды(ПараметрыВыполнения)
	
	ОписаниеКоманды = ПараметрыВыполнения.ОписаниеКоманды;
	
	// Выполнение команды.
	ПараметрКоманды = Неопределено;
	// Выполнение команды.
	Если ОписаниеКоманды.Серверная Тогда
		Результат = Новый Структура;
		
		СерверныйКонтекст = Новый Структура;
		СерверныйКонтекст.Вставить("ПараметрКоманды", ПараметрКоманды);
		СерверныйКонтекст.Вставить("ИмяКомандыВФорме", ОписаниеКоманды.ИмяВФорме);
		СерверныйКонтекст.Вставить("Результат", Результат);
		
		Если ПараметрыВыполнения.ВызовСервераЧерезОбработкуОповещения Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПродолжитьВыполнениеКомандыНаСервере", ПараметрыВыполнения.Форма);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СерверныйКонтекст);
			Результат = СерверныйКонтекст.Результат;
		Иначе
			ПараметрыВыполнения.Форма.Подключаемый_ВыполнитьКомандуНаСервере(СерверныйКонтекст, Результат);
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Текст) Тогда
			ПоказатьПредупреждение(, Результат.Текст);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
			Если СтрНачинаетсяС(ОписаниеКоманды.Обработчик, "e1cib") Тогда
				
				// Нужно проверять по подсистеме БазоваяФункциональность, но эта подсистема частично загружена в БПО
				Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
					МодульФайловаяСистемаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ФайловаяСистемаКлиент");
					МодульФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ОписаниеКоманды.Обработчик);
				Иначе
					Если МенеджерОборудованияКлиентСервер.СтрокаЗапускаБезопасная(ОписаниеКоманды.Обработчик) Тогда
						ПерейтиПоНавигационнойСсылке(ОписаниеКоманды.Обработчик); // АПК:534 произведена проверка запуска
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ОписаниеКоманды.Обработчик, "://")>0 Тогда
				
				// Нужно проверять по подсистеме БазоваяФункциональность, но эта подсистема частично загружена в БПО
				Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
					МодульФайловаяСистемаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ФайловаяСистемаКлиент");
					МодульФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ОписаниеКоманды.Обработчик);
				Иначе
					Если МенеджерОборудованияКлиентСервер.СтрокаЗапускаБезопасная(ОписаниеКоманды.Обработчик) Тогда
						ПерейтиПоНавигационнойСсылке(ОписаниеКоманды.Обработчик); // АПК:534 произведена проверка запуска
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				МассивПодстрок = СтрРазделить(ОписаниеКоманды.Обработчик, ".");
				Если МассивПодстрок.Количество() = 1 Тогда
					ПараметрыФормы = ПараметрыФормы(ПараметрыВыполнения, ПараметрКоманды);
					// АПК:65-выкл ПолучитьФорму используется для вызова обработчика описания оповещения
					КлиентскийМодуль = ПолучитьФорму(ОписаниеКоманды.ИмяФормы, ПараметрыФормы, ПараметрыВыполнения.Форма, Истина);
					// АПК:65-вкл
					ИмяПроцедуры = ОписаниеКоманды.Обработчик;
				Иначе
					КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
					ИмяПроцедуры = МассивПодстрок[1];
				КонецЕсли;
				ПараметрыВыполнения.Уникальность = ПараметрыВыполнения.Форма.УникальныйИдентификатор;
				Обработчик = Новый ОписаниеОповещения(ИмяПроцедуры, КлиентскийМодуль, ПараметрыВыполнения);
				ВыполнитьОбработкуОповещения(Обработчик, ПараметрКоманды);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормы) Тогда
			ПараметрыФормы = ПараметрыФормы(ПараметрыВыполнения, ПараметрКоманды);
			ОткрытьФорму(ОписаниеКоманды.ИмяФормы, ПараметрыФормы, ПараметрыВыполнения.Форма, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Формирует параметры формы подключенного объекта в контексте выполняемой команды.
Функция ПараметрыФормы(Контекст, ПараметрКоманды)
	Результат = Контекст.ОписаниеКоманды.ПараметрыФормы;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Результат = Новый Структура;
	КонецЕсли;
	Контекст.ОписаниеКоманды.Удалить("ПараметрыФормы");
	Результат.Вставить("ОписаниеКоманды", Контекст.ОписаниеКоманды);
	Если ПустаяСтрока(Контекст.ОписаниеКоманды.ИмяПараметраФормы) Тогда
		Результат.Вставить("ПараметрКоманды", ПараметрКоманды);
	Иначе
		МассивИмен = СтрРазделить(Контекст.ОписаниеКоманды.ИмяПараметраФормы, ".", Ложь);
		Узел = Результат;
		ВГраница = МассивИмен.ВГраница();
		Для Индекс = 0 По ВГраница-1 Цикл
			Имя = СокрЛП(МассивИмен[Индекс]);
			Если Не Узел.Свойство(Имя) Или ТипЗнч(Узел[Имя]) <> Тип("Структура") Тогда
				Узел.Вставить(Имя, Новый Структура);
			КонецЕсли;
			Узел = Узел[Имя];
		КонецЦикла;
		Узел.Вставить(МассивИмен[ВГраница], ПараметрКоманды);
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

Функция ТекущийКлиентПоддерживаетсяКомпонентой(Реквизиты)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Браузер = Неопределено;
#Если ВебКлиент Тогда
	Строка = СистемнаяИнформация.ИнформацияПрограммыПросмотра;
	
	Если СтрНайти(Строка, "Chrome/") > 0 Тогда
		Браузер = "Chrome";
	ИначеЕсли СтрНайти(Строка, "MSIE") > 0 Тогда
		Браузер = "MSIE";
	ИначеЕсли СтрНайти(Строка, "Safari/") > 0 Тогда
		Браузер = "Safari";
	ИначеЕсли СтрНайти(Строка, "Firefox/") > 0 Тогда
		Браузер = "Firefox";
	КонецЕсли;
#КонецЕсли
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Реквизиты.Linux_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Реквизиты.Linux_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Реквизиты.Linux_x86_Chrome;
		КонецЕсли;
			
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Реквизиты.Linux_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Реквизиты.Linux_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Реквизиты.Linux_x86_64_Chrome;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Реквизиты.MacOS_x86_64;
		КонецЕсли;
		
		Если Браузер = "Safari" Тогда
			Возврат Реквизиты.MacOS_x86_64_Safari;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Реквизиты.MacOS_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Реквизиты.MacOS_x86_64_Chrome;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Реквизиты.Windows_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Реквизиты.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Реквизиты.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат Реквизиты.Windows_x86_MSIE;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Реквизиты.Windows_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Реквизиты.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Реквизиты.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат Реквизиты.Windows_x86_64_MSIE;
		КонецЕсли;
	
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
		// В браузере может быть неправильно определен тип платформы.
	
		Если Браузер = "Firefox" Тогда
			Возврат Реквизиты.MacOS_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Реквизиты.MacOS_x86_64_Chrome;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

