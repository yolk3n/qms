
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Инициализирует список электронных подписей в форме объекта.
//
Процедура ПриСозданииНаСервере(Форма, ГруппаЭлектронныеПодписи) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписиБольничнаяАптека") Тогда
		Возврат;
	КонецЕсли;
	
	Описание = УправляемаяФорма.ПрочитатьОписаниеФормыИзСтроки(ОписаниеЭлементовФормы(ГруппаЭлектронныеПодписи.Имя));
	УправляемаяФорма.СоздатьЭлементы(Форма, Описание);
	
	ГруппаЭлектронныеПодписи.Видимость = Ложь;
	Если Не Форма.Объект.Ссылка.Пустая() Тогда
		ЗаполнитьПодписи(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак использования электронных подписей для предмета.
//
// Возвращаемое значение:
//  Булево - Истина, если подписи используются.
//
Функция ИспользоватьЭлектронныеПодписи(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предмет)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Метаданные.РегистрыСведений.ЭлектронныеПодписиБольничнаяАптека.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Предмет));
	
КонецФункции

// Возвращает данные предмета для электронной подписи.
//
// Параметры:
//  Предмет - Ссылка - предмет для электронной подписи.
//
// Возвращаемое значение:
//  ДанныеДляПодписи - ДвоичныеДанные - данные предмета для электронной подписи.
//
Функция ПолучитьДанныеПредметаДляПодписи(Предмет, Версия = Неопределено) Экспорт
	
	ОписаниеКлючевыхПолей = ОписаниеКлючевыхПолей(Предмет, Версия);
	КлючевыеПоля          = СформироватьНаборКлючевыхПолей(Предмет, ОписаниеКлючевыхПолей);
	ДанныеДляПодписи      = СформироватьДанныеДляПодписи(КлючевыеПоля);
	
	Возврат ДанныеДляПодписи;
	
КонецФункции

// Возвращает все подчиненные файлы предмета электронной подписи.
//
// Параметры:
//  Предмет - Ссылка - документ-владелец подчиненных фалов.
//
// Возвращаемое значение:
//  Массив - коллекция подчиненных файлов.
//
Функция ПолучитьВсеПодчиненныеФайлы(Предмет) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(Предмет)) Тогда
		Возврат РаботаСФайламиСлужебный.ПрисоединенныеФайлыКОбъекту(Предмет);
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

// Заносит информацию о массиве ЭП.
//
// Параметры:
//  ПодписанныеДанные - Массив
//   * ПодписанныйОбъект - Ссылка - подписанный объект.
//   * СвойстваПодписи   - Структура - данные электронной подписи.
//  ИдентификаторФормы - УникальныйИдентификатор
//
Процедура ЗанестиИнформациюОПодписях(ПодписанныеДанные, ИдентификаторФормы = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого Данные Из ПодписанныеДанные Цикл
			
			ПодписанныйОбъект = Данные.ПодписанныйОбъект;
			СвойстваПодписи = Данные.СвойстваПодписи;
			
			Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭтоФайл(ПодписанныйОбъект) Тогда
				
				РаботаСФайлами.ДобавитьПодписьКФайлу(ПодписанныйОбъект, СвойстваПодписи, ИдентификаторФормы);
				
			Иначе
				
				ЗанестиИнформациюОПодписи(ПодписанныйОбъект, СвойстваПодписи);
				
				ЕстьПодписанЭП = ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодписанЭП", ПодписанныйОбъект.Метаданные());
				Если ЕстьПодписанЭП Тогда
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
						Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписанныйОбъект, "ПодписанЭП") Тогда
							Объект = ПодписанныйОбъект.ПолучитьОбъект();
							ЗаблокироватьДанныеДляРедактирования(ПодписанныйОбъект,, ИдентификаторФормы);
							Объект.ПодписанЭП = Истина;
							Объект.ОбменДанными.Загрузка = Истина;
							Объект.Записать();
							РазблокироватьДанныеДляРедактирования(ПодписанныйОбъект, ИдентификаторФормы);
						КонецЕсли;
					ИначеЕсли Не ПодписанныйОбъект.ПодписанЭП Тогда
						ПодписанныйОбъект.ПодписанЭП = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет информацию о ЭП.
//
Процедура ЗанестиИнформациюОПодписи(ПодписанныеДанные, СвойстваПодписиАргумент) Экспорт
	
	СвойстваПодписи = СвойстваПодписиАргумент;
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
	КонецЕсли;
	
	ПодписьЗагруженаИзФайла = (СвойстваПодписи.ДатаПодписи = Неопределено);
	
	ДатаПодписиИзФайла = ЭлектроннаяПодпись.ДатаПодписания(СвойстваПодписи.Подпись);
	
	// Устанавливаем текущую дату сеанса в качестве даты создания подписи,
	// если последнюю не получилось извлечь из двоичных данных.
	Если ЗначениеЗаполнено(ДатаПодписиИзФайла) Тогда
		ДатаПодписи = ДатаПодписиИзФайла;
	ИначеЕсли ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = СвойстваПодписи.ДатаПодписи;
	Иначе
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиБольничнаяАптека.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.Объект = ПодписанныеДанные;
	МенеджерЗаписи.УстановившийПодпись = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Комментарий = СвойстваПодписи.Комментарий;
	МенеджерЗаписи.КомуВыданСертификат = СвойстваПодписи.КомуВыданСертификат;
	МенеджерЗаписи.Отпечаток = СвойстваПодписи.Отпечаток;
	МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(СвойстваПодписи.Подпись);
	МенеджерЗаписи.Сертификат = Новый ХранилищеЗначения(СвойстваПодписи.Сертификат); 
	
	// Сразу устанавливаем статус проверки подписи, созданной в программе.
	Если Не ПодписьЗагруженаИзФайла Тогда
		МенеджерЗаписи.ДатаПроверкиПодписи = ДатаПодписи;
		МенеджерЗаписи.ПодписьВерна = Истина;
		МенеджерЗаписи.СертификатДействителен = Истина;
	КонецЕсли;
	
	ЭлектроннаяПодписьБольничнаяАптекаПереопределяемый.ПриОпределенииВерсииСоставаКлючевыхПолейОбъекта(ПодписанныеДанные, МенеджерЗаписи.Версия);
	Если МенеджерЗаписи.Версия = 0 Тогда
		МенеджерЗаписи.Версия = 1; // актуальная версия подписываемых данных на текущий момент
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	
	СвойстваСертификата = ОписаниеСертификата(СвойстваПодписи.Сертификат, СвойстваПодписи.КомуВыданСертификат);
	ОписаниеПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОписанияПодписи(),
		ДатаПодписи,
		СвойстваСертификата.СерийныйНомер,
		СвойстваСертификата.КемВыдан,
		СвойстваСертификата.КомуВыдан,
		СвойстваСертификата.ДатаНачала,
		СвойстваСертификата.ДатаОкончания,
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваПодписи, "УточнениеПодписи", ""));
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Электронная подпись.Установка подписи'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		ПодписанныеДанные,
		ОписаниеПодписи,
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

// Удаляет выделенные ЭП.
//
Процедура УдалитьПодписиИОбновитьСписок(Форма) Экспорт
	
	ВсеОбъекты = Новый Соответствие; // соответствие объекта и идентификаторов подписей
	ТаблицаПодписей = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ТаблицаПодписей(Форма);
	ВыделенныеСтроки = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(Форма).ВыделенныеСтроки;
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И Не ДанныеСтроки.Объект.Пустая() Тогда
			
			Если ДанныеСтроки.УникальныйИдентификатор = Неопределено
			 Или ТипЗнч(ДанныеСтроки.УникальныйИдентификатор) = Тип("УникальныйИдентификатор") И Не ЗначениеЗаполнено(ДанныеСтроки.УникальныйИдентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокПодписей = ВсеОбъекты.Получить(ДанныеСтроки.Объект);
			
			Если СписокПодписей = Неопределено Тогда
				СписокПодписей = Новый Массив;
			КонецЕсли;
			
			СписокПодписей.Добавить(ДанныеСтроки.УникальныйИдентификатор);
			
			ВсеОбъекты.Вставить(ДанныеСтроки.Объект, СписокПодписей);
			
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторФормы = Форма.УникальныйИдентификатор;
	Для Каждого КлючЗначение Из ВсеОбъекты Цикл
		
		ТекущийОбъектСсылка = КлючЗначение.Ключ;
		ИдентификаторыПодписей = КлючЗначение.Значение;
		
		Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭтоФайл(ТекущийОбъектСсылка) Тогда
			ЭлектроннаяПодпись.УдалитьПодпись(ТекущийОбъектСсылка, ИдентификаторыПодписей, ИдентификаторФормы);
		Иначе
			УдалитьПодписиПредмета(ТекущийОбъектСсылка, ИдентификаторыПодписей, ИдентификаторФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеОбъекты.Количество() > 0 Тогда
		ЗаполнитьПодписи(Форма);
	КонецЕсли;
	
	Форма.Прочитать();
	
КонецПроцедуры

// Удаляет выделенные электронной подписи.
//
// Параметры:
//  Предмет              - Ссылка - предмет удаления электронной подписи.
//  ИдентификаторПодписи - УникальныйИдентификатор, Массив(УникальныйИдентификатор) - идентификаторы удаляемых электронных подписей,
//                                     если не задан, то будут удалены все подписи.
//  ИдентификаторФормы   - УникальныйИдентификатор
//
Процедура УдалитьПодписиПредмета(Предмет, ИдентификаторПодписи = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если ИдентификаторПодписи = Неопределено Тогда
			ПодписиПредмета = ПолучитьЭлектронныеПодписи(Предмет);
			Пока ПодписиПредмета.Следующий() Цикл
				ОписаниеУдаляемойПодписи = "";
				УдалитьСтрокуПодписи(Предмет, ПодписиПредмета.УникальныйИдентификатор, ОписаниеУдаляемойПодписи);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ИдентификаторПодписи) = Тип("Массив") Тогда
			Для Каждого Идентификатор Из ИдентификаторПодписи Цикл
				ОписаниеУдаляемойПодписи = "";
				УдалитьСтрокуПодписи(Предмет, Идентификатор, ОписаниеУдаляемойПодписи);
			КонецЦикла;
		Иначе
			ОписаниеУдаляемойПодписи = "";
			УдалитьСтрокуПодписи(Предмет, ИдентификаторПодписи, ОписаниеУдаляемойПодписи);
		КонецЕсли;
		
		ЕстьПодписанЭП = ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодписанЭП", Предмет.Метаданные());
		Если ЕстьПодписанЭП И КоличествоПодписей(Предмет) = 0 И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ПодписанЭП") Тогда
			ЗаблокироватьДанныеДляРедактирования(Предмет,, ИдентификаторФормы);
			ОбъектДанных = Предмет.ПолучитьОбъект();
			ОбъектДанных.ПодписанЭП = Ложь;
			ОбъектДанных.ОбменДанными.Загрузка = Истина;
			ОбъектДанных.Записать();
			РазблокироватьДанныеДляРедактирования(Предмет, ИдентификаторФормы);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись.Ошибка удаления подписи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Предмет,
			ОписаниеУдаляемойПодписи + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сравнивает данные ключевых полей перед записью нового объекта.
//
// Параметры:
//  ТекущаяВерсия    - Объект - новая версия предмета электронной подписи.
//  ПредыдущаяВерсия - Ссылка - предыдущая версия предмета электронной подписи.
//
Процедура ПроверитьИзмененностьКлючевыхПолей(ТекущаяВерсия, ПредыдущаяВерсия) Экспорт
	
	ОписаниеКлючевыхПолей = ОписаниеКлючевыхПолей(ТекущаяВерсия.Ссылка);
	
	// Проверим только изменение ключевых реквизитов самого объекта
	ОписаниеКлючевыхПолей.Файлы = Ложь;
	ОписаниеКлючевыхПолей.НаборыЗаписей.Очистить();
	
	ДанныеТекущейВерсии = СформироватьНаборКлючевыхПолей(ТекущаяВерсия, ОписаниеКлючевыхПолей);
	ДанныеПредыдущейВерсии = СформироватьНаборКлючевыхПолей(ПредыдущаяВерсия, ОписаниеКлючевыхПолей);
	
	КлючевыеДанныеИзменились = Не ОбщегоНазначения.ДанныеСовпадают(ДанныеТекущейВерсии, ДанныеПредыдущейВерсии);
	
	Если КлючевыеДанныеИзменились Тогда
		ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
	КонецЕсли;
	
КонецПроцедуры

// Переносит результаты проверки электронных подписей.
//
// Параметры:
//  ПодписиВФорме   - ДанныеФормыКоллекция - данные электронных подписей на форме.
//  ПодписиВОбъекте - ТабличнаяЧасть.ЭлектронныеПодписи - данные электронных подписей в объекте.
//
Процедура ПеренестиРезультатыПроверкиПодписей(ПодписиВФорме, ПодписиВОбъекте) Экспорт
	
	Если ПодписиВФорме.Количество() <> ПодписиВОбъекте.Количество() Тогда
		Возврат; // Если объект был изменен, результаты проверки не переносятся.
	КонецЕсли;
	
	Если ПодписиВФорме.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = Новый Структура("ДатаПроверкиПодписи, ПодписьВерна", Null, Null);
	ЗаполнитьЗначенияСвойств(Свойства, ПодписиВОбъекте[0]);
	Если Свойства.ДатаПроверкиПодписи = Null
	 Или Свойства.ПодписьВерна = Null Тогда
		Возврат; // Если в объекте нет реквизитов проверки, результаты проверки не переносятся.
	КонецЕсли;
	
	Для Каждого Строка Из ПодписиВФорме Цикл
		СтрокаВОбъекте = ПодписиВОбъекте.Получить(ПодписиВФорме.Индекс(Строка));
		Если Строка.ДатаПодписи         <> СтрокаВОбъекте.ДатаПодписи
		 Или Строка.Комментарий         <> СтрокаВОбъекте.Комментарий
		 Или Строка.КомуВыданСертификат <> СтрокаВОбъекте.КомуВыданСертификат
		 Или Строка.Отпечаток           <> СтрокаВОбъекте.Отпечаток
		 Или Строка.УстановившийПодпись <> СтрокаВОбъекте.УстановившийПодпись Тогда
			Возврат; // Если объект был изменен, результаты проверки не переносятся.
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ПодписиВФорме Цикл
		СтрокаВОбъекте = ПодписиВОбъекте.Получить(ПодписиВФорме.Индекс(Строка));
		ЗаполнитьЗначенияСвойств(Свойства, СтрокаВОбъекте);
		Если Строка.ДатаПроверкиПодписи = Свойства.ДатаПроверкиПодписи
		   И Строка.ПодписьВерна        = Свойства.ПодписьВерна Тогда
			Продолжить; // Не нужно устанавливать модифицированность, если результаты проверки совпадают.
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Свойства      , Строка);
		ЗаполнитьЗначенияСвойств(СтрокаВОбъекте, Свойства);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусПроверкиПодписейОбъекта(Предмет) Экспорт
	
	ПодписиОбъекта = ПолучитьЭлектронныеПодписи(Предмет);
	Если ПодписиОбъекта.Количество() = 0 Тогда
		УстановитьСтатусПроверки(Предмет, Перечисления.СтатусПроверкиЭП.ПодписиНет);
		Возврат;
	КонецЕсли;
	
	ЕстьНепроверенныеПодписи = Ложь;
	ЕстьНедействительныеПодписи = Ложь;
	Пока ПодписиОбъекта.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ПодписиОбъекта.ДатаПроверкиПодписи) Тогда
			ЕстьНепроверенныеПодписи = Истина;
		КонецЕсли;
		
		Если Не ПодписиОбъекта.ПодписьВерна Тогда
			ЕстьНедействительныеПодписи = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНедействительныеПодписи Тогда
		УстановитьСтатусПроверки(Предмет, Перечисления.СтатусПроверкиЭП.ПодписьНедействительна);
	ИначеЕсли ЕстьНепроверенныеПодписи Тогда
		УстановитьСтатусПроверки(Предмет, Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена);
	Иначе
		УстановитьСтатусПроверки(Предмет, Перечисления.СтатусПроверкиЭП.ПодписьДействительна);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу подписей в форме
//
Процедура ЗаполнитьПодписи(Форма) Экспорт
	
	Предмет = Форма.Объект.Ссылка;
	ТаблицаПодписей = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ТаблицаПодписей(Форма);
	ГруппаЭП = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(Форма).Родитель.Родитель;
	
	ЗаполнитьСписокПодписей(Предмет, ТаблицаПодписей, Форма.УникальныйИдентификатор, ГруппаЭП)
	
КонецПроцедуры

// Заполняет список подписей предмета и его подчиненных файлов.
//
Процедура ЗаполнитьСписокПодписей(Предмет, ТаблицаПодписей, ИдентификаторФормы, ГруппаЭП) Экспорт
	
	ВсегоПодписей = 0;
	ТаблицаПодписей.ПолучитьЭлементы().Очистить();
	
	ЭлементыДерева = ТаблицаПодписей.ПолучитьЭлементы();
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	НоваяСтрока.Объект = Предмет;
	НоваяСтрока.КомуВыданСертификат = ОбщегоНазначения.ПредметСтрокой(Предмет);
	
	НоваяСтрока.ИндексКартинки = 0; // иконка справочника
	
	ЗаполнитьСписокПодписейПредмета(Предмет, НоваяСтрока.ПолучитьЭлементы(), ИдентификаторФормы);
	
	КоличествоПодписей = НоваяСтрока.ПолучитьЭлементы().Количество();
	Если КоличествоПодписей = 0 Тогда
		ЭлементыДерева.Удалить(НоваяСтрока);
	КонецЕсли;
	
	ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
	
	СписокФайлов = ПолучитьВсеПодчиненныеФайлы(Предмет);
	Для Каждого ФайлСсылка Из СписокФайлов Цикл
		
		НоваяСтрока = ЭлементыДерева.Добавить();
		// для ветки дерева используем КомуВыданСертификат как Представление
		НоваяСтрока.Объект = ФайлСсылка;
		НоваяСтрока.КомуВыданСертификат = ОбщегоНазначения.ПредметСтрокой(ФайлСсылка);
		НоваяСтрока.ИндексКартинки = ФайлСсылка.ИндексКартинки;
		КоличествоПодписей = 0;
		
		ЗаполнитьСписокПодписейФайла(ФайлСсылка, НоваяСтрока.ПолучитьЭлементы(), ИдентификаторФормы);
		
		КоличествоПодписей = НоваяСтрока.ПолучитьЭлементы().Количество();
		Если КоличествоПодписей = 0 Тогда
			ЭлементыДерева.Удалить(НоваяСтрока);
		КонецЕсли;
		
		ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
		
	КонецЦикла;
	
	Если ГруппаЭП <> Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'Электронные подписи'");
		Если ВсегоПодписей <> 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
		КонецЕсли;
		ГруппаЭП.Заголовок = ТекстЗаголовка;
		
		Если ВсегоПодписей = 0 Тогда
			ГруппаЭП.Видимость = Ложь;
		Иначе
			ГруппаЭП.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей предмета.
//
Процедура ЗаполнитьСписокПодписейПредмета(Предмет, ТаблицаПодписей, ИдентификаторФормы) Экспорт
	
	Если Предмет.ПодписанЭП Тогда
		
		Выборка = ПолучитьЭлектронныеПодписи(Предмет.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаПодписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ИндексКартинки = -1;
			
			НоваяСтрока.Статус = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, ИдентификаторФормы);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает подписи, принадлежащие объекту.
//
Функция ПолучитьЭлектронныеПодписи(Предмет, ИдентификаторПодписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭП.УникальныйИдентификатор,
	|	ЭП.ДатаПодписи,
	|	ЭП.Объект,
	|	ЭП.УстановившийПодпись,
	|	ЭП.Версия,
	|	ЭП.ДатаПроверкиПодписи,
	|	ЭП.ИмяФайлаПодписи,
	|	ЭП.Комментарий,
	|	ЭП.КомуВыданСертификат,
	|	ЭП.Отпечаток,
	|	ЭП.Подпись,
	|	ЭП.ПодписьВерна,
	|	ЭП.Сертификат,
	|	ЭП.СертификатДействителен,
	|	ЭП.ТекстОшибкиПроверкиПодписи,
	|	ЭП.ТекстОшибкиПроверкиСертификата
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиБольничнаяАптека КАК ЭП
	|ГДЕ
	|	ЭП.Объект = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭП.ДатаПодписи
	|";
	Запрос.Параметры.Вставить("Предмет", Предмет);
	
	Если ИдентификаторПодписи <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ЭП.УникальныйИдентификатор = &УникальныйИдентификатор");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.Параметры.Вставить("УникальныйИдентификатор", ИдентификаторПодписи);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
	
КонецФункции

// Заполняет список подписей файла.
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ВерсииФайлов
//
Процедура ЗаполнитьСписокПодписейФайла(ФайлСсылка, ТаблицаПодписей, ИдентификаторФормы, ПолучитьДляПомеченногоНаУдалениеОбъекта = Ложь) Экспорт
	
	ДанныеФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Зашифрован, ПометкаУдаления");
	Если Не ПолучитьДляПомеченногоНаУдалениеОбъекта И ДанныеФайла.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлСсылка);
	Для Каждого ЭлектроннаяПодписьФайла Из ЭлектронныеПодписи Цикл
		
		НоваяСтрока = ТаблицаПодписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлектроннаяПодписьФайла);
		НоваяСтрока.УникальныйИдентификатор = ЭлектроннаяПодписьФайла.ПорядковыйНомер;
		НоваяСтрока.Зашифрован     = ДанныеФайла.Зашифрован;
		НоваяСтрока.ИндексКартинки = -1;
		НоваяСтрока.Объект         = ФайлСсылка;
		НоваяСтрока.АдресПодписи   = ПоместитьВоВременноеХранилище(ЭлектроннаяПодписьФайла.Подпись, ИдентификаторФормы);
		НоваяСтрока.Статус         = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
			НоваяСтрока.ПодписьВерна, Истина, НоваяСтрока.ДатаПроверкиПодписи);
		
		ДвоичныеДанныеСертификата = ЭлектроннаяПодписьФайла.Сертификат.Получить();
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
			НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, ИдентификаторФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество подписей объекта.
//
Функция КоличествоПодписей(ПодписанныйОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписиБольничнаяАптека КАК ЭП
	|ГДЕ
	|	ЭП.Объект = &Объект
	|";
	Запрос.Параметры.Вставить("Объект", ПодписанныйОбъект);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// Возвращает первую найденную подпись к объекту, в ином случае возвращает Неопределено.
//
Функция ПолучитьЭлектроннуюПодпись(Ссылка, ИдентификаторПодписи = Неопределено) Экспорт
	
	Выборка = ПолучитьЭлектронныеПодписи(Ссылка, ИдентификаторПодписи);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.ЭлектронныеПодписиБольничнаяАптека.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Подпись.Выбран() Тогда
			Возврат Подпись;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обновляет статус проверки подписи.
//
Функция ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, Знач ДатаПроверкиПодписи = Неопределено) Экспорт
	
	Если ДатаПроверкиПодписи = Неопределено Тогда
		ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭтоФайл(ДанныеПодписи.Объект) Тогда
		
		ДанныеПодписи.ПодписьВерна = ДанныеПодписи.ПодписьВерна И ДанныеПодписи.СертификатДействителен;
		
		ОбъектДанных = ДанныеПодписи.Объект.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДанныеПодписи.Объект);
		
		Подпись = ОбъектДанных.ЭлектронныеПодписи.Получить(ДанныеПодписи.УникальныйИдентификатор);
		ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписи);
		Подпись.ДатаПроверкиПодписи = ДатаПроверкиПодписи;
		
		ОбъектДанных.Записать();
		РазблокироватьДанныеДляРедактирования(ДанныеПодписи.Объект);
		
	Иначе
		
		Подпись = ПолучитьЭлектроннуюПодпись(ДанныеПодписи.Объект, ДанныеПодписи.УникальныйИдентификатор);
		
		Если Подпись = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписи);
		Подпись.ДатаПроверкиПодписи = ДатаПроверкиПодписи;
		
		УстановитьПривилегированныйРежим(Истина);
		Подпись.Записать();
		
	КонецЕсли;
	
	Статус = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
		ДанныеПодписи.ПодписьВерна, ДанныеПодписи.СертификатДействителен, Подпись.ДатаПроверкиПодписи);
	Возврат Статус;
	
КонецФункции

// Проверяет изменение подписанных данных. В случае их изменения вызывает исключение.
//
Процедура ПроверитьИзмененияПодписанныхДанныхПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПривилегированныйРежим() И Не ЗаписьПодписанногоОбъекта(Источник) Тогда
		Если Не Источник.ЭтоНовый() Тогда
			СсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПодписанЭП");
			Если Источник.ПодписанЭП И СсылкаПодписан Тогда
				ПроверитьИзмененностьКлючевыхПолей(Источник, Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет изменение подписанных данных. В случае их изменения вызывает исключение.
//
Процедура ПроверитьИзмененияПодписанныхДанныхДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПривилегированныйРежим() И Не ЗаписьПодписанногоОбъекта(Источник) Тогда
		Если Не Источник.ЭтоНовый() Тогда
			СсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПодписанЭП");
			Если Источник.ПодписанЭП И СсылкаПодписан Тогда
				Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
					ТекущаяОтметкаПроведения = Источник.Проведен;
					Источник.Проведен = Ложь;
				КонецЕсли;
				
				ПроверитьИзмененностьКлючевыхПолей(Источник, Источник.Ссылка);
				
				Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
					Источник.Проведен = ТекущаяОтметкаПроведения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имена элементов формы, отображающих подписываемые данные.
//
Функция ИменаЭлементовПодписываемыхДанных(Форма) Экспорт
	
	ОписаниеПолей = ОписаниеКлючевыхПолей(Форма.Объект.Ссылка);
	ПутиКДанным = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ОписаниеПолей.Реквизиты Цикл
		ПутиКДанным.Добавить("Объект." + ИмяРеквизита);
	КонецЦикла;
	
	Для Каждого ОписаниеТабличнойЧасти Из ОписаниеПолей.ТабличныеЧасти Цикл
		ПутиКДанным.Добавить("Объект." + ОписаниеТабличнойЧасти.Имя);
		Для Каждого ИмяРеквизита Из ОписаниеТабличнойЧасти.Измерения Цикл
			ПутиКДанным.Добавить("Объект." + ОписаниеТабличнойЧасти.Имя + "." + ИмяРеквизита);
		КонецЦикла;
		Для Каждого ИмяРеквизита Из ОписаниеТабличнойЧасти.Ресурсы Цикл
			ПутиКДанным.Добавить("Объект." + ОписаниеТабличнойЧасти.Имя + "." + ИмяРеквизита);
		КонецЦикла;
	КонецЦикла;
	
	БлокируемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			Если ПутиКДанным.Найти(Элемент.ПутьКДанным) <> Неопределено Тогда
				БлокируемыеЭлементы.Добавить(Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БлокируемыеЭлементы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение ключевых полей
#Область КлючевыеПоля

// Возвращает пустое описание ключевых полей.
// Для заполнения описания следует использовать методы:
//  - ДобавитьОписаниеРеквизита;
//  - ВключитьФайлыВОписаниеКлючевыхПолей;
//  - ДобавитьПустоеОписаниеТабличнойЧасти;
//  - ДобавитьПустоеОписаниеНабораЗаписей;
//  - ДобавитьГруппируемоеПолеТабличнойЧасти;
//  - ДобавитьПолеРесурсаТабличнойЧасти.
//
// Возвращаемое значение:
//  Структура
//
Функция ПустоеОписаниеКлючевыхПолей() Экспорт
	
	ОписаниеКлючевыхПолей = Новый Структура;
	ОписаниеКлючевыхПолей.Вставить("Реквизиты", Новый Массив);
	ОписаниеКлючевыхПолей.Вставить("ТабличныеЧасти", Новый Массив);
	ОписаниеКлючевыхПолей.Вставить("НаборыЗаписей", Новый Массив);
	ОписаниеКлючевыхПолей.Вставить("Файлы", Ложь);
	
	Возврат ОписаниеКлючевыхПолей;
	
КонецФункции

// Добавляет в описание ключевых полей новое описание реквизита.
//
// Параметры:
//  ОписаниеКлючевыхПолей - Структура - см. ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей().
//  ИмяРеквизита          - Строка - имя реквизита.
//
Процедура ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ИмяРеквизита) Экспорт
	
	ОписаниеКлючевыхПолей.Реквизиты.Добавить(ИмяРеквизита);
	
КонецПроцедуры

// Устанавливает признак включения присоединенных файлов в описание ключевых полей
//
Процедура ВключитьФайлыВОписаниеКлючевыхПолей(ОписаниеКлючевыхПолей) Экспорт
	
	ОписаниеКлючевыхПолей.Файлы = Истина;
	
КонецПроцедуры

// Добавляет в описание ключевых полей новое описание табличной части.
//
// Параметры:
//  ОписаниеКлючевыхПолей - Структура - см. ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей().
//  ИмяТаблицы            - Строка - имя табличной части.
//
// Возвращаемое значение:
//  Структура - описание табличной части.
//
Функция ДобавитьПустоеОписаниеТабличнойЧасти(ОписаниеКлючевыхПолей, ИмяТаблицы) Экспорт
	
	ТабличнаяЧасть = Новый Структура;
	ТабличнаяЧасть.Вставить("Имя"      , ИмяТаблицы);
	ТабличнаяЧасть.Вставить("Измерения", Новый Массив);
	ТабличнаяЧасть.Вставить("Ресурсы"  , Новый Массив);
	
	ОписаниеКлючевыхПолей.ТабличныеЧасти.Добавить(ТабличнаяЧасть);
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

// Добавляет в описание ключевых полей новое описание набора записей.
//
// Параметры:
//  ОписаниеКлючевыхПолей - Структура - см. ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей().
//  ИмяТаблицы            - Строка - имя табличной части.
//
// Возвращаемое значение:
//  Структура - описание набора записей.
//
Функция ДобавитьПустоеОписаниеНабораЗаписей(ОписаниеКлючевыхПолей, ИмяТаблицы) Экспорт
	
	НаборЗаписей = Новый Структура;
	НаборЗаписей.Вставить("Имя"      , ИмяТаблицы);
	НаборЗаписей.Вставить("Измерения", Новый Массив);
	НаборЗаписей.Вставить("Ресурсы"  , Новый Массив);
	
	ОписаниеКлючевыхПолей.НаборыЗаписей.Добавить(НаборЗаписей);
	
	Возврат НаборЗаписей;
	
КонецФункции

// Добавляет имя группируемого поля ключевых полей электронной подписи.
//
// Параметры:
//  ТабличнаяЧасть - Структура - описание табличной части.
//  ИмяПоля        - Строка - имя группируемого поля.
//
Процедура ДобавитьГруппируемоеПолеТабличнойЧасти(ТабличнаяЧасть, ИмяПоля) Экспорт
	
	ТабличнаяЧасть.Измерения.Добавить(ИмяПоля);
	
КонецПроцедуры

// Добавляет имя поля ресурсов ключевых полей электронной подписи.
//
// Параметры:
//  ТабличнаяЧасть - Структура - описание табличной части.
//  ИмяПоля        - Строка - имя ресурса.
//
Процедура ДобавитьПолеРесурсаТабличнойЧасти(ТабличнаяЧасть, ИмяПоля) Экспорт
	
	ТабличнаяЧасть.Ресурсы.Добавить(ИмяПоля);
	
КонецПроцедуры

#КонецОбласти // КлючевыеПоля

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция ОписаниеКлючевыхПолей(Предмет, Версия = Неопределено)
	
	ОписаниеПолей = ПустоеОписаниеКлючевыхПолей();
	СтандартнаяОбработка = Истина;
	ЭлектроннаяПодписьБольничнаяАптекаПереопределяемый.ПриПолученииОписанияКлючевыхПолейОбъекта(Предмет, Версия, ОписаниеПолей, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат ОписаниеПолей;
	КонецЕсли;
	
	МенеджерПредмета = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Предмет);
	Возврат МенеджерПредмета.ОписаниеКлючевыхПолей(Версия);
	
КонецФункции

Функция СформироватьНаборКлючевыхПолей(Предмет, ОписаниеКлючевыхПолей)
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предмет));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ?(ЭтоСсылка, Предмет, Предмет.Ссылка));
	
	МетаданныеПредмета = Запрос.Параметры.Ссылка.Метаданные();
	
	ШаблонЗапросаРеквизитов = "
	|ВЫБРАТЬ
	|	Предмет.Ссылка КАК Ссылка
	|ИЗ
	|	#Таблица КАК Предмет
	|ГДЕ
	|	Предмет.Ссылка = &Ссылка
	|";
	
	ШаблонВыбораИзВременнойТаблицы = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	#ИмяТаблицы КАК Таблица
	|";
	
	Если ЭтоСсылка Тогда
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаРеквизитов, "#Таблица", МетаданныеПредмета.ПолноеИмя());
	Иначе
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаРеквизитов, "#Таблица", "&Шапка");
		ТаблицаШапки = Новый ТаблицаЗначений;
		ТаблицаШапки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Предмет.Ссылка))));
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОписаниеЗапроса.ТаблицаДляПомещения = "втШапка";
	Для Каждого ИмяРеквизита Из ОписаниеКлючевыхПолей.Реквизиты Цикл
		Если Не ЭтоСсылка Тогда
			Реквизит = МетаданныеПредмета.Реквизиты.Найти(ИмяРеквизита);
			Если Реквизит <> Неопределено Тогда
				ТипРеквизита = МетаданныеПредмета.Реквизиты[ИмяРеквизита].Тип;
			Иначе
				ТипРеквизита = МетаданныеПредмета.СтандартныеРеквизиты[ИмяРеквизита].Тип;
			КонецЕсли;
			ТаблицаШапки.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
		КонецЕсли;
		ОписаниеЗапроса.Операторы[0].ВыбираемыеПоля.Добавить("Предмет." + ИмяРеквизита);
	КонецЦикла;
	
	Если Не ЭтоСсылка Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаШапки.Добавить(), Предмет);
		Запрос.УстановитьПараметр("Шапка", ТаблицаШапки);
	КонецЕсли;
	
	СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).УстановитьТекстЗапроса(СтрЗаменить(ШаблонВыбораИзВременнойТаблицы, "#ИмяТаблицы", ОписаниеЗапроса.ТаблицаДляПомещения));
	
	Для Каждого ОписаниеТабличнойЧасти Из ОписаниеКлючевыхПолей.ТабличныеЧасти Цикл
		
		Если ЭтоСсылка Тогда
			ТекстЗапроса = СтрЗаменить(ШаблонЗапросаРеквизитов, "#Таблица", МетаданныеПредмета.ПолноеИмя() + "." + ОписаниеТабличнойЧасти.Имя);
		Иначе
			ТекстЗапроса = СтрЗаменить(ШаблонЗапросаРеквизитов, "#Таблица", "&" + ОписаниеТабличнойЧасти.Имя);
			ТабличнаяЧасть = Предмет[ОписаниеТабличнойЧасти.Имя].Выгрузить();
			ТабличнаяЧасть.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Предмет.Ссылка))));
			ТабличнаяЧасть.ЗаполнитьЗначения(Предмет.Ссылка, "Ссылка");
			Запрос.УстановитьПараметр(ОписаниеТабличнойЧасти.Имя, ТабличнаяЧасть);
		КонецЕсли;
		
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ОписаниеЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ОписаниеЗапроса.ТаблицаДляПомещения = ОписаниеТабличнойЧасти.Имя;
		
		ВыбираемыеПоля = ОписаниеЗапроса.Операторы[0].ВыбираемыеПоля;
		
		Для Каждого ИмяРеквизита Из ОписаниеТабличнойЧасти.Измерения Цикл
			ВыбираемыеПоля.Добавить("Предмет." + ИмяРеквизита);
		КонецЦикла;
		Для Каждого ИмяРеквизита Из ОписаниеТабличнойЧасти.Ресурсы Цикл
			ВыбираемыеПоля.Добавить("Предмет." + ИмяРеквизита);
		КонецЦикла;
		
		ВыбираемыеПоля.Добавить("Предмет.НомерСтроки");
		
		ОписаниеЗапросаВыборки = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ОписаниеЗапросаВыборки.УстановитьТекстЗапроса(СтрЗаменить(ШаблонВыбораИзВременнойТаблицы, "#ИмяТаблицы", ОписаниеЗапроса.ТаблицаДляПомещения));
		ОписаниеЗапросаВыборки.Порядок.Добавить("Таблица.НомерСтроки");
		
	КонецЦикла;
	
	Если ЭтоСсылка Тогда
		
		ШаблонЗапросаНабораЗаписей = "
		|ВЫБРАТЬ
		|	НаборЗаписей.Регистратор КАК Ссылка
		|ИЗ
		|	#Таблица КАК НаборЗаписей
		|ГДЕ
		|	НаборЗаписей.Регистратор = &Ссылка
		|";
		
		Для Каждого ОписаниеНабораЗаписей Из ОписаниеКлючевыхПолей.НаборыЗаписей Цикл
			
			ТекстЗапроса = СтрЗаменить(ШаблонЗапросаНабораЗаписей, "#Таблица", МетаданныеПредмета.Движения[ОписаниеНабораЗаписей.Имя].ПолноеИмя());
			ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
			ОписаниеЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			
			ВыбираемыеПоля = ОписаниеЗапроса.Операторы[0].ВыбираемыеПоля;
			
			Для Каждого ИмяРеквизита Из ОписаниеТабличнойЧасти.Измерения Цикл
				ВыбираемыеПоля.Добавить("Предмет." + ИмяРеквизита);
			КонецЦикла;
			Для Каждого ИмяРеквизита Из ОписаниеТабличнойЧасти.Ресурсы Цикл
				ВыбираемыеПоля.Добавить("Предмет." + ИмяРеквизита);
			КонецЦикла;
			
			ОписаниеЗапроса.Порядок.Добавить("Предмет.НомерСтроки");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеПолей = Новый Массив;
	
	ТекущийИндекс = 1;
	Если ЗначениеЗаполнено(ОписаниеКлючевыхПолей.Реквизиты) Тогда
		Выборка = РезультатыЗапроса[ТекущийИндекс].Выбрать();
		Выборка.Следующий();
		Для Каждого ИмяРеквизита Из ОписаниеКлючевыхПолей.Реквизиты Цикл
			ДобавитьДанныеПоля(Выборка, ИмяРеквизита, ДанныеПолей);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеКлючевыхПолей.Файлы Тогда
		ДобавитьДанныеФайлов(Предмет, ДанныеПолей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеКлючевыхПолей.ТабличныеЧасти) Тогда
		Для Каждого ОписаниеТабличнойЧасти Из ОписаниеКлючевыхПолей.ТабличныеЧасти Цикл
			
			ТекущийИндекс = ТекущийИндекс + 2;
			Таблица = РезультатыЗапроса[ТекущийИндекс].Выгрузить();
			ДобавитьДанныеПолейТабличнойЧасти(Таблица, ОписаниеТабличнойЧасти, ДанныеПолей);
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоСсылка Тогда
		Если ЗначениеЗаполнено(ОписаниеКлючевыхПолей.НаборыЗаписей) Тогда
			Для Каждого ОписаниеНабораЗаписей Из ОписаниеКлючевыхПолей.НаборыЗаписей Цикл
				
				ТекущийИндекс = ТекущийИндекс + 1;
				Таблица = РезультатыЗапроса[ТекущийИндекс].Выгрузить();
				ДобавитьДанныеПолейТабличнойЧасти(Таблица, ОписаниеНабораЗаписей, ДанныеПолей);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеПолей;
	
КонецФункции

Процедура ДобавитьДанныеПоля(Предмет, ИмяПоля, ДанныеПолей)
	
	ЗначениеПоля = Предмет[ИмяПоля];
	ЗначениеСтрокой = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяПоля);
	ДанныеПолей.Добавить(ЗначениеСтрокой);
	
КонецПроцедуры

Процедура ДобавитьДанныеПолейТабличнойЧасти(ДанныеТабличнойЧасти, ОписаниеТабличнойЧасти, ДанныеПолей)
	
	ИменаИзмеренийСтрокой = СтрСоединить(ОписаниеТабличнойЧасти.Измерения, ",");
	ИменаРесурсовСтрокой = СтрСоединить(ОписаниеТабличнойЧасти.Ресурсы, ",");
	ПолныйСписокПолей = ИменаИзмеренийСтрокой + ?(ПустаяСтрока(ИменаРесурсовСтрокой), "", ",") + ИменаРесурсовСтрокой;
	
	Таблица = ДанныеТабличнойЧасти.Скопировать(, ПолныйСписокПолей);
	
	ИмяКолонкиКоличествоДублей = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.СформироватьУникальныйИдентификатор();
	Таблица.Колонки.Добавить(ИмяКолонкиКоличествоДублей, Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы[ИмяКолонкиКоличествоДублей] = 1;
	КонецЦикла;
	
	ИменаРесурсовСтрокой = ИмяКолонкиКоличествоДублей + ?(ПустаяСтрока(ИменаРесурсовСтрокой), "", ",") + ИменаРесурсовСтрокой;
	Таблица.Свернуть(ИменаИзмеренийСтрокой, ИменаРесурсовСтрокой);
	Таблица.Сортировать(ИменаИзмеренийСтрокой + ", " + ИменаРесурсовСтрокой);
	
	НомерСтроки = 0;
	КолонкиТаблицы = Таблица.Колонки;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			
			ИмяКолонки = ?(Колонка.Имя = ИмяКолонкиКоличествоДублей, НСтр("ru = 'КоличествоДублей'"), Колонка.Имя);
			ИмяЯчейки = СтрШаблон("%1_%2_%3", ОписаниеТабличнойЧасти.Имя, НомерСтроки, ИмяКолонки);
			
			ЗначениеСтрокой = ПолучитьДанныеОбъектаСтрокой(СтрокаТаблицы[Колонка.Имя], ИмяЯчейки);
			ДанныеПолей.Добавить(ЗначениеСтрокой);
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеФайлов(Предмет, ДанныеПолей)
	
	ПодчиненныеФайлы = ПолучитьВсеПодчиненныеФайлы(Предмет);
	
	НомерФайла = 1;
	Для Каждого ФайлСсылка Из ПодчиненныеФайлы Цикл
		
		ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка);
		
		ХешДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
		ХешДанных.Добавить(ДанныеФайла);
		ЗначениеПоля = ХешДанных.ХешСумма;
		ИмяПоля = "Файл" + Формат(НомерФайла, "ЧН=; ЧГ=");
		ЗначениеСтрокой = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяПоля);
		
		ДанныеПолей.Добавить(ЗначениеСтрокой);
		НомерФайла = НомерФайла + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДанныеДляПодписи(КлючевыеПоля)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для Каждого ЗначениеПоля Из КлючевыеПоля Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЗначениеПоля);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("key");
	ТекстовыйДокумент.Записать(ИмяФайла);
	
	Данные = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокой(Объект, Имя)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Объект, Имя, НазначениеТипаXML.Явное);
	
	СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции

Процедура УдалитьСтрокуПодписи(ПодписанныйОбъект, ИдентификаторПодписи, ОписаниеУдаляемойПодписи)
	
	Подпись = ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект, ИдентификаторПодписи);
	
	Если Подпись = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
	КонецЕсли;
	
	СвойстваСертификата = ОписаниеСертификата(Подпись.Сертификат.Получить(), Подпись.КомуВыданСертификат);
	ОписаниеУдаляемойПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОписанияПодписи(),
		Подпись.ДатаПодписи,
		СвойстваСертификата.СерийныйНомер,
		СвойстваСертификата.КемВыдан,
		СвойстваСертификата.КомуВыдан,
		СвойстваСертификата.ДатаНачала,
		СвойстваСертификата.ДатаОкончания,
		"");
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав на удаление подписи.'");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Подпись.Удалить();
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Электронная подпись.Удаление подписи'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		ПодписанныйОбъект,
		ОписаниеУдаляемойПодписи,
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
КонецПроцедуры

Функция ШаблонОписанияПодписи()
	
	Возврат НСтр("ru =
		|'Дата подписи: %1
		|Сертификат: %2
		|Кем выдан: %3
		|Владелец: %4
		|Действителен: с %5 по %6
		|%7'");
	
КонецФункции

Функция ОписаниеСертификата(Сертификат, КомуВыданСертификат)
	
	СтруктураСвойствСертификата = Новый Структура;
	СтруктураСвойствСертификата.Вставить("СерийныйНомер", "");
	СтруктураСвойствСертификата.Вставить("КемВыдан",      "");
	СтруктураСвойствСертификата.Вставить("КомуВыдан",     КомуВыданСертификат);
	СтруктураСвойствСертификата.Вставить("ДатаНачала",    "");
	СтруктураСвойствСертификата.Вставить("ДатаОкончания", "");
	
	Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
		СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СертификатКриптографии);
		СтруктураСвойствСертификата.СерийныйНомер = СертификатКриптографии.СерийныйНомер;
		СтруктураСвойствСертификата.КемВыдан      = СвойстваСертификата.КемВыдан; 
		СтруктураСвойствСертификата.КомуВыдан     = СвойстваСертификата.КомуВыдан;
		СтруктураСвойствСертификата.ДатаНачала    =Формат(СертификатКриптографии.ДатаНачала, "ДЛФ=D");
		СтруктураСвойствСертификата.ДатаОкончания = Формат(СертификатКриптографии.ДатаОкончания, "ДЛФ=D");
	КонецЕсли;
	
	Возврат СтруктураСвойствСертификата;
	
КонецФункции

Функция ОписаниеЭлементовФормы(ИмяГруппыДляРазмещения)
	
	Описание = "
	|<Форма>
	|	<Реквизиты>
	|		<Реквизит Имя='%1ЭлектронныеПодписи'>
	|			<Типы>
	|				<Тип>ДеревоЗначений</Тип>
	|			</Типы>
	|			<Реквизит Имя='КомуВыданСертификат'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ДатаПодписи'>
	|				<Типы>
	|					<Тип>Дата</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Комментарий'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Статус'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Объект'>
	|				<Типы>
	|					<Тип>СправочникСсылка</Тип>
	|					<Тип>ДокументСсылка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='АдресПодписи'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Отпечаток'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ПодписьВерна'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ИндексКартинки'>
	|				<Типы>
	|					<Тип>Число(10)</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='УстановившийПодпись'>
	|				<Типы>
	|					<Тип>СправочникСсылка.Пользователи</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='АдресСертификата'>
	|				<Типы>
	|					<Тип>Строка</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='ДатаПроверкиПодписи'>
	|				<Типы>
	|					<Тип>Дата</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='УникальныйИдентификатор'>
	|				<Типы>
	|					<Тип>Число(10)</Тип>
	|					<Тип>УникальныйИдентификатор</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='СертификатДействителен'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Зашифрован'>
	|				<Типы>
	|					<Тип>Булево</Тип>
	|				</Типы>
	|			</Реквизит>
	|			<Реквизит Имя='Версия'>
	|				<Типы>
	|					<Тип>Число(10)</Тип>
	|				</Типы>
	|			</Реквизит>
	|		</Реквизит>
	|	</Реквизиты>
	|	<Команды>
	|		<Команда
	|			Имя='%1ОткрытьПодпись'
	|			Заголовок='" + НСтр("ru='Открыть'") + "'
	|			Действие='Подключаемый_ЭлектронныеПодписи_ОткрытьПодпись'/>
	|		<Команда
	|			Имя='%1Проверить'
	|			Заголовок='" + НСтр("ru='Проверить'") + "'
	|			Действие='Подключаемый_ЭлектронныеПодписи_Проверить'/>
	|		<Команда
	|			Имя='%1ПроверитьВсе'
	|			Заголовок='" + НСтр("ru='Проверить все'") + "'
	|			Действие='Подключаемый_ЭлектронныеПодписи_ПроверитьВсе'/>
	|		<Команда
	|			Имя='%1СохранитьПодпись'
	|			Заголовок='" + НСтр("ru='Сохранить в файл...'") + "'
	|			Действие='Подключаемый_ЭлектронныеПодписи_СохранитьПодпись'/>
	|		<Команда
	|			Имя='%1УдалитьПодпись'
	|			Заголовок='" + НСтр("ru='Удалить'") + "'
	|			Действие='Подключаемый_ЭлектронныеПодписи_УдалитьПодпись'
	|			Картинка='Удалить'
	|			СочетаниеКлавиш='Ctrl+X'/>
	|		<Команда
	|			Имя='%1ОбновитьСписокПодписей'
	|			Заголовок='" + НСтр("ru='Обновить'") + "'
	|			Действие='Подключаемый_ЭлектронныеПодписи_ОбновитьСписокПодписей'
	|			Картинка='Обновить'
	|			СочетаниеКлавиш='F5'/>
	|	</Команды>
	|	<Элементы>
	|		<УсловноеОформление>
	|			<Элемент>
	|				<Оформление ЦветФона='ФонПодписьВерна'/>
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='%1ЭлектронныеПодписи.ПодписьВерна'>
	|						<Значение Тип='Булево'>Истина</Значение>
	|					</Элемент>
	|					<Элемент ЛевоеЗначение='%1ЭлектронныеПодписи.ДатаПроверкиПодписи' ВидСравнения='Заполнено'>
	|						<Значение Тип='Булево'>Истина</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1ЭлектронныеПодписи'/>
	|				</Поля>
	|			</Элемент>
	|			<Элемент>
	|				<Оформление ЦветФона='ФонПодписьНеВерна'/>
	|				<Отбор>
	|					<Элемент ЛевоеЗначение='%1ЭлектронныеПодписи.ПодписьВерна'>
	|						<Значение Тип='Булево'>Ложь</Значение>
	|					</Элемент>
	|					<Элемент ЛевоеЗначение='%1ЭлектронныеПодписи.ДатаПроверкиПодписи' ВидСравнения='Заполнено'>
	|						<Значение Тип='Булево'>Истина</Значение>
	|					</Элемент>
	|				</Отбор>
	|				<Поля>
	|					<Поле Имя='%1ЭлектронныеПодписи'/>
	|				</Поля>
	|			</Элемент>
	|		</УсловноеОформление>
	|		<ГруппаФормы Имя='%1ГруппаЭлектронныеПодписи' Родитель='%2'>
	|			<Свойство Имя='Вид'>ОбычнаяГруппа</Свойство>
	|			<Свойство Имя='ОтображатьЗаголовок'>Ложь</Свойство>
	|			<Свойство Имя='Отображение'>Нет</Свойство>
	|			<Свойство Имя='Группировка'>Вертикальная</Свойство>
	|			<ГруппаФормы Имя='%1ЭлектронныеПодписиКоманднаяПанель'>
	|				<Свойство Имя='Вид'>КоманднаяПанель</Свойство>
	|				<КнопкаФормы Имя='%1ЭлектронныеПодписиОткрытьПодпись'>
	|					<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|					<Свойство Имя='ИмяКоманды'>%1ОткрытьПодпись</Свойство>
	|				</КнопкаФормы>
	|				<КнопкаФормы Имя='%1ЭлектронныеПодписиПроверить'>
	|					<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|					<Свойство Имя='ИмяКоманды'>%1Проверить</Свойство>
	|					<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|				</КнопкаФормы>
	|				<КнопкаФормы Имя='%1ЭлектронныеПодписиПроверитьВсе'>
	|					<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|					<Свойство Имя='ИмяКоманды'>%1ПроверитьВсе</Свойство>
	|					<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|				</КнопкаФормы>
	|				<КнопкаФормы Имя='%1ЭлектронныеПодписиСохранить'>
	|					<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|					<Свойство Имя='ИмяКоманды'>%1СохранитьПодпись</Свойство>
	|					<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|				</КнопкаФормы>
	|				<КнопкаФормы Имя='%1ЭлектронныеПодписиУдалить'>
	|					<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|					<Свойство Имя='ИмяКоманды'>%1УдалитьПодпись</Свойство>
	|					<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|				</КнопкаФормы>
	|				<КнопкаФормы Имя='%1ЭлектронныеПодписиОбновить'>
	|					<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|					<Свойство Имя='ИмяКоманды'>%1ОбновитьСписокПодписей</Свойство>
	|					<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|				</КнопкаФормы>
	|			</ГруппаФормы>
	|			<ТаблицаФормы Имя='%1ЭлектронныеПодписи'>
	|				<Свойство Имя='ПутьКДанным'>%1ЭлектронныеПодписи</Свойство>
	|				<Свойство Имя='Отображение'>Дерево</Свойство>
	|				<Свойство Имя='НачальноеОтображениеДерева'>РаскрыватьВсеУровни</Свойство>
	|				<Свойство Имя='ИзменятьСоставСтрок'>Ложь</Свойство>
	|				<Свойство Имя='ИзменятьПорядокСтрок'>Ложь</Свойство>
	|				<Свойство Имя='ПоложениеКоманднойПанели'>Нет</Свойство>
	|				<КонтекстноеМеню>
	|					<КнопкаФормы Имя='%1ЭлектронныеПодписиКонтекстноеМенюОткрытьПодпись'>
	|						<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|						<Свойство Имя='ИмяКоманды'>%1ОткрытьПодпись</Свойство>
	|					</КнопкаФормы>
	|					<КнопкаФормы Имя='%1ЭлектронныеПодписиКонтекстноеМенюПроверить'>
	|						<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|						<Свойство Имя='ИмяКоманды'>%1Проверить</Свойство>
	|						<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|					</КнопкаФормы>
	|					<КнопкаФормы Имя='%1ЭлектронныеПодписиКонтекстноеМенюСохранить'>
	|						<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|						<Свойство Имя='ИмяКоманды'>%1СохранитьПодпись</Свойство>
	|						<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|					</КнопкаФормы>
	|					<КнопкаФормы Имя='%1ЭлектронныеПодписиКонтекстноеМенюУдалить'>
	|						<Свойство Имя='Вид'>КнопкаКоманднойПанели</Свойство>
	|						<Свойство Имя='ИмяКоманды'>%1УдалитьПодпись</Свойство>
	|						<Свойство Имя='ТолькоВоВсехДействиях'>Истина</Свойство>
	|					</КнопкаФормы>
	|				</КонтекстноеМеню>
	|				<ПолеФормы Имя='%1ЭлектронныеПодписиКомуВыданСертификат'>
	|					<Свойство Имя='Вид'>ПолеВвода</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ЭлектронныеПодписи.КомуВыданСертификат</Свойство>
	|					<Свойство Имя='Заголовок'>" + НСтр("ru = 'Кому выдан Сертификат'") + "</Свойство>
	|				</ПолеФормы>
	|				<ПолеФормы Имя='%1ЭлектронныеПодписиДатаПодписи'>
	|					<Свойство Имя='Вид'>ПолеВвода</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ЭлектронныеПодписи.ДатаПодписи</Свойство>
	|					<Свойство Имя='Заголовок'>" + НСтр("ru = 'Дата подписи'") + "</Свойство>
	|				</ПолеФормы>
	|				<ПолеФормы Имя='%1ЭлектронныеПодписиКомментарий'>
	|					<Свойство Имя='Вид'>ПолеВвода</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ЭлектронныеПодписи.Комментарий</Свойство>
	|					<Свойство Имя='Заголовок'>" + НСтр("ru = 'Комментарий'") + "</Свойство>
	|				</ПолеФормы>
	|				<ПолеФормы Имя='%1ЭлектронныеПодписиСтатус'>
	|					<Свойство Имя='Вид'>ПолеВвода</Свойство>
	|					<Свойство Имя='ПутьКДанным'>%1ЭлектронныеПодписи.Статус</Свойство>
	|					<Свойство Имя='Заголовок'>" + НСтр("ru = 'Статус(дата проверки)'") + "</Свойство>
	|				</ПолеФормы>
	|				<События>
	|					<Выбор                  Действие='Подключаемый_ЭлектронныеПодписи_Выбор'/>
	|					<ПриАктивизацииСтроки   Действие='Подключаемый_ЭлектронныеПодписи_ПриАктивизацииСтроки'/>
	|					<ПередНачаломИзменения  Действие='Подключаемый_ЭлектронныеПодписи_ПередНачаломИзменения'/>
	|				</События>
	|			</ТаблицаФормы>
	|		</ГруппаФормы>
	|	</Элементы>
	|</Форма>
	|";
	
	Возврат СтрШаблон(Описание, ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.Префикс(), ИмяГруппыДляРазмещения);
	
КонецФункции

Функция ЗаписьПодписанногоОбъекта(Объект)
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если Объект.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = (Объект.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта = Истина);
	КонецЕсли;
	
	Возврат ЗаписьПодписанногоОбъекта;
	
КонецФункции

Процедура УстановитьСтатусПроверки(Ссылка, Статус)
	
	Если Не Ссылка.Пустая() И Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КэшИнформацииОбОбъектах.УстановитьИнформациюОбОбъекте(Ссылка, "СтатусЭП", Статус);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
