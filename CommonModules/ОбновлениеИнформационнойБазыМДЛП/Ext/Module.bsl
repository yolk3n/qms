////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки интеграции с ГИСМ.
// 
/////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Получение сведений о библиотеке (или конфигурации).

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаИнтеграцииМДЛП";
	Описание.Версия = "1.2.8.14";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = "MDLP";
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаПодключаемогоОборудования");
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.ЗаполнитьВерсиюСхемОбмена";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.ПеренестиПараметрыПодключенияАПИ";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.ЗаполнитьКлючиУпаковокВРегистрах";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.ЗаполнитьФлагВестиУчетВИБ";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.ЗаполнитьФлагРезидент";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "1.1.2.4";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("f7e1ddb5-84e1-42bc-a31c-89fb3551b62c");
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.Процедура          = "Документы.УведомлениеОПеремещенииМДЛП.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УведомлениеОПеремещенииМДЛП.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.УведомлениеОПеремещенииМДЛП";
	Обработчик.ЧитаемыеОбъекты    = "Документ.УведомлениеОПеремещенииМДЛП";
	Обработчик.ИзменяемыеОбъекты  = "Документ.УведомлениеОПеремещенииМДЛП";
	Обработчик.Комментарий        = НСтр("ru = 'Заполняет операцию в уведомлениях о перемещении.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "1.1.2.7";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("62336876-fc0f-421f-96a9-2811b78c356d");
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.Процедура          = "Документы.УведомлениеОРозничнойПродажеМДЛП.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УведомлениеОРозничнойПродажеМДЛП.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.УведомлениеОРозничнойПродажеМДЛП";
	Обработчик.ЧитаемыеОбъекты    = "Документ.УведомлениеОРозничнойПродажеМДЛП";
	Обработчик.ИзменяемыеОбъекты  = "Документ.УведомлениеОРозничнойПродажеМДЛП";
	Обработчик.Комментарий        = НСтр("ru = 'Заполняет документ продажи для возможности корректного отображения информации.'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ТранспортныеУпаковки") Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия             = "1.1.2.12";
		Обработчик.Идентификатор      = Новый УникальныйИдентификатор("0ba6e38b-f04e-4d9f-abe6-77efb9d194aa");
		Обработчик.РежимВыполнения    = "Отложенно";
		Обработчик.Процедура          = "Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ОбработатьДанныеДляОбновленияОперацииРасформирование";
		Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ЗарегистрироватьДанныеДляОбновленияОперацииРасформирование";
		Обработчик.ОчередьОтложеннойОбработки = 1;
		Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		Обработчик.БлокируемыеОбъекты = "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
		Обработчик.ЧитаемыеОбъекты    = "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
		Обработчик.ИзменяемыеОбъекты  = "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
		Обработчик.Комментарий        = НСтр("ru = 'Перенос значения реквизита Номер упаковки в табличную часть Транспортные упаковки для операции Расформирование.'");
		Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
		Приоритет = Обработчик.ПриоритетыВыполнения.Добавить();
		Приоритет.Процедура = "Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ОбработатьДанныеДляОбновленияОперацииВключение";
		Приоритет.Порядок = "До";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия             = "1.1.2.12";
		Обработчик.Идентификатор      = Новый УникальныйИдентификатор("b168d0ad-4684-45b9-9e38-cd80f0a7ed18");
		Обработчик.РежимВыполнения    = "Отложенно";
		Обработчик.Процедура          = "Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ОбработатьДанныеДляОбновленияОперацииВключение";
		Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ЗарегистрироватьДанныеДляОбновленияОперацииВключение";
		Обработчик.ОчередьОтложеннойОбработки = 2;
		Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		Обработчик.БлокируемыеОбъекты = "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
		Обработчик.ЧитаемыеОбъекты    = "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
		Обработчик.ИзменяемыеОбъекты  = "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
		Обработчик.Комментарий        = НСтр("ru = 'Изменение операции Включение, документа Уведомление об агрегировании и трансформации упаковок, на Включение в единичную упаковку.'");
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыМДЛП.УстановитьИспользованиеРеестраВыбытияУпаковокМДЛП";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "1.2.6.1";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("1c7622e7-ea09-4113-b1c3-b392f4366d0f");
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.Процедура          = "Документы.УведомлениеОВыбытииМДЛП.ОбработатьДанныеДляОбновленияОперации";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УведомлениеОВыбытииМДЛП.ЗарегистрироватьДанныеДляОбновленияОперации";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.УведомлениеОВыбытииМДЛП";
	Обработчик.ЧитаемыеОбъекты    = "Документ.УведомлениеОВыбытииМДЛП";
	Обработчик.ИзменяемыеОбъекты  = "Документ.УведомлениеОВыбытииМДЛП";
	Обработчик.Комментарий        = НСтр("ru = 'Заполнение реквизита Операция документа Уведомление о выбытии лекарственных препаратов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "1.2.8.2";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("3c5ea890-f821-4ada-9b7c-479dbb6fd700");
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.Процедура          = "Справочники.МДЛППрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МДЛППрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Справочник.МДЛППрисоединенныеФайлы";
	Обработчик.ЧитаемыеОбъекты    = "Справочник.МДЛППрисоединенныеФайлы";
	Обработчик.ИзменяемыеОбъекты  = "Справочник.МДЛППрисоединенныеФайлы";
	Обработчик.Комментарий        = НСтр("ru = 'Очистка извлеченного текста полнотекстового поиска для справочника ""Протокол обмена МДЛП""'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		МодульИнтеграцияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
		МодульИнтеграцияМДЛП.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриПодготовкеМакетаОписанияОбновлений
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	

КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
 
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура НачальноеЗаполнение() Экспорт
	
	УстановитьИспользованиеРеестраВыбытияУпаковокМДЛП();
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьВерсиюСхемОбмена(Параметры) Экспорт
	
	Версия = Константы.ВерсияСхемОбменаМДЛП.Получить();
	ДоступныеВерсии = ИнтеграцияМДЛП.ДоступныеВерсииСхемОбмена();
	ВерсияПоУмолчанию = ИнтеграцияМДЛП.ВерсияСхемОбменаПоУмолчанию();
	Если ДоступныеВерсии.Найти(Версия) = Неопределено
	 Или ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПоУмолчанию + ".0", Версия + ".0") > 0 Тогда
		Если Не Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		Константы.ВерсияСхемОбменаМДЛП.Установить(ВерсияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиПараметрыПодключенияАПИ() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОрганизацииМДЛП.Ссылка  КАК Ссылка,
	|	НастройкиПодключения.ИдентификаторОрганизации  КАК РегистрационныйНомерУчастника,
	|	НастройкиПодключения.Адрес  КАК Адрес,
	|	НастройкиПодключения.ИдентификаторКлиента  КАК ИдентификаторКлиента,
	|	НастройкиПодключения.СекретКлиента  КАК СекретКлиента,
	|	НастройкиПодключения.ДатаНачалаИспользования  КАК ДатаНачалаИспользования
	|ИЗ
	|	РегистрСведений.УдалитьНастройкиОбменаАПИМДЛП КАК НастройкиПодключения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ОрганизацииМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.РегистрационныйНомерУчастника = НастройкиПодключения.ИдентификаторОрганизации
	|ГДЕ
	|	ЕСТЬNULL(ОрганизацииМДЛП.ИдентификаторКлиента, """") = """"
	|");
	
	УказанныеАдреса = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Организация = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Организация = Справочники.ОрганизацииМДЛП.СоздатьЭлемент();
			Организация.СобственнаяОрганизация = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Организация, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Организация);
		
		УказанныеАдреса.Вставить(Выборка.Адрес);
		
	КонецЦикла;
	
	ТекущееЗначениеАдреса = Константы.АдресСервисаМДЛП.Получить();
	Если ЗначениеЗаполнено(ТекущееЗначениеАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если УказанныеАдреса.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из УказанныеАдреса Цикл
			Константы.АдресСервисаМДЛП.Установить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКлючиУпаковокВРегистрах() Экспорт
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Прочитать();
	Набор.Записать();
	
	Набор = РегистрыСведений.ДолиУпаковокМДЛП.СоздатьНаборЗаписей();
	Набор.Прочитать();
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацииМестаДеятельности() Экспорт
	
	СоздатьОрганизацииМестаДеятельностиМДЛП();
	ЗаполнитьСвязиОрганизацийМестДеятельности();
	ЗаполнитьМестоДеятельностиВУпаковках();
	ЗаполнитьДанныеГрупповыхУпаковок();
	
КонецПроцедуры

Процедура СоздатьОрганизацииМестаДеятельностиМДЛП()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Записи.Идентификатор                            КАК Идентификатор,
	|	МАКСИМУМ(Записи.РегистрационныйНомерУчастника)  КАК РегистрационныйНомерУчастника,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Записи.РегистрационныйНомерУчастника) - МАКСИМУМ(
	|		ВЫБОР КОГДА Записи.РегистрационныйНомерУчастника = """" ТОГДА 1 ИНАЧЕ 0 КОНЕЦ)
	|		                                            КАК КоличествоОрганизаций,
	|	МАКСИМУМ(Записи.СобственнаяОрганизация)         КАК СобственнаяОрганизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Записи.ИдентификаторСубъектаОбращения  КАК Идентификатор,
	|		Записи.ИдентификаторОрганизации        КАК РегистрационныйНомерУчастника,
	|		Записи.СобственнаяОрганизация          КАК СобственнаяОрганизация
	|	ИЗ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|		ПО
	|			МестаДеятельности.Идентификатор = Записи.ИдентификаторСубъектаОбращения
	|	ГДЕ
	|		МестаДеятельности.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Записи.ИдентификаторСубъектаОбращения  КАК Идентификатор,
	|		""""                                   КАК РегистрационныйНомерУчастника,
	|		ИСТИНА                                 КАК СобственнаяОрганизация
	|	ИЗ
	|		РегистрСведений.УдалитьУпаковкиМДЛП КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|		ПО
	|			МестаДеятельности.Идентификатор = Записи.ИдентификаторСубъектаОбращения
	|	ГДЕ
	|		МестаДеятельности.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""""             КАК Идентификатор,
	|		Записи.Владелец  КАК РегистрационныйНомерУчастника,
	|		ЛОЖЬ             КАК СобственнаяОрганизация
	|	ИЗ
	|		РегистрСведений.УдалитьУпаковкиМДЛП КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ОрганизацииМДЛП КАК Организации
	|		ПО
	|			Организации.РегистрационныйНомерУчастника = Записи.Владелец
	|	ГДЕ
	|		Организации.Ссылка ЕСТЬ NULL
	|		И Записи.Владелец <> """"
	|	) КАК Записи
	|
	|СГРУППИРОВАТЬ ПО
	|	Записи.Идентификатор
	|");
	
	СозданныеОрганизации = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Организация = Неопределено;
		Если ЗначениеЗаполнено(Выборка.РегистрационныйНомерУчастника)
		   И (Выборка.КоличествоОрганизаций = 1 Или Не ЗначениеЗаполнено(Выборка.Идентификатор))
		   И ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.РегистрационныйНомерУчастника, "system_subject_type") Тогда
			
			Организация = СозданныеОрганизации.Получить(НРег(Выборка.РегистрационныйНомерУчастника));
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация = Справочники.ОрганизацииМДЛП.НайтиПоРеквизиту("РегистрационныйНомерУчастника", Выборка.РегистрационныйНомерУчастника);
				Если Организация.Пустая() Тогда
					ОрганизацияОбъект = Справочники.ОрганизацииМДЛП.СоздатьЭлемент();
					ОрганизацияОбъект.РегистрационныйНомерУчастника = Выборка.РегистрационныйНомерУчастника;
					ОрганизацияОбъект.СобственнаяОрганизация = Выборка.СобственнаяОрганизация;
					ОрганизацияОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Организация %1'"), Выборка.РегистрационныйНомерУчастника);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
					Организация = ОрганизацияОбъект.Ссылка;
				КонецЕсли;
				СозданныеОрганизации.Вставить(НРег(Выборка.РегистрационныйНомерУчастника), Организация);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			МестоДеятельности = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
			МестоДеятельности.Идентификатор = Выборка.Идентификатор;
			МестоДеятельности.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Место деятельности %1'"), Выборка.Идентификатор);
			МестоДеятельности.Организация = Организация;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельности);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвязиОрганизацийМестДеятельности()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Записи.ОрганизацияКонтрагент           КАК ОрганизацияКонтрагент,
	|	Записи.ОбъектМестаДеятельности         КАК ОбъектМестаДеятельности,
	|	Записи.СобственнаяОрганизация          КАК СобственнаяОрганизация,
	|	МестаДеятельности.Организация          КАК Организация,
	|	МестаДеятельности.Ссылка               КАК МестоДеятельности,
	|	Записи.ИдентификаторОрганизации        КАК ИдентификаторОрганизации,
	|	Записи.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	РегистрСведений.СубъектыОбращенияМДЛП КАК Записи
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|	ПО
	|		МестаДеятельности.Идентификатор = Записи.ИдентификаторСубъектаОбращения
	|ГДЕ
	|	Записи.МестоДеятельности = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.СубъектыОбращенияМДЛП.СоздатьНаборЗаписей();
		Набор.Отбор.ОрганизацияКонтрагент.Установить(Выборка.ОрганизацияКонтрагент);
		Набор.Отбор.ОбъектМестаДеятельности.Установить(Выборка.ОбъектМестаДеятельности);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМестоДеятельностиВУпаковках()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Упаковки.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения,
	|	Упаковки.Владелец                        КАК ИдентификаторВладельца,
	|	МестаДеятельности.Ссылка                 КАК МестоДеятельности,
	|	Владельцы.Ссылка                         КАК Владелец
	|ИЗ
	|	РегистрСведений.УдалитьУпаковкиМДЛП КАК Упаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|	ПО
	|		МестаДеятельности.Идентификатор = Упаковки.ИдентификаторСубъектаОбращения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ОрганизацииМДЛП КАК Владельцы
	|	ПО
	|		Владельцы.РегистрационныйНомерУчастника = Упаковки.Владелец
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.ИдентификаторСубъектаОбращения,
	|	Упаковки.Владелец,
	|	МестаДеятельности.Ссылка,
	|	Владельцы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(МестоДеятельности),
	|	МАКСИМУМ(Владелец),
	|	МАКСИМУМ(ИдентификаторВладельца)
	|ПО
	|	ИдентификаторСубъектаОбращения,
	|	ИдентификаторВладельца
	|");
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторСубъектаОбращения");
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			
			ИсходныйНабор = РегистрыСведений.УдалитьУпаковкиМДЛП.СоздатьНаборЗаписей();
			ИсходныйНабор.Отбор.ИдентификаторСубъектаОбращения.Установить(Выборка.ИдентификаторСубъектаОбращения);
			ИсходныйНабор.Прочитать();
			
			Таблица = ИсходныйНабор.Выгрузить();
			
			ИсходныйНабор.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИсходныйНабор);
			
			Если Таблица.Колонки.Найти("МестоДеятельности") = Неопределено Тогда
				Таблица.Колонки.Добавить("МестоДеятельности", Новый ОписаниеТипов("СправочникСсылка.МестаДеятельностиМДЛП"));
			КонецЕсли;
			Таблица.Колонки.КодТретичнойУпаковки.Имя = "НомерГрупповойУпаковки";
			Таблица.Колонки.Владелец.Имя = "УдалитьВладельца";
			Таблица.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.ОрганизацииМДЛП"));
			Таблица.ЗаполнитьЗначения(Выборка.МестоДеятельности, "МестоДеятельности");
			Если ЗначениеЗаполнено(Выборка.ИдентификаторВладельца) Тогда
				ВыбораВладелец = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИдентификаторВладельца");
				Пока Выборка.Следующий() Цикл
					Если Не ЗначениеЗаполнено(Выборка.ИдентификаторВладельца) Тогда
						Продолжить;
					КонецЕсли;
					НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("УдалитьВладельца", Выборка.ИдентификаторВладельца));
					Для Каждого Строка Из НайденныеСтроки Цикл
						Строка.Владелец = Выборка.Владелец;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			НовыйНабор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
			НовыйНабор.Загрузить(Таблица);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНабор);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеГрупповыхУпаковок() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.НомерУпаковки  КАК НомерГрупповойУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиМДЛП КАК ВложенныеУпаковки
	|	ПО
	|		ВложенныеУпаковки.ДокументРезерва = Упаковки.НомерУпаковки
	|ГДЕ
	|	Упаковки.ГрупповаяУпаковка
	|	И Упаковки.НомерГрупповойУпаковки = """"
	|	И ВложенныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|");
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаУпаковок = Новый ТаблицаЗначений;
	ТаблицаУпаковок.Колонки.Добавить("НомерУпаковки", Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип);
	ТаблицаУпаковок.Колонки.Добавить("НомерГрупповойУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВложенныеУпаковки = ПолучитьВложенныеУпаковки(Выборка.НомерГрупповойУпаковки);
		Для Каждого Упаковка Из ВложенныеУпаковки Цикл
			Строка = ТаблицаУпаковок.Добавить();
			Строка.НомерУпаковки = Упаковка;
			Строка.НомерГрупповойУпаковки = Выборка.НомерГрупповойУпаковки;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВложенныеУпаковки.НомерГрупповойУпаковки  КАК НомерГрупповойУпаковки,
	|	ВложенныеУпаковки.НомерУпаковки           КАК НомерУпаковки
	|ПОМЕСТИТЬ ВложенныеУпаковки
	|ИЗ
	|	&ВложенныеУпаковки КАК ВложенныеУпаковки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.НомерГрупповойУпаковки  КАК НомерГрупповойУпаковки,
	|	ИСТИНА                           КАК ВложеныПотребительскиеУпаковки
	|ПОМЕСТИТЬ ГрупповыеУпаковкиСВложениемПотребительских
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|ГДЕ
	|	НЕ Упаковки.ГрупповаяУпаковка
	|	И Упаковки.НомерГрупповойУпаковки <> """"
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.НомерУпаковки           КАК НомерУпаковки,
	|	Упаковки.МестоДеятельности       КАК МестоДеятельности,
	|	НЕОПРЕДЕЛЕНО                     КАК ДокументРезерва,
	|	Упаковки.Статус                  КАК Статус,
	|	Упаковки.ДатаСтатуса             КАК ДатаСтатуса,
	|	Упаковки.Владелец                КАК Владелец,
	|	Упаковки.НомерГрупповойУпаковки  КАК НомерГрупповойУпаковки,
	|	Упаковки.ИсходныйСтатус          КАК ИсходныйСтатус,
	|	Упаковки.ГрупповаяУпаковка       КАК ГрупповаяУпаковка,
	|	ЕСТЬNULL(ГрупповыеУпаковкиСВложениемПотребительских.ВложеныПотребительскиеУпаковки, ЛОЖЬ) КАК ВложеныПотребительскиеУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ГрупповыеУпаковкиСВложениемПотребительских КАК ГрупповыеУпаковкиСВложениемПотребительских
	|	ПО
	|		ГрупповыеУпаковкиСВложениемПотребительских.НомерГрупповойУпаковки = Упаковки.НомерУпаковки
	|ГДЕ
	|	Упаковки.НомерГрупповойУпаковки = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Упаковки.НомерУпаковки           КАК НомерУпаковки,
	|	Упаковки.МестоДеятельности       КАК МестоДеятельности,
	|	НЕОПРЕДЕЛЕНО                     КАК ДокументРезерва,
	|	Упаковки.Статус                  КАК Статус,
	|	Упаковки.ДатаСтатуса             КАК ДатаСтатуса,
	|	Упаковки.Владелец                КАК Владелец,
	|	Упаковки.НомерГрупповойУпаковки  КАК НомерГрупповойУпаковки,
	|	Упаковки.ИсходныйСтатус          КАК ИсходныйСтатус,
	|	Упаковки.ГрупповаяУпаковка       КАК ГрупповаяУпаковка,
	|	ЕСТЬNULL(ГрупповыеУпаковкиСВложениемПотребительских.ВложеныПотребительскиеУпаковки, ЛОЖЬ) КАК ВложеныПотребительскиеУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ГрупповыеУпаковкиСВложениемПотребительских КАК ГрупповыеУпаковкиСВложениемПотребительских
	|	ПО
	|		ГрупповыеУпаковкиСВложениемПотребительских.НомерГрупповойУпаковки = Упаковки.НомерУпаковки
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Упаковки.ДокументРезерва) = ТИП(Строка)
	|	И Упаковки.ДокументРезерва <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Упаковки.НомерУпаковки                    КАК НомерУпаковки,
	|	Упаковки.МестоДеятельности                КАК МестоДеятельности,
	|	ВложенныеУпаковки.НомерГрупповойУпаковки  КАК ДокументРезерва,
	|	Упаковки.Статус                           КАК Статус,
	|	Упаковки.ДатаСтатуса                      КАК ДатаСтатуса,
	|	Упаковки.Владелец                         КАК Владелец,
	|	Упаковки.НомерГрупповойУпаковки           КАК НомерГрупповойУпаковки,
	|	Упаковки.ИсходныйСтатус                   КАК ИсходныйСтатус,
	|	Упаковки.ГрупповаяУпаковка                КАК ГрупповаяУпаковка,
	|	ЕСТЬNULL(ГрупповыеУпаковкиСВложениемПотребительских.ВложеныПотребительскиеУпаковки, ЛОЖЬ) КАК ВложеныПотребительскиеУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВложенныеУпаковки КАК ВложенныеУпаковки
	|	ПО
	|		ВложенныеУпаковки.НомерУпаковки = Упаковки.НомерУпаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ГрупповыеУпаковкиСВложениемПотребительских КАК ГрупповыеУпаковкиСВложениемПотребительских
	|	ПО
	|		ГрупповыеУпаковкиСВложениемПотребительских.НомерГрупповойУпаковки = Упаковки.НомерУпаковки
	|");
	Запрос.УстановитьПараметр("ВложенныеУпаковки", ТаблицаУпаковок);
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

Функция ПолучитьВложенныеУпаковки(НомерУпаковки)
	
	ВложенныеУпаковки = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.НомерУпаковки      КАК НомерУпаковки,
	|	Упаковки.ГрупповаяУпаковка  КАК ГрупповаяУпаковка
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерГрупповойУпаковки = &НомерУпаковки
	|");
	
	ГрупповыеУпаковки = Новый Массив;
	ГрупповыеУпаковкиКОбработке = Новый Массив;
	ГрупповыеУпаковкиКОбработке.Добавить(НомерУпаковки);
	
	Пока ГрупповыеУпаковкиКОбработке.Количество() > 0 Цикл
		
		ГрупповаяУпаковка = ГрупповыеУпаковкиКОбработке[0];
		ГрупповыеУпаковкиКОбработке.Удалить(0);
		ГрупповыеУпаковки.Добавить(ГрупповаяУпаковка);
		
		Запрос.УстановитьПараметр("НомерУпаковки", ГрупповаяУпаковка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВложенныеУпаковки.Добавить(Выборка.НомерУпаковки);
			Если Выборка.ГрупповаяУпаковка Тогда
				Если ГрупповыеУпаковки.Найти(Выборка.НомерУпаковки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ГрупповыеУпаковкиКОбработке.Добавить(Выборка.НомерУпаковки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВложенныеУпаковки;
	
КонецФункции

Процедура ЗарегистрироватьДокументыДляЗаполненияМестДеятельности(ПолноеИмяОбъекта, Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	#ДокументыДляОбработки КАК ДокументыДляОбработки
	|ГДЕ
	|	ДокументыДляОбработки.УдалитьИдентификаторОрганизации <> """"
	|	И ДокументыДляОбработки.МестоДеятельности = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументыДляОбработки", ПолноеИмяОбъекта);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьМестаДеятельностиВДокументах(ПолноеИмяОбъекта, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, Запрос.МенеджерВременныхТаблиц);
	
	Если Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокументыДляОбработки.Ссылка   КАК Ссылка,
		|	МестаДеятельности.Организация  КАК Организация,
		|	МестаДеятельности.Ссылка       КАК МестоДеятельности,
		|	Документ.УдалитьИдентификаторОрганизации  КАК Идентификатор
		|ИЗ
		|	#ДокументыДляОбработки КАК ДокументыДляОбработки
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		#Документ КАК Документ
		|	ПО
		|		Документ.Ссылка = ДокументыДляОбработки.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|	ПО
		|		МестаДеятельности.Идентификатор = Документ.УдалитьИдентификаторОрганизации
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Документ", ПолноеИмяОбъекта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										Выборка.Ссылка.Метаданные(),
										Выборка.Ссылка,
										ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено
			 Или Не ЗначениеЗаполнено(Выборка.МестоДеятельности)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type") Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МестоДеятельности) Тогда
				Объект.Организация       = Выборка.Организация;
				Объект.МестоДеятельности = Выборка.МестоДеятельности;
			Иначе
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.Идентификатор, Объект.Организация, Объект.МестоДеятельности);
				Если Не ЗначениеЗаполнено(Объект.МестоДеятельности) Тогда
					МестоДеятельностиОбъект = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
					МестоДеятельностиОбъект.Идентификатор = Выборка.Идентификатор;
					МестоДеятельностиОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место деятельности %1'"), Выборка.Идентификатор);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельностиОбъект);
					Объект.МестоДеятельности = МестоДеятельностиОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
	Иначе
		Параметры.ОбработкаЗавершена = Не Результат.ЕстьДанныеДляОбработки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеСостоянияПодтверждения(Параметры) Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	#ДокументыДляОбработки КАК ДокументыДляОбработки
	|ГДЕ
	|	ДокументыДляОбработки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПустаяСсылка)
	|";
	
	ЧастиЗапроса = Новый Массив;
	Для Каждого ИмяДокумента Из ИменаДокументовКЗаполнениюСостоянияПодтверждения() Цикл
		ЧастиЗапроса.Добавить(СтрЗаменить(ШаблонЗапроса, "#ДокументыДляОбработки", ИмяДокумента));
	КонецЦикла;
	
	Если ЧастиЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеСостоянияПодтверждения(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбработкаЗавершена = Истина;
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("НомераУпаковок");
	ИменаТабличныхЧастей.Добавить("ТранспортныеУпаковки");
	
	ИменаДокументов = ИменаДокументовКЗаполнениюСостоянияПодтверждения();
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
		СтатусПоУмолчанию = МенеджерОбъекта.СтатусИнформированияПоУмолчанию();
		ДальнейшееДействиеПоУмолчанию = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ИмяДокумента);
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										Выборка.Ссылка.Метаданные(),
										Выборка.Ссылка,
										ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено
			 Или ЗначениеЗаполнено(Объект.СостояниеПодтверждения) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
			
			Состояние = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Выборка.Ссылка);
			Если Состояние.Статус <> СтатусПоУмолчанию Или Состояние.ДальнейшееДействие.Найти(ДальнейшееДействиеПоУмолчанию) = Неопределено Тогда
				Если Состояние.Статус = Перечисления.СтатусыИнформированияМДЛП.Передано Тогда
					СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
				ИначеЕсли Состояние.Статус = Перечисления.СтатусыИнформированияМДЛП.Принято
				      Или Состояние.Статус = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято Тогда
					СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
				ИначеЕсли Состояние.Статус = Перечисления.СтатусыИнформированияМДЛП.Отклонено Тогда
					СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				КонецЕсли;
			КонецЕсли;
			
			Объект.СостояниеПодтверждения = СостояниеПодтверждения;
			
			Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
				ТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти.Найти("ИмяТабличнойЧасти");
				Если ТабличнаяЧасть <> Неопределено И ОбщегоНазначения.ЕстьРеквизитОбъекта("СостояниеПодтверждения", ТабличнаяЧасть) Тогда
					НайденныеСтроки = Объект[ТабличнаяЧасть.Имя].НайтиСтроки(Новый Структура("СостояниеПодтверждения", Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ));
					Для Каждого Строка Из НайденныеСтроки Цикл
						Строка.Отклонено = Истина;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		ОбработкаЗавершена = ОбработкаЗавершена И ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ИмяДокумента);;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Функция ИменаДокументовКЗаполнениюСостоянияПодтверждения()
	
	ИменаДокументов = Новый Массив;
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.Типы() Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип);
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СостояниеПодтверждения", МетаданныеДокумента) Тогда
			ИменаДокументов.Добавить(МетаданныеДокумента.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаДокументов;
	
КонецФункции

Функция ЗаполнитьФлагВестиУчетВИБ() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МестаДеятельности.Ссылка  КАК Ссылка
	|ИЗ
	|	Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
	|ГДЕ
	|	МестаДеятельности.Организация.СобственнаяОрганизация
	|	И НЕ МестаДеятельности.ВестиУчетВЭтойИБ
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВестиУчетВЭтойИБ = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецФункции

Функция ЗаполнитьФлагРезидент() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Организации.Ссылка  КАК Ссылка
	|ИЗ
	|	Справочник.ОрганизацииМДЛП КАК Организации
	|ГДЕ
	|	НЕ Организации.Резидент
	|	И Организации.СобственнаяОрганизация
	|	И Организации.ТипАутентификации <> ЗНАЧЕНИЕ(Перечисление.ТипыАутентификацииМДЛП.Пароль)
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Резидент = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецФункции

Функция УстановитьИспользованиеРеестраВыбытияУпаковокМДЛП() Экспорт
	
	Константы.ИспользоватьРеестрВыбытияУпаковокМДЛП.Установить(Истина);
	
КонецФункции

Функция УстановитьИспользованиеОчисткиРезультатовПроверкиКММДЛП() Экспорт
	
	ПараметрыЗадания = Новый Структура("Использование", КонтрольКодовМаркировкиМДЛП.КонтрольКМВключен());
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(
		Метаданные.РегламентныеЗадания.ОчисткаРезультатовПроверкиКММДЛП,
		ПараметрыЗадания);
	
КонецФункции

#КонецОбласти
