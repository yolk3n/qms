#Область ПрограммныйИнтерфейс

/// Канонизация XML
//
// Параметры:
//   ОповещениеИлиКомпонента - ОписаниеОповещения, Произвольный -
//     на клиенте - Оповещение о завершении канонизации,
//     на сервере - Компонента XMLDSig,
//   ДокументXML - Строка -
//     Строковое представление канонизируемого документа XML.
//   XPath - Строка -
//     Запрос XPath, выделяющий канонизируемую часть документа XML.
//   ОпределитьАлгоритм - Булево -
//     Признак необходимость определить алгоритм канонизации.
//
// Возвращаемое значение:
//   Строка - Канонизированный XML. Может также выполняться обработка Оповещения.
///
Функция КанонизироватьXML(ОповещениеИлиКомпонента, ДокументXML, XPath, ОпределитьАлгоритм = Истина) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		#Если Сервер Тогда
			// при подписании и проверке на сервере
			Если СтрНайти(ТипЗнч(ОповещениеИлиКомпонента), "ExtraCryptoAPI") <> 0 Тогда
				ЭтоОповещение_ = Ложь;
				Компонента_ = ОповещениеИлиКомпонента;
			КонецЕсли;
			
			Если Компонента_ = Неопределено Или Истина = ОпределитьАлгоритм Тогда
				
				ЧтениеXML_ = Новый ЧтениеXML;
				ЧтениеXML_.УстановитьСтроку(ДокументXML);
				
				ПостроительDOM_ = Новый ПостроительDOM;
				ДокументDOM_ = ПостроительDOM_.Прочитать(ЧтениеXML_);
				
				ЧтениеXML_.Закрыть();
				
				Разыменователь_ = ДокументDOM_.СоздатьРазыменовательПИ();
				Тип_ = ТипРезультатаDOMXPath.ЛюбойНеупорядоченныйУзел;
				Результат_ = ДокументDOM_.ВычислитьВыражениеXPath(XPath, ДокументDOM_, Разыменователь_, Тип_);
				
				Успех_ = Истина
					И ТипЗнч(Результат_.ОдиночныйУзелЗначение) = Тип("ЭлементDOM")
					И Результат_.ОдиночныйУзелЗначение.ЛокальноеИмя = "SignedInfo"
					И Результат_.ОдиночныйУзелЗначение.URIПространстваИмен = xmlns.ds()
				;
				
			КонецЕсли;
				
			Если Успех_ = Истина Тогда 
				
				ТипСтрока_ = ТипРезультатаDOMXPath.Строка;
				XPathМетодКанонизации_ = СтрШаблон(
					"./*[
					|	local-name()='CanonicalizationMethod'
					|	and namespace-uri()='%1'
					|]/@Algorithm",
					xmlns.ds()
				);
				Рез_ = ДокументDOM_.ВычислитьВыражениеXPath(
					XPathМетодКанонизации_, Результат_.ОдиночныйУзелЗначение, Разыменователь_, ТипСтрока_
				);
				МетодКанонизации_ = Рез_.СтроковоеЗначение;
				
			КонецЕсли;
			
			Если МетодКанонизации_ = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315" Тогда
				
				Канонизатор_ = Новый ПреобразованиеККаноническомуXML;
				КанонизированныйXML_ = Канонизатор_.КанонизироватьВСтроку(
					ДокументDOM_, ТипКаноническогоXML.КаноническийXML, XPath
				);
				
				
				
			Иначе
				// По умолчанию канонизация будет перенаправлена в компоненту XMLDSig БСП.
				
			КонецЕсли;
			
			Если Истина
				И ЗначениеЗаполнено(КанонизированныйXML_)
				И Компонента_ <> Неопределено
			Тогда
				Возврат КанонизированныйXML_;
				
			ИначеЕсли Компонента_ <> Неопределено Тогда
					
					КанонизированныйXML_ = Компонента_.C14N(
						ДокументXML,
						XPath);
				
			КонецЕсли;
		
			Возврат КанонизированныйXML_;
		
		#КонецЕсли
		
	#Иначе
		
		__ПРОВЕРКА__(Ложь, "В Веб-клиенте данная функциональность не поддерживается.");
		
	#КонецЕсли
	
КонецФункции

#КонецОбласти