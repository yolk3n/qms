// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура УдалитьДокументИзПакета(Знач ИдентификаторПакета, Знач ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	ПакетыДокументовЭДО.УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДО.ДобавитьДокументВПакет
Функция ДобавитьДокументВПакет(Знач ИдентификаторПакета, Знач ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Возврат ПакетыДокументовЭДО.ДобавитьДокументВПакет(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);
	
КонецФункции

// Параметры:
//  ДокументыПакета - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - Неопределено - если контекст не инициализирован.
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДО.СоздатьПакетДокументов
Функция СоздатьПакетДокументов(Знач ДокументыПакета, КонтекстДиагностики = Неопределено) Экспорт
	
	Если КонтекстДиагностики = Неопределено Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	КонецЕсли;
	
	Возврат ПакетыДокументовЭДО.СоздатьПакетДокументов(ДокументыПакета, КонтекстДиагностики);
	
КонецФункции

// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  См. ПакетыДокументовЭДО.ДокументыПакета
Функция ДокументыПакета(Знач ИдентификаторПакета) Экспорт
	
	Возврат ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета);
	
КонецФункции

#КонецОбласти
