
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ИНТЕРФЕЙСА МЕНЕДЖЕРА КЛЮЧА АНАЛИТИКИ
//
// Менеджер должен поддерживать следующие экспортные функции:
//  СоздатьКлючАналитики(ПараметрыАналитики)   - возвращает новый ключ аналитики.
//  ЗначениеКлючаАналитики(ПараметрыАналитики) - возвращает существующий или новый ключ аналитики.
//  ИменаПолейАналитики()                      - возвращает массив имен полей соответствующие ключу аналитики.
//  ИмяРегистраАналитики()                     - возвращает имя регистра сведений ключа аналитики.
//  ЗаполнитьНаименованиеКлючаАналитики(КлючАналитики, ПараметрыАналитики)       - заполняет наименование ключа аналитики,
//    заполненное наименование должно совпадать с результатом работы Лев(ПолучитьНаименованиеКлючаАналитики(ПараметрыАналитики), 150);
//  ПолучитьНаименованиеКлючаАналитики(ПараметрыАналитики)                       - формирует наименование ключа аналитики.
//  ЗаполнитьДополнительныеПоляКлючаАналитики(КлючАналитики, ПараметрыАналитики) - заполняет дополнительные
//    поля ключа аналитики при необходимости.
//

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получает ключ аналитики по значениям полей
//
// Параметры:
//  МенеджерКлючаАналитики - должен поддерживать интерфейс ключей аналитики
//  ПараметрыАналитики     - значения полей получаемого ключа аналитики
//
// Возвращаемое значение:
//  КлючАналитики - существующий или новый.
//
Функция ЗначениеКлючаАналитики(МенеджерКлючаАналитики, ПараметрыАналитики) Экспорт
	
	МетаданныеРегистраАналитики = Метаданные.РегистрыСведений[МенеджерКлючаАналитики.ИмяРегистраАналитики()];
	ЗначенияПолейАналитики = Новый Структура;
	Для Каждого ПолеАналитики Из МетаданныеРегистраАналитики.Измерения Цикл
		ЗначенияПолейАналитики.Вставить(ПолеАналитики.Имя, ПолеАналитики.Тип.ПривестиЗначение());
	КонецЦикла;
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьВСтруктуру(ЗначенияПолейАналитики, ПараметрыАналитики);
	
	ИменаПолейАналитики = СтрСоединить(МенеджерКлючаАналитики.ИменаПолейАналитики(), ",");
	ПоляАналитики = РегистрыСведений[МенеджерКлючаАналитики.ИмяРегистраАналитики()].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ПоляАналитики, ЗначенияПолейАналитики, ИменаПолейАналитики);
	ПоляАналитики.Прочитать();
	
	Если ПоляАналитики.Выбран() Тогда
		Возврат ПоляАналитики.КлючАналитики;
	КонецЕсли;
		
	Возврат МенеджерКлючаАналитики.СоздатьКлючАналитики(ЗначенияПолейАналитики);
	
КонецФункции

// Создает ключ аналитики по значениям полей
//
// Параметры:
//  МенеджерКлючаАналитики - должен поддерживать интерфейс ключей аналитики
//  ПараметрыАналитики - значения полей создаваемой ключа аналитики
//
// Возвращаемое значение:
//  КлючАналитики
//
Функция СоздатьКлючАналитики(МенеджерКлючаАналитики, ПараметрыАналитики) Экспорт
	
	ИменаПолейАналитики = СтрСоединить(МенеджерКлючаАналитики.ИменаПолейАналитики(), ",");
	ПоляАналитики = РегистрыСведений[МенеджерКлючаАналитики.ИмяРегистраАналитики()].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ПоляАналитики, ПараметрыАналитики, ИменаПолейАналитики);
	
	КлючАналитики = МенеджерКлючаАналитики.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(КлючАналитики, ПараметрыАналитики, ИменаПолейАналитики);
	МенеджерКлючаАналитики.ЗаполнитьДополнительныеПоляКлючаАналитики(КлючАналитики, ПараметрыАналитики);
	МенеджерКлючаАналитики.ЗаполнитьНаименованиеКлючаАналитики(КлючАналитики, ПараметрыАналитики);
	КлючАналитики.Записать();
	
	КлючАналитики = КлючАналитики.Ссылка;
	
	ПоляАналитики.КлючАналитики = КлючАналитики;
	ПоляАналитики.Записать(Ложь);
	
	Возврат КлючАналитики;
	
КонецФункции

// Проверяет наличие необходимых ключей аналитики и если не находит их, то создает новые.
//
// Параметры
//  МенеджерКлючаАналитики  - должен поддерживать интерфейс ключей аналитики.
//  МенеджерВременныхТаблиц - должен содержать временную таблицу "втТаблицаАналитики"
//                            со значениями полей аналитики.
//
Процедура ИнициализироватьКлючиАналитики(МенеджерКлючаАналитики, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ втТаблицаАналитики");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТаблицаПолейАналитики = Запрос.Выполнить().Выгрузить();
	
	МетаданныеРегистраАналитики = Метаданные.РегистрыСведений[МенеджерКлючаАналитики.ИмяРегистраАналитики()];
	
	ТаблицаАналитики = Новый ТаблицаЗначений;
	Для Каждого ПолеАналитики Из МетаданныеРегистраАналитики.Измерения Цикл
		ТаблицаАналитики.Колонки.Добавить(ПолеАналитики.Имя, ПолеАналитики.Тип);
	КонецЦикла;
	Для Каждого Колонка Из ТаблицаПолейАналитики.Колонки Цикл
		Если ТаблицаАналитики.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			ТаблицаАналитики.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПолейАналитики, ТаблицаАналитики);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналитики.*
	|ПОМЕСТИТЬ ТаблицаАналитики
	|ИЗ
	|	&ТаблицаАналитики КАК ТаблицаАналитики
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналитики.*
	|ИЗ
	|	ТаблицаАналитики КАК ТаблицаАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			#РегистрАналитики КАК Аналитика
	|			ПО
	|				ИСТИНА
	|				// УсловиеСоединения
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|";
	
	УсловиеСоединения = "";
	ШаблонУсловияСоединения = "И ТаблицаАналитики.%1 = Аналитика.%1";
	ИменаПолейАналитики = МенеджерКлючаАналитики.ИменаПолейАналитики();
	Для Каждого ИмяПоля Из ИменаПолейАналитики Цикл
		ИмяПоля = СокрЛП(ИмяПоля);
		УсловиеСоединения = УсловиеСоединения + СтрШаблон(ШаблонУсловияСоединения, ИмяПоля) + Символы.ПС;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РегистрАналитики", "РегистрСведений." + МенеджерКлючаАналитики.ИмяРегистраАналитики());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УсловиеСоединения", УсловиеСоединения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаАналитики", ТаблицаАналитики);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерКлючаАналитики.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значения полей ключа аналитики
//
Функция ПолучитьЗначенияАналитики(КлючАналитики) Экспорт
	
	МенеджерКлючаАналитики = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КлючАналитики);
	ИменаПолейАналитики = СтрСоединить(МенеджерКлючаАналитики.ИменаПолейАналитики(), ",");
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КлючАналитики, ИменаПолейАналитики);
	
КонецФункции

// Обновляет наименования ключей аналитики.
//
// Параметры:
//  ТолькоТестировать - булево, если необходимо только тестировать без исправления то Истина.
//
Процедура ОбновитьНаименованияКлючейАналитики(ТолькоТестировать = Ложь, ИнтерактивныйРежим = Ложь) Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	// ПоляАналитики
	|	РегистрАналитики.КлючАналитики  КАК КлючАналитики,
	|	КлючиАналитики.Наименование     КАК Наименование
	|ИЗ
	|	#РегистрАналитики КАК РегистрАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		#СправочникАналитики КАК КлючиАналитики
	|	ПО
	|		КлючиАналитики.Ссылка = РегистрАналитики.КлючАналитики
	|ГДЕ
	|	НЕ КлючиАналитики.Ссылка ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = "";
	
	МенеджерыКлючей = РасширеннаяАналитикаУчетаПереопределяемый.ПолучитьМенеджерыКлючей();
	Для Каждого МенеджерКлючаАналитики Из МенеджерыКлючей Цикл
		
		МетаданныеКлючаАналитики = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерКлючаАналитики));
		
		ПоляАналитики = "";
		
		ИменаПолейАналитики = МенеджерКлючаАналитики.ИменаПолейАналитики();
		Для Каждого ИмяПоля Из ИменаПолейАналитики Цикл
			ИмяПоля = СокрЛП(ИмяПоля);
			ПоляАналитики = ПоляАналитики + СтрШаблон("РегистрАналитики.%1 КАК %1,", ИмяПоля) + Символы.ПС;
		КонецЦикла;
		
		ТекстЗапросаАналитики = СтрЗаменить(ШаблонЗапроса, "#СправочникАналитики", МетаданныеКлючаАналитики.ПолноеИмя());
		ТекстЗапросаАналитики = СтрЗаменить(ТекстЗапросаАналитики, "#РегистрАналитики", "РегистрСведений." + МенеджерКлючаАналитики.ИмяРегистраАналитики());
		ТекстЗапросаАналитики = СтрЗаменить(ТекстЗапросаАналитики, "// ПоляАналитики", ПоляАналитики);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаАналитики;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Для Каждого Результат Из РезультатыЗапроса Цикл
		
		Если Не Результат.Пустой() Тогда
			МетаданныеКлючаАналитики = Метаданные.НайтиПоТипу(Результат.Колонки.КлючАналитики.ТипЗначения.Типы()[0]);
			МенеджерКлючаАналитики = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеКлючаАналитики.ПолноеИмя());
			
			ДлинаНаименования = МетаданныеКлючаАналитики.ДлинаНаименования;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НовоеНаименование = СокрЛП(Лев(МенеджерКлючаАналитики.ПолучитьНаименованиеКлючаАналитики(Выборка), ДлинаНаименования));
				Наименование = Выборка.Наименование;
				
				Если НовоеНаименование <> СокрЛП(Наименование) Тогда
					
					Если ТолькоТестировать Тогда
						ТекстСообщения = НСтр("ru='Для ключа аналитики указано не верное наименование ""%Наименование%"". Правильное наименование ""%НовоеНаименование%""'");
					Иначе
						ТекстСообщения = НСтр("ru='Для ключа аналитики изменено наименование. Старое наименование ""%Наименование%"". Новое наименование ""%НовоеНаименование%""'");
						Объект = Выборка.КлючАналитики.ПолучитьОбъект();
						МенеджерКлючаАналитики.ЗаполнитьНаименованиеКлючаАналитики(Объект, Выборка);
						Попытка
							Объект.Записать();
						Исключение
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'РасширеннаяАналитикаУчета.ОбновлениеНаименованияКлючейАналитики'", ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,
								,
								Выборка.КлючАналитики,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%"       , Наименование);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НовоеНаименование%"  , НовоеНаименование);
					
					Если Не ТолькоТестировать Тогда
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'РасширеннаяАналитикаУчета.ОбновлениеНаименованияКлючейАналитики'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Информация,
							,
							Выборка.КлючАналитики,
							ТекстСообщения);
					КонецЕсли;
					
					Если ИнтерактивныйРежим Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.КлючАналитики);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает пометку удаления у ключей, соответствующих отбору
//
Процедура УстановитьПометкуУдаленияКлючейАналитики(МенеджерКлючаАналитики, Отбор, ПометкаУдаления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	%1 КАК Таблица
	|ГДЕ
	|	Таблица.ПометкаУдаления <> &ПометкаУдаления
	|	%2
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	
	Если ТипЗнч(Отбор) = Тип("Массив") Тогда
		СписокОтборов = Отбор;
	Иначе
		СписокОтборов = Новый Массив;
		СписокОтборов.Добавить(Отбор);
	КонецЕсли;
	
	МетаданныеКлючаАналитики = МенеджерКлючаАналитики.ПустаяСсылка().Метаданные();
	ПоляАналитики = МетаданныеКлючаАналитики.Реквизиты;
	ИменаПолейАналитики = МенеджерКлючаАналитики.ИменаПолейАналитики();
	
	УсловияОтбора = "";
	ШаблонОтбора = " ИЛИ Таблица.%1 = &%1";
	Для Каждого ЭлементОтбора Из СписокОтборов Цикл
		
		УсловиеОтбора = "ЛОЖЬ";
		ТипЗначения = ТипЗнч(ЭлементОтбора);
		Для Каждого ИмяАналитики Из ИменаПолейАналитики Цикл
			
			ПолеАналитики = ПоляАналитики[ИмяАналитики];
			Если ПолеАналитики.Тип.СодержитТип(ТипЗначения) Тогда
				Запрос.УстановитьПараметр(ПолеАналитики.Имя, ЭлементОтбора);
				УсловиеОтбора = УсловиеОтбора + СтрШаблон(ШаблонОтбора, ПолеАналитики.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
		УсловияОтбора = УсловияОтбора + " И (" + УсловиеОтбора + ")";
		
	КонецЦикла;
	
	УсловиеПометкиУдаления = "";
	ШаблонПроверкиПометкиУдаления = " И НЕ ЕСТЬNULL(Таблица.%1.ПометкаУдаления, ЛОЖЬ)";
	ШаблонПроверкиПометкиУдаленияОтбора = " И (Таблица.%1 = &%1 ИЛИ НЕ ЕСТЬNULL(Таблица.%1.ПометкаУдаления, ЛОЖЬ))";
	Если Не ПометкаУдаления Тогда
		Для Каждого ИмяАналитики Из ИменаПолейАналитики Цикл
			
			ПолеАналитики = ПоляАналитики[ИмяАналитики];
			ТипАналитики = ПолеАналитики.Тип.Типы()[0];
			Если ОбщегоНазначения.ЭтоСсылка(ТипАналитики) И Не Перечисления.ТипВсеСсылки().СодержитТип(ТипАналитики) Тогда
				Если ПолеАналитики.Тип.СодержитТип(ТипЗначения) Тогда
					Шаблон = ШаблонПроверкиПометкиУдаленияОтбора;
				Иначе
					Шаблон = ШаблонПроверкиПометкиУдаления;
				КонецЕсли;
				УсловиеПометкиУдаления = УсловиеПометкиУдаления + Символы.ПС + СтрШаблон(Шаблон, ПолеАналитики.Имя);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УсловияОтбора = УсловияОтбора + УсловиеПометкиУдаления;
	Запрос.Текст = СтрШаблон(ТекстЗапроса, МетаданныеКлючаАналитики.ПолноеИмя(), УсловияОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Заменяет дубли ключей аналитики в данных
//
Процедура ЗаменитьДублиКлючейАналитики() Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.ПометкаУдаления КАК ПометкаУдаления,
	|	Аналитика.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	#СправочникАналитики КАК ДанныеСправочника
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		#РегистрАналитики КАК Аналитика
	|		ПО
	|			ИСТИНА
	|			// УсловияСоединения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		#РегистрАналитики КАК ДанныеРегистра
	|		ПО
	|			ДанныеРегистра.КлючАналитики = ДанныеСправочника.Ссылка
	|ГДЕ
	|	ДанныеРегистра.КлючАналитики ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	ШаблонУсловияСоединения = "И Аналитика.%1 = ДанныеСправочника.%1";
	
	ТекстЗапроса = "";
	
	МенеджерыКлючей = РасширеннаяАналитикаУчетаПереопределяемый.ПолучитьМенеджерыКлючей();
	Для Каждого МенеджерКлючаАналитики Из МенеджерыКлючей Цикл
		
		МетаданныеКлючаАналитики = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерКлючаАналитики));
		
		УсловияСоединения = "";
		
		ИменаПолейАналитики = МенеджерКлючаАналитики.ИменаПолейАналитики();
		Для Каждого ИмяПоля Из ИменаПолейАналитики Цикл
			ИмяПоля = СокрЛП(ИмяПоля);
			УсловияСоединения = УсловияСоединения + СтрШаблон(ШаблонУсловияСоединения, ИмяПоля) + Символы.ПС;
		КонецЦикла;
		
		ТекстЗапросаАналитики = СтрЗаменить(ШаблонЗапроса, "#СправочникАналитики", МетаданныеКлючаАналитики.ПолноеИмя());
		ТекстЗапросаАналитики = СтрЗаменить(ТекстЗапросаАналитики, "#РегистрАналитики", "РегистрСведений." + МенеджерКлючаАналитики.ИмяРегистраАналитики());
		ТекстЗапросаАналитики = СтрЗаменить(ТекстЗапросаАналитики, "// УсловияСоединения", УсловияСоединения);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаАналитики;
		
	КонецЦикла;
	
	СоответствиеАналитик = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	Для Каждого РезультатЗапроса Из РезультатыЗапросов Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеАналитик.Вставить(Выборка.Ссылка, Выборка.КлючАналитики);
			
			Если Не Выборка.ПометкаУдаления Тогда
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если СоответствиеАналитик.Количество() > 0 Тогда
		ПараметрыЗамены = ОбщегоНазначения.ПараметрыЗаменыСсылок();
		ПараметрыЗамены.ВключатьБизнесЛогику = Ложь;
		ОбщегоНазначения.ЗаменитьСсылки(СоответствиеАналитик, ПараметрыЗамены);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область СлужебныйПрограммныйИнтерфейс

// см. ОбщегоНазначенияБольничнаяАптека.ПриПолученииИсключенияПоискаСсылок
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Исключения = Новый Массив;
	
	МенеджерыКлючейАналитики = РасширеннаяАналитикаУчетаПереопределяемый.ПолучитьМенеджерыКлючей();
	Для Каждого МенеджерКлючаАналитики Из МенеджерыКлючейАналитики Цикл
		Исключения.Добавить(Метаданные.РегистрыСведений[МенеджерКлючаАналитики.ИмяРегистраАналитики()]);
	КонецЦикла;
	
	Возврат Исключения;
	
КонецФункции

// Удаляет из регистра аналитики данные соответствующие ключу аналитики
//
Процедура УдалитьАналитику(КлючАналитики) Экспорт
	
	МенеджерКлючаАналитики = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КлючАналитики);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	%1
	|ИЗ
	|	РегистрСведений.%2 КАК Таблица
	|ГДЕ
	|	Таблица.КлючАналитики = &КлючАналитики
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючАналитики", КлючАналитики);
	Запрос.Текст = СтрШаблон(
		ТекстЗапроса,
		СтрСоединить(МенеджерКлючаАналитики.ИменаПолейАналитики(), ", "),
		МенеджерКлючаАналитики.ИмяРегистраАналитики());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УдалитьЗаписьИзРегистраСОтбором(МенеджерКлючаАналитики.ИмяРегистраАналитики(), Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет записи из регистра сведений с данными ключа
//
// Параметры:
//  ИмяРегистра - строка, имя регистра,
//  МассивИзмерений - массив, содержит список измерений по которым накладывается отбор,
//  СтруктураОтбора - структура, содержит значения отбора.
//
Процедура УдалитьЗаписьИзРегистраСОтбором(ИмяРегистра, СтруктураОтбора)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Для Каждого ТекущееИзмерение Из Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
		НаборЗаписей.Отбор[ТекущееИзмерение.Имя].Установить(СтруктураОтбора[ТекущееИзмерение.Имя]);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры	

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
