////////////////////////////////////////////////////////////////////////////////
//
// ИнтеграцияМДЛП: процедуры и функции подсистемы "Интеграция с МДЛП"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// По значению перечисления определяет его код.
//
// Параметры:
//  Значение - ПеречислениеСсылка - значение перечисления.
//
// Возвращаемое значение:
//  Число
//
Функция КодЗначенияПеречисления(Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоСсылке(Значение).Индекс(Значение) + 1;
	
КонецФункции

// Возвращает структуру описания сообщения для передачи.
// 
// Возвращаемое значение:
//  Структура
//
Функция СтруктураСообщенияКПередаче() Экспорт
	
	Сообщение = Новый Структура;
	
	Сообщение.Вставить("ТекстСообщения");
	Сообщение.Вставить("ИдентификаторСубъектаОбращения");
	Сообщение.ВСтавить("ИдентификаторЗапроса");
	
	Сообщение.Вставить("ТекстОшибки", "");
	Сообщение.Вставить("Ошибки", Новый Соответствие);
	
	Сообщение.Вставить("Ссылка");
	Сообщение.Вставить("ОбновитьСостояниеПодтверждения", Ложь);
	Сообщение.Вставить("СообщениеОснование");
	Сообщение.Вставить("УникальныйИдентификатор");
	Сообщение.Вставить("ПередачаСведенийЧерезСКЗКМ", Ложь);
	
	// Для отображения в сообщениях пользователям
	Сообщение.Вставить("Описание", "");
	
	Сообщение.Вставить("Операция");
	Сообщение.Вставить("КодОперации");
	
	// Для сохранения в Протокол обмена
	Сообщение.Вставить("ТипСообщения");
	Сообщение.Вставить("Документ");
	
	// Для обновления в формах
	Сообщение.Вставить("Основание");
	
	Сообщение.Вставить("Размер");
	Сообщение.Вставить("ХешСумма");
	Сообщение.Вставить("Подпись");
	
	Возврат Сообщение;
	
КонецФункции

#Область ОбработкаВходящихСообщений

// Обрабатывает входящие сообщения зарегистрированные в регистре ОчередьОбработкиВходящихДокументовМДЛП.
//
// Параметры:
//  ИдентификаторСубъектаОбращения - Строка - идентификатор собственной организации.
//  ПараметрыВыполненияОбмена      - Структура - дополнительные параметры обработки входящих сообщений
//                                               (см. ИнтеграцияМДЛПКлиентСервер.ПараметрыВыполненияОбмена()).
//
// Возвращаемое значение:
//  Структура - результат обработки входящих сообщений.
//
Функция ОбработатьВходящиеСообщения(ИдентификаторСубъектаОбращения = Неопределено, ПараметрыВыполненияОбмена = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Сообщения.ИдентификаторСубъектаОбращения       КАК ИдентификаторСубъектаОбращения,
	|	Сообщения.ИдентификаторОрганизацииОтправителя  КАК ИдентификаторОрганизацииОтправителя,
	|	Сообщения.ИдентификаторСообщения               КАК ИдентификаторСообщения,
	|	Сообщения.ИдентификаторЗапроса                 КАК ИдентификаторЗапроса,
	|	Сообщения.Данные                               КАК Данные,
	|	Сообщения.Квитанция                            КАК Квитанция,
	|	Сообщения.ИсточникДанных                       КАК ИсточникДанных
	|ИЗ
	|	РегистрСведений.ОчередьОбработкиВходящихДокументовМДЛП КАК Сообщения
	|УПОРЯДОЧИТЬ ПО
	|	Сообщения.ДатаРегистрации
	|");
	
	Если ИдентификаторСубъектаОбращения <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("Сообщения.ИдентификаторСубъектаОбращения В (&Идентификатор)");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторСубъектаОбращения);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = Выборка.Данные.Получить();
		
		НачатьТранзакцию();
		Попытка
			
			КлючЗаписи = РегистрыСведений.ОчередьОбработкиВходящихДокументовМДЛП.СоздатьКлючЗаписи(
				Новый Структура("ИдентификаторСообщения", Выборка.ИдентификаторСообщения));
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
			
			Результат = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
			Результат.ВходящееСообщение = ТекстСообщения;
			
			Попытка
				Если Выборка.ИсточникДанных = "РВ" Тогда
					ДанныеСообщения = ПолучитьДанныеИзТекстаСообщенияРВ(ТекстСообщения);
					ДанныеЗагруженногоДокумента = ОбработатьВходящееСообщениеРВ(Выборка, ТекстСообщения, ДанныеСообщения, ПараметрыВыполненияОбмена);
				Иначе
					ОбъектXDTO = ПолучитьОбъектXDTOИзТекстаСообщения(ТекстСообщения);
					ДанныеЗагруженногоДокумента = ОбработатьВходящееСообщение(Выборка, ТекстСообщения, ОбъектXDTO, ПараметрыВыполненияОбмена);
				КонецЕсли;
			Исключение
				ОбработатьОшибку(
					НСтр("ru = 'При разборе входящего сообщения МДЛП возникла ошибка:
								|Текст ошибки: %1'"),
					ИнформацияОбОшибке(),
					Результат);
				ВозвращаемоеЗначение.Изменения.Добавить(Результат);
				ВызватьИсключение;
			КонецПопытки;
			
			УдалятьИзОчереди = Истина; // Удаляем из очереди, если загружаемые данные удалось определить, но данные не были загружены в документ (например, операция 617).
			Если ДанныеЗагруженногоДокумента.Количество() > 0 Тогда
				УдалятьИзОчереди = Ложь;
				Для Каждого Изменение Из ДанныеЗагруженногоДокумента Цикл
					Если Не Изменение.ОбъектНеПопалВОтбор Тогда
						ВозвращаемоеЗначение.Изменения.Добавить(Изменение);
						УдалятьИзОчереди = Истина; // Удаляем из очереди если хотя бы один документ попал в отбор (или отбор не был установлен) и данные по нему были обработаны.
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				Если УдалятьИзОчереди Тогда
					РегистрыСведений.ОчередьОбработкиВходящихДокументовМДЛП.УдалитьСообщениеИзОчереди(Выборка.ИдентификаторСообщения);
				КонецЕсли;
			Исключение
				ОбработатьОшибку(
					НСтр("ru = 'При удалении входящего сообщения МДЛП возникла ошибка:
					           |%1'"),
					ИнформацияОбОшибке(),
					Результат);
				ВозвращаемоеЗначение.Изменения.Добавить(Результат);
				ВызватьИсключение;
			КонецПопытки;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьПолучениеКвитанции(Сообщение, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена = Неопределено)
	
	ДанныеИсходящегоСообщения = ПолучитьДанныеИсходящегоСообщенияДляКвитанции(Сообщение.ИдентификаторЗапроса);
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	Если СписокДокументов <> Неопределено И СписокДокументов.Найти(ДанныеИсходящегоСообщения.Документ) = Неопределено
	 Или ТипыДокументов <> Неопределено И ТипыДокументов.Найти(ТипЗнч(ДанныеИсходящегоСообщения.Документ)) = Неопределено Тогда
		// Возвращаем результат с отметкой ОбъектНеПопалВОтбор в случае,
		// если указаны параметры отбора по списку документов или по списку типов документов,
		// и обрабатываемый документ не попал в этот отбор.
		Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
		Изменения.ОбъектНеПопалВОтбор = Истина;
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменения);
	КонецЕсли;
	
	ИдентификаторКвитанции = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.result, "session_ui") Тогда
		ИдентификаторКвитанции = ОбъектXDTO.result.session_ui;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.result, "operation_id") Тогда
		ИдентификаторКвитанции = ОбъектXDTO.result.operation_id;
	КонецЕсли;
	
	Если ОбъектXDTO.result.operation_result = "Accepted" Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
	ИначеЕсли ОбъектXDTO.result.operation_result = "Partial" Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично;
	Иначе
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено;
		ИдентификаторКвитанции = Неопределено;
	КонецЕсли;
	
	КомментарийПоОперации = СформироватьКомментарийРезультатаВыполнения(ОбъектXDTO.result);
	ОтклоненныеНомера = Неопределено;
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично
	 Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
		ОтклоненныеНомера = Новый Соответствие;
		Для Каждого Ошибка Из ОбъектXDTO.result.errors Цикл
			Если ЗначениеЗаполнено(Ошибка.object_id) Тогда
				ОтклоненныеНомера.Вставить(
					Ошибка.object_id,
					Новый Структура("КодОшибки, ТекстОшибки", Ошибка.error_code, Ошибка.error_desc));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеКвитанции = Новый Структура;
	ДанныеКвитанции.Вставить("СтатусОбработки"       , СтатусОбработки);
	ДанныеКвитанции.Вставить("ИдентификаторКвитанции", ИдентификаторКвитанции);
	ДанныеКвитанции.Вставить("Комментарий"           , КомментарийПоОперации);
	ДанныеКвитанции.Вставить("ОтклоненныеНомера"     , ОтклоненныеНомера);
	ДанныеКвитанции.Вставить("ОперацияКвитанции"     , ДанныеИсходящегоСообщения.Операция);
	
	Возврат ОбработатьКвитанцию(Сообщение, ТекстСообщения, ДанныеКвитанции, ДанныеИсходящегоСообщения)
	
КонецФункции

Функция ОбработатьКвитанцию(Сообщение, ТекстСообщения, ДанныеКвитанции, ДанныеИсходящегоСообщения)
	
	ДокументОбъект = ДанныеИсходящегоСообщения.Документ.ПолучитьОбъект();
	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заблокировать документ %1.'"), ДанныеИсходящегоСообщения.Документ);
	КонецПопытки;
	
	ИсходящееСообщение = ДанныеИсходящегоСообщения.Ссылка;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Операция"                 , Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации);
	Реквизиты.Вставить("Документ"                 , ДанныеИсходящегоСообщения.Документ);
	Реквизиты.Вставить("СообщениеОснование"       , ИсходящееСообщение);
	Реквизиты.Вставить("ОперацияКвитанции"        , ДанныеКвитанции.ОперацияКвитанции);
	Реквизиты.Вставить("СтатусОбработки"          , ДанныеКвитанции.СтатусОбработки);
	Реквизиты.Вставить("ИдентификаторСубъектаОбращения", ДанныеИсходящегоСообщения.ИдентификаторСубъектаОбращения);
	Реквизиты.Вставить("ИдентификаторЗапроса"     , Сообщение.ИдентификаторЗапроса);
	Реквизиты.Вставить("ИдентификаторКвитанции"   , ДанныеКвитанции.ИдентификаторКвитанции);
	Реквизиты.Вставить("ТипСообщения"             , Перечисления.ТипыСообщенийМДЛП.Квитанция);
	
	ВходящееСообщение = Справочники.МДЛППрисоединенныеФайлы.ДобавитьЗаписьВПротоколОбмена(ТекстСообщения, Реквизиты).Ссылка;
	
	Справочники.МДЛППрисоединенныеФайлы.ОбновитьЗаписьПротоколаОбмена(
		ИсходящееСообщение,
		Новый Структура("СтатусОбработки, ИдентификаторКвитанции", ДанныеКвитанции.СтатусОбработки, ДанныеКвитанции.ИдентификаторКвитанции));
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеИсходящегоСообщения.Документ);
	
	МенеджерОбъекта.ОбновитьСостояниеПодтверждения(ДокументОбъект, Реквизиты.ОперацияКвитанции, ИсходящееСообщение, ДанныеКвитанции.СтатусОбработки, ДанныеКвитанции.ОтклоненныеНомера);
	ЗаписатьДокумент(ДокументОбъект);
	ДокументОбъект.Разблокировать();
	
	
	НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ДанныеИсходящегоСообщения.Документ, Реквизиты.Операция, ДанныеКвитанции);
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ИдентификаторСубъектаОбращения = ДанныеИсходящегоСообщения.ИдентификаторСубъектаОбращения;
	ВозвращаемоеЗначение.Операция         = ДанныеИсходящегоСообщения.Операция;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = ВходящееСообщение;
	
	ВозвращаемоеЗначение.Объект            = ДанныеИсходящегоСообщения.Документ;
	ВозвращаемоеЗначение.ДокументОснование = ДанныеИсходящегоСообщения.Основание;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВозвращаемоеЗначение);
	
КонецФункции

Функция ПолучитьДанныеИсходящегоСообщенияДляКвитанции(ИдентификаторЗапроса)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сообщения.Ссылка                   КАК Ссылка,
	|	Сообщения.ВладелецФайла            КАК Документ,
	|	Сообщения.ВладелецФайла.Основание  КАК Основание,
	|	Сообщения.Операция                 КАК Операция,
	|	Сообщения.ИдентификаторСубъектаОбращения КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|ГДЕ
	|	Сообщения.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Исходящее)
	|");
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствует исходящее сообщение для квитанции по идентификатору запроса: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИдентификаторЗапроса);
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ОбработатьПолучениеИнформацииОКиЗ(Сообщение, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена = Неопределено)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сообщения.Ссылка                          КАК Ссылка,
	|	Сообщения.ВладелецФайла                   КАК Документ,
	|	Сообщения.ВладелецФайла.Основание         КАК Основание,
	|	Сообщения.Операция                        КАК Операция,
	|	Сообщения.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|ГДЕ
	|	Сообщения.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Исходящее)
	|");
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", Сообщение.ИдентификаторЗапроса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Комментарий = НСтр("ru = 'Отсутствует исходящий запрос информации:
			|%1'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Комментарий);
		ВызватьИсключение Комментарий;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	Если СписокДокументов <> Неопределено И СписокДокументов.Найти(Выборка.Документ) = Неопределено
	 Или ТипыДокументов <> Неопределено И ТипыДокументов.Найти(ТипЗнч(Выборка.Документ)) = Неопределено Тогда
		// Возвращаем результат с отметкой ОбъектНеПопалВОтбор в случае,
		// если указаны параметры отбора по списку документов или по списку типов документов,
		// и обрабатываемый документ не попал в этот отбор.
		// Отбор по дальнейшему действию (Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации) игнорируем,
		// т.к. считаем, что получение информации об упаковках аналогично получению квитанции.
		Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
		Изменения.ОбъектНеПопалВОтбор = Истина;
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменения);
	КонецЕсли;
	
	ЕстьДанные = ОбъектXDTO.kiz_info.result.found;
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
	
	Если ОбъектXDTO.kiz_info.result.sgtin <> Неопределено Тогда
		Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИнформацияОКиЗ;
	Иначе
		Операция = Перечисления.ОперацииОбменаМДЛП.Получение_СоставУпаковки;
	КонецЕсли;
	
	ИсходящееСообщение = Выборка.Ссылка;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Операция"                      , Операция);
	Реквизиты.Вставить("Документ"                      , Выборка.Документ);
	Реквизиты.Вставить("СообщениеОснование"            , ИсходящееСообщение);
	Реквизиты.Вставить("ИдентификаторСубъектаОбращения", Выборка.ИдентификаторСубъектаОбращения);
	Реквизиты.Вставить("ИдентификаторЗапроса"          , Сообщение.ИдентификаторЗапроса);
	Реквизиты.Вставить("ТипСообщения"                  , Перечисления.ТипыСообщенийМДЛП.Входящее);
	Реквизиты.Вставить("СтатусОбработки"               , СтатусОбработки);
	
	ВходящееСообщение = Справочники.МДЛППрисоединенныеФайлы.ДобавитьЗаписьВПротоколОбмена(ТекстСообщения, Реквизиты).Ссылка;
	
	МенеджерЗагрузки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Документ);
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ЕстьИнформация", ЕстьДанные);
	ДанныеДокумента.Вставить("Статус", ?(ЕстьДанные, НСтр("ru = 'Информация получена'"), НСтр("ru = 'Отсутствует информация об упаковке'")));
	ДанныеДокумента.Вставить("ДанныеУпаковки");
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИнформацияОКиЗ Тогда
		ДанныеДокумента.Вставить("sgtin", ОбъектXDTO.kiz_info.result.sgtin);
		Если ЕстьДанные Тогда
			ДанныеДокумента.ДанныеУпаковки = ОбъектXDTOВСтруктуру(ОбъектXDTO.kiz_info.sgtin);
		КонецЕсли;
	Иначе
		ДанныеДокумента.Вставить("sscc", ОбъектXDTO.kiz_info.result.sscc);
		Если ЕстьДанные Тогда
			ДанныеДокумента.ДанныеУпаковки = ОбъектXDTOВСтруктуру(ОбъектXDTO.kiz_info.sscc_down);
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗагрузки.ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, Выборка.Документ);
	
	ДанныеКвитанции = Новый Структура;
	ДанныеКвитанции.Вставить("СтатусОбработки"  , СтатусОбработки);
	ДанныеКвитанции.Вставить("ОперацияКвитанции", Операция);
	
	НовыйСтатус = МенеджерЗагрузки.ОбновитьСтатусПослеПолученияДанных(Выборка.Документ, Операция, ДанныеКвитанции);
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ИдентификаторСубъектаОбращения = Выборка.ИдентификаторСубъектаОбращения;
	ВозвращаемоеЗначение.Операция              = Операция;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = ВходящееСообщение;
	
	ВозвращаемоеЗначение.Объект            = Выборка.Документ;
	ВозвращаемоеЗначение.ДокументОснование = Выборка.Основание;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВозвращаемоеЗначение);
	
КонецФункции

Функция ОбработатьПолучениеИнформацииОбИерархииВложенностиУпаковок(Сообщение, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена = Неопределено)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сообщения.Ссылка                          КАК Ссылка,
	|	Сообщения.ВладелецФайла                   КАК Документ,
	|	Сообщения.ВладелецФайла.Основание         КАК Основание,
	|	Сообщения.Операция                        КАК Операция,
	|	Сообщения.ИдентификаторСубъектаОбращения  КАК ИдентификаторСубъектаОбращения
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|ГДЕ
	|	Сообщения.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийМДЛП.Исходящее)
	|");
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", Сообщение.ИдентификаторЗапроса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Комментарий = НСтр("ru = 'Отсутствует исходящий запрос информации:
			|%1'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ТекстСообщения);
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Комментарий);
		ВызватьИсключение Комментарий;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	Если СписокДокументов <> Неопределено И СписокДокументов.Найти(Выборка.Документ) = Неопределено
	 Или ТипыДокументов <> Неопределено И ТипыДокументов.Найти(ТипЗнч(Выборка.Документ)) = Неопределено Тогда
		// Возвращаем результат с отметкой ОбъектНеПопалВОтбор в случае,
		// если указаны параметры отбора по списку документов или по списку типов документов,
		// и обрабатываемый документ не попал в этот отбор.
		// Отбор по дальнейшему действию (Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации) игнорируем,
		// т.к. считаем, что получение информации об упаковках аналогично получению квитанции.
		Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
		Изменения.ОбъектНеПопалВОтбор = Истина;
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменения);
	КонецЕсли;
	
	Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИерархияВложенностиУпаковок;
	
	ЕстьДанные = ОбъектXDTOСодержитДанныеТипа(ОбъектXDTO.hierarchy_info, "sscc_down");
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
	
	ИсходящееСообщение = Выборка.Ссылка;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Операция"                      , Операция);
	Реквизиты.Вставить("Документ"                      , Выборка.Документ);
	Реквизиты.Вставить("СообщениеОснование"            , ИсходящееСообщение);
	Реквизиты.Вставить("ИдентификаторСубъектаОбращения", Выборка.ИдентификаторСубъектаОбращения);
	Реквизиты.Вставить("ИдентификаторЗапроса"          , Сообщение.ИдентификаторЗапроса);
	Реквизиты.Вставить("ТипСообщения"                  , Перечисления.ТипыСообщенийМДЛП.Входящее);
	Реквизиты.Вставить("СтатусОбработки"               , СтатусОбработки);
	
	ВходящееСообщение = Справочники.МДЛППрисоединенныеФайлы.ДобавитьЗаписьВПротоколОбмена(ТекстСообщения, Реквизиты).Ссылка;
	
	МенеджерЗагрузки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Документ);
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ЕстьИнформация", ЕстьДанные);
	ДанныеДокумента.Вставить("Статус", ?(ЕстьДанные, НСтр("ru = 'Информация получена'"), НСтр("ru = 'Отсутствует информация об упаковке'")));
	ДанныеДокумента.Вставить("ДанныеУпаковки");
	
	Если ЕстьДанные Тогда
		ДанныеДокумента.Вставить("sscc", ОбъектXDTO.hierarchy_info.sscc_down.sscc_info.sscc);
		ДанныеДокумента.ДанныеУпаковки = ОбъектXDTOВСтруктуру(ОбъектXDTO.hierarchy_info.sscc_down.sscc_info);
	Иначе
		ТекстСообщенияИсходящий = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(ИсходящееСообщение);
		ОбъектXDTOИсходящий = ИнтеграцияМДЛП.ПолучитьОбъектXDTOИзТекстаСообщения(ТекстСообщенияИсходящий);
		ДанныеДокумента.Вставить("sscc", ОбъектXDTOИсходящий.query_hierarchy_info.sscc);
	КонецЕсли;
	
	МенеджерЗагрузки.ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, Выборка.Документ);
	
	ДанныеКвитанции = Новый Структура;
	ДанныеКвитанции.Вставить("СтатусОбработки"  , СтатусОбработки);
	ДанныеКвитанции.Вставить("ОперацияКвитанции", Операция);
	
	НовыйСтатус = МенеджерЗагрузки.ОбновитьСтатусПослеПолученияДанных(Выборка.Документ, Операция, ДанныеКвитанции);
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ИдентификаторСубъектаОбращения = Выборка.ИдентификаторСубъектаОбращения;
	ВозвращаемоеЗначение.Операция              = Операция;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = ВходящееСообщение;
	
	ВозвращаемоеЗначение.Объект            = Выборка.Документ;
	ВозвращаемоеЗначение.ДокументОснование = Выборка.Основание;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВозвращаемоеЗначение);
	
КонецФункции

Функция ОбработатьВходящийДокумент(Сообщение, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена = Неопределено)
	
	ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ДальнейшееДействие");
	Если ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации") Тогда
		// Возвращаем результат с отметкой ОбъектНеПопалВОтбор в случае,
		// если указаны параметры отбора по дальнейшему действию,
		// и обрабатываемые данные не попали в этот отбор.
		// А именно, если нужно обработать только получение квитанции, то обрабатывать входящие документы не нужно.
		Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
		Изменения.ОбъектНеПопалВОтбор = Истина;
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменения);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	ДанныеСообщения = ОбъектXDTOВСтруктуру(ОбъектXDTO);
	Для Каждого КлючЗначение Из ДанныеСообщения Цикл
		ДанныеДокумента = КлючЗначение.Значение;
		Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДокумента = Неопределено Тогда
		
		ДанныеНеизвестногоДокумента = Неопределено;
		ДанныеНеизвестногоСообщения = ОбъектXDTOВСтруктуру(ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения));
		Для Каждого КлючЗначение Из ДанныеНеизвестногоСообщения Цикл
			ДанныеНеизвестногоДокумента = КлючЗначение.Значение;
			Если ТипЗнч(ДанныеНеизвестногоДокумента) = Тип("Структура") Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТипДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеНеизвестногоДокумента, "action_id");
		Если ЗначениеЗаполнено(ТипДокумента) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип входящего сообщения - %1.'"), Формат(ТипДокумента, "ЧН=0; ЧГ=0"));
		Иначе
			ТекстОшибки = НСтр("ru = 'Нет данных для обработки'");
		КонецЕсли;
		
		Возврат РезультатСОшибкойНеизвестногоТипаЗагружаемогоДокумента(ТекстОшибки);
		
	КонецЕсли;
	
	ТипДокумента = ДанныеДокумента.action_id;
	Операция = ОперацияВходящегоСообщения(ТипДокумента);
	Если Операция = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный тип входящего сообщения - %1.'"), Формат(ТипДокумента, "ЧН=0; ЧГ=0"));
		Возврат РезультатСОшибкойНеизвестногоТипаЗагружаемогоДокумента(ТекстОшибки);
		
	КонецЕсли;
	
	ТекстКвитанции = Сообщение.Квитанция.Получить();
	Если Не ЗначениеЗаполнено(ТекстКвитанции) Тогда
		ДанныеДокумента.Вставить("ИдентификаторОрганизацииОтправителя", Сообщение.ИдентификаторОрганизацииОтправителя);
		ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Входящее;
	Иначе
		ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Исходящее;
		Квитанция = ПолучитьОбъектXDTOИзТекстаСообщения(ТекстКвитанции);
		ДанныеДокумента.Вставить("Квитанция", Квитанция);
	КонецЕсли;
	
	КудаЗагрузить = ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция);
	Если КудаЗагрузить.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден документ по операции %1'"), Строка(Операция));
	КонецЕсли;
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	
	ВозвращаемоеЗначение = Новый Массив;
	Для Каждого Документ Из КудаЗагрузить Цикл
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокДокументов <> Неопределено И СписокДокументов.Найти(Документ) = Неопределено
		 Или ТипыДокументов <> Неопределено И ТипыДокументов.Найти(ТипЗнч(Документ)) = Неопределено Тогда
			// Возвращаем результат с отметкой ОбъектНеПопалВОтбор в случае,
			// если указаны параметры отбора по списку документов или по списку типов документов,
			// и обрабатываемый документ не попал в этот отбор.
			Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
			Изменения.ОбъектНеПопалВОтбор = Истина;
			ВозвращаемоеЗначение.Добавить(Изменения);
			Продолжить;
		КонецЕсли;
		
		Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.Добавить(Изменения);
		
		Изменения.ИдентификаторСубъектаОбращения = Сообщение.ИдентификаторСубъектаОбращения;
		Изменения.Операция = Операция;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Операция"                      , Операция);
		Реквизиты.Вставить("Документ"                      , Документ);
		Реквизиты.Вставить("ИдентификаторСубъектаОбращения", Сообщение.ИдентификаторСубъектаОбращения);
		Реквизиты.Вставить("ИдентификаторЗапроса"          , Сообщение.ИдентификаторЗапроса);
		Реквизиты.Вставить("ТипСообщения"                  , ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки"               , Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято);
		
		Результат = Справочники.МДЛППрисоединенныеФайлы.ДобавитьЗаписьВПротоколОбмена(ТекстСообщения, Реквизиты);
		
		Изменения.ВходящееСообщение = Результат.Ссылка;
		Если Не Результат.НовоеСообщение Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗагрузки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ);
		МенеджерЗагрузки.ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, Документ);
		
		Если ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Исходящее Тогда
			НовыйСтатус = ОбработатьПолучениеКвитанции(Сообщение, Квитанция, ТекстКвитанции)[0].НовыйСтатус;
		Иначе
			НовыйСтатус = МенеджерЗагрузки.ОбновитьСтатусПослеПолученияДанных(Документ, Операция);
		КонецЕсли;
		
		Изменения.Принято     = Истина;
		Изменения.Объект      = Документ;
		Изменения.НовыйСтатус = НовыйСтатус;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьОшибку(ШаблонТекстаОшибки, ИнформацияОбОшибке, РезультатОперации)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Пояснение = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		Пояснение = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОперации.ТекстОшибки) Тогда
		РезультатОперации.ТекстОшибки = РезультатОперации.ТекстОшибки + Символы.ПС;
	КонецЕсли;
	
	РезультатОперации.ТекстОшибки = РезультатОперации.ТекстОшибки
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, Пояснение);
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, Подробно);
	ИнтеграцияМДЛПВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	
КонецПроцедуры

Функция ПредставлениеПричиныОтклонения(Причина) Экспорт
	
	Возврат СтрШаблон("(%1) %2", Причина.КодОшибки, Причина.ТекстОшибки);
	
КонецФункции

Функция СформироватьКомментарийРезультатаВыполнения(Результат)
	
	КомментарийОперации = Результат.operation_comment;
	
	ТекстПредупреждения = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "operation_warnings")
	   И ЗначениеЗаполнено(Результат.operation_warnings) Тогда
		Предупреждения = Новый Массив;
		Предупреждения.Добавить(НСтр("ru = 'Предупреждения'") + ":");
		Для Каждого Предупреждение Из Результат.operation_warnings Цикл
			Если Предупреждения.Найти(Предупреждение.operation_warning) = Неопределено Тогда
				Предупреждения.Добавить(Предупреждение.operation_warning);
			КонецЕсли;
		КонецЦикла;
		Если Предупреждения.Количество() > 1 Тогда
			ТекстПредупреждения = СтрСоединить(Предупреждения, Символы.ПС + Символы.Таб);
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат, "errors")
	   И ЗначениеЗаполнено(Результат.errors) Тогда
		Ошибки = Новый Массив;
		Ошибки.Добавить(НСтр("ru = 'Ошибки'") + ":");
		Для Каждого Ошибка Из Результат.errors Цикл
			ПредставлениеОшибки = ПредставлениеПричиныОтклонения(Новый Структура("КодОшибки, ТекстОшибки", Ошибка.error_code, Ошибка.error_desc));
			Если Ошибки.Найти(ПредставлениеОшибки) = Неопределено Тогда
				Ошибки.Добавить(ПредставлениеОшибки);
			КонецЕсли;
		КонецЦикла;
		Если Ошибки.Количество() > 1 Тогда
			ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС + Символы.Таб);
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = "";
	Если ЗначениеЗаполнено(ТекстОшибки) Или ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		Комментарий = КомментарийОперации
			+ ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС + Символы.ПС + ТекстОшибки, "")
			+ ?(ЗначениеЗаполнено(ТекстПредупреждения), Символы.ПС + Символы.ПС + ТекстПредупреждения, "");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

Функция ПолучитьОбъектXDTOИзТекстаСообщения(ТекстСообщения) Экспорт
	
	ПроизвольныйXDTO = ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПроизвольныйXDTO, "version") Тогда
		ВерсияФормата = ВалидироватьВерсиюСхемОбменаВходящегоСообщения(ПроизвольныйXDTO.version, ТекстСообщения);
	КонецЕсли;
	
	ПространствоИмен = ПространствоИмен(ВерсияФормата);
	Попытка
		ОбъектXDTO = ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения, "documents", ПространствоИмен);
	Исключение
		ОбъектXDTO = ОбъектXDTOПоИмениСвойства(Неопределено, "documents", ПространствоИмен);
		ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ПроизвольныйXDTO, ОбъектXDTO);
		ПривестиДатуКЧасовомуПоясуСеанса(ОбъектXDTO);
	КонецПопытки;
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ОбработатьВходящееСообщение(СвойстваСообщения, ТекстСообщения, ОбъектXDTO, ПараметрыВыполненияОбмена = Неопределено)
	
	Если ОбъектXDTOСодержитДанныеТипа(ОбъектXDTO, "kiz_info") Тогда
		ДанныеЗагруженногоДокумента = ОбработатьПолучениеИнформацииОКиЗ(СвойстваСообщения, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена);
	ИначеЕсли ОбъектXDTOСодержитДанныеТипа(ОбъектXDTO, "hierarchy_info") Тогда
		ДанныеЗагруженногоДокумента = ОбработатьПолучениеИнформацииОбИерархииВложенностиУпаковок(СвойстваСообщения, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена);
	ИначеЕсли ОбъектXDTOСодержитДанныеТипа(ОбъектXDTO, "result") Тогда
		ДанныеЗагруженногоДокумента = ОбработатьПолучениеКвитанции(СвойстваСообщения, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена);
	Иначе
		ДанныеЗагруженногоДокумента = ОбработатьВходящийДокумент(СвойстваСообщения, ОбъектXDTO, ТекстСообщения, ПараметрыВыполненияОбмена);
	КонецЕсли;
	
	Возврат ДанныеЗагруженногоДокумента;
	
КонецФункции

Функция ПолучитьДанныеИзТекстаСообщенияРВ(ТекстСообщения)
	Возврат ТранспортМДЛПКлиентСервер.ПреобразоватьJSONВЗначение(ТекстСообщения);
КонецФункции

Функция ОбработатьВходящееСообщениеРВ(Сообщение, ТекстСообщения, ДанныеСообщения, ПараметрыВыполненияОбмена = Неопределено)
	
	ДанныеИсходящегоСообщения = ПолучитьДанныеИсходящегоСообщенияДляКвитанции(Сообщение.ИдентификаторЗапроса);
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "СписокДокументов");
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполненияОбмена, "ТипыДокументов");
	Если СписокДокументов <> Неопределено И СписокДокументов.Найти(ДанныеИсходящегоСообщения.Документ) = Неопределено
	 Или ТипыДокументов <> Неопределено И ТипыДокументов.Найти(ТипЗнч(ДанныеИсходящегоСообщения.Документ)) = Неопределено Тогда
		// Возвращаем результат с отметкой ОбъектНеПопалВОтбор в случае,
		// если указаны параметры отбора по списку документов или по списку типов документов,
		// и обрабатываемый документ не попал в этот отбор.
		Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
		Изменения.ОбъектНеПопалВОтбор = Истина;
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменения);
	КонецЕсли;
	
	Квитанция = ДанныеСообщения["results"];
	
	ИдентификаторКвитанции = Неопределено;
	КомментарийПоОперации = "";
	
	Если Квитанция["status"] = "ready" Тогда
		
		ИдентификаторКвитанции = ТранспортМДЛПКлиентСервер.ЗначениеПараметраОбъекта(Квитанция["result"], "mdlpRequestId");
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторКвитанции) Тогда
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
		Иначе
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено;
			ИдентификаторКвитанции = Неопределено;
		КонецЕсли;
		
		ОтклоненныеНомера = Неопределено;
		РезультатыПроверкиКвитанции = Квитанция["result"];
		Если РезультатыПроверкиКвитанции <> Неопределено И РезультатыПроверкиКвитанции["marks"] <> Неопределено Тогда
			
			ОтклоненныеНомера = Новый Соответствие;
			Для Каждого КлючЗначение Из РезультатыПроверкиКвитанции["marks"] Цикл
				ДанныеПроверки = КлючЗначение.Значение;
				РезультатПроверки = ТранспортМДЛПРВКлиентСервер.СформироватьРезультатПроверкиКодаМаркировки(ДанныеПроверки);
				Если Не РезультатПроверки.Успех Тогда
					ОтклоненныеНомера.Вставить(Число(КлючЗначение.Ключ), ОпределитьОшибкуПроверкиКодаРВ(РезультатПроверки));
				КонецЕсли;
			КонецЦикла;
			
			Если ОтклоненныеНомера.Количество() > 0
			   И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято Тогда
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено;
		КомментарийПоОперации = ПредставлениеПричиныОтклонения(Новый Структура("КодОшибки, ТекстОшибки", Квитанция["error"]["code"], Квитанция["error"]["description"]));
	КонецЕсли;
	
	ДанныеКвитанции = Новый Структура;
	ДанныеКвитанции.Вставить("СтатусОбработки"       , СтатусОбработки);
	ДанныеКвитанции.Вставить("ИдентификаторКвитанции", ИдентификаторКвитанции);
	ДанныеКвитанции.Вставить("Комментарий"           , КомментарийПоОперации);
	ДанныеКвитанции.Вставить("ОтклоненныеНомера"     , ОтклоненныеНомера);
	ДанныеКвитанции.Вставить("ОперацияКвитанции"     , ДанныеИсходящегоСообщения.Операция);
	
	Возврат ОбработатьКвитанцию(Сообщение, ТекстСообщения, ДанныеКвитанции, ДанныеИсходящегоСообщения)
	
КонецФункции

Функция ОпределитьОшибкуПроверкиКодаРВ(РезультатПроверки)
	
	Результат = Новый Структура("КодОшибки, ТекстОшибки", 0, "Ошибка");
	
	КодОшибкиФЛК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "КодОшибкиФЛК");
	Если КодОшибкиФЛК <> Неопределено Тогда
		Результат.КодОшибки   = КодОшибкиФЛК;
		Результат.ТекстОшибки = РезультатПроверки.ПредставлениеОшибкиФЛК;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатПроверки.ОнлайнПроверкаПроводилась Тогда
		КодОшибкиОнлайнПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "КодОшибкиОнлайнПроверки");
		Если КодОшибкиОнлайнПроверки <> Неопределено Тогда
			Результат.КодОшибки   = КодОшибкиОнлайнПроверки;
			Результат.ТекстОшибки = РезультатПроверки.ПредставлениеОшибкиОнлайнПроверки;
			Возврат Результат;
		КонецЕсли;
	Иначе
		КодРезультатаЛокальнойПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "КодРезультатаЛокальнойПроверки");
		Если КодРезультатаЛокальнойПроверки <> Неопределено Тогда
			Результат.КодОшибки   = КодРезультатаЛокальнойПроверки;
			Результат.ТекстОшибки = РезультатПроверки.ПредставлениеРезультатаЛокальнойПроверки;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСообщениеОбмена(Отбор) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	Сообщения.Ссылка
	|ИЗ
	|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
	|";
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Для Каждого КлючЗначение Из Отбор Цикл
		
		ОтборЗапроса.Добавить(СтрШаблон("Сообщения.%1 = &%1", КлючЗначение.Ключ));
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Найдено несколько сообщение удовлетворяющих отбору'");
	КонецЕсли;
	
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СообщениеОтклонено(Квитанция) Экспорт
	
	ВозможныеРезультаты = ВозможныеРезультатыОперацииФиксации();
	РезультатОперации = ВозможныеРезультаты.Индекс(Квитанция.result.operation_result);
	
	Если РезультатОперации = -1 Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный результат операции'");
	КонецЕсли;
	
	Возврат РезультатОперации = 0;
	
КонецФункции

Функция СообщениеПринято(Квитанция) Экспорт
	
	ВозможныеРезультаты = ВозможныеРезультатыОперацииФиксации();
	РезультатОперации = ВозможныеРезультаты.Найти(Квитанция.result.operation_result);
	
	Если РезультатОперации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный результат операции'");
	КонецЕсли;
	
	Возврат РезультатОперации <> 0;
	
КонецФункции

Функция СообщениеПринятоПолностью(Квитанция) Экспорт
	
	ВозможныеРезультаты = ВозможныеРезультатыОперацииФиксации();
	РезультатОперации = ВозможныеРезультаты.Индекс(Квитанция.result.operation_result);
	
	Если РезультатОперации = -1 Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный результат операции'");
	КонецЕсли;
	
	Возврат РезультатОперации = 1;
	
КонецФункции

Функция ВозможныеРезультатыОперацииФиксации()
	
	РезультатыОперацииФиксации = Новый Массив;
	РезультатыОперацииФиксации.Добавить("Rejected");
	РезультатыОперацииФиксации.Добавить("Accepted");
	РезультатыОперацииФиксации.Добавить("Partial");
	
	Возврат РезультатыОперацииФиксации;
	
КонецФункции

Функция ОперацияОбменаМДЛППоддерживаетсяКонфигурацией(КодОперации) Экспорт
	
	Возврат СоответствияОперацийОбменаМДЛПКодамОпераций()[Формат(КодОперации, "ЧГ=0")] <> Неопределено;
	
КонецФункции

Функция СоответствияОперацийОбменаМДЛПКодамОпераций() Экспорт
	
	ОперацииПоКодам = Новый Соответствие;
	
	Менеджер = Перечисления.ОперацииОбменаМДЛП;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ОперацииОбменаМДЛП.ЗначенияПеречисления Цикл
		
		ИмяОперации = МетаданныеЗначения.Имя;
		КодОперации = МетаданныеЗначения.Комментарий;
		
		Если Не ЗначениеЗаполнено(КодОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОперацииПоКодам[КодОперации] = Неопределено Тогда
			ОперацииПоКодам.Вставить(КодОперации, Новый Структура);
		КонецЕсли;
		
		ОперацииПоКодам[КодОперации].Вставить(ИмяОперации, Менеджер[ИмяОперации]);
		
	КонецЦикла;
	
	Возврат ОперацииПоКодам;
	
КонецФункции

#КонецОбласти

#Область РаботаСЧасовымиПоясами

// Формирует представление даты с часовым поясом.
//
// Параметры:
//  Дата         - Дата   - преобразуемая дата.
//  ЧасовойПояс  - Строка - часовой пояс.
// 
// Возвращаемое значение:
//  Строка - представление даты с часовым поясом.
//
Функция ДатаСЧасовымПоясом(Дата, Знач ЧасовойПояс = Неопределено) Экспорт
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Смещение = (Дата - УниверсальноеВремя(Дата, ЧасовойПояс)) / 3600;
	Если Смещение > 0 Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "+" + Формат(+Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	Иначе
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "-" + Формат(-Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление даты в формате Coordinated Universal Time.
//
// Параметры:
//  Дата - ДатаВремя - дата, представление которой необходимо получить.
// 
// Возвращаемое значение:
//  Строка - представление даты в формате Coordinated Universal Time(UTC).
//
Функция ДатаUTC(Дата) Экспорт
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z";
	
	Возврат Результат;
	
КонецФункции

// Возвращает временную дату, которая будет в дальнейшем преобразована в дату с часовым поясом.
//
// Параметры:
//  Дата - Дата - Дата для преобразования.
// 
// Возвращаемое значение:
//  Дата - Временная дата.
//
Функция ВременнаяДата(Дата) Экспорт
	
	Возврат ДобавитьМесяц(Дата, -12 * 1000);
	
КонецФункции

// Устанавливает в ОбъектXDTO вместо даты со смещением временную дату. В дальнейшем временная дата будет заменена датой со смещением в результирующем ХМL.
// Тем самым обходится ограничение ОбъектXDTO, который не позволяет устанавливать в свойство дату со смещением.
//
// Параметры:
//  ОбъектXDTO            - ОбъектXDTO - в свойство данного объекта помещается дата.
//  ИмяСвойства           - ИмяСвойства - имя свойства, в которое устанавливается дата.
//  Дата                  - ДатаВремя - дата, которая устанавливается в свойство.
//  ХранилищеВременныхДат - Соответствие - в нем хранится соответствие временных дат и дат со смещением.
//  КэшОшибок             - Структура - с полями ТекстОшибки и Ошибки.
//
Процедура УстановитьДатуСЧасовымПоясом(ОбъектXDTO, ИмяСвойства, Дата, ХранилищеВременныхДат, КэшОшибок = Неопределено) Экспорт
	
	ДатаСЧасовымПоясом = ДатаСЧасовымПоясом(Дата);
	
	ВременнаяДатаUTC = ДатаUTC(ВременнаяДата(Дата));
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ВременнаяДатаUTC, КэшОшибок);
	ЛексическоеЗначениеВременнойДаты = ОбъектXDTO.ПолучитьXDTO(ИмяСвойства).ЛексическоеЗначение;
	
	ХранилищеВременныхДат.Вставить(ЛексическоеЗначениеВременнойДаты, ДатаСЧасовымПоясом);
	
КонецПроцедуры

// Заменяет временные даты в тексте сообщения в формате XML на даты со смещением, согласно соответствию.
//
// Параметры:
//  ХранилищеВременныхДат - Соответствие - хранит временные даты, которые нужно заменить на даты со смещением
//  ТекстСообщенияXML     - Строка - текст сообщения, в котором выполняется замена
// 
// Возвращаемое значение:
//  Строка - ТекстСообщенияXML, в котором выполнена замена.
//
Функция ПреобразоватьВременныеДаты(ХранилищеВременныхДат, Знач ТекстСообщенияXML) Экспорт
	
	Текст = ТекстСообщенияXML;
	
	Для Каждого КлючИЗначение Из ХранилищеВременныхДат Цикл
		
		ВременнаяДата = КлючИЗначение.Ключ;
		Дата = КлючИЗначение.Значение;
		
		Текст = СтрЗаменить(Текст, ВременнаяДата, Дата);
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Возвращает дату, прочитанную из строкового представления, определенного формата даты JSON,
// приведенную к часовому поясу сеанса, учитывая смещение летнего времени.
//
// Параметры:
//  Значение - Строка - строковое представление даты.
//    Примеры:
//     "2020-04-23T13:44:09Z"          - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084Z"      - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09+01:00"     - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084+01:00" - ФорматДатыJSON.ISO
//     "new Date(1587649449084)"       - ФорматДатыJSON.JavaScript
//     "/Date(1587649449084)/"         - ФорматДатыJSON.Microsoft
//  ФорматДаты - ФорматДатыJSON - Определяет различные форматы сериализации/десериализации дат JSON-объектов.
//                                Значение по-умолчанию ФорматДатыJSON.ISO.
//   ISO        - формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ".
//   JavaScript - формат даты JavaScript вида: "new Date(1234656000000)". Указывается количество миллисекунд, прошедших с начала эры Unix.
//   Microsoft  - формат даты Microsoft вида: "/Date(123456000000)/". Указывается количество миллисекунд, прошедших с начала эры Unix.
//
// Возвращаемое значение:
//  ДатаВЧасовомПоясеСеанса - Дата - дата полученная из строкового представления и приведенная к часовому поясу сеанса, учитывая смещение летнего времени.
//
Функция СтрокаВДатуЧасовогоПоясаСеанса(Знач Значение, ФорматДаты = Неопределено) Экспорт
	
	Возврат СтрокаВДатуЧасовогоПояса(Значение, ЧасовойПоясСеанса(), ФорматДаты);
	
КонецФункции

// Возвращает дату, прочитанную из строкового представления, определенного формата даты JSON,
// приведенную к указанному часовому поясу, учитывая смещение летнего времени.
//
// Параметры:
//  Значение - Строка - строковое представление даты.
//    Примеры:
//     "2020-04-23T13:44:09Z"          - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084Z"      - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09+01:00"     - ФорматДатыJSON.ISO
//     "2020-04-23T13:44:09.084+01:00" - ФорматДатыJSON.ISO
//     "new Date(1587649449084)"       - ФорматДатыJSON.JavaScript
//     "/Date(1587649449084)/"         - ФорматДатыJSON.Microsoft
//  ЧасовойПояс - Строка - идентификатор часового пояса (см. описание функции платформы МестноеВремя глобального контекста).
//  ФорматДаты - ФорматДатыJSON - Определяет различные форматы сериализации/десериализации дат JSON-объектов.
//                                Значение по-умолчанию ФорматДатыJSON.ISO.
//   ISO        - формат даты ISO вида: "ГГГГ-ММ-ДДTЧЧ:ММ:ССZ".
//   JavaScript - формат даты JavaScript вида: "new Date(1234656000000)". Указывается количество миллисекунд, прошедших с начала эры Unix.
//   Microsoft  - формат даты Microsoft вида: "/Date(123456000000)/". Указывается количество миллисекунд, прошедших с начала эры Unix.
//
// Возвращаемое значение:
//  ДатаВЧасовомПоясеСеанса - Дата - дата полученная из строкового представления и приведенная к указанному часовому поясу, учитывая смещение летнего времени.
//
Функция СтрокаВДатуЧасовогоПояса(Знач Значение, ЧасовойПояс, ФорматДаты = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если ФорматДаты = Неопределено Тогда
		ФорматДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	
	// В данном случае дата в часовом поясе сервера, т.к. контекст выполнения Сервер.
	ДатаВЧасовомПоясеКонтекста = ПрочитатьДатуJSON(Значение, ФорматДаты);
	
	// Универсальная дата, полученная из даты контекста.
	ДатаУниверсальная = УниверсальноеВремя(ДатаВЧасовомПоясеКонтекста);
	
	// Дата в указанном часовом поясе, полученная из универсальной даты.
	ДатаВЧасовомПоясе = МестноеВремя(ДатаУниверсальная, ЧасовойПояс);
	
	Возврат ДатаВЧасовомПоясе;
	
КонецФункции

#КонецОбласти

#Область ВерсииСхемОбмена

// Возвращает URI пространства имен системы маркировки заданной версии.
//
// Параметры:
//  Версия - Строка - версия формата обмена с МДЛП.
//
// Возвращаемое значение:
//  Строка - URI пространства имен.
//
Функция ПространствоИмен(Знач Версия = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Версия = ИспользуемаяВерсияСхемОбмена();
	КонецЕсли;
	
	Возврат СтрШаблон("http://nalog.ru/MarkInfo/med/%1", Версия);
	
КонецФункции

// Получить версию схем обмена с МДЛП по умолчанию.
// 
// Возвращаемое значение:
//  Строка - Номер версии.
//
Функция ВерсияСхемОбменаПоУмолчанию() Экспорт
	
	Возврат "1.38";
	
КонецФункции

Функция МинимальноДопустимаяВерсияСхемОбмена() Экспорт
	
	Возврат "1.34";
	
КонецФункции

Функция НедоступныеВерсияСхемОбмена() Экспорт
	
	Версии = Новый Массив;
	
	Возврат Версии;
	
КонецФункции

// Возвращает используемую версию схем обмена
//
// Возвращаемое значение:
//  Строка - версия схем обмена
//
Функция ИспользуемаяВерсияСхемОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Версия = Константы.ВерсияСхемОбменаМДЛП.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПустаяСтрока(Версия) Тогда
		Возврат ВерсияСхемОбменаПоУмолчанию();
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Возвращает доступные версии схем обмена.
//
// Возвращаемое значение:
//  Массив - список версий упорядоченный по убыванию.
//
Функция ДоступныеВерсииСхемОбмена() Экспорт
	
	ПрефиксПространстваИмен = "http://nalog.ru/MarkInfo/med/";
	ДлинаПрефикса = СтрДлина(ПрефиксПространстваИмен);
	
	МинимальнаяВерсия = МинимальноДопустимаяВерсияСхемОбмена();
	НедоступныеВерсия = НедоступныеВерсияСхемОбмена();
	
	ДоступныеВерсии = Новый СписокЗначений;
	Для Каждого Пакет Из Метаданные.ПакетыXDTO Цикл
		
		Если СтрНачинаетсяС(Пакет.ПространствоИмен, ПрефиксПространстваИмен) Тогда
			Версия = Сред(Пакет.ПространствоИмен, ДлинаПрефикса + 1);
			Если Версия >= МинимальнаяВерсия И НедоступныеВерсия.Найти(Версия) = Неопределено Тогда
				ДоступныеВерсии.Добавить(Версия);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДоступныеВерсии.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Возврат ДоступныеВерсии.ВыгрузитьЗначения();
	
КонецФункции

Процедура УстановитьВерсиюСхемОбменаПакета(Пакет) Экспорт
	
	Если Не ЗначениеЗаполнено(Пакет.version) Тогда
		// Берем версию из URI пространства имен: http://nalog.ru/MarkInfo/med/1.27
		Пакет.version = Прав(Пакет.Тип().URIПространстваИмен, 4);
	Иначе
		Пакет.version = Пакет.version;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет передаваемую версию обмена.
// Если она больше максимально допустимой - уменьшает.
// Изменение рагистрирует в журнале регистрации.
//
// Параметры:
//  Версия - Строка - версия формата обмена с МДЛП.
//
// Возвращаемое значение:
//  Версия - Строка - уменьшенная, при необходимости, версия формата обмена с МДЛП.
//
Функция ВалидироватьВерсиюСхемОбменаВходящегоСообщения(Знач Версия, Знач ТекстСообщения = "") Экспорт
	
	МаксимальноПоддерживаемаяВерсияСхемОбмена = ДоступныеВерсииСхемОбмена()[0];
	Если МаксимальноПоддерживаемаяВерсияСхемОбмена < Версия Тогда
		
		ЧастиМаксимальнойВерсии = СтрРазделить(МаксимальноПоддерживаемаяВерсияСхемОбмена, ".", Ложь);
		ЧастиПроверяемойВерсии  = СтрРазделить(Версия, ".", Ложь);
		
		Если ЧастиМаксимальнойВерсии.Количество() <> ЧастиПроверяемойВерсии.Количество() Тогда
			ВызватьИсключение НСтр("ru = 'Нумерация версий схем обмена загружаемого сообщения отличается от используемого. Обратитесь к администратору.'");
		КонецЕсли;
		
		МажорнаяЧастьМаксимальнойВерсии = ЧастиМаксимальнойВерсии[0];
		МажорнаяЧастьПроверяемойВерсии  = ЧастиПроверяемойВерсии[0];
		
		Если ЧастиПроверяемойВерсии.Количество() > 1
		   И МажорнаяЧастьМаксимальнойВерсии < МажорнаяЧастьПроверяемойВерсии Тогда
			Текст = НСтр("ru = 'Мажорная часть версии схем обмена загружаемого сообщения ""%1"" (%2) больше максимально поддерживаемой версии ""%3"" (%4).'");
			Текст = Текст + Символы.ПС + НСтр("ru = 'Для корректной работы необходимо обновить конфигурацию, в которой используется версия схем обмена ""%5"".'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, МажорнаяЧастьПроверяемойВерсии, Версия, МажорнаяЧастьМаксимальнойВерсии, МаксимальноПоддерживаемаяВерсияСхемОбмена, Версия);
			ВызватьИсключение Текст;
		КонецЕсли;
		
		Текст = ТекстСообщения;
		Текст = Текст + Символы.ПС + НСтр("ru = 'Версии схем обмена загружаемого сообщения ""%1"" больше максимально поддерживаемой версии ""%2"".'");
		Текст = Текст + Символы.ПС + НСтр("ru = 'Сообщение будет обработано с использованием схем обмена версии ""%2"".'");
		Текст = Текст + Символы.ПС + НСтр("ru = 'Сообщение может быть не обработано или обработано некорректно.'");
		Текст = Текст + Символы.ПС + НСтр("ru = 'Для корректной работы необходимо обновить конфигурацию до версии, в которой используется версия схем обмена ""%1"".'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Версия, МаксимальноПоддерживаемаяВерсияСхемОбмена);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, Текст);
		
		Версия = МаксимальноПоддерживаемаяВерсияСхемОбмена;
		
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

#КонецОбласти

#Область XDTO

// Возвращает Объект XDTO, получаемый из текста сообщения XML.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO.
//
Функция ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращает объект XDTO по имени типа из пространства имен ГИСМ.
//
// Параметры:
//  ИмяТипа - Строка - Имя типа.
//  URIПространстваИмен - Строка - Требуемая версия.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO.
//
Функция ОбъектXDTO(ИмяТипа, URIПространстваИмен) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ТипФабрикаXDTO(ИмяТипа, URIПространстваИмен));
	
КонецФункции

// Возвращает Объект XDTO, получаемый из текста сообщения XML.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML.
//  Тип - Строка, Неопределено, ТипОбъектаXDTO - Тип объекта.
//  URIПространстваИмен - Строка - пространство имен.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO.
//
Функция ОбъектXDTOПоТекстуСообщенияXML(Знач ТекстСообщенияXML, Тип = Неопределено, URIПространстваИмен) Экспорт
	
	ПространствоИменПоУмолчанию = СтрШаблон("xmlns=""%1""", URIПространстваИмен);
	
	Если СтрНайти(ТекстСообщенияXML, ПространствоИменПоУмолчанию) = 0 Тогда
		
		ПозицияВставки = СтрНайти(ТекстСообщенияXML, "xmlns:");
		Если ПозицияВставки > 0 Тогда
			ТекстСообщенияXML = Лев(ТекстСообщенияXML, ПозицияВставки - 1)
				+ ПространствоИменПоУмолчанию
				+ " "
				+ Сред(ТекстСообщенияXML, ПозицияВставки);
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	Если Тип = Неопределено Тогда
		СоздаваемыйТип = ОбъектXDTOПоИмениСвойства(Неопределено, ИмяКорневогоЭлементаXML(ТекстСообщенияXML), URIПространстваИмен).Тип();
	ИначеЕсли ТипЗнч(Тип) = Тип("Строка") Тогда
		СоздаваемыйТип = ОбъектXDTOПоИмениСвойства(Неопределено, Тип, URIПространстваИмен).Тип();
	Иначе
		СоздаваемыйТип = Тип;
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СоздаваемыйТип);
	
	ПривестиДатуКЧасовомуПоясуСеанса(ОбъектXDTO);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Функция - Объект XDTOПо имени свойства.
//
// Параметры:
//  ОбъектXDTOРодитель - ОбъектXDTO - ОбъектXDTO в контексте которого запрашивается свойство.
//  ИмяСвойства - Строка - Имя свойства.
//  URIПространстваИмен - Строка - Требуемая версия.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO.
//
Функция ОбъектXDTOПоИмениСвойства(ОбъектXDTOРодитель, ИмяСвойства, URIПространстваИмен = Неопределено) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		СвойствоXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен).КорневыеСвойства.Получить(ИмяСвойства);
	Иначе
		СвойствоXDTO = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Свойство %1 отсутствует в составе типов информационной системы маркировки.'"), ИмяСвойства);
	Иначе
		Возврат ФабрикаXDTO.Создать(СвойствоXDTO.Тип);
	КонецЕсли;
	
КонецФункции

// Преобразует объект XDTO в XML.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
//  ИмяТипа - Строка - Имя типа.
//  URIПространстваИмен - Строка - пространство имен.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML.
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ИмяТипа, URIПространстваИмен) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматированияXML(Ложь));
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	ТекстXML = ЗаписьXML.Закрыть();
	
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns:d2p1=""" + URIПространстваИмен + """", "");
	ТекстXML = СтрЗаменить(ТекстXML, URIПространстваИмен, "");
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""""", "");
	
	Возврат ТекстXML;
	
КонецФункции

// Преобразует объект XDTO в структуру.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO) Экспорт
	
	Структура = Новый Структура;
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Возвращает тип значения (объекта) XDTO из пространства имен ГИСМ по имени.
//
// Параметры:
//  ИмяТипа - Строка - Имя типа.
//  URIПространстваИмен - Строка - Требуемая версия.
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO - Тип значения (объекта).
//
Функция ТипФабрикаXDTO(ИмяТипа, URIПространстваИмен) Экспорт
	
	Возврат ФабрикаXDTO.Тип(URIПространстваИмен, ИмяТипа);
	
КонецФункции

// Получает имя корневого узла текста в формате XML.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст в формате XML.
// 
// Возвращаемое значение:
//  Строка - имя корневого узла.
//
Функция ИмяКорневогоЭлементаXML(ТекстСообщенияXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM.ПервыйДочерний.ИмяУзла;
	
КонецФункции

// Преобразует произвольный объект XDTO в Объект XDTO приемник.
//
// Параметры:
//  ОбъектXDTOИсточник - ОбъектXDTO - 
//  ОбъектXDTOПриемник - ОбъектXDTO - 
// 
// Возвращаемое значение:
//  ОбъектXDTO - ОбъектXDTOПриемник заполненный по ОбъектXDTOИсточник.
//
Функция ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ОбъектXDTOИсточник, ОбъектXDTOПриемник)
	
	Для Каждого СвойствоИсточника Из ОбъектXDTOИсточник.Свойства() Цикл
		
		ИмяСвойства      = СвойствоИсточника.Имя;
		ЗначениеСвойства = ОбъектXDTOИсточник[ИмяСвойства];
		
		СвойствоПриемника = ОбъектXDTOПриемник.Свойства().Получить(ИмяСвойства);
		Если СвойствоПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
				
				ЗначениеСвойстваПриемника = ОбъектXDTOПоИмениСвойства(ОбъектXDTOПриемник, ИмяСвойства, СвойствоПриемника.URIПространстваИмен);
				
				Если ТипЗнч(ЗначениеСвойстваПриемника) = Тип("ОбъектXDTO") Тогда
					ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЗначениеСвойства, ЗначениеСвойстваПриемника);
					
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриемника);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриемника;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСпискаИсточника = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСпискаИсточника) = Тип("ОбъектXDTO") Тогда
					
					Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
						
						ЭлементаСпискаПриемника = ОбъектXDTOПоИмениСвойства(ОбъектXDTOПриемник, ИмяСвойства, СвойствоПриемника.URIПространстваИмен);
						
						Если ТипЗнч(ЭлементаСпискаПриемника) = Тип("ОбъектXDTO") Тогда
							ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЭлементСпискаИсточника, ЭлементаСпискаПриемника);
							ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементаСпискаПриемника);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементСпискаИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Попытка
				
				Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойства);
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойства;
				КонецЕсли;
				
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектXDTOПриемник;
	
КонецФункции

// Устанавливает значение свойства объекта XDTO.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КэшОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	РазрешеноНеЗаполнять = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства).НижняяГраница = 0;
	Если Не ЗначениеЗаполнено(ЗначениеСвойства) И РазрешеноНеЗаполнять Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если КэшОшибок <> Неопределено Тогда
			ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(КэшОшибок, ТекстОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет проверку заполнения объекта XDTO, в случае обнаружения ошибки, сохраняет ее в кэш ошибок.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - проверяемый объект XDTO.
//  КэшОшибок  - Структура - 
//
Процедура ПроверитьОбъектXDTO(ОбъектXDTO, КэшОшибок = Неопределено) Экспорт
	
	Попытка
		ОбъектXDTO.Проверить();
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если КэшОшибок <> Неопределено Тогда
			ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(КэшОшибок, ТекстОшибки);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция - Значение соответствует типу XDTO.
//
// Параметры:
//  Значение         - Произвольный - проверяемое значение;
//  ИмяТипа          - Строка - имя типа, на соответствие которому проверяется;
//  ПространствоИмен - Строка - пространство имен в котором определен проверяемый тип.
// 
// Возвращаемое значение:
//  Булево - Истина, если значение соответствует типу XDTO, иначе Ложь.
//
Функция ЗначениеСоответствуетТипуXDTO(Значение, ИмяТипа, ПространствоИмен = Неопределено) Экспорт
	
	ТипXDTO = ТипФабрикаXDTO(ИмяТипа, ?(ЗначениеЗаполнено(ПространствоИмен), ПространствоИмен, ПространствоИмен()));
	Попытка
		ТипXDTO.Проверить(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбъектXDTOСодержитДанныеТипа(ОбъектXDTO, ИмяТипа)
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураДанных = Новый Структура(ИмяТипа, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ОбъектXDTO);
	
	Данные = СтруктураДанных[ИмяТипа];
	
	Возврат Данные <> КлючУникальности И Данные <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ФорматированиеТекстаСообщения

// Инициализирует объект ПараметрыЗаписиXML.
//
// Параметры:
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//   -  ПараметрыЗаписиXML - набор параметров, который используется при записи XML.
//
Функция ПараметрыФорматированияXML(ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(
		"UTF-8",
		"1.0",
		ИспользоватьОтступы,
		ИспользоватьОтступы,
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Форматирует текст сообщения в формате XML.
//
// Параметры:
//  ТекстСообщенияXML       - Строка - текст сообщения.
//  ПараметрыФорматирования - ПараметрыЗаписиXML - параметры записи XML.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Инициализирует объект ПараметрыЗаписиJSON.
//
// Параметры:
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//   -  ПараметрыЗаписиJSON - набор параметров, который используется при записи XML.
//
Функция ПараметрыФорматированияJSON(ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(
		?(ИспользоватьОтступы, ПереносСтрокJSON.Авто, ПереносСтрокJSON.Нет),
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Форматирует текст сообщения в формате JSON.
//
// Параметры:
//  ТекстСообщенияJSON      - Строка - текст сообщения.
//  ПараметрыФорматирования - ПараметрыЗаписиJSON - параметры записи JSON.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка JSON.
//
Функция ФорматироватьJSONСПараметрами(ТекстСообщенияJSON, ПараметрыФорматирования) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстСообщенияJSON);
	
	Значение = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Форматирует текст сообщения.
//
// Параметры:
//  ТекстСообщения      - Строка - текст сообщения.
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка.
//
Функция ФорматироватьТекстСообщения(ТекстСообщения, ИспользоватьОтступы = Истина, СимволОтступа = "  ") Экспорт
	
	ТекстСообщенияБезСпецСимволов = СокрЛП(ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстСообщения));
	
	Попытка
		Если СтрНачинаетсяС(ТекстСообщенияБезСпецСимволов, "<") Тогда
			ТекстСообщения = ФорматироватьXMLСПараметрами(ТекстСообщенияБезСпецСимволов, ПараметрыФорматированияXML(ИспользоватьОтступы, СимволОтступа));
		ИначеЕсли СтрНачинаетсяС(ТекстСообщенияБезСпецСимволов, "{") Или СтрНачинаетсяС(ТекстСообщенияБезСпецСимволов, "[") Тогда
			ТекстСообщения = ФорматироватьJSONСПараметрами(ТекстСообщенияБезСпецСимволов, ПараметрыФорматированияJSON(ИспользоватьОтступы, СимволОтступа));
		Иначе
			ТекстСообщения = ТекстСообщенияБезСпецСимволов;
		КонецЕсли;
	Исключение
		ТекстСообщения = ТекстСообщенияБезСпецСимволов;
	КонецПопытки;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировки

// Формирует таблицу документов для панели маркировки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание документов, выводимых на панель маркировки.
//
Функция ДокументыПанелиМаркировки() Экспорт
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Метаданные"       , Новый ОписаниеТипов("ОбъектМетаданных"));
	ТаблицаДокументы.Колонки.Добавить("Заголовок"        , Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("Группа"           , Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("Оформите"         , Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("Отработайте"      , Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("Ожидайте"         , Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоНаЧтение", Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("Порядок"          , ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаДокументы.Колонки.Добавить("ПараметрыЗапроса" , Новый ОписаниеТипов("Структура"));
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияМДЛППереопределяемый.ПередЗаполнениемДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		
		ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.Типы();
		
		Для Каждого Тип Из ТипыДокументов Цикл
			МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип);
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
			Менеджер.ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ОписаниеДокумента Из ТаблицаДокументы Цикл
		Если ОписаниеДокумента.Порядок = 0 Тогда
			ОписаниеДокумента.Порядок = 50;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДокументы.Сортировать("Группа ВОЗР, Порядок ВОЗР, Заголовок ВОЗР");
	
	Возврат ТаблицаДокументы;
	
КонецФункции

// Добавляет документ в таблицу документов панели маркировки.
//
// Параметры:
//  Таблица      - ТаблицаЗначений - таблица описаний документов панели маркировки.
//  Метаданные   - МетаданныеОбъект - метаданные добавляемого документа.
//  Заголовок    - Строка - заголовок, выводимый в панели маркировки.
//  Раздел       - Строка - имя раздела в котором размещается документ.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - Добавленная строка таблицы документов панели маркировки.
//
Функция ДобавитьДокументНаПанельМаркировки(Таблица, Метаданные, Заголовок, Раздел) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Метаданные  = Метаданные;
	НоваяСтрока.Заголовок   = Заголовок;
	НоваяСтрока.Группа      = Раздел;
	
	НоваяСтрока.ЕстьПравоНаЧтение = ПравоДоступа("Чтение", Метаданные);
	
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти

#Область ОтборДальнейшиеДействия

// Заполняет список выбора отбора дальнейших действий.
//
// Параметры:
//  СписокВыбора         - СписокЗначений - список выбора элемента отбора.
//  ВсеТребующиеДействия - Массив - действия требующие от пользователя действия.
//  ВсеТребующиеОжидания - Массив - действия требующие от пользователя ожидания.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	Если ВсеТребующиеДействия.Количество() > 0 Тогда
		СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru='Все требующие действия'"));
	КонецЕсли;
	Если ВсеТребующиеОжидания.Количество() > 0 Тогда
		СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru='Все требующие ожидания'"));
	КонецЕсли;
	Если ВсеТребующиеДействия.Количество() > 0 И ВсеТребующиеОжидания.Количество() > 0 Тогда
		СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru='Все требующие действия или ожидания'"));
	КонецЕсли;
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется);
	
КонецПроцедуры

// Формирует массив дальнейших действий, которые требуют выполнения пользователем для документов,
// статус которых хранится в регистре "Состояния информирования МДЛП".
// 
// Возвращаемое значение:
//  Массив - действия, которые необходимо выполнить пользователю.
//
Функция ВсеТребующиеДействияСтатусыИнформирования() Экспорт
	
	МассивДействий = Новый Массив();
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеСтатусЗаданияОтРВ);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ТребуетсяПроверка);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.АктуализируйтеДанныеОбУпаковках);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеУведомления);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеИнвентаризацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗагрузитеОстатки);
	
	Возврат МассивДействий;
	
КонецФункции

// Формирует массив дальнейших действий, выполнения которых необходимо ожидать пользователю для документов,
// статус которых хранится в регистре "Состояния информирования МДЛП".
// 
// Возвращаемое значение:
//   Массив - действия, выполнения которых ожидает пользователь.
//
Функция ВсеТребующиеОжиданияСтатусыИнформирования() Экспорт
	
	МассивДействий = Новый Массив();
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеИнформации);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияСтатусаЗаданияОтРВ);
	
	Возврат МассивДействий;
	
КонецФункции

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  Список               - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействие   - Перечисление.ДальнейшееДействиеМДЛП, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(Список, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействие1";
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ИмяПоля, ВсеТребующиеДействия, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ИмяПоля, ВсеТребующиеОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый Массив;
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется Тогда
		
		ДальнейшиеДействия = Новый Массив;
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется);
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуетсяПроизводитсяОтпускЛП);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ИмяПоля, ДальнейшиеДействия, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДальнейшиеДействия

#Область СтатусыОформления

// Рассчитать новый статус оформления документов МДЛП по документу-основанию.
//
// Параметры:
//  МетаданныеДокумента - Метаданные - Метаданные уведомления.
//  ДокументОснование - ДокументСсылка - Ссылка на документ-основание.
//  РеквизитыДокументаОснования - Структура - Реквизиты документа-основания.
//    * Проведен - признак проведенности документа, если Ложь, то запись будет удалена из регистра.
//    * Организация - ОпределяемыйТип.ОрганизацииМДЛП
//    * МестоДеятельности - ОпределяемыйТип.МестаДеятельностиМДЛП
//    * Ответственный - 
//    * Дата - Дата документ основания
//    * Номер - Номер документа основания
//  ЗаписьТребуется - Булево - Признак необходимости записи.
//
Процедура РассчитатьСтатусОформления(МетаданныеДокумента, ДокументОснование, РеквизитыДокументаОснования, ЗаписьТребуется) Экспорт
	
	РегистрыСведений.СтатусыОформленияДокументовМДЛП.РассчитатьСтатусОформления(
		МетаданныеДокумента, ДокументОснование, РеквизитыДокументаОснования, ЗаписьТребуется);
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о завершении этапа окончательной упаковки.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОЗавершенииЭтапаУпаковкиМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОЗавершенииЭтапаОкончательнойУпаковки(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отборе образцов.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтбореОбразцов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтбореОбразцовМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтбореОбразцов(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтбореОбразцов(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о выпуске готовой продукции.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукции(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВыпускеГотовойПродукцииМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукции(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукции(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о выпуске готовой продукции за пределами РФ.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукцииЗаПределамиРФ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВыпускеГотовойПродукцииЗаПределамиРФМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукцииЗаПределамиРФ(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыпускеГотовойПродукцииЗаПределамиРФ(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о розничных продажах.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОРозничныхПродажах(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОРозничныхПродажах(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОРозничныхПродажах(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о приемке.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПриемке(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПриемкеМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемке(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемке(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отгрузке в РФ.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВвозеЛПвРФМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФ(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФ(Основание);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезИмпортера(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВвозеЛПвРФБезИмпортераМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезИмпортера(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезИмпортера(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отгрузке.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтгрузке(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтгрузкеМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтгрузке(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтгрузке(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отгрузке в РФ.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтгрузкеВРФ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтгрузкеВРФМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтгрузкеВРФ(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтгрузкеВРФ(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о перемещении.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПеремещении(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПеремещенииМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещении(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещении(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о перемещении ГЛО.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПеремещенииГЛО(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПеремещенииГЛОМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещенииГЛО(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещенииГЛО(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о перемещении между ЗТК.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПеремещенииМеждуЗТК(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПеремещенииМеждуЗТКМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещенииМеждуЗТК(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещенииМеждуЗТК(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отпуске по льготному рецепту.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтпускеПоЛьготномуРецепту(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтпускеПоЛьготномуРецепту(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтпускеПоЛьготномуРецепту(Основание);
	КонецЕсли;
	
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о выдаче в отделения.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыдачеВОтделения(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВыдачеВОтделенияМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыдачеВОтделения(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыдачеВОтделения(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о выбытии.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВыбытии(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВыбытииМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыбытии(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыбытии(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о повторном вводе в оборот.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПовторномВводеВОборот(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПовторномВводеВОборотМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПовторномВводеВОборот(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПовторномВводеВОборот(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об агрегировании.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о передаче на уничтожение.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПередачеНаУничтожение(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПередачеНаУничтожениеМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПередачеНаУничтожение(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПередачеНаУничтожение(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о факте уничтожения.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОФактеУничтожения(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОФактеУничтоженияМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОФактеУничтожения(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОФактеУничтожения(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о вводе в оборот.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВводеВОборот(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВводеВОборотМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВводеВОборот(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВводеВОборот(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о смене собственника в зоне таможенного контроля.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОСменеСобственникаВЗТК(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОСменеСобственникаВЗТКМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОСменеСобственникаВЗТК(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОСменеСобственникаВЗТК(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о приемке новым собственником ЛП в ЗТК.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПриемкеНовымСобственникомЛПвЗТК(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПриемкеНовымСобственникомЛПвЗТКМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемкеНовымСобственникомЛПвЗТК(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемкеНовымСобственникомЛПвЗТК(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о результатах таможенного оформления.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОРезультатахТаможенногоОформления(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОРезультатахТаможенногоОформленияМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОРезультатахТаможенногоОформления(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОРезультатахТаможенногоОформления(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о приемке на склад импортера.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПриемкеНаСкладИмпортера(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПриемкеНаСкладИмпортераМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемкеНаСкладИмпортера(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемкеНаСкладИмпортера(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления о передаче КМ таможенному складу.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОПередачеКМТаможенномуСкладу(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОПередачеКМТаможенномуСкладуМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПередачеКМТаможенномуСкладу(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПередачеКМТаможенномуСкладу(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об эмиссии кодов маркировки.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбЭмиссииКМ(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбЭмиссииКММДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбЭмиссииКМ(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбЭмиссииКМ(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об оприходовании.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОприходовании(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОприходованииМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОприходовании(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОприходовании(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отгрузке в РФ.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезПодтверждения(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОВвозеЛПвРФБезПодтвержденияМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезПодтверждения(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВвозеЛПвРФБезПодтверждения(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отгрузке.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияВладельцаОбОприходовании(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеВладельцаОбОприходованииМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияВладельцаОбОприходовании(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияВладельцаОбОприходовании(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отгрузке.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеВладельцаОВвозеЛПвРФБезПодтвержденияМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияВладельцаОВвозеЛПвРФБезПодтверждения(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомление об отпуске ЛП по документам, отличным от кассового чека.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтпускеЛППоДокументамОтличнымОтЧека(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтпускеЛППоДокументамОтличнымОтЧека(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтпускеЛППоДокументамОтличнымОтЧека(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Инвентаризационной описи МДЛП.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияИнвентаризационнойОписиМДЛП(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризационнаяОписьМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияИнвентаризационнойОписиМДЛП(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияИнвентаризационнойОписиМДЛП(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Инвентаризации потребительских упаковок МДЛП.
Процедура РассчитатьСтатусОформленияИнвентаризацииПотребительскихУпаковокМДЛП(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияПотребительскихУпаковокМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияИнвентаризацииПотребительскихУпаковокМДЛП(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияИнвентаризацииПотребительскихУпаковокМДЛП(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" для документов, влияющий на расчет статуса Уведомления об отсутствии лекарственных препаратов на балансе.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//  Отказ    - см. описание в синтаксис помощнике к обработчику события объекта ПриЗаписи.
//
Процедура РассчитатьСтатусОформленияУведомленияОбОтсутствииЛПНаБалансе(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляМониторингаДвиженияЛекарственныхПрепаратов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УведомлениеОбОтсутствииЛПНаБалансеМДЛП") Тогда
		Основание = Источник.Основание;
		ОснованиеПередЗаписью = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОснованиеПередЗаписью");
	Иначе
		Основание = Источник.Ссылка;
		ОснованиеПередЗаписью = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПередЗаписью) И ОснованиеПередЗаписью <> Основание Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтсутствииЛПНаБалансе(ОснованиеПередЗаписью);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтсутствииЛПНаБалансе(Основание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыИнформирования

// Записывает статус по умолчанию для новых документов информирования МДЛП.
//
// Параметры:
//  Источник - ДокументОбъект - источник события.
//
Процедура ЗаписатьСтатусДокументаПоУмолчанию(Источник) Экспорт
	
	ЭтоНовый = Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый;
	Если Не ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыИнформированияМДЛП.ЗначенияПоУмолчанию(Источник.Ссылка);
	РегистрыСведений.СтатусыИнформированияМДЛП.ДобавитьЗапись(ДанныеЗаписи);
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	МенеджерОбъекта.РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
	ИнтеграцияМДЛППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтРанееСовершеннойОперации Тогда
		Статус = Перечисления.СтатусыИнформированияМДЛП.ЗапросНаОтменуПроведенияКПередаче;
	Иначе
		Статус = Перечисления.СтатусыИнформированияМДЛП.КПередаче;
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусыКПередаче(
		ДокументСсылка,
		Статус);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтРанееСовершеннойОперации Тогда
		
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ЗапросНаОтменуПроведенияПередан;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
		
		Статусы.Ошибка = Перечисления.СтатусыИнформированияМДЛП.ЗапросНаОтменуПроведенияОшибка;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ Тогда
		
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Передано;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеИнформации);
		
		Статусы.Ошибка = Перечисления.СтатусыИнформированияМДЛП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыдачаЛПДляОказанияМедицинскойПомощиСКЗКМ
		  Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ Тогда
		
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Передано;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеСтатусЗаданияОтРВ);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияСтатусаЗаданияОтРВ);
		
		Статусы.Ошибка = Перечисления.СтатусыИнформированияМДЛП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
		
	Иначе
		
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Передано;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
		
		Статусы.Ошибка = Перечисления.СтатусыИнформированияМДЛП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
		
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции) Экспорт
	
	СтатусОбработки = ДанныеКвитанции.СтатусОбработки;
	ОперацияКвитанции = ДанныеКвитанции.ОперацияКвитанции;
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтРанееСовершеннойОперации Тогда
		
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Отменено;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЗапросНаОтменуПроведенияОшибка;
		
	ИначеЕсли ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыдачаЛПДляОказанияМедицинскойПомощиСКЗКМ
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ВыдачаЛПДляОказанияМедицинскойПомощиСКЗКМ
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамСКЗКМ
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ВыдачаЛПСНевалиднымКМДляОказанияМедицинскойПомощиСКЗКМ
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыдачаЛПДляОказанияМедицинскойПомощи
		  Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептам Тогда
		
		СтатусОбработки = ПолучитьСтатусОбработкиПоСостояниюПодтверждения(ДокументСсылка);
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Передано;
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуетсяПроизводитсяОтпускЛП);
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято Тогда
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Принято;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПереданоЧастично Тогда
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПередано;
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ТребуетсяПроверка);
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято;
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ТребуетсяПроверка);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоСОтклонениемОтТребований Тогда
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ПринятоСОтклонениемОтТребований;
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ТребуетсяПроверка);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		Иначе
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.Отклонено;
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ТребуетсяПроверка);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
			Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		КонецЕсли;
		
	Иначе
		
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Принято;
		Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ПеремещениеЛП Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
		КонецЕсли;
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято;
			Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ПеремещениеЛП Тогда
				Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
			КонецЕсли;
		Иначе
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.Отклонено;
			ЗавершитьПриОтказе = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "ЗавершитьПриОтказе", Ложь);
			Если Не ЗавершитьПриОтказе Тогда
				Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
				Статусы.ОтклоненДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(
		ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления.Вставить("Комментарий", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "Комментарий"));
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка, ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки) Экспорт
	
	НовоеСостояние = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтРанееСовершеннойОперации Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Отказаться;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Отменено;
		КонецЕсли;
		
	Иначе
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		Иначе
			Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыдачаЛПДляОказанияМедицинскойПомощиСКЗКМ
			  Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтпускЛППоЛьготнымРецептамСКЗКМ Тогда
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
			ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВыдачаЛПСНевалиднымКМДляОказанияМедицинскойПомощиСКЗКМ
				  Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛПСНевалиднымКМПоЛьготнымРецептамСКЗКМ Тогда
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований;
			Иначе
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеСостояние = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Состояние"        , НовоеСостояние);
	ВозвращаемоеЗначение.Вставить("ИсходноеСообщение", ИсходноеСообщение);
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСтатусОбработкиПоСостояниюПодтверждения(ДокументСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР НомераУпаковок.СостояниеПодтверждения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьПринятыеСОтклонениемОтТребований,
	|	МАКСИМУМ(ВЫБОР НомераУпаковок.СостояниеПодтверждения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьПринятые,
	|	МАКСИМУМ(ВЫБОР НомераУпаковок.СостояниеПодтверждения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьОтклоненные,
	|	МАКСИМУМ(ВЫБОР НомераУпаковок.СостояниеПодтверждения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ) КАК ЕстьОжидающиеОтвета
	|ИЗ
	|	#ДокументНомераУпаковок КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументНомераУпаковок", ДокументСсылка.Метаданные().ПолноеИмя() + ".НомераУпаковок");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьПринятые   = Выборка.ЕстьПринятыеСОтклонениемОтТребований Или Выборка.ЕстьПринятые;
		ЕстьНеПринятые = Выборка.ЕстьОтклоненные Или Выборка.ЕстьОжидающиеОтвета;
		Если ЕстьПринятые И ЕстьНеПринятые Тогда
			Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично;
		ИначеЕсли ЕстьПринятые Тогда
			Если Выборка.ЕстьПринятыеСОтклонениемОтТребований И Выборка.ЕстьПринятые Тогда
				Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоСОтклонениемОтТребований;
			ИначеЕсли Выборка.ЕстьПринятыеСОтклонениемОтТребований Тогда
				Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоСОтклонениемОтТребований;
			ИначеЕсли Выборка.ЕстьПринятые Тогда
				Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
			КонецЕсли;
		ИначеЕсли ЕстьНеПринятые Тогда
			Если Выборка.ЕстьОтклоненные И Выборка.ЕстьОжидающиеОтвета Тогда
				Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.ПереданоЧастично;
			ИначеЕсли Выборка.ЕстьОжидающиеОтвета Тогда
				Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано;
			ИначеЕсли Выборка.ЕстьОтклоненные Тогда
				Возврат Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Некорректные данные.'");
	
КонецФункции

#КонецОбласти

// Определяет текущий статус и доступные действия уведомления.
//
// Параметры:
//  Уведомление - ДокументСсылка - уведомление МДЛП.
// 
// Возвращаемое значение:
//  Структура - 
//    * Статус - ПеречислениеСсылка.СтатусыИнформированияМДЛП.
//    * ДальнейшееДействие - Массив - список доступных действий.
//
Функция ТекущийСтатусУведомления(Уведомление) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Уведомление);
	
	Статус = Перечисления.СтатусыИнформированияМДЛП.ПустаяСсылка();
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПустаяСсылка();
	Комментарий = "";
	
	Если Не Уведомление.Пустая() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Статусы.Статус               КАК Статус,
		|	Статусы.ДальнейшееДействие1  КАК ДальнейшееДействие1,
		|	Статусы.ДальнейшееДействие2  КАК ДальнейшееДействие2,
		|	Статусы.ДальнейшееДействие3  КАК ДальнейшееДействие3,
		|	Статусы.ДальнейшееДействие4  КАК ДальнейшееДействие4,
		|	Статусы.Комментарий          КАК Комментарий
		|ИЗ
		|	РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Уведомление
		|");
		Запрос.УстановитьПараметр("Уведомление", Уведомление);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Статус = Выборка.Статус;
			ДальнейшееДействие = Новый Массив;
			Для Индекс = 1 По 4 Цикл
				Если Выборка["ДальнейшееДействие" + Индекс] <> Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется Тогда
					ДальнейшееДействие.Добавить(Выборка["ДальнейшееДействие" + Индекс]);
				КонецЕсли;
			КонецЦикла;
			Комментарий = Выборка.Комментарий;
		КонецЕсли;
		
	Иначе
		
		Статус = МенеджерОбъекта.СтатусИнформированияПоУмолчанию();
		ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
		
	КонецЕсли;
	
	СтатусДальнейшиеДействия = Новый Структура;
	СтатусДальнейшиеДействия.Вставить("Статус", Статус);
	СтатусДальнейшиеДействия.Вставить("ДальнейшееДействие", ДальнейшееДействие);
	СтатусДальнейшиеДействия.Вставить("Комментарий", Комментарий);
	
	Возврат СтатусДальнейшиеДействия;
	
КонецФункции

// Возвращает форматированную строку представление статуса.
//
// Параметры:
//  ТекущийСтатус - Структура состоящая из свойств:
//    * Статус - ПеречислениеСсылка.СтатусыИнформированияМДЛП - Статус.
//    * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП, Массив - Дальнейшее действие.
//    * Комментарий - Строка - комментарий к статусу.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса.
//
Функция ПредставлениеСтатусаУведомления(ТекущийСтатус) Экспорт
	
	Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийСтатус, "Статус", Новый ФорматированнаяСтрока(""));
	Если ТипЗнч(Статус) <> Тип("ФорматированнаяСтрока") Тогда
		
		Если СтатусыТребующиеВнимания().Найти(Статус) <> Неопределено Тогда
			СтатусПредставление = Новый ФорматированнаяСтрока(Строка(Статус),, ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
		Иначе
			СтатусПредставление = Новый ФорматированнаяСтрока(Строка(Статус));
		КонецЕсли;
		
	Иначе
		СтатусПредставление = Статус;
	КонецЕсли;
	
	Комментарий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийСтатус, "Комментарий");
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = "#" + СтрЗаменить(СтрЗаменить(СтрЗаменить(Комментарий, Символы.ПС, "#ПС#"), Символы.Таб, "#Таб#"), " ", "#ПП#");
		СтатусПредставление = Новый ФорматированнаяСтрока(СтатусПредставление, " ", Новый ФорматированнаяСтрока(БиблиотекаКартинок.Комментарий,,,, Комментарий));
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийСтатус, "ДальнейшееДействие");
	Если ТипЗнч(ДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП")
	   И ЗначениеЗаполнено(ДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ДальнейшееДействие);
	ИначеЕсли ТипЗнч(ДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	Для Каждого Действие Из ДальнейшиеДействия Цикл
		
		ТекстГиперссылки = "";
		Если Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение Тогда
			ТекстГиперссылки = "ПодтвердитьПолучение";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПриемкиТовара Тогда
			ТекстГиперссылки = "ОтказатьсяОтПриемкиТовара";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеПереданныйТовар Тогда
			ТекстГиперссылки = "ОтозватьПереданныйТовар";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПостановкуВАрбитражСнятиеАрбитража Тогда
			ТекстГиперссылки = "ВыполнитьПостановкуВАрбитражСнятиеАрбитража";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПостановкуВАрбитражСнятиеАрбитража Тогда
			ТекстГиперссылки = "ПодтвердитьПостановкуВАрбитражСнятиеАрбитража";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПостановкиСнятияАрбитража Тогда
			ТекстГиперссылки = "ОтказатьсяОтПостановкиСнятияАрбитража";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ Тогда
			ТекстГиперссылки = "ЗапроситьИнформациюОКиЗ";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках Тогда
			ТекстГиперссылки = "ЗапроситьИнформациюОбУпаковках";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку Тогда
			ТекстГиперссылки = "ВыполнитьПроверку";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации Тогда
			ТекстГиперссылки = "ПолучитьКвитанциюОФиксации";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеСтатусЗаданияОтРВ Тогда
			ТекстГиперссылки = "ПолучитеСтатусЗаданияОтРВ";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения Тогда
			ТекстГиперссылки = "ОприходоватьБезПодтверждения";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.АктуализируйтеДанныеОбУпаковках Тогда
			ТекстГиперссылки = "АктуализироватьДанныеОбУпаковках";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеУведомления Тогда
			ТекстГиперссылки = "ОформитьУведомления";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеИнвентаризацию Тогда
			ТекстГиперссылки = "ОформитьИнвентаризацию";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗагрузитеОстатки Тогда
			ТекстГиперссылки = "ЗагрузитьОстатки";
		ИначеЕсли Действие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте Тогда
			ТекстГиперссылки = "Закрыть";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 0 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			ДействиеСтрокой = Строка(Действие);
			СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
				НРег(Лев(ДействиеСтрокой, 1)) + Сред(ДействиеСтрокой, 2),
				Новый Шрифт(,,,,Истина),
				,
				,
				ТекстГиперссылки);
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 0 Тогда
		СтатусПредставление = Новый ФорматированнаяСтрока(СтатусПредставление, ", ", СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

// Создает таблицу последовательности операций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Операция - ПеречислениеСсылка.ВидыОперацийОбменаМДЛП - Операция.
//   * Индекс - Число - Индекс операции в последовательности.
//   * ТипСообщения - ПеречислениеСсылка.ТипыСообщенийМДЛП - Тип сообщения.
//   * КвитанцияПринят - Булево - Признак наличия у операции квитанции о принятии.
//   * КвитанцияПроведенЕГАИС - Булево - Признак наличия у операции квитанции о фиксации.
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПриОбменеМДЛП - Дальнейшее действие при операции.
//
Функция ПустаяТаблицаПоследовательностьОпераций() Экспорт
	
	ПоследовательностьОпераций = Новый ТаблицаЗначений;
	ПоследовательностьОпераций.Колонки.Добавить("Операция");
	ПоследовательностьОпераций.Колонки.Добавить("Индекс");
	ПоследовательностьОпераций.Колонки.Добавить("ТипСообщения");
	
	ПоследовательностьОпераций.Колонки.Добавить("КвитанцияПринят");
	ПоследовательностьОпераций.Колонки.Добавить("КвитанцияПроведен");
	
	ПоследовательностьОпераций.Колонки.Добавить("ДальнейшиеДействия");
	
	Возврат ПоследовательностьОпераций;
	
КонецФункции

// Добавляет операцию в последовательность операций.
//
// Параметры:
//  ПоследовательностьОпераций - ТаблицаЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//  Индекс - Число - Индекс добавляемой операции.
//  ТипСообщения - ПеречислениеСсылка.ТипыСообщенийМДЛП - Тип сообщения.
//  Операция - ПеречислениеСсылка.ВидыОперацийОбменаМДЛП - Операция.
//  КвитанцияПроведен - Булево - Признак наличия у операции квитанции о фиксации.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//
Функция ДобавитьОперациюВПоследовательность(ПоследовательностьОпераций, Индекс, ТипСообщения, Операция, КвитанцияПроведен = Истина) Экспорт

	НоваяСтрока = ПоследовательностьОпераций.Добавить();
	НоваяСтрока.Операция     = Операция;
	НоваяСтрока.Индекс       = Индекс;
	НоваяСтрока.ТипСообщения = ТипСообщения;
	
	Если ТипСообщения = Перечисления.ТипыСообщенийМДЛП.Исходящее Тогда
		НоваяСтрока.КвитанцияПринят   = Истина;
		НоваяСтрока.КвитанцияПроведен = КвитанцияПроведен;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Текст исключения обработки статуса.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ.
//  Операция       - ПеречислениеСсылка.ВидыОперацийОбменаМДЛП - Операция.
// 
// Возвращаемое значение:
//  Строка - Текст исключения.
//
Функция ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При изменении статуса документа %1 не обработана операция %2'"),
		ДокументСсылка,
		Операция);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Получить данные документа МДЛП.
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
//  ДокументыПоОснованию - Структура - структура со свойствами:
//   * ИмяДокумента - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыИнформированияМДЛП - Статус документа.
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Представление - Строка - Представление документа.
//   * МассивДокументов - Массив - Массив документов.
//   * МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
//   * СтатусОформления - ПеречисленияСсылка.СтатусыОформленияДокументовМДЛП - статус оформления.
//
Функция ДанныеДокументаМДЛП(МетаданныеДокумента, ДокументыПоОснованию, СтатусОформления, Основание) Экспорт
	
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	ПравоЧтения     = ПравоДоступа("Чтение"    , МетаданныеДокумента);
	
	Если Не ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
	Представления = МенеджерДокумента.ПредставлениеДокумента();
	
	МассивДокументов = ДокументыПоОснованию[МетаданныеДокумента.Имя];
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		Если МассивДокументов.Количество() = 1 Тогда
			
			ДанныеДокумента = МассивДокументов[0];
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Представления.Представление, ДанныеДокумента.Статус);
			
			Если СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.ОформленоЧастично Тогда
				ИмяКоманды = "ОткрытьПротоколОбмена";
			ИначеЕсли СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.НеОформлено Тогда
				ИмяКоманды = "ОткрытьПротоколОбмена";
			ИначеЕсли СтатусОформления = Перечисления.СтатусыОформленияДокументовМДЛП.ЕстьОшибкиОформления Тогда
				ИмяКоманды = "ОткрытьПротоколОбмена";
			Иначе
				ИмяКоманды = Представления.ИмяКомандыОткрыть;
			КонецЕсли;
			
		ИначеЕсли МассивДокументов.Количество() > 1 Тогда
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Представления.НесколькоДокументовПредставление, МассивДокументов.Количество());
			ИмяКоманды = "ОткрытьПротоколОбмена";
			
		КонецЕсли;
		
		Если ТекстНадписи = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовМДЛП.Оформлено Тогда
			ТекстНадписи = ТекстНадписи + ", " + СтатусОформления;
			
			Если ЗначениеЗаполнено(Представления.КомандаСвязать) Тогда
				Уведомления = ИнтеграцияМДЛППереопределяемый.ВозможныеУведомленияПоОснованию(МетаданныеДокумента, Основание);
				Если ЗначениеЗаполнено(Уведомления) Тогда
					ФорматированныеСтроки.Добавить("  ");
					ТекстНадписиСвязать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Связать еще (%1)'"), Уведомления.Количество());
					ИмяКомандыСвязать   = Представления.ИмяКомандыСвязать;
					ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписиСвязать,,,, ИмяКомандыСвязать));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ФорматированныеСтроки.Вставить(0, Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
		
	Иначе
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовМДЛП.Оформлено Тогда
			
			Если ЗначениеЗаполнено(Представления.КомандаСвязать) Тогда
				Уведомления = ИнтеграцияМДЛППереопределяемый.ВозможныеУведомленияПоОснованию(МетаданныеДокумента, Основание);
				Если ЗначениеЗаполнено(Уведомления) Тогда
					ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представления.КомандаСвязать, Уведомления.Количество());
					ИмяКоманды   = Представления.ИмяКомандыСвязать;
					ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
				КонецЕсли;
			КонецЕсли;
			Если ПравоДобавления Тогда
				ТребуетсяСоздание = ИнтеграцияМДЛППереопределяемый.НужноСоздатьУведомленияПоОснованию(МетаданныеДокумента, Основание);
				Если ЗначениеЗаполнено(Представления.КомандаСоздать) И ТребуетсяСоздание <> Ложь Тогда
					ТекстНадписи = Представления.КомандаСоздать;
					ИмяКоманды   = Представления.ИмяКомандыСоздать;
					Если ФорматированныеСтроки.Количество() > 0 Тогда
						ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
					КонецЕсли;
					ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
				КонецЕсли;
			ИначеЕсли ФорматированныеСтроки.Количество() = 0 Тогда
				Если ЗначениеЗаполнено(Представления.ДокументОтсутствуетНетПравНаСоздание) Тогда
					ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
					ИмяКоманды   = Неопределено;
					ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФорматированныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Представление"      , Новый ФорматированнаяСтрока(ФорматированныеСтроки));
	ВозвращаемоеЗначение.Вставить("МассивДокументов"   , МассивДокументов);
	ВозвращаемоеЗначение.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	ВозвращаемоеЗначение.Вставить("СтатусОформления"   , СтатусОформления);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует текст со статусом формирования уведомления по документу формы.
//
// Параметры:
//  Форма - Форма - Форма документа.
//  СовместноВводимыеУведомления - Соответствие - группы совместного использования
//    * Ключ - ОбъектМетаданных - уведомление
//    * ИдентификаторГруппы - Произвольный - идентификатор группы совместного использования.
//
Функция СформироватьТекстУведомленияМДЛП(Форма, СовместноВводимыеУведомления = Неопределено) Экспорт
	
	ДокументСсылка = Форма.Объект.Ссылка;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатусыОформления.Документ          КАК Документ,
	|	СтатусыОформления.СтатусОформления  КАК Статус,
	|	СтатусыОформления.ПричинаСтатусаНеТребуется  КАК ПричинаСтатусаНеТребуется
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовМДЛП КАК СтатусыОформления
	|ГДЕ
	|	СтатусыОформления.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументСсылка);
	ВыборкаПоСтатусам = Запрос.Выполнить().Выбрать();
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	ДокументыПоОснованию = ИнтеграцияМДЛПВызовСервера.ДокументыПоОснованию(ДокументСсылка);
	
	МожноОтключитьТребованиеСозданияРаспоряженияНаОформление = ИнтеграцияМДЛППереопределяемый.МожноОтключитьТребованиеСозданияРаспоряженияНаОформление(ДокументСсылка);
	ОтключеноТребованиеСозданияРаспоряженияНаОформление = Ложь;
	ПричинаОтключения = "";
	
	ЕстьОформленныеДокументы = Ложь;
	ОформлениеДокументов = Новый Соответствие;
	Пока ВыборкаПоСтатусам.Следующий() Цикл
		
		МетаданныеДокумента = ВыборкаПоСтатусам.Документ.Метаданные();
		Если МетаданныеДокумента.Реквизиты.Основание.Тип.СодержитТип(ТипДокумента) Тогда
			Данные = ДанныеДокументаМДЛП(МетаданныеДокумента, ДокументыПоОснованию, ВыборкаПоСтатусам.Статус, ДокументСсылка);
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Данные.МассивДокументов.Количество() > 0 Тогда
				ЕстьОформленныеДокументы = Истина;
			КонецЕсли;
			
			Если МожноОтключитьТребованиеСозданияРаспоряженияНаОформление И ВыборкаПоСтатусам.Статус = Перечисления.СтатусыОформленияДокументовМДЛП.НеТребуется Тогда
				ОтключеноТребованиеСозданияРаспоряженияНаОформление = Истина;
				ПричинаОтключения = ВыборкаПоСтатусам.ПричинаСтатусаНеТребуется;
			КонецЕсли;
			
			ИдентификаторГруппы = Неопределено;
			Если СовместноВводимыеУведомления <> Неопределено Тогда
				ИдентификаторГруппы = СовместноВводимыеУведомления[Данные.МетаданныеДокумента];
			КонецЕсли;
			Если ИдентификаторГруппы = Неопределено Тогда
				ИдентификаторГруппы = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			ДанныеДокументов = ОформлениеДокументов[ИдентификаторГруппы];
			Если ДанныеДокументов = Неопределено Тогда
				ДанныеДокументов = Новый Структура("ЕстьОформленныеДокументы, Данные", Ложь, Новый Массив);
				ОформлениеДокументов.Вставить(ИдентификаторГруппы, ДанныеДокументов);
			КонецЕсли;
			
			Если Данные.МассивДокументов.Количество() > 0 Тогда
				ДанныеДокументов.ЕстьОформленныеДокументы = Истина;
			КонецЕсли;
			ДанныеДокументов.Данные.Добавить(Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьМаркируемаяПродукция = ОформлениеДокументов.Количество() > 0;
	Форма.Элементы.ТекстУведомленияМДЛП.Видимость = ЕстьМаркируемаяПродукция;
	
	ФорматированныеСтроки = Новый Массив;
	Для Каждого КлючЗначение Из ОформлениеДокументов Цикл
		
		ДанныеГруппы = КлючЗначение.Значение;
		Если ЕстьОформленныеДокументы Тогда
			Если Не ДанныеГруппы.ЕстьОформленныеДокументы Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли МожноОтключитьТребованиеСозданияРаспоряженияНаОформление Тогда
			Если ОтключеноТребованиеСозданияРаспоряженияНаОформление Тогда
				// Если нет оформленных документов и отключено требование создания распоряжений на оформление уведомлений,
				// тогда отключаем возможность создания уведомлений, пока пользователь не включет требование создания распоряжений на оформление уведомлений.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ФорматированныеСтроки.Количество() <> 0 Тогда
			ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
		КонецЕсли;
		
		СтрокиУведомлений = Новый Массив;
		Для Каждого ДанныеДокумента Из ДанныеГруппы.Данные Цикл
			
			Если СтрокиУведомлений.Количество() <> 0 Тогда
				СтрокиУведомлений.Добавить(" " + НСтр("ru = 'и'") + " ");
			КонецЕсли;
			
			СтрокиУведомлений.Добавить(ДанныеДокумента.Представление);
			
		КонецЦикла;
		
		ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(СтрокиУведомлений));
		
	КонецЦикла;
	
	Если МожноОтключитьТребованиеСозданияРаспоряженияНаОформление И ЕстьМаркируемаяПродукция Тогда
		
		Если ОтключеноТребованиеСозданияРаспоряженияНаОформление Тогда
			
			Если ФорматированныеСтроки.Количество() <> 0 Тогда
				ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			ТекстНадписи = НСтр("ru = 'Включить требование создания уведомления'");
			ИмяКоманды = "ВключитьТребованиеСозданияУведомления";
			
			Если ЗначениеЗаполнено(ПричинаОтключения) Тогда
				ДобавитьПричинуОтключенияТребованияСозданияРаспоряженияНаОформление(ТекстНадписи, ПричинаОтключения);
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
			
		ИначеЕсли Не ЕстьОформленныеДокументы Тогда
			
			Если ФорматированныеСтроки.Количество() <> 0 Тогда
				ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			ТекстНадписи = НСтр("ru = 'Отключить требование создания уведомления'");
			ИмяКоманды = "ОтключитьТребованиеСозданияУведомления";
			
			ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи,,,, ИмяКоманды));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ТекстУведомленияМДЛП = Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецФункции

// Проверяет использование нескольких организаций в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Несколько организаций используются.
//
Функция ИспользоватьНесколькоОрганизаций() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИспользоватьНесколькоОрганизаций();
	
КонецФункции

// Проверяет использование мест деятельности организаций в информационной базе.
// 
// Возвращаемое значение:
//  Булево - места деятельности используются.
//
Функция ИспользоватьМестаДеятельности() Экспорт
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Метаданные.ОпределяемыеТипы.ОбъектМестаДеятельностиМДЛП.Тип, Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИспользоватьМестаДеятельности();
	
КонецФункции

// Проверяет использование мест деятельности контрагентов в информационной базе.
// 
// Возвращаемое значение:
//  Булево - места деятельности используются.
//
Функция ИспользоватьМестаДеятельностиКонтрагентов() Экспорт
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Метаданные.ОпределяемыеТипы.ОбъектМестаДеятельностиМДЛП.Тип, Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИспользоватьМестаДеятельностиКонтрагентов();
	
КонецФункции

// Проверяет использование характеристик номенклатуры в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Характеристики используются.
//
Функция ИспользоватьХарактеристикиНоменклатуры() Экспорт
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип, Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИспользоватьХарактеристикиНоменклатуры();
	
КонецФункции

// Проверяет использование серий номенклатуры в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Серии используются.
//
Функция ИспользоватьСерииНоменклатуры() Экспорт
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип, Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИспользоватьСерииНоменклатуры();
	
КонецФункции

// Проверяет использование упаковок номенклатуры в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Упаковки используются.
//
Функция ИспользоватьУпаковкиНоменклатуры() Экспорт
	
	Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Метаданные.ОпределяемыеТипы.Упаковка.Тип, Тип("Строка")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИспользоватьУпаковкиНоменклатуры();
	
КонецФункции

// Устанавливает условное оформление для полей Статус и Дальнейшее действие в динамических списках,
// в случае, когда действие или статус не требуются.
//
// Параметры:
//  УсловноеОформление           - УсловноеОформление - условное оформление динамического списка.
//  ИмяСтатус                    - Строка - имя элемента формы в которое выводится "Статус".
//  ИмяДальнейшееДействие        - Строка - имя элемента формы в которое выводится "Дальнейшее действие".
//  ПутьКПолюСтатус              - Строка - путь к данным, содержащим "Статус".
//  ПутьКПолюДальнейшееДействие  - Строка - путь к данным, содержащим "Дальнейшее действие".
//
Процедура УстановитьУсловноеОформлениеСтатусДальнейшееДействие(УсловноеОформление, ИмяСтатус, ИмяДальнейшееДействие, ПутьКПолюСтатус, ПутьКПолюДальнейшееДействие) Экспорт
	
	// Статус не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСтатус);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтатус);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	// Дальнейшее действие не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДальнейшееДействие);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДальнейшееДействие);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	// Дальнейшее действие не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяДальнейшееДействие);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДальнейшееДействие);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
КонецПроцедуры

// Устанавливает условное оформление для поля Статус в динамических списках для значений "Принято" и "Отклонено".
//
// Параметры:
//  УсловноеОформление   - УсловноеОформление - условное оформление динамического списка.
//  ИмяСтатус            - Строка - имя элемента формы в которое выводится "Статус".
//  ПутьКПолюСтатус      - Строка - путь к данным, содержащим "Статус".
//
Процедура УстановитьУсловноеОформлениеСтатусИнформирования(УсловноеОформление, ИмяСтатус, ПутьКПолюСтатус) Экспорт

	// Статус ПринятоГИСМ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСтатус);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтатус);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИнформированияМДЛП.Принято;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	// Статус ОтклоненоГИСМ
	СписокСтатусовОтказ = Новый СписокЗначений;
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.ОшибкаПередачи);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.Отклонено);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.ЧастичноПередано);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.ОприходованоНовымВладельцем);
	СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.ПринятоСОтклонениемОтТребований);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
		СписокСтатусовОтказ.Добавить(Перечисления.СтатусыИнформированияМДЛП.ВвезеноВРФБезПодтверждения);
	КонецЕсли;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСтатус);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюСтатус);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусовОтказ;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
КонецПроцедуры

// Возвращает организацию и место деятельности по идентификатору места деятельности
// или регистрационному номеру участника.
//
// Параметры:
//  Идентификатор     - Строка - идентификатор места деятельности или регистрационный номер участника;
//  Организация       - СправочникСсылка.ОрганизацииМДЛП - возвращаемое значение;
//  МестоДеятельности - СправочникСсылка.МестаДеятельностиМДЛП - возвращаемое значение.
//
Процедура ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Идентификатор, Организация = Неопределено, МестоДеятельности = Неопределено) Экспорт
	
	Если ЗначениеСоответствуетТипуXDTO(Идентификатор, "subject_id_type") Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаДеятельности.Организация  КАК Организация,
		|	МестаДеятельности.Ссылка       КАК МестоДеятельности
		|ИЗ
		|	Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|ГДЕ
		|	МестаДеятельности.Идентификатор = &Идентификатор
		|";
	ИначеЕсли ЗначениеСоответствуетТипуXDTO(Идентификатор, "system_subject_type") Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Организации.Ссылка        КАК Организация,
		|	МестаДеятельности.ссылка  КАК МестоДеятельности
		|ИЗ
		|	Справочник.ОрганизацииМДЛП КАК Организации
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|	ПО
		|		Организации.Ссылка = МестаДеятельности.Организация
		|ГДЕ
		|	Организации.РегистрационныйНомерУчастника = &Идентификатор
		|";
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный идентификатор объекта'");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
		Если Выборка.Количество() = 1 Тогда
			МестоДеятельности = Выборка.МестоДеятельности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает зоту таможенного контроля по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - регистрационный номер участника;
//  ЗТК           - СправочникСсылка.ЗоныТаможенногоКонтроляМДЛП - возвращаемое значение;
//
Процедура ПолучитьЗонуТаможенногоКонтроляПоИдентификатору(Идентификатор, ЗТК = Неопределено) Экспорт
	
	Если ЗначениеСоответствуетТипуXDTO(Идентификатор, "system_subject_type") Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ЗТК.Ссылка  КАК ЗонаТаможенногоКонтроля
		|ИЗ
		|	Справочник.ЗоныТаможенногоКонтроляМДЛП КАК ЗТК
		|ГДЕ
		|	ЗТК.РегистрационныйНомерУчастника = &Идентификатор
		|";
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный идентификатор объекта'");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗТК = Выборка.ЗонаТаможенногоКонтроля;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую Страну, Регистрационный номер, наименование, признак физического лица, ИНН и КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентГИСМ - Контрагент.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     Страна  - Строка - Страна регистрации контрагента.
//     РегистрационныйНомер  - Строка - Регистрационный номер контрагента.
//     Наименование  - Строка - Наименование контрагента.
//     НаименованиеПолное  - Строка - Полное наименование контрагента.
//     ЭтоФизическоеЛицо  - Булево - Признак физического лица.
//     ИНН  - Строка - ИНН контрагента.
//     КПП  - Строка - КПП контрагента.
//     ЮридическийАдрес - Строка - Юридический адрес контрагента.
//
Функция РеквизитыКонтрагента(Контрагент) Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.РеквизитыКонтрагента(Контрагент);
	
КонецФункции

// Актуализирует значения полей КИ из ее представления.
//
// Параметры:
//  Объект             - объект с контактной информацией
//  Представление      - представление КИ
//  ИмяРеквизитаАдреса - префикс полей КИ
//  ТипКИ              - тип контактной информации (Перечисления.ТипыКонтактнойИнформации)
//
Процедура ЗаполнитьЗначенияПолейКИПоПредставлению(Объект, Представление, ИмяРеквизитаАдреса, ТипКИ = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКИ = Неопределено Тогда
		ТипКИ = Перечисления["ТипыКонтактнойИнформации"].Адрес;
	КонецЕсли;
	
	ЗначенияПолей = Объект[ИмяРеквизитаАдреса + "ЗначенияПолей"];
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	Если МодульУправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначенияПолей) <> Представление Тогда
		
		Комментарий = СокрЛП(МодульУправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначенияПолей));
		
		ЗначенияПолей = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ТипКИ);
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			МодульУправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(ЗначенияПолей, Комментарий);
		КонецЕсли;
		
		Объект[ИмяРеквизитаАдреса + "ЗначенияПолей"] = ЗначенияПолей;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаАдреса + "ИдентификаторАдресногоОбъекта") Тогда
		
		Результат = ИнтеграцияМДЛПВызовСервера.ПолучитьАдресныеОбъекты(ЗначенияПолей);
		Если Результат.Успех Тогда
			Объект[ИмяРеквизитаАдреса + "ИдентификаторАдресногоОбъекта"] = Результат.ИдентификаторАдресногоОбъекта;
			Объект[ИмяРеквизитаАдреса + "ИдентификаторДома"]             = Результат.ИдентификаторДома;
			Объект[ИмяРеквизитаАдреса + "Помещение"]                     = Результат.Помещение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст ошибки обработки документа
//
// Параметры:
//  ДокументСсылка       - ДокументСсылка - обрабатываемый документ.
//  ДальнейшееДействие   - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП - выполняемое действие.
// 
// Возвращаемое значение:
//  Строка - описание ошибки.
//
Функция ТекстОшибкиОбработкиДальнейшегоДействия(ДокументСсылка, ДальнейшееДействие) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При обработке документа %1 не выполнено действие %2'"),
		ДокументСсылка,
		ДальнейшееДействие);
	
КонецФункции

// Проверяет заполнение упаковок в передаваемых уведомлениях.
//
// Параметры:
//  Объект - проверяемый объект.
//  Отказ - Булево - отказ от продолжения работы.
//  МаксимальноеКоличествоУпаковок - Число - максимальное количество упаковок, которое можно отправить в одном сообщении,
//                                           если 0, то без ограничений.
//
Процедура ПроверитьЗаполнениеУпаковок(Объект, Отказ, МаксимальноеКоличествоУпаковок = 25000) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерСтроки     КАК НомерСтроки,
	|	НомераУпаковок.НомерКиЗ        КАК НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки    КАК КлючУпаковки,
	|	НомераУпаковок.ШтрихкодBase64  КАК ШтрихкодBase64
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	&НомераУпаковок КАК НомераУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки
	|");
	
	НомераУпаковок = Объект.НомераУпаковок.ВыгрузитьКолонки("НомерСтроки, НомерКиЗ");
	НомераУпаковок.Колонки.Добавить("ШтрихкодBase64", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	НомераУпаковок.Колонки.Добавить("КлючУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Для Каждого Строка Из Объект.НомераУпаковок Цикл
		СтрокаТаблицы = НомераУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
		СтрокаТаблицы.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерКиЗ);
	КонецЦикла;
	Запрос.УстановитьПараметр("НомераУпаковок", НомераУпаковок);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераУпаковок.НомерСтроки)  КАК НомерСтроки,
	|	НомераУпаковок.НомерУпаковки         КАК НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки          КАК КлючУпаковки
	|ПОМЕСТИТЬ ДублиУпаковок
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|СГРУППИРОВАТЬ ПО
	|	НомераУпаковок.НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(НомераУпаковок.НомерУпаковки) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУпаковки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиУпаковок.НомерУпаковки  КАК НомерУпаковки,
	|	НомераУпаковок.НомерСтроки   КАК ДублирующаяСтрока
	|ИЗ
	|	ДублиУпаковок КАК ДублиУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.НомерУпаковки = ДублиУпаковок.НомерУпаковки
	|		И НомераУпаковок.КлючУпаковки = ДублиУпаковок.КлючУпаковки
	|		И НомераУпаковок.НомерСтроки <> ДублиУпаковок.НомерСтроки
	|";
	
	ШаблонСообщения = НСтр("ru = 'Номер упаковки ""%1"" указан ранее.'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, Выборка.НомерУпаковки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НомераУпаковок", Выборка.ДублирующаяСтрока, "НомерКиЗ");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
		
	КонецЦикла;
	
	Если Объект.НомераУпаковок.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.НомераУпаковок[0], "ШтрихкодBase64") Тогда
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ДублиУпаковок
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НомераУпаковок.НомерСтроки)  КАК НомерСтроки,
		|	НомераУпаковок.ШтрихкодBase64        КАК ШтрихкодBase64
		|ПОМЕСТИТЬ ДублиУпаковок
		|ИЗ
		|	НомераУпаковок КАК НомераУпаковок
		|ГДЕ
		|	НомераУпаковок.ШтрихкодBase64 <> """"
		|СГРУППИРОВАТЬ ПО
		|	НомераУпаковок.ШтрихкодBase64
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(НомераУпаковок.НомерУпаковки) > 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодBase64
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДублиУпаковок.ШтрихкодBase64  КАК ШтрихкодBase64,
		|	ДублиУпаковок.НомерСтроки     КАК ИсходнаяСтрока,
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.НомерСтроки    КАК ДублирующаяСтрока
		|ИЗ
		|	ДублиУпаковок КАК ДублиУпаковок
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		НомераУпаковок КАК НомераУпаковок
		|	ПО
		|		НомераУпаковок.ШтрихкодBase64 = ДублиУпаковок.ШтрихкодBase64
		|		И НомераУпаковок.НомерСтроки <> ДублиУпаковок.НомерСтроки
		|";
		
		ШаблонСообщения = НСтр("ru = 'Код маркировки ""%1"" указан ранее в строке ""%2"".'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КодМаркировки = СтрЗаменить(ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Выборка.ШтрихкодBase64)), Символ(29), " 'GS' ");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, КодМаркировки, Выборка.ИсходнаяСтрока);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НомераУпаковок", Выборка.ДублирующаяСтрока, "НомерКиЗ");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщееКоличествоУпаковокКПередаче = Объект.НомераУпаковок.Количество();
	Если ОбщееКоличествоУпаковокКПередаче > 0 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.НомераУпаковок[0], "СостояниеПодтверждения") Тогда
			ОтборНепроверяемыхСтрок = Новый Структура("СостояниеПодтверждения", Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется);
			ОбщееКоличествоУпаковокКПередаче = ОбщееКоличествоУпаковокКПередаче - Объект.НомераУпаковок.НайтиСтроки(ОтборНепроверяемыхСтрок).Количество();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ТранспортныеУпаковки") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерСтроки    КАК НомерСтроки,
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки
		|ПОМЕСТИТЬ НомераУпаковок
		|ИЗ
		|	&НомераУпаковок КАК НомераУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУпаковки
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НомераУпаковок.НомерСтроки)  КАК НомерСтроки,
		|	НомераУпаковок.НомерУпаковки         КАК НомерУпаковки
		|ПОМЕСТИТЬ ДублиУпаковок
		|ИЗ
		|	НомераУпаковок КАК НомераУпаковок
		|СГРУППИРОВАТЬ ПО
		|	НомераУпаковок.НомерУпаковки
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(НомераУпаковок.НомерУпаковки) > 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУпаковки
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДублиУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.НомерСтроки   КАК ДублирующаяСтрока
		|ИЗ
		|	ДублиУпаковок КАК ДублиУпаковок
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		НомераУпаковок КАК НомераУпаковок
		|	ПО
		|		НомераУпаковок.НомерУпаковки = ДублиУпаковок.НомерУпаковки
		|		И НомераУпаковок.НомерСтроки <> ДублиУпаковок.НомерСтроки
		|";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НомераУпаковок", Объект.ТранспортныеУпаковки.Выгрузить());
		
		ШаблонСообщения = НСтр("ru = 'Номер транспортной упаковки ""%1"" указан ранее.'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Выборка.НомерУпаковки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТранспортныеУпаковки", Выборка.ДублирующаяСтрока, "НомерУпаковки");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		КонецЦикла;
		
		ОбщееКоличествоУпаковокКПередаче = ОбщееКоличествоУпаковокКПередаче
			+Объект.ТранспортныеУпаковки.Количество();
		
	КонецЕсли;
	
	Если МаксимальноеКоличествоУпаковок > 0 И ОбщееКоличествоУпаковокКПередаче > МаксимальноеКоличествоУпаковок Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Количество упаковок к передаче (%1) превышает максимально допустимое значение (%2)'"),
			ОбщееКоличествоУпаковокКПередаче,
			МаксимальноеКоличествоУпаковок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Товары") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ТаблицаТовары.ИдентификаторСтроки  КАК ИдентификаторСтроки,
		|	ТаблицаТовары.Количество           КАК Количество
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтроки
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНомераУпаковок.ИдентификаторСтроки          КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ТаблицаНомераУпаковок
		|ИЗ
		|	&ТаблицаНомераУпаковок КАК ТаблицаНомераУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтроки
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки           КАК НомерСтроки,
		|	МАКСИМУМ(ТаблицаТовары.Количество)  КАК Количество,
		|	КОЛИЧЕСТВО(1)                       КАК КоличествоУпаковок
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ТаблицаНомераУпаковок КАК ТаблицаНомераУпаковок
		|	ПО
		|		ТаблицаНомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.НомерСтроки
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ТаблицаТовары.Количество) <> КОЛИЧЕСТВО(1)
		|";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		ТаблицаТовары = Объект.Товары.Выгрузить(, "НомерСтроки, ИдентификаторСтроки, Количество");
		ТаблицаНомераУпаковок = Объект.НомераУпаковок.Выгрузить(, "ИдентификаторСтроки");
		
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		Запрос.УстановитьПараметр("ТаблицаНомераУпаковок", ТаблицаНомераУпаковок);
		
		ШаблонСообщения = НСтр("ru = 'Количество товара (%1) отличается от количества номеров упаковок (%2).'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Выборка.Количество, Выборка.КоличествоУпаковок);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеОтклоненнойСтроки(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковок.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.Отклонено", Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ТранспортныеУпаковки") Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковки.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"Объект.ТранспортныеУпаковки.Отклонено", Истина);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление состояния подтверждения и полей зависящих от него.
//
// Параметры:
//  Форма - Форма - форма уведомления.
//
Процедура УстановитьУсловноеОформлениеСостоянияПодтверждения(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокСостояниеПодтверждения.Имя);
	
	СтатусыОтклонено = Новый СписокЗначений;
	СтатусыОтклонено.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	СтатусыОтклонено.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	СтатусыОтклонено.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	СтатусыОтклонено.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	СтатусыОтклонено.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПодтверждения", СтатусыОтклонено, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковок.Имя);
	
	СтатусДоступноРедактирование = Новый СписокЗначений;
	СтатусДоступноРедактирование.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	СтатусДоступноРедактирование.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПодтверждения", СтатусДоступноРедактирование, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ТранспортныеУпаковки") Тогда
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиСостояниеПодтверждения.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"Объект.ТранспортныеУпаковки.СостояниеПодтверждения", СтатусыОтклонено, ВидСравненияКомпоновкиДанных.ВСписке);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковки.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"Объект.ТранспортныеУпаковки.СостояниеПодтверждения", СтатусДоступноРедактирование, ВидСравненияКомпоновкиДанных.НеВСписке);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустой результат заполнения серий в списке товаров.
//
// Возвращаемое значение:
//  Структура - результат заполнения.
//    ЕстьЗаполненныеСтроки - Булево - Истина, если хотя бы в одной строке была заполнена серия;
//    Ошибки - Структура - Ошибки, возникшие при заполнении, следует добавлять с помощью метода
//                ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю.
//
Функция ПустойРезультатЗаполненияСерий() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЗаполненныеСтроки", Ложь);
	Результат.Вставить("Ошибки");
	
	Возврат Результат;
	
КонецФункции

// Возвращает логин и пароль пользователя API,
// сохраненные в информационной базе.
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Параметры:
//  ИдентификаторОрганизации - Строка - Идентификатор организации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая логин и пароль пользователя
//    API:
//      * Логин - Строка - логин пользователя;
//      * Пароль - Строка - пароль пользователя.
//  Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ДанныеАутентификацииПользователяАПИ(ИдентификаторОрганизации) Экспорт
	
	Если ПустаяСтрока(ИдентификаторОрганизации) Или Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторОрганизации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторОрганизации,
		"login,password");
		
	Если ДанныеВБезопасномХранилище.login <> Неопределено
	   И ДанныеВБезопасномХранилище.password <> Неопределено Тогда
		Возврат Новый Структура(
			"Логин, Пароль",
			ДанныеВБезопасномХранилище.login,
			ДанныеВБезопасномХранилище.password);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// В вызывающем коде перед записью данных необходимо проверить права
// и установить привилегированный режим.
// Сохраняет логин и пароль пользователя API.
//
Процедура СохранитьДанныеАутентификацииПользователяАПИ(ИдентификаторОрганизации, ДанныеАутентификации) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторОрганизации);
		
	Иначе
		
		// Запись данных в безопасное хранилище
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторОрганизации);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторОрганизации,
				ДанныеАутентификации.Логин,
				"login");
				
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторОрганизации,
				ДанныеАутентификации.Пароль,
				"password");
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияМДЛПВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеТиповОрганизацииКонтрагентаОбъектаМестаДеятельности(
		ТипОрганизация, ТипОбъектМестаДеятельностиОрганизации, ТипКонтрагент, ТипОбъектМестаДеятельностиКонтрагента) Экспорт
	
	ИнтеграцияМДЛППереопределяемый.ОписаниеТиповОрганизацииКонтрагентаОбъектаМестаДеятельности(
		ТипОрганизация, ТипОбъектМестаДеятельностиОрганизации, ТипКонтрагент, ТипОбъектМестаДеятельностиКонтрагента);
	
	Если ТипЗнч(ТипОрганизация) <> Тип("ОписаниеТипов") Тогда
		
		Организация = Неопределено;
		МестоДеятельности = Неопределено;
		Контрагент = Неопределено;
		МестоДеятельностиКонтрагента = Неопределено;
		ИнтеграцияМДЛППереопределяемый.ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(Организация, МестоДеятельности, Контрагент, МестоДеятельностиКонтрагента);
		
		ТипОрганизация = ?(Организация <> Неопределено,
			Новый ОписаниеТипов(ТипЗнч(Организация)),
			Новый ОписаниеТипов("Строка"));
		ТипОбъектМестаДеятельностиОрганизации = ?(МестоДеятельности <> Неопределено,
			Новый ОписаниеТипов(ТипЗнч(МестоДеятельности)),
			Новый ОписаниеТипов("Строка"));
		ТипКонтрагент = ?(Контрагент <> Неопределено,
			Новый ОписаниеТипов(ТипЗнч(Контрагент)),
			Новый ОписаниеТипов("Строка"));
		ТипОбъектМестаДеятельностиКонтрагента = ?(МестоДеятельностиКонтрагента <> Неопределено,
			Новый ОписаниеТипов(ТипЗнч(МестоДеятельностиКонтрагента)),
			Новый ОписаниеТипов("Строка"));
		
	КонецЕсли;
	
	ТипОрганизация = ?(ТипОрганизация = Неопределено,
		Новый ОписаниеТипов("Строка"),
		ТипОрганизация);
	ТипОбъектМестаДеятельностиОрганизации = ?(ТипОбъектМестаДеятельностиОрганизации = Неопределено,
		Новый ОписаниеТипов("Строка"),
		ТипОбъектМестаДеятельностиОрганизации);
	ТипКонтрагент = ?(ТипКонтрагент = Неопределено,
		Новый ОписаниеТипов("Строка"),
		ТипКонтрагент);
	ТипОбъектМестаДеятельностиКонтрагента = ?(ТипОбъектМестаДеятельностиКонтрагента = Неопределено,
		Новый ОписаниеТипов("Строка"),
		ТипОбъектМестаДеятельностиКонтрагента);
	
КонецПроцедуры

Функция РегистраторИспользуетсяВАвтономномРежиме(СерийныйНомерМБ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистраторыМДЛП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистраторыМДЛП КАК РегистраторыМДЛП
	|ГДЕ
	|	РегистраторыМДЛП.СерийныйНомерМБ = &СерийныйНомерМБ
	|	И НЕ РегистраторыМДЛП.ПометкаУдаления
	|	И РегистраторыМДЛП.Активно
	|");
	
	Запрос.УстановитьПараметр("СерийныйНомерМБ", СерийныйНомерМБ);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьРегистраторВыбытия(МестоДеятельности) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Регистраторы.Ссылка  КАК Ссылка
	|ИЗ
	|	Справочник.РегистраторыМДЛП КАК Регистраторы
	|ГДЕ
	|	Регистраторы.Владелец = &МестоДеятельности
	|	И НЕ Регистраторы.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("МестоДеятельности", МестоДеятельности);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ДоступноОснованиеУведомления(Ссылка) Экспорт
	
	МетаданныеУведомления = Ссылка.Метаданные();
	РеквизитОснование = МетаданныеУведомления.Реквизиты.Найти("Основание");
	Если РеквизитОснование <> Неопределено Тогда
		Если Не ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(РеквизитОснование.Тип, Тип("Строка")) Тогда
			
			Для Каждого Тип Из РеквизитОснование.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				Если ОбъектМетаданных <> Неопределено
				   И ПравоДоступа("Чтение", ОбъектМетаданных)
				   И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


// Формирует таблицу значений из древовидной структуры данных.
//
// Параметры:
//  Дерево       - ДеревоЗначений, ДанныеФормыДерево - дерево, которое необходимо преобразовать в таблицу значений.
//  МетодОбхода  - Строка - метод обхода дерева, может принимать значения:
//                 ВШирину - сначала обрабатывается каждый узел на уровне, прежде чем перейти на следующий уровень.
//                 ВГлубину - дерево проходится вниз насколько это можно на каждом потомке, прежде чем переходить к следующей родственной ветке.
//  ИменаКолонок - Строка - имена колонок, которые необходимо получить из дерева.
//
// Возвращаемое значение:
//  Таблица - ТаблицаЗначений - таблица схормированная из дерева.
//
Функция ДеревоВТаблицуЗначений(Дерево, МетодОбхода = "ВШирину", ИменаКолонок = "") Экспорт
	
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		ДеревоОбхода = Дерево;
	ИначеЕсли ТипЗнч(Дерево) = Тип("ДанныеФормыДерево") Тогда
		ДеревоОбхода = ДанныеФормыВЗначение(Дерево, Тип("ДеревоЗначений"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаКолонок) Тогда
		НеобходимыеКолонки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(НеобходимыеКолонки, ДеревоОбхода.Колонки);
		Колонки = Новый Массив;
		Для Каждого КлючИЗначение Из НеобходимыеКолонки Цикл
			Если КлючИЗначение.Значение <> Неопределено Тогда
				Колонки.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Колонки = ДеревоОбхода.Колонки;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	ПараметрыОбхода = ПараметрыОбходаДерева(ДеревоОбхода, МетодОбхода);
	
	Пока Истина Цикл
		
		ЭлементДанных = ПолучитьОчереднойЭлементДерева(ПараметрыОбхода);
		Если ЭлементДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		// Выполнение основного кода.
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ЭлементДанных);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Формирует параметры для обхода дерева, для функции ПолучитьОчереднойЭлементДерева.
//
// Параметры:
//  Дерево       - ДеревоЗначений, ДанныеФормыДерево - древовидная структура данных, которую необходимо обойти.
//  МетодОбхода  - Строка - метод обхода дерева, может принимать значения:
//                 ВШирину - сначала обрабатывается каждый узел на уровне, прежде чем перейти на следующий уровень.
//                 ВГлубину - дерево проходится вниз насколько это можно на каждом потомке, прежде чем переходить к следующей родственной ветке.
//
// Возвращаемое значение:
//  ПараметрыОбхода - Структура - параметры обхода дерева, передаваемые в функцию ПолучитьОчереднойЭлементДерева:
//    * СтекИлиОчередь - Массив - коллекция, используемая для обхода дерева.
//    * МетодОбхода    - метод обхода из параметров функции.
//    * ТипДерева      - тип значения дерева обхода.
//
Функция ПараметрыОбходаДерева(Дерево, МетодОбхода = "ВШирину") Экспорт
	
	ТипДерева = ТипЗнч(Дерево);
	Если ТипДерева = Тип("ДанныеФормыДерево") Тогда
		Список = Дерево.ПолучитьЭлементы();
	Иначе
		Список = Дерево.Строки;
	КонецЕсли;
	
	СтекИлиОчередь = Новый Массив;
	СтекИлиОчередь.Добавить(Новый Структура("ИндексСписка, Список", 0, Список));
	
	ПараметрыОбхода = Новый Структура;
	ПараметрыОбхода.Вставить("СтекИлиОчередь", СтекИлиОчередь);
	ПараметрыОбхода.Вставить("МетодОбхода"   , МетодОбхода);
	ПараметрыОбхода.Вставить("ТипДерева"     , ТипДерева);
	
	Возврат ПараметрыОбхода;
	
КонецФункции

// Получает очередной элемент древовидной структуры данных.
//
// Параметры:
//  ПараметрыОбхода - Структура - параметры обхода дерева (см. функцию ПараметрыОбходаДерева).
//
// Возвращаемое значение:
//  ВозвращаемыйЭлемент - СтрокаДереваЗначений, ДанныеФормыЭлементДерева - элемент древовидной структуры данных.
//
Функция ПолучитьОчереднойЭлементДерева(ПараметрыОбхода) Экспорт
	
	СтекИлиОчередь = ПараметрыОбхода.СтекИлиОчередь;
	МетодОбхода    = ПараметрыОбхода.МетодОбхода;
	ТипДерева      = ПараметрыОбхода.ТипДерева;
	
	Пока СтекИлиОчередь.Количество() > 0 Цикл
		
		Порция = СтекИлиОчередь[0];
		Список       = Порция.Список;
		ИндексСписка = Порция.ИндексСписка;
		СтекИлиОчередь.Удалить(0);
		
		Граница = Список.Количество() - 1;
		Если ИндексСписка <= Граница Тогда
			
			ВозвращаемыйЭлемент = Список[ИндексСписка];
			
			СтекИлиОчередь.Вставить(0, Новый Структура("ИндексСписка, Список", ИндексСписка + 1, Список));
			
			Если ТипДерева = Тип("ДанныеФормыДерево") Тогда
				СледующийСписок = ВозвращаемыйЭлемент.ПолучитьЭлементы();
			Иначе
				СледующийСписок = ВозвращаемыйЭлемент.Строки;
			КонецЕсли;
			
			Если СледующийСписок.Количество() > 0 Тогда
				Порция = Новый Структура("ИндексСписка, Список", 0, СледующийСписок);
				Если МетодОбхода = "ВШирину" Тогда
					СтекИлиОчередь.Добавить(Порция);
				ИначеЕсли МетодОбхода = "ВГлубину" Тогда
					СтекИлиОчередь.Вставить(0, Порция);
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемыйЭлемент;
	
КонецФункции

Процедура ЗаполнитьДолиУпаковокВТабличныхЧастях(ТабицаТовары, ТаблицаНомераУпаковок) Экспорт
	
	Если ТабицаТовары.Количество() = 0 Или ТаблицаНомераУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТабицаТовары Цикл
		
		РассчитываемыеСтроки = Новый Массив;
		
		Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки);
		СтрокиУпаковок = ТаблицаНомераУпаковок.НайтиСтроки(Отбор);
		Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУпаковки.ДоляУпаковки) Тогда
				Прервать;
			КонецЕсли;
			
			РассчитываемыеСтроки.Добавить(СтрокаУпаковки);
			
			ПозицияРазделителя = СтрНайти(СтрокаУпаковки.ДоляУпаковки, "/");
			Знаменатель = Число(Сред(СтрокаУпаковки.ДоляУпаковки, ПозицияРазделителя + 1));
			
			Если СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
				СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = Знаменатель;
			Иначе
				СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = ВычислитьНаименьшееОбщееКратное(СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной, Знаменатель);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаУпаковки Из РассчитываемыеСтроки Цикл
			
			ПозицияРазделителя = СтрНайти(СтрокаУпаковки.ДоляУпаковки, "/");
			Числитель = Число(Лев(СтрокаУпаковки.ДоляУпаковки, ПозицияРазделителя - 1));
			Знаменатель = Число(Сред(СтрокаУпаковки.ДоляУпаковки, ПозицияРазделителя + 1));
			
			СтрокаУпаковки.КоличествоПервичныхУпаковок = Числитель * СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной / Знаменатель;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("МДЛППрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекФайлов(Настройки) Экспорт
	
	Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники.МДЛППрисоединенныеФайлы);
	Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники.МДЛППрисоединенныеФайлы);
	Настройки.НеСоздаватьФайлыПоШаблону.Добавить(Метаданные.Справочники.МДЛППрисоединенныеФайлы);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// ТехнологияСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	// ИнтеграцияМДЛП.КонтрольКМ
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.КонтрольКМ") Тогда
		МодульКонтрольКодовМаркировкиМДЛП = ОбщегоНазначения.ОбщийМодуль("КонтрольКодовМаркировкиМДЛП");
		МодульКонтрольКодовМаркировкиМДЛП.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.КонтрольКМ
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	// ИнтеграцияМДЛП.КонтрольКМ
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.КонтрольКМ") Тогда
		МодульКонтрольКодовМаркировкиМДЛП = ОбщегоНазначения.ОбщийМодуль("КонтрольКодовМаркировкиМДЛП");
		МодульКонтрольКодовМаркировкиМДЛП.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.КонтрольКМ
	
КонецПроцедуры

// Конец ТехнологияСервиса.ОчередьЗаданий

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча,
	// составляющая массив полей для однозначной идентификации элемента.
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
		МодульИнвентаризацияМДЛП.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
КонецПроцедуры

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроведениеУведомлений

Процедура ПроверитьВозможностьЗаписиУведомления(Объект, РежимЗаписи, ИменаИсключаемыхРеквизитов = Неопределено) Экспорт
	
	Если Объект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты.Добавить("Основание");
	ИсключаемыеРеквизиты.Добавить("Ответственный");
	ИсключаемыеРеквизиты.Добавить("Комментарий");
	ИсключаемыеРеквизиты.Добавить("СтатусПроверкиИПодбора");
	ИсключаемыеРеквизиты.Добавить("ДанныеПроверкиИПодбора");
	ИсключаемыеРеквизиты.Добавить("СостояниеПодтверждения");
	
	Если ТипЗнч(ИменаИсключаемыхРеквизитов) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРеквизиты, ИменаИсключаемыхРеквизитов, Истина);
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если ИсключаемыеРеквизиты.Найти(Реквизит.Имя) = Неопределено Тогда
			Реквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Реквизиты.Добавить("Дата"); // Дата уведомления
	
	СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, Реквизиты);
	ЕстьИзменения = Ложь;
	Для Каждого КлючЗначение Из СтарыеЗначения Цикл
		Если Объект[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИзменения И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РазрешеноИзменениеКлючевыхРеквизитовУведомления(Объект.Ссылка) Тогда
		Если ЕстьИзменения Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя изменять ключевые реквизиты документа после передачи.'");
		Иначе
			ВызватьИсключение НСтр("ru = 'Нельзя отменять проведение документа после передачи.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазрешеноИзменениеКлючевыхРеквизитовУведомления(Ссылка) Экспорт
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отказаться);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отозвать);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отменено);
	Статусы.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КОбработке);
	
	ЧастиЗапроса = Новый Массив;
	Если МетаданныеОбъекта.ТабличныеЧасти.Найти("НомераУпаковок") <> Неопределено
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("СостояниеПодтверждения", МетаданныеОбъекта.ТабличныеЧасти.НомераУпаковок) Тогда
		ЧастиЗапроса.Добавить(СтрЗаменить("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостояниеПодтверждения
		|ИЗ
		|	#ДокументНомераУпаковок КАК НомераУпаковок
		|ГДЕ
		|	НомераУпаковок.Ссылка = &Ссылка
		|	И НЕ НомераУпаковок.СостояниеПодтверждения В (&Статусы)
		|", "#Документ", МетаданныеОбъекта.ПолноеИмя() + "."));
	КонецЕсли;
	
	Если МетаданныеОбъекта.ТабличныеЧасти.Найти("ТранспортныеУпаковки") <> Неопределено
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("СостояниеПодтверждения", МетаданныеОбъекта.ТабличныеЧасти.ТранспортныеУпаковки) Тогда
		ЧастиЗапроса.Добавить(СтрЗаменить("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостояниеПодтверждения
		|ИЗ
		|	#ДокументТранспортныеУпаковки КАК НомераУпаковок
		|ГДЕ
		|	НомераУпаковок.Ссылка = &Ссылка
		|	И НЕ НомераУпаковок.СостояниеПодтверждения В (&Статусы)
		|","#Документ", МетаданныеОбъекта.ПолноеИмя() + "."));
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СостояниеПодтверждения", МетаданныеОбъекта) Тогда
		ЧастиЗапроса.Добавить(СтрЗаменить("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостояниеПодтверждения
		|ИЗ
		|	#Документ КАК Шапка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|	И НЕ Шапка.СостояниеПодтверждения В (&Статусы)
		|","#Документ", МетаданныеОбъекта.ПолноеИмя()));
	КонецЕсли;
	
	Если ЧастиЗапроса.Количество() > 0 Тогда
		ТекстЗапроса = СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Статусы", Статусы);
		
		Возврат Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПараметрыОперацииИзмененияСтатусаУпаковок() Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИсходныйСтатус", Перечисления.СтатусыУпаковокМДЛП.ВОбороте);
	ПараметрыОперации.Вставить("СтатусВРезерве", Перечисления.СтатусыУпаковокМДЛП.ВРезерве);
	ПараметрыОперации.Вставить("НовыйСтатус");
	ПараметрыОперации.Вставить("СостояниеПринятоГИСМ", Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ПараметрыОперации.Вставить("ЭтоПеремещение", Ложь);
	ПараметрыОперации.Вставить("ЭтоПовторныйВводВОборот", Ложь);
	ПараметрыОперации.Вставить("ЭтоПриемкаНаСкладИзЗТК", Ложь);
	ПараметрыОперации.Вставить("УстанавливатьНовыйСтатусДляВложенныхУпаковок", Истина);
	ПараметрыОперации.Вставить("ВложенаВГрупповуюУпаковку", Ложь);
	ПараметрыОперации.Вставить("КонтролироватьОстаткиДолей", Истина);
	ПараметрыОперации.Вставить("КонтролироватьНаличиеДолиБезКоличества", Ложь);
	ПараметрыОперации.Вставить("КонтролироватьОстаткиДолейВРеестреВыбытия", Ложь);
	ПараметрыОперации.Вставить("Владелец");
	ПараметрыОперации.Вставить("ДатаОперации");
	ПараметрыОперации.Вставить("ДокументРезерва");
	ПараметрыОперации.Вставить("МестоДеятельности");
	ПараметрыОперации.Вставить("МестоДеятельностиПолучатель");
	ПараметрыОперации.Вставить("ИспользуетсяЗонаТаможенногоКонтроля", Ложь);
	ПараметрыОперации.Вставить("ЭтоПеремещениеМеждуЗТК", Ложь);
	ПараметрыОперации.Вставить("ИсходнаяЗонаТаможенногоКонтроля", Справочники.ЗоныТаможенногоКонтроляМДЛП.ПустаяСсылка());
	ПараметрыОперации.Вставить("НоваяЗонаТаможенногоКонтроля", Справочники.ЗоныТаможенногоКонтроляМДЛП.ПустаяСсылка());
	ПараметрыОперации.Вставить("НоваяЗонаТаможенногоКонтроляДляКаждойУпаковки", Ложь);
	ПараметрыОперации.Вставить("ИгнорироватьРезерв", Ложь);
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		ПараметрыОперации.Вставить("ДокументИнвентаризации");
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	Возврат ПараметрыОперации;
	
КонецФункции

Процедура ПровестиДокументПоРегиструУпаковок(Ссылка, ПараметрыОперации = Неопределено, Отказ = Ложь, СостояниеПодтверждения = Неопределено) Экспорт
	
	МетаданныеДокумента = Ссылка.Метаданные();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                  КАК Ссылка,
	|	Документ.Дата                    КАК Дата,
	|	Документ.МестоДеятельности       КАК МестоДеятельности,
	|	Документ.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|ИЗ
	|	#Документ КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|";
	
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		
		ОрганизацияРезидент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Новый Структура("Резидент", "Организация.Резидент")).Резидент = Истина;
		Если Не ОрганизацияРезидент
		 Или МетаданныеДокумента.Реквизиты.Найти("МестоДеятельности") = Неопределено Тогда
			// Для документов, у которых организация не является резидентом или нет реквизита МестоДеятельности, местом деятельности считаем Организацию.
			// Таким документом, например, является УведомлениеОВыпускеГотовойПродукцииЗаПределамиРФМДЛП.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.МестоДеятельности", "Документ.Организация");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Документ", МетаданныеДокумента.ПолноеИмя());
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = МетаданныеДокумента.Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ДокументИнвентаризации");
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для проведения'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если СостояниеПодтверждения = Неопределено Тогда
		СостояниеПодтверждения = Выборка.СостояниеПодтверждения;
	КонецЕсли;
	
	ОбрабатываемыеСостояния = Новый Массив;
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отозвать);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отменено);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	
	Если ОбрабатываемыеСостояния.Найти(СостояниеПодтверждения) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаНомераУпаковок.НомерСтроки           КАК НомерСтроки,
	|	ТаблицаНомераУпаковок.НомерКиЗ              КАК НомерУпаковки,
	|	&ДоляУпаковки                               КАК ДоляУпаковки,
	|	ЛОЖЬ                                        КАК ГрупповаяУпаковка,
	|	""НомераУпаковок""                          КАК ИмяТабличнойЧасти,
	|	""НомерКиЗ""                                КАК ИмяПоля
	|ПОМЕСТИТЬ НомераУпаковокДокумента
	|ИЗ
	|	#ДокументНомераУпаковок КАК ТаблицаНомераУпаковок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		#ДокументТовары КАК Товары
	|	ПО
	|		Товары.Ссылка = ТаблицаНомераУпаковок.Ссылка
	|		//УСЛОВИЕ_СОЕДИНЕНИЯ
	|ГДЕ
	|	ТаблицаНомераУпаковок.Ссылка = &Ссылка
	|	И НЕ ТаблицаНомераУпаковок.Отклонено
	|	И НЕ &Отмена
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументНомераУпаковок", МетаданныеДокумента.ПолноеИмя() + "." + МетаданныеДокумента.ТабличныеЧасти.НомераУпаковок.Имя);
	ТекстДоляУпаковки = "1";
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоляОтВторичнойУпаковки", МетаданныеДокумента.ТабличныеЧасти.НомераУпаковок) Тогда
		ТекстДоляУпаковки = "
		|ВЫБОР
		|	КОГДА ТаблицаНомераУпаковок.ДоляОтВторичнойУпаковки > 0
		|		ТОГДА ТаблицаНомераУпаковок.ДоляОтВторичнойУпаковки
		|	КОГДА ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок > 0
		|		ТОГДА ВЫРАЗИТЬ(ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок / Товары.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(10, 5))
		|	ИНАЧЕ 1
		|КОНЕЦ
		|";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("КоличествоПервичныхУпаковок", МетаданныеДокумента.ТабличныеЧасти.НомераУпаковок) Тогда
		ТекстДоляУпаковки = "
		|ВЫБОР
		|	КОГДА ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок > 0
		|		ТОГДА ВЫРАЗИТЬ(ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок / Товары.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(10, 5))
		|	ИНАЧЕ 1
		|КОНЕЦ
		|";
	КонецЕсли;
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументТовары", МетаданныеДокумента.ПолноеИмя() + "." + МетаданныеДокумента.ТабличныеЧасти.Товары.Имя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УСЛОВИЕ_СОЕДИНЕНИЯ", "И Товары.ИдентификаторСтроки = ТаблицаНомераУпаковок.ИдентификаторСтроки");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументТовары", МетаданныеДокумента.ПолноеИмя());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДоляУпаковки", ТекстДоляУпаковки);
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ТранспортныеУпаковки") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерСтроки    КАК НомерСтроки,
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	1                             КАК ДоляУпаковки,
		|	ИСТИНА                        КАК ГрупповаяУпаковка,
		|	""ТранспортныеУпаковки""      КАК ИмяТабличнойЧасти,
		|	""НомерУпаковки""             КАК ИмяПоля
		|ИЗ
		|	#ДокументТранспортныеУпаковки КАК НомераУпаковок
		|ГДЕ
		|	НомераУпаковок.Ссылка = &Ссылка
		|	И НЕ НомераУпаковок.Отклонено
		|	И НЕ &Отмена
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументТранспортныеУпаковки", МетаданныеДокумента.ПолноеИмя() + "." + МетаданныеДокумента.ТабличныеЧасти.ТранспортныеУпаковки.Имя);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Отмена",
		СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
		Или СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ДобавитьКлючиУпаковок(Запрос.МенеджерВременныхТаблиц, "НомераУпаковокДокумента");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераУпаковокДокумента.НомерСтроки)  КАК НомерСтроки,
	|	НомераУпаковокДокумента.НомерУпаковки         КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки          КАК КлючУпаковки,
	|	СУММА(НомераУпаковокДокумента.ДоляУпаковки)   КАК ДоляУпаковки,
	|	НомераУпаковокДокумента.ГрупповаяУпаковка     КАК ГрупповаяУпаковка,
	|	НомераУпаковокДокумента.ИмяТабличнойЧасти     КАК ИмяТабличнойЧасти,
	|	НомераУпаковокДокумента.ИмяПоля               КАК ИмяПоля
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|СГРУППИРОВАТЬ ПО
	|	НомераУпаковокДокумента.НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки,
	|	НомераУпаковокДокумента.ГрупповаяУпаковка,
	|	НомераУпаковокДокумента.ИмяТабличнойЧасти,
	|	НомераУпаковокДокумента.ИмяПоля
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераУпаковокДокумента
	|";
	Запрос.Выполнить();
	
	Если ПараметрыОперации = Неопределено Тогда
		ПараметрыОперации = ПараметрыОперацииИзмененияСтатусаУпаковок();
	КонецЕсли;
	
	ПараметрыОперации.ДатаОперации      = Выборка.Дата;
	ПараметрыОперации.ДокументРезерва   = Выборка.Ссылка;
	Если Не ЗначениеЗаполнено(ПараметрыОперации.МестоДеятельности) Тогда
		ПараметрыОперации.МестоДеятельности = Выборка.МестоДеятельности;
	КонецЕсли;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			ПараметрыОперации.ДокументИнвентаризации = Выборка.ДокументИнвентаризации;
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	Если СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Отозвать Тогда
		Если ПараметрыОперации.ЭтоПеремещение Тогда
			ПараметрыОперации.МестоДеятельности = ПараметрыОперации.МестоДеятельностиПолучатель;
		Иначе
			ПараметрыОперации.ИсходныйСтатус = ПараметрыОперации.НовыйСтатус;
		КонецЕсли;
	КонецЕсли;
	
	Если СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче
	 Или СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Отозвать Тогда
		
		Если ПроверитьДоступностьУпаковок(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации, Отказ) Тогда
			ЗарезервироватьУпаковки(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
		КонецЕсли;
		
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
	      Или СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ Тогда
		
		ЗарезервироватьУпаковки(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
		
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ
	      Или СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований Тогда
		
		УстановитьНовыйСтатус(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
		
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Отменено Тогда
		
		ОтменитьОперацию(ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКлючиУпаковок(МенеджерВременныхТаблиц, ИмяТаблицы = "НомераУпаковок") Экспорт
	
	НомераУпаковок = МенеджерВременныхТаблиц.Таблицы[ИмяТаблицы].ПолучитьДанные().Выгрузить();
	НомераУпаковок.Колонки.Добавить("КлючУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Для Каждого Строка Из НомераУпаковок Цикл
		Строка.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(Строка.НомерУпаковки);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить("
	|УНИЧТОЖИТЬ #ИмяТаблицы
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ #ИмяТаблицы
	|ИЗ
	|	&НомераУпаковок КАК НомераУпаковок
	|", "#ИмяТаблицы", ИмяТаблицы);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НомераУпаковок", НомераУпаковок);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьДанныеПоРасходуДолейУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Если Метаданные.РегистрыСведений.Найти("ДолиУпаковокМДЛП") <> Неопределено Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	НомераУпаковок.КлючУпаковки   КАК КлючУпаковки,
		|	ВЫБОР
		|		КОГДА СУММА(Доли.ДоляУпаковки) >= 1
		|			ТОГДА 0
		// При округдении сумма всех долей может быть больше единицы, поэтому сделаем небольшой задел: 0.0001
		|		ИНАЧЕ 1.0001 - СУММА(Доли.ДоляУпаковки)
		|	КОНЕЦ КАК ДоляУпаковки
		|ПОМЕСТИТЬ ОстаткиДолейУпаковок
		|ИЗ
		|	НомераУпаковок КАК НомераУпаковок
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ДолиУпаковокМДЛП КАК Доли
		|	ПО
		|		Доли.НомерУпаковки = НомераУпаковок.НомерУпаковки
		|		И Доли.КлючУпаковки  = НомераУпаковок.КлючУпаковки
		|		И Доли.ДокументРезерва <> &ДокументРезерва
		|СГРУППИРОВАТЬ ПО
		|	НомераУпаковок.НомерУпаковки,
		|	НомераУпаковок.КлючУпаковки
		|";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""""  КАК НомерУпаковки,
		|	""""  КАК КлючУпаковки,
		|	0     КАК ДоляУпаковки
		|ПОМЕСТИТЬ ОстаткиДолейУпаковок
		|ГДЕ
		|	ЛОЖЬ
		|";
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ОстаткиДолейУпаковок") <> Неопределено Тогда
		ТекстЗапроса = "
		|УНИЧТОЖИТЬ ОстаткиДолейУпаковок
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|" + ТекстЗапроса;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПроверитьДоступностьУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации, Отказ) Экспорт
	
	ПолучитьДанныеПоРасходуДолейУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации);
	
	ПолучитьДанныеПоРасходуДолейУпаковокВРеестреВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерСтроки             КАК НомерСтроки,
	|	НомераУпаковок.НомерУпаковки           КАК НомерУпаковки,
	|	СтатусыУпаковок.Статус                 КАК Статус,
	|	СтатусыУпаковок.ДатаСтатуса            КАК ДатаСтатуса,
	|	СтатусыУпаковок.ИсходныйСтатус         КАК ИсходныйСтатус,
	|	НомераУпаковок.ИмяТабличнойЧасти       КАК ИмяТабличнойЧасти,
	|	НомераУпаковок.ИмяПоля                 КАК ИмяПоля,
	|	ЕСТЬNULL(СтатусыУпаковок.Владелец, &Владелец) КАК Владелец,
	|	ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1) КАК ОстатокДолей,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СтатусыУпаковок.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)) В (&ИсходныйСтатус)
	|				И СтатусыУпаковок.ДокументРезерва <> &ДокументРезерва
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаСтатус,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатусыУпаковок.ДатаСтатуса, ДАТАВРЕМЯ(1,1,1)) > &ДатаОперации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаДатаСтатуса,
	|	ВЫБОР
	|		КОГДА &КонтролироватьВладельца И ЕСТЬNULL(СтатусыУпаковок.Владелец, &Владелец) <> &Владелец
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаВладелец,
	|	ВЫБОР
	|		КОГДА СтатусыУпаковок.НомерУпаковки ЕСТЬ NULL И НЕ ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка) В (&ИсходныйСтатус)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаУпаковкаОтсутствует,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиДолей И НЕ &КонтролироватьНаличиеДолиБезКоличества
	|			И НЕ СтатусыУпаковок.НомерУпаковки ЕСТЬ NULL
	|			И ВЫБОР
	|				КОГДА &КонтролироватьОстаткиДолейВРеестреВыбытия
	|					ТОГДА ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1) + ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 1) - 1
	|				ИНАЧЕ ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1)
	|			КОНЕЦ < НомераУпаковок.ДоляУпаковки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаОтсутствуетДостаточноеКоличество,
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиДолей И &КонтролироватьНаличиеДолиБезКоличества
	|			И НЕ СтатусыУпаковок.НомерУпаковки ЕСТЬ NULL
	|			И ВЫБОР
	|				КОГДА &КонтролироватьОстаткиДолейВРеестреВыбытия
	|					ТОГДА ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 0) = 0 И ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 0) = 0
	|				ИНАЧЕ ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 0) = 0
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаУпаковкаНеРасформирована,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяЗонаТаможенногоКонтроля
	|				И ЕСТЬNULL(СтатусыУпаковок.ЗонаТаможенногоКонтроля, ЗНАЧЕНИЕ(Справочник.ЗоныТаможенногоКонтроляМДЛП.ПустаяСсылка)) <> &ИсходнаяЗонаТаможенногоКонтроля
	|				И СтатусыУпаковок.ДокументРезерва <> &ДокументРезерва
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаУпаковкаОтсутствуетВЗонеТаможенногоКонтроля
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиМДЛП КАК СтатусыУпаковок
	|	ПО
	|		(СтатусыУпаковок.МестоДеятельности = &МестоДеятельности ИЛИ СтатусыУпаковок.МестоДеятельности.Организация = &МестоДеятельности)
	|		И СтатусыУпаковок.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|		И СтатусыУпаковок.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиДолейУпаковок КАК ОстаткиДолейУпаковок
	|	ПО
	|		НомераУпаковок.НомерУпаковки = ОстаткиДолейУпаковок.НомерУпаковки
	|		И НомераУпаковок.КлючУпаковки = ОстаткиДолейУпаковок.КлючУпаковки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиДолейУпаковокВРеестреВыбытия КАК ОстаткиДолейУпаковокВРеестреВыбытия
	|	ПО
	|		НомераУпаковок.НомерУпаковки = ОстаткиДолейУпаковокВРеестреВыбытия.НомерУпаковки
	|		И НомераУпаковок.КлючУпаковки = ОстаткиДолейУпаковокВРеестреВыбытия.КлючУпаковки
	|		
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыУпаковок.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)) В (&ИсходныйСтатус)
	|		И ЕСТЬNULL(СтатусыУпаковок.ДокументРезерва, НЕОПРЕДЕЛЕНО) <> &ДокументРезерва
	
	|	ИЛИ ЕСТЬNULL(СтатусыУпаковок.ДатаСтатуса, ДАТАВРЕМЯ(1,1,1)) > &ДатаОперации
	|	ИЛИ &КонтролироватьВладельца И ЕСТЬNULL(СтатусыУпаковок.Владелец, &Владелец) <> &Владелец
	
	|	ИЛИ &КонтролироватьОстаткиДолей И НЕ &КонтролироватьНаличиеДолиБезКоличества
	|		И НЕ СтатусыУпаковок.НомерУпаковки ЕСТЬ NULL
	|		И ВЫБОР
	|			КОГДА &КонтролироватьОстаткиДолейВРеестреВыбытия
	|				ТОГДА ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1) + ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 1) - 1
	|			ИНАЧЕ ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1)
	|		КОНЕЦ < НомераУпаковок.ДоляУпаковки
	
	|	ИЛИ &КонтролироватьОстаткиДолей И &КонтролироватьНаличиеДолиБезКоличества
	|		И НЕ СтатусыУпаковок.НомерУпаковки ЕСТЬ NULL
	|		И ВЫБОР
	|			КОГДА &КонтролироватьОстаткиДолейВРеестреВыбытия
	|				ТОГДА ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 0) = 0 И ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 0) = 0
	|			ИНАЧЕ ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 0) = 0
	|		КОНЕЦ
	
	|	ИЛИ &ИспользуетсяЗонаТаможенногоКонтроля
	|		И ЕСТЬNULL(СтатусыУпаковок.ЗонаТаможенногоКонтроля, ЗНАЧЕНИЕ(Справочник.ЗоныТаможенногоКонтроляМДЛП.ПустаяСсылка)) <> &ИсходнаяЗонаТаможенногоКонтроля
	|		И ЕСТЬNULL(СтатусыУпаковок.ДокументРезерва, НЕОПРЕДЕЛЕНО) <> &ДокументРезерва
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныйСтатус" , ПараметрыОперации.ИсходныйСтатус);
	Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("ДатаОперации"   , ПараметрыОперации.ДатаОперации);
	Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("КонтролироватьОстаткиДолей", ПараметрыОперации.КонтролироватьОстаткиДолей);
	Запрос.УстановитьПараметр("КонтролироватьНаличиеДолиБезКоличества", ПараметрыОперации.КонтролироватьНаличиеДолиБезКоличества);
	Запрос.УстановитьПараметр("КонтролироватьОстаткиДолейВРеестреВыбытия", ПараметрыОперации.КонтролироватьОстаткиДолейВРеестреВыбытия);
	Запрос.УстановитьПараметр("КонтролироватьВладельца"  , ПараметрыОперации.Владелец <> Неопределено И ПараметрыОперации.ИсходныйСтатус <> Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
	Запрос.УстановитьПараметр("Владелец"                 , ПараметрыОперации.Владелец);
	Запрос.УстановитьПараметр("ИспользуетсяЗонаТаможенногоКонтроля", ПараметрыОперации.ИспользуетсяЗонаТаможенногоКонтроля);
	Запрос.УстановитьПараметр("ИсходнаяЗонаТаможенногоКонтроля"    , ПараметрыОперации.ИсходнаяЗонаТаможенногоКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		МаксимальноеКоличествоСообщений = 10;
		НомерСообщения = 0;
		Пока Выборка.Следующий() Цикл
			
			НомерСообщения = НомерСообщения + 1;
			Если НомерСообщения > МаксимальноеКоличествоСообщений Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru ='Показаны первые %1 из %2 сообщений об ошибках.'"),
					МаксимальноеКоличествоСообщений,
					Выборка.Количество());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва);
				Прервать;
			КонецЕсли;
			
			Если Выборка.ЕстьОшибкаСтатус Тогда
				
				Если Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВРезерве Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 зарезервирована.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 выбыла из оборота %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 выбыла из оборота с ошибкой %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.КПоступлению Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 в стадии поступления.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ПереданаНаУничтожение Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 передана на уничтожение.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетВыпуска Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает выпуска с %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 вложена в групповую упаковку с %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОтгруженВРФ Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 отгружена в РФ.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ввезена на территорию РФ.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Задекларирована Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 задекларирована.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ПереданаДляМаркировкиВЗТК Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 передана для маркировки в ЗТК.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает отгрузки в РФ.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.МаркированаВЗТК Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 маркирована в ЗТК.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает подтверждения импортером.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОборотПриостановлен Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 - оборот приостановлен.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает подтверждения смены собственника.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Реэкспорт Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 - реэкспорт.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Перемаркирована Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 перемаркирована.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Уничтожена Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 уничтожена.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 принята на склад из ЗТК.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВОбороте Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 в обороте.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Упаковка %1 имеет некорректный статус.'");
				КонецЕсли;
				
			ИначеЕсли Выборка.ЕстьОшибкаДатаСтатуса Тогда
				
				Если Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВРезерве Тогда
					Если Выборка.ИсходныйСтатус = Перечисления.СтатусыУпаковокМДЛП.ВОбороте Тогда
						ТекстСообщения = НСтр("ru = 'Упаковка %1 в обороте с %2.'");
					ИначеЕсли Выборка.ИсходныйСтатус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетВыпуска Тогда
						ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает выпуска с %2.'");
					Иначе
						ТекстСообщения = СтрЗаменить(НСтр("ru = 'Упаковка %1 не удалось установить статус %Статус%.'"), "%Статус%", Выборка.Статус);
					КонецЕсли;
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВОбороте Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 в обороте с %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 вложена в групповую упаковку с %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Упаковки %1 нет в наличии.'");
				КонецЕсли;
				
			ИначеЕсли Выборка.ЕстьОшибкаВладелец Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 принадлежит другому владельцу.'");
			ИначеЕсли Выборка.ЕстьОшибкаОтсутствуетДостаточноеКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Остаток упаковки %1 меньше требуемого. Возможно, в информационной базе, упаковка (или ее часть) была выведена из оборота ранее.'");
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаОтсутствует Тогда
				ТекстСообщения = НСтр("ru = 'Упаковки %1 нет в наличии.'");
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаНеРасформирована Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 не расформировывалась.'");
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаОтсутствуетВЗонеТаможенногоКонтроля Тогда
				ТекстСообщения = НСтр("ru = 'Упаковки %1 нет в зоне таможенного контроля.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Упаковки %1 нет в наличии.'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Формат(Выборка.ДатаСтатуса, "ДЛФ=DT"));
			Если Выборка.НомерСтроки = 0 Тогда
				Поле = Выборка.ИмяПоля;
			Иначе
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, Выборка.ИмяПоля);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва, Поле);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		// Механизм для всех документов, если подключена подсистема Инвентаризация.
		МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
		Возврат МодульИнвентаризацияМДЛП.ПроверитьДоступностьУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации, Отказ);
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	Возврат Истина;
	
КонецФункции

Процедура ЗарезервироватьУпаковки(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	// Удалить из доступных
	|ВЫБРАТЬ
	|	Таблица.НомерУпаковки                   КАК НомерУпаковки,
	|	ТекущиеСтатусы.КлючУпаковки             КАК КлючУпаковки,
	|	ТекущиеСтатусы.МестоДеятельности        КАК МестоДеятельности,
	|	ВЫБОР
	|		КОГДА &ИгнорироватьРезерв
	|			ТОГДА ТекущиеСтатусы.ДокументРезерва
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК ДокументРезерва,
	|	ТекущиеСтатусы.ЗонаТаможенногоКонтроля  КАК ЗонаТаможенногоКонтроля
	|ИЗ
	|	НомераУпаковок КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|	ПО
	|		ТекущиеСтатусы.МестоДеятельности = &МестоДеятельности
	|		И ТекущиеСтатусы.НомерУпаковки = Таблица.НомерУпаковки
	|		И ТекущиеСтатусы.КлючУпаковки = Таблица.КлючУпаковки
	|		И (&ИгнорироватьРезерв ИЛИ ТекущиеСтатусы.ДокументРезерва = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	Таблица.ДоляУпаковки = 1
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Поставить в резерв
	|ВЫБРАТЬ
	|	Таблица.НомерУпаковки                          КАК НомерУпаковки,
	|	&МестоДеятельности                             КАК МестоДеятельности,
	|	&ДокументРезерва                               КАК ДокументРезерва,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяЗонаТаможенногоКонтроля
	|			ТОГДА &НоваяЗонаТаможенногоКонтроля
	|		ИНАЧЕ ТекущиеСтатусы.ЗонаТаможенногоКонтроля
	|	КОНЕЦ                                          КАК ЗонаТаможенногоКонтроля,
	|	Таблица.ГрупповаяУпаковка                      КАК ГрупповаяУпаковка,
	|	ТекущиеСтатусы.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки,
	|	&СтатусВРезерве                                КАК Статус,
	|	ВЫБОР
	|		КОГДА ТекущиеСтатусы.ДокументРезерва <> &ДокументРезерва
	|			ТОГДА ТекущиеСтатусы.Статус
	|		ИНАЧЕ ТекущиеСтатусы.ИсходныйСтатус
	|	КОНЕЦ                                          КАК ИсходныйСтатус,
	|	ТекущиеСтатусы.ПредыдущийСтатус                КАК ПредыдущийСтатус,
	|	ТекущиеСтатусы.ДатаСтатуса                     КАК ДатаСтатуса,
	|	ТекущиеСтатусы.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
	|	ВЫБОР
	|		КОГДА ТекущиеСтатусы.Владелец ЕСТЬ NULL
	|			ТОГДА &Владелец
	|		ИНАЧЕ ТекущиеСтатусы.Владелец
	|	КОНЕЦ                                          КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяЗонаТаможенногоКонтроля И ТекущиеСтатусы.ДокументРезерва <> &ДокументРезерва
	|			ТОГДА ТекущиеСтатусы.ЗонаТаможенногоКонтроля
	|		ИНАЧЕ ТекущиеСтатусы.ИсходнаяЗонаТаможенногоКонтроля
	|	КОНЕЦ                                          КАК ИсходнаяЗонаТаможенногоКонтроля,
	|	ВЫБОР
	|		КОГДА &ИгнорироватьРезерв И ТекущиеСтатусы.ДокументРезерва <> &ДокументРезерва
	|			ТОГДА ТекущиеСтатусы.ДокументРезерва
	|		ИНАЧЕ ТекущиеСтатусы.ИсходныйДокументРезерва
	|	КОНЕЦ                                          КАК ИсходныйДокументРезерва
	|ИЗ
	|	НомераУпаковок КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|	ПО
	|		ТекущиеСтатусы.МестоДеятельности = &МестоДеятельности
	|		И ТекущиеСтатусы.НомерУпаковки = Таблица.НомерУпаковки
	|		И ТекущиеСтатусы.КлючУпаковки = Таблица.КлючУпаковки
	|ГДЕ
	|	Таблица.ДоляУпаковки = 1
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Вернуть в доступные
	|ВЫБРАТЬ
	|	ТекущиеСтатусы.НомерУпаковки                    КАК НомерУпаковки,
	|	ТекущиеСтатусы.МестоДеятельности                КАК МестоДеятельности,
	|	ВЫБОР
	|		КОГДА &ИгнорироватьРезерв
	|			ТОГДА ТекущиеСтатусы.ИсходныйДокументРезерва
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                           КАК ДокументРезерва,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяЗонаТаможенногоКонтроля
	|			ТОГДА ТекущиеСтатусы.ИсходнаяЗонаТаможенногоКонтроля
	|		ИНАЧЕ ТекущиеСтатусы.ЗонаТаможенногоКонтроля
	|	КОНЕЦ                                           КАК ЗонаТаможенногоКонтроля,
	|	ТекущиеСтатусы.ГрупповаяУпаковка                КАК ГрупповаяУпаковка,
	|	ТекущиеСтатусы.ВложеныПотребительскиеУпаковки   КАК ВложеныПотребительскиеУпаковки,
	|	ТекущиеСтатусы.ИсходныйСтатус                   КАК Статус,
	|	ТекущиеСтатусы.ПредыдущийСтатус                 КАК ПредыдущийСтатус,
	|	ТекущиеСтатусы.ДатаСтатуса                      КАК ДатаСтатуса,
	|	ТекущиеСтатусы.НомерГрупповойУпаковки           КАК НомерГрупповойУпаковки,
	|	ТекущиеСтатусы.Владелец                         КАК Владелец
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НомераУпаковок КАК Таблица
	|	ПО
	|		ТекущиеСтатусы.НомерУпаковки = Таблица.НомерУпаковки
	|		И ТекущиеСтатусы.КлючУпаковки = Таблица.КлючУпаковки
	|ГДЕ
	|	ТекущиеСтатусы.ДокументРезерва = &ДокументРезерва
	|	И ТекущиеСтатусы.ИсходныйСтатус <> ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|	И ЕСТЬNULL(Таблица.ДоляУпаковки, 0) <> 1
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|");
	
	ЕстьРегистрДолиУпаковок = Метаданные.РегистрыСведений.Найти("ДолиУпаковокМДЛП") <> Неопределено;
	Если ЕстьРегистрДолиУпаковок Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Таблица.НомерУпаковки  КАК НомерУпаковки,
		|	&ДокументРезерва       КАК ДокументРезерва,
		|	Таблица.ДоляУпаковки   КАК ДоляУпаковки,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВРезерве) КАК Статус
		|ИЗ
		|	НомераУпаковок КАК Таблица
		|ГДЕ
		|	Таблица.ДоляУпаковки < 1
		|";
	КонецЕсли;
	
	Если ПараметрыОперации.НоваяЗонаТаможенногоКонтроляДляКаждойУпаковки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НоваяЗонаТаможенногоКонтроля", "Таблица.НоваяЗонаТаможенногоКонтроля");
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СтатусВРезерве"   , ПараметрыОперации.СтатусВРезерве);
	Запрос.УстановитьПараметр("ДокументРезерва"  , ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("Владелец"         , ПараметрыОперации.Владелец);
	Запрос.УстановитьПараметр("ИспользуетсяЗонаТаможенногоКонтроля", ПараметрыОперации.ИспользуетсяЗонаТаможенногоКонтроля);
	Запрос.УстановитьПараметр("ИсходнаяЗонаТаможенногоКонтроля"    , ПараметрыОперации.ИсходнаяЗонаТаможенногоКонтроля);
	Запрос.УстановитьПараметр("НоваяЗонаТаможенногоКонтроля"       , ПараметрыОперации.НоваяЗонаТаможенногоКонтроля);
	Запрос.УстановитьПараметр("ИгнорироватьРезерв", ПараметрыОперации.ИгнорироватьРезерв);
	
	Результат = Запрос.ВыполнитьПакет();
	УдалитьИзДоступных = Результат[0].Выбрать();
	Зарезервировать    = Результат[1].Выгрузить();
	ВернутьВДоступные  = Результат[2].Выгрузить();
	
	Запись = РегистрыСведений.УпаковкиМДЛП.СоздатьМенеджерЗаписи();
	Пока УдалитьИзДоступных.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Запись, УдалитьИзДоступных);
		Запись.Удалить();
	КонецЦикла;
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Загрузить(Зарезервировать);
	Набор.Записать();
	
	Если ВернутьВДоступные.Количество() > 0 Тогда
		Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
		Набор.Загрузить(ВернутьВДоступные);
		Набор.Записать(Ложь);
	КонецЕсли;
	
	Если ЕстьРегистрДолиУпаковок Тогда
		ЗарезервироватьДолиУпаковок = Результат[3].Выгрузить();
		Набор = РегистрыСведений["ДолиУпаковокМДЛП"].СоздатьНаборЗаписей();
		Набор.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
		Набор.Загрузить(ЗарезервироватьДолиУпаковок);
		Набор.Записать();
	КонецЕсли;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрыОперации.ДокументРезерва))
			И ПараметрыОперации.ДокументРезерва.Метаданные().Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
			МодульИнвентаризацияМДЛП.ЗарезервироватьУпаковки(МенеджерВременныхТаблиц, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
КонецПроцедуры

Процедура ОтменитьРезерв(ДокументРезерва) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	""""  КАК НомерУпаковки,
	|	""""  КАК КлючУпаковки,
	|	1     КАК ДоляУпаковки
	|ПОМЕСТИТЬ ОстаткиДолейУпаковок
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""""  КАК НомерУпаковки,
	|	""""  КАК КлючУпаковки,
	|	1     КАК ДоляУпаковки,
	|	ЛОЖЬ  КАК ГрупповаяУпаковка
	|ПОМЕСТИТЬ НомераУпаковок
	|ГДЕ
	|	ЛОЖЬ
	|");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ПараметрыОперации = ПараметрыОперацииИзмененияСтатусаУпаковок();
	ПараметрыОперации.ДокументРезерва = ДокументРезерва;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументРезерва))
			И ДокументРезерва.Метаданные().Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			ПараметрыОперации.ДокументИнвентаризации = ПредопределенноеЗначение("Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	ЗарезервироватьУпаковки(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
	
КонецПроцедуры

Процедура УстановитьНовыйСтатус(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	// Установить новый статус
	// Упаковки, которые попали в НомераУпаковок и были зарезервированы документом получают НовыйСтатус
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                   КАК НомерУпаковки,
	|	&НовоеМестоДеятельности                        КАК МестоДеятельности,
	|	НЕОПРЕДЕЛЕНО                                   КАК ДокументРезерва,
	|	ВЫБОР
	|		КОГДА &ЭтоПеремещениеМеждуЗТК
	|			ТОГДА &НоваяЗонаТаможенногоКонтроля
	|		ИНАЧЕ ТекущиеСтатусы.ЗонаТаможенногоКонтроля
	|	КОНЕЦ                                          КАК ЗонаТаможенногоКонтроля,
	|	НомераУпаковок.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
	|	ТекущиеСтатусы.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки,
	|	ВЫБОР
	|		КОГДА &ЭтоПеремещение
	|			ТОГДА ТекущиеСтатусы.ИсходныйСтатус
	|		КОГДА &ЭтоПовторныйВводВОборот И ТекущиеСтатусы.ПредыдущийСтатус <> ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|			ТОГДА ТекущиеСтатусы.ПредыдущийСтатус
	|		ИНАЧЕ &НовыйСтатус
	|	КОНЕЦ                                          КАК Статус,
	|	ВЫБОР
	|		КОГДА &ЭтоПеремещение
	|			ТОГДА ТекущиеСтатусы.ПредыдущийСтатус
	|		КОГДА &ЭтоПовторныйВводВОборот
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|		ИНАЧЕ ТекущиеСтатусы.ИсходныйСтатус
	|	КОНЕЦ                                          КАК ПредыдущийСтатус,
	|	&ДатаОперации                                  КАК ДатаСтатуса,
	|	ТекущиеСтатусы.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
	|	ТекущиеСтатусы.Владелец                        КАК Владелец
	|	
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|	ПО
	|		ТекущиеСтатусы.МестоДеятельности = &МестоДеятельности
	|		И ТекущиеСтатусы.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|		И ТекущиеСтатусы.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|		И ТекущиеСтатусы.ДокументРезерва = &ДокументРезерва
	|ГДЕ
	|	НомераУпаковок.ДоляУпаковки = 1
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Вернуть в доступные
	// Упаковки, которые были зарезервированы документом, но не попали в НомераУпаковок возвращаются в ИсходныйСтатус
	|ВЫБРАТЬ
	|	ТекущиеСтатусы.НомерУпаковки                    КАК НомерУпаковки,
	|	ТекущиеСтатусы.МестоДеятельности                КАК МестоДеятельности,
	|	ТекущиеСтатусы.ИсходныйДокументРезерва          КАК ДокументРезерва,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяЗонаТаможенногоКонтроля
	|			ТОГДА ТекущиеСтатусы.ИсходнаяЗонаТаможенногоКонтроля
	|		ИНАЧЕ ТекущиеСтатусы.ЗонаТаможенногоКонтроля
	|	КОНЕЦ                                           КАК ЗонаТаможенногоКонтроля,
	|	ТекущиеСтатусы.ГрупповаяУпаковка                КАК ГрупповаяУпаковка,
	|	ТекущиеСтатусы.ВложеныПотребительскиеУпаковки   КАК ВложеныПотребительскиеУпаковки,
	|	ТекущиеСтатусы.ИсходныйСтатус                   КАК Статус,
	|	ТекущиеСтатусы.ПредыдущийСтатус                 КАК ПредыдущийСтатус,
	|	ТекущиеСтатусы.ДатаСтатуса                      КАК ДатаСтатуса,
	|	ТекущиеСтатусы.НомерГрупповойУпаковки           КАК НомерГрупповойУпаковки,
	|	ТекущиеСтатусы.Владелец                         КАК Владелец
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		ТекущиеСтатусы.МестоДеятельности = &МестоДеятельности
	|		И ТекущиеСтатусы.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|		И ТекущиеСтатусы.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|ГДЕ
	|	ТекущиеСтатусы.ДокументРезерва = &ДокументРезерва
	|	И ТекущиеСтатусы.ИсходныйСтатус <> ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|	И НомераУпаковок.НомерУпаковки ЕСТЬ NULL
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|");
	
	ЕстьРегистрДолиУпаковок = Метаданные.РегистрыСведений.Найти("ДолиУпаковокМДЛП") <> Неопределено;
	Если ЕстьРегистрДолиУпаковок Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Таблица.НомерУпаковки  КАК НомерУпаковки,
		|	&ДокументРезерва       КАК ДокументРезерва,
		|	Таблица.ДоляУпаковки   КАК ДоляУпаковки,
		|	&НовыйСтатус           КАК Статус
		|ИЗ
		|	НомераУпаковок КАК Таблица
		|ГДЕ
		|	Таблица.ДоляУпаковки < 1
		|";
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаОперации", ПараметрыОперации.ДатаОперации);
	Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("НовоеМестоДеятельности", ?(ПараметрыОперации.ЭтоПеремещение Или ПараметрыОперации.ЭтоПриемкаНаСкладИзЗТК,
		ПараметрыОперации.МестоДеятельностиПолучатель,
		ПараметрыОперации.МестоДеятельности));
	Запрос.УстановитьПараметр("ЭтоПеремещение", ПараметрыОперации.ЭтоПеремещение);
	Запрос.УстановитьПараметр("ЭтоПовторныйВводВОборот", ПараметрыОперации.ЭтоПовторныйВводВОборот);
	Запрос.УстановитьПараметр("НовыйСтатус", ПараметрыОперации.НовыйСтатус);
	Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("ЭтоПеремещениеМеждуЗТК", ПараметрыОперации.ЭтоПеремещениеМеждуЗТК);
	Запрос.УстановитьПараметр("ИспользуетсяЗонаТаможенногоКонтроля", ПараметрыОперации.ИспользуетсяЗонаТаможенногоКонтроля Или ПараметрыОперации.ЭтоПеремещениеМеждуЗТК);
	Запрос.УстановитьПараметр("НоваяЗонаТаможенногоКонтроля", ПараметрыОперации.НоваяЗонаТаможенногоКонтроля);
	
	Результат = Запрос.ВыполнитьПакет();
	УстановитьНовыйСтатус = Результат[0].Выбрать();
	СнятьСРезерва         = Результат[1].Выбрать();
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Пока УстановитьНовыйСтатус.Следующий() Цикл
		
		Если УстановитьНовыйСтатус.Статус = Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка() Тогда
			Если УстановитьНовыйСтатус.ГрупповаяУпаковка Тогда
				// Удаление всех упаковок (потребительских и групповых), которые вложены в текущую групповую упаковку.
				// Удаление текущей упаковки (потребительской или групповой) выполняется в следующих наборах.
				УдалитьУпаковки = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
				УдалитьУпаковки.Отбор.ДокументРезерва.Установить(УстановитьНовыйСтатус.НомерУпаковки);
				УдалитьУпаковки.Отбор.МестоДеятельности.Установить(ПараметрыОперации.МестоДеятельности);
				УдалитьУпаковки.Записать();
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), УстановитьНовыйСтатус);
			Если УстановитьНовыйСтатус.ГрупповаяУпаковка И (ПараметрыОперации.ЭтоПеремещение  Или ПараметрыОперации.ЭтоПриемкаНаСкладИзЗТК) Тогда
				// Перемещение на норвое МД всех упаковок (потребительских и групповых), которые вложены в текущую групповую упаковку.
				// Перемещение текущей упаковки (потребительской или групповой) выполняется в следующих наборах.
				УстановитьНовыйСтатусУпаковок = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
				УстановитьНовыйСтатусУпаковок.Отбор.ДокументРезерва.Установить(УстановитьНовыйСтатус.НомерУпаковки);
				УстановитьНовыйСтатусУпаковок.Отбор.МестоДеятельности.Установить(ПараметрыОперации.МестоДеятельности);
				УстановитьНовыйСтатусУпаковок.Прочитать();
				Если УстановитьНовыйСтатусУпаковок.Количество() > 0 Тогда
					Таблица = УстановитьНовыйСтатусУпаковок.Выгрузить();
					
					УстановитьНовыйСтатусУпаковок.Очистить();
					УстановитьНовыйСтатусУпаковок.Записать();
					
					Таблица.ЗаполнитьЗначения(УстановитьНовыйСтатус.МестоДеятельности, "МестоДеятельности");
					УстановитьНовыйСтатусУпаковок.Отбор.МестоДеятельности.Установить(УстановитьНовыйСтатус.МестоДеятельности);
					УстановитьНовыйСтатусУпаковок.Загрузить(Таблица);
					УстановитьНовыйСтатусУпаковок.Записать();
				КонецЕсли;
			ИначеЕсли УстановитьНовыйСтатус.ГрупповаяУпаковка И (ПараметрыОперации.ИспользуетсяЗонаТаможенногоКонтроля Или ПараметрыОперации.ЭтоПеремещениеМеждуЗТК) Тогда
				// Перемещение на норвую ЗТК всех упаковок (потребительских и групповых), которые вложены в текущую групповую упаковку.
				// Перемещение текущей упаковки (потребительской или групповой) выполняется в следующих наборах.
				// Место деятельности тут выступает Организация.
				УстановитьНовыйСтатусУпаковок = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
				УстановитьНовыйСтатусУпаковок.Отбор.ДокументРезерва.Установить(УстановитьНовыйСтатус.НомерУпаковки);
				УстановитьНовыйСтатусУпаковок.Отбор.МестоДеятельности.Установить(ПараметрыОперации.МестоДеятельности);
				УстановитьНовыйСтатусУпаковок.Прочитать();
				Если УстановитьНовыйСтатусУпаковок.Количество() > 0 Тогда
					Таблица = УстановитьНовыйСтатусУпаковок.Выгрузить();
					
					Таблица.ЗаполнитьЗначения(УстановитьНовыйСтатус.ЗонаТаможенногоКонтроля, "ЗонаТаможенногоКонтроля");
					УстановитьНовыйСтатусУпаковок.Загрузить(Таблица);
					УстановитьНовыйСтатусУпаковок.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока СнятьСРезерва.Следующий() Цикл
		// Упаковки, которые были зарезервированы документом, но не попали в НомераУпаковок возвращаются в ИсходныйСтатус
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), СнятьСРезерва);
	КонецЦикла;
	
	// Запись упаковок с новыми свойствами или свойствами до резервирования.
	Набор.Записать(Ложь);
	
	// Удаление всех номеров упаковок, которые были ранее зарезервированы указанным документом.
	// Запись номеров упаковок с новыми свойствами или со свойствами до резервирования выполняется предыдущим набором.
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Записать();
	
	Если ЕстьРегистрДолиУпаковок Тогда
		УстановитьНовыйСтатусДолейУпаковок = Результат[2].Выгрузить();
		Набор = РегистрыСведений["ДолиУпаковокМДЛП"].СоздатьНаборЗаписей();
		Набор.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
		Набор.Загрузить(УстановитьНовыйСтатусДолейУпаковок);
		Набор.Записать();
	КонецЕсли;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрыОперации.ДокументРезерва))
			И ПараметрыОперации.ДокументРезерва.Метаданные().Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
			МодульИнвентаризацияМДЛП.УстановитьНовыйСтатус(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
КонецПроцедуры

Процедура ОтменитьОперацию(ПараметрыОперации) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТекущиеСтатусы.НомерУпаковки                    КАК НомерУпаковки,
	|	&МестоДеятельности                              КАК МестоДеятельности,
	|	НЕОПРЕДЕЛЕНО                                    КАК ДокументРезерва,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяЗонаТаможенногоКонтроля
	|			ТОГДА ТекущиеСтатусы.ИсходнаяЗонаТаможенногоКонтроля
	|		ИНАЧЕ ТекущиеСтатусы.ЗонаТаможенногоКонтроля
	|	КОНЕЦ                                           КАК ЗонаТаможенногоКонтроля,
	|	ТекущиеСтатусы.ГрупповаяУпаковка                КАК ГрупповаяУпаковка,
	|	ТекущиеСтатусы.ВложеныПотребительскиеУпаковки   КАК ВложеныПотребительскиеУпаковки,
	|	ВЫБОР
	|		КОГДА &ЭтоПеремещение
	|			ТОГДА ТекущиеСтатусы.ИсходныйСтатус
	|		КОГДА &ИсходныйСтатус <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &ИсходныйСтатус
	|		КОГДА ТекущиеСтатусы.ПредыдущийСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВОбороте)
	|		ИНАЧЕ ТекущиеСтатусы.ПредыдущийСтатус
	|	КОНЕЦ                                           КАК Статус,
	|	ВЫБОР
	|		КОГДА &ЭтоПеремещение
	|			ТОГДА ТекущиеСтатусы.ПредыдущийСтатус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|	КОНЕЦ                                           КАК ПредыдущийСтатус,
	|	ДАТАВРЕМЯ(1, 1, 1)                              КАК ДатаСтатуса,
	|	ТекущиеСтатусы.НомерГрупповойУпаковки           КАК НомерГрупповойУпаковки,
	|	ТекущиеСтатусы.Владелец                         КАК Владелец
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|ГДЕ
	|	ТекущиеСтатусы.ДокументРезерва = &ДокументРезерва
	|");
	
	Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
	Если ТипЗнч(ПараметрыОперации.ИсходныйСтатус) = Тип("ПеречислениеСсылка.СтатусыУпаковокМДЛП") Тогда
		Запрос.УстановитьПараметр("ИсходныйСтатус", ПараметрыОперации.ИсходныйСтатус);
	Иначе
		Запрос.УстановитьПараметр("ИсходныйСтатус", Неопределено);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоПеремещение", ПараметрыОперации.ЭтоПеремещение);
	Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("ИспользуетсяЗонаТаможенногоКонтроля", ПараметрыОперации.ИспользуетсяЗонаТаможенногоКонтроля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		Если ПараметрыОперации.ЭтоПеремещение И Выборка.ГрупповаяУпаковка Тогда
			УстановитьНовыйСтатусУпаковок = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
			УстановитьНовыйСтатусУпаковок.Отбор.ДокументРезерва.Установить(Выборка.НомерУпаковки);
			УстановитьНовыйСтатусУпаковок.Отбор.МестоДеятельности.Установить(ПараметрыОперации.МестоДеятельностиПолучатель);
			УстановитьНовыйСтатусУпаковок.Прочитать();
			Если УстановитьНовыйСтатусУпаковок.Количество() > 0 Тогда
				Таблица = УстановитьНовыйСтатусУпаковок.Выгрузить();
				
				УстановитьНовыйСтатусУпаковок.Очистить();
				УстановитьНовыйСтатусУпаковок.Записать();
				
				Таблица.ЗаполнитьЗначения(Выборка.МестоДеятельности, "МестоДеятельности");
				УстановитьНовыйСтатусУпаковок.Отбор.МестоДеятельности.Установить(Выборка.МестоДеятельности);
				УстановитьНовыйСтатусУпаковок.Загрузить(Таблица);
				УстановитьНовыйСтатусУпаковок.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Набор.Записать(Ложь);
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Записать();
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрыОперации.ДокументРезерва))
			И ПараметрыОперации.ДокументРезерва.Метаданные().Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
			МодульИнвентаризацияМДЛП.ОтменитьОперацию(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Модифицированность() Тогда
		ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВложенныеУпаковки(НомерУпаковки, МестоДеятельности, ВсеУровни = Истина) Экспорт
	
	ВложенныеУпаковки = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Упаковки.НомерУпаковки      КАК НомерУпаковки,
	|	Упаковки.ГрупповаяУпаковка  КАК ГрупповаяУпаковка
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Упаковки
	|ГДЕ
	|	Упаковки.МестоДеятельности = &МестоДеятельности
	|	И Упаковки.НомерГрупповойУпаковки = &НомерУпаковки
	|");
	
	ГрупповыеУпаковки = Новый Массив;
	ГрупповыеУпаковкиКОбработке = Новый Массив;
	ГрупповыеУпаковкиКОбработке.Добавить(НомерУпаковки);
	
	Запрос.УстановитьПараметр("МестоДеятельности", МестоДеятельности);
	
	Пока ГрупповыеУпаковкиКОбработке.Количество() > 0 Цикл
		
		ГрупповаяУпаковка = ГрупповыеУпаковкиКОбработке[0];
		ГрупповыеУпаковкиКОбработке.Удалить(0);
		ГрупповыеУпаковки.Добавить(ГрупповаяУпаковка);
		
		Запрос.УстановитьПараметр("НомерУпаковки", ГрупповаяУпаковка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВложенныеУпаковки.Добавить(Выборка.НомерУпаковки);
			Если Выборка.ГрупповаяУпаковка И ВсеУровни Тогда
				Если ГрупповыеУпаковки.Найти(Выборка.НомерУпаковки) <> Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Зацикливание вложенности групповых упаковок.'");
				КонецЕсли;
				ГрупповыеУпаковкиКОбработке.Добавить(Выборка.НомерУпаковки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВложенныеУпаковки;
	
КонецФункции

Функция ИсключаемыеСостояния() Экспорт
	
	Состояние = Новый Массив;
	Состояние.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	Состояние.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Состояние.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	Состояние.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Состояние.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отменено);
	Состояние.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется);
	
	Возврат Состояние;
	
КонецФункции

Процедура ОчиститьНеиспользуемыеРеквизиты(Объект, Знач ВсеРеквизиты, Знач РеквизитыОперации) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	СпискиОбъекта = Новый Структура;
	
	НеиспользуемыеРеквизиты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеРеквизиты, РеквизитыОперации);
	Для Каждого Реквизит Из НеиспользуемыеРеквизиты Цикл
		
		Позиция = СтрНайти(Реквизит, ".");
		Если Позиция <> 0 Тогда
			ИмяСписка = Лев(Реквизит, Позиция - 1);
			ПоляСписка = Неопределено;
			Если Не СпискиОбъекта.Свойство(ИмяСписка, ПоляСписка) Тогда
				СпискиОбъекта.Вставить(ИмяСписка, Новый Массив);
				ПоляСписка = СпискиОбъекта[ИмяСписка];
			КонецЕсли;
			ПоляСписка.Добавить(Сред(Реквизит, Позиция + 1));
			
		ИначеЕсли МетаданныеОбъекта.ТабличныеЧасти.Найти(Реквизит) <> Неопределено Тогда
			Если Объект[Реквизит].Количество() > 0 Тогда
				Объект[Реквизит].Очистить();
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
				Объект[Реквизит] = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СпискиОбъекта.Количество() > 0 Тогда
		
		Для Каждого Список Из СпискиОбъекта Цикл
			Для Каждого СтрокаСписка Из Объект[Список.Ключ] Цикл
				
				Для Каждого Поле Из Список.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаСписка[Поле]) Тогда
						СтрокаСписка[Поле] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


#Область РеестрВыбытияУпаковокМДЛП

Процедура ПровестиДокументПоРееструВыбытияУпаковок(Ссылка, ПараметрыОперации = Неопределено, Отказ = Ложь, СостояниеПодтверждения = Неопределено) Экспорт
	
	МетаданныеДокумента = Ссылка.Метаданные();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                  КАК Ссылка,
	|	Документ.Дата                    КАК Дата,
	|	Документ.Организация             КАК Организация,
	|	Документ.МестоДеятельности       КАК МестоДеятельности,
	|	Документ.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|ИЗ
	|	#Документ КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Документ", МетаданныеДокумента.ПолноеИмя());
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = МетаданныеДокумента.Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ДокументИнвентаризации");
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для проведения'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если СостояниеПодтверждения = Неопределено Тогда
		СостояниеПодтверждения = Выборка.СостояниеПодтверждения;
	КонецЕсли;
	
	ОбрабатываемыеСостояния = Новый Массив;
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоЧастично);
	
	Если ОбрабатываемыеСостояния.Найти(СостояниеПодтверждения) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаНомераУпаковок.НомерСтроки           КАК НомерСтроки,
	|	ТаблицаНомераУпаковок.НомерКиЗ              КАК НомерУпаковки,
	|	&ДоляУпаковки                               КАК ДоляУпаковки,
	|	ЛОЖЬ                                        КАК ГрупповаяУпаковка,
	|	""НомераУпаковок""                          КАК ИмяТабличнойЧасти,
	|	""НомерКиЗ""                                КАК ИмяПоля,
	|	ВЫБОР
	|		КОГДА &Отклонено ИЛИ ТаблицаНомераУпаковок.Отклонено
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОтклоненВыводИзОборота)
	|		КОГДА &КПередаче ИЛИ &Передано
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОжидаетВыводаИзОборота)
	|		КОГДА &Принято
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ПринятВыводИзОборота)
	|		КОГДА &ПринятоЧастично И НЕ ТаблицаНомераУпаковок.Отклонено
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ПринятВыводИзОборота)
	|	КОНЕЦ                                       КАК СтатусВыбытия
	|ПОМЕСТИТЬ НомераУпаковокДокумента
	|ИЗ
	|	#ДокументНомераУпаковок КАК ТаблицаНомераУпаковок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		#ДокументТовары КАК Товары
	|	ПО
	|		Товары.Ссылка = ТаблицаНомераУпаковок.Ссылка
	|		//УСЛОВИЕ_СОЕДИНЕНИЯ
	|ГДЕ
	|	ТаблицаНомераУпаковок.Ссылка = &Ссылка
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументНомераУпаковок", МетаданныеДокумента.ПолноеИмя() + "." + МетаданныеДокумента.ТабличныеЧасти.НомераУпаковок.Имя);
	ТекстДоляУпаковки = "1";
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоляОтВторичнойУпаковки", МетаданныеДокумента.ТабличныеЧасти.НомераУпаковок) Тогда
		ТекстДоляУпаковки = "
		|ВЫБОР
		|	КОГДА ТаблицаНомераУпаковок.ДоляОтВторичнойУпаковки > 0
		|		ТОГДА ТаблицаНомераУпаковок.ДоляОтВторичнойУпаковки
		|	КОГДА ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок > 0
		|		ТОГДА ВЫРАЗИТЬ(ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок / Товары.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(10, 5))
		|	ИНАЧЕ 1
		|КОНЕЦ
		|";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("КоличествоПервичныхУпаковок", МетаданныеДокумента.ТабличныеЧасти.НомераУпаковок) Тогда
		ТекстДоляУпаковки = "
		|ВЫБОР
		|	КОГДА ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок > 0
		|		ТОГДА ВЫРАЗИТЬ(ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок / Товары.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(10, 5))
		|	ИНАЧЕ 1
		|КОНЕЦ
		|";
	КонецЕсли;
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументТовары", МетаданныеДокумента.ПолноеИмя() + "." + МетаданныеДокумента.ТабличныеЧасти.Товары.Имя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УСЛОВИЕ_СОЕДИНЕНИЯ", "И Товары.ИдентификаторСтроки = ТаблицаНомераУпаковок.ИдентификаторСтроки");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументТовары", МетаданныеДокумента.ПолноеИмя());
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДоляУпаковки", ТекстДоляУпаковки);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КПередаче", СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	Запрос.УстановитьПараметр("Передано", СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	Запрос.УстановитьПараметр("Принято", СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ
		Или СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоСОтклонениемОтТребований);
	Запрос.УстановитьПараметр("Отклонено", СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Запрос.УстановитьПараметр("ПринятоЧастично", СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоЧастично);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ДобавитьКлючиУпаковок(Запрос.МенеджерВременныхТаблиц, "НомераУпаковокДокумента");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераУпаковокДокумента.НомерСтроки)  КАК НомерСтроки,
	|	НомераУпаковокДокумента.НомерУпаковки         КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки          КАК КлючУпаковки,
	|	СУММА(НомераУпаковокДокумента.ДоляУпаковки)   КАК ДоляУпаковки,
	|	НомераУпаковокДокумента.ГрупповаяУпаковка     КАК ГрупповаяУпаковка,
	|	НомераУпаковокДокумента.ИмяТабличнойЧасти     КАК ИмяТабличнойЧасти,
	|	НомераУпаковокДокумента.ИмяПоля               КАК ИмяПоля,
	|	НомераУпаковокДокумента.СтатусВыбытия         КАК СтатусВыбытия
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|СГРУППИРОВАТЬ ПО
	|	НомераУпаковокДокумента.НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки,
	|	НомераУпаковокДокумента.ГрупповаяУпаковка,
	|	НомераУпаковокДокумента.ИмяТабличнойЧасти,
	|	НомераУпаковокДокумента.ИмяПоля,
	|	НомераУпаковокДокумента.СтатусВыбытия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераУпаковокДокумента
	|";
	Запрос.Выполнить();
	
	Если ПараметрыОперации = Неопределено Тогда
		ПараметрыОперации = ПараметрыОперацииИзмененияСтатусаУпаковок();
	КонецЕсли;
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "Организация");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПараметрыОперации.Вставить("Организация", Выборка.Организация);
	КонецЕсли;
	
	ПараметрыОперации.ДатаОперации      = Выборка.Дата;
	ПараметрыОперации.ДокументРезерва   = Выборка.Ссылка;
	Если Не ЗначениеЗаполнено(ПараметрыОперации.МестоДеятельности) Тогда
		ПараметрыОперации.МестоДеятельности = Выборка.МестоДеятельности;
	КонецЕсли;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			ПараметрыОперации.ДокументИнвентаризации = Выборка.ДокументИнвентаризации;
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	ПроверкаПройдена = Истина;
	Если СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче Тогда
		ПроверкаПройдена = ПроверитьДоступностьУпаковокРеестраВыбытия(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации, Отказ);
	КонецЕсли;
	
	Если ПроверкаПройдена Тогда
		ЗаписатьВРеестрВыбытия(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДоступностьУпаковокРеестраВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации, Отказ) Экспорт
	
	ПолучитьДанныеПоРасходуДолейУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации);
	
	ПолучитьДанныеПоРасходуДолейУпаковокВРеестреВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерСтроки                      КАК НомерСтроки,
	|	НомераУпаковок.НомерУпаковки                    КАК НомерУпаковки,
	|	НомераУпаковок.ИмяТабличнойЧасти                КАК ИмяТабличнойЧасти,
	|	НомераУпаковок.ИмяПоля                          КАК ИмяПоля,
	
	|	СтатусыУпаковок.Статус                          КАК Статус,
	|	СтатусыУпаковок.ДатаСтатуса                     КАК ДатаСтатуса,
	|	СтатусыУпаковок.ИсходныйСтатус                  КАК ИсходныйСтатус,
	
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СтатусыУпаковок.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)) В (&СтатусыПозволяющиеВыбытие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК ЕстьОшибкаСтатус,
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатусыУпаковок.ДатаСтатуса, ДАТАВРЕМЯ(1,1,1)) > &ДатаОперации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК ЕстьОшибкаДатаСтатуса,
	
	// Аналог: 1 - ((1 - ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1)) + (1 - ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 1)))
	|	ВЫБОР
	|		КОГДА &КонтролироватьОстаткиДолей И ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1) + ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 1) - 1 < НомераУпаковок.ДоляУпаковки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкаОтсутствуетДостаточноеКоличество
	
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК СтатусыУпаковок
	|		ПО
	|			СтатусыУпаковок.МестоДеятельности.Организация = &Организация
	|			И СтатусыУпаковок.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И СтатусыУпаковок.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОстаткиДолейУпаковокВРеестреВыбытия КАК ОстаткиДолейУпаковокВРеестреВыбытия
	|		ПО
	|			ОстаткиДолейУпаковокВРеестреВыбытия.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ОстаткиДолейУпаковокВРеестреВыбытия.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОстаткиДолейУпаковок КАК ОстаткиДолейУпаковок
	|		ПО
	|			ОстаткиДолейУпаковок.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И ОстаткиДолейУпаковок.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|ГДЕ
	|	НЕ ЕСТЬNULL(СтатусыУпаковок.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)) В (&СтатусыПозволяющиеВыбытие)
	|	ИЛИ ЕСТЬNULL(СтатусыУпаковок.ДатаСтатуса, ДАТАВРЕМЯ(1,1,1)) > &ДатаОперации
	|	ИЛИ &КонтролироватьОстаткиДолей И ЕСТЬNULL(ОстаткиДолейУпаковок.ДоляУпаковки, 1) + ЕСТЬNULL(ОстаткиДолейУпаковокВРеестреВыбытия.ДоляУпаковки, 1) - 1 < НомераУпаковок.ДоляУпаковки
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", ПараметрыОперации.Организация);
	Запрос.УстановитьПараметр("ДатаОперации", ПараметрыОперации.ДатаОперации);
	Запрос.УстановитьПараметр("СтатусыПозволяющиеВыбытие", СтатусыПозволяющиеВыбытие());
	Запрос.УстановитьПараметр("КонтролироватьОстаткиДолей", ПараметрыОперации.КонтролироватьОстаткиДолей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		МаксимальноеКоличествоСообщений = 10;
		НомерСообщения = 0;
		Пока Выборка.Следующий() Цикл
			
			НомерСообщения = НомерСообщения + 1;
			Если НомерСообщения > МаксимальноеКоличествоСообщений Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru ='Показаны первые %1 из %2 сообщений об ошибках.'"),
					МаксимальноеКоличествоСообщений,
					Выборка.Количество());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва);
				Прервать;
			КонецЕсли;
			
			Если Выборка.ЕстьОшибкаСтатус Тогда
				
				Если Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВРезерве Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 зарезервирована.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 выбыла из оборота %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 выбыла из оборота с ошибкой %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.КПоступлению Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 в стадии поступления.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ПереданаНаУничтожение Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 передана на уничтожение.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетВыпуска Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает выпуска с %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 вложена в групповую упаковку с %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОтгруженВРФ Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 отгружена в РФ.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ввезена на территорию РФ.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Задекларирована Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 задекларирована.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ПереданаДляМаркировкиВЗТК Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 передана для маркировки в ЗТК.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает отгрузки в РФ.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.МаркированаВЗТК Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 маркирована в ЗТК.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает подтверждения импортером.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОборотПриостановлен Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 - оборот приостановлен.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает подтверждения смены собственника.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Реэкспорт Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 - реэкспорт.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Перемаркирована Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 перемаркирована.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.Уничтожена Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 уничтожена.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 принята на склад из ЗТК.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВОбороте Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 в обороте.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Упаковка %1 имеет некорректный статус.'");
				КонецЕсли;
				
			ИначеЕсли Выборка.ЕстьОшибкаДатаСтатуса Тогда
				
				Если Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВРезерве Тогда
					Если Выборка.ИсходныйСтатус = Перечисления.СтатусыУпаковокМДЛП.ВОбороте Тогда
						ТекстСообщения = НСтр("ru = 'Упаковка %1 в обороте с %2.'");
					ИначеЕсли Выборка.ИсходныйСтатус = Перечисления.СтатусыУпаковокМДЛП.ОжидаетВыпуска Тогда
						ТекстСообщения = НСтр("ru = 'Упаковка %1 ожидает выпуска с %2.'");
					Иначе
						ТекстСообщения = СтрЗаменить(НСтр("ru = 'Упаковка %1 не удалось установить статус %Статус%.'"), "%Статус%", Выборка.Статус);
					КонецЕсли;
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВОбороте Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 в обороте с %2.'");
				ИначеЕсли Выборка.Статус = Перечисления.СтатусыУпаковокМДЛП.ВУпаковке Тогда
					ТекстСообщения = НСтр("ru = 'Упаковка %1 вложена в групповую упаковку с %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Упаковки %1 нет в наличии.'");
				КонецЕсли;
				
			ИначеЕсли Выборка.ЕстьОшибкаОтсутствуетДостаточноеКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Остаток упаковки %1 меньше требуемого. Возможно, в информационной базе, упаковка (или ее часть) была выведена из оборота ранее.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Упаковки %1 нет в наличии.'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Формат(Выборка.ДатаСтатуса, "ДЛФ=DT"));
			Если Выборка.НомерСтроки = 0 Тогда
				Поле = Выборка.ИмяПоля;
			Иначе
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, Выборка.ИмяПоля);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва, Поле);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыОперации.ДокументРезерва, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
		Возврат МодульИнвентаризацияМДЛП.ПроверитьДоступностьУпаковок(МенеджерВременныхТаблиц, ПараметрыОперации, Отказ);
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьДанныеПоРасходуДолейУпаковокВРеестреВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки   КАК КлючУпаковки,
	|	ВЫБОР
	|		КОГДА СУММА(Доли.ДоляУпаковки) >= 1
	|			ТОГДА 0
	// При округдении сумма всех долей может быть больше единицы, поэтому сделаем небольшой задел: 0.0001
	|		ИНАЧЕ 1.0001 - СУММА(Доли.ДоляУпаковки)
	|	КОНЕЦ КАК ДоляУпаковки
	|ПОМЕСТИТЬ ОстаткиДолейУпаковокВРеестреВыбытия
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.РеестрВыбытияУпаковокМДЛП КАК Доли
	|		ПО
	|			Доли.НомерУпаковки = НомераУпаковок.НомерУпаковки
	|			И Доли.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И Доли.ДокументРезерва <> &ДокументРезерва
	|ГДЕ
	|	Доли.СтатусВыбытия <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОтклоненВыводИзОборота)
	|СГРУППИРОВАТЬ ПО
	|	НомераУпаковок.НомерУпаковки,
	|	НомераУпаковок.КлючУпаковки
	|";
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ОстаткиДолейУпаковокВРеестреВыбытия") <> Неопределено Тогда
		ТекстЗапроса = "
		|УНИЧТОЖИТЬ ОстаткиДолейУпаковокВРеестреВыбытия
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|" + ТекстЗапроса;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаписатьВРеестрВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                   КАК НомерУпаковки,
	|	&МестоДеятельности                             КАК МестоДеятельности,
	|	&ДокументРезерва                               КАК ДокументРезерва,
	|	НомераУпаковок.ДоляУпаковки                    КАК ДоляУпаковки,
	|	НомераУпаковок.СтатусВыбытия                   КАК СтатусВыбытия,
	|	&ДатаОперации                                  КАК ДатаСтатуса
	|ИЗ
	|	НомераУпаковок КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.СтатусВыбытия <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ОтклоненВыводИзОборота)
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
	Запрос.УстановитьПараметр("ДокументРезерва"  , ПараметрыОперации.ДокументРезерва);
	Запрос.УстановитьПараметр("ДатаОперации"     , ПараметрыОперации.ДатаОперации);
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Набор = РегистрыСведений.РеестрВыбытияУпаковокМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
	Набор.Загрузить(Данные);
	Набор.Записать();
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
		РеквизитСуществуетДокументИнвентаризации = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрыОперации.ДокументРезерва))
			И ПараметрыОперации.ДокументРезерва.Метаданные().Реквизиты.Найти("ДокументИнвентаризации") <> Неопределено;
		Если РеквизитСуществуетДокументИнвентаризации Тогда
			// Механизм для документов, созданных на основании инвентаризации.
			МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
			МодульИнвентаризацияМДЛП.УстановитьСтатусПриЗаписиВРеестрВыбытия(МенеджерВременныхТаблиц, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
КонецПроцедуры

Процедура ОтменитьПроведениеПоРееструВыбытияУпаковок(ДокументРезерва) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	""""                                                            КАК НомерУпаковки,
	|	""""                                                            КАК КлючУпаковки,
	|	1                                                               КАК ДоляУпаковки,
	|	ЛОЖЬ                                                            КАК ГрупповаяУпаковка,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыВыбытияУпаковокМДЛП.ПустаяСсылка)  КАК СтатусВыбытия
	|ПОМЕСТИТЬ НомераУпаковок
	|ГДЕ
	|	ЛОЖЬ
	|");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ПараметрыОперации = ПараметрыОперацииИзмененияСтатусаУпаковок();
	ПараметрыОперации.ДокументРезерва = ДокументРезерва;
	
	ЗаписатьВРеестрВыбытия(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
	
КонецПроцедуры

Функция СтатусыПозволяющиеВыбытие()
	
	СтатусыПозволяющиеВыбытие = Новый Массив;
	СтатусыПозволяющиеВыбытие.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
	СтатусыПозволяющиеВыбытие.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВОбороте);
	СтатусыПозволяющиеВыбытие.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВРезерве);
	СтатусыПозволяющиеВыбытие.Добавить(Перечисления.СтатусыУпаковокМДЛП.КПоступлению);
	СтатусыПозволяющиеВыбытие.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВУпаковке);
	
	Возврат СтатусыПозволяющиеВыбытие;
	
КонецФункции

#КонецОбласти // РеестрВыбытияУпаковокМДЛП

#КонецОбласти

#Область ДействиеЗапросаИнформацииОбУпаковках

// Возвращает настройки использования дальнейшего действия ЗапроситеИнформациюОбУпаковках для документов.
//
Функция НастройкиДействияЗапросаИнформацииОбУпаковках()
	
	МетаданныеДокументов = Метаданные.Документы;
	
	ПоддерживаемыеДокументы = Новый Соответствие;
	ПоддерживаемыеДокументы.Вставить(МетаданныеДокументов.УведомлениеОбОприходованииМДЛП.ПолноеИмя());
	ПоддерживаемыеДокументы.Вставить(МетаданныеДокументов.УведомлениеОПриемкеМДЛП.ПолноеИмя());
	
	Для Каждого КлючИЗначение Из ПоддерживаемыеДокументы Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(КлючИЗначение.Ключ);
		ПоддерживаемыеДокументы[КлючИЗначение.Ключ] = Менеджер.ИспользоватьДействиеЗапросаИнформацииОбУпаковках();
	КонецЦикла;
	
	Возврат ПоддерживаемыеДокументы;
	
КонецФункции

// Возвращает признак использования дальнейшего действия ЗапроситеИнформациюОбУпаковках в документе.
//
Функция ИспользоватьДействиеЗапросаИнформацииОбУпаковках(ДокументСсылка) Экспорт
	
	НастройкиПоУмолчанию = НастройкиДействияЗапросаИнформацииОбУпаковках();
	
	Результат = ИнтеграцияМДЛППереопределяемый.ИспользоватьДействиеЗапросаИнформацииОбУпаковках(ДокументСсылка, НастройкиПоУмолчанию);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат НастройкиПоУмолчанию[ДокументСсылка.Метаданные().ПолноеИмя()] = Истина;
	
КонецФункции

// Обновляет статус документа и возвращает форматированную строку представление статуса документа после запроса информации об упаковках.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документа, в котором используется действие ЗапроситеИнформациюОбУпаковках.
//  СтатусПроверкиИПодбора - ПеречислениеСсылка.СтатусыПроверкиИПодбораМДЛП - статус проверки и подбора кодов маркировки документа.
//                           Неопределено - если не используется механизм проверки и подбора.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса.
//
Функция ОбновитьСтатусУведомленияПослеЗапросаИнформацииОбУпаковках(ДокументСсылка, СтатусПроверкиИПодбора = Неопределено) Экспорт
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(ДокументСсылка);
	
	НужноВыполнитьПроверку = СтатусПроверкиИПодбора <> Неопределено И ИнтеграцияМДЛПКлиентСервер.НеВыполнялисьПроверкаИПодбор(СтатусПроверкиИПодбора, ТекущийСтатус.Статус);
	
	ДальнейшееДействие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийСтатус, "ДальнейшееДействие");
	Если ТипЗнч(ДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюМДЛП") И ЗначениеЗаполнено(ДальнейшееДействие) Тогда
		
		Если ТекущийСтатус.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках Тогда
			Если НужноВыполнитьПроверку Тогда
				ТекущийСтатус.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку;
			Иначе
				ТекущийСтатус.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДальнейшееДействие) = Тип("Массив") Тогда
		Для Индекс = 0 По ТекущийСтатус.ДальнейшееДействие.ВГраница() Цикл
			
			Если ТекущийСтатус.ДальнейшееДействие[Индекс] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках Тогда
				Если НужноВыполнитьПроверку Тогда
					ТекущийСтатус.ДальнейшееДействие[Индекс] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку;
				Иначе
					ТекущийСтатус.ДальнейшееДействие[Индекс] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.НеТребуется;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
	КонецЕсли;
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	Статусы.Принят = ТекущийСтатус.Статус;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ТекущийСтатус.ДальнейшееДействие);
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
	РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления);
	
	Возврат ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	
КонецФункции

#КонецОбласти

Функция СформироватьУведомлениеОбОшибкеФиксации(ТекстОшибки, ИдентификаторСессии, Операция) Экспорт
	
	ПространствоИмен = ПространствоИмен();
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "result";
	
	ПередачаДанных = ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ЗаполнитьСвойствоXDTO(Уведомление, "session_ui", ИдентификаторСессии);
	УстановитьДатуСЧасовымПоясом(Уведомление, "accept_time", ТекущаяДатаСеанса(), УстановленныеДаты);
	
	ЗаполнитьСвойствоXDTO(Уведомление, "operation", Операция);
	ЗаполнитьСвойствоXDTO(Уведомление, "operation_id", ИдентификаторСессии);
	ЗаполнитьСвойствоXDTO(Уведомление, "operation_comment", НСтр("ru = 'Сгенерировано библиотекой'"));
	
	ОписаниеОшибки = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "errors");
	ЗаполнитьСвойствоXDTO(ОписаниеОшибки, "error_code", НСтр("ru = 'Без кода'"));
	ЗаполнитьСвойствоXDTO(ОписаниеОшибки, "error_desc", ТекстОшибки);
	Уведомление.errors.Добавить(ОписаниеОшибки);
	
	ЗаполнитьСвойствоXDTO(Уведомление, "operation_result", "Rejected");
	
	ТекстСообщения = ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ОперацияВходящегоСообщения(ТипДокумента)
	
	ТипДокументаСтрокой = Формат(ТипДокумента, "ЧН=0; ЧГ=0");
	Для Каждого Значение Из Метаданные.Перечисления.ОперацииОбменаМДЛП.ЗначенияПеречисления Цикл
		Если СтрНачинаетсяС(Значение.Имя, "Получение") И Значение.Комментарий = ТипДокументаСтрокой Тогда
			Возврат Перечисления.ОперацииОбменаМДЛП[Значение.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция)
	
	ОперацияПоддерживается = Ложь;
	ДокументыДляЗагрузки = Новый Массив;
	
	МенеджерыСПоддержкойЗагрузкиУведомлений = Новый Массив;
	
	ТипыУведомлений = Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.Типы();
	Для Каждого ТипУведомления Из ТипыУведомлений Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(ТипУведомления).ПолноеИмя());
		Если Менеджер.ПоддерживаетЗагрузкуУведомлений() Тогда
			МенеджерыСПоддержкойЗагрузкиУведомлений.Добавить(Менеджер);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Менеджер Из МенеджерыСПоддержкойЗагрузкиУведомлений Цикл
		
		НайденныеДокументы = Менеджер.ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция);
		Если НайденныеДокументы <> Неопределено Тогда
			ОперацияПоддерживается = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляЗагрузки, НайденныеДокументы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОперацияПоддерживается Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция %1 не поддерживается'"), Строка(Операция));
	КонецЕсли;
	
	Возврат ДокументыДляЗагрузки;
	
КонецФункции

Функция ХешСуммаСтрокой(Знач Данные) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ОбщегоНазначения.ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);
	
	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма);
	
КонецФункции

Функция ДанныеПустойЗаписиРегистра(МетаданныеРегистра) Экспорт
	
	ДанныеЗаписи = Новый Структура;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ЗначениеЗаполнения = Измерение.ЗначениеЗаполнения;
		ДанныеЗаписи.Вставить(Измерение.Имя, Измерение.Тип.ПривестиЗначение(ЗначениеЗаполнения));
	КонецЦикла;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ЗначениеЗаполнения = Ресурс.ЗначениеЗаполнения;
		ДанныеЗаписи.Вставить(Ресурс.Имя, Ресурс.Тип.ПривестиЗначение(ЗначениеЗаполнения));
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ЗначениеЗаполнения = Реквизит.ЗначениеЗаполнения;
		ДанныеЗаписи.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение(ЗначениеЗаполнения));
	КонецЦикла;
	
	Возврат ДанныеЗаписи;
	
КонецФункции

Функция СтатусыТребующиеВнимания()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыИнформированияМДЛП.Отклонено);
	Статусы.Добавить(Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято);
	Статусы.Добавить(Перечисления.СтатусыИнформированияМДЛП.ЧастичноПередано);
	Статусы.Добавить(Перечисления.СтатусыИнформированияМДЛП.ОприходованоНовымВладельцем);
	Статусы.Добавить(Перечисления.СтатусыИнформированияМДЛП.ПринятоСОтклонениемОтТребований);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
		Статусы.Добавить(Перечисления.СтатусыИнформированияМДЛП.ВвезеноВРФБезПодтверждения);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

Функция СобытиеЖурналаРегистрации(Уточнение = "") Экспорт
	
	Событие = НСтр("ru = 'МДЛП'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(Уточнение) Тогда
		Событие = Событие + "." + Уточнение;
	КонецЕсли;
	Возврат Событие;
	
КонецФункции

Функция ПустоеПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать");
	ВозвращаемоеЗначение.Вставить("КомандаСвязать");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСвязать");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть");
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание");
	ВозвращаемоеЗначение.Вставить("Представление");
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПривестиДатуКЧасовомуПоясуСеанса(ОбъектXDTO)
	
	// Часовой пояс к которому необходимо привести дату (с типом "datetimeoffset") объекта XDTO,
	// т.к. платформенный метод ФабрикаXDTO.ПрочитатьXML приводит дату к часовому поясу компьютера.
	ЧасовойПоясСеанса = ЧасовойПоясСеанса();
	
	// Часовой пояс компьютера. Используется для фиктивной подстановки.
	ЧасовойПоясКомпьютера = ЧасовойПояс();
	
	// Формат даты высокой точности предполагает наличие долей секунд.
	// 0001-01-01T00:00:00.000
	// Такую дату нужно увеличивать на 1 секунду, т.к. ФабрикаXDTO
	// может округлить ее в меньшую сторону, что повлияет на хронологию уведоплений.
	Секунда = 1;
	
	ИмяТипаДаты = "datetimeoffset";
	
	Стек = Новый Массив;
	Стек.Добавить(ОбъектXDTO);
	
	Пока Стек.Количество() > 0 Цикл
		
		ТекущийОбъектXDTO = Стек[0];
		
		Стек.Удалить(0);
		
		Для Каждого Свойство Из ТекущийОбъектXDTO.Свойства() Цикл
			
			Если Свойство = Неопределено Или Свойство.Имя = "version" Или Не ОбъектXDTOСодержитДанныеТипа(ТекущийОбъектXDTO, Свойство.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяСвойства      = Свойство.Имя;
			ЗначениеСвойства = ТекущийОбъектXDTO[ИмяСвойства];
			
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				
				Стек.Добавить(ЗначениеСвойства);
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
				
				Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
					
					ЭлементСписка = ЗначениеСвойства[Индекс];
					
					Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
						Стек.Добавить(ЭлементСписка);
					Иначе
						
						Если Свойство.Тип.Имя = ИмяТипаДаты И ЗначениеЗаполнено(ЭлементСписка.Значение) И ТипЗнч(ЭлементСписка.Значение) = Тип("Дата") Тогда
							ЗначениеСвойства[Индекс] = ДатаСЧасовымПоясом(МестноеВремя(УниверсальноеВремя(ЗначениеСвойства + Секунда), ЧасовойПоясСеанса), ЧасовойПоясКомпьютера);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если Свойство.Тип.Имя = ИмяТипаДаты И ЗначениеЗаполнено(ЗначениеСвойства) И ТипЗнч(ЗначениеСвойства) = Тип("Дата") Тогда
					// Дата полученная методом ФабрикаXDTO.ПрочитатьXML является датой в часовом поясе сервера.
					// Необходимо преобразовать ее к часовому поясу сеанса (с добавлением секунды, для избежания ошибки округления миллисекунд в меньшую сторону).
					// При этом в ОбъектXDTO передавать строку, в которой новое значение даты имеет смещение часового пояса компьютера, а не сеанса, чтоб сериализатор не менял дату.
					// Пример:
					// ЗначениеСвойства = '20210101120000' (московское время 12:00:00)
					// ЧасовойПоясКомпьютера = GMT+3 (Москва)
					// ЧасовойПоясСеанса = GMT+6 (Омск)
					// ДатаУниверсальная = УниверсальноеВремя(ЗначениеСвойства + Секунда): '20210101090001' (нулевой меридиан 9:00:01)
					// ДатаВЧасовомПоясеСеанса = МестноеВремя(ДатаУниверсальная, ЧасовойПоясСеанса): '20210101150001' (омское время 15:00:01)
					// ДатаСЧасовымПоясом(ДатаВЧасовомПоясеСеанса, ЧасовойПоясКомпьютера): "2021-01-01T15:00:01+03:00"
					// (+3:00, а не +6:00, чтоб сериализатор записал в ОбъектXDTO дату в исходном виде, без преобразования к часовому поясу компьютера, т.к. ЧасовойПоясКомпьютера = +3:00)
					ТекущийОбъектXDTO[ИмяСвойства] = ДатаСЧасовымПоясом(МестноеВремя(УниверсальноеВремя(ЗначениеСвойства + Секунда), ЧасовойПоясСеанса), ЧасовойПоясКомпьютера);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьНаименьшееОбщееКратное(Знач Число1, Знач Число2)
	
	Если Число1 = 0 Или Число2 = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Число1 = Число2 Тогда
		Возврат Число1;
	ИначеЕсли Число1 % Число2 = 0 Тогда
		Возврат Число1;
	ИначеЕсли Число2 % Число1 = 0 Тогда
		Возврат Число2;
	Иначе
		
		Произведение = Число1 * Число2;
		
		Возврат Произведение / ВычислитьНаибольшийОбщийДелитель(Число1, Число2);
		
	КонецЕсли;
	
КонецФункции

Функция ВычислитьНаибольшийОбщийДелитель(Знач Число1, Знач Число2)
	
	Если Число1 = 0 Или Число2 = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Пока Число2 <> 0 Цикл
		
		Остаток = Число1 % Число2;
		Число1 = Число2;
		Число2 = Остаток;
		
	КонецЦикла;
	
	Возврат Число1;
	
КонецФункции

Функция РезультатСОшибкойНеизвестногоТипаЗагружаемогоДокумента(ТекстОшибки)
	
	Изменения = ИнтеграцияМДЛПКлиентСервер.СтруктураИзменения();
	Изменения.ТекстОшибки = ТекстОшибки;
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Изменения);
	
КонецФункции

// Добавляет в строковое представление даты в формате ISO значение "Z" в конце строки.
// Это может потребоваться, например, если какой-либо сервис возвращает дату без указания часового пояса,
// подразумевая нулевой меридиан, а стандартные средства интерпретации строки JSON 1С приводят такую дату к часовому поясу без смещения.
// Пример:
//  Функция ПрочитатьДатуJSON("2020-04-23T13:44:09") всегда вернет значение '20200423134409', не зависимо от контекста и местоположения клиента и сервера.
//  Функция ПрочитатьДатуJSON("2020-04-23T13:44:09Z") вернет значение '20200423134409' только если клиент или сервер (в зависимости от контекста вызова)
//  находится в нулевом часовом поясе, иначе значение будет возвращено в зависимости от часового пояса контекста, например для МСК будет '20200423164409'.
//
// Параметры:
//  ДатаСтрокой - Строка - дата в формете даты JSON ISO.
//
// Возвращаемое значение:
//  Строка - дата с указанием нулевого часового пояса.
//
Функция ДобавитьНулевойЧасовойПоясКДате(ДатаСтрокой) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСтрокой) Тогда
		Возврат ДатаСтрокой;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(ДатаСтрокой, "Z") Тогда
		Возврат ДатаСтрокой + "Z";
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПричинуОтключенияТребованияСозданияРаспоряженияНаОформление(ТекстНадписи, ПричинаОтключения)
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписи);
	ПричинаОтключения = "#" + СтрЗаменить(СтрЗаменить(СтрЗаменить(ПричинаОтключения, Символы.ПС, "#ПС#"), Символы.Таб, "#Таб#"), " ", "#ПП#");
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписи, " ", Новый ФорматированнаяСтрока(БиблиотекаКартинок.Комментарий,,,, ПричинаОтключения));
	
КонецФункции

// Удаляет в перечисленных реквизитах объекта незначащие символы.
//
// Параметры:
//  Объект            - СправочникОбъект, ДокументОбъект - объект для обработки.
//  РеквизитыОбъекта  - Строка, Массив - перечень реквизитов объекта для обработки
//                      (в строке реквизиты разделяются символом ",").
//
Процедура УбратьНезначащиеСимволы(Объект, РеквизитыОбъекта) Экспорт
	
	Если ТипЗнч(РеквизитыОбъекта) = Тип("Строка") Тогда
		РеквизитыОбъектаМассив = СтрРазделить(РеквизитыОбъекта, ",", Ложь);
	ИначеЕсли ТипЗнч(РеквизитыОбъекта) = Тип("Массив") Тогда
		РеквизитыОбъектаМассив = РеквизитыОбъекта;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из РеквизитыОбъектаМассив Цикл
		Объект[ТекРеквизит] = СокрЛП(Объект[ТекРеквизит]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
