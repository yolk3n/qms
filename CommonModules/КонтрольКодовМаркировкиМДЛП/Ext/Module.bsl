
#Область ПрограммныйИнтерфейс

// Проверяет, подключен ли механизм проверки КМ к форме объекта.
// (см. ПодключитьМеханизмПроверкиКМ)
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
// Возвращаемое значение:
//  Истина, если механизм проверки КМ подключен к форме объекта.
//
Функция МеханизмПроверкиКМПодключен(Форма) Экспорт
	
	Возврат КонтрольКодовМаркировкиМДЛПКлиентСервер.МеханизмПроверкиКМПодключен(Форма);
	
КонецФункции

// Проверяет, используется ли механизм проверки КМ в форме объекта.
// Механизм может быть подключен, но не использоваться, если запрещено использование.
// (см. ПодключитьМеханизмПроверкиКМ)
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
// Возвращаемое значение:
//  Истина, если механизм проверки КМ используется в форме объекта.
//
Функция МеханизмПроверкиКМИспользуется(Форма) Экспорт
	
	Возврат КонтрольКодовМаркировкиМДЛПКлиентСервер.МеханизмПроверкиКМИспользуется(Форма);
	
КонецФункции

#Область ОбработчикиСобытийФормы

// Обработчик события формы объекта, подключенной к механизму проверки КМ.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.ПриЧтенииНаСервере(Форма, ТекущийОбъект, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
			
			ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
			Если ТипДокумента = Тип("ДокументСсылка.УведомлениеОВыдачеВОтделенияМДЛП")
			 Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
				
				ПодключитьМеханизмПроверкиКМНаФормеПоУмолчанию(Форма);
				ПолучитьРезультатыПроверкиКМНаФормеСредствамиРВ(Форма);
				
			Иначе
				
				ПодключитьМеханизмПроверкиКМНаФормеПоУмолчанию(Форма);
				ПолучитьРезультатыПроверкиКМНаФормеПоУмолчанию(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы объекта, подключенной к механизму проверки КМ.
//
Процедура ПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
			
			ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
			Если ТипДокумента = Тип("ДокументСсылка.УведомлениеОВыдачеВОтделенияМДЛП")
			 Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
				
				ПодключитьМеханизмПроверкиКМНаФормеПоУмолчанию(Форма);
				
			Иначе
				
				ПодключитьМеханизмПроверкиКМНаФормеПоУмолчанию(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы объекта, подключенной к механизму проверки КМ.
//
Процедура ПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.ПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
			
			ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
			Если ТипДокумента = Тип("ДокументСсылка.УведомлениеОВыдачеВОтделенияМДЛП")
			 Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
				
				ЗаписатьРезультатыПроверкиКМНаФормеПоУмолчанию(Форма);
				
			Иначе
				
				ЗаписатьРезультатыПроверкиКМНаФормеПоУмолчанию(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы объекта, подключенной к механизму проверки КМ.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
			
			ТипДокумента = ТипЗнч(Форма.Объект.Ссылка);
			Если ТипДокумента = Тип("ДокументСсылка.УведомлениеОВыдачеВОтделенияМДЛП")
			 Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП") Тогда
				
				ПолучитьРезультатыПроверкиКМНаФормеСредствамиРВ(Форма);
				
			Иначе
				
				ПолучитьРезультатыПроверкиКМНаФормеПоУмолчанию(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеПроверкиКМ

// Возвращает параметры, необходимые для подключения механизма проверки КМ к форме объекта.
// (см. КонтрольКодовМаркировкиСредствамиАПИМДЛП.ПараметрыПодключенияПроверкиКМ
// КонтрольКодовМаркировкиСредствамиРВМДЛП.ПараметрыПодключенияПроверкиКМ
// и КонтрольКодовМаркировкиСредствамиККТМДЛП.ПараметрыПодключенияПроверкиКМ)
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для подключения механизма проверки КМ к форме объекта.
//    * Форма - ФормаКлиентскогоПриложения - форма объекта подключения механизма проверки КМ.
//
Функция ПараметрыПодключенияПроверкиКМ(Форма) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Форма", Форма);
	
	// Параметры проверки средствами АПИ МДЛП
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиАПИМДЛП.ПараметрыПодключенияПроверкиКМ(Форма), Истина);
	
	// Параметры проверки средствами РВ
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиРВМДЛП.ПараметрыПодключенияПроверкиКМ(Форма), Истина);
	
	// Параметры проверки средствами ККТ
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВозвращаемоеЗначение, КонтрольКодовМаркировкиСредствамиККТМДЛП.ПараметрыПодключенияПроверкиКМ(Форма), Истина);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подключение механизма проверки КМ к форме объекта.
// (см. КонтрольКодовМаркировкиСредствамиАПИМДЛП.ПодключитьМеханизмПроверкиКМ
// КонтрольКодовМаркировкиСредствамиРВМДЛП.ПодключитьМеханизмПроверкиКМ
// и КонтрольКодовМаркировкиСредствамиККТМДЛП.ПодключитьМеханизмПроверкиКМ).
//
// Параметры:
//  Параметры - Структура - см. ПараметрыПодключенияПроверкиКМ.
//
Процедура ПодключитьМеханизмПроверкиКМ(Параметры) Экспорт
	
	Если МеханизмПроверкиКМПодключен(Параметры.Форма) Тогда
		// Уже подключен.
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияПроверкиКМСредствамиАПИМДЛП = КонтрольКодовМаркировкиСредствамиАПИМДЛП.ПараметрыПодключенияПроверкиКМ(Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыПодключенияПроверкиКМСредствамиАПИМДЛП, Параметры);
	РезультатАПИМДЛП = КонтрольКодовМаркировкиСредствамиАПИМДЛП.ПроверитьВозможностьПодключенияПроверкиКМ(ПараметрыПодключенияПроверкиКМСредствамиАПИМДЛП);
	Если РезультатАПИМДЛП.РазрешеноПодключение Тогда
		КонтрольКодовМаркировкиСредствамиАПИМДЛП.ПодключитьМеханизмПроверкиКМ(ПараметрыПодключенияПроверкиКМСредствамиАПИМДЛП, РезультатАПИМДЛП);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияПроверкиКМСредствамиРВ = КонтрольКодовМаркировкиСредствамиРВМДЛП.ПараметрыПодключенияПроверкиКМ(Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыПодключенияПроверкиКМСредствамиРВ, Параметры);
	РезультатРВ = КонтрольКодовМаркировкиСредствамиРВМДЛП.ПроверитьВозможностьПодключенияПроверкиКМ(ПараметрыПодключенияПроверкиКМСредствамиРВ);
	Если РезультатРВ.РазрешеноПодключение Тогда
		КонтрольКодовМаркировкиСредствамиРВМДЛП.ПодключитьМеханизмПроверкиКМ(ПараметрыПодключенияПроверкиКМСредствамиРВ, РезультатРВ);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияПроверкиКМСредствамиККТ = КонтрольКодовМаркировкиСредствамиККТМДЛП.ПараметрыПодключенияПроверкиКМ(Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыПодключенияПроверкиКМСредствамиККТ, Параметры);
	РезультатККТ = КонтрольКодовМаркировкиСредствамиККТМДЛП.ПроверитьВозможностьПодключенияПроверкиКМ(ПараметрыПодключенияПроверкиКМСредствамиККТ);
	Если РезультатККТ.РазрешеноПодключение Тогда
		КонтрольКодовМаркировкиСредствамиККТМДЛП.ПодключитьМеханизмПроверкиКМ(ПараметрыПодключенияПроверкиКМСредствамиККТ, РезультатККТ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьРезультатовПроверкиКМ

// Возвращает параметры, необходимые для записи результата проверки КМ.
//
// Параметры:
//  УдалитьФорма - ФормаКлиентскогоПриложения - не используется.
//  УдалитьДокумент - ДокументСсылка - не используется.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для записи результата проверки КМ.
//   * ТаблицаРезультатовПроверкиКМ - ТаблицаЗначений - таблица записываемых результатов проверки КМ.
//      * НомерУпаковки       - SGTIN
//      * РезультатПроверкиКМ - ФиксированнаяСтруктура - результат проверки КМ
//                              (см. РегистрыСведений.РезультатыПроверкиКМ.ВсеСвойстваРезультатаПроверкиКМ).
//
Функция ПараметрыЗаписиРезультатовПроверкиКМ(УдалитьФорма = Неопределено, УдалитьДокумент = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("НомерУпаковки", Метаданные.ОпределяемыеТипы.НомерУпаковкиМДЛП.Тип);
	ТаблицаРезультатов.Колонки.Добавить("РезультатПроверкиКМ", Новый ОписаниеТипов("ФиксированнаяСтруктура"));
	
	ВозвращаемоеЗначение.Вставить("ТаблицаРезультатовПроверкиКМ", ТаблицаРезультатов);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет запись результатов проверки КМ.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыЗаписиРезультатовПроверкиКМ.
//
Процедура ЗаписатьРезультатыПроверкиКМ(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ТаблицаРезультатовПроверкиКМ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияРезультатовПроверкиКМ = ПараметрыПолученияРезультатовПроверкиКМ();
	Для Каждого СтрокаРезультата Из Параметры.ТаблицаРезультатовПроверкиКМ Цикл
		ПараметрыПолученияРезультатовПроверкиКМ.НомераУпаковок.Добавить(СтрокаРезультата.НомерУпаковки);
	КонецЦикла;
	
	ТаблицаРезультатовПроверкиКМСуществующие = ПолучитьРезультатыПроверкиКМ(ПараметрыПолученияРезультатовПроверкиКМ);
	
	ПараметрыЗаписиРезультатовПроверкиКМ = ПараметрыЗаписиРезультатовПроверкиКМ();
	
	Если Не ЗначениеЗаполнено(ТаблицаРезультатовПроверкиКМСуществующие) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиРезультатовПроверкиКМ, Параметры);
	Иначе
		
		Для Каждого СтрокаРезультата Из Параметры.ТаблицаРезультатовПроверкиКМ Цикл
			
			// Если у текущей записи контроль КМ выполнен - перезаписываем.
			КонтрольВыполнен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаРезультата.РезультатПроверкиКМ, "КонтрольВыполнен", Ложь);
			Если КонтрольВыполнен Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЗаписиРезультатовПроверкиКМ.ТаблицаРезультатовПроверкиКМ.Добавить(), СтрокаРезультата);
				Продолжить;
			КонецЕсли;
			
			СтрокиРезультатаСуществующие = ТаблицаРезультатовПроверкиКМСуществующие.НайтиСтроки(Новый Структура("НомерУпаковкиПроверки", СтрокаРезультата.НомерУпаковки));
			
			// Если существующей записи результата проверки КМ нет - записываем новый.
			Если СтрокиРезультатаСуществующие.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЗаписиРезультатовПроверкиКМ.ТаблицаРезультатовПроверкиКМ.Добавить(), СтрокаРезультата);
				Продолжить;
			КонецЕсли;
			
			СтрокаРезультатаСуществующая = СтрокиРезультатаСуществующие[0];
			КонтрольВыполненСуществующий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаРезультатаСуществующая.РезультатПроверкиКМ, "КонтрольВыполнен", Ложь);
			
			ПолныйКодМаркировки             = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаРезультата.РезультатПроверкиКМ, "ПолныйКодМаркировки");
			ПолныйКодМаркировкиСуществующий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаРезультатаСуществующая.РезультатПроверкиКМ, "ПолныйКодМаркировки");
			
			// Если у текущей и у существующей записи контроль КМ не выполнен
			// и у текущей записи заполнен полный КМ, а у существующей не заполнен полный КМ - перезаписываем.
			Если Не КонтрольВыполненСуществующий И ЗначениеЗаполнено(ПолныйКодМаркировки) И Не ЗначениеЗаполнено(ПолныйКодМаркировкиСуществующий) Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЗаписиРезультатовПроверкиКМ.ТаблицаРезультатовПроверкиКМ.Добавить(), СтрокаРезультата);
				Продолжить;
			КонецЕсли;
			
			// У текущей записи контроль КМ не выполнен, а у существующей записи выполнен
			// или у текущей записи не заполнен полный КМ
			// или полный КМ заполнен и у текущей и у существующей записи.
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаписиРезультатовПроверкиКМ.ТаблицаРезультатовПроверкиКМ) Тогда
		
		СтандартнаяОбработка = Истина;
		
		КонтрольКодовМаркировкиМДЛППереопределяемый.ЗаписатьРезультатыПроверкиКМ(ПараметрыЗаписиРезультатовПроверкиКМ, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			РегистрыСведений.РезультатыПроверкиКММДЛП.ЗаписатьРезультатыПроверкиКМ(ПараметрыЗаписиРезультатовПроверкиКМ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеЗаписанныхРезультатовПроверкиКМ

// Возвращает параметры, необходимые для получения записанных результатов проверки КМ.
//
// Параметры:
//  УдалитьФорма - ФормаКлиентскогоПриложения - не используется.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для получения результата проверки КМ.
//    * КлючГруппыНастроекКонтроляКМ - Необязательный. Ключ подключенных настроек проверки КМ (см. ПодключитьМеханизмПроверкиКМ).
//                                     Указывается, если нужно получить результат проверки КМ конкретной группы настроек контроля КМ.
//    * НомераУпаковок               - Массив номеров упаковок.
//
Функция ПараметрыПолученияРезультатовПроверкиКМ(УдалитьФорма = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КлючГруппыНастроекКонтроляКМ", Неопределено);
	ВозвращаемоеЗначение.Вставить("НомераУпаковок", Новый Массив);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет получение записанных результатов проверки КМ.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыПолученияРезультатовПроверкиКМ.
//
Функция ПолучитьРезультатыПроверкиКМ(Параметры) Экспорт
	
	ПараметрыПолученияРезультатовПроверкиКМ = ПараметрыПолученияРезультатовПроверкиКМ();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияРезультатовПроверкиКМ, Параметры);
	
	ТаблицаРезультатовПроверкиКМ = РегистрыСведений.РезультатыПроверкиКММДЛП.ПолучитьРезультатыПроверкиКМ(ПараметрыПолученияРезультатовПроверкиКМ);
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.ПолучитьРезультатыПроверкиКМ(ПараметрыПолученияРезультатовПроверкиКМ, ТаблицаРезультатовПроверкиКМ);
	
	Возврат ТаблицаРезультатовПроверкиКМ;
	
КонецФункции

#КонецОбласти

#Область УдалениеЗаписанныхРезультатовПроверкиКМ

// Возвращает параметры, необходимые для удаления записанных результатов проверки КМ.
//
// Возвращаемое значение:
//  ВозвращаемоеЗначение - Структура - параметры, необходимые для удаления результата проверки КМ.
//   * КлючГруппыНастроекКонтроляКМ  - Необязательный. Ключ подключенных настроек проверки КМ (см. ПодключитьМеханизмПроверкиКМ).
//                                     Указывается, если нужно удалить результат проверки КМ конкретной группы настроек контроля КМ.
//   * НомераУпаковок - Массив номеров упаковок. Необязательный параметр.
//   * ПараметрыУдаленияРезультатовПроверки - Структура - Необязательный параметр.
//                                            Указывается, если нужно удалить результат проверки КМ по параметрам удаления результатов проверки.
//                                            Заполняется по умолчанию из данных константы НастройкиКонтроляКодовМаркировкиМДЛП.
//                                            см. КонтрольКодовМаркировкиМДЛПКлиентСервер.НоваяГруппаНастроекКонтроляКМ.
//                                            Если отбор по параметрам удаления не нужен необходимо установить значение Неопределено.
//
Функция ПараметрыУдаленияРезультатовПроверкиКМ() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КлючГруппыНастроекКонтроляКМ", Неопределено);
	ВозвращаемоеЗначение.Вставить("НомераУпаковок", Новый Массив);
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	
	ПараметрыУдаленияРезультатовПроверки = Новый Структура;
	Для Каждого КлючИЗначение Из ГруппыНастроекКонтроляКМ Цикл
		КлючГруппыНастроекКонтроляКМ = КлючИЗначение.Значение;
		ГруппаНастроек = КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗначениеГруппыНастроекКонтроляКМ(Неопределено, КлючГруппыНастроекКонтроляКМ);
		ПараметрыУдаленияРезультатовПроверки.Вставить(КлючГруппыНастроекКонтроляКМ, ГруппаНастроек.ПараметрыУдаленияРезультатовПроверки);
	КонецЦикла;
	ВозвращаемоеЗначение.Вставить("ПараметрыУдаленияРезультатовПроверки", ПараметрыУдаленияРезультатовПроверки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет удаление записанных результатов проверки КМ.
//
// Параметры:
//  Параметры - Структура - см. ПараметрыУдаленияРезультатовПроверкиКМ.
//
Процедура УдалитьРезультатыПроверкиКМ(Параметры) Экспорт
	
	ПараметрыУдаленияРезультатовПроверкиКМ = ПараметрыУдаленияРезультатовПроверкиКМ();
	ЗаполнитьЗначенияСвойств(ПараметрыУдаленияРезультатовПроверкиКМ, Параметры);
	
	СтандартнаяОбработка = Истина;
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.УдалитьРезультатыПроверкиКМ(ПараметрыУдаленияРезультатовПроверкиКМ, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		РегистрыСведений.РезультатыПроверкиКММДЛП.УдалитьРезультатыПроверкиКМ(ПараметрыУдаленияРезультатовПроверкиКМ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НастройкиКонтроляКМ() Экспорт
	
	Результат = Новый Структура;
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Для Каждого КлючИЗначение Из ГруппыНастроекКонтроляКМ Цикл
		Результат.Вставить(КлючИЗначение.Ключ, КонтрольКодовМаркировкиМДЛПКлиентСервер.НоваяГруппаНастроекКонтроляКМ(КлючИЗначение.Ключ));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКонстанты = Константы.НастройкиКонтроляКодовМаркировкиМДЛП.Получить().Получить();
	Если ТипЗнч(ЗначениеКонстанты) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ЗначениеКонстанты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьИспользованиеНастройкиКонтроляКМ(КлючГруппыНастроекКонтроляКМ, Переключатель) Экспорт
	
	Если Переключатель Тогда
		Результат = РазрешеноИспользованиеНастройкиКонтроляКМ(КлючГруппыНастроекКонтроляКМ);
		Если Не Результат.Успех Тогда
			ОбщегоНазначения.СообщитьПользователю(Результат.Причина);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиКонтроляКМ = НастройкиКонтроляКМ();
	
	ГруппаНастроек = КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗначениеГруппыНастроекКонтроляКМ(НастройкиКонтроляКМ, КлючГруппыНастроекКонтроляКМ);
	ГруппаНастроек.Включено = Переключатель;
	
	КонстантаИмя = Метаданные.Константы.НастройкиКонтроляКодовМаркировкиМДЛП.Имя;
	Константы[КонстантаИмя].Установить(Новый ХранилищеЗначения(НастройкиКонтроляКМ));
	
	Возврат Истина;
	
КонецФункции

Функция КонтрольКМВключен() Экспорт
	
	НастройкиКонтроляКМ = НастройкиКонтроляКМ();
	
	КонтрольВключен = Ложь;
	Для Каждого КлючИЗначение Из НастройкиКонтроляКМ Цикл
		Если КлючИЗначение.Значение.Включено Тогда
			КонтрольВключен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КонтрольВключен;
	
КонецФункции


Функция ДопустимыеОперацииКонтроляКМ(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	ДопустимыеОперации = Новый Соответствие;
	
	ТипыОграничитьОтключение = Новый Массив;
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Если КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП Тогда
		
		ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументКонтроляКМСредствамиАПИМДЛП.Тип.Типы();
		
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ Тогда
		
		ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументКонтроляКМСредствамиРВМДЛП.Тип.Типы();
		
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ Тогда
		
		ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументКонтроляКМСредствамиККТМДЛП.Тип.Типы();
		
	Иначе
		
		Возврат ДопустимыеОперации;
		
	КонецЕсли;
	
	Для Каждого Тип Из ТипыДокументов Цикл
		
		Если Тип = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип);
		
		СвойстваОперации = Новый Структура;
		СвойстваОперации.Вставить("Представление"       , МетаданныеДокумента.Представление());
		СвойстваОперации.Вставить("ОграничитьОтключение", ТипыОграничитьОтключение.Найти(Тип) <> Неопределено);
		
		ДопустимыеОперации.Вставить(МетаданныеДокумента.ПолноеИмя(), СвойстваОперации);
		
	КонецЦикла;
	
	КонтрольКодовМаркировкиМДЛППереопределяемый.ДопустимыеОперацииКонтроляКМ(ДопустимыеОперации, КлючГруппыНастроекКонтроляКМ);
	
	Возврат ДопустимыеОперации;
	
КонецФункции

Процедура ДобавитьОперациюВИсключенияГруппыНастроекКонтроляКМ(ГруппаНастроек, Операция) Экспорт
	
	ГруппаНастроек.Исключения.Вставить(Операция, Истина);
	
КонецПроцедуры

Функция ВключенКонтрольКМДляОперации(КлючГруппыНастроекКонтроляКМ, Операция) Экспорт
	
	ДопустимыеОперации = ДопустимыеОперацииКонтроляКМ(КлючГруппыНастроекКонтроляКМ);
	Если ДопустимыеОперации.Получить(Операция) = Неопределено Тогда
		// Операция не является допустимой для текущей настройки.
		Возврат Ложь;
	КонецЕсли;
	
	ГруппаНастроек = КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗначениеГруппыНастроекКонтроляКМ(, КлючГруппыНастроекКонтроляКМ);
	
	Возврат ГруппаНастроек.Включено И ГруппаНастроек.Исключения.Получить(Операция) = Неопределено;
	
КонецФункции

Функция ОперацииСВключеннымКонтролемКМ(КлючГруппыНастроекКонтроляКМ) Экспорт
	
	ВозвращаемыйРезультат = Новый Массив;
	
	ГруппаНастроек = КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗначениеГруппыНастроекКонтроляКМ(, КлючГруппыНастроекКонтроляКМ);
	Если Не ГруппаНастроек.Включено Тогда
		Возврат ВозвращаемыйРезультат;
	КонецЕсли;
	
	ДопустимыеОперации = КонтрольКодовМаркировкиМДЛП.ДопустимыеОперацииКонтроляКМ(КлючГруппыНастроекКонтроляКМ);
	Для Каждого КлючИзНачение Из ДопустимыеОперации Цикл
		Если ГруппаНастроек.Исключения.Получить(КлючИзНачение.Ключ) = Неопределено Тогда
			ВозвращаемыйРезультат.Добавить(КлючИзНачение.Ключ);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ВозвращаемыйРезультат;
	
КонецФункции

Функция ПредставлениеИсключенийГруппыНастроекКонтроляКМ(ГруппаНастрекИлиКлюч) Экспорт
	
	Если ТипЗнч(ГруппаНастрекИлиКлюч) = Тип("Строка") Тогда
		ГруппаНастроек = КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗначениеГруппыНастроекКонтроляКМ(, ГруппаНастрекИлиКлюч);
		КлючГруппыНастроекКонтроляКМ = ГруппаНастрекИлиКлюч;
	Иначе
		ГруппаНастроек = ГруппаНастрекИлиКлюч;
		КлючГруппыНастроекКонтроляКМ = ГруппаНастроек.Ключ;
	КонецЕсли;
	
	Исключения = ГруппаНастроек.Исключения;
	
	ДопустимыеОперации = ДопустимыеОперацииКонтроляКМ(КлючГруппыНастроекКонтроляКМ);
	
	ЗначенияПредставления = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из Исключения Цикл
		
		ДопустимаяОперация = ДопустимыеОперации.Получить(КлючИЗначение.Ключ);
		Если ДопустимаяОперация <> Неопределено Тогда
			ЗначенияПредставления.Добавить(ДопустимаяОперация.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = "";
	Если ЗначенияПредставления.Количество() > 0 Тогда
		
		ЗначенияПредставления.СортироватьПоЗначению();
		
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Исключения: %1'"),
			СтрСоединить(ЗначенияПредставления.ВыгрузитьЗначения(), "; "));
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции


Функция НовыйРезультатПроверкиНастроекКонтроляКМ(Успех) Экспорт
	
	Возврат Новый Структура("Успех, Причина", Успех, "");
	
КонецФункции

Функция РазрешеноИспользованиеНастройкиКонтроляКМ(КлючГруппыНастроекКонтроляКМ)
	
	ГруппыНастроекКонтроляКМ = КонтрольКодовМаркировкиМДЛПКлиентСервер.ГруппыНастроекКонтроляКМ();
	Если КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиАПИМДЛП Тогда
		Возврат КонтрольКодовМаркировкиСредствамиАПИМДЛП.РазрешеноИспользованиеНастройкиКонтроляКМ();
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиРВ Тогда
		Возврат КонтрольКодовМаркировкиСредствамиРВМДЛП.РазрешеноИспользованиеНастройкиКонтроляКМ();
	ИначеЕсли КлючГруппыНастроекКонтроляКМ = ГруппыНастроекКонтроляКМ.ПараметрыКонтроляСредствамиККТ Тогда
		Возврат КонтрольКодовМаркировкиСредствамиККТМДЛП.РазрешеноИспользованиеНастройкиКонтроляКМ();
	Иначе
		Результат = НовыйРезультатПроверкиНастроекКонтроляКМ(Ложь);
		Результат.Причина = НСтр("ru = 'Неизвестный ключ группы настроек контроля КМ.'");
		Возврат Результат;
	КонецЕсли;
	
КонецФункции


Процедура ПодключитьМеханизмПроверкиКМНаФормеПоУмолчанию(Форма)
	
	ПараметрыПодключения = ПараметрыПодключенияПроверкиКМ(Форма);
	ПодключитьМеханизмПроверкиКМ(ПараметрыПодключения);
	
	МеханизмПроверкиКМПодключен = МеханизмПроверкиКМПодключен(Форма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НомераУпаковокГруппаПроверкаКМ", "Видимость", МеханизмПроверкиКМПодключен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НомераУпаковокВыборочныйКонтрольМДЛП", "Видимость", МеханизмПроверкиКМПодключен);
	
КонецПроцедуры

Процедура ЗаписатьРезультатыПроверкиКМНаФормеПоУмолчанию(Форма)
	
	Если Не МеханизмПроверкиКМИспользуется(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ПараметрыЗаписи = ПараметрыЗаписиРезультатовПроверкиКМ(Форма);
	
	КонтрольВыполнятьВФормеВыборочногоКонтроляКМ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтрольВыполнятьВФормеВыборочногоКонтроляКМ") И Форма.КонтрольВыполнятьВФормеВыборочногоКонтроляКМ;
	
	СвойстваСтрокиРезультата = Новый Массив;
	Для Каждого Колонка Из ПараметрыЗаписи.ТаблицаРезультатовПроверкиКМ.Колонки Цикл
		СвойстваСтрокиРезультата.Добавить(Колонка.Имя);
	КонецЦикла;
	СвойстваСтрокиРезультатаСтрокой = СтрСоединить(СвойстваСтрокиРезультата, ",");
	
	Для Каждого СтрокаНомераУпаковки Из Объект.НомераУпаковок Цикл
		
		ЗначенияСтрокиРезультата = Новый Структура(СвойстваСтрокиРезультатаСтрокой);
		ЗаполнитьЗначенияСвойств(ЗначенияСтрокиРезультата, СтрокаНомераУпаковки);
		ЗначенияСтрокиРезультата.НомерУпаковки = СтрокаНомераУпаковки.НомерКИЗ;
		
		Если КонтрольВыполнятьВФормеВыборочногоКонтроляКМ Тогда
			// Если КонтрольВыполнятьВФормеВыборочногоКонтроляКМ = Истина,
			// то из текущей формы повторно записывать строки, у которых КонтрольВыполнен = Истина, не нужно, т.к. контроль уже выполнен.
			// Если КонтрольВыполнен = Ложь, то это может значить, что КМ только что был добавлен в документ и нужно провести анализ в процедуре ЗаписатьРезультатыПроверкиКМ.
			// Если КонтрольВыполнятьВФормеВыборочногоКонтроляКМ = Ложь, то есть вероятность, что в значение КонтрольВыполнен могло измениться в документе
			// и нужно провести анализ в процедуре ЗаписатьРезультатыПроверкиКМ.
			КонтрольВыполнен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияСтрокиРезультата.РезультатПроверкиКМ, "КонтрольВыполнен", Ложь);
			Если КонтрольВыполнен Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРезультата = ПараметрыЗаписи.ТаблицаРезультатовПроверкиКМ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЗначенияСтрокиРезультата);
		
	КонецЦикла;
	
	ЗаписатьРезультатыПроверкиКМ(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПолучитьРезультатыПроверкиКМНаФормеПоУмолчанию(Форма)
	
	Если Не МеханизмПроверкиКМПодключен(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ПараметрыПолучения = ПараметрыПолученияРезультатовПроверкиКМ();
	Для Каждого СтрокаНомераУпаковки Из Объект.НомераУпаковок Цикл
		ПараметрыПолучения.НомераУпаковок.Добавить(СтрокаНомераУпаковки.НомерКИЗ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПараметрыПолучения.НомераУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатовПроверкиКМ = ПолучитьРезультатыПроверкиКМ(ПараметрыПолучения);
	Если Не ЗначениеЗаполнено(ТаблицаРезультатовПроверкиКМ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНомераУпаковки Из Объект.НомераУпаковок Цикл
		
		СтрокиРезультатовПроверкиКМ = ТаблицаРезультатовПроверкиКМ.НайтиСтроки(Новый Структура("НомерУпаковкиПроверки", СтрокаНомераУпаковки.НомерКИЗ));
		Если СтрокиРезультатовПроверкиКМ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаНомераУпаковки, СтрокиРезультатовПроверкиКМ[0]);
		
		КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗаполнитьПредставлениеРезультатаПроверкиКМ(Форма, СтрокаНомераУпаковки);
		
	КонецЦикла;
	
	Для Каждого СтрокаТранспортнойУпаковки Из Объект.ТранспортныеУпаковки Цикл
		
		ОтборСоставаТранспортныхУпаковок = Новый Структура("ИдентификаторСтроки", СтрокаТранспортнойУпаковки.ИдентификаторСтроки);
		СтрокиСоставаТранспортнойУпаковки = Объект.СоставТранспортныхУпаковок.НайтиСтроки(ОтборСоставаТранспортныхУпаковок);
		Для Каждого СтрокаСостава Из СтрокиСоставаТранспортнойУпаковки Цикл
			
			ОтборНомеровУпаковок = Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки);
			СтрокиНомеровУпаковок = Объект.НомераУпаковок.НайтиСтроки(ОтборНомеровУпаковок);
			Для Каждого СтрокаНомераУпаковки Из СтрокиНомеровУпаковок Цикл
				
				КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗаполнитьПредставлениеИтоговогоРезультатаПроверкиГруппыКМ(Форма, СтрокаТранспортнойУпаковки, СтрокаНомераУпаковки);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьРезультатыПроверкиКМНаФормеСредствамиРВ(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыПолучения = ПараметрыПолученияРезультатовПроверкиКМ();
	Для Каждого СтрокаНомераУпаковки Из Объект.НомераУпаковок Цикл
		ПараметрыПолучения.НомераУпаковок.Добавить(СтрокаНомераУпаковки.НомерКИЗ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПараметрыПолучения.НомераУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатовПроверкиКМ = ПолучитьРезультатыПроверкиКМ(ПараметрыПолучения);
	РезультатыПроверкиКМПолучен = ЗначениеЗаполнено(ТаблицаРезультатовПроверкиКМ);
	
	Для Каждого СтрокаНомераУпаковки Из Объект.НомераУпаковок Цикл
		
		Если РезультатыПроверкиКМПолучен Тогда
			
			СтрокиРезультатовПроверкиКМ = ТаблицаРезультатовПроверкиКМ.НайтиСтроки(Новый Структура("НомерУпаковкиПроверки", СтрокаНомераУпаковки.НомерКИЗ));
			Если СтрокиРезультатовПроверкиКМ.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаНомераУпаковки, СтрокиРезультатовПроверкиКМ[0]);
				
				КонтрольКодовМаркировкиМДЛПКлиентСервер.ЗаполнитьПредставлениеРезультатаПроверкиКМ(Форма, СтрокаНомераУпаковки);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаНомераУпаковки.КодСтатусаПроверкиКМ       = СтрокаНомераУпаковки.СтатусЛокальнойПроверкиСКЗКМ;
			СтрокаНомераУпаковки.ПояснениеСтатусаПроверкиКМ = СтрокаНомераУпаковки.ПояснениеСтатусаПроверкиСКЗКМ;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область РегламентныеЗадания

// Процедура обработки регламентного задания по очистке результатов проверки КМ.
Процедура ОчисткаРезультатовПроверкиКММДЛП() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаРезультатовПроверкиКММДЛП);
	
	Если НЕ КонтрольКМВключен() Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно по функциональным опциям.'");
	КонецЕсли;
	
	ПараметрыУдаленияРезультатовПроверкиКМ = ПараметрыУдаленияРезультатовПроверкиКМ();
	
	УдалитьРезультатыПроверкиКМ(ПараметрыУдаленияРезультатовПроверкиКМ);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов,
// ИнтеграцияМДЛП.ПриПолученииСпискаШаблонов
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОчисткаРезультатовПроверкиКММДЛП.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков,
// ИнтеграцияМДЛП.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОчисткаРезультатовПроверкиКММДЛП.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
