
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает зависимости констант.
// Для задания зависимости констант в модуле менеджера значения константы нужно определить
// процедуру ПриОпределенииЗависимостиКонстант(ТаблицаЗависимостиКонстант). Для добавления
// зависимости можно воспользоваться вспомогательными функциями:
//  - ОбщегоНазначенияБольничнаяАптека.ДобавитьЗависимостьКонстант
//  - ОбщегоНазначенияБольничнаяАптека.ДобавитьИнвертируемыеКонстанты
//
// Пример:
//
// Процедура ПриОпределенииЗависимостиКонстант(ТаблицаЗависимостиКонстант) Экспорт
// 	
// 	ОбщегоНазначенияБольничнаяАптека.ДобавитьЗависимостьКонстант(ТаблицаЗависимостиКонстант,
// 		"ИспользоватьПолнотекстовыйПоиск"                 , Ложь,
// 		"ИспользоватьПолнотекстовыйПоискПриПодбореТоваров", Ложь);
// 	
// КонецПроцедуры
//
// Возвращаемое значение:
//  ТаблицаЗначений
//    - ИмяРодительскойКонстанты
//    - ЗначениеРодительскойКонстанты
//    - ИмяПодчиненнойКонстанты
//    - ЗначениеПодчиненнойКонстанты
//
Функция ТаблицаЗависимостиКонстант() Экспорт
	
	ТаблицаЗависимостиКонстант = Новый ТаблицаЗначений;
	ТаблицаЗависимостиКонстант.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	ТаблицаЗависимостиКонстант.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	ТаблицаЗависимостиКонстант.Колонки.Добавить("ИмяПодчиненнойКонстанты", Новый ОписаниеТипов("Строка"));
	ТаблицаЗависимостиКонстант.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаЗависимостиКонстант);
	Для Каждого Константа Из Метаданные.Константы Цикл
		ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(
			Константы[Константа.Имя].СоздатьМенеджерЗначения(), "ПриОпределенииЗависимостиКонстант", Параметры);
	КонецЦикла;
	
	// ИнтеграцияС1СДокументооборотом
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант(),
		ТаблицаЗависимостиКонстант);
	// Конец ИнтеграцияС1СДокументооборотом
	
	Возврат ТаблицаЗависимостиКонстант;
	
КонецФункции

// Возвращает признак наличия у константы "подчиненных" констант.
//
// Параметры:
//  ИмяРодительскойКонстанты 	  - Строка - имя константы как оно задано в конфигураторе
//  ЗначениеРодительскойКонстанты - Произвольный - значение константы
//
// Возвращаемое значение:
//  Булево - если Истина, то у константы есть "подчиненные" ей константы.
//
Функция ЕстьПодчиненныеКонстанты(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты) Экспорт
	
	ТаблицаКонстант = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ТаблицаЗависимостиКонстант();
	
	ТаблицаКонстант.Индексы.Добавить("ИмяРодительскойКонстанты");
	ТаблицаКонстант.Индексы.Добавить("ЗначениеРодительскойКонстанты");
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Возврат ПодчиненныеКонстанты.Количество() > 0;
	
КонецФункции

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
// Параметры:
//  ИмяРодительскойКонстанты      - Строка - имя константы как оно задано в конфигураторе
//  ЗначениеРодительскойКонстанты - Произвольный - значение константы
//
// Возвращаемое значение:
//  Структура
//    Ключ     - имя подчиненной константы
//    Значение - значение подчиненной константы, соответствующее значению родительской константы
//
Функция ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты) Экспорт
	
	Результат       = Новый Структура;
	ТаблицаКонстант = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ТаблицаЗависимостиКонстант();
	
	ТаблицаКонстант.Индексы.Добавить("ИмяРодительскойКонстанты");
	ТаблицаКонстант.Индексы.Добавить("ЗначениеРодительскойКонстанты");
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяПодчиненнойКонстанты, СтрокаТаблицы.ЗначениеПодчиненнойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, описывающую "родительские" константы для указанной "подчиненной" константы.
//
// Параметры:
//  ИмяПодчиненнойКонстанты      - Строка - имя константы как оно задано в конфигураторе
//  ЗначениеПодчиненнойКонстанты - Произвольный - значение константы
//
// Возвращаемое значение:
//  Структура
//    Ключ     - имя родительской константы
//    Значение - значение родительской константы, соответствующее значению подчиненной константы
//
Функция ПолучитьКонтролируемыеЗначенияРодительскихКонстант(ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты) Экспорт
	
	Результат       = Новый Структура;
	ТаблицаКонстант = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ТаблицаЗависимостиКонстант();
	
	ТаблицаКонстант.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	ТаблицаКонстант.Индексы.Добавить("ЗначениеПодчиненнойКонстанты");
	
	РодительскиеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты",
			ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты));
	
	Для Каждого СтрокаТаблицы Из РодительскиеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяРодительскойКонстанты, СтрокаТаблицы.ЗначениеРодительскойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, описывающую "родительские" константы для указанных "подчиненных" констант.
//
// Параметры:
//  СтруктураПодчиненныхКонстант - Структура - имена подчиненных констант
//
// Возвращаемое значение:
//  Структура
//    Ключ - имя родительской константы
//
Функция ПолучитьРодительскиеКонстанты(ПодчиненныеКонстант) Экспорт
	
	Результат       = Новый Структура;
	ТаблицаКонстант = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ТаблицаЗависимостиКонстант();
	
	ТаблицаКонстант.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	ИсключаемыеКонстанты = ОбщегоНазначения.СкопироватьРекурсивно(ПодчиненныеКонстант);
	
	Для Каждого ИскомаяКонстанта Из ПодчиненныеКонстант Цикл
		
		РодительскиеКонстанты(ТаблицаКонстант, ИскомаяКонстанта.Ключ, ИсключаемыеКонстанты, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения констант в новой ИБ по умолчанию.
// Для задания значения константы в модуле менеджера значения константы нужно определить
// процедуру ЗначениеПоУмолчанию().
//
// Пример:
//
// Процедура ЗначениеПоУмолчанию() Экспорт
// 	Возврат Перечисления.Периодичность.Месяц;
// КонецПроцедуры
//
// Возвращаемое значение:
//  Структура
//    Ключ     - имя константы.
//    Значение - значение по умолчанию.
//
Функция ПолучитьЗначенияКонстантПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	
	ЗначениеПолучено = Неопределено;
	Для Каждого Константа Из Метаданные.Константы Цикл
		Значение = ОбщегоНазначенияБольничнаяАптека.ВыполнитьНеобязательныйМетодОбъекта(Константы[Константа.Имя].СоздатьМенеджерЗначения(), "ЗначениеПоУмолчанию",, Истина,, ЗначениеПолучено);
		Если ЗначениеПолучено Тогда
			Результат.Вставить(Константа.Имя, Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Дополним структуру константами, которые имеют подчиненные константы.
	ТаблицаКонстант = ОбщегоНазначенияБольничнаяАптекаПовтИсп.ТаблицаЗависимостиКонстант();
	РодительскиеКонстанты = ТаблицаКонстант.ВыгрузитьКолонку("ИмяРодительскойКонстанты");
	ПодчиненныеКонстанты = ТаблицаКонстант.ВыгрузитьКолонку("ИмяПодчиненнойКонстанты");
	
	РодительскиеКонстанты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщегоНазначенияКлиентСервер.РазностьМассивов(РодительскиеКонстанты, ПодчиненныеКонстанты));
	
	МодельДанных = РаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти();
	
	Для Каждого ИмяКонстанты Из РодительскиеКонстанты Цикл
		МетаданныеКонстанты = Метаданные.Константы[ИмяКонстанты];
		Если Результат.Свойство(МетаданныеКонстанты.Имя)
		 Или ОбщегоНазначения.РазделениеВключено() И МодельДанных.Получить(МетаданныеКонстанты.ПолноеИмя()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(МетаданныеКонстанты.Имя, МетаданныеКонстанты.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует список функциональных опций интерфейса в которые включен объект.
//
// Параметры:
//  ИмяОбъекта - Строка - полное имя объекта метаданных
//
// Возвращаемое значение:
//  Строка
//
Функция ФункциональныеОпцииОбъекта(ИмяОбъекта) Экспорт
	
	ИменаОпций = "";
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Для Каждого Опция Из Метаданные.ФункциональныеОпции Цикл
		
		Если Опция.Хранение.Тип.Типы()[0] = Тип("Булево")
		   И Опция.Состав.Содержит(МетаданныеОбъекта)Тогда
			ИменаОпций = ИменаОпций + "," + Опция.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сред(ИменаОпций, 2);
	
КонецФункции

// Возвращает список идентификаторы ролей с правом изменения объекта метаданных.
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//  Массив - идентификаторы ролей.
//
Функция РолиСПравомИзменения(ИмяОбъектаМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОбъектаМетаданных);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПраваРолей.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.ПраваРолей КАК ПраваРолей
	|ГДЕ
	|	НЕ ПраваРолей.Роль.ПометкаУдаления
	|	И ПраваРолей.ПравоИзменение
	|	И ПраваРолей.ОбъектМетаданных = &Идентификатор
	|");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура РодительскиеКонстанты(ТаблицаКонстант, ИскомаяКонстанта, ИсключаемыеКонстанты, Результат)
	
	РодительскиеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура("ИмяПодчиненнойКонстанты", ИскомаяКонстанта));
	
	Для Каждого СтрокаРодителя Из РодительскиеКонстанты Цикл
		
		Если ИсключаемыеКонстанты.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
		ИсключаемыеКонстанты.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
		
		РодительскиеКонстанты(ТаблицаКонстант, ИскомаяКонстанта, ИсключаемыеКонстанты, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
