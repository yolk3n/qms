

#Область ОбработчикиСобытийДокументов

// См. ИнтеграцияМДЛП.ОбработкаЗаполнения.
Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	Если ТипДокумента = Тип("ДокументОбъект.УведомлениеОПриемкеМДЛП") Тогда
		ЗаполнитьУведомлениеОПриемкеМДЛП(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОбОприходованииМДЛП") Тогда
		ЗаполнитьУведомлениеОбОприходованииМДЛП(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УведомлениеОбОтгрузкеМДЛП") Тогда
		ЗаполнитьУведомлениеОбОтгрузкеМДЛП(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
		ЗаполнитьУведомлениеНаОсновании(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// См. ИнтеграцияМДЛП.ОбработкаПроверкиЗаполнения.
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УведомлениеВладельцаОбОприходованииМДЛП") Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Серия");
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияМДЛП.ПередЗаписью.
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ПанельМаркировкиМДЛП

// См. ИнтеграцияМДЛППереопределяемый.*ТекстЗапросаОформите.
Функция УведомлениеТекстЗапросаОформите(Уведомление) Экспорт
	
	Основания = Новый Массив;
	Для Каждого ТипОснования Из Уведомление.Реквизиты.Основание.Тип.Типы() Цикл
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипОснования) Тогда
			Основания.Добавить(Метаданные.НайтиПоТипу(ТипОснования));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Основания.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформления.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовМДЛП КАК СтатусыОформления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыОформленияДокументовМДЛП КАК ДругиеУведомленияПоОснованию
	|	ПО
	|		ДругиеУведомленияПоОснованию.Основание = СтатусыОформления.Основание
	|		И ДругиеУведомленияПоОснованию.СтатусОформления <> ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовМДЛП.НеОформлено)
	|		И НЕ ДругиеУведомленияПоОснованию.Документ В (&СовместноВводимыеУведомления)
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.ОрганизацияКонтрагент = СтатусыОформления.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = СтатусыОформления.МестоДеятельности
	|//СОЕДИНЕНИЯ
	|ГДЕ
	|	СтатусыОформления.Документ = &Уведомление
	|	И СтатусыОформления.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовМДЛП.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовМДЛП.ОформленоЧастично)
	|	)
	|	И ДругиеУведомленияПоОснованию.Основание ЕСТЬ NULL
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ ОрганизацииМДЛП.Организация = &Организация)
	|	И (&МестоДеятельности = НЕОПРЕДЕЛЕНО ИЛИ ОрганизацииМДЛП.МестоДеятельности = &МестоДеятельности)
	|//УСЛОВИЯ
	|";
	
	Соединения = "";
	УсловияСсылка = Новый Массив;
	
	Для Каждого Основание Из Основания Цикл
		
		Если Не ПравоДоступа("Чтение", Основание) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = Основание.ПолноеИмя();
		Псевдоним  = Основание.Имя;
		
		Соединения = Соединения + СтрШаблон("
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		%1 КАК %2
			|	ПО
			|		%2.Ссылка = СтатусыОформления.Основание
			|",
			ИмяТаблицы,
			Псевдоним);
		УсловияСсылка.Добавить(СтрШаблон("%1.Ссылка ЕСТЬ НЕ NULL", Псевдоним));
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Уведомление", СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Уведомление.ПолноеИмя()));
	
	СовместноВводимыеУведомления = Новый Массив;
	СовместноВводимыеУведомления.Добавить(СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Уведомление.ПолноеИмя()));
	Если Уведомление.ПолноеИмя() = Метаданные.Документы.УведомлениеОПередачеНаУничтожениеМДЛП.ПолноеИмя() Тогда
		СовместноВводимыеУведомления.Добавить(СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Метаданные.Документы.УведомлениеОФактеУничтоженияМДЛП.ПолноеИмя()));
	ИначеЕсли Уведомление.ПолноеИмя() = Метаданные.Документы.УведомлениеОФактеУничтоженияМДЛП.ПолноеИмя() Тогда
		СовместноВводимыеУведомления.Добавить(СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Метаданные.Документы.УведомлениеОПередачеНаУничтожениеМДЛП.ПолноеИмя()));
	ИначеЕсли Уведомление.ПолноеИмя() = Метаданные.Документы.УведомлениеОВыбытииМДЛП.ПолноеИмя() Тогда
		СовместноВводимыеУведомления.Добавить(СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП.ПолноеИмя()));
	ИначеЕсли Уведомление.ПолноеИмя() = Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП.ПолноеИмя() Тогда
		СовместноВводимыеУведомления.Добавить(СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Метаданные.Документы.УведомлениеОВыбытииМДЛП.ПолноеИмя()));
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СовместноВводимыеУведомления", СтрСоединить(СовместноВводимыеУведомления, ","));
	
	Если Не ПустаяСтрока(Соединения) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЯ", Соединения);
	КонецЕсли;
	
	Если УсловияСсылка.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УСЛОВИЯ", СтрШаблон("И (%1)", СтрСоединить(УсловияСсылка, " ИЛИ ")) + Символы.ПС + "//УСЛОВИЯ");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ОрганизацияМестоДеятельностиОбъекта(ОрганизацияКонтрагент, Склад = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	СубъектыОбращения.Организация        КАК Организация,
	|	СубъектыОбращения.МестоДеятельности  КАК МестоДеятельности
	|ИЗ
	|	РегистрСведений.СубъектыОбращенияМДЛП КАК СубъектыОбращения
	|ГДЕ
	|	СубъектыОбращения.ОрганизацияКонтрагент = &ОрганизацияКонтрагент
	|");
	Запрос.УстановитьПараметр("ОрганизацияКонтрагент", ОрганизацияКонтрагент);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СубъектыОбращения.ОбъектМестаДеятельности = &Склад
		|";
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	Результат = Новый Структура("Организация, МестоДеятельности");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Возврат Результат;
	
КонецФункции

Функция ОбъектПоОрганизацииМестуДеятельности(Организация, МестоДеятельности, СобственнаяОрганизация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(Субъекты.ОрганизацияКонтрагент)                КАК ОрганизацияКонтрагент,
	|	МАКСИМУМ(Субъекты.ОбъектМестаДеятельности)              КАК ОбъектМестаДеятельности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Субъекты.ОрганизацияКонтрагент)    КАК КоличествоОрганизацияКонтрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Субъекты.ОбъектМестаДеятельности)  КАК КоличествоОбъектМестаДеятельности
	|ИЗ
	|	РегистрСведений.СубъектыОбращенияМДЛП  КАК Субъекты
	|ГДЕ
	|	Субъекты.Организация = &Организация
	|	И (&МестоДеятельности = НЕОПРЕДЕЛЕНО ИЛИ Субъекты.МестоДеятельности = &МестоДеятельности)
	|	И Субъекты.СобственнаяОрганизация = &СобственнаяОрганизация
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МестоДеятельности", ?(ЗначениеЗаполнено(МестоДеятельности), МестоДеятельности, Неопределено));
	Запрос.УстановитьПараметр("СобственнаяОрганизация", СобственнаяОрганизация);
	
	Результат = Новый Структура("Организация, Склад");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.КоличествоОрганизацияКонтрагент = 1 Тогда
			Результат.Организация = Выборка.ОрганизацияКонтрагент;
		КонецЕсли;
		Если Выборка.КоличествоОбъектМестаДеятельности = 1 Тогда
			Результат.Склад = Выборка.ОбъектМестаДеятельности;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураРеквизитыРасчетаСтатусаОформления() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Проведен");
	Реквизиты.Вставить("Дата");
	Реквизиты.Вставить("Номер");
	Реквизиты.Вставить("Ответственный");
	Реквизиты.Вставить("МестоДеятельности");
	Реквизиты.Вставить("Организация");
	
	Возврат Реквизиты;
	
КонецФункции


Функция ЗапросСтатусаОформленияУведомленияОПриемке(ДокументОснование) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                           КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры                      КАК Серия,
	|	ТаблицаТовары.Количество / Коэффициенты.Коэффициент  КАК План,
	|	0                                                    КАК Факт
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	#ДокументПриемкиТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Коэффициенты
	|	ПО
	|		Коэффициенты.Номенклатура = ТаблицаТовары.Номенклатура
	|		И Коэффициенты.ЕдиницаИзмерения = ТаблицаТовары.Номенклатура.Упаковка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ЕСТЬNULL(ТаблицаТовары.СерияНоменклатуры.СерияПромаркированаДляЦелейМДЛП, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	0                               КАК План,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ВЫБОР
	|					КОГДА ОформленныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто)
	|						ТОГДА 0
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Факт
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.Товары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	0                               КАК План,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ВЫБОР
	|					КОГДА ОформленныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто)
	|						ТОГДА 0
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Факт
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УпаковкиТовара
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = УпаковкиТовара.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = УпаковкиТовара.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтрокиУпаковки = УпаковкиТовара.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ОформленныеУпаковки
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКОформлению.Серия          КАК Серия,
	|	СУММА(ТоварыКОформлению.План)    КАК План,
	|	СУММА(ТоварыКОформлению.Факт)    КАК Факт
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт > 0 И Т.План > 0)                КАК ЕстьОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт >= 0 И Т.План > Т.Факт)          КАК ЕстьНеОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План = Т.Факт)                        КАК ЕстьПолностьюОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План < Т.Факт)                        КАК ЕстьОшибкиОформления
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументПриемкиТовары", ДокументОснование.Метаданные().ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСтатусаОформленияУведомленияОбОтгрузке(ДокументОснование) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                           КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры                      КАК Серия,
	|	ТаблицаТовары.Количество / Коэффициенты.Коэффициент  КАК План,
	|	0                                                    КАК Факт
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	#ДокументОтгрузкиТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Коэффициенты
	|	ПО
	|		Коэффициенты.Номенклатура = ТаблицаТовары.Номенклатура
	|		И Коэффициенты.ЕдиницаИзмерения = ТаблицаТовары.Номенклатура.Упаковка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ЕСТЬNULL(ТаблицаТовары.СерияНоменклатуры.СерияПромаркированаДляЦелейМДЛП, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	0                               КАК План,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ВЫБОР
	|					КОГДА ОформленныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто)
	|						ТОГДА 0
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Факт
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.Товары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	//|	ОформленныеТовары.Серия         КАК Серия,
	//|	0                               КАК План,
	//|	ВЫБОР
	//|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком)
	//|			ТОГДА 0
	//|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем)
	//|			ТОГДА 0
	//|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ОформленныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто)
	//|						ТОГДА 0
	//|					ИНАЧЕ 0
	//|				КОНЕЦ
	//|		ИНАЧЕ 1
	//|	КОНЕЦ КАК Факт
	//|ИЗ
	//|	Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК УпаковкиТовара
	//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//|		ОформленныеДокументы КАК ОформленныеДокументы
	//|	ПО
	//|		ОформленныеДокументы.Ссылка = УпаковкиТовара.Ссылка
	//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//|		Документ.УведомлениеОбОтгрузкеМДЛП.СоставТранспортныхУпаковок КАК ОформленныеТовары
	//|	ПО
	//|		ОформленныеТовары.Ссылка = УпаковкиТовара.Ссылка
	//|		И ОформленныеТовары.ИдентификаторСтрокиУпаковки = УпаковкиТовара.ИдентификаторСтроки
	//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//|		Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК ОформленныеУпаковки
	//|	ПО
	//|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	//|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКОформлению.Серия          КАК Серия,
	|	СУММА(ТоварыКОформлению.План)    КАК План,
	|	СУММА(ТоварыКОформлению.Факт)    КАК Факт
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт > 0 И Т.План > 0)                КАК ЕстьОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт >= 0 И Т.План > Т.Факт)          КАК ЕстьНеОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План = Т.Факт)                        КАК ЕстьПолностьюОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План < Т.Факт)                        КАК ЕстьОшибкиОформления
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументОтгрузкиТовары", ДокументОснование.Метаданные().ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСтатусаОформленияУведомленияОбОприходовании(ДокументОснование) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|	И НЕ (ТаблицаДокументы.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|		И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                           КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры                      КАК Серия,
	|	ТаблицаТовары.Количество / Коэффициенты.Коэффициент  КАК План,
	|	0                                                    КАК Факт
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	#ДокументПриемкиТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Коэффициенты
	|	ПО
	|		Коэффициенты.Номенклатура = ТаблицаТовары.Номенклатура
	|		И Коэффициенты.ЕдиницаИзмерения = ТаблицаТовары.Номенклатура.Упаковка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ЕСТЬNULL(ТаблицаТовары.СерияНоменклатуры.СерияПромаркированаДляЦелейМДЛП, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	0                               КАК План,
	|	1                               КАК Факт
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.Товары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|ГДЕ
	|	НЕ ОформленныеУпаковки.Отклонено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	0                               КАК План,
	|	1                               КАК Факт
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК УпаковкиТовара
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = УпаковкиТовара.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = УпаковкиТовара.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтрокиУпаковки = УпаковкиТовара.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ОформленныеУпаковки
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|ГДЕ
	|	НЕ ОформленныеУпаковки.Отклонено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура  КАК Номенклатура,
	|	ТоварыКОформлению.Серия         КАК Серия,
	|	СУММА(ТоварыКОформлению.План)   КАК План,
	|	СУММА(ТоварыКОформлению.Факт)   КАК Факт
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт > 0 И Т.План > 0)                КАК ЕстьОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт >= 0 И Т.План > Т.Факт)          КАК ЕстьНеОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План = Т.Факт)                        КАК ЕстьПолностьюОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План < Т.Факт)                        КАК ЕстьОшибкиОформления
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументПриемкиТовары", ДокументОснование.Метаданные().ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСтатусаОформленияОдностороннихУведомлений(МетаданныеУведомления, ДокументОснование, Суффикс = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	#УведомлениеШапка КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|	И НЕ (ТаблицаДокументы.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|		И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура" + Суффикс + "                           КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры" + Суффикс + "                      КАК Серия,
	|	ТаблицаТовары.Количество" + Суффикс + " / Коэффициенты.Коэффициент  КАК План,
	|	0                             КАК Факт
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	#ДокументТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Коэффициенты
	|	ПО
	|		Коэффициенты.Номенклатура = ТаблицаТовары.Номенклатура" + Суффикс + "
	|		И Коэффициенты.ЕдиницаИзмерения = ТаблицаТовары.Номенклатура" + Суффикс + ".Упаковка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ЕСТЬNULL(ТаблицаТовары.СерияНоменклатуры" + Суффикс + ".СерияПромаркированаДляЦелейМДЛП, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	0                               КАК План,
	|	&Факт                           КАК Факт
	|ИЗ
	|	#УведомлениеНомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		#УведомлениеТовары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|ГДЕ
	|	НЕ ОформленныеУпаковки.Отклонено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура  КАК Номенклатура,
	|	ТоварыКОформлению.Серия         КАК Серия,
	|	СУММА(ТоварыКОформлению.План)   КАК План,
	|	СУММА(ТоварыКОформлению.Факт)   КАК Факт
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт > 0 И Т.План > 0)                КАК ЕстьОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт >= 0 И Т.План > Т.Факт)          КАК ЕстьНеОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План = Т.Факт)                        КАК ЕстьПолностьюОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План < Т.Факт)                        КАК ЕстьОшибкиОформления
	|";
	
	УведомленияСДолями = Новый Массив;
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОВыдачеВОтделенияМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОВыбытииМДЛП);
	
	ТекстДолиУпаковки = "ВЫБОР
	|		КОГДА ОформленныеУпаковки.КоличествоПервичныхУпаковок > 0 И ОформленныеТовары.КоличествоПервичныхУпаковокВоВторичной > 0
	|			ТОГДА ОформленныеУпаковки.КоличествоПервичныхУпаковок / ОформленныеТовары.КоличествоПервичныхУпаковокВоВторичной
	|		ИНАЧЕ 1
	|	КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеШапка", МетаданныеУведомления.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеНомераУпаковок", МетаданныеУведомления.ПолноеИмя() + ".НомераУпаковок");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеТовары", МетаданныеУведомления.ПолноеИмя() + ".Товары");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументТовары", ДокументОснование.Метаданные().ПолноеИмя() + ".Товары");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Факт", ?(УведомленияСДолями.Найти(МетаданныеУведомления) = Неопределено, 1, ТекстДолиУпаковки));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос;
	
КонецФункции


Функция ТребуетсяОформлениеДокументовМДЛП(МетаданныеУведомления, Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Документ.КассаККМ.ТипКассы  КАК ТипКассы
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Основание
		|");
		Запрос.УстановитьПараметр("Основание", Основание);
		
		ВыборкаПоТипуКассы = Запрос.Выполнить().Выбрать();
		ВыборкаПоТипуКассы.Следующий();
		
		Если ВыборкаПоТипуКассы.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
			ЕстьМаркируемаяПродукция = ЕстьМаркируемаяПродукцияМДЛП(Основание);
		Иначе
			ЕстьМаркируемаяПродукция = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПересортицаТоваров") И МетаданныеУведомления = Метаданные.Документы.УведомлениеОПовторномВводеВОборотМДЛП Тогда
		
		ЕстьМаркируемаяПродукция = ЕстьМаркируемаяПродукцияМДЛП(Основание,, "СерияНоменклатурыОприходование");
		
	Иначе
		
		ЕстьМаркируемаяПродукция = ЕстьМаркируемаяПродукцияМДЛП(Основание);
		
	КонецЕсли;
	
	Возврат ЕстьМаркируемаяПродукция;
	
КонецФункции

Функция ЕстьМаркируемаяПродукцияМДЛП(ДокументСсылка, ИмяТабличнойЧасти = "Товары", ИмяКолонки = "СерияНоменклатуры") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьМаркируемаяПродукция
	|ИЗ
	|	#Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		ТаблицаТовары.СерияНоменклатуры = СправочникСерии.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументСсылка
	|	И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СерияНоменклатуры", ИмяКолонки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Товары", ДокументСсылка.Метаданные().ПолноеИмя() + "." + ИмяТабличнойЧасти);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


Функция ПолучитьКоличествоВозможныхОснованийДляУведомления(Объект) Экспорт
	
	КоличествоВозможныхОснований = 0;
	
	ТипУведомления = ТипЗнч(Объект.Ссылка);
	Если ТипУведомления = Тип("ДокументСсылка.УведомлениеОбОприходованииМДЛП") Тогда
		
		Запрос = Новый Запрос(ТекстЗапросаДокументовПоступленийДляУведомлений(ТипУведомления));
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("МестоДеятельности", Объект.МестоДеятельности);
		Запрос.УстановитьПараметр("Грузоотправитель", Объект.Грузоотправитель);
		Запрос.УстановитьПараметр("ПустоеМестоДеятельности", Справочники.МестаДеятельностиМДЛП.ПустаяСсылка());
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "МестоДеятельностиГрузоотправителя") Тогда
			Запрос.УстановитьПараметр("МестоДеятельностиГрузоотправителя", Объект.МестоДеятельностиГрузоотправителя);
		Иначе
			Запрос.УстановитьПараметр("МестоДеятельностиГрузоотправителя", Неопределено);
		КонецЕсли;
		
		КоличествоВозможныхОснований = Запрос.Выполнить().Выбрать().Количество();
		
	ИначеЕсли ТипУведомления = Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") Тогда
		
		Запрос = Новый Запрос(ТекстЗапросаДокументовПоступленийДляУведомлений(ТипУведомления));
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("МестоДеятельности", Объект.МестоДеятельности);
		Запрос.УстановитьПараметр("Грузоотправитель", Объект.Грузоотправитель);
		Запрос.УстановитьПараметр("ПустоеМестоДеятельности", Справочники.МестаДеятельностиМДЛП.ПустаяСсылка());
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "МестоДеятельностиГрузоотправителя") Тогда
			Запрос.УстановитьПараметр("МестоДеятельностиГрузоотправителя", Объект.МестоДеятельностиГрузоотправителя);
		Иначе
			Запрос.УстановитьПараметр("МестоДеятельностиГрузоотправителя", Неопределено);
		КонецЕсли;
		
		КоличествоВозможныхОснований = Запрос.Выполнить().Выбрать().Количество();
		
	КонецЕсли;
	
	Возврат КоличествоВозможныхОснований;
	
КонецФункции

// Возвращает текст запроса для получения документов ПоступлениеТоваров, которые могут быть связаны с Уведомлением.
// В запросе устанавливается отбор по тем документам-поступлениям, которые еще не связаны с другими Уведомлениями.
//
// Параметры:
//  ТипУведомления - Тип - тип документа Уведомления.
//
// Возвращаемое значение:
//  ТекстЗапроса - Строка
//
Функция ТекстЗапросаДокументовПоступленийДляУведомлений(ТипУведомления) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СобственныеСубъекты.ОрганизацияКонтрагент    КАК Организация,
	|	СобственныеСубъекты.ОбъектМестаДеятельности  КАК Склад,
	|	Субъекты.ОрганизацияКонтрагент               КАК Контрагент
	|ПОМЕСТИТЬ Субъекты
	|ИЗ
	|	РегистрСведений.СубъектыОбращенияМДЛП КАК СобственныеСубъекты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК Субъекты
	|	ПО
	|		Субъекты.Организация = &Грузоотправитель
	|		И (&МестоДеятельностиГрузоотправителя = НЕОПРЕДЕЛЕНО
	|			ИЛИ Субъекты.МестоДеятельности = &МестоДеятельностиГрузоотправителя
	|			ИЛИ Субъекты.МестоДеятельности = &ПустоеМестоДеятельности)
	|		И НЕ Субъекты.СобственнаяОрганизация
	|ГДЕ
	|	СобственныеСубъекты.Организация = &Организация
	|	И СобственныеСубъекты.МестоДеятельности = &МестоДеятельности
	|	И СобственныеСубъекты.СобственнаяОрганизация
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		//УСЛОВИЕ_СОЕДИНЕНИЯ
	|ГДЕ
	|	НЕ ПоступлениеТоваров.ПометкаУдаления
	|	И (ПоступлениеТоваров.Организация, ПоступлениеТоваров.Склад, ПоступлениеТоваров.Контрагент) В
	|		(ВЫБРАТЬ
	|			Т.Организация, Т.Склад, Т.Контрагент
	|		ИЗ
	|			Субъекты КАК Т)
	|	//УСЛОВИЕ_ОТБОРА
	|";
	
	МетаданныеУведомленийОснований = Новый Массив;
	ТипыОснованияУведомления = Метаданные.НайтиПоТипу(ТипУведомления).Реквизиты.Основание.Тип.Типы();
	Для Каждого ТипУведомленияПоиска Из Метаданные.ОпределяемыеТипы.ДокументИнформированияМДЛП.Тип.Типы() Цикл
		МетаданныеУведомления = Метаданные.НайтиПоТипу(ТипУведомленияПоиска);
		ТипОснованияУведомления = МетаданныеУведомления.Реквизиты.Основание.Тип;
		Для Каждого ТипОснования Из ТипыОснованияУведомления Цикл
			Если ТипОснованияУведомления.СодержитТип(ТипОснования) Тогда
				Если МетаданныеУведомленийОснований.Найти(МетаданныеУведомления) = Неопределено Тогда
					МетаданныеУведомленийОснований.Добавить(МетаданныеУведомления);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЧастиУсловияСоединения = Новый Массив;
	ЧастиУсловияОтбора = Новый Массив;
	Для Каждого МетаданныеУведомления Из МетаданныеУведомленийОснований Цикл
		ЧастиУсловияСоединения.Добавить(СтрШаблон("
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		%1 КАК %2
			|	ПО
			|		%2.Основание = ПоступлениеТоваров.Ссылка
			|", МетаданныеУведомления.ПолноеИмя(), МетаданныеУведомления.Имя));
		ЧастиУсловияОтбора.Добавить(СтрШаблон("
			|И %1.Ссылка ЕСТЬ NULL
			|", МетаданныеУведомления.Имя));
	КонецЦикла;
	
	Если ЧастиУсловияСоединения.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УСЛОВИЕ_СОЕДИНЕНИЯ", СтрСоединить(ЧастиУсловияСоединения));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УСЛОВИЕ_ОТБОРА", СтрСоединить(ЧастиУсловияОтбора));
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЕстьРасхожденияМеждуУведомлениемИОснованием(Уведомление, Основание) Экспорт
	
	ТекстЗапроса = "";
	ТипУведомления = ТипЗнч(Уведомление);
	Если ТипУведомления = Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСостоянияУведомленияОПриемке();
	ИначеЕсли ТипУведомления = Тип("ДокументСсылка.УведомлениеОбОприходованииМДЛП") Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСостоянияУведомленияОбОприходовании();
	ИначеЕсли ТипУведомления = Тип("ДокументСсылка.УведомлениеОПеремещенииМДЛП") Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСостоянияУведомленияОПеремещении();
	Иначе
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСостоянияУведомления(Уведомление.Метаданные());
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                           КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры                      КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество / Коэффициенты.Коэффициент КАК ЧИСЛО(15, 5))  КАК План,
	|	0                                                    КАК Факт
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	#ДокументТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Коэффициенты
	|	ПО
	|		Коэффициенты.Номенклатура = ТаблицаТовары.Номенклатура
	|		И Коэффициенты.ЕдиницаИзмерения = ТаблицаТовары.Номенклатура.Упаковка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ЕСТЬNULL(ТаблицаТовары.СерияНоменклатуры.СерияПромаркированаДляЦелейМДЛП, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                           КАК Номенклатура,
	|	ТаблицаТовары.Серия                                  КАК Серия,
	|	0                                                    КАК План,
	|	ТаблицаТовары.Количество                             КАК Факт
	|ИЗ
	|	ДанныеУведомления КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКОформлению.Серия          КАК Серия,
	|	ВЫРАЗИТЬ(СУММА(ТоварыКОформлению.План) КАК ЧИСЛО(15, 3))  КАК План,
	|	ВЫРАЗИТЬ(СУММА(ТоварыКОформлению.Факт) КАК ЧИСЛО(15, 3))  КАК Факт
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт > 0 И Т.План > 0)                КАК ЕстьОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.Факт >= 0 И Т.План > Т.Факт)          КАК ЕстьНеОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План = Т.Факт)                        КАК ЕстьПолностьюОформленныеТовары,
	|	1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Результат КАК Т ГДЕ Т.План < Т.Факт)                        КАК ЕстьОшибкиОформления
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументТовары", Основание.Метаданные().ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЕстьОшибкиОформления;
	
КонецФункции

Функция ТекстЗапросаСостоянияУведомленияОПриемке()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Ссылка = &Уведомление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ВЫБОР
	|					КОГДА ОформленныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто)
	|						ТОГДА 0
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ДанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.Товары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем)
	|			ТОГДА 0
	|		КОГДА ОформленныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|			ТОГДА ВЫБОР
	|					КОГДА ОформленныеДокументы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто)
	|						ТОГДА 0
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Факт
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УпаковкиТовара
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = УпаковкиТовара.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = УпаковкиТовара.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтрокиУпаковки = УпаковкиТовара.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ОформленныеУпаковки
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияУведомленияОбОприходовании()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Ссылка = &Уведомление
	|	И НЕ (ТаблицаДокументы.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|		И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	1                               КАК Количество
	|ПОМЕСТИТЬ ДанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.Товары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|ГДЕ
	|	НЕ ОформленныеУпаковки.Отклонено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	1                               КАК Факт
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК УпаковкиТовара
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = УпаковкиТовара.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = УпаковкиТовара.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтрокиУпаковки = УпаковкиТовара.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ОформленныеУпаковки
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|ГДЕ
	|	НЕ ОформленныеУпаковки.Отклонено
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияУведомленияОПеремещении()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.Отклонено
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ДанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП.НомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.Товары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.Отклонено
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП.НомераУпаковок КАК УпаковкиТовара
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.СоставТранспортныхУпаковок КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = УпаковкиТовара.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтрокиУпаковки = УпаковкиТовара.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.ТранспортныеУпаковки КАК ОформленныеУпаковки
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостоянияУведомления(МетаданныеУведомления)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ВЫБОР
	|		КОГДА ОформленныеУпаковки.Отклонено
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ОформленныеТовары.КоличествоПервичныхУпаковокВоВторичной > 0 И ОформленныеУпаковки.КоличествоПервичныхУпаковок > 0
	|					ТОГДА ВЫРАЗИТЬ(ОформленныеУпаковки.КоличествоПервичныхУпаковок / ОформленныеТовары.КоличествоПервичныхУпаковокВоВторичной КАК ЧИСЛО(15, 5))
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ДанныеУведомления
	|ИЗ
	|	#УведомлениеНомераУпаковок КАК ОформленныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		#УведомлениеТовары КАК ОформленныеТовары
	|	ПО
	|		ОформленныеТовары.Ссылка = ОформленныеУпаковки.Ссылка
	|		И ОформленныеТовары.ИдентификаторСтроки = ОформленныеУпаковки.ИдентификаторСтроки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеНомераУпаковок", МетаданныеУведомления.ПолноеИмя() + ".НомераУпаковок");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеТовары", МетаданныеУведомления.ПолноеИмя() + ".Товары");
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ВозможныеУведомленияПоОснованию(МетаданныеУведомления, Основание) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Уведомления.Ссылка КАК Ссылка
	|ИЗ
	|	#Уведомления КАК Уведомления
	|ГДЕ
	|	НЕ Уведомления.ПометкаУдаления
	|	И Уведомления.Организация = &Организация
	|	И Уведомления.МестоДеятельности = &МестоДеятельности
	|	И Уведомления.Основание В (&ПустоеОснование)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Уведомления", МетаданныеУведомления.ПолноеИмя());
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Организация");
	
	МетаданныеОснования = Основание.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОснования) Тогда
		ИменаРеквизитов.Вставить("Склад");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОснования) Тогда
		ИменаРеквизитов.Вставить("Склад", "СкладОтправитель");
	Иначе
		ИменаРеквизитов.Вставить("Склад", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеОснования) Тогда
		ИменаРеквизитов.Вставить("НомерДокумента", "НомерВходящегоДокумента");
	Иначе
		ИменаРеквизитов.Вставить("НомерДокумента", "Номер");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", МетаданныеОснования) Тогда
		ИменаРеквизитов.Вставить("ДатаДокумента", "ДатаВходящегоДокумента");
	Иначе
		ИменаРеквизитов.Вставить("ДатаДокумента", "Дата");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОснования) Тогда
		ИменаРеквизитов.Вставить("Контрагент");
	Иначе
		ИменаРеквизитов.Вставить("Контрагент", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, ИменаРеквизитов);
	
	ДанныеОрганизации = ОрганизацияМестоДеятельностиОбъекта(Реквизиты.Организация, Реквизиты.Склад);
	ДанныеКонтрагента = ОрганизацияМестоДеятельностиОбъекта(Реквизиты.Контрагент);
	
	ПустоеОснование = Новый Массив;
	ПустоеОснование.Добавить(МетаданныеУведомления.Реквизиты.Основание.Тип.ПривестиЗначение());
	Для Каждого Тип Из МетаданныеУведомления.Реквизиты.Основание.Тип.Типы() Цикл
		ПустоеОснование.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(Тип).ПолноеИмя()).ПустаяСсылка());
	КонецЦикла;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерДокумента", МетаданныеУведомления)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаДокумента", МетаданныеУведомления) Тогда
		Если ЗначениеЗаполнено(Реквизиты.НомерДокумента) И ЗначениеЗаполнено(Реквизиты.ДатаДокумента) Тогда
			Если МетаданныеУведомления.Реквизиты.ДатаДокумента.Тип = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И Уведомления.НомерДокумента = &НомерДокумента
				|	И Уведомления.ДатаДокумента = НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	И Уведомления.НомерДокумента = &НомерДокумента
				|	И Уведомления.ДатаДокумента = &ДатаДокумента
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МестоДеятельностиКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКонтрагента, "МестоДеятельности");
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Грузоотправитель", МетаданныеУведомления)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОснования) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Уведомления.Грузоотправитель = &Контрагент
		|";
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("МестоДеятельностиГрузоотправителя", МетаданныеУведомления) И ЗначениеЗаполнено(МестоДеятельностиКонтрагента) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И Уведомления.МестоДеятельностиГрузоотправителя = &МестоДеятельностиКонтрагента
			|";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "Организация"));
	Запрос.УстановитьПараметр("МестоДеятельности", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "МестоДеятельности"));
	Запрос.УстановитьПараметр("Контрагент", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКонтрагента, "Организация"));
	Запрос.УстановитьПараметр("МестоДеятельностиКонтрагента", МестоДеятельностиКонтрагента);
	Запрос.УстановитьПараметр("ПустоеОснование"         , ПустоеОснование);
	Запрос.УстановитьПараметр("НомерДокумента"          , Реквизиты.НомерДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента"           , Реквизиты.ДатаДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаполнитьНоменклатуруВТабличнойЧасти(ТаблицаТовары) Экспорт
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки  КАК НомерСтроки,
	|	ТаблицаТовары.GTIN         КАК GTIN
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	GTIN
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ТаблицаТовары.GTIN                      КАК GTIN,
	|	ШтрихкодыНоменклатуры.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения  КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|	ПО
	|		ШтрихкодыНоменклатуры.Штрихкод = ТаблицаТовары.GTIN
	|");
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары.Выгрузить(, "НомерСтроки, GTIN"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаТовары[Выборка.НомерСтроки - 1];
		СтрокаТаблицы.Номенклатура = Выборка.Номенклатура;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаТовары[0], "КоличествоУпаковок") Тогда
		Количество = ТаблицаТовары.ВыгрузитьКолонку("Количество");
		ТаблицаТовары.ЗагрузитьКолонку(Количество, "КоличествоУпаковок");
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьДолиУпаковокВТабличныхЧастях(ТабицаТовары, ТаблицаНомераУпаковок) Экспорт
	
	Если ТабицаТовары.Количество() = 0 Или ТаблицаНомераУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТабицаТовары Цикл
		
		РассчитываемыеСтроки = Новый Массив;
		
		Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки);
		СтрокиУпаковок = ТаблицаНомераУпаковок.НайтиСтроки(Отбор);
		Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУпаковки.ДоляУпаковки) Тогда
				Прервать;
			КонецЕсли;
			
			РассчитываемыеСтроки.Добавить(СтрокаУпаковки);
			
			ПозицияРазделителя = СтрНайти(СтрокаУпаковки.ДоляУпаковки, "/");
			Знаменатель = Число(Сред(СтрокаУпаковки.ДоляУпаковки, ПозицияРазделителя + 1));
			
			Если СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
				СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = Знаменатель;
			Иначе
				СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = ВычислитьНаименьшееОбщееКратное(СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной, Знаменатель);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаУпаковки Из РассчитываемыеСтроки Цикл
			
			ПозицияРазделителя = СтрНайти(СтрокаУпаковки.ДоляУпаковки, "/");
			Числитель = Число(Лев(СтрокаУпаковки.ДоляУпаковки, ПозицияРазделителя - 1));
			Знаменатель = Число(Сред(СтрокаУпаковки.ДоляУпаковки, ПозицияРазделителя + 1));
			
			СтрокаУпаковки.КоличествоПервичныхУпаковок = Числитель * СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной / Знаменатель;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьНаименьшееОбщееКратное(Знач Число1, Знач Число2)
	
	Если Число1 = 0 Или Число2 = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Число1 = Число2 Тогда
		Возврат Число1;
	ИначеЕсли Число1 % Число2 = 0 Тогда
		Возврат Число1;
	ИначеЕсли Число2 % Число1 = 0 Тогда
		Возврат Число2;
	Иначе
		
		Произведение = Число1 * Число2;
		
		Число1 = ?(Число1 > 0, Число1, -Число1);
		Число2 = ?(Число2 > 0, Число2, -Число2);
		
		// Вычисление наибольшего общего делителя
		Пока Число1 <> Число2 Цикл
			
			Разность = Число1 - Число2;
			Если Разность > 0 Тогда
				Число1 = Разность;
			Иначе
				Число2 = -Разность;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Произведение / Число1;
		
	КонецЕсли;
	
КонецФункции


Процедура ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		ОбъектСсылка = Форма.Объект.Ссылка;
	Иначе
		ОбъектСсылка = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ИнвентаризацияПотребительскихУпаковокМДЛП") Тогда
		ОбработатьШтрихкодыВИнвентаризацииПотребительскихУпаковок(Форма, ДанныеДляОбработки, КэшированныеЗначения);
	Иначе
		ОбработатьШтрихкодыСтандартно(Форма, ДанныеДляОбработки, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьШтрихкодыСтандартно(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	Модифицированность = Ложь;
	
	ПараметрыЗаполнения = ДанныеДляОбработки.ДействияСИзмененнымиСтроками;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		ОбъектСсылка = Форма.Объект.Ссылка;
	Иначе
		ОбъектСсылка = Неопределено;
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Форма.Объект.Товары;
	ТабличнаяЧастьНомераУпаковок = Форма.Объект.НомераУпаковок;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	КонецЕсли;
	
	Если ДанныеДляОбработки.Штрихкоды.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеПоШтрихкодамУпаковок(ДанныеДляОбработки.Штрихкоды, КэшированныеЗначения, ДанныеДляОбработки);
	КонецЕсли;
	
	Для Каждого ТекущийШтрихкод Из ДанныеДляОбработки.Штрихкоды Цикл
		
		Если ТабличнаяЧастьНомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", ТекущийШтрихкод.SGTIN)).Количество() <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Упаковка с номером %1 уже присутствует в документе'"),
				ТекущийШтрихкод.SGTIN);
			ОбщегоНазначения.СообщитьПользователю(Текст, ОбъектСсылка,, "Объект");
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекущийШтрихкод.Штрихкод];
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			ОтборСтрок = Новый Структура("Номенклатура, Серия");
			ОтборСтрок.Номенклатура = ДанныеШтрихкода.Номенклатура;
			ОтборСтрок.Серия        = ДанныеШтрихкода.СерияНоменклатуры;
		Иначе
			ОтборСтрок = Новый Структура("GTIN, Серия");
			ОтборСтрок.GTIN  = ТекущийШтрихкод.GTIN;
			ОтборСтрок.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборСтрок, ДанныеДляОбработки.ОтборСтрок, Истина);
		НайденныеСтроки = ТабличнаяЧастьТовары.НайтиСтроки(ОтборСтрок);
		
		// Повторим поиск без учета серии.
		Если НайденныеСтроки.Количество() = 0 И ДанныеДляОбработки.ПовторитьПоискТовараБезУчетаСерии Тогда
			ОтборСтрокБезСерии = ОбщегоНазначения.СкопироватьРекурсивно(ОтборСтрок);
			ОтборСтрокБезСерии.Удалить("Серия");
			НайденныеСтроки = ТабличнаяЧастьТовары.НайтиСтроки(ОтборСтрокБезСерии);
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТовара = ТабличнаяЧастьТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, ОтборСтрок);
			СтрокаТовара.GTIN = ТекущийШтрихкод.GTIN;
			СтрокаТовара.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовара, "КоличествоПервичныхУпаковокВоВторичной") Тогда
				УпаковкиНоменклатуры = НоменклатураСервер.ПолучитьУпаковкиНоменклатуры(СтрокаТовара.Номенклатура);
				Если УпаковкиНоменклатуры.Количество() > 0 Тогда
					ПервичнаяУпаковка = УпаковкиНоменклатуры[УпаковкиНоменклатуры.ВГраница()];
					Если ПервичнаяУпаковка = СтрокаТовара.ЕдиницаИзмерения Тогда
						КоличествоПервичных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.ЕдиницаИзмерения, "КоличествоВУпаковке");
					Иначе
						КоличествоБазовых = НоменклатураСервер.ПересчитатьКоличествоВБазовыхЕдиницах(СтрокаТовара.Номенклатура, 1, СтрокаТовара.ЕдиницаИзмерения);
						КоличествоПервичных = НоменклатураСервер.ПересчитатьКоличествоВЕдиницахИзмерения(СтрокаТовара.Номенклатура, КоличествоБазовых, ПервичнаяУпаковка);
					КонецЕсли;
					СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичных;
				КонецЕсли;
				Если СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
					СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = 1;
				КонецЕсли;
			КонецЕсли;
			КоличествоУпаковок = 0;
			
			Если ДанныеДляОбработки.СообщатьОДобавленииИзмененииСтрокиТоваров Тогда
				// Выводим пользователю сообщение о добавлении новой строки в табличную часть Товары.
				Текст = НСтр("ru = 'Добавлена новая строка товаров.'");
				Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
					Текст = Текст + " " + НСтр("ru = 'Номенклатура с GTIN ""%1"" обнаружена в информационной базе, но упаковка с номером ""%2"" не связана с товаром в табличной части.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТовара.GTIN, ТекущийШтрихкод.SGTIN);
				Иначе
					Текст = Текст + " " + НСтр("ru = 'Номенклатура с GTIN ""%1"" не обнаружена в информационной базе.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТовара.GTIN);
				КонецЕсли;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "Номенклатура");
				ОбщегоНазначения.СообщитьПользователю(Текст, ОбъектСсылка, Поле, "Объект");
			КонецЕсли;
			
		Иначе
			
			// Выбираем строку товара, у которой количество упаковок (с учетом текущей) не превышает указанное пользователем количество.
			// Если такой строки нет, то выбираем последнюю строку из найденных по отбору.
			Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
				КоличествоУпаковок = ТабличнаяЧастьНомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки)).Количество();
				Если СтрокаТовара.Количество >= КоличествоУпаковок + 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаТовара.GTIN = ТекущийШтрихкод.GTIN;
			
		КонецЕсли;
		
		Если СтрокаТовара.Количество < КоличествоУпаковок + 1 Тогда
			
			СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
			СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
			Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
				СтрокаТовара.СуммаНДС = ?(СтрокаТовара.Количество = 1, СтрокаТовара.СуммаНДС, СтрокаТовара.Количество * СтрокаТовара.СуммаНДС / (СтрокаТовара.Количество - 1));
			КонецЕсли;
			
			Если ДанныеДляОбработки.СообщатьОДобавленииИзмененииСтрокиТоваров Тогда
				// Не выводим сообщение об изменении количества товаров для новой строки, т.к. сообщение о добавлении строки уже выводилось выше.
				ЭтоНоваяСтрока = СтрокаТовара.Количество = 1;
				Если Не ЭтоНоваяСтрока Тогда
					// Выводим пользователю сообщение об увеличении количества товаров в строке табличной часть Товары.
					Текст = НСтр("ru = 'Изменилось количество упаковок в строке %1'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТовара.НомерСтроки);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "КоличествоУпаковок");
					ОбщегоНазначения.СообщитьПользователю(Текст, ОбъектСсылка, Поле, "Объект");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаУпаковки = ТабличнаяЧастьНомераУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, ТекущийШтрихкод);
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКиЗ = ТекущийШтрихкод.SGTIN;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаУпаковки, "СостояниеПодтверждения") Тогда
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	КэшированныеЗначения.Штрихкоды.Очистить();
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Модифицированность;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьШтрихкодыВИнвентаризацииПотребительскихУпаковок(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	Модифицированность = Ложь;
	
	ПараметрыЗаполнения = ДанныеДляОбработки.ДействияСИзмененнымиСтроками;
	
	ОбъектСсылка = Форма.Объект.Ссылка;
	ТабличнаяЧастьТовары = Форма.Объект.Товары;
	ТабличнаяЧастьНомераУпаковок = Форма.Объект.НомераУпаковок;
	
	Если Форма.РежимЗаполненияДанных = Форма.РежимыЗаполненияДанных.ЗаполнитьПоОстаткам Тогда
		
		Для Каждого ТекущийШтрихкод Из ДанныеДляОбработки.Штрихкоды Цикл
			
			НайденныеУпаковки = ТабличнаяЧастьНомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", ТекущийШтрихкод.SGTIN));
			Если НайденныеУпаковки.Количество() > 0 Тогда
				СтрокаУпаковки = НайденныеУпаковки[0];
				Если СтрокаУпаковки.ФактическоеНаличие Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Упаковка с номером %1 уже присутствует в документе'"), ТекущийШтрихкод.SGTIN);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НомераУпаковок", СтрокаУпаковки.НомерСтроки, "НомерКиЗ");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, Поле, "Объект");
					Продолжить;
				КонецЕсли;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Упаковка с номером %1 не обнаружена в документе. Добавление новых строк недоступно в текущем режиме заполнения.'"), ТекущийШтрихкод.SGTIN);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			СтрокаУпаковки.ФактическоеНаличие = Истина;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
	ИначеЕсли Форма.РежимЗаполненияДанных = Форма.РежимыЗаполненияДанных.ЗаполнитьПоФакту Тогда
		
		Если КэшированныеЗначения = Неопределено Тогда
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
		КонецЕсли;
		
		Если ДанныеДляОбработки.Штрихкоды.Количество() > 0 Тогда
			ОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеПоШтрихкодамУпаковок(ДанныеДляОбработки.Штрихкоды, КэшированныеЗначения, ДанныеДляОбработки);
		КонецЕсли;
		
		Для Каждого ТекущийШтрихкод Из ДанныеДляОбработки.Штрихкоды Цикл
			
			НайденныеУпаковки = ТабличнаяЧастьНомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", ТекущийШтрихкод.SGTIN));
			Если НайденныеУпаковки.Количество() > 0 Тогда
				СтрокаУпаковки = НайденныеУпаковки[0];
				Если СтрокаУпаковки.ФактическоеНаличие Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Упаковка с номером %1 уже присутствует в документе'"), ТекущийШтрихкод.SGTIN);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НомераУпаковок", СтрокаУпаковки.НомерСтроки, "НомерКиЗ");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, Поле, "Объект");
					Продолжить;
				КонецЕсли;
			Иначе
				СтрокаУпаковки = ТабличнаяЧастьНомераУпаковок.Добавить();
			КонецЕсли;
			
			ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекущийШтрихкод.Штрихкод];
			Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				ОтборСтрок = Новый Структура("Номенклатура, Серия");
				ОтборСтрок.Номенклатура = ДанныеШтрихкода.Номенклатура;
				ОтборСтрок.Серия        = ДанныеШтрихкода.СерияНоменклатуры;
			Иначе
				ОтборСтрок = Новый Структура("GTIN, Серия");
				ОтборСтрок.GTIN  = ТекущийШтрихкод.GTIN;
				ОтборСтрок.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборСтрок, ДанныеДляОбработки.ОтборСтрок, Истина);
			НайденныеСтроки = ТабличнаяЧастьТовары.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаТовара = ТабличнаяЧастьТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовара, ОтборСтрок);
				СтрокаТовара.GTIN = ТекущийШтрихкод.GTIN;
				СтрокаТовара.ЕдиницаИзмерения = ДанныеШтрихкода.ЕдиницаИзмерения;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				
				КоличествоУпаковок = 0;
				
				Если ДанныеДляОбработки.СообщатьОДобавленииИзмененииСтрокиТоваров Тогда
					// Выводим пользователю сообщение о добавлении новой строки в табличную часть Товары.
					Текст = НСтр("ru = 'Добавлена новая строка товаров.'");
					Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
						Текст = Текст + " " + НСтр("ru = 'Номенклатура с GTIN ""%1"" обнаружена в информационной базе, но упаковка с номером ""%2"" не связана с товаром в табличной части.'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТовара.GTIN, ТекущийШтрихкод.SGTIN);
					Иначе
						Текст = Текст + " " + НСтр("ru = 'Номенклатура с GTIN ""%1"" не обнаружена в информационной базе.'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТовара.GTIN);
					КонецЕсли;
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "Номенклатура");
					ОбщегоНазначения.СообщитьПользователю(Текст, ОбъектСсылка, Поле, "Объект");
				КонецЕсли;
				
			Иначе
				
				// Выбираем строку товара, у которой количество упаковок (с учетом текущей) не превышает указанное пользователем количество.
				// Если такой строки нет, то выбираем последнюю строку из найденных по отбору.
				Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
					КоличествоУпаковок = ТабличнаяЧастьНомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки)).Количество();
					Если СтрокаТовара.Количество >= КоличествоУпаковок + 1 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СтрокаТовара.GTIN = ТекущийШтрихкод.GTIN;
				
			КонецЕсли;
			
			Если СтрокаТовара.Количество < КоличествоУпаковок + 1 Тогда
				
				СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
				СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
				
				Если ДанныеДляОбработки.СообщатьОДобавленииИзмененииСтрокиТоваров Тогда
					// Не выводим сообщение об изменении количества товаров для новой строки, т.к. сообщение о добавлении строки уже выводилось выше.
					ЭтоНоваяСтрока = СтрокаТовара.Количество = 1;
					Если Не ЭтоНоваяСтрока Тогда
						// Выводим пользователю сообщение об увеличении количества товаров в строке табличной часть Товары.
						Текст = НСтр("ru = 'Изменилось количество упаковок в строке %1'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТовара.НомерСтроки);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "КоличествоУпаковок");
						ОбщегоНазначения.СообщитьПользователю(Текст, ОбъектСсылка, Поле, "Объект");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеДляОбработки.ЗаполнитьНезаполненныеНомерСерииИГоденДо
				И Не ЗначениеЗаполнено(СтрокаТовара.НомерСерии)
				И Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
				СтрокаТовара.НомерСерии = ДанныеШтрихкода.НомерСерии;
				СтрокаТовара.ГоденДо    = ДанныеШтрихкода.ГоденДо;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаУпаковки, ТекущийШтрихкод);
			СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
			СтрокаУпаковки.НомерКиЗ = ТекущийШтрихкод.SGTIN;
			СтрокаУпаковки.ФактическоеНаличие = Истина;
			СтрокаУпаковки.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(СтрокаУпаковки.НомерКиЗ);
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Модифицированность;
	КонецЕсли;
	
КонецПроцедуры


Процедура СохранитьРезультатСопоставленияУпаковокТоваровОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		ПрименитьРезультатСопоставленияДляУпаковокТовара(Источник.Ссылка);
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияПотребительскихУпаковокМДЛП") Тогда
		ПрименитьРезультатСопоставленияДляУпаковокТовараИзИнвентаризации(Источник.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(Источник.Основание) Тогда
		ПрименитьРезультатСопоставленияДляУпаковокТовара(Источник.Основание);
	ИначеЕсли Не ЗначениеЗаполнено(Источник.Основание) Тогда
		ПрименитьРезультатСопоставленияДляУпаковокТовараИзУведомления(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьРезультатСопоставленияДляУпаковокТовара(Поступление)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Уведомления.Ссылка КАК Документ	
	|ПОМЕСТИТЬ УведомлениеОПриемке
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Уведомления
	|ГДЕ
	|	Уведомления.Основание = &Поступление
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уведомления.Ссылка КАК Документ	
	|ПОМЕСТИТЬ УведомлениеОПеремещении
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП КАК Уведомления
	|ГДЕ
	|	Уведомления.Основание = &Поступление
	|	И Уведомления.Операция = &Операция
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уведомления.Ссылка КАК Документ	
	|ПОМЕСТИТЬ УведомлениеОбОприходовании
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК Уведомления
	|ГДЕ
	|	Уведомления.Основание = &Поступление
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	// Уведомления о приемке
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ПОМЕСТИТЬ УпаковкиУведомления
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено)
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (ВЫБРАТЬ Документ ИЗ УведомлениеОПриемке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И ТранспортныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено)
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (ВЫБРАТЬ Документ ИЗ УведомлениеОПриемке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Уведомления о перемещении
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ НомераУпаковок.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (ВЫБРАТЬ Документ ИЗ УведомлениеОПеремещении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ НомераУпаковок.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (ВЫБРАТЬ Документ ИЗ УведомлениеОПеремещении)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Уведомления об оприходовании
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ НомераУпаковок.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (ВЫБРАТЬ Документ ИЗ УведомлениеОбОприходовании)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И ТранспортныеУпаковки.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ ТранспортныеУпаковки.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка В (ВЫБРАТЬ Документ ИЗ УведомлениеОбОприходовании)
	|");
	
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.УстановитьПараметр("Операция"   , Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ИнтеграцияМДЛП.ДобавитьКлючиУпаковок(Запрос.МенеджерВременныхТаблиц, "УпаковкиУведомления");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	МАКСИМУМ(ТаблицаТовары.Партия)   КАК Партия
	|ПОМЕСТИТЬ ТоварыПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Поступление
	|	И ТаблицаТовары.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры    КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия               КАК Партия,
	|	УпаковкиУведомления.НомерУпаковки  КАК НомерУпаковки,
	|	УпаковкиУведомления.ГоденДо        КАК ГоденДо,
	|	УпаковкиТовара.Ссылка              КАК УпаковкаТовара
	|ИЗ
	|	ТоварыПоступления КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		УпаковкиУведомления КАК УпаковкиУведомления
	|	ПО
	|		УпаковкиУведомления.Номенклатура = ТаблицаТовары.Номенклатура
	|		И УпаковкиУведомления.Серия = ТаблицаТовары.СерияНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТовара
	|	ПО
	|		УпаковкиТовара.НомерУпаковки = УпаковкиУведомления.НомерУпаковки
	|		И УпаковкиТовара.КлючУпаковки  = УпаковкиУведомления.КлючУпаковки
	|		И УпаковкиТовара.ГоденДо = УпаковкиУведомления.ГоденДо
	|ГДЕ
	|	УпаковкиТовара.Ссылка ЕСТЬ NULL
	|	ИЛИ УпаковкиТовара.Номенклатура <> ТаблицаТовары.Номенклатура
	|	ИЛИ УпаковкиТовара.СерияНоменклатуры <> ТаблицаТовары.СерияНоменклатуры
	|	ИЛИ УпаковкиТовара.Партия <> ТаблицаТовары.Партия
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.УпаковкаТовара) Тогда
			УпаковкаТовара = Выборка.УпаковкаТовара.ПолучитьОбъект();
		Иначе
			УпаковкаТовара = Справочники.УпаковкиМаркируемогоТовара.СоздатьЭлемент();
			УпаковкаТовара.НомерУпаковки = Выборка.НомерУпаковки;
			УпаковкаТовара.ГоденДо = Выборка.ГоденДо;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УпаковкаТовара, Выборка, "Номенклатура, СерияНоменклатуры, Партия");
		
		УпаковкаТовара.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьРезультатСопоставленияДляУпаковокТовараИзУведомления(Уведомление)
	
	Запрос = Новый Запрос("
	// Уведомления о приемке
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ПОМЕСТИТЬ УпаковкиУведомления
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Уведомление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И ТранспортныеУпаковки.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Уведомление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Уведомления о перемещении
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ НомераУпаковок.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Уведомление
	|	И ТаблицаТовары.Ссылка.Операция = &Операция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И ТранспортныеУпаковки.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ ТранспортныеУпаковки.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Уведомление
	|	И ТаблицаТовары.Ссылка.Операция = &Операция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Уведомления об оприходовании
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И НомераУпаковок.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ НомераУпаковок.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Уведомление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	НомераУпаковок.НомерКиЗ            КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		И ТранспортныеУпаковки.Ссылка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ)
	|		И НЕ ТранспортныеУпаковки.Отклонено
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Уведомление
	|");
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Запрос.УстановитьПараметр("Операция"   , Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ИнтеграцияМДЛП.ДобавитьКлючиУпаковок(Запрос.МенеджерВременныхТаблиц, "УпаковкиУведомления");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УпаковкиУведомления.Номенклатура       КАК Номенклатура,
	|	УпаковкиУведомления.Серия              КАК СерияНоменклатуры,
	|	УпаковкиУведомления.НомерУпаковки      КАК НомерУпаковки,
	|	УпаковкиУведомления.ГоденДо            КАК ГоденДо,
	|	УпаковкиТовара.Ссылка                  КАК УпаковкаТовара
	|ИЗ
	|	УпаковкиУведомления КАК УпаковкиУведомления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТовара
	|	ПО
	|		УпаковкиТовара.НомерУпаковки = УпаковкиУведомления.НомерУпаковки
	|		И УпаковкиТовара.КлючУпаковки  = УпаковкиУведомления.КлючУпаковки
	|		И УпаковкиТовара.ГоденДо = УпаковкиУведомления.ГоденДо
	|ГДЕ
	|	УпаковкиТовара.Ссылка ЕСТЬ NULL
	|	ИЛИ УпаковкиТовара.Номенклатура <> УпаковкиУведомления.Номенклатура
	|	ИЛИ УпаковкиТовара.СерияНоменклатуры <> УпаковкиУведомления.Серия
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.УпаковкаТовара) Тогда
			УпаковкаТовара = Выборка.УпаковкаТовара.ПолучитьОбъект();
		Иначе
			УпаковкаТовара = Справочники.УпаковкиМаркируемогоТовара.СоздатьЭлемент();
			УпаковкаТовара.НомерУпаковки = Выборка.НомерУпаковки;
			УпаковкаТовара.ГоденДо = Выборка.ГоденДо;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УпаковкаТовара, Выборка, "Номенклатура, СерияНоменклатуры");
		
		УпаковкаТовара.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьРезультатСопоставленияДляУпаковокТовараИзИнвентаризации(ДокументСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура            КАК Номенклатура,
	|	ТаблицаТовары.Серия                   КАК Серия,
	|	ТаблицаТовары.ГоденДо                 КАК ГоденДо,
	|	НомераУпаковокДокумента.НомерКиЗ      КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки  КАК КлючУпаковки
	|ПОМЕСТИТЬ УпаковкиДокумента
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Товары КАК ТаблицаТовары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|					Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.НомераУпаковок КАК НомераУпаковокДокумента
	|				ПО
	|					НомераУпаковокДокумента.Ссылка = ТаблицаТовары.Ссылка
	|					И НомераУпаковокДокумента.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|		ПО
	|			ТаблицаТовары.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка
	|	И Документ.Проведен
	|	И Документ.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОформитьУведомления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиДокумента.Номенклатура       КАК Номенклатура,
	|	УпаковкиДокумента.Серия              КАК СерияНоменклатуры,
	|	УпаковкиДокумента.НомерУпаковки      КАК НомерУпаковки,
	|	УпаковкиДокумента.ГоденДо            КАК ГоденДо,
	|	УпаковкиТовара.Ссылка                КАК УпаковкаТовара
	|ИЗ
	|	УпаковкиДокумента КАК УпаковкиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиТовара
	|		ПО
	|			УпаковкиТовара.НомерУпаковки = УпаковкиДокумента.НомерУпаковки
	|			И УпаковкиТовара.КлючУпаковки  = УпаковкиДокумента.КлючУпаковки
	|			И УпаковкиТовара.ГоденДо = УпаковкиДокумента.ГоденДо
	|ГДЕ
	|	УпаковкиТовара.Ссылка ЕСТЬ NULL
	|	ИЛИ УпаковкиТовара.Номенклатура <> УпаковкиДокумента.Номенклатура
	|	ИЛИ УпаковкиТовара.СерияНоменклатуры <> УпаковкиДокумента.Серия
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.УпаковкаТовара) Тогда
			УпаковкаТовара = Выборка.УпаковкаТовара.ПолучитьОбъект();
		Иначе
			УпаковкаТовара = Справочники.УпаковкиМаркируемогоТовара.СоздатьЭлемент();
			УпаковкаТовара.НомерУпаковки = Выборка.НомерУпаковки;
			УпаковкаТовара.ГоденДо = Выборка.ГоденДо;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УпаковкаТовара, Выборка, "Номенклатура, СерияНоменклатуры");
		
		УпаковкаТовара.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьСгенерироватьСерии(Объект, ИмяТабличнойЧасти, СтрокиКОбработке, Результат) Экспорт
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	Таблица = ТабличнаяЧасть.Выгрузить(СтрокиКОбработке, "НомерСтроки, Номенклатура, Серия, НомерСерии, ГоденДо");
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указана номенклатура в строке %НомерСтроки%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка.НомерСтроки);
			Поле = "Объект." + ИмяТабличнойЧасти + "[%1].Номенклатура";
		
		ИначеЕсли Не ЗначениеЗаполнено(Строка.НомерСерии) Или Не ЗначениеЗаполнено(Строка.ГоденДо) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не информации о параметрах серии в строке %НомерСтроки%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка.НомерСтроки);
			Поле = "Объект." + ИмяТабличнойЧасти + "[%1].НомерСерии";
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Серия) Тогда
			СтрокиКУдалению.Добавить(Строка);
			Продолжить;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Результат.Ошибки,
			Поле,
			ТекстСообщения,
			Неопределено,
			Строка.НомерСтроки - 1);
		
		СтрокиКУдалению.Добавить(Строка);
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Таблица.Удалить(Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.НомерСтроки   КАК НомерСтроки,
	|	Товары.Номенклатура  КАК Номенклатура,
	|	Товары.НомерСерии    КАК НомерСерии,
	|	Товары.ГоденДо       КАК ГоденДо
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки      КАК НомерСтроки,
	|	Товары.Номенклатура     КАК Номенклатура,
	|	СправочникСерии.Ссылка  КАК Серия,
	|	Товары.НомерСерии       КАК НомерСерии,
	|	Товары.ГоденДо          КАК ГоденДо,
	|	СправочникВидыНоменклатуры.ИспользоватьНомерСерии         КАК ИспользоватьНомерСерии,
	|	СправочникВидыНоменклатуры.ИспользоватьСрокГодностиСерии  КАК ИспользоватьСрокГодностиСерии
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|	ПО
	|		СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Владелец = Товары.Номенклатура
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|		И ВЫБОР
	|			КОГДА СправочникВидыНоменклатуры.ИспользоватьНомерСерии
	|				ТОГДА СправочникСерии.Номер = Товары.НомерСерии
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И ВЫБОР
	|			КОГДА СправочникВидыНоменклатуры.ИспользоватьСрокГодностиСерии
	|				ТОГДА СправочникСерии.ГоденДо = Товары.ГоденДо
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|");
	
	Запрос.УстановитьПараметр("Товары", Таблица);
	
	ТаблицаГенерацииСерий = Новый ТаблицаЗначений;
	ТаблицаГенерацииСерий.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаГенерацииСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаГенерацииСерий.Колонки.Добавить("НомерСерии", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаГенерацииСерий.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовары = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		Если ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Серия) Тогда
			СтрокаТовары.Серия = Выборка.Серия;
		Иначе
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			ПараметрыПоиска.Вставить("НомерСерии"  , Выборка.НомерСерии);
			ПараметрыПоиска.Вставить("ГоденДо"     , Выборка.ГоденДо);
			НайденныеСтроки = ТаблицаГенерацииСерий.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаТовары.Серия = НайденныеСтроки[0].Серия;
			Иначе
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.Владелец = Выборка.Номенклатура;
				Если Выборка.ИспользоватьНомерСерии Тогда
					НоваяСерия.Номер = Выборка.НомерСерии;
				КонецЕсли;
				Если Выборка.ИспользоватьСрокГодностиСерии Тогда
					НоваяСерия.ГоденДо = Выборка.ГоденДо;
				КонецЕсли;
				НоваяСерия.СерияПромаркированаДляЦелейМДЛП = Истина;
				
				Попытка
					НоваяСерия.Записать();
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось сгенерировать серию по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						ИнтеграцияМДЛП.СобытиеЖурналаРегистрации(НСтр("ru = 'Генерация серий'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.СерииНоменклатуры,
						НоваяСерия.Ссылка,
						ТекстСообщения);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.Ошибки,
						"Объект." + ИмяТабличнойЧасти + "[%1].Серия",
						ТекстСообщения,
						Неопределено,
						Выборка.НомерСтроки - 1);
				КонецПопытки;
				
				СтрокаТовары.Серия = НоваяСерия.Ссылка;
				
				СгенерированнаяСерия = ТаблицаГенерацииСерий.Добавить();
				ЗаполнитьЗначенияСвойств(СгенерированнаяСерия, ПараметрыПоиска);
				СгенерированнаяСерия.Серия = НоваяСерия.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.ЕстьЗаполненныеСтроки = Истина;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПриИзмененииПараметровНоменклатуры(Объект, ТекущаяСтрока, ПараметрыЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Или Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Или ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникСерии.Ссылка        КАК Серия
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.СерииНоменклатуры КАК СправочникСерии
		|	ПО
		|		СправочникСерии.Владелец = СправочникНоменклатура.Ссылка
		|		И СправочникСерии.Номер = &НомерСерии
		|		И СправочникСерии.ГоденДо = &ГоденДо
		|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура  КАК Номенклатура,
		|	СправочникСерии.Ссылка              КАК Серия
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.СерииНоменклатуры КАК СправочникСерии
		|	ПО
		|		СправочникСерии.Владелец = ШтрихкодыНоменклатуры.Номенклатура
		|		И СправочникСерии.Номер = &НомерСерии
		|		И СправочникСерии.ГоденДо = &ГоденДо
		|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
		|ГДЕ
		|	&Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ШтрихкодыНоменклатуры.Штрихкод = &GTIN
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникСерии.Владелец КАК Номенклатура,
		|	СправочникСерии.Ссылка   КАК Серия
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СправочникСерии
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|	ПО
		|		ШтрихкодыНоменклатуры.Штрихкод = &GTIN
		|ГДЕ
		|	&Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И СправочникСерии.Номер = &НомерСерии
		|	И СправочникСерии.ГоденДо = &ГоденДо
		|	И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
		|	И ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ NULL
		|");
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("GTIN"        , ТекущаяСтрока.GTIN);
		Запрос.УстановитьПараметр("НомерСерии"  , ТекущаяСтрока.НомерСерии);
		Запрос.УстановитьПараметр("ГоденДо"     , ТекущаяСтрока.ГоденДо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоменклатураОтличается = ТекущаяСтрока.Номенклатура <> Выборка.Номенклатура;
			СерияОтличается        = ТекущаяСтрока.Серия <> Выборка.Серия;
			Если НоменклатураОтличается Или СерияОтличается Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения")
	   И Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Строка = Новый Структура;
		Строка.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		Строка.Вставить("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(Строка, СтруктураДействий, Неопределено);
		
		ТекущаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		
	КонецЕсли;
	
КонецПроцедуры


#Область СозданиеКомандыЗагрузкиДанныхИзМобильногоПриложения

Процедура СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСМобильнымПриложением") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
	   И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		
		ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры, Форма.ИмяФормы, "Товары", "ТоварыКоманднаяПанель");
		ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры, Форма.ИмяФормы, "СоставТранспортныхУпаковок", "СоставТранспортныхУпаковокКоманднаяПанель");
		
	КонецЕсли;
	
	ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры,
		Метаданные.Обработки.ПроверкаИПодборУпаковокМДЛП.Формы.ПроверкаИПодбор.ПолноеИмя(),
		"ДеревоМаркированнойПродукции",
		"ДеревоМаркированнойПродукцииКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры,
		Метаданные.Обработки.ПолучитьСоставТранспортныхУпаковокМДЛП.Формы.ПолучитьСоставТранспортныхУпаковок.ПолноеИмя(),
		"ИерархияУпаковок",
		"ГруппаПодключаемыеКоманды");
	
	ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры,
		Метаданные.Обработки.СверкаОстатковМДЛП.Формы.СверкаОстатков.ПолноеИмя(),
		"ДанныеПотребительскихУпаковок",
		"ГруппаПодключаемыеКоманды");
	
	ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры,
		Метаданные.Обработки.АнализСканированияШтрихкодовМДЛП.Формы.АнализСканированияШтрихкодов.ПолноеИмя(),
		"Товары",
		"ГруппаКоманды");
	
	ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры,
		Метаданные.Обработки.РеестрРешенийОВводеЛПВГражданскийОборот.Формы.РеестрРешенийОВводеЛПВОборот.ПолноеИмя(),
		"Товары",
		"ГруппаПодключаемыеКоманды");
	
	ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры,
		Метаданные.Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		"ТранспортныеУпаковки",
		"ТранспортныеУпаковкиКоманднаяПанель");
	
	Для Каждого Параметр Из Параметры Цикл
		
		Если Форма.ИмяФормы <> Параметр.ИмяФормы Тогда
			Продолжить;
		КонецЕсли;
		
		ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(Форма, Параметр.ИмяТабличнойЧасти, Параметр.ИмяРодительскогоЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПараметрыСозданияКомандыЗагрузкиДанныхИзМобильногоПриложения(Параметры, ИмяФормы, ИмяТабличнойЧасти, ИмяРодительскогоЭлемента)
	
	Параметр = Новый Структура;
	Параметр.Вставить("ИмяФормы"                , ИмяФормы);
	Параметр.Вставить("ИмяТабличнойЧасти"       , ИмяТабличнойЧасти);
	Параметр.Вставить("ИмяРодительскогоЭлемента", ИмяРодительскогоЭлемента);
	
	Параметры.Добавить(Параметр);
	
КонецПроцедуры

#КонецОбласти // СозданиеКомандыЗагрузкиДанныхИзМобильногоПриложения

#Область СозданиеКомандыРегистрацииGTIN

Процедура СоздатьКомандуРегистрацииGTINНаФорме(Форма) Экспорт
	
	// Добавление команды регистрации GTIN.
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	
	ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры,
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.ТабличныеЧасти.Товары.Имя,
		"ТоварыКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры,
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.ТабличныеЧасти.СоставТранспортныхУпаковок.Имя,
		"СоставТранспортныхУпаковокКоманднаяПанель");
		
	ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры,
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.ТабличныеЧасти.Товары.Имя,
		"ТоварыКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры,
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.ТабличныеЧасти.СоставТранспортныхУпаковок.Имя,
		"СоставТранспортныхУпаковокКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры,
		Метаданные.Обработки.ПолучитьСоставТранспортныхУпаковокМДЛП.Формы.ПолучитьСоставТранспортныхУпаковок.ПолноеИмя(),
		Метаданные.Обработки.ПолучитьСоставТранспортныхУпаковокМДЛП.ТабличныеЧасти.ДанныеУпаковок.Имя,
		"ГруппаПодключаемыеКоманды");
	
	ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры,
		Метаданные.Обработки.СверкаОстатковМДЛП.Формы.СверкаОстатков.ПолноеИмя(),
		Метаданные.Обработки.СверкаОстатковМДЛП.ТабличныеЧасти.ДанныеПотребительскихУпаковок.Имя,
		"ГруппаПодключаемыеКоманды");
	
	Для Каждого Параметр Из Параметры Цикл
		
		Если Форма.ИмяФормы <> Параметр.ИмяФормы Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьКомандуРегистрацииGTIN(Форма, Параметр.ИмяТабличнойЧасти, Параметр.ИмяРодительскогоЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПараметрыСозданияКомандыРегистрацииGTIN(Параметры, ИмяФормы, ИмяТабличнойЧасти, ИмяРодительскогоЭлемента)
	
	Параметр = Новый Структура;
	Параметр.Вставить("ИмяФормы"                , ИмяФормы);
	Параметр.Вставить("ИмяТабличнойЧасти"       , ИмяТабличнойЧасти);
	Параметр.Вставить("ИмяРодительскогоЭлемента", ИмяРодительскогоЭлемента);
	
	Параметры.Добавить(Параметр);
	
КонецПроцедуры

Процедура СоздатьКомандуРегистрацииGTIN(Форма, ИмяТабличнойЧасти, ИмяРодительскогоЭлемента)
	
	Если Форма.Элементы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительскийЭлемент = Форма.Элементы.Найти(ИмяРодительскогоЭлемента);
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваКоманды = Новый Структура;
	СвойстваКоманды.Вставить("Имя"      , "ЗарегистрироватьGTIN");
	СвойстваКоманды.Вставить("Заголовок", НСтр("ru = 'Зарегистрировать GTIN'"));
	СвойстваКоманды.Вставить("Действие" , "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	Команда = Форма.Команды.Добавить(ИмяТабличнойЧасти + СвойстваКоманды.Имя);
	ЗаполнитьЗначенияСвойств(Команда, СвойстваКоманды,, "Имя");
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), РодительскийЭлемент);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.ТолькоВоВсехДействиях = Истина;
	
КонецПроцедуры

#КонецОбласти // СозданиеКомандыРегистрацииGTIN

#Область СозданиеКомандыОбработатьНенайденныеШтрихкоды

Процедура СоздатьКомандуОбработатьНенайденныеШтрихкодыНаФорме(Форма) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	
	ДополнитьПараметрыСозданияКомандыОбработатьНенайденныеШтрихкоды(Параметры,
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.ТабличныеЧасти.Товары.Имя,
		"ТоварыКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыОбработатьНенайденныеШтрихкоды(Параметры,
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОПриемкеМДЛП.ТабличныеЧасти.СоставТранспортныхУпаковок.Имя,
		"СоставТранспортныхУпаковокКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыОбработатьНенайденныеШтрихкоды(Параметры,
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.ТабличныеЧасти.Товары.Имя,
		"ТоварыКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыОбработатьНенайденныеШтрихкоды(Параметры,
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП.ТабличныеЧасти.СоставТранспортныхУпаковок.Имя,
		"СоставТранспортныхУпаковокКоманднаяПанель");
	
	ДополнитьПараметрыСозданияКомандыОбработатьНенайденныеШтрихкоды(Параметры,
		Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.Формы.ФормаДокумента.ПолноеИмя(),
		Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.ТабличныеЧасти.Товары.Имя,
		"ТоварыКоманднаяПанель");
	
	Для Каждого Параметр Из Параметры Цикл
		
		Если Форма.ИмяФормы <> Параметр.ИмяФормы Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьКомандуОбработатьНенайденныеШтрихкоды(Форма, Параметр.ИмяТабличнойЧасти, Параметр.ИмяРодительскогоЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПараметрыСозданияКомандыОбработатьНенайденныеШтрихкоды(Параметры, ИмяФормы, ИмяТабличнойЧасти, ИмяРодительскогоЭлемента)
	
	Параметр = Новый Структура;
	Параметр.Вставить("ИмяФормы"                , ИмяФормы);
	Параметр.Вставить("ИмяТабличнойЧасти"       , ИмяТабличнойЧасти);
	Параметр.Вставить("ИмяРодительскогоЭлемента", ИмяРодительскогоЭлемента);
	
	Параметры.Добавить(Параметр);
	
КонецПроцедуры

Процедура СоздатьКомандуОбработатьНенайденныеШтрихкоды(Форма, ИмяТабличнойЧасти, ИмяРодительскогоЭлемента)
	
	Если Форма.Элементы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительскийЭлемент = Форма.Элементы.Найти(ИмяРодительскогоЭлемента);
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваКоманды = Новый Структура;
	СвойстваКоманды.Вставить("Имя"      , "ОбработатьНенайденныеШтрихкоды");
	СвойстваКоманды.Вставить("Заголовок", НСтр("ru = 'Обработать ненайденные штрихкоды'"));
	СвойстваКоманды.Вставить("Действие" , "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	Команда = Форма.Команды.Добавить(ИмяТабличнойЧасти + СвойстваКоманды.Имя);
	ЗаполнитьЗначенияСвойств(Команда, СвойстваКоманды,, "Имя");
	
	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), РодительскийЭлемент);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.ТолькоВоВсехДействиях = Истина;
	
КонецПроцедуры

#КонецОбласти // СозданиеКомандыОбработатьНенайденныеШтрихкоды

#Область ЗаполнениеНаОсновании

Процедура ЗаполнитьДокументНаОснованииУведомления(Объект, ДанныеЗаполнения) Экспорт
	
	ТипДокумента = ТипЗнч(Объект);
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДокумента = Тип("ДокументОбъект.ПоступлениеТоваров") И ТипДанныхЗаполнения = Тип("ДокументСсылка.УведомлениеОПриемкеМДЛП") Тогда
		ЗаполнитьДокументПоступленияНаОснованииУведомленияОПриемке(Объект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияНаОснованииУведомленияОПриемке(Объект, ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                   КАК Основание,
	|	ДанныеДокумента.Организация                              КАК ОрганизацияМДЛП,
	|	ДанныеДокумента.МестоДеятельности                        КАК МестоДеятельности,
	|	ДанныеДокумента.Грузоотправитель                         КАК ГрузоотправительМДЛП,
	|	ДанныеДокумента.МестоДеятельностиГрузоотправителя        КАК МестоДеятельностиГрузоотправителя,
	|	ДанныеДокумента.НомерДокумента                           КАК НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаДокумента                            КАК ДатаВходящегоДокумента,
	|	ИСТИНА                                                   КАК ЦенаВключаетНДС,
	|	НЕ ДанныеДокумента.Проведен                              КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиТовара.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	КОЛИЧЕСТВО(1)                       КАК Количество
	|ПОМЕСТИТЬ  ПринятыеУпаковкиТовара
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК УпаковкиТовара
	|ГДЕ
	|	УпаковкиТовара.Ссылка = &ДокументОснование
	|	И НЕ УпаковкиТовара.СостояниеПодтверждения В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.НеТребуется)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиТовара.ИдентификаторСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Номенклатура            КАК Номенклатура,
	|	ТаблицаТовары.Серия                   КАК СерияНоменклатуры,
	|	ПринятыеУпаковкиТовара.Количество     КАК КоличествоВЕдиницахИзмерения,
	|	ТаблицаТовары.Количество              КАК КоличествоУпаковокПоДокументу,
	|	ТаблицаТовары.Номенклатура.Упаковка   КАК ЕдиницаИзмерения,
	|	КоэффициентыУпаковок.Коэффициент      КАК Коэффициент,
	|	ПринятыеУпаковкиТовара.Количество * КоэффициентыУпаковок.Коэффициент  КАК Количество,
	|	ТаблицаТовары.Цена                    КАК Цена,
	|	ТаблицаТовары.Сумма                   КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СуммаНДС = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.СтавкаНДС
	|	КОНЕЦ                                 КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС                КАК СуммаНДС,
	|	ТаблицаТовары.Сумма                   КАК СуммаСНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыУпаковок
	|	ПО
	|		ТаблицаТовары.Номенклатура = КоэффициентыУпаковок.Номенклатура
	|		И ТаблицаТовары.Номенклатура.Упаковка = КоэффициентыУпаковок.ЕдиницаИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПринятыеУпаковкиТовара КАК ПринятыеУпаковкиТовара
	|	ПО
	|		ТаблицаТовары.ИдентификаторСтроки = ПринятыеУпаковкиТовара.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТовары.Серия                        КАК СерияНоменклатуры,
	|	ТаблицаТовары.Количество                   КАК КоличествоВЕдиницахИзмерения,
	|	ТаблицаТовары.Количество                   КАК КоличествоУпаковокПоДокументу,
	|	ТаблицаТовары.Номенклатура.Упаковка        КАК ЕдиницаИзмерения,
	|	КоэффициентыУпаковок.Коэффициент           КАК Коэффициент,
	|	ТаблицаТовары.Количество * КоэффициентыУпаковок.Коэффициент  КАК Количество,
	|	ТаблицаТовары.Цена                         КАК Цена,
	|	ТаблицаТовары.Сумма                        КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СуммаНДС = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ТаблицаТовары.Номенклатура.СтавкаНДС
	|	КОНЕЦ                                      КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС * ТаблицаТовары.Количество  КАК СуммаНДС,
	|	ТаблицаТовары.Сумма                        КАК СуммаСНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыУпаковок
	|	ПО
	|		ТаблицаТовары.Номенклатура = КоэффициентыУпаковок.Номенклатура
	|		И ТаблицаТовары.Номенклатура.Упаковка = КоэффициентыУпаковок.ЕдиницаИзмерения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ПринятыеУпаковкиТовара
	|	ПО
	|		ТаблицаТовары.Ссылка = ПринятыеУпаковкиТовара.Ссылка
	|		И ТаблицаТовары.ИдентификаторСтроки = ПринятыеУпаковкиТовара.ИдентификаторСтроки
	|		И НЕ ПринятыеУпаковкиТовара.СостояниеПодтверждения В (
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.НеТребуется)
	|		)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(РеквизитыШапки.Основание, РеквизитыШапки.ЕстьОшибкиПроведен);
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыШапки);
	
	Субъект = ОбъектПоОрганизацииМестуДеятельности(РеквизитыШапки.ОрганизацияМДЛП, РеквизитыШапки.МестоДеятельности, Истина);
	Объект.Организация = Субъект.Организация;
	Объект.Склад       = Субъект.Склад;
	
	Субъект = ОбъектПоОрганизацииМестуДеятельности(РеквизитыШапки.ГрузоотправительМДЛП, РеквизитыШапки.МестоДеятельностиГрузоотправителя, Ложь);
	Объект.Контрагент = Субъект.Организация;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияПересчетСумм = Новый Структура;
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ДействияПересчетСуммНДС = Новый Структура;
	ДействияПересчетСуммНДС.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСуммНДС.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	КэшированныеЗначения = Неопределено;
	
	ВыборкаТовары = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТовара = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаТовары);
		
		НеобходимПересчетСумм = (ВыборкаТовары.КоличествоВЕдиницахИзмерения <> ВыборкаТовары.КоличествоУпаковокПоДокументу);
		
		Если НеобходимПересчетСумм Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, ДействияПересчетСумм, КэшированныеЗначения);
		Иначе
			// Суммы НДС пересчитываем всегда, т.к. в уведомлении сумма НДС, для позиции товара, рассчитывается агрегированием всех сумм НДС упаковок этого товара.
			// Необходимо пересчитать сумму НДС по агрегированным суммам всех упаковок по позиции товара.
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, ДействияПересчетСуммНДС, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьУведомлениеОПриемкеМДЛП(ДокументОбъект, ДанныеЗаполнения)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаполнитьУведомлениеОПриемкеНаОснованииПоступленияТоваров(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОПриемкеНаОснованииПоступленияТоваров(ДокументОбъект, ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                    КАК Ссылка,
	|	Документ.Ссылка                    КАК Основание,
	|	ОрганизацииМДЛП.Организация        КАК Организация,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельности,
	|	КонтрагентыМДЛП.Организация        КАК Грузоотправитель,
	|	КонтрагентыМДЛП.МестоДеятельности  КАК МестоДеятельностиГрузоотправителя,
	|	Документ.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	Документ.НомерВходящегоДокумента   КАК НомерДокумента,
	|	Документ.ДатаВходящегоДокумента    КАК ДатаДокумента,
	|	НЕ Документ.Проведен               КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.ОрганизацияКонтрагент = Документ.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = Документ.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК КонтрагентыМДЛП
	|	ПО
	|		КонтрагентыМДЛП.ОрганизацияКонтрагент = Документ.Контрагент
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                    КАК ПрямаяСхемаАкцептования
	|ПОМЕСТИТЬ ОформленныеДокументыПриемки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА  КАК ПрямаяСхемаАкцептования
	|ПОМЕСТИТЬ ЕстьУведомлениеОбОтгрузкеОтПоставщика
	|ИЗ
	|	ОформленныеДокументыПриемки КАК ОформленныеДокументыПриемки
	|ГДЕ
	|	ОформленныеДокументыПриемки.ПрямаяСхемаАкцептования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования, Валюта В(&ВалютаРеглУчета, &ВалютаОснования)) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                    КАК Номенклатура,
	|	Товары.СерияНоменклатуры                               КАК Серия,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Цена,
	|	Товары.Количество / ЕСТЬNULL(Упаковки.Коэффициент, 1)  КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Сумма,
	
	//Пересчет Суммы НДС, в соответствии с реккомендациями ЦРПТ.
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((Товары.СуммаСНДС - Товары.СуммаНДС) * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество * &СтавкаНДСЧислом КАК ЧИСЛО(15, 2))
	|		* Товары.Количество /ЕСТЬNULL(Упаковки.Коэффициент, 1)
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК СуммаНДС
	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Ссылка = Товары.СерияНоменклатуры
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыОснования
	|	ПО
	|		КурсВалютыОснования.Валюта = &ВалютаОснования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры  КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = Товары.Номенклатура
	|		И Упаковки.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ОформленныеТовары.Цена          КАК Цена,
	|	-ОформленныеТовары.Количество   КАК Количество,
	|	-ОформленныеТовары.Сумма        КАК Сумма,
	|	-ОформленныеТовары.СуммаНДС     КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары  КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументыПриемки КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура       КАК Номенклатура,
	|	ТоварыКОформлению.Серия              КАК Серия,
	|	ТоварыКОформлению.Цена               КАК Цена,
	|	СУММА(ТоварыКОформлению.Количество)  КАК Количество,
	|	СУММА(ТоварыКОформлению.Сумма)       КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)    КАК СуммаНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Цена
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|");
	
	ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧисломВЗапросе(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"  , Константы.ВалютаРегламентированногоУчета.Получить());
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата, Валюта");
	Запрос.УстановитьПараметр("ВалютаОснования"  , РеквизитыОснования.Валюта);
	Запрос.УстановитьПараметр("ДатаОснования"    , РеквизитыОснования.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ЭтоПерезаполнение = Не ДокументОбъект.Ссылка.Пустая();
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
			Шапка.Ссылка,
			Шапка.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
		
		Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеВнутриведомственное
		 Или Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеМежбюджетное
		 Или Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее Тогда
			ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.ПередачаНаБезвозмезднойОснове;
		Иначе
			ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.КупляПродажа;
		КонецЕсли;
		
		ДокументОбъект.Операция = Перечисления.ОперацииПриемкиМДЛП.Поступление;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.НомераУпаковок.Очистить();
	
	ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса[РезультатЗапроса.ВГраница()], ДокументОснование);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОприходованииМДЛП(ДокументОбъект, ДанныеЗаполнения)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаполнитьУведомлениеОбОприходованииНаОснованииПоступленияТоваров(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		ЗаполнитьУведомлениеОбОприходованииНаОснованииОприходованияИзлишковТоваров(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОприходованииНаОснованииПоступленияТоваров(ДокументОбъект, ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                    КАК Ссылка,
	|	Документ.Ссылка                    КАК Основание,
	|	ОрганизацииМДЛП.Организация        КАК Организация,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельности,
	|	КонтрагентыМДЛП.Организация        КАК Грузоотправитель,
	|	КонтрагентыМДЛП.МестоДеятельности  КАК МестоДеятельностиГрузоотправителя,
	|	Документ.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	Документ.НомерВходящегоДокумента   КАК НомерДокумента,
	|	Документ.ДатаВходящегоДокумента    КАК ДатаДокумента,
	|	НЕ Документ.Проведен               КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.ОрганизацияКонтрагент = Документ.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = Документ.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК КонтрагентыМДЛП
	|	ПО
	|		КонтрагентыМДЛП.ОрганизацияКонтрагент = Документ.Контрагент
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументыПриемки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования, Валюта В(&ВалютаРеглУчета, &ВалютаОснования)) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                    КАК Номенклатура,
	|	Товары.СерияНоменклатуры                               КАК Серия,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Цена,
	|	Товары.Количество / ЕСТЬNULL(Упаковки.Коэффициент, 1)  КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Сумма,
	
	//Пересчет Суммы НДС, в соответствии с реккомендациями ЦРПТ.
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((Товары.СуммаСНДС - Товары.СуммаНДС) * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество * &СтавкаНДСЧислом КАК ЧИСЛО(15, 2))
	|		* Товары.Количество /ЕСТЬNULL(Упаковки.Коэффициент, 1)
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК СуммаНДС
	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Ссылка = Товары.СерияНоменклатуры
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыОснования
	|	ПО
	|		КурсВалютыОснования.Валюта = &ВалютаОснования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры  КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = Товары.Номенклатура
	|		И Упаковки.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ОформленныеТовары.Цена          КАК Цена,
	|	-ОформленныеТовары.Количество   КАК Количество,
	|	-ОформленныеТовары.Сумма        КАК Сумма,
	|	-ОформленныеТовары.СуммаНДС     КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.Товары  КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументыПриемки КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура       КАК Номенклатура,
	|	ТоварыКОформлению.Серия              КАК Серия,
	|	ТоварыКОформлению.Цена               КАК Цена,
	|	СУММА(ТоварыКОформлению.Количество)  КАК Количество,
	|	СУММА(ТоварыКОформлению.Сумма)       КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)    КАК СуммаНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Цена
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|");
	
	ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧисломВЗапросе(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"  , Константы.ВалютаРегламентированногоУчета.Получить());
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата, Валюта");
	Запрос.УстановитьПараметр("ВалютаОснования"  , РеквизитыОснования.Валюта);
	Запрос.УстановитьПараметр("ДатаОснования"    , РеквизитыОснования.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ЭтоПерезаполнение = Не ДокументОбъект.Ссылка.Пустая();
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
			Шапка.Ссылка,
			Шапка.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
		
		Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеВнутриведомственное
		 Или Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеМежбюджетное
		 Или Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее Тогда
			ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.ПередачаНаБезвозмезднойОснове;
		Иначе
			ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.КупляПродажа;
		КонецЕсли;
		
		ДокументОбъект.Операция = Перечисления.ОперацииОприходованияМДЛП.Поступление;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.НомераУпаковок.Очистить();
	
	ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса[РезультатЗапроса.ВГраница()], ДокументОснование);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОприходованииНаОснованииОприходованияИзлишковТоваров(ДокументОбъект, ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                    КАК Ссылка,
	|	Документ.Ссылка                    КАК Основание,
	|	ОрганизацииМДЛП.Организация        КАК Организация,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельности,
	|	ОрганизацииМДЛП.Организация        КАК Грузоотправитель,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельностиГрузоотправителя,
	|	Документ.Номер                     КАК НомерДокумента,
	|	Документ.Дата                      КАК ДатаДокумента,
	|	НЕ Документ.Проведен               КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.ОрганизацияКонтрагент = Документ.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = Документ.Склад
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования, Валюта В(&ВалютаРеглУчета, &ВалютаОснования)) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                    КАК Номенклатура,
	|	Товары.СерияНоменклатуры                               КАК Серия,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Сумма * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Цена,
	|	Товары.Количество / ЕСТЬNULL(Упаковки.Коэффициент, 1)  КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Сумма
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Сумма,
	
	//Пересчет Суммы НДС, в соответствии с реккомендациями ЦРПТ.
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫРАЗИТЬ(Товары.Сумма * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество * &СтавкаНДСЧислом КАК ЧИСЛО(15, 2)) / (&СтавкаНДСЧислом + 1) КАК ЧИСЛО(15, 2))
	|		* Товары.Количество /ЕСТЬNULL(Упаковки.Коэффициент, 1)
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК СуммаНДС
	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Ссылка = Товары.СерияНоменклатуры
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыОснования
	|	ПО
	|		КурсВалютыОснования.Валюта = &ВалютаОснования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры  КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = Товары.Номенклатура
	|		И Упаковки.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ОформленныеТовары.Цена          КАК Цена,
	|	-ОформленныеТовары.Количество   КАК Количество,
	|	-ОформленныеТовары.Сумма        КАК Сумма,
	|	-ОформленныеТовары.СуммаНДС     КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.Товары  КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументы КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура       КАК Номенклатура,
	|	ТоварыКОформлению.Серия              КАК Серия,
	|	ТоварыКОформлению.Цена               КАК Цена,
	|	СУММА(ТоварыКОформлению.Количество)  КАК Количество,
	|	СУММА(ТоварыКОформлению.Сумма)       КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)    КАК СуммаНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Цена
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|");
	
	ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧисломВЗапросе(Запрос.Текст, "Товары.Номенклатура");
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"  , ВалютаРеглУчета);
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата");
	Запрос.УстановитьПараметр("ВалютаОснования"  , ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДатаОснования"    , РеквизитыОснования.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ЭтоПерезаполнение = Не ДокументОбъект.Ссылка.Пустая();
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
			Шапка.Ссылка,
			Шапка.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
		
		ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.КупляПродажа;
		
		ДокументОбъект.Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.НомераУпаковок.Очистить();
	
	ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса[РезультатЗапроса.ВГраница()], ДокументОснование);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОтгрузкеМДЛП(ДокументОбъект, ДанныеЗаполнения)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьУведомлениеОбОтгрузкеНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПередачаТоваровНаСторону") Тогда
		ЗаполнитьУведомлениеОбОтгрузкеНаОснованииПередачиТоваровНаСторону(ДокументОбъект, ДанныеЗаполнения)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОтгрузкеНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                    КАК Ссылка,
	|	Документ.Ссылка                    КАК Основание,
	|	ОрганизацииМДЛП.Организация        КАК Организация,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельности,
	|	КонтрагентыМДЛП.Организация        КАК Грузополучатель,
	|	КонтрагентыМДЛП.МестоДеятельности  КАК МестоДеятельностиГрузополучателя,
	|	Документ.Номер                     КАК НомерДокумента,
	|	Документ.Дата                      КАК ДатаДокумента,
	|	НЕ Документ.Проведен               КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.СобственнаяОрганизация
	|		И ОрганизацииМДЛП.ОрганизацияКонтрагент = Документ.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = Документ.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК КонтрагентыМДЛП
	|	ПО
	|		НЕ КонтрагентыМДЛП.СобственнаяОрганизация
	|		И КонтрагентыМДЛП.ОрганизацияКонтрагент = Документ.Контрагент
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                    КАК ПрямаяСхемаАкцептования
	|ПОМЕСТИТЬ ОформленныеДокументыПриемки
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА  КАК ПрямаяСхемаАкцептования
	|ПОМЕСТИТЬ ЕстьУведомлениеОбОтгрузкеОтПоставщика
	|ИЗ
	|	ОформленныеДокументыПриемки КАК ОформленныеДокументыПриемки
	|ГДЕ
	|	ОформленныеДокументыПриемки.ПрямаяСхемаАкцептования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования, Валюта В(&ВалютаРеглУчета, &ВалютаОснования)) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                    КАК Номенклатура,
	|	Товары.СерияНоменклатуры                               КАК Серия,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Цена,
	|	Товары.Количество / ЕСТЬNULL(Упаковки.Коэффициент, 1)  КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Сумма,
	
	//Пересчет Суммы НДС, в соответствии с реккомендациями ЦРПТ.
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((Товары.СуммаСНДС - Товары.СуммаНДС) * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество * &СтавкаНДСЧислом КАК ЧИСЛО(15, 2))
	|		* Товары.Количество /ЕСТЬNULL(Упаковки.Коэффициент, 1)
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК СуммаНДС
	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Ссылка = Товары.СерияНоменклатуры
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыОснования
	|	ПО
	|		КурсВалютыОснования.Валюта = &ВалютаОснования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры  КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = Товары.Номенклатура
	|		И Упаковки.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ОформленныеТовары.Цена          КАК Цена,
	|	-ОформленныеТовары.Количество   КАК Количество,
	|	-ОформленныеТовары.Сумма        КАК Сумма,
	|	-ОформленныеТовары.СуммаНДС     КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары  КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументыПриемки КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура       КАК Номенклатура,
	|	ТоварыКОформлению.Серия              КАК Серия,
	|	ТоварыКОформлению.Цена               КАК Цена,
	|	СУММА(ТоварыКОформлению.Количество)  КАК Количество,
	|	СУММА(ТоварыКОформлению.Сумма)       КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)    КАК СуммаНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Цена
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|");
	
	ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧисломВЗапросе(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"  , Константы.ВалютаРегламентированногоУчета.Получить());
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата, Валюта");
	Запрос.УстановитьПараметр("ВалютаОснования"  , РеквизитыОснования.Валюта);
	Запрос.УстановитьПараметр("ДатаОснования"    , РеквизитыОснования.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ЭтоПерезаполнение = Не ДокументОбъект.Ссылка.Пустая();
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
			Шапка.Ссылка,
			Шапка.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
		
		ДокументОбъект.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.НомерДокумента);
		ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.КупляПродажа;
		ДокументОбъект.Операция = Перечисления.ОперацииОтгрузкиМДЛП.Возврат;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.НомераУпаковок.Очистить();
	
	ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса[РезультатЗапроса.ВГраница()], ДокументОснование);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеОбОтгрузкеНаОснованииПередачиТоваровНаСторону(ДокументОбъект, ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                    КАК Ссылка,
	|	Документ.Ссылка                    КАК Основание,
	|	ОрганизацииМДЛП.Организация        КАК Организация,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельности,
	|	КонтрагентыМДЛП.Организация        КАК Грузополучатель,
	|	КонтрагентыМДЛП.МестоДеятельности  КАК МестоДеятельностиГрузополучателя,
	|	Документ.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	Документ.Номер                     КАК НомерДокумента,
	|	Документ.Дата                      КАК ДатаДокумента,
	|	НЕ Документ.Проведен               КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПередачаТоваровНаСторону КАК Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.СобственнаяОрганизация
	|		И ОрганизацииМДЛП.ОрганизацияКонтрагент = Документ.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = Документ.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК КонтрагентыМДЛП
	|	ПО
	|		НЕ КонтрагентыМДЛП.СобственнаяОрганизация
	|		И КонтрагентыМДЛП.ОрганизацияКонтрагент = Документ.Контрагент
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка,
	|	Статусы.Статус           КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументы.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                    КАК ПрямаяСхемаАкцептования
	|ПОМЕСТИТЬ ОформленныеДокументыПриемки
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА  КАК ПрямаяСхемаАкцептования
	|ПОМЕСТИТЬ ЕстьУведомлениеОбОтгрузкеОтПоставщика
	|ИЗ
	|	ОформленныеДокументыПриемки КАК ОформленныеДокументыПриемки
	|ГДЕ
	|	ОформленныеДокументыПриемки.ПрямаяСхемаАкцептования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	втКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОснования, Валюта В(&ВалютаРеглУчета, &ВалютаОснования)) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                    КАК Номенклатура,
	|	Товары.СерияНоменклатуры                               КАК Серия,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Цена,
	|	Товары.Количество / ЕСТЬNULL(Упаковки.Коэффициент, 1)  КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК Сумма,
	
	//Пересчет Суммы НДС, в соответствии с реккомендациями ЦРПТ.
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((Товары.СуммаСНДС - Товары.СуммаНДС) * ЕСТЬNULL(Упаковки.Коэффициент, 1) / Товары.Количество * &СтавкаНДСЧислом КАК ЧИСЛО(15, 2))
	|		* Товары.Количество /ЕСТЬNULL(Упаковки.Коэффициент, 1)
	|		* ВЫБОР
	|			КОГДА &ВалютаОснования <> &ВалютаРеглУчета
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыОснования.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыОснования.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыРегл.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыОснования.Курс * КурсВалютыРегл.Кратность)
	|							/ (КурсВалютыРегл.Курс * КурсВалютыОснования.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15,2))                                 КАК СуммаНДС
	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ПередачаТоваровНаСторону.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Ссылка = Товары.СерияНоменклатуры
	|		И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыОснования
	|	ПО
	|		КурсВалютыОснования.Валюта = &ВалютаОснования
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втКурсыВалют КАК КурсВалютыРегл
	|	ПО
	|		КурсВалютыРегл.Валюта = &ВалютаРеглУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры  КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = Товары.Номенклатура
	|		И Упаковки.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура  КАК Номенклатура,
	|	ОформленныеТовары.Серия         КАК Серия,
	|	ОформленныеТовары.Цена          КАК Цена,
	|	-ОформленныеТовары.Количество   КАК Количество,
	|	-ОформленныеТовары.Сумма        КАК Сумма,
	|	-ОформленныеТовары.СуммаНДС     КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары  КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументыПриемки КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура       КАК Номенклатура,
	|	ТоварыКОформлению.Серия              КАК Серия,
	|	ТоварыКОформлению.Цена               КАК Цена,
	|	СУММА(ТоварыКОформлению.Количество)  КАК Количество,
	|	СУММА(ТоварыКОформлению.Сумма)       КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)    КАК СуммаНДС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Цена
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|");
	
	ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧисломВЗапросе(Запрос.Текст);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаРеглУчета"  , Константы.ВалютаРегламентированногоУчета.Получить());
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата, Валюта");
	Запрос.УстановитьПараметр("ВалютаОснования"  , РеквизитыОснования.Валюта);
	Запрос.УстановитьПараметр("ДатаОснования"    , РеквизитыОснования.Дата);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ЭтоПерезаполнение = Не ДокументОбъект.Ссылка.Пустая();
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
			Шапка.Ссылка,
			Шапка.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
		
		Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияМатериальныхЗапасов Тогда
			ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.КупляПродажа;
		Иначе
			ДокументОбъект.ТипДоговора = Перечисления.ТипыДоговоровМДЛП.ПередачаНаБезвозмезднойОснове;
		КонецЕсли;
		
		ДокументОбъект.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.НомерДокумента);
		ДокументОбъект.Операция = Перечисления.ОперацииОтгрузкиМДЛП.Продажа;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.НомераУпаковок.Очистить();
	
	ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса[РезультатЗапроса.ВГраница()], ДокументОснование);
	
КонецПроцедуры

Процедура ЗаполнитьУведомлениеНаОсновании(ДокументОбъект, ДокументОснование)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Шапка.Ссылка                       КАК Ссылка,
	|	Шапка.Ссылка                       КАК Основание,
	|	ОрганизацииМДЛП.Организация        КАК Организация,
	|	ОрганизацииМДЛП.МестоДеятельности  КАК МестоДеятельности,
	|	Шапка.Номер                        КАК НомерДокумента,
	|	Шапка.Дата                         КАК ДатаДокумента,
	|	НЕ Шапка.Проведен                  КАК ЕстьОшибкиПроведен
	|ИЗ
	|	#ДокументШапка КАК Шапка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СубъектыОбращенияМДЛП КАК ОрганизацииМДЛП
	|	ПО
	|		ОрганизацииМДЛП.ОрганизацияКонтрагент = Шапка.Организация
	|		И ОрганизацииМДЛП.ОбъектМестаДеятельности = Шапка.Склад
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка  КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументыПриемки
	|ИЗ
	|	#УведомлениеШапка КАК ТаблицаДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатусыИнформированияМДЛП КАК Статусы
	|	ПО
	|		Статусы.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.Основание = &ДокументОснование
	|	И НЕ ТаблицаДокументы.ПометкаУдаления
	|	И НЕ (ТаблицаДокументы.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ)
	|		И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияМДЛП.Закрыто))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                                    КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры                               КАК Серия,
	|	ТаблицаТовары.Количество / ЕСТЬNULL(Упаковки.Коэффициент, 1)  КАК Количество
	|ПОМЕСТИТЬ КОформлению
	|ИЗ
	|	#ДокументТовары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СерииНоменклатуры КАК СправочникСерии
	|	ПО
	|		СправочникСерии.Ссылка = ТаблицаТовары.СерияНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры  КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = ТаблицаТовары.Номенклатура
	|		И Упаковки.ЕдиницаИзмерения = ТаблицаТовары.Номенклатура.Упаковка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И СправочникСерии.СерияПромаркированаДляЦелейМДЛП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура  КАК Номенклатура,
	|	ТаблицаТовары.Серия         КАК Серия,
	|	&Количество                 КАК Количество
	|ИЗ
	|	#УведомлениеНомераУпаковок  КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОформленныеДокументыПриемки КАК ОформленныеДокументы
	|	ПО
	|		ОформленныеДокументы.Ссылка = ОформленныеТовары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		#УведомлениеТовары  КАК ТаблицаТовары
	|	ПО
	|		ТаблицаТовары.Ссылка = ОформленныеТовары.Ссылка
	|		И ТаблицаТовары.ИдентификаторСтроки = ОформленныеТовары.ИдентификаторСтроки
	|ГДЕ
	|	НЕ ОформленныеТовары.Отклонено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Серия              КАК Серия,
	|	СУММА(Товары.Количество)  КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).Упаковка.КоличествоВУпаковке, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).Упаковка.КоличествоВУпаковке
	|	КОНЕЦ                     КАК КоличествоПервичныхУпаковокВоВторичной
	|ИЗ
	|	КОформлению  КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|ИМЕЮЩИЕ
	|	СУММА(Количество) > 0
	|";
	
	УведомленияСДолями = Новый Массив;
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОбОтпускеПоЛьготномуРецептуМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОВыдачеВОтделенияМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОбОтпускеЛППоДокументамОтличнымОтЧекаМДЛП);
	УведомленияСДолями.Добавить(Метаданные.Документы.УведомлениеОВыбытииМДЛП);
	
	ТекстДолиУпаковки = "ВЫБОР
	|		КОГДА ОформленныеТовары.КоличествоПервичныхУпаковок > 0 И ТаблицаТовары.КоличествоПервичныхУпаковокВоВторичной > 0
	|			ТОГДА -ОформленныеТовары.КоличествоПервичныхУпаковок / ТаблицаТовары.КоличествоПервичныхУпаковокВоВторичной
	|		ИНАЧЕ -1
	|	КОНЕЦ";
	
	МетаданныеУведомления = ДокументОбъект.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеШапка", МетаданныеУведомления.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеНомераУпаковок", МетаданныеУведомления.ПолноеИмя() + ".НомераУпаковок");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УведомлениеТовары", МетаданныеУведомления.ПолноеИмя() + ".Товары");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументШапка", ДокументОснование.Метаданные().ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументТовары", ДокументОснование.Метаданные().ПолноеИмя() + ".Товары");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Количество", ?(УведомленияСДолями.Найти(МетаданныеУведомления) = Неопределено, "-1", ТекстДолиУпаковки));
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные()) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Шапка.Склад", "Шапка.СкладОтправитель");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ЭтоПерезаполнение = Не ДокументОбъект.Ссылка.Пустая();
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
			Шапка.Ссылка,
			Шапка.ЕстьОшибкиПроведен);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Шапка);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "НомерДокумента") Тогда
			ДокументОбъект.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.НомерДокумента);
		КонецЕсли;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеНедостачТоваров") И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УведомлениеОВыбытииМДЛП") Тогда
			ДокументОбъект.ТипВыводаИзОборота = Перечисления.ВидыВыводаИзОборотаМДЛП.Недостача;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УведомлениеОПеремещенииМДЛП") Тогда
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Организация", "ВЫБОР КОГДА ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами) ТОГДА ОрганизацияПолучатель ИНАЧЕ Организация КОНЕЦ");
			Реквизиты.Вставить("Склад"      , "СкладПолучатель");
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, Реквизиты);
			Значения = ОрганизацияМестоДеятельностиОбъекта(Реквизиты.Организация, Реквизиты.Склад);
			ОрганизацияПолучатель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Значения, "Организация");
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) И ДокументОбъект.Организация = ОрганизацияПолучатель Тогда
				ДокументОбъект.МестоДеятельностиПолучатель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Значения, "МестоДеятельности");
			ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				ДокументОбъект.Организация = ОрганизацияПолучатель;
				ДокументОбъект.МестоДеятельностиПолучатель = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Значения, "МестоДеятельности");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП") Тогда
			ДокументОбъект.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП.Прочее;
			ДокументОбъект.НаименованиеДокумента = НСтр("ru = 'Отчет о розничных продажах'");
			ДокументОбъект.ДокументыПродажи.Очистить();
			ДокументПродажи = ДокументОбъект.ДокументыПродажи.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументПродажи, ДокументОбъект);
			ДокументПродажи.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УведомлениеОПовторномВводеВОборотМДЛП") Тогда
			ДокументОбъект.ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаИзОборотаМДЛП.Списание;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.НомераУпаковок.Очистить();
	
	ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса[РезультатЗапроса.ВГраница()], ДокументОснование);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса, ДокументОснование)
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru='В %1 отсутствуют данные для заполнения.'"),
			ДокументОснование);
		
	КонецЕсли;
	
	ЗаполнитьИдентификаторДокумента = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УведомлениеОРозничнойПродажеМДЛП")
		И ЗначениеЗаполнено(ДокументОбъект.ДокументыПродажи);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовара = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Выборка);
		СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
		
		Если ЗаполнитьИдентификаторДокумента Тогда
			// При создании документа УведомлениеОРозничнойПродажеМДЛП на основании ОтчетОРозничныхПродажах в ТЧ ДокументыПродажи может быть только один документ.
			СтрокаТовара.ИдентификаторДокумента = ДокументОбъект.ДокументыПродажи[0].ИдентификаторДокумента;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
