////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Возвращает информацию, включена ли интеграция с 1С:Документооборотом редакции 2.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьИнтеграцию() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот");
	
КонецФункции

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ИспользоватьИнтеграцию() Тогда
		Возврат;
	КонецЕсли;
	
	Если МестоРазмещенияКоманд = Неопределено И Форма.Элементы.Найти("Список") <> Неопределено
			И (СтрНайти(Форма.ИмяФормы, "ФормаСписка") <> 0 Или СтрНайти(Форма.ИмяФормы, "ФормаВыбора") <> 0) Тогда
		Для Каждого ЭлементКомПанели Из Форма.Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементКомПанели) = Тип("ГруппаФормы") Тогда
				Для Каждого ЭлементГруппы Из ЭлементКомПанели.ПодчиненныеЭлементы Цикл
					Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы")
							И (ЭлементГруппы.Заголовок = НСтр("ru = 'Создать на основании'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Органайзер'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Печать'")) Тогда
						МестоРазмещенияКоманд = ЭлементКомПанели;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МестоРазмещенияКоманд <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Переместим команды создания на основании вниз.
	Если Форма.Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс")
			<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьПисьмо")
			<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьПисьмо,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним тип и идентификатор объекта-основания.
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
			И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Форма["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ТипОбъектаДО;
		Форма["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО;
		
	КонецЕсли;
	
	// Сохраним идентификатор связанного объекта ДО.
	Если Форма.Параметры.Свойство("Основание")
			И ТипЗнч(Форма.Параметры.Основание) = Тип("Структура") Тогда
		Основание = Форма.Параметры.Основание;
		Если Основание.Свойство("Объект1СДокументооборота") Тогда
			КомандаФормы = Форма.Команды.Добавить("ИдентификаторОбъектаДО");
			КомандаФормы.Действие = Основание.Объект1СДокументооборота.ID;
		КонецЕсли;
	КонецЕсли;
	
	// Исключения не должны делать невозможным открытие форм интегрируемых объектов.
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты1СДокументооборота") Тогда
			// Хронометраж.
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP", Истина) Тогда
				ДобавитьКомандуПереключитьХронометраж(Форма, МестоРазмещенияКоманд);
				ДобавитьКомандуУказатьТрудозатраты(Форма, МестоРазмещенияКоманд);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Помещает в дополнительные свойства идентификатор объекта-основания. Вызывается перед записью объекта.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма записываемого объекта.
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект.
//   ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	// Команда используется для передачи идентификатора объекта ДО при создании на основании.
	КомандаИдентификатор = Форма.Команды.Найти("ИдентификаторОбъектаДО");
	Если КомандаИдентификатор <> Неопределено Тогда
		Объект.ДополнительныеСвойства.Вставить("ИдентификаторОбъектаДО",
			КомандаИдентификатор.Действие);
	КонецЕсли;
	
КонецПроцедуры

// Начинает получение файлов связанных документов.
//
// Параметры:
//   СвязанныеДокументы - Массив из Структура:
//     * ID - Строка - идентификатор связанного документа.
//     * Тип - Строка - тип связанного документа.
//
// Возвращаемое значение:
//   Строка - адрес во временном хранилище, куда будет помещен результат.
//
Функция ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы) Экспорт
	
	КлючЗадания = Новый УникальныйИдентификатор;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, КлючЗадания);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(АдресВоВременномХранилище);
	МассивПараметров.Добавить(СвязанныеДокументы);
	МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
	МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
	
	ФоновыеЗадания.Выполнить(
		"ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументовАсинхронно",
		МассивПараметров, КлючЗадания, НСтр("ru = 'Получение файлов связанных документов'"));
		
	Возврат АдресВоВременномХранилище;
	
КонецФункции

// Асинхронно, в фоновом задании, получает файлы связанных документов.
//
// Параметры:
//   Адрес - Строка - адрес для результата выполнения во временном хранилище.
//   СвязанныеДокументы - Массив из Структура:
//     * ID - Строка - идентификатор связанного документа.
//     * Тип - Строка - тип связанного документа.
//   ИмяПользователя - Строка - имя пользователя ДО, сохраненного в настройках пользователя,
//     из сеанса которого инициирован асинхронный вызов.
//   Пароль - Строка - пароль этого пользователя.
//
Процедура ПолучитьФайлыСвязанныхДокументовАсинхронно(Адрес, СвязанныеДокументы, ИмяПользователя, Пароль) Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = ИмяПользователя;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = Пароль;
	
	Результат = Обработки.ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы);
	ПоместитьВоВременноеХранилище(Результат, Адрес);
	
КонецПроцедуры

// Получает список объектов по ссылкам из указанного объекта ИС, подходящих для автоматического 
// добавления связей (имеющих настроенные правила интеграции). Учитывает табличные части.
//
// Параметры:
//   СсылкаНаОбъектИС - ЛюбаяСсылка - объект ИС, связи к которому добавляются.
//
// Возвращаемое значение:
//   Массив - ссылки на подходящие объекты ИС.
//
Функция ПолучитьПодходящиеОбъектыДляДобавленияСвязей(СсылкаНаОбъектИС) Экспорт
	
	ПодходящиеОбъекты = Новый Массив;
	
	ТипыОбъектовСПравилами = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьТипыОбъектовСПравиламиИнтеграции(
		"DMInternalDocument, DMIncomingDocument, DMOutgoingDocument");
	Если ТипыОбъектовСПравилами.Количество() = 0 Тогда
		Возврат ПодходящиеОбъекты;
	КонецЕсли;
	
	МетаданныеОбъекта = СсылкаНаОбъектИС.Метаданные();
	
	ОбъектИС = Неопределено; // получим объект ниже при необходимости
	
	// Проверим реквизиты шапки.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		ПодходитПоТипу = Ложь;
		Для Каждого ТипОбъектаСПравилами Из ТипыОбъектовСПравилами Цикл
			Если Реквизит.Тип.СодержитТип(ТипОбъектаСПравилами) Тогда
				ПодходитПоТипу = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПодходитПоТипу Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектИС = Неопределено Тогда
			ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
		КонецЕсли;
		
		ЗначениеРеквизитаИС = ОбъектИС[Реквизит.Имя];
		ЗначениеРеквизитаДОТипИС = ТипЗнч(ЗначениеРеквизитаИС);
		
		Если ТипыОбъектовСПравилами.Найти(ЗначениеРеквизитаДОТипИС) <> Неопределено
			И ЗначениеЗаполнено(ЗначениеРеквизитаИС) Тогда
			ПодходящиеОбъекты.Добавить(ЗначениеРеквизитаИС);
		КонецЕсли;
				
	КонецЦикла;
	
	// Проверим табличные части.
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
			ПодходитПоТипу = Ложь;
			Для Каждого ТипОбъектаСПравилами Из ТипыОбъектовСПравилами Цикл
				Если Реквизит.Тип.СодержитТип(ТипОбъектаСПравилами) Тогда
					ПодходитПоТипу = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПодходитПоТипу Тогда
				Продолжить;
			КонецЕсли;
			
					
			Если ОбъектИС = Неопределено Тогда
				ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого СтрокаТабличнойЧасти Из ОбъектИС[ТабличнаяЧасть.Имя] Цикл
				
				ЗначениеРеквизитаИС = СтрокаТабличнойЧасти[Реквизит.Имя];
				ЗначениеРеквизитаДОТипИС = ТипЗнч(ЗначениеРеквизитаИС);
				
				Если ТипыОбъектовСПравилами.Найти(ЗначениеРеквизитаДОТипИС) <> Неопределено
					И ЗначениеЗаполнено(ЗначениеРеквизитаИС) Тогда
					ПодходящиеОбъекты.Добавить(ЗначениеРеквизитаИС);
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Ссылки на подходящие документы могут храниться где-то еще, например, в регистрах сведений.
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(
		ОбъектИС,
		ПодходящиеОбъекты);
		
	ПодходящиеОбъекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеОбъекты);
		
	Возврат ПодходящиеОбъекты;
	
КонецФункции

// Получает пояснение к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//
// Возвращаемое значение:
//   Строка - пояснение к состоянию согласования.
//
Функция ПояснениеСостоянияСогласования(Установил, ДатаУстановки) Экспорт
	
	Результат = "";
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииПоясненияСостоянияСогласования(
		Установил, ДатаУстановки, Результат);
	Если Результат <> "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУстановки) Тогда
		Результат = Формат(ДатаУстановки, "ДЛФ=DT");
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Результат + " (" + СокрЛП(Установил) + ")";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Установил;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует универсальную таблицу присоединяемых печатных форм для последующего создания.
//
// Параметры:
//   ПечатныеФормы - ТаблицаЗначений - табличная часть справочника ПравилаИнтеграцииС1СДокументооборотом:
//     * ИмяКоманды - Строка
//     * МенеджерПечати - Строка
//     * Обновлять - Булево
//     * ПредставлениеКоманды - Строка
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы
//
Функция ПрисоединяемыеПечатныеФормы(ПечатныеФормы) Экспорт
	
	ПрисоединяемыеПечатныеФормы = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы();
	Для Каждого Строка Из ПечатныеФормы Цикл
		ЗаполнитьЗначенияСвойств(ПрисоединяемыеПечатныеФормы.Добавить(), Строка);
	КонецЦикла;
	
	Возврат ПрисоединяемыеПечатныеФормы;
	
КонецФункции

// Заполняет правила заполнения при выгрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - имя XDTO-типа приемника.
//   Источник - Строка - полное имя объекта метаданных-источника.
//
Процедура УстановитьПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриУстановкеПравилаЗаполненияПриВыгрузкеПоУмолчанию(
		ПравилаЗаполнения, Приемник, Источник, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Источник); // ОбъектМетаданныхДокумент
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = Новый Соответствие;
	ВариантыЗаполнения.Вставить("Организация", "organization");
	ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
	ВариантыЗаполнения.Вставить("Комментарий", "comment");
	ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
	ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
	ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
	ВариантыЗаполнения.Вставить("Сумма", "sum");
	ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
	ВариантыЗаполнения.Вставить("Валюта", "currency");
	ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
	ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
	ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
	ВариантыЗаполнения.Вставить("Содержание", "summary");
	ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
	ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
	ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
	ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
	ВариантыЗаполнения.Вставить("Утвердил", "signer");
	ВариантыЗаполнения.Вставить("Подготовил", "author");
	ВариантыЗаполнения.Вставить("Автор", "author");
	ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
	ВариантыЗаполнения.Вставить("Ответственный", "responsible");
	ВариантыЗаполнения.Вставить("Наименование", "name");
	ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
	ВариантыЗаполнения.Вставить("ИНН", "inn");
	ВариантыЗаполнения.Вставить("КПП", "kpp");
	ВариантыЗаполнения.Вставить("КодПоОКПО", "okpo");
	ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
	ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
	ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("Ответственный", "author");
	ВариантыЗаполнения.Вставить("Проект", "project");
	
	ВариантыЗаполнения.Вставить("ДатаВходящегоДокумента", "externalDate");
	ВариантыЗаполнения.Вставить("НомерВходящегоДокумента", "externalNumber");
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Значение = ВариантыЗаполнения.Получить(Реквизит.Имя);
		Если Значение <> Неопределено Тогда
			ПравилаЗаполнения.Вставить(Значение, Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет правила заполнения при загрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - полное имя объекта метаданных-приемника.
//   Источник - Строка - имя XDTO-типа источника.
//
Процедура УстановитьПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриУстановкеПравилаЗаполненияПриЗагрузкеПоУмолчанию(
		ПравилаЗаполнения, Приемник, Источник, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = Новый Соответствие;
	
	МетаданныеПриемника = Метаданные.НайтиПоПолномуИмени(Приемник); // ОбъектМетаданныхДокумент
	Если МетаданныеПриемника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(Источник, "Document") <> 0 Тогда
		ВариантыЗаполнения.Вставить("Организация", "organization");
		ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
		ВариантыЗаполнения.Вставить("Комментарий", "comment");
		ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
		ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
		ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
		ВариантыЗаполнения.Вставить("Сумма", "sum");
		ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
		ВариантыЗаполнения.Вставить("Валюта", "currency");
		ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
		ВариантыЗаполнения.Вставить("Содержание", "summary");
		ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
		ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
		ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
		ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
		ВариантыЗаполнения.Вставить("Утвердил", "signer");
		ВариантыЗаполнения.Вставить("Подготовил", "author");
		ВариантыЗаполнения.Вставить("Автор", "author");
		ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("Наименование", "title");
		ВариантыЗаполнения.Вставить("Статус", "statusApproval");
		ВариантыЗаполнения.Вставить("Согласован", "statusApproval");
		
		ВариантыЗаполнения.Вставить("ДатаВходящегоДокумента", "externalDate");
		ВариантыЗаполнения.Вставить("НомерВходящегоДокумента", "externalNumber");
		
	ИначеЕсли Источник = "DMCorrespondent" Тогда
		ВариантыЗаполнения.Вставить("Наименование", "name");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
		ВариантыЗаполнения.Вставить("ИНН", "inn");
		ВариантыЗаполнения.Вставить("КПП", "kpp");
		ВариантыЗаполнения.Вставить("КодПоОКПО", "okpo");
		ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
		ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
		ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
		ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеПриемника.Реквизиты Цикл
		Если ВариантыЗаполнения[Реквизит.Имя] <> Неопределено Тогда
			ПравилаЗаполнения[Реквизит.Имя] = ВариантыЗаполнения[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание веб-сервиса 1С:Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ОписаниеВебСервисов() Экспорт
	
	Макет = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ПолучитьМакет("ОписаниеВебСервисов");
	
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

// Проверяет наличие связанных объектов, если их не оказывается, получает сведения о них из Документооборота.
//
Процедура ПроверитьОбновитьДанныеСвязанныхОбъектов() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом");
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetLinkedObjectsRequest");
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	НаборЗаписей = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СоздатьНаборЗаписей();
	
	Для Каждого ОбъектXDTO Из Ответ.objects Цикл
		Объекты = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкиПоВнешнимОбъектам(ОбъектXDTO);
		Для Каждого Объект Из Объекты Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ИдентификаторОбъектаДО = ОбъектXDTO.objectID.ID;
			Запись.ТипОбъектаДО = ОбъектXDTO.objectID.type;
			Запись.Объект = Объект;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыИЗадачи

// Получает объект XDTO бизнес-процесса, заполненный по данным переданных предмета и шаблона.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - тип бизнес-процесса.
//   Шаблон - Структура:
//     * ID - Строка - идентификатор шаблона.
//     * type - Строка - тип шаблона.
//   Предмет - Структура:
//     * ID - Строка - идентификатор предмета.
//     * type - Строка - тип предмета.
//
// Возвращаемое значение:
//   ОбъектXDTO - XDTO объект с типом бизнес-процесса.
//
Функция НовыйБизнесПроцессПоШаблону(Прокси, Тип, Шаблон, Предмет = Неопределено) Экспорт
	
	// Создание бизнес-процесса
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetBusinessProcessByTemplateRequest");
	
	Запрос.type = Тип;
	
	ШаблонБизнесПроцессаИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Шаблон.ID,
		Шаблон.type);
	
	Запрос.businessProcessTemplateID = ШаблонБизнесПроцессаИд;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Предмет.ID,
			Предмет.type);
		
		Запрос.targetID = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.Object;
	
КонецФункции

// Выполняет сохранение и запуск бизнес-процесса.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - XDTO объект, хранящий данные бизнес-процесса.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMLaunchBusinessProcessResponse.
//
Функция ЗапуститьБизнесПроцесс(Прокси, Объект) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMLaunchBusinessProcessRequest");
	Запрос.businessProcess = Объект;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает индекс картинки пометки завершения процесса или задачи по значению пометки.
//
// Параметры:
//   Значение - Строка - значение пометки.
//
// Возвращаемое значение:
//   Число - индекс картинки.
//
Функция ИндексКартинкиПометкиЗавершения(Значение) Экспорт
	
	Если Значение = "NotExecuted" Тогда
		Возврат 0;
		
	ИначеЕсли Значение = "Stopped" Тогда
		Возврат 1;
		
	ИначеЕсли Значение = "Interrupted" Тогда
		Возврат 2;
		
	ИначеЕсли Значение = "ReadyToStart" Тогда
		Возврат 3;
		
	ИначеЕсли Значение = "StartCanceled" Тогда
		Возврат 4;
		
	ИначеЕсли Значение = "ExecutedNeutral" Тогда
		Возврат 5;
		
	ИначеЕсли Значение = "ExecutedNegative" Тогда
		Возврат 6;
		
	ИначеЕсли Значение = "ExecutedAlmostPositive" Тогда
		Возврат 7;
		
	ИначеЕсли Значение = "ExecutedPositive" Тогда
		Возврат 8;
		
	ИначеЕсли Значение = "ReadyToExecute" Тогда
		Возврат 9;
		
	ИначеЕсли Значение = "ExecutionCanceled" Тогда
		Возврат 10;
		
	Иначе
		Возврат -1;
		
	КонецЕсли;
	
КонецФункции

// Возвращает объект XDTO бизнес-процесса, заполненный в соответствие с параметрами.
//
// Параметры:
//   ТипПроцессаXDTO - Строка - тип бизнес-процесса.
//   Параметры - Структура:
//     * ID - Строка - идентификатор бизнес-процесса.
//     * type - Строка - тип бизнес-процесса.
//     * Шаблон - Структура:
//         ** ID - Строка - идентификатор шаблона.
//         ** type - Строка - тип шаблона.
//     * Предмет - Структура:
//         ** ID - Строка - идентификатор предмета.
//         ** type - Строка - тип предмета.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция ПолучитьОбъектXDTOПроцесса(ТипПроцессаXDTO, Параметры) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	// Если открывается новая карточка по заполненному шаблону.
	Если ЗначениеЗаполнено(Параметры.ID) И ЗначениеЗаполнено(Параметры.type) Тогда
		ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			Параметры.type,
			Параметры.ID);
		
	ИначеЕсли Параметры.Свойство("Шаблон") Тогда
		Если Параметры.Свойство("Предмет") Тогда
			ОбъектXDTO = НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцессаXDTO, Параметры.Шаблон, Параметры.Предмет);
		Иначе
			ОбъектXDTO = НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцессаXDTO, Параметры.Шаблон);
		КонецЕсли;
		
	Иначе
		Если Параметры.Свойство("Предмет") Тогда
			ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НовыйБизнесПроцесс(
				Прокси,
				ТипПроцессаXDTO,
				Параметры.Предмет);
		Иначе
			ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НовыйБизнесПроцесс(
				Прокси,
				ТипПроцессаXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Выполняет принятие задач к исполнению.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Задачи - Массив из Строка - массив идентификаторов задач Документооборота, которые нужно принять к исполнению.
//
// Возвращаемое значение:
//   Булево - признак успеха принятия задач к исполнению.
//
Функция ПринятьЗадачуКИсполнению(Прокси, Задачи) Экспорт
	
	Если Прокси = Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAcceptTasksRequest");
	СписокЗадач = Запрос.tasks; // СписокXDTO
	
	Для Каждого ID Из Задачи Цикл
		ЗадачаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
		ОбъектИД = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, "DMBusinessProcessTask");
		ЗадачаXDTO.objectID = ОбъектИД;
		ЗадачаXDTO.name = "";
		СписокЗадач.Добавить(ЗадачаXDTO);
	КонецЦикла;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	
	Попытка
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Выполняет отмену принятия задач к исполнению.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Задачи - Массив из Строка - массив идентификаторов задач Документооборота,
//     принятие к исполнению которых нужно отменить.
//
// Возвращаемое значение:
//   Булево - признак успеха отмены принятия задач к исполнению.
//
Функция ОтменитьПринятиеЗадачКИсполнению(Прокси, Задачи) Экспорт
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
		
		Если Прокси = Неопределено Тогда
			Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		КонецЕсли;
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRevokeTaskAcceptanceRequest");
		СписокЗадач = Запрос.tasks; // СписокXDTO
		
		Для Каждого ID Из Задачи Цикл
			ЗадачаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
			ОбъектИД = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, "DMBusinessProcessTask");
			ЗадачаXDTO.objectID = ОбъектИД;
			ЗадачаXDTO.name = "";
			СписокЗадач.Добавить(ЗадачаXDTO);
		КонецЦикла;
		
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		
		Попытка
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает краткое имя точки маршрута.
//
// Параметры:
//   ПроцессТип - Строка - тип процесса.
//   ПолноеИмя - Строка - полное имя точки маршрута
//
// Возвращаемое значение:
//   Строка - краткое имя точки маршрута.
//
Функция КраткоеИмяТочкиМаршрута(ПроцессТип, ПолноеИмя) Экспорт
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если ПолноеИмя = "Ознакомиться с результатом согласования" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		Если ПолноеИмя = "Контролировать поручение" Тогда //@NON-NLS-1
			КраткоеИмя = "Контролировать"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Проверить поручение" Тогда //@NON-NLS-1
			КраткоеИмя = "Проверить"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		Если ПолноеИмя = "Ответственное исполнение" Тогда //@NON-NLS-1
			КраткоеИмя = "ОтветственноеИсполнение"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Контролировать исполнение" Тогда //@NON-NLS-1
			КраткоеИмя = "Контролировать"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Проверить исполнение" Тогда //@NON-NLS-1
			КраткоеИмя = "Проверить"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ПолноеИмя = "Ознакомиться с регистрацией" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		Если Найти(ПолноеИмя, "Ознакомиться с результатом утверждения") <> 0 Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		Если ПолноеИмя = "Обработать резолюцию" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		Если ПолноеИмя = "Контролировать ход процесса" Тогда //@NON-NLS-1
			КраткоеИмя = "Контролировать"; //@NON-NLS-1
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Если ПолноеИмя = "Исполнение \ ознакомление" Тогда //@NON-NLS-1
			КраткоеИмя = "ИсполнениеОзнакомление"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "В дело" Тогда //@NON-NLS-1
			КраткоеИмя = "ВДело"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Если ПолноеИмя = "Рассмотрение" Тогда //@NON-NLS-1
			КраткоеИмя = "ВложенныйПроцесс1"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Исполнение \ ознакомление" Тогда //@NON-NLS-1
			КраткоеИмя = "ВложенныйПроцесс2"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "В дело" Тогда //@NON-NLS-1
			КраткоеИмя = "ВложенныйПроцесс3"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		Если ПолноеИмя = "Рассмотреть вопрос" Тогда //@NON-NLS-1
			КраткоеИмя = "РассмотрениеИнициатором"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Ознакомиться с результатом рассмотрения" Тогда //@NON-NLS-1
			КраткоеИмя = "ОзнакомлениеСРезультатомРассмотрения"; //@NON-NLS-1
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		Если ПолноеИмя = "Пригласить" Тогда //@NON-NLS-1
			КраткоеИмя = "Пригласить"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Ознакомиться с результатом приглашения" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Оповестить о результатах приглашения" Тогда //@NON-NLS-1
			КраткоеИмя = "Оповестить"; //@NON-NLS-1
		КонецЕсли;
		
	Иначе
		КраткоеИмя = ПолноеИмя;
	КонецЕсли;
	
	Возврат КраткоеИмя;
	
КонецФункции

// Формирует объект XDTO, описывающий участника задачи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMBusinessProcessTaskExecutor.
//
Функция УчастникЗадач(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	УчастникЗадач = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMBusinessProcessTaskExecutor");
	
	ЗаполнитьУчастникаЗадачи(
		Прокси,
		УчастникЗадач,
		Исполнитель,
		ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	
	Возврат УчастникЗадач;
	
КонецФункции

// Формирует объект XDTO, описывающий согласующего в бизнес-процессе "Согласование" в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMBusinessProcessApprovalParticipant.
//
Функция УчастникПроцессаСогласование(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	УчастникЗадач = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMBusinessProcessApprovalParticipant");
	
	ЗаполнитьУчастникаЗадачи(
		Прокси,
		УчастникЗадач,
		Исполнитель,
		ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	
	Возврат УчастникЗадач;
	
КонецФункции

// Формирует объект XDTO, описывающий участника бизнес-процесса "Приглашение" в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMBusinessProcessInvitationParticipant.
//
Функция УчастникПроцессаПриглашение(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	УчастникЗадач = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMBusinessProcessInvitationParticipant");
	
	ЗаполнитьУчастникаЗадачи(
		Прокси,
		УчастникЗадач,
		Исполнитель,
		ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	
	Возврат УчастникЗадач;
	
КонецФункции

// Формирует объект XDTO, описывающий исполнителя в бизнес-процессе "Исполнение" в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMBusinessProcessPerformanceParticipant.
//
Функция УчастникПроцессаИсполнение(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	УчастникЗадач = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMBusinessProcessPerformanceParticipant");
	
	ЗаполнитьУчастникаЗадачи(
		Прокси,
		УчастникЗадач,
		Исполнитель,
		ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	
	Возврат УчастникЗадач;
	
КонецФункции

#КонецОбласти

#Область Документы

// Настраивает форму документа согласно его виду.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа 1С:Документооборота.
//   documentType - ОбъектXDTO - вид документа.
//   organization - ОбъектXDTO - организация.
//
Процедура НастроитьФормуДокументаСогласноВидуДокументаXDTO(Форма, documentType, organization = Неопределено) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	Элементы = Форма.Элементы;
	
	Если ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент" Тогда
		
		Элементы.СрокИсполнения.Видимость =
			(documentType <> Неопределено И documentType.performanceDateEnabled = Истина);
		Элементы.Сумма.Видимость =
			(documentType <> Неопределено И documentType.sumEnabled = Истина);
		Элементы.Валюта.Видимость =
			(documentType <> Неопределено И documentType.sumEnabled = Истина);
		
	ИначеЕсли ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент" Тогда
		
		Элементы.СрокИсполнения.Видимость =
			(documentType <> Неопределено И documentType.PerformanceDateEnabled = Истина);
		Элементы.ГруппаНомерДатаПолучателя.Видимость =
			(documentType <> Неопределено И documentType.ExternalNumberEnabled = Истина);
		Элементы.Сумма.Видимость =
			(documentType <> Неопределено И documentType.SumEnabled = Истина);
		Элементы.Валюта.Видимость =
			(documentType <> Неопределено И documentType.SumEnabled = Истина);
		
	ИначеЕсли ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент" Тогда
		
		Элементы.СрокИсполнения.Видимость =
			(documentType <> Неопределено И documentType.performanceDateEnabled = Истина);
		Элементы.Сумма.Видимость =
			(documentType <> Неопределено И documentType.sumEnabled = Истина);
		Элементы.Валюта.Видимость =
			(documentType <> Неопределено И documentType.sumEnabled = Истина);
		Элементы.СрокДействияПредставление.Видимость =
			(documentType <> Неопределено И documentType.durationEnabled = Истина);
		Элементы.Адресат.Видимость =
			(documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "addresseeEnabled")
			И documentType.addresseeEnabled);
		
		Форма.ВестиУчетПоКонтрагентам =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "correspondentEnabled")
			И documentType.correspondentEnabled;
		Форма.ВестиУчетСторон =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "partiesEnabled")
			И documentType.partiesEnabled;
		Форма.ЯвляетсяЗаявкойНаОплату =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "isAPaymentRequest")
			И documentType.isAPaymentRequest;
		Форма.ВестиУчетПоСтатьямДДС =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "cashFlowDetailsEnabled")
			И documentType.cashFlowDetailsEnabled;
		Форма.ВестиУчетТоваровИУслуг =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "productRowsEnabled")
			И documentType.productRowsEnabled;
		Форма.ИспользоватьПодписание =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "useSigningByManager")
			И documentType.useSigningByManager;
		Форма.ИспользоватьУтверждение =
			documentType <> Неопределено
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "useConfirmation")
			И documentType.useConfirmation;
		
		Если documentType <> Неопределено
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(documentType, "signatureOption") Тогда
			ВариантПодписания = documentType.signatureOption.objectID.ID;
		Иначе
			ВариантПодписания = "";
		КонецЕсли;
		
		Элементы.ГруппаСтороны.Видимость = Форма.ВестиУчетСторон
			И Не Форма.ЯвляетсяЗаявкойНаОплату;
		Элементы.СтороныПодписан.Видимость = Форма.ВестиУчетСторон
			И Не Форма.ЯвляетсяЗаявкойНаОплату
			И ВариантПодписания <> "НеПодписывается";
		Элементы.СтороныДатаПодписи.Видимость = Форма.ВестиУчетСторон
			И Не Форма.ЯвляетсяЗаявкойНаОплату
			И ВариантПодписания <> "НеПодписывается";
		
		Если Не Форма.ВестиУчетСторон Или Форма.ЯвляетсяЗаявкойНаОплату Тогда
			Элементы.ГруппаНашаОрганизация.Видимость =
				(documentType <> Неопределено И documentType.organizationEnabled = Истина);
		Иначе
			Элементы.ГруппаНашаОрганизация.Видимость = Ложь;
		КонецЕсли;
		
		// Заявка на оплату.
		Если Форма.ЯвляетсяЗаявкойНаОплату Тогда
			НаименованиеПолучательXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредопределенноеЗначениеДО(
				"DMPartyName", "Получатель"); //@NON-NLS-2
			Форма.Получатель = "";
			Форма.ПолучательID = "";
			Форма.ПолучательТип = "";
			Для Каждого СтрокаСторона Из Форма.Стороны Цикл
				Если СтрокаСторона.НаименованиеID = НаименованиеПолучательXDTO.objectID.ID Тогда
					Форма.Получатель = СтрокаСторона.Сторона;
					Форма.ПолучательID = СтрокаСторона.СторонаID;
					Форма.ПолучательТип = СтрокаСторона.СторонаТип;
				КонецЕсли;
			КонецЦикла;
			Элементы.ГруппаПолучатель.Видимость = Истина;
			Элементы.Организация.Заголовок = НСтр("ru = 'Плательщик'");
			Элементы.ГруппаНашаОрганизация.ОтображатьЗаголовок = Ложь;
			Элементы.АвансовыйОтчет.Видимость = (Форма.ПолучательТип = "DMUser"
				Или ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(
					Форма.ПолучательТип) = "DMUser");
		Иначе
			Элементы.ГруппаПолучатель.Видимость = Ложь;
			Элементы.Организация.Заголовок = НСтр("ru = 'Организация'");
			Элементы.ГруппаНашаОрганизация.ОтображатьЗаголовок = Истина;
		КонецЕсли;
		
		Элементы.ГруппаКонтрагент.ОтображатьЗаголовок = Форма.ВестиУчетПоКонтрагентам;
		Элементы.Контрагент.Видимость = Форма.ВестиУчетПоКонтрагентам;
		Элементы.КонтактноеЛицо.Видимость = Форма.ВестиУчетПоКонтрагентам;
		Элементы.ГруппаСтатьиДДС.Видимость = Форма.ВестиУчетПоСтатьямДДС;
		Элементы.СтраницаТовары.Видимость = Форма.ВестиУчетТоваровИУслуг;
		
		Если organization <> Неопределено
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(organization, "VATpayer") Тогда
			Форма.УчитыватьНДС = organization.VATpayer;
		Иначе
			Форма.УчитыватьНДС = Истина;
		КонецЕсли;
		Элементы.СуммаНДС.Видимость =
			Форма.УчитыватьНДС
			И documentType <> Неопределено
			И documentType.sumEnabled = Истина;
		Элементы.ТоварыСтавкаНДС.Видимость =
			Форма.УчитыватьНДС
			И documentType <> Неопределено
			И documentType.sumEnabled = Истина;
		Элементы.ТоварыСуммаНДС.Видимость =
			Форма.УчитыватьНДС
			И documentType <> Неопределено
			И documentType.sumEnabled = Истина;
		
		Элементы.Подписал.Видимость = Истина;
		Если Форма.ИспользоватьПодписание Тогда
			Элементы.Подписал.Заголовок = НСтр("ru = 'Подписан'");
		ИначеЕсли Форма.ИспользоватьУтверждение Тогда
			Элементы.Подписал.Заголовок = НСтр("ru = 'Утвержден'");
		Иначе
			Элементы.Подписал.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойство объекта XDTO из структуры реквизитов исходного объекта ИС.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект ДО.
//   ИмяСвойства - Строка - имя заполняемого свойства объекта XDTO.
//   СтруктураРеквизитов - Структура, ДанныеФормыСтруктура - предварительно заполненная структура
//     с данными объекта.
//   ПутьДанных - Структура, Строка - имя исходного реквизита.
//
Процедура ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси, ОбъектXDTO, ИмяСвойства, СтруктураРеквизитов,
		ПутьДанных) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ОбъектXDTO, ИмяСвойства, Истина);
	
	Если ТипЗнч(ПутьДанных) = Тип("Структура") Тогда
		
		СвойствоКонтейнер = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			ОбъектXDTO.Свойства().Получить(ИмяСвойства).Тип.Имя);
		
		Для Каждого КлючИЗначение Из ПутьДанных Цикл
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			Таблица = СвойствоКонтейнер[ИмяТаблицы]; // СписокXDTO
			ТипЭлемента = СвойствоКонтейнер.Свойства().Получить(ИмяТаблицы).Тип.Имя;
			Если СтруктураРеквизитов[КлючИЗначение.Значение[0]] = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ИсходнаяТаблица = СтруктураРеквизитов[КлючИЗначение.Значение[0]];
			Если ТипЗнч(ИсходнаяТаблица) = Тип("ТаблицаЗначений") Тогда
				ТаблицаИсточник = ИсходнаяТаблица.Скопировать();
			Иначе // табличная часть
				ТаблицаИсточник = ИсходнаяТаблица.Выгрузить();
			КонецЕсли;
			ТаблицаИсточник.Колонки.Добавить("Тип");
			ТаблицаИсточник.ЗаполнитьЗначения(СтруктураРеквизитов.Тип, "Тип");
			
			Для Каждого ЭлементИсточник Из ТаблицаИсточник Цикл
				Элемент = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ТипЭлемента);
				Для Каждого СтрокаСоответствия Из КлючИЗначение.Значение[1] Цикл
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
						Прокси,
						Элемент,
						СтрокаСоответствия.Ключ,
						ЭлементИсточник,
						СтрокаСоответствия.Значение);
				КонецЦикла;
				Таблица.Добавить(Элемент);
			КонецЦикла;
			
		КонецЦикла;
		
		ОбъектXDTO[ИмяСвойства] = СвойствоКонтейнер;
		
	ИначеЕсли ТипЗнч(ПутьДанных) = Тип("Строка") Тогда
		
		ИмяРеквизита = ПутьДанных;
		Если СтруктураРеквизитов[ИмяРеквизита] = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойства) Тогда
			
			Реквизит = СтруктураРеквизитов[ИмяРеквизита];
			РеквизитID = СтруктураРеквизитов[ИмяРеквизита + "ID"];
			РеквизитТип = СтруктураРеквизитов[ИмяРеквизита + "Тип"];
			
			ЭтоОбъектИС = Ложь;
			СсылкаНаПотребителя = Неопределено;
			Если Метаданные.НайтиПоПолномуИмени(РеквизитТип) <> Неопределено Тогда
				ЭтоОбъектИС = Истина;
				СсылкаНаПотребителя = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(РеквизитТип, РеквизитID);
			КонецЕсли;
			
			ТипСвойства = ОбъектXDTO.Свойства().Получить(ИмяСвойства).Тип.Имя;
			ЗначениеСвойства = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ТипСвойства,
				СсылкаНаПотребителя,
				ЭтоОбъектИС);
			
			Если ЭтоОбъектИС Тогда
				
				Если СтруктураРеквизитов.Тип = "DMInternalDocument" Тогда
					Если ИмяСвойства = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
							Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Контрагент");
					КонецЕсли;
					
				ИначеЕсли СтруктураРеквизитов.Тип = "DMOutgoingDocument" Тогда
					Если ИмяСвойства = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
							Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Получатель");
					КонецЕсли;
					
				ИначеЕсли СтруктураРеквизитов.Тип = "DMIncomingDocument" Тогда
					Если ИмяСвойства = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
							Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Отправитель");
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли РеквизитТип = "Строка" Тогда
				
				ЗначениеСвойства.name = Реквизит;
				ЗначениеСвойства.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(Прокси);
				
				Если СтруктураРеквизитов.Тип = "DMInternalDocument" Тогда
					Если ИмяСвойства = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
							Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Контрагент");
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитов.Тип = "DMOutgoingDocument" Тогда
					Если ИмяСвойства = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
							Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Получатель");
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитов.Тип = "DMIncomingDocument" Тогда
					Если ИмяСвойства = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
							Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Отправитель");
					КонецЕсли;
				КонецЕсли;
				
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ЗначениеСвойства, "DMPartyRowContact") Тогда
					ЗначениеСвойства.contactName = Реквизит;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Реквизит) Тогда
				
				ЗначениеСвойства.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
					Прокси,
					РеквизитID,
					РеквизитТип);
				ЗначениеСвойства.name = Реквизит;
				
			Иначе
				
				ЗначениеСвойства.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
				ЗначениеСвойства.name = "";
				
			КонецЕсли;
			
			ОбъектXDTO.Установить(ИмяСвойства, ЗначениеСвойства);
			
		Иначе
			ОбъектXDTO.Установить(ИмяСвойства, СтруктураРеквизитов[ИмяРеквизита]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы из свойств объекта XDTO по соответствию свойств и реквизитов.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект XDTO.
//   Форма - ФормаКлиентскогоПриложения - источник данных заполнения.
//   РеквизитыИСвойства - Соответствие - ключ - свойство XDTO, значение - реквизит.
//   
Процедура ЗаполнитьОбъектXDTOИзФормы(ОбъектXDTO, Форма, РеквизитыИСвойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Для Каждого РеквизитИСвойство Из РеквизитыИСвойства Цикл
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
			ОбъектXDTO,
			РеквизитИСвойство.Ключ,
			Форма,
			РеквизитИСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты формы из свойств объекта XDTO по соответствию свойств и реквизитов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - заполняемая форма.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   РеквизитыИСвойства - Соответствие - ключ - свойство XDTO, значение - реквизит.
//
Процедура ЗаполнитьФормуИзОбъектаXDTO(Форма, ОбъектXDTO, РеквизитыИСвойства) Экспорт
	
	Для Каждого РеквизитИСвойство Из РеквизитыИСвойства Цикл
		ЗаполнитьРеквизитИзОбъектаXDTO(Форма,
			РеквизитИСвойство.Значение,
			ОбъектXDTO,
			РеквизитИСвойство.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект, или
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(Прокси, ОбъектИС, Правило) Экспорт
	
	ДанныеПравила = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ДанныеПравилаДляВыгрузки(Правило);
	
	СтруктураРеквизитов = СтруктураРеквизитовЗаполняемогоОбъектаДО(ДанныеПравила.ТипОбъектаДО);
	
	КонтрольОтправкиФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КонтрольОтправкиФайлов();
	
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(
		ОбъектИС,
		СтруктураРеквизитов,
		ДанныеПравила,
		КонтрольОтправкиФайлов);
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
	Запрос.type = ДанныеПравила.ТипОбъектаДО;
	
	// Заполнение документов по шаблонам.
	Шаблон = Неопределено;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
		
		Если ЗначениеЗаполнено(ДанныеПравила.ШаблонID) Тогда
			
			Шаблон = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ДанныеПравила.ШаблонТип);
			Шаблон.name = ДанныеПравила.Шаблон;
			Шаблон.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ДанныеПравила.ШаблонID,
				ДанныеПравила.ШаблонТип);
			
			Запрос.dataSource = Шаблон;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Ответ.description;
	КонецЕсли;
	
	ОбъектXDTO = Ответ;
	
	СоответствиеСвойствXDTOиРеквизитов =
		Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(
			ДанныеПравила.ТипОбъектаДО);
	
	Для Каждого СтрокаСоответствия Из СоответствиеСвойствXDTOиРеквизитов Цикл
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Ключ,
			СтруктураРеквизитов,
			СтрокаСоответствия.Значение);
	КонецЦикла;
	
	// Сохраним файлы шаблона для отдельного заполнения.
	Если ОбъектXDTO.Свойства().Получить("files") <> Неопределено И СтруктураРеквизитов.Свойство("Файлы") Тогда
		
		НомерФайла = 0;
		Пока НомерФайла <= ОбъектXDTO.files.Количество() - 1 Цикл
			ФайлXDTO = ОбъектXDTO.files[НомерФайла];
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "template")
					И ЗначениеЗаполнено(ФайлXDTO.template.objectID.ID) Тогда
				
				ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
					ФайлXDTO.name,
					Неопределено,
					"DMFile",
					ФайлXDTO.extension);
				
				ПараметрыСозданияФайла =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(ТекущийФайл);
				ПараметрыСозданияФайла.ШаблонID = ФайлXDTO.template.objectID.ID;
				ПараметрыСозданияФайла.Владелец = ОбъектИС;
				
				СтруктураРеквизитов.Файлы.Добавить(ПараметрыСозданияФайла);
				
				ОбъектXDTO.files.Удалить(НомерФайла);
				
			Иначе
				
				НомерФайла = НомерФайла + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.СформироватьДополнительныеСвойства(
		Прокси,
		ОбъектXDTO,
		СтруктураРеквизитов);
	
	ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
	ОбъектXDTO.name = Строка(ОбъектИС);
	
	Если ЗначениеЗаполнено(ОбъектИС) Тогда
		ОбъектXDTO.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,
			ОбъектИС);
	КонецЕсли;
	
	Если Шаблон <> Неопределено Тогда
		ОбъектXDTO.template = Шаблон;
	КонецЕсли;
	
	СинхронизоватьРеквизитИТЧКонтрагенты(Прокси, ОбъектXDTO);
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = ОбъектXDTO;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Ответ.description;
	КонецЕсли;
	
	ОбъектXDTO = Ответ.object;
	
	НаличиеПрисоединенныхФайлов = Неопределено;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		НаличиеПрисоединенныхФайлов = (ОбъектXDTO.files.Количество() > 0);
	КонецЕсли;
	РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
		ОбъектXDTO.objectID.ID,
		ОбъектXDTO.objectID.type,
		ОбъектИС,
		НаличиеПрисоединенныхФайлов);
	
	ДоступенФункционалПакетныеЗапросы =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3");
	
	Если СтруктураРеквизитов.Свойство("Файлы") И СтруктураРеквизитов.Файлы.Количество() > 0 Тогда
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			ЗапросыПакета = Новый Массив;
		КонецЕсли;
		
		Для Каждого ПараметрыСоздания Из СтруктураРеквизитов.Файлы Цикл
			
			ФайлXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлXDTOИзПараметровСоздания(
				Прокси,
				ПараметрыСоздания);
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьФайлЗапрос(
				Прокси,
				ФайлXDTO,
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type,
				ОбъектXDTO.name);
			
			Если ДоступенФункционалПакетныеЗапросы Тогда
				ЗапросыПакета.Добавить(Запрос);
			Иначе
				Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
					Возврат Ответ.description;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
				Прокси,
				ЗапросыПакета);
			Для Каждого Ответ Из ОтветНаЗапросыПакета.responses Цикл
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
					Возврат Ответ.description;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриПоявленииПрисоединенныхФайловДокументооборота(
			ОбъектXDTO.objectID.ID,
			ОбъектXDTO.objectID.type,
			ОбъектИС,
			Истина);
		
	КонецЕсли;
	
	Для Каждого Строка Из КонтрольОтправкиФайлов Цикл
		РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.СохранитьХешСуммуВерсииФайла(
			Строка.Источник,
			Строка.ИмяФайла,
			Строка.ТабличныйДокумент)
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(
		ОбъектИС,
		ОбъектXDTO.objectID.ID,
		ОбъектXDTO.objectID.type);
	
	// Автоматически добавим связи по ссылкам из объекта ИС.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСвязанныеДокументы1СДокументооборота")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1")
			И Не ДанныеПравила.НеСоздаватьСвязиПоСсылкам
			И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(ОбъектXDTO.objectID.type) Тогда
		
		ПодходящиеОбъекты = ПолучитьПодходящиеОбъектыДляДобавленияСвязей(ОбъектИС);
		
		Если ПодходящиеОбъекты.Количество() = 0 Тогда
			Возврат ОбъектXDTO;
		КонецЕсли;
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Для Каждого ПодходящийОбъект Из ПодходящиеОбъекты Цикл
			
			СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
				ПодходящийОбъект);
			
			Если СвязанныйОбъектДО = Неопределено Тогда
				
				Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ПодходящийОбъект);
				Если Правила.Количество() <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правила[0].ТипОбъектаДО) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СвязанныйОбъектДО = Неопределено Тогда // создадим документ в ДО
				
				НовыйОбъектДО = СоздатьОбъектДОПоПравилу(
					Прокси,
					ПодходящийОбъект,
					Правила[0].Ссылка);
				
				Если ТипЗнч(НовыйОбъектДО) = Тип("ОбъектXDTO") Тогда
					СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
						НовыйОбъектДО.objectID.ID,
						НовыйОбъектДО.objectID.type,
						НовыйОбъектДО.name);
				Иначе // сообщение об ошибке
					ИмяСобытия = НСтр("ru = 'Автоматическое создание связанного объекта'");
					ЗаписьЖурналаРегистрации(
						ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(ИмяСобытия),
						УровеньЖурналаРегистрации.Ошибка,,,
						НовыйОбъектДО);
					ТекстИсключения = СтрШаблон(НСтр("ru = 'Не удалось создать связанный документ для ""%1"":
						|%2'"),
						ПодходящийОбъект,
						НовыйОбъектДО);
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе // добавим связь к существующему документу ДО
				
				Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(СвязанныйОбъектДО.type) Тогда
					Продолжить;
				КонецЕсли;
				
				СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
					СвязанныйОбъектДО.ID,
					СвязанныйОбъектДО.type,
					СвязанныйОбъектДО.name);
				
			КонецЕсли;
			
			ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type,
				ОбъектXDTO.name);
			
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
				ИсходныйДокумент,
				СвязываемыйДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращает структуру Вида документа ДО для заполнения по переданному имени типа.
//
// Параметры:
//   ТипОбъектаДО - Строка - тип объекта: DMInternalDocumentType или DMIncomingDocumentType или DMOutgoingDocumentType.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемогоВидаДокументовДО(ТипОбъектаДО) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	// Реквизиты, общие для всех типов.
	СтруктураРеквизитов.Вставить("Тип", ТипОбъектаДО);
	СтруктураРеквизитов.Вставить("Имя");
	СтруктураРеквизитов.Вставить("ИспользоватьСрокИсполнения");
	СтруктураРеквизитов.Вставить("УчитыватьСуммуДокумента");
	СтруктураРеквизитов.Вставить("АвтоНумерация");
	СтруктураРеквизитов.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону");
	СтруктураРеквизитов.Вставить("ВключенУчетПоНоменклатуреДел");
	
	Если ТипОбъектаДО = "DMInternalDocumentType" Тогда
		СтруктураРеквизитов.Вставить("ВестиУчетПоАдресатам");
		СтруктураРеквизитов.Вставить("ВестиУчетПоСтатьямДДС");
		СтруктураРеквизитов.Вставить("ВестиУчетПоКонтрагентам");
		СтруктураРеквизитов.Вставить("ВестиУчетСторон");
		СтруктураРеквизитов.Вставить("ЯвляетсяЗаявкойНаОплату");
		СтруктураРеквизитов.Вставить("УчитыватьСрокДействия");
		СтруктураРеквизитов.Вставить("ВестиУчетПоОрганизациям");
		СтруктураРеквизитов.Вставить("ВестиУчетТоваровИУслуг");
		СтруктураРеквизитов.Вставить("ВариантПодписания");
		СтруктураРеквизитов.Вставить("ВариантПодписанияID");
		СтруктураРеквизитов.Вставить("ВариантПодписанияТип");
		СтруктураРеквизитов.Вставить("ИспользоватьУтверждение");
		СтруктураРеквизитов.Вставить("ИспользоватьПодписание");
	ИначеЕсли ТипОбъектаДО = "DMIncomingDocumentType" Тогда
		
	ИначеЕсли ТипОбъектаДО = "DMOutgoingDocumentType" Тогда
		СтруктураРеквизитов.Вставить("УчитыватьВходящийНомерИДатуПолучателя");
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип ""%1"" не относится к видам документов ДО'"),
			ТипОбъектаДО);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Создает вид документов с указанными свойствами.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоВидаДокументовДО.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DM<...>DocumentType или DMError.
//
Функция СоздатьВидДокументаВДО(Свойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ВидДокумента = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, Свойства.Тип);
	ВидДокумента.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, "", Свойства.Тип);
	
	ВидДокумента.name = Свойства.Имя;
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"automaticNumeration",
		Свойства,
		"АвтоНумерация");
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"sumEnabled",
		Свойства,
		"УчитыватьСуммуДокумента");
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"performanceDateEnabled",
		Свойства,
		"ИспользоватьСрокИсполнения");
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"templateRequired",
		Свойства,
		"ЗапретитьСозданиеДокументовНеПоШаблону");
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ВидДокумента, "accountingForCaseFilesEnabled") Тогда
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"accountingForCaseFilesEnabled",
			Свойства,
			"ВключенУчетПоНоменклатуреДел");
	КонецЕсли;
	
	Если Свойства.Тип = "DMInternalDocumentType" Тогда
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"addresseeEnabled",
			Свойства,
			"ВестиУчетПоАдресатам");
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"cashFlowDetailsEnabled",
			Свойства,
			"ВестиУчетПоСтатьямДДС");
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"correspondentEnabled",
			Свойства,
			"ВестиУчетПоКонтрагентам");
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"durationEnabled",
			Свойства,
			"УчитыватьСрокДействия");
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"organizationEnabled",
			Свойства,
			"ВестиУчетПоОрганизациям");
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"signatureOption",
			Свойства,
			"ВариантПодписания");
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ВидДокумента, "partiesEnabled") Тогда
			ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"partiesEnabled",
				Свойства,
				"ВестиУчетСторон");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ВидДокумента, "isAPaymentRequest") Тогда
			ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"isAPaymentRequest",
				Свойства,
				"ЯвляетсяЗаявкойНаОплату");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ВидДокумента, "productRowsEnabled") Тогда
			ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"productRowsEnabled",
				Свойства,
				"ВестиУчетТоваровИУслуг");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ВидДокумента, "useConfirmation") Тогда
			ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"useConfirmation",
				Свойства,
				"ИспользоватьУтверждение");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ВидДокумента, "useSigningByManager") Тогда
			ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"useSigningByManager",
				Свойства,
				"ИспользоватьПодписание");
		КонецЕсли;
	ИначеЕсли Свойства.Тип = "DMOutgoingDocumentType" Тогда
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"externalNumberEnabled",
			Свойства,
			"УчитыватьВходящийНомерИДатуПолучателя");
	КонецЕсли;
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьНовыйОбъект(Прокси, ВидДокумента).object;
	
КонецФункции

// Ищет виды документов в ДО по типу объекта и по точному совпадению наименования. Создает новый
// вид документов с указанными свойствами, если ничего не найдено.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоВидаДокументовДО.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DM<...>DocumentType или DMError.
//
Функция НайтиСоздатьВидДокументаВДО(Свойства) Экспорт
	
	РезультатыПоиска = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиОбъектВДОПоИмени(
		Свойства.Тип,
		Свойства.Имя);
	
	Если РезультатыПоиска = Неопределено Тогда
		Возврат СоздатьВидДокументаВДО(Свойства);
	Иначе
		Возврат РезультатыПоиска;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру Папки внутренних документов ДО для заполнения.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемойПапкиВнутреннихДокументов() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Имя");
	СтруктураРеквизитов.Вставить("Описание");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ОтветственныйID");
	СтруктураРеквизитов.Вставить("ОтветственныйТип");
	СтруктураРеквизитов.Вставить("ДатаСоздания");
	СтруктураРеквизитов.Вставить("Родитель");
	СтруктураРеквизитов.Вставить("РодительID");
	СтруктураРеквизитов.Вставить("РодительТип");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Создает папку внутренних документов с указанными свойствами.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемойПапкиВнутреннихДокументов.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMInternalDocumentFolder или DMError.
//
Функция СоздатьПапкуВнутреннихДокументовВДО(Свойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Папка = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMInternalDocumentFolder");
	Папка.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		"",
		"DMInternalDocumentFolder");
	
	Папка.name = Свойства.Имя;
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"description",
		Свойства,
		"Описание");
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"responsible",
		Свойства,
		"Ответственный");
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"creationDate",
		Свойства,
		"ДатаСоздания");
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"parent",
		Свойства,
		"Родитель");
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьНовыйОбъект(Прокси, Папка).object;
	
КонецФункции

// Ищет папки внутренних документов в ДО по точному совпадению наименования. Создает новую
// папку с указанными свойствами, если ничего не найдено.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемойПапкиВнутреннихДокументов.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMInternalDocumentFolder или DMError.
//
Функция НайтиСоздатьПапкуВнутреннихДокументовВДО(Свойства) Экспорт
	
	РезультатыПоиска = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиОбъектВДОПоИмени(
		"DMInternalDocumentFolder",
		Свойства.Имя);
	
	Если РезультатыПоиска = Неопределено Тогда
		Возврат СоздатьПапкуВнутреннихДокументовВДО(Свойства);
	Иначе
		Возврат РезультатыПоиска;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик, проверяющий соответствие правил интеграции метаданным конфигурации.
//
Процедура ПроверитьСоответствиеПравилИнтеграцииМетаданным() Экспорт
	
	Если Не ИспользоватьИнтеграцию() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	Правила.Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И ТипОбъектаИС <> """"");
	
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	Пока ВыборкаПравила.Следующий() Цикл
		
		ПравилоОбъект = ВыборкаПравила.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		НужнаЗапись = Ложь;
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПравилоОбъект.ТипОбъектаИС); // ОбъектМетаданныхДокумент
		
		Если ОбъектМетаданных = Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Помечено на удаление правило для несуществующего объекта %1'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПравилоОбъект.ТипОбъектаИС);
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
			ПравилоОбъект.ПометкаУдаления = Истина;
			НужнаЗапись = Истина;
			
		Иначе
			
			Для Каждого Правило Из ПравилоОбъект.ПравилаЗаполненияРеквизитовДО Цикл
				
				Если Правило.Вариант <> Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта
						Или Правило.ЭтоДополнительныйРеквизитИС
						Или Правило.ЭтоТаблица
						Или ЗначениеЗаполнено(Правило.Таблица) Тогда
					Продолжить;
				КонецЕсли;
				
				ПозицияТочки = СтрНайти(Правило.ИмяРеквизитаОбъектаИС, ".");
				Если ПозицияТочки = 0 Тогда
					ИмяРеквизитаОбъектаИС = Правило.ИмяРеквизитаОбъектаИС;
				Иначе
					ИмяРеквизитаОбъектаИС = Лев(Правило.ИмяРеквизитаОбъектаИС, ПозицияТочки - 1);
				КонецЕсли;
				
				Если ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизитаОбъектаИС) = Неопределено
						И ИмяРеквизитаОбъектаИС <> "Представление" Тогда
					
					Найден = Ложь;
					Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если СтандартныйРеквизит.Имя = ИмяРеквизитаОбъектаИС Тогда
							Найден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не Найден Тогда
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Очищено правило выгрузки для несуществующего реквизита %1'"),
							Правило.ИмяРеквизитаОбъектаИС);
						ЗаписьЖурналаРегистрации(
							ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,
							ВыборкаПравила.Ссылка,
							ТекстСообщения);
						НужнаЗапись = Истина;
						
						Правило.Вариант = Неопределено;
						Правило.ИмяРеквизитаОбъектаИС = Неопределено;
						Правило.ЗначениеРеквизитаДО = ТекстСообщения;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		
			Для Каждого Правило Из ПравилоОбъект.ПравилаЗаполненияРеквизитовИС Цикл
				
				Если Правило.Вариант <> Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта
						Или Правило.ЭтоДополнительныйРеквизитИС
						Или Правило.ЭтоТаблица
						Или ЗначениеЗаполнено(Правило.Таблица) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОбъектМетаданных.Реквизиты.Найти(Правило.ИмяРеквизитаОбъектаИС) = Неопределено
						И Правило.ИмяРеквизитаОбъектаИС <> "Представление" Тогда
					
					Найден = Ложь;
					Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если СтандартныйРеквизит.Имя = Правило.ИмяРеквизитаОбъектаИС Тогда
							Найден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не Найден Тогда
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Очищено правило загрузки для несуществующего реквизита %1'"),
							Правило.ИмяРеквизитаОбъектаИС);
						ЗаписьЖурналаРегистрации(
							ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,
							ВыборкаПравила.Ссылка,
							ТекстСообщения);
						НужнаЗапись = Истина;
						
						Правило.Вариант = Неопределено;
						Правило.ИмяРеквизитаОбъектаИС = Неопределено;
						Правило.ЗначениеРеквизитаИС = ТекстСообщения;
						Правило.Обновлять = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НужнаЗапись Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 1.1.6.1. Обновление наименований правил интеграции
// и установка реквизита Ключевой у видов документов ДО.
//
Процедура ПерейтиНаВерсию_1_1_6_1() Экспорт
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	Правила.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	(Правила.ТипОбъектаИС <> """"
		|				И (ВЫРАЗИТЬ(Правила.ПредставлениеОбъектаИС КАК СТРОКА(1))) = """"
		|			ИЛИ Правила.ТипОбъектаДО <> """"
		|				И (ВЫРАЗИТЬ(Правила.ПредставлениеОбъектаДО КАК СТРОКА(1))) = """")");
	
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	Пока ВыборкаПравила.Следующий() Цикл
		
		ПравилоОбъект = ВыборкаПравила.Ссылка.ПолучитьОбъект();
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Для Каждого ПравилоВыгрузки Из ПравилоОбъект.ПравилаЗаполненияРеквизитовДО Цикл
			Если ПравилоВыгрузки.ИмяРеквизитаОбъектаДО = "documentType" Тогда
				ПравилоВыгрузки.Ключевой = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 1.1.8.4. Установка флага "Не создавать связи по ссылкам".
//
Процедура ПерейтиНаВерсию_1_1_8_4() Экспорт
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	Правила.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	НЕ Правила.НеСоздаватьСвязиПоСсылкам");
	
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	Пока ВыборкаПравила.Следующий() Цикл
		
		ПравилоОбъект = ВыборкаПравила.Ссылка.ПолучитьОбъект();
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		ПравилоОбъект.НеСоздаватьСвязиПоСсылкам = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БИД на версию 1.1.12.2. Установка режима изменения данных проведенного документа.
//
Процедура ПерейтиНаВерсию_1_1_12_2() Экспорт
	
	ПустойРежим = Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.ПустаяСсылка();
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЗагрузки.Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовИС КАК ПравилаЗагрузки
		|ГДЕ
		|	ПравилаЗагрузки.РежимИзмененияДанныхПроведенногоДокумента = &ПустойРежим
		|	И ПравилаЗагрузки.Ссылка.ТипОбъектаИС ПОДОБНО ""Документ.%""
		|");
	ЗапросПравила.УстановитьПараметр("ПустойРежим", ПустойРежим);
	
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	Пока ВыборкаПравила.Следующий() Цикл
		
		ПравилоОбъект = ВыборкаПравила.Ссылка.ПолучитьОбъект();
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Для Каждого ПравилоЗагрузки Из ПравилоОбъект.ПравилаЗаполненияРеквизитовИС Цикл
			Если ПравилоЗагрузки.РежимИзмененияДанныхПроведенногоДокумента = ПустойРежим Тогда
				ПравилоЗагрузки.РежимИзмененияДанныхПроведенногоДокумента =
					Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СогласованиеВозможно(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Результат = Новый Структура("Возможно, ОписаниеОшибки", Истина, "");
	
	// Проверим возможность запуска согласования.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешенЗапускСогласования(
			Параметры.ПредметСогласования, Результат.ОписаниеОшибки) Тогда
		Если Результат.ОписаниеОшибки = "" Тогда // текст по умолчанию
			Результат.ОписаниеОшибки = НСтр("ru = 'Недостаточно прав для запуска согласования в 1С:Документообороте.'");
		КонецЕсли;
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ТипДокумента = Новый Структура("name, ID, type");
	
	// Проверим есть ли связанный объект в ДО.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		// Проверим можно ли создать связанный объект в ДО.
		ПодходящиеПравила = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиСоздатьПодходящиеПравила(
			Параметры.ПредметСогласования);
		Если ПодходящиеПравила.Количество() = 1 Тогда
			ТипДокумента.name = ПодходящиеПравила[0].ПредставлениеОбъектаДО;
			ТипДокумента.ID = ПодходящиеПравила[0].ИдентификаторВидаДокумента;
			ТипДокумента.type = ПодходящиеПравила[0].ТипВидаДокумента;
		Иначе
			Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно автоматически создать связанный документ в ДО.'");
			Результат.Возможно = Ложь;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
	Иначе
		// Проверим нет ли уже запущенных бизнес-процессов согласования
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		query = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
		УсловияОтбора = query.conditions; // СписокXDTO
		
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "target";
		Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			СвязанныйОбъектДО.ID,
			СвязанныйОбъектДО.type);
		
		УсловияОтбора.Добавить(Условие);
		
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
			Прокси,
			"DMBusinessProcessApproval",
			query);
		
		Если Ответ.items.Количество() <> 0 Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Есть запущенные процессы согласования.'");
			Результат.Возможно = Ложь;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТипДокумента, СвязанныйОбъектДО.documentType);
	КонецЕсли;
	
	// Проверим есть ли шаблон согласования по умолчанию.
	ПодходящиеШаблоны = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(
		"ШаблоныСогласования",
		ТипДокумента);
	Если ПодходящиеШаблоны.Количество() <> 1 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно определить шаблон согласования.'");
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура НачатьСогласование(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Результат = Новый Структура("ВыполненоУспешно, ОписаниеОшибки", Истина, "");
	
	// Проверим есть ли связанный объект в ДО, в случае отсутствия - попытаемся создать.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		// Попытаемся создать связанный объект.
		ПодходящиеПравила = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиСоздатьПодходящиеПравила(
			Параметры.ПредметСогласования);
		Если ПодходящиеПравила.Количество() = 1 Тогда
			ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьОбъектДОПоПравилу(
				Параметры.ПредметСогласования,
				ПодходящиеПравила[0].Ссылка);
				
			Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда
				// сообщение об ошибке
				Результат.ОписаниеОшибки = ОбъектДОИлиСообщение;
				Результат.ВыполненоУспешно = Ложь;
				ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
				Возврат;
			Иначе
				// структура с описанием созданного объекта результата
				СвязанныйОбъектДО = ОбъектДОИлиСообщение;
				СвязанныйОбъектДО.Вставить("documentType",
					Новый Структура("name, ID, type",
						ПодходящиеПравила[0].ПредставлениеОбъектаДО,
						ПодходящиеПравила[0].ИдентификаторВидаДокумента,
						ПодходящиеПравила[0].ТипВидаДокумента));
			КонецЕсли;
		Иначе
			Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно автоматически создать связанный документ в ДО.'");
			Результат.ВыполненоУспешно = Ложь;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим есть ли шаблон согласования по умолчанию.
	ПодходящиеШаблоны = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(
		"ШаблоныСогласования",
		СвязанныйОбъектДО.documentType);
	Если ПодходящиеШаблоны.Количество() <> 1 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно определить шаблон согласования.'");
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Запустим процесс по шаблону.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ЗапуститьСогласованиеПоШаблону(
			ПодходящиеШаблоны[0].Значение, СвязанныйОбъектДО) Тогда
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось запустить согласование по шаблону ""%1"".'"),
			ПодходящиеШаблоны[0].Значение.name);
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ПрерываниеСогласованияВозможно(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Результат = Новый Структура("Возможно, ОписаниеОшибки", Истина, "");
	
	// Проверим существование связанного объекта.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Связанный документ в ДО не найден.'");
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Проверим возможность прерывания согласования.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешеноПрерываниеСогласования(
			Параметры.ПредметСогласования, СвязанныйОбъектДО, Результат.ОписаниеОшибки) Тогда
		Если Результат.ОписаниеОшибки = "" Тогда // предупреждение по умолчанию
			Результат.ОписаниеОшибки = НСтр("ru = 'Недостаточно прав для прерывания согласования в 1С:Документообороте.'");
		КонецЕсли;
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	query = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = query.conditions; // СписокXDTO
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "target";
	Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		СвязанныйОбъектДО.ID,
		СвязанныйОбъектДО.type);
	
	УсловияОтбора.Добавить(Условие);
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		"DMBusinessProcessApproval",
		query);
	
	Если Ответ.items.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет запущенных процессов согласования.'");
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ПрерватьСогласование(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Результат = Новый Структура("ВыполненоУспешно, ОписаниеОшибки", Истина, "");
	
	// Найдем связанный объект в ДО.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Связанный документ в ДО не найден.'");
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Прервем согласование.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(СвязанныйОбъектДО) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось прервать согласование.'");
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура СостояниеСогласования(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Результат = Новый Структура("ПолученоУспешно, Состояние, Пояснение", Истина, Неопределено, "");
	
	// Найдем связанный объект в ДО.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Результат.Пояснение = НСтр("ru = 'Связанный документ в ДО не найден.'");
		Результат.ПолученоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Получим объект из ДО.
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	ОбъектИд = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		СвязанныйОбъектДО.ID,
		СвязанныйОбъектДО.type);
	СписокОбъектов.Добавить(ОбъектИд);
	ПолучаемыеПоля.Добавить("statusApproval");
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Результат.Пояснение = СокрЛП(Ответ.description);
		Результат.ПолученоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	ИначеЕсли Ответ.objects.Количество() = 1 Тогда
		Если Ответ.objects[0].statusApproval <> Неопределено И Ответ.objects[0].statusApproval.objectID.ID <> "" Тогда
			Результат.Состояние = Перечисления.СостоянияСогласованияВДокументообороте[
				Ответ.objects[0].statusApproval.objectID.ID];
		КонецЕсли;
	Иначе
		Результат.Пояснение = НСтр("ru = 'Не удалось получить статус согласования.'");
		Результат.ПолученоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Добавляет команду переключения хронометража.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения:
//     * Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//              - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   МестоРазмещенияКоманд - ГруппаФормы
//                         - Неопределено
//
Процедура ДобавитьКомандуПереключитьХронометраж(Форма, Знач МестоРазмещенияКоманд)
	
	ЭтаФормаМетаданные = Метаданные.НайтиПоПолномуИмени(Форма.ИмяФормы);
	РодительМетаданные = ЭтаФормаМетаданные.Родитель();
	
	Если ТипЗнч(РодительМетаданные) = Тип("ОбъектМетаданныхКонфигурация")
			Или Метаданные.ЖурналыДокументов.Содержит(РодительМетаданные)
			Или Метаданные.Обработки.Содержит(РодительМетаданные)
			Или Не РодительМетаданные.ОсновнаяФормаОбъекта = ЭтаФормаМетаданные Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Форма.Объект.Ссылка;
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Ссылка);
		ДоступенХронометраж = Ложь;
		Для Каждого Правило Из Правила Цикл
			ДоступенХронометраж = ДоступенХронометраж
				Или ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правило.ТипОбъектаДО)
				Или ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоЗадачаБизнесПроцесса(Правило.ТипОбъектаДО);
		КонецЦикла;
		Если Не ДоступенХронометраж Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
				ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПараметрыХронометражаОбъекта(Ссылка);
			Иначе
				Возврат;
			КонецЕсли;
		Исключение
			ПредставлениеОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось получить параметры хронометража (%1)'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПредставлениеОшибки);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Переключить хронометраж'");
		КомандаФормы.Подсказка = НСтр("ru='Переключить хронометраж'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		КомандаФормы.Картинка = БиблиотекаКартинок.УстановитьВремя;
	КонецЕсли;
	
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			НовыйЭлемент.Пометка = Истина;
		КонецЕсли;
	Иначе
		НовыйЭлемент.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуУказатьТрудозатраты(Форма, Знач МестоРазмещенияКоманд)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Указать трудозатраты'");
		КомандаФормы.Подсказка = НСтр("ru='Указать трудозатраты'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		КомандаФормы.Картинка = БиблиотекаКартинок.ДобавитьВЕжедневныйОтчет;
	КонецЕсли;
		
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

// Возвращает структуру объекта ДО для заполнения по переданному имени типа.
//
// Параметры:
//   ТипОбъектаДО - Строка - тип объекта, например, DMInternalDocument или DMCorrespondent.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемогоОбъектаДО(ТипОбъектаДО) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	РеквизитыСсылочногоТипа = Новый Структура;
	
	// Реквизиты, общие для всех типов.
	СтруктураРеквизитов.Вставить("ID");
	СтруктураРеквизитов.Вставить("Тип", ТипОбъектаДО);
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("Комментарий");
	
	Если ТипОбъектаДО = "DMCorrespondent" Тогда
		
		СтруктураРеквизитов.Вставить("ИНН");
		СтруктураРеквизитов.Вставить("КПП");
		СтруктураРеквизитов.Вставить("КодПоОКПО");
		СтруктураРеквизитов.Вставить("ПолноеНаименование");
		
	Иначе // документы
		
		СтруктураРеквизитов.Вставить("Файлы", Новый Массив);
		
		СтруктураРеквизитов.Вставить("Описание");
		СтруктураРеквизитов.Вставить("РегистрационныйНомер");
		СтруктураРеквизитов.Вставить("ДатаРегистрации");
		СтруктураРеквизитов.Вставить("СрокИсполнения");
		СтруктураРеквизитов.Вставить("Сумма");
		
		РеквизитыСсылочногоТипа.Вставить("Подписал");
		РеквизитыСсылочногоТипа.Вставить("Подразделение");
		РеквизитыСсылочногоТипа.Вставить("ГрифДоступа");
		РеквизитыСсылочногоТипа.Вставить("ВидДокумента");
		РеквизитыСсылочногоТипа.Вставить("ВопросДеятельности");
		РеквизитыСсылочногоТипа.Вставить("Организация");
		РеквизитыСсылочногоТипа.Вставить("Ответственный");
		РеквизитыСсылочногоТипа.Вставить("Состояние");
		РеквизитыСсылочногоТипа.Вставить("СостояниеСогласование");
		РеквизитыСсылочногоТипа.Вставить("СостояниеУтверждение");
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP")
				И ТипОбъектаДО = "DMInternalDocument" Тогда
			РеквизитыСсылочногоТипа.Вставить("СостояниеПодписание");
		КонецЕсли;
		РеквизитыСсылочногоТипа.Вставить("СостояниеРассмотрение");
		РеквизитыСсылочногоТипа.Вставить("СостояниеРегистрация");
		РеквизитыСсылочногоТипа.Вставить("СостояниеИсполнение");
		РеквизитыСсылочногоТипа.Вставить("Валюта");
		
		// Шаблоны.
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("Шаблон");
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			РеквизитыСсылочногоТипа.Вставить("Проект");
		КонецЕсли;
		
		// Состав документа
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("КоличествоЛистов");
			РеквизитыСсылочногоТипа.Вставить("КоличествоПриложений");
			РеквизитыСсылочногоТипа.Вставить("ЛистовВПриложениях");
			РеквизитыСсылочногоТипа.Вставить("КоличествоЭкземпляров");
		КонецЕсли;
		
		// Хранения документа
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("НоменклатураДел");
			РеквизитыСсылочногоТипа.Вставить("Дело");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипОбъектаДО = "DMInternalDocument" Тогда
		
		СтруктураРеквизитов.Вставить("ДатаНачалаДействия");
		СтруктураРеквизитов.Вставить("ДатаОкончанияДействия");
		СтруктураРеквизитов.Вставить("Бессрочный");
		
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("Папка");
		РеквизитыСсылочногоТипа.Вставить("Подготовил");
		РеквизитыСсылочногоТипа.Вставить("Контрагент");
		РеквизитыСсылочногоТипа.Вставить("КонтактноеЛицо");
		РеквизитыСсылочногоТипа.Вставить("ПорядокПродления");
		РеквизитыСсылочногоТипа.Вставить("Получатель");
		
		СтатьиДДС = Новый ТаблицаЗначений;
		СтатьиДДС.Колонки.Добавить("СтатьяДДС");
		СтатьиДДС.Колонки.Добавить("СтатьяДДСID");
		СтатьиДДС.Колонки.Добавить("СтатьяДДСТип");
		СтатьиДДС.Колонки.Добавить("Сумма");
		СтатьиДДС.Колонки.Добавить("СуммаНДС");
		
		СтруктураРеквизитов.Вставить("СтатьиДДС", СтатьиДДС);
		
		СтруктураРеквизитов.Вставить("СуммаНДС");
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура");
		Товары.Колонки.Добавить("НоменклатураID");
		Товары.Колонки.Добавить("НоменклатураТип");
		Товары.Колонки.Добавить("Цена");
		Товары.Колонки.Добавить("Количество");
		Товары.Колонки.Добавить("ЕдиницаИзмерения");
		Товары.Колонки.Добавить("ЕдиницаИзмеренияID");
		Товары.Колонки.Добавить("ЕдиницаИзмеренияТип");
		Товары.Колонки.Добавить("СтавкаНДС");
		Товары.Колонки.Добавить("СтавкаНДСID");
		Товары.Колонки.Добавить("СтавкаНДСТип");
		Товары.Колонки.Добавить("СуммаНДС");
		Товары.Колонки.Добавить("Сумма");
		
		СтруктураРеквизитов.Вставить("Товары", Товары);
		
		Стороны = Новый ТаблицаЗначений;
		Стороны.Колонки.Добавить("ДатаПодписи");
		Стороны.Колонки.Добавить("Комментарий");
		Стороны.Колонки.Добавить("КонтактноеЛицо");
		Стороны.Колонки.Добавить("КонтактноеЛицоID");
		Стороны.Колонки.Добавить("КонтактноеЛицоТип");
		Стороны.Колонки.Добавить("Наименование");
		Стороны.Колонки.Добавить("НаименованиеID");
		Стороны.Колонки.Добавить("НаименованиеТип");
		Стороны.Колонки.Добавить("Подписал");
		Стороны.Колонки.Добавить("ПодписалID");
		Стороны.Колонки.Добавить("ПодписалТип");
		Стороны.Колонки.Добавить("Подписан");
		Стороны.Колонки.Добавить("Сторона");
		Стороны.Колонки.Добавить("СторонаID");
		Стороны.Колонки.Добавить("СторонаТип");
		Стороны.Колонки.Добавить("Установил");
		Стороны.Колонки.Добавить("УстановилID");
		Стороны.Колонки.Добавить("УстановилТип");
		
		СтруктураРеквизитов.Вставить("Стороны", Стороны);
		
		Контрагенты = Новый ТаблицаЗначений;
		Контрагенты.Колонки.Добавить("Контрагент");
		Контрагенты.Колонки.Добавить("КонтрагентID");
		Контрагенты.Колонки.Добавить("КонтрагентТип");
		Контрагенты.Колонки.Добавить("КонтактноеЛицо");
		Контрагенты.Колонки.Добавить("КонтактноеЛицоID");
		Контрагенты.Колонки.Добавить("КонтактноеЛицоТип");
		Контрагенты.Колонки.Добавить("ПодписалОтКонтрагента");
		Контрагенты.Колонки.Добавить("ПодписалОтКонтрагентаID");
		Контрагенты.Колонки.Добавить("ПодписалОтКонтрагентаТип");
		
		СтруктураРеквизитов.Вставить("Контрагенты", Контрагенты);
		
	ИначеЕсли ТипОбъектаДО = "DMIncomingDocument" Тогда
		
		СтруктураРеквизитов.Вставить("НомерОтправителя");
		СтруктураРеквизитов.Вставить("ДатаОтправителя");
		
		РеквизитыСсылочногоТипа.Вставить("Отправитель");
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("СпособПолучения");
		
	ИначеЕсли ТипОбъектаДО = "DMOutgoingDocument" Тогда
		
		СтруктураРеквизитов.Вставить("НомерПолучателя");
		СтруктураРеквизитов.Вставить("ДатаПолучателя");
		СтруктураРеквизитов.Вставить("Отправлен");
		СтруктураРеквизитов.Вставить("ДатаОтправки");
		
		РеквизитыСсылочногоТипа.Вставить("Получатель");
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("Подготовил");
		РеквизитыСсылочногоТипа.Вставить("СпособОтправки");
		
	ИначеЕсли ТипОбъектаДО = "DMCorrespondent" Тогда
		
		РеквизитыСсылочногоТипа.Вставить("ФизЛицо");
		РеквизитыСсылочногоТипа.Вставить("Ответственный");
		РеквизитыСсылочногоТипа.Вставить("ЮрФизЛицо");
		
	КонецЕсли;
	
	// Развернем реквизиты ссылочного типа, дополнив их ID и типом.
	Для Каждого Реквизит Из РеквизитыСсылочногоТипа Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Ключ, Реквизит.Значение);
		СтруктураРеквизитов.Вставить(Реквизит.Ключ + "ID", Реквизит.Значение);
		СтруктураРеквизитов.Вставить(Реквизит.Ключ + "Тип", Реквизит.Значение);
		
	КонецЦикла;
	
	// Пометка удаления.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
		СтруктураРеквизитов.Вставить("ПометкаУдаления");
	КонецЕсли;
	
	// Заполним дополнительные свойства.
	ДополнительныеСвойства = Новый ТаблицаЗначений;
	ДополнительныеСвойства.Колонки.Добавить("Свойство");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоТип");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоID");
	ДополнительныеСвойства.Колонки.Добавить("Значение");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеТип");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеID");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СписокЗначений"));
	ДополнительныеСвойства.Колонки.Добавить("СписокДоступныхТипов", Новый ОписаниеТипов(МассивТипов));
	
	СтруктураРеквизитов.Вставить("Свойства", ДополнительныеСвойства);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Заполняет указанный реквизит таблицы по свойству объекта XDTO.
//
// Параметры:
//   ЗаполняемыйОбъект - ДанныеФормыСтруктура, ДанныеФормыКоллекция - заполняемый объект или таблица.
//   ОписаниеРеквизита - Строка, Структура, Массив - описание заполняемого реквизита.
//   ОбъектXDTO - ОбъектXDTO, СписокXDTO - источник данных заполнения.
//   ИмяСвойства - Строка - имя свойства-источника для объектов XDTO, или
//               - Неопределено - для списков XDTO.
//
Процедура ЗаполнитьРеквизитИзОбъектаXDTO(ЗаполняемыйОбъект, ОписаниеРеквизита, ОбъектXDTO, ИмяСвойства = Неопределено)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда // заполнение коллекции (таблицы формы)
		
		ЗаполняемыйОбъект.Очистить();
		Для Каждого ЗначениеСвойстваXDTO Из ОбъектXDTO Цикл
			ЗаполняемыйЭлемент = ЗаполняемыйОбъект.Добавить();
			Для Каждого СтрокаСоответствия Из ОписаниеРеквизита Цикл
				ЗаполнитьРеквизитИзОбъектаXDTO(
					ЗаполняемыйЭлемент,
					СтрокаСоответствия.Значение,
					ЗначениеСвойстваXDTO,
					СтрокаСоответствия.Ключ);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ОбъектXDTO.Свойства().Получить(ИмяСвойства) <> Неопределено
		И ОбъектXDTO.Установлено(ИмяСвойства) Тогда // заполнение реквизита (объекта)
		
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойства];
		Если ТипЗнч(ОписаниеРеквизита) = Тип("Строка") Тогда
			Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда // описание ссылки
				ЗаполняемыйОбъект[ОписаниеРеквизита + "Тип"] = ЗначениеСвойстваXDTO.objectID.type;
				ЗаполняемыйОбъект[ОписаниеРеквизита + "ID"] = ЗначениеСвойстваXDTO.objectID.ID;
				ЗаполняемыйОбъект[ОписаниеРеквизита] = ЗначениеСвойстваXDTO.name;
			Иначе // примитивный тип
				ЗаполняемыйОбъект[ОписаниеРеквизита] = ЗначениеСвойстваXDTO;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОписаниеРеквизита) = Тип("Структура") Тогда
			Для Каждого СтрокаСоответствия Из ОписаниеРеквизита Цикл
				ЗаполнитьРеквизитИзОбъектаXDTO(
					ЗаполняемыйОбъект,
					СтрокаСоответствия.Значение,
					ЗначениеСвойстваXDTO,
					СтрокаСоответствия.Ключ);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОписаниеРеквизита) = Тип("Массив") Тогда
			ЗаполнитьРеквизитИзОбъектаXDTO(
				ЗаполняемыйОбъект[ОписаниеРеквизита[0]],
				ОписаниеРеквизита[1],
				ЗначениеСвойстваXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУчастникаЗадачи(Прокси, УчастникЗадач, Исполнитель, ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации)
	
	Если Исполнитель.Тип = "DMUser" Тогда
		
		УчастникЗадач.user = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMUser");
		УчастникЗадач.user.name = Исполнитель.Наименование;
		УчастникЗадач.user.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMUser");
		
	ИначеЕсли Исполнитель.Тип = "DMBusinessProcessExecutorRole" Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьПолнуюРоль(
			Прокси,
			УчастникЗадач,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не корректно задан тип участника задачи: %1'"), Исполнитель.Тип);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизоватьРеквизитИТЧКонтрагенты(Прокси, ОбъектXDTO)
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ОбъектXDTO, "correspondentRows") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектXDTO.correspondentRows.rows.Количество() > 0 Тогда
		Строка = ОбъектXDTO.correspondentRows.rows[0];
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Строка, "correspondent") Тогда
			СкопироватьКонтрагентаXDTO(Прокси, Строка.correspondent, ОбъектXDTO.correspondent);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Строка, "contact") Тогда
			СкопироватьКонтактноеЛицоXDTO(Прокси, Строка.contact, ОбъектXDTO.contactPerson);
		КонецЕсли;
	Иначе
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "correspondent") Тогда
			СтрокаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCorrespondentRow");
			
			СкопироватьКонтрагентаXDTO(Прокси, ОбъектXDTO.correspondent, СтрокаXDTO.correspondent);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "contactPerson") Тогда
				СкопироватьКонтактноеЛицоXDTO(Прокси, ОбъектXDTO.contactPerson, СтрокаXDTO.contact);
			КонецЕсли;
			
			ОбъектXDTO.correspondentRows.rows.Добавить(СтрокаXDTO);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьКонтрагентаXDTO(Прокси, Источник, Приемник)
	
	Приемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCorrespondent");
	Приемник.name = Источник.name;
	Приемник.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Источник.objectID.ID,
		Источник.objectID.type);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "externalObject") Тогда
		Приемник.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,,
			Источник.externalObject.ID,
			Источник.externalObject.type,
			Источник.externalObject.name);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "legalPrivatePerson") Тогда
		Приемник.legalPrivatePerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMLegalPrivatePerson");
		Приемник.legalPrivatePerson.name = Источник.legalPrivatePerson.name;
		Приемник.legalPrivatePerson.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Источник.legalPrivatePerson.objectID.ID,
			Источник.legalPrivatePerson.objectID.type);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "inn") Тогда
		Приемник.inn = Источник.inn;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "kpp") Тогда
		Приемник.kpp = Источник.kpp;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьКонтактноеЛицоXDTO(Прокси, Источник, Приемник)
	
	Приемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMContactPerson");
	Приемник.name = Источник.name;
	Приемник.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Источник.objectID.ID,
		Источник.objectID.type);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "externalObject") Тогда
		Приемник.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,,
			Источник.externalObject.ID,
			Источник.externalObject.type,
			Источник.externalObject.name);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "position") Тогда
		Приемник.position = Источник.position;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "comment") Тогда
		Приемник.comment = Источник.comment;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "correspondent") Тогда
		СкопироватьКонтрагентаXDTO(Прокси, Источник.correspondent, Приемник.correspondent);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти