
#Область СлужебныйПрограммныйИнтерфейс

// Определяет наличие настроек внутреннего электронного документооборота.
// 
// Возвращаемое значение:
// 	Булево
Функция ЕстьНастройкиВнутреннегоЭДО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой(); 

КонецФункции

// Определяет состояние использования пользователями внутренних документы,
//	с учетом использования внутренних документов конфигурацией.
// 
// Возвращаемое значение:
// 	Булево
//
Функция ИспользуютсяВнутренниеДокументы() Экспорт
	
	Результат = ИнтеграцияЭДО.РазрешеноИспользоватьВнутреннийЭДО()
		И ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьВнутренниеДокументыЭДО");
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться основные виды внутренних документов.
// Запрос содержит следующие поля:
//   * Организация - ОпределяемыйТип.Организация
//   * ВидВнутреннегоДокумента - СправочникСсылка.ВидыВнутреннихДокументовЭДО.
// 
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросОсновныхВидовВнутреннихДокументов(ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента";
	
	ТекстЗапроса = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса, ИмяВременнойТаблицы, "", "");
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ТекстЗапроса;
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Изменяет состояние функциональной опции использования внутренних документов,
//	с учетом проверки разрешения использования внутренних документов конфигурацией.
//
// Параметры:
//	Использовать - Булево - новое значение функциональной опции.
//
Процедура УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать) Экспорт
	
	Если Использовать И Не ИнтеграцияЭДО.РазрешеноИспользоватьВнутреннийЭДО() Тогда
		ТекстОшибки =
			НСтр("ru = 'Изменение состояния функциональной опции использования внутренних документов запрещено прикладным решением.'");
		ВызватьИсключение ТекстОшибки; 
	КонецЕсли;
	
	Константы.ИспользоватьВнутренниеДокументыЭДО.Установить(Использовать);
	
КонецПроцедуры

// Инициализирует структуру для отбора настроек отправки внутреннего ЭДО.
// 
// Возвращаемое значение:
// 	Структура:
// * ВидДокумента - Строка - параметр или выражение для отбора по виду документа
// * Организация - Строка - параметр или выражение для отбора по организации
// * ПроизвольноеУсловие - Строка - параметр или выражение для отбора по организации
Функция НовыйОтборНастроекВнутреннегоЭДО() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", "");
	Отбор.Вставить("ВидДокумента", "");
	Отбор.Вставить("ПроизвольноеУсловие", "");
	
	Возврат Отбор;
	
КонецФункции

// Возвращает описание запроса, в результате которого будут содержаться настройки внутреннего ЭДО.
// Запрос содержит следующие поля:
//   * Организация - ОпределяемыйТип.Организация
//   * ВидВнутреннегоДокумента - СправочникСсылка.ВидыДокументовЭДО
//   * Формировать - Булево
//   * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//   * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//   * ЭтоОсновнойВидДокумента - Булево.
//   
// Параметры:
// 	ИмяВременнойТаблицы - Строка - таблица, в которую будет помещен результат запроса
// 	Отбор - см. НовыйОтборНастроекОтправкиВнутреннегоЭДО
// 	
// Возвращаемое значение:
// 	см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапросаКомпонентаЭДО
Функция ЗапросНастроекВнутреннегоЭДО(ИмяВременнойТаблицы, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = НовыйОтборНастроекВнутреннегоЭДО();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
	|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента
	|
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
	|ГДЕ
	|	&ПоляУсловия";
	
	ПоляУсловия = Новый Массив;
	Если ЗначениеЗаполнено(Отбор.Организация) Тогда
		ПоляУсловия.Добавить(СтрШаблон("Организация В(%1)", Отбор.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ВидДокумента) Тогда
		ПоляУсловия.Добавить(СтрШаблон("ВидВнутреннегоДокумента В(%1)", Отбор.ВидДокумента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор.ПроизвольноеУсловие) Тогда
		ПоляУсловия.Добавить(Отбор.ПроизвольноеУсловие);
	КонецЕсли;
	
	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();
	ОписаниеЗапроса.Текст = ОбщегоНазначенияБЭД.ТекстЗапросаИзШаблона(ТекстЗапроса,
		ИмяВременнойТаблицы, "", ПоляУсловия);
	
	Возврат ОписаниеЗапроса;
		
КонецФункции

// Возвращает текст запроса для дополнения переданной таблицы настройками внутреннего документооборота.
// 
// Параметры:
// 	ИмяИсходнойТаблицы - Строка
// 	ПоляТаблицы - Строка
// 	ПоляКлючаНастройки - см. НовоеОписаниеПолейКлючаНастройкиОтправки
// Возвращаемое значение:
// 	Строка
Функция ТекстЗапросаДополнениеНастройкамиВнутреннегоЭДО(ИмяИсходнойТаблицы, ПоляТаблицы, ПоляКлючаНастройки) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ПоляТаблицы,
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация,
		|	НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента КАК ВидДокумента,
		|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
		|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
		|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Внутренний) КАК СпособОбмена
		|ИЗ
		|	ИмяИсходнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|		ПО &УсловияСвязи";
	
	УсловияСвязи = Новый Массив;
	Для Каждого Элемент Из ПоляКлючаНастройки Цикл
		УсловияСвязи.Добавить(СтрШаблон("%1 = НастройкиВнутреннегоЭДО.%2", Элемент.Значение, Элемент.Ключ));
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляТаблицы", ПоляТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяИсходнойТаблицы", ИмяИсходнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСвязи", СтрСоединить(УсловияСвязи, "
		|		И "));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция КлючОбъектаНастроекВнутреннегоЭДО(КлючНастройки) Экспорт
	
	КлючЗаписи = Новый Структура;
	КлючЗаписи.Вставить("Организация", КлючНастройки.Организация);
	КлючЗаписи.Вставить("ВидВнутреннегоДокумента", КлючНастройки.ВидДокумента);
	
	МенеджерНастроек = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.НастройкиВнутреннегоЭДО");
	Возврат МенеджерНастроек.СоздатьКлючЗаписи(КлючЗаписи);
							
КонецФункции

Функция ЕстьПравоНастройкиИспользованияВнутреннегоЭДО(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.Константы.ИспользоватьВнутренниеДокументыЭДО);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		Если Не ПравоДоступа("Изменение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ОбработкаНеисправностейБЭД.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// См. НастройкиЭДО.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиВнутреннегоЭДО, Истина);
	
КонецПроцедуры

// См. НастройкиЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.НастройкиВнутреннегоЭДО.Чтение.Организации
	|РегистрСведений.НастройкиВнутреннегоЭДО.Изменение.Организации
	|";
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_1

#Область ВключитьИспользованиеВнутреннихДокументовНачальноеЗаполнение

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиВнутреннегоЭДО.ВключитьИспользованиеВнутреннихДокументовНачальноеЗаполнение";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("32da4d73-c06d-4d01-9724-4cf44f9dc717");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьВнутренниеДокументыЭДО";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьВнутренниеДокументыЭДО";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: Включает использование внутренних электронных документов при начальном заполнении.'");

#КонецОбласти

#Область ВключитьИспользованиеВнутреннихДокументов

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиВнутреннегоЭДО.ВключитьИспользованиеВнутреннихДокументов";
	Обработчик.Версия = "1.9.3.49";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("959f649b-cd94-4215-abb9-a04272be4c64");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьВнутренниеДокументыЭДО";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьВнутренниеДокументыЭДО";
	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: Включает использование внутренних электронных документов при обновлении.'");

#КонецОбласти

#КонецОбласти
	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти
