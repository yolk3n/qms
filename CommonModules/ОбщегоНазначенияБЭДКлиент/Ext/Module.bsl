
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьПроверкуПроведенияДокументов(ДокументыМассив, ОбработкаПродолжения, ФормаИсточник = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
		ДокументыМассив, ОбработкаПродолжения, ФормаИсточник, СтандартнаяОбработка);
		
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыТребующиеПроведение = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(ДокументыМассив);
	КоличествоНепроведенныхДокументов = ДокументыТребующиеПроведение.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести.
										|Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести.
										|Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
		ДополнительныеПараметры.Вставить("ДокументыТребующиеПроведение", ДокументыТребующиеПроведение);
		ДополнительныеПараметры.Вставить("ФормаИсточник", ФормаИсточник);
		ДополнительныеПараметры.Вставить("ДокументыМассив", ДокументыМассив);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьПроверкуПроведенияДокументовПродолжить", ОбщегоНазначенияБЭДСлужебныйКлиент, ДополнительныеПараметры);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ДокументыМассив);
	КонецЕсли;
	
КонецПроцедуры

// Получает массив ссылок на объекты по параметру команды.
//
// Параметры:
//  ПараметрКоманды - выделенные строки таблицы формы.
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же, если переданы выделенные строки табличного поля,
//                 преобразует их в массив.
//  Неопределено - если передана пустая ссылка.
//
Функция МассивПараметров(ПараметрКоманды) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент Из ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла;
			
			Возврат МассивСсылок;
		КонецЕсли;
	#КонецЕсли
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	Иначе // пришла единичная ссылка на объект
		Если НЕ ЗначениеЗаполнено(ПараметрКоманды) Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Копирует в буфер обмена операционной системы указанный текст. Не работает в режиме веб-клиента и мобильного клиента.
// 
// Параметры:
// 	Текст - Строка - текст, который нужно скопировать.
// 	ТекстОповещения - Строка - текст, который нужно вывести в оповещении после успешного копирования.
Процедура СкопироватьВБуферОбмена(Текст, ТекстОповещения) Экспорт

#Если Не ВебКлиент И Не МобильныйКлиент Тогда
	
	Попытка
		ОбъектЗапись = Новый COMОбъект("htmlfile");
		ОбъектЗапись.ParentWindow.ClipboardData.Setdata("Text", Текст);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'"),
				, ТекстОповещения);
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Возникла ошибка при копировании в буфер обмена.
				|Воспользуйтесь комбинацией клавиш Ctrl+C.'"));
	КонецПопытки;
	
#КонецЕсли

КонецПроцедуры

// Возвращает имя события оповещения, сгенерированного с помощью см. ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта
// 
// Параметры:
// 	Источник - ЛюбаяСсылка,
//             РегистрСведенийКлючЗаписи,
//             РегистрНакопленияКлючЗаписи,
//             РегистрБухгалтерииКлючЗаписи,
//             РегистрРасчетаКлючЗаписи - ссылка измененного объекта или ключ измененной записи регистра, об изменении 
//                                        которой(го) необходимо уведомить динамические списки и формы.
// Возвращаемое значение:
// 	Строка - имя события. Может быть использовано для определения события в событии ОбработкаОповещения.
Функция ИмяСобытияИзмененияОбъекта(Источник) Экспорт
	Возврат "Запись_" + ОбщегоНазначенияБЭДСлужебныйКлиент.ИмяОбъектаМетаданных(ТипЗнч(Источник));
КонецФункции

// Возвращает ключ записи регистра сведений.
// 
// Параметры:
// 	Тип - Тип - тип регистра сведений, ключ записи которого нужно создать.
// 	ЗначенияКлюча - Структура:
// 	 * Ключ - Строка - имя измерения
// 	 * Значение - Произвольный - значение измерения
// Возвращаемое значение:
// 	Произвольный
Функция КлючЗаписиРегистраСведений(Тип, ЗначенияКлюча) Экспорт
	
	ПараметрыЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначенияКлюча);
	КлючЗаписи = Новый(Тип, ПараметрыЗаписи);
	
	Возврат КлючЗаписи;
	
КонецФункции

// Запускает форму подключения к системе "Взаимодействия".
// 
Процедура ПодключитьСистемуВзаимодействия() Экспорт
	
	НавигационнаяСсылка = "e1cib/command/Обработка.РегистрацияВСистемеВзаимодействия.Команда.РегистрацияВзаимодействий";
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
	
КонецПроцедуры

// Открывает диалог настройки регламентного задания и записывает регламентное задание с измененным расписанием.
// 
// Параметры:
// 	ИмяЗадания - Строка - имя задания в метаданных.
// 	Оповещение - ОписаниеОповещения - обработчик оповещения, который будет вызван после редактирования расписания.
//
Процедура НастроитьРасписаниеРегламентногоЗадания(ИмяЗадания, Оповещение = Неопределено) Экспорт
	
	Расписание = ОбщегоНазначенияБЭДСлужебныйВызовСервера.ПолучитьПараметрРегламентногоЗадания(ИмяЗадания, "Расписание",
		Новый РасписаниеРегламентногоЗадания);
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИмяЗадания", ИмяЗадания);
	Контекст.Вставить("Оповещение", Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ОбщегоНазначенияБЭДСлужебныйКлиент, Контекст);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// Разворачивает узлы указанного дерева на форме.
//
// Параметры:
//   Форма                     - ФормаКлиентскогоПриложения - форма, на которой размещен элемент управления с деревом значений.
//   ИмяЭлементаФормы          - Строка           - имя элемента с таблицей формы (деревом значений) и связанного с ней
//                                                  реквизита формы (должны совпадать).
//   ИдентификаторСтрокиДерева - Произвольный     - идентификатор строки дерева, которую требуется развернуть.
//                                                  Если указано "*", то будут развернуты все узлы верхнего уровня.
//                                                  Если указано Неопределено, то строки дерева развернуты не будут.
//                                                  Значение по умолчанию: "*".
//   РазвернутьСПодчиненными   - Булево           - если Истина, то следует раскрыть также и все подчиненные узлы.
//                                                  По умолчанию Ложь.
//
Процедура РазвернутьУзлыДерева(Форма, ИмяЭлементаФормы, ИдентификаторСтрокиДерева = "*", РазвернутьСПодчиненными = Ложь) Экспорт
	
	ТаблицаЭлемент = Форма.Элементы[ИмяЭлементаФормы];
	Если ИдентификаторСтрокиДерева = "*" Тогда
		Узлы = Форма[ИмяЭлементаФормы].ПолучитьЭлементы();
		Для Каждого Узел Из Узлы Цикл
			ТаблицаЭлемент.Развернуть(Узел.ПолучитьИдентификатор(), РазвернутьСПодчиненными);
		КонецЦикла;
	Иначе
		ТаблицаЭлемент.Развернуть(ИдентификаторСтрокиДерева, РазвернутьСПодчиненными);
	КонецЕсли;
	
КонецПроцедуры

#Область ВводСтроки

// Вызывает диалог для ввода строки.
//
// Параметры:
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после
//                                  закрытия окна ввода строки со следующими параметрами:
//    * РезультатВвода - Строка - введенное значение строки или Неопределено, если пользователь отказался от ввода.
//    * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  Параметры - см. ПараметрыВводаСтроки
//
Процедура ПоказатьВводСтрокиБЭД(ОписаниеОповещенияОЗавершении, Параметры) Экспорт
	
	ОткрытьФорму("Обработка.ОбщегоНазначенияБЭД.Форма.ВводСтроки", Параметры, , , , , ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Конструктор параметра Параметры, см. ПоказатьВводСтрокиБЭД
// 
// Возвращаемое значение:
// 	Структура:
// * ОбработчикПолученияПредставлений - Строка - полный путь к методу, вычисляющему представление данных. Метод должен
// 		содержать один параметр, в который будет передано значение параметра Данные.  
// * ПредставлениеДанных - Строка - если задан, будет использоваться для отображения на форме гиперссылки на данные.
// * Данные - Массив из Произвольный - если указан, в из формы ввода строки можно будет перейти к данным. Элементами могут являться
//		любые типы, которые можно отобразить на форме.
//			- Неопределено - Если данные не нужно указывать.
// * НазваниеКнопкиПоУмолчанию - Строка - название будет присвоено кнопке ОК.
// * КомментарийОбязательностиВвода - Строка - если указан, будет отображен пользователю при попытке ввода пустого
// 		значения и значении параметра Обязательность = Истина.
// * Обязательность - Булево - в значении Истина будет запрещен ввод пустой строки.
// * Многострочность - Булево - признак использования многострочной строки.
// * ЗаголовокФормы - Строка - заголовок для формы ввода.
// * Строка - Строка - Начальное значение строки, которое будет использовано в качестве начального значения в окне ввода.
// * ДополнительноеОписание - Строка - Дополнительное описание операции ввода строки.
Функция ПараметрыВводаСтроки() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЗаголовокФормы", "");
	Параметры.Вставить("Многострочность", Ложь);
	Параметры.Вставить("Обязательность", Ложь);
	Параметры.Вставить("КомментарийОбязательностиВвода", "");
	Параметры.Вставить("НазваниеКнопкиПоУмолчанию", "");
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("ПредставлениеДанных", "");
	Параметры.Вставить("ОбработчикПолученияПредставлений", "");
	Параметры.Вставить("Строка", "");
	Параметры.Вставить("ДополнительноеОписание", "");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ВводПароля

// Открывает форму ввода пароля.
// 
// Параметры:
// 	ПараметрыВвода - Структура - параметры показа формы:
// 	 * Заголовок - Строка - заголовок формы.
// 	 * Подсказка - Строка - если задана, будет использована как подсказка поля ввода пароля.
// 	 * ИспользоватьЗапоминание - Булево - если Истина, будет выведена опция запоминания пароля.
// 	 * ПодсказкаЗапоминания - Строка - если задана, будет использована как подсказка у опции запоминания пароля.
// 	ОбработкаПродолжения - ОбработчикОповещения - обработчик, который будет вызван после закрытия формы ввода пароля.
Процедура ПоказатьВводПароля(Знач ПараметрыВвода, Знач ОбработкаПродолжения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "");
	ПараметрыФормы.Вставить("Подсказка", "");
	ПараметрыФормы.Вставить("ИспользоватьЗапоминание", Ложь);
	ПараметрыФормы.Вставить("ПодсказкаЗапоминания", "");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВвода);
	
	ОткрытьФорму("Обработка.ОбщегоНазначенияБЭД.Форма.ВводПароля", ПараметрыФормы,,,,, ОбработкаПродолжения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФормул

// Открывает конструктор формул.
// 
// Параметры:
// 	ПараметрыКонструктора - см. НовыеПараметрыКонструктораФормул.
// 	Оповещение - ОписаниеОповещения - обработчик, который будет вызван по закрытии формы конструктора.
// 	ВладелецФормы - ФормаКлиентскогоПриложения - форма-владелец.
Процедура ОткрытьКонструкторФормул(ПараметрыКонструктора, Оповещение, ВладелецФормы) Экспорт
	
	ОткрытьФорму("Обработка.ОбщегоНазначенияБЭД.Форма.КонструкторФормул", ПараметрыКонструктора, ВладелецФормы,,,, Оповещение);
	
КонецПроцедуры

// Конструктор параметров метода см. ОткрытьКонструкторФормул
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Формула - Строка - формула.
// * АдресНабораОперандов - Строка - адрес временного хранилища, в которое помещен запрос, который будет использован для
//                                   компоновщика операндов.
Функция НовыеПараметрыКонструктораФормул() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("АдресНабораОперандов", "");
	Параметры.Вставить("Формула", "");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Оповещения

// Проверяет, что переданное имя события соответствует изменению переданного объекта.
// 
// Параметры:
// 	Объект - ЛюбаяСсылка
// 	       - см. ОбъектыСобытияИзменениеОбъекта
// 	ИмяСобытия - Строка - имя события, переданное в обработку оповещения.
// Возвращаемое значение:
// 	Булево - Истина, если указанное событие является событием изменения объекта.
Функция ЭтоСобытиеИзменениеОбъекта(Объект, ИмяСобытия) Экспорт
	
	Если ТипЗнч(Объект) = Тип("Строка") И Объект = ОбъектыСобытияИзменениеОбъекта().НаборКонстант Тогда
		ИмяСобытияИзменение = "Запись_НаборКонстант";
	Иначе
		ИмяСобытияИзменение = ИмяСобытияИзмененияОбъекта(Объект);
	КонецЕсли;
	
	Возврат ИмяСобытияИзменение = ИмяСобытия;
	
КонецФункции

// Получает набор объектов, которые не могут быть представлены ссылкой.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  * НаборКонстант - Строка - набор констант.
Функция ОбъектыСобытияИзменениеОбъекта() Экспорт
	
	Объекты = Новый Структура;
	Объекты.Вставить("НаборКонстант", "НаборКонстант");
	
	Возврат Объекты;
	
КонецФункции

#КонецОбласти

#Область ОткрытиеФормы

// Блокирует открытие формы на мобильном клиенте
//
// Параметры:
//  Отказ - Булево - если используется мобильный клиент, то параметр устанавливается в значение Истина.
//
Процедура ЗаблокироватьОткрытиеФормыНаМобильномКлиенте(Отказ) Экспорт
	
	#Если МобильныйКлиент Тогда
		ТекстСообщения = НСтр("ru = 'Функциональность в мобильном клиенте пока недоступна. Воспользуйтесь веб-клиентом или тонким клиентом'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	#КонецЕсли
	
КонецПроцедуры

// Возвращает параметры открытия формы, см. ОткрытьФормуБЭД.
// 
// Возвращаемое значение:
// 	Структура:
// * Владелец - Произвольный - см. одноименный параметр метода ОткрытьФорму
// * Уникальность - Произвольный - см. одноименный параметр метода ОткрытьФорму
// * Окно - ОкноКлиентскогоПриложения - см. одноименный параметр метода ОткрытьФорму
// * НавигационнаяСсылка - Строка, Неопределено - см. одноименный параметр метода ОткрытьФорму
// * ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - см. одноименный параметр метода ОткрытьФорму
// * РежимОткрытияОкна - РежимОткрытияОкнаФормы - см. одноименный параметр метода ОткрытьФорму
Функция НовыеПараметрыОткрытияФормы() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Владелец");
	Параметры.Вставить("Уникальность");
	Параметры.Вставить("Окно");
	Параметры.Вставить("НавигационнаяСсылка", Неопределено);
	Параметры.Вставить("ОписаниеОповещенияОЗакрытии");
	Параметры.Вставить("РежимОткрытияОкна", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Открывает форму.
// 
// Параметры:
// 	ИмяФормы - Строка
// 	ПараметрыФормы - Структура - см. параметр "Параметры" метода ОткрытьФорму
// 	ПараметрыОткрытияФормы - ПараметрыВыполненияКоманды
//                         - см. НовыеПараметрыОткрытияФормы
// 	ВыполнятьЗамерВремени - Булево - выполнять замер времени открытия формы
Процедура ОткрытьФормуБЭД(ИмяФормы, ПараметрыФормы = Неопределено, ПараметрыОткрытияФормы = Неопределено,
	ВыполнятьЗамерВремени = Ложь) Экспорт
	
	СлужебныеПараметрыОткрытияФормы = НовыеПараметрыОткрытияФормы();
	
	Если ТипЗнч(ПараметрыОткрытияФормы) = Тип("ПараметрыВыполненияКоманды") Тогда
		ЗаполнитьЗначенияСвойств(СлужебныеПараметрыОткрытияФормы, ПараметрыОткрытияФормы);
		СлужебныеПараметрыОткрытияФормы.Владелец = ПараметрыОткрытияФормы.Источник;
	ИначеЕсли ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(СлужебныеПараметрыОткрытияФормы, ПараметрыОткрытияФормы);
	КонецЕсли;
	
	Если ВыполнятьЗамерВремени Тогда
		ИмяОперации = СтрШаблон("%1.ОткрытиеФормы", ИмяФормы);
		ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяОперации);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,
		СлужебныеПараметрыОткрытияФормы.Владелец,
		СлужебныеПараметрыОткрытияФормы.Уникальность,
		СлужебныеПараметрыОткрытияФормы.Окно,
		СлужебныеПараметрыОткрытияФормы.НавигационнаяСсылка,
		СлужебныеПараметрыОткрытияФормы.ОписаниеОповещенияОЗакрытии,
		СлужебныеПараметрыОткрытияФормы.РежимОткрытияОкна);
	
КонецПроцедуры

#КонецОбласти

#Область АсинхронныйЦикл

// Стартует асинхронный цикл
// 
// Параметры:
// 	ОбработчикЗавершения - ОписаниеОповещения - обработчик, который нужно вызывать после окончания асинхронного цикла.
// 	Данные - Произвольный - данные, которые нужно передавать между обработчиками.
// 	Обработчики - Массив из ОписаниеОповещения - набор обработчиков, которые нужно выполнять на каждой итерации цикла.
// 	Контекст - Структура - переменная для передачи контекста в асинхронном цикле. Используется для передачи служебных
// 		свойств.Может быть использована для передачи произвольных данных, необходимых для выполнения алгоритма.
Процедура АсинхронныйЦиклНачать(ОбработчикЗавершения, Данные, Обработчики, Контекст) Экспорт
	
	Если Данные = Неопределено Тогда
		Данные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	КонецЕсли;
	КонтекстЦикла = Новый Структура;
	КонтекстЦикла.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	КонтекстЦикла.Вставить("Данные", Данные);
	КонтекстЦикла.Вставить("Обработчики", Обработчики);
	КонтекстЦикла.Вставить("СчетчикДанных", 0);
	КонтекстЦикла.Вставить("СчетчикОбработчиков", 0);
	КонтекстЦикла.Вставить("ТекущийУровеньВложенности", 0);
	
	Если Контекст.Свойство("АсинхронныйЦикл") Тогда
		ТекущийАсинхронныйЦикл = ОбщегоНазначенияБЭДСлужебныйКлиент.АсинхронныйЦиклТекущийЦикл(Контекст);
		ТекущийАсинхронныйЦикл.Вставить("АсинхронныйЦикл", КонтекстЦикла);
		Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности = Контекст.АсинхронныйЦикл.ТекущийУровеньВложенности + 1;
	Иначе 
		Контекст.Вставить("АсинхронныйЦикл", КонтекстЦикла);
	КонецЕсли;
	
	ОбщегоНазначенияБЭДСлужебныйКлиент.АсинхронныйЦиклНачало(Контекст);
	
КонецПроцедуры

// Вызывает следующий по очереди обработчик асинхронного цикла.
// 
// Параметры:
// 	Результат - Произвольный - значение, которое будет передано обработчику в качестве первого параметра.
// 	Контекст - Структура - описание параметра см. АсинхронныйЦиклНачать
Процедура АсинхронныйЦиклВыполнитьСледующийОбработчик(Результат, Контекст) Экспорт
	
	ТекущийАсинхронныйЦикл = ОбщегоНазначенияБЭДСлужебныйКлиент.АсинхронныйЦиклТекущийЦикл(Контекст);
	ТекущийАсинхронныйЦикл.СчетчикОбработчиков = ТекущийАсинхронныйЦикл.СчетчикОбработчиков + 1;
	ОбщегоНазначенияБЭДСлужебныйКлиент.АсинхронныйЦиклНачало(Контекст, Результат);
	
КонецПроцедуры

// Получает описание оповещения перехода к следующему обработчику. Может быть использовано, когда необходимо прервать
// асинхронный цикл, например, для запроса данных у пользователя.
// 
// Параметры:
// 	Контекст - Структура - описание параметра см. АсинхронныйЦиклНачать.
// Возвращаемое значение:
// 	ОписаниеОповещения - описание оповещения перехода к следующему обработчику.
Функция АсинхронныйЦиклСледующийОбработчик(Контекст) Экспорт
	
	НовыйОбработчик = Новый ОписаниеОповещения("АсинхронныйЦиклВыполнитьСледующийОбработчик", ЭтотОбъект, Контекст);
	Возврат НовыйОбработчик;
	
КонецФункции

// Возвращает элемент данных, который обрабатывается в цикле в текущей его итерации.
// 
// Параметры:
// 	Контекст - Структура - описание параметра см. АсинхронныйЦиклНачать.
// Возвращаемое значение:
// 	Произвольный - элемент данных.
Функция АсинхронныйЦиклТекущийЭлементДанных(Контекст) Экспорт
	 
	ТекущийАсинхронныйЦикл = ОбщегоНазначенияБЭДСлужебныйКлиент.АсинхронныйЦиклТекущийЦикл(Контекст);
	Возврат ТекущийАсинхронныйЦикл.Данные[ТекущийАсинхронныйЦикл.СчетчикДанных];
	
КонецФункции

#КОнецОбласти

#Область РаботаСДеревомОтборов

// Процедура вызывается при выборе значения в дереве отборов.
//
// Параметры:
//  ДеревоОтборов            - ТаблицаФормы  - дерево отборов на форме.
//  ПредставлениеОтбора      - ПолеФормы     - поле формы дерева отборов "ПредставлениеОтбора".
//  Представление            - ПолеФормы     - поле формы колонки дерева отборов "Представление".
//  ОповещениеПослеОбработки - ОписаниеОповещения - описание оповещения после обработки.
//  СтруктураОписанияТипов   - Структура:
//   * ЧастиДаты                - ЧастиДаты - части даты.
//   * ДлинаЧисла               - Число     - длина вводимого числа.
//   * ТочностьЧисла            - Число     - разрядность вводимого числа.
//   * ДлинаСтроки              - Число     - длина вводимой строки.
//   * РазрешенаМногострочность - Булево    - признак использования многострочности.
//  ПараметрыОформленияФормы  - см. НовыйПараметрыОформленияФормыУстановкаИнтервала
//
Процедура ДеревоОтборовВыбор(ДеревоОтборов, Знач ПредставлениеОтбора, Знач Представление,
			Знач ОповещениеПослеОбработки = Неопределено, Знач СтруктураОписанияТипов = Неопределено, 
			ПараметрыОформленияФормы = Неопределено) Экспорт
	
	ТекущийЭлемент = ДеревоОтборов.ТекущийЭлемент;
	Если НЕ ТекущийЭлемент = ПредставлениеОтбора
		И НЕ ТекущийЭлемент = Представление Тогда
		Возврат;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(ДеревоОтборов);
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	Если ВариантДействий = 1 Тогда // нажали на поле с типом Дата или Число на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 3 Тогда // нажали на поле с типом Строка на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСтроки(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 5 Тогда // нажали на поле с типом "СписокЗначений" на гиперссылку с 
																						// "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 2 ИЛИ ВариантДействий = 4 Тогда // нажали на гиперссылку с "не фиксированным" значением
		ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров) 
		И ТипЗнч(ПараметрыОформленияФормы) = Тип("Структура") Тогда
		СтруктураПараметров.Вставить("Заголовок", ПараметрыОформленияФормы.ЗаголовокФормы);
		СтруктураПараметров.Вставить("ТекстДекорации", ПараметрыОформленияФормы.ТекстДекорации);
	КонецЕсли;
	
	Если ВариантДействий = 1 ИЛИ ВариантДействий = 3 ИЛИ ВариантДействий = 5 Тогда
		ДополнительныеПараметры = Новый Структура(
			"ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьФиксированныйОтборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ЭлектронноеВзаимодействие.Форма.УстановкаИнтервала", СтруктураПараметров, 
			ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Вызывается при изменении значения в дереве отборов по свойствам.
//
// Параметры:
//  ДеревоОтборов              - ТаблицаФормы  - дерево отборов на форме.
//  ОповещениеПослеОбработки - ОписаниеОповещения - операция, которую нужно будет вызвать после выполнения 
//  	обработки данных при изменении.
//  СтруктураОписанияТипов   - Структура:
//   * ЧастиДаты                - ЧастиДаты - части даты.
//   * ДлинаЧисла               - Число     - длина вводимого числа.
//   * ТочностьЧисла            - Число     - разрядность вводимого числа.
//   * ДлинаСтроки              - Число     - длина вводимой строки.
//   * РазрешенаМногострочность - Булево    - признак использования многострочности.
//  ПараметрыОформленияФормы - см. НовыйПараметрыОформленияФормыУстановкаИнтервала
//
Процедура ДеревоОтборовОтборПриИзменении(ДеревоОтборов, ОповещениеПослеОбработки = Неопределено,
			СтруктураОписанияТипов = Неопределено, ПараметрыОформленияФормы = Неопределено) Экспорт
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(ДеревоОтборов);
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	Если ВариантДействий = 3 Тогда // нажали на поле с типом Строка на гиперссылку с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 4 Тогда // нажали на поле с типом Дата или Число на гиперссылку с 
																						// "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСтроки(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 5 Тогда // нажали на поле с типом "СписокЗначений" на гиперссылку 
																						// с "фиксированным" значением
		СтруктураПараметров = СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные);
	ИначеЕсли ВариантДействий = 7 Тогда // установили флажок на строке с незаполненным "не фиксированным" значением
		ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров) 
		И ТипЗнч(ПараметрыОформленияФормы) = Тип("Структура") Тогда
		СтруктураПараметров.Вставить("Заголовок", ПараметрыОформленияФормы.ЗаголовокФормы);
		СтруктураПараметров.Вставить("ТекстДекорации", ПараметрыОформленияФормы.ТекстДекорации);
	КонецЕсли;
	
	Если ВариантДействий = 3 ИЛИ ВариантДействий = 4 ИЛИ ВариантДействий = 5 Тогда
		ДополнительныеПараметры = Новый Структура(
			"ОповещениеПослеОбработки, ТекущиеДанные", ОповещениеПослеОбработки, ТекущиеДанные);
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьФиксированныйОтборЗавершение", 
			ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ЭлектронноеВзаимодействие.Форма.УстановкаИнтервала", СтруктураПараметров, 
			ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Параметры оформления формы "УстановкаИнтервала".
// 
// Возвращаемое значение:
//  Структура - Новый параметры оформления формы установка интервала:
// * ЗаголовокФормы - Строка
// * ТекстДекорации - Строка
//
Функция НовыйПараметрыОформленияФормыУстановкаИнтервала() Экспорт
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("ЗаголовокФормы", "");
	ПараметрыОформления.Вставить("ТекстДекорации", "");
	Возврат ПараметрыОформления;
	
КонецФункции

// Обрабатывает элементы дерева отборов по дополнительным реквизитам.
//
// Параметры:
//   СтрокаОтбора           - ДанныеФормыЭлементДерева - строка дерева отборов.
//   БыстрыеОтборы          - СписокЗначений           - список выбранных отборов для вывода на форме.
//   ЭлементБыстрыхОтборов  - ЭлементыФормы            - элемент формы БыстрыеОтборы.
//   СтруктураАтрибутов     - Структура                - возвращает структуру с параметрами для запроса в сервисе.
//   МассивПроизводителей   - Массив                   - возвращает массив идентификаторов значений по свойству "Производитель".
//
Процедура ОбработатьЭлементыДереваОтборовПоДополнительнымРеквизитам(СтрокаОтбора, БыстрыеОтборы,
				СтруктураАтрибутов, МассивПроизводителей = Неопределено) Экспорт
	
	ИдентификаторОтбора         = СтрокаОтбора.Идентификатор;
	
	ЗначениеОтбора    = СтрокаОтбора.ЗначениеОтбора;
	ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
	
	ИдентификаторыЗначений = Новый Массив;
	
	Если ЗначениеОтбора = "Список" Тогда
		
		СтрокаПроизводитель     = ИдентификаторОтбора = "Производитель";
		СтрокиОтбораСписок      = СтрокаОтбора.ПолучитьЭлементы();
		СтрокаЗначенийОтборов   = "";
		ВсеЗначенияВыбраны      = Истина;
		
		Для Каждого ЭлементСписка Из СтрокиОтбораСписок Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементСписка.Идентификатор) Тогда
				Возврат;
			КонецЕсли;
			Если ЭлементСписка.Отбор Тогда
				Если МассивПроизводителей <> Неопределено И СтрокаПроизводитель Тогда
					МассивПроизводителей.Добавить(ЭлементСписка.Идентификатор);
				Иначе
					ИдентификаторыЗначений.Добавить(ЭлементСписка.Идентификатор);
				КонецЕсли;
				СтрокаЗначенийОтборов = 
					СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ") 
						+ ЭлементСписка.Представление;
			Иначе
				ВсеЗначенияВыбраны = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторыЗначений.Количество() Тогда
			СтруктураАтрибутов = Новый Структура("Идентификатор, ИдентификаторыЗначений",
				ИдентификаторОтбора, ИдентификаторыЗначений);
		КонецЕсли;
		
		Если ВсеЗначенияВыбраны Тогда
			
			ПредставлениеОтбора = СтрокаОтбора.Представление + ": " + НСтр("ru = 'Все'");
		
		ИначеЕсли НЕ ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
			
			ПредставлениеОтбора = СтрокаОтбора.Представление + ": " + СтрокаЗначенийОтборов;
			
		КонецЕсли;
		
		БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Число") ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		
		Если (СтрокаОтбора.ФиксированноеЗначение
			И НЕ ЗначениеЗаполнено(СтрокаОтбора.ИнтервалОт) И НЕ ЗначениеЗаполнено(СтрокаОтбора.ИнтервалДо))
			ИЛИ (НЕ СтрокаОтбора.ФиксированноеЗначение И НЕ ЗначениеЗаполнено(СтрокаОтбора.ЗначениеОтбора)) Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаОтбора.ФиксированноеЗначение Тогда
			СтруктураАтрибутов = Новый Структура("Идентификатор, МинимальноеЗначение, МаксимальноеЗначение",
				ИдентификаторОтбора, СтрокаОтбора.ИнтервалОт, СтрокаОтбора.ИнтервалДо);
		Иначе
			СтруктураАтрибутов = Новый Структура("Идентификатор, Значение",
				ИдентификаторОтбора, СтрокаОтбора.ЗначениеОтбора);
		КонецЕсли;

		ПредставлениеОтбора = СтрокаОтбора.Представление + ": " + СтрокаОтбора.ПредставлениеОтбора;
		
		БыстрыеОтборы.Добавить(ИдентификаторОтбора, ПредставлениеОтбора);
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Булево") Тогда
		
		СтруктураАтрибутов = Новый Структура("Идентификатор, Значение",
			ИдентификаторОтбора, Истина);
		
		БыстрыеОтборы.Добавить(ИдентификаторОтбора, СтрокаОтбора.Представление + ": " + СтрокаОтбора.Отбор);
			
	КонецЕсли;
	
КонецПроцедуры

// Задает вопрос для установки пометки удаления
//
// Параметры:
//  ПометкаУдаления - Булево - Текущее значение пометки на удаления у объекта.
//  ОписаниеОповещения - ОписаниеОповещения.
//
Процедура ЗадатьВопросНаУстановкуПометкиУдаления(ПометкаУдаления, ОписаниеОповещения) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Пометить документ на удаление?'");
	
	Если ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с документа пометку на удаление?'");
	КонецЕсли;
	
	ПараметрыВопросаПользователю = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопросаПользователю.Картинка = БиблиотекаКартинок.ДиалогВопрос;
	ПараметрыВопросаПользователю.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		ПараметрыВопросаПользователю);
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

// Возвращает результат выполнения фонового задания.
// 
// Параметры:
//  ВидОперации - Строка
//  Результат - Структура:
//  * Статус - Строка
//  * АдресРезультата - Строка
//  * АдресДополнительногоРезультата - Строка
//  * КраткоеПредставлениеОшибки - Строка
//  * ПодробноеПредставлениеОшибки - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  
// Возвращаемое значение:
//  Произвольный
//
Функция РезультатВыполненияФоновогоЗадания(ВидОперации, Результат, КонтекстДиагностики) Экспорт
	
	РезультатВыполнения = Неопределено;
	
	Если Результат = Неопределено Тогда
		Возврат РезультатВыполнения;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда	
		
		Если Результат.Статус = "Ошибка" Тогда
			ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации, ВидОшибки,
				Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки);
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЕсли;
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДеревомОтборов

// Возвращает число - код варианта действий, которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//   ДеревоОтборов - ТаблицаФормы  - дерево отборов на форме.
//
// Возвращаемое значение:
// Число.
//  0 - нажали на поле списка, если список не был развернут - развернется,
//  1 - было выбрано значение поля "ЗначениеОтбора" с типом Число или Дата в строке с "фиксированным" значением,
//  2 - было выбрано значение поля "ЗначениеОтбора" с типом Число или Дата с "не фиксированным" значением,
//  3 - было выбрано значение поля "ЗначениеОтбора" с типом строка с "фиксированным" значением,
//  4 - было выбрано значение поля "ЗначениеОтбора" с типом строка с "не фиксированным" значением,
//  5 - было выбрано значение поля "ЗначениеОтбора" с типом "СписокЗначений" с "фиксированным" значением.
// 
// Возвращаемое значение:
//  Число - Вариант действий при выборе значения дерева отборов
//
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(ДеревоОтборов)
	
	ТекущиеДанные     = ДеревоОтборов.ТекущиеДанные;
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	ВариантДействий = 0;
	
	Если ТипЗначенияОтбора = Тип("Число")
		ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 1;
		Иначе
			ВариантДействий = 2;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка")
		И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 3;
		Иначе
			ВариантДействий = 4;
		КонецЕсли;
	ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			ВариантДействий = 5;
		КонецЕсли;

	ИначеЕсли НЕ ТекущиеДанные.ОтборДоступен
		И ТекущиеДанные.ЗначениеОтбора = "Список" Тогда //
		
		ТекущаяСтрока = ДеревоОтборов.ТекущаяСтрока;
		Если ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
			ДеревоОтборов.Свернуть(ТекущаяСтрока);
		Иначе
			ДеревоОтборов.Развернуть(ТекущаяСтрока);
		КонецЕсли;

	КонецЕсли;
		
	Возврат ВариантДействий;
	
КонецФункции

// Возвращает параметры текущей строки с типом "Число" или "Дата" в поле "ЗначениеОтбора",
// передаваемые в форму установки интервала.
// В дополнение к обязательным колонкам (см. ДеревоОтборовВыбор) дерева при работе с типом Число 
// 																				или Дата необходимы колонки:
//    ИнтервалОт            - Дата, Число.
//    ИнтервалДо            - Дата, Число.
//    МаксимальноеЗначение  - Строка.
//    МинимальноеЗначение   - Строка.
//
// Параметры:
//   ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровЧислаДаты(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОт",              ТекущиеДанные.ИнтервалОт);
	СтруктураПараметров.Вставить("ЗначениеДо",              ТекущиеДанные.ИнтервалДо);
	СтруктураПараметров.Вставить("МаксимальноеЗначение",    ТекущиеДанные.МаксимальноеЗначение);
	СтруктураПараметров.Вставить("МинимальноеЗначение",     ТекущиеДанные.МинимальноеЗначение);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры текущей строки с типом "Строка" в поле "ЗначениеОтбора", 
// 	передаваемые в форму установки интервала.
//
// Параметры:
//   ТекущиеДанные - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровСтроки(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОтбора",          ТекущиеДанные.ЗначениеОтбора);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	СтруктураПараметров.Вставить("ПодсказкаВвода",          ТекущиеДанные.ПредставлениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры текущей строки с типом "СписокЗначений" в поле "ЗначениеОтбора", 
// 	передаваемые в форму установки интервала, в дополнение к обязательным колонкам (см. ДеревоОтборовВыбор) дерева 
// 	при работе с типом СписокЗначений необходима колонка:
//    СписокВыбора - СписокЗначений.
//
// Параметры:
//   ТекущиеДанные - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Функция СформироватьСтруктуруПараметровСпискаЗначений(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяРеквизита",            ТекущиеДанные.Представление);
	СтруктураПараметров.Вставить("ЗначениеОтбора",          ТекущиеДанные.ЗначениеОтбора);
	СтруктураПараметров.Вставить("ТипЗначения",             ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
	СтруктураПараметров.Вставить("ПодсказкаВвода",          ТекущиеДанные.ПредставлениеОтбора);
	СтруктураПараметров.Вставить("СписокВыбора",            ТекущиеДанные.СписокВыбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Открывает форму для ввода данных.
//
// Параметры:
//   ДеревоОтборов            - ДанныеФормыДерево  - дерево отборов на форме.
//      * ЗначениеОтбора        - Строка, Число, Дата, СписокЗначений - значение отбора.
//      * ФиксированноеЗначение - Булево                              - признак использования формы 
//                                                                      "ОбщаяФорма.УстановкаИнтервала" для ввода данных.
//      * Представление         - Строка                              - наименование отбора.
//      * ПредставлениеОтбора   - Строка                              - наименование представления отбора.
//   СтруктураОписанияТипов   - Структура:
//      *ЧастиДаты                - ЧастиДаты - части даты.
//      *ДлинаЧисла               - Число     - длина вводимого числа.
//      *ТочностьЧисла            - Число     - разрядность вводимого числа.
//      *ДлинаСтроки              - Число     - длина вводимой строки.
//      *РазрешенаМногострочность - Булево    - признак использования многострочности.
//   ОповещениеПослеОбработки - ОписаниеОповещения - операция, которую нужно будет вызвать после
//                                                   выполнения обработки ввода данных.
//
Процедура ВывестиПолеВводаДанных(ДеревоОтборов, СтруктураОписанияТипов, ОповещениеПослеОбработки = Неопределено, 
	ЗначениеОтбора = Неопределено)
	
	ТекущиеДанные     = ДеревоОтборов.ТекущиеДанные;
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ЗначениеОтбора = Неопределено Тогда
		ЗначениеОтбора    = ТекущиеДанные.ЗначениеОтбора;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПослеОбработки, ТекущиеДанные");
	ДополнительныеПараметры.Вставить("ОповещениеПослеОбработки" , ОповещениеПослеОбработки);
	ДополнительныеПараметры.Вставить("ТекущиеДанные"            , ТекущиеДанные);
	ДополнительныеПараметры.Вставить("СтруктураОписанияТипов"   , СтруктураОписанияТипов);
	ДополнительныеПараметры.Вставить("ДеревоОтборов"            , ДеревоОтборов);
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ВывестиПолеВводаДанныхЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	// параметры ввода данных по умолчанию.
	ТипДаты                  = ЧастиДаты.Дата;
	ДлинаЧисла               = 15;
	ТочностьЧисла            = 3;
	ДлинаСтроки              = 0;
	РазрешенаМногострочность = Истина;
	
	Если ТипЗначенияОтбора = Тип("Дата") Тогда
		Если СтруктураОписанияТипов <> Неопределено
			И СтруктураОписанияТипов.Свойство("ЧастиДаты") Тогда
			ТипДаты = СтруктураОписанияТипов.ЧастиДаты;
		КонецЕсли;
		ПоказатьВводДаты(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ТипДаты);
	ИначеЕсли ТипЗначенияОтбора = Тип("Число") Тогда
		Если СтруктураОписанияТипов <> Неопределено Тогда
			Если СтруктураОписанияТипов.Свойство("ДлинаЧисла") Тогда
				ДлинаЧисла = СтруктураОписанияТипов.ДлинаЧисла;
			КонецЕсли;
			Если СтруктураОписанияТипов.Свойство("ТочностьЧисла") Тогда
				ТочностьЧисла = СтруктураОписанияТипов.ТочностьЧисла;
			КонецЕсли;
		КонецЕсли;

		ПоказатьВводЧисла(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, 
			ДлинаЧисла, ТочностьЧисла);
	ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
		Если СтруктураОписанияТипов <> Неопределено Тогда
			Если СтруктураОписанияТипов.Свойство("ДлинаСтроки") Тогда
				ДлинаСтроки = СтруктураОписанияТипов.ДлинаСтроки;
			КонецЕсли;
			Если СтруктураОписанияТипов.Свойство("Многострочность") Тогда
				РазрешенаМногострочность = СтруктураОписанияТипов.Многострочность;
			КонецЕсли;
		КонецЕсли;

		ПоказатьВводСтроки(ОповещениеОЗавершении, ЗначениеОтбора, ТекущиеДанные.Представление, ДлинаСтроки, 
			РазрешенаМногострочность);
	КонецЕсли;

КонецПроцедуры

// Обрабатывает результат вводимых данных.
//
// Параметры:
//  ЗначениеВыбора          - Число - вводимое значение на форме ввода данных.
//  ДополнительныеПараметры - Структура:
//    * ОповещениеПослеОбработки - ОписаниеОповещения       - операция, которую нужно будет вызвать после
//                                                           выполнения обработки ввода данных.
//    * ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Процедура ВывестиПолеВводаДанныхЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
		
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные            = ДополнительныеПараметры.ТекущиеДанные;
	УстанавливатьОтбор       = Ложь;
	
	Если ЗначениеВыбора <> Неопределено 
		И ЗначениеВыбора <> ТекущиеДанные.ЗначениеОтбора Тогда
		
		Если ЗначениеЗаполнено(ЗначениеВыбора) И ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Число") Тогда
			Если ПроверитьВыбранноеЧислоНаДопустимость(ЗначениеВыбора, ТекущиеДанные, ДополнительныеПараметры) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекущиеДанные.ЗначениеОтбора      = ЗначениеВыбора;
		Если НЕ ЗначениеЗаполнено(ЗначениеВыбора) Тогда
			ПредставлениеОтбора = НСтр("ru = '<не задано>'");
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Дата") Тогда
			ПредставлениеОтбора = Формат(ЗначениеВыбора, "ДЛФ=ДД");
		Иначе
			ПредставлениеОтбора = ЗначениеВыбора;
		КонецЕсли;
		ТекущиеДанные.ПредставлениеОтбора = ПредставлениеОтбора;
		УстанавливатьОтбор                = Истина;
		
	КонецЕсли;
	
	ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора);
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтбор);
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыбранноеЧислоНаДопустимость(ЗначениеВыбора, ТекущиеДанные, ДополнительныеПараметры)
	
	НеверноеЗначение     = Ложь;
	МаксимальноеЗначение = ТекущиеДанные.МаксимальноеЗначение;
	МинимальноеЗначение  = ТекущиеДанные.МинимальноеЗначение;
	
	Если ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
		МаксимальноеЗначение = Число(МаксимальноеЗначение);
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора > МаксимальноеЗначение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальноеЗначение) Тогда
		МинимальноеЗначение  = Число(МинимальноеЗначение);
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора < МинимальноеЗначение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МаксимальноеЗначение)
		И НЕ ЗначениеЗаполнено(МинимальноеЗначение) Тогда
		НеверноеЗначение = НеверноеЗначение ИЛИ ЗначениеВыбора < 0;
	КонецЕсли;
	
	Если НеверноеЗначение Тогда
		ОчиститьСообщения();
		ШаблонТекста = НСтр("ru = 'Указано неверное значение. %1 %2'");
		ТекстСообщения = СтрШаблон(ШаблонТекста,
			?(ЗначениеЗаполнено(МинимальноеЗначение), НСтр("ru = 'Минимально значение:'") + " " 
				+ ТекущиеДанные.МинимальноеЗначение + ". ", ""),
			?(ЗначениеЗаполнено(МаксимальноеЗначение), НСтр("ru = 'Максимальное значение:'") + " " 
				+ ТекущиеДанные.МаксимальноеЗначение, ""));
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВывестиПолеВводаДанных(ДополнительныеПараметры.ДеревоОтборов, ДополнительныеПараметры.СтруктураОписанияТипов,
			ДополнительныеПараметры.ОповещениеПослеОбработки, ЗначениеВыбора);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает результат вводимых данных на форме установки интервала.
//
// Параметры:
//  ЗначениеВыбора         - Структура:
//    * ИнтервалОт     - Число, Дата             - выбранное значение на форме.
//    * ИнтервалДо     - Число, Дата             - выбранное значение на форме.
//    * ЗначениеОтбора - Строка, СписокЗначений  - выбранное значение на форме.
//  ДополнительныеПараметры - Структура:
//    * ОповещениеПослеОбработки - ОписаниеОповещения       - операция, которую нужно будет вызвать после
//                                                           выполнения заполнения фиксированного отбора.
//    * ТекущиеДанные            - ДанныеФормыЭлементДерева - строка дерева отборов.
//
Процедура УстановитьФиксированныйОтборЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеОбработки = ДополнительныеПараметры.ОповещениеПослеОбработки;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	УстанавливатьОтборСписка = Ложь;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("Число") ИЛИ ТипЗначенияОтбора = Тип("Дата") Тогда
		Если ЗначениеВыбора <> Неопределено Тогда
			
			Если ЗначениеВыбора.ИнтервалОт <> ТекущиеДанные.ИнтервалОт
				Или ЗначениеВыбора.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
				
				ТекущиеДанные.ИнтервалОт = ЗначениеВыбора.ИнтервалОт;
				ТекущиеДанные.ИнтервалДо = ЗначениеВыбора.ИнтервалДо;
				ТекущиеДанные.ПредставлениеОтбора = ПредставлениеИнтервалаОтбора(ЗначениеВыбора.ИнтервалОт, ЗначениеВыбора.ИнтервалДо);
				
				УстанавливатьОтборСписка = Истина;
				
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалОт) Или ЗначениеЗаполнено(ЗначениеВыбора.ИнтервалДо);
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				ТекущиеДанные.Отбор = ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) Или ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо);
			КонецЕсли;
			
			УстанавливатьОтборСписка = Ложь;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеВыбора <> Неопределено Тогда
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			Если ТекущиеДанные.ЗначениеОтбора <> ЗначениеОтбора Тогда
				
				ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
				ТекущиеДанные.ПредставлениеОтбора = 
					?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
				
				УстанавливатьОтборСписка = Истина;
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеОтбора);
			
		Иначе
			
			Если ТекущиеДанные.Отбор Тогда
				ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеОтбора);
			КонецЕсли;
			
			УстанавливатьОтборСписка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеОбработки, УстанавливатьОтборСписка);
	КонецЕсли;

КонецПроцедуры

// Возвращает строковое представление интервала отбора.
//
// Параметры:
//  ИнтервалОт - Число, Строка, Дата - начальное значение интервала,
//  ИнтервалДо - Число, Строка, Дата - конечное значение интервала.
//
// Возвращаемое значение:
//  Строка - представление интервала.
//
Функция ПредставлениеИнтервалаОтбора(Знач ИнтервалОт, Знач ИнтервалДо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИнтервалОт)
		И НЕ ЗначениеЗаполнено(ИнтервалДо) Тогда
		
		ПредставлениеОтбора =  НСтр("ru = '<не задано>'");
		Возврат ПредставлениеОтбора;
	КонецЕсли;
	
	ПредставлениеОтбораОт = "";
	ПредставлениеОтбораДо = "";
	
	Если ЗначениеЗаполнено(ИнтервалОт) Тогда
		ЗначениеИнтервалаОт = ?(ТипЗнч(ИнтервалОт) = Тип("Дата"), Формат(ИнтервалОт, "ДЛФ=ДД"), ИнтервалОт);
		ПредставлениеОтбораОт = НСтр("ru = 'от'") + " " + ЗначениеИнтервалаОт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтервалДо) Тогда
		ЗначениеИнтервалаДо = ?(ТипЗнч(ИнтервалДо) = Тип("Дата"), Формат(ИнтервалДо, "ДЛФ=ДД"), ИнтервалДо);
		ПредставлениеОтбораДо = НСтр("ru = 'до'") + " " + ЗначениеИнтервалаДо;
	КонецЕсли;
	
	ПредставлениеОтбора = СтрШаблон("%1 %2", ПредставлениеОтбораОт, ПредставлениеОтбораДо);
	
	Возврат ПредставлениеОтбора;
	
КонецФункции

// Возвращает число - код варианта действия, которое было выполнено с деревом отборов.
//
// Параметры:
//   ДеревоОтборов - ДанныеФормыДерево  - дерево отборов на форме (см. обязательные колонки в "ДеревоОтборовВыбор").
//
// Возвращаемое значение: 
// Число.
// 0 - никакого изменения значений в дереве отборов не произошло;
// 1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
// 2 - был установлен/снят флажок на строке с "фиксированным значением", причем фиксированное
//    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//    кабеля и у него установили/сняли флажок;
// 3 - был УСТАНОВЛЕН флажок на строке с типом "Строка" с "фиксированным значением", причем фиксированное значение
//    в строке еще не указано;
// 4 -  был УСТАНОВЛЕН флажок на строке с типом "Число" или "Дата" с "фиксированным значением", 
//    причем фиксированное значение в строке еще не указано;
// 5 -  был УСТАНОВЛЕН флажок на строке с типом "СписокЗначений" с "фиксированным значением", причем 
//      фиксированное значение в строке еще не указано;
// 6 - был установлен/снят флажок на заполненной строке без признака "фиксированное значение".
// 7 - было выбрано значение с типом число, дата или строка без признака "фиксированное значение",
//    в этом случае откроется окно ввода числа или даты.
//
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(ДеревоОтборов)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение
		И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если ТипЗначенияОтбора = Тип("Строка") И НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значение с типом "Строка"
				
			ИначеЕсли (ТипЗначенияОтбора = Тип("Дата") ИЛИ ТипЗначенияОтбора = Тип("Число"))
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт)
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо) Тогда
				
				ВариантДействий = 4; // УСТАНОВИЛИ флажок на незаполненном значение с типом "Дата" или "Число"
				
			ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") 
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)Тогда
					
				ВариантДействий = 5; // УСТАНОВИЛИ флажок на незаполненном значение с типом "СписокЗначений"
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если (ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Число")
			ИЛИ ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Дата")
			ИЛИ ТипЗнч(ТекущиеДанные.ЗначениеОтбора) = Тип("Строка"))
			И ТекущиеДанные.ЗначениеОтбора <> "Список" Тогда
			
			ВариантДействий = 6; // установили/сняли флажок на заполненном поле без признака "фиксированное значения"
			
			Если ТекущиеДанные.Отбор Тогда
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора) Тогда
					ВариантДействий = 7; //УСТАНОВИЛИ флажок на незаполненном значением поле без признака 
																							// "фиксированное значения"
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
			
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			
			Если Родитель = Неопределено Тогда // выбрана строка-родитель
				
				// Установить/снять значение флажка отбора для всех подчиненных строк.
				
				ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
				
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
				КонецЦикла;
				
			Иначе
				
				// Выбрана подчиненная строка.
				
				Родитель.Отбор = Ложь;
				
				ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
				
				// Пройти по всем подчиненным строкам родителя выбранной строки, и если
				// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
				// и родительской строки.
				
				Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
					
					Если ЭлементДерева.Отбор Тогда
						Родитель.Отбор = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

#КонецОбласти

#КонецОбласти
