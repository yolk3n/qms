#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьДанные_ИзвещениеОПолучении(Данные, ДанныеДляФормирования, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ИдФайла", ДанныеДляФормирования.УникальныйИдентификатор);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВерсияФормата", "1.02");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "КодКНД", "1115110");
			
	Если ДанныеДляФормирования.Участники.Получатель.Тип = "Оператор" Тогда
		
		Оператор = ДанныеДляФормирования.Участники.Получатель.Оператор;	
		Абонент = ДанныеДляФормирования.Участники.Получатель.Абонент;
		
		Путь = "Получатель.ИдУчастникаЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, Абонент.Идентификатор);
		
		Путь = "Получатель.ТипУчастника.ОператорЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", Оператор.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
			Оператор.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИдентификаторОператора",
			Оператор.Идентификатор);
	Иначе
		Абонент = ДанныеДляФормирования.Участники.Получатель.Абонент;
		
		Путь = "Получатель.ИдУчастникаЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, Абонент.Идентификатор);
		
		ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(Абонент.Ссылка);
		ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Абонент.Ссылка);
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		Если Не ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) Или ПустаяСтрока(
			ПолноеНаименование) Тогда
			ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
		КонецЕсли;

		Если ЭтоФизЛицо Тогда
			Путь = "Получатель.ТипУчастника.ИП";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Фамилия",
				ДанныеЮрФизЛица.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Отчество",
				ДанныеЮрФизЛица.Отчество);
		Иначе
			Путь = "Получатель.ТипУчастника.ЮЛ";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
				ПолноеНаименование);
		КонецЕсли;
	КонецЕсли;
		
	// Отправитель
	Путь = "Отправитель.ИдУчастникаЭДО";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, ДанныеДляФормирования.Участники.Отправитель.Идентификатор);
	
	ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(ДанныеДляФормирования.Участники.Отправитель.Ссылка);
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ДанныеДляФормирования.Участники.Отправитель.Ссылка);
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	Если Не ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) Или ПустаяСтрока(ПолноеНаименование) Тогда
		ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
	КонецЕсли;

	Если ЭтоФизЛицо Тогда
		Путь = "Отправитель.ТипУчастника.ИП";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Отчество",
			ДанныеЮрФизЛица.Отчество);
	Иначе
		Путь = "Отправитель.ТипУчастника.ЮЛ";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
			ПолноеНаименование);
	КонецЕсли;
		
	// Документ
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ДатаПолучения",
			ДанныеДляФормирования.Основание.ДатаВремяПолучения);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ВремяПолучения",
			ВремяИзДаты(ДанныеДляФормирования.Основание.ДатаВремяПолучения));
	
	Путь = "ДанныеДокумента.СведПолФайл.";
	Реквизит = ДанныеДляФормирования.Основание.ИмяБезРасширения;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + "ИмяПолученногоФайла", Реквизит);

	Если ДанныеДляФормирования.Свойство("НаименованиеДокументаОтправителя") И ЗначениеЗаполнено(
		ДанныеДляФормирования.НаименованиеДокументаОтправителя) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь
			+ "ДанныеПолученногоДокумента.НаимДокумента", ДанныеДляФормирования.НаименованиеДокументаОтправителя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь
			+ "ДанныеПолученногоДокумента.НомерДокумента", ?(ЗначениеЗаполнено(ДанныеДляФормирования.НомерДокумента),
			ДанныеДляФормирования.НомерДокумента, НСтр("ru = 'б/н'")));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь
			+ "ДанныеПолученногоДокумента.ДатаДокумента", ДанныеДляФормирования.ДатаДокументаОтправителя);
	КонецЕсли;

	Подписи = ДанныеДляФормирования.ПодписиОснования;
	
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи.Добавить("---");
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + "ПолученныеЭП", Подписи);

КонецПроцедуры

Процедура ЗаполнитьДанные_ПредложениеОбАннулировании(Данные, ДанныеДляФормирования, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ИдФайла", ДанныеДляФормирования.УникальныйИдентификатор);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВерсияФормата", "1.01");
		
	Если ДанныеДляФормирования.Участники.Получатель.Тип = "Оператор" Тогда
		
		Оператор = ДанныеДляФормирования.Участники.Получатель.Оператор;	
		Абонент = ДанныеДляФормирования.Участники.Получатель.Абонент;
		
		Путь = "Получатель.ИдУчастникаЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, Абонент.Идентификатор);
		
		Путь = "Получатель.ТипУчастника.ОператорЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", Оператор.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
			Оператор.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИдентификаторОператора",
			Оператор.Идентификатор);
	Иначе
		Абонент = ДанныеДляФормирования.Участники.Получатель.Абонент;
		
		Путь = "Получатель.ИдУчастникаЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, Абонент.Идентификатор);
		
		ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(Абонент.Ссылка);
		ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Абонент.Ссылка);
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		Если Не ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) Или ПустаяСтрока(
			ПолноеНаименование) Тогда
			ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
		КонецЕсли;

		Если ЭтоФизЛицо Тогда
			Путь = "Получатель.ТипУчастника.ИП";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Фамилия",
				ДанныеЮрФизЛица.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Отчество",
				ДанныеЮрФизЛица.Отчество);
		Иначе
			Путь = "Получатель.ТипУчастника.ЮЛ";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
				ПолноеНаименование);
		КонецЕсли;
	КонецЕсли;
		
	// Отправитель
	Путь = "Отправитель.ИдУчастникаЭДО";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, ДанныеДляФормирования.Участники.Отправитель.Идентификатор);
		
	ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(ДанныеДляФормирования.Участники.Отправитель.Ссылка);
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ДанныеДляФормирования.Участники.Отправитель.Ссылка);
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	Если Не ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) Или ПустаяСтрока(ПолноеНаименование) Тогда
		ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
	КонецЕсли;

	Если ЭтоФизЛицо Тогда
		Путь = "Отправитель.ТипУчастника.ИП";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Отчество",
			ДанныеЮрФизЛица.Отчество);
	Иначе
		Путь = "Отправитель.ТипУчастника.ЮЛ";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
			ПолноеНаименование);
	КонецЕсли;
		
	Путь = "ДанныеДокумента.СведПолФайл.";
	Реквизит = ДанныеДляФормирования.Основание.ИмяБезРасширения;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + "ИмяПолученногоФайла", Реквизит);
	
	Подписи = ДанныеДляФормирования.ПодписиОснования;
	
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи.Добавить("---");
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + "ПолученныеЭП", Подписи);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ТекстУточнения",
			ДанныеДляФормирования.ТекстУточнения);
	
КонецПроцедуры

Процедура ЗаполнитьДанные_УведомлениеОбУточнении(Данные, ДанныеДляФормирования, Отказ) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ИдФайла", ДанныеДляФормирования.УникальныйИдентификатор);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ВерсияФормата", "1.02");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "КодКНД", "1115113");
	
	Если ДанныеДляФормирования.Участники.Получатель.Тип = "Оператор" Тогда
		
		Оператор = ДанныеДляФормирования.Участники.Получатель.Оператор;	
		Абонент = ДанныеДляФормирования.Участники.Получатель.Абонент;
		
		Путь = "Получатель.ИдУчастникаЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, Абонент.Идентификатор);
		
		Путь = "Получатель.ТипУчастника.ОператорЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", Оператор.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
			Оператор.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИдентификаторОператора",
			Оператор.Идентификатор);
	Иначе
		Абонент = ДанныеДляФормирования.Участники.Получатель.Абонент;
		
		Путь = "Получатель.ИдУчастникаЭДО";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, Абонент.Идентификатор);
		
		ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(Абонент.Ссылка);
		ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Абонент.Ссылка);
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		Если Не ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) Или ПустаяСтрока(
			ПолноеНаименование) Тогда
			ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
		КонецЕсли;

		Если ЭтоФизЛицо Тогда
			Путь = "Получатель.ТипУчастника.ИП";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Фамилия",
				ДанныеЮрФизЛица.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Отчество",
				ДанныеЮрФизЛица.Отчество);
		Иначе
			Путь = "Получатель.ТипУчастника.ЮЛ";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
				ПолноеНаименование);
		КонецЕсли;
	КонецЕсли;
		
	// Отправитель
	Путь = "Отправитель.ИдУчастникаЭДО";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь, ДанныеДляФормирования.Участники.Отправитель.Идентификатор);
	
	ЭтоФизЛицо = Ложь;
	ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(ДанныеДляФормирования.Участники.Отправитель.Ссылка);
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ДанныеДляФормирования.Участники.Отправитель.Ссылка);
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	Если Не ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование) Или ПустаяСтрока(ПолноеНаименование) Тогда
		ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
	КонецЕсли;

	Если ЭтоФизЛицо Тогда
		Путь = "Отправитель.ТипУчастника.ИП";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".Отчество",
			ДанныеЮрФизЛица.Отчество);
	Иначе
		Путь = "Отправитель.ТипУчастника.ЮЛ";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + ".НаименованиеОрганизации",
			ПолноеНаименование);
	КонецЕсли;
		
	// Документ
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ДатаПолучения",
			ДанныеДляФормирования.Основание.ДатаВремяПолучения);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ВремяПолучения",
			ВремяИзДаты(ДанныеДляФормирования.Основание.ДатаВремяПолучения));
		
	Путь = "ДанныеДокумента.СведПолФайл.";
	Реквизит = ДанныеДляФормирования.Основание.ИмяБезРасширения;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + "ИмяПолученногоФайла", Реквизит);

	Если ДанныеДляФормирования.Свойство("НаименованиеДокументаОтправителя") И ЗначениеЗаполнено(
		ДанныеДляФормирования.НаименованиеДокументаОтправителя) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь
			+ "ДанныеПолученногоДокумента.НаимДокумента", ДанныеДляФормирования.НаименованиеДокументаОтправителя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь
			+ "ДанныеПолученногоДокумента.НомерДокумента", ?(ЗначениеЗаполнено(ДанныеДляФормирования.НомерДокумента),
			ДанныеДляФормирования.НомерДокумента, НСтр("ru = 'б/н'")));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь
			+ "ДанныеПолученногоДокумента.ДатаДокумента", ДанныеДляФормирования.ДатаДокументаОтправителя);
	КонецЕсли;

	Подписи = ДанныеДляФормирования.ПодписиОснования;
	Если Не ЗначениеЗаполнено(Подписи) Тогда
		Подписи.Добавить("---");
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, Путь + "ПолученныеЭП", Подписи);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Данные, "ДанныеДокумента.ТекстУточнения",
			ДанныеДляФормирования.ТекстУточнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВремяИзДаты(ДатаВремя)

	Возврат Дата(1, 1, 1) + Час(ДатаВремя) * 3600 + Минута(ДатаВремя) * 60 + Секунда(ДатаВремя);

КонецФункции

#Область БизнесСеть

Процедура ПрочитатьЗапросКоммерческихПредложений(Знач ДанныеЭлектронногоДокумента, Вложения, РезультатЧтения) Экспорт
	
	РезультатЧтения.ВидЭД = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений;
	
	ИдентификаторДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "id");
	НомерДокумента         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "number");
	ДатаДокумента          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "date");
	
	МенеджерЗапросКоммерческогоПредложенияОтКлиента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
		"Документ.ЗапросКоммерческогоПредложенияОтКлиента");
	
	Если МенеджерЗапросКоммерческогоПредложенияОтКлиента <> Неопределено Тогда
		ЗапросКоммерческихПредложенийОтКлиента = 
			МенеджерЗапросКоммерческогоПредложенияОтКлиента.ЗапросКоммерческихПредложенийОтКлиентаПоИдентификаторуСервиса(
			ИдентификаторДокумента);
		
		Если ЗначениеЗаполнено(ЗапросКоммерческихПредложенийОтКлиента) Тогда
			РезультатЧтения.СсылкаНаОбъект = ЗапросКоммерческихПредложенийОтКлиента;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"ИдентификаторДокумента", ИдентификаторДокумента);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Номер", НомерДокумента);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Дата", ДатаДокумента);
	
	ДанныеДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ЗапросКоммерческихПредложений");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента,
		"ИдентификаторДокумента", ИдентификаторДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента,
		"Дата", ДатаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента,
		"Номер", НомерДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "Описание",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "description"));
	
	// Организация (отправитель)
	ДанныеУчастника = ДанныеЭлектронногоДокумента.customer;
	Организация = ИнформацияОбУчастникеКоммерческихПредложенийПоДаннымЭлектронногоДокумента(ДанныеУчастника);
	
	Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда 
		Отправитель = ЭлектронноеВзаимодействие.НайтиСсылку("Контрагенты", "",
			РеквизитыУчастникаКоммерческихПредложений(Организация));
	ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
		Отправитель = ЭлектронноеВзаимодействие.НайтиСсылку("Организации", "",
			РеквизитыУчастникаКоммерческихПредложений(Организация));
	КонецЕсли;
		
	Организация.Вставить("Ссылка", Отправитель);
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, Организация, "Организация");
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Организация", Организация.Наименование);
		
	// Получатель
	Если ДанныеЭлектронногоДокумента.recipients.supplier.Количество() Тогда
		
		ДанныеУчастника = ДанныеЭлектронногоДокумента.recipients.supplier[0];
		Получатель = ИнформацияОбУчастникеКоммерческихПредложенийПоДаннымЭлектронногоДокумента(ДанныеУчастника);
		
		Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда 
			ОрганизацияПолучатель = ЭлектронноеВзаимодействие.НайтиСсылку("Организации", "",
				РеквизитыУчастникаКоммерческихПредложений(Получатель));
		ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
			ОрганизацияПолучатель = ЭлектронноеВзаимодействие.НайтиСсылку("Контрагенты", "",
				РеквизитыУчастникаКоммерческихПредложений(Получатель));
		КонецЕсли;
		Получатель.Вставить("Ссылка", ОрганизацияПолучатель);
		
		ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, Получатель, "Получатель");
		ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
			"Контрагент", Получатель.Наименование);
		
	КонецЕсли;
	
	// Владелец номенклатуры
	Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда 
		ВладелецНоменклатуры = Отправитель;
	ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда 		
		ВладелецНоменклатуры = ОрганизацияПолучатель;
	КонецЕсли;
	
	Если ВладелецНоменклатуры <> Неопределено  Тогда
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(ВладелецНоменклатуры, ВладелецНоменклатуры);
	КонецЕсли;
	
	// Контактное лицо
	КонтактноеЛицо = Новый Структура;
	КонтактноеЛицо.Вставить("ФИО", ДанныеЭлектронногоДокумента.Contacts.contactName);
	КонтактноеЛицо.Вставить("ЭлектроннаяПочта", ДанныеЭлектронногоДокумента.Contacts.email);
	КонтактноеЛицо.Вставить("Телефон", ДанныеЭлектронногоДокумента.Contacts.phone);
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, КонтактноеЛицо, "КонтактноеЛицо");
	
	// Товары
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("ИдентификаторСтроки");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЛогистическаяУпаковка");
	Товары.Колонки.Добавить("СрокПоставки");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("Товар");
	
	РеквизитыТовара = Новый ТаблицаЗначений;
	РеквизитыТовара.Колонки.Добавить("ИмяРеквизита");
	РеквизитыТовара.Колонки.Добавить("ЗначениеРеквизита");
	
	Для Каждого ДанныеТовара Из ДанныеЭлектронногоДокумента.products Цикл
		
		ТоварнаяПозиция                     = Товары.Добавить();
		ТоварнаяПозиция.ИдентификаторСтроки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "matching.matchId");
		ТоварнаяПозиция.Количество          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "count");
		
		ЛогистическаяУпаковка = Новый Структура;
		ЛогистическаяУпаковка.Вставить("Описание",    РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "packaging.description"));
		ЛогистическаяУпаковка.Вставить("Числитель",   РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "packaging.unitsNumerator"));
		ЛогистическаяУпаковка.Вставить("Знаменатель", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "packaging.unitsDenominator"));
		ТоварнаяПозиция.ЛогистическаяУпаковка = ЛогистическаяУпаковка;
		
		ДатаДоставки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "deliveryDate");
		Если ЗначениеЗаполнено(ДатаДоставки) Тогда
			ТоварнаяПозиция.СрокПоставки = Новый Структура("НаДату", ДатаДоставки);
		Иначе
			ТоварнаяПозиция.СрокПоставки = Новый Структура("ВДнях",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "maxDeliveryDaysAfterOrder"));
		КонецЕсли;
		
		ТоварнаяПозиция.Цена = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.maxPrice");
		
		ТоварнаяПозиция.Товар = Новый Структура;
		
		ИдентификаторДляСопоставления = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.matchId");
		
		Если ЗначениеЗаполнено(ИдентификаторДляСопоставления) Тогда
			
			ТоварнаяПозиция.Товар.Вставить("ИдентификаторДляСопоставления", ИдентификаторДляСопоставления);
			
			ОписаниеНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(ВладелецНоменклатуры,
				ИдентификаторДляСопоставления);
			
			Отбор = Новый Структура;
			Отбор.Вставить("НоменклатураКонтрагента", ОписаниеНоменклатуры);
			Отбор.Вставить("Владелец",                ВладелецНоменклатуры);
			СопоставленнаяНоменклатура = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
			
			НайденаСопоставленнаяНоменклатура = СопоставленнаяНоменклатура.Количество();
			
			Если НайденаСопоставленнаяНоменклатура Тогда
				ТоварнаяПозиция.Товар.Вставить("НоменклатураСсылка",
					СопоставленнаяНоменклатура[0].НоменклатураИБ.Номенклатура);
				ТоварнаяПозиция.Товар.Вставить("ХарактеристикаСсылка",
					СопоставленнаяНоменклатура[0].НоменклатураИБ.Характеристика);
				ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияСсылка",
					СопоставленнаяНоменклатура[0].НоменклатураИБ.Упаковка);
			КонецЕсли;
			
		Иначе
			НайденаСопоставленнаяНоменклатура = Ложь;
		КонецЕсли;
		
		ТоварнаяПозиция.Товар.Вставить("НоменклатураНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.productName"));
		ТоварнаяПозиция.Товар.Вставить("ХарактеристикаНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.characteristicName"));
		ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияКодОКЕИ",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.baseUnitOkeiCode"));
		ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.baseUnitName"));
		ТоварнаяПозиция.Товар.Вставить("Описание", 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.productDescription"));
		ТоварнаяПозиция.Товар.Вставить("АртикулПоставщика",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.vendorCode"));
		ТоварнаяПозиция.Товар.Вставить("АртикулПроизводителя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.partNumber"));
		ТоварнаяПозиция.Товар.Вставить("Производитель",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.manufacturer.name"));
		ТоварнаяПозиция.Товар.Вставить("ТорговаяМарка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.manufacturer.tradeMark"));
		
		Штрихкоды = Новый Массив;
		Для Каждого ЗначениеШтрихкода Из РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.barcodes") Цикл
			Штрихкоды.Добавить(ЗначениеШтрихкода);
		КонецЦикла;
		ТоварнаяПозиция.Товар.Вставить("Штрихкоды", Штрихкоды);
		
		РеквизитыТовара.Очистить();
		ДанныеРеквизитов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.customerNomenclature.requisiteValues");
		Для Каждого ОписаниеРеквизита Из ДанныеРеквизитов Цикл
			РеквизитТовара                   = РеквизитыТовара.Добавить();
			РеквизитТовара.ИмяРеквизита      = ОписаниеРеквизита.name;
			РеквизитТовара.ЗначениеРеквизита = ОписаниеРеквизита.value;
		КонецЦикла;
		ТоварнаяПозиция.Товар.Вставить("РеквизитыТовара", РеквизитыТовара);
		
		Сервис1СНоменклатура = Новый Структура;
		ДанныеСервиса1СНоменклатура = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.productSpecification");
		Если ДанныеСервиса1СНоменклатура <> Неопределено Тогда
			
			Номенклатура = Новый Структура;
			Номенклатура.Вставить("ИдентификаторНоменклатуры",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.productSpecification.id"));
			Номенклатура.Вставить("ИдентификаторХарактеристики",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара,
				"product.ref1cNomenclature.productSpecification.characteristicId.productSpecification.id"));
			
			Сервис1СНоменклатура.Вставить("Номенклатура", Номенклатура);
			
			Если Не НайденаСопоставленнаяНоменклатура
				И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения")
				И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
				
				МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
				
				СопоставленнаяНоменклатура = МодульПодсистемы.НоменклатураИХарактеристикиПоИдентификаторам(Номенклатура);
				
				Если СопоставленнаяНоменклатура.Количество() Тогда
					ТоварнаяПозиция.Товар.Вставить("НоменклатураСсылка",
						СопоставленнаяНоменклатура[0].Номенклатура);
					ТоварнаяПозиция.Товар.Вставить("ХарактеристикаСсылка",
						СопоставленнаяНоменклатура[0].Характеристика);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Рубрика = Новый Структура;
			Рубрика.Вставить("ИдентификаторРубрики",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.categorySpecification.categoryId"));
			Рубрика.Вставить("НаименованиеРубрики",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.categorySpecification.categoryName"));
			Рубрика.Вставить("ИдентификаторПроизводителя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.categorySpecification.manufacturerId"));
			Рубрика.Вставить("НаименованиеПроизводителя",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.categorySpecification.manufacturerName"));
			Рубрика.Вставить("ИдентификаторТорговойМарки",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.categorySpecification.tradeMarkId"));
			Рубрика.Вставить("НаименованиеТорговойМарки",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.categorySpecification.tradeMarkName"));
			
			Сервис1СНоменклатура.Вставить("Рубрика", Рубрика);
			
		КонецЕсли;
		ТоварнаяПозиция.Товар.Вставить("Сервис1СНоменклатура", Сервис1СНоменклатура);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, Товары, "Товары");
	
	// УсловияИПоложения
	УсловияИПоложения = Новый Структура;
	УсловияИПоложения.Вставить("УсловияДоставки",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.termsOfDelivery",, "Строка"));
	УсловияИПоложения.Вставить("УсловияОплаты",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.termsOfPayment",, "Строка"));
	УсловияИПоложения.Вставить("УсловияПрочие",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.otherConditions",, "Строка"));
	УсловияИПоложения.Вставить("ПриемПередачаНаКомиссию",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.commissionTransaction"));
	УсловияИПоложения.Вставить("ВсеИлиНичего",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.allOrNothing"));
	УсловияИПоложения.Вставить("ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.currencyCode"));
	УсловияИПоложения.Вставить("ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.currencyName"));
	УсловияИПоложения.Вставить("ТолькоСНДС",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.vatDeductable"));
	УсловияИПоложения.Вставить("ДатаНачалаСбора",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.dateOffersCollectFrom"));
	УсловияИПоложения.Вставить("ДатаОкончанияСбора",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.dateOffersCollectTo"));
	УсловияИПоложения.Вставить("ДатаОкончанияРассмотрения",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.dateOffersConsiderTo"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, УсловияИПоложения, "УсловияИПоложения");
	
	// АдресДоставки
	АдресДоставки = Новый Структура;
	АдресДоставки.Вставить("Представление",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "deliveryAddress.name",, "Строка"));
	АдресДоставки.Вставить("Код",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "deliveryAddress.code"));
	АдресДоставки.Вставить("КодСтраны",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "deliveryAddress.countryCode"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, АдресДоставки, "АдресДоставки");
	
	// ПрисоединенныеФайлы
	ДанныеФайлов = Новый ТаблицаЗначений;
	ДанныеФайлов.Колонки.Добавить("ИмяФайла");
	ДанныеФайлов.Колонки.Добавить("РасширениеФайла");
	ДанныеФайлов.Колонки.Добавить("Размер");
	ДанныеФайлов.Колонки.Добавить("ДвоичныеДанные");
	
	НомерВложения = 1;
	
	Для Каждого ДанныеФайла Из ДанныеЭлектронногоДокумента.attachedFiles Цикл
		
		ОписаниеФайла                 = ДанныеФайлов.Добавить();
		ОписаниеФайла.ИмяФайла        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileName");
		ОписаниеФайла.РасширениеФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileExtension");
		ОписаниеФайла.Размер          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileSize");
		ОписаниеФайла.ДвоичныеДанные  = Вложения[НомерВложения];
		
		НомерВложения = НомерВложения + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, ДанныеФайлов, "ПрисоединенныеФайлы");
	
	РезультатЧтения.ЗначениеРеквизита = ДанныеДокумента;
	
КонецПроцедуры

Процедура ПрочитатьКоммерческоеПредложение(Знач ДанныеЭлектронногоДокумента, Вложения, ВложенияHTML, РезультатЧтения) Экспорт
		
	РезультатЧтения.ВидЭД = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение;
	
	ИдентификаторДокумента = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "id");
	НомерДокумента         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "number");
	ДатаДокумента          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "date");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"ИдентификаторДокумента", ИдентификаторДокумента);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Номер", НомерДокумента);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Дата", ДатаДокумента);
	
	ДанныеДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.КоммерческоеПредложение");
	
	ИдентификаторЗапроса = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "requestId");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента,
		"ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Запрос = Неопределено;
	МенеджерЗапросКоммерческогоПредложенияОтКлиента = Неопределено;
	Если ЗначениеЗаполнено(ИдентификаторЗапроса)
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения")
		И РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		Запрос = МодульПодсистемы.ЗапросКоммерческихПредложенийПоИдентификаторуСервиса(ИдентификаторЗапроса);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "Запрос", Запрос);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗапроса)
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента")
		И РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда
		
		МенеджерЗапросКоммерческогоПредложенияОтКлиента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ЗапросКоммерческогоПредложенияОтКлиента");
		Запрос = МенеджерЗапросКоммерческогоПредложенияОтКлиента.ЗапросКоммерческихПредложенийОтКлиентаПоИдентификаторуСервиса(ИдентификаторЗапроса);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента,
		"Дата", ДатаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента,
		"Номер", НомерДокумента);
	
	ЭтоУСН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.simplifiedTaxation");
	ЭтоУСН = ?(ЗначениеЗаполнено(ЭтоУСН), ЭтоУСН, Ложь);
	
	// Организация (отправитель)
	ДанныеУчастника = ДанныеЭлектронногоДокумента.supplier;
	Организация = ИнформацияОбУчастникеКоммерческихПредложенийПоДаннымЭлектронногоДокумента(ДанныеУчастника);
	
	Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда 
		Отправитель = ЭлектронноеВзаимодействие.НайтиСсылку("Контрагенты", "",
			РеквизитыУчастникаКоммерческихПредложений(Организация));
	ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда 		
		Отправитель = ЭлектронноеВзаимодействие.НайтиСсылку("Организации", "",
			РеквизитыУчастникаКоммерческихПредложений(Организация));
	КонецЕсли;
	
	Организация.Вставить("Ссылка", Отправитель);
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, Организация, "Организация");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Организация", Организация.Наименование);
	
	// Контактное лицо
	КонтактноеЛицо = Новый Структура;
	КонтактноеЛицо.Вставить("ФИО", ДанныеЭлектронногоДокумента.Contacts.contactName);
	КонтактноеЛицо.Вставить("ЭлектроннаяПочта", ДанныеЭлектронногоДокумента.Contacts.email);
	КонтактноеЛицо.Вставить("Телефон", ДанныеЭлектронногоДокумента.Contacts.phone);
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, КонтактноеЛицо, "КонтактноеЛицо");
	
	// Получатель
	ДанныеУчастника = ДанныеЭлектронногоДокумента.customer;
	Получатель = ИнформацияОбУчастникеКоммерческихПредложенийПоДаннымЭлектронногоДокумента(ДанныеУчастника);
	
	Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда 
		ОрганизацияПолучатель = ЭлектронноеВзаимодействие.НайтиСсылку("Организации", "",
			РеквизитыУчастникаКоммерческихПредложений(Получатель));
	ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда 		
		ОрганизацияПолучатель = ЭлектронноеВзаимодействие.НайтиСсылку("Контрагенты", "",
			РеквизитыУчастникаКоммерческихПредложений(Получатель));
	КонецЕсли;
	
	Получатель.Вставить("Ссылка", ОрганизацияПолучатель);
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, Получатель, "Получатель");
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"Контрагент", Получатель.Наименование);
	
	// Владелец номенклатуры
	Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда 
		ВладелецНоменклатуры = Отправитель;
	ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий Тогда 		
		ВладелецНоменклатуры = ОрганизацияПолучатель;	
	КонецЕсли;
	
	Если ВладелецНоменклатуры <> Неопределено  Тогда
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(ВладелецНоменклатуры, ВладелецНоменклатуры);
	КонецЕсли;	
	
	// Товары
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("ИдентификаторСтроки");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("Комментарий");
	Товары.Колонки.Добавить("ЛогистическаяУпаковка");
	Товары.Колонки.Добавить("СрокПоставки");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаСНДС");
	Товары.Колонки.Добавить("СуммаБезНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("ПроцентСкидки");
	Товары.Колонки.Добавить("СуммаСкидки");
	Товары.Колонки.Добавить("Товар");
	
	РеквизитыТовара = Новый ТаблицаЗначений;
	РеквизитыТовара.Колонки.Добавить("ИмяРеквизита");
	РеквизитыТовара.Колонки.Добавить("ЗначениеРеквизита");
	
	УказанСрокПоставки = Ложь;
	ИспользуютсяСкидки = Ложь;
	СуммаДокумента     = 0;
	
	Для Каждого ДанныеТовара Из ДанныеЭлектронногоДокумента.products Цикл
		
		ТоварнаяПозиция                     = Товары.Добавить();
		ТоварнаяПозиция.ИдентификаторСтроки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "refCommerceOfferRequest.externalCode");
		ТоварнаяПозиция.Комментарий         = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "comment");
		ТоварнаяПозиция.Количество          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "count");
		
		ЛогистическаяУпаковка = Новый Структура;
		ЛогистическаяУпаковка.Вставить("Описание",    РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "packaging.description"));
		ЛогистическаяУпаковка.Вставить("Числитель",   РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "packaging.unitsNumerator"));
		ЛогистическаяУпаковка.Вставить("Знаменатель", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "packaging.unitsDenominator"));
		ТоварнаяПозиция.ЛогистическаяУпаковка = ЛогистическаяУпаковка;
		
		ДатаДоставкиНаДату = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "deliveryDate");
		ДатаДоставкиВДнях  = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "maxDeliveryDaysAfterOrder");
		
		Если ЗначениеЗаполнено(ДатаДоставкиНаДату) Тогда
			ТоварнаяПозиция.СрокПоставки = Новый Структура("НаДату", ДатаДоставкиНаДату);
		ИначеЕсли ЗначениеЗаполнено(ДатаДоставкиВДнях) Тогда
			ТоварнаяПозиция.СрокПоставки = Новый Структура("ВДнях",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "maxDeliveryDaysAfterOrder"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварнаяПозиция.СрокПоставки) Тогда
			УказанСрокПоставки = Истина;
		КонецЕсли;
		
		ТоварнаяПозиция.Цена          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.price");
		ПредставлениеСтавкиНДС        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.vat",, "Строка");
		ТоварнаяПозиция.СтавкаНДС     = СтавкаНДСИзФорматаBNCommerceOffering(ПредставлениеСтавкиНДС, ЭтоУСН);
		ТоварнаяПозиция.СуммаСНДС     = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.amountIncVat");
		ТоварнаяПозиция.СуммаБезНДС   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.amountExcVat");
		ТоварнаяПозиция.СуммаНДС      = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.VatAmount");
		ТоварнаяПозиция.ПроцентСкидки = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.discountPercent");
		ТоварнаяПозиция.СуммаСкидки   = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "priceAndTaxes.discountTotal");
		
		СуммаДокумента = СуммаДокумента + ТоварнаяПозиция.СуммаСНДС;
		
		Если ЗначениеЗаполнено(ТоварнаяПозиция.ПроцентСкидки)
			Или ЗначениеЗаполнено(ТоварнаяПозиция.СуммаСкидки) Тогда
			ИспользуютсяСкидки = Истина;
		КонецЕсли;
		
		ТоварнаяПозиция.Товар = Новый Структура;
		
		ИдентификаторДляСопоставления = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.matchId");
		ТоварнаяПозиция.Товар.Вставить("ИдентификаторДляСопоставления", ИдентификаторДляСопоставления);
		
		Если РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда  
			
			ОписаниеНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(ВладелецНоменклатуры,
				ИдентификаторДляСопоставления);
			
			Отбор = Новый Структура;
			Отбор.Вставить("НоменклатураКонтрагента", ОписаниеНоменклатуры);
			Отбор.Вставить("Владелец",                ВладелецНоменклатуры);
			СопоставленнаяНоменклатура = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
			
			НайденаСопоставленнаяНоменклатура = СопоставленнаяНоменклатура.Количество();
			
			Если НайденаСопоставленнаяНоменклатура Тогда
				ТоварнаяПозиция.Товар.Вставить("НоменклатураСсылка",
					СопоставленнаяНоменклатура[0].НоменклатураИБ.Номенклатура);
				ТоварнаяПозиция.Товар.Вставить("ХарактеристикаСсылка",
					СопоставленнаяНоменклатура[0].НоменклатураИБ.Характеристика);
				ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияСсылка",
					СопоставленнаяНоменклатура[0].НоменклатураИБ.Упаковка);
			КонецЕсли;
			
		ИначеЕсли РезультатЧтения.НаправлениеЭД = Перечисления.НаправленияЭДО.Исходящий 
				И ЗначениеЗаполнено(Запрос)
				И МенеджерЗапросКоммерческогоПредложенияОтКлиента <> Неопределено
				И ЗначениеЗаполнено(ТоварнаяПозиция.ИдентификаторСтроки) Тогда	
				
			ДанныеСтрокиЗапроса = 
				МенеджерЗапросКоммерческогоПредложенияОтКлиента.ДанныеСтрокиЗапросаПоИдентификаторуСтрокиЗапроса(
					Запрос, ТоварнаяПозиция.ИдентификаторСтроки);	
					
			ДанныеСтрокиЗапроса.ИдентификаторДляСопоставленияНоменклатуры = 
				?(ЗначениеЗаполнено(ДанныеСтрокиЗапроса.ИдентификаторДляСопоставленияНоменклатуры),
					ДанныеСтрокиЗапроса.ИдентификаторДляСопоставленияНоменклатуры,
					ДанныеСтрокиЗапроса.НоменклатураВСервисеИдентификатор);
					
			Если ДанныеСтрокиЗапроса <> Неопределено 
				И ЗначениеЗаполнено(ДанныеСтрокиЗапроса.ИдентификаторДляСопоставленияНоменклатуры) Тогда
				
				ОписаниеНоменклатурыДляДерева = ФорматыЭДО.ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(
					Новый Структура("Идентификатор", ИдентификаторДляСопоставления));
				
				ОписаниеНоменклатурыИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
					ОписаниеНоменклатурыДляДерева.НоменклатураИБ,
					ОписаниеНоменклатурыДляДерева.ХарактеристикаИБ,
					ОписаниеНоменклатурыДляДерева.УпаковкаИБ);
				
				ОписаниеНоменклатурыКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(ВладелецНоменклатуры,
						ДанныеСтрокиЗапроса.ИдентификаторДляСопоставленияНоменклатуры);
				ОписаниеНоменклатурыКонтрагента.Наименование =                       ДанныеСтрокиЗапроса.НоменклатураПокупателяПредставление;
				ОписаниеНоменклатурыКонтрагента.ИдентификаторНоменклатурыСервиса =   ДанныеСтрокиЗапроса.НоменклатураВСервисеИдентификатор;
				ОписаниеНоменклатурыКонтрагента.ИдентификаторХарактеристикиСервиса = ДанныеСтрокиЗапроса.ХарактеристикаВСервисеИдентификатор;
				ОписаниеНоменклатурыКонтрагента.ЕдиницаИзмерения =                   ДанныеСтрокиЗапроса.ЕдиницаИзмерения;
				
				Отбор = Новый Структура;
				Отбор.Вставить("НоменклатураКонтрагента", ОписаниеНоменклатурыКонтрагента);
				Отбор.Вставить("Владелец",                ВладелецНоменклатуры);
				СопоставленнаяНоменклатура = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
				
				НайденаСопоставленнаяНоменклатура = СопоставленнаяНоменклатура.Количество();
				
				Если Не НайденаСопоставленнаяНоменклатура Тогда //Зарегистрируем сопоставление
					
					СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(ОписаниеНоменклатурыКонтрагента, ОписаниеНоменклатурыИБ);

				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;		
		
		ТоварнаяПозиция.Товар.Вставить("НоменклатураНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.productName"));
		ТоварнаяПозиция.Товар.Вставить("ХарактеристикаНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.characteristicName"));
		ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияКодОКЕИ",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.baseUnitOkeiCode"));
		ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияНаименование",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.baseUnitName"));
		
		ВариантОписания = Новый Структура;
		ДанныеСервиса1СНоменклатура = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.productSpecification");
		Если ЗначениеЗаполнено(ДанныеСервиса1СНоменклатура) Тогда
			
			Сервис1СНоменклатура = Новый Структура;
			Сервис1СНоменклатура.Вставить("ИдентификаторНоменклатуры",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.ref1cNomenclature.productSpecification.id"));
			Сервис1СНоменклатура.Вставить("ИдентификаторХарактеристики",
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара,
			"product.ref1cNomenclature.productSpecification.characteristicId.productSpecification.id"));
			
			ВариантОписания.Вставить("Сервис1СНоменклатура", Сервис1СНоменклатура);
			
			Если Не НайденаСопоставленнаяНоменклатура
				И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения")
				И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
				
				МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
				
				СопоставленнаяНоменклатура = МодульПодсистемы.НоменклатураИХарактеристикиПоИдентификаторам(Сервис1СНоменклатура);
				
				Если СопоставленнаяНоменклатура.Количество() Тогда
					ТоварнаяПозиция.Товар.Вставить("НоменклатураСсылка",
						СопоставленнаяНоменклатура[0].Номенклатура);
					ТоварнаяПозиция.Товар.Вставить("ХарактеристикаСсылка",
						СопоставленнаяНоменклатура[0].Характеристика);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			УчетныеДанные = Новый Структура;
			
			УчетныеДанные.Вставить("Описание", 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.productDescription"));
			УчетныеДанные.Вставить("АртикулПоставщика",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.vendorCode"));
			УчетныеДанные.Вставить("АртикулПроизводителя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.partNumber"));
			УчетныеДанные.Вставить("Производитель",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.manufacturer.name"));
			УчетныеДанные.Вставить("ТорговаяМарка",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.manufacturer.tradeMark"));
			
			ДанныеШтрихкодов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.barcodes");
			Штрихкоды = Новый Массив;
			
			Если ЗначениеЗаполнено(ДанныеШтрихкодов) Тогда
				Для Каждого ЗначениеШтрихкода Из ДанныеШтрихкодов Цикл
					Штрихкоды.Добавить(ЗначениеШтрихкода);
				КонецЦикла;
				УчетныеДанные.Вставить("Штрихкоды", Штрихкоды);
			КонецЕсли;
			
			РеквизитыТовара.Очистить();
			ДанныеРеквизитов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеТовара, "product.supplierNomenclature.requisiteValues");
			
			Если ЗначениеЗаполнено(ДанныеРеквизитов) Тогда
				Для Каждого ОписаниеРеквизита Из ДанныеРеквизитов Цикл
					РеквизитТовара                   = РеквизитыТовара.Добавить();
					РеквизитТовара.ИмяРеквизита      = ОписаниеРеквизита.name;
					РеквизитТовара.ЗначениеРеквизита = ОписаниеРеквизита.value;
				КонецЦикла;
				УчетныеДанные.Вставить("РеквизитыТовара", РеквизитыТовара);
			КонецЕсли;
			
			ВариантОписания.Вставить("УчетныеДанные", УчетныеДанные);
			
		КонецЕсли;
		
		ТоварнаяПозиция.Товар.Вставить("ВариантОписания", ВариантОписания);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, Товары, "Товары");
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"УказанСрокПоставки", УказанСрокПоставки);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"ИспользуютсяСкидки", ИспользуютсяСкидки);
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(РезультатЧтения,
		"СуммаДокумента", СуммаДокумента);
	
	// УсловияИПоложения
	УсловияИПоложения = Новый Структура;
	УсловияИПоложения.Вставить("УсловияДоставки",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.termsOfDelivery",, "Строка"));
	УсловияИПоложения.Вставить("УсловияОплаты",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.termsOfPayment",, "Строка"));
	УсловияИПоложения.Вставить("УсловияПрочие",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.otherConditions",, "Строка"));
	УсловияИПоложения.Вставить("ПриемПередачаНаКомиссию",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.commissionTransaction"));
	УсловияИПоложения.Вставить("ВсеИлиНичего",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.allOrNothing"));
	УсловияИПоложения.Вставить("ЦенаВключаетНДС",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.priceIncludesVat"));
	УсловияИПоложения.Вставить("ВалютаКод",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.currencyCode"));
	УсловияИПоложения.Вставить("ВалютаНаименование",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.currencyName"));
	УсловияИПоложения.Вставить("УСН", ЭтоУСН);
	УсловияИПоложения.Вставить("СрокДействия",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "TermsAndConditions.dateOfferActualTo"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, УсловияИПоложения, "УсловияИПоложения");
	
	// ПрисоединенныеФайлы
	ДанныеФайлов = Новый ТаблицаЗначений;
	ДанныеФайлов.Колонки.Добавить("ИмяФайла");
	ДанныеФайлов.Колонки.Добавить("РасширениеФайла");
	ДанныеФайлов.Колонки.Добавить("Размер");
	ДанныеФайлов.Колонки.Добавить("ДвоичныеДанные");
	
	НомерВложения = 1;
	
	Для Каждого ДанныеФайла Из ДанныеЭлектронногоДокумента.attachedFiles Цикл
		
		ОписаниеФайла                 = ДанныеФайлов.Добавить();
		ОписаниеФайла.ИмяФайла        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileName");
		ОписаниеФайла.РасширениеФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileExtension");
		ОписаниеФайла.Размер          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileSize");
		ОписаниеФайла.ДвоичныеДанные  = Вложения[НомерВложения];
		
		НомерВложения = НомерВложения + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, ДанныеФайлов, "ПрисоединенныеФайлы");
	
	// ДополнительнаяИнформация
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("ПростойТекст",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "additionalInformation.text",, "Строка"));
	
	ФорматированныйТекст = Новый Структура;
	ФорматированныйТекст.Вставить("ТекстHTML",
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "additionalInformation.htmlText",, "Строка"));
	
	ДанныеФайлов.Очистить();
	ДанныеФайлов.Колонки.Добавить("ContentID");
	
	HtmlAttachedFiles = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеЭлектронногоДокумента, "additionalInformation.htmlAttachedFiles");
	
	Если ЗначениеЗаполнено(HtmlAttachedFiles) Тогда
		
		НомерВложения = 1;
		
		Для Каждого ДанныеФайла Из ДанныеЭлектронногоДокумента.additionalInformation.htmlAttachedFiles Цикл
			
			ОписаниеФайла                 = ДанныеФайлов.Добавить();
			ОписаниеФайла.ContentID       = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "contentID");
			ОписаниеФайла.ИмяФайла        = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileName");
			ОписаниеФайла.РасширениеФайла = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileExtension");
			ОписаниеФайла.Размер          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "fileSize");
			ОписаниеФайла.ДвоичныеДанные  = ВложенияHTML[НомерВложения];
			
			НомерВложения = НомерВложения + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФорматированныйТекст.Вставить("ПрисоединенныеФайлы", ДанныеФайлов);
	
	ДополнительнаяИнформация.Вставить("ФорматированныйТекст", ФорматированныйТекст);
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, ДополнительнаяИнформация,
		"ДополнительнаяИнформация");
	
	РезультатЧтения.ЗначениеРеквизита = ДанныеДокумента;
	
КонецПроцедуры

Функция ДанныеФайлаФорматаBNCommerceOffering(Знач Файл) Экспорт
	
	ЧтениеФайла = Новый ЧтениеТекста(Файл.ОткрытьПотокДляЧтения(), "Windows-1251");
	ФрагментФайла = ЧтениеФайла.ПрочитатьСтроку();
	
	ДанныеФайлаБезВложений = "";
	Вложения               = Новый Соответствие;
	ВложенияHTML           = Новый Соответствие;
	НомерВложения          = 0;
	НомерВложенияHTML      = 0;
	
	Пока ФрагментФайла <> Неопределено Цикл
		
		ПозицияТегаВложения = СтрНайти(ФрагментФайла, "fileData");
		
		Если ПозицияТегаВложения Тогда
			
			// Обработка вложения.
			ДанныеВложения = Прав(ФрагментФайла, СтрДлина(ФрагментФайла) - ПозицияТегаВложения);
			
			ПозицияНачалаДанныхВложения = СтрНайти(ДанныеВложения, """");
			
			ДанныеВложения = Прав(ДанныеВложения, СтрДлина(ДанныеВложения) - ПозицияНачалаДанныхВложения);
			
			ПозицияОкончанияДанныхВложения = СтрНайти(ДанныеВложения, """");
			
			ДанныеВложения = Лев(ДанныеВложения, ПозицияОкончанияДанныхВложения - 1);
			
			Если Не СтрНайти(ФрагментФайла, "htmlAttachedFiles") Тогда
				НомерВложения = НомерВложения + 1;
				Вложения.Вставить(НомерВложения, ПолучитьДвоичныеДанныеИзBase64Строки(ДанныеВложения));
			Иначе
				НомерВложенияHTML = НомерВложенияHTML + 1;
				ВложенияHTML.Вставить(НомерВложенияHTML, ПолучитьДвоичныеДанныеИзBase64Строки(ДанныеВложения));
			КонецЕсли;
			
			// Корректировка фрагмента файла.
			ФрагментФайла = СтрЗаменить(ФрагментФайла, ДанныеВложения, "");
			
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеФайлаБезВложений) Тогда
			
			ДанныеФайлаБезВложений = ФрагментФайла;
			
		Иначе
			
			Фрагменты = Новый Массив;
			Фрагменты.Добавить(ДанныеФайлаБезВложений);
			Фрагменты.Добавить(ФрагментФайла);
			
			ДанныеФайлаБезВложений = СтрСоединить(Фрагменты, Символы.ПС);
			
		КонецЕсли;
		
		ФрагментФайла = ЧтениеФайла.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ДанныеФайлаБезВложений = ЗаменитьПереносСтрокиНаСлужебныйСимволВАтрибутахЭлемента(ДанныеФайлаБезВложений,
		"TermsAndConditions", "termsOfPayment,termsOfDelivery,otherConditions");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеФайлаБезВложений);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ДанныеДокумента",         ФабрикаXDTO.ПрочитатьXML(ЧтениеXML));
	ДанныеФайла.Вставить("ПрисоединенныеФайлы",     Вложения);
	ДанныеФайла.Вставить("ПрисоединенныеФайлыHTML", ВложенияHTML);
	
	Возврат ДанныеФайла;
	
КонецФункции

Процедура ЗаполнитьДанныеНоменклатурыДляСопоставленияКоммерческихПредложений(Элемент, НовЗапись) Экспорт

	ИдентификаторДляСопоставления = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.matchId", , "Строка");
	ИдентификаторНоменклатурыСервиса = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент,
		"product.ref1cNomenclature.productSpecification.id", , "Строка");
	ИдентификаторХарактеристикиСервиса = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент,
		"product.ref1cNomenclature.productSpecification.characteristicId", , "Строка");
	НаименованиеНоменклатуры = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.productName", , "Строка");
	НаименованиеХарактеристики = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.characteristicName", , "Строка");
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.supplierNomenclature") <> Неопределено Тогда
		Артикул = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.supplierNomenclature.partNumber", , "Строка");
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.customerNomenclature") <> Неопределено Тогда
		Артикул = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.customerNomenclature.partNumber", , "Строка");
	КонецЕсли;
	
	Идентификатор = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИдентификаторДляСопоставления) Тогда
		
		ФрагментыИдентификатора = Новый Массив;
		
		Если ЗначениеЗаполнено(ИдентификаторНоменклатурыСервиса) Тогда
			ФрагментыИдентификатора.Добавить(ИдентификаторНоменклатурыСервиса);
			ФрагментыИдентификатора.Добавить(ИдентификаторХарактеристикиСервиса);
		Иначе
			ФрагментыИдентификатора.Добавить(НаименованиеНоменклатуры);
			ФрагментыИдентификатора.Добавить(НаименованиеХарактеристики);
			ФрагментыИдентификатора.Добавить(Артикул);
		КонецЕсли;
		
		Идентификатор = СтрСоединить(ФрагментыИдентификатора, "#");
	Иначе
		Идентификатор = ИдентификаторДляСопоставления;
	КонецЕсли;
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("Идентификатор",       Идентификатор);
	Сопоставление.Вставить("Наименование",        НаименованиеНоменклатуры);
	Сопоставление.Вставить("Характеристика",      НаименованиеХарактеристики);
	Сопоставление.Вставить("ЕдиницаИзмерения",    РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.baseUnitName"));
	Сопоставление.Вставить("ЕдиницаИзмеренияКод", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.baseUnitOkeiCode"));
	Если ЗначениеЗаполнено(Артикул) Тогда 
		Сопоставление.Вставить("Артикул",         Артикул);
	КонецЕсли;
	
	ПредставлениеСтавкиНДС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "priceAndTaxes.vat", , "Строка");
	Сопоставление.Вставить("СтавкаНДС", СтавкаНДСИзФорматаBNCommerceOffering(ПредставлениеСтавкиНДС));
	
	Сопоставление.Вставить("ИдентификаторНоменклатурыСервиса", ИдентификаторНоменклатурыСервиса);
	Сопоставление.Вставить("ИдентификаторХарактеристикиСервиса", ИдентификаторХарактеристикиСервиса);
	
	Штрихкоды = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Элемент, "product.customerNomenclature.barcodes");
	
	Если ЗначениеЗаполнено(Штрихкоды) Тогда
		Сопоставление.Вставить("ШтрихкодыНоменклатуры", Штрихкоды[0]);
	КонецЕсли;
	
	НовЗапись.ИД = Сопоставление.Идентификатор;
	НовЗапись.Сопоставление = Сопоставление;
	
КонецПроцедуры

#Область БизнесСеть_Служебные

// Возвращает информацию об участнике коммерческих предложений по данным электронного документа в соответствии с
// Макетом ЗапросКоммерческихПредложений Обработки ОбменСКонтрагентами (См. XDTO-пакет BNCommerceOffering).
//
// Параметры:
//  ДанныеУчастника - ОбъектXDTO - Данные участника в данных электронного документа.
// 
// Возвращаемое значение:
//  Структура - Информация, соответствующая структуре, описанной в Макете.
//
Функция ИнформацияОбУчастникеКоммерческихПредложенийПоДаннымЭлектронногоДокумента(ДанныеУчастника)
	
	Организация = Новый Структура;
	Организация.Вставить("Наименование", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "name"));
	Организация.Вставить("Вид", Новый Структура);
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "individualEntrepreneur") <> Неопределено Тогда
		
		ИндивидуальныйПредприниматель = Новый Структура;
		ИндивидуальныйПредприниматель.Вставить("ИНН",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "individualEntrepreneur.inn"));
		ИндивидуальныйПредприниматель.Вставить("Имя",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "individualEntrepreneur.name"));
		ИндивидуальныйПредприниматель.Вставить("Фамилия",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "individualEntrepreneur.surname"));
		ИндивидуальныйПредприниматель.Вставить("Отчество",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "individualEntrepreneur.patronymic"));
		
		Организация.Вид.Вставить("ИндивидуальныйПредприниматель", ИндивидуальныйПредприниматель);
		
	Иначе
		
		ЮридическоеЛицо = Новый Структура;
		ЮридическоеЛицо.Вставить("ИНН", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "entity.inn"));
		ЮридическоеЛицо.Вставить("КПП",РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "entity.kpp"));
		
		Организация.Вид.Вставить("ЮридическоеЛицо", ЮридическоеЛицо);
		
	КонецЕсли;
	
	ЮридическийАдрес = Новый Структура;
	ЮридическийАдрес.Вставить("Представление", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "address.name"));
	ЮридическийАдрес.Вставить("Код", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеУчастника, "address.code"));
	
	Организация.Вставить("ЮридическийАдрес", ЮридическийАдрес);
	
	Возврат Организация;
	
КонецФункции

// Возвращает реквизиты участника коммерческих предложений по данным электронного документа в соответствии с
// Макетом КоммерческоеПредложение Обработки ОбменСКонтрагентами (См. XDTO-пакет BNCommerceOffering).
//
// Параметры:
//  ДанныеУчастника - Структура - Данные участника в данных электронного документа.
//                                См. метод ИнформацияОбУчастникеКоммерческихПредложенийПоДаннымЭлектронногоДокумента.
//
// Возвращаемое значение:
//  Структура - Реквизиты организации или контрагента. Ключи:
//              * ИНН      - Строка - ИНН участника.
//              * КПП      - Строка - КПП юридического лица. Отсутствует для индивидуального предпринимателя.
//              * Имя      - Строка - Имя индивидуального предпринимателя. Отсутствует для юридического лица.
//              * Фамилия  - Строка - Фамилия индивидуального предпринимателя. Отсутствует для юридического лица.
//              * Отчество - Строка - Отчество индивидуального предпринимателя. Отсутствует для юридического лица.
//
Функция РеквизитыУчастникаКоммерческихПредложений(ДанныеУчастника)
	
	РеквизитыУчастника = Неопределено;
	
	ДанныеУчастника.Вид.Свойство("ЮридическоеЛицо", РеквизитыУчастника);
	
	Если РеквизитыУчастника = Неопределено Тогда
		ДанныеУчастника.Вид.Свойство("ИндивидуальныйПредприниматель", РеквизитыУчастника);
	КонецЕсли;
	
	Возврат РеквизитыУчастника;
	
КонецФункции

Функция СтавкаНДСИзФорматаBNCommerceOffering(Знач ЗначениеСтавки, Знач ЭтоУСН = Ложь)
	
	ПредставлениеСтавкиНДС = Неопределено;
	
	Если ЭтоУСН Или ЗначениеСтавки = "VAT_Without" Тогда
		ПредставлениеСтавкиНДС = "без НДС";
	ИначеЕсли ЗначениеСтавки = "VAT_0" Тогда
		ПредставлениеСтавкиНДС = "0";
	ИначеЕсли ЗначениеСтавки = "VAT_10" Тогда
		ПредставлениеСтавкиНДС = "10";
	ИначеЕсли ЗначениеСтавки = "VAT_18" Тогда
		ПредставлениеСтавкиНДС = "18";
	ИначеЕсли ЗначениеСтавки = "VAT_20" Тогда
		ПредставлениеСтавкиНДС = "20";
	КонецЕсли;
	
	СтавкаНДС = Неопределено;
	
	Если ЗначениеЗаполнено(ПредставлениеСтавкиНДС) Тогда
		СтавкаНДС = ИнтеграцияЭДО.СтавкаНДСИзСоответствия(ПредставлениеСтавкиНДС);
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

// Возвращает строку, в которой для заданных атрибутов элемента символ переноса строки заменен 
//  на его десятичное представление в стандарте ISO 8859-1.
//
// Параметры:
//  ИсходнаяСтрока - Строка - XML документ, в котором выполняется поиск заданного элемента и замена
//    соответствующего символа в значении его атрибутов.
//  ИмяЭлемента - Строка - имя элемента, в котором будет выполняться обработка значения заданного атрибута.
//  ИменаАтрибутов - Строка - имена атрибутов элемента, в значении которых необходимо заменить символ переноса строки.
//    Перечисляются через запятую без пробела.
//
// Возвращаемое значение:
//  Строка - результат преобразования исходной строки.
//
Функция ЗаменитьПереносСтрокиНаСлужебныйСимволВАтрибутахЭлемента(Знач ИсходнаяСтрока, Знач ИмяЭлемента,
	Знач ИменаАтрибутов)
	
	ОбозначениеПереносаСтрокиXML = "&#10;";
	
	Атрибуты = СтрРазделить(ИменаАтрибутов, ",", Ложь);
	Если Атрибуты.Количество() = 0 Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	НачалоЭлемента = СтрНайти(ИсходнаяСтрока, ИмяЭлемента, НаправлениеПоиска.СНачала);
	Если НачалоЭлемента = 0 Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	КонецЭлемента  = СтрНайти(ИсходнаяСтрока, "/>",НаправлениеПоиска.СНачала, НачалоЭлемента, 1);
	Если КонецЭлемента = 0 Или НачалоЭлемента >= КонецЭлемента Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	Элемент = Сред(ИсходнаяСтрока, НачалоЭлемента, КонецЭлемента - НачалоЭлемента);
	
	Для Каждого ИмяАтрибута Из Атрибуты Цикл
		НачалоАтрибута = СтрНайти(Элемент, ИмяАтрибута, НаправлениеПоиска.СНачала);
		Если НачалоАтрибута = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КонецАтрибута  = СтрНайти(Элемент, """",НаправлениеПоиска.СНачала, НачалоАтрибута, 2);
		Если КонецАтрибута = 0 Или НачалоАтрибута >= КонецАтрибута Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеАтрибута      = Сред(Элемент, НачалоАтрибута, КонецАтрибута - НачалоАтрибута);
		НовоеЗначениеАтрибута = СтрЗаменить(ЗначениеАтрибута, Символы.ПС, ОбозначениеПереносаСтрокиXML);
		
		ИсходнаяСтрока  = СтрЗаменить(ИсходнаяСтрока, ЗначениеАтрибута, НовоеЗначениеАтрибута);
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

#КонецОбласти


#КонецОбласти


#КонецОбласти