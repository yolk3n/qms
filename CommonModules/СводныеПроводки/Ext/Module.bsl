
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает сводные данные проводок.
//
// Параметры:
//  НастройкаОтражения  - СправочникСсылка.НастройкиОтраженияВБухгалтерскомУчете - настройка, по которой будут формироваться проводки.
//  Организация         - СправочникСсылка.Организации - организация по которой будут получены сводные данные проводок.
//  Дата                - Дата - период получения сводных данных проводок.
//  ДополнительныйОтбор - ОтборКомпоновкиДанных - дополнительный отбор получения сводных данных проводок.
//
// Возвращаемое значение:
//  Проводки - ТаблицаЗначений - таблица сводных данных проводок.
//
Функция ПолучитьСводныеДанныеПроводок(НастройкаОтражения, Организация, Дата, ДополнительныйОтбор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Период = КонецМесяца(Дата);
	ШаблоныПроводок = НастройкиОтраженияХозяйственныхОпераций(НастройкаОтражения, Организация, Период);
	
	ТекстыЗапросовИсточниковДанных = ПолучитьТекстыЗапросовИсточниковДанных();
	
	ОсновнойОтбор = Новый ОтборКомпоновкиДанных;
	
	Отбор = ОсновнойОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОрганизацияДанныеКоторойОтражаютсяВУчете");
	Отбор.ПравоеЗначение = Организация;
	
	Отбор = ОсновнойОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	Отбор.ПравоеЗначение = Период;
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		СкопироватьОтборКомпоновкиДанных(ОсновнойОтбор, ДополнительныйОтбор);
	КонецЕсли;
	
	Проводки = Новый ТаблицаЗначений;
	
	Для Каждого Шаблон Из ШаблоныПроводок.Строки Цикл
		
		ТекстЗапроса = ТекстыЗапросовИсточниковДанных[Шаблон.ИсточникДанных];
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("ТекстЗапроса", ТекстЗапроса);
		ПараметрыДанных.Вставить("Организация" , Организация);
		ПараметрыДанных.Вставить("Период"      , Период);
		
		ПолучитьСводныеПроводкиРекурсивно(Шаблон, ПараметрыДанных, ОсновнойОтбор, Проводки);
		
	КонецЦикла;
	
	Возврат Проводки;
	
КонецФункции

// Копирует элементы коллекции отбора компоновки данных из источника в приемник.
//
// Параметры:
//  Приемник - ОтборКомпоновкиДанных - приемник копируемых настроек отбора.
//  Источник - ОтборКомпоновкиДанных - копируемые элементы отбора.
//
Процедура СкопироватьОтборКомпоновкиДанных(Приемник, Источник) Экспорт
	
	Для Каждого ЭлементОтбора Из Источник.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(Приемник, ЭлементОтбора);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(Приемник, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьСводныеПроводкиРекурсивно(ШаблонПроводки, ПараметрыДанных, ДополнительныйОтборГруппы, СводныеПроводки)
	
	Если ШаблонПроводки.ЭтоГруппаШаблонов Тогда
		
		ДополнительныйОтбор = Новый ОтборКомпоновкиДанных;
		Если ШаблонПроводки.УстановленДополнительныйОтбор Тогда
			СкопироватьОтборКомпоновкиДанных(ДополнительныйОтбор, ШаблонПроводки.ДополнительныйОтбор.Получить().Отбор);
		КонецЕсли;
		Если ДополнительныйОтборГруппы <> Неопределено Тогда
			СкопироватьОтборКомпоновкиДанных(ДополнительныйОтбор, ДополнительныйОтборГруппы);
		КонецЕсли;
		
		Если ШаблонПроводки.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение Тогда
			ГруппаВытесняющихОтборовНе = ДополнительныйОтбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаВытесняющихОтборовНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
			ГруппаВытесняющихОтборовИЛИ = ГруппаВытесняющихОтборовНе.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаВытесняющихОтборовИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		КонецЕсли;
		
		Для Каждого ШаблонГруппы Из ШаблонПроводки.Строки Цикл
			ПолучитьСводныеПроводкиРекурсивно(ШаблонГруппы, ПараметрыДанных, ДополнительныйОтбор, СводныеПроводки);
			Если ШаблонПроводки.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение Тогда
				Если ШаблонГруппы.УстановленДополнительныйОтбор Тогда
					ГруппаОтбора = ГруппаВытесняющихОтборовИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					СкопироватьОтборКомпоновкиДанных(ГруппаОтбора, ШаблонГруппы.ДополнительныйОтбор.Получить().Отбор);
				Иначе
					Прервать; // Если не установлен отбор, то для следующих шаблонов нет данных
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СводныеПроводкиШаблона = ПолучитьСводныеДанные(ШаблонПроводки, ПараметрыДанных, ДополнительныйОтборГруппы);
		СводныеПроводкиШаблона.Колонки.Добавить("ШаблонПроводки");
		СводныеПроводкиШаблона.ЗаполнитьЗначения(ШаблонПроводки, "ШаблонПроводки");
		ДобавитьДанныеВТаблицу(СводныеПроводки, СводныеПроводкиШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСводныеДанные(ШаблонПроводки, ПараметрыДанных, ДополнительныйОтборГруппы)
	
	ТекстЗапроса = ПараметрыДанных.ТекстЗапроса;
	
	Схема = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "Данные";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "Данные";
	НаборДанных.Имя = "Данные";
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	Если ШаблонПроводки.УстановленДополнительныйОтбор Тогда
		СкопироватьОтборКомпоновкиДанных(ДополнительныйОтбор.Отбор, ШаблонПроводки.ДополнительныйОтбор.Получить().Отбор);
	КонецЕсли;
	
	Если ДополнительныйОтборГруппы <> Неопределено Тогда
		СкопироватьОтборКомпоновкиДанных(ДополнительныйОтбор.Отбор, ДополнительныйОтборГруппы);
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДополнительныйОтбор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	Отбор.ПравоеЗначение = ШаблонПроводки.ХозяйственнаяОперация;
	
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	Группировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОрганизацияДанныеКоторойОтражаютсяВУчете");
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ИсточникФинансирования");
	
	ВыбранныеПоля = НастройкиКомпоновки.Выбор.Элементы;
	ПоляИтога = Схема.ПоляИтога;
	Для Каждого ПоказательШаблона Из ШаблонПроводки.ПоказателиШаблона Цикл
		Если ПоказательШаблона.Использование Тогда
			
			ПоказательСтрокой = ОбщегоНазначения.ИмяЗначенияПеречисления(ПоказательШаблона.Показатель);
			
			ОписаниеПоля = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных(ПоказательСтрокой);
			
			ПолеИтога = ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ПоказательСтрокой;
			ПолеИтога.Выражение = СтрШаблон("СУММА(%1)", ПоказательСтрокой);
			
		КонецЕсли;
	КонецЦикла;
	
	ВидыСубконто = Новый Массив;
	Для Индекс = 1 По 3 Цикл
		
		Субконто = ШаблонПроводки["СубконтоСчетДебета" + Индекс];
		Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) = Тип("Строка") Тогда
			Если ВидыСубконто.Найти(Субконто) = Неопределено Тогда
				ВидыСубконто.Добавить(Субконто);
			КонецЕсли;
		КонецЕсли;
		
		Субконто = ШаблонПроводки["СубконтоСчетКредита" + Индекс];
		Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) = Тип("Строка") Тогда
			Если ВидыСубконто.Найти(Субконто) = Неопределено Тогда
				ВидыСубконто.Добавить(Субконто);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидыСубконто.Количество() > 0 Тогда
		
		Для Каждого ВидСубконто Из ВидыСубконто Цикл
			ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ВидСубконто);
		КонецЦикла;
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	СводныеДанные = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	УточнитьДанныеПроводок(СводныеДанные, ШаблонПроводки, ПараметрыДанных);
	
	Возврат СводныеДанные;
	
КонецФункции

Процедура УточнитьДанныеПроводок(СводныеДанные, ШаблонПроводки, ПараметрыДанных)
	
	СводныеДанные.Колонки.Добавить("СчетДебета", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СводныеДанные.Колонки.Добавить("КоличествоДт", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СводныеДанные.Колонки.Добавить("СубконтоДт1");
	СводныеДанные.Колонки.Добавить("СубконтоДт2");
	СводныеДанные.Колонки.Добавить("СубконтоДт3");
	СводныеДанные.Колонки.Добавить("СчетКредита", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	СводныеДанные.Колонки.Добавить("КоличествоКт", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СводныеДанные.Колонки.Добавить("СубконтоКт1");
	СводныеДанные.Колонки.Добавить("СубконтоКт2");
	СводныеДанные.Колонки.Добавить("СубконтоКт3");
	СводныеДанные.Колонки.Добавить("БалансоваяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Если ПолучитьФункциональнуюОпцию("БюджетноеУчреждение") Тогда
		СводныеДанные.Колонки.Добавить("ИФО"     , ОбщегоНазначения.ОписаниеТипаСтрока(0));
		СводныеДанные.Колонки.Добавить("КФО"     , ОбщегоНазначения.ОписаниеТипаЧисло(1));
		СводныеДанные.Колонки.Добавить("КПСДт"   , ОбщегоНазначения.ОписаниеТипаСтрока(0));
		СводныеДанные.Колонки.Добавить("ВидКПСДт", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКПС"));
		СводныеДанные.Колонки.Добавить("КЭКДт"   , ОбщегоНазначения.ОписаниеТипаСтрока(0));
		СводныеДанные.Колонки.Добавить("КПСКт"   , ОбщегоНазначения.ОписаниеТипаСтрока(0));
		СводныеДанные.Колонки.Добавить("ВидКПСКт", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКПС"));
		СводныеДанные.Колонки.Добавить("КЭККт"   , ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонПроводки.КоличествоДт) Тогда
		КоличествоДт = ОбщегоНазначения.ИмяЗначенияПеречисления(ШаблонПроводки.КоличествоДт);
	Иначе
		КоличествоДт = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонПроводки.КоличествоКт) Тогда
		КоличествоКт = ОбщегоНазначения.ИмяЗначенияПеречисления(ШаблонПроводки.КоличествоКт);
	Иначе
		КоличествоКт = "";
	КонецЕсли;
	
	Сумма = ОбщегоНазначения.ИмяЗначенияПеречисления(ШаблонПроводки.Сумма);
	
	ДатаСреза = НачалоГода(ПараметрыДанных.Период);
	Организация = ПараметрыДанных.Организация;
	
	Для Каждого Проводка Из СводныеДанные Цикл
		
		СчетаУчета = ОбменДаннымиБольничнаяАптека.ПолучитьСчетаУчетаОперацийБГУ(Организация, Проводка.ИсточникФинансирования, ДатаСреза);
		
		Проводка.СчетДебета = ЗначениеСчета(Проводка, ШаблонПроводки.СчетДебета, СчетаУчета);
		Если ЗначениеЗаполнено(КоличествоДт) Тогда
			Проводка.КоличествоДт = Проводка[КоличествоДт];
		КонецЕсли;
		
		СчетКредита = ЗначениеСчета(Проводка, ШаблонПроводки.СчетКредита, СчетаУчета);
		Проводка.СчетКредита = СчетКредита;
		Если ЗначениеЗаполнено(КоличествоКт) Тогда
			Проводка.КоличествоКт = Проводка[КоличествоКт];
		КонецЕсли;
		
		Проводка.БалансоваяСумма = ?(ШаблонПроводки.ИзменятьЗнакОперации, -Проводка[Сумма], Проводка[Сумма]);
		
		Для Сч = 1 По 3 Цикл
			Проводка["СубконтоДт" + Сч] = ЗначениеСубконто(Проводка, ШаблонПроводки, ШаблонПроводки["СубконтоСчетДебета" + Сч]);
			Проводка["СубконтоКт" + Сч] = ЗначениеСубконто(Проводка, ШаблонПроводки, ШаблонПроводки["СубконтоСчетКредита" + Сч]);
		КонецЦикла;
			
		Если ПолучитьФункциональнуюОпцию("БюджетноеУчреждение") Тогда
			УточнитьДанныеБюджетногоУчета(Проводка, ШаблонПроводки, СчетаУчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьДанныеБюджетногоУчета(Проводка, ШаблонПроводки, СчетаУчета)
	
	Если ЗначениеЗаполнено(ШаблонПроводки.ИсточникФинансовогоОбеспечения) Тогда
		Проводка.ИФО = ШаблонПроводки.ИсточникФинансовогоОбеспечения;
	Иначе
		Проводка.ИФО = СчетаУчета.ИсточникФинансовогоОбеспечения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонПроводки.КФО) Тогда
		Проводка.КФО = ШаблонПроводки.КФО;
	Иначе
		Проводка.КФО = СчетаУчета.КФО;
	КонецЕсли;
	
	КПССчетДебета = ШаблонПроводки.КПССчетДебета;
	Если ЗначениеЗаполнено(КПССчетДебета) Тогда
		Если ТипЗнч(КПССчетДебета) = Тип("Строка") Тогда
			Проводка.КПСДт    = КПССчетДебета;
			Проводка.ВидКПСДт = ШаблонПроводки.ВидКПССчетДебета;
		Иначе
			ИмяКПСДт = ОбщегоНазначения.ИмяЗначенияПеречисления(КПССчетДебета);
			Проводка.КПСДт    = СчетаУчета[ИмяКПСДт];
			Проводка.ВидКПСДт = СчетаУчета["Вид" + ИмяКПСДт];
		КонецЕсли;
	КонецЕсли;
	
	Проводка.КЭКДт = ШаблонПроводки.КЭКСчетДебета;
	
	КПССчетКредита = ШаблонПроводки.КПССчетКредита;
	Если ЗначениеЗаполнено(КПССчетКредита) Тогда
		Если ТипЗнч(КПССчетКредита) = Тип("Строка") Тогда
			Проводка.КПСКт    = КПССчетКредита;
			Проводка.ВидКПСКт = ШаблонПроводки.ВидКПССчетКредита;
		Иначе
			ИмяКПСКт = ОбщегоНазначения.ИмяЗначенияПеречисления(КПССчетКредита);
			Проводка.КПСКт    = СчетаУчета[ИмяКПСКт];
			Проводка.ВидКПСКт = СчетаУчета["Вид" + ИмяКПСКт];
		КонецЕсли;
	КонецЕсли;
	
	Проводка.КЭККт = ШаблонПроводки.КЭКСчетКредита;
	
КонецПроцедуры

Функция ЗначениеСубконто(Проводка, ШаблонПроводки, Субконто)
	
	Если Не ЗначениеЗаполнено(Субконто) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Субконто) = Тип("Строка") Тогда
		Попытка
			Значение = Проводка[Субконто];
		Исключение
			ШаблонОшибки = НСтр("ru = 'Не обнаружен показатель ""%1"" в таблице сводных данных проводок.
				|Необходимо проверить корректность шаблона сводных проводок ""%2""
				|по операции ""%3"".'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				Субконто,
				ШаблонПроводки.Наименование,
				ШаблонПроводки.ХозяйственнаяОперация);
		КонецПопытки;
	Иначе
		Значение = Субконто;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеСчета(Проводка, ОписаниеСчета, СчетаУчета)
	
	Если Не ЗначениеЗаполнено(ОписаниеСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеСчета) = Тип("Строка") Тогда
		Значение = ОписаниеСчета;
	ИначеЕсли ТипЗнч(ОписаниеСчета) = Тип("ПеречислениеСсылка.ЗначенияСчетаУчета") Тогда
		Если ОписаниеСчета = Перечисления.ЗначенияСчетаУчета.СчетУчетаНоменклатуры Тогда
			Значение = "СчетУчетаНоменклатуры";
		Иначе
			Значение = СчетаУчета[ОбщегоНазначения.ИмяЗначенияПеречисления(ОписаниеСчета)];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции


Функция НастройкиОтраженияХозяйственныхОпераций(НастройкаОтражения, Организация, Период)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка                          КАК Ссылка,
	|	ШаблоныПроводок.Наименование                    КАК Наименование,
	|	ШаблоныПроводок.ЭтоГруппаШаблонов               КАК ЭтоГруппаШаблонов,
	|	ШаблоныПроводок.Операция                        КАК Операция,
	|	Операции.ИсточникДанных                         КАК ИсточникДанных,
	|	Операции.ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	ШаблоныПроводок.ВариантСовместногоПрименения    КАК ВариантСовместногоПрименения,
	|	ШаблоныПроводок.СчетДебета                      КАК СчетДебета,
	|	ШаблоныПроводок.КПССчетаДебета                  КАК КПССчетДебета,
	|	ШаблоныПроводок.ВидКПССчетаДебета               КАК ВидКПССчетДебета,
	|	ШаблоныПроводок.КЭКСчетаДебета                  КАК КЭКСчетДебета,
	|	ШаблоныПроводок.СубконтоСчетаДебета1            КАК СубконтоСчетДебета1,
	|	ШаблоныПроводок.СубконтоСчетаДебета2            КАК СубконтоСчетДебета2,
	|	ШаблоныПроводок.СубконтоСчетаДебета3            КАК СубконтоСчетДебета3,
	|	ШаблоныПроводок.ИсточникКоличестваДебета        КАК КоличествоДт,
	|	ШаблоныПроводок.СчетКредита                     КАК СчетКредита,
	|	ШаблоныПроводок.КЭКСчетаКредита                 КАК КЭКСчетКредита,
	|	ШаблоныПроводок.ВидКПССчетаКредита              КАК ВидКПССчетКредита,
	|	ШаблоныПроводок.КПССчетаКредита                 КАК КПССчетКредита,
	|	ШаблоныПроводок.СубконтоСчетаКредита1           КАК СубконтоСчетКредита1,
	|	ШаблоныПроводок.СубконтоСчетаКредита2           КАК СубконтоСчетКредита2,
	|	ШаблоныПроводок.СубконтоСчетаКредита3           КАК СубконтоСчетКредита3,
	|	ШаблоныПроводок.ИсточникКоличестваКредита       КАК КоличествоКт,
	|	ШаблоныПроводок.КФО                             КАК КФО,
	|	ШаблоныПроводок.ИсточникФинансовогоОбеспечения  КАК ИсточникФинансовогоОбеспечения,
	|	ШаблоныПроводок.ДополнительныйОтбор             КАК ДополнительныйОтбор,
	|	ШаблоныПроводок.УстановленДополнительныйОтбор   КАК УстановленДополнительныйОтбор,
	|	ШаблоныПроводок.ИсточникБалансовойСуммы         КАК Сумма,
	|	ШаблоныПроводок.ИзменятьЗнакОперацииПриОтраженииВУчете КАК ИзменятьЗнакОперации,
	|	Операции.ПоказателиРегистра.(
	|		Показатель,
	|		Использование)                              КАК ПоказателиШаблона
	|ИЗ
	|	Справочник.ШаблоныСводныхПроводокДляОбменаСБухгалтерией КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПравилаОтраженияВБухгалтерскомУчете КАК ПравилаОтражения
	|		ПО
	|			ШаблоныПроводок.Ссылка = ПравилаОтражения.ШаблонПроводки
	|			И ПравилаОтражения.НастройкаОтраженияВБухгалтерскомУчете = &НастройкаОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.НастройкиХозяйственныхОпераций КАК Операции
	|		ПО
	|			ШаблоныПроводок.Операция = Операции.Ссылка
	|ГДЕ
	|	НЕ ШаблоныПроводок.ПометкаУдаления
	|	И (НЕ ПравилаОтражения.НастройкаОтраженияВБухгалтерскомУчете ЕСТЬ NULL
	|		ИЛИ ШаблоныПроводок.ЭтоГруппаШаблонов)
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныПроводок.Операция,
	|	ШаблоныПроводок.РеквизитДопУпорядочивания ИЕРАРХИЯ
	|");
	Запрос.УстановитьПараметр("НастройкаОтражения", НастройкаОтражения);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

Функция ПолучитьТекстыЗапросовИсточниковДанных()
	
	ТекстыЗапросов = Новый Структура;
	ТекстыЗапросов.Вставить("ДвиженияНоменклатураНоменклатура", ТекстЗапросаДвиженияНоменклатураНоменклатура());
	ТекстыЗапросов.Вставить("ДвиженияНоменклатураДоходыРасходы", ТекстЗапросаДвиженияНоменклатураДоходыРасходы());
	ТекстыЗапросов.Вставить("Закупки", ТекстЗапросаЗакупки());
	ТекстыЗапросов.Вставить("ВыручкаИСебестоимостьПродаж", ТекстЗапросаВыручкаИСебестоимостьПродаж());
	
	Возврат ТекстыЗапросов;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураНоменклатура()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ)    КАК Период,
	|	ДанныеРегистра.ДокументДвижения               КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаВидаУчета             КАК АналитикаВидаУчета,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорАналитикаВидаУчета          КАК КорАналитикаВидаУчета,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры  КАК КорАналитикаУчетаНоменклатуры,
	|	СУММА(ДанныеРегистра.Количество)              КАК Количество,
	|	СУММА(ДанныеРегистра.КорКоличество)           КАК КорКоличество,
	|	СУММА(ДанныеРегистра.Стоимость)               КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС)         КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьРегл)           КАК СтоимостьРегл
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ),
	|	ДанныеРегистра.ДокументДвижения,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаВидаУчета,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорАналитикаВидаУчета,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Количество) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.КорКоличество) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период                         КАК Период,
	|	ДанныеРегистра.Регистратор                    КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров)
	|			ТОГДА КорАналитикиВидаУчета.Организация
	|		ИНАЧЕ АналитикиВидаУчета.Организация
	|	КОНЕЦ                                         КАК ОрганизацияДанныеКоторойОтражаютсяВУчете,
	|	АналитикиВидаУчета.Организация                КАК Организация,
	|	АналитикиВидаУчета.ИсточникФинансирования     КАК ИсточникФинансирования,
	|	АналитикиВидаУчета.Склад                      КАК Склад,
	|	АналитикиУчетаНоменклатуры.Номенклатура       КАК Номенклатура,
	|	АналитикиУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета КАК ГруппаБухгалтерскогоУчета,
	|	КорАналитикиВидаУчета.Организация             КАК КорОрганизация,
	|	КорАналитикиВидаУчета.ИсточникФинансирования  КАК КорИсточникФинансирования,
	|	КорАналитикиВидаУчета.Склад                   КАК КорСклад,
	|	КорАналитикиУчетаНоменклатуры.Номенклатура    КАК КорНоменклатура,
	|	КорАналитикиУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета КАК КорГруппаБухгалтерскогоУчета,
	|	ДанныеРегистра.Количество                     КАК Количество,
	|	ДанныеРегистра.Количество
	|		/ Упаковки.Коэффициент                    КАК КоличествоВОсновныхЕдиницахУчета,
	|	ДанныеРегистра.КорКоличество                  КАК КорКоличество,
	|	ДанныеРегистра.КорКоличество
	|		/ КорУпаковки.Коэффициент                 КАК КорКоличествоВОсновныхЕдиницахУчета,
	|	ДанныеРегистра.Стоимость                      КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС                КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл                  КАК СтоимостьРегл
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		ДанныеРегистра.АналитикаВидаУчета = АналитикиВидаУчета.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК КорАналитикиВидаУчета
	|	ПО
	|		ДанныеРегистра.КорАналитикаВидаУчета = КорАналитикиВидаУчета.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикиУчетаНоменклатуры
	|	ПО
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры = КорАналитикиУчетаНоменклатуры.КлючАналитики
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = АналитикиУчетаНоменклатуры.Номенклатура
	|		И ВЫБОР
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.Упаковка
	|			ИНАЧЕ Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КорУпаковки
	|	ПО
	|		КорУпаковки.Номенклатура = КорАналитикиУчетаНоменклатуры.Номенклатура
	|		И ВЫБОР
	|			КОГДА КорАналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА КорУпаковки.ЕдиницаИзмерения = КорАналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета
	|			КОГДА КорАналитикиУчетаНоменклатуры.Номенклатура.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА КорУпаковки.ЕдиницаИзмерения = КорАналитикиУчетаНоменклатуры.Номенклатура.Упаковка
	|			ИНАЧЕ КорУпаковки.ЕдиницаИзмерения = КорАналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ)  КАК Период,
	|	ДанныеРегистра.ДокументДвижения             КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаВидаУчета           КАК АналитикаВидаУчета,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.СтатьяДоходовРасходов        КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов             КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов            КАК АналитикаРасходов,
	|	СУММА(ДанныеРегистра.Количество)            КАК Количество,
	|	СУММА(ДанныеРегистра.Стоимость)             КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС)       КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьРегл)         КАК СтоимостьРегл
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ),
	|	ДанныеРегистра.ДокументДвижения,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаВидаУчета,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Количество) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период                      КАК Период,
	|	ДанныеРегистра.Регистратор                 КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация       КАК ХозяйственнаяОперация,
	|	АналитикиВидаУчета.Организация             КАК ОрганизацияДанныеКоторойОтражаютсяВУчете,
	|	ДанныеРегистра.СтатьяДоходовРасходов       КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов            КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов           КАК АналитикаРасходов,
	|	АналитикиВидаУчета.Организация             КАК Организация,
	|	АналитикиВидаУчета.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	АналитикиВидаУчета.Склад                   КАК Склад,
	|	АналитикиУчетаНоменклатуры.Номенклатура    КАК Номенклатура,
	|	АналитикиУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета КАК ГруппаБухгалтерскогоУчета,
	|	ДанныеРегистра.Количество                  КАК Количество,
	|	ДанныеРегистра.Количество
	|		/ Упаковки.Коэффициент                 КАК КоличествоВОсновныхЕдиницахУчета,
	|	ДанныеРегистра.Стоимость                   КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС             КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл               КАК СтоимостьРегл
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		ДанныеРегистра.АналитикаВидаУчета = АналитикиВидаУчета.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = АналитикиУчетаНоменклатуры.Номенклатура
	|		И ВЫБОР
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.Упаковка
	|			ИНАЧЕ Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗакупки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ)  КАК Период,
	|	ДанныеРегистра.ДокументДвижения             КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                  КАК Организация,
	|	ДанныеРегистра.ПодразделениеОрганизации     КАК ПодразделениеОрганизации,
	|	ДанныеРегистра.Склад                        КАК Склад,
	|	ДанныеРегистра.Контрагент                   КАК Контрагент,
	|	ДанныеРегистра.ДоговорКонтрагента           КАК Договор,
	|	ДанныеРегистра.ИсточникФинансирования       КАК ИсточникФинансирования,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ДанныеРегистра.Количество)            КАК Количество,
	|	СУММА(ДанныеРегистра.Сумма)                 КАК Сумма,
	|	СУММА(ДанныеРегистра.СуммаБезНДС)           КАК СуммаБезНДС,
	|	СУММА(ДанныеРегистра.Стоимость)             КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС)       КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьРегл)         КАК СтоимостьРегл
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрНакопления.Закупки КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ),
	|	ДанныеРегистра.ДокументДвижения,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ПодразделениеОрганизации,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.ДоговорКонтрагента,
	|	ДанныеРегистра.ИсточникФинансирования,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Количество) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Сумма) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СуммаБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период                             КАК Период,
	|	ДанныеРегистра.Регистратор                        КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                        КАК ОрганизацияДанныеКоторойОтражаютсяВУчете,
	|	ДанныеРегистра.Организация                        КАК Организация,
	|	ДанныеРегистра.ПодразделениеОрганизации           КАК ПодразделениеОрганизации,
	|	ДанныеРегистра.Склад                              КАК Склад,
	|	ДанныеРегистра.Контрагент                         КАК Контрагент,
	|	ДанныеРегистра.Договор                            КАК Договор,
	|	ДанныеРегистра.ИсточникФинансирования             КАК ИсточникФинансирования,
	|	АналитикиУчетаНоменклатуры.Номенклатура           КАК Номенклатура,
	|	АналитикиУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета КАК ГруппаБухгалтерскогоУчета,
	|	ДанныеРегистра.Количество                         КАК Количество,
	|	ДанныеРегистра.Количество
	|		/ Упаковки.Коэффициент                        КАК КоличествоВОсновныхЕдиницахУчета,
	|	ДанныеРегистра.Сумма                              КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС                        КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.Стоимость                          КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС                    КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл                      КАК СтоимостьРегл
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = АналитикиУчетаНоменклатуры.Номенклатура
	|		И ВЫБОР
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.Упаковка
	|			ИНАЧЕ Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыручкаИСебестоимостьПродаж()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ)  КАК Период,
	|	ДанныеРегистра.ДокументДвижения             КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                  КАК Организация,
	|	ДанныеРегистра.ПодразделениеОрганизации     КАК ПодразделениеОрганизации,
	|	ДанныеРегистра.Склад                        КАК Склад,
	|	ДанныеРегистра.Контрагент                   КАК Контрагент,
	|	ДанныеРегистра.ДоговорКонтрагента           КАК Договор,
	|	ДанныеРегистра.ИсточникФинансирования       КАК ИсточникФинансирования,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ДанныеРегистра.Количество)            КАК Количество,
	|	СУММА(ДанныеРегистра.Сумма)                 КАК Сумма,
	|	СУММА(ДанныеРегистра.СуммаБезНДС)           КАК СуммаБезНДС,
	|	СУММА(ДанныеРегистра.Стоимость)             КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС)       КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьРегл)         КАК СтоимостьРегл
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ),
	|	ДанныеРегистра.ДокументДвижения,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ПодразделениеОрганизации,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.ДоговорКонтрагента,
	|	ДанныеРегистра.ИсточникФинансирования,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Количество) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Сумма) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СуммаБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период                              КАК Период,
	|	ДанныеРегистра.Регистратор                         КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                         КАК ОрганизацияДанныеКоторойОтражаютсяВУчете,
	|	ДанныеРегистра.Организация                         КАК Организация,
	|	ДанныеРегистра.ПодразделениеОрганизации            КАК ПодразделениеОрганизации,
	|	ДанныеРегистра.Склад                               КАК Склад,
	|	ДанныеРегистра.Контрагент                          КАК Контрагент,
	|	ДанныеРегистра.Договор                             КАК Договор,
	|	ДанныеРегистра.ИсточникФинансирования              КАК ИсточникФинансирования,
	|	АналитикиУчетаНоменклатуры.Номенклатура            КАК Номенклатура,
	|	АналитикиУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета КАК ГруппаБухгалтерскогоУчета,
	|	ДанныеРегистра.Количество                          КАК Количество,
	|	ДанныеРегистра.Количество
	|		/ Упаковки.Коэффициент                         КАК КоличествоВОсновныхЕдиницахУчета,
	|	ДанныеРегистра.Сумма                               КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС                         КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС  КАК СуммаНДС,
	|	ДанныеРегистра.Стоимость                           КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС                     КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл                       КАК СтоимостьРегл
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|	ПО
	|		Упаковки.Номенклатура = АналитикиУчетаНоменклатуры.Номенклатура
	|		И ВЫБОР
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета
	|			КОГДА АналитикиУчетаНоменклатуры.Номенклатура.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.Упаковка
	|			ИНАЧЕ Упаковки.ЕдиницаИзмерения = АналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции


Процедура ДобавитьДанныеВТаблицу(Приемник, Источник)
	
	Для Каждого Колонка Из Источник.Колонки Цикл
		Если Приемник.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Приемник.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Источник, Приемник);
	
КонецПроцедуры


Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора)
	
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
	
КонецПроцедуры

Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов)
	
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа,ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора Из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(НоваяГруппа,ЭлементОтбора);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа,ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции




