
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

Процедура ПолучитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Параметры);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.АдресWSDL);
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Тогда
		ПараметрыПодключения.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Иначе
		ПараметрыПодключения.ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	ДанныеКлассификатора = WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(ПараметрыПодключения.URIПространстваИмен, "listString"));
	
	Если Параметры.ТипКлассификатора = ТипКлассификатора_ФизическиеЛица() Тогда
		Ответ = WSПрокси.GetZipData(Параметры.ИдентификаторОрганизации, ДанныеКлассификатора, ДанныеКлассификатора, "FRMR");
	ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения()
			ИЛИ Параметры.ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
		СписокПодсистем = WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(ПараметрыПодключения.URIПространстваИмен, "listString"));
		СписокПодсистем.dataString.Добавить("mo_depart");
		Ответ = WSПрокси.GetZipData(Параметры.ИдентификаторОрганизации, ДанныеКлассификатора, СписокПодсистем, "FRMO");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответ.Error) Тогда
		ВызватьИсключение Ответ.Error;
	КонецЕсли;
	
	Если Параметры.ТипКлассификатора = ТипКлассификатора_ФизическиеЛица() Тогда
		Результат = ОбработатьОтвет_ДанныеКлассификатора_ФизическиеЛица(Параметры, Ответ.ZipData);
	ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
		Результат = ОбработатьОтвет_ДанныеКлассификатора_СтруктурныеПодразделения(Параметры, Ответ.ZipData);
	ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
		Результат = ОбработатьОтвет_ДанныеКлассификатора_Отделения(Параметры, Ответ.ZipData);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеКлассификатора(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Статусы = Новый Структура("Создано, Обновлено, ПомеченоНаУдаление, Ошибки", 0, 0, 0, Новый Массив);
	
	ДанныеКлассификатора = Параметры.ДанныеКлассификатора;
	Для Каждого СтрокаКлассификатора Из ДанныеКлассификатора Цикл
		
		Если Параметры.ТипКлассификатора = ТипКлассификатора_ФизическиеЛица() Тогда
			ЗагрузитьЭлементДанныхКлассификатора_ФизическиеЛица(СтрокаКлассификатора, Статусы);
		ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_СтруктурныеПодразделения() Тогда
			ЗагрузитьЭлементДанныхКлассификатора_СтруктурныеПодразделения(СтрокаКлассификатора, Статусы);
		ИначеЕсли Параметры.ТипКлассификатора = ТипКлассификатора_Отделения() Тогда
			ЗагрузитьЭлементДанныхКлассификатора_Отделения(СтрокаКлассификатора, Статусы);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неподдерживаемый тип классификатора.'");
		КонецЕсли;

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
	Результат.Вставить("Статусы"             , Статусы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных классификаторов
#Область ПолучениеДанныхКлассификаторов

Функция ПараметрыПолучения_ДанныеКлассификатора(ТипКлассификатора, Организация, ДолжностиМинЗдрава = Неопределено, Должности1002МинЗдрава = Неопределено) Экспорт
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров.Получить().Получить();
	
	Параметры = Новый Структура(ПараметрыЗагрузки);
	Параметры.Вставить("ТипКлассификатора", ТипКлассификатора);
	Параметры.Вставить("ИдентификаторОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодOID"));
	Параметры.Вставить("ДолжностиМинЗдрава", ДолжностиМинЗдрава);
	Параметры.Вставить("Должности1002МинЗдрава", Должности1002МинЗдрава);
	
	Возврат Параметры;
	
КонецФункции


#Область ПолучениеДанныхКлассификатора_ФизическиеЛица

Функция ТипКлассификатора_ФизическиеЛица() Экспорт
	
	Возврат "ФизическиеЛица";
	
КонецФункции

Функция СтруктураДанныхКлассификатора_ФизическиеЛица() Экспорт
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"                        , 0);
	ДанныеКлассификатора.Вставить("Ссылка"                            , Справочники.ФизическиеЛица.ПустаяСсылка());
	ДанныеКлассификатора.Вставить("Информация"                        , "");
	ДанныеКлассификатора.Вставить("ЗагрузкаДоступна"                  , Истина);
	ДанныеКлассификатора.Вставить("ПометкаУдаления"                   , Ложь);
	ДанныеКлассификатора.Вставить("НаличиеДублей"                     , Ложь);
	
	ДанныеКлассификатора.Вставить("Наименование"                      , "");
	ДанныеКлассификатора.Вставить("ДатаРождения"                      , Дата(1,1,1));
	ДанныеКлассификатора.Вставить("ИНН"                               , "");
	ДанныеКлассификатора.Вставить("СНИЛС"                             , "");
	ДанныеКлассификатора.Вставить("КодДолжности"                      , "");
	ДанныеКлассификатора.Вставить("Должность"                         , "");
	ДанныеКлассификатора.Вставить("ВерсияКлассификатораДолжностей"    , "");
	ДанныеКлассификатора.Вставить("КодДолжности1002"                  , "");
	ДанныеКлассификатора.Вставить("КодДолжностиРодителя1002"          , "");
	ДанныеКлассификатора.Вставить("Должность1002"                     , "");
	ДанныеКлассификатора.Вставить("ВерсияКлассификатораДолжностей1002", "");
	ДанныеКлассификатора.Вставить("Пол"                               , Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция ОбработатьОтвет_ДанныеКлассификатора_ФизическиеЛица(Параметры, ИсходныеДанные)
	
	КаталогНазначения = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ПолучитьФайлыИзАрхива(ИсходныеДанные, КаталогНазначения);
	
	Маска = "???????????-??-??.xml";
	НайденныеФайлы = НайтиФайлы(КаталогНазначения, Маска);
	
	МассивРазныхИмен = Новый Массив;
	Для Каждого Файл Из НайденныеФайлы Цикл
		ИмяФайла = Лев(Файл.ИмяБезРасширения, 11);
		Если МассивРазныхИмен.Найти(ИмяФайла) = Неопределено Тогда
			МассивРазныхИмен.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	
	СтруктураДанных = СтруктураДанныхКлассификатора_ФизическиеЛица();
	Для Каждого КлючИЗначение Из СтруктураДанных Цикл
		ДанныеКлассификатора.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Для Индекс = 0 По МассивРазныхИмен.ВГраница() Цикл
		
		ИмяФайла = МассивРазныхИмен[Индекс];
		
		ЭлементДанных = ДанныеКлассификатора.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементДанных, СтруктураДанных);
		ЭлементДанных.КлючСтроки = Индекс;
		
		// Подсистема 1 "person".
		Маска = ИмяФайла + "-01-*.xml";
		НайденныеФайлы = НайтиФайлы(КаталогНазначения, Маска);
		Для Каждого Файл Из НайденныеФайлы Цикл
			
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(Файл.ПолноеИмя);
			XDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
			
			РазобратьДанныеПодсистемы_person(XDTO, ЭлементДанных, Файл.Имя);
			
		КонецЦикла;

		// Подсистема 11 "person_card". 
		Маска = ИмяФайла + "-11-*.xml";
		НайденныеФайлы = НайтиФайлы(КаталогНазначения, Маска);
		Для Каждого Файл Из НайденныеФайлы Цикл
			
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(Файл.ПолноеИмя);
			XDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
			
			РазобратьДанныеПодсистемы_person_card(XDTO, ЭлементДанных, Файл.Имя, Параметры.ДолжностиМинЗдрава, Параметры.Должности1002МинЗдрава);
			
		КонецЦикла;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогНазначения);
	
	СопоставитьДанныеКлассификатора_ФизическиеЛица(ДанныеКлассификатора);
	
	Результат = Новый Структура("ОбщееКоличествоДанных, ДанныеКлассификатора", 0, Новый ТаблицаЗначений);
	Результат.ОбщееКоличествоДанных = ДанныеКлассификатора.Количество();
	Результат.ДанныеКлассификатора  = ДанныеКлассификатора;
	
	Возврат Результат;
	
КонецФункции

Процедура РазобратьДанныеПодсистемы_person(Объект, ДанныеСотрудника, ИмяФайла)
	
	ДанныеСотрудника.Наименование  = СтрШаблон("%1 %2 %3", Объект.lastName, Объект.firstName, Объект.patronymic);
	ДанныеСотрудника.ДатаРождения  = ПривестиКВнутреннемуТипу(Объект.birthDate, Тип("Дата"));
	ДанныеСотрудника.Пол           = ?(Число(Объект.gender) = 1, Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
	ДанныеСотрудника.ИНН           = ЗначениеСвойстваОбъектаXDTO(Объект, "inn", "");
	ДанныеСотрудника.СНИЛС         = ЗначениеСвойстваОбъектаXDTO(Объект, "snils", "");
	
КонецПроцедуры

Процедура РазобратьДанныеПодсистемы_person_card(Объект, ДанныеСотрудника, ИмяФайла, ДолжностиМинЗдрава = Неопределено, Должности1002МинЗдрава = Неопределено)
	
	ДанныеСотрудника.КодДолжности = Объект.cards.card.postId.id;
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.КодДолжности) И ЗначениеЗаполнено(ДолжностиМинЗдрава) Тогда
		
		НайденныеДолжности = ДолжностиМинЗдрава.НайтиСтроки(Новый Структура("КодДолжности", ДанныеСотрудника.КодДолжности));
		Если НайденныеДолжности.Количество() > 0 Тогда
			
			ДанныеСотрудника.Должность = НайденныеДолжности[0].Должность;
			ДанныеСотрудника.КодДолжности1002 = НайденныеДолжности[0].ФедеральныйКод;
			ДанныеСотрудника.ВерсияКлассификатораДолжностей = НайденныеДолжности[0].Версия;
			
			Если ЗначениеЗаполнено(ДанныеСотрудника.КодДолжности1002) И ЗначениеЗаполнено(Должности1002МинЗдрава) Тогда
				
				НайденныеДолжности1002 = Должности1002МинЗдрава.НайтиСтроки(Новый Структура("КодДолжности", ДанныеСотрудника.КодДолжности1002));
				Если НайденныеДолжности1002.Количество() > 0 Тогда
					ДанныеСотрудника.Должность1002 = НайденныеДолжности1002[0].Должность;
					ДанныеСотрудника.КодДолжностиРодителя1002 = НайденныеДолжности1002[0].КодРодителя;
					ДанныеСотрудника.ВерсияКлассификатораДолжностей1002 = НайденныеДолжности1002[0].Версия;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьДанныеКлассификатора_ФизическиеЛица(ДанныеКлассификатора)
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Ссылка              КАК Ссылка,
	|	Данные.Наименование        КАК Наименование,
	|	Данные.ДатаРождения        КАК ДатаРождения,
	|	Данные.Пол                 КАК Пол,
	|	Данные.ИНН                 КАК ИНН,
	|	Данные.СНИЛС               КАК СНИЛС,
	|	Данные.ПометкаУдаления     КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ФизическиеЛица КАК Данные
	|");
	
	СуществующиеДанные = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ИНН) Тогда
			
			Отбор = Новый Структура("ИНН");
			ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
			
			НайденныеСтроки = СуществующиеДанные.НайтиСтроки(Отбор);
			
			КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
			Если КоличествоНайденныхСтрок > 0 Тогда
				
				Если КоличествоНайденныхСтрок > 1 Тогда
					
					ЭлементДанных.ЗагрузкаДоступна = Ложь;
					ЭлементДанных.НаличиеДублей    = Истина;
					ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько физических лиц с одинаковыми ИНН.'");
					ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
					
				Иначе
					
					ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
					ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
					
					Если НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование
					   И НайденныеСтроки[0].Пол = ЭлементДанных.Пол
					   И НайденныеСтроки[0].ДатаРождения = ЭлементДанных.ДатаРождения Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
						КонецЕсли;
						
					Иначе
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов отличаются.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению реквизитов, если загружаемые значения заполнены.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, и некоторые значения реквизитов отличаются.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению реквизитов, если загружаемые значения заполнены.'");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементДанных.СНИЛС) Тогда
			
			Отбор = Новый Структура("СНИЛС");
			ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
			
			НайденныеСтроки = СуществующиеДанные.НайтиСтроки(Отбор);
			
			КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
			Если КоличествоНайденныхСтрок > 0 Тогда
				
				Если КоличествоНайденныхСтрок > 1 Тогда
					
					ЭлементДанных.ЗагрузкаДоступна = Ложь;
					ЭлементДанных.НаличиеДублей    = Истина;
					ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько физических лиц с одинаковыми СНИЛС.'");
					ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
					
				Иначе
					
					ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
					ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
					
					Если НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование
					   И НайденныеСтроки[0].Пол = ЭлементДанных.Пол
					   И НайденныеСтроки[0].ДатаРождения = ЭлементДанных.ДатаРождения Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
						КонецЕсли;
						
					Иначе
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов отличаются.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению реквизитов, если загружаемые значения заполнены.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, и некоторые значения реквизитов отличаются.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению реквизитов, если загружаемые значения заполнены.'");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура("Наименование, Пол, ДатаРождения");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		Отбор.Вставить("ИНН", "");
		
		НайденныеСтроки = СуществующиеДанные.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько физических лиц с одинаковыми значениями реквизитов ""Наименование"", ""Пол"" и ""Дата рождения"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				
				Если Не ЗначениеЗаполнено(ЭлементДанных.ИНН) Тогда
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""ИНН"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""ИНН"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
					КонецЕсли;
					
				Иначе
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""ИНН"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к заполнению реквизита ""ИНН"".'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""ИНН"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и заполнению реквизита ""ИНН"".'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ЭлементДанных.ЗагрузкаДоступна = Истина;
		ЭлементДанных.Информация       = НСтр("ru = 'Загрузка приведет к созданию нового элемента справочника.'");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_ФизическиеЛица


#Область ПолучениеДанныхКлассификатора_СтруктурныеПодразделения

Функция ТипКлассификатора_СтруктурныеПодразделения() Экспорт
	
	Возврат "СтруктурныеПодразделения";
	
КонецФункции

Функция СтруктураДанныхКлассификатора_СтруктурныеПодразделения() Экспорт
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"      , 0);
	ДанныеКлассификатора.Вставить("Версия"          , "");
	ДанныеКлассификатора.Вставить("Организация"     , Неопределено);
	ДанныеКлассификатора.Вставить("Ссылка"          , Неопределено);
	ДанныеКлассификатора.Вставить("Информация"      , "");
	ДанныеКлассификатора.Вставить("ЗагрузкаДоступна", Истина);
	ДанныеКлассификатора.Вставить("ПометкаУдаления" , Ложь);
	ДанныеКлассификатора.Вставить("НаличиеДублей"   , Ложь);
	ДанныеКлассификатора.Вставить("ДоступЗапрещен"  , Ложь);
	
	СоответствияФормата = СоответствияФорматаДанных_СтруктурныеПодразделения();
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		ДанныеКлассификатора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция СоответствияФорматаДанных_СтруктурныеПодразделения()
	
	СоответствияФормата = Новый Структура;
	СоответствияФормата.Вставить("ИдентификаторОрганизации", Новый Структура("Индекс, Имя, Тип", 0, "mo_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Идентификатор"           , Новый Структура("Индекс, Имя, Тип", 1, "depart_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ДатаСоздания"            , Новый Структура("Индекс, Имя, Тип", 2, "depart_create_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	СоответствияФормата.Вставить("ДатаИзменения"           , Новый Структура("Индекс, Имя, Тип", 3, "depart_modify_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	СоответствияФормата.Вставить("ДатаЛиквидации"          , Новый Структура("Индекс, Имя, Тип", 4, "depart_liquidation_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	СоответствияФормата.Вставить("Наименование"            , Новый Структура("Индекс, Имя, Тип", 5, "depart_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("Тип"                     , Новый Структура("Индекс, Имя, Тип", 7, "depart_type_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("Вид"                     , Новый Структура("Индекс, Имя, Тип", 9, "depart_kind_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	
	Возврат СоответствияФормата;
	
КонецФункции

Функция ОбработатьОтвет_ДанныеКлассификатора_СтруктурныеПодразделения(Параметры, ИсходныеДанные)
	
	КаталогНазначения = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ПолучитьФайлыИзАрхива(ИсходныеДанные, КаталогНазначения);
	
	ДанныеКлассификатора = Новый Массив;
	
	Маска = Параметры.ИдентификаторОрганизации + "-03-*.xml";
	НайденныеФайлы = НайтиФайлы(КаталогНазначения, Маска);
	
	Индекс = 0;
	Для Каждого Файл Из НайденныеФайлы Цикл
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(Файл.ПолноеИмя);
		XDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
		
		ПолученныйЭлементДанных = СтруктураДанныхКлассификатора_СтруктурныеПодразделения();
		ПолученныйЭлементДанных.КлючСтроки  = Индекс;
		ПолученныйЭлементДанных.ИдентификаторОрганизации = Параметры.ИдентификаторОрганизации;
		
		РазобратьДанныеПодсистемы_depart(XDTO, ПолученныйЭлементДанных);
		
		Если ЗначениеЗаполнено(ПолученныйЭлементДанных.Наименование) И Не ЗначениеЗаполнено(ПолученныйЭлементДанных.Идентификатор) Тогда
			ПолученныйЭлементДанных.Идентификатор = ПолучитьОИДПодразделения(Параметры, ПолученныйЭлементДанных.Наименование);
		КонецЕсли;
		
		ДанныеКлассификатора.Добавить(ПолученныйЭлементДанных);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогНазначения);
	
	СопоставитьДанныеКлассификатора_СтруктурныеПодразделения(ДанныеКлассификатора);
	
	Результат = Новый Структура("ОбщееКоличествоДанных, ДанныеКлассификатора", 0, Новый ТаблицаЗначений);
	Результат.ОбщееКоличествоДанных = ДанныеКлассификатора.Количество();
	Результат.ДанныеКлассификатора  = ДанныеКлассификатора;
	
	Возврат Результат;

КонецФункции

Процедура РазобратьДанныеПодсистемы_depart(Объект, ДанныеПодразделения)

	ДанныеПодразделения.Наименование = Объект.departName;

	Если Объект.Свойства().Получить("createDate") <> Неопределено Тогда
		ДанныеПодразделения.ДатаСоздания = ПреобразоватьСтрокуВДату(Объект.createDate);
	КонецЕсли;
	
	Если Объект.Свойства().Получить("liquidationDate") <> Неопределено Тогда
		ДанныеПодразделения.ДатаЛиквидации = ПреобразоватьСтрокуВДату(Объект.liquidationDate);
	КонецЕсли;
	
	Если Объект.Свойства().Получить("oid") <> Неопределено Тогда
		ДанныеПодразделения.Идентификатор = Объект.oid;
	КонецЕсли;

КонецПроцедуры

Процедура СопоставитьДанныеКлассификатора_СтруктурныеПодразделения(ДанныеКлассификатора)
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПодразделенияОрганизацийРазрешенные
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.КодOID КАК ИдентификаторОрганизации,
	|	Данные.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Данные
	|";
	
	Результат = Запрос.Выполнить();
	ДанныеСправочникаОрганизации = Результат.Выгрузить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Данные.КодOID                                         КАК Идентификатор,
	|	Данные.Владелец.КодOID                                КАК ИдентификаторОрганизации,
	|	Данные.НаименованиеПолное                             КАК Наименование,
	|	Данные.Ссылка                                         КАК Ссылка,
	|	Данные.Владелец                                       КАК Организация,
	|	Данные.ПометкаУдаления                                КАК ПометкаУдаления,
	|	ПодразделенияОрганизацийРазрешенные.Ссылка ЕСТЬ NULL  КАК ДоступЗапрещен
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПодразделенияОрганизацийРазрешенные КАК ПодразделенияОрганизацийРазрешенные
	|		ПО
	|			ПодразделенияОрганизацийРазрешенные.Ссылка = Данные.Ссылка
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеСправочникаПодразделенияОрганизаций = Результат.Выгрузить();
	
	ИндексДоступРазрешен = 0;
	ИндексДоступЗапрещен = ДанныеКлассификатора.Количество() - 1;
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		// 1. Поиск загружаемой организации.
		Отбор = Новый Структура("ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаОрганизации.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок <> 1 Тогда
			
			ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
			ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько организаций с одинаковыми значениями реквизитов ""Код OID"".'");
				ЭлементДанных.Информация = НСтр("ru = 'В следствии чего невозможно однозначно определить значение для заполнения реквизита ""Организация"" подразделения.'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ПодразделениеЛиквидировано = ЗначениеЗаполнено(ЭлементДанных.ДатаЛиквидации);
		
		ЭлементДанных.Организация = НайденныеСтроки[0].Организация;
		
		// 2. Поиск подразделений по идентификатору.
		Отбор = Новый Структура("Идентификатор");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаПодразделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько подразделений с одинаковыми реквизитами ""Код OID"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
				ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
				ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				ЭлементДанных.ДоступЗапрещен  = НайденныеСтроки[0].ДоступЗапрещен;
				
				// Если доступ запрещен - сдвигаем ключ записи в конец.
				Если НайденныеСтроки[0].ДоступЗапрещен Тогда
					ЭлементДанных.КлючСтроки = ИндексДоступЗапрещен;
					ИндексДоступЗапрещен = ИндексДоступЗапрещен - 1;
				Иначе
					ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
					ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				КонецЕсли;
				
				Если ПодразделениеЛиквидировано Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата ликвидации подразделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации
						И НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					Иначе
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 3. Поиск подразделения по наименованию и идентификатору организации.
		Отбор = Новый Структура("Наименование, ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		Отбор.Вставить("Идентификатор", "");
		НайденныеСтроки = ДанныеСправочникаПодразделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе существует несколько подразделений с одинаковыми значениями реквизитов ""Код OID"" организации и ""Наименование"".'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
				ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
				ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				ЭлементДанных.ДоступЗапрещен  = НайденныеСтроки[0].ДоступЗапрещен;
				
				// Если доступ запрещен - сдвигаем ключ записи в конец.
				Если НайденныеСтроки[0].ДоступЗапрещен Тогда
					ЭлементДанных.КлючСтроки = ИндексДоступЗапрещен;
					ИндексДоступЗапрещен = ИндексДоступЗапрещен - 1;
				Иначе
					ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
					ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				КонецЕсли;
				
				Если ПодразделениеЛиквидировано Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата ликвидации подразделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к заполнению реквизита ""Код OID"".'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и заполнению реквизита ""Код OID"".'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 4. Подразделение не найдено.
		Если ПодразделениеЛиквидировано Тогда
			
			ЭлементДанных.ЗагрузкаДоступна = Ложь;
			ЭлементДанных.Информация       = НСтр("ru = 'Получена дата ликвидации подразделения.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Элемент справочника не найден в информационной базе.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
			
		Иначе
			
			ЭлементДанных.ЗагрузкаДоступна = Истина;
			ЭлементДанных.Информация       = НСтр("ru = 'Загрузка приведет к созданию нового элемента справочника.'");
			
		КонецЕсли;
		
		ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
		ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_СтруктурныеПодразделения


#Область ПолучениеДанныхКлассификатора_Отделения

Функция ТипКлассификатора_Отделения() Экспорт
	
	Возврат "Отделения";
	
КонецФункции

Функция СтруктураДанныхКлассификатора_Отделения() Экспорт
	
	ДанныеКлассификатора = Новый Структура;
	ДанныеКлассификатора.Вставить("КлючСтроки"      , 0);
	ДанныеКлассификатора.Вставить("Версия"          , "");
	ДанныеКлассификатора.Вставить("Организация"     , Неопределено);
	ДанныеКлассификатора.Вставить("Подразделение"   , Неопределено);
	ДанныеКлассификатора.Вставить("Ссылка"          , Неопределено);
	ДанныеКлассификатора.Вставить("Информация"      , "");
	ДанныеКлассификатора.Вставить("ЗагрузкаДоступна", Истина);
	ДанныеКлассификатора.Вставить("ПометкаУдаления" , Ложь);
	ДанныеКлассификатора.Вставить("Тип"             , "");
	ДанныеКлассификатора.Вставить("НаличиеДублей"   , Ложь);
	ДанныеКлассификатора.Вставить("ДоступЗапрещен"  , Ложь);
	
	СоответствияФормата = СоответствияФорматаДанных_Отделения();
	Для Каждого КлючИЗначение Из СоответствияФормата Цикл
		ДанныеКлассификатора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ДанныеКлассификатора;
	
КонецФункции

Функция СоответствияФорматаДанных_Отделения()
	
	СоответствияФормата = Новый Структура;
	СоответствияФормата.Вставить("ИдентификаторОрганизации"                , Новый Структура("Индекс, Имя, Тип", 0, "mo_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("ИдентификаторПодразделения"              , Новый Структура("Индекс, Имя, Тип", 1, "depart_oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Идентификатор"                           , Новый Структура("Индекс, Имя, Тип", 12, "oid", ОбщегоНазначения.ОписаниеТипаСтрока("100")));
	СоответствияФормата.Вставить("Наименование"                            , Новый Структура("Индекс, Имя, Тип", 13, "hospital_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("НаименованиеТипаОтделения"               , Новый Структура("Индекс, Имя, Тип", 15, "hospital_subdivision_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("ДатаУпразднения"                         , Новый Структура("Индекс, Имя, Тип", 16, "hospital_liquidation_date", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	СоответствияФормата.Вставить("НаименованиеТипаАмбулаторногоКабинета"   , Новый Структура("Индекс, Имя, Тип", 18, "ambulance_subdivision_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	СоответствияФормата.Вставить("НаименованиеТипаДиагностическогоКабинета", Новый Структура("Индекс, Имя, Тип", 21, "lab_subdivision_name", ОбщегоНазначения.ОписаниеТипаСтрока("255")));
	
	Возврат СоответствияФормата;
	
КонецФункции

Функция ОбработатьОтвет_ДанныеКлассификатора_Отделения(Параметры, ИсходныеДанные)

	КаталогНазначения = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ПолучитьФайлыИзАрхива(ИсходныеДанные, КаталогНазначения);
	
	ДанныеКлассификатора = Новый Массив;
	
	Маска = Параметры.ИдентификаторОрганизации + "-03-*.xml";
	НайденныеФайлы = НайтиФайлы(КаталогНазначения, Маска);

	Индекс = 0;
	Для Каждого Файл Из НайденныеФайлы Цикл
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(Файл.ПолноеИмя);
		XDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);

		Если XDTO.departTypeId.id <> "2" Тогда
			Продолжить;
		КонецЕсли;
		
		// Если установлен дополнительный отбор на подразделение - исключаем чужие отделения.
		ИдентификаторПодразделения = "";
		Если XDTO.Свойства().Получить("oid") <> Неопределено Тогда
			ИдентификаторПодразделения = XDTO.oid;
		Иначе
			ИдентификаторПодразделения = ПолучитьОИДПодразделения(Параметры, XDTO.departName);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторПодразделения) 
				И ИдентификаторПодразделения <> Параметры.ИдентификаторПодразделения Тогда
			Продолжить;
		КонецЕсли;
		
		ВеткаОтделений = XDTO.departHospital.hospitalSubdivisions.hospitalSubdivision;
		Если ТипЗнч(ВеткаОтделений) = Тип("ОбъектXDTO") Тогда
			СписокОтделений = Новый Массив;
			СписокОтделений.Добавить(XDTO.departHospital.hospitalSubdivisions.hospitalSubdivision);
		ИначеЕсли ТипЗнч(ВеткаОтделений) = Тип("СписокXDTO") Тогда
			СписокОтделений = ВеткаОтделений;
		Иначе
			ВызватьИсключение(НСтр("ru = 'Неверный формат данных. Обратитесь к администратору.'"));
		КонецЕсли;
		
		Для каждого ОтделениеXDTO Из СписокОтделений Цикл
			ПолученныйЭлементДанных = СтруктураДанныхКлассификатора_Отделения();
			ПолученныйЭлементДанных.КлючСтроки  = Индекс;
			ПолученныйЭлементДанных.ИдентификаторОрганизации = Параметры.ИдентификаторОрганизации;
			ПолученныйЭлементДанных.ИдентификаторПодразделения = ИдентификаторПодразделения;

			РазобратьДанныеПодсистемы_hospitalSubdivisions(ОтделениеXDTO, ПолученныйЭлементДанных);
			Индекс = Индекс + 1;
			
			ДанныеКлассификатора.Добавить(ПолученныйЭлементДанных);
		КонецЦикла;

	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогНазначения);
	
	СопоставитьДанныеКлассификатора_Отделения(ДанныеКлассификатора);

	Результат = Новый Структура("ОбщееКоличествоДанных, ДанныеКлассификатора", 0, Новый ТаблицаЗначений);
	Результат.ОбщееКоличествоДанных = ДанныеКлассификатора.Количество();
	Результат.ДанныеКлассификатора  = ДанныеКлассификатора;
	
	Возврат Результат;
	
КонецФункции

Процедура РазобратьДанныеПодсистемы_hospitalSubdivisions(Объект, ДанныеОтделения)

	ДанныеОтделения.Идентификатор = Объект.oid;
	ДанныеОтделения.Наименование  = Объект.subdivisionName;
	
КонецПроцедуры

Процедура СопоставитьДанныеКлассификатора_Отделения(ДанныеКлассификатора)
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПодразделенияОрганизацийРазрешенные
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтделенияОрганизацийРазрешенные
	|ИЗ
	|	Справочник.ОтделенияОрганизаций КАК Данные
	|";
	
	Результат = Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Данные.КодOID                                         КАК ИдентификаторПодразделения,
	|	Данные.Владелец.КодOID                                КАК ИдентификаторОрганизации,
	|	Данные.Ссылка                                         КАК Подразделение,
	|	Данные.Владелец                                       КАК Организация,
	|	Данные.ПометкаУдаления                                КАК ПометкаУдаления,
	|	ПодразделенияОрганизацийРазрешенные.Ссылка ЕСТЬ NULL  КАК ДоступЗапрещен
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПодразделенияОрганизацийРазрешенные КАК ПодразделенияОрганизацийРазрешенные
	|		ПО
	|			ПодразделенияОрганизацийРазрешенные.Ссылка = Данные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.КодOID                                     КАК Идентификатор,
	|	Данные.Владелец.КодOID                            КАК ИдентификаторОрганизации,
	|	Данные.ПодразделениеОрганизации.КодOID            КАК ИдентификаторПодразделения,
	|	Данные.НаименованиеПолное                         КАК Наименование,
	|	Данные.Ссылка                                     КАК Ссылка,
	|	Данные.Владелец                                   КАК Организация,
	|	Данные.ПодразделениеОрганизации                   КАК Подразделение,
	|	Данные.ПометкаУдаления                            КАК ПометкаУдаления,
	|	ОтделенияОрганизацийРазрешенные.Ссылка ЕСТЬ NULL  КАК ДоступЗапрещен
	|ИЗ
	|	Справочник.ОтделенияОрганизаций КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ОтделенияОрганизацийРазрешенные КАК ОтделенияОрганизацийРазрешенные
	|		ПО
	|			ОтделенияОрганизацийРазрешенные.Ссылка = Данные.Ссылка
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеСправочникаПодразделенияОрганизаций = Результаты[0].Выгрузить();
	ДанныеСправочникаОтделенияОрганизаций     = Результаты[1].Выгрузить();
	
	ИндексДоступРазрешен = 0;
	ИндексДоступЗапрещен = ДанныеКлассификатора.Количество() - 1;
	
	Для Каждого ЭлементДанных Из ДанныеКлассификатора Цикл
		
		// 1. Поиск загружаемого вышестоящего подразделения.
		Отбор = Новый Структура("ИдентификаторПодразделения, ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаПодразделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок <> 1 Тогда
			
			ЭлементДанных.ЗагрузкаДоступна  = Ложь;
			ЭлементДанных.КлючСтроки        = ИндексДоступРазрешен;
			
			ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация       = НСтр("ru = 'В информационной базе существует несколько подразделений с одинаковыми значениями реквизитов ""Код OID"".'");
				ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'В следствии чего невозможно однозначно определить значение для заполнения реквизита ""Подразделение"" отделения.'");
				ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			Иначе
				
				ЭлементДанных.Информация = НСтр("ru = 'В информационной базе не существует подразделений с загружаемыми значениями реквизитов ""Код OID"" и ""Код OID"" организации подразделения.'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'В следствии чего невозможно заполнить реквизит ""Подразделение"" отделения.'");
				ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ОтделениеУпразднено = ЗначениеЗаполнено(ЭлементДанных.ДатаУпразднения);
		
		ЭлементДанных.Организация   = НайденныеСтроки[0].Организация;
		ЭлементДанных.Подразделение = НайденныеСтроки[0].Подразделение;
		
		// 2. Поиск отделений по идентификатору.
		Отбор = Новый Структура("Идентификатор");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		НайденныеСтроки = ДанныеСправочникаОтделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация       = НСтр("ru = 'В информационной базе существует несколько отделений с одинаковыми реквизитами ""Код OID"".'");
				ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				ЭлементДанных.КлючСтроки       = ИндексДоступРазрешен;
				
				ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				ЭлементДанных.ДоступЗапрещен  = НайденныеСтроки[0].ДоступЗапрещен;
				
				// Если доступ запрещен - сдвигаем ключ записи в конец.
				Если НайденныеСтроки[0].ДоступЗапрещен Тогда
					ЭлементДанных.КлючСтроки = ИндексДоступЗапрещен;
					ИндексДоступЗапрещен = ИндексДоступЗапрещен - 1;
				Иначе
					ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
					ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				КонецЕсли;
				
				Если ОтделениеУпразднено Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата упразднения отделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если НайденныеСтроки[0].ИдентификаторОрганизации   = ЭлементДанных.ИдентификаторОрганизации
						И НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения
						И НайденныеСтроки[0].Наименование               = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации   = ЭлементДанных.ИдентификаторОрганизации
							И НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Наименование"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значения реквизита ""Наименование"", если загружаемое значение заполнено.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации
							И НайденныеСтроки[0].Наименование             = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Подразделение"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значения реквизита ""Подразделение"".'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Подразделение"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значения реквизита ""Подразделение"".'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторОрганизации = ЭлементДанных.ИдентификаторОрганизации Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к изменению значений реквизитов ""Подразделение"" и ""Наименование"", если загружаемое значение заполнено.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Истина;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и изменению значений реквизитов ""Подразделение"" и ""Наименование"", если загружаемое значение заполнено.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения
							И НайденныеСтроки[0].Наименование               = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Организация"" отличается от загружаемого.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].ИдентификаторПодразделения = ЭлементДанных.ИдентификаторПодразделения Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					ИначеЕсли НайденныеСтроки[0].Наименование = ЭлементДанных.Наименование Тогда
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"" и ""Подразделение"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"" и ""Подразделение"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					Иначе
						
						Если Не ЭлементДанных.ПометкаУдаления Тогда
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значения реквизитов ""Организация"", ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						Иначе
							ЭлементДанных.ЗагрузкаДоступна = Ложь;
							ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значения реквизитов ""Организация"", ""Подразделение"" и ""Наименование"" отличаются от загружаемых.'");
							ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 3. Поиск отделения по наименованию, идентификатору вышестоящего подразделения и организации.
		Отбор = Новый Структура("Наименование, ИдентификаторПодразделения, ИдентификаторОрганизации");
		ЗаполнитьЗначенияСвойств(Отбор, ЭлементДанных);
		Отбор.Вставить("Идентификатор", "");
		НайденныеСтроки = ДанныеСправочникаОтделенияОрганизаций.НайтиСтроки(Отбор);
		
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		Если КоличествоНайденныхСтрок > 0 Тогда
			
			Если КоличествоНайденныхСтрок > 1 Тогда
				
				ЭлементДанных.ЗагрузкаДоступна = Ложь;
				ЭлементДанных.НаличиеДублей    = Истина;
				ЭлементДанных.Информация       = НСтр("ru = 'В информационной базе существует несколько отделений с одинаковыми значениями реквизитов ""Код OID"" организации отделения, ""Код OID"" вышестоящего подразделения отделения и ""Наименование"".'");
				ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
				ЭлементДанных.КлючСтроки       = ИндексДоступРазрешен;
				
				ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				
			Иначе
				
				ЭлементДанных.Ссылка          = НайденныеСтроки[0].Ссылка;
				ЭлементДанных.ПометкаУдаления = НайденныеСтроки[0].ПометкаУдаления;
				ЭлементДанных.ДоступЗапрещен  = НайденныеСтроки[0].ДоступЗапрещен;
				
				// Если доступ запрещен - сдвигаем ключ записи в конец.
				Если НайденныеСтроки[0].ДоступЗапрещен Тогда
					ЭлементДанных.КлючСтроки = ИндексДоступЗапрещен;
					ИндексДоступЗапрещен = ИндексДоступЗапрещен - 1;
				Иначе
					ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
					ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
				КонецЕсли;
				
				Если ОтделениеУпразднено Тогда
					
					ЭлементДанных.Информация = НСтр("ru = 'Получена дата упразднения отделения.'");
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к установке пометки удаления элемента справочника.'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Ложь;
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
					КонецЕсли;
					
				Иначе
					
					Если Не ЭлементДанных.ПометкаУдаления Тогда
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе, но значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к заполнению реквизита ""Код OID"".'");
					Иначе
						ЭлементДанных.ЗагрузкаДоступна = Истина;
						ЭлементДанных.Информация = НСтр("ru = 'Элемент справочника найден, но он помечен на удаление, а так же значение реквизита ""Код OID"" не заполнено.'");
						ЭлементДанных.Информация = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка приведет к снятию пометки удаления и заполнению реквизита ""Код OID"".'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// 4. Отделение не найдено.
		Если ОтделениеУпразднено Тогда
			
			ЭлементДанных.ЗагрузкаДоступна = Ложь;
			ЭлементДанных.Информация       = НСтр("ru = 'Получена дата упразднения отделения.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Элемент справочника не найден в информационной базе.'");
			ЭлементДанных.Информация       = ЭлементДанных.Информация + Символы.ПС + НСтр("ru = 'Загрузка данных невозможна.'");
			
		Иначе
			
			ЭлементДанных.ЗагрузкаДоступна = Истина;
			ЭлементДанных.Информация       = НСтр("ru = 'Загрузка приведет к созданию нового элемента справочника.'");
			
		КонецЕсли;
		
		ЭлементДанных.КлючСтроки = ИндексДоступРазрешен;
		ИндексДоступРазрешен = ИндексДоступРазрешен + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхКлассификатора_Отделения


#КонецОбласти // ПолучениеДанныхКлассификаторов

////////////////////////////////////////////////////////////////////////////////
// Загрузка данных классификатора
#Область ЗагрузкаДанныхКлассификаторов

Функция ПараметрыЗагрузки_ДанныеКлассификатора(ТипКлассификатора, ДанныеКлассификатора) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипКлассификатора", ТипКлассификатора);
	Параметры.Вставить("ДанныеКлассификатора", ДанныеКлассификатора);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗагрузитьЭлементДанныхКлассификатора_ФизическиеЛица(СтрокаКлассификатора, Статусы)
	
	Попытка
		
		ЭлементЗагружен = Не СтрокаКлассификатора.Ссылка.Пустая();
		
		Если ЭлементЗагружен Тогда
			ЭлементКлассификатораОбъект = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ЭлементКлассификатораОбъект);
		Иначе
			ЭлементКлассификатораОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		
		ЭлементКлассификатораОбъект.ИНН                                = СтрокаКлассификатора.ИНН;
		ЭлементКлассификатораОбъект.СНИЛС                              = СтрокаКлассификатора.СНИЛС;
		ЭлементКлассификатораОбъект.КодДолжностиФРМР                   = СтрокаКлассификатора.КодДолжности;
		ЭлементКлассификатораОбъект.ДолжностьФРМР                      = СтрокаКлассификатора.Должность;
		ЭлементКлассификатораОбъект.ВерсияКлассификатораДолжностейФРМР = СтрокаКлассификатора.ВерсияКлассификатораДолжностей;
		ЭлементКлассификатораОбъект.КодДолжности1002                   = СтрокаКлассификатора.КодДолжности1002;
		ЭлементКлассификатораОбъект.КодДолжностиРодителя1002           = СтрокаКлассификатора.КодДолжностиРодителя1002;
		ЭлементКлассификатораОбъект.Должность1002                      = СтрокаКлассификатора.Должность1002;
		ЭлементКлассификатораОбъект.ВерсияКлассификатораДолжностей1002 = СтрокаКлассификатора.ВерсияКлассификатораДолжностей1002;
		ЭлементКлассификатораОбъект.ПометкаУдаления                    = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаКлассификатора.Наименование) Тогда
			ЭлементКлассификатораОбъект.Наименование = СтрокаКлассификатора.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКлассификатора.Пол) Тогда
			ЭлементКлассификатораОбъект.Пол = СтрокаКлассификатора.Пол;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКлассификатора.ДатаРождения) Тогда
			ЭлементКлассификатораОбъект.ДатаРождения = СтрокаКлассификатора.ДатаРождения;
		КонецЕсли;
		
		ЭлементКлассификатораОбъект.Записать();
		ЭлементКлассификатораОбъект.Разблокировать();
		
		СтрокаКлассификатора.Ссылка          = ЭлементКлассификатораОбъект.Ссылка;
		СтрокаКлассификатора.ПометкаУдаления = ЭлементКлассификатораОбъект.ПометкаУдаления;
		
		СтрокаКлассификатора.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
		СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
		
		Если Не ЭлементЗагружен Тогда
			Статусы.Создано = Статусы.Создано + 1;
		Иначе
			Статусы.Обновлено = Статусы.Обновлено + 1;
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Загрузка классификатора ""ФРМР""'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать физическое лицо ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаКлассификатора.Наименование);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЖурналаРегистрации, ИмяСобытия,, УровеньЖурналаРегистрации.Ошибка);
		Статусы.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементДанныхКлассификатора_СтруктурныеПодразделения(СтрокаКлассификатора, Статусы)
	
	Попытка
		
		ЭлементЗагружен = Не СтрокаКлассификатора.Ссылка.Пустая();
		
		Ликвидация = ЗначениеЗаполнено(СтрокаКлассификатора.ДатаЛиквидации);
		
		Если Не ЭлементЗагружен И Ликвидация Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементЗагружен Тогда
			ЭлементКлассификатораОбъект = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ЭлементКлассификатораОбъект);
		Иначе
			ЭлементКлассификатораОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		КонецЕсли;
		
		Если Не Ликвидация Тогда
			ЭлементКлассификатораОбъект.Владелец        = СтрокаКлассификатора.Организация;
			ЭлементКлассификатораОбъект.КодOID          = СтрокаКлассификатора.Идентификатор;
			ЭлементКлассификатораОбъект.ПометкаУдаления = Ложь;
			Если ЗначениеЗаполнено(СтрокаКлассификатора.Наименование) Тогда
				ЭлементКлассификатораОбъект.Наименование       = СтрокаКлассификатора.Наименование;
				ЭлементКлассификатораОбъект.НаименованиеПолное = СтрокаКлассификатора.Наименование;
			КонецЕсли;
		Иначе
			ЭлементКлассификатораОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		
		ЭлементКлассификатораОбъект.Записать();
		ЭлементКлассификатораОбъект.Разблокировать();
		
		СтрокаКлассификатора.Ссылка          = ЭлементКлассификатораОбъект.Ссылка;
		СтрокаКлассификатора.ПометкаУдаления = ЭлементКлассификатораОбъект.ПометкаУдаления;
		
		Если Ликвидация Тогда
			СтрокаКлассификатора.Информация = НСтр("ru = 'Получена дата ликвидации подразделения.'");
			СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
		Иначе
			СтрокаКлассификатора.Информация = НСтр("ru = 'Элемент справочника найден в информационной базе.'");
			СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Обновление не требуется.'");
		КонецЕсли;
		
		Если Не ЭлементЗагружен Тогда
			Статусы.Создано = Статусы.Создано + 1;
		ИначеЕсли Ликвидация Тогда
			Статусы.ПомеченоНаУдаление = Статусы.ПомеченоНаУдаление + 1;
		Иначе
			Статусы.Обновлено = Статусы.Обновлено + 1;
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Загрузка классификатора ""Структурные подразделения""'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать подразделение ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаКлассификатора.Наименование);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЖурналаРегистрации, ИмяСобытия,, УровеньЖурналаРегистрации.Ошибка);
		Статусы.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьЭлементДанныхКлассификатора_Отделения(СтрокаКлассификатора, Статусы)
	
	Попытка
		
		ЭлементЗагружен = Не СтрокаКлассификатора.Ссылка.Пустая();
		
		Упразднение = ЗначениеЗаполнено(СтрокаКлассификатора.ДатаУпразднения);
		
		Если Не ЭлементЗагружен И Упразднение Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементЗагружен Тогда
			ЭлементКлассификатораОбъект = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
			ОбщегоНазначенияБольничнаяАптека.ЗаблокироватьОбъект(ЭлементКлассификатораОбъект);
		Иначе
			ЭлементКлассификатораОбъект = Справочники.ОтделенияОрганизаций.СоздатьЭлемент();
		КонецЕсли;
		
		Если Не Упразднение Тогда
			ЭлементКлассификатораОбъект.Владелец                 = СтрокаКлассификатора.Организация;
			ЭлементКлассификатораОбъект.ПодразделениеОрганизации = СтрокаКлассификатора.Подразделение;
			ЭлементКлассификатораОбъект.КодOID                   = СтрокаКлассификатора.Идентификатор;
			ЭлементКлассификатораОбъект.ПометкаУдаления          = Ложь;
			Если ЗначениеЗаполнено(СтрокаКлассификатора.Наименование) Тогда
				ЭлементКлассификатораОбъект.Наименование       = СтрокаКлассификатора.Наименование;
				ЭлементКлассификатораОбъект.НаименованиеПолное = СтрокаКлассификатора.Наименование;
			КонецЕсли;
		Иначе
			ЭлементКлассификатораОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		
		ЭлементКлассификатораОбъект.Записать();
		ЭлементКлассификатораОбъект.Разблокировать();
		
		СтрокаКлассификатора.Ссылка          = ЭлементКлассификатораОбъект.Ссылка;
		СтрокаКлассификатора.ПометкаУдаления = ЭлементКлассификатораОбъект.ПометкаУдаления;
		
		Если Упразднение Тогда
			СтрокаКлассификатора.Информация = НСтр("ru = 'Получена дата упразднения отделения.'");
			СтрокаКлассификатора.Информация = СтрокаКлассификатора.Информация + Символы.ПС + НСтр("ru = 'Данные уже помечены на удаление.'");
		Иначе
			СтрокаКлассификатора.Информация = НСтр("ru = 'Обновление не требуется.'");
		КонецЕсли;
		
		Если Не ЭлементЗагружен Тогда
			Статусы.Создано = Статусы.Создано + 1;
		ИначеЕсли Упразднение Тогда
			Статусы.ПомеченоНаУдаление = Статусы.ПомеченоНаУдаление + 1;
		Иначе
			Статусы.Обновлено = Статусы.Обновлено + 1;
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Загрузка классификатора ""Отделения""'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Текст = НСтр("ru = 'Не удалось записать отделение ""%1"" по причине:'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаКлассификатора.Наименование);
		
		ТекстЖурналаРегистрации   = Текст + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщенияПользователю = Текст + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьСобытиеВЖурналРегистрации(ТекстЖурналаРегистрации, ИмяСобытия,, УровеньЖурналаРегистрации.Ошибка);
		Статусы.Ошибки.Добавить(ТестСообщенияПользователю);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаДанныхКлассификаторов

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция ПривестиКВнутреннемуТипу(ТекстЗначения, ТипЗначения)
	
	Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения);
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	
	Если ТипЗначения = Тип("Дата") Тогда
		Значение = ПреобразоватьСтрокуВДату(ТекстЗначения);
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Попытка
			Значение = Булево(ТекстЗначения);
		Исключение
			Значение = ЗначениеЗаполнено(ТекстЗначения);
		КонецПопытки;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) И ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗначения) = "Перечисление" Тогда
		Значение = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			ОписаниеТипа.ПривестиЗначение()).Получить(Число(ТекстЗначения) - 1);
	Иначе
		Значение = ОписаниеТипа.ПривестиЗначение(ТекстЗначения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПреобразоватьСтрокуВДату(СтрокаДаты) Экспорт
	
	Результат = '00010101';
	ОписаниеДата = Новый ОписаниеТипов("Дата");
	
	Если Не ПустаяСтрока(СтрокаДаты) Тогда
		Результат = ОписаниеДата.ПривестиЗначение(СтрокаДаты);
		Если Не ЗначениеЗаполнено(Результат) Тогда //Дата не в каноническом виде, будем преобразовывать самостоятельно
			СтрокаРазделителей = ".-/\T+:MSK";
			СтрокаЧисел = "0123456789";
			ДлинаСтроки = СтрДлина(СтрокаДаты);
			МассивЧастейДаты = Новый Массив;
			ВременнаяСтрока = "";
			КоличествоЧастейДаты = 0;
			Для Сч = 1 По ДлинаСтроки Цикл
				СимволСтроки = Сред(СтрокаДаты, Сч, 1);
				Если Найти(СтрокаЧисел, СимволСтроки) Тогда
					ВременнаяСтрока = ВременнаяСтрока + СимволСтроки;
				ИначеЕсли Найти(СтрокаРазделителей, СимволСтроки) Тогда
					Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
						МассивЧастейДаты.Добавить(ВременнаяСтрока);
						ВременнаяСтрока = "";
						КоличествоЧастейДаты = КоличествоЧастейДаты + 1;
					КонецЕсли;
				Иначе
					МассивЧастейДаты.Очистить();
					Прервать; //неверный формат даты
				КонецЕсли;
				Если КоличествоЧастейДаты = 6 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПустаяСтрока(ВременнаяСтрока) Тогда
				МассивЧастейДаты.Добавить(ВременнаяСтрока);
			КонецЕсли;
			Если МассивЧастейДаты.Количество() = 3 Тогда
				Если СтрДлина(МассивЧастейДаты[0]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[0], МассивЧастейДаты[1], МассивЧастейДаты[2]);
				ИначеЕсли СтрДлина(МассивЧастейДаты[2]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				Иначе
					Результат = ПолучитьДату("20" + МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				КонецЕсли;
			ИначеЕсли МассивЧастейДаты.Количество() = 6 Тогда
				Если СтрДлина(МассивЧастейДаты[0]) = 4 Тогда
					Результат = ПолучитьДату(МассивЧастейДаты[0], МассивЧастейДаты[1], МассивЧастейДаты[2], МассивЧастейДаты[3], МассивЧастейДаты[4], МассивЧастейДаты[5]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДату(Год, Месяц, День, Час = 0, Минута = 0, Секунда = 0)
	
	Попытка
		Результат = Дата(Год, Месяц, День, Час, Минута, Секунда);
	Исключение
		Результат = '00010101';
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОИДПодразделения(Параметры, ИмяПодразделения)

	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Параметры);

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыПодключения.АдресWSDL);
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Тогда
		ПараметрыПодключения.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Иначе
		ПараметрыПодключения.ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	ДанныеКлассификатора = WSПрокси.ФабрикаXDTO.Создать(WSПрокси.ФабрикаXDTO.Тип(ПараметрыПодключения.URIПространстваИмен, "listString"));
	
	Ответ = WSПрокси.GetDepartmentOID(Параметры.ИдентификаторОрганизации, ИмяПодразделения);
	
	Возврат Ответ;
	
КонецФункции

Процедура ПолучитьФайлыИзАрхива(ИсходныеДанные, КаталогИзвлечения)
	
	ПотокZip = ИсходныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(ПотокZip);
	ЧтениеZip.ИзвлечьВсе(КаталогИзвлечения);
	ЧтениеZip.Закрыть();
	ПотокZip.Закрыть();
	
КонецПроцедуры

Функция ЗначениеСвойстваОбъектаXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда 
		Результат = ОбъектXDTO[ИмяСвойства];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Знач Комментарий, Знач Событие = "", Знач Данные = Неопределено, Знач Уровень = Неопределено) Экспорт
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(Событие),
		Уровень,
		,
		Данные,
		Комментарий);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации(Уточнение = "")
	
	Событие = НСтр("ru = 'Обмен с сервисом Минздрава РФ'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(Уточнение) Тогда
		Событие = Событие + "." + Уточнение;
	КонецЕсли;
	Возврат Событие;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

// (см. процедуру ОбновлениеИнформационнойБазыБольничнаяАптека.ОперативныеОбработчики)
//
Процедура ОбновитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистровНеразделенно(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПараметрыОбновления.Свойство("РазделенныеОбработчики") Тогда
		
		Обработчик = ПараметрыОбновления.РазделенныеОбработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ОбменССервисомФедеральныхРегистров.ОбновитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров";
		Обработчик.МонопольныйРежим = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// (см. процедуру ОбновлениеИнформационнойБазыБольничнаяАптека.ОперативныеОбработчики)
//
Процедура ОбновитьПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров(ПараметрыОбновления = Неопределено) Экспорт
	
	// ПараметрыОбновления.МонопольныйРежим = Истина устанавливать не нужно.
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров.Получить().Получить();
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("ФиксированнаяСтруктура") Тогда
		Константа = Константы.ПараметрыЗагрузкиДанныхИзСервисаФедеральныхРегистров;
		Менеджер = Константа.СоздатьМенеджерЗначения();
		Константа.Установить(Менеджер.ЗначениеПоУмолчанию());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти