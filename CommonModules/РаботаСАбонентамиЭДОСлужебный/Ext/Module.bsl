
#Область СлужебныеПроцедурыИФункции

// Проверяет наличие учетных записей для идентификаторов абонентов электронного документооборота.
// 
// Параметры:
// 	Идентификаторы - Массив из Строка
// 	КПП - Строка
// Возвращаемое значение:
// 	СписокЗначений:
//    * Значение - Строка - идентификатор абонента
//    * Представление - Строка, ФорматированнаяСтрока - идентификатор абонента
//    * Пометка - Булево - Истина, если у идентификатора имеется учетная запись
Функция НайтиУчетныеЗаписиАбонентов(Знач Идентификаторы, Знач КПП) Экспорт
	
	СписокИдентификаторов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ПОМЕСТИТЬ ИдентификаторыПоКПП
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|ГДЕ
		|	АбонентыЭДО.ИдентификаторЭДО В(&ИдентификаторыЭДО)
		|	И АбонентыЭДО.КПП = &КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НЕ УчетныеЗаписиЭДО.ИдентификаторЭДО ЕСТЬ NULL КАК Существует,
		|	ИдентификаторыПоКПП.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	ИдентификаторыПоКПП КАК ИдентификаторыПоКПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ИдентификаторыПоКПП.ИдентификаторЭДО = УчетныеЗаписиЭДО.ИдентификаторЭДО";
	
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ЗапросУчетныхЗаписей = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	
	Запросы = Новый Массив;
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторыЭДО", Идентификаторы);
	ИтоговыйЗапрос.УстановитьПараметр("КПП",               КПП);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Существует Тогда
			Представление = Новый ФорматированнаяСтрока(ВыборкаДетальныеЗаписи.ИдентификаторЭДО,,
				ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			Пометка       = Истина;
		Иначе 
			Представление = ВыборкаДетальныеЗаписи.ИдентификаторЭДО;
			Пометка       = Ложь;
		КонецЕсли;
		СписокИдентификаторов.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО, Представление, Пометка);
	КонецЦикла;
	
	Возврат СписокИдентификаторов;
	
КонецФункции

Функция НоваяТаблицаФорматов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторЭДО", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("ИдентификаторФорматаВСервисе", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("ВариантЗаполнения" , Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьТаблицуПоддерживаемыхФорматов(ТаблицаФорматов) Экспорт

	Запросы = Новый Массив;
	
	ЗапросФорматов = ЭлектронныеДокументыЭДО.ЗапросФорматовЭлектронныхДокументов("ФорматыЭлектронныхДокументов");
	Запросы.Добавить(ЗапросФорматов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФорматыСервиса.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	ФорматыСервиса.ИдентификаторФорматаВСервисе КАК ИдентификаторСервиса,
		|	ФорматыСервиса.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ ФорматыСервиса
		|ИЗ
		|	&ФорматыСервиса КАК ФорматыСервиса
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСервиса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФорматыСервиса.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	ФорматыСервиса.ВариантЗаполнения КАК ВариантЗаполнения,
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат
		|ИЗ
		|	ФорматыСервиса КАК ФорматыСервиса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО ФорматыСервиса.ИдентификаторСервиса = ФорматыЭлектронныхДокументов.ИдентификаторСервиса
		|ИТОГИ
		|ПО
		|	ИдентификаторЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ФорматыСервиса", ТаблицаФорматов);

	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИдентификаторЭДО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторЭДО.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПоддерживаемыеФорматыЭлектронныхДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(ВыборкаИдентификаторЭДО.ИдентификаторЭДО);

		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		ВыборкаДетальныеЗаписи = ВыборкаИдентификаторЭДО.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		КонецЦикла;

		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСАбонентамиЭДО.ПараметрыСвязиИдентификаторов
// 
// Параметры:
// 	ПараметрыПолучения - см. РаботаСАбонентамиЭДО.НовыеПараметрыПолученияСвязиИдентификаторов
// 	КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 	ОбновитьДанныеАбонентов - Булево
// Возвращаемое значение:
// 	Неопределено, ТаблицаЗначений - с колонками:
// * Контрагент - ОпределяемыйТип.КонтрагентБЭД
// * КонтрагентИНН - Строка
// * КонтрагентКПП - Строка
// * ИдентификаторКонтрагента - Строка
// * ИдентификаторКонтрагентаПредставление - Строка
// * ИдентификаторКонтрагентаОписание - Строка
// * ОператорКонтрагента - Строка
// * ОператорКонтрагентаПредставление - Строка
// * ИдентификаторОрганизации - Строка
// * ИдентификаторОрганизацииПредставление - Строка
// * ОператорОрганизации - Строка
// * ИмяФайлаСоглашенияНаРоуминг - Строка
// * РекомендацияПоНастройке - Строка
// * СтатусПриглашенияПредставление - Строка
// * НавигационнаяСсылкаНаПриглашение - Строка
// * АбонентАктивен - Булево
// * СертификатДействителен - Булево
// * СтатусПодключения - Число
// * ОператорыСовпадают - Булево
// * СвязьДоступна - Булево
// * ОтправкаТолькоНаИдентификаторЭДО - Булево
// * ТребуетсяСоглашение - Булево
// * ТребуетсяНовоеСоглашение - Булево
// * ЭлектроннаяПочта - Строка
// * СписокВыбора - СписокЗначений
// * ВариантПотребностиСоглашения - ПеречислениеСсылка.ВариантыПотребностиСоглашенияНаРоуминг
// * Абоненты - СписокЗначений
Функция ПараметрыСвязиИдентификаторов(ПараметрыПолучения, КонтекстДиагностики = Неопределено,
	ОбновитьДанныеАбонентов = Ложь) Экспорт
	
	ИдентификаторыОрганизации = ПараметрыПолучения.ИдентификаторыОрганизации;
	Контрагент = ПараметрыПолучения.Контрагент;
	ИдентификаторыКонтрагента = ПараметрыПолучения.ИдентификаторыКонтрагента;
	ПриоритетПодключенные = ПараметрыПолучения.ПриоритетПодключенные;
	ПолучатьПочтовыеАдреса = ПараметрыПолучения.ПолучатьПочтовыеАдреса;
	ФормироватьСписокВыбора = ПараметрыПолучения.ФормироватьСписокВыбора;
	ПриоритетПодключенные = ПараметрыПолучения.ПриоритетПодключенные;
	
	ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг = Неопределено;
	
	Если ОбновитьДанныеАбонентов Тогда
		Запросы = Новый Массив;
		
		ОтборКонтрагентов = ИнтеграцияЭДО.НовыйОтборКонтрагентов();
		ОтборКонтрагентов.БезПустыхИНН = Истина;
		
		ЗапросКонтрагентов = 
			ИнтеграцияЭДО.ЗапросКонтрагентов("Контрагенты", "Контрагент", ОтборКонтрагентов);
		
		Получатель = Контрагент;
		Если Тип("Массив") = ТипЗнч(Контрагент)
			И Контрагент.Количество() > 0 Тогда
				Получатель = Контрагент[0];
		КонецЕсли;
				
		Если ИнтеграцияЭДО.ЭтоОрганизация(Получатель) Тогда  
			ЗапросКонтрагентов = 
				ИнтеграцияЭДО.ЗапросОрганизацийПолучателей("Контрагенты", "Контрагент", ОтборКонтрагентов);
		КонецЕсли;
		
		Запросы.Добавить(ЗапросКонтрагентов);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Контрагенты КАК Контрагенты");

		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
		ИтоговыйЗапрос.УстановитьПараметр("Контрагент", Контрагент);

		МассивИНН = ИтоговыйЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИНН");
		Если МассивИНН.Количество() Тогда
			Отбор = РаботаСАбонентамиЭДО.НовыйОтборДанныхАбонентаНастроек();
			Отбор.СписокИНН = МассивИНН;
			РаботаСАбонентамиЭДО.ДанныеАбонентовИзСервисаНастроек(Отбор, КонтекстДиагностики);
		
			НаборОтборовПоКонтрагентам = Новый Массив;
			Для Каждого ИНН Из МассивИНН Цикл
				НоваяСтрокаОтбораПоКонтрагенту = Новый Структура;
				НоваяСтрокаОтбораПоКонтрагенту.Вставить("ИНН", ИНН);
				НаборОтборовПоКонтрагентам.Добавить(НоваяСтрокаОтбораПоКонтрагенту);
			КонецЦикла;
			ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг = СервисНастроекЭДО.ДанныеОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(
				НаборОтборовПоКонтрагентам, Ложь, КонтекстДиагностики);
		КонецЕсли;
	КонецЕсли;
	
	Если ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг = Неопределено Тогда
		ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг = СервисНастроекЭДО.ТаблицаОрганизацийСОбязательнойОтправкойЗаявкиНаРоуминг(); 
	КонецЕсли;
	
	Если Контрагент = Неопределено
		И ТипЗнч(ИдентификаторыКонтрагента) = Тип("ТаблицаЗначений") Тогда
		МассивКонтрагентов = ИдентификаторыКонтрагента.ВыгрузитьКолонку("Контрагент");
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Массив") Тогда
		МассивКонтрагентов = Контрагент;
	Иначе
		МассивКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	КонецЕсли;
	
	МассивЗапросов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ИдентификаторыКонтрагента) Тогда
		
		Если ТипЗнч(ИдентификаторыКонтрагента) = Тип("ТаблицаЗначений") Тогда
			ИдентификаторыПоКонтрагентам = ИдентификаторыКонтрагента;
		Иначе
			ИдентификаторыПоКонтрагентам = ТаблицаИдентификаторовКонтрагента(ИдентификаторыКонтрагента,
				МассивКонтрагентов[0]);
		КонецЕсли;
		
		МассивЗапросов.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИдентификаторыПоКонтрагентам.Контрагент КАК Контрагент,
			|	ИдентификаторыПоКонтрагентам.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ПОДСТРОКА(ИдентификаторыПоКонтрагентам.ИдентификаторКонтрагента,1,3) КАК ОператорКонтрагента,
			|	ЛОЖЬ КАК ВключатьВСписок
			|ПОМЕСТИТЬ ВТ_ИдентификаторыКонтрагентов
			|ИЗ
			|	&ИдентификаторыПоКонтрагентам КАК ИдентификаторыПоКонтрагентам");
		
		Запрос.УстановитьПараметр("ИдентификаторыПоКонтрагентам", ИдентификаторыПоКонтрагентам);
		
	КонецЕсли;
	
	Если ФормироватьСписокВыбора Тогда
		
		МассивЗапросов.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Контрагент,
			|	ЕСТЬNULL(АбонентыЭДО.ИдентификаторЭДО, """") КАК ИдентификаторКонтрагента,
			|	ЕСТЬNULL(АбонентыЭДО.ОператорЭДО, """") КАК ОператорКонтрагента,
			|	ИСТИНА КАК ВключатьВСписок
			|ПОМЕСТИТЬ ВТ_ИдентификаторыКонтрагентов
			|ИЗ
			|	ИмяТаблицыКонтрагенты КАК Контрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
			|		ПО Контрагенты.ИмяРеквизитаИНН = АбонентыЭДО.ИНН
			|		И АбонентыЭДО.ИНН ЕСТЬ НЕ NULL
			|ГДЕ
			|	Контрагенты.Ссылка В (&Контрагенты)");
			
		Запрос.УстановитьПараметр("Контрагенты", МассивКонтрагентов);
		
	КонецЕсли;
	
	КоличествоЗапросов = МассивЗапросов.Количество();
	Если КоличествоЗапросов = 0 Тогда
		Возврат Неопределено;
		
	ИначеЕсли КоличествоЗапросов = 2 Тогда
		
		МассивЗапросов[0] = СтрЗаменить(МассивЗапросов[0],
			"ВТ_ИдентификаторыКонтрагентов", "ВТ_ИдентификаторыПоКонтрагентам");
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВТ_ИдентификаторыПоКонтрагентам.Контрагент КАК Контрагент,
			|	ВТ_ИдентификаторыПоКонтрагентам.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ВТ_ИдентификаторыПоКонтрагентам.ОператорКонтрагента КАК ОператорКонтрагента,
			|	ВТ_ИдентификаторыПоКонтрагентам.ВключатьВСписок КАК ВключатьВСписок
			|ИЗ
			|	ВТ_ИдентификаторыПоКонтрагентам КАК ВТ_ИдентификаторыПоКонтрагентам";
		
		ТекстОбъединитьВсе =
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		
		МассивЗапросов[1] = МассивЗапросов[1] + ТекстОбъединитьВсе + ТекстЗапроса;
		
	КонецЕсли;

	МассивЗапросов.Добавить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг.ИНН КАК ИНН,
		|	ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг.ИдентификаторОператораЭДО КАК ИдентификаторОператораЭДО,
		|	ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг.ТребуетсяЗаявкаНаРоуминг КАК ТребуетсяЗаявкаНаРоуминг
		|ПОМЕСТИТЬ ВТ_ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг
		|ИЗ
		|	&ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг КАК ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг");
	
	Запрос.УстановитьПараметр("ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг", ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг);
	
	ОтборПринятыхПриглашений = ПриглашенияЭДО.НовыйОтборПринятыхПриглашений();
	ОтборПринятыхПриглашений.ИдентификаторыОрганизации = "&ИдентификаторыОрганизации";
	ЗапросПриглашений = ПриглашенияЭДО.ЗапросПринятыхПриглашенийПоОператорам("ВТ_ПриглашенияПоОператорам", ОтборПринятыхПриглашений);
	МассивЗапросов.Добавить(ЗапросПриглашений.Текст);
	
	СоставнойЗапрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ИдентификаторыКонтрагентов.Контрагент КАК Контрагент,
		|	ВТ_ИдентификаторыКонтрагентов.ВключатьВСписок КАК ВключатьВСписок,
		|	Контрагенты.ИмяРеквизитаИНН КАК КонтрагентИНН,
		|	Контрагенты.ИмяРеквизитаКПП КАК КонтрагентКПП,
		|	ВТ_ИдентификаторыКонтрагентов.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЕСТЬNULL(АбонентыЭДО.КраткоеОписание, """") КАК ИдентификаторКонтрагентаКраткоеОписание,
		|	ЕСТЬNULL(АбонентыЭДО.ПодробноеОписание, """") КАК ИдентификаторКонтрагентаОписание,
		|	ЕСТЬNULL(АбонентыЭДО.ИНН, """") КАК АбонентИНН,
		|	ЕСТЬNULL(АбонентыЭДО.КПП, """") КАК АбонентКПП,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации,
		|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК ИдентификаторОрганизацииПредставление,
		|	ЕСТЬNULL(УчетныеЗаписиЭДО.ОператорЭДО, """") КАК ОператорОрганизации,
		|	ЕСТЬNULL(ОператорыЭДО.ИдентификаторОператора, """") КАК ОператорКонтрагента,
		|	ЕСТЬNULL(ОператорыЭДО.Представление, """") КАК ОператорКонтрагентаПредставление,
		|	ЕСТЬNULL(ОператорыЭДО.ДоступноПодключениеЧерез1С, ЛОЖЬ) КАК АбонентВХабе1С,
		|	ЕСТЬNULL(УчетныеЗаписиЭДО.ИмяФайлаСоглашенияНаРоуминг, """") КАК ИмяФайлаСоглашенияНаРоуминг,
		|	ЕСТЬNULL(СовместимостьОператоровЭДО.ПотребностьСоглашения,
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеТребуется)) <> ЗНАЧЕНИЕ(Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеТребуется) КАК
		|		ТребуетсяСоглашение,
		|	ЕСТЬNULL(СовместимостьОператоровЭДО.РекомендацияПоНастройке, """") КАК РекомендацияПоНастройке,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаИдентификаторы.ИдентификаторКонтрагента ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ПриглашенияШироковещательные.ИдентификаторКонтрагента ЕСТЬ NULL
		|					ТОГДА ВЫБОР
		|						КОГДА ВТ_ПриглашенияПоОператорам.ИдентификаторКонтрагента ЕСТЬ NULL
		|							ТОГДА """"
		|						ИНАЧЕ ВТ_ПриглашенияПоОператорам.ИдентификаторКонтрагента
		|					КОНЕЦ
		|				ИНАЧЕ ПриглашенияШироковещательные.ИдентификаторКонтрагента
		|			КОНЕЦ
		|		ИНАЧЕ ПриглашенияНаИдентификаторы.ИдентификаторКонтрагента
		|	КОНЕЦ КАК ИдентификаторКонтрагентаВПриглашении,
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ПриглашенияНаИдентификаторы.Статус, ЕСТЬNULL(ПриглашенияШироковещательные.Статус,
		|		ЕСТЬNULL(ВТ_ПриглашенияПоОператорам.Статус, """")))) КАК СтатусПриглашенияСтрокой,
		|	ВЫБОР
		|		КОГДА НЕ ПриглашенияНаИдентификаторы.Статус ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ПриглашенияНаИдентификаторы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
		|					ТОГДА 3
		|				КОГДА ПриглашенияНаИдентификаторы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ОжидаемСогласия),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяСогласие))
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		КОГДА НЕ ПриглашенияШироковещательные.Статус ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ПриглашенияШироковещательные.ОператорЭДО <> """"
		|				И НЕ ОператорыЭДО.ИдентификаторОператора ЕСТЬ NULL
		|				И ПриглашенияШироковещательные.ОператорЭДО <> ОператорыЭДО.ИдентификаторОператора
		|				ИЛИ ПриглашенияШироковещательные.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Ошибка))
		|					ТОГДА 0
		|				КОГДА ОператорыЭДО.ИдентификаторОператора = УчетныеЗаписиЭДО.ОператорЭДО
		|				И ВТ_ИдентификаторыКонтрагентов.ИдентификаторКонтрагента <> ОператорыЭДО.ИдентификаторОператора
		|					ТОГДА 2
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|		КОГДА НЕ ЗаявкиНаРоуминг.Статус ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ЗаявкиНаРоуминг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
		|					ТОГДА 3
		|				КОГДА ЗаявкиНаРоуминг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.НастройкаРоуминга)
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусПодключения,
		|	ЕСТЬNULL(ОператорыЭДО.ИдентификаторОператора = УчетныеЗаписиЭДО.ОператорЭДО, ЛОЖЬ) КАК ОператорыСовпадают,
		|	ЕСТЬNULL(СовместимостьОператоровЭДО.СвязьДоступна
		|	И НЕ СовместимостьОператоровЭДО.ДоступныШироковещательныеПриглашения, ЛОЖЬ) КАК ОтправкаТолькоНаИдентификаторЭДО,
		|	ВЫБОР СовместимостьОператоровЭДО.СвязьДоступна
		|		КОГДА ИСТИНА
		|			ТОГДА 1
		|		КОГДА ЛОЖЬ
		|			ТОГДА 0
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СвязьДоступна,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(АбонентыЭДО.ДатаПоследнейАктивности, &ПустаяДата) = &ПустаяДата
		|			ТОГДА 1
		|		КОГДА АбонентыЭДО.ДатаПоследнейАктивности >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2)
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК АбонентАктивен,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(АбонентыЭДО.СрокДействияСертификатов, &ПустаяДата) = &ПустаяДата
		|			ТОГДА 1
		|		КОГДА АбонентыЭДО.СрокДействияСертификатов >= &ТекущаяДата
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СертификатДействителен,
		|	ЕСТЬNULL(СовместимостьОператоровЭДО.ПотребностьСоглашения,
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеТребуется)) <> ЗНАЧЕНИЕ(Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеТребуется)
		|	И (ЕСТЬNULL(УчетныеЗаписиЭДО.ИмяФайлаСоглашенияНаРоуминг, """") = """"
		|	ИЛИ ЕСТЬNULL(УчетныеЗаписиЭДО.ДатаСоглашенияНаРоуминг, &ПустаяДата) < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ,
		|		ЕСТЬNULL(-ОператорыЭДО.СрокДействияСоглашенияНаРоуминг, 0))) КАК ТребуетсяНовоеСоглашение,
		|	ЕСТЬNULL(СовместимостьОператоровЭДО.ПотребностьСоглашения,
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыПотребностиСоглашенияНаРоуминг.НеТребуется)) КАК ВариантПотребностиСоглашения,
		|	ЕСТЬNULL(СовместимостьОператоровЭДО.ТребуетсяСоглашениеПриПервомПодключении, ЛОЖЬ) КАК
		|		ТребуетсяСоглашениеПриПервомПодключении,
		|	ЕСТЬNULL(ВТ_ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг.ТребуетсяЗаявкаНаРоуминг, ЛОЖЬ) КАК
		|		ОбязательнаяОтправкаЗаявкиНаРоуминг,
		|	ВЫБОР
		|		КОГДА ВТ_ПриглашенияПоОператорам.Статус ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаявкаНаРоумингПринята,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаИдентификаторы.Статус ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ПриглашенияШироковещательные.Статус ЕСТЬ NULL
		|					ТОГДА ВЫБОР
		|						КОГДА ЗаявкиНаРоуминг.Статус ЕСТЬ NULL
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ЗаявкиНаРоуминг.Статус В (&СтатусыОтправленногоПриглашения)
		|					КОНЕЦ
		|				ИНАЧЕ ПриглашенияШироковещательные.Статус В (&СтатусыОтправленногоПриглашения)
		|			КОНЕЦ
		|		ИНАЧЕ ПриглашенияНаИдентификаторы.Статус В (&СтатусыОтправленногоПриглашения)
		|	КОНЕЦ КАК ПриглашениеОтправлено,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаИдентификаторы.КлючПриглашения ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ПриглашенияШироковещательные.КлючПриглашения ЕСТЬ NULL
		|					ТОГДА ВЫБОР
		|						КОГДА ЗаявкиНаРоуминг.КлючПриглашения ЕСТЬ NULL
		|							ТОГДА """"
		|						ИНАЧЕ ЗаявкиНаРоуминг.КлючПриглашения
		|					КОНЕЦ
		|				ИНАЧЕ ПриглашенияШироковещательные.КлючПриглашения
		|			КОНЕЦ
		|		ИНАЧЕ ПриглашенияНаИдентификаторы.КлючПриглашения
		|	КОНЕЦ КАК КлючПриглашения,
		|	ЕСТЬNULL(ПриглашенияНаИдентификаторы.Статус, &СтатусПриглашенияПустаяСсылка) КАК СтатусПриглашенияНаИдентификатор,
		|	ЕСТЬNULL(ПриглашенияШироковещательные.Статус, &СтатусПриглашенияПустаяСсылка) КАК
		|		СтатусШироковещательногоПриглашения,
		|	ЕСТЬNULL(ЗаявкиНаРоуминг.Статус, &СтатусПриглашенияПустаяСсылка) КАК СтатусЗаявкиНаРоуминг
		|ИЗ
		|	ВТ_ИдентификаторыКонтрагентов КАК ВТ_ИдентификаторыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыКонтрагенты КАК Контрагенты
		|		ПО ВТ_ИдентификаторыКонтрагентов.Контрагент = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|		ПО ВТ_ИдентификаторыКонтрагентов.ИдентификаторКонтрагента = АбонентыЭДО.ИдентификаторЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОператорыЭДО КАК ОператорыЭДО
		|		ПО ВТ_ИдентификаторыКонтрагентов.ОператорКонтрагента = ОператорыЭДО.ИдентификаторОператора
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторыОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|		ПО УчетныеЗаписиЭДО.ОператорЭДО = СовместимостьОператоровЭДО.Оператор1
		|		И ОператорыЭДО.ИдентификаторОператора = СовместимостьОператоровЭДО.Оператор2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриглашенияНаИдентификаторы КАК ПриглашенияНаИдентификаторы
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = ПриглашенияНаИдентификаторы.ИдентификаторОрганизации
		|		И ВТ_ИдентификаторыКонтрагентов.ИдентификаторКонтрагента = ПриглашенияНаИдентификаторы.ИдентификаторКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриглашенияШироковещательные КАК ПриглашенияШироковещательные
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = ПриглашенияШироковещательные.ИдентификаторОрганизации
		|		И Контрагенты.ИмяРеквизитаИНН = ПриглашенияШироковещательные.ИНН
		|		И Контрагенты.ИмяРеквизитаКПП = ПриглашенияШироковещательные.КПП
		|		И ПриглашенияШироковещательные.ОператорЭДО = """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг КАК
		|			ВТ_ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг
		|		ПО Контрагенты.ИмяРеквизитаИНН = ВТ_ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг.ИНН
		|		И &ОтборПоОператоруОбязательнаяОтправка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриглашенияПоОператорам КАК ВТ_ПриглашенияПоОператорам
		|		ПО ВТ_ИдентификаторыКонтрагентов.ОператорКонтрагента = ВТ_ПриглашенияПоОператорам.ОператорЭДО
		|		И УчетныеЗаписиЭДО.ИдентификаторЭДО = ВТ_ПриглашенияПоОператорам.ИдентификаторОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиНаРоуминг КАК ЗаявкиНаРоуминг
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = ЗаявкиНаРоуминг.ИдентификаторОрганизации
		|		И Контрагенты.ИмяРеквизитаИНН = ЗаявкиНаРоуминг.ИНН
		|		И Контрагенты.ИмяРеквизитаКПП = ЗаявкиНаРоуминг.КПП
		|		И ВТ_ИдентификаторыКонтрагентов.ОператорКонтрагента = ЗаявкиНаРоуминг.ОператорЭДО
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ВключатьВСписок,
		|	СтатусПодключения УБЫВ,
		|	ОператорыСовпадают УБЫВ,
		|	СвязьДоступна УБЫВ,
		|	АбонентАктивен УБЫВ,
		|	СертификатДействителен УБЫВ,
		|	ТребуетсяНовоеСоглашение,
		|	АбонентыЭДО.ДатаПоследнейАктивности УБЫВ");
	
	ЗапросыСоставногоЗапроса = Новый Массив;
	
	ЗапросОператоры = СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО");

	ОтборПриглашенийНаИдентификаторы = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашенийНаИдентификаторы.Тип = "&ТипПриглашенияНаИдентификатор";
	ЗапросПриглашенияНаИдентификаторы = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияНаИдентификаторы", ОтборПриглашенийНаИдентификаторы);

	ОтборПриглашенийШироковещательных = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборПриглашенийШироковещательных.Тип = "&ТипПриглашенияШироковещательное";
	ЗапросПриглашенияШироковещательные = ПриглашенияЭДО.ЗапросПриглашений("ПриглашенияШироковещательные", ОтборПриглашенийШироковещательных);

	ОтборЗаявокНаРоуминг = ПриглашенияЭДО.НовыйОтборПриглашений();
	ОтборЗаявокНаРоуминг.Тип = "&ТипПриглашенияЗаявкаНаРоуминг";
	ЗапросПриглашенияЗаявкиНаРоуминг = ПриглашенияЭДО.ЗапросПриглашений("ЗаявкиНаРоуминг", ОтборЗаявокНаРоуминг);

	ЗапросСовместимостьОператоровЭДО = СервисНастроекЭДО.ЗапросСовместимостиОператоровЭДО("СовместимостьОператоровЭДО");
	ОтборУчетныхЗаписей = УчетныеЗаписиЭДО.НовыйОтборУчетныхЗаписей();
	ЗапросУчетныеЗаписи = УчетныеЗаписиЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	
	ЗапросыСоставногоЗапроса.Добавить(ЗапросОператоры);
	ЗапросыСоставногоЗапроса.Добавить(ЗапросПриглашенияНаИдентификаторы);
	ЗапросыСоставногоЗапроса.Добавить(ЗапросПриглашенияШироковещательные);
	ЗапросыСоставногоЗапроса.Добавить(ЗапросПриглашенияЗаявкиНаРоуминг);
	ЗапросыСоставногоЗапроса.Добавить(ЗапросСовместимостьОператоровЭДО);
	ЗапросыСоставногоЗапроса.Добавить(ЗапросУчетныеЗаписи);
	ИтоговыйСоставнойЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(СоставнойЗапрос, ЗапросыСоставногоЗапроса);
	
	МассивЗапросов.Добавить(ИтоговыйСоставнойЗапрос.Текст);
	
	Для Каждого Параметр Из ИтоговыйСоставнойЗапрос.Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ИмяРеквизитаИНН = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКПП = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ИмяТаблицыКонтрагенты = ОбщегоНазначения.ИмяТаблицыПоСсылке(
		?(ЗначениеЗаполнено(ИдентификаторыКонтрагента), ИдентификаторыПоКонтрагентам[0].Контрагент, МассивКонтрагентов[0]));
	
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяРеквизитаИНН", ИмяРеквизитаИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяРеквизитаКПП", ИмяРеквизитаКПП);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыКонтрагенты", ИмяТаблицыКонтрагенты);
	Если ТипЗнч(ИдентификаторыОрганизации) <> Тип("Массив") Тогда
		Запрос.УстановитьПараметр("ИдентификаторыОрганизации", ИдентификаторыОрганизации);
	ИначеЕсли ИдентификаторыОрганизации.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("ИдентификаторыОрганизации", "");
	ИначеЕсли ИдентификаторыОрганизации.Количество() = 1 Тогда
		Запрос.УстановитьПараметр("ИдентификаторыОрганизации", ИдентификаторыОрганизации[0]);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &ИдентификаторыОрганизации", "В (&ИдентификаторыОрганизации)");
		Запрос.УстановитьПараметр("ИдентификаторыОрганизации", ИдентификаторыОрганизации);
	КонецЕсли;
	
	Если Не ПриоритетПодключенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтатусПодключения УБЫВ", "СтатусПодключения");
	КонецЕсли;
	
	Если ТребуетсяОтборПоОператоруОбязательнаяОтправка(ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ОтборПоОператоруОбязательнаяОтправка", 
			"ВТ_ИдентификаторыКонтрагентов.ОператорКонтрагента = ВТ_ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг.ИдентификаторОператораЭДО");
	Иначе
		Запрос.УстановитьПараметр("ОтборПоОператоруОбязательнаяОтправка", Истина);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяУниверсальнаяДата() + СмещениеСтандартногоВремени("GMT+3");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Запрос.УстановитьПараметр("ТипПриглашенияНаИдентификатор", Перечисления.ТипыПриглашений.НаИдентификатор);
	Запрос.УстановитьПараметр("ТипПриглашенияШироковещательное", Перечисления.ТипыПриглашений.Широковещательное);
	Запрос.УстановитьПараметр("ТипПриглашенияЗаявкаНаРоуминг", Перечисления.ТипыПриглашений.ЗаявкаНаРоуминг);
	
	СтатусыОтправленногоПриглашения = Новый Массив();
	СтатусыОтправленногоПриглашения.Добавить(Перечисления.СтатусыПриглашений.Принято);
	СтатусыОтправленногоПриглашения.Добавить(Перечисления.СтатусыПриглашений.ОжидаемСогласия);
	СтатусыОтправленногоПриглашения.Добавить(Перечисления.СтатусыПриглашений.НастройкаРоуминга);
	Запрос.УстановитьПараметр("СтатусыОтправленногоПриглашения", СтатусыОтправленногоПриглашения);
	Запрос.УстановитьПараметр("СтатусПриглашенияПустаяСсылка", Перечисления.СтатусыПриглашений.ПустаяСсылка());
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСвязи = Новый ТаблицаЗначений;
	
	ПараметрыСвязи.Колонки.Добавить("Контрагент");
	ПараметрыСвязи.Колонки.Добавить("КонтрагентИНН");
	ПараметрыСвязи.Колонки.Добавить("КонтрагентКПП");
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторКонтрагента");
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторКонтрагентаПредставление");
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторКонтрагентаОписание");
	ПараметрыСвязи.Колонки.Добавить("ОператорКонтрагента");
	ПараметрыСвязи.Колонки.Добавить("ОператорКонтрагентаПредставление");
	ПараметрыСвязи.Колонки.Добавить("АбонентВХабе1С");
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторОрганизации");
	ПараметрыСвязи.Колонки.Добавить("ИдентификаторОрганизацииПредставление");
	ПараметрыСвязи.Колонки.Добавить("ОператорОрганизации");
	ПараметрыСвязи.Колонки.Добавить("ИмяФайлаСоглашенияНаРоуминг");
	ПараметрыСвязи.Колонки.Добавить("РекомендацияПоНастройке");
	ПараметрыСвязи.Колонки.Добавить("СтатусПриглашенияПредставление");
	ПараметрыСвязи.Колонки.Добавить("НавигационнаяСсылкаНаПриглашение");
	ПараметрыСвязи.Колонки.Добавить("АбонентАктивен");
	ПараметрыСвязи.Колонки.Добавить("СертификатДействителен");
	ПараметрыСвязи.Колонки.Добавить("СтатусПодключения");
	ПараметрыСвязи.Колонки.Добавить("ОператорыСовпадают");
	ПараметрыСвязи.Колонки.Добавить("СвязьДоступна");
	ПараметрыСвязи.Колонки.Добавить("ОтправкаТолькоНаИдентификаторЭДО");
	ПараметрыСвязи.Колонки.Добавить("ТребуетсяСоглашение");
	ПараметрыСвязи.Колонки.Добавить("ТребуетсяНовоеСоглашение");
	ПараметрыСвязи.Колонки.Добавить("ЭлектроннаяПочта");
	ПараметрыСвязи.Колонки.Добавить("СписокВыбора");
	ПараметрыСвязи.Колонки.Добавить("ВариантПотребностиСоглашения");
	ПараметрыСвязи.Колонки.Добавить("Абоненты");
	ПараметрыСвязи.Колонки.Добавить("ТребуетсяСоглашениеПриПервомПодключении");
	ПараметрыСвязи.Колонки.Добавить("ОбязательнаяОтправкаЗаявкиНаРоуминг");
	ПараметрыСвязи.Колонки.Добавить("ЗаявкаНаРоумингПринята");
	ПараметрыСвязи.Колонки.Добавить("ПриглашениеОтправлено");
	ПараметрыСвязи.Колонки.Добавить("СтатусПриглашенияНаИдентификатор");
	ПараметрыСвязи.Колонки.Добавить("СтатусШироковещательногоПриглашения");
	ПараметрыСвязи.Колонки.Добавить("СтатусЗаявкиНаРоуминг");
	
	КонтрагентыПоЭлектроннойПочте = Новый Соответствие;
	ТекущийКонтрагент = Неопределено;
	УникальныеЗначения = Новый Соответствие;
	ТекущийИдентификаторОрганизации = Неопределено;
	ЕстьСвойАбонент = Ложь;
	ПерезаполнитьТекущиеПараметрыСвязи = Ложь;
	
	ФормироватьПредставлениеСтатусаПриглашения = МассивКонтрагентов.Количество() = 1;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийКонтрагент <> Выборка.Контрагент Тогда
			УникальныеЗначения = Новый Соответствие;
			ЕстьСвойАбонент = Ложь;
			ПерезаполнитьТекущиеПараметрыСвязи = Истина;
			НоваяСтрока = ПараметрыСвязи.Добавить();
			Если ФормироватьСписокВыбора Тогда
				НоваяСтрока.СписокВыбора = Новый СписокЗначений;
				ТекущийИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			КонецЕсли;
			НоваяСтрока.Абоненты = Новый СписокЗначений;
		КонецЕсли;
		
		ЭтоСвойАбонент = (Выборка.КонтрагентИНН = Выборка.АбонентИНН) И (Выборка.КонтрагентКПП = Выборка.АбонентКПП);
		Если Не ЕстьСвойАбонент И ЭтоСвойАбонент Тогда
			ЕстьСвойАбонент = Истина;
			Если ФормироватьСписокВыбора Тогда
				НоваяСтрока.СписокВыбора = Новый СписокЗначений;
			КонецЕсли;
			НоваяСтрока.Абоненты = Новый СписокЗначений;
			ПерезаполнитьТекущиеПараметрыСвязи = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторКонтрагента) 
			И ЗначениеЗаполнено(Выборка.АбонентИНН) И ЗначениеЗаполнено(Выборка.АбонентКПП)
			И (ЭтоСвойАбонент ИЛИ Не ЕстьСвойАбонент) Тогда
			Абонент = Новый Структура("Идентификатор,ИНН,КПП", 
				Выборка.ИдентификаторКонтрагента, Выборка.АбонентИНН, Выборка.АбонентКПП);
			НоваяСтрока.Абоненты.Добавить(Абонент, Выборка.ИдентификаторКонтрагента + " " + Выборка.АбонентИНН + "/" + Выборка.АбонентКПП);
		КонецЕсли;
		
		ИдентификаторКонтрагентаПредставление = ПредставлениеИдентификатораКонтрагента(
			Выборка.ИдентификаторКонтрагента, Выборка.ИдентификаторКонтрагентаКраткоеОписание);
		
		Если Не ЭтоСвойАбонент Тогда
			ИдентификаторКонтрагентаПредставление = ИдентификаторКонтрагентаПредставление
				+ " " +  СтрШаблон(НСтр("ru = '/КПП: %1'"), Выборка.АбонентКПП);
		КонецЕсли;
		
		Если Выборка.ВключатьВСписок
			И (ЭтоСвойАбонент ИЛИ Не ЕстьСвойАбонент)
			И ЗначениеЗаполнено(Выборка.ИдентификаторКонтрагента)
			И ТекущийИдентификаторОрганизации = Выборка.ИдентификаторОрганизации
			И УникальныеЗначения[Выборка.ИдентификаторКонтрагента] = Неопределено Тогда
			УникальныеЗначения.Вставить(Выборка.ИдентификаторКонтрагента, Истина);
			
			Если ФормироватьСписокВыбора И ТипЗнч(НоваяСтрока.СписокВыбора) = Тип("СписокЗначений") Тогда
				НоваяСтрока.СписокВыбора.Добавить(
					Выборка.ИдентификаторКонтрагента, ИдентификаторКонтрагентаПредставление,,
					СинхронизацияЭДО.КартинкаСтатусаПодключенияАбонента(Выборка.СтатусПодключения));
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПерезаполнитьТекущиеПараметрыСвязи Тогда
			Продолжить;
		КонецЕсли;
		
		ПерезаполнитьТекущиеПараметрыСвязи = Ложь;
		
		ТекущийКонтрагент = Выборка.Контрагент;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторКонтрагентаПредставление = ИдентификаторКонтрагентаПредставление;
		
		Если ФормироватьПредставлениеСтатусаПриглашения Тогда
			
			Если ЗначениеЗаполнено(Выборка.КлючПриглашения)
				И ЗначениеЗаполнено(Выборка.ИдентификаторОрганизации) Тогда
				
				КлючПриглашения = ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения();
				КлючПриглашения.Ключ = Выборка.КлючПриглашения;
				КлючПриглашения.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
				
				КлючЗаписиПриглашения = ПриглашенияЭДО.КлючЗаписиПриглашения(КлючПриглашения);
				НоваяСтрока.НавигационнаяСсылкаНаПриглашение = ПолучитьНавигационнуюСсылку(КлючЗаписиПриглашения);
				
				НоваяСтрока.СтатусПриглашенияПредставление = СтроковыеФункции.ФорматированнаяСтрока(
					"<a href='%1'>%2</a>", НоваяСтрока.НавигационнаяСсылкаНаПриглашение,
					Выборка.СтатусПриглашенияСтрокой);
			Иначе
				НоваяСтрока.СтатусПриглашенияПредставление = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<b>Не отправлено</b>'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолучатьПочтовыеАдреса Тогда
			КонтрагентыПоЭлектроннойПочте.Вставить(Выборка.Контрагент, НоваяСтрока);
		КонецЕсли;
		
		Если НоваяСтрока.СтатусПодключения = 3 Тогда
			НоваяСтрока.ТребуетсяСоглашениеПриПервомПодключении = Ложь;
		ИначеЕсли НоваяСтрока.ТребуетсяСоглашениеПриПервомПодключении И Не НоваяСтрока.ЗаявкаНаРоумингПринята Тогда
			НоваяСтрока.СтатусПодключения = 0;
		КонецЕсли;
		
		Если (НоваяСтрока.ТребуетсяСоглашениеПриПервомПодключении И Не НоваяСтрока.ЗаявкаНаРоумингПринята)
			Или НоваяСтрока.ОбязательнаяОтправкаЗаявкиНаРоуминг Тогда
			
			НоваяСтрока.ВариантПотребностиСоглашения = Перечисления.ВариантыПотребностиСоглашенияНаРоуминг.Обязательно;
			НоваяСтрока.ТребуетсяСоглашение = Истина;
			НоваяСтрока.СвязьДоступна = 0;
		ИначеЕсли НоваяСтрока.ТребуетсяСоглашениеПриПервомПодключении И НоваяСтрока.ЗаявкаНаРоумингПринята Тогда
			НоваяСтрока.ТребуетсяСоглашение = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КонтрагентыПоЭлектроннойПочте.Количество() = 0 Тогда
		Возврат ПараметрыСвязи;
	КонецЕсли;
		
	МассивКонтрагентов = Новый Массив;
	Для Каждого ЭлементКоллекции Из КонтрагентыПоЭлектроннойПочте Цикл
		МассивКонтрагентов.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивКонтрагентов, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, ТекущаяДатаСеанса());
	
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат ПараметрыСвязи;
	КонецЕсли;
	
	КонтактнаяИнформация.Сортировать("Объект");
	
	ТекущийКонтрагент = Неопределено;
	
	Для Каждого ЭлектроннаяПочта Из КонтактнаяИнформация Цикл
		
		Если Не ЗначениеЗаполнено(ЭлектроннаяПочта.Представление)
			Или Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
				ЭлектроннаяПочта.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПараметров = КонтрагентыПоЭлектроннойПочте[ЭлектроннаяПочта.Объект];
		СтрокаПараметров.СписокВыбора.Добавить(ЭлектроннаяПочта.Представление);
		
		Если ТекущийКонтрагент = ЭлектроннаяПочта.Объект Тогда
			Продолжить;
		Иначе
			ТекущийКонтрагент = ЭлектроннаяПочта.Объект;
		КонецЕсли;
		
		СтрокаПараметров.ЭлектроннаяПочта = ЭлектроннаяПочта.Представление;
		
	КонецЦикла;
	
	Возврат ПараметрыСвязи;
	
КонецФункции

Функция ТаблицаИдентификаторовКонтрагента(Знач Идентификаторы, Знач Контрагент)
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	ИдентификаторыПоКонтрагентам = Новый ТаблицаЗначений;
	ИдентификаторыПоКонтрагентам.Колонки.Добавить("Контрагент",
		Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Контрагент))));
	ИдентификаторыПоКонтрагентам.Колонки.Добавить("ИдентификаторКонтрагента",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдентификаторыПоКонтрагентам;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ИдентификаторыПоКонтрагентам.Добавить();
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.ИдентификаторКонтрагента = Идентификатор;
	КонецЦикла;
	
	Возврат ИдентификаторыПоКонтрагентам;
	
КонецФункции

Функция ПредставлениеИдентификатораКонтрагента(Идентификатор, КраткоеОписание)
	
	Если ЗначениеЗаполнено(КраткоеОписание) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (%2)'"), Идентификатор, КраткоеОписание);
	Иначе
		Представление = Идентификатор;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Обновляет состояния подключения контрагентов к сервису 1С-ЭДО.
// 
// Параметры:
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентБЭД
Процедура ОбновитьСостоянияКонтрагентов(Контрагенты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ЕСТЬNULL(ПриглашенияРеквизитыКонтрагента.Статус, &СтатусПриглашенияОтклонено) КАК СтатусПриглашения
		|ПОМЕСТИТЬ Приглашения
		|ИЗ
		|	&ИмяПрикладногоСправочника КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияРеквизитыКонтрагента
		|		ПО Контрагенты.ИННПереопределяемый = ПриглашенияРеквизитыКонтрагента.ИНН
		|		И Контрагенты.КПППереопределяемый = ПриглашенияРеквизитыКонтрагента.КПП
		|ГДЕ
		|	Контрагенты.Ссылка В (&Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ВЫБОР
		|		КОГДА Абоненты.ИдентификаторЭДО ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|			КОГДА Приглашения.СтатусПриглашения = &СтатусПриглашенияОтклонено
		|			ИЛИ Приглашения.СтатусПриглашения = &СтатусПриглашенияОшибка
		|				ТОГДА 2
		|			ИНАЧЕ 3
		|		КОНЕЦ
		|	КОНЕЦ КАК КодСостояния
		|ПОМЕСТИТЬ КонтрагентыИКодыСостоянияПодключения
		|ИЗ
		|	&ИмяПрикладногоСправочника КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АбонентыЭДО КАК Абоненты
		|		ПО Контрагенты.ИННПереопределяемый = Абоненты.ИНН
		|		И Контрагенты.КПППереопределяемый = Абоненты.КПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
		|		ПО Контрагенты.Ссылка = Приглашения.Контрагент
		|ГДЕ
		|	Контрагенты.Ссылка В (&Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыИКодыСостоянияПодключения.Контрагент КАК Контрагент,
		|	МАКСИМУМ(КонтрагентыИКодыСостоянияПодключения.КодСостояния) КАК КодСостояния
		|ИЗ
		|	КонтрагентыИКодыСостоянияПодключения КАК КонтрагентыИКодыСостоянияПодключения
		|СГРУППИРОВАТЬ ПО
		|	КонтрагентыИКодыСостоянияПодключения.Контрагент";
	

	ИмяПрикладногоСправочника = ИнтеграцияЭДО.ИмяПрикладногоСправочника("Контрагенты");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПрикладногоСправочника", "Справочник." + ИмяПрикладногоСправочника);	

	ИмяРеквизитаИННКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИННПереопределяемый", ИмяРеквизитаИННКонтрагента);

	ИмяРеквизитаКППКонтрагента = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КПППереопределяемый", ИмяРеквизитаКППКонтрагента);
	
	Запрос.УстановитьПараметр("Ссылка", Контрагенты);
	Запрос.УстановитьПараметр("СтатусПриглашенияОшибка", Перечисления.СтатусыПриглашений.Ошибка);
	Запрос.УстановитьПараметр("СтатусПриглашенияОтклонено", Перечисления.СтатусыПриглашений.Отклонено);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КодыИСостоянияПодключения = КодыИСостоянияКонтрагентов(Истина);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовоеСостояние = КодыИСостоянияПодключения[ВыборкаДетальныеЗаписи.КодСостояния];

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.СостоянияКонтрагентовБЭД";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Контрагент", ВыборкаДетальныеЗаписи.Контрагент);
		Блокировка.Заблокировать();

		ЗаписьСостоянияКонтрагента = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьМенеджерЗаписи();
		ЗаписьСостоянияКонтрагента.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		
		ЗаписьСостоянияКонтрагента.Прочитать();
		Если ЗаписьСостоянияКонтрагента.Выбран()
			И ЗаписьСостоянияКонтрагента.Состояние <> НовоеСостояние Тогда

				ЗаписьСостоянияКонтрагента.Состояние = НовоеСостояние;
				ЗаписьСостоянияКонтрагента.Записать();
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция КодыИСостоянияКонтрагентов(ПоместитьВСоответствие = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;

	КЧ1 = Новый КвалификаторыЧисла(1);
	Результат.Колонки.Добавить("Код", Новый ОписаниеТипов("Число",,, КЧ1));

	Результат.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	
	ДобавитьСоответствиеКодаИСостоянияКонтрагента(Результат, 1, Перечисления.СостоянияКонтрагентаБЭД.НеПодключен); 
	ДобавитьСоответствиеКодаИСостоянияКонтрагента(Результат, 2, Перечисления.СостоянияКонтрагентаБЭД.Подключен); 
	ДобавитьСоответствиеКодаИСостоянияКонтрагента(Результат, 3, Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО); 
	
	Если ПоместитьВСоответствие Тогда
		КодыИСостояния = Новый Соответствие;
		Для Каждого Строка Из Результат Цикл
			КодыИСостояния.Вставить(Строка.Код, Строка.Состояние);
		КонецЦикла;
		
		Результат = КодыИСостояния;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСоответствиеКодаИСостоянияКонтрагента(Таблица, Код, Состояние)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Код = Код;
	НоваяСтрока.Состояние = Состояние;
	
КонецПроцедуры

Функция ТребуетсяОтборПоОператоруОбязательнаяОтправка(ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг)
	
	Результат = Ложь;

	Для Каждого Строка Из ОрганизацииСОбязательнойОтправкойЗаявкиНаРоуминг Цикл
		Если ЗначениеЗаполнено(Строка.ИдентификаторОператораЭДО) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти